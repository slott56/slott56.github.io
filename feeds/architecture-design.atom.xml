<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>S.Lott -- Software Architect - Architecture &amp; Design</title><link href="https://slott56.github.io/" rel="alternate"></link><link href="/feeds/architecture-design.atom.xml" rel="self"></link><id>https://slott56.github.io/</id><updated>2023-02-14T08:00:00-05:00</updated><entry><title>Jupyter Notebook for Tide Table Analysis</title><link href="https://slott56.github.io/2023_02_14-tide_table_analysis.html" rel="alternate"></link><published>2023-02-14T08:00:00-05:00</published><updated>2023-02-14T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-14:/2023_02_14-tide_table_analysis.html</id><summary type="html">&lt;p&gt;I'm undecided if this goes into the next book.
Maybe this is a teaser...
And yes, this is a &lt;strong&gt;Python to the Rescue&lt;/strong&gt; story.&lt;/p&gt;
&lt;p&gt;I live on a boat. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;Red Ranger Blog&lt;/a&gt; for details.
What's essential is this little complication.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.charlottecountyfl.gov/departments/public-works/maintenance-operations/south-gulf-cove-boat-lock.stml"&gt;South Gulf Cove Boat Lock&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The lock keeps …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm undecided if this goes into the next book.
Maybe this is a teaser...
And yes, this is a &lt;strong&gt;Python to the Rescue&lt;/strong&gt; story.&lt;/p&gt;
&lt;p&gt;I live on a boat. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;Red Ranger Blog&lt;/a&gt; for details.
What's essential is this little complication.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.charlottecountyfl.gov/departments/public-works/maintenance-operations/south-gulf-cove-boat-lock.stml"&gt;South Gulf Cove Boat Lock&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The lock keeps saltwater from Charlotte Harbor out of the canal system
in South Gulf Cove.
The creek beyond the lock is subject to silting.
We'd like to be &lt;strong&gt;sure&lt;/strong&gt; we don't run aground.&lt;/p&gt;
&lt;div class="section" id="filter-rules"&gt;
&lt;h2&gt;Filter Rules&lt;/h2&gt;
&lt;p&gt;There are two critical criteria for passing through the lock:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;High tide.&lt;/li&gt;
&lt;li&gt;In the afternoon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The lock and the associated creeks and canals tend to silt
up over time. Water moves slowly through the water system.
High tide helps get us over the sandbars.&lt;/p&gt;
&lt;p&gt;It's a bit over a three-hour trip from &lt;a class="reference external" href="https://www.safecoveinc.com"&gt;Safe Cove Boat Storage and Marina&lt;/a&gt;
to the lock.
If we start at 06:00, we're not getting out before 10:00.
And.
Who wants to get up at 05:00 to prep for departure at first light?&lt;/p&gt;
&lt;p&gt;(Okay. I've done that. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/Schooner_Creek__Not_our_best_idea.html"&gt;Schooner Creek — Not our best idea&lt;/a&gt;.
It's not ideal, but we can make it work.)&lt;/p&gt;
&lt;p&gt;How do we know when high tide is? NOAA provides that information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-data"&gt;
&lt;h2&gt;Raw Data&lt;/h2&gt;
&lt;p&gt;The tides have a well-understood model.
This is a triumph of big-data analysis.&lt;/p&gt;
&lt;p&gt;It leads to files like this:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tidesandcurrents.noaa.gov/noaatideannual.html?id=8725769"&gt;https://tidesandcurrents.noaa.gov/noaatideannual.html?id=8725769&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Okay. That's a right mess of data.&lt;/p&gt;
&lt;p&gt;There's a big multi-line header.
It's followed by columns of details.
The details have slightly irregular tab characters, making parsing annoying.&lt;/p&gt;
&lt;p&gt;Choices.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Load it into Numbers and fool with it more-or-less manually looking the afternoon high-tides we can make use of.&lt;/li&gt;
&lt;li&gt;Load it into a Jupyter Lab Notebook.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's a one-time thing, right?&lt;/p&gt;
&lt;p&gt;Not exactly.&lt;/p&gt;
&lt;p&gt;Every year, we're going to redo this little computation.&lt;/p&gt;
&lt;blockquote&gt;
I hear you. Once a year isn't very often.
The principle is this: the manual steps are hard to record
and reproduce.
It's much, much more reliable to build a notebook for
repeatable results.&lt;/blockquote&gt;
&lt;p&gt;I'll repeat that&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Build a Notebook For Repeatable Results.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Here's the essential features of that notebook.
It's a three-step process&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Acquire&lt;/li&gt;
&lt;li&gt;Clean&lt;/li&gt;
&lt;li&gt;Analyze&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll begin at the beginning: acquiring the raw data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-acquire"&gt;
&lt;h2&gt;Step 1. Acquire&lt;/h2&gt;
&lt;p&gt;Okay. The data was already downloaded. Done. Check.
We need to extract a meaningful structure from it.&lt;/p&gt;
&lt;p&gt;First, strip that god-awful header.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def header(source: TextIO) -&amp;gt; dict[str, str]:
    content = {}
    for row in source:
        if (clean := row.rstrip()) == '':
            break
        label, _, value = clean.partition(&amp;quot;:&amp;quot;)
        content[label] = value
    return content
&lt;/pre&gt;
&lt;p&gt;This function extracts the header lines
to make a little dictionary with the metadata.
The value of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;metadata['StationName']&lt;/span&gt;&lt;/tt&gt; is particularly
useful.&lt;/p&gt;
&lt;p&gt;This changes the state of the &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; object.
It advances it to the first line after the header.
This line has the column titles.&lt;/p&gt;
&lt;p&gt;(For some, this state change is a kind of functional programming no-no.
A proper functional approach might involve defining some kind
of monad that can be used to represent the file split,
preserving the order.)&lt;/p&gt;
&lt;p&gt;The column titles are in wrong positions with regard
to the data. This offset makes them essentially useless except
as a visual cue.&lt;/p&gt;
&lt;p&gt;Here's what we observe.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tide_csv[0:2]

[['Date ', '', 'Day', 'Time', '', 'Pred(Ft)', 'Pred(cm)', 'High/Low'],
 ['2023/01/01', 'Sun', '06:35 AM', '-0.13', '', '-4', '', '', 'L']]
&lt;/pre&gt;
&lt;p&gt;We want columns 0, 1, 2, 3, 5, and 8.&lt;/p&gt;
&lt;p&gt;Here's the first pass at a kind of named-tuple or dataclass
to structure the source text.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from dataclasses import dataclass, field

&amp;#64;dataclass
class Tide:
    date: str
    day: str
    time: str
    pred_ft: str
    pred_cm: str
    high_low: str

    &amp;#64;classmethod
    def from_csvrow(cls, row):
        return cls(
            date=row[0],
            day=row[1],
            time=row[2],
            pred_ft=row[3],
            pred_cm=row[5],
            high_low=row[8]
        )
&lt;/pre&gt;
&lt;p&gt;I'm a fan of including builders within the class
definition. With a tiny prevarication.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;from_csvrow()&lt;/tt&gt; function is dependent
on something &lt;strong&gt;outside&lt;/strong&gt; this class.
Therefore we can argue this breaks the &lt;strong&gt;SOLID&lt;/strong&gt; design
principles -- this class has than one reason to change:
an internal representation change and an external parsing change.&lt;/p&gt;
&lt;p&gt;(The Open-Closed principle still applies. Subclasses have have different parsers.)&lt;/p&gt;
&lt;p&gt;If there are multiple sources, or the source is some hack
built as a temporary stop-gap as part of Enterprise software development,]
then separate parsers are helpful.&lt;/p&gt;
&lt;p&gt;(Enterprise in-house programmers are sometimes told to build junk.)&lt;/p&gt;
&lt;p&gt;This is from a government agency. Change will arise at a stately pace.
Including a parser/builder method in the class is fair because I &lt;em&gt;never&lt;/em&gt; expect to see this source format change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-clean-and-transform"&gt;
&lt;h2&gt;Step 2. Clean and Transform&lt;/h2&gt;
&lt;p&gt;There's only a little bit of this data we need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The predicted height in feet &amp;quot;Pred(Ft)&amp;quot;.&lt;/li&gt;
&lt;li&gt;The timestamp built from &amp;quot;Date&amp;quot; and &amp;quot;Time&amp;quot;.&lt;/li&gt;
&lt;li&gt;The High/Low flag telling us the tide's state. We like to make trick transits &lt;strong&gt;before&lt;/strong&gt; high-tide so the rising tide can help float us free of trouble.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The day, for example, is redundant and computed from the date.
The predicted height in cm is a multiplication.&lt;/p&gt;
&lt;p&gt;We have two general approaches for this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For complex, fluid situations with multiple sources and formats, it helps to separate clean data from raw data. This means creating a secondary class, built from the raw (&amp;quot;all strings&amp;quot;) source class. This class can have a more useful structure.&lt;/li&gt;
&lt;li&gt;For this kind of stable data, we can enrich the dataclass with &lt;tt class="docutils literal"&gt;init=False&lt;/tt&gt; fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from dataclasses import dataclass, field
from enum import Enum
import datetime

class HighLow(str, Enum):
    High = &amp;quot;H&amp;quot;
    Low = &amp;quot;L&amp;quot;

&amp;#64;dataclass
class Tide:
    date: str
    day: str
    time: str
    pred_ft: str
    pred_cm: str
    high_low: str
    timestamp: datetime.datetime = field(init=False)
    height: float = field(init=False)
    state: HighLow = field(init=False)

    &amp;#64;classmethod
    def from_csvrow(cls, row):
        return cls(
            date=row[0],
            day=row[1],
            time=row[2],
            pred_ft=row[3],
            pred_cm=row[5],
            high_low=row[8]
        )

    def __post_init__(self):
        date = datetime.datetime.strptime(self.date, '%Y/%m/%d').date()
        time = datetime.datetime.strptime(self.time, '%I:%M %p').time()
        self.timestamp = datetime.datetime.combine(date, time)
        self.height = float(self.pred_ft)
        self.state = HighLow(self.high_low)
&lt;/pre&gt;
&lt;p&gt;The three &lt;tt class="docutils literal"&gt;field(init=False)&lt;/tt&gt; attributes are &lt;strong&gt;not&lt;/strong&gt; provided from the source.
These are derived.
The &lt;tt class="docutils literal"&gt;__post_init__()&lt;/tt&gt; method computes the useful derived values.&lt;/p&gt;
&lt;p&gt;These values can also be &lt;tt class="docutils literal"&gt;&amp;#64;property&lt;/tt&gt; methods.
Indeed, they started out as properties.
There are only about 1200 rows of data, so the performance advantage of one-time computation is miniscule.&lt;/p&gt;
&lt;p&gt;For completeness, here's the overall parser for this data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def tides(source_csv):
    for line in source_csv:
        if len(line) != 9:
            continue
        yield Tide.from_csvrow(line)
&lt;/pre&gt;
&lt;p&gt;Given the list of CSV rows (or a generator for the CSV rows)
this will iterate over the rows, building &lt;tt class="docutils literal"&gt;Tide&lt;/tt&gt; instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-when-do-we-go"&gt;
&lt;h2&gt;Step 3. When Do We Go?&lt;/h2&gt;
&lt;p&gt;Now, we can start analysis.
The fundamental question is this &amp;quot;When to we leave?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer is &amp;quot;When the lock is passable.&amp;quot;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def passable(t):
    return all([
        t.state == HighLow.High,     # High tide
        11 &amp;lt;= t.timestamp.hour &amp;lt; 18  # Late morning and afternoon
    ])
&lt;/pre&gt;
&lt;p&gt;We need to to know the high-tide time so we can back off three hours.
We need to arrive at the lock in daylight, and we don't want to get up at 05:00 (pre-dawn).&lt;/p&gt;
&lt;p&gt;The final cell in this notebook?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for t in tides(tide_csv):
    if passable(t) and t.timestamp.month in {3, 4, 5}:
        print(f&amp;quot;{t.timestamp} {t.height:6.2f} {t.state.name}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This tells us what we need to know about making the lock
in daylight with a good probability of enough water out in the harbor.&lt;/p&gt;
&lt;p&gt;We still have to fix Hurricane Ian damage.
We're not 100% the engine will start.
The solar panels are a wreck.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;We don't know where we might go.
A lot the South Florida Gulf Coast is still a right-awful mess.&lt;/p&gt;
&lt;p&gt;Maybe all we'll be able to do is
drop the anchor at &lt;a class="reference external" href="https://activecaptain.garmin.com/en-US/pois/46419"&gt;Punta Gorda&lt;/a&gt; for a month.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="#python"></category><category term="jupyter lab"></category><category term="functional programming"></category><category term="navigation"></category><category term="books"></category><category term="python"></category></entry><entry><title>SOLID Coding in Python</title><link href="https://slott56.github.io/2021_07_27-solid_coding_in_python.html" rel="alternate"></link><published>2021-07-27T09:00:00-04:00</published><updated>2021-07-27T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-27:/2021_07_27-solid_coding_in_python.html</id><summary type="html">&lt;p&gt;Check this out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://link.medium.com/rFDC7sSxBhb"&gt;SOLID Coding in Python&lt;/a&gt; by
Mattia Cinelli.&lt;/p&gt;
&lt;p&gt;Download Medium on the &lt;a class="reference external" href="https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&amp;amp;mt=8&amp;amp;ct=app_email_share"&gt;App
Store&lt;/a&gt;
or &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.medium.reader&amp;amp;referrer=utm_source%3Dios_app%26utm_medium%3Demail%26utm_campaign%3Dios_app_email_share"&gt;Play
Store&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was fun to read. It has some nice examples.&lt;/p&gt;
&lt;p&gt;I submit that the order of presentation (S, O, L, I, D) is misleading.
The acronym is fun, but awkward.&lt;/p&gt;
&lt;p&gt;My …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check this out.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://link.medium.com/rFDC7sSxBhb"&gt;SOLID Coding in Python&lt;/a&gt; by
Mattia Cinelli.&lt;/p&gt;
&lt;p&gt;Download Medium on the &lt;a class="reference external" href="https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&amp;amp;mt=8&amp;amp;ct=app_email_share"&gt;App
Store&lt;/a&gt;
or &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.medium.reader&amp;amp;referrer=utm_source%3Dios_app%26utm_medium%3Demail%26utm_campaign%3Dios_app_email_share"&gt;Play
Store&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was fun to read. It has some nice examples.&lt;/p&gt;
&lt;p&gt;I submit that the order of presentation (S, O, L, I, D) is misleading.
The acronym is fun, but awkward.&lt;/p&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://www.linkedin.com/learning/learning-s-o-l-i-d-programming-principles/welcome"&gt;LinkedIn Learning
course&lt;/a&gt;
covers these in (what I think is) a more useful order.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Interface Segregation&lt;/strong&gt;. I think this is the place to start: make
your interfaces as small as possible.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Liskov Substitution&lt;/strong&gt;. Where necessary, leverage inheritance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open/Closed&lt;/strong&gt;. This is a good quality check to be sure you've
followed the first two principles well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;. This is often about test design and future
expansion. In Python, where everything really happens at run time, we
often fail to parameterize a type properly. We often figure that out
a test time, and need to revisit the Open/Closed principle to get
things right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Single Responsibility&lt;/strong&gt; is more of a summary of the previous
principles than a distinct, new principle. I think it comes last and
should be treated as a collection of good ideas, not a single idea.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think time spent on the first three -- Interface Segregation, Liskov
Substitution, and the Open/Closed principle -- pay off tremendously. The
ILODS acronym, though, isn't as cool as SOLID.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Single Responsibility&amp;quot; suffers from an ambiguous context. At one
level of abstraction, all classes have a single responsibility. As we
dive into details, we uncover multiple responsibilities. The further we
descend into implementation details the more responsibilities we
uncover. I prefer to consider this a poetic summary, not the first step
in reviewing a design.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="Design Principles"></category><category term="OO design"></category><category term="SOLID"></category></entry><entry><title>Architectural Boundaries: Which Package/Module/Class Owns That Responsibility?</title><link href="https://slott56.github.io/2021_06_22-architectural_boundaries_which_packagemoduleclass_owns_that_responsibility.html" rel="alternate"></link><published>2021-06-22T09:19:00-04:00</published><updated>2021-06-22T09:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-06-22:/2021_06_22-architectural_boundaries_which_packagemoduleclass_owns_that_responsibility.html</id><summary type="html">&lt;p&gt;The SOLID design principles beat the design boundary issue to death.
Here are the principles in my preferred order.
(See &lt;a class="reference external" href="https://www.linkedin.com/learning/learning-s-o-l-i-d-programming-principles"&gt;https://www.linkedin.com/learning/learning-s-o-l-i-d-programming-principles&lt;/a&gt;)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Interface Segregation&lt;/strong&gt; -- minimize the boundaries. Do this first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Liskov Substitution&lt;/strong&gt; -- keep the boundaries consistent. Do this
for hierarchies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open/Closed&lt;/strong&gt; -- keep the boundaries stable …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The SOLID design principles beat the design boundary issue to death.
Here are the principles in my preferred order.
(See &lt;a class="reference external" href="https://www.linkedin.com/learning/learning-s-o-l-i-d-programming-principles"&gt;https://www.linkedin.com/learning/learning-s-o-l-i-d-programming-principles&lt;/a&gt;)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Interface Segregation&lt;/strong&gt; -- minimize the boundaries. Do this first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Liskov Substitution&lt;/strong&gt; -- keep the boundaries consistent. Do this
for hierarchies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open/Closed&lt;/strong&gt; -- keep the boundaries stable and allow subclasses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency [Inversion] Injection&lt;/strong&gt; -- keep the implementation
separate from the design.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Single Responsibility&lt;/strong&gt; -- This is essentially a summary of the
above four principles.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The point here is that these principles are pleasantly poetic, but there
are those edgy cases where an interface can go either way.&lt;/p&gt;
&lt;p&gt;Specifically, here's an Edgy Case that can go either way.&lt;/p&gt;
&lt;p&gt;We're reading GPX (GPS Exchange) data.
See &lt;a class="reference external" href="https://www.topografix.com/GPX/1/1/"&gt;https://www.topografix.com/GPX/1/1/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Associated with this is what's known as the Lowrance USR file format. A
lot of devices include the same (or similar) underlying software, and
can exchange waypoint and route information in USR format.&lt;/p&gt;
&lt;p&gt;We have this as part of the underlying model.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The underlying &lt;tt class="docutils literal"&gt;Angle&lt;/tt&gt; as an abstraction. This has two subclasses:&lt;ul&gt;
&lt;li&gt;Latitude. An angle with &amp;quot;N&amp;quot; and &amp;quot;S&amp;quot; for its sign, conventionally
shown as a two-digit number of degrees: &lt;tt class="docutils literal"&gt;25°42.925′N&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Longitude. An angle with &amp;quot;E&amp;quot; and &amp;quot;W&amp;quot; for its sign, conventionally
shown as a three-digit number of degrees: &lt;tt class="docutils literal"&gt;080°13.617′W&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A Point (or &lt;tt class="docutils literal"&gt;LatLon&lt;/tt&gt;) is a two-tuple, &lt;tt class="docutils literal"&gt;tuple[Lat, Lon]&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A waypoint includes name, description, a time-of-last-update (TOLU), and
display symbol to be used. It may also include a GUID to track name
changes and assure uniqueness in spite of repeated names.&lt;/p&gt;
&lt;p&gt;So far, so good. Nothing too edgy there. &amp;quot;Where's the problem?&amp;quot; you ask.&lt;/p&gt;
&lt;p&gt;The problem is representation.&lt;/p&gt;
&lt;p&gt;In GPX files, latitude and longitude are float values in degrees. You'll
see this: &lt;tt class="docutils literal"&gt;&amp;lt;wpt &lt;span class="pre"&gt;lon=&amp;quot;-80.22695124&amp;quot;&lt;/span&gt; &lt;span class="pre"&gt;lat=&amp;quot;25.7154147&amp;quot;&amp;gt;...&amp;lt;/wpt&amp;gt;&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To do any useful computation, they need to be radians. Or a geocode that
supports proximity comparisons, like OLC.&lt;/p&gt;
&lt;p&gt;And. If you work with a CSV export from a tool like
&lt;a class="reference external" href="https://opencpn.org"&gt;OpenCPN&lt;/a&gt;, then you get strings. This can be any
combination of degrees and minutes or degrees, minutes, and seconds.
And, depending on the software, there may be either ° or º for the
degrees. Can't tell the apart? One is U+00B0, the DEGREE SIGN. The other
is U+00BA, the MASCULINE ORDINAL INDICATOR. Plus, of course, everyone
uses apostrophe (') and quote (&amp;quot;) where they should have used prime (′)
and double prime (″). These are easy regular expression problems to
solve.&lt;/p&gt;
&lt;p&gt;This leads to a class like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Angle(float):
    &amp;#64;classmethod
    def fromdegrees(cls, deg: float, hemisphere: Optional[str] = None) -&amp;gt; &amp;quot;Angle&amp;quot;:
        ...
    &amp;#64;classmethod
    def fromstring(cls, value: str) -&amp;gt; &amp;quot;Angle&amp;quot;:
        ...
&lt;/pre&gt;
&lt;p&gt;This Angle class converts numbers or strings into useful values; in
radians internally. Formatted in degrees externally.  (And yes, this
gets a warning from Python 3.9 that we can't usefully extend float like
this.)&lt;/p&gt;
&lt;p&gt;The problem is USR files.&lt;/p&gt;
&lt;p&gt;In USR files, they use millimeter mercator numbers for latitude and
longitude. These are distances from the equator or the prime meridian.
Because they're in millimeters, an integer will do nicely. A little
computation is done to extract degrees (or radians) from these values.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SEMIMINOR_B = 6_356_752.3142

lon = round(math.degrees(mm_lon / SEMIMINOR_B), 8)
lat = round(
        math.degrees(2 * math.atan(math.exp(mm_lat / SEMIMINOR_B)) - math.pi / 2), 8
    )
&lt;/pre&gt;
&lt;p&gt;These aren't too bad. But.&lt;/p&gt;
&lt;p&gt;Here's the question.&lt;/p&gt;
&lt;p&gt;Where does this belong? Is it part of the underlying &lt;tt class="docutils literal"&gt;Angle&lt;/tt&gt; class? It
is separate?&lt;/p&gt;
&lt;div class="section" id="where-does-millimeter-mercator-representation-belong"&gt;
&lt;h2&gt;Where does Millimeter Mercator representation belong?&lt;/h2&gt;
&lt;p&gt;This raises a secondary question: Where does ANY representation belong?&lt;/p&gt;
&lt;p&gt;Do we separate the essential object (an angle in radians, a float) from
all representation questions? If so, how do we properly bind value and
representation at run time?&lt;/p&gt;
&lt;p&gt;Is our app full of complex mixins to bind the float with representation
choices?  &lt;tt class="docutils literal"&gt;class Latitude(float, DMS, MM, &lt;span class="pre"&gt;etc.):&lt;/span&gt; pass&lt;/tt&gt;. This seems
potentially annoyingly complex: we have to make sure names don't
collide, when defining all these aspects separately.&lt;/p&gt;
&lt;p&gt;I think the representation for latitudes and longitudes *is* the
essential problem here. The math (i.e. computing the loxodromic distance
between points) is trivially separated from all of these representation
concerns.&lt;/p&gt;
&lt;p&gt;If we buy into the centrality of representation issues, then, we're down
to the following argument.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resolution&lt;/strong&gt;: millimeter mercator belongs in the Angle class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affirmative&lt;/strong&gt;: it's yet another representation of an angle's value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Negative&lt;/strong&gt;: it's not used outside USR files and belongs in the USR file parser module.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affirmative Rebuttal&lt;/strong&gt;: None of the other representations in Angle are tied specifically to a file format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Negative Rebuttal&lt;/strong&gt;: Because the other formats (float, string) are
intermixed in CSV files and text displays, making them &amp;quot;widely used.&amp;quot;
While float is used consistently in GPX, this encoding is a pleasant
exception that relies on widely-used encodings.&lt;/p&gt;
&lt;p&gt;Okay. We seem to have conflicting goals here. Some representation is a
generic thing that crosses file formats and some representation is
localized to a specific file format and not reused.&lt;/p&gt;
&lt;p&gt;The SOLID design principles don't help chose between these designs.
Instead, they provide post-hoc justification for the design we chose.&lt;/p&gt;
&lt;p&gt;We can exploit the SOLID principles in a variety of ways. Some Examples.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We could claim that LatitudeMM is a subclass of Latitude with the MM
conversions mixed in. Open/Closed. Liskov Substitution.&lt;/li&gt;
&lt;li&gt;We could claim that Latitude has several load/dump strategies
available, including Load from MM. Open/Closed. Dependency is
Injected at run-time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prior-art"&gt;
&lt;h2&gt;Prior Art&lt;/h2&gt;
&lt;p&gt;Methods like &lt;tt class="docutils literal"&gt;__str__()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__repr__()&lt;/tt&gt; are generally considered
part of the essential class. That means the most common string
representations need to be provided. The parsing of a string, similarly,
is the constructor for  an instance of the &lt;tt class="docutils literal"&gt;float&lt;/tt&gt; class.&lt;/p&gt;
&lt;p&gt;So. Some representations are part of the class. Clearly, however, not
all representations are part of the class. Representation codecs like
&lt;tt class="docutils literal"&gt;pickle&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt;, or &lt;tt class="docutils literal"&gt;ctype&lt;/tt&gt; are kept separate.&lt;/p&gt;
&lt;p&gt;I'm going to make the case that there's a very, very fine line between
unique and non-unique-but-not-widely-used aspects of a class of objects.
And, in this specific case, the millimeter mercator should be kept
separate.&lt;/p&gt;
&lt;p&gt;I'm going to rely on other representations like PlusCode (also called
&lt;a class="reference external" href="https://en.m.wikipedia.org/wiki/Open_Location_Code"&gt;OLC&lt;/a&gt;) as yet
another obscure representation and insist these aren't essential to the
class. Indeed, I'm going to suggest that proximity-friendly geocoding is
clearly separate because it's a hack to replace complex distance
computations with substring comparisons.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="#python"></category><category term="OO design"></category><category term="Design Principles"></category><category term="SOLID"></category></entry><entry><title>Over-Solving or Solving Problems You Don't Have</title><link href="https://slott56.github.io/2020_07_25-over_solving_or_solving_problems_you_dont_have.html" rel="alternate"></link><published>2020-07-25T08:02:00-04:00</published><updated>2020-07-25T08:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-07-25:/2020_07_25-over_solving_or_solving_problems_you_dont_have.html</id><summary type="html">&lt;p&gt;Sometimes we call them &amp;quot;Belt and Braces&amp;quot; solutions. As a former
suspenders person who switched to belts, the idea of wearing both is a
little like over-engineering. In the unlikely event of catastrophic
failure of one system, your pants can still remain properly hoist.
There's a weird, but defensible reason …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes we call them &amp;quot;Belt and Braces&amp;quot; solutions. As a former
suspenders person who switched to belts, the idea of wearing both is a
little like over-engineering. In the unlikely event of catastrophic
failure of one system, your pants can still remain properly hoist.
There's a weird, but defensible reason for that. Most over-engineering
lacks a coherent reason.&lt;/p&gt;
&lt;p&gt;Sometimes we call them &amp;quot;Bells and Whistles.&amp;quot; The solution has both
bells and whistles for signaling. This is usually used in a
derogatory sense of useless noisemakers, there for show only. Again,
there's a really low-value and dumb, but defensible reason for this.&lt;/p&gt;
&lt;p&gt;While colorful, none of this is helpful for describing
over-engineered software. Over-engineered software is often
over-engineered for incoherent and indefensible reasons.&lt;/p&gt;
&lt;p&gt;Over-engineering generally means trying to solve a problem that no
user actually has. This leads to throwing around irrelevant features.&lt;/p&gt;
&lt;div class="section" id="concrete-example"&gt;
&lt;h2&gt;Concrete Example&lt;/h2&gt;
&lt;p&gt;I lived on a boat. I spent a fair amount of time fretting over
navigation.&lt;/p&gt;
&lt;p&gt;There are two big questions:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;How far apart are two points, really.&lt;/li&gt;
&lt;li&gt;What's the real bearing from one point to another.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are -- in some cases -- easy to answer.&lt;/p&gt;
&lt;p&gt;If you have a printed, paper chart at the right scale, you can use
dividers to compute a distance. It's actually a very easy task.
Similarly, you can read the bearing off the chart directly. There's a
trick to comparing a course to a nearby compass rose, but it's easy
to learn and very accurate.&lt;/p&gt;
&lt;p&gt;Of course, we don't want to painstakingly copy our notes from a paper
chart to a spreadsheet to add them up to get total distance. And then
fold in speed to get time and fuel consumption. These summary
computations are a pain.&lt;/p&gt;
&lt;p&gt;What you want is to do all of this with a computer.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Plot the points using a piece of software like OpenCPN (&lt;a class="reference external" href="https://opencpn.org"&gt;https://opencpn.org&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Extract the GPX file.&lt;/li&gt;
&lt;li&gt;Compute distances, bearings, and durations to create a route.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;quot;So?&amp;quot; you ask.&lt;/p&gt;
&lt;p&gt;So. When I did this, I researched the math and got a grip on the
haversine formula for doing the spherical geometry computation of
distances between points on a sphere.&lt;/p&gt;
&lt;p&gt;It's not too bad. The formula are big-ish. But manageable.
See &lt;a class="reference external" href="http://www.edwilliams.org/avform.htm#Dist"&gt;http://www.edwilliams.org/avform.htm#Dist&lt;/a&gt; for the great circle
distance formula.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;d&lt;/i&gt; = 2×arcsin&lt;span class="sqrt"&gt;&lt;span class="radical"&gt;√&lt;/span&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="root"&gt;&lt;span class="bigdelimiter size3"&gt;(&lt;/span&gt;sin&lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;ϕ&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; − &lt;i&gt;ϕ&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;2&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="bigdelimiter size3"&gt;)&lt;/span&gt;&lt;sup&gt;2&lt;/sup&gt; + cos&lt;i&gt;ϕ&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;×cos&lt;i&gt;ϕ&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;×&lt;span class="bigdelimiter size3"&gt;(&lt;/span&gt;sin&lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;λ&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt; − &lt;i&gt;λ&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;2&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="bigdelimiter size3"&gt;)&lt;/span&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;For airplanes and powered freighters crossing oceans, this is
perfect.&lt;/p&gt;
&lt;p&gt;For a small sailboat going from Annapolis, Maryland, to the Bahamas,
this level of complexity is craziness. While accurate, it doesn't
really solve the problem I have.&lt;/p&gt;
&lt;p&gt;I don't actually need that much accuracy.&lt;/p&gt;
&lt;p&gt;I need this much accuracy.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;d&lt;/i&gt; = &lt;span class="sqrt"&gt;&lt;span class="radical"&gt;√&lt;/span&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="root"&gt;[&lt;i&gt;R&lt;/i&gt;×(&lt;i&gt;ϕ&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; − &lt;i&gt;ϕ&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;)]&lt;sup&gt;2&lt;/sup&gt; + [&lt;i&gt;R&lt;/i&gt;×cos&lt;i&gt;ϕ&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;×(&lt;i&gt;λ&lt;/i&gt;&lt;sub&gt;2&lt;/sub&gt; − &lt;i&gt;λ&lt;/i&gt;&lt;sub&gt;1&lt;/sub&gt;)]&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;And no more. This is the essential hypotenuse distance using an
R-factor to convert the difference between latitudes and the distance
between longitudes into pretty-close distances. For nautical miles, R
is 60×180÷π.&lt;/p&gt;
&lt;p&gt;This is simpler and it solves the problem I actually have. Up to
about 232 miles, the answer is within 1 mile of correct. The error
grows quickly. Double the distance and the error seems to jump to 8
miles. A 464 mile sailing journey (at 6 knots) takes 3 days. Wind,
weather, tides and currents will introduce more error than the
simplifying assumptions.&lt;/p&gt;
&lt;p&gt;What's important is this can be put into a spreadsheet without pain.
I don't &lt;strong&gt;need&lt;/strong&gt; to write sophisticated Python apps to apply
haversine to sequences of way-points. I can do a simpler hypotenuse
computation on waypoints converted to radians.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-there-a-lesson-learned"&gt;
&lt;h2&gt;Is there a lesson learned?&lt;/h2&gt;
&lt;p&gt;I think there is.&lt;/p&gt;
&lt;p&gt;There's the haversine a super-general solution. It handles
great-circle routes elegantly.&lt;/p&gt;
&lt;p&gt;But it doesn't solve my actual problem. And that makes it
over-engineering.&lt;/p&gt;
&lt;p&gt;My problem is what we call rhumb-line sailing. Over short-enough
distances the world may as well be flat. Over slightly longer
distances, errors in the ship's compass and speedometer make a
hyper-accurate great circle route moot.&lt;/p&gt;
&lt;p&gt;(Even with several fancy GPS-based navigation computers, a prudent
mariner has paper backups. The list of waypoints, estimated times and
directions are essential when the boat's GPS reciever fails.)&lt;/p&gt;
&lt;p&gt;I don't really need the sophistication (and the potential for bugs)
with haversine. It doesn't solve a problem I actually have.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="#python"></category><category term="haversine"></category><category term="complexity"></category><category term="OO design"></category><category term="Design Principles"></category><category term="SOLID"></category><category term="navigation"></category></entry><entry><title>Python Enhancement Proposal -- Floating an Idea</title><link href="https://slott56.github.io/2019_02_05-python_enhancement_proposal_floating_an_idea.html" rel="alternate"></link><published>2019-02-05T08:00:00-05:00</published><updated>2019-02-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-02-05:/2019_02_05-python_enhancement_proposal_floating_an_idea.html</id><summary type="html">&lt;p&gt;Consider the following code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def max(m: int, n: int) -&amp;gt; int:
    if m &amp;gt;= n:
        return m
    elif n &amp;gt;= m:
        return n
    else:
        raise Exception(f&amp;quot;Design Error: {vars()}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;There's a question about else: clause and the exception raised there.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's impossible. In this specific case, a little algebra can provide …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Consider the following code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def max(m: int, n: int) -&amp;gt; int:
    if m &amp;gt;= n:
        return m
    elif n &amp;gt;= m:
        return n
    else:
        raise Exception(f&amp;quot;Design Error: {vars()}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;There's a question about else: clause and the exception raised there.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's impossible. In this specific case, a little algebra can provide
that it's impossible. In more complex cases, the algebra can be
challenging. In some cases, external dependencies may make the
algebra impossible.&lt;/li&gt;
&lt;li&gt;It's needless in general. An &lt;tt class="docutils literal"&gt;else:&lt;/tt&gt; would have been better than the
&lt;tt class="docutils literal"&gt;elif n &amp;gt;= m:&lt;/tt&gt;.  The problem with &lt;tt class="docutils literal"&gt;else:&lt;/tt&gt; is that a poor design, or poor
coordination with the external dependencies, can lead to undetectable
errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's look at something a little more complex.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def ackermann(m: int, n: int) -&amp;gt; int:
    if m &amp;lt; 0 or n &amp;lt; 0:
        raise ValueError(f&amp;quot;{m} and {n} must be non-negative&amp;quot;)
    if m == 0:
        return n + 1
    elif m &amp;gt; 0 and n == 0:
        return ackermann(m - 1, 1)
    elif m &amp;gt; 0 and n &amp;gt; 0:
        return ackermann(m - 1, ackermann(m, n - 1))
    else:
        raise Exception(f&amp;quot;Design Error: {vars()}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;It's somewhat less clear in this case that the else: is impossible. A
little more algebra is required to create a necessary proof.&lt;/p&gt;
&lt;p&gt;The core argument here is &lt;strong&gt;Edge Cases Are Inevitable&lt;/strong&gt;. While we can
try very assiduously to prevent them, they seem to be an emergent
feature of complex software. There are two arguments that seem to
indicate the inevitability of edge and corner cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Scale&lt;/strong&gt;. For simple cases, with not too many branches and not too
many variables, the algebra is manageable. As the branches and
variables grow, the analysis becomes more difficult and more subject
to error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;. For some cases, this kind of branching can be
refactored into a polymorphic class hierarchy, and the
decision-making superficially simplified. In other cases, there are
multiple, disjoint states and multiple conditions related to those
states, and the reasoning becomes more prone to errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The noble path is to use abstraction techniques to eliminate them.
This is aspirational in some cases. While it's always the right thing
to do, we need to check our work. And testing isn't always
sufficient.&lt;/p&gt;
&lt;p&gt;The noble path is subject to simple errors. While we can be very,
very, very, very careful in our design, there will still be obscure
cases which are very, very, very, very, &lt;strong&gt;very&lt;/strong&gt; subtle. We can omit
a condition from our analysis, and our unit tests, and all of our
colleagues and everyone reviewing the pull request can be equally
snowed by the complexity.&lt;/p&gt;
&lt;p&gt;We have two choices.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Presume we are omniscient and act accordingly: use else: clauses
as if we are incapable of error. Treat all complex if-elif chains
as if they were trivial.&lt;/li&gt;
&lt;li&gt;Act more humbly and try to detect our failure to be omniscient.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we acknowledge the possibility of a design error, what exception
class should we use?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;RuntimeError&lt;/strong&gt;. In a sense, it's an error which didn't occur
until we ran the application and some edge case cropped up.
However. The error was *always* present. It was a design error,
a failure to be truly omniscient and properly prove all of our
if-elif branches were complete.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DesignError&lt;/strong&gt;. We didn't think this would happen. But it did.
And we need debugging information to see what exact confluence of
variables caused the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I submit that &lt;strong&gt;DesignError&lt;/strong&gt; be added to the pantheon of Python
exceptions. I'm wondering if I should make an attempt to write and
submit a PEP on this. Thoughts?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="personally-i-welcome-the-suggestion-because-it-wo"&gt;
&lt;h2&gt;Personally, I welcome the suggestion because it wo...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-02-05 19:33:41.361000-05:00&lt;/p&gt;
&lt;p&gt;Personally, I welcome the suggestion because it would provide me a
formal mechanism for documenting when a client says that x will never
happen.&lt;/p&gt;
&lt;p&gt;The downside is that we are adding Yet More Stuff (YMS, pronounced yams)
to Python. This is a judgment call that needs to be made.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="#python"></category><category term="OO design"></category><category term="complexity"></category><category term="Design Principles"></category><category term="PEP"></category></entry><entry><title>Functional Requirements and Use Cases -- even for "simple" things</title><link href="https://slott56.github.io/2017_12_05-functional_requirements_and_use_cases_even_for_simple_things.html" rel="alternate"></link><published>2017-12-05T08:00:00-05:00</published><updated>2017-12-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-12-05:/2017_12_05-functional_requirements_and_use_cases_even_for_simple_things.html</id><summary type="html">&lt;p&gt;In the mailbag I found this nonsense, doomed to inevitable failure:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;As I get more serious about this data science stuff, it has become
obvious that a windows machine is not the way to go. ...
Q1: What other things should I think about and consider while
shopping for a new …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;In the mailbag I found this nonsense, doomed to inevitable failure:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;As I get more serious about this data science stuff, it has become
obvious that a windows machine is not the way to go. ...
Q1: What other things should I think about and consider while
shopping for a new computer?
Q2: Are there issues w/ running VmWare and Windows 7 w/in VmWare on
Ubuntu?
&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;I've omitted many, many words (400 or so.)&lt;/p&gt;
&lt;p&gt;Here are all of the functional requirements I could discern:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I would like to have 1 machine. I don't want a desktop and a laptop&lt;/li&gt;
&lt;li&gt;Install VmWare&lt;/li&gt;
&lt;li&gt;Install Windows 7 using VmWare&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was &lt;strong&gt;all&lt;/strong&gt; of the functional requirements. The other 400 words
involved specifications. Nothing that approaches a use case other
than singular, VMWare, and Windows under VMWare. The form factor of
laptop, which seems to go without saying, might be a user story, but
that's pushing it.&lt;/p&gt;
&lt;p&gt;The &amp;quot;a windows machine is not the way to go&amp;quot; and &amp;quot;Install Windows 7&amp;quot;
indicate a fairly serious problem. It is not the way to go &lt;strong&gt;and&lt;/strong&gt;
it's required. Both. This is doomed to inevitable failure.&lt;/p&gt;
&lt;p&gt;This is not the way to make a decision.&lt;/p&gt;
&lt;div class="section" id="q1-what-other-things-should-i-think-about"&gt;
&lt;h2&gt;Q1. What other things should I think about?&lt;/h2&gt;
&lt;p&gt;Just about every other thing. Start with use cases and functional
requirements. Skip over specifications. (In general, never start with
specifications because that's where you end: a list of useless
numbers that don't bracket what you actually want to do.)&lt;/p&gt;
&lt;p&gt;Use Cases Matter. Specifications Don't Matter.
Write down all the Mbs and Tbs you want. Without a use case, they're
irrelevant noisy details. Throw the numbers away until you have a
list of verbs. Things you will DO.&lt;/p&gt;
&lt;p&gt;With so few actual functional requirements, almost &lt;em&gt;any&lt;/em&gt; computer
(possibly including a Raspberry Pi 3) would pass the suite of
acceptance test cases.&lt;/p&gt;
&lt;p&gt;✅ One Machine.&lt;/p&gt;
&lt;p&gt;✅ VMWare.&lt;/p&gt;
&lt;p&gt;✅ Windows.&lt;/p&gt;
&lt;p&gt;After a lot more back-and-forth, I discerned one (or maybe two)
additional functional requirement(s).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I have &lt;a class="reference external" href="http://leoeditor.com/"&gt;leo&lt;/a&gt; w/ java to gen html.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know what &lt;a class="reference external" href="http://leoeditor.com/"&gt;Leo&lt;/a&gt; is in this context. I'm
guessing the &amp;quot;java to gen html&amp;quot; is
&lt;a class="reference external" href="https://github.com/vorburger/JRst/blob/master/jrst/doc/en/index.rst"&gt;JRst&lt;/a&gt;.
The lack of clarity is, of course, part of the problem here.&lt;/p&gt;
&lt;p&gt;This requirement surfaced in the context of explaining to me why
Windows was so important. Really. Windows was required to run two
open-source apps. And. &amp;quot;a windows machine is not the way to go.&amp;quot;
Doomed. To. Inevitable. Failure.&lt;/p&gt;
&lt;p&gt;Here's the only relevant functional requirement(s): run Leo and Java.
And even then, there's a huge hole in this. Leo is Python-based.
Docutils RST2HTML is Python-based. Why not simply use Leo and Python?
What does Java have to do with anything?
Buy this: a Pi-top: &lt;a class="reference external" href="https://www.sparkfun.com/products/13896"&gt;https://www.sparkfun.com/products/13896&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2-are-there-issues-w-running"&gt;
&lt;h2&gt;Q2. Are there issues w/ running...?&lt;/h2&gt;
&lt;p&gt;Yes. Always. For everything you can possibly enumerate there are
&amp;quot;issues&amp;quot;.&lt;/p&gt;
&lt;p&gt;There. Are. Always. Issues.&lt;/p&gt;
&lt;p&gt;Use Cases Matter.&lt;/p&gt;
&lt;p&gt;Since you don't have any functional requirements or use cases, it's
impossible to filter the issues and see if any of the known issues
impact what you think you're going to do.&lt;/p&gt;
&lt;p&gt;From what I was told, a Pi-top covers everything that's &lt;strong&gt;required&lt;/strong&gt;.
It's hard to be sure, of course, when the functional requirements are
so vague. But there's no evidence that the Pi-top can't work to fill
&lt;strong&gt;all&lt;/strong&gt; of the stated functional requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do-next"&gt;
&lt;h2&gt;What To Do Next&lt;/h2&gt;
&lt;p&gt;It seems obvious, but the next step is to create a test plan.
Actually, that was the first step. Since it wasn't done first, now
it's the next step.&lt;/p&gt;
&lt;p&gt;Write down the things you want to &lt;strong&gt;do&lt;/strong&gt;. Make a list. Ideally a long
list of things you will &lt;strong&gt;DO&lt;/strong&gt;. Active voice. &lt;strong&gt;Verbs&lt;/strong&gt;. &lt;strong&gt;Actions&lt;/strong&gt;.
&lt;strong&gt;Tasks&lt;/strong&gt;. &lt;strong&gt;Activities&lt;/strong&gt;. It's hard to emphasize this enough.&lt;/p&gt;
&lt;p&gt;Then, when considering a computer, see if it can actually do those
things. Test it against the requirements to see if it does what it's
supposed to do. Among all the machines that pass the tests, you can
then sort by price. (Or availability, or reputation, or cool
stickers, whatever non-functional requirements seem relevant.)&lt;/p&gt;
&lt;p&gt;The questions of Tb and Mb and processor clock speed mean nothing.
Nothing. Find the cheapest (smallest) machine that does what you
want. Don't find the machine with xMb and yTb of whatever.&lt;/p&gt;
&lt;p&gt;There there's this, &amp;quot;As I get more serious about this data science
stuff&amp;quot; which seems little more than context. But it's really
important. Indeed, it's &lt;strong&gt;essential&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you're going to &lt;strong&gt;do&lt;/strong&gt; machine learning, you don't really want to
&lt;strong&gt;buy&lt;/strong&gt; the necessary computer. You want to rent it for the hour or
so each day you actually need it. It will be idle 23/24 hours each
day (96% of the time.) Why buy that much horsepower which you are
never going to use.&lt;/p&gt;
&lt;p&gt;If you're going to login to a server you purchased from a cloud
computing vendor. Amazon AWS. Microsoft Azure, etc., then, you can
probably get by with a tablet that runs SSH and a browser. A tablet
with a cool keyboard and a little display rack can be very
nice. &lt;a class="reference external" href="https://panic.com/prompt/"&gt;https://panic.com/prompt/&lt;/a&gt; and &lt;a class="reference external" href="https://www.termius.com/"&gt;https://www.termius.com&lt;/a&gt;
seem to be all that's required.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://azure.microsoft.com/en-us/services/virtual-machines/"&gt;https://azure.microsoft.com/en-us/services/virtual-machines/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.brydgekeyboards.com/"&gt;https://www.brydgekeyboards.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Without Use Cases, however, it's impossible to select a computer.
Don't spend money without test cases.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="requirements"></category><category term="use case"></category><category term="architecture"></category></entry><entry><title>The Data Structures and Algorithms Problem</title><link href="https://slott56.github.io/2016_03_29-the_data_structures_and_algorithms_problem.html" rel="alternate"></link><published>2016-03-29T08:00:00-04:00</published><updated>2016-03-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-03-29:/2016_03_29-the_data_structures_and_algorithms_problem.html</id><summary type="html">&lt;p&gt;Here's a snippet of an email&lt;/p&gt;
&lt;blockquote&gt;
In big data / data science, the curse of dimensionality keeps showing
up over and over. A good place to start is the wiki article “&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Curse_of_dimensionality"&gt;curse
of
dimensionality&lt;/a&gt;.”
The issue seems to be that a lot of these big data / data science
people have not …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Here's a snippet of an email&lt;/p&gt;
&lt;blockquote&gt;
In big data / data science, the curse of dimensionality keeps showing
up over and over. A good place to start is the wiki article “&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Curse_of_dimensionality"&gt;curse
of
dimensionality&lt;/a&gt;.”
The issue seems to be that a lot of these big data / data science
people have not taken the time to study fundamental data structures.&lt;/blockquote&gt;
&lt;p&gt;There was more about &lt;a class="reference external" href="http://www.amazon.com/Foundations-Multidimensional-Structures-Kaufmann-Computer/dp/0123694469"&gt;Foundations of Multidimensional and Metric Data
Structures&lt;/a&gt;
by Hanan Samet being too detailed. And Stack Overflow being too
high-level.  And more hand-wringing after that, too.&lt;/p&gt;
&lt;p&gt;The email was pleading for some book or series of blog posts that
would somehow educate data science folks on more fundamental issues of
data structures and algorithms. Perhaps getting them to drop some
dimensions when doing k-NN problems or perhaps exploit some other data
structure that didn't involve 100's of columns.&lt;/p&gt;
&lt;p&gt;I think.&lt;/p&gt;
&lt;p&gt;I'm guessing because -- like a lot of hand-waving emails -- it didn't
involve code. And yes, I'm very bigoted about the distinction between
code and hand-waving.&lt;/p&gt;
&lt;p&gt;If there is a lack of awareness of appropriate data structures, the
real place to start is &lt;a class="reference external" href="http://www.algorist.com/"&gt;The Algorithm Design
Manual&lt;/a&gt; by Steven Skiena.&lt;/p&gt;
&lt;p&gt;I harbor my doubts that this is the real problem, however. I think
that the broad spectrum of computing applications leads to a lot of
specialization. I don't think that it's really prudent to try and
think of generalists who can handle deep data science issues as well
as algorithm design and performance issues. No one expects them to
write JavaScript and tinker with CSS so that the web site which
presents the results looks good.&lt;/p&gt;
&lt;p&gt;I actually think the real problem is that some folks expect too much
from their data scientists.&lt;/p&gt;
&lt;p&gt;In fantasy land the rock stars are full stack developers who can span
the entire spectrum from OS to CSS. In the real world, developers have
different strengths and interests. In some cases, &amp;quot;full stack&amp;quot; means
mediocre skills in a lot of areas.&lt;/p&gt;
&lt;p&gt;Here's a more useful response: &lt;a class="reference external" href="https://medium.com/packt-publishing/bridging-the-gap-between-data-science-and-devops-93285ca07cf0#.68q5nf3za"&gt;Bridging the Gap Between Data Science
and
DevOps&lt;/a&gt;.
I don't think the problem is &amp;quot;big data / data science people have not
taken the time to study fundamental data structures&amp;quot;. I think the
problem is that big data is a cooperative venture. It takes a team to
solve a problem.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="algorithm"></category><category term="dimensional data"></category><category term="Data Science"></category></entry><entry><title>TDD, API Design and Refactoring</title><link href="https://slott56.github.io/2014_06_12-tdd_api_design_and_refactoring.html" rel="alternate"></link><published>2014-06-12T08:00:00-04:00</published><updated>2014-06-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-06-12:/2014_06_12-tdd_api_design_and_refactoring.html</id><summary type="html">&lt;p&gt;See this short discussion on a Stingray Reader feature:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://sourceforge.net/p/stingrayreader/discussion/COBOL/thread/d2132851/?limit=25#2a3a"&gt;https://sourceforge.net/p/stingrayreader/discussion/COBOL/thread/d2132851/?limit=25#2a3a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This turned into an exercise in pure TDD.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;rant&amp;gt;&lt;/p&gt;
&lt;p&gt;I'm not a fan of applying TDD in a strict, death-march fashion.&lt;/p&gt;
&lt;p&gt;I see the comments on Stack Overflow that …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;See this short discussion on a Stingray Reader feature:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://sourceforge.net/p/stingrayreader/discussion/COBOL/thread/d2132851/?limit=25#2a3a"&gt;https://sourceforge.net/p/stingrayreader/discussion/COBOL/thread/d2132851/?limit=25#2a3a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This turned into an exercise in pure TDD.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;rant&amp;gt;&lt;/p&gt;
&lt;p&gt;I'm not a fan of applying TDD in a strict, death-march fashion.&lt;/p&gt;
&lt;p&gt;I see the comments on Stack Overflow that indicate that some folks
feel strongly that strict TDD is somehow helpful. While &amp;quot;test before
code&amp;quot; is laudable and often helpful, there's no royal road to good
software.&lt;/p&gt;
&lt;p&gt;Design involves a great deal of back and forth between code and test.
A great deal.&lt;/p&gt;
&lt;p&gt;It's logically impossible to write a test without having thought about
the code. In order to write the test first, there &lt;strong&gt;must&lt;/strong&gt; be a
notional API against which the test is written. Anyone who requires
that the test file must be written before the notional class or module
is just playing at petty tyranny.&lt;/p&gt;
&lt;p&gt;The notional design -- the rough outline of the class or module -- can
be written into a file before any tests. It's okay. It is still
test-driven because the considerations of testability drove the design
process.&lt;/p&gt;
&lt;p&gt;In particular, when starting &amp;quot;from scratch&amp;quot; -- with nothing -- writing
tests first is senseless. Some module or package structure must exist
for the test modules to import.&lt;/p&gt;
&lt;p&gt;&amp;lt;/rant&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Having ranted, it still arises that the tests do come before any code
under some circumstances.&lt;/p&gt;
&lt;p&gt;In this case, the requested functionality was quite difficult to
visualize. However, it was possible to cobble together a test case
that simplified the problem down to something like this this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
01 Some-Record.
    05 Header PIC XXX.
    05 Body PIC X(17).

01 ABC-Segment.
    05 Field-ABC PIC X(17).

01 DEF-Segment.
    05 Field-DEF PIC X(17).
&lt;/pre&gt;
&lt;p&gt;In COBOL, the program would use logic like IF Header EQUALS &amp;quot;ABC&amp;quot; THEN
MOVE Body TO ABC-Segment. We need a way to handle something like this
in Python so that we can parse the EBCDIC COBOL data.&lt;/p&gt;
&lt;p&gt;This summarized example allowed construction of a test case that made
use of a API that might have existed. I was pretty sure I had a test
case that showed an approach.&lt;/p&gt;
&lt;div class="section" id="what-actually-happened"&gt;
&lt;h2&gt;What Actually Happened&lt;/h2&gt;
&lt;p&gt;Since the application already had 178 unit tests, there was plenty of
structure that worked.&lt;/p&gt;
&lt;p&gt;The single new unit test relied on a notional API that wasn't really
in place. The new test bombed grotesquely.&lt;/p&gt;
&lt;p&gt;There are two solutions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Modify the test.&lt;/li&gt;
&lt;li&gt;Fix the notional API so that it works properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I started out chasing the second option. I tweaked some things. More
tests failed. I tweaked some more things. The new test finally passed,
but another test was failing.&lt;/p&gt;
&lt;p&gt;Some careful study of the failing test revealed that my approach was
wrong. Way wrong.&lt;/p&gt;
&lt;p&gt;The notional API was a bad idea.&lt;/p&gt;
&lt;p&gt;The tweaks to make it work were a worse idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-to-the-lab-bench"&gt;
&lt;h2&gt;Back to the Lab Bench&lt;/h2&gt;
&lt;p&gt;At this point, I had made enough changes that the only thing to do was
copy the new test and use the Git Revoke on the local changes to
unwind the awful mistakes.&lt;/p&gt;
&lt;p&gt;Staring again, I had a slightly better grip on the relevant code. I
had a failing test. I tried a different approach that wasn't quite so
inventive. This meant modifying the test.&lt;/p&gt;
&lt;p&gt;I actually went through a few iterations of the test, using the test
method as a kind of lab bench.&lt;/p&gt;
&lt;p&gt;A more Pythonic approach to the lab bench is to work from the &amp;gt;&amp;gt;&amp;gt;
prompt. I think that &lt;strong&gt;all&lt;/strong&gt; of the exemplary projects use the &amp;gt;&amp;gt;&amp;gt;
prompt examples in their documentation. This is a way to narrow and
clarify the API. As projects get big, they can sprawl. New features
can wind up with many imports to pick and choose elements from
existing modules.&lt;/p&gt;
&lt;p&gt;When it becomes difficult to use the &amp;gt;&amp;gt;&amp;gt; prompt as the lab bench,
that's a sign that the API is too complex. Refactoring must happen.&lt;/p&gt;
&lt;p&gt;Using the unit test framework as the lab bench was a hint that
something had drifted out of tolerance.&lt;/p&gt;
&lt;p&gt;However. I did get a test which passed. Yay. Sort of.&lt;/p&gt;
&lt;p&gt;The test code was hideous.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tdd-and-api-design"&gt;
&lt;h2&gt;TDD and API Design&lt;/h2&gt;
&lt;p&gt;The point of TDD, however, is that we have a working suite of tests.
Refactoring won't break anything.&lt;/p&gt;
&lt;p&gt;The point was that the hideous API could be rewritten into something
that both&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Passed all the tests, and&lt;/li&gt;
&lt;li&gt;Was usable at the &amp;gt;&amp;gt;&amp;gt; prompt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's difficult to express how valuable the Python &amp;gt;&amp;gt;&amp;gt; prompt is to
help clarify API design issues.&lt;/p&gt;
&lt;p&gt;The rule is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;If the API doesn't make sense at the &amp;gt;&amp;gt;&amp;gt; prompt, it's incomprehensible&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Sadly, Java doesn't have this kind of boundary. Java programming can
spin into quite complex API's, limited only by the laziness of the
programmer who avoids refactoring.&lt;/p&gt;
&lt;p&gt;Or the malice of the programmer's manager in not allowing time to
refactor.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="#python"></category><category term="tdd"></category><category term="stingray reader"></category><category term="API Design"></category><category term="mastering object-oriented python"></category></entry><entry><title>Explaining an Application</title><link href="https://slott56.github.io/2014_02_21-explaining_an_application.html" rel="alternate"></link><published>2014-02-21T10:56:00-05:00</published><updated>2014-02-21T10:56:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-02-21:/2014_02_21-explaining_an_application.html</id><summary type="html">&lt;p&gt;Some years ago--never mind how long precisely--having little or no money
in my purse...  I had a great chance to do some Test-Driven Reverse
Engineering on a rather complex C program. I extracted test cases. I
worked with the users to gather test cases. And I rewrote their legacy
app …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some years ago--never mind how long precisely--having little or no money
in my purse...  I had a great chance to do some Test-Driven Reverse
Engineering on a rather complex C program. I extracted test cases. I
worked with the users to gather test cases. And I rewrote their legacy
app using Test-Driven Development. The legacy C code was more a hint
than anything else.
I thought it went well. We uncovered some issues in the test cases.
Uncovered a known issue in the legacy program. And added new features.
All very nice. A solid success.
Years later, a developer from the organization had to make some more
changes.
The client calls.
&amp;quot;No problem,&amp;quot; I assure them, &amp;quot;I'm happy to answer any questions. With
one provision. Questions have to be about specific code. I can't do
'overview' questions. Email me the code snippet and the question.&amp;quot;
I never heard another word.  No question of any kind. Not a general
question (that I find difficult to answer,) nor a specific question.
Why the provision?
I find it very hard to talk with someone who hasn't actually read the
code yet. I have done far too many presentations to people who are
sitting around a conference room table, nodding and looking at
power-point slides.
I know the initial phone call focused on &amp;quot;an overview.&amp;quot; But what counts
as an overview? Use cases? Data model? Architectural layers? Test cases?
Rather than waste time explaining something irrelevant, I figured if
they asked anything -- anything at all -- I could focus on what they
really wanted to know.
I know that I have never been able to understand people hand-waving at a
picture of code. I have to actually read the code to see what the
modules, classes and functions are and how they seem to work. I'm
suspicious of graphics and diagrams.  I know that I can't read the code
while someone is talking. If they insist on talking, I need to read the
code in advance.
Perhaps I'm imposing too much on this customer. But. They're going to
maintain the code -- that seems to mean they need to understand it. And
they need to understand it their own way, without my babbling randomly
about the bits that interested me. Maybe the part I found confusing is
obvious to them, and doesn't bear repeating.
Perhaps raising the bar to &amp;quot;specific questions about specific code&amp;quot;
forced them to read enough. Perhaps after some reading, they realized
they didn't need to pay me to explain things. I certainly can't brag
that the code explained itself.
Or. Perhaps they realized how the unit tests worked and realized that
TestCases provide a roadmap of the API.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="test-driven reverse engineering"></category><category term="legacy code"></category></entry><entry><title>Third Time's the Charm: the version 3.0 phenomenon</title><link href="https://slott56.github.io/2014_02_21-third_times_the_charm_the_version_30_phenomenon.html" rel="alternate"></link><published>2014-02-21T10:52:00-05:00</published><updated>2014-02-21T10:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-02-21:/2014_02_21-third_times_the_charm_the_version_30_phenomenon.html</id><summary type="html">&lt;p&gt;Somewhere, I have a vague recollection of reading advice from someone
(Bill Gates?) that it takes three versions to get things right. The
context may have been a justification of the wild success of Windows
3.0.&lt;/p&gt;
&lt;p&gt;Or, I could be just making it up.&lt;/p&gt;
&lt;p&gt;But one thing I have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Somewhere, I have a vague recollection of reading advice from someone
(Bill Gates?) that it takes three versions to get things right. The
context may have been a justification of the wild success of Windows
3.0.&lt;/p&gt;
&lt;p&gt;Or, I could be just making it up.&lt;/p&gt;
&lt;p&gt;But one thing I have noticed is that there's a definite bias toward
looking at software three times.&lt;/p&gt;
&lt;p&gt;I worked (briefly) with an agile project management group that
suggested that everything will be released three times, called the
&amp;quot;Good&amp;quot;, &amp;quot;Better&amp;quot;, &amp;quot;Best&amp;quot; releases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The good release passed the unit tests.&lt;/li&gt;
&lt;li&gt;The better release included any non-functional (performance, auditability, maintainability, etc.) improvements required.&lt;/li&gt;
&lt;li&gt;The best implementation possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not everything required three releases. Simpler components can merge
better and best. Some components simply start out in really, really
good shape.&lt;/p&gt;
&lt;div class="section" id="teaching-moment"&gt;
&lt;h2&gt;Teaching Moment&lt;/h2&gt;
&lt;p&gt;What I've also noticed is that the explanation of the component --
writing documentation, presenting to peers in a walkthrough -- leads
to profound rethinking.&lt;/p&gt;
&lt;p&gt;May things may appear to be better or best in the sense above. Until
we have to explain them. Then they're no longer &amp;quot;best&amp;quot; but merely
&amp;quot;better&amp;quot; or perhaps even &amp;quot;good.&amp;quot;&lt;/p&gt;
&lt;p&gt;A few minutes spent hand-waving through a design often points to
things that aren't quite to easy to explain. A walkthrough is very
beneficial to the person doing the presentation.&lt;/p&gt;
&lt;p&gt;But, not too early.&lt;/p&gt;
&lt;p&gt;When I made military software, we had Preliminary Design Reviews that
were done before coding begins. The idea was to surround the
difficult coding work with yet more process steps and yet more
deliverable intermediate results.&lt;/p&gt;
&lt;p&gt;The intent was noble: if a walkthrough reveals so much, then do the
walkthroughs early and often.&lt;/p&gt;
&lt;p&gt;However. I'm beginning to think that early isn't ideal.&lt;/p&gt;
&lt;p&gt;I think that the design walkthrough should be delayed until after
minimally working code exists. Once there's code -- with automated
unit tests -- then refactoring to meet non-functional quality factors
(like performance) is easier and more likely to be successful.&lt;/p&gt;
&lt;p&gt;Also, refactoring to make the software clear, simple, and elegant
should probably wait until it works and has a complete suite of
automated unit tests.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="software process improvement"></category><category term="OO design"></category><category term="requirements"></category></entry><entry><title>Unit Test Naming [Updated]</title><link href="https://slott56.github.io/2014_01_01-unit_test_naming_updated.html" rel="alternate"></link><published>2014-01-01T13:22:00-05:00</published><updated>2014-01-01T13:22:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-01-01:/2014_01_01-unit_test_naming_updated.html</id><summary type="html">&lt;p&gt;Just stumbled across several blog postings on unit test naming.&lt;/p&gt;
&lt;p&gt;Essentially the TestCase will name the fixture. That's pretty easy to
understand.&lt;/p&gt;
&lt;p&gt;The cool part is this: each test method is a two-part clause:
&lt;tt class="docutils literal"&gt;condition_&amp;quot;should&amp;quot;_result&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&amp;quot;when&amp;quot;_condition_&amp;quot;then&amp;quot;_result&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://wiki.openmrs.org/display/docs/Unit+Testing+With+at-should+Annotation"&gt;https://wiki.openmrs.org/display/docs/Unit …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just stumbled across several blog postings on unit test naming.&lt;/p&gt;
&lt;p&gt;Essentially the TestCase will name the fixture. That's pretty easy to
understand.&lt;/p&gt;
&lt;p&gt;The cool part is this: each test method is a two-part clause:
&lt;tt class="docutils literal"&gt;condition_&amp;quot;should&amp;quot;_result&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&amp;quot;when&amp;quot;_condition_&amp;quot;then&amp;quot;_result&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://wiki.openmrs.org/display/docs/Unit+Testing+With+at-should+Annotation"&gt;https://wiki.openmrs.org/display/docs/Unit+Testing+With+at-should+Annotation&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;Or possibly &amp;quot;&lt;tt class="docutils literal"&gt;method_state_behavior&lt;/tt&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html"&gt;http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What a handy way to organize test cases. Only took me four years to
figure out how important this kind of thing is.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;Updated to follow moved links.&lt;/em&gt;]&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="have-you-tried-the-spec-plugin-for-nose-it-gives"&gt;
&lt;h2&gt;Have you tried the spec plugin for nose? It gives ...&lt;/h2&gt;
&lt;p&gt;boothead&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-22 04:35:02.992000-04:00&lt;/p&gt;
&lt;p&gt;Have you tried the spec plugin for nose? It gives you a really good
understandable output for nosetests:
&lt;a class="reference external" href="http://darcs.idyll.org/~t/projects/pinocchio/doc/#spec-generate-test-description-from-test-class-method-names"&gt;http://darcs.idyll.org/~t/projects/pinocchio/doc/#spec-generate-test-description-from-test-class-method-names&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="tdd"></category></entry><entry><title>Performance "Tuning": running in 1/100th the time</title><link href="https://slott56.github.io/2013_06_27-performance_tuning_running_in_1100th_the_time.html" rel="alternate"></link><published>2013-06-27T10:04:00-04:00</published><updated>2013-06-27T10:04:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-27:/2013_06_27-performance_tuning_running_in_1100th_the_time.html</id><summary type="html">&lt;p&gt;For the &lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/"&gt;757 Python Meetup&lt;/a&gt; group,
someone proposed looking at some Python code they had which was slow.
The code implemented a variation on the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Elo_rating_system"&gt;Elo chess rating
system&lt;/a&gt;.  It
applied the ratings to other sports, and used the points scored as
well as basic win/lose/tie to work …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the &lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/"&gt;757 Python Meetup&lt;/a&gt; group,
someone proposed looking at some Python code they had which was slow.
The code implemented a variation on the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Elo_rating_system"&gt;Elo chess rating
system&lt;/a&gt;.  It
applied the ratings to other sports, and used the points scored as
well as basic win/lose/tie to work out a ranking for sports teams.
Very clever stuff.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;It was described as horribly slow. Since it was only 400 lines of
code, it was a great subject for review in a Python meetup.  I would
be able to show some tweaks and performance tips.&lt;/p&gt;
&lt;div class="section" id="hypothetical-step-1-profile"&gt;
&lt;h2&gt;Hypothetical Step 1:  Profile&lt;/h2&gt;
&lt;p&gt;My first thought was to run the profiler and see what popped up as a
possible root cause of slowness.&lt;/p&gt;
&lt;p&gt;Generally, there are three kinds of performance problems.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Wrong data structure&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Or wrong algorithm.  (They're simply
opposite sides of the same coin.)  This generally leads to dramatic,
earth-shattering improvements.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Piss-Poor Programming Practices&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;This kind of fine-tuning yields
minuscule improvements.  In some cases, no measurable change at all.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Bugs&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Every time I've been asked to improve &amp;quot;working&amp;quot; code, I
find that it has bugs.  Every time.  These can exacerbate performance
problems.  Interestingly, most of these are readily apparent during
an initial survey:  i.e., while simply reading the code to see how it
works.  Trying to create unit tests for the purposes of refactoring
often reveals additional bugs.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I didn't know what I was going to see in this 400-line program.&lt;/p&gt;
&lt;p&gt;Hypothetically, profiling will help show what kind of problems we
have.&lt;/p&gt;
&lt;p&gt;Prior to profiling, of course, we need to run the darn thing.
Thankfully, they provided some typical input files.  For example,
1979 High School Football season results.  159 lines of patiently
gathered teams and scores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-didn-t-run"&gt;
&lt;h2&gt;It Didn't Run&lt;/h2&gt;
&lt;p&gt;When we tried to run it with the profiler, we found that we had a
bug.  Tracking down the bug, revealed the essential performance
problem, also.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;core&lt;/em&gt; problem was a failure to make use of Python data
structures.&lt;/p&gt;
&lt;p&gt;This manifested itself in a number of really bad design errors.
Plus, it presented as the actual, show-stopping, serious bug.&lt;/p&gt;
&lt;p&gt;In order to work out team rankings, the program kept a list of teams.&lt;/p&gt;
&lt;p&gt;I'll repeat that for folks who are skimming.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;In order to work out team rankings, the program kept a list of teams.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Not a dict mapping from team name to team details.  But a simple
list.  Locating a team in the list meant iterating through the list,
looking for the matching team.  Really.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for t in team_list:
   if t['name'] == target_name:
       process( t )
&lt;/pre&gt;
&lt;p&gt;This kind of thing was repeated in more than one place.&lt;/p&gt;
&lt;p&gt;And one of those repeats had the bug in it.&lt;/p&gt;
&lt;p&gt;What we have here is &amp;quot;wrong data structure&amp;quot;.  Replacing a list with a
dict will have earth-shattering impact on performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bug"&gt;
&lt;h2&gt;The Bug&lt;/h2&gt;
&lt;p&gt;The bug, BTW, was a lookup loop which had the additional requirement
of adding missing teams.  It tried to use the &lt;strong&gt;for-else&lt;/strong&gt; structure.
This was the intended code (not the actual code).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for t in team_list:
   if t['name'] == target_name:
else:
   t['name']= init_new_team(target_name)
&lt;/pre&gt;
&lt;p&gt;This is a first-class bit of Python.  An &lt;strong&gt;else&lt;/strong&gt; clause on a &lt;strong&gt;for&lt;/strong&gt;
statement is a real feature of the language.  However, it's obscure
enough that it's easy to get wrong.&lt;/p&gt;
&lt;p&gt;However, it's also unique to Python, and the kind of thing that can
lead to confusion.  I discourage it's use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-driven-reverse-engineering"&gt;
&lt;h2&gt;Test-Driven Reverse Engineering&lt;/h2&gt;
&lt;p&gt;We're doing TDRE on a little piece of recreational programming.  This
means that we need to fabricate unit tests for code that is purported
to work.  Some folks like to call this &amp;quot;exploratory testing&amp;quot; (a
phrase which is contradictory, and consequently meaningless.)  We're
&amp;quot;exploring&amp;quot;.  We're not &amp;quot;testing&amp;quot;.&lt;/p&gt;
&lt;p&gt;Once the core bug is fixed, we can run sample data through the
application to get &amp;quot;big picture&amp;quot; results.  We can extract bits from
the sample data and exercise various functions in isolation to
determine what they actually do now, bugs included.&lt;/p&gt;
&lt;p&gt;Since this is so simple--and we're going to review it during a 2-hour
meet up--and there's nothing billable going on--we can get by with a
few really simple unit tests.  We'll run the darn thing once to
create some expected output.  We save the output and use that single
output log as the expected results from each refactoring step.&lt;/p&gt;
&lt;p&gt;More complex applications require more unit tests.  For a billable
TDRE effort last year, I had to create 122 unit tests to successfully
refactor a program of over 6,000 lines of code.  It took several
weeks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="real-step-1-fix-the-data-structure"&gt;
&lt;h2&gt;Real Step 1: Fix The Data Structure&lt;/h2&gt;
&lt;p&gt;Before profiling (but after running to capture some output) we have
to fix the essential data structure.  Repeated scanning of a list is
never going to perform well.&lt;/p&gt;
&lt;p&gt;The whole point of the study of &amp;quot;Data Structures&amp;quot; is to prevent (or
optimize) search.&lt;/p&gt;
&lt;p&gt;In this case, we can prevent linear search of a list by using a
dictionary.  That, clearly, is job one.&lt;/p&gt;
&lt;p&gt;It was a pervasive rewrite.   Essentially, everything in this little
program included a goofy loop to lookup a team in the list.  The Elo
algorithm itself, which is already &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;/span&gt;, is dragged
down by using the linear search for the opposing team four more
times, making it &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;3&lt;/sup&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cyclomatic-complexity"&gt;
&lt;h2&gt;Cyclomatic Complexity&lt;/h2&gt;
&lt;p&gt;One of the big &amp;quot;issues&amp;quot; is the use of &lt;strong&gt;if&lt;/strong&gt; statements throughout
the scoring algorithm.  An &lt;strong&gt;if&lt;/strong&gt; statement creates &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;Cyclomatic
Complexity&lt;/a&gt;
and can lead to performance problems.  Generally, &lt;strong&gt;if&lt;/strong&gt; statements
should be avoided.&lt;/p&gt;
&lt;p&gt;This algorithm applies some normalization factors to reconcile
scoring with win/loss numbers in different sports.  Basketball,
specifically, involves generally high scores.  Since there are
2-point and 3-point scoring opportunities, a factor is used to
normalize the points into &amp;quot;goals&amp;quot;.  Football, similarly, has numerous
scoring opportunities with values of 1, 2, 3 and 6 points; the scores
here are also normalized.&lt;/p&gt;
&lt;p&gt;This normalization was done with an &lt;strong&gt;if&lt;/strong&gt; statement that was
evaluated deep inside the Elo algorithm.  Repeatedly. Evaluated.
The two functions that handled the normalizations, plus the
normalization factors, are ideal candidates for OO design.  There's a
clear hierarchy of classes here.  A superclass handles most sports,
and two polymorphic subclasses handle football and basketball
normalization.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;if&lt;/strong&gt; statement is now &amp;quot;pushed up&amp;quot; to the very beginning of the
program where an instance of the sports normalization object is
created.  This object's methods are then used by the Elo algorithm to
normalize scores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="icing-on-the-cake"&gt;
&lt;h2&gt;Icing on the Cake&lt;/h2&gt;
&lt;p&gt;Once we've fixed the bug and replaced a list with a dict, everything
else is merely icing.&lt;/p&gt;
&lt;p&gt;Some other OO changes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &amp;quot;Team&amp;quot; information should not be a flat, anonymous dictionary.
It should be a proper class definition with proper attributes.
There aren't many methods, so it's easy to create.&lt;/li&gt;
&lt;li&gt;The &amp;quot;Game&amp;quot; information is read by csv.DictReader.  However, it
should not remain a simple, anonymous dict.  As with a Team, a
simple class can be created to handle Game.&lt;/li&gt;
&lt;li&gt;The overall structure of the application needs to be broken into
two sections.  The command-line interface parses options, opens
files, and generally gets everything set up.  The actual ranking
algorithm should be a function that is given an open file-like
object plus the Sport object for normalization.  This allows the
ranking algorithm to be reused in other contexts than the
command-line (i.e. a web service).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A more subtle OO design point is the question of &amp;quot;mutability&amp;quot;.  A
Team in this application is little more than a name.   There are
also numerous &amp;quot;stateful&amp;quot; values that are part of the Elo
algorithm.   A Game, similarly, is an immutable pair of teams and
scores.  However, it has some mutable values that are part of the
Elo algorithm.&lt;/p&gt;
&lt;p&gt;Really, we have immutable Team and GameHistory objects, plus a few
values that are used as part of the Elo calculation.  I'm a big
fan of disentangling these mutable and immutable objects from each
other.&lt;/p&gt;
&lt;p&gt;I suspect that the Elo algorithm doesn't &lt;em&gt;really&lt;/em&gt; need to update
the &amp;quot;state&amp;quot; of an object.  I suspect that it actually creates (and
discards) a number of immutable candidate ranking objects.  The
iteration that leads to convergence might be a matter of object
creation rather than update.  I didn't make this change, since it
required real work and we were out of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;The more times I do TDRE to improve performance, the more I
realize that it's all about bugs and data structures.
This recreational application took 45-60 seconds to process one
year's record of games for a given league.  It now takes less than
0.2 seconds to do the same volume of work.  Two test cases
involving a complete run of 159 records runs in 0.411 seconds.
That's 1/100th the time simply from switching data structures.&lt;/p&gt;
&lt;p&gt;The idea of &amp;quot;tweaking&amp;quot; a working program to improve performance is
generally misleading.  It might happen, but the impact is
minuscule at best.&lt;/p&gt;
&lt;p&gt;Here's the checklist for getting 100:1 improvements.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remove searches.&lt;/li&gt;
&lt;li&gt;Remove deeply-nested &lt;strong&gt;if&lt;/strong&gt; statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generally, reduce Cyclomatic Complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="this-also-falls-nicely-into-the-anti-if-campaign"&gt;
&lt;h2&gt;This also falls nicely into the “anti if campaign”...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-24 19:52:30.407000-04:00&lt;/p&gt;
&lt;p&gt;This also falls nicely into the “anti if campaign” genra
&lt;a class="reference external" href="http://www.antiifcampaign.com/"&gt;http://www.antiifcampaign.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://slott56.github.io/2010_12_27-the_anti_if_campaign.html"&gt;&amp;quot;The Anti-IF Campaign&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="performance"></category><category term="algorithm"></category><category term="test-driven reverse engineering"></category><category term="complexity"></category></entry><entry><title>Password Encryption -- Short Answer: Don't.</title><link href="https://slott56.github.io/2013_06_27-password_encryption_short_answer_dont.html" rel="alternate"></link><published>2013-06-27T10:03:00-04:00</published><updated>2013-06-27T10:03:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-27:/2013_06_27-password_encryption_short_answer_dont.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;First, read this.    &lt;a class="reference external" href="http://arstechnica.com/security/2012/08/passwords-under-assault/"&gt;Why passwords have never been weaker—and
crackers have never been
stronger&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;There are numerous important lessons in this article.&lt;/div&gt;
&lt;div class="line"&gt;One of the small lessons is that changing your password every sixty or
ninety days is farcical.  The rainbow table algorithms can crack a
badly-done password in …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;First, read this.    &lt;a class="reference external" href="http://arstechnica.com/security/2012/08/passwords-under-assault/"&gt;Why passwords have never been weaker—and
crackers have never been
stronger&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;There are numerous important lessons in this article.&lt;/div&gt;
&lt;div class="line"&gt;One of the small lessons is that changing your password every sixty or
ninety days is farcical.  The rainbow table algorithms can crack a
badly-done password in minutes.  Every 60 days, the cracker has to
spend a few minutes breaking your new password.  Why bother changing
it?  It only annoys the haxorz; they'll be using your account within a
few minutes.  However.  That practice is now so ingrained that it's
difficult to dislodge from the heads of security consultants.&lt;/div&gt;
&lt;div class="line"&gt;The big lesson, however, is profound.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Work Experience&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;Recently, I got a request from a developer on how to encrypt a
password.  We have a Python back-end and the developer was asking
which crypto package to download and how to install it.&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;Crypto?&amp;quot; I asked.  &amp;quot;Why do we need crypto?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;To encrypt passwords,&amp;quot; they replied.&lt;/div&gt;
&lt;div class="line"&gt;I spat coffee on my monitor.  I felt like hitting Caps Lock in the
chat window so I could respond like this: &amp;quot;&lt;strong&gt;NEVER ENCRYPT A PASSWORD,
YOU DOLT&lt;/strong&gt;.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;I didn't, but I felt like it.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Much Confusion&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;The conversation took hours.  Chat can be slow that way.  Also, I can
be slow because I need to understand what's going on before I reply.
 I'm a slow thinker.  But the developer also needed to try stuff and
provide concrete code examples, which takes time.&lt;/div&gt;
&lt;div class="line"&gt;At the time, I knew that passwords must be hashed with salt.  I hadn't
read the Ars Technica article cited above, so I didn't know why
computationally intensive hash algorithms are best for this.&lt;/div&gt;
&lt;div class="line"&gt;We had to discuss hash algorithms.&lt;/div&gt;
&lt;div class="line"&gt;We had to discuss algorithms for generating unique salt.&lt;/div&gt;
&lt;div class="line"&gt;We had to discuss random number generators and how to use an entropy
source for a seed.&lt;/div&gt;
&lt;div class="line"&gt;We had to discuss &lt;a class="reference external" href="http://www.ietf.org/rfc/rfc2617.txt"&gt;http://www.ietf.org/rfc/rfc2617.txt&lt;/a&gt; in some depth,
since the algorithms in section 3.2.2. show some best practices in
creating hash summaries of usernames, passwords, and realms.&lt;/div&gt;
&lt;div class="line"&gt;All of this was, of course, side topics before we got to the heart of
the matter.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;What's Been Going On&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;After several hours, my &amp;quot;why&amp;quot; questions started revealing things.  The
specific user story, for example, was slow to surface.&lt;/div&gt;
&lt;div class="line"&gt;Why?&lt;/div&gt;
&lt;div class="line"&gt;Partly because I didn't demand it early enough.&lt;/div&gt;
&lt;div class="line"&gt;But also, many technology folks will conceive of a &amp;quot;solution&amp;quot; and
pursue that technical concept no matter how difficult or bizarre.  In
some cases, the concept doesn't really solve the problem.&lt;/div&gt;
&lt;div class="line"&gt;I call this the &amp;quot;&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/architecture/C412398194/E20060223203608/index.html"&gt;Rat Holes of Lost
Time&lt;/a&gt;&amp;quot;
phenomena: we chase some concept through numerous little rat-holes
before we realize there's a lot of activity but no tangible progress.
 There's a perceptual narrowing that occurs when we focus on the
technology.  Often, we're not actually solving the problem.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
IT people leap past the problem into the solution as naturally as
they breathe. It's a hard habit to break.&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It turned out that they were creating some additional RESTful web
services.  They knew that the RESTful requests needed proper
authentication.  But, they were vague on the details of how to secure
the new RESTful services.&lt;/div&gt;
&lt;div class="line"&gt;So they were chasing down their concept: encrypt a password and
provide this encrypted password with each request.  They were half
right, here.  A secure &amp;quot;token&amp;quot; is required.  But an encrypted password
is a terrible token.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Use The Framework, Luke&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;What's most disturbing about this is the developer's blind spot.&lt;/div&gt;
&lt;div class="line"&gt;For some reason, the existence of other web services didn't enter into
this developer's head.  Why didn't they read the code for the services
created on earlier sprints?&lt;/div&gt;
&lt;div class="line"&gt;We're using Django.  We already have a RESTful web services framework
with a complete (and high quality) security implementation.&lt;/div&gt;
&lt;div class="line"&gt;Nothing more is required.  Use the RESTful authentication already part
of Django.&lt;/div&gt;
&lt;div class="line"&gt;In most cases, HTTPS is used to encrypt at the socket layer.  This
means that Basic Authentication is all that's required.  This is a
huge simplification, since all the RESTful frameworks already offer
this.&lt;/div&gt;
&lt;div class="line"&gt;The Django Rest Framework has a nice
&lt;a class="reference external" href="http://django-rest-framework.org/library/authentication.html"&gt;authentication&lt;/a&gt;
module.&lt;/div&gt;
&lt;div class="line"&gt;When using
&lt;a class="reference external" href="https://bitbucket.org/jespern/django-piston/wiki/Documentation#!authentication"&gt;Piston&lt;/a&gt;,
it's easy to work with their Authentication handler.&lt;/div&gt;
&lt;div class="line"&gt;It's possible to make RESTful requests with Digest Authentication, if
SSL is not being used.  For
example, &lt;a class="reference external" href="https://bitbucket.org/akoha/django-digest/wiki/Home"&gt;Akoha&lt;/a&gt; handles
this.  It's easy to extend a framework to add Digest in addition to
Basic authentication.&lt;/div&gt;
&lt;div class="line"&gt;For other customers, I created an authentication handler between
Piston and &lt;a class="reference external" href="http://www.forgerock.com/openam.html"&gt;ForgeRock
OpenAM&lt;/a&gt; so that OpenAM tokens
were used with each RESTful request.  (This requires some care to
create a solution that is testable.)&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Bottom Lines&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;Don't encrypt passwords.  Ever.&lt;/div&gt;
&lt;div class="line"&gt;Don't write your own hash and salt algorithm.  Use a framework that
offers this to you.&lt;/div&gt;
&lt;div class="line"&gt;Read the Ars Technica article before doing anything password-related.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="no-quot-don-39-t-encrypt-passwords-ever-quo"&gt;
&lt;h2&gt;No.  &amp;amp;quot;Don&amp;amp;#39;t encrypt passwords.  Ever.&amp;amp;quo...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-30 07:18:19.719000-04:00&lt;/p&gt;
&lt;p&gt;No. &amp;quot;Don't encrypt passwords. Ever.&amp;quot; It seems clear.
Not in a database. Not anywhere. Never use a reversible encryption.
How many different ways would you like me to repeat it?&lt;/p&gt;
&lt;p&gt;hello!
Not even in the database?
--------------------------------&lt;/p&gt;
&lt;p&gt;cuby&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-29 06:36:40.972000-04:00&lt;/p&gt;
&lt;p&gt;hello!
Not even in the database?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fine-we-get-the-message-quot-don-39-t-encrypt"&gt;
&lt;h2&gt;Fine, we get the message, &amp;amp;quot;Don&amp;amp;#39;t encrypt ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-01-03 03:11:22.404000-05:00&lt;/p&gt;
&lt;p&gt;Fine, we get the message, &amp;quot;Don't encrypt passwords. Ever.&amp;quot;
But I don't see why (or why not). This blog post doesn't seem to explain
anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-in-most-cases-https-is-used-to-encrypt-at-t"&gt;
&lt;h2&gt;&amp;amp;quot;In most cases, HTTPS is used to encrypt at t...&lt;/h2&gt;
&lt;p&gt;Paul Anthony McGowan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-03-19 19:34:23.846000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;In most cases, HTTPS is used to encrypt at the socket layer. This means
that Basic Authentication is all that's required&amp;quot;
seems pretty clear.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="algorithm"></category><category term="software process improvement"></category><category term="encryption"></category><category term="security"></category></entry><entry><title>Automated Code Modernization: Don't Pave the Cowpaths</title><link href="https://slott56.github.io/2013_06_20-automated_code_modernization_dont_pave_the_cowpaths.html" rel="alternate"></link><published>2013-06-20T08:00:00-04:00</published><updated>2013-06-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-20:/2013_06_20-automated_code_modernization_dont_pave_the_cowpaths.html</id><summary type="html">&lt;p&gt;After talking about some experience with legacy modernization (or
migration), I received information from &lt;a class="reference external" href="http://bphx.com/"&gt;Blue
Phoenix&lt;/a&gt; about their approach to modernization.&lt;/p&gt;
&lt;p&gt;Before talking about modernization, it's important to think about the
following issue from two points of view.&lt;/p&gt;
&lt;blockquote&gt;
Modernization can amount to nothing more than &lt;a class="reference external" href="http://www.fastcompany.com/1769710/change-management-paving-cowpaths"&gt;Paving the
Cowpaths&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;From a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After talking about some experience with legacy modernization (or
migration), I received information from &lt;a class="reference external" href="http://bphx.com/"&gt;Blue
Phoenix&lt;/a&gt; about their approach to modernization.&lt;/p&gt;
&lt;p&gt;Before talking about modernization, it's important to think about the
following issue from two points of view.&lt;/p&gt;
&lt;blockquote&gt;
Modernization can amount to nothing more than &lt;a class="reference external" href="http://www.fastcompany.com/1769710/change-management-paving-cowpaths"&gt;Paving the
Cowpaths&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;From a user viewpoint, &amp;quot;paving the cowpaths&amp;quot; means that the legacy
usability issues have now been modernized without being fixed. The
issues remain. A dumb business process is now implemented in a modern
programming language. It's still a dumb business process. The
modernization was strictly technical with no user-focused &amp;quot;value-add&amp;quot;.&lt;/p&gt;
&lt;p&gt;From a technical viewpoint, &amp;quot;paving the cowpaths&amp;quot; means that bad
legacy design, bad legacy implementation and legacy platform quirks
have now been modernized. A poorly-designed application in a legacy
language has been modernized into a poorly-designed application in yet
another language. Because of language differences, it may go from
poorly-designed to really-poorly-designed.&lt;/p&gt;
&lt;p&gt;The real underlying issue is how to avoid low-value modernization. How
to avoid merely converting bad design and bad UX from one language to
another.&lt;/p&gt;
&lt;p&gt;Consider that it's possible to actually &lt;strong&gt;reduce&lt;/strong&gt; the value of a
legacy application through poorly-planned modernization. Converting
quirks and bad design from one language to another will not magically
make a legacy application &amp;quot;better&amp;quot;. Converting quirky code to Java
will merely canonize the quirks, obscuring the essential business
value that was also encoded in the quirky legacy code.&lt;/p&gt;
&lt;div class="section" id="focus-on-value"&gt;
&lt;h2&gt;Focus on Value&lt;/h2&gt;
&lt;p&gt;The fundamental modernization question is &amp;quot;Where's the Value?&amp;quot; Or,
more specifically, &amp;quot;What part of this legacy is worth preserving?&amp;quot;&lt;/p&gt;
&lt;p&gt;In some cases, it's not even completely clear what the legacy software
really is. Old COBOL mainframe systems may contain hundreds (or
thousands) of application programs, each of which does some very small
thing.&lt;/p&gt;
&lt;p&gt;While &amp;quot;Focus on Value&amp;quot; is essential, it's not clear how one achieves
this. Here's a process I've used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-create-a-code-and-data-inventory"&gt;
&lt;h2&gt;Step 1. Create a code and data inventory.&lt;/h2&gt;
&lt;p&gt;This is essential for determine what parts of the legacy system have
value. Blue Phoenix has &amp;quot;Legacy Indexing&amp;quot; for determine the current
state of the application portfolio. Bravo. This is important.&lt;/p&gt;
&lt;p&gt;I've done this analysis with Python. It's not difficult. Many
organizations can provide a ZIP file with all of the legacy source and
and all of the legacy JCL (Z/OS shell scripts). A few days of scanning
can produce inventory summaries showing programs, files, inputs and
outputs.&lt;/p&gt;
&lt;p&gt;A suite of tools would probably be simpler than writing a JCL parser
in Python&lt;/p&gt;
&lt;p&gt;A large commercial operation will have all kinds of source checked
into the repository. Some will be inexplicable. Some will have never
been used. In some cases, there will be executable code that was
&lt;strong&gt;not&lt;/strong&gt; actually built from the source in the master source
repository.&lt;/p&gt;
&lt;p&gt;A recreational project (like HamCalc) reveals the same patterns of
confusion as large multi-million dollar efforts. There are mystery
programs which are probably never used; the code is available, but
they don't appear in shell scripts or interactive menus. There are
programs which have clear bugs and (apparently) never worked. There
are programs with quirks; programs that work because of an
undocumented &amp;quot;feature&amp;quot; of the language or platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-capture-the-data"&gt;
&lt;h2&gt;Step 2. Capture the Data.&lt;/h2&gt;
&lt;p&gt;In most cases, the data is central: the legacy files or databases need
to be preserved. The application code is often secondary. In &lt;strong&gt;most&lt;/strong&gt;
cases, the application code is almost worthless, and only the data
matters. The application programs serve only as a definition of how to
interpret and decode the data.&lt;/p&gt;
&lt;p&gt;Blue Phoenix has Transition Bridge Services. Bravo. You'll be moving
data from legacy to new (and the reverse, also.) We'll return to this
&amp;quot;Build Bridges&amp;quot; below.&lt;/p&gt;
&lt;p&gt;Regarding the data vs. application programming distinction, I need to
repeat my observation: Legacy Code Is Largely Worthless. Some folks
are married to legacy application code. The legacy code does stuff to
the legacy files. It &lt;strong&gt;must&lt;/strong&gt; be important, right?&lt;/p&gt;
&lt;p&gt;&amp;quot;That's simple logic, you idiot,&amp;quot; they say to me. &amp;quot;It's only logical
that we need to preserve all the code to process all the data.&amp;quot;&lt;/p&gt;
&lt;p&gt;That's actually false. It's not simple logic. It's just wishful
thinking.&lt;/p&gt;
&lt;p&gt;When you actually read legacy code, you find that a significant
fraction (something like 30%) is trivial recapitulation of SQL's &amp;quot;set&amp;quot;
operations: SQL DML statements have an implied loop that operates on a
set of data. Large amounts of legacy code merely recapitulates the
implied loop. This is trivially true of legacy SQL applications with
embedded SQL; explicit FETCH loops are very wordy. There's no sense in
preserving this overhead if it can be avoided.&lt;/p&gt;
&lt;p&gt;Programs which work with flat files always have long stretches of code
that models SQL loops or Map-Reduce loops. There's no value in the
loop management parts of these programs.&lt;/p&gt;
&lt;p&gt;Another significant fraction is &amp;quot;utility&amp;quot; code that is not
application-specific in any way. It's an application program that
merely does a &amp;quot;CREATE TABLE XYZ(...) AS SELECT ....&amp;quot;: a single line of
SQL. There's no sense in preserving this through an &amp;quot;automated&amp;quot; tool,
since it doesn't really do anything of value.&lt;/p&gt;
&lt;p&gt;Also. The legacy code has usability issues. It doesn't precisely fit
the business use cases. (Indeed, it probably hasn't fit the business
use cases for decades.) Some parts of the legacy code base are more
liability than asset and should be discarded in order to simplify,
streamline or improve operations.&lt;/p&gt;
&lt;p&gt;What's left?&lt;/p&gt;
&lt;p&gt;The high value processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-extract-the-business-rules"&gt;
&lt;h2&gt;Step 3. Extract the Business Rules.&lt;/h2&gt;
&lt;p&gt;Once we've disposed of overheads, utility code, quirks, bad design,
and wrong use cases, what's left are a the real brass tacks. A few
lines of code here and there will decode a one-character flag or
indicator and determine the processing. This code is of value.&lt;/p&gt;
&lt;p&gt;Note that this code will be disappointingly small compared to the
total inventory. It will often be widely scattered. Bad copy-and-paste
programming will lead to exact copies as well as near-miss copies. It
may be opaque.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
IF FLAG-2 IS &amp;quot;B&amp;quot; THEN MOVE &amp;quot;R&amp;quot; TO FLAG-BC.
&lt;/pre&gt;
&lt;p&gt;Seriously. What does this mean? This may turn out to be the secret
behind paying bonus commissions to highly-valued sales associates. If
this isn't preserved, the good folks will all quit &lt;em&gt;en masse&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is the &amp;quot;Business Rules&amp;quot; layer of a modern application design.
These are the nuggets of high-value coding that we need to preserve.&lt;/p&gt;
&lt;p&gt;These are things that must be redesigned when moving from the old
database (or flat files) to the new database. These one character flag
fields should not simply be preserved as a single character. They need
to be &lt;strong&gt;understood&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The business rules should &lt;strong&gt;never&lt;/strong&gt; be subject to automated
translation. These bits of business-specific processing must
&lt;strong&gt;always&lt;/strong&gt; be reviewed by the users (or business owners) to be
absolutely sure that it's (a) relevant and (b) has a complete suite of
unit test cases.&lt;/p&gt;
&lt;p&gt;The unique processing rules need to have modern, formal documentation.
Minimally, the documentation must be in the form of unit test cases;
English as a backup can be helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-build-bridges"&gt;
&lt;h2&gt;Step 4. Build Bridges.&lt;/h2&gt;
&lt;p&gt;A modernization project is not a once-and-done operation.&lt;/p&gt;
&lt;p&gt;I've been told that the IT department goal is to pick a long weekend,
preferably a federal Monday holiday weekend (Labor Day is always
popular), and do a massive one-time-only conversion on that weekend.&lt;/p&gt;
&lt;p&gt;This is a terrible plan. It is doomed to failure.&lt;/p&gt;
&lt;p&gt;A better plan is a phased coexistence. If a vendor (like Blue Phoenix)
offers bridge services, then it's smarter and less risky to convert
back and forth between legacy and new over and over again.&lt;/p&gt;
&lt;p&gt;The policy is to convert early and convert often.&lt;/p&gt;
&lt;p&gt;A good plan is the following.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Modernize some set of features in the legacy quagmire of code. This
should be a simple rewrite from scratch using the legacy code as a
specification and the legacy files (or database) as an interface.&lt;/li&gt;
&lt;li&gt;Run in parallel to be sure the modern version works. Do &lt;strong&gt;frequent&lt;/strong&gt;
data conversions from old to new as part of this parallel test.&lt;/li&gt;
&lt;li&gt;At some point, simply stop converting from old to new and start using
the new because it passes all the tests. Often, the new will have
additional features or remove old bugs, so the users will be
clamoring for it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For particularly large and gnarly systems, all features cannot be
modernized at once. There will be features that have not yet been
modernized. This means that some portion of new data will be
converted back to the legacy for processing.&lt;/p&gt;
&lt;p&gt;The feature sets are prioritized by value. What's most important to
the users? As each feature set is modernized, the remaining bits
become less and less valuable. As some point, you get to the
situation where you have a portfolio of unconverted code but no
missing features. Since there are no more desirable legacy features
to convert, the remaining code is -- by definition -- worthless.
The unconverted code is a net cost savings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automated-translation"&gt;
&lt;h2&gt;Automated Translation&lt;/h2&gt;
&lt;p&gt;Note that there is very little emphasis on automated translation of
legacy code. The important work is uncovering the data and the
processing rules that make the data usable. The important tools are
inventory tools and data bridging tools.&lt;/p&gt;
&lt;p&gt;Language survey tools will be helpful. Tools to look for file
operations. Tools to look for places where a particular field of a
record is used.
Automated translation will tend to pave &lt;strong&gt;all&lt;/strong&gt; the cowpaths: good,
bad and indifferent. Once the good features are located, a manual
rewrite is just as efficient as automated translation.
Automated translation cannot capture meaning, identify use cases or
write unit test cases. Thoughtful manual analysis of meaning,
usability and unit tests is how the value of legacy code and data is
preserved.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="you-nailed-it-here-steven-it-39-s-not-about-th"&gt;
&lt;h2&gt;You nailed it here, Steven.  It&amp;amp;#39;s not about th...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-21 10:25:59.162000-04:00&lt;/p&gt;
&lt;p&gt;You nailed it here, Steven. It's not about the code, it's about the
business logic, the IP that's been built into these systems over 10-20
years- and the data. Its not easy, but unlocking this stuff has a real
impact on making smarter business decisions. Great summary and points
here, really well done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="steven-good-work-detailing-each-point-to-its-peak"&gt;
&lt;h2&gt;Steven, Good Work, Detailing each point to its peak.&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-07-14 23:02:15.594000-04:00&lt;/p&gt;
&lt;p&gt;Steven, Good Work, Detailing each point to its peak.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="modern"></category><category term="data conversion"></category><category term="legacy code"></category><category term="use case"></category><category term="software process improvement"></category><category term="user stories"></category><category term="schema migration"></category></entry><entry><title>How to Write Crummy Requirements</title><link href="https://slott56.github.io/2012_06_28-how_to_write_crummy_requirements.html" rel="alternate"></link><published>2012-06-28T08:00:00-04:00</published><updated>2012-06-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-28:/2012_06_28-how_to_write_crummy_requirements.html</id><summary type="html">&lt;p&gt;Here's an object lesson in bad requirements writing.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Good&amp;quot; is defined as a nice simple and intuitive GUI interface. I
would be able to just pick symbol from a pallette and put it
somewhere and the software would automatically adjust the spacing.&lt;/blockquote&gt;
&lt;p&gt;Some problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Noise words&lt;/strong&gt;.  Phrases like &amp;quot;'Good' is …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's an object lesson in bad requirements writing.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Good&amp;quot; is defined as a nice simple and intuitive GUI interface. I
would be able to just pick symbol from a pallette and put it
somewhere and the software would automatically adjust the spacing.&lt;/blockquote&gt;
&lt;p&gt;Some problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Noise words&lt;/strong&gt;.  Phrases like &amp;quot;'Good' is defined as&amp;quot; don't
provide any meaning.  The word &amp;quot;just&amp;quot; and &amp;quot;automatically&amp;quot; are
approximately useless.  Here is the two-step test for noise words.&lt;ol class="arabic"&gt;
&lt;li&gt;Remove the word and see if the meaning changed.&lt;/li&gt;
&lt;li&gt;Put the opposite and see if the meaning changed.  If you can't find a
simple opposite, it's noise of some kind.  Often it's an empty
tautology, but sometimes it's platitudinous buzzwords.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Untestable requirements&lt;/strong&gt;.  &amp;quot;nice, simple and intuitive&amp;quot; are
unqualified and possible untestable.  If it's untestable, then
everything meets the criteria (or nothing does.)  Elegant.  State
of the art.  Again, apply the reverse test:  try &amp;quot;horrid, complex
and counter-intuitive&amp;quot; and see if you can find that component.
No?  Then it's untestable and has no place.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Silliness&lt;/strong&gt;.  &amp;quot;GUI&amp;quot;.  It's 2012.  What non-GUI interfaces are
left?  Oh right.  The GNU/Linux command line.  Apply the reverse
test: try &amp;quot;non-GUI&amp;quot; and see if you can even locate a product.
Can't find the opposite?  Don't waste time writing it down.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What's left?&lt;/p&gt;
&lt;blockquote&gt;
pick symbol from a palette ... the software would ... adjust the
spacing.&lt;/blockquote&gt;
&lt;p&gt;That's it.  That's the requirement.  35 words that mean &amp;quot;Drag-n-Drop
equation editing&amp;quot;.&lt;/p&gt;
&lt;p&gt;I have other issues with requirements this poorly done.  One of my
standard complaints is that no one has actually talked to actual
users about their actual use cases.  In this case, I happen to know
that the user did provide input.&lt;/p&gt;
&lt;p&gt;Which brings up another important suggestion.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't listen to the users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By that I mean &amp;quot;Don't &lt;strong&gt;passively&lt;/strong&gt; listen to the users &lt;strong&gt;and
blindly write down all the words they use&lt;/strong&gt;.  They're often
uninformed.&amp;quot;  It's important to &lt;strong&gt;understand&lt;/strong&gt; what they're
talking about.  The best way to do this is to actually do their
job briefly.  It's also important to provide demos, samples,
mock-ups, prototypes or concrete examples.  It's 2012.  These
things are inexpensive nowadays.&lt;/p&gt;
&lt;p&gt;In the olden days we used to carefully write down all the users
words because it would take months to locate a module, negotiate a
contract, take delivery, install, customize, integrate, configure
and debug.  With that kind of overhead, all we could do was write
down the words and hope we had a mutual understanding of the use
case.  [That's a big reason for Agile methods, BTW:  writing down
all the user's words and hoping just doesn't work.]&lt;/p&gt;
&lt;p&gt;In 2012, you should be able to download, install and play with
candidate modules in &lt;em&gt;less&lt;/em&gt; time than it takes to write down all
the user's words.  Often &lt;em&gt;much less&lt;/em&gt; time.  In some cases, you can
install something that works before you can get the users to
schedule a meeting.&lt;/p&gt;
&lt;p&gt;And that leads to another important suggestion.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't fantasize.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some &amp;quot;Drag-n-Drop&amp;quot; requirements are simple fantasies that
ignore the underlying (and complex) semantic issues.  In this
specific example, equations aren't random piles of mathematical
symbols.  They're fairly complex and have an important semantic
structure.  Dragging a ∑ or a √ from a palette will be
unsatisfying because the symbol's semantics are &lt;em&gt;essential&lt;/em&gt; to
how it's placed in the final typeset equation.&lt;/p&gt;
&lt;p&gt;I've worked recently with some folks that are starting to look at
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Hypervideo"&gt;Hypervideo&lt;/a&gt;.  This is
often unpleasantly difficult to write requirements around because
it &lt;em&gt;seems&lt;/em&gt; like simple graphic tools would be all that's required.
A lesson learned from Hypertext editors (even good ones like
&lt;a class="reference external" href="http://www.xmlmind.com/xmleditor/"&gt;XXE&lt;/a&gt;) is that &amp;quot;WYSIWYG&amp;quot;
doesn't apply to semantically rich markup.  There are nesting and
association relationships that are no fun to attempt to show
visually.  At some point, you just want to edit the XML and be
done with it.&lt;/p&gt;
&lt;p&gt;Math typesetting is has deep semantics.
&lt;a class="reference external" href="ftp://ftp.ams.org/ams/doc/amsmath/short-math-guide.pdf"&gt;LaTeX&lt;/a&gt;
captures that semantic richness.&lt;/p&gt;
&lt;p&gt;It's often best to use something like
&lt;a class="reference external" href="http://pierre.chachatelier.fr/latexit/"&gt;LaTeXiT&lt;/a&gt; rather than
waste time struggling with finding a Drag-n-Drop tool that has
appropriate visual cues for the semantics.  The textual rules for
LaTeX are simple and—most importantly—fit the mathematical
meanings nicely.  It was invented by mathematicians for
mathematicians.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="invented-by-mathematicians-for-mathematician"&gt;
&lt;h2&gt;&amp;quot;invented by mathematicians for mathematician...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-28 18:55:39.370000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;invented by mathematicians for mathematicians&amp;quot;
So what are non-mathematicians suppose to do?
&amp;quot;WYSIWYG doesn't apply to semantically rich markup&amp;quot;
Very well put!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-so-what-are-non-mathematicians-suppose-to-do"&gt;
&lt;h2&gt;&amp;amp;quot;So what are non-mathematicians suppose to do...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-04 22:44:18.925000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;So what are non-mathematicians suppose to do?&amp;quot; Either learn some math
or stop trying to write equations.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="requirements"></category><category term="use case"></category><category term="LaTeX"></category><category term="user stories"></category></entry><entry><title>TDRE - Test Driven Reverse Engineering Case Study</title><link href="https://slott56.github.io/2012_02_14-tdre_test_driven_reverse_engineering_case_study.html" rel="alternate"></link><published>2012-02-14T08:00:00-05:00</published><updated>2012-02-14T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-14:/2012_02_14-tdre_test_driven_reverse_engineering_case_study.html</id><summary type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Read up on compass variation or declination.  For example, this
&lt;a class="reference external" href="http://www.ngdc.noaa.gov/geomag/declination.shtml"&gt;NOAA&lt;/a&gt; site
provides some useful information.&lt;/p&gt;
&lt;p&gt;Mariners use the magnetic variation to compute the difference between
True north (i.e., aligned with the grid on the chart) and Magnetic
north (i.e., aligned with the compass.)&lt;/p&gt;
&lt;p&gt;The essential use …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Read up on compass variation or declination.  For example, this
&lt;a class="reference external" href="http://www.ngdc.noaa.gov/geomag/declination.shtml"&gt;NOAA&lt;/a&gt; site
provides some useful information.&lt;/p&gt;
&lt;p&gt;Mariners use the magnetic variation to compute the difference between
True north (i.e., aligned with the grid on the chart) and Magnetic
north (i.e., aligned with the compass.)&lt;/p&gt;
&lt;p&gt;The essential use case here is &amp;quot;What's the compass variation at a
given point?&amp;quot;  The information is printed on paper charts, but it's
more useful to simply calculate it.&lt;/p&gt;
&lt;p&gt;There are two &lt;a class="reference external" href="http://www.ngdc.noaa.gov/geomag/models.shtml"&gt;magnetic
models&lt;/a&gt;: the US
Department of Defense World Magnetic Model (WMM) and the International
Association of Geomagnetism and Aeronomy (IAGA) &lt;a class="reference external" href="http://www.ngdc.noaa.gov/IAGA/vmod/igrf.html"&gt;International
Geomagnetic Reference Field
(IGRF)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A packaged solution is geomag7.0.  This includes both the WMM and the
IGRF models.  This is quite complex.  However, it does have &amp;quot;sample
output&amp;quot;, which amount to unit test cases.&lt;/p&gt;
&lt;p&gt;The essential spherical harmonic model is available separately as a
small Fortran program,
&lt;a class="reference external" href="http://www.ngdc.noaa.gov/IAGA/vmod/igrf11.f"&gt;igrf11.f&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Which leads us to reverse engineering this program into Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tdre-approach"&gt;
&lt;h2&gt;TDRE Approach&lt;/h2&gt;
&lt;p&gt;The TDRE approach requires having some test cases to drive the reverse
engineering process toward some kind of useful results.&lt;/p&gt;
&lt;p&gt;The geomag7.0 package includes two &amp;quot;Sample Output&amp;quot; files that have the
relevant unit test cases.  The file has column headings and 16 test
cases.  This leads us to the following outline for the unit test
application.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Test_Geomag( unittest.TestCase ):
    def __init__( self, row ):
        super( Test_Geomag, self ).__init__()
        self.row= row
    def runTest( self ):
        row= self.row
        if details:
            print( &amp;quot;Source: {0:10s} {1} {2:7s} {3:10s} {4:10s} {5:5s} {6:5s}&amp;quot;.format( row['Date'], row['Coord-System'], row['Altitude'], row['Latitude'], row['Longitude'], row['D_deg'], row['D_min'] ),
            file=details )

        date= self.parse_date( row['Date'] )
        lat= self.parse_lat_lon( row['Latitude'] )
        lon= self.parse_lat_lon( row['Longitude'] )
        alt= self.parse_altitude(row['Altitude'] )

        x, y, z, f = igrf11syn( date, lat*math.pi/180, lon*math.pi/180, alt, coord=row['Coord-System'] )
        D = 180.0/math.pi*math.atan2(y, x) # Declination

        deg, min = deg2dm( D )

        if details:
            print( &amp;quot;Result: {0:10.5f} {1} K{2:&amp;lt;6.1f} {3:&amp;lt;10.3f} {4:&amp;lt;10.3f} {5:5s} {6:5s}&amp;quot;.format( date, row['Coord-System'], alt, lat, lon, str(deg)+&amp;quot;d&amp;quot;, str(min)+&amp;quot;m&amp;quot; ),
                file=details )
            print( file=details )

        self.assertEqual( row['D_deg'], &amp;quot;{0}d&amp;quot;.format(deg) )
        self.assertEqual( row['D_min'], &amp;quot;{0}m&amp;quot;.format(min) )

def suite():
    s= unittest.TestSuite()
    with open(sample_output,&amp;quot;r&amp;quot;) as expected:
        rdr= csv.DictReader( expected, delimiter=' ', skipinitialspace=True )
        for row in rdr:
            case= Test_Geomag( row )
            s.addTest( case )
    return s

r = unittest.TextTestRunner(sys.stdout)
result= r.run( suite() )
sys.exit(not result.wasSuccessful())
&lt;/pre&gt;
&lt;p&gt;The Test_Geomag class does two things.  First, it parses the source
values to create a usable test case.  We've omitted the parsers to
reduce clutter.  Second, it produces details to help with debugging.
This is reverse engineering, and there's &lt;strong&gt;lots&lt;/strong&gt; of debugging.  It
depends on a global variable, details, which is either set to
sys.stderr or None.&lt;/p&gt;
&lt;p&gt;This suite() function builds a suite of test cases from the input
file.&lt;/p&gt;
&lt;p&gt;The unit under test isn't obvious, but there's a call to
the igrf11syn() function where the important work gets done.  We can
start with this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def  igrf11syn( date, nlat, elong, alt=0.0, coord='D' ):
   return None, None, None, None
&lt;/pre&gt;
&lt;p&gt;This lets us run the tests and find that we have work to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reverse-engineering"&gt;
&lt;h2&gt;Reverse Engineering&lt;/h2&gt;
&lt;p&gt;The IGRF11.F fortran code contains this IGRF11SYN &amp;quot;subroutine&amp;quot; that
does the work we want.  The geomag 7.0 package has a function called
shval3 which is essentially the same thing.&lt;/p&gt;
&lt;p&gt;Both are implementations of the same underlying &amp;quot;13th order spherical
harmonic series&amp;quot; or a &amp;quot;truncated series expansion&amp;quot;.&lt;/p&gt;
&lt;p&gt;The Fortran code contains numerous Fortran &amp;quot;optimizations&amp;quot;.  These are
irritating hackarounds because of actual (and perceived) limitations
of Fortran.  They fall into two broad classes.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Hand Optimizations&lt;/strong&gt;.  All repeated expressions were manually
hoisted out of their context.  This is clever but makes the code
particularly obscure.  It doesn't help when local variables are named
ONE, TWO and THREE.  Bad is it is, not much needs to be done about
this.  Python code looks a bit like Fortran code, so very little
needs to be done except add `math.` to the various function calls
like sort, cos and sin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sparse Array Chicanery&lt;/strong&gt;.  There are actually two spherical
harmonic series.  The older 10-order and the new 13-order.   Each
model has two sets of coefficients: &lt;em&gt;g&lt;/em&gt; and &lt;em&gt;h&lt;/em&gt;.  These form two
half-matrices plus a vector.  The old models have 55 &lt;em&gt;g&lt;/em&gt; values in
one matrix, 55 &lt;em&gt;h&lt;/em&gt; values in second matrix, and a set of 10 more &lt;em&gt;g&lt;/em&gt;
values that form some kind of vector; 160 values.  The new models
have 91 g, 91 &lt;em&gt;h&lt;/em&gt; and 13 &lt;em&gt;g&lt;/em&gt; in the extra vector; 195 values.  There
are 23 sets of these coefficients (for 1900, 1905, ... 2015).  The
&lt;em&gt;worst&lt;/em&gt; case is 23×195=4,485 values.  This appears to be too much
memory, so the two matrices and vectors are optimized into a single
opaque collection of 3,256 numbers and delightfully complex set of
index calculations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Phase 1.&lt;/strong&gt;  Do the smallest &amp;quot;literal&amp;quot; transformation of Fortran to
Python.&lt;/p&gt;
&lt;p&gt;This means things like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Transforming the subroutine into a Python function with multiple return values.&lt;/li&gt;
&lt;li&gt;Reasoning out the overall &amp;quot;steps&amp;quot;.  There's a bunch of setup followed by the essential series calculation followed by some final calculations.&lt;/li&gt;
&lt;li&gt;Locating and populating the global variables.&lt;/li&gt;
&lt;li&gt;Reformatting the &lt;strong&gt;if&lt;/strong&gt; statements.&lt;/li&gt;
&lt;li&gt;Removing the GOTO's.  Either make them separate functions or properly nest the code.&lt;/li&gt;
&lt;li&gt;Reformatting the &lt;strong&gt;do&lt;/strong&gt; loop.&lt;/li&gt;
&lt;li&gt;Handling the 1-based indexing.  In almost all cases, Fortran &amp;quot;arrays&amp;quot; are best handled as Python dictionaries (&lt;strong&gt;not&lt;/strong&gt; lists).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once this is done, there are some remaining special-case
discrepancies.  Most of these are tacit assumptions about the
problem domain that turn out to be untrue.  For example, the
Geodetic, Geocentric features seemed needless.  However, they're
not handled trivially, and need to be left in place.  Also,
conversion of signed values in radians to degrees and minutes
isn't trivial.&lt;/p&gt;
&lt;p&gt;This leads to passing all 16 unit tests with the single opaque
collection of 3,256 numbers and delightfully complex set of index
calculations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 2.&lt;/strong&gt;  Optimize so that it makes some sense in Python.&lt;/p&gt;
&lt;p&gt;This involves unwinding the index calculations to simplify the array.
The raw coefficients are available
(&lt;a class="reference external" href="http://www.ngdc.noaa.gov/IAGA/vmod/igrf11coeffs.txt"&gt;igrf11coeffs.txt&lt;/a&gt;)
and they have a sensible structure that separates the two matrices
very cleanly.  The code uses the combined matrix (called gh) in a
very few places.  The index calculations aren't obvious at all, but a
few calls to print reveal how the matrix is accessed.&lt;/p&gt;
&lt;p&gt;Given (1) unit tests that already work and (2) the pattern of access,
it's relatively easy to hypothesize a dictionary by year that
contains a pair of simple dictionaries, g[n,m] and h[n,m], for the
coefficients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanup-and-packaging"&gt;
&lt;h2&gt;Cleanup and Packaging&lt;/h2&gt;
&lt;p&gt;Once the tests pass, the package -- as a whole -- needs to be made
reasonably Pythonic.   In this case, it means a number of additional
changes.  For example, converting the API from degrees to radians,
supplying appropriate default values for parameters, providing
convenience functions.&lt;/p&gt;
&lt;p&gt;Additionally, there are Python ways to populate the coefficients
neatly and eliminate global variables.  In this case, it seemed
sensible to create a Callable class which could load the coefficients
during construction.&lt;/p&gt;
&lt;p&gt;Note that there's little point in profiling to apply further
optimizations.  The legacy Fortran code was already meticulously hand
optimized.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-am-not-sure-where-you-are-getting-your-info-but"&gt;
&lt;h2&gt;I am not sure where you are getting your info, but...&lt;/h2&gt;
&lt;p&gt;Universal Engineering&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-23 01:12:54.811000-05:00&lt;/p&gt;
&lt;p&gt;I am not sure where you are getting your info, but great topic. I needs
to spend some time learning much more or understanding more. Thanks for
wonderful info I was looking for this.
&lt;a class="reference external" href="http://www.universalengineering.net/west-palm-beach.html"&gt;Structural Engineering West Palm
Beach&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="test-driven reverse engineering"></category><category term="#python"></category></entry><entry><title>The need for ping</title><link href="https://slott56.github.io/2011_12_13-the_need_for_ping.html" rel="alternate"></link><published>2011-12-13T08:00:00-05:00</published><updated>2011-12-13T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-13:/2011_12_13-the_need_for_ping.html</id><summary type="html">&lt;p&gt;Years ago, when designing an interface to a vendor's web services, I
did the following.  This isn't a genius move, but it's worth
emphasizing how important it is.  And what's most important isn't
technical.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I built a simple &lt;a class="reference external" href="http://c2.com/cgi/wiki?SpikeSolution"&gt;spike solution&lt;/a&gt; to access their service.&lt;/li&gt;
&lt;li&gt;I morphed this into a &amp;quot;sanity …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Years ago, when designing an interface to a vendor's web services, I
did the following.  This isn't a genius move, but it's worth
emphasizing how important it is.  And what's most important isn't
technical.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I built a simple &lt;a class="reference external" href="http://c2.com/cgi/wiki?SpikeSolution"&gt;spike solution&lt;/a&gt; to access their service.&lt;/li&gt;
&lt;li&gt;I morphed this into a &amp;quot;sanity check&amp;quot; to be sure that their service
really was working.  Mostly, I cleaned up the code so that it was
testable and deliverable without embarrassment.&lt;/li&gt;
&lt;li&gt;I morphed this into a &amp;quot;diagnostic tool&amp;quot; to bypass the higher-levels
of the application and simply access the vendor (and optionally dump
the results) to help determine what wasn't work.  This involved
adding the dump option to the sanity check and renaming the
command-line application.&lt;/li&gt;
&lt;li&gt;I morphed this into a &amp;quot;credentials check and diagnostic tool&amp;quot;.  This
was -- ahem -- merely taking the hard-wired credentials out of the
application.  Yes.  The first versions had hard-wired credentials.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That brings us to the version in use today.  The &amp;quot;vendor ping&amp;quot;
application.&lt;/p&gt;
&lt;p&gt;The default behavior is a credentials check.&lt;/p&gt;
&lt;p&gt;One optional behavior is to dump the interface details.&lt;/p&gt;
&lt;p&gt;Another optional behavior is to allow selection among a small number
of simple interactions just to be sure things are working.&lt;/p&gt;
&lt;div class="section" id="unplanned-work"&gt;
&lt;h2&gt;Unplanned Work&lt;/h2&gt;
&lt;p&gt;What's important here isn't that I did all this.  What's important is
that the deliverables, user stories and project plans didn't include
this little nugget of high-value goodness.&lt;/p&gt;
&lt;p&gt;It gets run fairly frequently in crunch situations.  The actor in the
story (&amp;quot;As system admin...&amp;quot;) is rarely considered as a first-class
user of the application.  Yet, the admin is a first-class user, and
needs to have proper user stories for confirming that the application
is working properly.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="architecture"></category></entry><entry><title>Paranoid Schizophrenic Programming (Revised)</title><link href="https://slott56.github.io/2011_12_12-paranoid_schizophrenic_programming_revised.html" rel="alternate"></link><published>2011-12-12T14:31:00-05:00</published><updated>2011-12-12T14:31:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-12:/2011_12_12-paranoid_schizophrenic_programming_revised.html</id><summary type="html">&lt;p&gt;Some folks love the twin ideas that (1) &amp;quot;someone&amp;quot; might break the API
rules and (2) they must write lots of bonus code to &amp;quot;prevent&amp;quot; problems.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;There are three distinct things here.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API definition - something we do all the time.&lt;/li&gt;
&lt;li&gt;&amp;quot;Defensive Programming&amp;quot; - something that may or may not actually …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Some folks love the twin ideas that (1) &amp;quot;someone&amp;quot; might break the API
rules and (2) they must write lots of bonus code to &amp;quot;prevent&amp;quot; problems.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;There are three distinct things here.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API definition - something we do all the time.&lt;/li&gt;
&lt;li&gt;&amp;quot;Defensive Programming&amp;quot; - something that may or may not actually exist.&lt;/li&gt;
&lt;li&gt;Paranoid Schizophrenic programming - a symptom of larger problems; this exists far too often.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's not that complicated, there's a simple 3-element
checklist for API design.  Unless &amp;quot;someone&amp;quot; is out to break
your API.   Whatever that means.&lt;/p&gt;
&lt;p&gt;A related topic is this kind of thing on Stack Overflow:
&lt;a class="reference external" href="http://stackoverflow.com/questions/261638/how-do-i-protect-python-code"&gt;How Do I Protect Python Code&lt;/a&gt;?
and &lt;a class="reference external" href="http://stackoverflow.com/questions/908285/secure-plugin-system-for-python-application"&gt;Secure Plugin System For Python
Application&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following the Rules&lt;/p&gt;
&lt;p&gt;When we define an API for a module, we define some rules.
Failure to follow the rules is -- simply -- bad behavior.
And, just as simply, when someone breaks the API rules, the
module can't work.  Calling the API improperly is the as
same as trying to install and execute a binary on the wrong
platform.&lt;/p&gt;
&lt;p&gt;It's the obligation of the designer to specify what will
happen when the rules are followed.  While it might be nice
to specify what will happen if the rules are not followed,
it is not an obligation.&lt;/p&gt;
&lt;p&gt;Here's my canonical example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def sqrt( n ):
    &amp;quot;&amp;quot;&amp;quot;sqrt(n) -&amp;gt; x such that x**2 == n, where n &amp;gt;= 0.&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;The definition of what will happen is stated.  The
definition of what happens when you attempt sqrt(-1) is not
defined.  It would be nice if sqrt(-1) raises an exception,
and it would be nice to include that in the documentation,
but it isn't an obligation of the designer.  It's entirely
possible that sqrt(-1) could return 0.  Or (0+1j).  Or nan.&lt;/p&gt;
&lt;p&gt;Item one on the checklist: define what the function will do.&lt;/p&gt;
&lt;p&gt;And note that there's a world of difference between failing,
and being used improperly.  We're talking about improper use
here; failure is unrelated.&lt;/p&gt;
&lt;div class="section" id="complete-specification"&gt;
&lt;h2&gt;Complete Specification&lt;/h2&gt;
&lt;p&gt;When I remind people that they are only obligated to specify
the correct behavior, some folks say &amp;quot;That's just wrong!  An
API document should specify every behavior!  You can't omit
the most important behavior -- the edge cases!&amp;quot;&lt;/p&gt;
&lt;p&gt;Ummm... That position makes no sense.&lt;/p&gt;
&lt;p&gt;There are lots and lots of situations unspecified in the API
documentation.  What about sqrt(2) when the underlying math
libraries are mis-installed?  What about sqrt(2) when the OS
has been corrupted by a virus in the math libraries?  What
about sqrt(2) when the floating-point processor has been
partially fried?  What about sqrt(2) when the floating-point
processor has been replaced by a nearly-equivalent
experimental chipset that doesn't raise exceptions properly?&lt;/p&gt;
&lt;p&gt;Indeed, there are an infinite number of situations not
specified in the API documentation.  For the most part,
there is only one situation defined in the API
documentation: the proper use.  All other situations may as
well be left unspecified.    Sometimes, a few additional
behaviors are specified, but only when those behaviors
provide value in diagnosing problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diagnosing-problems"&gt;
&lt;h2&gt;Diagnosing Problems&lt;/h2&gt;
&lt;p&gt;An API with thoughtful documentation will at least list the
exceptions that are most likely to be raised.  What's
important is that it does not include an exhaustive list of
exceptions.  Again, that's an absurd position -- why list
MemoryError on every single function definition?&lt;/p&gt;
&lt;p&gt;What's important about things like exceptions and error
conditions is the diagnostic value of this information.  A
good designer will provide some diagnostic hints instead of
lots of words covering every &amp;quot;possible&amp;quot; case.&lt;/p&gt;
&lt;p&gt;If there's no helpful diagnostic value, don't specify it.
For example, there's little good to be done by adding a
&amp;quot;Could raise MemoryError&amp;quot; on every method function
description.  It's true, but it isn't helpful.  Except in a
rare case of an API function that -- if used wrong -- will
raise a MemoryError; in this rare case you're providing
diagnostic information that can be helpful.  You are
overwriting the API, but you're being helpful.&lt;/p&gt;
&lt;p&gt;Item two on the checklist: provide diagnostic hints where
they're actually meaningful and helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="error-checking"&gt;
&lt;h2&gt;Error Checking&lt;/h2&gt;
&lt;p&gt;How much error checking should our &lt;tt class="docutils literal"&gt;sqrt()&lt;/tt&gt; function do?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;None?  Just fail to produce an answer, or perhaps throw an exception?&lt;/li&gt;
&lt;li&gt;Minimal.  This is easy to define, but many folks are unhappy with minimal.&lt;/li&gt;
&lt;li&gt;More than minimal but not everything.  This is troubling.&lt;/li&gt;
&lt;li&gt;Everything.  This is equally troubling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No error checking is easiest.  And it fits with our
philosophy.  If our sqrt function is used improperly --
i.e., someone broke the rule and provided a negative
number -- then any exception (or nan value) will
propagate to the caller and we're in good shape.  We
didn't overspecify -- we provided a wrong answer when
someone asked a wrong question.&lt;/p&gt;
&lt;p&gt;Again, we're not talking about some failure to process
the data.  We're talking about being called in a
senseless way by a client that's not following the rules.&lt;/p&gt;
&lt;p&gt;There's a subtlety to this, however.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-non-math-example"&gt;
&lt;h2&gt;A Non-Math Example&lt;/h2&gt;
&lt;p&gt;Yesterday, I tried to use a postal scale to measure the
temperature in my oven.  The scale read 2.5 oz.&lt;/p&gt;
&lt;p&gt;What does that mean?&lt;/p&gt;
&lt;p&gt;I asked an ill-formed question.  I got something back.
It isn't an answer -- the question was ill-formed -- but
it looks like an answer.  It's a number where I expected
a number.&lt;/p&gt;
&lt;p&gt;Here's another one.  &amp;quot;Which is heavier, the number 7 or
the color green?&amp;quot;  Any answer (&amp;quot;7&amp;quot;, &amp;quot;green&amp;quot; or &amp;quot;splice
the main brace&amp;quot;) is valid when confronted with a question
like that.&lt;/p&gt;
&lt;p&gt;Perhaps I should have run a calibration (or &amp;quot;unit&amp;quot;) test
first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-termination-question"&gt;
&lt;h2&gt;The Termination Question&lt;/h2&gt;
&lt;p&gt;In the case of a function like square root, there is an
additional subtlety.  If we're using logarithms to
compute square root, our log function may raise an
exception for sqrt(-1) or it may return nan; either of
which work out well - an ill-formed question gets an
improper answer.&lt;/p&gt;
&lt;p&gt;However, we might be using a search algorithm that will
fail to terminate (a bisection algorithm, or Newton's
method, for example.) Failure to terminate is a much,
much worse thing.  In this case -- and this case only --
we have to actually do some validation on the range of
inputs.&lt;/p&gt;
&lt;p&gt;Termination is undecidable by automated means.  It's a
design feature that we -- as programmers -- must assert
independently of any lint, compiler or testing
discipline.&lt;/p&gt;
&lt;p&gt;Note that this is not &amp;quot;defensive programming&amp;quot;.  This is
ordinary algorithm design.  Every loop structure must
terminate.  If we're trying a simple bisection algorithm
and we have not bracketed a root properly (because, for
example, it's a complex number), the bisection won't
terminate.  A root-finding bisection algorithm must
actually do two two things to assure termination:  check
the range of the inputs and limit the number of
iterations.&lt;/p&gt;
&lt;p&gt;This isn't defensive programming because we're not
checking that a mysterious &amp;quot;someone&amp;quot; is abusing the API.
We're asserting that our loop terminates.&lt;/p&gt;
&lt;p&gt;Item 3 on the checklist: reject values that would lead
loops to not terminate properly.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def sqrt( n ):
    &amp;quot;&amp;quot;&amp;quot;sqrt(n) -&amp;gt; x; such that x**2 == n; where n &amp;gt;= 0&amp;quot;&amp;quot;&amp;quot;
    assert n &amp;gt;= 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="incorrect-error-checking"&gt;
&lt;h2&gt;Incorrect Error Checking&lt;/h2&gt;
&lt;p&gt;Once we start checking for loop termination, folks say
that &amp;quot;we're on a slippery slope&amp;quot; and ask where's that
&amp;quot;fine line&amp;quot; between the minimal level of error checking
(loops will terminate) and the
paranoid schizophrenic level of error checking.&lt;/p&gt;
&lt;p&gt;It isn't a slope.  It's a cliff.  Beyond loop
termination, there's (almost) nothing more that's
relevant.&lt;/p&gt;
&lt;p&gt;By &amp;quot;almost&amp;quot;, I mean that languages like Python have a
tiny realm where an additional assertion about the
arguments is appropriate.&lt;/p&gt;
&lt;p&gt;Because of duck typing, many algorithms in Python can be
written very generically.  Very generically.  Sorting,
for example, can be applied to lists of -- almost --
anything.  Except, of course, it isn't meaningful for
things with no useful __cmp__ function.  And in the
case of things like a dictionary, what's the basis for
comparison?&lt;/p&gt;
&lt;p&gt;In the case of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Dynamic_programming_language"&gt;dynamic
languages&lt;/a&gt;
and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Duck_typing"&gt;duck
typing&lt;/a&gt;,
it's possible that an algorithm will terminate, producing
a wrong answer.  (BTW, this one reason why Python has /
and // as distinct division operators -- to assure that
ints and floats can be used interchangeably and the
algorithm still works.)&lt;/p&gt;
&lt;p&gt;Item 4 on the checklist: When you have a known problem
with a type, reject only those types that are a problem.&lt;/p&gt;
&lt;p&gt;This is very rare, BTW.  Mostly it occurs with
overlapping types (lists and tuples, floats and ints.)
Most well-designed algorithms work with a wide variety
of types.  Except in the overlapping types situation,
Python will raise exceptions for types that don't work;
make use of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-business-rules"&gt;
&lt;h2&gt;What About &amp;quot;Business Rules&amp;quot;?&lt;/h2&gt;
&lt;p&gt;By &amp;quot;business rules&amp;quot; most people mean value ranges or
codes that are defined by some externality.  As in &amp;quot;the
claim value must be a number between the co-pay and the
life-time limit&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is not a &amp;quot;Defensive Programming&amp;quot; issue.  This is
just a policy statement written into the code.  Your API
won't break if the claim value is less than the co-pay.
Your users will be pissed off, but that's a separate
problem.&lt;/p&gt;
&lt;p&gt;Also, you rarely raise an exception for business rules.
Usually, you'll collect business rule violations into a
formal error report or log.  For example, Django's
&lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation"&gt;Forms&lt;/a&gt;
will collection a dictionary of validation errors.  Each
element in the dictionary has a list of problems with a
particular field on the form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-someone-who-can-t-use-the-api"&gt;
&lt;h2&gt;What About &amp;quot;Someone&amp;quot; Who Can't Use The API?&lt;/h2&gt;
&lt;p&gt;Here's where the conversation goes awry.&lt;/p&gt;
&lt;p&gt;First, if this is a hypothetical &amp;quot;someone&amp;quot;, you need to
relax.  Consider these use cases. Are you worried that
&amp;quot;someone&amp;quot; will download your software, install it,
configures it, start to use it, and refuse to follow the
documented API?  Are you worried that they will send you
angry emails saying that they insist on doing the wrong
thing and your software doesn't work?  You don't need
&amp;quot;defensive programming&amp;quot;, you need to either add the
features they want or steer them to a package that does
what they're expecting.&lt;/p&gt;
&lt;p&gt;Here's another version of a hypothetical someone: you're
working as part of a larger team, and you provide a
package with an API.  Are you worried that a team member
will refuse to follow the documented API?  Are you
worried that they will send you angry emails saying that
they insist on doing the wrong thing and your software
doesn't work?  This isn't a call for &amp;quot;defensive
programming,&amp;quot; this is a call for a conversation.  Perhaps
you built the wrong thing.  Perhaps you API documentation
isn't as crystal-clear as you thought.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="someone-really-is-using-it-wrong"&gt;
&lt;h2&gt;Someone Really Is Using It Wrong&lt;/h2&gt;
&lt;p&gt;A common situation is someone who's actually using the
API wrong.  The conversation didn't help, they refuse to
change their software.  Or you can't easily call them out
on it because -- for example -- your boss wrote detailed
specs for you, which you followed, but someone else isn't
following.  What can you do?  The specification
contradicts the actual code that uses the API.&lt;/p&gt;
&lt;p&gt;Is this a place where we can apply &amp;quot;Defensive
Programming&amp;quot;?&lt;/p&gt;
&lt;p&gt;Still no.&lt;/p&gt;
&lt;p&gt;This is a call for some diagnostic support.  You need
error messages and logs that help you diagnose the
problem and locate the root cause.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="root-causes"&gt;
&lt;h2&gt;Root Causes&lt;/h2&gt;
&lt;p&gt;The issue with &amp;quot;Defensive Programming&amp;quot; is that it
conflates two unrelated use cases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API Design.&lt;/li&gt;
&lt;li&gt;Unwilling (or unable) to Follow Instructions. (UFI™)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;API design has four simple rules.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Document what it does.&lt;/li&gt;
&lt;li&gt;For diagnostic aid, in common edge cases, document
other things it might do.  Specifically, describe
conditions that are root causes of exceptions or weird
answers.  Sometimes a subclass of exception is handy
for handling this.&lt;/li&gt;
&lt;li&gt;Be sure that it terminates.  If necessary, validate
arguments to determine if termination can't happen and
raise exceptions.&lt;/li&gt;
&lt;li&gt;In rare cases, check the data types to be sure the
algorithm will actually work.  Most of the time, wrong
data types will simply throw exceptions; leverage that
built-in behavior.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If (1) someone refuses to follow the rules and (2)
complains that it's your API and (3) you elect to make
changes, then...&lt;/p&gt;
&lt;p&gt;First, you can't prevent this.  There's no &amp;quot;defensive
programming&amp;quot; to head this off.&lt;/p&gt;
&lt;p&gt;Second, know that what you're doing is wrong.   Making
changes when someone else refuses to follow the rules
and blames you is enabling someone else's bad
behavior.  But, we'll assume you have to make changes
for external political reasons.&lt;/p&gt;
&lt;p&gt;Third -- and most important -- you're relaxing the API
to tolerate ordinarily invalid data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expanding-what-s-allowed"&gt;
&lt;h2&gt;Expanding What's &amp;quot;Allowed&amp;quot;&lt;/h2&gt;
&lt;p&gt;When someone refuses to follow the API -- and demands you
make a change -- you're having this conversion.&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;I need you to 'handle' sqrt(-1).&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;Square Root is undefined for negative numbers.&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;I know that, but you need to 'handle' it.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;There's no answer, you have to stop requesting sqrt(-1).&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;Can't change it.  I'm going to make sqrt(-1) requests for external political reasons.  I can't stop it, prevent it or even detect it.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;What does 'handle' mean?&amp;quot;&lt;/p&gt;
&lt;p&gt;At this point, they usually want you to do something that
lets them limp along.  Whatever they ask you to do is
crazy.  But you've elected to cover their erroneous code
in your module.  You're writing diagnostic code for their
problem, and you're burying it inside your code.&lt;/p&gt;
&lt;p&gt;If you're going to do this, you're not doing &amp;quot;defensive
programming&amp;quot;, you're writing some unnecessary code that
diagnoses a problem elsewhere.  Label it this way and
make it stand out.  It isn't &amp;quot;defensive&amp;quot; programming.
It's &amp;quot;dysfunctional co-dependent relationship&amp;quot;
programming.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="errors-should-never-pass-silently-zen-of-pytho"&gt;
&lt;h2&gt;&amp;quot;Errors should never pass silently.&amp;quot; -Zen of Pytho...&lt;/h2&gt;
&lt;p&gt;Benjamin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-02 12:44:53.415000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Errors should never pass silently.&amp;quot; -Zen of Python
sqrt(-1) returning 0 is failing silently.&lt;/p&gt;
&lt;p&gt;While you may not like it, verifying inputs leads to much, much
friendlier APIs. And while you may not feel it's an obligation, you'll
make users of your API much happier if you do so. And sometimes, it is
an obligation: &lt;a class="reference external" href="http://xkcd.com/327/"&gt;http://xkcd.com/327/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you first mention rule 4 you state:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="item-4"&gt;
&lt;h2&gt;&amp;quot;Item 4 ...&lt;/h2&gt;
&lt;p&gt;Paddy3118&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-01 04:36:38.306000-04:00&lt;/p&gt;
&lt;p&gt;When you first mention rule 4 you state:&lt;/p&gt;
&lt;p&gt;&amp;quot;Item 4 on the check-list: check types; reject only those types that are
a problem.&amp;quot;&lt;/p&gt;
&lt;p&gt;When you mention it in the main list later, it becomes:
&amp;quot;In rare cases, check the data types to be sure the algorithm will
actually work. Most of the time, wrong data types will simply throw
exceptions; leverage that built-in behavior.&amp;quot;&lt;/p&gt;
&lt;p&gt;You need t modify the first mention to something like
&amp;quot;Don't check argument types! (Except where you know a particular
data-type leads to a problem, where that data-type should then be
excluded rather than checking for a data-type that you know works
correctly)&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Given half a chance, some people will want to code data-type checks.&lt;/li&gt;
&lt;li&gt;Paddy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-good-analogy-is-in-the-world-of-electric-applian"&gt;
&lt;h2&gt;A good analogy is in the world of electric applian...&lt;/h2&gt;
&lt;p&gt;nnis&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-01 15:07:12.399000-04:00&lt;/p&gt;
&lt;p&gt;A good analogy is in the world of electric appliances. Electronic
components like resistors, capacitors, transistors blow up if they are
hooked up wrong or too much voltage is put into them, yet no electronic
engineer says: “Gosh, these components are junk, let’s ask the supplier
to send us protected versions that withstand any kind of abuse”. A
component built that way would cost 5 times as much. What is actually
done is to look at the spec sheets for the components used and put them
together in such a way that they won’t blow up when you operate the
appliance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-m-not-convinced-when-i-write-defensive-ch"&gt;
&lt;h2&gt;I&amp;amp;#39;m not convinced.   When I write defensive ch...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-15 16:40:51.110000-04:00&lt;/p&gt;
&lt;p&gt;I'm not convinced. When I write defensive checks for, say, function
arguments, I'm guarding against someone (very probably me a few weeks
later) accidentally misusing an API. I'd rather know about that misuse
as soon as it happens, instead of later discovering that the numerical
results of all past year's calculations are suspect because somewhere we
took a square root of a negative number.&lt;/p&gt;
&lt;p&gt;Then again expensive rockets have been brought down by excessive error
handling (Ariane 5 Flight 501). I don't know where the line lies
exactly; but as long as program crashes aren't prohibitively expensive
I'd rather see a crash than garbage output.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="#python"></category><category term="architecture"></category><category term="OO design"></category><category term="defensive programming"></category><category term="assert statement"></category></entry><entry><title>Test-Driven Reverse Engineering (TDRE)</title><link href="https://slott56.github.io/2011_04_19-test_driven_reverse_engineering_tdre.html" rel="alternate"></link><published>2011-04-19T08:00:00-04:00</published><updated>2011-04-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-04-19:/2011_04_19-test_driven_reverse_engineering_tdre.html</id><summary type="html">&lt;p&gt;Another case study on TDRE.&lt;/p&gt;
&lt;p&gt;Provided: 2,938 lines of Python code which process a handful of large
files to create a number of outputs. [Details can't be disclosed.]&lt;/p&gt;
&lt;p&gt;Objective: Refactor to distinguish between the overall sequence of
transformational steps and the details of each individual step.&lt;/p&gt;
&lt;div class="section" id="observations"&gt;
&lt;h2&gt;Observations&lt;/h2&gt;
&lt;p&gt;The code …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Another case study on TDRE.&lt;/p&gt;
&lt;p&gt;Provided: 2,938 lines of Python code which process a handful of large
files to create a number of outputs. [Details can't be disclosed.]&lt;/p&gt;
&lt;p&gt;Objective: Refactor to distinguish between the overall sequence of
transformational steps and the details of each individual step.&lt;/p&gt;
&lt;div class="section" id="observations"&gt;
&lt;h2&gt;Observations&lt;/h2&gt;
&lt;p&gt;The code is almost purely procedural. There are 11 class definitions.
6 of these wrap built-in types with type conversion and
null-handling. 1 is a new exception. 1 is a generic &amp;quot;table&amp;quot; that
essentially duplicates features of SQLite. The remaining 3 are
actually part of the problem domain.&lt;/p&gt;
&lt;p&gt;One reason for reverse engineering is that the code has reached an
intellectual limit. It's small, but &amp;quot;dense&amp;quot; with highly-optimized
processing steps. The &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cohesion_(computer_science)#Types_of_cohesion"&gt;cohesion
type&lt;/a&gt;
is almost all &amp;quot;Temporal&amp;quot;. Processing is grouped into successive
processing loops; each loop contains a cluster of processing steps.
Consequently, it's quite hard to tease apart the algorithm to get a
&amp;quot;big picture&amp;quot; of what's going on. It's just a dense stand of trees.
No forest.&lt;/p&gt;
&lt;p&gt;Another reason for reverse engineering is to support the endless
adaptation and modification of the code base. The program is a kind
of &amp;quot;spreadsheet on steroids&amp;quot;. This isn't a simplistic collection of
cells and formulæ that permits simple what-if analysis. This is a
more complex set of formulæ that would be challenging (but not
impossible) to implement as a spreadsheet. The use case, however, is
the spreasheet use case: think, tweak, create results, repeat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tdre-approach"&gt;
&lt;h2&gt;TDRE Approach&lt;/h2&gt;
&lt;p&gt;Start with an &lt;strong&gt;Initial Survey&lt;/strong&gt; of the legacy code base and sample
files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create an Outline&lt;/strong&gt; or &amp;quot;sketch&amp;quot; of the domain model and main
program. This will be a modules (or a package) with comments and some
preliminary class definitions. Little more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pick a processing Step&lt;/strong&gt; in the legacy code. This often requires
creating processing summaries of the legacy code. Most legacy code is
procedural, so the processing tends to be sequential in nature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instrument the Legacy Code&lt;/strong&gt; with print statements to gather data.
This can be simple. The output can be challenging to interpret.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;tdre_results_1&amp;quot;,&amp;quot;w&amp;quot;) as tdre:

# some legacy processing

print( &amp;quot;Case:&amp;quot;, foo, bar, &amp;quot;, Expect:&amp;quot;, baz, file=tdre )
&lt;/pre&gt;
&lt;p&gt;From the output, &lt;strong&gt;Build Unit Test Cases&lt;/strong&gt;. Fill in parts of the
processing sequence and domain model. Debug code until the tests
pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="initial-survey"&gt;
&lt;h2&gt;Initial Survey&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Initial Survey&lt;/strong&gt; locates several things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The usable, working modules. It appears that all reverse
engineering involves a code base with dead or unused code. Even a
small project (3,000 lines) will have a remarkable amount of dead
code.&lt;/li&gt;
&lt;li&gt;Priorities for the implemented functionality. Not every &amp;quot;main&amp;quot;
module is relevant.&lt;/li&gt;
&lt;li&gt;Example inputs and outputs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the software cannot be run (as is the case with organically
developed systems that depend on large, complex corporate
databases), then the example inputs and outputs may not actually
match the software. If the software can be run, it should be run
and the actuals compared against the samples to confirm that the
code base supplied really produced the sample outputs.&lt;/p&gt;
&lt;p&gt;Expect that the provided legacy code is slightly different from the
code in production use. In some cases, this cannot be resolved; for
example, when the executables are older than the source. In other
cases, the code matches and no further work is required to establish
the legacy baseline.&lt;/p&gt;
&lt;p&gt;The sample outputs point in the direction of an acceptance test case.
The sample output cannot be taken literally as the one-and-only
acceptance test. While it's desirable for reverse engineering to
reproduce the sample output, most reverse engineering will involve
enhancements or bug fixes. Expect that errors will be found (or may
be known to exist) in the sample output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-outline"&gt;
&lt;h2&gt;Create Outline&lt;/h2&gt;
&lt;p&gt;The outline is -- initially -- just generic MVP. There must be a
domain model, some &amp;quot;presenter&amp;quot; that has the application logic, and
some &amp;quot;view&amp;quot; for displaying the outputs.&lt;/p&gt;
&lt;p&gt;In our case study, above, the &amp;quot;view&amp;quot; is a collection of (mostly text)
output files. The model was undefined in the legacy code, which was
all &amp;quot;presenter&amp;quot; application logic.&lt;/p&gt;
&lt;p&gt;The goal was to extract the underlying model, break the application
&amp;quot;presenter&amp;quot; logic into two layers (forest and trees) and build some
views for each of the output files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pick-a-processing-step"&gt;
&lt;h2&gt;Pick a Processing Step&lt;/h2&gt;
&lt;p&gt;This can be challenging, depending on the legacy code base. There are
two paths through a procedural code base.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Back to Front. Start with the final results and unit test the
final steps based on previous steps that will be defined later.&lt;/li&gt;
&lt;li&gt;Front to Back. Start with the first recognizable intermediate
result based on the input files. Unit test the initial steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's more rewarding to work front-to-back because progress can be
shown a little more clearly.&lt;/p&gt;
&lt;p&gt;A better architecture can be created by working back-to-front since
dependencies are easier to understand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-test-volume-edges-and-corners"&gt;
&lt;h2&gt;Unit Test Volume, Edges and Corners&lt;/h2&gt;
&lt;p&gt;There are two unit test design challenges when doing reverse
engineering.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Volume. The sample data can be large. 100,000 rows of sample data
is too many to test. Finding a &amp;quot;representative&amp;quot; subset is
difficult. Generally, arbitrary subsets have to be used to get
started. Once the application mostly works, more refined unit
tests need to be created.&lt;/li&gt;
&lt;li&gt;Edge and Corner Cases. While the code may be riddled with
&lt;strong&gt;if&lt;/strong&gt;-statements, it can still be difficult to locate sample
inputs that exercise the various conditions in the code. It's
risky to create data -- we have to assume that the legacy code
does unexpected things. In many cases, print statements have to be
put into complex if statements to locate any actual data that
exercises that logic path.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the unit tests are built, this is just Test-Driven
Development (TDD).&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="really-great-post-i-got-some-similar-advice-from"&gt;
&lt;h2&gt;Really great post! I got some similar advice from ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-04-19 15:21:45.848000-04:00&lt;/p&gt;
&lt;p&gt;Really great post! I got some similar advice from another developer. It
is helpful to see the process clearly explained for reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="helpful-tools-to-measure-windows-and-pipe-connecti"&gt;
&lt;h2&gt;Helpful tools to measure windows and pipe connecti...&lt;/h2&gt;
&lt;p&gt;samia87&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-04-01 02:09:36.781000-04:00&lt;/p&gt;
&lt;p&gt;Helpful tools to measure windows and pipe connections reduce the work
involved. Automatically create and export drawings with borders and
folding marks: data can be printed without the need for further
processing. &lt;a class="reference external" href="https://onsite3d.ca/"&gt;Reverse engineering Denver,
Colorado&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="#python"></category><category term="reverse engineering"></category><category term="test-driven reverse engineering"></category></entry><entry><title>Performance Discussions and Software Design</title><link href="https://slott56.github.io/2011_04_05-performance_discussions_and_software_design.html" rel="alternate"></link><published>2011-04-05T08:00:00-04:00</published><updated>2011-04-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-04-05:/2011_04_05-performance_discussions_and_software_design.html</id><summary type="html">&lt;p&gt;Read this first: &amp;quot;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=2375750"&gt;There is something I find interesting about online
discussions around performance
issues&lt;/a&gt;...&amp;quot; It's about
Stack Overflow, specifically. Apparently, someone didn't get their
question answered and decided it was better to gripe than to rewrite the
question.&lt;/p&gt;
&lt;p&gt;Let's look at their response in pieces.&lt;/p&gt;
&lt;p&gt;&amp;quot;people try to gang …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this first: &amp;quot;&lt;a class="reference external" href="http://news.ycombinator.com/item?id=2375750"&gt;There is something I find interesting about online
discussions around performance
issues&lt;/a&gt;...&amp;quot; It's about
Stack Overflow, specifically. Apparently, someone didn't get their
question answered and decided it was better to gripe than to rewrite the
question.&lt;/p&gt;
&lt;p&gt;Let's look at their response in pieces.&lt;/p&gt;
&lt;p&gt;&amp;quot;people try to gang up&amp;quot;. Since there's almost no social networking
capability, this is a bit much to attribute to people responding to a
poorly-worded question. But, if you've worked all day on a bad
solution to a poorly-conceived problem, it can &lt;em&gt;feel&lt;/em&gt; like being
ganged up on. When reality leaks in, it can feel unpleasant.&lt;/p&gt;
&lt;p&gt;Hint 1. There are no gangs. It's possible that the question really is
poorly written.&lt;/p&gt;
&lt;p&gt;&amp;quot;cookie-cutter, patronizing, zero-information responses&amp;quot;. I'm
guessing these are comments suggesting the approach is bad and asking
for clarification. I run afoul of this often because I feel compelled
to post comments asking for clarification. Some folks just don't like
to clarify. More than once I've been told that their question was
very clear. Since I'm asking for clarification, it seems odd to
insist the question is perfect. Worse, of course, is asking for help
on Stack Overflow, but refusing to clarify the help required.&lt;/p&gt;
&lt;p&gt;Hint 2. Clarify. Please. Don't insist that the question is perfect.&lt;/p&gt;
&lt;p&gt;&amp;quot;they assume, without any basis, that the person has not (a)
benchmarked the code,&amp;quot; When the question has no bench mark data, this
isn't an assumption. It's a response to the lack of benchmark data.&lt;/p&gt;
&lt;p&gt;Hint 3. Provide the facts. Don't complain when folks ask for facts.&lt;/p&gt;
&lt;p&gt;&amp;quot;(b) is obviously running an inferior algorithm&amp;quot;. Again, this isn't
an assumption. It's the response to an incomplete question where the
algorithm isn't provided. Also, it's a common response to questions
where the algorithm really is inferior.&lt;/p&gt;
&lt;p&gt;Hint 4. Consider that -- even after spending days banging your head
against the wall -- your question might be poorly-written and require
both benchmark data and an algorithm.&lt;/p&gt;
&lt;p&gt;&amp;quot;advice about premature optimization... is a well assimilated
folklore by now and I dont see how repeating that adds value&amp;quot;.
Without measurements, profiler results and benchmark data, this is
our only possible response. &lt;em&gt;After&lt;/em&gt; the profiler results are posted,
this advice really is useless. &lt;em&gt;Before&lt;/em&gt; profiler results are posted,
this advice often turns out to be essential.&lt;/p&gt;
&lt;p&gt;Hint 5. Whatever you might know is not well-assimilated folklore on
Stack Overflow as a whole. We don't know you, sadly. We don't know
how much you know. To avoid useless advice, provide evidence -- in
the question -- that the advice has &lt;em&gt;already&lt;/em&gt; been followed.&lt;/p&gt;
&lt;p&gt;&amp;quot;better served if the discussion shifted to ... Pointed out possible
bottlenecks ahead of time,&amp;quot; Wouldn't that be nice? What's a &amp;quot;possible
bottleneck&amp;quot;? It's a badly-design algorithm. So, the responses to
performance questions has to be focused on algorithm choice right
away. That means details on the code being used, and profiling
information.&lt;/p&gt;
&lt;p&gt;Hint 6. There is no hint 6. This would simply repeat hints 3 and 5.&lt;/p&gt;
&lt;p&gt;&amp;quot;regardless of the fact whether the code construct is actually a
bottleneck in the application or not, it is always good to know what
the more efficient alternatives are... there is something called
intellectual curiosity.&amp;quot;&lt;/p&gt;
&lt;p&gt;Reducing a question to a hand-waving hypothetical doesn't &lt;em&gt;improve&lt;/em&gt;
the question. It doesn't &lt;em&gt;rationalize&lt;/em&gt; a poor question. The question
still needs to be clarified.&lt;/p&gt;
&lt;p&gt;Hint 7. If the question raises a lot of comments and useless advice,
please &lt;strong&gt;rewrite&lt;/strong&gt; the question.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-a-related-blog-which-steve-lott-also-posted-c"&gt;
&lt;h2&gt;For a related blog which Steve Lott also posted, c...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-04-05 21:43:13.029000-04:00&lt;/p&gt;
&lt;p&gt;For a related blog which Steve Lott also posted, check out
&lt;a class="reference external" href="https://slott56.github.io/2010_11_30-questions_or_how_to_ask_for_help.html"&gt;Questions, or, How to Ask For Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you-for-writing-this"&gt;
&lt;h2&gt;Thank you for writing this! :)&lt;/h2&gt;
&lt;p&gt;Peter Lindqvist&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-04-05 08:23:28.568000-04:00&lt;/p&gt;
&lt;p&gt;Thank you for writing this! :)&lt;/p&gt;
&lt;p&gt;The content on your website never confuses me
&amp;lt;a h...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-30 09:49:30.703000-04:00&lt;/p&gt;
&lt;p&gt;The content on your website never confuses me
&lt;a class="reference external" href="http://www.realbookie.com"&gt;price per head software&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-are-no-gangs-it-39-s-possible-that-the-que"&gt;
&lt;h2&gt;There are no gangs. It&amp;amp;#39;s possible that the que...&lt;/h2&gt;
&lt;p&gt;Antic_Hero&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-13 05:10:08.698000-04:00&lt;/p&gt;
&lt;p&gt;There are no gangs. It's possible that the question really is poorly
written.&lt;a class="reference external" href="http://www.makeawebsiteguide.com"&gt;domain name&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-for-sharing-such-a-post-looking-forward-fo"&gt;
&lt;h2&gt;Thanks For sharing such a post. Looking forward fo...&lt;/h2&gt;
&lt;p&gt;Wide Vision Technology&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-22 04:01:50.050000-04:00&lt;/p&gt;
&lt;p&gt;Thanks For sharing such a post. Looking forward for such type of post.
Good Going.
Make sure you update this again soon
&lt;a class="reference external" href="http://www.widevision.co.in/dedicated-hiring/hire-dedicated-php-programmer.aspx"&gt;hire dedicated php
developer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="algorithm"></category><category term="API Design"></category><category term="OO design"></category><category term="stackoverflow"></category></entry><entry><title>TDD -- From SME Spreadsheet to TestCase to Code</title><link href="https://slott56.github.io/2011_02_17-tdd_from_sme_spreadsheet_to_testcase_to_code.html" rel="alternate"></link><published>2011-02-17T08:00:00-05:00</published><updated>2011-02-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-02-17:/2011_02_17-tdd_from_sme_spreadsheet_to_testcase_to_code.html</id><summary type="html">&lt;p&gt;In &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2011_02_08-unit_test_case_subject_matter_experts_and_requirements.html"&gt;Unit Test Case, Subject Matter Experts and
Requirements&lt;/a&gt;&amp;quot;
I suggested that it's often pretty easy to get a spreadsheet of
full-worked out examples from subject-matter experts. Indeed, if your
following TDD, that spreadsheet of examples is solid gold.&lt;/p&gt;
&lt;p&gt;Let's consider something relatively simple. Let's say we're working
on some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2011_02_08-unit_test_case_subject_matter_experts_and_requirements.html"&gt;Unit Test Case, Subject Matter Experts and
Requirements&lt;/a&gt;&amp;quot;
I suggested that it's often pretty easy to get a spreadsheet of
full-worked out examples from subject-matter experts. Indeed, if your
following TDD, that spreadsheet of examples is solid gold.&lt;/p&gt;
&lt;p&gt;Let's consider something relatively simple. Let's say we're working
on some fancy calculations. Our users explain until they're blue in
the face. We take careful notes. We &lt;em&gt;think&lt;/em&gt; we understand. To
confirm, we ask for a simple spreadsheet with inputs and outputs.&lt;/p&gt;
&lt;p&gt;We get something like the following. The latitudes and longitudes are
inputs. The ranges and bearings are outputs. [The math can be seen at
&amp;quot;&lt;a class="reference external" href="http://www.movable-type.co.uk/scripts/latlong.html"&gt;Calculate distance, bearing and more between Latitude/Longitude
points&lt;/a&gt;&amp;quot;.]&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="17%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="17%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="12%" /&gt;
&lt;col width="16%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Latitude 1&lt;/th&gt;
&lt;th class="head"&gt;Longitude 1&lt;/th&gt;
&lt;th class="head"&gt;Latitude 2&lt;/th&gt;
&lt;th class="head"&gt;Longitude 2&lt;/th&gt;
&lt;th class="head"&gt;range&lt;/th&gt;
&lt;th class="head"&gt;bearing&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;50 21 50N&lt;/td&gt;
&lt;td&gt;004 09 25W&lt;/td&gt;
&lt;td&gt;42 21 04N&lt;/td&gt;
&lt;td&gt;071 02 27W&lt;/td&gt;
&lt;td&gt;2805 nm&lt;/td&gt;
&lt;td&gt;260 07 38&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Only it has a a few more rows with different examples. Equator
Crossing. Prime Meridian Crossing. All the usual suspects.&lt;/p&gt;
&lt;div class="section" id="tdd-means-making-test-cases"&gt;
&lt;h2&gt;TDD Means Making Test Cases&lt;/h2&gt;
&lt;p&gt;Step one, then, is to parse the spreadsheet full of examples and
create some domain-specific examples. Since it's far, far easier to
work with .CSV files, we'll presume that we can save the
carefully-crafted spreadsheet as a simple .CSV with the columns shown
above.&lt;/p&gt;
&lt;p&gt;Step two will be to create working Python code from the
domain-specific examples.&lt;/p&gt;
&lt;p&gt;The creation of test cases is a matter of building some intermediate
representation out of the spreadsheet. This is where plenty of
parsing and obscure special-case data handling may be necessary.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from __future__ import division
import csv
from collections import namedtuple
import re

latlon_pat= re.compile(&amp;quot;(\d+)\s+(\d+)\s+(\d+)([NSWE])&amp;quot;)
def latlon( txt ):
    match= latlon_pat.match( txt )
    d, m, s, h = match.groups()
    return float(d)+float(m)/60+float(s)/3600, h

angle_pat= re.compile(&amp;quot;(\d+)\s+(\d+)\s+(\d+)&amp;quot;)
def angle( txt ):
    match= angle_pat.match( txt )
    d, m, s = match.groups()
    return float(d)+float(m)/60+float(s)/3600

range_pat= re.compile(&amp;quot;(\d+)\s*(\D+)&amp;quot;)
def range( txt ):
    match= range_pat.match( txt )
    d, units = match.groups()
    return float(d), units

RangeBearing= namedtuple(&amp;quot;RangeBearing&amp;quot;,&amp;quot;lat1,lon1,lat2,lon2,rng,brg&amp;quot;)

def test_iter( filename=&amp;quot;sample_data.csv&amp;quot; ):
    with open(filename,&amp;quot;r&amp;quot;) as source:
        rdr= csv.DictReader( source )
        for row in rdr:
            print row
            tc= RangeBearing(
                latlon(row['Latitude 1']),  latlon(row['Longitude 1']),
                latlon(row['Latitude 2']),  latlon(row['Longitude 2']),
                range(row['range']),
                angle(row['bearing'])
                )
            yield tc

for tc in test_iter():
    print tc
&lt;/pre&gt;
&lt;p&gt;This is long, but, it handles a lot of the formatting vagaries that
users are prone to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="from-abstract-to-testcase"&gt;
&lt;h2&gt;From Abstract to TestCase&lt;/h2&gt;
&lt;p&gt;Once we have a generator to build test cases as abstraction examples,
generating code for Java or Python or anything else is just a little
template-fu.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from string import Template
testcase= Template(&amp;quot;&amp;quot;&amp;quot;
    class Test_${name}( unittest.TestCase ):
     def setUp( self ):
         self.p1= LatLon( lat=GlobeAngle(*$lat1), lon=GlobeAngle(*$lon1) )
         self.p2= LatLon( lat=GlobeAngle(*$lat2), lon=GlobeAngle(*$lon2) )
     def test_should_compute( self ):
         d, brg = range_bearing( p1, p2, R=$units )
         self.assertEquals( $dist, int(d) )
         self.assertEquals( $brg, map(int,map(round,brg.deg)))
    &amp;quot;&amp;quot;&amp;quot;)
for name, tc in enumerate( test_iter() ):
    units= tc.rng[1].upper()
    dist= tc.rng[0]
    code= testcase.substitute( name=name, dist=dist, units=units, **tc._asdict()  )
    print code
&lt;/pre&gt;
&lt;p&gt;This shows a simple template with values filled in. Often, we have to
generate a hair more than this. A few imports, a &amp;quot;unittest.main()&amp;quot; is
usually sufficient to transform a spreadsheet into unit tests that we
can confidently use for test-driven development.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="pretty-cool-thanks-for-sharing"&gt;
&lt;h2&gt;Pretty cool. Thanks for sharing&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-17 11:50:41.977000-05:00&lt;/p&gt;
&lt;p&gt;Pretty cool. Thanks for sharing&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="#python"></category><category term="tdd"></category></entry><entry><title>Unit Test Case, Subject Matter Experts and Requirements</title><link href="https://slott56.github.io/2011_02_08-unit_test_case_subject_matter_experts_and_requirements.html" rel="alternate"></link><published>2011-02-08T08:00:00-05:00</published><updated>2011-02-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-02-08:/2011_02_08-unit_test_case_subject_matter_experts_and_requirements.html</id><summary type="html">&lt;p&gt;Here's a typical &amp;quot;I don't like TDD&amp;quot; question: the topic is &amp;quot;&lt;a class="reference external" href="http://programmers.stackexchange.com/questions/41773/does-tdd-really-work-for-complex-projects"&gt;Does TDD
really work for complex
projects?&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Part of the question focused on the difficulty of preparing test
cases that cover the requirements. In particular, there was some
hand-wringing over conflicting and contradictory requirements.&lt;/p&gt;
&lt;p&gt;Here's what's worked for me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a typical &amp;quot;I don't like TDD&amp;quot; question: the topic is &amp;quot;&lt;a class="reference external" href="http://programmers.stackexchange.com/questions/41773/does-tdd-really-work-for-complex-projects"&gt;Does TDD
really work for complex
projects?&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Part of the question focused on the difficulty of preparing test
cases that cover the requirements. In particular, there was some
hand-wringing over conflicting and contradictory requirements.&lt;/p&gt;
&lt;p&gt;Here's what's worked for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preparation&lt;/strong&gt;. The users provide the test cases as a spreadsheet
showing the business rules. The columns are attributes of some
business document or case. The rows are specific test cases. Users
can (and often will) do this at the drop of a hat. Often complex,
narrative requirements written by business analysts are based on such
a spreadsheet.&lt;/p&gt;
&lt;p&gt;This is remarkably easy for must users to produce. It's just a
spreadsheet (or multiple spreadsheets) with concrete examples. It's
often easier for users to make concrete examples than it is for them
to write more general business rules.&lt;/p&gt;
&lt;div class="section" id="automated-test-case-construction"&gt;
&lt;h2&gt;Automated Test Case Construction&lt;/h2&gt;
&lt;p&gt;Here's what can easily happen next.&lt;/p&gt;
&lt;p&gt;Write a Python script to parse the spreadsheet and extract the cases.
There will be some ad-hoc rules, inconsistent test cases, small
technical problems. The spreadsheets will be formatted poorly or
inconsistently.&lt;/p&gt;
&lt;p&gt;Once the cases are parsed, it's easy to then create a
Unittest.TestCase template of some kind. Use
&lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt; or even Python's string.Template
class to rough out the template for the test case. The specifics get
filled into the unit test template.&lt;/p&gt;
&lt;p&gt;The outline of test case construction is something like this. Details
vary with target language, test case design, and overall test case
packaging approach.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
t = SomeTemplate()
for case_dict in testCaseParser( &amp;quot;some.xls&amp;quot; ):
    code= t.render( **case_dict )
    with open(testcaseName(**case_dict ),'w') as result:
        result.write( code )
&lt;/pre&gt;
&lt;p&gt;You now have a fully-populated tree of unit test classes, modules and
packages built from the end-user source documents.&lt;/p&gt;
&lt;p&gt;You have your tests. You can start doing TDD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scenarios"&gt;
&lt;h2&gt;Scenarios&lt;/h2&gt;
&lt;p&gt;One of the earliest problems you'll have is test case spreadsheets
that are broken. Wrong column titles, wrong formatting, something
wrong. Go meet with the user or expert that built the spreadsheet and
get the thing straightened out.&lt;/p&gt;
&lt;p&gt;Perhaps there's some business subtlety to this. Or perhaps they're
just careless. What's important is that the spreadsheets have to be
parsed by simple scripts to create simple unit tests. If you can't
arrive at a workable solution, you have Big Issues and it's better to
resolve it now than try to press on to implementation with a user or
SME that's uncooperative.&lt;/p&gt;
&lt;p&gt;Another problem you'll have is that tests will be inconsistent. This
will be confusing at first because you've got code that passed one
test, and fails another test and you can't tell what the differences
between the tests are. You have to go meet with the users or SME's
and resolve what the issue is. Why are the tests inconsistent? Often,
attributes are missing from the spreadsheet -- attributes they each
assumed -- and attributes you didn't have explicitly written down
anywhere. Other times there's confusion that needs to be resolved
before any programming should begin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-big-payoff"&gt;
&lt;h2&gt;The Big Payoff&lt;/h2&gt;
&lt;p&gt;When the tests all pass, you're ready for performance and final
acceptance testing. Here's where TDD (and having the users own the
test cases) pays out well.&lt;/p&gt;
&lt;p&gt;Let's say we're running the final acceptance test cases and the users
balk at some result. &amp;quot;Can't be right&amp;quot; they say.&lt;/p&gt;
&lt;p&gt;What do we do?&lt;/p&gt;
&lt;p&gt;Actually, almost nothing. Get the correct answer into a spreadsheet
somewhere. The test cases were incomplete. This always happens.
Outside TDD, it's called &amp;quot;requirements problem&amp;quot; or &amp;quot;scope creep&amp;quot; or
something else. Inside TDD, it's called &amp;quot;test coverage&amp;quot; and some more
test cases are required. Either way, test cases are always
incomplete.&lt;/p&gt;
&lt;p&gt;It may be that they're actually changing an earlier test case. Users
get examples wrong, too. Either way (omission or error) we're just
fixing the spreadsheets, regenerating the test cases, and starting up
the TDD process with the revised suite of test cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bug-fixing"&gt;
&lt;h2&gt;Bug Fixing&lt;/h2&gt;
&lt;p&gt;Interestingly, a bug fix after production roll-out is no different
from an acceptance test problem. Indeed it's no different from
anything that's happened so far.&lt;/p&gt;
&lt;p&gt;A user spots a bug. They report it. We ask for the concrete example
that exemplifies the correct answer.&lt;/p&gt;
&lt;p&gt;We regenerate the test cases from the spreadsheets and start doing
development. 80% of the time, the new example is actually a change to
an existing example. And since the users built the example
spreadsheets with the test data, they can maintain those spreadsheets
to clarify the bugs. 20% of the time it's a new requirement. Either
way, the test cases are as complete and consistent as the users are
capable of producing.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="this-sounds-a-lot-like-pyfit-and-robot-framework"&gt;
&lt;h2&gt;This sounds a lot like PyFIT and Robot Framework, ...&lt;/h2&gt;
&lt;p&gt;Kent Johnson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-08 12:37:43.819000-05:00&lt;/p&gt;
&lt;p&gt;This sounds a lot like PyFIT and Robot Framework, you might be
interested in them.
&lt;a class="reference external" href="http://code.google.com/p/robotframework/"&gt;http://code.google.com/p/robotframework/&lt;/a&gt;
&lt;a class="reference external" href="http://fitnesse.org/FitServers.PythonFit"&gt;http://fitnesse.org/FitServers.PythonFit&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-sounds-very-interesting-is-there-an-example"&gt;
&lt;h2&gt;This sounds very interesting. Is there an example ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-09 04:50:25.130000-05:00&lt;/p&gt;
&lt;p&gt;This sounds very interesting. Is there an example spreadsheet I can look
at to fully grasp it?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="#python"></category><category term="tdd"></category></entry><entry><title>If only architectures were this simple</title><link href="https://slott56.github.io/2010_06_25-if_only_architectures_were_this_simple.html" rel="alternate"></link><published>2010-06-25T06:10:00-04:00</published><updated>2010-06-25T06:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-06-25:/2010_06_25-if_only_architectures_were_this_simple.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://xkcd.com/730/"&gt;http://xkcd.com/730/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I almost wet myself. This is so typical.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="complexity"></category><category term="humor"></category><category term="API Design"></category><category term="architecture"></category></entry><entry><title>Yet More Praise for Unit Tests</title><link href="https://slott56.github.io/2010_04_27-yet_more_praise_for_unit_tests.html" rel="alternate"></link><published>2010-04-27T07:10:00-04:00</published><updated>2010-04-27T07:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-27:/2010_04_27-yet_more_praise_for_unit_tests.html</id><summary type="html">&lt;p&gt;I can't say enough good things about TDD.&lt;/p&gt;
&lt;p&gt;But I'll try.&lt;/p&gt;
&lt;p&gt;Due to an epic failure to read the documentation
(&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIPassAuthorization"&gt;this&lt;/a&gt;,
specifically) I couldn't get our RESTful web services to work in
Apache.&lt;/p&gt;
&lt;p&gt;The entire application system has pretty good test coverage. I use
the Python
&lt;a class="reference external" href="http://docs.python.org/library/unittest.html"&gt;unittest&lt;/a&gt; to do
integration …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I can't say enough good things about TDD.&lt;/p&gt;
&lt;p&gt;But I'll try.&lt;/p&gt;
&lt;p&gt;Due to an epic failure to read the documentation
(&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIPassAuthorization"&gt;this&lt;/a&gt;,
specifically) I couldn't get our RESTful web services to work in
Apache.&lt;/p&gt;
&lt;p&gt;The entire application system has pretty good test coverage. I use
the Python
&lt;a class="reference external" href="http://docs.python.org/library/unittest.html"&gt;unittest&lt;/a&gt; to do
integration testing. A test module spins up a Django test server;
each TestCase uses the RESTful API library access the web servers
through a variety of use cases.&lt;/p&gt;
&lt;p&gt;However. This integration isn't done through Apache and mod_wsgi.
It's done using Django's stand-alone testserver capability.&lt;/p&gt;
&lt;p&gt;As I noted recently, Apache doesn't like to give up the HTTP
Authorization header. So, the real deployment on our real servers
didn't really work.&lt;/p&gt;
&lt;div class="section" id="the-blame-game"&gt;
&lt;h2&gt;The Blame Game&lt;/h2&gt;
&lt;p&gt;At this point there are lots of things we can blame. Let's start
blaming the process.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;TDD didn't help. By now it should be obvious that TDD is a
complete waste of time because it didn't uncover this obvious
integration issue. There's no justification for TDD.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#.  The Unit Testing framework didn't help. It's a completely blown
u   nit. Unit testing is oversold as a technology.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Reliance on &amp;quot;testing&amp;quot; is stupid. There's no point in even
attempting to &amp;quot;test&amp;quot; software, since it still broke when we tried
to deploy it. Testing simply doesn't uncover enough problems.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clearly, we need a Bold New Process to solve and prevent problems
like this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="seriously"&gt;
&lt;h2&gt;Seriously&lt;/h2&gt;
&lt;p&gt;Search Stack Overflow for &amp;quot;Justification of TDD&amp;quot; or &amp;quot;ROI of Unit
Testing&amp;quot; and those kinds of loaded questions and you'll find folks
that are angry that software development is hard and TDD or Unit
Testing or a slick IDE or a Dynamic Language or REST or SOAP or
something didn't make software easy.&lt;/p&gt;
&lt;p&gt;There is no Pixie Dust. You've been told. Stop searching for it.
Software is hard. Unit Testing helps, but doesn't make it less
hard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing-to-the-rescue"&gt;
&lt;h2&gt;Unit Testing to the Rescue&lt;/h2&gt;
&lt;p&gt;Our code coverage is -- at best -- middlin'. I don't have counts,
nor do I actually care what the lines of code number is. Code
coverage can devolve to
&lt;a class="reference external" href="https://slott56.github.io/2010_02_23-numerosity_more_metrics_without_meaning.html"&gt;numerosity&lt;/a&gt;.
The method function coverage and use case coverage is more
interesting. A &amp;quot;logic path coverage&amp;quot; might be helpful. But I'm
sure our coverage is far from complete.&lt;/p&gt;
&lt;p&gt;So there we were.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Hundreds of unit tests pass.&lt;/li&gt;
&lt;li&gt;A suite of a half-dozen &amp;quot;integration&amp;quot; scripts (over a dozen
TestCases) pass.&lt;/li&gt;
&lt;li&gt;Real Apache deployment fails because I couldn't figure out how
to get mod_wsgi to pass the HTTP Authorization header. Even
though it's clearly and simply documented. [I was busy focusing
on Apache; mod_wsgi solves the problem handily.]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What I did was copy a page from AWS and put the digested
authentication information in a query string. In one sense,
this is a huge change to the API's -- it's visible. In another
sense this is a minor tweak to the application.&lt;/p&gt;
&lt;p&gt;The RESTful web services all rely on an authenticator object.
The change amounted to a new subclass of this authenticator.
Plus some refactoring to locate the digest in the query string.
This is a tightly focused change in authentication and the
client library. About two days of work to subclass and refactor
the auth.rest module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="success-factors"&gt;
&lt;h2&gt;Success Factors&lt;/h2&gt;
&lt;p&gt;Because of TDD and a suite of unit tests, many things went
really, really well.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I could extend the test script for the auth.rest module to
include the new authentication-via-query-string mechanism.
Having tests that failed made is really easy to refactor and
subclass until the tests passed. Then I could refactor some
more to simplify the resulting modules.&lt;/li&gt;
&lt;li&gt;I could rerun the unittest suite, including the various
&amp;quot;integration&amp;quot; tests (tests that had everything by Apache) to
be sure everything still worked. Believe it or not, there
were actual problems uncovered by this. Specifically, some
tests didn't properly use the web services API library. The
library had changed, but was &lt;em&gt;mostly&lt;/em&gt; backwards compatible,
so the tests had continued to work. The latest round of
changes broke backwards compatibility, and some tests now
failed.&lt;/li&gt;
&lt;li&gt;Despair did not set in. There were issues: sales folks were
in total panic because the whole &amp;quot;house of cards&amp;quot;
architecture had collapsed. A working test suite makes a
compelling case that the application -- generally -- is
still sound. We're just stumbling on an Apache deployment
issue. In one sense, it's a &amp;quot;show stopper&amp;quot;, but in another
sense it's just a Visible But Minor (VBM™) hurdle.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="not-meaning-to-rub-it-in-more-just-providing-furt"&gt;
&lt;h2&gt;Not meaning to rub it in, more just providing furt...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-27 07:34:30.612000-04:00&lt;/p&gt;
&lt;p&gt;Not meaning to rub it in, more just providing further references for
people who have similar problem with Authorization header and stumble
across your posts, but the issue is also mentioned in
'&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/FrequentlyAskedQuestions#Access_Control_Mechanisms"&gt;http://code.google.com/p/modwsgi/wiki/FrequentlyAskedQuestions#Access_Control_Mechanisms&lt;/a&gt;'
and '&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/AccessControlMechanisms"&gt;http://code.google.com/p/modwsgi/wiki/AccessControlMechanisms&lt;/a&gt;'. :-)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="unit testing"></category><category term="tdd"></category></entry><entry><title>Unit Test Coverage</title><link href="https://slott56.github.io/2009_02_25-unit_test_coverage.html" rel="alternate"></link><published>2009-02-25T20:22:00-05:00</published><updated>2009-02-25T20:22:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-02-25:/2009_02_25-unit_test_coverage.html</id><summary type="html">&lt;p&gt;Unit test coverage is a politically sensitive issue.&lt;/p&gt;
&lt;p&gt;If you don't like (or want) unit testing, you set the threshold really high.  100% code coverage, or worse, 100% logic path coverage.  Since these goals are difficult to achieve, the whole unit testing business can be made to go away.&lt;/p&gt;
&lt;p&gt;If …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Unit test coverage is a politically sensitive issue.&lt;/p&gt;
&lt;p&gt;If you don't like (or want) unit testing, you set the threshold really high.  100% code coverage, or worse, 100% logic path coverage.  Since these goals are difficult to achieve, the whole unit testing business can be made to go away.&lt;/p&gt;
&lt;p&gt;If you're struggling with quality issues, and you just want things fixed, you can also demand some kind of 100% coverage number as a &amp;quot;stretch goal&amp;quot;.  This may not be a bad thing.  Unless, of course, you have no unit testing at all, then it's intimidating.&lt;/p&gt;
&lt;div class="section" id="pragmatic-testing"&gt;
&lt;h2&gt;Pragmatic Testing&lt;/h2&gt;
&lt;p&gt;Pragmatically, you really want to test the logic paths you'll encounter during &amp;quot;normal&amp;quot; operations.  That is the 97% coverage of non-exception, non-crazy, non-edge cases.&lt;/p&gt;
&lt;p&gt;Yes, it's subjective.&lt;/p&gt;
&lt;p&gt;No, it can't be actually measured.&lt;/p&gt;
&lt;p&gt;Think about the metric issue.  If I do 100% logic path coverage -- every single path -- every exception -- everything -- I'm pretty sure my software will be rock solid.&lt;/p&gt;
&lt;p&gt;But if I miss say 3% of the edge cases, what does that mean?  Will my software &amp;quot;not work&amp;quot;?  Will it be &amp;quot;unacceptably buggy?&amp;quot;  Unlikely.&lt;/p&gt;
&lt;p&gt;The 100% coverage doesn't correlate with anything else I can measure.  50% test coverage doesn't mean the system is half buggy, or runs half the time, or looses half the transactions, or processes each transaction only half-way through.  No, 50% test coverage means half the system is rock solid and the other half is probably really good, also.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gut-check"&gt;
&lt;h2&gt;Gut Check&lt;/h2&gt;
&lt;p&gt;Here are some &amp;quot;is there enough testing?&amp;quot; gut check questions.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Would you refactor it?  This is the most basic level of test coverage -- enough to refactor.&lt;/li&gt;
&lt;li&gt;Would you immediately blame installation, operations, maintenance, support -- anyone else -- or would you dig in to find the problem?  This is a higher-level of coverage.  Enough that you're sure it's an installation issue.&lt;/li&gt;
&lt;li&gt;If the customer was a psycho and took you to court, and you had to provide testimony, do you have any hard evidence that things essentially work?  Not absolute 100% proof, but some evidence to back up your claim that you think it works and the customer's a whacko.  This is still a higher-level because you have to explain it to civilians and lawyers.&lt;/li&gt;
&lt;li&gt;Would you use it as an example a training class on testing?  This is the highest level -- knowledgeable peers.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Python Business Rules Engine</title><link href="https://slott56.github.io/2009_02_20-python_business_rules_engine.html" rel="alternate"></link><published>2009-02-20T11:03:00-05:00</published><updated>2009-02-20T11:03:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-02-20:/2009_02_20-python_business_rules_engine.html</id><summary type="html">&lt;p&gt;On Stack Overflow I was captivated by &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/532814/what-tools-would-you-used-to-write-a-modular-database-in-python"&gt;What tools would you used to write a modular database in Python?&lt;/a&gt; &amp;quot; and &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/467738/implementing-a-rules-engine-in-python"&gt;Implementing a 'rules engine' in Python&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;Both questions are quite amazing because they already have a modular, flexible rules engine (called &amp;quot;python&amp;quot;) but it's not good enough: they want to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On Stack Overflow I was captivated by &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/532814/what-tools-would-you-used-to-write-a-modular-database-in-python"&gt;What tools would you used to write a modular database in Python?&lt;/a&gt; &amp;quot; and &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/467738/implementing-a-rules-engine-in-python"&gt;Implementing a 'rules engine' in Python&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;Both questions are quite amazing because they already have a modular, flexible rules engine (called &amp;quot;python&amp;quot;) but it's not good enough: they want to use Python to build something that's -- well -- more Python.&lt;/p&gt;
&lt;p&gt;It's weirder than &lt;a class="reference external" href="http://codespeak.net/pypy/dist/pypy/doc/"&gt;PyPy&lt;/a&gt; , which makes a certain amount of meta-level sense.&lt;/p&gt;
&lt;div class="section" id="business-rules"&gt;
&lt;h2&gt;Business Rules&lt;/h2&gt;
&lt;p&gt;The rules engine question provides a tidy specification for three central features of Python: Regular expression matching, arithmetic comparisons, and Boolean operators.  Then they go on to provide a sample expression that's almost (but not quite) python code.  I'm not sure their tiny syntax change is worth the effort of writing a parser.&lt;/p&gt;
&lt;p&gt;In our application, we have a large number of fairly complex business rules.&lt;/p&gt;
&lt;p&gt;Worse, we don't have a tidy specification of what those rules &lt;strong&gt;really&lt;/strong&gt;  are.  Instead, we have some kinds of flow charts, and some cultural norms, and folks who know a lot about the problem domain.  We could have spent nine months digging.  Instead, I elected to spend nine months programming in Python.&lt;/p&gt;
&lt;p&gt;When things change, the code is easy to change.  Good OO design principles allow us to capitalize in simple &lt;strong&gt;Strategy&lt;/strong&gt;  pattern and &lt;strong&gt;Command&lt;/strong&gt;  pattern to &amp;quot;plug in&amp;quot; different modules.  In some cases, we've found that we didn't foresee the need for a Strategy plug in and are forced to refactor some packages to reflect what we learned.&lt;/p&gt;
&lt;p&gt;Python is our business rules engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modularity"&gt;
&lt;h2&gt;Modularity&lt;/h2&gt;
&lt;p&gt;We have a nebulous offering.  Our business model is simple, and based around some smart people who offer a very clever consulting service.  The software packages some of the consulting results in a form that a customer can subscribe to.&lt;/p&gt;
&lt;p&gt;Clearly, each customer could be unique.  And our service offering &lt;em&gt;should&lt;/em&gt;  expand as we get better and better at this.  So we'll have lots of plug-and-play modules for customer-specific features and expansions of the service.&lt;/p&gt;
&lt;p&gt;This is what Python does best.  I've already done significant on-the-fly refactoring as we find new opportunities.  Why use Python to build a super-meta &amp;quot;modular&amp;quot; database?  Python already is modular, and so is SQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-s-world-view"&gt;
&lt;h2&gt;Django's World View&lt;/h2&gt;
&lt;p&gt;One of the best parts of using Django is the &amp;quot;build-the-model-first&amp;quot; world view.  Confronted with requirements, my approach is this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Build a model that works.&lt;/li&gt;
&lt;li&gt;Write unit tests to show how the use cases are implemented with this model.&lt;/li&gt;
&lt;li&gt;Write the admin folderol to build a reasonable admin interface for this model.  This actually takes quite a bit of effort to decide what lists and filters to use and where to put the inline forms.&lt;/li&gt;
&lt;li&gt;Write RESTful URI's and view functions for our Web Services and our HTML views.&lt;/li&gt;
&lt;li&gt;Piss around with templates until we're tired of responding to random tester/user/owner feedback.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Flexible, Modular, Python.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Security Resources [Update]</title><link href="https://slott56.github.io/2009_01_25-security_resources_update.html" rel="alternate"></link><published>2009-01-25T01:52:00-05:00</published><updated>2009-01-25T01:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-01-25:/2009_01_25-security_resources_update.html</id><summary type="html">&lt;p&gt;Years ago, I was working with a client who was implementing their first web site.&lt;/p&gt;
&lt;p&gt;Well, actually, it wasn't their first.  It was their third.  But their first two were haphazard &amp;quot;we hope this works&amp;quot; kind of web sites.  They relied on third-party security and were pretty sure they were …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Years ago, I was working with a client who was implementing their first web site.&lt;/p&gt;
&lt;p&gt;Well, actually, it wasn't their first.  It was their third.  But their first two were haphazard &amp;quot;we hope this works&amp;quot; kind of web sites.  They relied on third-party security and were pretty sure they were using it correctly.&lt;/p&gt;
&lt;p&gt;I was involved with their first externally-facing application.   We were going through a &amp;quot;risk-exposure&amp;quot; analysis.&lt;/p&gt;
&lt;p&gt;One of their people was so uncomfortable that they balked at the very idea of a fixed list of risks.&lt;/p&gt;
&lt;p&gt;&amp;quot;We don't know what we don't know,&amp;quot; they pronounced.  Their claim was that security considerations included an unbounded list of vulnerabilities.&lt;/p&gt;
&lt;div class="section" id="vulnerability-lists"&gt;
&lt;h2&gt;Vulnerability Lists&lt;/h2&gt;
&lt;p&gt;I make regular use of the &lt;a class="reference external" href="http://www.owasp.org/"&gt;OWASP&lt;/a&gt;  top 10 vulnerabilities and other resources.&lt;/p&gt;
&lt;p&gt;Today I learned about the SANS Institute's &lt;a class="reference external" href="http://www.sans.org/top25errors/"&gt;top 25 coding errors&lt;/a&gt; .  They provide three categories of errors.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.sans.org/top25errors/#cat1"&gt;Category: Insecure Interaction Between Components (9 errors)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.sans.org/top25errors/#cat2"&gt;Category: Risky Resource Management (9 errors)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.sans.org/top25errors/#cat3"&gt;Category: Porous Defenses (7 errors)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, there's the &lt;a class="reference external" href="http://blogs.msdn.com/michael_howard/archive/2005/07/11/437875.aspx"&gt;19 Deadly Sins of Software Security&lt;/a&gt;  list.  [Thanks!]&lt;/p&gt;
&lt;p&gt;This is very, very handy stuff.  There's nothing better than a concrete checklist of errors to structure architecture, design, and coding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-we-don-t-know"&gt;
&lt;h2&gt;What We Don't Know&lt;/h2&gt;
&lt;p&gt;Yes, there are unknown, unlisted, yet-unexploited vulnerabilities.  Until those are discovered, we really &lt;strong&gt;do&lt;/strong&gt;  know what to do.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't waste a lot of time on a complex risk/cost analysis.  These are complex -- often subjective -- and very expensive.  A short list of exposure and cost is all you need.  And often, the short list includes something like &amp;quot;&lt;a class="reference external" href="http://www.noao.edu/cas/hr/faq/faq_hipaa.html#six"&gt;HIPAA PHI&lt;/a&gt; &amp;quot; and that's all you need to know.&lt;/li&gt;
&lt;li&gt;Use a straight-forward checklist of vulnerabilities built from these lists.  Numerous items appear on all three lists, that's the bare minimum of security considerations.  The union of all three lists isn't that big or complex.  Your framework or language may not even have some of these vulnerabilities.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's probably cheaper to just plug these known holes than it is to decide which -- if any -- holes have &amp;quot;enough&amp;quot; expected value of a loss.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>My Favorite Appliance</title><link href="https://slott56.github.io/2008_12_18-my_favorite_appliance.html" rel="alternate"></link><published>2008-12-18T00:47:00-05:00</published><updated>2008-12-18T00:47:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-12-18:/2008_12_18-my_favorite_appliance.html</id><summary type="html">&lt;p&gt;December 11th, the electric power went out here in the northeast, and stayed out until late on the 14th.&lt;/p&gt;
&lt;p&gt;We have gas heat, gas cooking.  But the furnace wouldn't run without AC power.  So, I now have a favorite electrical appliance -- the blower on my furnace.:Apple-tab-span:``&lt;/p&gt;
&lt;p&gt;Here's my strategy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;December 11th, the electric power went out here in the northeast, and stayed out until late on the 14th.&lt;/p&gt;
&lt;p&gt;We have gas heat, gas cooking.  But the furnace wouldn't run without AC power.  So, I now have a favorite electrical appliance -- the blower on my furnace.:Apple-tab-span:``&lt;/p&gt;
&lt;p&gt;Here's my strategy.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A furnace transfer switch.  See this &lt;a class="reference external" href="http://www.google.com/search?client=safari&amp;amp;rls=en-us&amp;amp;q=Furnace+Transfer+Switch"&gt;http://www.google.com/search?client=safari&amp;amp;rls=en-us&amp;amp;q=Furnace+Transfer+Switch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A small (1.7Kw) generator.  See this &lt;a class="reference external" href="http://www.google.com/search?q=1700+w+generator"&gt;http://www.google.com/search?q=1700+w+generator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;An extension cord that goes well out into the backyard.  Folks died around here from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Carbon_monoxide_poisoning"&gt;CO poisoning&lt;/a&gt; .&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It takes some discipline, but I think one can manage with a tiny, thrifty generator.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Put the food in a cooler and move it from fridge to porch when the porch is colder.&lt;/li&gt;
&lt;li&gt;Run the furnace as necessary.&lt;/li&gt;
&lt;li&gt;Unplug the furnace, plug in the sump pump as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like all good software, I think it's just enough.  The fully automated transfer switches and full-powered generators seem more complex than necessary.&lt;/p&gt;
&lt;p&gt;Lighting?  I have flashlights and lanterns, and a Weems and Plath Oil Yacht Lamp.  Internet?  Panera, Starbucks, and others offer WiFi.  What else is there?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Configuration Files -- Again</title><link href="https://slott56.github.io/2008_12_09-configuration_files_again.html" rel="alternate"></link><published>2008-12-09T02:29:00-05:00</published><updated>2008-12-09T02:29:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-12-09:/2008_12_09-configuration_files_again.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.heikkitoivonen.net/blog/2008/12/07/configuration-options-in-code-or-ini-files/"&gt;Configuration Options in Code or INI Files?&lt;/a&gt; .  Also, see &lt;a class="reference external" href="https://slott56.github.io/2008_03_28-python_as_configuration_language_more_good_ideas.html"&gt;Python as Configuration Language&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Here's some of the argument.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Editing&lt;/strong&gt;.  Which is easier?  Which is more expressive?  Some say that Text (INI format especially) is easier -- but I don't see what.  Python is just as easy as INI, and has …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.heikkitoivonen.net/blog/2008/12/07/configuration-options-in-code-or-ini-files/"&gt;Configuration Options in Code or INI Files?&lt;/a&gt; .  Also, see &lt;a class="reference external" href="https://slott56.github.io/2008_03_28-python_as_configuration_language_more_good_ideas.html"&gt;Python as Configuration Language&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Here's some of the argument.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Editing&lt;/strong&gt;.  Which is easier?  Which is more expressive?  Some say that Text (INI format especially) is easier -- but I don't see what.  Python is just as easy as INI, and has more expressive power.  Advantage Python.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reloading&lt;/strong&gt;.  It is easier to reload configuration options from a regular text file than a Python import.  I'm not sure what we're reloading or why, but I do depend on Apache reloading it's configuration.  However, I've never written a program that reloaded anything.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configuration Control&lt;/strong&gt;.  This statement makes approximately no sense: &amp;quot;Code files should be read only&amp;quot;  What distinguishes code in .INI format from code in .PY format?  Both are code; one is relatively stable &amp;quot;source&amp;quot; and the other is relatively &amp;quot;dymamic&amp;quot; configuration.  But they're both code, subject to slightly different rules of use.  This usage difference doesn't have anything to do with syntax.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;.  Somehow, .INI errors are purported to be easier to debug.  I don't get this.  I suppose it's true if you don't use &lt;strong&gt;try&lt;/strong&gt;  blocks.  If, on the other hand, you use ordinary &lt;strong&gt;try&lt;/strong&gt;  blocks, you can produce easy-to-live-with error messages from importing a Python config module.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;Security&amp;quot;&lt;/strong&gt;.  I put &amp;quot;security&amp;quot; in quotes because it's not at all clear what we're securing against.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So Python has better syntax, and non-Python is slightly easier to reload.  At this point, we've got no good reason for anything other than Python.&lt;/p&gt;
&lt;div class="section" id="the-security-specter"&gt;
&lt;h2&gt;The Security Specter&lt;/h2&gt;
&lt;p&gt;It's not clear why &amp;quot;security&amp;quot; keeps surfacing.  I can't determine the threat scenario.  Since the config files are under tight permission control, only a sys admin can change them.&lt;/p&gt;
&lt;p&gt;So, the security threat is a sys admin who knows Python and is using the configuration files to subvert something in the organization.&lt;/p&gt;
&lt;p&gt;And -- bonus -- there can be no other corporate controls over the system being subverted.&lt;/p&gt;
&lt;p&gt;Wait -- what?&lt;/p&gt;
&lt;p&gt;No controls.  The security thing only makes sense when you have programming sysadmins and no controls.  Python syntax vs. .INI syntax has nothing to do with this.&lt;/p&gt;
&lt;p&gt;The security argument makes no sense.  There is no point in .INI configuration files.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Conflating Test and Debug</title><link href="https://slott56.github.io/2008_12_02-conflating_test_and_debug.html" rel="alternate"></link><published>2008-12-02T18:06:00-05:00</published><updated>2008-12-02T18:06:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-12-02:/2008_12_02-conflating_test_and_debug.html</id><summary type="html">&lt;p&gt;Check out this StackOverflow &amp;quot;question&amp;quot;: &lt;a class="reference external" href="http://stackoverflow.com/questions/333922/does-anyone-have-metrics-on-the-utility-of-formal-unit-testing"&gt;Does anyone have metrics on the utility of formal Unit Testing?&lt;/a&gt; . While -- technically -- it does have a question, it's more of a rant against formal unit testing than a proper question.&lt;/p&gt;
&lt;p&gt;Here's the conflation comment.  &amp;quot;I've worked with developers who never caught any errors in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this StackOverflow &amp;quot;question&amp;quot;: &lt;a class="reference external" href="http://stackoverflow.com/questions/333922/does-anyone-have-metrics-on-the-utility-of-formal-unit-testing"&gt;Does anyone have metrics on the utility of formal Unit Testing?&lt;/a&gt; . While -- technically -- it does have a question, it's more of a rant against formal unit testing than a proper question.&lt;/p&gt;
&lt;p&gt;Here's the conflation comment.  &amp;quot;I've worked with developers who never caught any errors in their unit tests.&amp;quot;&lt;/p&gt;
&lt;p&gt;Apparently, a test which passes initially has no value.&lt;/p&gt;
&lt;p&gt;I think that they're complaining that it has no &lt;em&gt;debugging&lt;/em&gt;  value.  If it passes, it absolutely has testing value.&lt;/p&gt;
&lt;div class="section" id="debugging-and-testing"&gt;
&lt;h2&gt;Debugging and Testing&lt;/h2&gt;
&lt;p&gt;A test which fails give us a chance to debug.  It tells us something is broken.&lt;/p&gt;
&lt;p&gt;A test which passes could mean anything.&lt;/p&gt;
&lt;p&gt;It could means that we wrote the code correctly first, then wrote some tests, and the tests passed because -- well -- we're really good at coding.&lt;/p&gt;
&lt;p&gt;It could also mean that our tests weren't complete enough to find a problem.&lt;/p&gt;
&lt;p&gt;Either way, when a test passes, we don't get a chance to debug.&lt;/p&gt;
&lt;p&gt;And -- it appears from the conversation on StackOverflow -- no debugging is a bad thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="good-test-bad-test"&gt;
&lt;h2&gt;Good Test, Bad Test&lt;/h2&gt;
&lt;p&gt;Note that tests have only two outcomes: pass and fail.&lt;/p&gt;
&lt;p&gt;Tests aren't benchmarks.  If you want to know how many concurrent transactions before the app fails or becomes too slow to use, that's a benchmark.  Not a test.&lt;/p&gt;
&lt;p&gt;If, on the other hand, you have to handle 40,000 transactions per hour, you have something testable; a test boils down to pass or fail.&lt;/p&gt;
&lt;p&gt;I've worked with consultants who claim that benchmarking is part of testing.  I agree that benchmarking might be part of a test &lt;em&gt;phase&lt;/em&gt;  or test &lt;em&gt;activity&lt;/em&gt;.  Unless it can fail (and you know the threshold that counts as failure) it isn't a test.  Running it until it breaks isn't &amp;quot;testing&amp;quot;.  It's exploring or analyzing or learning or something.  But until there's a way to fail, it isn't testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-and-debugging"&gt;
&lt;h2&gt;Testing and Debugging&lt;/h2&gt;
&lt;p&gt;What I've learned recently is that debugging can be done using testing tools.&lt;/p&gt;
&lt;p&gt;Let's say you have an integration test that fails.  The logs and results aren't clear enough to pinpoint a problem.  And -- worse -- no unit test reflects this problem.  That's evidence that you're missing some unit tests.&lt;/p&gt;
&lt;p&gt;Rather than add logging statements or learn to use the debugger, here's what works well.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Hypothesize some error that would pass unit tests and fail integration tests.&lt;/li&gt;
&lt;li&gt;Write a new test to plug that gap.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cycle around those two steps for a while and you both find the problem and build up the test portfolio.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Schrodinger's cat lives! Or doesn't!</title><link href="https://slott56.github.io/2008_11_22-schrodingers_cat_lives_or_doesnt.html" rel="alternate"></link><published>2008-11-22T23:27:00-05:00</published><updated>2008-11-22T23:27:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-11-22:/2008_11_22-schrodingers_cat_lives_or_doesnt.html</id><summary type="html">&lt;p&gt;See this question on &lt;a class="reference external" href="http://stackoverflow.com/questions/293431/python-object-deleting-itself"&gt;Python objects deleting themselves&lt;/a&gt; .  There was some fundamental confusion about objects, deletion and garbage collection.&lt;/p&gt;
&lt;p&gt;Some additional material was posted in an answer (not in the question, where it belongs) making it a little hard to go from question to answers.  The original poster's non-answer had …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this question on &lt;a class="reference external" href="http://stackoverflow.com/questions/293431/python-object-deleting-itself"&gt;Python objects deleting themselves&lt;/a&gt; .  There was some fundamental confusion about objects, deletion and garbage collection.&lt;/p&gt;
&lt;p&gt;Some additional material was posted in an answer (not in the question, where it belongs) making it a little hard to go from question to answers.  The original poster's non-answer had a great little block of code that's potentially funny.  [This is the real example; I tidied it up a little.]&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Generic:
    ''' Generic class all other classes inherit '''
    def kill(self):
        del self
        #Need a way to remove the instance of the class

class Item(Generic):
    def __init__(self,name):
        self.name = name

class Being(Generic):
    def __init__(self,name):
        self.name = name
        self.bag = []
    def pick_up(self,target):
        self.bag.append(target)
        target.kill()

player = Being('Hero')
cat = Item('Cat')

print'Players inventory',player.bag

print'Picking up the cat'
player.pick_up(cat)

print'Players inventory',player.bag
&lt;/pre&gt;
&lt;div class="section" id="the-cat-is-out-of-the-bag"&gt;
&lt;h2&gt;The Cat is Out of the Bag&lt;/h2&gt;
&lt;p&gt;Really.  The example was about letting the cat out of the bag.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/293431/python-object-deleting-itself#293920"&gt;My answer&lt;/a&gt;  included the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Under no circumstances does any Python object ever need to get deleted. If an item is &amp;quot;destroyed&amp;quot;, then it's not in a Being's bag. It's not in a location.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
player.bag.remove(cat)
&lt;/pre&gt;
&lt;p&gt;Is all that's required to let the cat out of the bag. Since the cat is not used anywhere else, it will both exist as &amp;quot;used&amp;quot; memory and not exist because nothing in your program can access it. It will quietly vanish from memory when some quantum event occurs and memory references are garbage collected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anyway, I think there is a parallel between Schrodinger's cat and garbage collection.  The cat exists while you're using it.  After you cease to reference it, it may -- or may not -- exist.&lt;/p&gt;
&lt;p&gt;Okay, maybe it wasn't that funny.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Concealing the code base -- in Python. I think not.</title><link href="https://slott56.github.io/2008_11_17-concealing_the_code_base_in_python_i_think_not.html" rel="alternate"></link><published>2008-11-17T11:10:00-05:00</published><updated>2008-11-17T11:10:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-11-17:/2008_11_17-concealing_the_code_base_in_python_i_think_not.html</id><summary type="html">&lt;p&gt;There's this huge gulf between &amp;quot;protecting&amp;quot; our intellectual property (IP) and making money off our intellectual property.  In our case, we have experts creating business models that we embody in some source code as business rules.&lt;/p&gt;
&lt;p&gt;What's the IP?  The software or the model?  Where's the value?  Is it out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's this huge gulf between &amp;quot;protecting&amp;quot; our intellectual property (IP) and making money off our intellectual property.  In our case, we have experts creating business models that we embody in some source code as business rules.&lt;/p&gt;
&lt;p&gt;What's the IP?  The software or the model?  Where's the value?  Is it out business SME's creating new &amp;quot;breakthrough&amp;quot; business models or me encoding the business model in Python?&lt;/p&gt;
&lt;p&gt;[BTW, when the business owners and executives ask the Python question, I say &amp;quot;speed&amp;quot; and &amp;quot;flexibility&amp;quot;.  Rather than spend 6 weeks with the SME's trying to get all the use cases written, I start from anything that might be a use case and start writing.  Once we have something we can touch and feel, lessons are learned, scope is creeped.]&lt;/p&gt;
&lt;p&gt;If the business model has all the value, why protect the software?  They can reverse engineer the code, but they can't reverse engineer our ability to create new, clever business models.&lt;/p&gt;
&lt;div class="section" id="what-do-we-do"&gt;
&lt;h2&gt;What do we do?&lt;/h2&gt;
&lt;p&gt;My &lt;a class="reference external" href="http://stackoverflow.com/questions/261638/how-do-i-protect-python-code#261727"&gt;Stackoverflow answer&lt;/a&gt;  has the salient points.  In short, contracts still work, offering significant value rules.   [And it's my first &lt;a class="reference external" href="http://stackoverflow.com/badges/24/good-answer"&gt;Good Answer&lt;/a&gt;  badge.]&lt;/p&gt;
&lt;p&gt;The one we're using, however, is still very appealing.  Software as a service:  the SaaS model allows us to offer the services, enhance them and even customize them, without disclosing everything to our customers.&lt;/p&gt;
&lt;p&gt;We're a services firm, we're interested in the business consulting.  We're capable of managing and executing the planned rewrite of our customer's legacy software to make use of our services.  Rather than mess around with lawyers, we figure it's better to create software so valuable that our customers would rather not waste time and money on reverse engineering.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>To GUI or not to GUI, that is a question</title><link href="https://slott56.github.io/2008_11_13-to_gui_or_not_to_gui_that_is_a_question.html" rel="alternate"></link><published>2008-11-13T11:25:00-05:00</published><updated>2008-11-13T11:25:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-11-13:/2008_11_13-to_gui_or_not_to_gui_that_is_a_question.html</id><summary type="html">&lt;p&gt;How do we provide some kind of admin support/tools/procedures for the sales team?&lt;/p&gt;
&lt;p&gt;We know they'll invent new scenarios.  We know they'll want to save that configuration.  With Django's admin utilities, we can do a &amp;quot;dumpdata&amp;quot; that preserves the interesting parts of the the database.  That much is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How do we provide some kind of admin support/tools/procedures for the sales team?&lt;/p&gt;
&lt;p&gt;We know they'll invent new scenarios.  We know they'll want to save that configuration.  With Django's admin utilities, we can do a &amp;quot;dumpdata&amp;quot; that preserves the interesting parts of the the database.  That much is easy.&lt;/p&gt;
&lt;p&gt;We can do a trivial kind of database reset for the sales folks.  Django gives us the SQL reset script, and the &amp;quot;loaddata&amp;quot; utility.&lt;/p&gt;
&lt;p&gt;There are two problems, however.  First, this is command-line stuff, and we know that the sales folks can't be trusted with anything that isn't a double-clickable icon.  Second, we have to keep some pristine copies in a place where they can't get accidentally overwritten.&lt;/p&gt;
&lt;p&gt;The second problem is easy to solve.  We can put some JSON fixtures in the SVN repository.  They're easy to refresh in case of damage.&lt;/p&gt;
&lt;p&gt;The first problem, however, is tougher.&lt;/p&gt;
&lt;div class="section" id="to-gui-to-not-to-gui"&gt;
&lt;h2&gt;To GUI to Not to GUI&lt;/h2&gt;
&lt;p&gt;A simple shell script of the form DUMP_TO somename is not going to get used.  It requires too much work to manage the names because it's not visual.  It isn't a GUI &amp;quot;Save As...&amp;quot; dialog box that shows existing files.  And it's command-line stuff, which the sales folks object to as being too low-tech.&lt;/p&gt;
&lt;p&gt;Clearly, a big-old desktop GUI is just what the doctor ordered.&lt;/p&gt;
&lt;p&gt;And what about restores?  If we write a fat-client GUI, we can easily have two operating modes: backup to a .JSON and restore from a .JSON.  The cool thing is that we can show two lists of .JSON files -- the local ones, plus the golden copies tucked away in the SVN checkout directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simplify"&gt;
&lt;h2&gt;Simplify&lt;/h2&gt;
&lt;p&gt;Here's my thought for simplification: skip the restore GUI.&lt;/p&gt;
&lt;p&gt;The sales folks want a double-clickable icon for restore.  We can easily do that by writing two things when we do the Django &amp;quot;dumpdata&amp;quot;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The .JSON fixture.&lt;/li&gt;
&lt;li&gt;A .BAT file that does the restore.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The list of .BAT files becomes a simple menu of double-clickable icons that will restore the database to a known condition.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>The Python "Connection Reset By Peer" Problem</title><link href="https://slott56.github.io/2008_11_01-the_python_connection_reset_by_peer_problem.html" rel="alternate"></link><published>2008-11-01T00:42:00-04:00</published><updated>2008-11-01T00:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-11-01:/2008_11_01-the_python_connection_reset_by_peer_problem.html</id><summary type="html">&lt;p&gt;We've got a fairly complex application that fits the &amp;quot;broker&amp;quot; pattern.  It offers web services and it consumes web services.  It does some complex calculations of it's own and it's got a pretty complex database.&lt;/p&gt;
&lt;p&gt;One thing I like to have is a &amp;quot;ready for deployment&amp;quot; test suite that exercises …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We've got a fairly complex application that fits the &amp;quot;broker&amp;quot; pattern.  It offers web services and it consumes web services.  It does some complex calculations of it's own and it's got a pretty complex database.&lt;/p&gt;
&lt;p&gt;One thing I like to have is a &amp;quot;ready for deployment&amp;quot; test suite that exercises pretty much everything.  This is several layers of testing&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django Unit Tests&lt;/li&gt;
&lt;li&gt;Python Unit Tests (for non-Django components)&lt;/li&gt;
&lt;li&gt;Integration Tests (built on unittest.TestCase, but somewhat more complex)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It takes several minutes to run through the test sequence.&lt;/p&gt;
&lt;div class="section" id="rest-integration-tests"&gt;
&lt;h2&gt;REST Integration Tests&lt;/h2&gt;
&lt;p&gt;Some of our tests are pretty big REST tests.  We launch the Django &amp;quot;testserver&amp;quot; version of the server (with a known set of fixtures) and use a REST client to execute sequences of transactions.&lt;/p&gt;
&lt;p&gt;Sometimes we would get a urllib2 IOError which contained a socket.error (10054 on Windows, 104 in Linux).  Sometimes.&lt;/p&gt;
&lt;p&gt;The text was &amp;quot;Connection Reset by Peer&amp;quot;.  First, it was intermittent.  Second, we had bigger fish to fry.&lt;/p&gt;
&lt;p&gt;This week, it became the long pole in the tent, and I dug into it.  Part of the reason is the count-down to deployment, and the resulting turnover to sysadmins.  But another part of the reason was that we have very stable software (finally) and we're starting to expand the unit tests to cover more obscure edge cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consistently-intermittent"&gt;
&lt;h2&gt;Consistently Intermittent&lt;/h2&gt;
&lt;p&gt;The most maddening thing about Connection Reset by Peer is the pattern of getting it.  And not getting it.&lt;/p&gt;
&lt;p&gt;For a while, it appeared randomly.  Then we stopped getting it in development.  Problem fixed, right?&lt;/p&gt;
&lt;p&gt;On VMWare, however, it was -- mostly -- reproducible.  On Windows, it never happened.  And yes, they're both Python 2.5.2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-side"&gt;
&lt;h2&gt;Which Side?&lt;/h2&gt;
&lt;p&gt;We're debugging REST transactions.  Since we see it solidly under VMWare, let's dig in.  Which side?  From the logs, it  becomes clear that it's on the client side.  The Django server looks to be rock-solid.  When Django's WSGI server logs the status code and size of the response, this is followed immediately by flush and close.  No opportunity for something bad to happen to the socket.&lt;/p&gt;
&lt;p&gt;So we're focused at our client, based on urllib2.  Sometimes we get it the error, sometimes we don't.  When we get it, however, it's in exactly the same point in the test sequence.   And under VMWare, we're getting it consistently enough that we can work with it.&lt;/p&gt;
&lt;p&gt;Interestingly, as we move code around, the &amp;quot;Connection Reset By Peer&amp;quot; moves around.  When it occurs, it occurs in a consistent location in the test sequence.&lt;/p&gt;
&lt;p&gt;I've upgraded our client to retry the transaction.  Generally, a half-dozen retries (or fewer) and the transaction completes normally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-global-interpreter-lock"&gt;
&lt;h2&gt;The Global Interpreter Lock&lt;/h2&gt;
&lt;p&gt;At this point, I'm convinced I've found something in Python itself.  Since we're running client, server, and MySQL database all under VMWare, I think we're looking at some small bug within urllib2.  I think it's threading.&lt;/p&gt;
&lt;p&gt;I read up on the GIL.  The article by Aahz in PyZine, &lt;a class="reference external" href="http://www.pyzine.com/Issue001/Section_Articles/article_ThreadingGlobalInterpreter.html"&gt;Threading the Global Interpreter Lock&lt;/a&gt;  has some notes on the way that time.sleep() changes thread scheduling.&lt;/p&gt;
&lt;p&gt;When I changed the positions of time.sleep() calls in our client library or unittest sequence, the &amp;quot;Connection Reset by Peer&amp;quot; error moved, also.  It looks like we're suffering from some kind of interlock that's interfering with the client side of the socket.&lt;/p&gt;
&lt;p&gt;The GIL is switched every 100 Python byte-code instructions.  That leads to very consistent behavior.  That's why it can be the same test in the test sequence or not at all.&lt;/p&gt;
&lt;p&gt;So, now what?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="does-it-matter"&gt;
&lt;h2&gt;Does It Matter?&lt;/h2&gt;
&lt;p&gt;Actually, I think it doesn't matter.  The all-on-one box testing is contrived.  With the retry loop, we can get to 100% success, it just takes a passel of retries.  For now, the log of connection reset retries is a side-light.  As we move toward scalability testing across multiple, independent boxes, we'll see if the problem persists.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>How can we demo web services?</title><link href="https://slott56.github.io/2008_10_21-how_can_we_demo_web_services.html" rel="alternate"></link><published>2008-10-21T22:47:00-04:00</published><updated>2008-10-21T22:47:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-10-21:/2008_10_21-how_can_we_demo_web_services.html</id><summary type="html">&lt;p&gt;The obvious answer is that we need a customer-like demo site that shows how the customer's software interacts with our software.&lt;/p&gt;
&lt;p&gt;The problem is that it's a totally back-office kind of relationship.  Worse, we don't have solid use cases.  We have working software for some use cases, but every conference …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The obvious answer is that we need a customer-like demo site that shows how the customer's software interacts with our software.&lt;/p&gt;
&lt;p&gt;The problem is that it's a totally back-office kind of relationship.  Worse, we don't have solid use cases.  We have working software for some use cases, but every conference call with the sales team leads to -- well -- confusion.&lt;/p&gt;
&lt;p&gt;Use Case 1.  Customer sales person sits down at their workstation, decides to sell some product, and in the process of the sales call, gets information from us that adjusts the pricing, terms or conditions of the sales process.&lt;/p&gt;
&lt;p&gt;Use Case 2.  Customer marketing person sits down at their workstation, decides to market some product.  In the process of developing the campaign, gets information from us that adjusts pricing, terms or conditions.  What does the marketing person see?  A long delay while their campaign goes to us and comes back with prices.&lt;/p&gt;
&lt;div class="section" id="demo-problems"&gt;
&lt;h2&gt;Demo Problems&lt;/h2&gt;
&lt;p&gt;We can't demo the sales process very well because they don't see much.  Just a &amp;quot;better&amp;quot; price or terms or something.  But there's no before/after kind of thing.&lt;/p&gt;
&lt;p&gt;Worse, our mock-up of a sales person's application software won't match anything any of our customers have, we'll spend the whole sales call arguing about the data elements, the format, the color of the background and the labels on the buttons.&lt;/p&gt;
&lt;p&gt;We can't demo the marketing process very well because (a) it's overnight and (b) it's still invisible.  If we do it in seconds, it sets a false expectation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pilot-instead-of-demo"&gt;
&lt;h2&gt;Pilot Instead of Demo&lt;/h2&gt;
&lt;p&gt;What we have to do is to get the sales folks away from demo and into pilot.  And the best way to do this is to refine our extensibility features so that we can spin up a new pilot really quickly.&lt;/p&gt;
&lt;p&gt;We're using Python, so parsing spreadsheets, loading database, and customizing a Django configuration shouldn't take too long.  I'm hoping that we can get a pilot ready in about as much time as it takes to schedule a &amp;quot;Big Demo&amp;quot; with the decision-makers.&lt;/p&gt;
&lt;p&gt;Besides, a pilot will show real results for a subset of situations.  It won't show a glossy walk-through of some use cases.&lt;/p&gt;
&lt;p&gt;The problem is that our sales folks are used to Java-scale development where every change takes a month.  At this point, the only thing that will win their hearts and minds is to really deliver on the first few pilots.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>I hate CSS -- mostly because I don't understand it</title><link href="https://slott56.github.io/2008_10_12-i_hate_css_mostly_because_i_dont_understand_it.html" rel="alternate"></link><published>2008-10-12T12:27:00-04:00</published><updated>2008-10-12T12:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-10-12:/2008_10_12-i_hate_css_mostly_because_i_dont_understand_it.html</id><summary type="html">&lt;p&gt;I found &lt;a class="reference external" href="http://blog.isotoma.com/2008/10/css_systems.html"&gt;CSS Systems&lt;/a&gt; , in the Isotoma blog.  Which lead me to &lt;a class="reference external" href="http://natbat.net/2008/Sep/28/css-systems/"&gt;CSS Systems for writing maintainable CSS&lt;/a&gt;  from Natalie Downe.  That was a &amp;quot;aha!&amp;quot; moment.  The problem is that I've been looking at incomplete, poorly-structured examples.&lt;/p&gt;
&lt;p&gt;One problem I have with CSS and XPath is the multiple dimensions of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I found &lt;a class="reference external" href="http://blog.isotoma.com/2008/10/css_systems.html"&gt;CSS Systems&lt;/a&gt; , in the Isotoma blog.  Which lead me to &lt;a class="reference external" href="http://natbat.net/2008/Sep/28/css-systems/"&gt;CSS Systems for writing maintainable CSS&lt;/a&gt;  from Natalie Downe.  That was a &amp;quot;aha!&amp;quot; moment.  The problem is that I've been looking at incomplete, poorly-structured examples.&lt;/p&gt;
&lt;p&gt;One problem I have with CSS and XPath is the multiple dimensions of search.  You can be talking about an element, an ID or a CLASS or some combination.   For me, the distinctions aren't obvious enough.  Making therm obvious, however, makes CSS (or XPath) so wordy as to be unusable.  So, I have to get over that.&lt;/p&gt;
&lt;p&gt;Another problem that I have with CSS is that the display model for browser pages is really complicated.  The basic HTML markup is delightfully simple, but it has the consequence of making complex structures when rendered on a page.  Worse, of course, is the fact that I started with SGML and also use DocBook XML, which are principally semantic markup with very little display capabilities.  HTML has this mixture of semantic and non-semantic markup.  I try to use semantic markup as much as possible, but it's hard to debug my CSS rules.&lt;/p&gt;
&lt;p&gt;I have to teach an HTML/XML class, which will include CSS.  I'd like to include a tool like &lt;a class="reference external" href="http://macrabbit.com/cssedit/"&gt;CSSEdit&lt;/a&gt; , but that's Mac-only, and our customer base (with one exception) is firmly anti-Mac.&lt;/p&gt;
&lt;p&gt;I will, however, direct them &lt;a class="reference external" href="http://www.positioniseverything.net/"&gt;/* Position Is Everything */&lt;/a&gt; , which was a wonderful resource to discover. Some of the IE stuff has an update date of December 9, 2006, but I don't think any of the bugs have been fixed.  Indeed, the newest IE's preserve the old bugs for &amp;quot;compatibility&amp;quot;.&lt;/p&gt;
&lt;p&gt;[A bug is an undocumented feature; by preserving the old bugs, they become features.]&lt;/p&gt;
&lt;p&gt;Perhaps the style editing in Eclipse will help.  Also, I've found &lt;a class="reference external" href="http://www.w3.org/Amaya/"&gt;Amaya&lt;/a&gt; , which might help teach people (like me) how to control the features of CSS.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>Exploratory Programming -- Incremental Development in Python (Revised)</title><link href="https://slott56.github.io/2008_10_05-exploratory_programming_incremental_development_in_python_revised.html" rel="alternate"></link><published>2008-10-05T23:16:00-04:00</published><updated>2008-10-05T23:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-10-05:/2008_10_05-exploratory_programming_incremental_development_in_python_revised.html</id><summary type="html">&lt;p&gt;After some processing by customers and us and vendors and god-alone-only-knows who else, our statistician has 4 zip files, each about 15Mb.&lt;/p&gt;
&lt;p&gt;Step one is to look inside the zip archives and see what we have.  Clearly, we can do this any of several ways.  Looking manually doesn't get us …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After some processing by customers and us and vendors and god-alone-only-knows who else, our statistician has 4 zip files, each about 15Mb.&lt;/p&gt;
&lt;p&gt;Step one is to look inside the zip archives and see what we have.  Clearly, we can do this any of several ways.  Looking manually doesn't get us any software, so we may as well write  a Python program to explore.&lt;/p&gt;
&lt;p&gt;There's a pattern that develops to this kind of exploration.  It uses basic inheritance to extend and extend and extend simple file processing.  Further, it uses inheritance to extend instead of rewrite.&lt;/p&gt;
&lt;p&gt;Let's look at the first class definition.  It isn't very interesting, but it shows the design pattern.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Operation( object ):
    def process( self, files ):
        for fileName in files:
            self.processFile( fileName )
    def processFile( self, fileName ):
        pass
&lt;/pre&gt;
&lt;p&gt;Essentially, the process method is the &amp;quot;entry point&amp;quot; and it applies some yet-to-be defined process to each file.&lt;/p&gt;
&lt;p&gt;Here's a subclass that provides that process.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ZipContent( Operation ):
    def processFile( self, fileName ):
        zip= zipfile.ZipFile( fileName )
        for member in zip.infolist():
            print &amp;quot;%s: %s %s&amp;quot; % ( fileName, member.filename, locale.format(&amp;quot;%d&amp;quot;,member.file_size,grouping=True) )
&lt;/pre&gt;
&lt;p&gt;This implements processFile with a simple exploration of the zip files we were sent.&lt;/p&gt;
&lt;p&gt;We're essentially done with sprint 1.  We can use this to explore our files.  Turns out that each zip file contains a single XLS document.  Consistency is pleasant.  On to Sprint 2.&lt;/p&gt;
&lt;div class="section" id="exploring-the-zip-members"&gt;
&lt;h2&gt;Exploring The Zip Members&lt;/h2&gt;
&lt;p&gt;Here's sprint two of the application.  There are two significant changes.  First, we make a small incremental change to the previous ZipContent class.  Then we add a subclass.&lt;/p&gt;
&lt;p&gt;Here's the revised processFile.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def processFile( self, fileName ):
        zip= zipfile.ZipFile( fileName )
        for member in zip.infolist():
            print &amp;quot;%s: %s %s&amp;quot; % ( fileName, member.filename, locale.format(&amp;quot;%d&amp;quot;,member.file_size,grouping=True) )
            self.examineMember( zip, member )
&lt;/pre&gt;
&lt;p&gt;The change is to add a &amp;quot;next level of detail&amp;quot; processing step: examineMember.  We merely provide a stub definition that does nothing.&lt;/p&gt;
&lt;p&gt;Here's the next subclass.  It opens each zip archive member as a workbook, using the &lt;a class="reference external" href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;xlrd&lt;/a&gt;  module.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class WBZipContent( ZipContent ):
    def examineMember( self, zipFile, member ):
        contents= zipFile.read( member.filename )
        wb= xlrd.open_workbook( file_contents=contents, filename=member.filename )
        for sheet in wb.sheets():
            self.examineSheet( wb, sheet )
    def examineSheet( self, wb, sheet ):
        print &amp;quot;&amp;gt;  Sheet %s %d rows&amp;quot; % (sheet.name, sheet.nrows )
&lt;/pre&gt;
&lt;p&gt;This shows the &amp;quot;next level of detail&amp;quot; method.  Once we've opened the workbook, we can then hand each sheet to another method.  Initially, that other method just prints the sheet.&lt;/p&gt;
&lt;p&gt;We haven't replaced any previous piece of code.  We've added some procedure calls to previous version, but we focused on extension, not revision.&lt;/p&gt;
&lt;p&gt;We're done with sprint 2.  We can use this to explore our files.  We find that each zip archive has an XLS file.  We find that each XLS file has a consistently-named set of sheets -- just what we think we should have received.&lt;/p&gt;
&lt;p&gt;Now, we can subclass this -- yet again -- to build the next sprint and dump selected rows from each book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exploring-the-workbook-sheets"&gt;
&lt;h2&gt;Exploring the Workbook sheets&lt;/h2&gt;
&lt;p&gt;Here's sprint three of the application.  This is yet another subclass.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class TopRowsWBZipContent( WBZipContent ):
    def __init__( self, topnRows=5 ):
        super( TopRowsWBZipContent, self ).__init__()
        self.topnRows= topnRows
    def examineSheet( self, wb, sheet ):
        print &amp;quot;&amp;gt;  Sheet %s %d rows&amp;quot; % (sheet.name, sheet.nrows )
        if self.topnRows is None:
            limit= sheet.nrows
        else:
            limit= min( self.topnRows, sheet.nrows )
        for r in xrange(limit):
            row= sheet.row(r)
            print r, [ c.value for c in row ]
&lt;/pre&gt;
&lt;p&gt;We can use the sprint 3 version to confirm that each sheet of each book of each ZIP archive has the expected format.&lt;/p&gt;
&lt;p&gt;Now we're ready to subclass this yet again and actually extract the relevant rows and columns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="incremental-extension"&gt;
&lt;h2&gt;Incremental Extension&lt;/h2&gt;
&lt;p&gt;This incremental extension is a big time-saver.  Rather than have several programs, or several complex options, our main program now does several things.  Which specific thing is does is simply a choice of which class it instantiates.&lt;/p&gt;
&lt;p&gt;Here's a version of main.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def manual():
    &amp;quot;&amp;quot;&amp;quot;Change the options manually.&amp;quot;&amp;quot;&amp;quot;
    #op= ZipContent() # What's in the ZIP files?
    #op= TopRowsWBZipContent( topnRows=5 ) # What does the data look like?
    op= ExtractCSVWBZipContent(&amp;quot;../data&amp;quot;)
    files = glob.glob( &amp;quot;../data/*.zip&amp;quot; )
    op.processList( files )
&lt;/pre&gt;
&lt;p&gt;If we instantiate ZipContent, we get the sprint 1 version -- the one that explores the zip archives.&lt;/p&gt;
&lt;p&gt;If we instantiate TopRowsWBZipContent, we get the the sprint 2 version that shows the top few rows.&lt;/p&gt;
&lt;p&gt;This incremental feature set is very handy and stems directly from two things: incremental development and two extending the inheritance hierarchy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>"The Business Analyst Lied" Or "Python To The Rescue"</title><link href="https://slott56.github.io/2008_09_24-the_business_analyst_lied_or_python_to_the_rescue.html" rel="alternate"></link><published>2008-09-24T12:28:00-04:00</published><updated>2008-09-24T12:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-24:/2008_09_24-the_business_analyst_lied_or_python_to_the_rescue.html</id><summary type="html">&lt;p&gt;This is a long, sordid story.  Maybe a the title should be &amp;quot;Seduced by Technology&amp;quot;, rather than &amp;quot;The Business Analyst Lied.&amp;quot;&lt;/p&gt;
&lt;p&gt;Initially, it sounded like this:&lt;/p&gt;
&lt;p&gt;&amp;quot;Our customer asks for a recommendation regarding an offering.  Based on the description of the offering, we use web services to get some scoring …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a long, sordid story.  Maybe a the title should be &amp;quot;Seduced by Technology&amp;quot;, rather than &amp;quot;The Business Analyst Lied.&amp;quot;&lt;/p&gt;
&lt;p&gt;Initially, it sounded like this:&lt;/p&gt;
&lt;p&gt;&amp;quot;Our customer asks for a recommendation regarding an offering.  Based on the description of the offering, we use web services to get some scoring information from our vendors.  We combine that with our own proprietary models.  We reply with the recommendation.&amp;quot;&lt;/p&gt;
&lt;p&gt;There's a UML collaboration diagram that shows the vendor scoring web service requests front and center.&lt;/p&gt;
&lt;p&gt;Got it.  Ready to code.&lt;/p&gt;
&lt;div class="section" id="not-so-fast"&gt;
&lt;h2&gt;Not So Fast&lt;/h2&gt;
&lt;p&gt;Turns out, that this &amp;quot;get the vendor data&amp;quot; isn't actually what's going on.  It turns out that there are four parts to the recommendation.  Two of those parts involve vendor data and two of our proprietary models.  The other two parts involve two more proprietary models.&lt;/p&gt;
&lt;p&gt;The web services turned everyone's heads.  It was &amp;quot;novel&amp;quot; and &amp;quot;confusing&amp;quot; so it got a lot of press.  The actual proprietary models were -- umm -- business as usual and hardly worth a page of documentation.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Note&lt;/strong&gt;. The business value is in the model.  But no one saw fit to document this.  And I'm not smart enough to ask.]&lt;/p&gt;
&lt;p&gt;Okay.  So, the process is really this:&lt;/p&gt;
&lt;p&gt;&amp;quot;Our customer asks for a recommendation regarding an offering.  Based on the description of the offering, we evaluate our four-part proprietary model.  Two parts of the model happen to require some scoring information from our vendors; we use web services to get this.  We reply with the recommendation.&amp;quot;&lt;/p&gt;
&lt;p&gt;Revised requirements:  our model is front and center.  The vendor information and associated web service requests support part of our model.  Got it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="still-not-right"&gt;
&lt;h2&gt;Still Not Right&lt;/h2&gt;
&lt;p&gt;After building a bunch of stuff, it turns out that I was still being lied to.&lt;/p&gt;
&lt;p&gt;Here's what &lt;em&gt;really&lt;/em&gt;  happens.&lt;/p&gt;
&lt;p&gt;Part 1.  &amp;quot;The sales folks get our customer's entire catalog of offerings.  Our Deep Thinkers then get scoring information from our vendors on all of the offerings, and develop a four-part model.&amp;quot;&lt;/p&gt;
&lt;p&gt;Part 2.  &amp;quot;Our customer can ask for a recommendation regarding an offering.  Based on the description of the offering, we evaluate our four-part proprietary model.  Two parts of the model happen to require some scoring information from our vendors.  &lt;em&gt;Information we already have&lt;/em&gt;.  We reply with the recommendation.&amp;quot;&lt;/p&gt;
&lt;p&gt;So, first they give us all the possible offerings.  Then we get &lt;strong&gt;all&lt;/strong&gt;  the vendor information.  Then we build our proprietary four-part model using the vendor information.&lt;/p&gt;
&lt;p&gt;Ummm... Where are the web services?  Where's the &amp;quot;on-the-fly&amp;quot; query to the vendor to get scoring information?  It turns out that we already have all of the necessary vendor information.  We had to have the all the vendor information in the first place so that could build the model!  Why would we go back to the vendor on a recommendation-by-recommendation basis when we already have all the data?&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Note&lt;/strong&gt;.  A big performance improvement will result from this realization.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chickens-and-eggs"&gt;
&lt;h2&gt;Chickens and Eggs&lt;/h2&gt;
&lt;p&gt;The first draft made it look like there was no model -- only vendor data acquired through Web Services.  At the last instant.  All dynamic and state of the art.&lt;/p&gt;
&lt;p&gt;Then it sounded like the model was central, supported by some vendor data acquired through Web Services.  Still pretty dynamic and state of the art.&lt;/p&gt;
&lt;p&gt;But where did the model come from?&lt;/p&gt;
&lt;p&gt;Oh That.  The model was built from giant sets of data.  It involved simple batch transfers from customer to us, us to our vendors, and our vendors back to us.  We load the database with customer data, vendor data and our model.  Not dynamic.  No web services.&lt;/p&gt;
&lt;p&gt;The business value is in our proprietary model, and the folks that have experience, insight and skills to build that.  It's not in the fancy Web Services.&lt;/p&gt;
&lt;p&gt;It's not that we get a query and do calculations on the fly.  We already know what we'll be asked.  We've already thought this through.  There's almost no 'on-the-fly' to this business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-to-the-rescue"&gt;
&lt;h2&gt;Python to the Rescue&lt;/h2&gt;
&lt;p&gt;Here's why I love Python.  I learned all this while building a working application in Django.&lt;/p&gt;
&lt;p&gt;My summary of the Django world view is &amp;quot;Model first; default admin; evolve the presentation.&amp;quot;&lt;/p&gt;
&lt;p&gt;So, we started out with a data model, some web services, default admin, and a skinny little presentation of the working application.  That original model, BTW, remains largely unchanged.  The most significant changes to that have stemmed from the Django 0.97 to 1.0 evolution.&lt;/p&gt;
&lt;p&gt;That was fine until I figured out that the our proprietary business model was central.  So, we rebuilt the data model to reflect the business.  The web services didn't change much.  The default admin is still fine.  The presentation had to expand to cover the additional parts of the model.&lt;/p&gt;
&lt;p&gt;This Django model is in several parts.  In Django parlance we have many &amp;quot;applications&amp;quot;.  Each application is a subset of the overall model with a specific subject-area focus.&lt;/p&gt;
&lt;p&gt;That structure was fine until I figured out how our proprietary business model gets built in the first place.  Now we have to revise everything yet again to create a more sophisticated Django model that reflects how the business &lt;em&gt;actually&lt;/em&gt;  operates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refactoring"&gt;
&lt;h2&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;It's all just Python, so the refactoring is very, very low cost.  If this was Java, we'd be paralyzed by the cost of rework.  For Java folks, redoing the database and the ORM layers would be a hellish cost that would lead to terrible workarounds.&lt;/p&gt;
&lt;p&gt;In Django and Python, however, we fix the model, and the SQL takes care of itself.  The admin takes care of itself (for now).  We will have to rework the presentation, but that's only a few dozen template files that have to be adjusted to handle the new relationships.&lt;/p&gt;
&lt;p&gt;The hardest part will be reworking the various view functions.  But, because of the way Django works, there are only a few places to look for changes there.  The Django ORM layer allows us to ignore many of the model changes.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Filesystem Deployment: Some Hand-Wringing</title><link href="https://slott56.github.io/2008_09_14-filesystem_deployment_some_hand_wringing.html" rel="alternate"></link><published>2008-09-14T20:03:00-04:00</published><updated>2008-09-14T20:03:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-14:/2008_09_14-filesystem_deployment_some_hand_wringing.html</id><summary type="html">&lt;p&gt;There are two candidate locations on the file system for application components.  What are the criteria for choosing among them?&lt;/p&gt;
&lt;p&gt;The Python site-packages directory, IMO, is for packages that have two important criteria.  First, they have to be widely reusable.  Second, they have (or would benefit from) a setup.py …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two candidate locations on the file system for application components.  What are the criteria for choosing among them?&lt;/p&gt;
&lt;p&gt;The Python site-packages directory, IMO, is for packages that have two important criteria.  First, they have to be widely reusable.  Second, they have (or would benefit from) a setup.py.&lt;/p&gt;
&lt;p&gt;A stand-alone /opt/someApp directory, on the other hand, is for finished applications.&lt;/p&gt;
&lt;p&gt;But, in the middle there's a lot of stuff.  What about sub-packages of an application?  How &amp;quot;reusable&amp;quot; do they have to be?  Finished or only potentially reusable?  What about multiple parts of an integrated system of applications?&lt;/p&gt;
&lt;p&gt;Further, what about Django web applications which have relatively static application parts, plus relatively dynamic database and file uploads in the &amp;quot;media&amp;quot; directory?  What about command-line data management applications for bulk loads and transfers?&lt;/p&gt;
&lt;p&gt;And -- relative to Django apps -- what is settings.py?  Technically, it's code.  But, practically, it's just configuration.  When you have multiple run-time environments (Training and Production) with the same code base, it's just the settings.py that discriminates between the two database instances.&lt;/p&gt;
&lt;div class="section" id="registering-intent"&gt;
&lt;h2&gt;Registering Intent&lt;/h2&gt;
&lt;p&gt;The decision of where to put things often devolves to a matter of intent.&lt;/p&gt;
&lt;p&gt;A package (or module) is an intellectual crutch.  We collocate class definitions in a module (or group modules into a package) to make a comprehensible intellectual chunks.&lt;/p&gt;
&lt;p&gt;The criteria for &lt;a class="reference external" href="http://sunnyday.mit.edu/16.355/parnas-criteria.html&amp;quot;"&gt;decomposing systems into modules&lt;/a&gt;  is pretty clear.  The essential module design is oriented around design decisions which can change.  But there is a taxonomy of design decisions.  Parnas provides some examples (Data Structures, Algorithms, API's, Performance.)&lt;/p&gt;
&lt;p&gt;In my case, there are a few additional kinds of design decisions.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;External WS APIs.  These are a separate package that can be installed in site-packages and distributed to clients.  Except, of course, that our application doesn't use them, so we don't need them in site-packages, only our customers do.  Still, the API rule should apply.&lt;/li&gt;
&lt;li&gt;&amp;quot;Irrelevant&amp;quot; data structures.  Many files and external interfaces impose data structures which are largely irrelevant to our application.  External XSD's, for example, are part of an interface, not part of our core application.  Also, interestingly, the endless complexity of spreadsheets that are used as data sources lead to irrelevant details.  We've used &lt;a class="reference external" href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;XLRD&lt;/a&gt;  and &lt;a class="reference external" href="http://docs.python.org/lib/module-csv.html"&gt;csv&lt;/a&gt; .  Further, we're using a SAX parser for XML spreadsheets.  We can collect a lot of this in a &amp;quot;Workbook Library&amp;quot;.  It isn't core to our application, it's a distraction.  But it isn't a package we'll polish up and put into an open-source repository.  But it isn't core, either.&lt;/li&gt;
&lt;li&gt;Tools.  For example, we generate Python classes from XSD's.  Clearly, this is separate.  But, just as clearly, it isn't very polished, and not usable as a stand-alone tool.  Do we leave this inside the main application directory under /opt/someApp?  Or do we register our intent to make it a stand-alone product and toss it into a separate /opt/someTool directory?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="strategy"&gt;
&lt;h2&gt;Strategy&lt;/h2&gt;
&lt;p&gt;A web admin I respect said &amp;quot;It doesn't matter what you choose, someone will hate your decision.&amp;quot;  Helpful advice.  In other words, &amp;quot;quit waffling -- it can't be perfect.&amp;quot;  Indeed, what would &amp;quot;perfect&amp;quot; even mean?&lt;/p&gt;
&lt;p&gt;What's important seem to be the following.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Modularize Everything&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The magic number is 7 ± 2 &amp;quot;concepts&amp;quot; in a module.  A few closely related classes go in a module.  More complex modules tend to be a problem.  When you're in a hurry and it isn't clear where the boundaries should fall, go for smaller.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Think Packages&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;I'm starting to see that there's nothing wrong with a package that contains a single __init__.py file; this is a place-holder for future growth.  You can add to this structure easily.  I think this should be what you put down in the first sprint to get things started.  Later it can be refactored as the design matures.&lt;/p&gt;
&lt;p class="last"&gt;If, after a few months, the overall direction seems to have shifted, that package can be collapsed back into a module -- with no breakage.  I find it slightlly easier to refactor a single-module package into a module than to decompose a growing (and possibly bloated) module into a multi-file package.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Written Justification&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;You need tidy, clear, documentation for your overall structure.  Be particularly focused on introducing newbies to your project.  It has to make compelling sense -- you have to know that your colleagues will do the right kind of design.  Few things are as challenging as the &amp;quot;you're right, it probably doesn't belong there&amp;quot; conversation surrounding some particularly egregious hand-waving.  It's most helpful with a n00b: they can see the irregularities more clearly than you can.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="our-stuff"&gt;
&lt;h2&gt;Our Stuff&lt;/h2&gt;
&lt;p&gt;We've got a collection of /opt/this and /opt/that directories for the various &amp;quot;top-level&amp;quot; components.  Right now, we're using /opt/this/this-1.1 and /opt/that/that-2.1 kind of names.  These map to subversion tagged versions.  The idea is that we have version 1.1, 1.2 and 1.3 all side-by-side.  We try to avoid replacing a previous version so that we can fall-back -- if necessary -- during an attempted upgrade.&lt;/p&gt;
&lt;p&gt;For most of our &amp;quot;big&amp;quot; application systems we have /var/opt/this/prod and /var/opt/this/training for our &amp;quot;working&amp;quot; directory trees.  This allows us to more easily manage production, QA, training, staging and other parallel implementations of the same baseline application.&lt;/p&gt;
&lt;p&gt;Our small applications (and packages) have their own /opt directories.  Some don't have their own /var/opt working directories, since they're used by our big applications.  Many potentially reusable packages have setup.py scripts and are also installed into site-packages.&lt;/p&gt;
&lt;p&gt;We're making an intentional effort to be absolutely sure that nothing in /home is ever used anywhere.   When your application is big (hundreds of files) it's easy to overlook something.  Sadly, I've looked at a fair amount of software where a poorly-chosen path to a module was snuck in somewhere and there were file conflicts that occurred rarely and made the software &amp;quot;flaky&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Bind Variables and Prepared Statements -- Good, Bad or Indifferent?</title><link href="https://slott56.github.io/2008_09_06-bind_variables_and_prepared_statements_good_bad_or_indifferent.html" rel="alternate"></link><published>2008-09-06T01:29:00-04:00</published><updated>2008-09-06T01:29:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-06:/2008_09_06-bind_variables_and_prepared_statements_good_bad_or_indifferent.html</id><summary type="html">&lt;p&gt;A Gentle Reader provided references to folks who are distrustful of prepared statements.&lt;/p&gt;
&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://krow.livejournal.com/599921.html"&gt;Prepared Statements, Musings&lt;/a&gt; &amp;quot; and &amp;quot;&lt;a class="reference external" href="http://pooteeweet.org/blog/0/1201#m1201"&gt;Prepared statements are dead, long live prepared statements&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;In &amp;quot;musings&amp;quot; we're told &amp;quot;...users do not clean up/close unused prepared statements.&amp;quot;  For this reason, they're bad, and should be avoided.  Eventually, &amp;quot;...unless …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A Gentle Reader provided references to folks who are distrustful of prepared statements.&lt;/p&gt;
&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://krow.livejournal.com/599921.html"&gt;Prepared Statements, Musings&lt;/a&gt; &amp;quot; and &amp;quot;&lt;a class="reference external" href="http://pooteeweet.org/blog/0/1201#m1201"&gt;Prepared statements are dead, long live prepared statements&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;In &amp;quot;musings&amp;quot; we're told &amp;quot;...users do not clean up/close unused prepared statements.&amp;quot;  For this reason, they're bad, and should be avoided.  Eventually, &amp;quot;...unless you really happen to know what you are doing with them, you are going to crash the database.&amp;quot; Clearly, this isn't true; you only crash the application connection to the database.  The database itself generally keeps on grinding.&lt;/p&gt;
&lt;p&gt;I know that failure to close statements properly doesn't crash &amp;quot;the database&amp;quot;.  I did this wrong in a data warehouse application.  DB2 didn't crash, just the long-running applications.&lt;/p&gt;
&lt;p&gt;In &amp;quot;long live prepared statements&amp;quot; there's the implication that prepared statements are slow, or slower than single statements, or unsuitable for web transactions because (a) application servers are no good, (b) connection pooling doesn't work or (c) prepared statements involve multiple trips to the server.  There may be other reasons in the posting, also.&lt;/p&gt;
&lt;div class="section" id="benchmark"&gt;
&lt;h2&gt;Benchmark&lt;/h2&gt;
&lt;p&gt;So Prepared Statements suffer from two flaws:  Higher overhead -- because we have to actually close them -- and Poor performance.&lt;/p&gt;
&lt;p&gt;The first complaint is not a tough problem.  As far as I'm concerned, we can't cater to incompetent programmers by risking huge security flaws.  If people can't follow the API -- well -- they need help or they need new careers.  Allowing them to write flawed software isn't helpful in any way.&lt;/p&gt;
&lt;p&gt;[&amp;quot;But that's the hand we're dealt,&amp;quot; managers whine, &amp;quot;we don't have genius programmers.&amp;quot;  You don't need geniuses.  You just need QA.  &amp;quot;But we don't have the budget for QA.&amp;quot;  Ah.  If you don't have the budget to create quality, then you do have the budget to create crap.  Enjoy it while you can.  But don't complain about the outsourcing.]&lt;/p&gt;
&lt;p&gt;The second complaint -- it appears -- is unlikely to be true.  See &amp;quot;&lt;a class="reference external" href="http://itsaloadofblog.blogspot.com/2008/03/performance-using-bind-variables-in.html"&gt;Performance using Bind Variables in a Java Application&lt;/a&gt; &amp;quot;.   Looks pretty clear to me.  Bind variables are faster.  Also, see &amp;quot;&lt;a class="reference external" href="http://www.performancewiki.com/bind-variables.html"&gt;Use Bind Variables for Application Performance&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exceptions"&gt;
&lt;h2&gt;Exceptions&lt;/h2&gt;
&lt;p&gt;There are stories of query plans turning to crap with a bind variable but being delightfully optimal with a constant.  This is -- sadly -- incorrect for Oracle.  It may be true for other databases.  A quick benchmark would provide proof for other products.&lt;/p&gt;
&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://www.db-nemec.com/HappyNewPeek.html"&gt;Execution Plan and Reality&lt;/a&gt; &amp;quot;.  Specifically, &amp;quot;The ... explain plan statement allows ... a query containing bind variables without actually defining these variables,... The optimiser must use the default rule to calculate the selectivity of the predicates with bind variables. The result could be very different from the &amp;quot;real&amp;quot; execution plan based on the peeked values and known data types of bind variables. This is the reason why the execution plan generated by explain plan was so different from the actual one.&amp;quot;&lt;/p&gt;
&lt;p&gt;So Oracle's explain plan -- with bind variables -- is the worst-case scenario, and not to be trusted.  Good to know.  Don't casually cut-and-paste code for explain plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Prepared Statements must be closed.  If you can't follow the API, get help or get another kind of job.&lt;/p&gt;
&lt;p&gt;Prepared Statements (and bind variables) are not inherently slow.  When in doubt, benchmark.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>The Lean Architecture</title><link href="https://slott56.github.io/2008_09_04-the_lean_architecture.html" rel="alternate"></link><published>2008-09-04T10:15:00-04:00</published><updated>2008-09-04T10:15:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-04:/2008_09_04-the_lean_architecture.html</id><summary type="html">&lt;p&gt;First, look at &amp;quot;&lt;a class="reference external" href="http://www.linux.com/feature/145341"&gt;Protecting your MySQL database from SQL injection attacks with GreenSQL&lt;/a&gt; &amp;quot;.  Okay, a longish article on the ins and outs of installing something that blah blah blah&lt;/p&gt;
&lt;p&gt;Wait -- what?  &lt;a class="reference external" href="http://sourceforge.net/projects/greensql/"&gt;GreenSQL&lt;/a&gt;  is a proxy for MySQL that checks the SQL for certain kinds of injection attacks!?!?!&lt;/p&gt;
&lt;p&gt;Now read &lt;a class="reference external" href="Twistedradix:thisisarant"&gt;Twisted …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, look at &amp;quot;&lt;a class="reference external" href="http://www.linux.com/feature/145341"&gt;Protecting your MySQL database from SQL injection attacks with GreenSQL&lt;/a&gt; &amp;quot;.  Okay, a longish article on the ins and outs of installing something that blah blah blah&lt;/p&gt;
&lt;p&gt;Wait -- what?  &lt;a class="reference external" href="http://sourceforge.net/projects/greensql/"&gt;GreenSQL&lt;/a&gt;  is a proxy for MySQL that checks the SQL for certain kinds of injection attacks!?!?!&lt;/p&gt;
&lt;p&gt;Now read &lt;a class="reference external" href="Twistedradix:thisisarant"&gt;Twisted Radix: This is a Rant&lt;/a&gt; .  Oh.  I get it.  The comments in the original article &lt;em&gt;are&lt;/em&gt;  a riot. Bottom Line: there's no point in adding a layer like GreenSQL.  You don't need to &amp;quot;check&amp;quot; for SQL injection attacks, since it's easier to simply prevent them.&lt;/p&gt;
&lt;p&gt;Just use bind variables.&lt;/p&gt;
&lt;p&gt;Rather than layer on extra software, one should just read the &lt;a class="reference external" href="http://www.owasp.org/index.php/Top_10_2007"&gt;OWASP Top 10 Vulnerabilities&lt;/a&gt;  and address them systematically.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;A1 Cross Site Scripting.&lt;/dt&gt;
&lt;dd&gt;Assume all user inputs include hidden javascript, and do appropriate HTML encoding.  &lt;strong&gt;Do HTML Encoding.&lt;/strong&gt;   That's it.&lt;/dd&gt;
&lt;dt&gt;A2 Injection Flaws.&lt;/dt&gt;
&lt;dd&gt;Never build strings of anything, particularly SQL.  Use bind variables, or similar techniques like HTML encoding.  That's all.  Don't layer in extra junk.  &lt;strong&gt;Use.  Bind.  Variables.&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;A3 Malicious File Execution.&lt;/dt&gt;
&lt;dd&gt;Assume all user files are binaries that will cause problems.  Validate the contents and segregate them into &amp;quot;media&amp;quot; directories that can't be used for other purposes.  Django uses PIL to validate image files.  And Django never accepts a filename from the web -- it generates its own.  &lt;strong&gt;Always Generate Filenames&lt;/strong&gt;.&lt;/dd&gt;
&lt;dt&gt;A4 Insecure Direct Object Reference.&lt;/dt&gt;
&lt;dd&gt;This is subtle, since REST demands a direct object reference.  Providing a reference isn't a problem, as long as object dereferencing has appropriate authorization checks.&lt;/dd&gt;
&lt;dt&gt;A5 Cross Site Request Forgery.&lt;/dt&gt;
&lt;dd&gt;This is complicated -- there are a lot of use cases for bookmarking and spoofing form data.  It's handled by Django in a pretty cool way -- a simple hidden field with a unique token that must come back as sent.  This is the &amp;quot;nonce&amp;quot; technique used in digest authentication.&lt;/dd&gt;
&lt;dt&gt;A6 Information Leakage and Improper Error Handling.&lt;/dt&gt;
&lt;dd&gt;That's what logs are for.  HTML bletches are a big mistake.  When in doubt, show 500.html and keep quiet.  &lt;strong&gt;Don't Debug via End-User HTML&lt;/strong&gt;.&lt;/dd&gt;
&lt;dt&gt;A7 Broken Authentication and Session Management.&lt;/dt&gt;
&lt;dd&gt;Here's a tip: use a framework that does this -- &lt;strong&gt;Don't Roll Your Own&lt;/strong&gt;™.&lt;/dd&gt;
&lt;dt&gt;A8 Insecure Cryptographic Storage.&lt;/dt&gt;
&lt;dd&gt;Like A5, this is tough: everyone wants to use crypto, but no one knows how to do key management.  A hard-coded key is useless.  Encrypted databases are only as secure as the keys, and the keys never seem to get handled properly.  Also, you have keep the database behind a firewall so only the web server itself has access.  Never store passwords, only digests of passwords.&lt;/dd&gt;
&lt;dt&gt;A9 Insecure Communications.&lt;/dt&gt;
&lt;dd&gt;SSL is easy.  Use it.&lt;/dd&gt;
&lt;dt&gt;A10 Failure to Restrict URL Access.&lt;/dt&gt;
&lt;dd&gt;Obscurity is not Security.  You can't say &amp;quot;no one will find the backdoor URL for debugging.&amp;quot;  They will.  Plan on it.  Either secure it, or don't do it.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;There's no room for after-the-fact glue like GreenSQL.  All of the OWASP vulnerabilities are solved in the basic design of the framework you chose and the application built on that framework.&lt;/p&gt;
&lt;p&gt;An application that assembles SQL on the fly is flawed to begin with, and no amount of patching will fix it.  It's an arms race between SQL injection tricks and software filtering.  Someone can always create SQL so confusingly complex that the tool is fooled.&lt;/p&gt;
&lt;p&gt;Further, everything you add can add bugs and vulnerabilities.  Less software is better; no software is best.  Keep it lean, simple and secure.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Lean Projects — Not Deficient Projects</title><link href="https://slott56.github.io/2008_09_02-lean_projects_not_deficient_projects.html" rel="alternate"></link><published>2008-09-02T19:59:00-04:00</published><updated>2008-09-02T19:59:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-02:/2008_09_02-lean_projects_not_deficient_projects.html</id><summary type="html">&lt;p&gt;Here's a great quote from a reader regarding &lt;a class="reference external" href="https://slott56.github.io/2008_09_02-the_big_plan_for_changetm_since_it_never_works_whats_the_alternative.html"&gt;Big Plan for Change&lt;/a&gt; : &amp;quot;[the advice] doesn't account for project tracking requirements of the organization. Budgeting. Metrics. Hiring. Documenting. Transitioning to new staff.&amp;quot;&lt;/p&gt;
&lt;p&gt;Good point.  Let's look at these in a little bit of depth.  We'll cover the three management practices first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a great quote from a reader regarding &lt;a class="reference external" href="https://slott56.github.io/2008_09_02-the_big_plan_for_changetm_since_it_never_works_whats_the_alternative.html"&gt;Big Plan for Change&lt;/a&gt; : &amp;quot;[the advice] doesn't account for project tracking requirements of the organization. Budgeting. Metrics. Hiring. Documenting. Transitioning to new staff.&amp;quot;&lt;/p&gt;
&lt;p&gt;Good point.  Let's look at these in a little bit of depth.  We'll cover the three management practices first: Budgeting, Metrics and Personnel (Hiring and Transitioning to new staff.)&lt;/p&gt;
&lt;div class="section" id="budgeting"&gt;
&lt;h2&gt;Budgeting&lt;/h2&gt;
&lt;p&gt;Got to have budgets.  How much does a project cost?  How do we estimate the costs?  Two ways.&lt;/p&gt;
&lt;p&gt;In &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2008_02_14-why_agile_whats_the_point.html"&gt;Why Agile? What's the Point?&lt;/a&gt; &amp;quot; I talked a little about the cost and risk question.  Mostly from a risk point of view.  In short, with an Agile approach, the risks have almost no associated cost.  What little cost there is should be easy to manage.&lt;/p&gt;
&lt;p&gt;But what about overall cost?  What's the &amp;quot;total cost to do [X]?&amp;quot;  Well...  First, we have to define [X] so we can define the total cost.  In order to define [X], we have to throw Agile out the window and create a &lt;strong&gt;Big Plan Up Front&lt;/strong&gt;.  Oops.  That didn't work, did it?&lt;/p&gt;
&lt;p&gt;So, what do we do about total cost?  The question has to be reframed.  There's a central issue here.  The central issue is this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="we-can-t-know-what-done-means"&gt;
&lt;h2&gt;We Can't Know What &amp;quot;Done&amp;quot; Means&lt;/h2&gt;
&lt;p&gt;We don't want to waste time trying to talk about &amp;quot;Totally Done&amp;quot; -- it's unknowable.  We can only talk about &amp;quot;Done Enough&amp;quot;.  Projects often die because the scope is too ambitious or too nebulous.&lt;/p&gt;
&lt;p&gt;We can't know the total cost for [X] because we really don't know everything there is to know about [X].  Further, we know that the users are prone to lying, so we we can't ever be sure we really know what the totality of [X] is; [X] gets shifty and is hard to pin down.  Rather, we have to find out what the biggest share of [X] is; what part of [X] causes the most pain.&lt;/p&gt;
&lt;p&gt;We have to avoid questions of total cost.  Instead, we have to reframe budget conversations as questions of the rate at which money is spent and the rate at which features arrive.  If we have people we trust with high-powered tools, they'll build us stuff at an acceptable rate.&lt;/p&gt;
&lt;p&gt;At some point, the stakeholders will run out of high-priority, high-value things to do.  That's when we're approaching &amp;quot;Done Enough&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-real-questions"&gt;
&lt;h2&gt;The Real Questions&lt;/h2&gt;
&lt;p&gt;There are two questions more important than &amp;quot;budget&amp;quot; -- budget in the simplistic sense of &amp;quot;total cost&amp;quot;.&lt;/p&gt;
&lt;p&gt;The first question is one of performance.  At what rate will features arrive?   With an established staff and established tools, they should be able to commit to a rate of delivery that doesn't include a lot of surprises.&lt;/p&gt;
&lt;p&gt;The second question is one of expectations.  At what rate do we need features?  This is a question to the stakeholders.  If they need a lot of features right away, we might have to assign a big team.  If they're willing to wait, we might get away with a smaller team.  After the first few releases, we can probably cut back on the rate of delivery.&lt;/p&gt;
&lt;p&gt;Once we know our rate of delivery and our stakeholder's demands, we can figure out how many people we'll need.&lt;/p&gt;
&lt;p&gt;But what's the duration?&lt;/p&gt;
&lt;p&gt;For large projects, the duration is &amp;quot;the rest of this year.&amp;quot;  After all, that's the real answer most of the time.  And everything will be renegotiated next year.  Why pitch a multi-year plan when you have to redo it every single year?  Just pitch a &amp;quot;for the rest of this year&amp;quot; plan; that's the honest, useful truth.&lt;/p&gt;
&lt;p&gt;For small projects, you might know that it's only a few releases or a few sprints.  For bug fixes it's usually one sprint-one release.  And you often have historical data with which to confirm this.&lt;/p&gt;
&lt;p&gt;Bottom Line -- budget is easy.  It requires an honest assessment of multi-year projects: namely, you'll plan them one year at a time, since they're only approved one year at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="metrics"&gt;
&lt;h2&gt;Metrics&lt;/h2&gt;
&lt;p&gt;Many people are in favor of metrics.  &lt;a class="reference external" href="http://www.dorsethouse.com/authors/bullock.html"&gt;Jim Bullock&lt;/a&gt;  says they're essential.  However, let's not waste a lot of time and effort on measurements we can't make much use of.&lt;/p&gt;
&lt;p&gt;[I'm enamored of the &amp;quot;project dashboard&amp;quot; efforts to try and boil project status down to red, green and yellow lights.  The first thing everyone does is debate the metrics, since there's no standard practices for this.  Then, no one can supply &amp;quot;quality&amp;quot; data.  Why?  Standard reason: No stakeholders, nothing's at stake.  It's barely even a convenience item.  Seriously, what are the use cases?]&lt;/p&gt;
&lt;p&gt;Generally, metrics are either a part of the culture or they're a roadblock.  If you already measure and count stuff, then you've got metrics covered, and you can Start Now on meaningful work.&lt;/p&gt;
&lt;p&gt;Metrics are a roadblock when you have to organize the metrics as part of defining scope and deliverables and budget and staffing and all the folderol we're trying to skip over.  If you feel metrics are necessary, then you've got to get started.  As with all things, start with one person; have them watch and count work products of one other person.&lt;/p&gt;
&lt;p&gt;They say &amp;quot;you are what you measure&amp;quot;.  Consequently, the most important thing to measure is &amp;quot;delivered features&amp;quot;.  Measure the following: request backlog, sprints and releases.  Start there.  For that matter -- since these are the things the stakeholders see -- end there, too.&lt;/p&gt;
&lt;p&gt;They say &amp;quot;you can't control what you can't measure&amp;quot;.  What's important, however, is that &amp;quot;you may &lt;em&gt;not&lt;/em&gt;  be able to control the things you can measure&amp;quot;.  You can measure the height of the tide, but you can't change it.  Be sure you understand cause and effect in the things you're measuring.  Don't measure stuff where you don't know or can't control the cause.&lt;/p&gt;
&lt;p&gt;The hardest part about a metrics program is trying to use metrics to achieve organizational change.  It's really hard -- harder than you'd believe possible.  I saw one group try to achieve better reuse by measuring code delivered and code reused.  They, essentially, didn't count the reused code as part of a manager's overall delivery.  However, they measured productivity in lines of code per day.  So, when a manager elected to reuse some code, the team did some work for which there were no lines of code delivered.  The productivity metric would decline if you reused something.  This is the Unintended Consequence problem of trying to shape behavior with metrics.&lt;/p&gt;
&lt;p&gt;Hiring and Staffing&lt;/p&gt;
&lt;p&gt;First, I don't have much to say here that hasn't already been said.  Start by reading everything there is on &lt;a class="reference external" href="http://www.agileadvice.com/archives/2005/04/pair_programmin.html"&gt;Pair Programming&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I'm not sure that staffing is a proper project cost, &lt;em&gt;per se.&lt;/em&gt;   I think it's an organizational cost.  I don't think a specific project should be hiring and training people.  You need to apportion those costs across all projects.  Maybe renting contractors, but not hiring permanent staff.&lt;/p&gt;
&lt;p&gt;The customer sees the flow of features -- from backlog to sprint to release.  They don't see -- or care a whit -- about staffing to produce those features.  Since it's all about the feature, the customer is paying for features, not training.&lt;/p&gt;
&lt;p&gt;As with backups, restores, networks, firewalls, storage, heating, ventilation, air conditioning, clean water and coffee service, staff is a kind of infrastructure.  Perhaps the most important infrastructure.&lt;/p&gt;
&lt;p&gt;&amp;quot;But,&amp;quot; folks say, &amp;quot;it takes time/effort/money/risk to bring a new person up to speed.&amp;quot;  Agreed.  Do it quietly and quickly.  Agile suggests pair programming.  Two people linked with a chat client (or sitting in the same office) can get a lot done.  One can be junior and one can be senior.  It works great.  The cost to introduce someone new is really quite low when done this way.&lt;/p&gt;
&lt;p&gt;Documentation&lt;/p&gt;
&lt;p&gt;This is generally technical.  You've got to have it.  I didn't mention it because I thought it went without saying.  However, identifying it is good; it clarifies it as an Agile practice and prevents it from being overlooked.&lt;/p&gt;
&lt;p&gt;I think that powerful documentation tools are essential.  And MS-Word (or Open Office) isn't one of those tools.  I really like tools like &lt;a class="reference external" href="http://epydoc.sourceforge.net/"&gt;epydoc&lt;/a&gt;  for producing nice API docs from code.  I also like the &lt;a class="reference external" href="http://docutils.sourceforge.net/"&gt;docutils&lt;/a&gt;  rst2html.py script for producing nice docs from simple text files.  90% of documentation is text.  Make life simple and simply type the text.  Formatting can be done separately using the simple rules of &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReStructuredText&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The bottom line is still embodied in two words: Start Now.  It means going easy on the up-front junk.&lt;/p&gt;
&lt;p&gt;Getting started on an Agile project does not mean that we casually toss out &amp;quot;Budgeting. Metrics. Hiring. Documenting. Transitioning to new staff.&amp;quot;  What it means is to do these things realistically.  You can't know everything.  Don't waste time making assumptions, then discovering the assumptions are wrong and revising the project plans.&lt;/p&gt;
&lt;p&gt;Ask what the stakeholders need to know to commit to a decision.  They don't know everything, either.  They need to know enough.&lt;/p&gt;
&lt;p&gt;Budget is a flow of money.  For big, multi-year projects, it's a flow for the foreseeable future -- so just plan one year at a time.  Don't make up a five-year plan that will get rewritten 20 times.&lt;/p&gt;
&lt;p&gt;Metrics are a reflection of what has happened.  Be sure to measure things that matter.&lt;/p&gt;
&lt;p&gt;Hiring and staffing are the heart of Agile methods.&lt;/p&gt;
&lt;p&gt;Documentation is essential.  Tools matter.  Use the most productive tools you can find.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>The Big Plan For Change™ -- Since it never works, what's the alternative?</title><link href="https://slott56.github.io/2008_09_02-the_big_plan_for_changetm_since_it_never_works_whats_the_alternative.html" rel="alternate"></link><published>2008-09-02T10:23:00-04:00</published><updated>2008-09-02T10:23:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-02:/2008_09_02-the_big_plan_for_changetm_since_it_never_works_whats_the_alternative.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;amp;articleId=324808"&gt;Fast, but Slowly&lt;/a&gt; .  ComputerWorld, Frankly Speaking, August 25, 2008, by Frank Hayes.&lt;/p&gt;
&lt;p&gt;This is a very cool restatement of some essential Agile principles.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sure, we can train and plan -- and we should. But there are too many unknowns to train and plan for everything. A slow ramp-up lets us …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;amp;articleId=324808"&gt;Fast, but Slowly&lt;/a&gt; .  ComputerWorld, Frankly Speaking, August 25, 2008, by Frank Hayes.&lt;/p&gt;
&lt;p&gt;This is a very cool restatement of some essential Agile principles.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sure, we can train and plan -- and we should. But there are too many unknowns to train and plan for everything. A slow ramp-up lets us discover and kill problems as we go, reducing complexity at every step. Going slowly means fewer changes at once, fewer nasty surprises, fewer problems leaking out of the data center. It also means direct, desperately needed experience.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But to go slowly, we have to move fast. We can't wait for an ROI analysis or a line item in the budget to start getting that experience. We can start right now, today, with a tiny pilot that gets us moving.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thank you Frank Hayes.&lt;/p&gt;
&lt;div class="section" id="planning-is-important"&gt;
&lt;h2&gt;Planning Is Important&lt;/h2&gt;
&lt;p&gt;The last refuge of the technologically obsolete manager is planning.  If you can't understand all the new techno-mumbo-jumbo, you can at least understand dates and budgets.  Right?&lt;/p&gt;
&lt;p&gt;Wrong.  If you don't get the techno-mumbo-jumbo, you need to invest more time with real technical people soaking up the technology.  Watch the team at work.  Don't coach.  Watch.  Don't answer your phone.  Don't yammer.  Watch.  I've seen this done, and it works.&lt;/p&gt;
&lt;p&gt;A realistic plan requires a realistic understanding of the technology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-case-study"&gt;
&lt;h2&gt;A Case Study&lt;/h2&gt;
&lt;p&gt;For example, let's talk about introducing some kind of configuration management for the DBA's.  (See &lt;a class="reference external" href="https://slott56.github.io/2008_08_06-the_schema_evolution_problem.html"&gt;The Schema Evolution Problem&lt;/a&gt;.)  Doesn't that require a &lt;strong&gt;BPFC&lt;/strong&gt; ?  How will we achieve &amp;quot;control&amp;quot; without a plan?&lt;/p&gt;
&lt;p&gt;A plan is not step one.  A plan is not important or even very helpful.  At best it's a distraction.  At worst it takes on a life of its own and replaces real work with servicing the plan through short-cuts and work-arounds.&lt;/p&gt;
&lt;p&gt;Step one is to understand what we mean by &amp;quot;control.&amp;quot;  Not the dictionary definition.  Not the wikipedia definition of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Configuration_management"&gt;Configuration Management&lt;/a&gt;  or &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Change_Management_(ITSM)"&gt;Change Management&lt;/a&gt; .  That's evasive -- evasive in a criminal kind of way.&lt;/p&gt;
&lt;p&gt;Before embarking on a formalized Schema Evolution exercise, step one is to gather specific use cases for the configuration management processes.  In the current organization, who are the stakeholders?  What do they need to know about the current configuration?  What will the developers do?  What will QA do? What will the DBA's do?&lt;/p&gt;
&lt;p&gt;Before doing anything, we need to identify who has a stake in configuration control, schema version control and change management.  Everyone's involved.  Who's committed?  Who should control configuration of the various development, test and production realms? What are the various actor's goals?&lt;/p&gt;
&lt;p&gt;Review the old saw about the ham and eggs breakfast.  The chicken is involved.  The pig is committed.  Who are the pigs?  Who are the chickens?&lt;/p&gt;
&lt;p&gt;The point is &lt;strong&gt;not&lt;/strong&gt;  to write specific, detailed scenarios.  We're just going to summarize their goals; summarize their interactions with some &amp;quot;system&amp;quot; that will manage change and control configurations.  We need guidance on tool use.  We don't need yet another set of &amp;quot;requirements&amp;quot; that allow someone to engage in lots more programming.  The point is to increase control and reduce cost, not write more stuff.&lt;/p&gt;
&lt;p&gt;[The most dangerous person in the organization is the person who wants to spend all day writing Visual Studio plug-ins to &amp;quot;automate&amp;quot; some task that isn't very complicated in the first place.  Sigh.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="now-do-we-plan"&gt;
&lt;h2&gt;Now Do We Plan?&lt;/h2&gt;
&lt;p&gt;Now that we have identified stakeholders, goals and use case summaries (no steps, just overviews), we have a jumping-off point.  But not for planning.&lt;/p&gt;
&lt;p&gt;What we have at this point are people who make all kind of outrageous claims.  Everyone wants to be in charge -- they claim they're pigs -- but they're mostly just chickens.  The claims are contradictory.&lt;/p&gt;
&lt;p&gt;The DBA's, generally, claim that they own the configuration.  They control the stored procedures, but not the application software; leading to a split in the software.  They can't really justify their position, it's got too many holes in it -- they answer to users for production operations as well as new development.&lt;/p&gt;
&lt;p&gt;The Developers, generally, claim that they own the configuration, since the database is just there to support their fancy new applications.&lt;/p&gt;
&lt;p&gt;QA, interestingly, often says that they don't own the configuration.  I've met a fair number of QA folks that are behind the technology curve and don't feel comfortable &amp;quot;owning&amp;quot; the configuration.  Instead, they tolerate someone else owning configuration and track the changes from a safe distance.&lt;/p&gt;
&lt;p&gt;Project Managers will often try to control the configuration by issuing random orders from time to time.  &amp;quot;Don't change anything without checking with me&amp;quot; and &amp;quot;Fix something as soon as you know it's wrong&amp;quot; being the usual contradictory orders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-say-you-re-a-stakeholder"&gt;
&lt;h2&gt;You Say You're A Stakeholder&lt;/h2&gt;
&lt;p&gt;The phrase Stakeholder is usually a broad, vague thing that encompasses everyone.  But who has something &amp;quot;at stake?&amp;quot;  Who has something they'll lose?  And how significant is that loss?&lt;/p&gt;
&lt;p&gt;DBA's, for example, have no skin the game.  If nothing changes, they're happiest.  For them, an immutable configuration where they do backups and run SQL as part of production operations is the ideal.  Why try to introduce change management or version control to people who explicitly reject it?  DBA's often act as the technical hands pushing buttons on behalf of the users.  The users have more to loose than the DBA's.&lt;/p&gt;
&lt;p&gt;[Most DBA's will tell you that change control on a schema is impossible.  They reject &lt;a class="reference external" href="http://www.agiledata.org/essays/tools.html"&gt;Agile Database Tools and Scripts&lt;/a&gt; .]&lt;/p&gt;
&lt;p&gt;Developers have a something at stake.  If they're doing bug fixes, they need changes to be marched through some QA into production.  They're interested in improving existing production operations.  Developers doing new development, they have a new environment or application they need created, qualified and commissioned for production use.  They're interested in creating new production operations.&lt;/p&gt;
&lt;p&gt;In my opinion, QA has everything at stake.  They are -- in principle -- responsible for production operations, change fixes and new development.  QA has to be an active participant in change management procedures; they (and only they) can manage the configurations running in each working realm (production, test, development, etc.)  QA has to be able to use SVN (or CVS or whatever) to confirm what's there and what's supposed to be there.&lt;/p&gt;
&lt;p&gt;I think QA are the pigs in this ham-and-eggs breakfast.  Everyone else is just a chicken.  The users should be working directly with QA.  QA should be actively managing DBA and developer changes to provide an Information Technology architecture that meet the user's needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="okay-we-ve-resolved-the-conflicts-now-can-we-plan"&gt;
&lt;h2&gt;Okay, We've Resolved the Conflicts, Now Can We Plan?&lt;/h2&gt;
&lt;p&gt;Once we've worked out who the actors really are, and what they need to know, the rest is simply following Frank Hayes' advice.&lt;/p&gt;
&lt;p&gt;Start a pilot.  Without a plan.&lt;/p&gt;
&lt;p&gt;Start with one person working with QA to put one thing under configuration control; create the necessary change management; identify how to do version control.  Often, we have some of this in place for some of the source code.  Rarely does anyone have this in place for DDL and configuration files.&lt;/p&gt;
&lt;p&gt;So, simply expand the existing repository to contain one more thing.  Just one.  Pick the highest priority, most problematic, biggest, ugliest problem.&lt;/p&gt;
&lt;p&gt;Usually, it's something like stored procedures not matching between databases.  Just start there.  We already have some application source; why not get the rest of the application code under control?&lt;/p&gt;
&lt;p&gt;Get just the stored procedures into SVN.  Get the checkout areas squared away for each realm (test, production, QA, development, etc.)  Get things in and out.  Create branches and start tagging just the stored procedures.&lt;/p&gt;
&lt;p&gt;Live with this a while.  Get this under control.  Don't put a date or a deliverable around it.  Learn some lessons.  Make changes.  Back away from mistakes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="okay-we-finished-the-pilot-now-can-we-plan"&gt;
&lt;h2&gt;Okay, We Finished The Pilot.  Now Can We Plan?&lt;/h2&gt;
&lt;p&gt;Planning prematurely is a mistake.  One set of lessons learned doesn't reveal too many reproducible patterns.  Patterns become visible after you've done something two or three times.&lt;/p&gt;
&lt;p&gt;So, find the &lt;strong&gt;Next Big Thing&lt;/strong&gt;.  Start a &amp;quot;round 2 pilot&amp;quot;.  Not a full implementation.  No concrete plan.  Nothing so serious as that.  Just pick something that's out of control.&lt;/p&gt;
&lt;p&gt;For example, table definitions that don't match.  Start putting DDL into SVN.  Work out a way to compare a schema in the database with the DDL in the SVN source area.  (This is pretty hard, and often involves creating a temp DB and comparing the an established schema with the temp schema.)&lt;/p&gt;
&lt;p&gt;Work out a solution for the ALTER problem.  It's often best to rewrite the table CREATE statement, and provide a separate ALTER as a kind of one-use-only script.  Some people can't -- for some reason -- make this work, and have to execute the historical sequence of creates and alters to get a schema into a trusted configuration.  You need a way to match what you start with -- a change -- and what you end up with -- a schema.&lt;/p&gt;
&lt;p&gt;Expand the repository to contain one more thing.  Live with this DDL management for a while.  Create branches and start tagging the CREATEs and ALTERs.&lt;/p&gt;
&lt;p&gt;Live with this a while.  Get this under control.  Don't put a date or a deliverable around it.  Learn some lessons.  Make changes.  Back away from mistakes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fine-we-ve-done-the-pilot-twice-now-can-we-plan"&gt;
&lt;h2&gt;Fine.  We've Done The Pilot Twice.  Now Can We Plan?&lt;/h2&gt;
&lt;p&gt;Now that you have useful lessons learned -- and enough experience to see patterns emerging -- feel free to plan away.&lt;/p&gt;
&lt;p&gt;What's left is usually the configuration files themselves.  All of the various settings and what-not that configure each piece of the technology stack.  That's usually pretty straightforward to put under control.&lt;/p&gt;
&lt;p&gt;You'll notice that what's left after that is minor.  You've already tackled the stored procedure and DDL problems.  There won't be much budget or enthusiasm for the few things that remain.  Feel free to plan -- that will allow for lots of high-level meetings where nothing gets done because nothing's at stake.&lt;/p&gt;
&lt;p&gt;The remaining things will be resolved by people saying &amp;quot;Why isn't the index creation in the repository?&amp;quot;  Or &amp;quot;Why aren't the backup scripts in the repository?&amp;quot;&lt;/p&gt;
&lt;p&gt;At that point, stuff will move into the repository with no plan, no powerpoint, no budget, no management buy-in.  Folks will have the experience and the enthusiasm to put stuff under control without an elaborate management ritual.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-what"&gt;
&lt;h2&gt;Wait -- what?&lt;/h2&gt;
&lt;p&gt;How did something happen without a plan?  How can we fix our CM problem without a BPFC?&lt;/p&gt;
&lt;p&gt;Easy.  If you start small enough, you don't need a big plan.  The Big Plan for Change usually fails to identify what's at stake, and who's bearing the brunt of failure.  With nothing at stake, nothing needs to change, and nothing gets done.&lt;/p&gt;
&lt;p&gt;Configuration Management -- like many things -- can be tackled incrementally.  You don't have to boil the entire ocean; you just need to establish one best practice cheaply, simply, quietly and -- above all -- immediately.  Find the biggest problem.  What's at stake?  For whom?&lt;/p&gt;
&lt;p&gt;The &amp;quot;whole job&amp;quot; may appear big.  But that doesn't mean it requires a big plan.  It requires a small statement of vision.  Then, use the following two words: &amp;quot;Start Now.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Tooling to Build Test Cases</title><link href="https://slott56.github.io/2008_08_30-tooling_to_build_test_cases.html" rel="alternate"></link><published>2008-08-30T13:11:00-04:00</published><updated>2008-08-30T13:11:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-08-30:/2008_08_30-tooling_to_build_test_cases.html</id><summary type="html">&lt;p&gt;Here's a recipe for transforming a pile of similarly-formatted source spreadsheets into a suite of unittest test cases.&lt;/p&gt;
&lt;div class="section" id="some-use-cases"&gt;
&lt;h2&gt;Some Use Cases&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The subject matter experts will tinker with the spreadsheets.  They'll invent new cases, revise old cases, retract cases.  You'll be regenerating the test suite constantly.&lt;/li&gt;
&lt;li&gt;The subject matter experts …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Here's a recipe for transforming a pile of similarly-formatted source spreadsheets into a suite of unittest test cases.&lt;/p&gt;
&lt;div class="section" id="some-use-cases"&gt;
&lt;h2&gt;Some Use Cases&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The subject matter experts will tinker with the spreadsheets.  They'll invent new cases, revise old cases, retract cases.  You'll be regenerating the test suite constantly.&lt;/li&gt;
&lt;li&gt;The subject matter experts cannot reliably produce spreadsheets in a consistent format.  Get over it.  You'll be endlessly adjusting the conversion from spreadsheet to test suite.&lt;/li&gt;
&lt;li&gt;You'll be evolving the test cases as your application evolves.  You'll need to regenerate the whole test suite as you refactor your API's.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="components"&gt;
&lt;h2&gt;Components&lt;/h2&gt;
&lt;p&gt;To read spreadsheets, download &lt;a class="reference external" href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;xlrd&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;To write the JUnit framework TestCase code, download &lt;a class="reference external" href="http://www.makotemplates.org/"&gt;Mako&lt;/a&gt; .  There are many template engines (&lt;a class="reference external" href="http://www.cheetahtemplate.org/"&gt;Cheetah&lt;/a&gt; , &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt; , &lt;a class="reference external" href="http://www.myghty.org/"&gt;Myghty&lt;/a&gt; , &lt;a class="reference external" href="http://genshi.edgewall.org/"&gt;Genshi&lt;/a&gt;  and &lt;a class="reference external" href="http://www.kid-templating.org/"&gt;Kid&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;[I chose Mako because it is relatively lightweight and works well as a stand-alone component.  Cheetah, for instance, is hard to control for small, specialized jobs -- it seems to prefer having the ability to create relatively complex intermediate files.  Django's template can be separated from the rest of Django, but why download all that when you just want something simple.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="patterns"&gt;
&lt;h2&gt;Patterns&lt;/h2&gt;
&lt;p&gt;The overall design pattern for this is a &lt;strong&gt;Translator&lt;/strong&gt;.  This has three elements: the &lt;strong&gt;Deep Structure&lt;/strong&gt;  -- the actual meaning -- plus a &lt;strong&gt;Reader&lt;/strong&gt;  and a &lt;strong&gt;Writer&lt;/strong&gt;.  The Reader builds a Deep Structure from external data in one representation.  The Writer emits the Deep Structure in another representation.&lt;/p&gt;
&lt;p&gt;It's important to keep these three things disentangled.  You are likely to have several source spreadsheet formats, all of which lead to the same essential test case.  Similarly, you will have several test case formats that you are emitting.&lt;/p&gt;
&lt;p&gt;Here's a piece of the spreadsheet we're starting with.  This has a Source section that defines three attributes (&amp;quot;Name&amp;quot;, &amp;quot;Batch&amp;quot; and &amp;quot;Count&amp;quot;) and two entities.  It has a Result section that defines one entity with the same three attributes.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Batch&lt;/td&gt;
&lt;td&gt;Count&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SomeLongName&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;some_long_name&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Result&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Batch&lt;/td&gt;
&lt;td&gt;Count&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SomeLongName&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;[Let's pretend this is sample data for some kind of complicated matching algorithm that uses names, batch id numbers and counts to determine how things match.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deep-structure"&gt;
&lt;h2&gt;Deep Structure&lt;/h2&gt;
&lt;p&gt;Each test case generator will have a unique deep structure.  For the purposes of showing this recipe, we need to pick some kind of data model.  One common feature is that your test cases will be based on data entities.  The entities are more-or-less explicitly defined by row in the spreadsheet.  The overall test case, however, is usually implied by a series of rows with -- perhaps -- headers or notes or trailers or something to provide context.&lt;/p&gt;
&lt;p&gt;Your actual situation will obviously vary so widely that it's dangerous even providing a sample data model.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Entity( dict ):
    name= property( lambda self: self['name'] )
    batch= property( lambda self: self['batch'] )
    count= property( lambda self: self['count'] )

class Case( object ):
    def __init__( self, fileName, sheetName ):
        self.fileName= fileName
        self.sheetName= sheetName
        self.source= []
        self.result= []
    def __str__( self ):
        return &amp;quot;%s:%s&amp;quot; % ( self.fileName, self.sheetName )
    def addEntity( self, entity ):
        self.source.append( entity )
    def addResult( self, entity ):
        self.result.append( entity )
&lt;/pre&gt;
&lt;p&gt;This shows the Entity and the Case classes.  Yes, Entity is essentially a dict.  It's handy to conceive of the data coming from a spreadsheet as a dict.  Think of the csv package DictReader as the &amp;quot;standard&amp;quot; API.  Then develop a method for using xlrd to produce dict structures.&lt;/p&gt;
&lt;p&gt;The properties allow us to say entity.name instead of entity['name'].  We could write a more generic version of __getattr__, but that generally leads to more complexity in handling overrides and exceptions.  Most business Entities will have rather complex definitions with many attributes and methods.&lt;/p&gt;
&lt;p&gt;The test Case, in this example, has some identifying information, some source Entities from the spreadsheet and a result Entity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-reader"&gt;
&lt;h2&gt;The Reader&lt;/h2&gt;
&lt;p&gt;You'll have a Reader.  (Sometimes you'll have a class hierarchy with multiple readers, depending on how well your SME's can produce sample data.)  The Reader's job is to parse the spreadsheet and yield Cases.  It does as little as possible to build the Case.  Most data conversion or calculation is part of the Case or the Writer.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Reader( object ):
    def __init__( self, aFileName ):
        self.fileName= aFileName
        self.wb= xlrd.open_workbook( aFileName )
        self.log= logging.getLogger( &amp;quot;Reader&amp;quot; )
    def rowIter( self, sheet ):
        &amp;quot;&amp;quot;&amp;quot;Yield all rows of a given sheet.&amp;quot;&amp;quot;&amp;quot;
        for r in range( sheet.nrows ):
            self.log.debug( &amp;quot;Input %d: %r&amp;quot;, r, sheet.row(r) )
            yield r, sheet.row(r)
    def getCases( self, *sheetNames ):
        &amp;quot;&amp;quot;&amp;quot;Process given sheets to yield all Cases in this file.&amp;quot;&amp;quot;&amp;quot;
        sheetList= [ self.wb.sheet_by_name(n) for n in sheetNames ]
        for sheet in sheetList:
            rows= self.rowIter( sheet )
            for c in self.parseCase( self.fileName, sheet.name, rows ):
                yield c
    def parseCase( self, fileName, sheetName, rowIter ):
        &amp;quot;&amp;quot;&amp;quot;Yield cases from this sheet's row iterator.&amp;quot;&amp;quot;&amp;quot;
        case= Case( fileName, sheetName )
        # Find the Source line
        for r, row in rowIter:
            if is_string(row[0]) and row[0].value == 'Source':
                break
        # Next line is the source column headings
        r, header= rowIter.next()
        labels= [ c.value.lower() for c in header ]
        # Entities defined until the Result line
        for r, row in rowIter:
            if is_blank( row ): continue
            if is_string(row[0]) and row[0].value == &amp;quot;Result&amp;quot;: break
            values= [ c.value for c in row ]
            rowDict= dict( zip( labels, values ) )
            self.log.debug( 'entity %d: %r', r, rowDict )
            e= Entity( rowDict )
            case.addEntity( e )
        # Next line is the result column headings
        r, header= rowIter.next()
        labels= [ c.value.lower() for c in header ]
        # Remaining lines are the result entities
        for r, row in rowIter:
            if is_blank( row ): continue
            values = [ c.value for c in row ]
            rowDict= dict( zip( labels, values ) )
            self.log.debug( 'result %d: %r', r, rowDict )
            e= Entity( rowDict )
            case.addResult( e )
        yield case
&lt;/pre&gt;
&lt;p&gt;This shows the typical structure for a Reader.  You use it with the following kind of loop.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
r= Reader( fileName )
    for c in r.getCases(&amp;quot;Sheet1&amp;quot;,&amp;quot;Summary&amp;quot;,&amp;quot;Exception&amp;quot;):
        print c
&lt;/pre&gt;
&lt;p&gt;Why list the sheets explicitly?  Depends on the structure of &lt;strong&gt;your&lt;/strong&gt;  source files.  You may be able to simply iterate through the sheets.  Or you may have sheets that have to be skipped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="utility-functions"&gt;
&lt;h2&gt;Utility Functions&lt;/h2&gt;
&lt;p&gt;Here are the three utility functions the Reader uses.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def is_empty( aCell ):
    return aCell.ctype == xlrd.XL_CELL_EMPTY
def is_string( aCell ):
    return aCell.ctype == xlrd.XL_CELL_TEXT
def is_blank( aRow ):
    return all( [ is_empty(c) or is_string(c) and len(c.value) == 0 for c in aRow ] )
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="the-template-based-writer"&gt;
&lt;h2&gt;The Template-Based Writer&lt;/h2&gt;
&lt;p&gt;Ideally, you'll have one standard writer that covers all of the test cases.  Of course, there may be exceptions or alternatives or other complexities.  Here's a Writer that uses Mako Templates to generate a Java JUnit TestCase.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Writer( object ):
    def __init__( self ):
        self.template= Template( &amp;quot;&amp;quot;&amp;quot;\
&amp;lt;%
    import datetime
    now = datetime.datetime.now()
    e1= case.source[0]
    e2= case.source[1]
    r1= case.result[0]
%&amp;gt;\
// Generated from ${case.fileName} ${case.sheetName}
// On ${now}
// By Unittest/generator.py ${version}
package some.app.test.${case.sheetName};
import junit.framework.TestCase;
import some.app.model.Entity;
import some.app.view.SomeClass;

/**
 * Unit test ${case.sheetName}:
 * exercises SomeClass.aMethod on two entities.
 * &amp;lt;p&amp;gt; ${e1}
 * &amp;lt;p&amp;gt; ${e2}
 * &amp;lt;p&amp;gt; Expected result: ${r1}.
 */
class Test_${case.sheetName} extends TestCase {
    Entity e1, e2;
    SomeClass sc;
    public void setUp() {
        e1= Entity( &amp;quot;${e1.name}&amp;quot;, ${e1.batch}, ${int(e1.count)} );
        e2= Entity( &amp;quot;${e2.name}&amp;quot;, ${e2.batch}, ${int(e2.count)} );
        sc= SomeClass();
    }
    public void testProcess() {
        aResult= sc.aMethod( e1, e2 );
        assertEquals( &amp;quot;${r1.name}&amp;quot;, aResult.name );
        assertEquals( ${r1.batch}, aResult.batch );
        assertEquals( ${int(r1.count)}, aResult.count );
    }
}
&amp;quot;&amp;quot;&amp;quot;
        )
    def source( self, aCase ):
        return self.template.render( case=aCase, version=__version__ )
&lt;/pre&gt;
&lt;p&gt;This shows a single, simple template.  Note that most of the code is the giant string with the Java code in it.  Mako reads files nicely, in case this inline string becomes uncomfortably long and complex.&lt;/p&gt;
&lt;p&gt;Note that we do some processing in the Writer, some of which might be better defined in the Entity or the Case.&lt;/p&gt;
&lt;p&gt;Generally, you'll have to mix and match Mako processing with your Writer class hierarchy and processing you do in your Entity and Case class definitions.  You want to minimize the processing in Mako, just because it's a bit obscure inside the template.  On the other hand, you don't want to push everything into the business Entity or test Case classes, since they're the &lt;strong&gt;Essential Meaning&lt;/strong&gt;  that is represented either as a spreadsheet or a JUnit unit test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-main-program"&gt;
&lt;h2&gt;The Main Program&lt;/h2&gt;
&lt;p&gt;The main program is just a wrapper that binds an instance of Reader and Writer to create some test cases from source files.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def main( fileName, *sheets ):
    log= logging.getLogger( &amp;quot;main&amp;quot; )
    r= Reader( fileName )
    w= Writer()
    for c in r.getCases(*sheets):
        log.info( &amp;quot;Case %s&amp;quot;, c )
        print w.source( c )

if __name__ == &amp;quot;__main__&amp;quot;:
    import sys
    logging.basicConfig( stream=sys.stderr, level=logging.INFO )
    main( &amp;quot;TestCase.xls&amp;quot;, &amp;quot;Sheet1&amp;quot; )
&lt;/pre&gt;
&lt;p&gt;This is the small script version of the main program.  This could be expanded to do complex parameter-parsing.  However, in these cases, it's sometimes just as simple to have an explicit list of which files and which sheets are being processed for the current release.&lt;/p&gt;
&lt;p&gt;Also, the &amp;quot;print&amp;quot;-based solution isn't really the best.  One might prefer to open appropriate files and write the rendered template to them.  However, there are change-control issues with overwriting previous tests; you do need to confirm that the new tests compile, for example, before replacing the old tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-review"&gt;
&lt;h2&gt;Use Case Review&lt;/h2&gt;
&lt;p&gt;When the test cases change, it's easiest to simply slap the XLS files into subversion.  Then, subversion's youngest version number identifies the suite of test cases.  We can simply regenerate the JUnit source with our generator tool.  We have to run a quick &amp;quot;do the tests work?&amp;quot; sanity check and see what has changed.  If the changes are understood, this becomes the new suite of tests.&lt;/p&gt;
&lt;p&gt;Since the spreadsheets will have inconsistencies, the &amp;quot;simply regenerate&amp;quot; never works out very well.  Each release of the source may require adjusting the generator to cope with someone's inability to copy and paste consistent column names.  Sigh.  We have split our design so that our Reader can evolve and change without breaking the deep structure or the test case Writer.&lt;/p&gt;
&lt;p&gt;When the application changes, the template will change.  We can simply regenerate the JUnit source.  After our quick &amp;quot;do the tests work?&amp;quot; we have made wholesale changes to the test cases.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>The Joy of Unit Testing</title><link href="https://slott56.github.io/2008_08_28-the_joy_of_unit_testing.html" rel="alternate"></link><published>2008-08-28T09:46:00-04:00</published><updated>2008-08-28T09:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-08-28:/2008_08_28-the_joy_of_unit_testing.html</id><summary type="html">&lt;p&gt;The customer sent a screen grab from an accounting desktop application with a couple of rows highlighted. They claim that the application I reverse engineered from C and rewrote in Java didn't work for this one case.&lt;/p&gt;
&lt;p&gt;Step 1.  Get clarification on the screen grab information.  The data labels don't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The customer sent a screen grab from an accounting desktop application with a couple of rows highlighted. They claim that the application I reverse engineered from C and rewrote in Java didn't work for this one case.&lt;/p&gt;
&lt;p&gt;Step 1.  Get clarification on the screen grab information.  The data labels don't match any of the 100's of unit test cases that we put together.&lt;/p&gt;
&lt;p&gt;Step 2.  The clarification remains incomplete, but time is passing, so I make some guesses and build a unit test case.  This case is a lot like the cases in spreadsheet X page Y-Z, so I copy the most similar method from that TestCase to create a new TestCase.  Yes, this is copy-and-paste reuse.  Yes it's bad.&lt;/p&gt;
&lt;p&gt;I fold in the new test case from the screen grab as best I can.&lt;/p&gt;
&lt;p&gt;Run it.&lt;/p&gt;
&lt;p&gt;Step 3.  Originally, I had planned on step 3 being a day of debugging to either (a) find a super-subtle logic flaw or (b) find that this test case was so different from all others that &lt;strong&gt;We Have To Talk&lt;/strong&gt;.  The (b) case is surprisingly common.  Lots of people imagine the scope of the application as being something it isn't.  Often they lift up something that's not a complex edge or corner case; they single out something that is way out in left field.&lt;/p&gt;
&lt;p&gt;Many business operations require people to make judgements.  It's common.  It's the thing software doesn't do well, and shouldn't do.  Many people routinely spend a long, boring day making essentially the same judgement call over and over again.  Often, this isn't a good candidate for automation because -- well -- software can't discuss or justify it's judgement.&lt;/p&gt;
&lt;p&gt;Today's step 3, however, was to send back the new test case.  It worked for me.  If it doesn't work for you, then there are two potential issues: (a) you changed something, or (b) I didn't transform the screen grab into a test case properly.&lt;/p&gt;
&lt;p&gt;In the case of (b), you could say that this unprofessional of me.  I &lt;em&gt;should&lt;/em&gt; be able to translate their screen grab into a proper test case.  However, I think that there's an interface between users and developers and creating spreadsheets in a standard form should be their job.  I have hundreds of cases they already created in standard spreadsheets.  They should be able to maintain those spreadsheets, adding new cases.&lt;/p&gt;
&lt;p&gt;I have a tool (800 lines of Python) to build Java JUnit TestCase classes from their spreadsheets.  That's my side of the interface.&lt;/p&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Bug -&amp;gt; TestCase rules.  It's the best.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Risk-Based Testing</title><link href="https://slott56.github.io/2008_08_22-risk_based_testing.html" rel="alternate"></link><published>2008-08-22T10:29:00-04:00</published><updated>2008-08-22T10:29:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-08-22:/2008_08_22-risk_based_testing.html</id><summary type="html">&lt;p&gt;First, read Bach's &lt;a class="reference external" href="www.satisfice.com/articles/hrbt.pdf"&gt;Heuristic Risk-Based Testing&lt;/a&gt; .  Clear and simple.&lt;/p&gt;
&lt;p&gt;Then, read Amland and Garborgsv &lt;a class="reference external" href="www.stickyminds.com/getfile.asp?ot=XML&amp;amp;id=13289&amp;amp;fn=XUS31659994file1.doc"&gt;Risk-Based Testing and Metrics&lt;/a&gt; .  Not so clear -- probability gets folded in, confusing the issue.  Also check out Schaefer's &lt;a class="reference external" href="www.cs.tut.fi/tapahtumat/testaus04/schaefer.pdf"&gt;Risk-Based Testing&lt;/a&gt; .  Probabilities are waved around like they're important.  They aren't.&lt;/p&gt;
&lt;p&gt;Risk management shouldn’t be confused with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, read Bach's &lt;a class="reference external" href="www.satisfice.com/articles/hrbt.pdf"&gt;Heuristic Risk-Based Testing&lt;/a&gt; .  Clear and simple.&lt;/p&gt;
&lt;p&gt;Then, read Amland and Garborgsv &lt;a class="reference external" href="www.stickyminds.com/getfile.asp?ot=XML&amp;amp;id=13289&amp;amp;fn=XUS31659994file1.doc"&gt;Risk-Based Testing and Metrics&lt;/a&gt; .  Not so clear -- probability gets folded in, confusing the issue.  Also check out Schaefer's &lt;a class="reference external" href="www.cs.tut.fi/tapahtumat/testaus04/schaefer.pdf"&gt;Risk-Based Testing&lt;/a&gt; .  Probabilities are waved around like they're important.  They aren't.&lt;/p&gt;
&lt;p&gt;Risk management shouldn’t be confused with random Roulette/Craps/Blackjack kind events.&lt;/p&gt;
&lt;p&gt;The odds of failure aren't what matters -- it's always 1.0.  It's the &lt;em&gt;cost&lt;/em&gt;  of failure that matters.  And even that is just the overall importance of the feature.&lt;/p&gt;
&lt;p&gt;We have to be very careful with the work &amp;quot;Risk&amp;quot;.   Software risk management is about three simple things: (a) bad management, (b) gathering information (managing ignorance) and (c) planning for specific contingencies.&lt;/p&gt;
&lt;p&gt;Risk as Bad Management&lt;/p&gt;
&lt;p&gt;Risks aren't vague, blurry, random casino events.  There aren't odds.  Most risks are things which &lt;strong&gt;will&lt;/strong&gt;  happen unless we take steps to prevent them.&lt;/p&gt;
&lt;p&gt;Nothing -- except developer death or serious disease -- is about random risks.  It's about specific bad management that will unconditionally be a problem.  The only thing we may not know is the magnitude.  For example, let’s say we write an estimating assumption that there’s a risk that the test server won’t be ready on time.  This isn't &amp;quot;random&amp;quot;.  It's totally under our control.  We don't really &amp;quot;mitigate&amp;quot; this risk, we just order the server on time.&lt;/p&gt;
&lt;p&gt;You might say that there's a risk that sys admins won't have it ready on time -- the risk is that their time to deliver is variable -- could be a week, could be three weeks.  It appears random.  Even though you might want to describe it as random, it's a controllable, knowable event.  In this case, it's someone stealing the sysadmin resources out from under you.&lt;/p&gt;
&lt;p&gt;Most bad management leads to rework.   You can't control everything, but the things you can't control aren't random.  They’re just irritating – and they're just rework.  You don't use random-event risk management.  You say &amp;quot;What if we’re wrong?  It will cost us $50K to get out of that mess.&amp;quot;  That's your contingency budget: a specific rework plan.  $50K for specific actions to solve a specific potential problem.  Not 10% of the project, but a plan to remedy the problem.&lt;/p&gt;
&lt;div class="section" id="knowledge-and-ignorance"&gt;
&lt;h2&gt;Knowledge and Ignorance&lt;/h2&gt;
&lt;p&gt;Some of what passes for &amp;quot;risks&amp;quot; are &amp;quot;Things we don’t Know&amp;quot; mixed with &amp;quot;Things we didn’t even know to ask&amp;quot;.  Throw in the attitude of &amp;quot;New information looks like scope creep&amp;quot;, and learning becomes a problem.  These aren't a roll of the dice.  They're things we didn’t know, but figured we'd learn as we went along.&lt;/p&gt;
&lt;p&gt;For example, &amp;quot;How many users?&amp;quot;  That's a business analysis question; they'll get to it.  We assumed it was a dozen.  If it’s 100, we have a change control issue.  This isn't a risk -- we assumed something going in, we knew we'd learn something during the project.&lt;/p&gt;
&lt;p&gt;You might say that there’s a &amp;quot;risk&amp;quot; that we guessed wrong in our initial assumptions.  It isn't, however.  It's learning.  Either we left room in the project to learn, or it devolves to basic bad management.  The answer wasn't known in advance, but it wasn't random, either.  It just wasn't known.  Guessing (&amp;quot;assuming&amp;quot;) isn't random – it's just that we could guess wrong.&lt;/p&gt;
&lt;p&gt;This is simply a budget change.  If the number of users is 100 instead of 12, then we have to refigure the budget with the new information.  Unless you're saddled with &amp;quot;All Scope Change is Bad&amp;quot; mind-set, that's just a change.  Change based on stuff that was learned.  This isn't &lt;strong&gt;rework&lt;/strong&gt;; this is learning.  You say &amp;quot;What if this assumption is wrong?  It will cost us $50K to get out of that mess.&amp;quot; A specific rework plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="specific-contingency-plans"&gt;
&lt;h2&gt;Specific Contingency Plans&lt;/h2&gt;
&lt;p&gt;Bottom-line: It’s all about contingency planning.  For each thing we don't know, we make up a number (an &amp;quot;assumption&amp;quot;) and a &lt;em&gt;x&lt;/em&gt; $ multiplier to turn that number into a project cost.  When we finally get the real number, we apply the &lt;em&gt;x&lt;/em&gt; $ multiplier and get the new project cost.  This is how change management happens -- each new thing we learn revises the budget.  Each mistake we make has to be corrected.&lt;/p&gt;
&lt;p&gt;A mistake -- when things that go wrong -- leads to rework.   This rework is a specific budget number we have to add.  For things we didn't know to ask in the first place, that’s plain old scope change based on stuff we learned.  It's also a budget number we add.&lt;/p&gt;
&lt;p&gt;Management risks aren’t random.  They’re not like casino gambling or insurance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="risk-based-testing-2"&gt;
&lt;h2&gt;Risk-Based Testing&lt;/h2&gt;
&lt;p&gt;Risk-based Testing builds priorities around two things: the importance of the feature and the impact of failure.  No odds involved in this:  importance is fixed, failure is certain, the cost of failure is predictable.  We simply rank our tests using importance and cost of failure to determine what gets tested first.&lt;/p&gt;
&lt;p&gt;Since importance also drives Agile development, this is essentially a kind of Agile testing.&lt;/p&gt;
&lt;p&gt;Build stuff in order of importance -- test it in the same order.  I don't think Risk-Based Testing is very &amp;quot;interesting&amp;quot;; I think it's just the Agile practice renamed.&lt;/p&gt;
&lt;p&gt;What about &amp;quot;Impact of Failure?&amp;quot;  That is usually parallel with importance.  If it the impact of failure is low, then you don't really need software to automate it, do you?  If the risk of failure is low, you have work-arounds, fall-backs; you have contingency plans that aren't complex or expensive.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>The Technology Obsession</title><link href="https://slott56.github.io/2008_08_16-the_technology_obsession.html" rel="alternate"></link><published>2008-08-16T01:11:00-04:00</published><updated>2008-08-16T01:11:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-08-16:/2008_08_16-the_technology_obsession.html</id><summary type="html">&lt;p&gt;An old professor of mine writes &amp;quot;There are lots of pathological propensities at work ..., &amp;quot;Gee, we've got a way to use the computer to ...&amp;quot;  In short, automation for the sake of automation.&amp;quot;&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.jbox.dk/quotations.htm"&gt;jbox.dk Quotations on Simplicity&lt;/a&gt; .  The fundamental principle is that simplicity is really important.  But how do …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An old professor of mine writes &amp;quot;There are lots of pathological propensities at work ..., &amp;quot;Gee, we've got a way to use the computer to ...&amp;quot;  In short, automation for the sake of automation.&amp;quot;&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.jbox.dk/quotations.htm"&gt;jbox.dk Quotations on Simplicity&lt;/a&gt; .  The fundamental principle is that simplicity is really important.  But how do we find this mystical simplicity?&lt;/p&gt;
&lt;p&gt;Actually, it's easy.  Listen to fewer people.  See Steve Yegge's &lt;a class="reference external" href="http://steve-yegge.blogspot.com/2008/08/business-requirements-are-bullshit.html"&gt;Business Requirements are Bullshit&lt;/a&gt; .  The point is &lt;em&gt;not&lt;/em&gt;  that requirements are crap.  The point is that the &lt;em&gt;process&lt;/em&gt;  of &amp;quot;Gathering Business Requirements&amp;quot; usually leads to requirements that include a fair amount of crap.  Indeed, the more time and effort you spend in &amp;quot;gathering&amp;quot; the less value you actually gather.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;We're not talking about a failure mode for Gathering Business Requirements (GBR). We're talking about something more fundamental: the GBR phase of a project is a leading indicator that the project will fail.&lt;/p&gt;
&lt;p&gt;Put another way: GBR is a virtual guarantee that a project is building the wrong thing, so no amount of brilliant execution can save it.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The advice is to understand the problem, then solve it for yourself.  More fundamentally, build the minimum to actually solve it for yourself.  Zero frills.  None of the famous &amp;quot;we'll have to add features to create enough value to entice the users.&amp;quot;&lt;/p&gt;
&lt;p&gt;Also see Jesse Noller's &amp;quot;&lt;a class="reference external" href="http://jessenoller.com/2008/08/12/steve-yegge-hits-a-homer-your-requirements-are-stupid/"&gt;Steve Yegge hits a homer: Your requirements are stupid&lt;/a&gt; &amp;quot;.  &amp;quot;When you're thinking about requirements ask yourself this: If at the start, you can not describe exactly what your product does in under a minute - you've already got a problem.&amp;quot;&lt;/p&gt;
&lt;p&gt;Here's my takeaway from these folks.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Actually understand the user's problem.  Try to do their job with them looking over your shoulder.  Don't talk hypothetically about &amp;quot;requirements&amp;quot;; don't waste time on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/MoSCoW_Method"&gt;MoSCoW&lt;/a&gt;  priorities.  Actually do their job.&lt;/li&gt;
&lt;li&gt;Once you actually understand the problem, build the software you need to solve the problem.  Focus on a simple, minimal, reliable, provable solution -- something that you can describe &amp;quot;with your hands in your pockets&amp;quot; -- something clear enough that it doesn't require professional educators, a power-point presentation or even on-line help.&lt;/li&gt;
&lt;li&gt;Once you have a solution, carefully fold in features.  Add features that you can articulate simply and clearly.  Cover an edge or corner case that you can describe; cover a major piece of functionality that's easy to articulate.  Be sure that the actual users truly &amp;quot;get&amp;quot; your vision.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Written requirements documents are of nebulous value.  A backlog of features -- yes.  A summary of the use cases -- yes.  A data model or some sequence diagrams -- yes.  Detailed, blow-by-blow narrative with &amp;quot;shall&amp;quot; in each legally-binding sentence -- no.&lt;/p&gt;
&lt;div class="section" id="how-do-you-create-schedule-and-budget"&gt;
&lt;h2&gt;How do you create schedule and budget?&lt;/h2&gt;
&lt;p&gt;Isn't a tight, complete requirements document a prerequisite for a budget?&lt;/p&gt;
&lt;p&gt;Isn't that what everyone says?  Establish scope (by gathering requirements) and then define the budget?&lt;/p&gt;
&lt;p&gt;No.  Requirements are demonstrably NOT part of budgeting.  Most projects have a budget which is lodged in the heads of executives, business owners and buyers.  You can gather all the requirements you want.  If you go over that budget, you will have your requirements cut down to size.  If you run way under the budget, you will be given more work to do to spend all the money.&lt;/p&gt;
&lt;p&gt;Budget has nothing to do with requirements.  For that matter, schedule has nothing to do with requirements.  Try and change the schedule of a project.  Go ahead and try.  You're told to work smarter, not harder.  You're told that the date can't be moved.  You're told that some requirements have to be pushed into a later phase.&lt;/p&gt;
&lt;p&gt;Schedule and budget are defined long before Gathering Business Requirements is finished.  Often before it's even started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-we-get-for-our-money"&gt;
&lt;h2&gt;What do we get for our money?&lt;/h2&gt;
&lt;p&gt;While &amp;quot;when will we be done?&amp;quot; is meaningless, &amp;quot;what do we get for are money?&amp;quot; is a meaningful question.  However, there's no simple answer.  Instead, this is a conversation topic, not a simple question.  Each incremental release gets more features.  Each piece of the backlog has a potential price and delivers something.  The priorities, the costs and the order of development reveal that buyers can change priorities, cut off the budget at any time and have some pile of useful software.&lt;/p&gt;
&lt;p&gt;Automation for the sake of automation -- an unhealthy obsession -- leads to thick books of requirements.  A thick book of requirements will have no discernible ordering, no priorities.  A smelly pile of requirements often accompanies a contract that amounts to all-or-nothing development.  All requirements or none of them.  If none is a possible outcome, how valuable can this be?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Small Not-For-Profit, Part II</title><link href="https://slott56.github.io/2008_07_31-small_not_for_profit_part_ii.html" rel="alternate"></link><published>2008-07-31T10:13:00-04:00</published><updated>2008-07-31T10:13:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-07-31:/2008_07_31-small_not_for_profit_part_ii.html</id><summary type="html">&lt;p&gt;In the &lt;a class="reference external" href="https://slott56.github.io/2008_07_28-small_not_for_profit_web_presence_what_to_do.html"&gt;Small Not-for-Profit Web Presence&lt;/a&gt;  posting, I identified a software portfolio for a small NFP.  Basically, it was a list of cheap (or free) web resources that would provide a solid web presence with relatively low cost.  More importantly, it would move them off a legacy web presence that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the &lt;a class="reference external" href="https://slott56.github.io/2008_07_28-small_not_for_profit_web_presence_what_to_do.html"&gt;Small Not-for-Profit Web Presence&lt;/a&gt;  posting, I identified a software portfolio for a small NFP.  Basically, it was a list of cheap (or free) web resources that would provide a solid web presence with relatively low cost.  More importantly, it would move them off a legacy web presence that was completely customized, but wasn't really very well implemented.&lt;/p&gt;
&lt;p&gt;It turns out that, small for-profit businesses (especially sole proprietorships) can benefit from assembling a web presence out of Google Pages (or Yahoo! Geocities), a Blog, a Google Calendar and (possibly) a Google or Yahoo! group.  They also need a CRM solution (CLPsuite or Salesforce.com).&lt;/p&gt;
&lt;p&gt;However, instead of CRM, Member Management (MM, sometimes called Member Relationship Management to parallel Customer Relationship Management) is a potential part of the software portfolio for a small not-for-profit (NFP).  The NFP I was helping gets their support through grants and donations of time from the principals.  Member Management doesn't enter into their picture at all.&lt;/p&gt;
&lt;p&gt;However, clubs and churches are member supported.  For them, member management might make some sense.&lt;/p&gt;
&lt;div class="section" id="web-based-member-management"&gt;
&lt;h2&gt;Web-Based Member Management&lt;/h2&gt;
&lt;p&gt;First, look at Capterra's Enterprise Software Directory under &lt;a class="reference external" href="http://www.capterra.com/membership-management-software"&gt;Membership Management&lt;/a&gt; .  It's a pretty good list.  Also, look under &lt;a class="reference external" href="http://www.capterra.com/church-management-software"&gt;Church Membership Software&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The first problem is that some of these are toolkits, not complete, stand-alone applications.  A toolkit means you are programming and programming means you aren't really small (or aren't focused on your primary NFP mission.)&lt;/p&gt;
&lt;p&gt;The second problem is that you have to choose between Customer Relationship Management and Member Management.  My Small NFP (and many small sole proprietorships) needs CRM (i.e. CLPsuite or Salesforce.com).  They don't need MM in any form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="synchronicity"&gt;
&lt;h2&gt;Synchronicity&lt;/h2&gt;
&lt;p&gt;You can't be synchronizing between member mailing lists.  You must chose one and only one approach.  The cost and complexity will suck the life out of your organization.  You can do bulk notifications to members with any of the following techniques:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A Yahoo! Group or Google Group.&lt;/li&gt;
&lt;li&gt;A CRM solution (CLPsuite or Salesforce).&lt;/li&gt;
&lt;li&gt;A Member Management solution.&lt;/li&gt;
&lt;li&gt;RSS or ATOM feeds based on your blog or web page changes.  This is pull, not push technology, so you won't really know who's reading your material.  This is very Web 2.0, but not very comfortable for people addicted to pushing their message.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="connectivity-and-spamulation"&gt;
&lt;h2&gt;Connectivity and Spamulation&lt;/h2&gt;
&lt;p&gt;The RSS/ATOM issue is important.  When I talk about this with Small NFP's, I call all bulk email &lt;em&gt;spam&lt;/em&gt;.  Even the &amp;quot;good&amp;quot; opt-in email that people sign up for is still -- in a way -- spam.&lt;/p&gt;
&lt;p&gt;Small NFP's bristle when I call their email spam.  First, it's opt-in email.  People asked for it.&lt;/p&gt;
&lt;p&gt;But more importantly, some of the folks have the need to be &lt;strong&gt;sure&lt;/strong&gt;  (really &lt;em&gt;sure&lt;/em&gt;) that their message is getting out.  Here's my bad news: you can't be sure anyone's reading your email newsletter.  If it doesn't get spam-filtered, it can still get ignored.  You just never know.&lt;/p&gt;
&lt;p&gt;With RSS/ATOM, they asked and they checked for updates.  This is much, much more effective than an email list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="member-management-solutions"&gt;
&lt;h2&gt;Member Management Solutions&lt;/h2&gt;
&lt;p&gt;I don't have much real advice here.  When you Google for &amp;quot;web based member management software&amp;quot;, you get a bunch of hits, include Wild Apricot, Tendenci, ARC Solutions, IRM-Systems.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Getting to an Agile process</title><link href="https://slott56.github.io/2008_07_30-getting_to_an_agile_process.html" rel="alternate"></link><published>2008-07-30T13:27:00-04:00</published><updated>2008-07-30T13:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-07-30:/2008_07_30-getting_to_an_agile_process.html</id><summary type="html">&lt;p&gt;Here's a great summary of Agile techniques.  It's in ComputerWorld's Development section, in an article by Heather Havenstein: &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;amp;articleId=9110219"&gt;Five Web 2.0 app dev lessons for enterprise IT&lt;/a&gt; &amp;quot;.  I think the article is mis-titled, since it's basically &amp;quot;Agile for Big IT.&amp;quot;&lt;/p&gt;
&lt;p&gt;Some of the five techniques are motherhood and apple-pie …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a great summary of Agile techniques.  It's in ComputerWorld's Development section, in an article by Heather Havenstein: &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;amp;articleId=9110219"&gt;Five Web 2.0 app dev lessons for enterprise IT&lt;/a&gt; &amp;quot;.  I think the article is mis-titled, since it's basically &amp;quot;Agile for Big IT.&amp;quot;&lt;/p&gt;
&lt;p&gt;Some of the five techniques are motherhood and apple-pie items.  Some are a little too-cleverly worded to pound home the essential points.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Break the barrier between developers and end-users...  This is essential: crowds of managers and business analysts are not adding significant value.  A few key players to help the developers understand the problem domain are important.  A Business Analyst who is &amp;quot;translating&amp;quot; user requirements into IT jargon isn't helping.  A Business Analyst who is acting as architect or designer isn't helping.&lt;/li&gt;
&lt;li&gt;Keep it simple.  This is how you get to smaller, faster, better teams.  A bone-headed manager who claims that we have to add features to &amp;quot;justify the cost&amp;quot; or &amp;quot;create sufficient value&amp;quot; is just empire-building.&lt;/li&gt;
&lt;li&gt;Stick to the script.  This means use Python or some other powerful, dynamic language.&lt;/li&gt;
&lt;li&gt;Release early and often.  In the Computerworld comments, this point raised some ire.  The claim is that the folks in operations won't able to keep up with rapid, small releases.  This assertion is demonstrably false.  Folks in operations can't handle the twice-each-year releases because each release is such a massive change that it (a) never works and (b) there's no going back.  Folks in operations will -- easily -- handle a twice-each-week release because the releases will (a) work, and (b) have a clear fall-back to the previous release (except twice each year when there's no easy fallback.)&lt;/li&gt;
&lt;li&gt;Let the users -- not the developers -- determine the new features.  This is stated incorrectly.  The developers sometimes head down dark rat-holes of lost time.  Usually, it's the bone-head manager who started the project with &amp;quot;we have to add features to create sufficient value&amp;quot; that determined a list of useless gold-plating features.   Developers don't mind focus.  Empire-building managers will (a) add features and then (b) demand that something be shipped on-time even if it doesn't work.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="making-changes"&gt;
&lt;h2&gt;Making Changes&lt;/h2&gt;
&lt;p&gt;This list is a handy recipe for making changes in an IT organization.  First -- of course -- people need to know that there's a problem.  You have to recognize that the waterfall model (Big Design Up Front) doesn't work; don't wait for your users or customers to tell you this.  (See &lt;a class="reference external" href="https://slott56.github.io/2008_02_11-the_waterfalls_not_working_even_a_client_said_so.html"&gt;The Waterfall's Not Working&lt;/a&gt; .)&lt;/p&gt;
&lt;p&gt;Once you've recognized that the problem is the bloated process, you have to embrace real change.  Not &amp;quot;process improvement&amp;quot; where you negotiate over the details of how best to post revised project plans, but &amp;quot;process replacement&amp;quot;.  Rethink things from the fundamentals.  (See &lt;a class="reference external" href="https://slott56.github.io/2008_02_14-why_agile_whats_the_point.html"&gt;Why Agile?&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;Ultimately, the most significant thing is to recognize that &lt;strong&gt;LEARNING IS NOT FAILING&lt;/strong&gt;.  When a project is cancelled or change, it may not have failed.  If the project's first few deliverables where really useful and valuable, maybe someone learned that the remaining phases wouldn't be valuable enough.  Canceling the project doesn't mean the project failed to deliver &lt;em&gt;value&lt;/em&gt;.  It just failed to deliver the whole boat-load of crap that was initially set out in the project charter.&lt;/p&gt;
&lt;p&gt;Then, consider the points from the Computerworld article.  #1 and #5 -- fold the users in -- are pretty clear.  The reason this simple advice is not followed, however, because IT management knows that users change their minds, which changes the scope of the project.  This &amp;quot;learning&amp;quot; behavior leads to change, and change to a project is usually labelled as &amp;quot;failure&amp;quot;.&lt;/p&gt;
&lt;p&gt;After all, you can't plan for all the things the users will learn.  Since Big IT labels all change as &amp;quot;scope creep&amp;quot; and treats it as failure, they force the project managers to segregate users from developers.  In essence, a successful project is one in which nothing was learned and there were no midcourse corrections.  The initial estimates (no matter how fanciful) were met on time and on budget.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="even-savings-are-a-failure"&gt;
&lt;h2&gt;Even Savings Are A Failure&lt;/h2&gt;
&lt;p&gt;When the users learn that they missed something, scope expands.  No one likes this, so IT prevents it by doing BDUF.  It's stupid, of course, to demand omniscience, but it's a long-standing tradition.  The demand for omniscience is one of the biggest barriers to Agile techniques.&lt;/p&gt;
&lt;p&gt;No one seems to want to make trade-off decisions.  The Big Design which was done Up Front identified &amp;quot;requirements&amp;quot; and we all know that &amp;quot;required&amp;quot; is absolute, final and non-negotiable.  This is silly.  Few -- if any -- users can unambiguously state what is &amp;quot;required&amp;quot; in the sense of absolute and final.  In reality, all &amp;quot;requirements&amp;quot; fall on the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/MoSCoW_Method"&gt;MoSCoW&lt;/a&gt;  continuum: Must have, Should have, Can have and Won't have.  In Big IT fantasy land, scope expansion in one area can't be counterbalanced by contraction in another.  It just expands.&lt;/p&gt;
&lt;p&gt;When the users learn that they've asked for something of little or no value, scope should contract.  In most organizations, this is also labeled as Big Old Failure.  Project Managers are accused (accused! blamed!) for padding projects with tasks that eventually got cut.  Program Managers and Directors then start playing the &amp;quot;I'll only give you half of what you asked for because I know you're padding&amp;quot; game.&lt;/p&gt;
&lt;p&gt;Learning and change should not be equated with failure.  Changes to scope are normal, expected, and hoped-for consequences of software development.  However, Big IT punishes change.   Aggressively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="foundations"&gt;
&lt;h2&gt;Foundations&lt;/h2&gt;
&lt;p&gt;The best advice in the article are items #2, #3 and #4: small feature sets, powerful tools, frequent releases.  These form part of the technology core that supports the other Agile practices.  Without these foundational elements, the rest of the &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt;  can't easily be realized.&lt;/p&gt;
&lt;p&gt;To this, I'd add #6: Unit Test everything.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Small Not-For-Profit Web Presence -- What to do?</title><link href="https://slott56.github.io/2008_07_28-small_not_for_profit_web_presence_what_to_do.html" rel="alternate"></link><published>2008-07-28T22:45:00-04:00</published><updated>2008-07-28T22:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-07-28:/2008_07_28-small_not_for_profit_web_presence_what_to_do.html</id><summary type="html">&lt;p&gt;Let's talk about a Small Not For Profit that has a number of web assets, but a web presence that isn't working well.&lt;/p&gt;
&lt;p&gt;First, they have a Domain Name (pretend it's www.smallnfp.org). They have an associated organization which is hosting their web site.  Let's call them the Associated …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's talk about a Small Not For Profit that has a number of web assets, but a web presence that isn't working well.&lt;/p&gt;
&lt;p&gt;First, they have a Domain Name (pretend it's www.smallnfp.org). They have an associated organization which is hosting their web site.  Let's call them the Associated Org (www.assocd.org)  The site is big and complex with numerous sophisticated features.  Sadly, they're web 1.0 features, and are starting to show their age.&lt;/p&gt;
&lt;p&gt;Only... there are issues.  The Associated Org has at least two Domain Names pointed at their server.  The Associated Org are nice folks, but not web developers.  Their IIS configuration can only handle minimal distinction between the domain names; one significant consequence is that the web pages can't have a meaningful &lt;tt class="docutils literal"&gt;&amp;lt;title&amp;gt;&lt;/tt&gt; tags in the &lt;tt class="docutils literal"&gt;&amp;lt;head&amp;gt;&lt;/tt&gt;.  Really.  It says &amp;quot;Default Page&amp;quot;, and that can't easily be fixed.&lt;/p&gt;
&lt;p&gt;We'll call this application server -- with it's current set of problems -- the legacy web presence.&lt;/p&gt;
&lt;div class="section" id="web-1-0"&gt;
&lt;h2&gt;Web 1.0&lt;/h2&gt;
&lt;p&gt;The biggest issue is the Web 1.0 approach:  Provide a site where people can contribute.  &amp;quot;Interactivity&amp;quot; was the feature they wanted.&lt;/p&gt;
&lt;p&gt;The problem is that we're trying to target victims (and family and caregivers) of trauma.  We can't simply create a free-for-all wiki-wiki.  The postings must be moderated.&lt;/p&gt;
&lt;p&gt;So, our legacy web application is a rather complex application:  it has a posting workflow.  Everything has to be approved by a moderator.  The problem is that there are two web sites, a number of status settings, and things can easily vanish.  The workflow is too hard to manage.&lt;/p&gt;
&lt;p&gt;On conference calls with the Associates it became clear that the the Web 1.0 site wasn't working well.  It wasn't so much the bugs (hardly any) but the complexity of the thing.  There were many types of content; it wasn't at all clear where each type of posting showed up on the resulting web site.  It wasn't clear precisely which status codes lead to what behavior for postings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-newsletter"&gt;
&lt;h2&gt;The Newsletter&lt;/h2&gt;
&lt;p&gt;Nothing says &amp;quot;pre-web&amp;quot; more than a newsletter.  Knowledge sharing is important -- it's a big reason why some small not-for-profits exist -- but news in a monthly bundle is a hold-over from print media.&lt;/p&gt;
&lt;p&gt;The bastard child of print media and Web 1.0 is the PDF newsletter.  It can be flashy and eye-catching.  But it's multiple pages; I have to download it and open it to read it.  Bleah.&lt;/p&gt;
&lt;p&gt;A Web 1.1 compromise is the PDF newsletter with an email that summarizes the articles.  A little better -- I can judge if anything is interesting enough to justify downloading it.&lt;/p&gt;
&lt;p&gt;A Web 1.2 compromise is an email that summarizes the articles with links to the full articles and no PDF newsletter.  Better still, because follow-up is easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-we-need"&gt;
&lt;h2&gt;What Do We Need?&lt;/h2&gt;
&lt;p&gt;The Small NFP has a number of distinct audiences.  The actual users of the services (in this case, victims of certain kinds of trauma); these are people who -- for various reasons -- may not seek help or may be suspicious of offers of help.  There are the family and friends of a victim; people who might be able to steer the victim to seek help.  There are caregivers who need help and support.  There is the wider circle of associated organizations, non-governmental and even in the government.  Finally, there are potential sources of donations and grant money.&lt;/p&gt;
&lt;p&gt;We have a number of channels of communication:  email, print, a &amp;quot;web presence&amp;quot;.  But what is this &amp;quot;web presence&amp;quot;?  The (nearly) static content at www.smallnfp.com?  Or something more?&lt;/p&gt;
&lt;p&gt;We have a number of messages.  For each audience we have a distinct message.  Victims, families, caregivers, associated organizations and funding agencies all want to know different things.  There is some overlap, but there are also some distinctions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-web-2-0-newsletter-is-a-blog"&gt;
&lt;h2&gt;The Web 2.0 Newsletter Is a Blog&lt;/h2&gt;
&lt;p&gt;First, let's dispose with the newsletter.  A newsletter isn't very targeted. (Indeed, a big question is &amp;quot;who's on the current email and print mailing lists?&amp;quot; and &amp;quot;what message &lt;em&gt;should&lt;/em&gt;  they be getting?&amp;quot; and &amp;quot;how can one document serve all those distinct needs?&amp;quot;)&lt;/p&gt;
&lt;p&gt;A newsletter is a compendium of individual stories.  Each story has a byline, a dateline, and sometimes other information about the story.  A newsletter saves the stories until it fills enough pages to justify the cost of publication.&lt;/p&gt;
&lt;p&gt;A Blog is a compendium of individual stories.  The information about the story (byline, dateline, etc.) is still present.  However, the cost of publication is nearly zero (compared with the cost of gathering information, writing and editing), so stories can published when they're still newsworthy.  The cost of publication and the bundling of stories ceases to be relevant.&lt;/p&gt;
&lt;p&gt;An email notification can be sent with each story.  Additionally, there are syndication tools like RSS and ATOM that make email notification a little slow and old-fashioned.&lt;/p&gt;
&lt;p&gt;Additionally, a print newsletter can bundle a recent batch of stories for publication to folks who don't use computers much.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-2-0-interactivity-is-more-blogs"&gt;
&lt;h2&gt;Web 2.0 Interactivity Is More Blogs&lt;/h2&gt;
&lt;p&gt;One stumbling point in the current architecture is the &amp;quot;interactivity&amp;quot; wish.  It would be great to have victims (or families or caregivers) share their stories.&lt;/p&gt;
&lt;p&gt;It would be great.  Indeed, they probably are sharing their stories.  We know they're not posting on www.smallnfp.org's site.  What's left is that they're probably posting on their own blogs, and &lt;a class="reference external" href="http://www.myspace.com"&gt;myspace&lt;/a&gt; , &lt;a class="reference external" href="pages.google.com"&gt;google&lt;/a&gt;  or &lt;a class="reference external" href="http://geocities.yahoo.com"&gt;geocities&lt;/a&gt;  sites.&lt;/p&gt;
&lt;p&gt;In Web 1.0 world, no one could publish anything because publishing was still hard.  It required servers and programmers and knowledge of HTML, ASP and what-not.&lt;/p&gt;
&lt;p&gt;In Web 2.0 world, everyone can publish everything because publishing is free.  Much of it is supported by advertisers.  The rest is supported by very simple, easy-to-use services like &lt;a class="reference external" href="http://www.mac.com"&gt;www.mac.com&lt;/a&gt; , or the pay versions of geocities or google pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="email-and-spamming"&gt;
&lt;h2&gt;Email and Spamming&lt;/h2&gt;
&lt;p&gt;Currently, the Small NFP's email list is split among several servers: the Associated Org's server, a Gmail account and an AOL account.  Any basic web mail account can keep a master list of contacts and appropriate groups within that master list.   There are a large number of web-based mail processing applications.  See the Wikipedia list of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_webmail_providers"&gt;webmail providers&lt;/a&gt; .  Google mail and Yahoo! mail are popular web email solutions.&lt;/p&gt;
&lt;p&gt;However, a mail list is generally for distribution of reminders for web site or blog changes.  The RSS and ATOM syndication protocols (used directly by FireFox and Safari browsers) mean that email isn't required for change notification.  The Web Page and Blog tools provide the necessary feeds, mostly automatically.&lt;/p&gt;
&lt;p&gt;Additionally, mail lists are endlessly being partitioned based on interest, focus, background, status, geography, demographics, etc.  The problem is that web-based contact management solutions (e.g., &lt;a class="reference external" href="http://www.salesforce.com"&gt;salesforce.com&lt;/a&gt;  or &lt;a class="reference external" href="http://www.clpsuite.com/"&gt;CLP Suite&lt;/a&gt; ) are rather complex.  Also, it seems odd to use for-profit contact management for a not-for-profit organization.&lt;/p&gt;
&lt;p&gt;There are two approaches: a simple mail list or a full-up CRM solution.  The fees for single-user CRM solutions are quite low.  Using a full CRM solution is probably the best way to go.&lt;/p&gt;
&lt;p&gt;Small Not-For-Profit Web Strategy&lt;/p&gt;
&lt;p&gt;Here's a way to structure the web presence of a small not-for-profit.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Web Site&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Get a Yahoo! Geocities or Google Pages site.  Pay the fees to suppress advertisements and get enough email addresses to handle the current staff.  Use this for your basic contact information, mission statement, strategy, funding sources, and other relatively static information.  This isn't the easiest way to manage information.  However, it's essential to show that the organization is permanent, and serious.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Get Google Accounts&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Everyone should be using &lt;a class="reference external" href="http://mail.google.com"&gt;Google Mail&lt;/a&gt; , and &lt;a class="reference external" href="http://docs.google.com"&gt;Google Documents&lt;/a&gt; .  Stop emailing documents among the principals in the organization.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Start a blog&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;The Wikipedia entry on Weblog software has a section on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Weblog_software#Developer-hosted"&gt;developer-hosted blogs&lt;/a&gt; .  These are all candidate pieces of easy-to-use blogging software.  Generally, you'll keep your blog and site separate.  You will have your blog reference your site and your site reference your blog.  Careful choice of names creates a single identity.&lt;/p&gt;
&lt;p&gt;For example, &lt;a class="reference external" href="http://www.blogger.com"&gt;Blogger&lt;/a&gt;  is a Google product, but it isn't part of &lt;a class="reference external" href="http://pages.google.com"&gt;Google Pages&lt;/a&gt; .  You could use any of the more popular blog tools like &lt;a class="reference external" href="http://www.livejournal.com/"&gt;LiveJournal&lt;/a&gt; , &lt;a class="reference external" href="http://www.typepad.com/"&gt;TypePad&lt;/a&gt; , &lt;a class="reference external" href="http://360.yahoo.com/"&gt;Yahoo 360&lt;/a&gt;  or &lt;a class="reference external" href="http://wordpress.org/"&gt;WordPress&lt;/a&gt; .&lt;/p&gt;
&lt;p class="last"&gt;The hardest part of this is changing the current newsletter production cycle to get rid of the once-each-month schedule.  Instead, the newsletter becomes a continuous operation, with each new article turning into a blog posting.  The traditional print newsletter -- as summary of the Blog -- can still be issued, but the writing and editing is spread throughout the month, not jammed into a hectic rush with a deadline.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Start a Calendar&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The current web site offers an event list.  This can be replaced with &lt;a class="reference external" href="http://www.google.com/calendar"&gt;Google Calendar&lt;/a&gt;  or`30 Boxes. &amp;lt;&lt;a class="reference external" href="http://30boxes.com/welcome.php"&gt;http://30boxes.com/welcome.php&lt;/a&gt;&amp;gt;`_   Again, this calendar must link to the primary web site, and the primary web site must link to the calendar.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Start a Group or Two&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;A few constituencies should have some additional features -- often provided by tools like &lt;a class="reference external" href="http://groups.yahoo.com"&gt;Yahoo! Groups&lt;/a&gt;  or &lt;a class="reference external" href="http://groups.google.com"&gt;Google Groups&lt;/a&gt; .  These tools keep web pages, calendars, documents, discussion forums and email lists.&lt;/p&gt;
&lt;p class="last"&gt;Generally, a narrow audience (e.g., the trustees) can all be members of a Google Group that provides meeting schedules, agendas, and shared documents.   In some cases, there are audiences with frequent, less-formal contacts.  A group can work well for this.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Pick a CRM Tool&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Move all of the existing mailing lists into the CRM tool.  Identify each individual with enough characteristics to permit meaningful communication.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;At this point, the Small NFP has the relevant capabilities of their current web site.  Each component is easier to use and more sophisticated than in the legacy web site.  The parts (site, blog, calendar) are spread around, but each is focused on one part of the problem.  Using a single set of names, colors and mutual links means that this amalgamation appears reasonably consistent to visitors.&lt;/p&gt;
&lt;p&gt;The current administrative procedures will change.  Rather than interacting with multiple pages of the (hard-to-use) legacy site, the administrator will interact with multiple pages of multiple (easier-to-use) sites.&lt;/p&gt;
&lt;p&gt;In some cases, there will be several alternatives for communication -- the central calendar, a web page change, a blog posting or a group calendar entry that's only visible to the relevant group.   This requires some care to pick the best and most appropriate place to put the information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Create a MySpace Page&lt;/strong&gt;.  MySpace has Blog, Calendar and Address Book capabilities.  However, each feature is relatively primitive.  Further MySpace is just one way to attract and retain some (but not all) members of the various target audiences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conversion"&gt;
&lt;h2&gt;Conversion&lt;/h2&gt;
&lt;p&gt;Here's how the Small NFP can move from their legacy web site to a Web 2.0 presence.  This is a multi-step operation.&lt;/p&gt;
&lt;p&gt;First, get the existing content into easy-to-use files.  This will require working with the Associated organization that is currently providing web services.  The extracted content could come in a number of forms.&lt;/p&gt;
&lt;p&gt;Second, post this content to the new blog and web pages.  Some blog tools have automated interfaces that make it possible to move large numbers of files with relatively little manual intervention.  A couple of quick Python programs can probably bulk load the blog postings and calendar events.&lt;/p&gt;
&lt;p&gt;Third, direct the existing domain name to the new primary web site.   This finishes any relationship with the Associated organization, simplifying their life.&lt;/p&gt;
&lt;p&gt;Fourth, drop all email accounts except the approved GMail accounts.  Stop using AOL.  Send email messages from all the legacy accounts announcing the new accounts.&lt;/p&gt;
&lt;p&gt;Fifth, merge all working email addresses into the chosen CRM solution.&lt;/p&gt;
&lt;p&gt;Announce the changes via blog postings, MySpace and email notification.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Technology and Compromise</title><link href="https://slott56.github.io/2008_07_18-technology_and_compromise.html" rel="alternate"></link><published>2008-07-18T10:10:00-04:00</published><updated>2008-07-18T10:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-07-18:/2008_07_18-technology_and_compromise.html</id><summary type="html">&lt;p&gt;Two recent conversations with the Non-Compromisers.&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;I can't use Yahoo! mail&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;What?&amp;quot;&lt;/p&gt;
&lt;p&gt;NC: &amp;quot;Yahoo! mail has a &amp;quot;Home&amp;quot; tab which isn't the inbox.  It always lands there.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Yep.  That's a javascript thing.  The tab isn't bookmarkable.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;The fact that I can't land directly on the &amp;quot;Inbox …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two recent conversations with the Non-Compromisers.&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;I can't use Yahoo! mail&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;What?&amp;quot;&lt;/p&gt;
&lt;p&gt;NC: &amp;quot;Yahoo! mail has a &amp;quot;Home&amp;quot; tab which isn't the inbox.  It always lands there.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Yep.  That's a javascript thing.  The tab isn't bookmarkable.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;The fact that I can't land directly on the &amp;quot;Inbox&amp;quot; tab makes Yahoo! mail unacceptable.&amp;quot;&lt;/p&gt;
&lt;p&gt;--Omitted:  a long &amp;quot;can you explain why&amp;quot; digression that's frankly a strange thing.--&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Well, use Google Mail then.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;Can't do that either -- I've used the Yahoo! mail for so long that I can't change.  My only choice is to configure the POP reader in Yahoo!, but that's the Yahoo! plus and I don't want to pay for mail service.&amp;quot;&lt;/p&gt;
&lt;p&gt;Okay.  So no technology is acceptable here.  I'm stumped as to what to do.  Can't use Yahoo!  Must use Yahoo!.  This is going nowhere.&lt;/p&gt;
&lt;p&gt;Here's another.&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;I want to consolidate my iTunes libraries.  I opened the iTunes library folder on my office computer, dragged all the files into a CD and then dragged them into the iTunes library folder on my home computer, but now my library is all screwed up.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Here's a hint: don't do that.  Use the iTunes import function.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;That's too slow.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Dragging didn't work, so slow is your only choice.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;There has to be another way.  This is really popular software, there has to be something 'out there' that manages the iTunes library for you.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;There is.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;Really?  What?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;iTunes.  Just use it like it's supposed to be used.  Don't work around it.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;I can't.  It's too slow.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Then use something else.  By a Zune and use whatever Microsoft offers.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;I already have an iPod, so I have to use iTunes.&amp;quot;&lt;/p&gt;
&lt;p&gt;So, you must use iTunes and you can't use iTunes.  Okay.  This is going nowhere.&lt;/p&gt;
&lt;div class="section" id="the-prototype"&gt;
&lt;h2&gt;The Prototype&lt;/h2&gt;
&lt;p&gt;Recently, I fielded some calls on building a prototype of an application.  But nothing was acceptable.&lt;/p&gt;
&lt;p&gt;I find that prototypes are fun, I do a lot of them.  I use Django.  Why?  I can piece together a quick data model and just slap together page after page of views that actually work.  In many cases, the &amp;quot;update&amp;quot; use cases are so poorly defined that the default admin pages are fine.  The rest of the user experience is easy to build.&lt;/p&gt;
&lt;p&gt;Also, Django encourages learning.  Evolve the data model, rebuild the test cases and views, and you're up and running right away.  Sometimes with the customer sitting there.&lt;/p&gt;
&lt;p&gt;In this case, however, the application was much, much more complex.  It had a stand-alone desktop component that used mostly web service requests.  It had a central web site, but that had  a small user interface.  The desktop applications had to work stand-alone with intermittent synchronization back to the central database.  Remote mobile computing.&lt;/p&gt;
&lt;p&gt;Every prototype proposal was unacceptable.  But we still had to create a prototype.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-and-why"&gt;
&lt;h2&gt;Who and Why?&lt;/h2&gt;
&lt;p&gt;They wanted a free prototype.  We can't really do that, since this isn't a &amp;quot;product line&amp;quot; that we're offering.  It's custom software.&lt;/p&gt;
&lt;p&gt;They weren't happy buying a prototype, so they threw out the following option: &amp;quot;A Scalable Prototype&amp;quot;.  This made very little sense to anyone.&lt;/p&gt;
&lt;p&gt;First -- and foremost -- I asked &amp;quot;Who's the decision-maker&amp;quot; and &amp;quot;How does a prototype help them make a decision?  What will they see in a prototype?&amp;quot;  The answer was uselessly vague -- the decision-maker is the funding organization (duh! that's more-or-less a matter of definition).  The decision is &amp;quot;they want to see a prototype, it will help secure funding.&amp;quot;  That's not a very clear answer to &amp;quot;what do you need to know.&amp;quot;  That's just a recapitulation of the situation.&lt;/p&gt;
&lt;p&gt;Okay, they don't know what decision is being made.  They won't tell us who is making it.  But they have directed us to write a proposal for a &amp;quot;Scalable Prototype&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scalable-in-what-dimension"&gt;
&lt;h2&gt;Scalable in What Dimension?&lt;/h2&gt;
&lt;p&gt;They said the word &amp;quot;scalable&amp;quot;.  It's an application with a desktop component and a server component.  What's scalable?  The volume of data on the desktop?  The volume of data required to synchronize desktop and server?  The number of clients the server can handle?  The total number of users?  What are we trying to scale?&lt;/p&gt;
&lt;p&gt;None of those.&lt;/p&gt;
&lt;p&gt;&amp;quot;Scalable&amp;quot; doesn't mean scalable.  It means &amp;quot;extensible&amp;quot; or &amp;quot;evolvable&amp;quot;.  They want us to do &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Software_prototyping#Evolutionary_prototyping"&gt;Evolutionary Prototyping&lt;/a&gt; .  Okay, I think I get it.&lt;/p&gt;
&lt;p&gt;They want a prototype that's free; something we don't do.&lt;/p&gt;
&lt;p&gt;With limited input from them, we're supposed to build &amp;quot;something&amp;quot; which will evolve into a complete product.  We don't have any use cases or other analysis material.  That's part of a future contract that we'll win by doing a prototype.&lt;/p&gt;
&lt;p&gt;So we're have a Non-Compromise conversation.&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;It can't be a throwaway prototype&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Fine.  What does it need to show?&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;Something to demonstrate the concepts so we can get funding.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;There are many concepts.  Do they want to see the database synchronization?&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;No.  Too technical.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Do they want to see the server side in any way.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;No.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Do they want to see the desktop application -- the thing we don't have specified.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;Not really.  Just the concept.  But in a form we can build on.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;You mean the desktop application framework.  That's what we build on.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;No, not the framework, the concept.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;So, screen shots of the desktop?&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;Screen &lt;em&gt;concepts&lt;/em&gt; .&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Sketches?  Wireframes?  The actual application?  Remember, we don't have any use cases, so actual is a little crazy.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;Not sketches.  Not real screens.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Do you mean mockups.  In Visio.&amp;quot;&lt;/p&gt;
&lt;p&gt;NC:  &amp;quot;Not mockups.&amp;quot;&lt;/p&gt;
&lt;p&gt;So, it's not sketches, not mockups and not real screens.  I can't find any gaps along this spectrum to figure out what they're asking for.  It isn't a non-technical sketch; it isn't a semi-technical mock-up; it isn't a fully-realized SWING Frame.  What is it?&lt;/p&gt;
&lt;p&gt;Whatever they want, it's none of the things I've mentioned.  And compromise is right out of the picture.  It's either the thing they want or the project -- prototype and all -- is cancelled.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>What's Central Here?</title><link href="https://slott56.github.io/2008_07_12-whats_central_here.html" rel="alternate"></link><published>2008-07-12T15:25:00-04:00</published><updated>2008-07-12T15:25:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-07-12:/2008_07_12-whats_central_here.html</id><summary type="html">&lt;p&gt;The requirements are a sequence diagram showing a complex back-and-forth with the vendor's web service.  Each request and reply is detailed, but there's no overview or summary stated.  It's implied, and all of the business folks can articulate it, but no one wrote any of it down.&lt;/p&gt;
&lt;p&gt;This looks like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The requirements are a sequence diagram showing a complex back-and-forth with the vendor's web service.  Each request and reply is detailed, but there's no overview or summary stated.  It's implied, and all of the business folks can articulate it, but no one wrote any of it down.&lt;/p&gt;
&lt;p&gt;This looks like a relatively clean, RESTful kind of service -- our customers send us requests, we gather information from vendors, do our value-add processing, and send a response.&lt;/p&gt;
&lt;p&gt;It looks like the classic Web Services Proxy design pattern.  We define a nice Python class that's a proxy for the external services (and their goofy protocols).  We can then define a simple WSGI application to use those services and do our value-add processing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class SomeService( object ):
    def someMethod( self, **args ):
        Create XML request object
        Create Request with a method of POST
        urllib2.open( )
        Parse XML response
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
class OurApplication( object ):
    def __init__( self, service ):
        self.service= service
    def __call__( environ, start_response ):
        request= simplejson.load( wsgi.input )
        self.service.someMethod( ... )
        self.service anotherMethod( ... )
        self.service.step3(...)
        self.service.moreAndMore(...)
        self.ourValueAddProcessing( ... )
        start_response( '200 OK', [('Content-type','application/json')]
        return [ simplejson.dumps( reply ) ]
    def ourValueAddProcessing( self, **kw ):
         some processing that we're going to charge for
&lt;/pre&gt;
&lt;p&gt;Ideally, the project plan is to debug the service proxy and write the application.  Using Python and the widely available WSGI tools, this isn't a lot of programming.  We should be up and running inside of a month.  Right?  Wrong.&lt;/p&gt;
&lt;div class="section" id="focus-on-value"&gt;
&lt;h2&gt;Focus on Value&lt;/h2&gt;
&lt;p&gt;Everyone's focus was on the &amp;quot;rocket science&amp;quot; part of this: using an external vendor for information.  This is where the business owners had spent a lot of time.  The value add was so obvious, it didn't need to be written down.  But the negotiations with the vendors -- the service level agreements, the contracts, the terms and conditions, the commercial considerations -- had soaked up a lot of brain calories.&lt;/p&gt;
&lt;p&gt;I had a long list of vendor contacts.  I had examples, documents, URL's, all kinds of supporting material for the vendor data gathering.&lt;/p&gt;
&lt;p&gt;But for our &amp;quot;value add&amp;quot;, I had nothing.  I had bupkes.  It was a &amp;quot;calculation&amp;quot; or a &amp;quot;lookup&amp;quot; or something.  I didn't even have the name of the internal folks who knew this.  I had a spreadsheet, and it wasn't consistent enough to make sense of.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="invertability"&gt;
&lt;h2&gt;Invertability&lt;/h2&gt;
&lt;p&gt;After some digging, the question arose as to what the essential processing scenario should be.  It sure looks like the main processing has the following outline.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Some internal value-add steps.&lt;/li&gt;
&lt;li&gt;Gather Vendor data (a long back-and-forth)&lt;/li&gt;
&lt;li&gt;A final internal value-add step to combine everything.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which view is right?  The Vendor-centric sequence?  A sequence focused on our value-add?  More importantly, how can we make it irrelevant?  The answer is an &amp;quot;invertable&amp;quot; design.  Each step is a separate object, the overall service merely combines the various steps in some useful order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-command-design-pattern"&gt;
&lt;h2&gt;The Command Design Pattern&lt;/h2&gt;
&lt;p&gt;This works out well if each step follows the GoF &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Command_pattern"&gt;Command&lt;/a&gt;  design pattern.  A sequence of steps is also a Command; this permits me to reswizzle this with every rise and fall in the slowly-solidifying requirements.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Command( object ):
    def __init__( self, service ):
        self.service= service
    def __call__( self, state ):
        return NotImplemented

class OurStep1( Command ):
    def __call__( self, state ):
        state.onething= our value-add

class OurStep2( Command ):
    def __call__( self, state ):
        state.anotherthing= another value-add

class VendorStep1( Command ):
    def __call__( self, state ):
        self.service.someMethod(...)

class VendorStep2( Command ):
    def __call__( self, state ):
        self.service.anotherMethod(...)

class Vendor( Command ):
    def __init__( self, *args ):
        super( Vendor.self).__init__( *args )
        self.vs1= VendorStep1( self.service )
        self.vs2= VendorStep2( self.service )
    def __call__( self, state ):
        for step in ( self.vs1, self.vs2 ):
            step( state )

class OurValueAdd( Command ):
    def __init__( self, *args ):
        super( OurValueAdd, self ).__init__( *args )
        self.our1= OurStep1( self.service )
        self.our2= OurStep2( self.service )
        self.vend= Vendor( self.service )
    def __call__( self, state ):
        for step in ( self.our1, self.vend, self.our2 ):
            step( state )
&lt;/pre&gt;
&lt;p&gt;Now, we can use any of the steps in any order.  And we can recombine them, extend them, replace them, contract them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="all-that-overhead"&gt;
&lt;h2&gt;All That Overhead&lt;/h2&gt;
&lt;p&gt;It appears like we've micro-managed a simple thing.  We took a simple piece of procedural programming, turned each step into an object, and added a lot of overheads.&lt;/p&gt;
&lt;p&gt;However, the &amp;quot;simple&amp;quot; piece of programming isn't fully defined.  Any one of the &amp;quot;steps&amp;quot; could expand, contract or get replaced.  Our impact is controlled.&lt;/p&gt;
&lt;p&gt;There's one big change, however, may be pervasive.  Additional service definitions will change the constructor.  We'd have to switch to a dictionary, &lt;tt class="docutils literal"&gt;**services&lt;/tt&gt;, and each class would have to pick a specific member in the collection of services.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Wrestling with REST</title><link href="https://slott56.github.io/2008_06_25-wrestling_with_rest.html" rel="alternate"></link><published>2008-06-25T10:18:00-04:00</published><updated>2008-06-25T10:18:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-06-25:/2008_06_25-wrestling_with_rest.html</id><summary type="html">&lt;p&gt;REST is cool because there's less protocol there -- little more than HTTP and some kind of representation for objects (XML, JSON or whatever.)   It seems to me that REST with JSON is a very lightweight approach to implementing web services.  Doing this in Python further trims down the technology stack …&lt;/p&gt;</summary><content type="html">&lt;p&gt;REST is cool because there's less protocol there -- little more than HTTP and some kind of representation for objects (XML, JSON or whatever.)   It seems to me that REST with JSON is a very lightweight approach to implementing web services.  Doing this in Python further trims down the technology stack by limiting the amount of source code and the amount of work required to build something.&lt;/p&gt;
&lt;p&gt;The fundamental design issue for REST is -- as cleanly as possible -- to make your application's resources available through URI's.  In order to do this, you need to understand your resources.  The process looks something like the following.&lt;/p&gt;
&lt;p&gt;From IBM's &lt;a class="reference external" href="http://www.ibm.com/developerworks/library/x-restfulsoa/"&gt;RESTful SOA&lt;/a&gt;  paper, we see a four-step summary of REST design.  This presumes you have some design already completed.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Decide on the resources and their descriptive URLs.&lt;/li&gt;
&lt;li&gt;Choose a data format for communication on each URL.&lt;/li&gt;
&lt;li&gt;Specify the methods on each resource.&lt;/li&gt;
&lt;li&gt;Specify the returned data and status codes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From Ben Ramsey's presentation on &lt;a class="reference external" href="http://benramsey.com/media/talks/ipcse07-rest.pdf"&gt;RESTful Design&lt;/a&gt; , we have six steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Determine your resources&lt;/li&gt;
&lt;li&gt;Decide what methods each resource will support&lt;/li&gt;
&lt;li&gt;Link the resources together&lt;/li&gt;
&lt;li&gt;Develop your data schemas&lt;/li&gt;
&lt;li&gt;Rationalize your schemas&lt;/li&gt;
&lt;li&gt;Choose the best content type/format to represent your schemas&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these help, but they seem incomplete.&lt;/p&gt;
&lt;div class="section" id="implementation-details"&gt;
&lt;h2&gt;Implementation Details&lt;/h2&gt;
&lt;p&gt;Since Django does a lot (ORM, URL mapping, free admin interface) it's my personal jumping-off point for web applications.  Django's essential design principles are RESTful from the beginning.  See the &lt;a class="reference external" href="http://www.djangoproject.com/documentation/url_dispatch/"&gt;URL dispatcher&lt;/a&gt;  documentation.  This references the &lt;a class="reference external" href="http://www.w3.org/Provider/Style/URI"&gt;Cool URI's Don't Change&lt;/a&gt;  document by Tim Berners-Lee.&lt;/p&gt;
&lt;p&gt;Further, Django encourages us to get the model right to begin with, then we can (easily) define RESTful access to that model.&lt;/p&gt;
&lt;p&gt;Here's the problem.  We have two interfaces: a human interface and a WS API; these are comingled.  Along with multiple interfaces, we've also got several applications that are part of the overall service offering.  With an interface dimension and a application dimension, how do we distinguish among the various URI's?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enumerating-the-choices"&gt;
&lt;h2&gt;Enumerating The Choices&lt;/h2&gt;
&lt;p&gt;We've got the application dimension (also known as subject areas).  For example, there might be separate applications for Customer, Services Catalog, Order Pricing, etc.&lt;/p&gt;
&lt;p&gt;We've also got the &amp;quot;interface&amp;quot; dimension: human via HTML vs. WS API via JSON (or XML).&lt;/p&gt;
&lt;p&gt;With two independent dimensions we've got the kind of matrix design that gives people gas and makes them invent &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Aspect-oriented_programming"&gt;aspect-oriented programming&lt;/a&gt; .  Matrix designs aren't a reason to invent a new paradigm, it just requires a little care with the paradigms we have.&lt;/p&gt;
&lt;p&gt;Our URI's are linear -- even though our design isn't -- and we have to group our URI's into tree-like paths.  We can put application first, or interface first.&lt;/p&gt;
&lt;p&gt;/customer/xml/ID vs /xml/customer/ID&lt;/p&gt;
&lt;p&gt;As an alternative, we can also use the HTTP headers to determine the intent behind a request.  It turns out that the HTTP Accept header provides us a handy hint.  We could make our WS API calls fill in a MIME type like &amp;quot;application/json&amp;quot;.  Our human interface would have whatever the browser typically fills in for the Accept header (usually a long string of alternatives starting with &amp;quot;text/xhtml&amp;quot;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-big-push"&gt;
&lt;h2&gt;A Big Push&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://code.google.com/p/django-rest-interface/"&gt;Django-REST Interface&lt;/a&gt;  package makes the URI-based identification pleasantly simple.  This package makes a lot of design decisions for me.  The process looks like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define the data schema.  Build it.  Unit test test it.  Use the admin interface to work with it.&lt;/li&gt;
&lt;li&gt;Define the access URI's and representations.  These go together.  Human access is usually represented in HTML.  WS API access can be any combination of JSON, XML, YAML or some other serialized object representation.&lt;/li&gt;
&lt;li&gt;Define the WS methods (GET, POST, PUT, DELETE).  The status codes could be defined more elaborately, but Django-REST provides a good implementation.&lt;/li&gt;
&lt;li&gt;Unit test all of this. Use the Django TestCase -- it provides a nice WS client.  See the Django-REST test cases for examples of how to curry in methods for put and delete methods.&lt;/li&gt;
&lt;li&gt;Rework the URI's and data model.  You'll never get it right the first time.  It's often hard to correctly model the business entities.  A lot of what passes for SQL design doesn't properly reflect real-world entities very well.  If you start from classes and implement them in SQL, you'll do a lot better than starting from SQL and trying to map SQL to objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="rpc-edge-case"&gt;
&lt;h2&gt;RPC Edge Case&lt;/h2&gt;
&lt;p&gt;The most notorious edge case is the Remote Procedure Call (RPC); places where there doesn't seem to be a proper resource.  Sometimes, these are thought of in strictly RPC terms -- a POST request with a payload of argument values.  A result is calculated and returned as an appropriate document.&lt;/p&gt;
&lt;p&gt;I submit that in all cases, the RPC is in reality the creation of that result document.  The result document should -- trivially -- be made into a first-class persistent Django model.  The POST request to &amp;quot;create&amp;quot; the model may provide only a few attributes, the rest are then developed as part of handling the POST.  For all that it matters, they can be implemented in the save() method of the model!&lt;/p&gt;
&lt;p&gt;This, however, breaks us out of the Django-REST interface.  Our GET requests can still be handled by the Simple or Basic examples.  The POST request, however may break the mold, since the basic POST request isn't a good match for the resulting document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-wait"&gt;
&lt;h2&gt;But Wait&lt;/h2&gt;
&lt;p&gt;What we have is a POST request that isn't really a good match with the schema object.  Indeed, the point of an RFC-style request is that we have complex transformations (calculations, lookups, etc.) occurring somewhere in the POST processing.&lt;/p&gt;
&lt;p&gt;I looked closely at the &lt;a class="reference external" href="http://django-rest-interface.googlecode.com/svn/trunk/django_restapi_tests/examples/generic_resource.py"&gt;Generic Resource&lt;/a&gt;  example.  Very closely.  But it wasn't really helping too much, since the inputs were not very close to the final document.&lt;/p&gt;
&lt;p&gt;So, after spending hours of reading the Django-REST code, I finally realized what was going on.  Once we're out of the Django-REST sweet spot, we're just doing ordinary Django.  It's just a Django view.&lt;/p&gt;
&lt;p&gt;A special-purpose POST request can be an ordinary Django view.  This can do the elaborate RPC-like calculations.  It can persist the resulting document.  Then it can -- without much difficulty -- use a Django-REST responder to provide the expected HTTP response.&lt;/p&gt;
&lt;p&gt;Indeed, the underlying algorithm is shared between a number of closely-related views.  The JSON or XML view works one way.  The HTML view has a slightly different behavior (since it can display error messages to a person), but has the same underlying algorithm.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>In Praise of Serialization via __repr__ (Revised)</title><link href="https://slott56.github.io/2008_06_03-in_praise_of_serialization_via___repr___revised.html" rel="alternate"></link><published>2008-06-03T09:50:00-04:00</published><updated>2008-06-03T09:50:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-06-03:/2008_06_03-in_praise_of_serialization_via___repr___revised.html</id><summary type="html">&lt;p&gt;The problem is this: parsing HTML from a variety of sources to create pleasant, easy-to-manipulate spreadsheets.  HTML can represent the same data in a variety of ways, even within a single web site.  What we have are several layers of parsing; layers which must be linked with increasingly simplified intermediate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The problem is this: parsing HTML from a variety of sources to create pleasant, easy-to-manipulate spreadsheets.  HTML can represent the same data in a variety of ways, even within a single web site.  What we have are several layers of parsing; layers which must be linked with increasingly simplified intermediate representations.&lt;/p&gt;
&lt;p&gt;The initial HTML lexical scanning and parsing gives us the Document Object Model (DOM) objects.  Mostly, these are elements and attributes that uncover the fine-grained structure of the original document.  Sadly, this level of detail is not something we can make direct use of.&lt;/p&gt;
&lt;p&gt;Here's where Python is toweringly cool.&lt;/p&gt;
&lt;p&gt;The issue is this: parsing one page all the way to the final spreadsheet will not provide a general solution.  Indeed, it can barely be made to work.  The obvious algorithm for creating the spreadsheet from the HTML doesn't even work for some rows in the table on the first page we examined.  Moving to another page on the same site reveals more and more HTML &amp;quot;errors&amp;quot; and oddities.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;HTML Note&lt;/strong&gt;.  Some HTML syntax errors aren't really errors, they're an artifact of the SGML legacy; that doesn't make them any easier to parse.  Worse, the presence of errors is compounded by &lt;strong&gt;Rule One of the Browser&lt;/strong&gt;: All HTML Gets Rendered No Matter How Malformed.  Because of Rule One, HTML can be crap and the QA folks just nod and say &amp;quot;it displays OK&amp;quot;.]&lt;/p&gt;
&lt;p&gt;Once we've figured out the content of the page, we can extract it, parse it and use it all we want.  In some cases, the data is historical, and one-time parsing as all we need.  In other cases, however, getting a page of HTML is -- currently -- the way some particular web service is implemented.  Some organizations offer some data in HTML only.&lt;/p&gt;
&lt;p&gt;What do to?&lt;/p&gt;
&lt;p&gt;One solution is to try and use &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt;  to get past the HTML errors.  While this is helpful, it doesn't get past the irregularities in the way HTML was used by the author.&lt;/p&gt;
&lt;div class="section" id="the-pipeline"&gt;
&lt;h2&gt;The Pipeline&lt;/h2&gt;
&lt;p&gt;The trick is to do what compilers do: create a pipeline of intermediate representations.  Stage one is a transformation from HTML to DOM objects (Document, Element and Attribute).  This is (relatively) easy, and any of the available parsers can do this nicely.&lt;/p&gt;
&lt;p&gt;I'm picky, however, and I like to have first-class support for the &lt;a class="reference external" href="http://exciton.cs.rice.edu/javaresources/DesignPatterns/VisitorPattern.htm"&gt;Visitor&lt;/a&gt;  design pattern.  The built-in Python &lt;a class="reference external" href="http://www.python.org/doc/current/lib/module-xml.dom.html"&gt;xml.com&lt;/a&gt;  library doesn't have this.  So, I built my own version of &lt;a class="reference external" href="http://www.python.org/doc/current/lib/module-xml.dom.minidom.html"&gt;xml.dom.minidom&lt;/a&gt;  with proper Visitor support.&lt;/p&gt;
&lt;p&gt;And one additional feature: a nice __repr__ that will serialize the entire Document as a proper Python expression.   You wind up with a file that looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Element( 'body', {'alink': '#000080', 'text': '#000000', 'bgcolor': '#FFFFFF', 'link': '#0080C0', 'background': 'sitebck7.gif', 'vlink': '#808080'}, *[Text( '\r\n\r\n' )
, Element( 'ul', {}, *[Text( '\r\n' )
, Element( 'ul', {}, *[Text( '\r\n' )
, Element( 'ul', {}, *[Text( '\r\n' )
, Element( 'ul', {}, *[Text( '\r\n' )
, Element( 'center', {}, *[Element( 'p', {}, *[Element( 'img', {'src': 'top2sml.gif', 'alt': '...some text...', 'width': '406', 'height': '77'}, *[] )
] )
] )
, Text( '\r\n\r\n' )
, Element( 'center', {}, *[Element( 'p', {}, *[Element( 'b', {}, *[Element( 'font', {'color': '#000052', 'size': '3', 'face': 'Arial'}, *[Text( 'SOME TITLE' )
, Element( 'br', {}, *[] )
etc.
&lt;/pre&gt;
&lt;p&gt;While bulky, this is a lot easier to work with than the output from &lt;a class="reference external" href="http://docs.python.org/lib/module-pickle.html"&gt;pickle&lt;/a&gt; .  And it's first-class Python, allowing us to explore with it.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Scalability Note&lt;/strong&gt;.  There are limitations to this.  Truly huge expressions will break the Python parser.  Your mileage may vary.  You may need to break giant documents into logical pieces and assemble the pieces. You may have something like p1= ...; p2= ...; p &lt;em&gt;n&lt;/em&gt; = ...; doc = [ p1, p2, ..., p &lt;em&gt;n&lt;/em&gt;  ] to manage bigness.]&lt;/p&gt;
&lt;p&gt;Once we've explored, we can write our stage two parser which actually works reliably and handles all of the special cases properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-two"&gt;
&lt;h2&gt;Stage Two&lt;/h2&gt;
&lt;p&gt;The second stage of the pipeline can work from Python source.  Rather than write more parsing and loading functions, stage two starts with the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dom1= eval( file(&amp;quot;stage1.out&amp;quot;,&amp;quot;r&amp;quot;).read() )
&lt;/pre&gt;
&lt;p&gt;Yes, we've deserialized the output from stage 1 with a simple call to eval().&lt;/p&gt;
&lt;p&gt;Turns out, this is very, very handy for &amp;quot;exploring&amp;quot; the data structure.  We can also import the structure into interactive Python and play around with it at the command prompt.&lt;/p&gt;
&lt;p&gt;This stage can focus on filtering and building up the next representation, one that is less like a document and more like objects in the problem domain.  We have to be a little cautious how we create those problem domain objects, however.&lt;/p&gt;
&lt;p&gt;The domain model is the thing we wanted in the first place.  The two-stage parser was how we could get to this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dimensional-model"&gt;
&lt;h2&gt;Dimensional Model&lt;/h2&gt;
&lt;p&gt;While the problem domain objects are (usually) pretty obvious from the organization of the content in the HTML pages, the issue is to avoid naively assembling objects without thinking about the organization of the inputs.&lt;/p&gt;
&lt;p&gt;In many cases, the web content we're parsing is a dimensional (or &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Star_schema"&gt;star schema&lt;/a&gt; ) view of the data.  You'll be building several kinds of objects:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Dimensional Entities&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Dimensional entities are the &amp;quot;descriptions&amp;quot; of each dimension.  Dimensions include the obvious time and space (geography), but can also include demographic groupings, economic groups (SIC codes), etc.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Facts&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Facts are measures (with units) that can be categorized  by the dimensions to which they belong.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;When you look at displayed information, you'll often see titles or headings that define specific dimensional entities.  &amp;quot;Northeast Region&amp;quot;, &amp;quot;January 2006&amp;quot;, &amp;quot;Hourly Employees&amp;quot;, &amp;quot;Retail&amp;quot;, and the like are examples of dimensional entities.  These are objects in one of the (many) dimension classes.&lt;/p&gt;
&lt;p&gt;Each measurable fact object will be associated with one or more dimensional objects.&lt;/p&gt;
&lt;p&gt;Stage two builds the dimensional model objects from the DOM objects.  (The DOM objects were built from HTML.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-three"&gt;
&lt;h2&gt;Stage Three&lt;/h2&gt;
&lt;p&gt;The final bit of processing is to unify the HTML pages into a single star-schema model for analysis and reporting.  Generally, the Stage 2 outputs will be a bunch of collections.  Most of the collections will be dimension definitions, the remaining collection is a sequence of facts.&lt;/p&gt;
&lt;p&gt;Each dimension is collected into a mapping from the unique identifier for a dimension entity to the other attributes we know about the entity.  For instance, &amp;quot;January 2006&amp;quot; might be the identifier, but we know several other attributes of this entity:  the year is 2006, the month is January, it's in the first quarter.&lt;/p&gt;
&lt;p&gt;The facts are a simple sequence (list or tuple) of measures with references to the dimension entities.&lt;/p&gt;
&lt;p&gt;It's appealing to simply serialize the fact table with __repr__.  This isn't the best approach, however.  Generally, a large number of facts will have references to a common dimension value.  If we simply serialize the facts with something like the following, we'll have a lot of redundancy.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def __repr__( self ):
        return &amp;quot;Fact( %r, %r, %r, %f, %d)&amp;quot; % (
            self.dim1, self.dim2, self.dim3, self.measure1, self.measure2 )
&lt;/pre&gt;
&lt;p&gt;It's slightly smoother to provide just the unique object ID's for each dimensional entity, and rebuild the required structure at eval time.&lt;/p&gt;
&lt;p&gt;Our facts are represented in the stage three input as follows.  Rather than include the entire dimension object, we include a dictionary lookup to locate a reference to the dimension entity.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
time = { 'January 2006': Time( &amp;quot;January 2006&amp;quot;, 2006, 1, 1 ), ... }
space = { 'Northeast': Geography( &amp;quot;Northeast&amp;quot;, &amp;quot;US&amp;quot;, &amp;quot;EN&amp;quot; ), ... }
demo = { 'Full-Time': Demographic(&amp;quot;Full-Time&amp;quot;), ... }
facts = [
    Fact( time['January 2006'], space['Northeast'], demo['Full-Time'], 3.14, 42 ),
    ...
    ]
&lt;/pre&gt;
&lt;p&gt;These files are quite easy to unify.  We can import each file and merge the dimensions to develop the complete set of entities in each dimension.  Once the dimensions are unified, we can do a simple append of all the facts.  This model can be used to write reports or populate a datamart or whatever our goal was when we started down this road.&lt;/p&gt;
&lt;p&gt;The real power comes from using the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Inverted_index"&gt;Inverted Index&lt;/a&gt;  technique of having each dimension entity reference the set of facts associated with that entity.  This is done by having the __init__ of a Fact register itself with the various dimensions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Fact( object ):
    def __init__( self, time, space, demo, m1, m2 ):
        self.time= time
        self.time.addFact( self )
        etc.
&lt;/pre&gt;
&lt;p&gt;Staging Our Analysis&lt;/p&gt;
&lt;p&gt;Stage 1 transforms HTML to a Python model of the document. This is very, very cool, and supports easy exploration of the Python version of the document to find algorithms for parsing the structure.&lt;/p&gt;
&lt;p&gt;Stage 2 transforms the Python document model into a Python dimensional model, emitting a mapping for each dimension and a sequence for the facts.&lt;/p&gt;
&lt;p&gt;Stage 3 merges the dimensional model values into a single datamart that we can then use for analysis.  The resulting datamart is the same dimensional model from Stage 2.&lt;/p&gt;
&lt;p&gt;The remaining work is (usually) involves locating all facts with a particular dimension value and producing the expected reports.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
q1Total= 0
for q in [ t for t in time.values() where t.quarter == 1 ]:
    for f in t.facts:
        q1Total += f.m1
&lt;/pre&gt;
&lt;p&gt;This dimensional model gives us all of the analytical capabilities we might want.&lt;/p&gt;
&lt;p&gt;The best part is that each step uses Python notation, making it easy to visualize and easy to experiment with the data looking for the unifying patterns.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>My Peers Don't Get PL/SQL, What Can I Do?</title><link href="https://slott56.github.io/2008_05_30-my_peers_dont_get_plsql_what_can_i_do.html" rel="alternate"></link><published>2008-05-30T00:29:00-04:00</published><updated>2008-05-30T00:29:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-05-30:/2008_05_30-my_peers_dont_get_plsql_what_can_i_do.html</id><summary type="html">&lt;p&gt;The email from a developer starts with a complaint and moves on to a plea: &amp;quot;I am constantly having to look at &amp;quot;IF o_status = 0&amp;quot;. Code would be a lot more compact and easy to read if exceptions were used.
Request favor: Please consider blogging about using exception handling vs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The email from a developer starts with a complaint and moves on to a plea: &amp;quot;I am constantly having to look at &amp;quot;IF o_status = 0&amp;quot;. Code would be a lot more compact and easy to read if exceptions were used.
Request favor: Please consider blogging about using exception handling vs &amp;quot;IF o_status = 0&amp;quot;. &amp;quot;&lt;/p&gt;
&lt;p&gt;At this juncture, it's not clear what the developer's goal is.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Fix the if o_status = 0 stuff that they're constantly having to look at.&lt;/li&gt;
&lt;li&gt;Fix the organization to improve their programming.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2a.  Help them use exceptions instead of badly nested if-statements.&lt;/p&gt;
&lt;p&gt;2b.  Help them ditch PL/SQL for something faster and simpler.  Example: Java.&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Vent about the peer group's shoddy programming.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's why the goal is confusing.  The email goes on to include a reference to Chapter 7 of the PL/SQL User's Guide and Reference, &lt;a class="reference external" href="http://download-east.oracle.com/docs/cd/B10501_01/appdev.920/a96624/07_errs.htm#8858"&gt;Handling PL/SQL Errors&lt;/a&gt; .  Since the information is already in the email, what more can I offer?  Nothing.&lt;/p&gt;
&lt;p&gt;Finally, the email ended with the following: &amp;quot;However, it would be nice to have a discussion of &amp;quot;IF status = 0&amp;quot; vs exception handling discussed from an architectural perspective. After all Java has exception handling.&amp;quot;  What?  From an architectural perspective, PL/SQL is a fundamental mistake.  It spreads application software around between application servers and the database server.  Yuck.&lt;/p&gt;
&lt;p&gt;Let's pretend we're aiming at &amp;quot;fixing&amp;quot; the organization minimally -- just get them to use exceptions.  The &amp;quot;architectural perspective&amp;quot; is ridiculous, since PL/SQL creates more problems than it solves.&lt;/p&gt;
&lt;div class="section" id="the-argument"&gt;
&lt;h2&gt;The Argument&lt;/h2&gt;
&lt;p&gt;Unless you make it a condition of employment, programmers have a number of reasons for NOT changing from many if-statements to exceptions.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's &amp;quot;costly&amp;quot; to change.  The &amp;quot;disruption&amp;quot; adversely impacts quality or productivity or something.  [I put the terms in quotes because -- if you ask -- there's no detail supporting the disruption claim.  Mostly, it's all code for &amp;quot;I don't want to learn something new right now.&amp;quot;]&lt;/li&gt;
&lt;li&gt;Exceptions are confusing.  They force you to scroll down to read the exception block, which is bad.  Endless if-statements mean that the error handling is adjacent to the relevant statement.  And using nested blocks to wrap each statement with exception handling adjacent is &amp;quot;too much syntax.&amp;quot;&lt;/li&gt;
&lt;li&gt;Exceptions are slow/memory intensive/bad in some other way.  [This is, of course, anecdotal; there's never any actual benchmark.]&lt;/li&gt;
&lt;li&gt;Exceptions don't capture some nuance of the algorithm.  [Clearly, the if-statements aren't working either -- or we wouldn't have this email in the first place!]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What can our developer do in the face of these kinds of stonewalling arguments?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="techniques-that-don-t-work"&gt;
&lt;h2&gt;Techniques That Don't Work&lt;/h2&gt;
&lt;p&gt;Technique one: provide the PL/SQL reference manual pages.  They did that.  Apparently, that just fueled the argument.&lt;/p&gt;
&lt;p&gt;Technique two: Appeal to Authority.  For example, referencing a blog posting.  This will lead people to do nothing.  Odds are good that no one will read a blog in the first place.  A blog posting is exactly as valuable as the Oracle PL/SQL User's Guide pages -- pages already provided.&lt;/p&gt;
&lt;p&gt;How does a blog posting change things?  Generally, it makes the argument shift slightly to include the blog author.&lt;/p&gt;
&lt;p&gt;Given a blog posting, the programmers will add point #5 to their argument against exceptions:&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;That blogger didn't get the nuances of our culture/experience/application domain/technology stack.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Technique Three: how about a few False Dichotomies?  Make up some all or nothing situation where if-statements after the SQL statement are bad.  How about &amp;quot;You're not using all features of the language.  Therefore, you shouldn't use the language?&amp;quot;  Use all of the PL/SQL features or drop the language and switch to Java.&lt;/p&gt;
&lt;p&gt;Good advice.  Wrong &amp;quot;reason&amp;quot;.  (If you can call a false dichotomy a reason.)&lt;/p&gt;
&lt;p&gt;Providing information (manual pages, blog postings, etc.) doesn't work.  Okay they're informed.  They still have 5 solid reasons for not changing (it's costly, it's confusing, it performs poorly, it misses some nuance, it doesn't fit our culture/tech stack).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="actually-do-the-work"&gt;
&lt;h2&gt;Actually Do The Work&lt;/h2&gt;
&lt;p&gt;One way to act as an agent of change is to &lt;strong&gt;Actually Change Something&lt;/strong&gt;.  Not talk about change possibilities or inform people of better courses of action, but actually do something.  If you're constantly having to look at some crap code, you must be doing maintenance or enhancement.&lt;/p&gt;
&lt;p&gt;If you're reading the code with intent to change, think about the long-term cost of having the next maintainer (or enhancer) read that code.  Save everyone a lot of money by doing two things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Reverse Engineer some Unit Tests for this offensive piece of code.&lt;/li&gt;
&lt;li&gt;Refactor the Module.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;quot;Oh,&amp;quot; people say, &amp;quot;that's too costly.&amp;quot; [Really?  Is it also confusing, performs poorly, misses some nuance and doesn't fit your culture?  If so, you're just as much part of the problem as your peers who won't change.]&lt;/p&gt;
&lt;p&gt;&amp;quot;Can't,&amp;quot; people say, &amp;quot;I'm not authorized to rewrite it.&amp;quot;  Got it.  You want change without actual sweaty labor.  Excellent.  Change without any work is about 4lbs of pixie dust at $1,000 per gram.  That'll change everyone without any work on your part.  And it'll buy me a Bentley.&lt;/p&gt;
&lt;p&gt;&amp;quot;It's not 'politically correct' around here to make waves like that.&amp;quot;  Okay.  I won't make waves.  I won't do anything, either.  Clearly, your job is not to add value by improving the enterprise's software asset.  Since you're not doing something so obviously valuable, you must be doing something more valuable.  Keep doing whatever it is that's more valuable than reducing the cost of the legacy code and quit complaining.&lt;/p&gt;
&lt;p&gt;[BTW, the 'we don't have time to fix legacy problems' is a false economy, but every IT manager I've ever met has said it emphatically.  I've been asked to scope and plan the replacement of 20- and 30-year old COBOL applications that are breaking the back of the organization.  The plans were, of course, shelved because reducing costs &amp;quot;doesn't create enough value for our end-users.&amp;quot;  Got it, the customer insists that limping along with 60% of the organization supporting old crap &lt;em&gt;does&lt;/em&gt;  create value.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="suggestion"&gt;
&lt;h2&gt;Suggestion&lt;/h2&gt;
&lt;p&gt;Actually Do Something.  Just fix the code.  &amp;quot;How will I know it works?&amp;quot; you ask.  That's why step one was to create unit tests.  Step two is to refactor the code.&lt;/p&gt;
&lt;p&gt;Read Larry O'Brien's &lt;a class="reference external" href="http://www.sdtimes.com/content/article.aspx?ArticleID=32059"&gt;30K + 100K = success or failure?&lt;/a&gt;  column.  Unit testing works.  And people complain about it.  [Example Complaint: &amp;quot; time spent writing a test function is time that could be used on application code&amp;quot; -- what?  That's insane because you can't distinguish between application and test: test is essential to making the application &amp;quot;work&amp;quot;.]&lt;/p&gt;
&lt;p&gt;Read &lt;a class="reference external" href="http://www.dzone.com/links/testdriven_development_and_software_quality.html"&gt;Test-Driven Development and Software Quality&lt;/a&gt;  in DZone (amongst other places.)  The point is that unit testing allows you to simplify.  Applications with unit tests are measurably simpler.  In this case, the exception handling folderol is a punishing kind of cycolmatic complexity that is reduced (but not eliminated) through exception handling.&lt;/p&gt;
&lt;p&gt;So:  Develop unit tests.  Refactor.&lt;/p&gt;
&lt;p&gt;Then, brag about the success to your peers.  Carping, complaining and nagging don't work.  Leading by example might work.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Some "Duck Typing Can't Scale" crap-ola</title><link href="https://slott56.github.io/2008_05_24-some_duck_typing_cant_scale_crap_ola.html" rel="alternate"></link><published>2008-05-24T11:05:00-04:00</published><updated>2008-05-24T11:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-05-24:/2008_05_24-some_duck_typing_cant_scale_crap_ola.html</id><summary type="html">&lt;p&gt;This put me over the edge.   Go deh! has a deep analysis of in &amp;quot;&lt;a class="reference external" href="http://paddy3118.blogspot.com/2008/05/duck-typing-done-right-is-wrong.html"&gt;Duck Typing Done Right is Wrong&lt;/a&gt; &amp;quot;.  It took a minute to parse, but the article is excellent.   (A less obscure title would quote the original posting properly: '&amp;quot;Duck Typing Done Right&amp;quot; is Wrong', but that's less …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This put me over the edge.   Go deh! has a deep analysis of in &amp;quot;&lt;a class="reference external" href="http://paddy3118.blogspot.com/2008/05/duck-typing-done-right-is-wrong.html"&gt;Duck Typing Done Right is Wrong&lt;/a&gt; &amp;quot;.  It took a minute to parse, but the article is excellent.   (A less obscure title would quote the original posting properly: '&amp;quot;Duck Typing Done Right&amp;quot; is Wrong', but that's less catchy).  The original &amp;quot;&lt;a class="reference external" href="http://blogs.sun.com/bblfish/entry/duck_typing_done_right"&gt;Duck Typing Done Right&lt;/a&gt; &amp;quot; plays the paranoia card: you can't trust &amp;quot;them&amp;quot; to understand your semantics without resorting to some kind of &amp;quot;context-free&amp;quot; reference, implicitly backed with a complete ontology.&lt;/p&gt;
&lt;p&gt;It's a great new variation on the &amp;quot;defensive programming&amp;quot; position:  you can't trust anyone to follow your API.&lt;/p&gt;
&lt;p&gt;This -- it turns out -- has nothing to do with API's, duck typing or dynamic languages.  This is a much, much simpler problem.&lt;/p&gt;
&lt;div class="section" id="defensive-programming"&gt;
&lt;h2&gt;Defensive Programming&lt;/h2&gt;
&lt;p&gt;A few years back, I was trying to read some Java code that included two things that are generally a waste of time and money.  First was endless declarations of things that were private.  Second was batches of if-statements that effectively confirmed that internally referenced methods passed the right arguments back and forth.&lt;/p&gt;
&lt;p&gt;I don't have much use for Java private in in-house IT projects.  If you're not selling the .class files, private isn't helping.  I asked what it was about; who are we keeping it private from?  The programmer told me, with a straight face, that he was worried about &amp;quot;someone&amp;quot; using the classes improperly -- calling the methods wrong, bypassing the public interfaces, etc.&lt;/p&gt;
&lt;p&gt;&amp;quot;Who?&amp;quot; I asked.&lt;/p&gt;
&lt;p&gt;&amp;quot;You know&amp;quot;, he replied, &amp;quot;another programmer who didn't really 'get' the class API's.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-specifically"&gt;
&lt;h2&gt;Who, Specifically?&lt;/h2&gt;
&lt;p&gt;I was alarmed at this weird paranoia.  First, it's in-house IT -- if you can't trust the folks in the next rack of cubes, who can you trust?  Second, it's a one-person project -- no one else was going to see the code in the foreseeable future.  Indeed, most in-house IT is maintained by the author and when the author leaves the code is replaced.&lt;/p&gt;
&lt;p&gt;I had to sit through the author's long story about an interface (written in PL/SQL, not Java) where an incoming file had the wrong format.  What?  What does that have to do with anything?&lt;/p&gt;
&lt;p&gt;To the programmer in question, it proved that &amp;quot;defensive programming&amp;quot; was essential to success.  To make this point, however, the programmer had to conflate &amp;quot;bad interface implementation&amp;quot; with &amp;quot;I can't trust myself to remember my own API&amp;quot;.  Which sounds schizophrenic to me; private wasn't likely to help.&lt;/p&gt;
&lt;p&gt;I asked, &amp;quot;Who Specifically?&amp;quot;; &amp;quot;Who, specifically, will abuse the API?&amp;quot;  The answer was the vague, hand-wringing &amp;quot;other programmers&amp;quot;.&lt;/p&gt;
&lt;p&gt;Similarly, in &lt;a class="reference external" href="http://blogs.sun.com/bblfish/entry/duck_typing_done_right"&gt;Duck Typing done right&lt;/a&gt; , there's the paranoid expression &amp;quot;Extend the context somewhat&amp;quot;.  As if someone, somewhere can't be trusted.  Who specifically, can't be trusted?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="asking-for-names"&gt;
&lt;h2&gt;Asking for Names&lt;/h2&gt;
&lt;p&gt;I ask for names in these cases.  If we can find the programmer who's likely to subvert the API, or mis-implement the interface, we can ask them to do quality assurance on the API or interface specification.  It isn't hard to get them to buy in on the design.  And if they don't buy in, it's easy to get specific objections.&lt;/p&gt;
&lt;p&gt;To subvert my approach toward clarity, people will raise up the &amp;quot;What about 'future' programmers?&amp;quot; question.  I'm baffled.  I ask, &amp;quot;Who, the ones who haven't been hired yet?&amp;quot;  What about the post-apocalyptic half-mutant flesh-eating apes?  Are they included in the 'future' programmers?&lt;/p&gt;
&lt;p&gt;The point is this: I can't see the value in hand-wring about &amp;quot;others&amp;quot; or some &amp;quot;extended context&amp;quot;.  I think it's essential identify these &amp;quot;others&amp;quot; or this &amp;quot;foreign code&amp;quot; which will break our design.&lt;/p&gt;
&lt;p&gt;If we don't have a specific list of &amp;quot;others&amp;quot; or specific &amp;quot;foreign code&amp;quot;, then... uh... we don't actually have a problem.  We have a potential problem.  A potential problem with a microscopic risk of occurring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="real-problems"&gt;
&lt;h2&gt;Real Problems&lt;/h2&gt;
&lt;p&gt;While real problems can arise from programming changes, we have better techniques than an external ontology or lots of bogus defensive programming parameter-checking.  We have ordinary API documentation and ordinary unittest cases.  This is simple quality assurance.&lt;/p&gt;
&lt;p&gt;As &amp;quot;&lt;a class="reference external" href="http://paddy3118.blogspot.com/2008/05/duck-typing-done-right-is-wrong.html"&gt;Duck Typing Done Right is Wrong!&lt;/a&gt; &amp;quot; states, the ontology doesn't help.  A context-free name isn't understanding, it's just a name.  If you don't understand the meaning or intent behind a class structure,  names aren't really the root cause of the confusion; usually there are three root causes.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Shoddy API documentation&lt;/strong&gt;.  My policy is this: try to explain it to a manager, or Quentin the rabbit who lives in the back yard.  (They have the same attention span.)  If you can't get a pithy, tidy, no-diagrams explanation, you've got work to do.  Refactor and rewrite the doco until you can explain it without pictures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;An unwillingness to understand what's really going on in the API&lt;/strong&gt;.   Some programmers don't read well, and start off assuming things about the API; their reading reduces to looking for confirmation of their assumptions.  When they don't find the hoped-for confirmation they may proceed anyway (with lots of EPIC FAIL) -- often deadline-obsessed managers will force this situation.  Other times programmers will replace an effort at understanding with a superficial but scholarly-looking analysis of the documentation.&lt;/p&gt;
&lt;p&gt;When programmers are unwilling to learn, this often surfaces at complaints about &amp;quot;inconsistencies&amp;quot; in the documents.  Sometimes these are simply shoddy documentation.  More often, however, the inconsistency is a conflict between the programmer's assumption and what the documentation actually says.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;No independent confirmation&lt;/strong&gt;.  No unit test, no audit, nothing.  I can have an ontology that makes claims about my classes.  By without evidence (i.e., unit test cases) that context-free name is just as much a lie as my context-dependent name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="where-duck-typing-could-fail"&gt;
&lt;h2&gt;Where Duck Typing Could Fail&lt;/h2&gt;
&lt;p&gt;Here's the quote &amp;quot;The main criticism of Duck Typing has been that what is gained in flexibility is lost in precision: it may be good for small projects, but it does not scale&amp;quot;.  Here, the code-word scale stands for &amp;quot;apply well when we introduce 'others'&amp;quot;.  Why doesn't it apply when we introduce &amp;quot;others&amp;quot;?  Because, the &amp;quot;others&amp;quot; don't get the context:  &amp;quot;The context in which the duck typing works is a hidden assumption&amp;quot;.&lt;/p&gt;
&lt;p&gt;Generally, the context for duck typing is not hidden.  I suppose it could be, but you'd have to produce malicious documentation that concealed the purpose of a class with the intent to confuse programmers who want to reuse it.  In the presence of this level of shoddiness, who's going to make an effort to reuse the class in the first place?&lt;/p&gt;
&lt;p&gt;Or, there'd have to be no documentation at all.  Which, I find, is standard practice for in-house IT projects.&lt;/p&gt;
&lt;p&gt;Oh wait, that's why interfaces break, too.  That's why the paranoid schizophrenics feel the need to write useless code to test all inputs of all methods.  There's no documentation; no explicit, written agreement on formats; no unit tests to confirm compliance with the agreement.&lt;/p&gt;
&lt;p&gt;So here are the ingredients for the situation in which duck typing doesn't work.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No documentation of the interface.  Or bad (incorrect, incomplete, misleading) documentation.&lt;/li&gt;
&lt;li&gt;No unit test to define conformance with the documentation.&lt;/li&gt;
&lt;li&gt;No effort to understand the interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wait.  This has nothing whatsoever to do with duck typing.  This is all just ordinary software quality assurance.   These are the ingredients for failure in every kind of software development technique.&lt;/p&gt;
&lt;p&gt;The rules are simple.  Document (an ontology may help, but it doesn't solve the problem); provide proof with unittests (merely compiling means nothing); seek to understand, not confirm (your assumptions are always wrong).&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Parallelism Fetishes. #1: Equal-Sized Partitions</title><link href="https://slott56.github.io/2008_05_12-parallelism_fetishes_1_equal_sized_partitions.html" rel="alternate"></link><published>2008-05-12T12:10:00-04:00</published><updated>2008-05-12T12:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-05-12:/2008_05_12-parallelism_fetishes_1_equal_sized_partitions.html</id><summary type="html">&lt;p&gt;Let's talk about parallel processing, something I prefer to call concurrent processing.  It shows up in many places.  Most OS's have concurrent processes.  Applications like Apache have concurrent threads within a process for handling web requests.  Oracle not only handles concurrent queries from multiple users, but you can define a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's talk about parallel processing, something I prefer to call concurrent processing.  It shows up in many places.  Most OS's have concurrent processes.  Applications like Apache have concurrent threads within a process for handling web requests.  Oracle not only handles concurrent queries from multiple users, but you can define a table to use parallel physical structures, further promoting concurrency.&lt;/p&gt;
&lt;p&gt;I got an email asking about Oracle's Partitioned Table structure.  The email used unbound terms like &amp;quot;Good&amp;quot;, &amp;quot;Better&amp;quot; and &amp;quot;Advantageous&amp;quot;.  This kind of question is unanswerable, making it difficult to be helpful.  Indeed, these questions have a mysticism about them that I can't cope with.&lt;/p&gt;
&lt;p&gt;First (and foremost) architecture solves problems.  Without a specific, tangible problem, there is no architecture and there is no architectural recommendation.  That's absolute and final.  You can't ask about parallelism in a vacuum with no specific application.  In general, technology -- by itself -- is boring.  If you aren't applying it to a problem, it's just ideas.  The idea of 13 being a non-prime number, for example, is just an idea.  A partitioned table, similarly, is just an idea.  So what?  The question is &amp;quot;What are you trying to accomplish?&amp;quot;&lt;/p&gt;
&lt;p&gt;Second, &amp;quot;Better&amp;quot; doesn't have a generic binding.  &amp;quot;Better&amp;quot; is only meaningful in the specific context of a quality dimension to optimize.  Most of the time, &amp;quot;Better&amp;quot; means &amp;quot;Less&amp;quot;: &amp;quot;Less Cost&amp;quot;, &amp;quot;Less Time&amp;quot;, &amp;quot;Less Memory&amp;quot;, &amp;quot;Less I/O&amp;quot;.  Sometimes &amp;quot;Better&amp;quot; means &amp;quot;More&amp;quot;: &amp;quot;More Adaptable&amp;quot;, &amp;quot;More Maintainable&amp;quot;, &amp;quot;More Auditable&amp;quot;, &amp;quot;More Secure&amp;quot;, etc.  Lacking any specific optimization criteria, the idea of a partitioned table is fine.  Or too much work.  Or essential to success.  I can't tell from words like &amp;quot;Better&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="answers"&gt;
&lt;h2&gt;Answers&lt;/h2&gt;
&lt;p&gt;To focus the conversation, I asked, specifically, which &amp;quot;Less&amp;quot; they were interested in.  &amp;quot;Less Time&amp;quot;, &amp;quot;Less Memory&amp;quot;, or &amp;quot;Less I/O&amp;quot;.  I specifically said &amp;quot;Pick One&amp;quot;.  Here's the answer I got: &amp;quot;Thanks for explicitly listing them.&amp;quot;.  Seriously.  No answer of any kind.  Sigh.&lt;/p&gt;
&lt;p&gt;Failing that, I tried to lift up the ideas of &amp;quot;empiricism&amp;quot; and the &amp;quot;scientific method&amp;quot;:  do some research, form a conjecture, make a prediction, run some experiments.  This is covered nicely in Wikipedia's entry on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Scientific_method"&gt;Scientific Method&lt;/a&gt; , and this article on &lt;a class="reference external" href="http://webspace.ship.edu/cgboer/epist.html"&gt;Epistemology&lt;/a&gt; .  Here's the answer I got: &amp;quot;So, I picked an approach. I will take finger to keyboard and see what I get.&amp;quot;.  Seriously.  No theory, no prediction, no comparison, just coding one partitioning approach.  Sigh.&lt;/p&gt;
&lt;p&gt;It appears that this was someone for whom &amp;quot;Science&amp;quot; doesn't apply; someone for whom mysticism is better than empiricism.  It appears that I can't really help much there.  I don't have a strong enough background in mysticism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="concurrency-modeling"&gt;
&lt;h2&gt;Concurrency Modeling&lt;/h2&gt;
&lt;p&gt;Let's try empiricism and see if that works.  Here's the simplest possible model -- no communication among the processes.  We'll have &lt;em&gt;n&lt;/em&gt;  concurrent processes.  Let's keep it simple, and say &lt;em&gt;n&lt;/em&gt; = 4.  Let's call the processes a, b, c and d.&lt;/p&gt;
&lt;p&gt;There are two ways to run these four processes.  Trivially expressed by the following two shell scripts, called Serial and Parallel.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Serial.&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;a; b; c; d&lt;/tt&gt;&lt;/dd&gt;
&lt;dt&gt;Parallel.&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;a &amp;amp; b &amp;amp; c &amp;amp; d&lt;/tt&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Let's examine the possible run-times.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Serial:&lt;/dt&gt;
&lt;dd&gt;a.time + b.time + c.time + d.time&lt;/dd&gt;
&lt;dt&gt;Parallel:&lt;/dt&gt;
&lt;dd&gt;max( a.time, b.time, c.time, d.time )&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Which is less?  By definition, parallel must run in less time than serial.  Conclusion?  Parallel always results in less run time.  Unless of course, 3 of the 4 processes are degenerate cases and run in zero time.  Then serial == parallel.&lt;/p&gt;
&lt;p&gt;And that's pretty much all you need to know.&lt;/p&gt;
&lt;p&gt;Want details?  Write four shell scripts which consist of &amp;quot;sleep &lt;em&gt;n&lt;/em&gt;&amp;quot; for different values of &lt;em&gt;n&lt;/em&gt;.  Run the two versions.  Measure the time.  Write a loop to run each version 128 times and average the results.&lt;/p&gt;
&lt;p&gt;What did we do?  Theory, Prediction, Experiment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="context-switching-fetish"&gt;
&lt;h2&gt;Context Switching Fetish&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;True Student of OS&lt;/strong&gt; will cry foul at the above analysis.  The Student will claim that Parallel programs somehow involve more overhead than Serial programs because the OS must interleave the executions of multiple processes.&lt;/p&gt;
&lt;p&gt;This may have been true -- 20 years ago.  When I was a kid, serial meant the OS was otherwise doing NOTHING.  Parallel meant interleaved concurrent execution -- and concurrency was some kind of special case.  Today, all OS's are doing hundreds of things concurrently even when they're just idling.  The context-switch overheads are essentially fixed.  The only way you can even notice the overheads is to introduce boat-loads of new processes.  Right now, I've got 60 processes running, and I'm just writing.  Running one more process or four more processes is not a measurable change in the number of context switches being managed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="equal-sized-workloads"&gt;
&lt;h2&gt;Equal-Sized Workloads&lt;/h2&gt;
&lt;p&gt;Let's look Oracle's table partitioning.  This is the same as having different workloads for our &lt;em&gt;n&lt;/em&gt; = 4 concurrent processes.  To make it easy on the brain, get a deck of playing cards (or Tarot cards, since we're looking at mysticism of parallelism).&lt;/p&gt;
&lt;p&gt;Cut the deck into four piles.  Make no effort at equality.  Just cut and allocate into four piles: a, b, c and d.&lt;/p&gt;
&lt;p&gt;Now, to simulate Oracle's physical I/O operations, deal batches of 3 cards into the middle of the table.  Pick 3 cards off a, 3 cards off b, 3 cards of c, 3 cards off d.  That's one quantum of time.  Repeat, counting one quanta of time for each 3-card deal.&lt;/p&gt;
&lt;p&gt;When you're nearly done, some pile will run out of cards.  This parallel partition finished early.  When you're completely done, all piles will be out of cards.  How many quanta of time did it take?  There's a theoretical maximum and minimum.  Work this out before reading further.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Hint: For Tarot cards the minimum is 20 quanta.  The maximum is 78 quanta.&lt;/p&gt;
&lt;p&gt;Want more details?  Do this a few dozen times, creating a spreadsheet with your results.  From your randomization experiments, get the average, standard deviation, best and worst cases.  These will be clustered around the middle of the theoretical extremes.&lt;/p&gt;
&lt;p&gt;So, the best case is about 1/4 of the worst case.  &lt;em&gt;n&lt;/em&gt; = 4.  Hmmm.   Pattern?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unequal-workloads"&gt;
&lt;h2&gt;Unequal Workloads&lt;/h2&gt;
&lt;p&gt;Here's were the fetish kicks into high gear.  If equal workloads leads to minimal time, what's the impact of unequal workloads?  How much fetishizing can we do to keep the workloads equal?&lt;/p&gt;
&lt;p&gt;Here's a great version of that question: &amp;quot;Oracle partitions are balanced when they have approximately the same number of rows. For the sake of argument lets quantify &amp;quot;approximately&amp;quot; as plus/minus 3 percent.&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Three&lt;/em&gt;  percent.  Question: Where did this number come from?  Answer: fetishizing.&lt;/p&gt;
&lt;p&gt;Let's think.  Time depends on physical I/O's.  So, we really care about blocks, not rows.  How may rows per block determines how close &amp;quot;approximately&amp;quot; means.  If the rows are small (e.g., 0.5K bytes) and the blocks big (e.g., 32K bytes), then ±64 rows is still precisely the same-sized partition.  As a percentage, 64 rows could be 100% or nearly 0%.&lt;/p&gt;
&lt;p&gt;Blocks are harder to count than rows.  Indeed, Oracle's use of blocks is quite confusing, so their documentation suggests using number of rows; for large tables it's as misleading as anything else.  For small tables, why are we bothering?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-unequal-before-we-notice"&gt;
&lt;h2&gt;How Unequal Before We Notice?&lt;/h2&gt;
&lt;p&gt;Well, we're back to the business problem, at this point.  We need to know &amp;quot;how fast is fast enough?&amp;quot;  If one partition is too slow, then four partitions, even if radically different in size will be faster.  It will be as fast as the largest partition.&lt;/p&gt;
&lt;p&gt;Do they have to be equal-sized?  &lt;strong&gt;No&lt;/strong&gt;.  The only requirement is that the largest partition's processing time fit within our time box.&lt;/p&gt;
&lt;p&gt;Do we need &amp;quot;optimal&amp;quot; run time?  &lt;strong&gt;No&lt;/strong&gt;.  We need to meet the requirements.  If we can partition equally, that's nice, but hardly worth any brain calories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-s-no-best"&gt;
&lt;h2&gt;There's no &amp;quot;Best&amp;quot;&lt;/h2&gt;
&lt;p&gt;&amp;quot;Yes, but,&amp;quot; some folks say; they want a &amp;quot;best&amp;quot; answer.&lt;/p&gt;
&lt;p&gt;Equal-sized partitions will minimize run time.  At the cost of figuring out which combination of keys splits rows equally.  You will add complexity elsewhere to determine how to precisely equalize the partitions.  Ask yourself if the cost-benefits are there.&lt;/p&gt;
&lt;p&gt;BTW, you can explore your data without doing too much work.  SELECT COUNT(*), x FROM t GROUP BY x; is all you need to do to locate combinations of keys and their relative partition sizes.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;never&lt;/em&gt;  need &amp;quot;minimal&amp;quot;, you only need &amp;quot;good enough to make people happy.&amp;quot;  You can fetishize over endless partitioning keys.  Have fun.&lt;/p&gt;
&lt;p&gt;If you don't have a required query run time, you're just wasting time and money playing Oracle.  You can &amp;quot;put finger to keyboard&amp;quot; if it makes you happy.  Hopefully, you're just doing a few COUNT(*) GROUP BY's to get some answers.  If your employer enjoys it enough, you can squander a lot of time on hand-wringing followed by pointless POC's that show one approach with no theoretical framework to act as a basis for comparison.&lt;/p&gt;
&lt;p&gt;If you have a required query run time, and you are looking for a partition that meets it, you're solving problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hold-the-phone"&gt;
&lt;h2&gt;Hold The Phone&lt;/h2&gt;
&lt;p&gt;The wise reader will say &amp;quot;This isn't that hard; I can just assign a surrogate partition number to each row, and guarantee equality.&amp;quot;&lt;/p&gt;
&lt;p&gt;Yep.  It's that simple.  A basic &lt;tt class="docutils literal"&gt;count % n&lt;/tt&gt; will assign a number, &lt;em&gt;k&lt;/em&gt;, &lt;span class="formula"&gt;0 ≤ &lt;i&gt;k&lt;/i&gt; &amp;lt; &lt;i&gt;n&lt;/i&gt;&lt;/span&gt; , that can be the partition number.  That is the bottom line: searching among natural keys and other attributes is a waste of time and money.  Just compute a partition number at load time and be done with it.  Or you can fetishize about it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Python and the Star Schema</title><link href="https://slott56.github.io/2008_05_09-python_and_the_star_schema.html" rel="alternate"></link><published>2008-05-09T10:37:00-04:00</published><updated>2008-05-09T10:37:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-05-09:/2008_05_09-python_and_the_star_schema.html</id><summary type="html">&lt;p&gt;The star schema represents data as a table of facts (measurable values) that are associated with the various dimensions of the fact.  Common dimensions include time, geography, organization, product and the like.  I'm working with some folks whose facts are a bunch of medical test results, and the dimensions are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The star schema represents data as a table of facts (measurable values) that are associated with the various dimensions of the fact.  Common dimensions include time, geography, organization, product and the like.  I'm working with some folks whose facts are a bunch of medical test results, and the dimensions are patient, date, and a facility in which the tests were performed.&lt;/p&gt;
&lt;p&gt;I got an email with the following situation: &amp;quot;a client who is processing gigs of incoming fact data each day and they use a host of C/C++, Perl, mainframe and other tools for their incoming fact processing and I've seriously considered pushing Python in their organization.&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here are my thoughts on using Python for data warehousing when you've got Gb of data daily.&lt;/p&gt;
&lt;div class="section" id="small-dimensions"&gt;
&lt;h2&gt;Small Dimensions&lt;/h2&gt;
&lt;p&gt;The pure Python approach only works when your dimension will comfortably fit into memory -- not a terribly big problem with &lt;em&gt;most&lt;/em&gt;  dimensions.&lt;/p&gt;
&lt;p&gt;Specifically, it doesn't work well for those dimensions which are so huge that the dimensional model becomes a snowflake instead of a simple star.  When dealing with a large number of individuals (public utilities, banks, medical management, etc.) the &amp;quot;customer&amp;quot; (or &amp;quot;patient&amp;quot;) dimension gets too big to fit into memory.  Special bridge-table techniques must be used.  I don't think Python would be perfect for this, since this involves slogging through a lot of data one record at a time.&lt;/p&gt;
&lt;p&gt;However, Python is considerably faster than PL/SQL.  I don't know how it compares with Perl.  Any programming language will be faster than any SQL procedure, because there's no RDBMS overhead.&lt;/p&gt;
&lt;p&gt;For all small dimensions.  Load the dimension values from the RDBMS into a dict with a single query.  Read all source data records (ideally from a flat file); conform the dimension, tracking changes; write a result record with the dimension FK information to a flat file.&lt;/p&gt;
&lt;p&gt;Iterate through the dimension dictionary and persist the dimension changes.  The details vary with the Slowly Changing Dimension (SCD) rules you're using.&lt;/p&gt;
&lt;p&gt;The conformance algorithm is is essentially the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
row= Dimension(...)
ident= ( row.field, row.field, row.field, ... )
dimension.setdefault( ident, row )
&lt;/pre&gt;
&lt;p&gt;In some cases (like the Django ORM) this is called the get-or-create query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-dimension-bus"&gt;
&lt;h2&gt;The Dimension Bus&lt;/h2&gt;
&lt;p&gt;For BIG dimensions, I think you still have to implement the &amp;quot;dimension bus&amp;quot; outlined in The Data Warehouse Toolkit.  To do this in Python, you should probably design things to look something like the following.&lt;/p&gt;
&lt;p&gt;For any big dimensions, use an external sort-merge utility.  Seriously.  They're way fast for data sets too large to fit into memory.  Use CSV format files and the resulting program is very tidy.   The outline is as follows:&lt;/p&gt;
&lt;p&gt;First, sort the source data file into order by the identifying fields of the big dimension (customer number, patient number, whatever).&lt;/p&gt;
&lt;p&gt;Second, query the big dimension into a data file and sort it into the same order as the source file.  (Using the SQL ORDER BY may be slower than an external sort; only measurements can tell which is faster.)&lt;/p&gt;
&lt;p&gt;Third, do a &amp;quot;match merge&amp;quot; to locate the differences between the dimension and the source.  Don't use a utility like diff, it's too slow.  This is a simple key matching between two files.  The match-merge loop looks something like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src= sourceFile.next()
dim= dimensionFile.next()
try:
   while True:
      src_key = ( src['field'], src['field'], ... )
      dim_key= ( dim['field'], dim['field'], ... )
      if src_key &amp;lt; dim_key:
         # missing some dimension values
         update_dimension( src )
         src= sourceFile.next()
      elif dim_key &amp;lt; src_key:
         # extra dimension values
         dim= dimensionFile.next()
      else: # src and dim keys match
         # check non-key attributes for dimension change.
         src= sourceFile.next()
except StopIteration, e:
    # if source is at end-of-file, that's good, we're done.
    # if dim is at end of file, all remaining src rows are dimension updates.
    for src in sourceFile:
        update_dimension( src )
&lt;/pre&gt;
&lt;p&gt;At the end of this pass, you'll accumulate a file of customer dimension adds and changes, which is then persisted into the actual customer dimension in the database.  This pass will also write new source records with the customer FK.  You can also handle demographic or bridge tables at this time, too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fact-loading"&gt;
&lt;h2&gt;Fact Loading&lt;/h2&gt;
&lt;p&gt;The first step in DW loading is dimensional conformance.  With a little cleverness the above processing can all be done in parallel, hogging a lot of CPU time.  To do this in parallel, each conformance algorithm forms part of a large OS-level pipeline.  The source file must be reformatted to leave empty columns for each dimension's FK reference.  Each conformance process reads in the source file and writes out the same format file with one dimension FK filled in.  If all of these conformance algorithms form a simple OS pipe, they all run in parallel.  It looks something like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src2cvs source | conform1 | conform2 | conform3 | load
&lt;/pre&gt;
&lt;p&gt;At the end, you use the RDBMS's bulk loader (or write your own in Python, it's easy) to pick the actual fact values and the dimension FK's out of the source records that are fully populated with all dimension FK's and load these into the fact table.&lt;/p&gt;
&lt;p&gt;I've written conformance processing in Java (which is faster than Python) and had to give up on SQL-based conformance for large dimensions.  Instead, we did the above flat-file algorithm to merge large dimensions.  The killer isn't the language speed, it's the RDBMS overheads.  Once you're out of the database, things blaze.  Indeed, products like the &lt;a class="reference external" href="http://www.syncsort.com/"&gt;syncsort&lt;/a&gt;  data sort can do portions of the dimension conformance at amazing speeds for large datasets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hand-wringing"&gt;
&lt;h2&gt;Hand Wringing&lt;/h2&gt;
&lt;p&gt;&amp;quot;But,&amp;quot; the hand-wringers say, &amp;quot;aren't you defeating the value of the RDBMS by working outside it?&amp;quot;   The answer is NO.  We're not doing incremental, transactional processing here.  There aren't multiple update transactions in a warehouse.  There are queries and there are bulk loads.  Doing the prep-work for a bulk load outside the database is simply more efficient.  We don't need locks, rollback segments, memory management, threading, concurrency, ACID rules or anything.  We just need to match-merge the large dimension and the incoming facts.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Standard Software Defects - Java Edition</title><link href="https://slott56.github.io/2008_05_08-standard_software_defects_java_edition.html" rel="alternate"></link><published>2008-05-08T12:58:00-04:00</published><updated>2008-05-08T12:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-05-08:/2008_05_08-standard_software_defects_java_edition.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;NUT&lt;/strong&gt;.  No Unit Test Cases.  Need I say more?  If there are not unit tests, this isn't real programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MCF&lt;/strong&gt;  and &lt;strong&gt;NCF&lt;/strong&gt;.  Minimal/No Use of Collections Framework.  The &lt;strong&gt;MCF&lt;/strong&gt;  defect occurs when someone uses only the Array or Vector classes.  The &lt;strong&gt;NCF&lt;/strong&gt;  defect occurs when someone uses only primitive …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;NUT&lt;/strong&gt;.  No Unit Test Cases.  Need I say more?  If there are not unit tests, this isn't real programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MCF&lt;/strong&gt;  and &lt;strong&gt;NCF&lt;/strong&gt;.  Minimal/No Use of Collections Framework.  The &lt;strong&gt;MCF&lt;/strong&gt;  defect occurs when someone uses only the Array or Vector classes.  The &lt;strong&gt;NCF&lt;/strong&gt;  defect occurs when someone uses only primitive arrays, often with fixed sizes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NCF&lt;/strong&gt; defects also occur when someone creates a linked list, but insists on traversing it with the horrifying:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for( int i=0; i != aList.size(); ++i ) {
    SomeClass x= (SomeClass)aList.get(i);
}
&lt;/pre&gt;
&lt;p&gt;I find the above deeply disturbing because of the intentionally incomplete understanding of the linked list structure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deprecated Feature&lt;/strong&gt;.  This is a big, big warning.  Anyone who insists on using deprecated features needs to find a new job in which learning is not valued.  Deprecated features must be removed from application programs.  There's no room for the moronic &amp;quot;it isn't actually broken yet.&amp;quot;&lt;/p&gt;
&lt;p&gt;Also, if you read the Java API Docs, you find nuggets of goodness like the following, in Enumeration.&lt;/p&gt;
&lt;blockquote&gt;
NOTE: The functionality of this interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.&lt;/blockquote&gt;
&lt;p&gt;This seems simple enough to me: Enumeration is not something you should use.  Yes, it is used in a few places in the collection framework.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EIM&lt;/strong&gt;  - &lt;strong&gt;BOD&lt;/strong&gt;.  &lt;strong&gt;EIM&lt;/strong&gt;  is the Everything In Main defect.  Generally, this is accompanied by the &lt;strong&gt;BOD&lt;/strong&gt; (Bad Object Design) defect.  These are closely related, and both stem from a failure to grasp OO design, and a failure to allocate responsibility through the class structure.  Instead of doing some kind of class responsibility assignments, a massive method was written to do all the work.  Often this method is public static void main( string[] args ).&lt;/p&gt;
&lt;p&gt;The Everything In Main defect occurs depressingly often.  There are several good reasons why &lt;strong&gt;EIM&lt;/strong&gt;  programs are defective.  &lt;em&gt;Adaptability and Reusability&lt;/em&gt;: the public main method is the operating system's interface to our application, and is quite hard to repackage and reuse.  &lt;em&gt;Testability&lt;/em&gt;.  It's also very difficult to construct a meaningful unit test for an &lt;strong&gt;EIM&lt;/strong&gt;  program.  &lt;em&gt;Maintainability&lt;/em&gt;.  Making simple, controlled changes can be hard:  an &lt;strong&gt;EIM&lt;/strong&gt;  program is often a house of cards.  Plus, &lt;em&gt;auditability&lt;/em&gt;  and &lt;em&gt;understandability&lt;/em&gt;  suffer.&lt;/p&gt;
&lt;p&gt;There are two arguments the get raised here.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Some folks argue that it's good to have &amp;quot;everything in one place&amp;quot;.  They don't like class design because they have to &amp;quot;look at something else&amp;quot; to understand an algorithm.  The &amp;quot;everything in one place&amp;quot; folks often are big-brained people who feel it important to keep all details in the forefront of their thinking; they tend to distrust summaries.  For the rest of us little-brained people, a pithy, accurate summary is essential to understanding.  We little-brained people are able to summarize a lot of software with terms like &amp;quot;OS&amp;quot; and &amp;quot;RDBMS&amp;quot;.  I don't know why similar summaries can't be used by big-brained people when doing object design.&lt;/li&gt;
&lt;li&gt;Some folks argue that reuse of an EIM program can be handled through shell scripts and what-not.  This adds another element into our application, an element that reflects procedural design where the only way to bind data and processing was in an application main program.  In C, your libraries where essentially just method functions, not reusable class definitions.  Object design doesn't have this limitation, and isn't helped by writing some functionality in shell scripts and other functionality in Java.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remediation&lt;/p&gt;
&lt;p&gt;Remediation of these standard defects is hard.   If you have the &lt;strong&gt;NUT&lt;/strong&gt;  case, you have to write test cases.  Since you're writing them after the fact, they'll be incomplete.  Warning: Hard Work Required.&lt;/p&gt;
&lt;p&gt;If you have &lt;strong&gt;MCF&lt;/strong&gt;  programs you can sometimes rewrite them incrementally to replace dumb old Arrays and Vectors with more efficient Linked Lists, Sets and Maps.  Sometimes.&lt;/p&gt;
&lt;p&gt;If you have &lt;strong&gt;NCF&lt;/strong&gt;  programs, you often have to throw them away and begin again from the beginning to write something that leverages the collection framework.  Further, you have a large education problem to solve.  Warning: Coaching and Training Required.&lt;/p&gt;
&lt;p&gt;When you have &lt;strong&gt;BOD&lt;/strong&gt;  programs, you have an even larger object-design education problem.  Folks who come to OO programming from non-OO environments (VB, particularly) are often baffled by the basic concept of responsibility allocation and emergent behavior from object interaction.&lt;/p&gt;
&lt;p&gt;It turns out that &lt;strong&gt;EIM&lt;/strong&gt;  programs are often a good way to learn better object design.&lt;/p&gt;
&lt;div class="section" id="remediating-eim"&gt;
&lt;h2&gt;Remediating EIM&lt;/h2&gt;
&lt;p&gt;EIM programs involve a big procedure full of details that could have been summarized into other class definitions.  They also involve the obscurity of the OS's interface to a &amp;quot;program&amp;quot; and force us to write some of our application's functionality in the shell script language, diluting the value of Java.&lt;/p&gt;
&lt;p&gt;It's important to draw some lessons from the design of Ant's Task class or Maven's MOJO interface. We'll use the Ant Task definition, it's simpler.&lt;/p&gt;
&lt;p&gt;Every &amp;quot;step&amp;quot; in a program can be defined as some kind of Task. Each Task has some configurable properties: you set those and cut the task lose to do it's job. When a Task finishes, it may have some resulting properties that you can check.&lt;/p&gt;
&lt;p&gt;EIM programs have to be recast using the &lt;strong&gt;Command&lt;/strong&gt;  design pattern.  See (&lt;a class="reference external" href="http://exciton.cs.rice.edu/javaresources/DesignPatterns/command.htm"&gt;Command Design Pattern&lt;/a&gt;  for details.)  You can define a simple abstract superclass for all of the various kinds of Tasks.  You can also define a simple Macro Task that contains a List of subtasks.&lt;/p&gt;
&lt;p&gt;Do not go insane and define &lt;strong&gt;Commands&lt;/strong&gt;  to reflect every shell-script construct (loop, conditions, switches, etc.)  Java already has all the looping and condition testing statements you'll ever need.  Feel free to invent Commands that include sensible, easy-to-summarize ordinary Java programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="atomicity"&gt;
&lt;h2&gt;Atomicity&lt;/h2&gt;
&lt;p&gt;Ideally, you can break main into a series of atomic &amp;quot;steps&amp;quot;.  These are the big picture, summary-level small-brain steps.  If, for some reason, you can't break a 150-line pile of gibberish into some kind of summarized set of steps, find a job in a different industry.  Seriously.  If you can't summarize, you shouldn't be programming.&lt;/p&gt;
&lt;p&gt;Arriving at a summary isn't easy.  The brain's limit on comprehensibility is the &lt;a class="reference external" href="http://www.musanim.com/miller1956/"&gt;Magical Number Seven Plus or Minus Two&lt;/a&gt; .  You have to get the overall plan down to 7±2 high-level steps.  Some of those steps can have sub-steps.  Nesting is a good thing -- just keep everything into sensible, meaningful, easy-to-describe chunks.&lt;/p&gt;
&lt;p&gt;Each step will be largely independent.  There will be some small amount of information passed from step to step; there will also be a certain amount of shared configuration information.  Each candidate step has global properties, input from previous steps, and output to subsequent steps.  Given a 150-line morass, it may be hard to distinguish the global inputs, local inputs and outputs of each &amp;quot;step&amp;quot;.  We'll return to some specific issues below.&lt;/p&gt;
&lt;p&gt;Define a subclass of Task for each step.  Some will be concrete classes -- with detailed implementations.  Some will be Macro Tasks which have constructors to create a List of subtasks.&lt;/p&gt;
&lt;p&gt;Each concrete Task has an execute method which is pulled directly from the original, long main method.  Each Task will also have a number of properties -- the variables required to execute the step and the results of the step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="replacing-main"&gt;
&lt;h2&gt;Replacing Main&lt;/h2&gt;
&lt;p&gt;Once main has been broken into Tasks, a new overall &amp;quot;What Was Formerly Main&amp;quot; Macro Task can be defined.  This will construct the 7±2 tasks that comprise the revised main sequence of steps, set their properties, and then use the ordinary Macro execute method to step through the sequence of Tasks.&lt;/p&gt;
&lt;p&gt;Now the overall main method is a simple constructor for a Macro Task and an execute of that Macro Task.  Ideally, two lines of code, based on a highly reusable Task/Macro Task structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="state-change-and-shared-state"&gt;
&lt;h2&gt;State Change and Shared State&lt;/h2&gt;
&lt;p&gt;As our sequence of tasks execute, the output from one task is input to the next.  Universally, state change means that an object's setter methods were used.  Sometimes, an object which gets updated (or created) must be shared by two or more Tasks.  A shared object is usually the responsibility of the overall Macro Task, and that object is a property of each subtask which shares the object.&lt;/p&gt;
&lt;p&gt;Failure to identify the objects which undergo state changes is the leading cause of &lt;strong&gt;EIM&lt;/strong&gt;.  It's also one of the root causes of &lt;strong&gt;BOD&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Often, this shared state must be persisted in some form.  (Other times, it is a report that written to some output stream.)  When we're dealing with persistent shared state, we might be using a database directly.  More often, we're using Hibernate or iBatis, and we may need to configure iBatis or Hibernate and potentially fetch some initial objects from the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-and-global-properties"&gt;
&lt;h2&gt;Configuration and Global Properties&lt;/h2&gt;
&lt;p&gt;The public static void main method has three responsibilities.  The third and final is to create and initiate the overall Task.  The first is to gather the overall configuration as a complete set of Properties.  The java.lang.System has a base set of properties which come from Java defaults and command-line parameters.  In the middle is the management of any global objects.&lt;/p&gt;
&lt;p&gt;Your application should create it's own Properties object.  Use application-wide or system-wide properties files for default values.  Merge in properties from System and any property files named on the command-line.  This complete set of properties can then be given to the overall Task to support any needed configuration.&lt;/p&gt;
&lt;p&gt;In some cases, you may want to create shared objects outside the Task (in main), and assign these objects to specific Tasks.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;p&gt;Your goal is to get to something like the following.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Logger theLog= Logger.getLogger( &amp;quot;com.xyzzy.division.app.Main&amp;quot; );
Properties p= mergeAllProperties();
theLog.config( p );
SomeObject theFocus= new SomeObject();
try {
    Task t0= new MainTaskV3();
    t0.init(p);
    t0.setTheFocus( theFocus );
    t0.execute();
} catch... {...}
theLog.info( &amp;quot;Finished&amp;quot; )
&lt;/pre&gt;
&lt;p&gt;Now, my main program is purely the administrative overhead of gathering property values, creating the shared state object(s), and executing the task that updates that object's state.&lt;/p&gt;
&lt;p&gt;Note that we're creating MainTaskV3.  When we move to version 4, we can add the new class definition and update main to use the new class definition.  This simplifies change management to be mostly adding new class definitions and changing relatively little established, tested code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mutability-analysis"&gt;
&lt;h2&gt;Mutability Analysis&lt;/h2&gt;
&lt;p&gt;What if we want to add a task?  In an &lt;strong&gt;EIM&lt;/strong&gt;  program, this is hard -- sometimes impossible.  In a Task-based program, we're adding a Task definition, and adding an initialization into some Macro Task.&lt;/p&gt;
&lt;p&gt;Note that this is inherently testable.  We can easily test the new task in complete isolation.  Further, we can easily back the change out by removing a single constructor from a Macro Task.  (We don't need to remove the unused class definition.)&lt;/p&gt;
&lt;p&gt;What if we want to remove a Task?  Again, this is often hard in an EIM program because the various task dependencies are murky or non-existent.  In a Task-based program, we're simply removing a single constructor from a Macro Task.&lt;/p&gt;
&lt;p&gt;What if we want to reorder the Tasks?  We're just changing the order of SubTask construction within a Macro Task's initialization.&lt;/p&gt;
&lt;p&gt;What if we want to dramatically restructure two formerly distinct programs and combine them into one new program?  What if we want to split a long program into two shorter programs?  Both cases are simply a re-organization of the MacroTasks to adjust the mix of tasks the create in their initialization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Standard defects lead to standard solutions.  Each program is not a unique, special snowflake.  Each program just one of many, and should be evaluated using a standardized set of defects.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Three More False Dichotomies -- Plus a Bonus Misdirection</title><link href="https://slott56.github.io/2008_04_28-three_more_false_dichotomies_plus_a_bonus_misdirection.html" rel="alternate"></link><published>2008-04-28T23:46:00-04:00</published><updated>2008-04-28T23:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-28:/2008_04_28-three_more_false_dichotomies_plus_a_bonus_misdirection.html</id><summary type="html">&lt;p&gt;What I said: &amp;quot;How about using the RDBMS product appropriately ? It's for persistence. Do processing in another product, appropriate for processing: Java.&amp;quot;&lt;/p&gt;
&lt;p&gt;What it became: &amp;quot;why not use a file system and skip the expense and overhead of an RDBMS ?&amp;quot;&lt;/p&gt;
&lt;p&gt;I was shocked that numerous good features of the RDBMS …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What I said: &amp;quot;How about using the RDBMS product appropriately ? It's for persistence. Do processing in another product, appropriate for processing: Java.&amp;quot;&lt;/p&gt;
&lt;p&gt;What it became: &amp;quot;why not use a file system and skip the expense and overhead of an RDBMS ?&amp;quot;&lt;/p&gt;
&lt;p&gt;I was shocked that numerous good features of the RDBMS were blissfully discarded.  Indexing?  Gone.  Separating of logical and physical storage?  Gone.  ACID rules, Locking and transaction management?  Gone.&lt;/p&gt;
&lt;p&gt;All I wanted to do was cut down on triggers and stored procedures.  But a true master of the false dichotomy turns that suggestion into a choice between dumb storage and the whole RDBMS bloatware that includes numerous inefficient processing choices.&lt;/p&gt;
&lt;p&gt;I tried to lift up a middle-of-the-road feature set.  Above dumb storage, but lacking the endless problems of triggers and stored procedures.  I got a bitter response: &amp;quot;How did we get on to indexes, acid and the like?&amp;quot;&lt;/p&gt;
&lt;p&gt;I tried to introduce the middle ground, and was shot down.  Apparently, the RDBMS is an all-or-nothing proposition.  Since we're already holding the hammer, we might as well treat all problems as nails.&lt;/p&gt;
&lt;div class="section" id="the-flat-file-folly"&gt;
&lt;h2&gt;The Flat File Folly&lt;/h2&gt;
&lt;p&gt;When confronted with serious performance issues in a database application, a good approach is often to eschew complex SQL.  Indeed, the lesson I learned a few years back working on a big data warehouse was the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SELECT * FROM SOURCE TABLE into a file.
Do all processing in Java, creating a resulting file.
Use SQL*Loader to reload the resulting file
&lt;/pre&gt;
&lt;p&gt;I was told that this would clearly use too many I/O operations, making this design pattern unacceptable.  Processing must be done either entirely in SQL or entirely in memory as Java objects.  Since there were too many objects, in-memory wouldn't work, which left no choice but database processing.  There is no middle ground.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="optimization-in-a-vacuum"&gt;
&lt;h2&gt;Optimization in a Vacuum&lt;/h2&gt;
&lt;p&gt;Given: some long-winded stored procedure with ill-defined semantics and no data model.  Goal: fix it.  What does &amp;quot;fix&amp;quot; mean?  Here's the deal: it's a stored procedure, but no one wants to produce the data model for the tables involved.&lt;/p&gt;
&lt;p&gt;I asked, several times, for the context.  I was shot down.    I was told &amp;quot;I thought that I could address the programming issue of nested if's and long lists of if - elseif - elseif w/out taking into account the context/data model.&amp;quot;.&lt;/p&gt;
&lt;p&gt;I'm filled with awe at the idea of optimization without making fundamental changes to the algorithm or data structures.  It's remotely possible that the code is so brain dead as to be trivial to optimize.&lt;/p&gt;
&lt;p&gt;At first, this didn't seem like a false dichotomy.  Then I realized that I was being asked to separate data structure from algorithm.  Since that can't be done, it's a kind of false dichotomy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-little-hibernate"&gt;
&lt;h2&gt;Adding A Little Hibernate&lt;/h2&gt;
&lt;p&gt;I tried to explain that ORM's aren't an &amp;quot;incremental&amp;quot; change.  It fundamentally rearranges how you design and implement algorithms.  Which, in a way, is a kind of dichotomy.  But I don't think it's a false dichotomy.  I think that the ORM world-view is fundamentally different from one where you write long, complex stored procedures and triggers.&lt;/p&gt;
&lt;p&gt;I was told that &amp;quot;One guy during the meeting said that if we needed to we could use PL/SQL.&amp;quot;&lt;/p&gt;
&lt;p&gt;Which, I suppose is true.  But it is the best way to subvert simple, clear, high-performance ORM.&lt;/p&gt;
&lt;p&gt;False dichotomy is a technique for rejecting change by going far beyond the proposed change, setting up a false dichotomy and bundling the real change in with the overstatement.&lt;/p&gt;
&lt;p&gt;In my case I had laid out a dichotomy as part of making a change.  This was characterized as a false dichotomy.  Sadly, no one seems to have any examples of any actual best-practice programs using Hibernate, so it stands as a false dichotomy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Tackling the Spreadsheet Problem</title><link href="https://slott56.github.io/2008_04_27-tackling_the_spreadsheet_problem.html" rel="alternate"></link><published>2008-04-27T12:50:00-04:00</published><updated>2008-04-27T12:50:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-27:/2008_04_27-tackling_the_spreadsheet_problem.html</id><summary type="html">&lt;p&gt;It's not that spreadsheets are evil incarnate, it's just that there are so many ways to abuse them.  Spreadsheets put a veneer of structure over some information.  Bad spreadsheet design, worse yet, puts unstructured information into a hard-to-manipulate format.&lt;/p&gt;
&lt;p&gt;I've complained about this before.  See &lt;a class="reference external" href="https://slott56.github.io/2007_02_07-great_quotes_about_the_spreadsheet_problemtm.html"&gt;Great Quotes about the Spreadsheet …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's not that spreadsheets are evil incarnate, it's just that there are so many ways to abuse them.  Spreadsheets put a veneer of structure over some information.  Bad spreadsheet design, worse yet, puts unstructured information into a hard-to-manipulate format.&lt;/p&gt;
&lt;p&gt;I've complained about this before.  See &lt;a class="reference external" href="https://slott56.github.io/2007_02_07-great_quotes_about_the_spreadsheet_problemtm.html"&gt;Great Quotes about the Spreadsheet Problem™&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Compounding the problem is the casual way that some folks deal with the dimensionality of their data.  I've started working with researchers.  They know the distinction between independent and dependent variables -- it's often part of their experiment design.  However, their spreadsheet is just a flat list of columns, concealing the meaning in their data.&lt;/p&gt;
&lt;p&gt;There are three hard parts to these kinds of problems:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;The design of the database&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;DB design isn't always easy to deduce from the spreadsheets.  Other programs can (and often do) exacerbate the problem by claiming that a dimensionally normalized database isn't to helpful -- they just need persistent storage.  In the long run, that won't work out.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Inconsistency of the spreadsheets&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;We can write rules, pass laws, build macros, rant and rave.  The spreadsheet is still a flexible desktop tool.  We can try to replace it with MS-Access, but the security model is still all-or-nothing.  If you have any access, you can add, change or delete anything you want to  touch.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Getting data out of an XLS file&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;There are many, many ways to approach this problem.  We might:&lt;/dd&gt;
&lt;/dl&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Save the file as CSV.  There are issues here; principally, who can you trust to save the various sheets consistently?  The &amp;quot;end users&amp;quot; aren't generally all that happy with this level of technical busy-work.  Save As... is so much harder than Save that the odds of success are nearly zero.&lt;/li&gt;
&lt;li&gt;Save the file as XML.  This is pleasant, but again, you have to trust someone to do this correctly, since it isn't the MS-Office default.  Worse, if you try to make it the default, everyone in IT worries about the increase in file size.&lt;/li&gt;
&lt;li&gt;Stop using MS-Office, and use Open Office.  This has lots and lots of merit, but often suffers from goofy organizational road-blocks.  Primarily the endless list of open source &amp;quot;issues&amp;quot;: who provides support? who do we sue? bugs?  malware? licenses?  I ranted about this in &lt;a class="reference external" href="https://slott56.github.io/2006_04_24-the_cost_and_benefit_of_open_source.html"&gt;The Cost (and Benefit) of Open Source&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Write VBA scripts to convert the XLS spreadsheet to XML or a sequence of CSV files.  This compounds a yucky problem with more yuckiness.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="enter-xlrd"&gt;
&lt;h2&gt;Enter XLRD&lt;/h2&gt;
&lt;p&gt;It turns out that the Open Office organization has managed to reverse engineer enough of the mystery that is XLS files.  This has two important consequences: the &lt;a class="reference external" href="http://poi.apache.org/"&gt;Apache POI project&lt;/a&gt;  and the Python &lt;a class="reference external" href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;xlrd&lt;/a&gt;  package.&lt;/p&gt;
&lt;p&gt;With XLRD I can read the XLS file directly, cutting down on the user's busy-work to save the file in a usable format.  Using Python allows me to work through the consistency problem.  This usually leads to a class hierarchy which handles variations on the expected spreadsheet.&lt;/p&gt;
&lt;p&gt;A bonus is that we can unify XLRD-based readers with XML parsers to deal with a wide variety of spreadsheet data sources.&lt;/p&gt;
&lt;p&gt;We're still left with the remaining two hard parts -- DB design and consistency.  With Python we can easily build something meta-data driven.  In particular, we can use Python's introspection capabilities to have flexible high-level mappings from various kinds of spreadsheets to the RDBMS tables.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>The Half-Truth About Consultants</title><link href="https://slott56.github.io/2008_04_20-the_half_truth_about_consultants.html" rel="alternate"></link><published>2008-04-20T11:27:00-04:00</published><updated>2008-04-20T11:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-20:/2008_04_20-the_half_truth_about_consultants.html</id><summary type="html">&lt;p&gt;Some of Cringley's The &lt;a class="reference external" href="http://www.pbs.org/cringely/pulpit/2008/pulpit_20080418_004737.html"&gt;Truth About IT Consultants&lt;/a&gt;  is good stuff.  His Type &amp;quot;A&amp;quot; and Type &amp;quot;C&amp;quot; are both stories of consultants who are brought in because they have specific skills.  In the &amp;quot;A&amp;quot; case, it's a technical skill, and in the &amp;quot;C&amp;quot; case it's project management.&lt;/p&gt;
&lt;p&gt;In both cases …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some of Cringley's The &lt;a class="reference external" href="http://www.pbs.org/cringely/pulpit/2008/pulpit_20080418_004737.html"&gt;Truth About IT Consultants&lt;/a&gt;  is good stuff.  His Type &amp;quot;A&amp;quot; and Type &amp;quot;C&amp;quot; are both stories of consultants who are brought in because they have specific skills.  In the &amp;quot;A&amp;quot; case, it's a technical skill, and in the &amp;quot;C&amp;quot; case it's project management.&lt;/p&gt;
&lt;p&gt;In both cases, the scope of work is narrowly defined.  Success and failure are finite and definite; it's easy to determine if the consultant is effective.  Both cases involve known requirements.&lt;/p&gt;
&lt;p&gt;Cringley has a &amp;quot;B&amp;quot; case, however, where the consultant is brought in to a situation characterized by &amp;quot;Sometimes a customer does not know what they want&amp;quot;, which is a glib and useless summary of what really happens.&lt;/p&gt;
&lt;p&gt;There are several variations on &amp;quot;doesn't know what they want&amp;quot;, each of which dooms the project.  With few exceptions, the customer has determined -- in advance -- that the project will be a FAIL.  Most consultants can hope to choose between FAIL and EPIC FAIL.  Cringley names one of those geniuses who can actually make a silk purse from a sow's ear.  The rest of us can only hope to make something out of the sow's ear.&lt;/p&gt;
&lt;div class="section" id="liars"&gt;
&lt;h2&gt;Liars&lt;/h2&gt;
&lt;p&gt;Some customers lie.  It's a fact of life.  You're brought in to do [X].  You write a proposal to do [X].  You present this to everyone, you go through elaborate sign-off rituals.   Then the customer &amp;quot;changes scope.&amp;quot;   I call it lying, because it wasn't a surprise -- it was known by some and ignored by others.  Sadly, you're last to know that all of the quality ritual around [X] was a waste of time.&lt;/p&gt;
&lt;p&gt;In most cases, a scope change is a FAIL; the customer ejects you for failing to do [X].  Sometimes they even admit that [X] is impossible.&lt;/p&gt;
&lt;p&gt;Customers lie at every step of the process, from inception to acceptance.  What does a consultant do when they're brought in as type &amp;quot;B&amp;quot;, but the customer is lying about the problem?&lt;/p&gt;
&lt;p&gt;The consultant has two choices:  call them out on it, or muddle through until being ejected.  If you call them out, they might acknowledge the change in scope, and -- best of all -- treat scope change as learning, not failure.  [The odds are small, a C|net blog suggests that &lt;a class="reference external" href="http://www.cnet.com/8301-13505_1-9900455-16.html"&gt;62 percent of IT projects fail&lt;/a&gt; .  This means that most &amp;quot;learning&amp;quot; is still labeled &amp;quot;failure&amp;quot;.]&lt;/p&gt;
&lt;p&gt;If you muddle through, you wind up in Cringley's type &amp;quot;B&amp;quot; category of consultants who appear to be more problem than solution.  You'll be blamed for &amp;quot;running the meter&amp;quot; while the project crashed and burned.  But really, the project was already dead; the project was dead as soon as the customer admitted they didn't know what they wanted.  It isn't possible to &amp;quot;take a long hard look at the ROI&amp;quot; when at least some of the folks are lying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-free-problem-solving"&gt;
&lt;h2&gt;Problem-Free Problem Solving&lt;/h2&gt;
&lt;p&gt;Some customers have an iron-bound process.  They insist on [X].  You provide [X], and they confess that [X] didn't solve their problem.  'You did an excellent job and built exactly what we asked for; it’s just not what we really want.' TC quotes.  Essentially, the customer demanded technology, independent of the problem being solved.&lt;/p&gt;
&lt;p&gt;This has a lot of FAIL in it.  If you deliver the technology, the problem isn't solved.  If you attempt to solve the problem, you aren't following the agreed-upon scope or approach.  Both paths are FAIL.  EPIC FAIL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="helpless-flailing"&gt;
&lt;h2&gt;Helpless Flailing&lt;/h2&gt;
&lt;p&gt;Some customers like to paint their situation as one in which they are helpless or powerless.  They just don't know what to do next.  The situation is so dire, that they demand a type &amp;quot;B&amp;quot; consultant to help them decide what to do.  This is actually a composite situation, with two parts, both with a lot of FAIL in them.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;They are lying about the scope and nature of the work.  &amp;quot;Help us decide&amp;quot; isn't true, and &amp;quot;help is implement&amp;quot; can't be true until the decision part is finished.  The situation is usually a conflict where someone in power wants the wrong solution and someone without a lot of power or influence is only able to raise doubts, but can't actually change any minds.&lt;/p&gt;
&lt;p&gt;To get to agreement, someone must be rewarded for doing the right thing.  Consultants rarely shape the cultural and financial reward systems.  The customer must elevate the value of cooperation, and must elevate the values of the right solution.  The consultant can only point the direction, the customer has to actually move.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;They are failing to confront the problem.  Sometimes, this is because an executive made a bad decision in the past, creating the problem, and would like to have it solved without any shadow of blame.  Other times this is because there's a favorite technology out there, and we don't want to document the problem just build a solution.  No formal definition of a problem means endless back-and-forth on the technology.  If you can't prove that it solves some (or all) of the problem, consulting won't help make a technology choice.&lt;/p&gt;
&lt;p&gt;Again, to get to an agreement, you need some kind of reward for doing the right thing.  If we don't have a problem, and we can't reward people for solving the problem, all we have left is waffling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="roi"&gt;
&lt;h2&gt;ROI&lt;/h2&gt;
&lt;p&gt;What about ROI?  Isn't that a good measure for consulting success?  Shouldn't we hold the type &amp;quot;B&amp;quot; consultant to an ROI metric?&lt;/p&gt;
&lt;p&gt;Sure.&lt;/p&gt;
&lt;p&gt;But only if you have a measurement system you can use to gauge the return.  Rarely is this in place.  &amp;quot;What?&amp;quot; you ask, &amp;quot;Aren't financial measures always in place?&amp;quot;&lt;/p&gt;
&lt;p&gt;Sure they are, but do they apply to the technology you're playing with?  Or do they apply to the business problem you're supposed to be solving?  And if no one will clearly state the business problem, how can we make ROI metrics apply?&lt;/p&gt;
&lt;p&gt;It's absolutely essential to clearly state the business problem.  Then, picking a solution, is a facilitated discussion, done by a type &amp;quot;A&amp;quot; consultant.  Then, the implementation is a project managed by type &amp;quot;C&amp;quot; consultants and staffed by type &amp;quot;A&amp;quot; consultants.&lt;/p&gt;
&lt;p&gt;Cringley can complain about type &amp;quot;B&amp;quot; consultants.  But customers create the situations in which consultants fail.  And consultants hate to piss customers off by declaring a project full of FAIL before they even start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fantasy-solution"&gt;
&lt;h2&gt;The Fantasy Solution&lt;/h2&gt;
&lt;p&gt;Cringely describes a common customer fantasy.  &amp;quot;The best consultants are the ones who come with a portfolio of products and tools. &amp;quot;  While pleasant, this is rare.  There are four common outcomes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The client has either chosen the solution -- or is open to change -- and found a consultant who can implement it.  Good.  Unless, of course, we're in &lt;strong&gt;Problem-Free Problem Solving&lt;/strong&gt;  mode.  In which case, a great implementation solves nothing.  It's still a FAIL.&lt;/li&gt;
&lt;li&gt;The client is a &lt;strong&gt;Liar&lt;/strong&gt;  about being open to change.  Go ahead, install the solution AND solve the problem.  You can still be labeled a failure if there's no &amp;quot;uptake&amp;quot; of the solution.  It can stand out as an island of stuff that is repudiated because it's unique.  There is no reward for learning the new technology, so it has to be removed.  FAIL.&lt;/li&gt;
&lt;li&gt;The client is engaged in &lt;strong&gt;Helpless Flailing&lt;/strong&gt; , but isn't actually open to the technology or admitting to the business problem (or both).  Now you look like you're selling snake oil and making insane promises no technology can keep.  They may like you, and you may have identified the real problem for them.  But if your technology isn't what they want, that's a FAIL.&lt;/li&gt;
&lt;li&gt;The stars align.  They are confronting the real problem, they like and embrace (or already use) the technology.  Wait.  That's the type &amp;quot;A&amp;quot; or type &amp;quot;C&amp;quot; consulting gig -- where the requirements and technology are known.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The basic rule is this: Cringely's Type &amp;quot;A&amp;quot; and Type &amp;quot;C&amp;quot; are places where the customer's done some homework, aligned solution with problem, and has a clear scope of work to actually solve the actual problem.  Everything else has a lot of FAIL in it because the customer's unwilling or unable to do the work required AND the consultant is unwilling to make this clear before starting.  It takes two to FAIL.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Abuses of Use Cases - a Failure Taxonomy</title><link href="https://slott56.github.io/2008_04_15-abuses_of_use_cases_a_failure_taxonomy.html" rel="alternate"></link><published>2008-04-15T01:27:00-04:00</published><updated>2008-04-15T01:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-15:/2008_04_15-abuses_of_use_cases_a_failure_taxonomy.html</id><summary type="html">&lt;p&gt;I've seen a couple of recent use case problems.  The first recent failure of use cases was particularly alarming.  It was a small application; a few use cases, a couple of actors.&lt;/p&gt;
&lt;p&gt;One of the actors was labeled as &amp;quot;End User&amp;quot;.  Seriously.  Few labels could be as vague as End …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've seen a couple of recent use case problems.  The first recent failure of use cases was particularly alarming.  It was a small application; a few use cases, a couple of actors.&lt;/p&gt;
&lt;p&gt;One of the actors was labeled as &amp;quot;End User&amp;quot;.  Seriously.  Few labels could be as vague as End User, except perhaps calling an actor &amp;quot;Actor&amp;quot;.&lt;/p&gt;
&lt;p&gt;A bunch of the use cases were essentially a GUI specification, which isn't completely wrong.  However, a GUI spec usually requires a ton of background and justification.  Often, a GUI spec relies on an underlying model and a bunch of context that provides the &amp;quot;why&amp;quot; information.&lt;/p&gt;
&lt;p&gt;I asked for higher-level use cases to try and drive out what the content of the underlying model really was.  Without the context information, all we knew were GUI objects like characters and cursors and fonts.&lt;/p&gt;
&lt;p&gt;I was told -- by the author -- that it was not possible to describe the application in any terms other than the GUI specification.  It was not possible to write a use case at a higher level; it was not possible that one could minimize the technology dependence.&lt;/p&gt;
&lt;p&gt;I provided two strategies, the author was 'incapable' of doing either one.  Strategy 1: write multiple drafts, each using a different technology, compare and contrast the resulting drafts to get the &amp;quot;essential&amp;quot; material.  Strategy 2: underline the technology words in red and replace them with something less specific to SWING.  Both were largely impossible.&lt;/p&gt;
&lt;p&gt;Consequence: someone has to guess at the underlying model.  That will work out great when -- part way though implementing the GUI -- someone discovers all the things left out of the essential model.  They'll then retro-fit the high-level use cases; usually around the partial implementation so that none of the &amp;quot;investment&amp;quot; is &amp;quot;lost&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="bunching"&gt;
&lt;h2&gt;Bunching&lt;/h2&gt;
&lt;p&gt;Another use case problem stemmed from a situation I'll call &amp;quot;Improper Bunching&amp;quot;.  A bunch of steps were described as a long use case and allocated to a single actor.  The steps don't really share information and business value; they contribute, but they aren't all the same.&lt;/p&gt;
&lt;p&gt;In this case, a few of the steps could be performed by any of a large number of actors.  All of the candidates had the requisite knowledge, the authority to act and compatible business goals.  The choice of actor is really one of &amp;quot;who has the time to do the job&amp;quot;, not &amp;quot;who has the knowledge to do the job.&amp;quot;&lt;/p&gt;
&lt;p&gt;The bunching, however, conflated the long sequence of steps with the smaller steps.  While some elements of the long sequence couldn't be shared of off-loaded, some of the individual steps could be assigned in different ways to change the way people were task-loaded.&lt;/p&gt;
&lt;p&gt;Consequence:  The long sequence of steps dominates everyone's thinking.  Worse, it takes some work-flow alternatives off the table; and this takes some technology off the table.  Specifically, it prevents doing things in parallel in the background.&lt;/p&gt;
&lt;p&gt;A Taxonomy of Mistakes&lt;/p&gt;
&lt;p&gt;Here's my taxonomy of common use case mistakes.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Not Interactive&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Only Features and Technology - no actual interactions between actor and system&lt;/li&gt;
&lt;li&gt;Only Algorithms - no people - the use case is dominated by algorithms and processing details, actors are left out of the picture.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;No Business Value&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Incomplete&lt;/p&gt;
&lt;p&gt;2.1.1.  Focus on Sequential Operations - usually login and initial setup; some business operations omitted or summarized.&lt;/p&gt;
&lt;p&gt;2.1.2.  Following the Precedent - rewriting previous business operations.&lt;/p&gt;
&lt;p&gt;2.1.3.  Bunching - use cases are long sequences that could be decomposed into smaller, reusable, independent steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Non-Specific&lt;/p&gt;
&lt;p&gt;2.2.1.  Free-Running Imagination - conflating &amp;quot;possibly&amp;quot; vs. &amp;quot;required&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Tech Specs&lt;/p&gt;
&lt;p&gt;2.3.1.  The use cases are technical requirements - the solution technology is conflated with the business problem.&lt;/p&gt;
&lt;p&gt;2.3.2.  The use cases are detailed design - the business problem is never stated&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;No Actor - Often associated with a non-interactive use case&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="use-cases-for-this-taxonomy"&gt;
&lt;h2&gt;Use Cases for this Taxonomy&lt;/h2&gt;
&lt;p&gt;I think it's helpful to summarize the common use case mistakes with a common set of names.  The mistakes are prevalent.  Having a common names for these mistakes gives people a gentle reminder on the quality problems.&lt;/p&gt;
&lt;p&gt;It isn't helpful to have a bad set of use cases.  When the author dismisses corrections as &amp;quot;that's not my understanding&amp;quot; we now have two problems: broken use cases and someone who doesn't want to help fix them.&lt;/p&gt;
&lt;p&gt;The principle use case for this taxonomy is to help coach the authors.  If they have &amp;quot;standard&amp;quot; use case errors, then there are equally standard fixes.  It isn't a gross failure, it's just standard quality issues that everyone has.  The author isn't a moron; this is just a review to find the common kinds of errors and omissions.  The use case review isn't a trial by jury, it's just a chance to find and fix a few mistakes.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>POPO and GOPS - Plain Old Python Objects and Good Old Python Syntax</title><link href="https://slott56.github.io/2008_04_01-popo_and_gops_plain_old_python_objects_and_good_old_python_syntax.html" rel="alternate"></link><published>2008-04-01T10:01:00-04:00</published><updated>2008-04-01T10:01:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-01:/2008_04_01-popo_and_gops_plain_old_python_objects_and_good_old_python_syntax.html</id><summary type="html">&lt;p&gt;Processing XML and X12 messages is a struggle.  You have a number of use cases (I listed a bunch of features in &lt;a class="reference external" href="https://slott56.github.io/2008_03_31-synchronicity_and_document_object_models.html"&gt;Synchronicity and Document Object Models&lt;/a&gt; ).  These can be tackled a number of ways.&lt;/p&gt;
&lt;p&gt;What spoils me is the Object Relational Mapping (ORM) in &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;  and the &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;  ORM …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Processing XML and X12 messages is a struggle.  You have a number of use cases (I listed a bunch of features in &lt;a class="reference external" href="https://slott56.github.io/2008_03_31-synchronicity_and_document_object_models.html"&gt;Synchronicity and Document Object Models&lt;/a&gt; ).  These can be tackled a number of ways.&lt;/p&gt;
&lt;p&gt;What spoils me is the Object Relational Mapping (ORM) in &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;  and the &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;  ORM layer (among others).  With SQLAlchemy I can create Mapper that bridges between a &lt;strong&gt;Plain Old Python Object&lt;/strong&gt;  and a SQLAlchemy table definition.  The Table definition really SQL with &lt;strong&gt;Good Old Python Syntax&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In Django, the two Python and SQL are combined -- a Django table definition is also a POPO.  There are some limitations, but not too many.  Most importantly, navigation may imply additional queries which are handled silently.&lt;/p&gt;
&lt;p&gt;When working with X12 and XML messages, I want similar coolness.  I thought I wanted POPO's, until I got a comment leading me to &lt;a class="reference external" href="http://blog.ianbicking.org/2007/08/02/atom-models/"&gt;Atom Models&lt;/a&gt; ; that clarified the distinction.&lt;/p&gt;
&lt;div class="section" id="popo"&gt;
&lt;h2&gt;POPO&lt;/h2&gt;
&lt;p&gt;While using Plain Old Python Objects is a lofty ideal, it isn't always practical.  If we want purely Python objects then we have three-step unmarshalling.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Lexical&lt;/strong&gt;.  This breaks the source text into tokens.  Either XML constructs like tags and text or X12 constructs like Segments and Elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntactical&lt;/strong&gt;.  This assembles meaningful objects from the tokens.  This is either XML elements and attributes (properly nested) or X12 Loops, Segments, Composites and Elements (again, properly nested).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POPO&lt;/strong&gt;.  This builds the desired POPO objects out of the XML (or X12) structure, through a big-old structure-by-structure mapping.  When you work with tools like the &lt;a class="reference external" href="http://www.sun.com/software/javaenterprisesystem/javacaps/index.jsp"&gt;Java CAPS&lt;/a&gt;  eDesigner (or &lt;a class="reference external" href="http://www.softwareag.com/corporate/products/wm/default.asp"&gt;webMethods&lt;/a&gt; ) you spend a fair amount of time dragging mapping lines from one structure to another structure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As Ian Bicking points out in the Atom Models, you now have three representations: text, XML and your final POPO.  That's at least one too many.&lt;/p&gt;
&lt;p&gt;This is a helpful insight, and it highlights the distinction between POPO and GOPS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gops"&gt;
&lt;h2&gt;GOPS&lt;/h2&gt;
&lt;p&gt;Ian's claim is that a better approach is wrapping the syntactical representation in Good Old Python Syntax.&lt;/p&gt;
&lt;p&gt;We have a couple of alternatives here.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Subclass the built-in classes to add the desirable syntax.&lt;/li&gt;
&lt;li&gt;Build Bridge/Facades over the the built-in structures.  This allows us to offer GOPS, but this syntax is really a pass-through to the underlying objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are reasons for both.  Ordinary subclassing, while appealing, may leave you rooting around in things that are Rat Holes of Lost Time.   On the other hand, a Bridge/Facade has a possible disadvantage of leading to rather complex constructors, since the bridge is really a pass-through to some underlying structure.&lt;/p&gt;
&lt;p&gt;However, when trying to cope with xml.dom.minidom, a Bridge or Facade makes sense.  It gives us better search than the minidom getElementsByName capability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aha"&gt;
&lt;h2&gt;Aha&lt;/h2&gt;
&lt;p&gt;In my case, I've got several toweringly complex XML messages that have to be synthesized.  I don't want to hard code a big puddle of XML text.  In the future, I may get a proper XSD for the message, from which the various elements can be built.&lt;/p&gt;
&lt;p&gt;For now, I don't have XSD or DTD, just a few examples plus an MS-Word .doc with message elements in a big, indented layout.  Creating proper POPO's for this hierarchy isn't too bad.  I have a simple parser that transforms an indented outline into Python class definitions.&lt;/p&gt;
&lt;p&gt;Creating a Bridge to XML, similarly, isn't too bad.  It just makes the POPO's a bit more complex.  Each element is a descriptor that contains navigation into the underlying XML.  Creating a message from scratch adds enough complexity that it's a headache.  Either we introspect our POPO's or do additional parsing of the indented layout to create an XML constructor in addition to the Bridge class definitions.&lt;/p&gt;
&lt;p&gt;The real win however, will come from upgrading to the 1.3 release of ElementTree, which has more complete XPath support.  The ElementTree find method provides a pleasant, Pythonic encapsulation of the XPath that makes life relatively simple.  Bridges and Facades are no longer desirable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-hierarchy-parser"&gt;
&lt;h2&gt;The Hierarchy Parser&lt;/h2&gt;
&lt;p&gt;Here's a way to parse a big block o' text and create a proper XML structure from the content.  Similar algorithms can be used to emit Python class definitions, XML loop structures, etc.&lt;/p&gt;
&lt;p&gt;The message is the top-level Element.  The description is simple indented block of text, for example&lt;/p&gt;
&lt;pre class="literal-block"&gt;
someMsg= &amp;quot;&amp;quot;&amp;quot;
HTML
    HEAD
        TITLE
    BODY
        P
        P
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
import xml.etree.ElementTree as dom
def makeXML( message, description ):
    msg= dom.Element( message )
    indent= [ (-1,msg) ]
    for lineRaw in description.splitlines():
        line= lineRaw.rstrip()
        if len(line) == 0: continue
        tag= line.lstrip()
        spaces = line.find(tag[0])
        prevSpaces, context = indent[-1]
        if spaces &amp;lt; prevSpaces:
            # outdent: pop to matching level, then pop to this level
            while spaces &amp;lt; prevSpaces:
                indent.pop(-1)
                prevSpaces, context = indent[-1]
            assert spaces == prevSpaces
        if spaces == prevSpaces:
            # prevailing indent: pop to parent
            indent.pop(-1)
            prevSpaces, context = indent[-1]
            assert spaces &amp;gt; prevSpaces
        # indent: append a child
        new= dom.SubElement( context, tag )
        indent.append( (spaces,new) )
    spaces, topElt = indent[0]
    return dom.ElementTree( topElt )
&lt;/pre&gt;
&lt;p&gt;Now, I'm happy.  I can unmarshall and marshall using ElementTree.  I can manipulate with simple things like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;msg.find(&amp;quot;SOME/NESTED/PART&amp;quot;).text&lt;/span&gt; = &amp;quot;new value&amp;quot;&lt;/tt&gt; .  I can build using the above &lt;tt class="docutils literal"&gt;makeXML&lt;/tt&gt;  function.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Synchronicity and Document Object Models</title><link href="https://slott56.github.io/2008_03_31-synchronicity_and_document_object_models.html" rel="alternate"></link><published>2008-03-31T15:32:00-04:00</published><updated>2008-03-31T15:32:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-31:/2008_03_31-synchronicity_and_document_object_models.html</id><summary type="html">&lt;p&gt;Message-oriented applications involve an interface defined around messages (or documents).  I've been working on applications that involve a fair amount of manipulation of XML and X12.  Recently I started yet another, and started to recognize the essential design patterns.&lt;/p&gt;
&lt;p&gt;There are four use cases.  The first two use cases define …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Message-oriented applications involve an interface defined around messages (or documents).  I've been working on applications that involve a fair amount of manipulation of XML and X12.  Recently I started yet another, and started to recognize the essential design patterns.&lt;/p&gt;
&lt;p&gt;There are four use cases.  The first two use cases define the interface: marshall and unmarshall.  The third and fourth use cases are building and manipulating the internal objects, separate from any XML (or X12) considerations.&lt;/p&gt;
&lt;p&gt;The problem recently gave me brain cramps because I wanted something a bit more general than my last (ad-hoc) go-around.&lt;/p&gt;
&lt;p&gt;These Use Cases are written from the viewpoint of the Plain Old Python Objects (POPO) application.  While my inbound and outbound interface is XML (or X12), I don't want a program full of text manipulation.  I want to unmarshall the input text into a POPO, work with that POPO and marshall the output as text.&lt;/p&gt;
&lt;div class="section" id="use-case-1-marshall"&gt;
&lt;h2&gt;Use Case 1: Marshall&lt;/h2&gt;
&lt;p&gt;The first use case is the easy one: Marshalling.  We want a POPO to marshall itself into an XML (or X12 message).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-2-unmarshall-or-parse"&gt;
&lt;h2&gt;Use Case 2: Unmarshall (or parse)&lt;/h2&gt;
&lt;p&gt;While this is solved by SAX, expat, xml.dom.minidom and xml.etree, there are some distinctions that are important.  The &amp;quot;event-based&amp;quot; parsing of SAX or expat is only part of the use case.  The more important part is the creation of a resulting document object that can be used for further processing.&lt;/p&gt;
&lt;p&gt;This document is easiest to work with if it's built of POPO's.  The &amp;quot;manipulation&amp;quot; use case, below, depends on simple, elegant Python syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-3-build"&gt;
&lt;h2&gt;Use Case 3: Build&lt;/h2&gt;
&lt;p&gt;In additional to receiving XML documents that encode POPO objects, we also need to build POPO objects &amp;quot;from scratch&amp;quot; in Python programs.  The point of POPO's is to have ordinary Python constructors building a complex object that can be manipulated and marshalled as XML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-4-popo-manipulation"&gt;
&lt;h2&gt;Use Case 4: POPO Manipulation&lt;/h2&gt;
&lt;p&gt;I want to be able to say things like &lt;tt class="docutils literal"&gt;msg.LOOP1.DTP.DTP02= &amp;quot;20080330&amp;quot;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The Python &amp;quot;.&amp;quot; is much, much cleaner than the rather complex search references required by the xml.dom structures.&lt;/p&gt;
&lt;p&gt;However, this isn't the only construct I'd like.  Many XML (and X12) constructs can repeat, so we need to use the &amp;quot;[]&amp;quot; or insert a number in the &amp;quot;.&amp;quot; path.&lt;/p&gt;
&lt;p&gt;XPath is not particularly pleasant for this, since it is not very Pythonic.  [XPath is a useful model, however, because the navigation axes can serve as a template for method design.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions"&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;There are a number of solutions, most of them icky.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;xml.dom.minidom&lt;/tt&gt;.  I liked this, right up until yesterday, when I read` Python HTML Parser Performance &amp;lt;&lt;a class="reference external" href="http://blog.ianbicking.org/2008/03/30/python-html-parser-performance/"&gt;http://blog.ianbicking.org/2008/03/30/python-html-parser-performance/&lt;/a&gt;&amp;gt;`_ .  It wasn't the &amp;quot;performance&amp;quot; topic that caught my attention, it was the &amp;quot;I do not recommend using minidom for anything&amp;quot; quote that stopped me cold.&lt;/li&gt;
&lt;li&gt;A kind of &lt;strong&gt;Bridge&lt;/strong&gt;  to create usable POPO's which are a Bridge to the xml.dom model implemented in minidom.  This isn't a pure Bridge, but a kind of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Bridge_pattern"&gt;Bridge&lt;/a&gt; -meets-&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Fa%C3%A7ade_pattern"&gt;Facade&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Custom POPO's.  This requires parsing using a custom (but not too complex) SAX ContentHandler and a simple XML marshaller method of each POPO class.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ElementTree&lt;/tt&gt;.  This was new to me.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;minidom&lt;/tt&gt; solution has two use cases nailed -- marshall and unmarshall fit nicely.  Building doesn't work out so well because the &lt;tt class="docutils literal"&gt;document.createElement&lt;/tt&gt; construction is very clunky.  Manipulation is also a pain in the neck because the navigation capabilities are limited.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Bridge to A Footing&amp;quot; is something I'd used recently.  In that case, the footing wasn't &lt;tt class="docutils literal"&gt;minidom&lt;/tt&gt;, but was a low-level representation of X12 messages.  Extending it, however, showed some profound limitations in my original design.&lt;/p&gt;
&lt;p&gt;The idea is that each attribute of a Bridge class is implemented as a Python descriptor.  The descriptor's  __get__ method implements the requisite search.  Marshall, Unmarshall and Manipulation are really quite nice.  Building, however, gets complicated.  Mostly because we still have to build the underlying minidom representation from Bridge objects that are heavily biased toward search.&lt;/p&gt;
&lt;p&gt;Custom POPO's work out moderately well.  The Python classes parallel the XSD's or DTD's or SEF's of the original message structure.  This isn't always ideal, however, since we have to define every single tag in a complex message structure.  For large X12 messages, this is a LOT of definitions of elements that simply pass through our application.  Its much nicer to have generic definitions (like minidom) that define the bulk of the data and a Bridge that applies to the useful parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-element-tree-solution"&gt;
&lt;h2&gt;The Element Tree Solution&lt;/h2&gt;
&lt;p&gt;Element Tree is new with Python 2.5 and corrects many problems with xml.dom.minidom.  Principally, ElementTree is Pythonic, not a rehash of a Java design.&lt;/p&gt;
&lt;p&gt;The Marshall and Unmarshall use cases work out reasonably well.  I have a beef with ElementTree.write, since that always creates a file.  But, I worked around it with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def toXML( etree ):
    buffer= StringIO.StringIO()
    etree.write( buffer )
    txt= buffer.getvalue()
    buffer.close()
    return txt
&lt;/pre&gt;
&lt;p&gt;Really, I should subclass &lt;tt class="docutils literal"&gt;ElementTree&lt;/tt&gt; and incorporate this into it.&lt;/p&gt;
&lt;p&gt;Building an Element Tree isn't too bad.  The Element and SubElement constructors are easy enough to use.  The text attribute (missing from the documentation) helps set text values of tags without fuss or complexity.&lt;/p&gt;
&lt;p&gt;Manipulating, similarly, isn't awful.  The (currently undocumented) ElementPath module provides a &amp;quot;name/name&amp;quot; XPath-like search functionality.  However, the way that the ElementPath (or _SimpleElementPath) plug into the overall structure of the find method shows how to build more sophisticated versions of ElementPath that handle more complex XPath search axes.  The nasty part of this is parsing the &lt;a class="reference external" href="http://www.w3.org/TR/xpath"&gt;XPath notation&lt;/a&gt;  itself.&lt;/p&gt;
&lt;p&gt;[Specifically, abbreviated notation, which limits searches to the child axis.  The &amp;quot;[&lt;em&gt;n&lt;/em&gt;]&amp;quot; index construct and &amp;quot;[&amp;#64; &lt;em&gt;attr&lt;/em&gt; = &lt;em&gt;value&lt;/em&gt;]&amp;quot; constructs are the most useful.]&lt;/p&gt;
&lt;p&gt;I'd like to write message.loop1.dtp, but I'm willing to settle for message.find(&amp;quot;loop1/dtp&amp;quot;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks"&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;No one knew I was having a problem with manipulating complex XML and X12 messages.  But the answer just sort of dropped into my lap by virtual of some cosmic synchronicity.  Or maybe chance favors the prepared mind.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Python as Configuration Language -- More Good Ideas</title><link href="https://slott56.github.io/2008_03_28-python_as_configuration_language_more_good_ideas.html" rel="alternate"></link><published>2008-03-28T21:27:00-04:00</published><updated>2008-03-28T21:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-28:/2008_03_28-python_as_configuration_language_more_good_ideas.html</id><summary type="html">&lt;p&gt;Some recent thoughts on using Python, directly, as configuration file syntax.  In a way, a configuration is a highly-specialized Domain Specific Language focused on the application's problem domain.  The point is to leverage syntax we already have to create meaningful configuration files.&lt;/p&gt;
&lt;p&gt;&amp;quot;Python is sometimes a good use for a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some recent thoughts on using Python, directly, as configuration file syntax.  In a way, a configuration is a highly-specialized Domain Specific Language focused on the application's problem domain.  The point is to leverage syntax we already have to create meaningful configuration files.&lt;/p&gt;
&lt;p&gt;&amp;quot;Python is sometimes a good use for a configuration language -- such as in Django.&amp;quot;&lt;/p&gt;
&lt;p&gt;While it's true that Django does this elegantly, I'd been doing something more complex than Django's relatively clear and simple approach.  My example in &lt;a class="reference external" href="https://slott56.github.io/2008_01_19-two_python_config_file_design_patterns.html"&gt;Two Python Config-File Design Patterns&lt;/a&gt;  was a structural definition that was difficult to express in any other language.&lt;/p&gt;
&lt;p&gt;The structural configuration file was more like Django's Model definitions than a simple &amp;quot;configuration&amp;quot; file.  However, in a very real sense, it is the model which configures Django to have the data elements we want to display and persist.&lt;/p&gt;
&lt;p&gt;I've used the &lt;strong&gt;Structural Declaration&lt;/strong&gt;  pattern a number of times.  I cribbed it from the packages like urllib2 where you build up a fairly complex object from component parts.&lt;/p&gt;
&lt;div class="section" id="malicious-code"&gt;
&lt;h2&gt;Malicious Code&lt;/h2&gt;
&lt;p&gt;&amp;quot;It's a security vulnerability.&amp;quot;  While technically true that you might get &amp;quot;malicious&amp;quot; configuration from a support forum, this is an easy vulnerability to prevent.  It's configuration.  It should be obvious what it is doing.&lt;/p&gt;
&lt;p&gt;If the configuration starts to look like code -- i.e., it is no longer a strictly declarative construction -- then an architectural design expectation has been violated.  Any doubt about the content of a configuration file is a red-alert, class 1, fatal defect.  Epic Fail.&lt;/p&gt;
&lt;p&gt;The Apache configuration, for example, has code-like pattern-matching and decision-making rules.  This is a compromise because Apache needs speed, and also needs flexibility.  For this kind of thing, I would prefer a Plain-Old Python extension as a proper subclass that extends the framework.  Subclasses and extensions can preserve the distinction between &amp;quot;a few constants that are reused heavily and likely to change&amp;quot; and &amp;quot;more code to handle special cases.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="syntax-woes"&gt;
&lt;h2&gt;Syntax Woes&lt;/h2&gt;
&lt;p&gt;&amp;quot;By using Python as your configuration syntax, you force your users to learn the idiosyncrasies of Python syntax when configuring.&amp;quot;&lt;/p&gt;
&lt;p&gt;Interesting point.  I'll counter with the observation that XML syntax is opaque and .INI syntax is more obscure that Python syntax.&lt;/p&gt;
&lt;p&gt;The point of a configuration file is specifically not to write code.  The lowest level of configuration is a Django-style sequence of simple assignment statements (which is almost precisely the same syntax as an .INI file.)  The higher level is a more complex structural declaration that is more clear in Python than any .INI file.  (I know, I had to struggle with an .INI file that was a total mystery.)&lt;/p&gt;
&lt;p&gt;Also, &amp;quot;Configuration files cease to work whenever Python changes.&amp;quot;  I'm not sure how to interpret this.  Since the application is in Python, the whole house of cards collapses when Python changes.  The configuration is the least of my worries.  If I had a program in C that merely imported the Python interpreter to parse a configuration file, perhaps there's something to this consideration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diagnostics"&gt;
&lt;h2&gt;Diagnostics&lt;/h2&gt;
&lt;p&gt;&amp;quot;Errors in configuration files can be hard to diagnose for users, as it may not be clear whether the error arose from the configuration or the app itself.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is an interesting point.  There is a handy trick for this, however.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
try:
    execfile('config.py')
except Exception, e:
    logging.exception(&amp;quot;Configuration Syntax:&amp;quot;, str(e))
    sys.exit(2)
&lt;/pre&gt;
&lt;p&gt;We could, additionally, check for Python SyntaxError specifically.  We could also manipulate the traceback to produce more meaningful error messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preventing-problems"&gt;
&lt;h2&gt;Preventing Problems&lt;/h2&gt;
&lt;p&gt;The &amp;quot;malicious code injection&amp;quot; problem is good way to talk about good design and bad design.  A reasonably careful design and a little bit of looking at the configuration file will prevent problems.&lt;/p&gt;
&lt;p&gt;[Additionally, if someone is in the habit of simply installing files they got from a support forum, then perhaps they should consider a different line of work.]&lt;/p&gt;
&lt;p&gt;This malice consideration says that we need a design that makes it trivial for anyone to vet a configuration file for malicious code.  This vet-ability (a kind of maintainability) is central to any good configuration file design, irrespective of syntax.&lt;/p&gt;
&lt;p&gt;The &amp;quot;syntax&amp;quot; consideration is one of the strengths of Python.  Python syntax (for assignment statements) is as simple as .INI files, and more flexible.  The idea that the core syntax of the assignment statement could change -- while remotely possible -- isn't on the horizon any time soon.  I'm perfectly confident.&lt;/p&gt;
&lt;p&gt;Finally, the diagnostics issue gives us another direction for good design.  Any configuration file can have serious problems with improper data.  I've seen very sophisticated modules to read, parse and report problems in .INI files.  Personally, I'd like to leave out the reading and parsing part and focus on the problem detection and reporting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rules"&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;I've found a few moderately complex problems where .INI files are too simple.  The amount of crapola that has to be done to describe the configuration exceeds the capabilities of .INI files.  That's when Python really pays out handsome rewards.&lt;/p&gt;
&lt;p&gt;First, make the application robust enough that the configuration file is simple and can be inspected by someone other than the application's author.  The meaning should be manifest.&lt;/p&gt;
&lt;p&gt;Second, make the configuration simple enough that it doesn't use too much Python syntax.&lt;/p&gt;
&lt;p&gt;Third, make is easy to diagnose syntax problems; leverage what Python already does for us.  We can then concentrate on the semantics of the configuration file.  It's all about the meaning.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>The Passive-Aggressive Programmer, part II</title><link href="https://slott56.github.io/2008_03_24-the_passive_aggressive_programmer_part_ii.html" rel="alternate"></link><published>2008-03-24T13:19:00-04:00</published><updated>2008-03-24T13:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-24:/2008_03_24-the_passive_aggressive_programmer_part_ii.html</id><summary type="html">&lt;p&gt;Here are a few more Passive-Aggressive argument techniques that can derail a project. Rather than provide an alternative or improvement, this passive kind of aggression raises things which are &amp;quot;potential&amp;quot; problems or issues.  Things which serve only to raise doubts.&lt;/p&gt;
&lt;p&gt;This approach plays into the hands of risk-averse management.  It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are a few more Passive-Aggressive argument techniques that can derail a project. Rather than provide an alternative or improvement, this passive kind of aggression raises things which are &amp;quot;potential&amp;quot; problems or issues.  Things which serve only to raise doubts.&lt;/p&gt;
&lt;p&gt;This approach plays into the hands of risk-averse management.  It works really well with managers who directly equate risks with actual costs.  If, for example, there's a small chance that some component or product might be too slow, a risk-ignorant manager will hear you saying the component doesn't work.  They'll hear the train-wreck of their career in shambles because of this one component.&lt;/p&gt;
&lt;p&gt;A passive-aggressive programmer or DBA can support a risk-ignorant manager by providing the kinds of technical opinions that the manager loves to hear.  It's important to spot these so that you aren't enmeshed in a valueless discussion -- you need to redirect the P/A programmer to fact-based reasoning, not an exchange of low-probability potential defects.&lt;/p&gt;
&lt;div class="section" id="all-or-nothing"&gt;
&lt;h2&gt;All or Nothing&lt;/h2&gt;
&lt;p&gt;The first argument technique is &amp;quot;False Dichotomy&amp;quot;.  It allows one to (passively) do very little to (aggressively) undermine all progress that doesn't fit with the DBA's agenda.&lt;/p&gt;
&lt;p&gt;An example of this came up while trying to walk through an Agile process.  Note that a passive-aggressive doesn't have a &lt;em&gt;stated&lt;/em&gt;  agenda.  To me, it looks like the DBA's agenda is to begin with detailed design, preferrably focused on a confusing GUI feature like the tree display of a hierarchy.  When asked, however, they're just &amp;quot;looking for help.&amp;quot;&lt;/p&gt;
&lt;p&gt;Here's what they said (paraphrased):&lt;/p&gt;
&lt;p&gt;&amp;quot;I don't know what I'm doing because I don't understand the process, and therefore I can't execute.  For me to understand the process, I have to ask &amp;quot;Why&amp;quot; and have every step and deliverable justified.&amp;quot;&lt;/p&gt;
&lt;p&gt;I like the two false dichotomies in this argument.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There are ONLY two choices: full interrogation over every nuance (with and endless series of &amp;quot;why should we do that?&amp;quot; questions) or no questions of any kind.  Other questions (who? what? when? where? how?) don't seem to exist.  Of course, they can't exist for a true passive/aggressive because the intermediate level of understanding isn't passive enough.&lt;/li&gt;
&lt;li&gt;There are ONLY two levels of understand: ALL or NONE.  Merely having a short list of the means which lead to the desired ends isn't possible.  It isn't totally passive, it requires some effort to gain an overview of the process without all the details.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-out-of-the-trap"&gt;
&lt;h2&gt;Getting Out of the Trap&lt;/h2&gt;
&lt;p&gt;Confronted with questions on methodology, my first instinct was to explain and justify Agile techniques.  That didn't work because it got bogged down in the &amp;quot;Why&amp;quot; questions which amounted to &amp;quot;Why not just do it my way?  Why not do Big Design Up Front?&amp;quot; I couldn't see any use case, so it wasn't clear to me what -- if any -- point there was to all the coding.  Beginning at the beginning (with the users) appears to be anethema.  Of course, a true passive/aggressive won't say anything, they just won't do anything, either.&lt;/p&gt;
&lt;p&gt;My second attempt was to use a &amp;quot;just try it&amp;quot; (sometimes called the &amp;quot;shut up and move forward&amp;quot; approach).  That didn't work, either.  Consistent with the passivity, there is no sense of &amp;quot;forward&amp;quot;, apparently.  Each activity (define an actor, write a use case, prioritize, update the architecture, write test cases, etc.) appears as just another zero-value &amp;quot;make-work&amp;quot; step executed in a complete intellectual vacuum.  The passive/aggressive can't know everything, so they must know nothing [See?  There's no middle ground.]  How the activities fit together is, consequently, unknowable.&lt;/p&gt;
&lt;p&gt;The next attempt (sigh) is going to be Socratic Method -- what do you think you're doing?  why are you doing it? what's the value? what are the means? what are the ends? who's your audience?  That will likely turn into the endless series of &amp;quot;Why's&amp;quot; -- except this time from my side to try and illuminate the costs of a waterfall approach; worse, an approach that begins with detailed design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-you-say-so"&gt;
&lt;h2&gt;If You Say So&lt;/h2&gt;
&lt;p&gt;Another popular argument technique is a kind of &amp;quot;Appeal to Authority&amp;quot; that absolves the P/A of responsibility.  Here's a recent quote from a DBA -- a DBA who knows Java, by the way.&lt;/p&gt;
&lt;p&gt;&amp;quot;If you say that it can be done, I am sure that it can be done.  I don't know enough Java to be able to do this. I will assume that professional Java developers will know how to do this.&amp;quot;&lt;/p&gt;
&lt;p&gt;In short, the DBA is declaring that there is risk of failure; the risk stems from a murky Java technique; the technique is so murky that &amp;quot;ordinary&amp;quot; software folks can't understand it; therefore, the risk is so certain that it is essentially a cost (not a probability of a cost, but a direct cost).  The DBA is absolutely sure that no one can do the required programming.  The DBA knows Java, that's not the question.&lt;/p&gt;
&lt;p&gt;What's the topic?  Logging changes from the &lt;strong&gt;setter&lt;/strong&gt;  methods of a class. This is the canonical example of the &lt;strong&gt;Memento&lt;/strong&gt;  design pattern, implemented as a common aspect of the set methods.  It can be done, trivially, by adding a subclass to the java.util.logger that will write specialized log entries to a database table.  [The logging itself can be added as an aspect using an annotation.]  Indeed, this is summarized in &lt;a class="reference external" href="http://static.springframework.org/spring/docs/2.0.x/reference/aop.html"&gt;Chapter 6&lt;/a&gt;  of the Spring 2.0.x manual.  Also, &lt;a class="reference external" href="http://www.scribd.com/doc/244373/Advanced-Spring-Framework"&gt;http://www.scribd.com/doc/244373/Advanced-Spring-Framework&lt;/a&gt;  and many other places that describe the intimate relationship between Spring, Hibernate and Annotations.  Examples include &lt;a class="reference external" href="http://www.devx.com/Java/Article/30799"&gt;http://www.devx.com/Java/Article/30799&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;It appears that the specific technique of logging changes in a set method is being questioned.  Perhaps it's something else.  I can't say; primarily because I can't get more detailed objections defined.&lt;/p&gt;
&lt;p&gt;The alternative appears to be some kind of Interceptor in Hibernate which captures all changes and logs them.  See &lt;a class="reference external" href="http://www.hibernate.org/195.html"&gt;http://www.hibernate.org/195.html&lt;/a&gt;  for the code.  This interceptor, of course, would be part of Hibernate, divorced from the application; making it difficult to configure properly.  You rarely need audit logging of &amp;quot;everything&amp;quot;; it's usually focused on critical pieces of information.  Further, you need to know what the audit log &amp;quot;means&amp;quot;.  Simply logging all kinds of random DB changes never very meaningful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prevention"&gt;
&lt;h2&gt;Prevention&lt;/h2&gt;
&lt;p&gt;It's hard to prevent False Dichotomy arguments.  Many non-technical types want things &amp;quot;simplified&amp;quot; and will demand enough simplification until they get to a false dichotomy.  If you provide additional information, it's deprecated as &amp;quot;needless nuance&amp;quot; or &amp;quot;technical hand-wringing.&amp;quot;&lt;/p&gt;
&lt;p&gt;The best you can do is keep using phrases like &amp;quot;amongst other choices&amp;quot; to emphasize that the dichotomy is a simplification, not the whole story.&lt;/p&gt;
&lt;p&gt;Appeals to Authority are even harder to prevent.  You cannot address these without working code.  Omit any part of the application from a Proof of Concept (or Technology Spike) and you may have opened the door for further &amp;quot;if you say so, but we still don't believe it&amp;quot; conversations.&lt;/p&gt;
&lt;p&gt;An alternative answer is to provide the supplemental education.  The reluctant DBA would have to actually learn a tiny bit more Java programming to see what a getter/setter is all about. And they don't have time for this; they prefer to assert that a common aspect across all setter methods is &amp;quot;risky&amp;quot; without defining the actual risks.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Consequences of Reverse Engineering</title><link href="https://slott56.github.io/2008_03_13-consequences_of_reverse_engineering.html" rel="alternate"></link><published>2008-03-13T23:43:00-04:00</published><updated>2008-03-13T23:43:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-13:/2008_03_13-consequences_of_reverse_engineering.html</id><summary type="html">&lt;p&gt;Here's one recent example of a significant bug.&lt;/p&gt;
&lt;p&gt;The code said A is not NULL OrElse A != &amp;quot; &amp;quot;, which doesn't do anything useful.  If A has non-NULL data, this is true.  The second part of the clause (A != &amp;quot; &amp;quot;) is only evaluated if A is NULL.  If A is NULL, no other …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's one recent example of a significant bug.&lt;/p&gt;
&lt;p&gt;The code said A is not NULL OrElse A != &amp;quot; &amp;quot;, which doesn't do anything useful.  If A has non-NULL data, this is true.  The second part of the clause (A != &amp;quot; &amp;quot;) is only evaluated if A is NULL.  If A is NULL, no other comparison makes sense.  That's what NULL means.&lt;/p&gt;
&lt;p&gt;The usual form of this is  A is not NULL AndAlso A != &amp;quot; &amp;quot;.  The inverse is A is NULL OrElse A = &amp;quot; &amp;quot;.  Any other variation on these two is a common logic error.&lt;/p&gt;
&lt;p&gt;So, what test cases are we inserting to show we reverse engineered this correctly?&lt;/p&gt;
&lt;div class="section" id="craposity"&gt;
&lt;h2&gt;Craposity&lt;/h2&gt;
&lt;p&gt;All I can do is gripe about the level of craposity that accretes around VB.  A colleague noted that the .NET environment doesn't do this, it's just shoddy craftsmanship.&lt;/p&gt;
&lt;p&gt;I noted that it seems to be all I ever see -- really spankingly shoddy VB code. Indeed, I got a brain cramp of the first magnitude yesterday looking at the example shown above; code that -- merely by inspection -- could be shown to do nothing useful.  And, of course, most VB products as a whole was built with COPY-Relocate-and-PASTE (&lt;strong&gt;CRAP&lt;/strong&gt;™) reuse.&lt;/p&gt;
&lt;p&gt;I have to agree that it probably isn't the toolset.  That leads me to deduce that either all VB programmers are idiots or my sample is biased.  It must be that I only look at code that's &amp;quot;too expensive to maintain in its current form&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-it-solves-a-problem"&gt;
&lt;h2&gt;But It Solves A Problem&lt;/h2&gt;
&lt;p&gt;This means that any random idiot is capable of solving a business problem with a program that's an atrocity in .EXE format.&lt;/p&gt;
&lt;p&gt;That leads me to conclude that business problems (generally) are so Huge and Obvious that it doesn't take any skill at all to find and solve them.  Which leads me to ask why we require armies of Business Analysts, Program Managers, Directors of Software Development and what-not.  All of that management oversight doesn't stop a class-A idiot from writing a deeply disturbing pile of code which becomes an organizational lynch-pin.&lt;/p&gt;
&lt;p&gt;Or, is all that management oversight the cause of the idiocy, not a failure to stop the idiocy?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="magic-management"&gt;
&lt;h2&gt;Magic Management&lt;/h2&gt;
&lt;p&gt;JB noted that some programmers work through a process of voodoo and witchcraft, and don't really understand much of what they're doing.  Hence the prevalence of COPY-Relocate-and-PASTE reuse.  They can't refactor because they're not sure it's really appropriate.&lt;/p&gt;
&lt;p&gt;Management, of course, forces this to happen by imposing nutball schedules and demanding that useful work stop because it's &amp;quot;gold plating&amp;quot;.  While lack of skills is the cause, management's policy is to enable bad behavior.&lt;/p&gt;
&lt;p&gt;I guess that improvements can only happen by magic.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Physical Database Design Questions -- Some Inner Mysteries</title><link href="https://slott56.github.io/2008_03_01-physical_database_design_questions_some_inner_mysteries.html" rel="alternate"></link><published>2008-03-01T19:35:00-05:00</published><updated>2008-03-01T19:35:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-01:/2008_03_01-physical_database_design_questions_some_inner_mysteries.html</id><summary type="html">&lt;p&gt;I have to say this first -- just because ERwin calls it &amp;quot;physical&amp;quot; that doesn't mean anything.  ERwin uses &amp;quot;physical&amp;quot; model to mean &amp;quot;product-specific logical&amp;quot; model.  They use &amp;quot;logical&amp;quot; to mean &amp;quot;product-independent logical&amp;quot; model.&lt;/p&gt;
&lt;p&gt;ERwin doesn't do &lt;em&gt;physical&lt;/em&gt;  modeling.  Not even a little bit.  The physical layer of a relational database …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have to say this first -- just because ERwin calls it &amp;quot;physical&amp;quot; that doesn't mean anything.  ERwin uses &amp;quot;physical&amp;quot; model to mean &amp;quot;product-specific logical&amp;quot; model.  They use &amp;quot;logical&amp;quot; to mean &amp;quot;product-independent logical&amp;quot; model.&lt;/p&gt;
&lt;p&gt;ERwin doesn't do &lt;em&gt;physical&lt;/em&gt;  modeling.  Not even a little bit.  The physical layer of a relational database occurs down at the file system level.  Codd's &amp;quot;Rule 8&amp;quot; (Physical Data Independence) says that the things we're designing in ERwin (and similar tools) are the things our application depends on; the things we're &lt;strong&gt;not&lt;/strong&gt;  designing, therefore, must be physical.&lt;/p&gt;
&lt;p&gt;The physical implementations underlying Oracle, Postgres, DB2, MySQL, SQL/Server (and even SQLite) are all different.  These physical models have &lt;em&gt;nothing&lt;/em&gt;  to do with the SQL standard; that's the central tenet of Codd's Rule 8.  These implementations are so different as to defy a standardized modeling tool.  All you can ever use for physical modeling is a generic UML tool.&lt;/p&gt;
&lt;div class="section" id="compression"&gt;
&lt;h2&gt;Compression&lt;/h2&gt;
&lt;p&gt;I was asked about the value of compression.  Years ago, we depended on the clever compression schemes of &lt;a class="reference external" href="http://www.oracle.com/technology/products/rdb/index.html"&gt;Oracle RDB&lt;/a&gt; .  Oracle 10g has table compression.  DB2 has tablespace compression.&lt;/p&gt;
&lt;p&gt;This is a physical design technique.  It's invisible to the SQL application programmer.  It can speed up certain types of queries.&lt;/p&gt;
&lt;p&gt;The final trade-offs can only be determined empirically.  You have to process real data through a reasonably complete application to get a benchmark.  Then you rework your database to compress things and see if it runs faster where you need it to run faster, and hasn't gotten any worse elsewhere.&lt;/p&gt;
&lt;p&gt;I was shocked that someone would ask about the value of compression.  Anything that involves a table scan will be faster with compressed data.  Fewer physical reads means faster.  It's that simple.  (Yes, there's a CPU cost, the impact depends on the actual mix of updates, inserts and selects.)&lt;/p&gt;
&lt;p&gt;I tried to probe the DBA to see precisely what the confusion was, but didn't get much of an answer.  As near as I can tell, there are some restrictions imposed by Oracle on how one can alter a compressed table; this had somehow confounded things.  As a practical matter, the restrictions imposed by the RDBMS don't matter much.  Many database structural changes are the kind of thing that can't be done with ALTER; you have to clone the old table, drop and rebuild it, and then reload the new table(s) from the clone.&lt;/p&gt;
&lt;p&gt;Administration aside, compression is simple.  For data warehouses, it helps a lot.  You have to measure the impact across all use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="partitioning"&gt;
&lt;h2&gt;Partitioning&lt;/h2&gt;
&lt;p&gt;I was asked about partitioning.   Oracle has some performance tuning guidelines which were bothersome or confusing or both.&lt;/p&gt;
&lt;p&gt;Note that there are several dimensions to partitioning.  One can do &amp;quot;vertical&amp;quot; partitioning where a table is split into two portions that have a mandatory 1:1 relationship.  This can be done to separate data elements, potentially improving concurrency.  This is a logical design technique, since an application programmer will have to know which partition has the appropriate columns.&lt;/p&gt;
&lt;p&gt;A &amp;quot;horizontal&amp;quot; partition splits a table into sections that can be allocated to multiple physical tablespaces.  This is a physical design technique, since it's invisible to the SQL programmer.  Partitions can be defined around some key or can be more-or-less arbitrary.&lt;/p&gt;
&lt;p&gt;The idea is to spread the I/O load around among multiple devices, improving concurrency.  This isn't like compression, where we do fewer reads.  However, doing the reads concurrently can improve the elapsed time to query data.&lt;/p&gt;
&lt;p&gt;Note that storage arrays often do this for us, seamlessly, silently and outside the database.  If we define the right kind of striped logical volume, then the file system itself will spread the file blocks across multiple physical locations.  The kind of sequential read that implements a table scan will work with multiple, concurrent physical reads.&lt;/p&gt;
&lt;p&gt;If the file system can't do this, we can have the RDBMS do it.  Having it done in both tiers of the architecture is actually bad because one tier can undo the other tier's performance optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tuning"&gt;
&lt;h2&gt;Tuning&lt;/h2&gt;
&lt;p&gt;Oracle says that -- if you can -- keep your partition sizes approximately equal.  This is silly advice, since it can be very hard to implement.  Your data has the distribution it has.  Further, the equal-sized partition rule is only to get &amp;quot;optimal&amp;quot; performance.  If all partitions are about the same size, they can all be scanned in about the same amount of time.&lt;/p&gt;
&lt;p&gt;If one partition is bigger, it will be slower.  This may be sub-optimal, but it still beats the performance of an unpartitioned table.&lt;/p&gt;
&lt;p&gt;This &amp;quot;balancing&amp;quot; issue becomes a kind of fetish for DBA's.  They start to do sophisticated statistical summaries and analysis of the various keys trying to locate a way to even out the partition sizes consistent with the application design and architecture.&lt;/p&gt;
&lt;p&gt;This can become a burdensome load of hooey.  Use partitions that make sense.  For those rare, ultra-high-performance applications, use a hash partition and be happy knowing it's faster than unpartitioned data.  Don't fetishize about keeping the partitions equal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vsam-files"&gt;
&lt;h2&gt;VSAM Files&lt;/h2&gt;
&lt;p&gt;Yes, &lt;a class="reference external" href="http://publib.boulder.ibm.com/infocenter/pdthelp/v1r1/index.jsp?topic=/com.ibm.entcobol4.doc/cpvsm04.htm"&gt;VSAM&lt;/a&gt;  flat-files are still in use.  All VSAM I/O (in spite of the V meaning &amp;quot;Virtual&amp;quot;) is essentially physical I/O.  VSAM files can be read, written, and searched using ultra-complex algorithms.  Algorithms that aren't remotely compatible with SQL's simplified view of the world.  I know, I wrote some.&lt;/p&gt;
&lt;p&gt;Recently, we've spent a lot of time talking about replacing some VSAM files with a proper relational database.  The fantasy is that we can neatly excise this physical I/O and replace it with SQL statements, leaving the rest of the program more-or-less intact.  Clearly, they haven't spent enough time trying to reverse engineer COBOL programs.&lt;/p&gt;
&lt;p&gt;COBOL programs that process VSAM files rarely have a structure that involves an algorithm like a simple cursor fetch loop or SQL update statement.  Instead, these programs have obscure structures that depend on numerous details of the file organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unifying-theme"&gt;
&lt;h2&gt;Unifying Theme&lt;/h2&gt;
&lt;p&gt;Here's the unifying theme: a few programmers have gotten so used to SQL that they think it's low-level I/O.  They've forgotten the underlying physical implementation.&lt;/p&gt;
&lt;p&gt;They've lost sight of the physical reads and how reducing the physical reads makes table scans go faster.&lt;/p&gt;
&lt;p&gt;They've fetishized subtle load-balancing issues, forgetting that any parallel I/O is better than no parallel I/O.&lt;/p&gt;
&lt;p&gt;They think that all programs have elegant SQL-like fetch loops, updates or inserts.  Legacy COBOL programs can be peculiarly obscure.  It is often simpler to dispose of the old VSAM program rather than rewrite it to use SQL.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Why Agile? What's the Point?</title><link href="https://slott56.github.io/2008_02_14-why_agile_whats_the_point.html" rel="alternate"></link><published>2008-02-14T11:06:00-05:00</published><updated>2008-02-14T11:06:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-02-14:/2008_02_14-why_agile_whats_the_point.html</id><summary type="html">&lt;p&gt;TC's full quote was &amp;quot;We consume a significant portion of the overall contract generating a functional specification whose sole use is to serve as the outline for the acceptance test. Those who choose to argue this point might like to explain the recurring customer comment 'You did an excellent job …&lt;/p&gt;</summary><content type="html">&lt;p&gt;TC's full quote was &amp;quot;We consume a significant portion of the overall contract generating a functional specification whose sole use is to serve as the outline for the acceptance test. Those who choose to argue this point might like to explain the recurring customer comment 'You did an excellent job and built exactly what we asked for; it’s just not what we really want.'&amp;quot;.&lt;/p&gt;
&lt;p&gt;I love that customer comment.  It's an admission that the &amp;quot;write requirements, get bids, monitor the contract&amp;quot; waterfall model of software procurement doesn't work for our customers.  This kind of quote means that they'll be open to a practice that tackles problems rather than manages creation of deliverables.&lt;/p&gt;
&lt;p&gt;The things that sold Agile methods to me are the following:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Software is Knowledge&lt;/strong&gt;. This means that software development is knowledge capture.  The resulting knowledge has to be so thorough and complete that a lump of fused beach sand can perform the required functions. (If you don't think software development is knowledge capture, what else can you possibly describe it as?)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Users Lie&lt;/strong&gt;.  (Okay, maybe they assume or make mistakes.)  You can either fight against it or leverage it.&lt;/p&gt;
&lt;p&gt;Knowledge is only revealed through an exploratory conversation.  People often make mistakes and assumptions without realizing the consequences.  You can document it, but that invests money in capturing the lie – which helps how?  This isn't a political debate where we're playing &amp;quot;spot the flip-flop.&amp;quot;  You need to capture the knowledge as software in a variety of drafts and revisions to reveal the problems.  “It looks good on paper, but…”  It &lt;em&gt;always&lt;/em&gt;  looks good on paper.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Risk accrues&lt;/strong&gt;.  Either tackle it up front in small pieces, or suffer the consequences of being swamped by a large amount of risk later.  Again, you can try to think your way through all the risks, or you can think your way through the biggest risk first.  Which is a better investment: tackle one really hard problem and &lt;strong&gt;solve&lt;/strong&gt;  it, or enumerate all possible problems without solving anything?  I think a solution in hand is worth two problems in the bush.&lt;/p&gt;
&lt;p&gt;Risk has two components.  There’s technical risk (do we really know the technology) and application risk (do we really know the application.)  You can control #1 with education; you cannot control #2 under any circumstances.  Why bother &amp;quot;controlling&amp;quot; it?  How about recognize it and manage it through an exploratory conversation and incremental tackling of risk?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Scope Creep is Not Bad&lt;/strong&gt;.  It's reality (see #2, above).  You can either fight against it or leverage it.  To leverage it, make scope change possible.  In particular, make scope contraction possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Tools Matter&lt;/strong&gt;.   Use the highest-level tools possible for this “knowledge capture” exercise.  C++ is not a civilized way to build application software.  A few performance-critical pieces, maybe; but whole applications?  Never.  You absolutely need Test-Driven Development and a toolset that supports it.  Java (and JUnit) are minimally acceptable.  Python (and unittest) rule.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There's a bunch of education involved in making this case to folks who are habituated to a waterfall methodology.  My suggestion is to start with the &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; .  Move on to customer conversations.  Then pitch a &lt;a class="reference external" href="http://www.controlchaos.com/"&gt;scrum&lt;/a&gt; -based or scrum-like project.&lt;/p&gt;
&lt;div class="section" id="current-work"&gt;
&lt;h2&gt;Current Work&lt;/h2&gt;
&lt;p&gt;I just sold a multi-year scrum project by telling the customer that it will take several years of 5 to 8 people a year slugging away at it. We start Monday.  The first few years will have more intensive levels of effort.  After a while the work will subside from the initial development to ongoing maintenance and support.  They'd been building and using the software for 30 years -- we weren't going to replace it in 18 months.&lt;/p&gt;
&lt;p&gt;I specifically told them that there's no &amp;quot;scope&amp;quot; that they (or we) can properly define in terms a lawyer or accountant could understand.  The software we're renovating is too entrenched, embedded, and deep-seated to cleanly separate as a distinct &amp;quot;system&amp;quot; or &amp;quot;package&amp;quot;.  We will renovate until they tell us to stop.  At that point, we guarantee software that's a better fit to the business, more adaptable, more maintainable.&lt;/p&gt;
&lt;p&gt;We can't -- up front -- guarantee a finite, definite scope.  We do, however, promise to use all of the time they allocate to the project for customer reviews, priority settings and unit test development.  We can't work on this alone -- it requires deep end-user engagement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-s-the-risk"&gt;
&lt;h2&gt;Where's the Risk?&lt;/h2&gt;
&lt;p&gt;TC's initial comment was on eliminating what he saw as a huge amount risk in a waterfall methodology. He (correctly) saw that an incremental methodology -- badly applied -- doesn't shift the risk burden.&lt;/p&gt;
&lt;p&gt;Where are our risks?  Customer knowledge of the business?  We're building incrementally.  They can lie because it only affects the very next sprint.  Not the whole &amp;quot;project&amp;quot;.   The &amp;quot;customer cooperation&amp;quot; factor is a huge problem in the waterfall methodology.  Here, it's a sprint's worth of problem, little more.&lt;/p&gt;
&lt;p&gt;Knowledge of the technology?  Again, we're tackling things in pieces, we're only looking at one sprint's worth of confusion or problem-solving.&lt;/p&gt;
&lt;p&gt;What about the &amp;quot;devastating change&amp;quot; that always seems to occur late in the project?  First, that's often because someone said &amp;quot;Hard-Part-Do-Later&amp;quot;.  That's just bad practice.  Second, that's often because of an inflexible, untestable design.  Test-Driven Development and ultra-high-powered tools mitigates this.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>The Waterfall's Not Working -- Even A Client Said So</title><link href="https://slott56.github.io/2008_02_11-the_waterfalls_not_working_even_a_client_said_so.html" rel="alternate"></link><published>2008-02-11T11:23:00-05:00</published><updated>2008-02-11T11:23:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-02-11:/2008_02_11-the_waterfalls_not_working_even_a_client_said_so.html</id><summary type="html">&lt;p&gt;TC Writes &amp;quot;With 30 years in the biz, I’ve experienced all the pains associated with a rigid linear approach (functional spec -&amp;gt; design doc -&amp;gt; code -&amp;gt; integrate -&amp;gt; acceptance test, always being sure to maintain a current version of the traceability matrix). An iterative approach is inherently more appealing, but I’m …&lt;/p&gt;</summary><content type="html">&lt;p&gt;TC Writes &amp;quot;With 30 years in the biz, I’ve experienced all the pains associated with a rigid linear approach (functional spec -&amp;gt; design doc -&amp;gt; code -&amp;gt; integrate -&amp;gt; acceptance test, always being sure to maintain a current version of the traceability matrix). An iterative approach is inherently more appealing, but I’m damned if I can see how you can use this approach in [a Firm Fixed Price] environment without a huge amount of contingency/risk money buried in the costing.&amp;quot;&lt;/p&gt;
&lt;p&gt;Clearly, some kind of iterative approach that allows us to fine-tune the deliverables is needed.  However, The core objection is the hand-wringing over risk management.&lt;/p&gt;
&lt;p&gt;We need to get past our standard going-in position of “The Software we build will be X, the whole X and nothing but X so help us God.”&lt;/p&gt;
&lt;p&gt;There are two approaches.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can iterate the waterfall approach with smaller waterfalls.&lt;/li&gt;
&lt;li&gt;You can ditch waterfalls, entirely, and try to step outside the box to take an Agile tack on this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's important is this.  There’s no more risk in Agile (or small waterfalls) than there was in the big waterfall.  Each small waterfall is small risk, and it’s spread through the project.  People (specifically, project managers) try to say that iterative approaches have &amp;quot;a huge amount of contingency/risk&amp;quot; because they worry that a later waterfall will have a devastating change an earlier earlier waterfall, leading to a giant wave of unplanned rework.  They’re simply wrong about later phases devastating earlier phases.&lt;/p&gt;
&lt;p&gt;If you want to iterate successfully, you have to start with the hardest part first.  The part that entails the most business or technical risk (or both, if things are really bad.)  By doing the hard part first, the remaining waterfalls will NEVER have as much risk as the ones already past.  And you know early on how you stand regarding business (or technology) problems.  They call this the “Spiral Model”.  You spiral out from the really hard, high risk bits, doing Functional Spec -&amp;gt; Design Doc -&amp;gt; Code/Test -&amp;gt; Release over and over again.&lt;/p&gt;
&lt;p&gt;Sometimes this isn’t very satisfying because it’s still a series of fixed, unthinking waterfalls, in which a lesson learned isn’t an improvement, it’s scope creep.  When lessons learned are considered bad – because they knocked the Fixed out of Firm Fixed Price -- you can’t really be very successful, only marginally better at risk reduction.&lt;/p&gt;
&lt;div class="section" id="can-we-iterate-without-the-customers-buy-in"&gt;
&lt;h2&gt;Can We Iterate Without the Customer’s Buy-In?&lt;/h2&gt;
&lt;p&gt;You can start doing iterative spiral development any time you want.  You don't need to involve the customer.  To do this, you must rank the business or technology problems from high risk to low risk and focus on the high risk first.&lt;/p&gt;
&lt;p&gt;It's really important to note that you haven’t added any risk dollars by iterating.  Indeed, you’ve probably reduced the practical impact of risk by tackling the worst cases first.  Each solved problem reduces your risk budget, but you never reduce your price.  Each solved problem transfers money from contingency to profit.  Why not start with the hardest problem first?&lt;/p&gt;
&lt;p&gt;This, however, doesn’t really help the customer much.  You’ve just optimized your side of the risk equation without giving them a chance to optimize their side.  Enter the Agile approach.  If you pass the savings on to them, you will probably do even better at this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="agility"&gt;
&lt;h2&gt;Agility&lt;/h2&gt;
&lt;p&gt;Your initial problem sounds like you’re describing the &lt;strong&gt;Standard Relationship&lt;/strong&gt;: (1) define X, then (2) execute a plan which can only lead to X.  Some like to call this &amp;quot;risk reduction&amp;quot;.  Any deviation from the plan is a &amp;quot;risk&amp;quot; of &amp;quot;slippage&amp;quot; or &amp;quot;scope creep&amp;quot;.  Even meaningful lessons learned – if they alter the scope – are evil.&lt;/p&gt;
&lt;p&gt;Remember, managers don’t understand the functionality or the value.  They only understand cost and schedule.  Since they don’t get the delivered functionality, they can’t manage the delivery of value, they can only manage the calendar.&lt;/p&gt;
&lt;p&gt;So, there’s no way to avoid a rigid linear approach if you’re forced to make a rigid, linear promise.&lt;/p&gt;
&lt;p&gt;Response (chime in with me, if you’ve heard this one before): &amp;quot;But that’s what our customers expect/demand: a rigid promise to build X for $.&amp;quot;&lt;/p&gt;
&lt;p&gt;Really?  Do our customer's really expect this, or is this a cultural bias that our company has?&lt;/p&gt;
&lt;p&gt;Don't our customers really want us to solve problem Y for them?  And aren't they suggesting that software X is a good approach?  A notional approach?  Or are they claiming that they're giving us the absolute, final, non-negotiable approach?&lt;/p&gt;
&lt;p&gt;Agile specifically requires that you change the relationship from “Build X or Get Sued” to “Sneak up on solving problem Y through a series of software releases, each of which does something useful.”&lt;/p&gt;
&lt;p&gt;Agile says that problem Y must be solved.  It further says that software X seems like the solution, for now.  Most importantly, it requires the buyers and the developers have a dialog where the buyers prioritize meaningful, valuable pieces of the problem and the developers commit to something that solves that valuable, meaningful piece of the problem.  No one promises or expects delivery of X, but they do require that we (collectively) solve a piece of problem Y.&lt;/p&gt;
&lt;p&gt;If your customer really does expect/demand “Build X or Get Sued”, then Agility doesn’t interest them.  They’re playing a game with “risk” and you’re not going to get far unless you are allowed to sit down and talk candidly about what’s realistic and how they might be able to sneak up on solving Y without a formal, rigid contract.  You may not get far with this because many, many people don’t see the distinction between Build X and Solve Y.  They have to assume that X is the ONLY solution to Y, otherwise, well, anything could be on the table and that’s just chaos.  Dogs and cats sleeping together.  Dead rising from the grave.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="firm-fixed-price-is-specifically-anti-agile"&gt;
&lt;h2&gt;Firm Fixed Price is specifically Anti-Agile&lt;/h2&gt;
&lt;p&gt;Here’s the Horror Story that our management worries about.&lt;/p&gt;
&lt;p&gt;You pitch developing a solution using Iterative (or even Agile) techniques.  The Customer agrees and allocates full-time end-user resources to solving the problem.  You sit at the whiteboard on day 1 and ask them what’s the biggest, knottiest, most horrible part of the problem?&lt;/p&gt;
&lt;p&gt;They tell you about a MS-Access spreadsheet that’s just crap and makes their lives miserable.&lt;/p&gt;
&lt;p&gt;Wait! you say.  &amp;quot;Wasn’t this about fixing the scanning and the shipping and the label printing?&amp;quot;  &amp;quot;Well,&amp;quot; they admit, &amp;quot;Sure, that’s nice, too.&amp;quot;  It turns out that the high cost item isn't some slick new functionality, it's their inability to do some high-value, high-visibility business function because they started in MS-Access and it didn't scale.&lt;/p&gt;
&lt;p&gt;So, you replace the MS-Access database, providing an 80% solution.  Users happy.  Sadly, merely 8 weeks of budget spent.  Hardly any real money involved in this.  Nowhere near your budgetary estimate of 6 people for 8 months.&lt;/p&gt;
&lt;p&gt;Now, priority two is to fix the various feeds to and from the database.  This COULD involve reworking the scanning and the label printing and the Symbol-brand hand-held scanners.  But, you’ll solve 80% of what’s left with some relatively low-rent data transformations written in Python.   The scanning and printing and Symbol stuff bumps down to priority three.&lt;/p&gt;
&lt;p&gt;After the feeds and reports are fixed, priority three isn’t looking very interesting any more because – uhhh – the database you fixed on step 1 – it’s wrong.  Has always been wrong.  Before, they couldn’t see how wrong it was, but now that you fixed it and got the feeds right… uhhh… this is embarrassing, but, the fundamental business model has a gap in it.  So, could you kindly pack up and go home while they figure out what to do next?&lt;/p&gt;
&lt;p&gt;The project was – what? – cancelled?  Successful?  Scope-crept out of existence?  On hold?  What exactly happened there?&lt;/p&gt;
&lt;p&gt;The good news is that it was hugely valuable.  The bad news is that it did not actually deliver the original vision, using the original budget or scope.  Or anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="good-news-bad-news"&gt;
&lt;h2&gt;Good News / Bad News&lt;/h2&gt;
&lt;p&gt;No one wants to be involved in this kind of good news/bad news project.  Bad News always Wins.  This is universally derided as a failure.  Cancellation.  Scope problems.  Poor requirements definition.  Fail.  Fail.  Epic Fail.&lt;/p&gt;
&lt;p&gt;Agile, however, specifically demands that you look at this as delivery of value (because it was).  You didn’t meet the “original” vision because, frankly, the original vision was junk.  You did identify and make big strides toward solving the actual problem.  And, it turns out, the problem had gnarly, deeply buried root causes, that aren’t amenable to a software solution.  Few things can be better than to uncover serious institutional problems.&lt;/p&gt;
&lt;p&gt;To do this, however, you’re not building software with a firm fixed price and delivery schedule.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="paralyzed-by-the-procurement-process"&gt;
&lt;h2&gt;Paralyzed by the Procurement Process&lt;/h2&gt;
&lt;p&gt;In many cases, the procurement process tends to gloss over the problem definition – the users merely think they know, and IT has to pretend that the users actually know.  IT's governance process requires that someone fabricate some financial projection (phrases like “ROI” and “payback period” are prominently featured in the projection.)  [It’s insane because there aren’t a lot of facts backing it up; often none.]  So, IT then writes a “requirements document” full of techno-mumbo-jumbo in which the &lt;em&gt;problem&lt;/em&gt;  is not well characterized.  The solution, however, is described in glorious detail -- most of it non-functional quality attributes.&lt;/p&gt;
&lt;p&gt;You – as vendor – can’t figure out the priorities of any requirements because you can’t see what’s the biggest, costliest, ugliest part of the original problem, and what software features would make a meaningful dent in the costly, ugly part.&lt;/p&gt;
&lt;p&gt;If they want a firm, fixed price, you can’t really have Agile (or even Iterative) conversations, because they can’t adjust their priorities and still have a fixed price.  Further, they may not be able to disentangle the proposed solution, X, from the original business problem, Y.  It’s not that they won’t.  It’s that they aren’t empowered to make trade-off decisions, since tradeoffs would change scope, which changes price which takes “fixed” out of it.  And scope changes, as noted above, are evil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to Do?&lt;/h2&gt;
&lt;p&gt;The “fixed price” question is sometimes rather silly.  Often, it’s a question of “I have $$$ to spend, do you think you can solve problem Y?”  So they give you specs for X, you quote a price, it’s too high so they amend the specs for X2 and you circle around.  Or the price is too low, and they're suspicious and don’t award it.  They don’t learn much; neither do you.  They have the price of $$$ in mind, and you have to guess the number they’re thinking of.&lt;/p&gt;
&lt;p&gt;On the other hand, some customers are doing legitimate thinking, and just want to know how much they need to allocate.  The problem is real and they’re not just playing risk/cost/budget/schedule games.  However, their procurement policy may still stymie them.&lt;/p&gt;
&lt;p&gt;The only way to start the Agile conversation is to convince them of the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;It will take a long time and a lot of money.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You can fork it over now as a Firm-Fixed Price payment.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Or you can fork it over in pieces.&lt;/strong&gt;   We’ll commit the first piece, only.  After that, you can decide to fork over more, or declare the problem solved.  You only pay for the Next Thing; but you have to actively manage the selection of the Next Thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“What about an over-all budget for this so-called-Agile-process?”  [“I won’t hold you to it, I just need a number for next year’s budget.”  Right.  And you’ll still respect me in the morning.]&lt;/p&gt;
&lt;p&gt;Here’s the easy answer:  “What’s it costing you today?” Problem Y costs you $$$ per month?  Base the budget on that.  Throw four months of money at it and we’ll deliver something that will take a big chunk out of the $$$.  The savings will probably fund the remaining phases.  If they don’t, you have an easier decision 16 weeks from now: you'll know know specific, detailed, focused things that worked or didn’t work.  They'll have made a prudent, low-risk investment in information and a partial solution.&lt;/p&gt;
&lt;p&gt;Here’s the hard answer:  “How long will you be working on this?”  The team will cost $$$ per month.  Base the budget on that.  The team’s going to be in place for as long as it takes.  12*$$$ per year.  How many years?  Until the customer is satisfied.  Remember, they only budget on a yearly basis, so next year’s 12*$$$ budget is a decision they'll have to make then, not now.  Think of it this way: there are no multi-year projects, just a series of 8-week Agile deliveries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recommendations"&gt;
&lt;h2&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;Read the &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; .   Look closely at the Boehm Spiral Model, for instance in &lt;a class="reference external" href="http://safari.oreilly.com/0201729156"&gt;Metrics and Models in Software Quality Engineering&lt;/a&gt; .  Read up on &lt;a class="reference external" href="http://www.controlchaos.com/"&gt;Scrum&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Go back to the customer that recognized that we didn't solve their problem and have a frank discussion on an Agile approach.  How would they want us to structure an Agile deal?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Quantum Time: Dates, Times, DateTimes and Timestamps (3rd ed.)</title><link href="https://slott56.github.io/2008_02_09-quantum_time_dates_times_datetimes_and_timestamps_3rd_ed.html" rel="alternate"></link><published>2008-02-09T12:57:00-05:00</published><updated>2008-02-09T12:57:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-02-09:/2008_02_09-quantum_time_dates_times_datetimes_and_timestamps_3rd_ed.html</id><summary type="html">&lt;p&gt;Time is simple.  You can make it complicated with any one of a large number of dumb-as-dirt decisions.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Real World&lt;/strong&gt;™, time may be a quantum field (read stuff by &lt;a class="reference external" href="http://books.google.com/books?id=uPao7ThZEZAC"&gt;'t Hooft&lt;/a&gt; ).  For that matter, space itself may have some quantum granularity.  Or, this could be a handy hack …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Time is simple.  You can make it complicated with any one of a large number of dumb-as-dirt decisions.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Real World&lt;/strong&gt;™, time may be a quantum field (read stuff by &lt;a class="reference external" href="http://books.google.com/books?id=uPao7ThZEZAC"&gt;'t Hooft&lt;/a&gt; ).  For that matter, space itself may have some quantum granularity.  Or, this could be a handy hack the physicists have devised because it makes the math work out more simply.&lt;/p&gt;
&lt;p&gt;In Relational Databases, the digital representation of time does have a specific resolution.  A quantum of time is the microsecond.  Mostly, but not always.&lt;/p&gt;
&lt;p&gt;Time is simple, it's the calendar that's complicated.  [Okay, time may not be that simple, &lt;a class="reference external" href="http://books.google.com/books?id=lSEXAFwHvcsC"&gt;read here&lt;/a&gt; .]  For our purposes, time is linear and unidirectional, with a 1-microsecond resolution.&lt;/p&gt;
&lt;p&gt;The Gregorian calendar, on the other hand, has two sets of interlocking dimensions.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Days - which are just another unit of time: weeks, days, hours, minutes, seconds.&lt;/li&gt;
&lt;li&gt;Months and Years - which are random boundaries among days.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="bad-old-days"&gt;
&lt;h2&gt;Bad Old Days&lt;/h2&gt;
&lt;p&gt;The calendar can be made much more complicated by adhering to a 1970's view of data processing -- the view that said things like &amp;quot;this software won't be in use in 2000, don't worry about centuries.&amp;quot;  When I was a child (and thought like a child) we were told, explicitly, to omit century information.  The extra two digits, which were always &amp;quot;19&amp;quot; and were always going to be &amp;quot;19&amp;quot; didn't have any useful information.&lt;/p&gt;
&lt;p&gt;Further, we rarely had pleasant, easy-to-use calendrical calculation libraries.  The &lt;em&gt;idea&lt;/em&gt;  of a book like &lt;a class="reference external" href="http://www.amazon.com/Standard-Date-Time-Library-Programming/dp/0879304960"&gt;The Standard C Date/Time Library&lt;/a&gt;  didn't exist.  Rather than refer to great books like &lt;a class="reference external" href="http://emr.cs.uiuc.edu/home/reingold/calendar-book/index.shtml"&gt;Calendrical Calculations&lt;/a&gt; , we &amp;quot;rolled our own&amp;quot;.  Often with profound bugs.&lt;/p&gt;
&lt;p&gt;Horror Story.  At one client site, Mike had a yellow sticky note on his workstation to remind him to fix a date calculating routine in 2000.  The bug had surfaced in '92 and they worked around it.  In '96 it had surfaced again.  Rather than write the proper leap year calculation, Mike planned -- with malice aforethought -- to patch the software every four years as long as he worked there.&lt;/p&gt;
&lt;p&gt;It's the 21st century.  Using any home-brewed date or calendar library is at least crazy and perhaps criminal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="useless-data-types"&gt;
&lt;h2&gt;Useless Data Types&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;Bad Old Days&lt;/strong&gt;  lead folks to put some useless data types in the SQL standard.  By useless, I mean absolutely without value.  I consider their use a potential quality defect, and lift it up as a bug every time I encounter them.&lt;/p&gt;
&lt;p&gt;Winner of the &lt;strong&gt;Useless&lt;/strong&gt;  category is Time as a distinct data type.  Time means &amp;quot;Time-of-Day&amp;quot;, and is just the least-significant portion of a proper DateTime.  It is not atomic data except in one very specialized situation.  I'll get back to that.&lt;/p&gt;
&lt;p&gt;Runner-up in the &lt;strong&gt;Useless&lt;/strong&gt;  category is Date as a distinct data type.  Date means &amp;quot;DateTime with time set to midnight&amp;quot; and is just a way of rounding a DateTime down to the nearest Date.  Sometimes, you can make the business case that time didn't matter.  In some instances you truly have a date with no relevant time (examples follow).  More often, you have users who only want to see the Date portion of a full DateTime; this is a matter of formatting, not a matter of intentionally dropping precision.&lt;/p&gt;
&lt;p&gt;Which leaves us with DateTime (a/k/a Timestamp).  This is generally what we mean -- a point in time.  We might display just the date, or the full date and time.  We might omit fractions of seconds, or we might show just hours and minutes.&lt;/p&gt;
&lt;p&gt;Using any data type other than a full DateTime (or TimeStamp) requires some careful justification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="waste-of-storage"&gt;
&lt;h2&gt;Waste of Storage&lt;/h2&gt;
&lt;p&gt;I've been hearing the &amp;quot;waste of storage&amp;quot; malarkey for 30 years.  I'm tired of it.  A full date can be persisted in just 10 bytes.  You only need 4 bytes for a day counter, 3 bytes for a seconds-of-the-day counter (range 0 to 86,400), and 3 bytes for a microsecond counter.   A pleasant DateTime class may have dozens of methods, but not require much persistent real storage.&lt;/p&gt;
&lt;p&gt;&amp;quot;That's fine in theory,&amp;quot; they counter, &amp;quot;but we like human readable dates in our files.&amp;quot;  Yes, that does require 20 characters to record yyyy-mm-dd hh:mm:ss.ssssss.  In short, some folks prefer to (a) demand a storage wasting format and then (b) complain about the storage their storage-wasting format requires.  Sigh.  We have to truncate a perfectly good DateTime to Date.&lt;/p&gt;
&lt;p&gt;The cost of storage is falling rapidly.  We can waste serious money analyzing and justifying each date.  Or we just buy storage and move on to more interesting questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-date-round-offs"&gt;
&lt;h2&gt;Other Date Round-Offs&lt;/h2&gt;
&lt;p&gt;While we have built-in support for rounding off a DateTime to the nearest date, we rarely have much support for rounding off a DateTime to the nearest month.  I worked an application where manufacturing could only provide month and year of manufacture.  For inexplicable reasons we didn't simply call this a DateTime with a day of 1, and a time of midnight.&lt;/p&gt;
&lt;p&gt;No one could figure out how to work with a (&lt;em&gt;year&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt; ) pair.  When I arrived on the scene numerous interactive pages and reports had been developed which simply did not work correctly except for a tiny test case that involved a single record.&lt;/p&gt;
&lt;p&gt;Particularly disturbing was their mishandling of the 18-month rolling report which showed a summary of over a year of manufacturing data.  There were if-statements of a complexity that absolutely baffled me.   How could these programmers be clever enough to write that horrible, complex, opaque if-statement and not see the essential simplicity of using a month counter?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
monthCount = year*12 + month

year= monthCount // 12
month= monthCount % 12
&lt;/pre&gt;
&lt;p&gt;There's nothing more complex than the above formulas to reduce their hideous, unreadable morass of logic to  a proper &amp;quot;between&amp;quot; clause. [BTW, the project manager balked.  He wanted to deliver on-time, irrespective of readability.  I had to concoct test cases that failed before he would consider their mountain of trash as a problem.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-data-warehouse-round-off"&gt;
&lt;h2&gt;The Data Warehouse Round-Off&lt;/h2&gt;
&lt;p&gt;Data Warehouse applications have to work with the simplest possible GROUP-BY constructs.  [That's one important theme of Kimball's Data Warehouse Toolkit.]  A full DateTime, however, is often too fine-grained for data warehouse use.  Doing calculations to round a DateTime to the nearest Date (or week, or month, or quarter or year) is impractical.  What to do?&lt;/p&gt;
&lt;p&gt;The DW trick is to have a &amp;quot;Date&amp;quot; table which enumerates every day under consideration in the data warehouse.  It provides all calendrical attributes for each day, replacing all calculation with simple joins.&lt;/p&gt;
&lt;p&gt;[Don't bother saying &amp;quot;That's too much storage.&amp;quot;  Do the math first: it's not big; if you've got 20,000,000 rows of account facts, 36,524 rows of dates isn't worth discussing. You'll rarely preload a whole century of dates; if you just put in a decade, your chart of accounts will be bigger.]&lt;/p&gt;
&lt;p&gt;How do we join to the Date table?  Consistent with other DW technique, you need to break the Third Normal Form rule (&amp;quot;no derived data&amp;quot;) and carry an additional attribute that is derived from your DateTime: the FK reference to your Date table.  This FK reference is based on rounding the DateTime down to the Date only for the purposes of locate the proper Date row.&lt;/p&gt;
&lt;p&gt;If you're really strapped for storage, you might can try to separate the Date and Time parts of a DateTime.  Then you'd use both the Date and the Time as a kind of DateTime, or you'd use Date alone.  I don't like this because you orphan the Time portion of the original DateTime; Time is not an atomic attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="date-range-comparisons"&gt;
&lt;h2&gt;Date Range Comparisons&lt;/h2&gt;
&lt;p&gt;Date range comparisons are ubiquitous.  In data warehouse applications, they are an essential ingredient to managing a slowly-changing dimension.&lt;/p&gt;
&lt;p&gt;One common situation is to have a table of records that are supposed to fit together providing a seamless coverage through time.  Let's say we're working with something simple like territory changes.  A customer belongs to territory A for some range of dates, then is switched to territory B for another range of dates.&lt;/p&gt;
&lt;p&gt;We have a Customer to Territory association (sometimes called a bridge table in data warehousing circles.)&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Customer&lt;/td&gt;
&lt;td&gt;Territory&lt;/td&gt;
&lt;td&gt;Starting Date&lt;/td&gt;
&lt;td&gt;Ending Date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;3/4/05&lt;/td&gt;
&lt;td&gt;4/5/06 &lt;em&gt;(end A)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;4/5/06 &lt;em&gt;(start B)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;5/6/07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;5/6/07&lt;/td&gt;
&lt;td&gt;12/31/2199 (&amp;quot;foreseeable future&amp;quot;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is common, and very easy to query incorrectly.&lt;/p&gt;
&lt;p&gt;Specifically, look at the dates labeled &lt;em&gt;end A&lt;/em&gt; and &lt;em&gt;start B&lt;/em&gt;.  We have two choices for ways to encode these date relationships.  In both cases, we're comparing some query date, &lt;em&gt;d&lt;/em&gt;, for membership in a date range; between the start time, &lt;span class="formula"&gt;&lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;s&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;, and the end time, &lt;span class="formula"&gt;&lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;e&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Closed Interval&lt;/strong&gt;.  This is the case expressed by SQL BETWEEN: &lt;tt class="docutils literal"&gt;d BETWEEN T_s AND T_e&lt;/tt&gt;.  Some math textbooks might write this &lt;span class="formula"&gt;[&lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;s&lt;/i&gt;&lt;/sub&gt;, &lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;e&lt;/i&gt;&lt;/sub&gt;]&lt;/span&gt;.  We can also say &lt;span class="formula"&gt;&lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;s&lt;/i&gt;&lt;/sub&gt; ≤ &lt;i&gt;d&lt;/i&gt; ≤ &lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;e&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;.  Depending on the quantum resolution of time you're using, this can be pleasant or nasty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Half-Open Interval&lt;/strong&gt;.  This is the case expressed by &lt;span class="formula"&gt;&lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;s&lt;/i&gt;&lt;/sub&gt; ≤ &lt;i&gt;d&lt;/i&gt; &amp;lt; &lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;e&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;.  Some math textbooks might write this &lt;span class="formula"&gt;[&lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;s&lt;/i&gt;&lt;/sub&gt;, &lt;i&gt;T&lt;/i&gt;&lt;sub&gt;&lt;i&gt;e&lt;/i&gt;&lt;/sub&gt;)&lt;/span&gt;, to show that the interval doesn't include one end.  If you simply ban use of BETWEEN, this representation has several advantages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll look at each more closely to provide reasons why Closed Intervals (and the BETWEEN operator) are a problem waiting to happen.  Half-Open Intervals work out better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="closed-interval"&gt;
&lt;h2&gt;Closed Interval&lt;/h2&gt;
&lt;p&gt;Using a Closed Interval requires that the dates marked &lt;em&gt;end A&lt;/em&gt;  and &lt;em&gt;start B&lt;/em&gt;  above are not equal.  If they were equal, then both records would be in the result set for that matching time.  There can, however, be no gap between these two times.  If we use Date data types, then they must differ by exactly one day.&lt;/p&gt;
&lt;p&gt;However, if we use DateTime, then the DateTime value from the end of one range must differ from the end of the next range by the exact time resolution value, 1 microsecond.  Nasty.&lt;/p&gt;
&lt;p&gt;[I've had programmers say that 1 second is good enough, and the odds of a time falling into the crack are really low.  What?  We're building something that doesn't pass simple unit tests and we're going say that the odds of failure are &amp;quot;good enough&amp;quot;?]&lt;/p&gt;
&lt;p&gt;In order to insert the next territory change, we need to do two things.  We have to set the end date of the previous territory so it is no longer &amp;quot;the foreseeable future&amp;quot; and instead is the actual end date.  We have to increment that date by 1 microsecond and use that as the start date for the next territory record.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="half-open-interval"&gt;
&lt;h2&gt;Half-Open Interval&lt;/h2&gt;
&lt;p&gt;The Half-Open Interval requires that the dates marked end A and start B above are simply equal.  We're going to simply forbid the use of BETWEEN and force everyone to write Ts &amp;amp;lt;= d AND d &amp;amp;lt; Te.  Time quanta don't enter into this, since the end of one range is the same Date or DateTime value as the beginning of the next range.&lt;/p&gt;
&lt;p&gt;This is much simpler; trivially proven to be absolutely reliable and correct.  All we have to do is forbid the use of BETWEEN for dates.&lt;/p&gt;
&lt;p&gt;I've been told this will be confusing to &amp;quot;other users&amp;quot; of the database.  For this, I have one question: &amp;quot;Who specifically?&amp;quot;  We can write them a memo.  I've been told that removing BETWEEN is too onerous a burden on the developers.  Again, I have one question, &amp;quot;Who specifically?&amp;quot;  I'll work with them as long as it takes to show them the alternative formulation.&lt;/p&gt;
&lt;p&gt;The knottiest problem is &amp;quot;What about end-user queries?&amp;quot;  I'm a-waffle on this.  I don't think end-users should be afflicted with SQL.  However, if we tie up all reporting in an inefficient IT department, end-users will immediately take active steps to write their own queries.  If we aim high and provide everyone a license to a reporting tool like Business Objects, then the date ranges are hidden in the BO universe definitions.  If we can't afford that... well, &lt;strong&gt;Bad Things&lt;/strong&gt;  are pretty much inevitable.&lt;/p&gt;
&lt;p&gt;Either get proper reporting tools or provide enough education so that end users are actually coached through using the data model correctly.  A few hours of coaching beats flawed software and endless troubleshooting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pure-dates"&gt;
&lt;h2&gt;Pure Dates&lt;/h2&gt;
&lt;p&gt;Some business rules are based on a date, and the time isn't available.  These rules are universally situations where humans must supply a date.  When the system itself supplies a date, it's always a portion of a DateTime.  When humans are asked to supply a date, they are not able to provide a full DateTime.  Examples include all of the standard life milestone events like birth date, marriage date, employment start and end dates, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unbound-times"&gt;
&lt;h2&gt;Unbound Times&lt;/h2&gt;
&lt;p&gt;There's one potential use for Time, separated from DateTime.  That's when we're defining a scheduling rule.  In this very rare case, we have a time of day that is not bound to a specific date.  That's the only instance where a Time is an atomic piece of data.  In all other cases, Time is just the least significant part of DateTime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Time is simple.  Use DateTime.  Format DateTime values to show only the date portion if that's what users want.  Use Half-Open Intervals, and don't use BETWEEN.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Python's Duck Typing Not General Enough; SQL's Minimally Typed Foreign Keys Not General Enough. Debugging Hilarity Ensues.</title><link href="https://slott56.github.io/2008_02_05-pythons_duck_typing_not_general_enough_sqls_minimally_typed_foreign_keys_not_general_enough_debugging_hilarity_ensues.html" rel="alternate"></link><published>2008-02-05T02:24:00-05:00</published><updated>2008-02-05T02:24:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-02-05:/2008_02_05-pythons_duck_typing_not_general_enough_sqls_minimally_typed_foreign_keys_not_general_enough_debugging_hilarity_ensues.html</id><summary type="html">&lt;p&gt;The money quote was this &amp;quot;It’s not a big leap then for me to consolidate all three of those into one uber relationship table...&amp;quot;.&lt;/p&gt;
&lt;p&gt;The question was a good one because it involved the classic higher-order database relationship.&lt;/p&gt;
&lt;p&gt;The canonical SQL relationships are binary equi-join relationships that can be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The money quote was this &amp;quot;It’s not a big leap then for me to consolidate all three of those into one uber relationship table...&amp;quot;.&lt;/p&gt;
&lt;p&gt;The question was a good one because it involved the classic higher-order database relationship.&lt;/p&gt;
&lt;p&gt;The canonical SQL relationships are binary equi-join relationships that can be implemented with simple foreign keys.  An example design is a Group and the Members of the group is the most common example because it is a nice 1 Group to many Members relationship.  All of the Members have foreign keys that refer to the Group to which they belong.&lt;/p&gt;
&lt;p&gt;A SQL many-to-many relationship is binary, but doesn't work out as trivially.  In this specific case, we're scheduling events for specific groups.  An event has many groups, a group participates in many events.  Clearly, a single foreign key isn't going to work.&lt;/p&gt;
&lt;p&gt;The standard SQL hack is to have a many-to-many association table that links events and groups.  The association is a collection of foreign-key pairs.  Each foreign key, however, participates in a simple binary relationship.&lt;/p&gt;
&lt;div class="section" id="wrong-way-to-the-next-level"&gt;
&lt;h2&gt;Wrong Way To The Next Level&lt;/h2&gt;
&lt;p&gt;Once we start talking about groups of people, participating in events, at specific times and places, we have higher-order relationships.&lt;/p&gt;
&lt;p&gt;Something that actually appears as a valid schedule entry has at least four independent dimensions.  We have one or more groups, one time, one place, and one &amp;quot;activity&amp;quot; (lecture, lab, workshop, field trip, whatever.)  This isn't a binary relationship, it's a fourth-order relationship.  It will be higher when you also track individual people (like instructors) in addition to groups.&lt;/p&gt;
&lt;p&gt;If you start looking at this as a bunch of binary many-to-many relationships, you can easily get yourself into a &lt;strong&gt;Rat-Warren of Design Details&lt;/strong&gt;™.&lt;/p&gt;
&lt;p&gt;The list of associations in the email included ActivityToGroup, ActivityToPlace, ActivityToTime, GroupToPlace, GroupToTime, etc.  In essence they had enumerated all possible pairs from the underlying 4th order relationship.&lt;/p&gt;
&lt;p&gt;Once the architect had identified all of those binary relationships, they wanted to refactor all of them into a single Uber-Meta-Association class.  Django imposes a number of restrictions, which seemed onerous.  Even SQL's foreign keys imposed too many restrictions.  Python's duck typing didn't seem flexible enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-attractive-nuisance"&gt;
&lt;h2&gt;The Attractive Nuisance&lt;/h2&gt;
&lt;p&gt;There are many attractive nuisance features of Python and Django.  Duck Typing -- for example -- can burn up a lot of brain calories.  You begin to think of a class to define an association between objects.  A class to define the attributes of objects.  Wait, what?&lt;/p&gt;
&lt;p&gt;My suggestion was to rethink all those pair-wise foreign key relationships.  Most of them, in isolation, are meaningless because they aren't unique.  Yes, Group X participates in Activity 101.  in 3 locations at 3 separate schedules.  Almost all the many-to-manys are just a subset of one fourth-order relationship.&lt;/p&gt;
&lt;p&gt;Yes, flexibility is possible.  However, Python already provides the Uber-Meta-Association; that's what Duck Typing IS.&lt;/p&gt;
&lt;p&gt;In SQL, you could collapse a lot of binary many-to-many relationships into a generic many-to-many table.  Django wouldn't like this because Django likes more structure in the database.  To make sense of the uber-meta association table, you'd need to know which &amp;quot;base&amp;quot; tables were connected on each side of the relationship.&lt;/p&gt;
&lt;p&gt;Wait.  Wouldn't that base table identification be a kind of type declaration?  Can't you just to that in Django directly?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-advice"&gt;
&lt;h2&gt;My Advice&lt;/h2&gt;
&lt;p&gt;Step 1, lay off the coffee.  Too much thinking about creating generic generalizations of abstractions doesn't build useful software.&lt;/p&gt;
&lt;p&gt;Step 2, use higher-order associative relationships.  4th or 5th order relationships work beautifully.&lt;/p&gt;
&lt;p&gt;Step 3, build something small that works.  Get the test cases right.  Get data loaded.  It's relatively easy (in Django) to spin up a new app that is derived from an old app but adds new features.  You convert that data, switch the urls.py file and you're up and running with new features.&lt;/p&gt;
&lt;p&gt;Here's the model I proposed which eliminated all of the many-to-many relationships, replacing them with a single, higher-order relationship.&lt;/p&gt;
&lt;img alt="EventModel.png" src="https://slott56.github.io/media/EventModel.png" /&gt;
&lt;p&gt;Don't over-solve the problem you have.&lt;/p&gt;
&lt;p&gt;You've already made your application &amp;quot;future-proof&amp;quot;.  Further design effort to make this even more general isn't going to be too helpful.  You've already done the right thing by choosing high-powered tools like Python and Django that make it easy to implement a new architecture.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Open-Ended Date Ranges -- The "From Here to Eternity" Problem</title><link href="https://slott56.github.io/2008_02_02-open_ended_date_ranges_the_from_here_to_eternity_problem.html" rel="alternate"></link><published>2008-02-02T03:01:00-05:00</published><updated>2008-02-02T03:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-02-02:/2008_02_02-open_ended_date_ranges_the_from_here_to_eternity_problem.html</id><summary type="html">&lt;p&gt;There aren't too many variations on the open-ended date range problem.  We have a table of events or rules or policies that have start dates.  Some have end dates, because they've been replaced or superseded.  Others don't have end-dates because they apply for the foreseeable future.&lt;/p&gt;
&lt;p&gt;There are two kinds …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There aren't too many variations on the open-ended date range problem.  We have a table of events or rules or policies that have start dates.  Some have end dates, because they've been replaced or superseded.  Others don't have end-dates because they apply for the foreseeable future.&lt;/p&gt;
&lt;p&gt;There are two kinds of date ranges here: close-ended and open-ended.  The close-ended date ranges have a start and a duration (or a start and an end).  The open-ended date ranges have a start and no end.&lt;/p&gt;
&lt;p&gt;There are two design patterns for the open-ended ranges.&lt;/p&gt;
&lt;p&gt;We can use the SQL Domain-Independent NULL.  In this case we'll have queries like :x BETWEEN tbl.start AND COALESCE( tbl.end, :x ).&lt;/p&gt;
&lt;p&gt;We can define a Domain-Specific NULL for the end dates.  A date in the far, far future works best.  In this case, we'll have queries like :x BETWEEN tbl.start AND tbl.end.&lt;/p&gt;
&lt;div class="section" id="opinions-vary"&gt;
&lt;h2&gt;Opinions Vary&lt;/h2&gt;
&lt;p&gt;One manager was pretty sure that the NULL case would be faster.  I'm not sure why, but I need to ask when I'm out there next.  I think this was based on the observation that tables with lots of NULL columns process faster.  (For full table scans, this is true because the table is physically smaller.)&lt;/p&gt;
&lt;p&gt;I was darn sure that the NULL's would be measurably slower.  Why?  They can't be indexed.  Since they're not in the index, the RDBMS has to resort to full table scans and can't exploit the index.&lt;/p&gt;
&lt;p&gt;Boy was I wrong.&lt;/p&gt;
&lt;p&gt;I've only tested a few databases, but my results make a lot of sense.  Indexes help the database optimize some kinds of queries, particularly &amp;quot;==&amp;quot; tests and equijoins between tables.&lt;/p&gt;
&lt;p&gt;For these &amp;quot;in a range&amp;quot; queries, the RDBMS's I looked at don't appear to leverage the index in terribly clever ways.  They appear to use full table scans.  I'm not really terribly surprised.  Query optimization is hard enough, cleverly using an index for &amp;quot;in a range&amp;quot; would probably be too much thinking for a fairly rare kind of query.&lt;/p&gt;
&lt;p&gt;RDBMS performance measurement is hard.  Many things interfere with getting solid performance numbers.  The best approach is long-term averages under load.  So, some of my results may have a great deal of experimental bias built in.&lt;/p&gt;
&lt;p&gt;However, what I did see were microscopic differences between the two approaches to open-ended date ranges.  I saw colossal differences between table scans and joins with and without indexes.  I saw colossal differences with different kinds of indexes.  But the two end-date representations seemed equivalent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-trump-card"&gt;
&lt;h2&gt;My Trump Card&lt;/h2&gt;
&lt;p&gt;I got some follow-up comments on my &amp;quot;non-null NULL&amp;quot; approach.  I think they mean &amp;quot;domain-specific&amp;quot; nulls, that is, using a large date instead of a NULL.  That shows a bias where they're equating open-ended dates with NULLs.  As if the &amp;quot;right&amp;quot; implementation were NULLs and I'm proposing something radical and odd with my &amp;quot;non-null NULL&amp;quot;.&lt;/p&gt;
&lt;p&gt;They worry about documenting the domain-specific NULL.  How do we explain that this &amp;quot;random date in the far future&amp;quot; means &amp;quot;till the end of time as we know it&amp;quot;?  I think they're just hand-wringing because they don't want to change.&lt;/p&gt;
&lt;p&gt;They act like the established meaning for NULL is &amp;quot;for the foreseeable future&amp;quot;.  Sadly, that's not true; NULL can mean almost anything.  Sometimes it might mean &amp;quot;don't know&amp;quot;.  Sometimes it mean &amp;quot;does not apply&amp;quot;.  Sometimes it means &amp;quot;the input was incomplete, and we'll update this later.&amp;quot;  Sometimes it means, &amp;quot;the input was incomplete, and this record is a place-holder to remind us to fix the error.&amp;quot;&lt;/p&gt;
&lt;p&gt;I read a lot of other people's code.  While you may be pretty solid on your &amp;quot;standard&amp;quot; use of :x BETWEEN start and COALESCE ( end, :x ), you're in the minority on this.  What I observe about SQL idioms is that one programmer does it that way, and all the other programmers do it other ways.  The stored procedure hack will write define a whole library of procedures to &amp;quot;make the problem go away.&amp;quot;  At least one maintenance programmers won't get the idiom, and will write application program loops with IF statements.  Further, what I often have to analyze is the one mystery program with SQL so obscure that no one dares touch it.&lt;/p&gt;
&lt;p&gt;&amp;quot;A COALESCE isn't obscure&amp;quot; you say.  My response is, &amp;quot;if that was the only problem, I'd agree.  But you've got so many other things going on, that it would be good to have just this date thing be simple and obvious.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Performance-wise, I couldn't prove that NULLs or far future dates are better.  Reading-wise, I prefer to read simpler code.&lt;/p&gt;
&lt;p&gt;In my opinion, simple wins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technical-note"&gt;
&lt;h2&gt;Technical Note&lt;/h2&gt;
&lt;p&gt;Yes, I used Python to build the SQL and execute it with various kinds of data.  It was handy to collect the results in CSV file and pump it straight into the spreadsheet.&lt;/p&gt;
&lt;p&gt;Different RDBMS products have different syntax for these date things, so I had to do a bunch of relatively icky text manipulation.  I wanted to use SQLAlchemy to handle the vagaries of the database engines, but the client would have disputed the results.  Instead I had to build relatively simple Python to run plain-old-SQL in simple, obvious ways.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Configuration File Scalability -- Who Knew? (Revised)</title><link href="https://slott56.github.io/2008_01_26-configuration_file_scalability_who_knew_revised.html" rel="alternate"></link><published>2008-01-26T23:12:00-05:00</published><updated>2008-01-26T23:12:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-01-26:/2008_01_26-configuration_file_scalability_who_knew_revised.html</id><summary type="html">&lt;p&gt;Background: I'm looking at parsing certain X12N messages.  There's a Perl program on CPAN to do &lt;a class="reference external" href="http://search.cpan.org/~prasad/X12-0.08/lib/X12/Parser.pm"&gt;X12 parsing&lt;/a&gt; ; the program itself isn't useful, but the X12 messages are defined via INI files.  There's also a &lt;a class="reference external" href="http://pyx12.sourceforge.net/"&gt;Python X12&lt;/a&gt;  parser with the X12 messages defined via XML files.  I don't really like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Background: I'm looking at parsing certain X12N messages.  There's a Perl program on CPAN to do &lt;a class="reference external" href="http://search.cpan.org/~prasad/X12-0.08/lib/X12/Parser.pm"&gt;X12 parsing&lt;/a&gt; ; the program itself isn't useful, but the X12 messages are defined via INI files.  There's also a &lt;a class="reference external" href="http://pyx12.sourceforge.net/"&gt;Python X12&lt;/a&gt;  parser with the X12 messages defined via XML files.  I don't really like working with the INI or XML definitions because the INI or XML merely defines a Python object that does the real work.&lt;/p&gt;
&lt;p&gt;My idea was to replace the configuration files in these two examples.  It it clearly better to build a Python object that actually is the X12 parser rather than read a bunch of files which build the Python.  This Python parser definition can be build with relative ease from the the X12 standards coupled with a business partner's Implementation Guide (IG).&lt;/p&gt;
&lt;p&gt;Based on partner IG's and two sets of helpful examples of config files, I built the necessary set of classes.  Then I built an example X12 message parser.&lt;/p&gt;
&lt;p&gt;Here's the problem: it was too big.   Python died.  (Well... not &lt;em&gt;dead&lt;/em&gt;, but it threw an exception that said that the Python parser had run out of memory.)&lt;/p&gt;
&lt;p&gt;I didn't reckon on how big an X12 message definition actually is.  I was shocked -- shocked -- that an object construction would be a problem.  I was already to start dashing off angry messages.&lt;/p&gt;
&lt;p&gt;Then I looked closely at my example.&lt;/p&gt;
&lt;p&gt;It was a single object construction expression that covered over 1200 lines.  It created about 774 or so distinct objects.  It appears that a single expression of this scale is a bad idea.&lt;/p&gt;
&lt;p&gt;It looks like this (but is 1200 lines long).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
parse278= Message( &amp;quot;278&amp;quot;, Properties(...),
    Loop( &amp;quot;ISA_LOOP&amp;quot;, Properties(...),
        Segment( &amp;quot;ISA&amp;quot;, Properties(...),
           Element( &amp;quot;ISA01&amp;quot;, ... ),
           Element( &amp;quot;ISA02&amp;quot;, ... ),
           ...14 more...
        ),
        Loop( &amp;quot;GS_LOOP&amp;quot;, Properties(...), ...long, long list... ),
        Loop( &amp;quot;GE_LOOP&amp;quot;, Properties(...), ... ),
        Segment( &amp;quot;IEA&amp;quot;, Properties(...),
            Element( &amp;quot;IEA01&amp;quot;, ... ),
            Element( &amp;quot;IEA02&amp;quot;, ... ),
        ),
    )
)
&lt;/pre&gt;
&lt;p&gt;A single, 1200-line statement doesn't actually compile.  After I thought about it, I realized I was asking a lot.&lt;/p&gt;
&lt;p&gt;The good news is that changing this massive expression into a series of discrete assignment statements requires relatively little real work.  And the X12 message structure (based on nested Loops) encourages the definition of the overall message as a series of Loop objects.&lt;/p&gt;
&lt;p&gt;Now it looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ST_LOOP = Loop( ... )
GS_LOOP = Loop( u'GS_LOOP', Properties(...),
  Segment( 'GS'...),
  ST_LOOP,
  Segment( 'GE'... ), )
ISA_LOOP = Loop( u'ISA_LOOP', Properties(...),
  Segment( u'ISA', Properties(...),
    Element( u'ISA01', ...),
    ...
  )
  GS_LOOP,
  Segment( u'IEA', Properties(...),
  Element( u'IEA01', ... ),
  Element( u'IEA02', ... ),
  ),
)
x278_res = Message( u'278', Properties(...), ISA_LOOP
)
&lt;/pre&gt;
&lt;div class="section" id="persistence"&gt;
&lt;h2&gt;Persistence&lt;/h2&gt;
&lt;p&gt;Beyond marshalling and unmarshalling, we also need to look at persisting messages.  We can choose to store individual Segments (a bad idea) or the higher-level Loops of Segments (a slightly better idea).  The Loop-based structure of our parser configuration leads to creating a Loop-based data model.&lt;/p&gt;
&lt;p&gt;It's important that the SQL model and the Parser structure are completely isomorphic.  We need to take a block of text, unmarshal the message, map it to tables, and load it into a database.  And we need the whole to be driven by a Python configuration which comes from the Implementation Guides in an obvious way.&lt;/p&gt;
&lt;p&gt;In the long run, I need to transform an Implementation Guide into a Python configuration, confident that we can accept, parse, and persist X12 messages in spite of multiple business partners and evolution of the X12 model.&lt;/p&gt;
&lt;p&gt;Since X12 isn't an open standard, this isn't easy.  But Python's flexibility makes it work out well.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Two Python Config-File Design Patterns</title><link href="https://slott56.github.io/2008_01_19-two_python_config_file_design_patterns.html" rel="alternate"></link><published>2008-01-19T13:23:00-05:00</published><updated>2008-01-19T13:23:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-01-19:/2008_01_19-two_python_config_file_design_patterns.html</id><summary type="html">&lt;p&gt;I hate to complain, but there's a Python syntax rule that has slightly cramped my style.  The problem stems from a need to describe a really complex and extensible structure.&lt;/p&gt;
&lt;p&gt;We need to describe X12N messages, which have a rather complex structure, and the structure can be customized.  While the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I hate to complain, but there's a Python syntax rule that has slightly cramped my style.  The problem stems from a need to describe a really complex and extensible structure.&lt;/p&gt;
&lt;p&gt;We need to describe X12N messages, which have a rather complex structure, and the structure can be customized.  While the core syntax is pretty simple, you need your business partner's Implementation Guide (IG) to make sense of the data.&lt;/p&gt;
&lt;p&gt;Most IG's are a big table-like document, but aren't properly distributed as a tidy, easy-to-work with table.  [BTW, The documents are usually published as PDF files for two reasons.  One, lawyers understand a file that is hard to edit and don't understand an MD5 digest to show tampering.  Second, X12 parsing seems to be considered a proprietary feature of an application.]&lt;/p&gt;
&lt;div class="section" id="open-source-x12-parsers"&gt;
&lt;h2&gt;Open-Source X12 Parsers&lt;/h2&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2008_01_12-python_as_config_language_forget_xml_and_ini_files.html"&gt;Python as Config Language -- Forget XML and INI Files&lt;/a&gt;
I mentioned my quest for X12 parsers.  The embarrassing part was that I totally missed one.   On my own, I found a Perl program on CPAN to do &lt;a class="reference external" href="http://search.cpan.org/~prasad/X12-0.08/lib/X12/Parser.pm"&gt;X12 parsing&lt;/a&gt; .  The program itself isn't useful, but the configuration files are basically a summary of an IG.  As INI files.&lt;/p&gt;
&lt;p&gt;Then one of my co-workers asked if I'd seen the &lt;a class="reference external" href="http://pyx12.sourceforge.net/"&gt;Python X12&lt;/a&gt;  parser.  I'm a Python bigot, and totally missed this.  [Thanks, Vinny.]  As with the Perl example, the parsing code isn't terribly useful, since it is too complex.  However, the configuration files are a very useful unwinding of an IG.  As XML files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-more-useful-configuration"&gt;
&lt;h2&gt;A More Useful Configuration&lt;/h2&gt;
&lt;p&gt;The INI-file version of the IG makes some potentially invalid assumptions about message structure.  Specifically, each X12 Loop is defined as starting with a series of Segments and ending with a series of Loops.  Nesting -- in the form of header Segments, Loops and trailer Segments -- isn't tolerated.&lt;/p&gt;
&lt;p&gt;The XML-file version of the IG -- while more descriptive -- creates a needless level of indirection.  First, we have to build a usable Python structure from the XML.  Then, we use that Python structure to parse the messages.  Further, we have to do this two-pass parsing for each batch of messages we're going to process.&lt;/p&gt;
&lt;p&gt;The structure is readily defined by a few Python classes.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Parser( object ):
    &amp;quot;&amp;quot;&amp;quot;Superclass for all parsing components.&amp;quot;&amp;quot;&amp;quot;
class Element( Parser ):
    &amp;quot;&amp;quot;&amp;quot;A single Element within a Segment.&amp;quot;&amp;quot;&amp;quot;
class Composite( Element ):
    &amp;quot;&amp;quot;&amp;quot;A composite Element within a Segment contains Elements.&amp;quot;&amp;quot;&amp;quot;
class Segment( Parser ):
    &amp;quot;&amp;quot;&amp;quot;&amp;quot;A collection of Elements and Composites.
class Loop( Parser ):
    &amp;quot;&amp;quot;&amp;quot;A collection of Segments and Loops.&amp;quot;&amp;quot;&amp;quot;
class Message( Loop ):
    &amp;quot;&amp;quot;&amp;quot;A collection of Loops.&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;With this structure, we can define messages in a relatively pleasant way.  Except for a Python syntax rule that leads to a small bit of ickyness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-structural-declaration-pattern"&gt;
&lt;h2&gt;The Structural Declaration Pattern&lt;/h2&gt;
&lt;p&gt;Here's the &lt;strong&gt;Structural Declaration&lt;/strong&gt;  that I settled on.  This can be built from the Perl .CF files or the Python X12 XML files.  Then it can be customized to match the business partner's Implementation Guide.  [Ideally, it would be build directly from an IG; where the IG is based on a usable spreadsheet -- hopefully in &lt;a class="reference external" href="http://xml.openoffice.org/"&gt;Open Office XML&lt;/a&gt; .  Often, Micro$oft Office files can be saved in an open format.]&lt;/p&gt;
&lt;p&gt;This example only names the various Segments without providing the Element-by-Element definitions.  That gets rather long, and isn't always necessary.  Even so, the full 278 message is about 120 lines of code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x278 = Message(
    &amp;quot;278&amp;quot;, &amp;quot;Referral Request/Response&amp;quot;,
    Loop( &amp;quot;ISA&amp;quot;, &amp;quot;ISA&amp;quot;, &amp;quot;R&amp;quot;, &amp;quot;1&amp;quot;,
        Segment(&amp;quot;ISA&amp;quot;),
        Loop( &amp;quot;GS&amp;quot;, &amp;quot;GS&amp;quot;, &amp;quot;R&amp;quot;, &amp;quot;1&amp;quot;,
            Segment(&amp;quot;GS&amp;quot;),
            Loop( &amp;quot;ST&amp;quot;,&amp;quot;ST&amp;quot;,&amp;quot;R&amp;quot;,&amp;quot;1&amp;quot;,
                Segment(&amp;quot;ST&amp;quot;,(1,&amp;quot;278&amp;quot;),&amp;quot;Transaction Set Header&amp;quot;,&amp;quot;R&amp;quot;,1),
                Segment(&amp;quot;BHT&amp;quot;,None,&amp;quot;Beginning of Hierarchical Transaction&amp;quot;,&amp;quot;R&amp;quot;,1),
                loop2000A, loop2000B, loop2000C, loop2000D, loop2000E, loop2000F,
            ),
            Loop( &amp;quot;SE&amp;quot;,&amp;quot;SE&amp;quot;,&amp;quot;R&amp;quot;,&amp;quot;1&amp;quot;,
                Segment(&amp;quot;SE&amp;quot;)
            ),
        ),
        Loop( &amp;quot;GE&amp;quot;,&amp;quot;GE&amp;quot;,&amp;quot;R&amp;quot;,&amp;quot;1&amp;quot;,
            Segment(&amp;quot;GE&amp;quot;)
        )
    ),
    Loop( &amp;quot;IEA&amp;quot;, &amp;quot;IEA&amp;quot;, &amp;quot;R&amp;quot;, &amp;quot;1&amp;quot;,
        Segment(&amp;quot;IEA&amp;quot;)
    ),
)
&lt;/pre&gt;
&lt;p&gt;Each of the loop2000x variables is a moderately complex Loop definition.  Ultimately, these will become database tables, but that's another complicated piece of design.&lt;/p&gt;
&lt;p&gt;This is much more expressive than the .INI files.  It is also considerably easier to read and work with than the XML files.  As cool as it is, this isn't &lt;em&gt;precisely&lt;/em&gt;  what I was looking for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="evolving-of-the-api"&gt;
&lt;h2&gt;Evolving of the API&lt;/h2&gt;
&lt;p&gt;When we look at the resulting parser description -- even for a Segment-level overview of a simple 278 message -- we have some obscurities that crop up.  In particular, we have some evolution management problems.&lt;/p&gt;
&lt;p&gt;First, each Loop and Segment has both descriptive information and a complex structure. This extra information include a description, required/situational flags, repeat limits, and any helpful information required to disentangle the Loop structure from a message that is just a flat sequence of Segments.&lt;/p&gt;
&lt;p&gt;Second, we can't easily evolve our meta-metadata model.  If we want to add parameters to Loop or Segment, we run the risk of invalidating all message parsers previously built and manually tweaked.&lt;/p&gt;
&lt;p&gt;We have two opposing forces.  I want a simple declaration but I also want extensibility.  The simplest declaration is a flat list of parameters.  It has the form:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def __init__( self, name, *loops ):
        &amp;quot;&amp;quot;&amp;quot;Build a structure of sub-elements.
        &amp;#64;param name: Name of this Message, Loop or Segment
        &amp;#64;param loops: Loop and Segments that belong to this Loop (or Message).
        &amp;quot;&amp;quot;&amp;quot;
        self.name= name
        self.structure= []
        self.occurance= None # distinguish repeated Segment types
        self.parent= None
        for loop_seg in loops:
            self.append( loop_seg )
&lt;/pre&gt;
&lt;p&gt;This has the advantage that we can simply contain all the subordinate structure within a Loop or Segment definition.  The syntax melts away to simple commas.  This is very nice.&lt;/p&gt;
&lt;p&gt;This suffers from the disadvantage that we can't easily handle an evolving puddle of attributes.  To have a completely flexible definition, we'd really like to use keyword parameters for the additional descriptive information.  Using keywords leaves us the flexibility to add or change the parameters without breaking an installed base of parsers.&lt;/p&gt;
&lt;p&gt;I'd like to say something like the following.&lt;/p&gt;
&lt;p&gt;Loop( &amp;quot;2000A&amp;quot;, desc=&amp;quot;Some Desc&amp;quot;, required=&amp;quot;S&amp;quot;, repeat=&amp;quot;1&amp;quot;, Segment(...), Segment(...), Loop(...), ... )&lt;/p&gt;
&lt;p&gt;But Python can't parse this, since the keywords are in front of the positional parameters.  Darn it.  I'm forced to think.&lt;/p&gt;
&lt;p&gt;I have a couple of choices.  First, I could bundle the structural elements into a sequence.  This would lead to an &amp;quot;extra&amp;quot; set of parenthesis or brackets.  Cconsidering that the matching ()'s will be separated by 100's of lines of code, we can't be expected to manage this without errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-properties-bundle"&gt;
&lt;h2&gt;A Properties Bundle&lt;/h2&gt;
&lt;p&gt;The alternative is to bundle the descriptive parameters into some kind of Properties or Description object which simply carries the extra attributes in a tidy, easy-to-extend object.&lt;/p&gt;
&lt;p&gt;This leads us to change the style to something that could be called a &lt;strong&gt;Bundled Properties&lt;/strong&gt;  design.  [Something I first saw in Django.]  This means that our constructor has just two positional parameters followed by an unlimited number of structural elements.  We can live with two positional parameters; it is unlikely to turn into a maintenance problem.&lt;/p&gt;
&lt;p&gt;Loop( &amp;quot;2000A&amp;quot;, Properties( desc=&amp;quot;Some Desc&amp;quot;, required=&amp;quot;S&amp;quot;, repeat=&amp;quot;1&amp;quot; ), Segment(...), Segment(...), Loop(...), ... )&lt;/p&gt;
&lt;p&gt;This is much more manageable.  But -- to an extent -- it feels like a workaround for a Python syntax rule.  Actually, it's a more extensible design, since it separates the structure from the non-structural properties of a construct.  We can now update the Properties class definition to add as many properties as we find are necessary to process X12 messages.&lt;/p&gt;
&lt;p&gt;Our Properties class can be as simple as the following.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; class Properties( object ):
...     def __init__( self, **kw ):
...         self.__dict__.update( kw )
...
&amp;gt;&amp;gt;&amp;gt; p= Properties( hi=&amp;quot;mom&amp;quot;, num=22, denom=7 )
&amp;gt;&amp;gt;&amp;gt; p.hi
'mom'
&amp;gt;&amp;gt;&amp;gt; p.num
22
&lt;/pre&gt;
&lt;p&gt;This lets us refer to properties with simple names.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Python as Config Language -- Forget XML and INI files</title><link href="https://slott56.github.io/2008_01_12-python_as_config_language_forget_xml_and_ini_files.html" rel="alternate"></link><published>2008-01-12T01:54:00-05:00</published><updated>2008-01-12T01:54:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-01-12:/2008_01_12-python_as_config_language_forget_xml_and_ini_files.html</id><summary type="html">&lt;p&gt;See Sean McGrath's &lt;a class="reference external" href="http://itworlddaily.blogspot.com/2008/01/spot-warning-signs-in-configuration.html"&gt;Spot the warning signs in configuration file design&lt;/a&gt;  for thoughts on the ever-gnarly problem of how to provide a workable set of configuration parameters to a program.&lt;/p&gt;
&lt;p&gt;A programming language has all the advantages as a language for encoding parameters.  I see why it's rare -- too many …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Sean McGrath's &lt;a class="reference external" href="http://itworlddaily.blogspot.com/2008/01/spot-warning-signs-in-configuration.html"&gt;Spot the warning signs in configuration file design&lt;/a&gt;  for thoughts on the ever-gnarly problem of how to provide a workable set of configuration parameters to a program.&lt;/p&gt;
&lt;p&gt;A programming language has all the advantages as a language for encoding parameters.  I see why it's rare -- too many programmers have spent too much time with MS's abominable INI files and think it's &amp;quot;normal&amp;quot;.&lt;/p&gt;
&lt;p&gt;Recently, I started working on reverse engineering an venerable C program that relied on a set of INI-like files.  It isn't cost-effective to write (or even download) an INI-file parser for Java.  Instead, most of the configuration parameters could be simply moved into a garden-variety Java properties file.&lt;/p&gt;
&lt;p&gt;Some parameters, however, didn't fit the INI format well.  I'd almost completely eliminated any need for the INI file parser until these additional, complex parameters surfaced.  It was a head-scratcher until I reframed the problem.&lt;/p&gt;
&lt;div class="section" id="how-would-i-do-this-in-python"&gt;
&lt;h2&gt;How Would I Do This In Python?&lt;/h2&gt;
&lt;p&gt;In Python, I could -- trivially -- declare the relationships as a bunch of class constructors.  The simple elegance of the Python constructors lead me to a version in Java that was -- while not as nice -- a lot better than writing Yet Another Parameter File Parser.&lt;/p&gt;
&lt;p&gt;The INI syntax was -- to an extent -- close enough to a Python (or Java) class constructor that I could transliterate the original INI file into application source.&lt;/p&gt;
&lt;p&gt;The business rules in the config file looked like this:&lt;/p&gt;
&lt;p&gt;Rule_AP = 2, AP, DCO, EXACT, FULL, PAIR, OPENHELD, ALLOW&lt;/p&gt;
&lt;p&gt;I rewrote them to look like this in Java:&lt;/p&gt;
&lt;p&gt;new Rule_AP( 2, AP, DCO, EXACT, FULL, PAIR, OPENHELD, ALLOW ),&lt;/p&gt;
&lt;p&gt;I transformed an ad-hoc INI syntax into first-class Java syntax.  This eliminates a thousand or so lines of useless code.  It also reduces the complexity of the required documentation.  Rather than explain the syntax rules for the INI construct, we simply have to explain what this class does and what the constants mean.&lt;/p&gt;
&lt;p&gt;Also, we don't have to dwell on the business rule translation from the old format to the new format.  They're essential the same.  The look nearly identical.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="really-complex-configuration"&gt;
&lt;h2&gt;Really Complex Configuration&lt;/h2&gt;
&lt;p&gt;Earlier today I was looking at the problem of parsing &lt;a class="reference external" href="http://publib.boulder.ibm.com/infocenter/wmbhelp/v6r0m0/index.jsp?topic=/com.ibm.etools.mft.doc/ad09580_.htm"&gt;X12 messages&lt;/a&gt; .  It's a pain in the neck because you need a ton of ancillary information to make sense of the X12 segments and the X12 Loops.&lt;/p&gt;
&lt;p&gt;After an hour of poking around, I found a Perl program on CPAN to do &lt;a class="reference external" href="http://search.cpan.org/~prasad/X12-0.08/lib/X12/Parser.pm"&gt;X12 parsing&lt;/a&gt; .  The perl code is of no value.  However, the configuration files -- which describe some of the X12 messages I need to work with -- were very handy.&lt;/p&gt;
&lt;p&gt;But they were in a home-brewed INI-like format.  A format that was just enough &lt;em&gt;UN&lt;/em&gt; like INI files that ConfigParser choked on it.&lt;/p&gt;
&lt;p&gt;After spending a day on the problem, I slowly evolved a configuration that was palatable.  The X12 message descriptions look something like this.  (&lt;em&gt;Warning&lt;/em&gt;: elision, syntax errors may sneak in.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
isa= Loop( &amp;quot;ISA&amp;quot;,
    Segment(&amp;quot;ISA&amp;quot;),
    Loop( &amp;quot;GS&amp;quot;,
      Segment(&amp;quot;GS&amp;quot;),
      Loop( &amp;quot;ST&amp;quot;,
          Segment( &amp;quot;ST&amp;quot;, (1,&amp;quot;278&amp;quot;), Required, 1 ),
          Segment( &amp;quot;BHT&amp;quot;, None , Required, 1 ),
          ...
          ),
      Loop( &amp;quot;SE&amp;quot;,
         Segment (&amp;quot;SE&amp;quot; ),
         ),
      ),
      Loop( &amp;quot;GE&amp;quot;, Segment (&amp;quot;GE&amp;quot; )
  )
iea = Loop( &amp;quot;IEA&amp;quot;, Segment( &amp;quot;IEA&amp;quot; ) )
x278 = Message( isa, iea )
&lt;/pre&gt;
&lt;p&gt;The configuration constructors actually build a recognizer that attempts to match the received message structure with the various parts of the configuration.  It wasn't easy, but when I was done, I could translate the configurations provided in the CPAN X12 package into proper Python object constructors.&lt;/p&gt;
&lt;p&gt;In the outer realms of X12 messages, the Loops only have a single Segment.  The inner portions of the message (all of the Loop2000's, for example) have a much interesting structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-syntax"&gt;
&lt;h2&gt;One Syntax&lt;/h2&gt;
&lt;p&gt;Rather than cob up a syntax that is based on INI file syntax, I prefer to just use Python.  And rather than parse XML, I prefer to execute the Python directly.&lt;/p&gt;
&lt;p&gt;I'll post a more complete example in the not-too-distant future.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>I Thought It Was Just Me</title><link href="https://slott56.github.io/2008_01_05-i_thought_it_was_just_me.html" rel="alternate"></link><published>2008-01-05T14:52:00-05:00</published><updated>2008-01-05T14:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-01-05:/2008_01_05-i_thought_it_was_just_me.html</id><summary type="html">&lt;p&gt;See Scott Ambler's article in &lt;a class="reference external" href="http://ddj.com"&gt;Dr. Dobb's Journal&lt;/a&gt; , &amp;quot;&lt;a class="reference external" href="http://ddj.com/architect/205207998"&gt;Scaling Test-Driven Development&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;Recently, I'd seen some notes in SD Times on a similar theme, and blogged that in &lt;a class="reference external" href="https://slott56.github.io/2007_12_07-not_quite_following_the_book.html"&gt;Not Quite Following the Book&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Ambler's point seems to be the same as Coplien's: &amp;quot;High-level architecture sketches created during your Iteration 0 envisioning …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Scott Ambler's article in &lt;a class="reference external" href="http://ddj.com"&gt;Dr. Dobb's Journal&lt;/a&gt; , &amp;quot;&lt;a class="reference external" href="http://ddj.com/architect/205207998"&gt;Scaling Test-Driven Development&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;Recently, I'd seen some notes in SD Times on a similar theme, and blogged that in &lt;a class="reference external" href="https://slott56.github.io/2007_12_07-not_quite_following_the_book.html"&gt;Not Quite Following the Book&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Ambler's point seems to be the same as Coplien's: &amp;quot;High-level architecture sketches created during your Iteration 0 envisioning activities help set your initial technical direction—a little bit of up front design work helps to avoid structural problems cropping up later in the lifecycle.&amp;quot;  It isn't very efficient to use the fine-grained approach of &amp;quot;pure&amp;quot; TDD to get to a good architecture.&lt;/p&gt;
&lt;p&gt;It's certainly possible to simply work from the ground up, using testing and refactoring to arrive at a good architecture.  Many people have done this on smaller projects.  I think that this exact experience -- refactoring the presence of reasonably complete test cases -- is what sells TDD.&lt;/p&gt;
&lt;p&gt;It's clearly smarter to pitch an architecture early on and get everyone to internalize that architecture.  Each piece of functionality is born with a bias toward fitting into some architecture.  It's best to fit into a common architecture.  Devastating change is reduced (not prevented, but reduced.)&lt;/p&gt;
&lt;p&gt;Bonus!  People seem to prefer to do it this way.  I'm absolutely sure that they understand the &lt;strong&gt;Agile Theory&lt;/strong&gt;:  anything can be accomplished by working from the details up.   I'm also absolutely sure that they've adapted this foundational theory into a process that reflects practical considerations of the composition of the team and the schedule for delivery of working software.&lt;/p&gt;
&lt;div class="section" id="a-reasonably-agile-lifecycle"&gt;
&lt;h2&gt;A Reasonably Agile Lifecycle&lt;/h2&gt;
&lt;p&gt;Purely Agile TDD is based on a series of practices that will -- eventually -- yield great software.  We can, however, impose some additional practices that will reduce the value of &amp;quot;eventually&amp;quot; to something a little more palatable.  These practices seem to be the following.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Consolidated Analysis&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;While disjoint use cases can be knit into a cohesive whole, it's good to review and reconcile the use cases.  I suggest that an analysis model be built to capture the essential nouns and verbs in the use cases.  I need to emphasize &amp;quot;essential&amp;quot;: don't model everything; model the recurring themes, central concepts, and essential ingredients.  This model is NOT (emphasize NOT) a &amp;quot;deliverable&amp;quot; in the sense that code and test cases are deliverable.  This isn't a milestone; if it was, we wouldn't be Agile.  This is merely a tool to help us frame up each use case into a context.  This captures the domain knowledge that users assume and we have to gain.  This consolidated analysis model &lt;strong&gt;is&lt;/strong&gt;  how we gain domain knowledge.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Architectural Overview&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;While we can refactor our way into a decent architecture, this isn't an optimal use of anyone's time.  If the app is web-based, we -- generally -- embrace some framework before we even get started.  We rarely just start coding and hope that a web app appears.  The architecture is NOT a deliverable; it's a context into which each delivery will fit.  Again, this can't be a milestone, since building this becomes a distracting, limited-value project milestone.  The point isn't the architecture, it's the conversation about the architecture, and the impact that conversation has on subsequent work.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Acceptance Testing&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Different from the detailed testing of TDD, we have the end-user's overall acceptance tests.  This is best viewed as a formal, audited, &amp;quot;for the record&amp;quot; rubber-stamping of the application.  It's very formal, since everyone is forced to look at it; we use formality as a way to provide enough background that a diverse audience can get what they're seeing.  An acceptance test isn't a sing-along around the campfire; it's high opera with a libretto and a closed hall and perhaps a brief intermission lecture by a Famous Artist.  It's audited by QA with an official certification that the software is suitable for production use.  It's &amp;quot;for the record&amp;quot; because everyone is notified about the results, even if they didn't actually attend the show.  QA must write the review for the morning papers to describe how the performance went.  And it's just a rubber stamp of testing that was done at a lower level.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Acceptance testing is important because users may not articulate their requirements very well.  Further, developers may not understand the requirements very well.  The Agile approach of a conversation can get bogged down in nuance (or evasion).  A final acceptance test can be a way to manage and focus the conversation.  It doesn't replace the conversation with &amp;quot;a deliverable&amp;quot;, it just directs it.&lt;/p&gt;
&lt;p&gt;This isn't perfectly Agile.  It involves pre-work that isn't simply a conversation with a user and development of a feature.  It involves elaborate post-work that isn't simply a release into production.  It is somewhat more efficient because time is taken up front to assure everyone agrees and understands the direction.  It is also somewhat more manageable because we have a final performance that belongs more to QA (and the critics) than the users or developers.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Is This Software World's Equivalent of The Perpetual Motion Machine?</title><link href="https://slott56.github.io/2008_01_03-is_this_software_worlds_equivalent_of_the_perpetual_motion_machine.html" rel="alternate"></link><published>2008-01-03T11:01:00-05:00</published><updated>2008-01-03T11:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-01-03:/2008_01_03-is_this_software_worlds_equivalent_of_the_perpetual_motion_machine.html</id><summary type="html">&lt;p&gt;See Spolsky's &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2007/12/03.html"&gt;Talks at Yale, Part 1 of 3&lt;/a&gt;  for a fairly typical summary of formal methods in software development.  Here's the part RL liked: &amp;quot;Now, if the spec does define everything about how the program is going to behave, then, lo and behold, it contains all the information necessary …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Spolsky's &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2007/12/03.html"&gt;Talks at Yale, Part 1 of 3&lt;/a&gt;  for a fairly typical summary of formal methods in software development.  Here's the part RL liked: &amp;quot;Now, if the spec does define everything about how the program is going to behave, then, lo and behold, it contains all the information necessary to generate the program!&amp;quot;&lt;/p&gt;
&lt;p&gt;RL sent me this link, and tried to create a &amp;quot;perpetual motion&amp;quot; metaphor for Joel's comments.  The thermodynamics parallel seems to stem from thinking that a suitable spec must be of the same level of detail and sophistication as the resulting program.  Joel certainly makes it seem that way with his horror story of an all-day affair to prove simple assertions about simple assignment statements.&lt;/p&gt;
&lt;p&gt;This is essentially a &amp;quot;formal methods can't work -- it's logically impossible to use logic&amp;quot; argument.  In Joel's case, there are two points.  First, since you need to both know and prove everything about a program, the formal post-condition is so complex that it essentially &lt;em&gt;is&lt;/em&gt;  the program.  His other argument is that the proof is just as likely to contain errors as the resulting program.  Compounding this, RL has an inappropriate metaphor.&lt;/p&gt;
&lt;div class="section" id="complexity-and-abstraction"&gt;
&lt;h2&gt;Complexity and Abstraction&lt;/h2&gt;
&lt;p&gt;Generally, Joel's position on complexity is false.  In some special cases, it might be true.  But those are special cases where you have no trustworthy (proven) compiler, no trustworthy (proven) libraries, and no previous results on which we can rely.  This is often true in an academic setting, but it is far from true in the &amp;quot;real world&amp;quot;.&lt;/p&gt;
&lt;p&gt;As a practical matter we have two ways to use formal methods that make practical, useful sense.  Fundamentally, these are simply abstraction techniques; we apply one to the specification and one to our languages, libraries and tools.&lt;/p&gt;
&lt;p&gt;Additionally, Joel's point on &amp;quot;everything about how the program is supposed to behave&amp;quot; is misleading.  We don't -- ever -- write down &amp;quot;everything&amp;quot;.  If we did, we'd have specifications that explain digital logic, power distribution, memory access, sequential programming, interrupt management, direct memory access input/output devices, and how a simple integrated circuit can flip on and off a billion times each second.  Think of having to specify how data is encoded on the surface of a disk, just to be sure &amp;quot;everything&amp;quot; was in the specification.&lt;/p&gt;
&lt;p&gt;So Joel's &amp;quot;everything&amp;quot; doesn't really mean &amp;quot;everything&amp;quot;.  He seems to mean &amp;quot;everything relevant at the level of abstraction at which I'm proving things.&amp;quot;  The problem arises with the mismatch in abstraction between his proof technique and the problems he wants to solve.  This arises partly from textbook examples that are necessarily simple enough to make sense.  These don't scale in an obvious way to a large, complex program.&lt;/p&gt;
&lt;p&gt;Read Dijkstra (&lt;a class="reference external" href="http://www.amazon.com/Discipline-Programming-Prentice-Hall-Automatic-Computation/dp/013215871X"&gt;A Discipline of Programming&lt;/a&gt; ) and Gries (&lt;a class="reference external" href="http://www.amazon.com/Science-Programming-Monographs-Computer/dp/0387964800/ref=pd_bxgy_b_img_b"&gt;The Science of Programming&lt;/a&gt; ).  These were life-altering books for me.  Gries, in particular, provides a wonderful text-book approach that builds a thorough foundation in logic, propositions and proof techniques before diving into a simple language, and ways to develop programs.&lt;/p&gt;
&lt;p&gt;There are some exercises which hit on the &amp;quot;prior results&amp;quot; issue as a subtext.  For example, one exercise in Gries asks you to prove that swapping two elements of an array leaves the rest of the array intact.  This is -- to an extent -- a duh proposition.  &amp;quot;Of course swapping two elements leaves the array intact,&amp;quot; is the standard response.  However, what's the &lt;em&gt;proof&lt;/em&gt;  of that glib assertion?  Once you have this, you don't ever need to prove it again.  Indeed, you can -- without too many problems -- omit this trivial detail from a post-condition.  In short, your prior results serve to abstract details away from the real problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-real-world"&gt;
&lt;h2&gt;In The Real World&lt;/h2&gt;
&lt;p&gt;The examples in Gries and Dijkstra are pleasantly focused, bounded, and -- in some cases -- intentionally gnarly.  Real world problems tend to be vague, sprawly and rarely have gnarly parts.  For example, if we're matching financial documents (invoices with receipts) we have some common attributes, and some &amp;quot;business rules&amp;quot; that allow customers to partially pay, overpay, split invoices or combine invoices.  There's nothing gnarly about this.  Mostly, there's just vagueness and odd special cases, exceptions, and unstated assumptions.&lt;/p&gt;
&lt;p&gt;Proof techniques are appropriate for the complex nested loops of this application.  Partitioning the input into &amp;quot;batches&amp;quot; of documents which are likely to be related is an algorithm with a fairly easy to define post-condition, and a relatively low level of gnarl.&lt;/p&gt;
&lt;p&gt;The &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;/span&gt; comparison of documents within a batch of likely matches, similarly, has a relatively simple post-condition, and a moderate level of gnarl.  It's the insertion of all the special cases that becomes tedious.  Except, of course, for abstraction.  All the special cases are subclass of a common &amp;quot;Condition&amp;quot; or &amp;quot;DocCombo&amp;quot; superclass.  We have to prove that our abstract superclasses have the right properties.  Once we have that, we simply prove that each subclass satisfies the superclass assertions.&lt;/p&gt;
&lt;p&gt;Did we specify &amp;quot;everything?&amp;quot;  Actually, no.  We omitted specifying the OS, the RDBMS, or the JVM.  We omitted specifying how the logger works; we just used it, with a blind level of trust that it was reasonably rigorously proven.&lt;/p&gt;
&lt;p&gt;Okay, did we specify &amp;quot;everything at this level of abstraction?&amp;quot;  Again, no.  We specified the core algorithms for batching and matching.  The post-processing involves an API call that has a loop through the batch.  Does this loop require a full, formal proof?  Or can we inspect it, determine that it fits a proven template, and leave it at that?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="buggy-proofs-replace-buggy-programs"&gt;
&lt;h2&gt;Buggy Proofs Replace Buggy Programs&lt;/h2&gt;
&lt;p&gt;Yep.  Can't argue with the argument that a buggy proof is the same as a buggy program.&lt;/p&gt;
&lt;p&gt;Here's the clincher.  You don't have tools for testing or validating your proof: you can't easily find &amp;quot;bugs&amp;quot; in your proof.  Instead, you have to rely on manual inspection of the proof.&lt;/p&gt;
&lt;blockquote&gt;
[&lt;em&gt;Irony&lt;/em&gt;] Yep.  That makes the whole technique completely worthless.  How stupid of me to be mislead by charlatans like Gries or Dijkstra. [&lt;em&gt;End Irony&lt;/em&gt; ]&lt;/blockquote&gt;
&lt;p&gt;Rather than lying in wait to attack the technique, we can ask what -- if any -- practical value a proof might create.  Of course, it's easier to indict than it is to consider what value lies hidden with the weakest precondition predicate transformer.  What value is created by attempting a proof?&lt;/p&gt;
&lt;p&gt;First, defining a post-condition, and trying to write a formal assertion, is perhaps the single most valuable step that can ever be performed.  If you can't define &amp;quot;done&amp;quot; or &amp;quot;success&amp;quot;, you know something important.  Without a definition of done, you know that you'll never finish writing your program.  Without a definition of done, someone will always be able to say &amp;quot;It doesn't do [X]&amp;quot; and you can't prove whether it does or doesn't do [X].  Worse, you probably can't say if [X] is in scope or out of scope.  Worse still, you may not be able to define [X] clearly.&lt;/p&gt;
&lt;p&gt;Second, a proof is developed side-by-side with the program.  Joel's example of trying to prove something about a program is specious.  The more productive approach is to locate a statement that has the right post condition, and who's weakest precondition is something that you stand a reasonable chance of implementing.  Then you -- recursively -- start to prove that precondition by locating a statement and it's precondition.  The net is that a buggy proof will grow in parallel with the buggy program.  A tiny bit of test engineering will reveal the program bug -- and the proof bug.&lt;/p&gt;
&lt;p&gt;Third, a proof requires that you work at a level of abstraction that makes the program explainable.  One goal is to arrive at a &amp;quot;hands in the pocket&amp;quot; explanation of the program.  Ideally, you want an explanation so pithy, accurate and compelling that it's &amp;quot;obvious&amp;quot; that the associated program has to work.  And it doesn't require pages of UML.  When you're able to abstract/summarize a program in this way, you can deeply understand what it does, why it does it, what the limitations are, and how it fits into it's overall information processing context.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;Nothing -- nothing! -- is worse than programs which must be carefully reverse engineered into word processing documents.  Think what this means.  Software is a form of knowledge capture.  Yet, we have programs that are so opaque, confusing and dysfunctional that we must read the source to determine  what they might have meant.  When we reach this impasse, we also tend to find that the programs cannot be summarized.  They are a morass of exceptions and special cases, and there is rarely a way to accurately characterize what they&lt;/em&gt; mean &lt;em&gt;.&lt;/em&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="perpetual-motion"&gt;
&lt;h2&gt;Perpetual Motion&lt;/h2&gt;
&lt;p&gt;The perpetual motion metaphor for formal techniques has one further problem.  Programs and their proofs live in different worlds.  The proof system is a &amp;quot;higher order&amp;quot; logic, distinct from the logic system in which software is implemented.  Proof systems contain a number of concepts that aren't actually part of the software system.&lt;/p&gt;
&lt;p&gt;Our computer system relies on a simple Boolean world of True/False and the NAND operator.  Our proof system, however, introduces predicate qualification like &amp;quot;For All&amp;quot; (∀) and &amp;quot;There Exists&amp;quot; (∃).  In order to prove that a loop &amp;quot;makes progress&amp;quot; in each iteration, we may have to introduce propositions that aren't part of the final condition, but are features of our chosen algorithm.&lt;/p&gt;
&lt;p&gt;Our &amp;quot;spec [defines] everything&amp;quot; isn't like perpetual motion at all.  The specification lives in &amp;quot;proof world&amp;quot; where we have abstraction and higher-order predicates.  The program lives in &amp;quot;hardware world&amp;quot; where we have approximations and limitations.&lt;/p&gt;
&lt;p&gt;Since our spec is in a &amp;quot;larger&amp;quot; language, we don't have a situation where we need all the details of the finished program in order to write the specification.  The laws of thermodynamics don't apply.  In thermodynamics you can't win, you can't break even and you can't even get out of the game.  In software, your proof system is precisely how you &amp;quot;get out of the game&amp;quot;.  This is how you win: you transform a set of well-chosen conditions and proof techniques into a fully-detailed, working program.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;And no, the fact that you didn't prove verything doesn't indict the technique as worthless.  That wasn't the goal.  Formal methods are a tool that use with version control, automated testing, databases, operating systems, interpreters and IDE's.&lt;/em&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-process"&gt;
&lt;h2&gt;The Process&lt;/h2&gt;
&lt;p&gt;What gets omitted in Joel's notes (and RL's inappropriate thermodynamics metaphor) is the highly directed nature of the process.  The basic theory of formal methods says that we &amp;quot;somehow&amp;quot; derive a final post-condition from the requirements.  Then we prove some &amp;quot;arbitrary&amp;quot; program as satisfying the post condition.&lt;/p&gt;
&lt;p&gt;As a practical matter, we aren't stupid.  We have a sense of what works and what doesn't.  We know what we've already proven to work.  We have an idea of what kind of algorithm is required.  We don't write a random post-condition based on the requirements.  When we're doing reading the requirements, we write a post-condition with a hidden agenda.  It isn't a random mapping of requirements words onto post-condition formalisms.  We write the post-condition for the program we intend to develop.  One that we intend to satisfy the mushy English-language requirements.&lt;/p&gt;
&lt;p&gt;Then we develop the program, using the post-condition as a formal statement of the goal.  It's hard to emphasize that textbook formal methods demonstrate that we can do &lt;em&gt;anything&lt;/em&gt;.  Practically, we have some pretty specific requirements that constrain the space in which we're working.  We're not going to flail at random; we're going to take the minimal number of steps to eke out our victory.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Model - View - Controller, and Related Patterns</title><link href="https://slott56.github.io/2007_12_26-model_view_controller_and_related_patterns.html" rel="alternate"></link><published>2007-12-26T03:08:00-05:00</published><updated>2007-12-26T03:08:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-12-26:/2007_12_26-model_view_controller_and_related_patterns.html</id><summary type="html">&lt;p&gt;TP sent me this great link on MVC and related patterns.  It's Ctrl-Shift-B's posting, &lt;a class="reference external" href="http://ctrl-shift-b.blogspot.com/2007/08/interactive-application-architecture.html"&gt;Interactive Application Architecture Patterns&lt;/a&gt; .  It is helpful at disentangling the distinctions between various kinds of model-view-controller, and model-view-presenter alternatives.&lt;/p&gt;
&lt;p&gt;This is important because the terminology gets borrowed and adulterated sometimes.  When we look at &lt;a class="reference external" href="http://struts.apache.org/"&gt;Struts&lt;/a&gt; , we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;TP sent me this great link on MVC and related patterns.  It's Ctrl-Shift-B's posting, &lt;a class="reference external" href="http://ctrl-shift-b.blogspot.com/2007/08/interactive-application-architecture.html"&gt;Interactive Application Architecture Patterns&lt;/a&gt; .  It is helpful at disentangling the distinctions between various kinds of model-view-controller, and model-view-presenter alternatives.&lt;/p&gt;
&lt;p&gt;This is important because the terminology gets borrowed and adulterated sometimes.  When we look at &lt;a class="reference external" href="http://struts.apache.org/"&gt;Struts&lt;/a&gt; , we see one interpretation of the pattern.  Sun provides a lot of useful detail in their Developing Enterprise Applications with the J2EE Platform book, specifically, the &lt;a class="reference external" href="http://java.sun.com/blueprints/guidelines/designing_enterprise_applications_2e/web-tier/web-tier5.html"&gt;Web-Tier Application Framework Design&lt;/a&gt;  section.  When we look at &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt; , we see another implementation of MVC.&lt;/p&gt;
&lt;p&gt;In the world of fat-client SWING applications, control is a pretty big deal.  In many cases, the GUI is stateful: GUI controls are enabled and disabled to guide the user through a complex set of actions.  Handling input and reflecting this in the state of the controls are important responsibilities of the control elements of the design pattern.&lt;/p&gt;
&lt;p&gt;There are many ways to finely chop the responsibilities, leading to various MVP variations on the basic theme.&lt;/p&gt;
&lt;div class="section" id="web-interaction"&gt;
&lt;h2&gt;Web Interaction&lt;/h2&gt;
&lt;p&gt;In the &amp;quot;pure&amp;quot; HTTP world, where the GUI is somewhat simpler, there's less event-by-event processing, just big POST and GET actions.  This is where Struts and Django provide different versions of MVC.  Struts -- consistent with other Java-isms -- rubs your nose in the control element.  I must admit that I find the web.xml specification of interactions to be a largely tedious exercise in repeating myself.&lt;/p&gt;
&lt;p&gt;There's a theoretical use case for maintenance and adaptation where someone rearranges the web transaction by updating the definitions in the web.xml file.  However, I've never actually seen this exercised.  Indeed, I've never seen a design that would tolerate this kind of change.  [And yes, I realize I'm throwing down the gauntlet for a good example of using this &amp;quot;flexibility&amp;quot;.]&lt;/p&gt;
&lt;p&gt;There seem to be two kinds of transactions: a few obvious pages (form for search, list of many objects, form for a single object, confirmation) or a multi-step transaction where each step is a piece of a complex object, and the sequence of operations is essentially hard-wired by a binding between business process and information needs.  Neither seems to benefit very much from the overhead of the web.xml configuration for a struts application.&lt;/p&gt;
&lt;p&gt;Django seems to skin this cat with reasonable elegance.  Learning Django after learning Struts can be confusing at first.  Clearly, the model is the Django DB API.  They call it that -- you can't miss the implementation.  However, it isn't as clear that control is the parsing of the request and the mapping from URL to &amp;quot;view&amp;quot; function.  When you start looking at JSP as the view, it is odd to think of the Django templates as being just another part of the view element.&lt;/p&gt;
&lt;p&gt;Any flexibility required from a multi-step transaction can be put into the URL mapping with relative ease, since that's the entire control element of the pattern.  If you want a Struts-style parameter for the &amp;quot;do-this-next&amp;quot; URL, you can easily provide this in the URL mapping, passing it as an argument to the view function.  With a little care you can make all of the view functions independent of any specific URL.&lt;/p&gt;
&lt;p&gt;It also means that presentation changes are often split across two parts of the view layer.  This is more manageable than it appears, since the template language of Django is (intentionally) limited to simple iteration and decision.  The Python objects used by the template have to be pretty simple; this helps steer the allocation of responsibility between these sub-layers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ajax-factor"&gt;
&lt;h2&gt;The AJAX Factor&lt;/h2&gt;
&lt;p&gt;When you throw AJAX into this mix, the boundaries seem blurry.  Since AJAX happens in the browser, it's part of the view implementation.  But it's also another MVC.  The Model is some XML document and it's Javascript objects, the View is the browser's world, and the Control is all that Javascript making things happen.&lt;/p&gt;
&lt;p&gt;The net is that you have this two-part architecture with the HTTP MVC and the AJAX MVC.  You can, in principle, have a single conceptual model with Java, Javascript, XML and ORM implementations.  It sounds to be an icky level of complexity; if we use tools to create the mappings (e.g. JAXB) we can probably keep it all straight.  Or, if use just one compact, expressive language (Python/&lt;a class="reference external" href="http://www.json.org/"&gt;JSON&lt;/a&gt; ) we could manage this nicely.&lt;/p&gt;
&lt;p&gt;The essential feature is that Model elements of an AJAX MVC are accessed via a formal, secure public web-service API.  See &lt;a class="reference external" href="http://www.theserverside.com/news/thread.tss?thread_id=42722"&gt;JSON for Ajax Web Services&lt;/a&gt; .  [As an aside, this API seems to be the weakest part of AJAX implementations.  Some developers don't design the AJAX-related services with the kind of respect that ordinary web services are given.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="care-and-feeding"&gt;
&lt;h2&gt;Care and Feeding&lt;/h2&gt;
&lt;p&gt;While Ctrl-Shift-B's posting dwells on Smalltalk, it's still useful.  It shows how an architecture can be documented.  It shows a clear, thoughtful presentation on how the architecture implements common design patterns.  It has some compare-and-contrast elements that can help developers (and maintainers) understand the general design principles and the strategy for allocating responsibility.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>Not Quite Following the Book</title><link href="https://slott56.github.io/2007_12_07-not_quite_following_the_book.html" rel="alternate"></link><published>2007-12-07T21:23:00-05:00</published><updated>2007-12-07T21:23:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-12-07:/2007_12_07-not_quite_following_the_book.html</id><summary type="html">&lt;p&gt;I can't find all of the Better Software Magazine articles on the &lt;a class="reference external" href="http://www.stickyminds.com"&gt;Sticky Minds&lt;/a&gt;  web site, so I can't provide a permalink.  But look for &amp;quot;A Story About User Stories and Test Driven Development&amp;quot;.  It's good stuff, weighing out the good and bad features of &amp;quot;by-the-book&amp;quot; TDD.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ddj.com/"&gt;Dr. Dobb's Journal …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I can't find all of the Better Software Magazine articles on the &lt;a class="reference external" href="http://www.stickyminds.com"&gt;Sticky Minds&lt;/a&gt;  web site, so I can't provide a permalink.  But look for &amp;quot;A Story About User Stories and Test Driven Development&amp;quot;.  It's good stuff, weighing out the good and bad features of &amp;quot;by-the-book&amp;quot; TDD.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ddj.com/"&gt;Dr. Dobb's Journal&lt;/a&gt;  ran and endless series about Agile, Test-Driven Pair Programming, and Java by Robert C. Martin.  Good stuff; it seemed to bracket the ideal, textbook TDD world-view.&lt;/p&gt;
&lt;p&gt;What I tend to do isn't precisely the way TDD is usually described.  As Martin characterizes it, design happens as part of refactoring the code.  With deeply experienced people, I suspect that it looks like this is happening.&lt;/p&gt;
&lt;p&gt;But reading the articles in Sticky Minds helped me rethink what was really going on.&lt;/p&gt;
&lt;div class="section" id="design-still-happens"&gt;
&lt;h2&gt;Design Still Happens&lt;/h2&gt;
&lt;p&gt;I designed first and felt guilty about it.  Then I read the article by Gertrud Bjørnvig, James Coplien, and Neil Harrison; now I'm not as plagued by guilt.&lt;/p&gt;
&lt;p&gt;One of their points is that a good architecture won't happen.  Indeed, you have to clarify the architecture, and be sure that everyone can articulate the architecture before you're going to get anywhere.  The test cases and code will follow this overall architecture.&lt;/p&gt;
&lt;p&gt;Here's the important part.  The code must always be fit into an architecture; architecture leads, code follows.  Either you pick it explicitly, or you back into it by having someone -- haphazardly -- arrive at an architecture and start fitting code into that structure.&lt;/p&gt;
&lt;p&gt;I've seen this, but never knew precisely what I was seeing.  In a place dominated by mainframe folks, programs tend to process files and relatively few inputs and a reasonable number of outputs.  In a place dominated by Visual Basic programmers, everything has a GUI, even if the GUI just submits batch jobs. In a place &lt;a class="reference external" href="https://slott56.github.io/2006_06_20-over_solving_the_problem_or_when_your_architect_is_a_dba.html"&gt;dominated by DBA's&lt;/a&gt;  everything has to be in the database.&lt;/p&gt;
&lt;p&gt;The architecture and design is colored by experience and culture.  Left to their own devices, they work with the architecture they're most comfortable with.  If we turn people loose with a &amp;quot;pure&amp;quot; TDD, they'll pick their favorite architecture and work toward that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="now-i-feel-better"&gt;
&lt;h2&gt;Now I Feel Better&lt;/h2&gt;
&lt;p&gt;One big piece of advice was to design first, then write tests, then write code.  Whew!  I had been doing that.  Now I realize it wasn't just me.  There is a gap in the &amp;quot;formal&amp;quot; definition of TDD.  You need to do some design first.&lt;/p&gt;
&lt;p&gt;You need to have an architecture, and everyone on the team has to be able to articulate the architecture.  Then the tests and code will fill in the available spaces correctly and consistently.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Too Much of the Wrong Kind of Fun or The Object Model To The Rescue</title><link href="https://slott56.github.io/2007_12_03-too_much_of_the_wrong_kind_of_fun_or_the_object_model_to_the_rescue.html" rel="alternate"></link><published>2007-12-03T03:04:00-05:00</published><updated>2007-12-03T03:04:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-12-03:/2007_12_03-too_much_of_the_wrong_kind_of_fun_or_the_object_model_to_the_rescue.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2007_11_03-lenses_that_distort_our_software_flat_files_relational_databases_batch_processing.html"&gt;Lenses That Distort Our Software&lt;/a&gt; , I noted that the relational model of data can distort our view of the underlying reality that software models.  In that posting I was whining about how meaningful structure is sacrificed to force fit information into the rows and columns of the relational world …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2007_11_03-lenses_that_distort_our_software_flat_files_relational_databases_batch_processing.html"&gt;Lenses That Distort Our Software&lt;/a&gt; , I noted that the relational model of data can distort our view of the underlying reality that software models.  In that posting I was whining about how meaningful structure is sacrificed to force fit information into the rows and columns of the relational world.&lt;/p&gt;
&lt;p&gt;I think I have some ways to test an implementation to see if it's the reasonably good, or it's the &lt;strong&gt;Wrong Kind of Fun&lt;/strong&gt;™.  An implementation is Fun when things fit together, and it seems to work.  It's the Wrong  Kind of Fun when you can't implement something, performance is abysmal, or you have maintainability or adaptability problems.&lt;/p&gt;
&lt;p&gt;One indicator, BTW, seems to be the Paralysis of Analysis.  If you have a lot of open issues, and have invest a lot of time in very detailed plans, you may be having the &lt;strong&gt;Wrong Kind of Fun&lt;/strong&gt;.  Your technology choices don't fit your problem very well.&lt;/p&gt;
&lt;p&gt;I've been working with customers who are trying to renovate old applications and bring the technology up to date.  These are riddled with examples of the Wrong Kind of Fun.  The technology choices in the project planning are more examples of &lt;strong&gt;WKoF&lt;/strong&gt;.  But they're boring.  Here's a much more colorful example.  And yes, it's a &lt;strong&gt;Python To The Rescue&lt;/strong&gt;™ story.&lt;/p&gt;
&lt;div class="section" id="the-rpg-example"&gt;
&lt;h2&gt;The RPG Example&lt;/h2&gt;
&lt;p&gt;Recently, I started a big time-waster.  As part of moving away from my old PPC-based Mac, I've got to release myself from two Hypercard applications that I still actually use once in a while.  One is my resume (a database, not a document), which I update constantly.  The other is -- well -- harder to explain.&lt;/p&gt;
&lt;p&gt;For those of you old enough to remember Paper and Pencil Role-Playing Games, one of those RPG's is the &lt;a class="reference external" href="http://www.herogames.com/home.htm"&gt;Hero Game System&lt;/a&gt; .  I found it to be a pile of fun.  My Fourth Edition Champions book is falling apart from the use.  I haven't actually played in years, but my little nephews have heard about this thing that old people did, called P&amp;amp;amp;P RPG's.  From my sister's prodding, I've been dusting things off.&lt;/p&gt;
&lt;p&gt;Hero uses an elegant accounting system for describing characters.  Very elegant.  The fifth edition rules, indeed, are supported by a handy piece of software, Hero Designer, that appears to run everywhere and handle this accounting very nicely.  Very tempting.&lt;/p&gt;
&lt;p&gt;While elegant, it does require some care and a calculator.  Indeed, the math for some of this accounting can be baffling.  For basic features, it isn't so bad.  For Powers, however, the advantages, limitations and active points require a bunch of number crunching.&lt;/p&gt;
&lt;p&gt;Back in the olden days, we fourth-edition Hero players were left to our own devices for doing the number crunching.  And in my case, my own device was a Hypercard stack that helped me concoct Hero characters, powers, spells, gadgets, devices and what-not with relative ease.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-underlying-data-model"&gt;
&lt;h2&gt;The Underlying Data Model&lt;/h2&gt;
&lt;p&gt;The Hero data model is full of ad-hoc special-cases.  It's a paper and pencil game, mediated by people, so ad-hoc rules aren't too intimidating.  Indeed, the appeal of P&amp;amp;amp;P RPG's is the human mediation.  This isn't &lt;strong&gt;World of Warcraft&lt;/strong&gt;; it can be more subtle.  Of course, if your Game Master/Story Teller isn't very good, it's no better than WoW.  Indeed, some GM's are worse than playing WoW.&lt;/p&gt;
&lt;p&gt;The Hero rules started out with the express goal of being relatively simple.  There were several kinds of generalization-specialization relationships that were plainly in the minds of the original writers.&lt;/p&gt;
&lt;p&gt;I don't want to specify the whole game, but I do need to note that there are both deep symmetries and casual ad-hoceries that break those symmetries.  Everything in Hero has a collection of features.  For characters, these features include a complete set of Characteristics, plus instances of all the various kinds of &amp;quot;Powers&amp;quot;: Skills, Talents, Perks and proper Powers.  Gadgets, Bases, Vehicles and what-not are generally just containers for Powers, but may also have a few Characterstics of their own.&lt;/p&gt;
&lt;p&gt;The base Characteristics are relatively simple features: Strength for example is something you buy for your character.  A Character's Skills, Talents and Perks are slightly more complex features with more complex costs and effects.  The whole text of each effect is the content in the rule books; it doesn't really belong in a database.  What belongs in the database is the bewildering cost and effect calculations.&lt;/p&gt;
&lt;p&gt;As an aside, it's the Skills, Talents and Perks that separate a P&amp;amp;amp;P RPG from Multiplayer On-Line Role Playing Game (MORPG).  These require intelligent mediation by the GM, and clever use by the players.  Nothing beats those &lt;strong&gt;Clever Use of Skills&lt;/strong&gt;™ moments in a well-played game.&lt;/p&gt;
&lt;p&gt;A Power is a collection of more detailed features, generally including a large number of Advantage and Limitation modifiers.  Here's where the math kicks into overdrive.  The power has a basic cost.  Folding in the advantages leads to an &amp;quot;active cost&amp;quot; -- how effective the power really is.  Folding in the limitations derives the final cost.  There are endless special cases and exceptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-hypercard-implementation"&gt;
&lt;h2&gt;The Hypercard Implementation&lt;/h2&gt;
&lt;p&gt;My old Hypercard implementation viewed this data model through the Hypercard lens.  In Hypercard, your application is a database built from a collection of Cards.  Each card has active controls, including data fields and unique blocks of code.  Additionally, each Card belongs to a Background that includes data fields and blocks of code.  The presentation is a union of the background controls (a type or classifier for cards) and instance controls on the card itself.&lt;/p&gt;
&lt;p&gt;Given this Card-Background model, each background could have controls that are generic to Powers or Skills, and a card would have controls that are unique to a specific Power or that Skill.  Each card is effectively a class definition; the data filled into the fields create the instance.  Each background, then, becomes a kind of superclass.&lt;/p&gt;
&lt;p&gt;This doesn't work out well.  It's the &lt;strong&gt;Wrong Kind of Fun&lt;/strong&gt;™.  Yes, it has a handy built-in zero-pain, zero-cost GUI.  However, the object model is really flat.  You have background and card, and that's it.  Having a single background for Powers isn't good enough because standard Movement Powers are radically different from the ad-hoc heavy Special Powers.&lt;/p&gt;
&lt;p&gt;Ever since I wrote this -- back in the '90's -- I've been struggling with ways to make use of a proper object-oriented data model.  Okay, it's a very casual hobby, so I haven't spent a lot of time on it.  When I played RPG's with my kids, I revisited the problem with no real resolution.  I knew that Hypercard was the &lt;strong&gt;Wrong Kind of Fun&lt;/strong&gt;, but I didn't have an alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tool-and-platform-bias"&gt;
&lt;h2&gt;Tool and Platform Bias&lt;/h2&gt;
&lt;p&gt;Given a gnarly, complex data model, what do you do?  The data model seems pretty easy to normalize, until you start considering the exceptions.  Compounding the data modeling problem are the presentation and use case issues.&lt;/p&gt;
&lt;p&gt;On the one hand, a relational database tugs at the corners of my mind.  A tidy table-row-column data model, a few simple SQL scripts, and we have the rules in neat buckets.  Then, another tidy data model for characters and gadgets, and we can do simple joins between the character and the base data and -- voila -- character sheets and GM notes.  Sadly, it can't be this simple.  The number of ad-hoc special cases is almost unlimited.  While it's possible to create a generic cost function, it would be simpler to have variant cost functions for each special case.&lt;/p&gt;
&lt;p&gt;On the other hand, an OO database tugs in the other direction.  A tidy class model defines all of the features of a character or gadget.  An instance of the class model is the specific character or gadget.  Further, characters and gadgets can be treated as features, allowing recursive build-up of complex characters that make us of the Multiform power or even more complex Power Framework rules.&lt;/p&gt;
&lt;p&gt;Neither has a built-in GUI.  So, we're really looking at a whole platform, not just a data model.  Further, the C++ and Java toolsets that I've had at my disposal in the past weren't ideal for this.  Java would require an object model, a persistence framework, a GUI framework, and lead to a mountain of programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-cases"&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;What are the use cases?  There are a few, but they all amount to the following.  I create a character, gadget, vehicle, base, magical spell, artifact, whatever.  I want a standardized description, in the style of the Hero Rules.  I want correct cost and effect calculations done automatically.&lt;/p&gt;
&lt;p&gt;Do I need drag-and-drop?  Checkboxes?  Radio buttons?  Sure, they'd be nice.  But there are some features which are more central than a flashy GUI presentation.&lt;/p&gt;
&lt;p&gt;First, I want persistence.  A simple directory of stuff in easy-to-edit flat files will do nicely.  In short, the standard XML or Domain Specific Language (DSL) use case applies here.  I want structured content in a human-readable form.  I want some schema validation, and I have some transformations.&lt;/p&gt;
&lt;p&gt;Second, I want composition.  I want to be able to have standard libraries of things from which I can compose more complex stuff.  A magical spell, for example, is a kind of Gadget: it is a combination of Powers, Advantages and Limitations, with a name and some effects.  A collection of these spell definitions helps me  build characters quickly and simply.&lt;/p&gt;
&lt;p&gt;Third, I want standardized reports.  The Hero Rules have a long form and short form.  I want these two results as the result of a transformation.  Part of this will include the overall cost, allowing me to fine-tune a definition or a composite character to keep balance in the game.&lt;/p&gt;
&lt;p&gt;I don't really need much of a GUI.  Take that off the table, and we're back to data model and processing tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-to-the-rescue"&gt;
&lt;h2&gt;Python To The Rescue&lt;/h2&gt;
&lt;p&gt;Here's two ways that Python helped me to tease my tools out of Hypercard, and create some significant improvements.&lt;/p&gt;
&lt;p&gt;First, the GUI problem was solved by a blinding inspiration: &lt;strong&gt;Text Files Work&lt;/strong&gt;.  A character, gadget, spell, vehicle or base can be a first-class piece of Python code.  We can encode the Hero rules as a set of class definitions.   These classes need a few methods which produce a tidy report, and not too much more.  Each character or gadget is an instance of a class.&lt;/p&gt;
&lt;p&gt;Python becomes a Domain Specific Language for describing Hero characters and gadgets.&lt;/p&gt;
&lt;p&gt;What about the validation rules?  In some cases, a Power has options which are exclusive, or there are minima or maxima.  We can throw exceptions when attempting to construct an invalid object.  The use case is quite simple: we edit some text, execute the text, and read the messages.  The IDLE editor becomes our GUI.&lt;/p&gt;
&lt;p&gt;All of the ad-hoc special cases are simply subclass definitions, in the most natural and obvious ways.  We don't need to force-fit our complex data into the relational mold.  Instead, we define the obvious attributes and the methods we're interested in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duck-typing-and-the-development-cycle"&gt;
&lt;h2&gt;Duck Typing and the Development Cycle&lt;/h2&gt;
&lt;p&gt;The usual hard part is coming up with a suitably general framework for Characteristics, Skills, Talents, Perks and Powers.  And we need the necessary collection framework for Characters, Gadgets, Vehicles and Bases. These have a pleasant recursive relationship: a Character can contain Characters as well as Gadgets, Vehicles and Bases.&lt;/p&gt;
&lt;p&gt;But Python doesn't impose a sophisticated data model as a requirement.  We can develop in relative ignorance, adding features as necessary.  At some point, we need to refactor.  We can easily refactor without extensive breakage.  In particular, changing an attribute to a property (with the property built-in function) helps us evolve from a relatively simple model to a more sophisticated model.&lt;/p&gt;
&lt;p&gt;Further, a basic set of Test Cases, built with &lt;strong&gt;unittest&lt;/strong&gt;, helps us to evaluate our implementation directly.  As soon as we finish defining a class for a Power, we can write a simple test case to be sure that we've got a working implementation.  We can implement the examples from the Hero Rules to be absolutely sure that we're producing correct results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-no-database-where-s-the-persistence"&gt;
&lt;h2&gt;What?  No Database?  Where's the Persistence?&lt;/h2&gt;
&lt;p&gt;This is the principle that is sometimes lost on my clients.  &lt;strong&gt;Persistence&lt;/strong&gt;  does not mean &lt;strong&gt;Database&lt;/strong&gt;.  While SQL has it's advantages, it isn't the final word in persistence.  XML is also a good, standardized persistence mechanism.  A DSL may even be better, even if it isn't standardized.&lt;/p&gt;
&lt;p&gt;In this case, we have Python as object data base.  A file of Python source is the object model.  It is an executable persistent object.&lt;/p&gt;
&lt;p&gt;We can, for instance, import the Python object definition, and query it, process it and report on it.  We change the data object &amp;quot;manually&amp;quot;.  So it seems like we could &amp;quot;break the rules&amp;quot; or make changes that somehow bypass the &amp;quot;business rules&amp;quot; or &amp;quot;data validation rules&amp;quot;.  However, since our constructors embody these validation rules, we can't execute (&amp;quot;instantiate&amp;quot;) the model without the rules being satisfied.&lt;/p&gt;
&lt;p&gt;Currently, the only capability I seem to be lacking is concurrent updates.  Wait, isn't that what Subversion does?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-quick-example"&gt;
&lt;h2&gt;A Quick Example&lt;/h2&gt;
&lt;p&gt;Here's an example Gadget definition.  There's a lot of potential cleanup.  For now, I have long-winded names for the classes.  Since the DSL is Python code, classes can have aliases, giving us an easy way to provide better-looking names.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import hero
darkArmor= hero.Gadget(
  'Dark Armor',
  18,
  hero.Armor(
    armor=6,
    lim= ( hero.Focus_ObviousInaccessible(), )
  ),
  hero.Darkness(
     radius=2,
     lim= (
       hero.Focus_ObviousInaccessible(),
       hero.ActivationRoll_Activation12(),
     )
  ),
  hero.Superleap(
    distance=10,
    lim= ( hero.Focus_ObviousInaccessible(), )
  ),
)
darkArmor.longReport()
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>The Passive-Aggressive Programmer or Why Nothing Gets Done (Revised)</title><link href="https://slott56.github.io/2007_11_29-the_passive_aggressive_programmer_or_why_nothing_gets_done_revised.html" rel="alternate"></link><published>2007-11-29T11:00:00-05:00</published><updated>2007-11-29T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-11-29:/2007_11_29-the_passive_aggressive_programmer_or_why_nothing_gets_done_revised.html</id><summary type="html">&lt;p&gt;I see organizations stymied by a few individuals that seem to subvert initiatives and prevent progress.  Or they somehow evade being useful and spend all their time in hand-wringing and &amp;quot;yeah-but&amp;quot;-ing.  I'm not sure how to exploit what they can do, while getting past the stalls and evasions.&lt;/p&gt;
&lt;p&gt;Here's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I see organizations stymied by a few individuals that seem to subvert initiatives and prevent progress.  Or they somehow evade being useful and spend all their time in hand-wringing and &amp;quot;yeah-but&amp;quot;-ing.  I'm not sure how to exploit what they can do, while getting past the stalls and evasions.&lt;/p&gt;
&lt;p&gt;Here's a conversation that I'm labeling as &amp;quot;passive aggressive&amp;quot;.  What I think I'm hearing is a developer with some kind of private agenda, coupled with an unwillingness to actually say anything.  Instead, we have this weird non-communication.&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;We'd like to do X to solve this set of problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;I don't understand the problem.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;I sent you the list of 38 things which are broken, all of which are different examples of a few specific architectural problems.  We're solving that set of problems.  Indeed, I see you brought the list to this meeting.&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;Fine.  What do you need from me?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Can you do X to solve those problems?  Or, more precisely, what would it cost to do X to solve those problems?&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;I don't see how X solves these problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Good point.  What solution do you have?&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  Shrugs.  Shakes head.  Rolls eyes.&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Do you have an alternative?  If so, we need to know what that is.&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;No, nothing.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Okay, back to my question: can you do X to solve these problems?&amp;quot;&lt;/p&gt;
&lt;p&gt;And that's as far as the conversation gets.  PA responses vary from &amp;quot;I don't understand the problem&amp;quot; to &amp;quot;I don't see how X solves the problem&amp;quot; to &amp;quot;I don't see how X would work&amp;quot; to &amp;quot;I have situation where X can't work&amp;quot; to &amp;quot;I guess I'll just have to see it first&amp;quot; to &amp;quot;Good luck with that.&amp;quot;&lt;/p&gt;
&lt;p&gt;And yes, there was a &amp;quot;specific&amp;quot; complaint.  It was actually several use cases rolled into one complaint about X.  It took some doing, but each complaint was of the form &amp;quot;If we follow this process, we'll wind up in a situation where the process breaks down because we'll always, inevitably do the wrong thing.&amp;quot;&lt;/p&gt;
&lt;p&gt;Doomed To Failure&lt;/p&gt;
&lt;p&gt;This PAP's point was that a defied process so narrowly constrains us that we loose all ability to think.  Some PAP's lament the loss of &amp;quot;creativity&amp;quot; in a defined process.  Other PAP's lament the inability to make rational cost-benefit decisions within a defined process.&lt;/p&gt;
&lt;p&gt;My question in this case was, &amp;quot;Why won't we apply your kind of good decision-making?&amp;quot;  The first response sounded like &amp;quot;we never learn.&amp;quot;  The second response was a &amp;quot;Well, I understood that...&amp;quot; followed by some unsubstantiated pronouncement about the process.  The pronouncement wasn't a misinterpretation, it wasn't even a rumor.  It was a pronouncement that -- at the time -- seemed out-of-left-field random.  For example &amp;quot;I thought a tool did all this&amp;quot; or &amp;quot;I always expected that the API's worked like this&amp;quot; or &amp;quot;I need a GUI to remove user involvement&amp;quot; or some such.&lt;/p&gt;
&lt;p&gt;In short, it was really &amp;quot;this process won't work.&amp;quot;  Or perhaps &amp;quot;process, in general, doesn't solve problems, I solve problems.&amp;quot;  Since it isn't their process, it's &lt;strong&gt;Doomed to Failure&lt;/strong&gt;™.  This kind of evasion is closely allied with the next, and I lump them both into the category of having a private agenda.&lt;/p&gt;
&lt;div class="section" id="the-real-answer"&gt;
&lt;h2&gt;The Real Answer&lt;/h2&gt;
&lt;p&gt;In another example, we spent an amazing amount of time trying to work out a plan for solution X.  Since we had a Passive Aggressive Programmer involved, solution X was doomed.  The planning didn't really matter, since it wouldn't really work.  There was no &amp;quot;solution&amp;quot; because we don't know enough.  What we didn't know enough about varied through time, but we never knew enough.&lt;/p&gt;
&lt;p&gt;It's not that we lack details.  It's just that we never have the right details.  And the missing details are dependent on other imponderables.  In the long run, this isn't aligned with the PAP's private agenda, and can't be done.&lt;/p&gt;
&lt;p&gt;Direct questions get no answer at all.&lt;/p&gt;
&lt;p&gt;However, hints were dropped.  Specifically, the lead-off Passive-Aggressive questions: &amp;quot;Why are we here?&amp;quot; and &amp;quot;What Problem Are We Solving?&amp;quot;  These are hints that the PAP doesn't agree.  Indeed, the PAP has a better idea.  However, the true hallmark of the passive part of this is that there is no usable answer to a direct question.&lt;/p&gt;
&lt;p&gt;However, parsing the asides, non-answers, and By The Ways revealed a &amp;quot;consideration&amp;quot; or &amp;quot;side issue&amp;quot; that is a potential alternative solution.  This is a potentially viable alternative.  It hasn't worked before;  which is why I'm involved.  However, the point of being Passive-Aggressive (from my point of view) is that their approach is better, but they'll only passively make aggressive moves against any other idea.&lt;/p&gt;
&lt;p&gt;While there's a real answer, and it has some merit, the PAP seems to have two competing directions.  They want to follow their own agenda, but they don't want any real responsibility.  As near as I can tell, they just want to be left alone.  They don't want to cooperate, lead or follow.  They want to be followed, but don't want to do very much to assure that they take the lead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-wall-of-fog"&gt;
&lt;h2&gt;The Wall Of Fog&lt;/h2&gt;
&lt;p&gt;In another example, we wasted considerable time trying to work out a definition of the actual problem.  Since we had a Passive Aggressive Programmer involved, we can't fully define something.  Instead, we have endless rounds of the Yet Another Subtlety™ game.&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;So the process needs to do X&amp;quot;.&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;Essentially.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;You say that like there's something else.&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP: &amp;quot;Actually, it's X and Y.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;So, the process needs to do X and Y?&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;What do you mean by Y?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;You brought it up, what did you mean?&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;It could mean Y1 or Y2.  Some people go one way, some people go the other way.  What do you mean by Y?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;You brought it up, not me.  What do you mean?  Let's try this.  We're talking about requirements.  What is required?  Think of it this way.  As an outside consultant, I'm selling you X and Y1.  Would you pay money for that?&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;No, we'd only pay for X.  In that sense, Y's of no tangible value.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Okay.  So the process needs to do X.&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;Essentially....&amp;quot;&lt;/p&gt;
&lt;p&gt;And so, we never come to an actual understanding.  There's nuance piled on top of nuance.  It seems like the nuance card is really saying &amp;quot;I know this, and only I know this; you can never understand it.  Just leave me alone.&amp;quot;&lt;/p&gt;
&lt;p&gt;What's charming is that the PAP's solution to X wasn't working and couldn't easily be made to work.  There was this &lt;a class="reference external" href="https://slott56.github.io/2006_02_24-rat_holes_of_lost_time.html"&gt;Rat Holes of Lost Time&lt;/a&gt; ™ that was sucking up resources and things never quite worked. My approach is to stop digging a deeper hole.  Climb out and look all around.  Perhaps there's another, more productive, less error-prone approach.&lt;/p&gt;
&lt;p&gt;But, since we can't identify all the requirements, we can't talk about alternatives.  It's a clever strategy for maintaining control without actually saying anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-political-shield"&gt;
&lt;h2&gt;The Political Shield&lt;/h2&gt;
&lt;p&gt;My final example is from the developers who are absolutely convinced that politics is the number one consideration in any discussion of a solution.  The conversation works like this.&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;I need help with X.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Why on earth are you doing that?&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;It is the only politically acceptable solution.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;It would be simpler to implement Y.&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;Unacceptable.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;Do you actually know how Y works?&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;Doesn't matter how brilliant Y is, it's unacceptable.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:  &amp;quot;How about we extract some important lessons from Y, and apply them to improving X.&amp;quot;&lt;/p&gt;
&lt;p&gt;PAP:  &amp;quot;It would still be unacceptable, since Y is tainted by ... &amp;quot;  The reasons amount to nothing more than &amp;quot;It's not X&amp;quot;, or more accurately, &amp;quot;It's not my original idea, therefore, it is &lt;strong&gt;Doomed To Failure&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unshakable-beliefs"&gt;
&lt;h2&gt;Unshakable Beliefs&lt;/h2&gt;
&lt;p&gt;The Political Animals seem to have the least shakable belief system.  When their pet solution doesn't work well, we have to engage in a pointless conversation about alternatives.  I say pointless because I try to lift up alternatives, and they provide a large number of relatively irrational reasons why politics is more important than anything else.&lt;/p&gt;
&lt;p&gt;Indeed, to try and get the conversation on track, I try to help them prioritize.  Often, politics winds up at the top of the list of important considerations.  Correct Functionality, Optimal Use of Resources, Maintainability, Adaptability and Cost are -- often -- lumped as &amp;quot;technical,&amp;quot; and are secondary to politics.&lt;/p&gt;
&lt;p&gt;The conversation often devolves into PAP lecturing me about the &amp;quot;real world.&amp;quot;  This often includes the &amp;quot;perception is reality&amp;quot; justification.  Since perception is reality, only politically sensitive perceptions matter.  And the fact that they can't be made to work is just lack of cleverness or effort on my part.&lt;/p&gt;
&lt;p&gt;I'm partial to the &amp;quot;someone else must have had this problem; in all of your company's consultants, you can't find anyone who can solve this problem?&amp;quot;  That's generally when I find a way to excuse myself.  Clearly, they're right.  Someone else knows this, and it isn't me.  Further, there isn't anyone in their entire company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="patterns-of-non-performance"&gt;
&lt;h2&gt;Patterns of Non-Performance&lt;/h2&gt;
&lt;p&gt;I've seen the &lt;strong&gt;Secret Plan&lt;/strong&gt;  folks.  They don't provide input, and they don't actually help, either.  I've seen the &lt;strong&gt;Wall of Fog&lt;/strong&gt;  folks who seem to flip-flop between the paralysis of analysis and pitching a non-solution because it's the only idea they've got.  I've also seen the &lt;strong&gt;Political Shield&lt;/strong&gt;  folks who have such a profound (and unshakable) trust in organizational politics that rationality can't seem to enter the conversation.&lt;/p&gt;
&lt;p&gt;What to do?  Listening is important, even if they're not talking.  Secret Plan folks will eventually tip there hand.  They just won't tip it to me.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Lesson 1&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Never go to meetings alone.  Have a quiet colleague, someone who takes notes, and can be confided in.  Often, that's my job.  Recently, I've had to bring people along to do that.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Lesson 2&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Cut off the worrying.  Analysis of problems and enumeration of alternatives is fun for a while, but has a diminishing value.  At some point the problem statement is good enough.  Faced with this, you have to design a good solution, since requirements will erupt forever from a professional &amp;quot;yeah-but&amp;quot;-er.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Lesson 3&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Transcending politics is just hard.  Looking at a &amp;quot;hypothetical&amp;quot; solution that is free from political constraints is often impossible.  The Political Animals seem to be the best at having a Secret Plan, and erecting a Wall of Fog.  I think that the Political Shield is really a way to defend one of the other strategies.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Lenses that Distort our Software: Flat Files, Relational Databases, Batch Processing</title><link href="https://slott56.github.io/2007_11_03-lenses_that_distort_our_software_flat_files_relational_databases_batch_processing.html" rel="alternate"></link><published>2007-11-03T12:49:00-04:00</published><updated>2007-11-03T12:49:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-11-03:/2007_11_03-lenses_that_distort_our_software_flat_files_relational_databases_batch_processing.html</id><summary type="html">&lt;p&gt;When approaching reverse-engineering, we have to partition the big puddle of code into some useful pieces that we can manage intellectually, and will likely become parts of the resulting application.  In some cases, this is either impossible or valueless.  It may be that the application is so hopelessly bad that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When approaching reverse-engineering, we have to partition the big puddle of code into some useful pieces that we can manage intellectually, and will likely become parts of the resulting application.  In some cases, this is either impossible or valueless.  It may be that the application is so hopelessly bad that we can't partition it.  Often, the batch processing lens distorts the business processes.  In order to  understand the legacy processing, we need to account for this lens.&lt;/p&gt;
&lt;p&gt;More commonly, the data model is so out of date from current business practice, that there's little real value in attempting to preserve it.  We need to find the underlying model first, and then determine how the program imposes the application processing on this model.  To develop a model from the legacy code, we have to &lt;a class="reference external" href="https://slott56.github.io/2007_09_21-deconstructing_programs_from_c_or_finding_the_objects.html"&gt;Find the Objects&lt;/a&gt; .  In some cases, the actual objects are so distorted by the implementation lens that this can be challenging.&lt;/p&gt;
&lt;p&gt;When dealing with legacy batch programs, there are a number of typical design patterns.  If we understand these design patterns, we can also see how they distort the data model as well as the processing.&lt;/p&gt;
&lt;div class="section" id="the-relational-lens"&gt;
&lt;h2&gt;The Relational Lens&lt;/h2&gt;
&lt;p&gt;The simplest data model, when viewed through the relational lens, is distorted in terrible ways.  I've had DBA's try to tell me that data manipulation (Create, Retrieve, Update and Delete) does not have any underlying business &amp;quot;meaning&amp;quot;.  They're just operations on data.  The &amp;quot;meaning&amp;quot; is that there are transactions and persistence.&lt;/p&gt;
&lt;p&gt;What we often find is that the structure imposed by relational tables has distorted the underlying business entity.  In particular, a relational databases don't have proper containers, so collective structures are often flattened out through a join operation, making the resulting objects appear to be peer-like.  In fact, some attributes of the result rows belong to the container and other attributes define a child contained within a parent.&lt;/p&gt;
&lt;p&gt;A certain amount of processing follows a &amp;quot;group-by&amp;quot; (also known as a &amp;quot;Control Break&amp;quot;) design pattern to reconstruct the original parent-child relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-flat-file-lens"&gt;
&lt;h2&gt;The Flat File Lens&lt;/h2&gt;
&lt;p&gt;The flat file data model is not as obsolete as one would hope.  Much data is taken out of a reasonable structure, transformed into a series of rows, and reconstructed by another application.  Even a translation to XML can lose some of the relationships in the original structure.  Yes, ID= and IDREF= attributes can preserve all of the original object structure, but these are not always used well.&lt;/p&gt;
&lt;p&gt;In the rare case of truly ancient software (e.g., IBM Z/OS VSAM files or similar structures) we often have files with the following icky properties.&lt;/p&gt;
&lt;p&gt;Variant Record Types (i.e., not in first normal form).  COBOL folks call this a &amp;quot;redefined&amp;quot; record because some part of the record definition has a &amp;quot;REDEFINES&amp;quot; clause.  C folks call this a &amp;quot;union&amp;quot; because the union definition is required.&lt;/p&gt;
&lt;p&gt;Complex Joins and Repeated Data (i.e., not in second normal form).  We may find that we have several different files that repeat some common pieces of data; effectively restating a relationship.  In each file, we may find a slightly different mix of attributes.  These must be combined to reconstruct a complete entity.  However, we'll also find that the data rows from the various files involve contradictions that must be resolved manually.  Plan on it.&lt;/p&gt;
&lt;p&gt;Derived Data (i.e., not in third normal form).  Derived data in legacy applications -- almost universally -- cannot be understood from the available data.  In some cases, there are hidden constants or configuration values.  In other cases, data from some other source is folded in via a cryptic join-like lookup.&lt;/p&gt;
&lt;p&gt;Ultimately, these problems are part of the flat-file implementation of the business entities.  Each resulting entity will be considerably more sophisticated than the original file layout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-batch-design-patterns"&gt;
&lt;h2&gt;Some Batch Design Patterns&lt;/h2&gt;
&lt;p&gt;In the most recent example, it wasn't clear what constituted the business entity, and what operations where a merely temporary state change, and what operations where the enduring state change for the object.&lt;/p&gt;
&lt;p&gt;A few tests to confirm that the functions had been migrated to methods seemed sufficient.  However, as things progressed, it became clear that simplistic refactoring to encapsulate all fields with getters and setters was a mistake.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="not-all-updates-are-created-equal"&gt;
&lt;h2&gt;Not All Updates Are Created Equal&lt;/h2&gt;
&lt;p&gt;After converting most of a 10,000 line program, and starting to get some performance data from the profiler, a few methods showed up as very heavily used.  These were string conversions from the underlying model object.  Clearly, we should be able to cache results and save some conversion.&lt;/p&gt;
&lt;p&gt;Most attributes are static, but, a few attributes are changing, so we don't have an easily cacheable value.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>What Goes In the Database? Besides Data, of Course.</title><link href="https://slott56.github.io/2007_11_01-what_goes_in_the_database_besides_data_of_course.html" rel="alternate"></link><published>2007-11-01T10:23:00-04:00</published><updated>2007-11-01T10:23:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-11-01:/2007_11_01-what_goes_in_the_database_besides_data_of_course.html</id><summary type="html">&lt;p&gt;In order to talk about what goes in the database, we need to put the question into some kind of useful context.  Weirdly, the question came to me in a context so twisted and bizarre that it's a little hard to sort out what -- precisely -- was going on.  First, what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In order to talk about what goes in the database, we need to put the question into some kind of useful context.  Weirdly, the question came to me in a context so twisted and bizarre that it's a little hard to sort out what -- precisely -- was going on.  First, what goes in a database, then, things that muddy the waters.&lt;/p&gt;
&lt;p&gt;Before talking about databases, we need to look closely at our objective: knowledge capture and modeling.&lt;/p&gt;
&lt;div class="section" id="modeling"&gt;
&lt;h2&gt;Modeling&lt;/h2&gt;
&lt;p&gt;Software captures knowledge about data and processing.  Generally, our software knowledge capture involves building a model of the real world inside our computer systems.  Sometimes it's just a paper model (e. g., a UML depiction of something.)  Mostly, however, software is a kind of model of some interesting, valuable aspect of the real world.&lt;/p&gt;
&lt;p&gt;An object-oriented model of the world lets us capture that information in the form of objects and their interactions.  We define classes of objects, which include the object's attributes and behaviors.&lt;/p&gt;
&lt;p&gt;Another common model is a data-only model; for example, the SQL implementation of the relational model.  A third common model is a procedure-only model; for example PL/SQL code, or C programs.  Yes, I'm deprecating these models as incomplete.&lt;/p&gt;
&lt;p&gt;Clearly, when we're doing software development we need to get to an object-oriented model.  We can get there directly, via Python or Java.  Or we can get there indirectly by attempting to integrate a data-only model and a procedure-only model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-rdbms-bias"&gt;
&lt;h2&gt;The RDBMS Bias&lt;/h2&gt;
&lt;p&gt;Many well-meaning folks get all tangled up with the data-only model.  For some reason, the database appears as the central arterial essence of modeling and everything else is just a kind of tributary or organ feed by the lifeblood information flowing through that database.&lt;/p&gt;
&lt;p&gt;Data &lt;em&gt;is&lt;/em&gt;  more important than process; that much is clear.  We preserve data when converting among various kinds of application software.  We change processes frequently and freely.  Data, however, we preserve as the foundation for new processes.&lt;/p&gt;
&lt;p&gt;However, we have to avoid conflating data with database.  And we further have to avoid conflating database with a particular vendor's implementation.  Oracle is not the same as database; database is not the same as data.  But you hear people talk about Oracle as if it &lt;strong&gt;is&lt;/strong&gt;  the enterprise information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-goes-in-the-database"&gt;
&lt;h2&gt;What Goes In The Database?&lt;/h2&gt;
&lt;p&gt;Since our goal is a model with reasonably fidelity to the real world, and that model must involve both data and processing, our model is object-oriented.&lt;/p&gt;
&lt;p&gt;Clearly, our desire is to put objects into the database.  We have three fundamental choices: an object data store, blobs in a relational data store, or an object-relational mapping.&lt;/p&gt;
&lt;p&gt;Object data stores suffer from a taint.  &amp;quot;It ain't SQL&amp;quot;.  Even some of the fancy, extended Object SQL variants don't appeal enough to people who have money and are terribly afraid of the downside consequences of appearing to fail.  I've learned that failure (or the appearance of failure) hurts more than a success of equal magnitude.  People will work harder to avoid losing $100 than they will to gain $100.&lt;/p&gt;
&lt;p&gt;Blobs in a relational store have a narrow band where they make sense.  Generally, a blobby attribute makes the most sense.  We have a blob surrounded by ordinary relational database attributes.  While SQL can handle most attributes, it can't handle the blob; that has to be taken outside the SQL environment for processing.  It's opaque to SQL.&lt;/p&gt;
&lt;p&gt;An approach where everything is a blob, and the relational database is just storage for blobs is creepy.  Why not use an object database?  Oh, right, the taint.  Consequently, I've had customers suggest that we make everything a blob and force it into Oracle, bypassing all other SQL features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-orm-friendly-model"&gt;
&lt;h2&gt;The ORM-Friendly Model&lt;/h2&gt;
&lt;p&gt;If we focus on Object-Relational Mapping, we have numerous small victories.  First, we analyze our problem in terms of real-world entities, their attributes and behaviors.  We develop a software design, mapping real-world things to objects which are constrained by the need to implement them in Python (or Java or Ruby.)&lt;/p&gt;
&lt;p&gt;We can then develop a relational database design which carries the objects as &amp;quot;cleanly&amp;quot; as possible.  This SQL model will (often) look peculiar or even unorthodox to fat, old DBA's of my vintage.  [Kentucky Hills, late 1950's, good years.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-in-an-object-relational-model"&gt;
&lt;h2&gt;What's in an Object-Relational Model?&lt;/h2&gt;
&lt;p&gt;The fundamental entities usually map (more-or-less) to tables in a pretty direct way.  However, the real world has innumerable kinds of relationships.  The OO world tries to match this by applying a little bit of rigor.  The relational world, however, has only one kind of relationship: the foreign key.&lt;/p&gt;
&lt;p&gt;If we have a good object-relational mapping layer, we can provide pleasant object-friendly definitions which can be mapped to Data Definition Language (DDL) and Data Manipulation Language (DML) without burning too many brain calories.  If, on the other hand, we lack a good ORM mapping, we have to think through each kind of relationship and how we'll implement it.&lt;/p&gt;
&lt;p&gt;My ORM experience is split four ways among &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; , &lt;a class="reference external" href="http://www.djangoproject.com/documentation/model-api/"&gt;Django&lt;/a&gt; , totally home-brewed designs, and the kind of ORM that &lt;a class="reference external" href="http://ibatis.apache.org/"&gt;iBatis&lt;/a&gt;  handles.  SQLAlchemy and Django handle everything, including DDL.  iBatis requires that you do a competent database design, but it will build your Java objects neatly for you.&lt;/p&gt;
&lt;p&gt;All of these (even my own home brew) have to cope with transforming rich object semantics into limited relational implementation.&lt;/p&gt;
&lt;p&gt;We have tables and columns, of course.  Each table has a unique, system-generated surrogate primary key (PK) and whatever is required to assure that the PKs are unique.  A unique primary key index, or a suitable PK column declaration.&lt;/p&gt;
&lt;p&gt;The relational implementation always has foreign keys (FK).  The foreign keys can always be constrained with declared, formal FK constraint clauses.  The FK's are always based on the surrogate keys.&lt;/p&gt;
&lt;p&gt;For performance reasons, you might want to add indexes on non-key fields.  More power to you.  That's just performance tuning, not the essential model structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-missing"&gt;
&lt;h2&gt;What's Missing?&lt;/h2&gt;
&lt;p&gt;There are a number of things which are explicitly not present.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Triggers&lt;/strong&gt;.  While some argue for triggers, I haven't had a good experience with a mature application.  Maintenance of triggers seems to get exponentially more expensive.  Since we have object class definitions, it isn't clear why we need triggers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stored Procedures&lt;/strong&gt;.  Please don't put code in the DB.  It is a configuration management nightmare.  Further, I can't figure out what the allure is. ` PL/SQL is slow &amp;lt;{filename}/blog/2007/05/2007_05_27-plsql_and_java_the_benchmark_challenge_revised.rst&amp;gt;`_ .  While some people try to tell me that PL/SQL improves performance, I can't find much tangible evidence; no customer has benchmarks, and I can't see the basis for the claim.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cascade Delete Rules&lt;/strong&gt;.  These seem cool, but they aren't exercised much, and the few places where people can delete things, the application handles it nicely.  &amp;quot;What about transient data?&amp;quot;  Transient data doesn't belong in a database: use files or queues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other Random Constraints&lt;/strong&gt;.  The SQL Check Constraint is one of those things where there's a blurry distinction between &amp;quot;essential&amp;quot; features of the entity and special cases, exceptions and situational policies.  The check constraints are rarely universally true, so why try to embed them in the database?  There are few enduring, essential, universal constraints, outside mandatory foreign key and not-null relationships.  Just about everything else will evolve with the use cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about"&gt;
&lt;h2&gt;What About ...?&lt;/h2&gt;
&lt;p&gt;What about composite keys?  What about them?  They're a bunch of columns.  Use a secondary index for fast access.  Oh, they have to be unique?  Use a unique secondary index.  A composite key isn't the unique, never-changing object identifier.  It may not change much, but the mere possibility that it could change means it isn't a permanent row identifier.&lt;/p&gt;
&lt;p&gt;What about &amp;quot;natural&amp;quot; keys?  They're columns.  Use a secondary index.  They're rarely updated, but rarely isn't never; rarely isn't the same as &amp;quot;impossible&amp;quot;.  The surrogate key can't be changed; and doesn't need to be, since no one can see it except the DBA and developers.&lt;/p&gt;
&lt;p&gt;What about &amp;quot;CRUD-Level Stored Procedures?&amp;quot;  Create Retrieve Update Delete (CRUD) rules depends on context.  You can claim that each table should be wrapped by stored procedures to implement the CRUD rules.  By so doing, you might be breaking up the relational mapping.  For example, you may have a subclass associated with it's superclass via a 1:1 join.  The CRUD for the subclass now covers two tables.&lt;/p&gt;
&lt;p&gt;&amp;quot;Okay, How about CRUD rules for the entities?&amp;quot; is the response.  But isn't that what our object class definitions are for?  Are we now going to duplicate code in &amp;quot;CRUD-level&amp;quot; stored procedures plus class definitions in Java?  Nope.  No CRUD-level stored procedures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-already-here-and-we-re-holding-a-hammer-arguments"&gt;
&lt;h2&gt;It's Already Here™ and We're Holding A Hammer™ Arguments&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;It's Already Here&lt;/strong&gt;™ argument goes like this.  Since the RDBMS is already here, we may as well use it.  We paid for all these features.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;We're Holding A Hammer&lt;/strong&gt;™ argument is the traditional view that holding a hammer means we treat each problem like a nail.&lt;/p&gt;
&lt;p&gt;Neither are very compelling.  Just because it's here, doesn't mean it solves our problem.  Just because we're comfortable using it, doesn't mean it is particularly helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-peers-are-jerks"&gt;
&lt;h2&gt;My Peers are Jerks&lt;/h2&gt;
&lt;p&gt;This one took the cake.  Here's the email subject line: &amp;quot;What belong in data model and what belong in OO model ?&amp;quot;  After several more emails, there surfaced a horror story about three separate problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The programming was so bad that the programmers refused to use the data model.  They insisted that RI constraints either be turned off deferred.&lt;/li&gt;
&lt;li&gt;The data modeling was so bad that the programmers couldn't understand it.  The DBA's were forced to turn the RI constraints off or defer the checks.  Nothing quite so much fun as DB2 tables in Check Pending state for a day or two.&lt;/li&gt;
&lt;li&gt;The organization was so bad that the programmers and the DBA couldn't coexist except by strange passive-aggressive attacks.  &amp;quot;My code is optimal and involves the least effort on my part; your constraints must permit this application design&amp;quot; -- &amp;quot;My data model is optimal and involves the least effort on my part; your code must conform to this model&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="babies-and-bathwater"&gt;
&lt;h2&gt;Babies and Bathwater&lt;/h2&gt;
&lt;p&gt;Up front I alluded to a context so twisted and bizarre that it's a little hard to sort out what was going on.  Here's the context.&lt;/p&gt;
&lt;p&gt;The DBA who either was a jerk or was enduring the ineptitude of programmers who were jerks, claimed that the important lesson learned was the following:&lt;/p&gt;
&lt;p&gt;&amp;quot;Since then, I always delay my RI checking until the commit is issued.&amp;quot;&lt;/p&gt;
&lt;p&gt;So a bad organization leads to a strange, purely technological work-around to bad software, bad database design or both.  Later, our constraint-relaxing DBA tried to make this point to a DB2 user.  In DB2, they don't seem to have Oracle's flavor of constraint deferral.  Indeed, our DBA is told by the DB2 user that the organization doesn't make heavy use of RI.&lt;/p&gt;
&lt;p&gt;So, now our DBA is feeling half-way down the slippery slope of damnation.  Clearly, RI is essential.  Yet, this DBA was punished into turning it off, and then met someone who (gasp!) says that RI isn't even essential.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-was-told-to-do-the-wrong-thing"&gt;
&lt;h2&gt;I Was Told To Do The Wrong Thing&lt;/h2&gt;
&lt;p&gt;Everyone's pressured to do something technically dumb.  Here's my response:  I recognize that there's correct design, and then there's things that you do even though the people paying the bills are wrong.  The most important thing about being pressured to do something wrong is the following.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Everyone makes mistakes.  In this case, you happen to know in advance that this is a mistake.  Most people don't find out for years that they did something wrong.&lt;/li&gt;
&lt;li&gt;Every implementation has significant flaws.  In this case, it isn't a product of ignorance and you have a better alternative.  Most implementations won't be examined critically for years.  And even then, they will be examined by outside consultants and everyone deprecate their assessment as being a blatant attempt to win the conversion/rewrite/renovation business.&lt;/li&gt;
&lt;li&gt;Every manager who is out of touch with the users (and their use cases) as well as the technology still has one thing left that they understand: the schedule.  Using the schedule as a &lt;a class="reference external" href="https://slott56.github.io/2005_09_15-essay_11_management_trump_cards.html"&gt;management trump card&lt;/a&gt;  is generally bad.  In this case, you happen to foresee the consequences of bad decision-making.  Most times it's only in hindsight that you see the mistake.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Imagine what this situation will look like in a few years.  Pretend you just walked in to find this mess in production.  Pretend you're that someone who will be asked to find a better approach.  Someone who will be asked to document the potential improvements.  Someone who will be asked to make the business case that the mistakes are more costly to preserve than they are to fix.&lt;/p&gt;
&lt;p&gt;Faced with blindly stupid organization or managerial pressure, just do the following:  Start writing down the situation that someone else will discover in the future.  Document what the response should be to straighten it out.  Be factual, precise, and provide plenty of examples.  Don't play the blame game; it isn't helpful.  Don't fall into the trap of providing cost, schedule, ROI or other information that management uses to stall or deny a project.  Just document the mistake and the fix.&lt;/p&gt;
&lt;p&gt;Provide it to your replacement when you leave.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Parallelism, Concurrency and Pipelines (Updated)</title><link href="https://slott56.github.io/2007_10_29-parallelism_concurrency_and_pipelines_updated.html" rel="alternate"></link><published>2007-10-29T19:45:00-04:00</published><updated>2007-10-29T19:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-10-29:/2007_10_29-parallelism_concurrency_and_pipelines_updated.html</id><summary type="html">&lt;p&gt;A taxonomy of pipeline alternatives is a big, hairy deal, involving lots of alternatives.  While your basic API methods are relatively few in number, each language and platform introduces new options.  Without some focus, it's challenging to produce a big, fluffy description of all potential alternatives.&lt;/p&gt;
&lt;p&gt;However, the interesting thing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A taxonomy of pipeline alternatives is a big, hairy deal, involving lots of alternatives.  While your basic API methods are relatively few in number, each language and platform introduces new options.  Without some focus, it's challenging to produce a big, fluffy description of all potential alternatives.&lt;/p&gt;
&lt;p&gt;However, the interesting thing is the value of pipelining in the first place.  Often, folks get confused and start insisting on multiple threads, more memory or some other non-solution.&lt;/p&gt;
&lt;p&gt;Worse, I sometimes hear confusion about how pipelining even helps.  I've had too many questions about how to avoid bottlenecks in a pipeline, as if having a single slow step negates the value of the concurrent processing.&lt;/p&gt;
&lt;p&gt;The point here is that we can achieve concurrency fairly simply.  It doesn't have to involve complex API's.  We can use a domain specific language (e.g. a shell) or we can use XML Pipeline Language (XPL).&lt;/p&gt;
&lt;div class="section" id="oracle-pipelining"&gt;
&lt;h2&gt;Oracle Pipelining&lt;/h2&gt;
&lt;p&gt;Oracle, for example, has -- for a while now -- offered a pipelining feature so that parts of a program don't have to wait for the entire query to finish before processing rows from the query.  These pipeline functions yield objects that are -- in effect -- table rows one at a time.&lt;/p&gt;
&lt;p&gt;The big benefit is that we won't wait for the entire cursor to fetch all the rows.  Instead, we can apply a function to each row and yield that row to the calling application program.&lt;/p&gt;
&lt;p&gt;This is, effectively, what the Python &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;  construct does.&lt;/p&gt;
&lt;p&gt;We can do this without suffering through the complexities of Oracle or PL/SQL.  I want to emphasize the suffering and complexities here.  First, there isn't a lot of inherent parallelism in PL/SQL; this mechanism gives us a tiny bit of parallelism between parts of our application and the rows being built in the database.  Parallelism among non-database operations isn't possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shell-pipelining"&gt;
&lt;h2&gt;Shell Pipelining&lt;/h2&gt;
&lt;p&gt;Every POSIX-compliant operating system (that is to say, everything but Windows and IBM's Z/OS) has trivial access to a standardized set of API's for creating pleasant pipelines.  Best, of course, is that all of the variants on the Shell do this for us.&lt;/p&gt;
&lt;p&gt;The shell offers a wonderfully sophisticated math-like language of operators for connecting processes (and files) into tidy process composition expressions.&lt;/p&gt;
&lt;p&gt;There are several math-like operators:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;;&lt;/tt&gt; (also written as newline, &lt;tt class="docutils literal"&gt;\n&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;|&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;||&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Along with ()'s for grouping.  However, this isn't often-enough seen as the tidy little language that it really is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="process-composition"&gt;
&lt;h2&gt;Process Composition&lt;/h2&gt;
&lt;p&gt;The operators have to be thought of as &amp;quot;composition&amp;quot;, as in &amp;quot;process X is composed of process Y and Z&amp;quot;.&lt;/p&gt;
&lt;p&gt;Each operator defines a radically different kind of composition.&lt;/p&gt;
&lt;p&gt;The most commonly used operator is newline or ;.  This operator effectively creates a new process composed of two processes executed sequentially.&lt;/p&gt;
&lt;p&gt;The shell may optimize this by simply executing processes sequentially.  However, when we introduce ()'s, we force the shell to actually create this new process in the form of a subshell.&lt;/p&gt;
&lt;p&gt;The | operator creates a new process composed of two processes which execute concurrently, and have stdout of one process connected to stdin of the subsequent process.  This is fairly easy to understand, but is often treated as an &amp;quot;advanced&amp;quot; topic in books on Linux or the shell.  I'm not sure why this is treated as advanced, since it's so simple and so effective for improving performance of complex processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-confusing-special-case"&gt;
&lt;h2&gt;A Confusing Special Case&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; operator, because it can be used in a special unary context, seems to create the most confusion.  For some reason, a construct like &lt;tt class="docutils literal"&gt;Y &amp;amp; Z&lt;/tt&gt; isn't seen as two concurrent processes, but as Y running in some obscure nohup-like mode, and Z is part of ordinary sequential composition.&lt;/p&gt;
&lt;p&gt;A unary &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; operator (at the end of a single line) is the most common use for &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;, but it has to be seen as a special case.  When we do something like &lt;tt class="docutils literal"&gt;python idle.py &amp;amp;&lt;/tt&gt; it isn't an example of process composition in an obvious way.&lt;/p&gt;
&lt;p&gt;The binary &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; operator (between programs) is fairly rare.  Why run two programs concurrently when there's no obvious connection?  In many data warehouse contexts, we have a number of preconditions for a given load.  So we may have something like &lt;tt class="docutils literal"&gt;(A &amp;amp; B &amp;amp; C); D&lt;/tt&gt;.  In this case, we have three preconditions which all must finish before D can start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conditional-composition"&gt;
&lt;h2&gt;Conditional Composition&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;||&lt;/tt&gt; operators for composition are elegant ways to specify a kind of composition which is dependent on a condition.  In the &lt;tt class="docutils literal"&gt;&amp;amp;&amp;amp;&lt;/tt&gt; case, the left-hand process must finish normally.  In the || case, the left-hand process must not finish normally.&lt;/p&gt;
&lt;p&gt;This conditional composition was borrowed by perl, and used wisely, it can make a program somewhat easier to read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternate-notations"&gt;
&lt;h2&gt;Alternate Notations&lt;/h2&gt;
&lt;p&gt;It turns out that the XML folks have concocted several alternate notation for this, including Apache &lt;a class="reference external" href="http://commons.apache.org/jelly/"&gt;Jelly&lt;/a&gt;  and &lt;a class="reference external" href="http://www.w3.org/Submission/xpl/"&gt;XPL&lt;/a&gt; .  XPL doesn't seem to have a lot of implementations floating around.  &lt;a class="reference external" href="http://www.orbeon.com/"&gt;Orbeon&lt;/a&gt;  seems to be it; however, the Wikipedia page lists some other implementations including Oracle and &lt;a class="reference external" href="https://smallx.dev.java.net/"&gt;smallx&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;XPL adds a lot of detail (and a lot of syntax.)  In this case, I'm not sure the extra syntax provides any extra value.  The shell's syntax, which could be called a domain-specific language (DSL) solves the problem nicely.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://slott56.github.io/2006_12_23-xml_one_ring_to_rule_them_all.html"&gt;Lure of XML&lt;/a&gt;  is strong.  The shell's language seems easy to parse and unambiguous.  Why add syntax?  How much less ambiguous can we make it?&lt;/p&gt;
&lt;p&gt;[Incidentally, XPL is a heavily overloaded name.  See &lt;a class="reference external" href="http://wiki.xplproject.org.uk/index.php/XPL_News"&gt;http://wiki.xplproject.org.uk/index.php/XPL_News&lt;/a&gt;, &lt;a class="reference external" href="http://www.cs.toronto.edu/XPL/"&gt;http://www.cs.toronto.edu/XPL/&lt;/a&gt;  and &lt;a class="reference external" href="http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/proceedings/&amp;amp;toc=comp/proceedings/icis/2007/2841/00/2841toc.xml&amp;amp;DOI=10.1109/ICIS.2007.197"&gt;http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/proceedings/&amp;amp;toc=comp/proceedings/icis/2007/2841/00/2841toc.xml&amp;amp;DOI=10.1109/ICIS.2007.197&lt;/a&gt;  for other meanings.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-concurrency"&gt;
&lt;h2&gt;Using Concurrency&lt;/h2&gt;
&lt;p&gt;It can be challenging to reduce a big, complex algorithm down into smaller, pipelined steps.  However, doing this has a number of advantages, even if a pipelined shell script is never used.&lt;/p&gt;
&lt;p&gt;First, breaking a big algorithm down into small algorithms is always helpful.&lt;/p&gt;
&lt;p&gt;Additionally, the data structures which are passed from step to step can be done as in-memory structures or they can be explicitly written to a pipeline.&lt;/p&gt;
&lt;p&gt;In Java, we have a Pipe class that we can use to pass serialized objects among Java threads or processes.   And we can use commodity shell constructs to compose fast, parallel processing applications rather than Java or Oracle constructs.&lt;/p&gt;
&lt;p&gt;Since we have such a rich set of shell script operators for concurrency, we don't really need to deeply understand a lot of Java or Oracle to make this work.  We can decompose our algorithm, and use a few key serialized objects to move data among parallel processes.&lt;/p&gt;
&lt;p&gt;If we have an XPL implementation, we could use that instead of the shell.  The point is to leverage concurrent processing in a portable, flexible way.  We can avoid the details of API calls (and PL/SQL) while improving throughput in an application.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Is it really test driven reverse engineering?</title><link href="https://slott56.github.io/2007_10_21-is_it_really_test_driven_reverse_engineering.html" rel="alternate"></link><published>2007-10-21T21:28:00-04:00</published><updated>2007-10-21T21:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-10-21:/2007_10_21-is_it_really_test_driven_reverse_engineering.html</id><summary type="html">&lt;p&gt;When I was a kid, reverse engineering a legacy application was a challenge.  Tools were non-existent, and even a civilized practice like unit testing didn't really exist.  Now that we have test driven development, I think we can apply this to reverse engineering the billions of lines of legacy software …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was a kid, reverse engineering a legacy application was a challenge.  Tools were non-existent, and even a civilized practice like unit testing didn't really exist.  Now that we have test driven development, I think we can apply this to reverse engineering the billions of lines of legacy software that still exist in our application portfolios.&lt;/p&gt;
&lt;p&gt;There are a few things to watch out for, however.  Top on the list is trying to recover meaning from code which is intentionally obscure.&lt;/p&gt;
&lt;div class="section" id="the-dark-ages"&gt;
&lt;h2&gt;The Dark Ages&lt;/h2&gt;
&lt;p&gt;Back in the dark ages, we had programs written in assembler that did something of value, and the customer wanted a COBOL program.  Sometimes we had RPG applications that needed to be turned into COBOL.  Once, I even looked at some APL code that needed to be turned into COBOL.&lt;/p&gt;
&lt;p&gt;In the case of assembler, where there are no real rules imposed by the language, it wasn't possible to consider any kind of syntactic transformation to COBOL.  Assembler programs (like it's bastard child, C) could directly manipulate pointers and do awful things.  Of course, assembler programs could (and did) modify themselves at run-time.&lt;/p&gt;
&lt;p&gt;This is a translation from a semantically rich language to a poor language.  You could say &lt;em&gt;anything&lt;/em&gt;  in assembler.  In COBOL, you only had a limited subset of available language constructs.&lt;/p&gt;
&lt;p&gt;The strategy of choice was &lt;strong&gt;Semantic Transformation&lt;/strong&gt;.  Get a grip on the program's purpose and means, describe that in clear English, and then write that in COBOL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rpg-and-apl"&gt;
&lt;h2&gt;RPG and APL&lt;/h2&gt;
&lt;p&gt;For languages like RPG or APL, the language itself implies some powerful, but implicit algorithms.  In this case, the language was semantically limited -- you didn't have to say much -- but the meaning of each statement (or expression) was deep.  Writing COBOL programs was translating from a semantically deep language to a semantically shallow language.&lt;/p&gt;
&lt;p&gt;In some cases, there were opportunities for &lt;strong&gt;Syntactic Transformation&lt;/strong&gt;.  RPG programs (especially old RPG and RPG II) could be rewritten into a COBOL-like syntax.  A great deal of fixed program structure had to be wired in around this transliterated RPG and it never covered all the cases well, but it got you started.&lt;/p&gt;
&lt;p&gt;In the case of APL, it was purely a &lt;strong&gt;Semantic Transformation&lt;/strong&gt;  exercise.  The APL had to be read (and understood) in order to reason out what the COBOL was supposed to do.  Sadly, APL is a WORN (write-once-read-never) language, so this reverse engineering effort (had we won the bid) would have been epic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="from-c-to-shining-java"&gt;
&lt;h2&gt;From C to Shining Java&lt;/h2&gt;
&lt;p&gt;Recent reverse engineering exercises have been from the semantically rich language, C, to the semantically poor, but deep language, Java.  There are many C-isms that don't translate to Java.  While the syntax is similar, that's should be looked at as little more than coincidence.&lt;/p&gt;
&lt;p&gt;It isn't sensible to attempt a syntactic transformation, since that obviates any value that Java creates.  Without understanding the semantics and creating some kind of object model, Java isn't really very helpful.&lt;/p&gt;
&lt;p&gt;In order to construct proper Java objects, we need to pull out the relevant bits of C, merge them into a candidate object design, and then validate that design.  Clearly, a unit test is just what the doctor ordered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="driven-by-testing"&gt;
&lt;h2&gt;Driven By Testing?&lt;/h2&gt;
&lt;p&gt;Unit testing is a wonderful way to get a sense of incremental accomplishment.  As pieces of C program are rewritten into Java, a set of unit tests demonstrate that it &amp;quot;works&amp;quot;.  We have to be cautious in this assessment, however, since some C programming is hideously obscure.  A recent example (&lt;a class="reference external" href="https://slott56.github.io/2007_10_19-obscure_c_isms_and_how_to_find_them.html"&gt;Obscure C-isms and How to Find Them&lt;/a&gt; ) was a humbling few hours of pain.&lt;/p&gt;
&lt;p&gt;Here's the sequence.  We're writing code first, then fitting unit tests around the extracted code, then refactoring the code.  Is this test driven?&lt;/p&gt;
&lt;p&gt;Arguably, it isn't driven by testing.  We didn't fabricate a test scenario and fit code around it.&lt;/p&gt;
&lt;p&gt;However, the process is driven by the need for testing.  Further, test driven development doesn't start with testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-driven-isn-t-test-first"&gt;
&lt;h2&gt;Test Driven isn't Test First&lt;/h2&gt;
&lt;p&gt;Test Driven Development starts with a little bit of preliminary design to create an API.  Given the preliminary API design, we start to craft some tests.  Often, I'll realize that the notional API isn't quite the thing, and refactor the tests to describe a slightly different API.  This process rarely goes through more than one iteration; it's a notional API until I start implementing it.&lt;/p&gt;
&lt;p&gt;The test did not come first.  It was a close second after the notional API that was going to be tested.&lt;/p&gt;
&lt;p&gt;After an initial implementation has been written, I'll often revisit the tests because the notional API is starting to look clumsy.  Generally, a round of early refactoring happens because there are too many objects being created or too many individual steps, or too few discrete objects for comfortable testing.&lt;/p&gt;
&lt;p&gt;Reverse engineering is only slightly different from development.  The principle difference is that I rarely start with a notional API, but rewrite the legacy code into the new Java.  Then come test cases, followed by the early round of refactoring to get the API to be sensible.&lt;/p&gt;
&lt;p&gt;I claim that reverse engineering can be test driven.  It isn't dramatically different from development.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Obscure C-isms and How To Find Them</title><link href="https://slott56.github.io/2007_10_19-obscure_c_isms_and_how_to_find_them.html" rel="alternate"></link><published>2007-10-19T14:05:00-04:00</published><updated>2007-10-19T14:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-10-19:/2007_10_19-obscure_c_isms_and_how_to_find_them.html</id><summary type="html">&lt;p&gt;This is not a Python to the rescue story.  This is a true, deeply horrible situation.  I was rescued by a reframing technique I'll call &lt;strong&gt;Extraction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;First, the function had nested if's without enough else's -- the kind of thing that handles two of the four possible conditions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if( a ) {
    if …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;This is not a Python to the rescue story.  This is a true, deeply horrible situation.  I was rescued by a reframing technique I'll call &lt;strong&gt;Extraction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;First, the function had nested if's without enough else's -- the kind of thing that handles two of the four possible conditions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if( a ) {
    if( b ) {
        do something
    }
} else if( c ) {
    if( d ) {
       do something
    }
}
&lt;/pre&gt;
&lt;p&gt;What about the other two conditions, (&lt;em&gt;a&lt;/em&gt;  &amp;amp;amp;&amp;amp;amp; !*b*) as well as (&lt;em&gt;c&lt;/em&gt;  &amp;amp;amp;&amp;amp;amp; !*d*)?&lt;/p&gt;
&lt;p&gt;Second, the function had double negatives.  It had the famous if(a == FALSE) kind thing.&lt;/p&gt;
&lt;div class="section" id="unit-test-hell"&gt;
&lt;h2&gt;Unit Test Hell&lt;/h2&gt;
&lt;p&gt;Once I thought I had it, I wrote out the unit tests.  There are, with some analysis, 36 combinations of inputs.  The variable names, the context, the overall problem domain gave numerous hints as to what should happen.&lt;/p&gt;
&lt;p&gt;But it just didn't.  I couldn't get more than a few of the 36 cases to pass.&lt;/p&gt;
&lt;p&gt;So now I've got two problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I can't reason out what the program does.&lt;/li&gt;
&lt;li&gt;I'm not sure I even have the unit tests correct.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="reframing-techniques"&gt;
&lt;h2&gt;Reframing Techniques&lt;/h2&gt;
&lt;p&gt;When my head starts getting a flat spot from beating it on the wall, there are a number of techniques I use for reframing the problem.  My favorite is &lt;strong&gt;Predicate Calculus&lt;/strong&gt;.  In this case, however, the conditions got complex and drifted too far from the essential semantics of the function.  It became a kind of algebra exercise, not giving me any insight.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;English Specification&lt;/strong&gt;  isn't a bad way to reframe things.  However, in this case, the English didn't make any sense either.  The C was just too obscure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;, however, looked promising.  In a few minutes I had transliterated the C to Python, and had something that looked like it was producing meaningful results.  I revised the Python to write both a tidy .CSV summary as well as Java test case methods.  The CSV was a functional summary, the test case methods were cut and pasted into the Java TestCase.&lt;/p&gt;
&lt;p&gt;This is not a Python to the rescue story.  The Python unit test cases didn't look really right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reframing-through-extraction"&gt;
&lt;h2&gt;Reframing Through Extraction&lt;/h2&gt;
&lt;p&gt;Once the user test cases arrived, it became painfully clear that my reverse engineering was not even close.  My glib and easy reframing techniques hadn't worked.&lt;/p&gt;
&lt;p&gt;With my back up against the wall, I pulled out the big gun in reverse engineering -- &lt;strong&gt;Extraction&lt;/strong&gt;.  I extracted this function and began to put together enough stuff to get it to compile and run in isolation.  This is time consuming and doesn't readily resolve semantic problems.  Once you have something running, you are rarely any closer to knowing what it meant.&lt;/p&gt;
&lt;p&gt;Isolation, BTW, means complete isolation.  All dependencies (except for stdio.h) have to be resolved and the example has to fit in a single file.  There's nothing quite as clarifying as a one-file program.&lt;/p&gt;
&lt;p&gt;The process of doing &lt;strong&gt;Extraction&lt;/strong&gt;  is insight-producing.  The trick is to trust nothing.  First you pull out the function from the source file.  Then, when it won't compile, you start pulling things out of the various .h files and pasting them into the extraction.  After 20 minutes of cut and paste, I finally found the following nugget of pure evil.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#define TRUE 0
#define FALSE -1
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="are-you-kidding"&gt;
&lt;h2&gt;Are You Kidding?&lt;/h2&gt;
&lt;p&gt;No, apparently they were not kidding.  This clarified many things.  It made the if(a == FALSE) more clear.  It also pointed out many places where TRUE and 0 were used interchangably.  Inconsistency helped make it more obscure than it already was.&lt;/p&gt;
&lt;p&gt;Making this substitution into the Python gave me test cases that made some sense.  This allowed me to rewrite the Java to at least work.  The resulting class includes a few &amp;quot;XXX - Refactor&amp;quot; comments.&lt;/p&gt;
&lt;p&gt;When I told the client what I'd learned, one of their programmers sent me the following link:  &lt;a class="reference external" href="http://www.web-hits.org/txt/codingunmaintainable.html"&gt;How to Write Unmaintainable Code&lt;/a&gt; .  Now that I'm past the most horrible part of the program, this is funny.  Down in the section titled &amp;quot;Miscellaneous Techniques&amp;quot;, item 11 is this exact technique.&lt;/p&gt;
&lt;p&gt;What's funnier (or scarier) is anyone allowing this through their QA procedures, putting it into production and using it for years.  Clearly, code inspections are not on anyone's to-do list.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>SOA, Reuse and The Unmeasurable</title><link href="https://slott56.github.io/2007_10_08-soa_reuse_and_the_unmeasurable.html" rel="alternate"></link><published>2007-10-08T17:37:00-04:00</published><updated>2007-10-08T17:37:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-10-08:/2007_10_08-soa_reuse_and_the_unmeasurable.html</id><summary type="html">&lt;p&gt;I find the value proposition for a Service Oriented Architecture to be agility and simplicity.&lt;/p&gt;
&lt;p&gt;See Linthicum's Real World SOA blog postings, specifically &amp;quot;&lt;a class="reference external" href="http://weblog.infoworld.com/realworldsoa/archives/2007/10/core_value_of_a.html"&gt;Core Value of an SOA...&lt;/a&gt; &amp;quot;  Here's the interesting quote: &amp;quot;this does not mean that reuse is not a core value of SOA, but its value is much …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I find the value proposition for a Service Oriented Architecture to be agility and simplicity.&lt;/p&gt;
&lt;p&gt;See Linthicum's Real World SOA blog postings, specifically &amp;quot;&lt;a class="reference external" href="http://weblog.infoworld.com/realworldsoa/archives/2007/10/core_value_of_a.html"&gt;Core Value of an SOA...&lt;/a&gt; &amp;quot;  Here's the interesting quote: &amp;quot;this does not mean that reuse is not a core value of SOA, but its value is much less than we expected,&amp;quot;&lt;/p&gt;
&lt;p&gt;In a recent SD Times piece (&amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/article/column-20070915-02.html"&gt;Orchestration is the Key of SOA&lt;/a&gt; &amp;quot;), Linthicum makes the case that a proper SOA architecture has a number of tiers.  The lowest layer is the services tier; these are enduring features of the business, the industry, the regulatory context.  Higher layers include the orchestration or collaboration tier.  Some vendors (Sun's Java CAPS) split collaboration and orchestration tiers.  I prefer to merge them, since I'm not positioning products to prevent overlap.&lt;/p&gt;
&lt;p&gt;Here's the important quote: &amp;quot;orchestration itself is really about creating another layer of services that interact to form solutions, which is what SOA is all about&amp;quot;.&lt;/p&gt;
&lt;p&gt;This helped me realize the value of a SOA.  It isn't the services.  It's the collaboration among services at a higher level that reveals the value.&lt;/p&gt;
&lt;p&gt;So if it's not about reuse, what do we measure to be sure we're actually delivering something of value?&lt;/p&gt;
&lt;div class="section" id="customer-conversation"&gt;
&lt;h2&gt;Customer Conversation&lt;/h2&gt;
&lt;p&gt;A recent customer conversation highlighted the reuse issue.  They were responding my &amp;quot;It's not reuse, it's agility&amp;quot; point.  They countered with the simple &amp;quot;of course it's reuse.&amp;quot;  And I had an epiphany at that moment.  I tried to dig in to understand their point and realized that reuse is impossible to measure.&lt;/p&gt;
&lt;p&gt;&amp;quot;Of course you can measure reuse,&amp;quot; they explained.  &amp;quot;You compare the actual project &lt;em&gt;vs.&lt;/em&gt; how it could have been without the reuse.&amp;quot;&lt;/p&gt;
&lt;p&gt;I asked &amp;quot;How do you measure the things you didn't build?  You're talking about measuring the things that aren't there.  Who counts the things &lt;em&gt;not&lt;/em&gt;  built?  What criteria do they use?&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bentley-reuse-model"&gt;
&lt;h2&gt;The Bentley Reuse Model&lt;/h2&gt;
&lt;p&gt;Here's my reuse model.  I call it the Bentley Reuse Model (&lt;strong&gt;BRM&lt;/strong&gt;™).&lt;/p&gt;
&lt;p&gt;I'll reuse my Subaru Impreza two-door coupe instead of having you buy me a new &lt;a class="reference external" href="http://www.carsdirect.com/2006/bentley/continental_gt"&gt;Bentley Continental&lt;/a&gt;  for this project.  That reuse is direct ROI that results from engaging me as an architect.  I'd like 1% of that ROI as a project completion bonus.&lt;/p&gt;
&lt;p&gt;If you like that, I have an even better reuse model.  It's the Team Bentley Reuse Model (&lt;strong&gt;TBRM&lt;/strong&gt;™).&lt;/p&gt;
&lt;p&gt;Every one of your IT staff (all 100 of 'em) will reuse their existing transportation options (cars, public transportation, car pooling, bicycles, whatever.)  Since you no longer have to buy 100 Bentleys, you will have saved a fortune through the reuse I created.  I want my 1% of that savings, which -- interetingly -- is a new Bentley.&lt;/p&gt;
&lt;p&gt;So, you give me the Bentley because I made everyone else reuse their transportation.  And since they're already using this transportation, there's minimal disruption to the established organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-s-the-new-functionality"&gt;
&lt;h2&gt;Where's the New Functionality?&lt;/h2&gt;
&lt;p&gt;The hair-splitting over reuse arrives with the &amp;quot;what new thing are we getting?&amp;quot; question.  It's hair-splitting because it still involves measuring something that didn't happen.  It involves creating a counter-factual argument:  &amp;quot;What if we could have written all this code that we didn't actually write?&amp;quot;  &amp;quot;What if pigs flew?&amp;quot;  &amp;quot;What if flying pigs wrote this smaller set of code instead of the big set of code we planned on writing?&amp;quot;&lt;/p&gt;
&lt;p&gt;The fantasy is that some bundle of features stems directly from some volume of code at a ratio of 1:1.  [X] features are based on [Y] lines of code.  Through reuse we are somehow able to reduce the volume of code to [rY] where &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt; &amp;lt; 1&lt;/span&gt;, giving us some new relationship between code and features.&lt;/p&gt;
&lt;p&gt;This is a fantasy because -- of course -- we can't ever estimate the amount of code required to deliver any specific feature.  Some features may be available through training of the users.  A feature may be a consequence of using the right framework or the right persistence/ORM tool.  Some features are emergent consequences of other engineering choices.  Is this &amp;quot;reuse&amp;quot; or is this a simple consequence of good engineering?&lt;/p&gt;
&lt;p&gt;Isn't a framework reuse?  Isn't a database reuse?  What about xalan?  If we use XSLT based on Xalan, that's reuse, isn't it?  Isn't an operating system a kind of reuse?&lt;/p&gt;
&lt;p&gt;How should we credit our project managers with the technological insight to use an OS, database, framework, or open source project?  Perhaps reuse is too hard to measure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="measuring-things"&gt;
&lt;h2&gt;Measuring Things&lt;/h2&gt;
&lt;p&gt;Reuse is a comparison between a potentially dumb development effort and an actually less dumb development effort.  I reject the very idea that a dumb plan is a valid thing to measure.  We need to measure actual things.&lt;/p&gt;
&lt;p&gt;If we can't measure reuse, what can we measure?  Can we measure agility?&lt;/p&gt;
&lt;p&gt;I think we can measure agility by looking at our historical trend of delivering features through time and at the expenditure of dollars.  Forget code and forget reuse.  How long does it take to enable users with a feature?&lt;/p&gt;
&lt;p&gt;A SOA architecture can put features into the user's hands quicker than a non-SOA architecture.  Here's Linthicum's take: &amp;quot;Orchestration, in context to a SOA, is strategic, leveraging business rules to determine how systems should interact and better leverage the business value from each system through a common abstract business model.&amp;quot;&lt;/p&gt;
&lt;p&gt;If we use our SOA framework and tools to assemble a usable application out of services, then we've built something quickly.  We can be agile since we aren't rewriting fundamental services to implement a business change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reuse-did-happen"&gt;
&lt;h2&gt;Reuse Did Happen&lt;/h2&gt;
&lt;p&gt;Yes, reuse of the services &lt;em&gt;did&lt;/em&gt;  happen.  I never said it wouldn't.  But, we can't measure the ROI of that reuse.  Therefore, we're not going to try and leverage that reuse as the central value proposition for SOA.&lt;/p&gt;
&lt;p&gt;We can measure the ROI of agility, since we put features into the hands of users.  It's the business value of those features that are the value of SOA.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>SOA: Cheaper? Simpler?</title><link href="https://slott56.github.io/2007_09_24-soa_cheaper_simpler.html" rel="alternate"></link><published>2007-09-24T16:58:00-04:00</published><updated>2007-09-24T16:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-09-24:/2007_09_24-soa_cheaper_simpler.html</id><summary type="html">&lt;p&gt;My experience is that an SOA has the potential to be cheaper and simpler.  However, cheaper and simpler may not be the only value proposition.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/"&gt;Kontrawize&lt;/a&gt;  says:  &amp;quot;there is only something to gain with SOA for the parts of your software that genuinely have re-usable functionality, and are expected to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My experience is that an SOA has the potential to be cheaper and simpler.  However, cheaper and simpler may not be the only value proposition.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/"&gt;Kontrawize&lt;/a&gt;  says:  &amp;quot;there is only something to gain with SOA for the parts of your software that genuinely have re-usable functionality, and are expected to be re-used in the shorter term.&amp;quot;  Further, &amp;quot;in some circumstances it won't win you anything, and could cost you more to implement.&amp;quot;&lt;/p&gt;
&lt;p&gt;Interesting points.&lt;/p&gt;
&lt;p&gt;The reuse potential of an SOA is the core issue.  We wrestle with it constantly.  I don't know where the SOA = Reuse came from, but it's certainly a strong feeling.  When I Google &amp;quot;SOA Reuse&amp;quot; I get a score or more of hits on why SOA ≠ Reuse.&lt;/p&gt;
&lt;p&gt;I'm not sure how to tackle the SOA = Reuse problem, either.  Generally, we remind our customers that SOA isn't about reuse, &lt;em&gt;per se&lt;/em&gt;.  Reuse can happen, which is good, but it requires a disruptive change in software development and IT governance.  Rather than tackle that, we'd just like to solve your business problems quickly and simply.&lt;/p&gt;
&lt;div class="section" id="the-point-of-services"&gt;
&lt;h2&gt;The Point of Services&lt;/h2&gt;
&lt;p&gt;We try to sell SOA services based on Agility.  Since an overall composite application can be decomposed into loosely-coupled services and some flexible collaborations among those services, we should be able to rework the application cheaply.&lt;/p&gt;
&lt;p&gt;There is a big should, however.  If we aren't careful, we can embed business rules in the wrong piece of the architecture.  There's a central principle, here, that gets us to cheaper and simpler.  I call it &lt;strong&gt;Allocation of Responsibility&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I can see a &lt;a class="reference external" href="https://slott56.github.io/2005_09_18-essay_14_mutability_analysis.html"&gt;spectrum of mutability&lt;/a&gt;  in any application.  It works like this: some parts of an application are based on laws (political or natural) and are unlikely to ever change.  These must be services.  Some parts of an application are based on the overall industry or the organization of the company.  These don't change much either, and must be services, also.&lt;/p&gt;
&lt;p&gt;Some things are local to a line of business, a product, customer, vendor or even a specific contract.  These are things which vary, and may not make good candidates for services.  These are the kinds of special cases that catastrophically break application software.  These are the things that we need to put in scripts or collaborations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="services-aren-t-mutable"&gt;
&lt;h2&gt;Services Aren't Mutable&lt;/h2&gt;
&lt;p&gt;The central tenet is that faster and simpler flow from having some fixed services, defined clearly and plainly without too many odd special cases.  These are easy to write, and very easy to get into production.  The users should be able to cough out standard test cases for the standard situations without burning many brain calories.&lt;/p&gt;
&lt;p&gt;The exceptions, oh-by-the-ways, alternative courses, and extensions, however, take a bit longer to craft.  Often, these are best handled in a collaboration or higher-level application.  These components will rely on the fundamental service, but add value by handling a unique oddness correctly.  We rarely (if ever) have all the answers for these special cases.&lt;/p&gt;
&lt;p&gt;Indeed, one of the causes of &amp;quot;scope creep&amp;quot; (in the negative sense) and subsequent project cancellation is IT's inability to deal with ongoing flux in the business.  Each time some executive works out a new, bigger, more bizarre contract, IT learns one of two lessons in agility: how to respond or how to dig in and refuse to cooperate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-prevent-change-defense"&gt;
&lt;h2&gt;The Prevent Change Defense&lt;/h2&gt;
&lt;p&gt;IT project managers are penalized for permitting change.  Consequently, IT departments can build really effective prevent-change defensive strategies.  Often, complex &amp;quot;gatekeeping&amp;quot; exercises, scope statements, project reviews, program offices and other management shackles are used to prevent change.&lt;/p&gt;
&lt;p&gt;We penalize IT many ways.  First, our terminology indicates our preferences.  &amp;quot;Scope Creep&amp;quot; is pejorative: it's a failure.  Everyone wants to know the final, total price and the deadline date.  Any change -- any change at all -- is greeted badly.  If you reduce the cost, then your initial estimate was sand-bagging and you're a useless liar.  If you increase the cost, then your initial estimate was just a psych-bid to win the work, now you'll make up the difference with endless change control.&lt;/p&gt;
&lt;p&gt;Since users often add features during the life of a project, the budget will always grow.  Even if we play the &lt;a class="reference external" href="http://www.xprogramming.com/xpmag/whatisxp.htm"&gt;XP Planning Game&lt;/a&gt; , we only adjust the priorities and the order in which work gets done.  We never balance or contract the budget.&lt;/p&gt;
&lt;p&gt;Ultimately, Project Growth = Bad.  Therefore, we put as many obstacles in place to prevent the users from learning or changing.  Once the project starts, it's like water flowing down a series of waterfalls... You know the metaphor: it can't be diverted or changed, you can't add to or subtract from it.  The initial specification is the only specification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="responding-to-change"&gt;
&lt;h2&gt;Responding to Change&lt;/h2&gt;
&lt;p&gt;If we elect to respond positively to change, we have to fundamentally rethink the ways we measure project management.  Blind and stupid measures (&amp;quot;on time&amp;quot;, &amp;quot;under budget&amp;quot;) tell us nothing about what the users got out of the deal.  We need to look at what got delivered that people used.  What made a difference in the business?  What business value did we enable through software?&lt;/p&gt;
&lt;p&gt;Consider putting some services in place which handle the 80% cases, and using those services in some applications.  We build the simplest, dumbest cases first.  We can usually build this very, very quickly because we already know this about the business.&lt;/p&gt;
&lt;p&gt;The next 20% has to be considered very carefully.&lt;/p&gt;
&lt;p&gt;Is it subject to change?  Stable features of the business are more valuable than changeable features.  Rather than program the living daylights out of something, expose it as a well-thought out manual operation and be done with it.&lt;/p&gt;
&lt;p&gt;Does it have growth potential?  A feature of the business that users (executives, vendors, customers, etc.) like will be used more heavily in the future.  Perhaps this defines a new service to capture the next 16% (80% of last 20%).&lt;/p&gt;
&lt;p&gt;Is it a significant change from what we have in place?  Does it lead to devastating software changes?  This happens when something about the business model was encoded badly in software, and became a feature of the business.  Often the software and the business are conflated into the user's mental model of what can be done and what can't be done.  Anyone who starts thinking outside the box will force us to rethink this.  Why should cruddy software limit what the business can and cannot do?  And why should IT be enforcing that cruddy view of the business?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resulting-architecture"&gt;
&lt;h2&gt;Resulting Architecture&lt;/h2&gt;
&lt;p&gt;The architecture that results from an SOA exercise will be simpler because we have the opportunity to practice &lt;strong&gt;Allocation of Responsibility&lt;/strong&gt;.  The immutable features of the application are the core services.  We may write these or we may make use of our vendor's API's; either way, we have a base set of features that don't change much.&lt;/p&gt;
&lt;p&gt;These services are supplemented with collaborations that fill in the special cases.  Perhaps they choose between two services to manage the 80-20 general case-exceptional case processing.  In some cases, the collaborations may actually implement the special case because it's too specialized or mutable or depreciable to require a stable service.&lt;/p&gt;
&lt;p&gt;I think the big value of SOA is in allow us to pursue an Agile methodology.  We want to have frequent releases, learn our lessons quickly, and adjust as we go.&lt;/p&gt;
&lt;p&gt;We want to value change, not revile it.  We want to measure our success in business impact, not budget and schedule.  (People say &amp;quot;in the real world, we still have a fixed budget&amp;quot; as a way of playing their favorite prevent defense.  An agile approach doesn't spend more; at the worst, it spends the same amount incrementally, permitting change.  By welcoming change, however, it can spend less.  In the real world, the users change their minds.  Picking a schedule today for software that won't into production for two more years is insanity.  Rewarding managers for adhering to an insane schedule is, well, even less sane.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="drop-reuse-pick-up-cheap"&gt;
&lt;h2&gt;Drop Reuse.  Pick up Cheap&lt;/h2&gt;
&lt;p&gt;My position is this: use SOA to reduce the complexity of your software.  Rather than big programs, write small collaborations that implement special cases on top of the general-case services.  A good &lt;strong&gt;Allocation of Responsibility&lt;/strong&gt;  will simplify your software.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Deconstructing Programs from C; or Finding The Objects™</title><link href="https://slott56.github.io/2007_09_21-deconstructing_programs_from_c_or_finding_the_objects.html" rel="alternate"></link><published>2007-09-21T01:26:00-04:00</published><updated>2007-09-21T01:26:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-09-21:/2007_09_21-deconstructing_programs_from_c_or_finding_the_objects.html</id><summary type="html">&lt;p&gt;It's about 10,000 lines of C.  Much of the C is focused on &amp;quot;framework&amp;quot; issues -- logging, synchronization, parsing the parameters and that kind of thing.   In this case, it appears to be 30-50% of the original C code is stuff that is available in Java and can be removed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's about 10,000 lines of C.  Much of the C is focused on &amp;quot;framework&amp;quot; issues -- logging, synchronization, parsing the parameters and that kind of thing.   In this case, it appears to be 30-50% of the original C code is stuff that is available in Java and can be removed.&lt;/p&gt;
&lt;p&gt;So what's interesting?&lt;/p&gt;
&lt;p&gt;What's interesting is a vague outline of &lt;strong&gt;How to Deconstruct C&lt;/strong&gt;.  Further, it's a story of &lt;strong&gt;Python to the Rescue&lt;/strong&gt;, even though the goal is to write Java.&lt;/p&gt;
&lt;p&gt;There's a bottom-up view.  If the C program is reasonably well-written, each individual file will be a class-like module.  In some cases, the file will be more like a Python module or Java package: it will have a smattering of closely-related data structure and processing.&lt;/p&gt;
&lt;p&gt;There's a front-to-back view.  However, you can't really begin at the beginning, because the setup and initialization is often badly uncoupled from the processing it initializes.  You can, however, start reading the program at the end and work out some of the preconditions that have to exist for each statement to make sense.  You can, if the program is not pathologically poorly-written, arrive at a pleasant overview that makes some sense.&lt;/p&gt;
&lt;p&gt;You should eventually discover some essential data structure.  &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Jackson_Structured_Programming"&gt;Jackson Structured Programming&lt;/a&gt;  builds programs around the transformation of one data structure into another; this is the basic principle behind a well-designed set of XSL transformations.  It is also the heart of most batch programs -- transform the source records into output records.&lt;/p&gt;
&lt;p&gt;The really hard part is locating the record types in a procedural program.&lt;/p&gt;
&lt;div class="section" id="finding-the-central-loop"&gt;
&lt;h2&gt;Finding the Central Loop&lt;/h2&gt;
&lt;p&gt;In this case, the program had a very complex outline.  There was an &amp;quot;essential&amp;quot; loop, however, that was buried under the complexity.  I found it helpful to ask &lt;strong&gt;&amp;quot;What's The Business Value?&amp;quot;&lt;/strong&gt;  when confronted with another hideous C function.&lt;/p&gt;
&lt;p&gt;It turns out that the business records were aggregated into batches.  There was a long, complex preparation which created temporary tables and result tables.  A rather complex query-insert process populated the temporary tables.  Indexes were added, and the database's analysis procedures executed.  None of this created obvious business value.&lt;/p&gt;
&lt;p&gt;Eventually it became clear that there was a loop that did the relevant processing on rows within a batch.  Now we're getting somewhere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="order-n-squared"&gt;
&lt;h2&gt;Order N-Squared&lt;/h2&gt;
&lt;p&gt;It turned out that the central loop was actually two nested loops, created an O(n²) kind of process.  Yes, there was a sort, but each row was compared to each row after it in the collection.  So row 1 was compared to all rows 2 through &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In the long run, this can't be optimal.  I suspect that what this program really does can be transformed into an order &lt;em&gt;n&lt;/em&gt;  log(&lt;em&gt;n&lt;/em&gt;) operation that uses two passes.  The first pass builds a few useful hashmaps, the second pass then does the final, interesting algorithm.  However, at this point, it's hard to prove that.&lt;/p&gt;
&lt;p&gt;Once we'd uncovered the two inner loops, we had a picture of the overall structure.  However, we weren't really close to anything useful yet.  We haven't uncovered any fundamental objects or classes, just some algorithms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cryptic-class-definitions-parallel-arrays"&gt;
&lt;h2&gt;Cryptic Class Definitions: Parallel Arrays&lt;/h2&gt;
&lt;p&gt;Clearly, the things being processed in these two loops are the central objects of the application.  In a reasonable C program, you'd expect the objects to be part of a proper C-language type or structure declaration.&lt;/p&gt;
&lt;p&gt;However, because of the batch-processing overheads, this program used &lt;a class="reference external" href="http://download.oracle.com/docs/cd/B28359_01/appdev.111/b28395/oci05bnd.htm#insertedID5"&gt;Oracle array fetches&lt;/a&gt; .  It didn't have a proper record structure.  It did, however, have dozens of parallel arrays.  This was -- in effect -- a kind of &lt;tt class="docutils literal"&gt;List&amp;lt;BusinessRecord&amp;gt;&lt;/tt&gt; structure.  With a bunch of assumptions, we could construct the effective class definition for these central objects.&lt;/p&gt;
&lt;p&gt;The original array fetches can be replaced some simpler processing to load POJO's rather than dozen of parallel arrays.  The various layers of batch management overhead can be stripped away and the program pared down to the single function which does the real work.  Once we knew what we were looking at, we found the function did the array fetch and executed two nested loops to process all of the objects in the array.&lt;/p&gt;
&lt;p&gt;At this point, we could put our first unit tests together.  That's real progress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-to-the-rescue"&gt;
&lt;h2&gt;Python To The Rescue&lt;/h2&gt;
&lt;p&gt;Our target was Java.  However, that still leaves a need for tools.  Specifically, we had a pile of SQL which implied some table structures.  The customer had some idea what those tables looked like, but didn't have the actual DDL to create the tables.  (They never seem to keep this or put it under configuration control.  Why not?)&lt;/p&gt;
&lt;p&gt;So I spent a pleasant half-hour typing up a version of the DDL.  Rather than simply make a script, however, I made some small SQLAlchemy programs to create the database, load some randomly generated test data, and do some basic reporting.  This is all too painful in Java, but trivial in state-of-the-art tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="business-rules"&gt;
&lt;h2&gt;Business Rules&lt;/h2&gt;
&lt;p&gt;The program's parameter files were used to build two sophisticated ancillary data structures.  In effect, the parameters encoded two sets of business rules.  Half of the &amp;quot;parameter parsing&amp;quot; section of the program merely built these structures out of the INI files.  Somehow, the rules where used in the main loops to do the processing.&lt;/p&gt;
&lt;p&gt;The program did three separate things, each of which had an INI file.  These INI files, in turn included some general INI parameter settings.  We could partition the INI material into two parts: standard property-setting, and business rule definitions.  The property-setting stuff is garden-variety Java property processing; the associated C code to parse properties is no longer needed.&lt;/p&gt;
&lt;p&gt;After peeling them out of the INI files, the business rule definitions formed a kind of declarative language.  This little declarative language built two families of rules, each of which had distinct sets of keywords, options and parameters.&lt;/p&gt;
&lt;p&gt;The rules had first-class C type definitions.  The attributes of the class could be identified.  What about the methods?&lt;/p&gt;
&lt;p&gt;Business rules are -- universally -- examples of the &lt;strong&gt;Strategy&lt;/strong&gt;  design pattern.  That means that each rule embodies some unique processing.  While each rule in the C program was a simple structure with a half-dozen fields, it also had some method buried inside it.&lt;/p&gt;
&lt;p&gt;A little grepping of the source turned up a series of functions with similar names, each of which had a pointer to a rule field as an argument.  We found this kind of parallelism.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
someFuncA( ruleFieldA *arg, other args )
someFuncB( ruleFieldB *arg, other args )
&lt;/pre&gt;
&lt;p&gt;This clarified things considerably.  It told us that a rule was merely a &lt;strong&gt;Façade&lt;/strong&gt;  or &lt;strong&gt;Container&lt;/strong&gt;  for a set of individual Strategy objects.  Each &amp;quot;field&amp;quot; of the original rule definition was really a &lt;strong&gt;Strategy&lt;/strong&gt;  object, and the rule was just a container.&lt;/p&gt;
&lt;p&gt;This unveiled dozens of strategy class definitions which were knit together in these rule containers.  This, also, lead to a cool Pythonic design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pythonic-initialization"&gt;
&lt;h2&gt;Pythonic Initialization&lt;/h2&gt;
&lt;p&gt;One of the cooler Python techniques is to use basic Python class and object definitions to create a Domain Specific Language (DSL) using Python syntax.  Projects like Django's data model and SQLAlchemy show elegant ways to use Python syntax to create a DSL.&lt;/p&gt;
&lt;p&gt;While our goal was Java, it's so much quicker and easier to prototype the design in Python.  In a few minutes -- seriously, minutes -- I had enough Python class definitions to demonstrate that we could trivially transform the INI files into Python or Java object definitions.&lt;/p&gt;
&lt;p&gt;The best part was replacing INI files and the associated parsing with first-class Java (or Python) as the source language.  The user-facing initialization file would have things like &amp;quot;[section]&amp;quot; replaced with &amp;quot;rules= {&amp;quot;, plus a few extra commas.  Except for a little required boilerplate code at the beginning and end, it would be identical.&lt;/p&gt;
&lt;p&gt;Thanks, Pythonistas, for inventing such a cool declaratory style of Python programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-unit-testing"&gt;
&lt;h2&gt;More Unit Testing&lt;/h2&gt;
&lt;p&gt;Once we decoded the rules as a bunch of largely static initialization, we could turn to the method hidden down inside each individual rule.  We examined each of the someFuncA and someFuncB rule-specific processing.&lt;/p&gt;
&lt;p&gt;At this point, we were nearing the heart of what was going on in this program.  There were about half a dozen of these rule-specific methods that had to be unwound into a forest of &lt;strong&gt;Strategy&lt;/strong&gt;  class hierarchies.  Each &lt;strong&gt;Strategy&lt;/strong&gt;  class hierarchy needed a proper set of unit tests to validate the precise business rule that it implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flags-and-classes"&gt;
&lt;h2&gt;Flags and Classes&lt;/h2&gt;
&lt;p&gt;Flag settings have lots of interpretations.  They might be dynamic &lt;strong&gt;States&lt;/strong&gt;  or they might be static &lt;strong&gt;Strategies&lt;/strong&gt;.  Either way, a flag -- even a boolean flag -- is often a class definition; it is rarely a simple boolean value.  A flag with enumerated values usually identifies a family of related subclasses.&lt;/p&gt;
&lt;p&gt;If-statements to test flags have to be looked at as potentially polymorphic methods of the implied subclasses.  In our case, there were parallel function names that made the polymorphism more obvious.  However, rotten choice of function names can conceal the relationship.&lt;/p&gt;
&lt;p&gt;Often we get to do &lt;strong&gt;If-Statement Hoisting&lt;/strong&gt;.  Once we've elected to transform a flag into a class, we'll find if-statements which are now needless class membership tests.  For example, down deep within someFuncA will be an if-statement that asks if the rule has the ruleFlavorA flag set.  Once we make the rule flavors into classes, each class has a unique implementation of someFunc, and a test for class membership go away.&lt;/p&gt;
&lt;p&gt;In effect, the if statement is hoisted out of the function and moved forward in the algorithm.  The test becomes part of initial rule object construction.  This is an optimization that is very elegant.  Rather than execute the if statement for every one of the &lt;em&gt;n&lt;/em&gt;² record processing steps, we execute the if statement one during initialization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="globals-and-integration"&gt;
&lt;h2&gt;Globals and Integration&lt;/h2&gt;
&lt;p&gt;One of the biggest problems with converting C programs is the reliance on global variables.  The global variables make the scope of every function suddenly murky.  In a reasonably well-written program, there will be few globals.&lt;/p&gt;
&lt;p&gt;The parameters and properties, clearly, need to be global.  Often, a static class can be used to implement a kind of &lt;strong&gt;Singleton&lt;/strong&gt;  for this.  In other cases, we can provide the parameter object to various objects within the program, eliminating the little bit of semantic confusion that purely static classes can raise.&lt;/p&gt;
&lt;p&gt;However, we uncovered one bothersome situation where a deeply-buried business rule method made an appeal to a global variable.  A little reflection, however, made this less bothersome.  A business rule executes in a &amp;quot;context&amp;quot; of global parameter settings.  In this case, the context included some alternative business rules.&lt;/p&gt;
&lt;p&gt;An open issue is whether this context was an attribute of the object, or a parameter to the business rule's method.  This is almost a matter of preference.  Method function parameters can always be turned into object properties.  However, there's usually some semantic behind the attributes.  We have to return to our initial question, &lt;strong&gt;&amp;quot;What's the Business Value?&amp;quot;&lt;/strong&gt; for guidance in the parameter vs. attribute question.&lt;/p&gt;
&lt;p&gt;It didn't take too much refactoring to provide the necessary context to the rules.  Since we were building unit tests, it was easy to move things around and rerun the tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="allocating-responsibility"&gt;
&lt;h2&gt;Allocating Responsibility&lt;/h2&gt;
&lt;p&gt;Now we arrive at the actual heart of the matter.  What is each class responsible for?  The original C functions have several dispositions.  Either they're junk and get removed, or they're available in Java and get replaced.  What's left has to become a method of some class.  Where do we place the C functions?&lt;/p&gt;
&lt;p&gt;The classes we've identified to this point will fall into two groups: passive classes, which are dominated by attributes, getters and setters; and active classes, which are dominated by complex methods.  The distinction is a little subjective and it will change as the deconstruction proceeds.&lt;/p&gt;
&lt;p&gt;These more passive classes will become Java Beans.  Often this is clear because the class is persisted, or is merely an item in a collection.  The more active classes will usually become the new application program.&lt;/p&gt;
&lt;p&gt;Most C functions have a mixture of arguments and global variables as inputs and outputs.  It helps to make an attempt to characterize the implied inputs and outputs of each C function.  The assignment statements define the state changes.  In some cases, this will lead to an obvious partitioning of C functions around their effects.&lt;/p&gt;
&lt;p&gt;In some cases, it is clear that a function is a method of a class because it updates attributes of that class.  However, a C function can have so many effects and side effects that the fog is nearly impenetrable.&lt;/p&gt;
&lt;p&gt;One indicator is the parameters to the function.  For example, a function which uses one of our &lt;strong&gt;Strategy&lt;/strong&gt;  classes as an argument is probably a method of that strategy class.  Similarly, when we deconstructed dynamic flags into a &lt;strong&gt;State&lt;/strong&gt;  design pattern, all of the functions with if-statements based on the state settings are likely methods of the state subclasses.&lt;/p&gt;
&lt;p&gt;In many cases, a strategy method will imply methods in one of the &amp;quot;passive&amp;quot; bean classes.  We may see several functions do similar processing on a bean class.  The similarity should be noted with a //TODO comment.  Later, the to do list can be examined for opportunities to refactor the similar-looking processing out of the strategy and into the bean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-to-look-for"&gt;
&lt;h2&gt;Things to Look For&lt;/h2&gt;
&lt;p&gt;Here's the start of &lt;strong&gt;Finding The Objects&lt;/strong&gt;  (FTO™) in C Programs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Proper structures are the usual suspects for finding class definitions.&lt;/li&gt;
&lt;li&gt;A union defines peer classes with a common superclass.&lt;/li&gt;
&lt;li&gt;A C source file may be a class definition.  Does it provide operations for a common set of attributes?&lt;/li&gt;
&lt;li&gt;A parallel set of arrays may hide a class definition.  Are the arrays indexed by the same value?  Functions with apply to one or more parallel arrays may be methods of the implied class.&lt;/li&gt;
&lt;li&gt;A flag (either boolean or with an enumerated set of values) may be a peer subclass discriminator.  The various if-statements to test this flag may be replaced by polymorphic methods of a family of subclasses.&lt;/li&gt;
&lt;li&gt;Globals merely serve to muddy the water.  In some cases, a variable is global out of pure laziness; it has a narrow scope.  In other cases, a global is used in enough different scopes that it is clearly an implied attribute of some objects, or is an implied parameter to method functions.&lt;/li&gt;
&lt;li&gt;State changes -- assignment statements -- provide some hint on where responsibility belongs.  In many cases, a C function will do too much and must be decomposed into methods of distinct classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Python helps.&lt;/p&gt;
&lt;p&gt;First, it's easier to create test data and mess around in the database using SQLAlchemy.  It leaves a processing trail.  With Python helper programs and scripts we can reload the test database, do performance testing and do integration testing.&lt;/p&gt;
&lt;p&gt;Second, the Pythonic world-view gives us hints as to how we can eliminate programming in favor of declaration.  Rather than parse INI syntax, just write a readable object or class definition.&lt;/p&gt;
&lt;p&gt;Third, we can dry-run object designs in Python far more quickly and simply than we can in Java.  Once it seems to work, we can add the necessary Java overheads to make it statically correct.&lt;/p&gt;
&lt;p&gt;No, we're not done.  I don't have final metrics yet for a C-to-Java transformation.  Indeed, we're still waiting on the client.  However, we think we'll cut the program down to a third of it's original size.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="unit testing"></category><category term="tdre"></category></entry><entry><title>Get this to "Work"</title><link href="https://slott56.github.io/2007_08_27-get_this_to_work.html" rel="alternate"></link><published>2007-08-27T10:16:00-04:00</published><updated>2007-08-27T10:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-08-27:/2007_08_27-get_this_to_work.html</id><summary type="html">&lt;p&gt;What I knew was this: I had a program, and I was supposed to make it work.  I went to a meeting, the responsibility was duly handed off to me.  &amp;quot;Alex has it mostly done, you just need to pitch in and help finish this by Friday.&amp;quot;&lt;/p&gt;
&lt;p&gt;Okay.&lt;/p&gt;
&lt;p&gt;I listened …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What I knew was this: I had a program, and I was supposed to make it work.  I went to a meeting, the responsibility was duly handed off to me.  &amp;quot;Alex has it mostly done, you just need to pitch in and help finish this by Friday.&amp;quot;&lt;/p&gt;
&lt;p&gt;Okay.&lt;/p&gt;
&lt;p&gt;I listened, patiently, hoping to get some sense of what it was supposed to do.  Eventually, it became clear that it was supposed to read a file, write a file and put stuff into a database.  It imported some fancy classes from elsewhere in the enterprise that created some new fields in the records of the file.&lt;/p&gt;
&lt;div class="section" id="what-is-the-result"&gt;
&lt;h2&gt;What Is The Result?&lt;/h2&gt;
&lt;p&gt;I consider persistence to be more-or-less sacred.  You have to take it very, very seriously.  This program wrote a record &lt;strong&gt;and&lt;/strong&gt;  inserted it into a database.  Was this just dumb belt-and-suspenders stuff?  Did they not trust the database?  Or, did was the file used by some other application, separate from the database?  Both ideas made me crazy.&lt;/p&gt;
&lt;p&gt;If it was belt-and-suspenders, they needed to think carefully about their database choices.  If you can't trust a database, why use it for mission-critical data?&lt;/p&gt;
&lt;p&gt;If the data went both to the database and to other applications that couldn't connect to the database, they needed to think carefully about their database choices.  If you can't use a database, why are we putting data into it?&lt;/p&gt;
&lt;p&gt;The program produced two outputs, which could -- under fairly ordinary circumstances -- be shown to be different.  All you have to do is a re-run and the database timestamps may not match the filesystem timestamps.  What does &amp;quot;works&amp;quot; mean when you can easily doubt the results?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-testing"&gt;
&lt;h2&gt;Some Testing&lt;/h2&gt;
&lt;p&gt;The program was small, and a few of the classes had tests.  I've learned (in &lt;a class="reference external" href="https://slott56.github.io/2006_08_04-tools_arent_the_answer.html"&gt;Tools Aren't the Answer&lt;/a&gt; ) that even abstract superclasses and interfaces need test cases.  So, I'd have to add those to the test suite to be sure that things really &amp;quot;worked&amp;quot;.&lt;/p&gt;
&lt;p&gt;Interestingly, most of the program was piled into the class with public static void main in it.  This is typical clumsy design.  It makes a bunch of interesting parts of the program static, and forces them into one method, main, which is famously hard to reuse.  The main method has an interface that's often difficult to live with.  Who wants to make a properties file just to call the method named &amp;quot;main&amp;quot; of some other class.  Why not just call well-defined interface methods?&lt;/p&gt;
&lt;p&gt;Of course, this main program is a royal pain to write unit tests for.  Of course, there were none.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;The best part about this is the lack of usable documentation. There were no documented requirements, and no overall design.  There was word-of-mouth and code.&lt;/p&gt;
&lt;p&gt;I demanded a written specification.  The customer called a meeting.  I said that I didn't work well with oral requirements; I needed something written.  Their leadership called our Account Executive to cuss me out for requiring things in writing.&lt;/p&gt;
&lt;p&gt;The Account Executive told me that I was being even more of a jerk than usual by asking for written specifications.  I reminded the AE that verbal requirements are merely an opening for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Plausible_deniability"&gt;plausible deniability&lt;/a&gt; .  I could already hear the conversation.&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;You bums didn't get our software to work on time.&amp;quot;&lt;/p&gt;
&lt;p&gt;Us:  &amp;quot;What do you mean by 'work'?&amp;quot;&lt;/p&gt;
&lt;p&gt;Them:  &amp;quot;Idiots!  You went to the meetings.  You should know.&amp;quot;&lt;/p&gt;
&lt;p&gt;Us:  &amp;quot;You're right, obviously.  We think it works.  Our recollection of the meetings tells us it works.&amp;quot;&lt;/p&gt;
&lt;p&gt;Them:  &amp;quot;But it doesn't.  It doesn't do [X]&amp;quot;&lt;/p&gt;
&lt;p&gt;Us:  &amp;quot;I don't recall that being discussed.&amp;quot;&lt;/p&gt;
&lt;p&gt;That doesn't make for a good relationship with a client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preventing-disaster"&gt;
&lt;h2&gt;Preventing Disaster&lt;/h2&gt;
&lt;p&gt;I would prefer to prevent the whole debacle.  But how do you ask for reasonably clear specifications when they clearly refuse to write things down?&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;I need to know what it does.&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;We'll tell you during testing when it doesn't work.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;How about you tell me now?  That would prevent waiting until test time to learn what it was supposed to do.&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;We can't.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Okay.  Imagine that it failed a test.  What is the most important test?  What would be the biggest mistake on my part.&amp;quot;&lt;/p&gt;
&lt;p&gt;Them:  &amp;quot;Not meeting the deadline date.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="structural-issues"&gt;
&lt;h2&gt;Structural Issues&lt;/h2&gt;
&lt;p&gt;No specifications.  A structure unsuited for unit testing.  Incomplete unit tests.  Both file and database outputs.&lt;/p&gt;
&lt;p&gt;And that's just the beginning.  The first week we were told that there's a central stored procedure call.  The procedure hasn't been written, doesn't have a defined API, but it is central.  We were also told the procedure had existed for a long time.  It either didn't exist or did; either way, no one could provide us an API.&lt;/p&gt;
&lt;p&gt;This week we found that the procedure returns a result set of multiple rows.  This is a devastating change to the cardinalities already written into the program.  The program assumed a kind of 1 row in-1 row out process.&lt;/p&gt;
&lt;p&gt;It turns out that it's more like the following:  A cluster of &lt;em&gt;n&lt;/em&gt;  related rows come in; a common attribute is used to execute a stored procedure which returns a result set of &lt;em&gt;n&lt;/em&gt;  related pieces of data.  Somehow the &lt;em&gt;n&lt;/em&gt;  rows in the result set are correlated with the &lt;em&gt;n&lt;/em&gt;  input rows.  What if the cardinalities differ?  Arrgh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-anything-good-come-of-this"&gt;
&lt;h2&gt;Can Anything Good Come Of This?&lt;/h2&gt;
&lt;p&gt;Let's look at the outcomes.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;We get something to &amp;quot;work&amp;quot; on time.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;They hate us forever because we weren't up to the task, and only their constant nagging made the thing work.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;We get something to &amp;quot;work&amp;quot; after the deadline.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;They hate us forever because we didn't make the date.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;We get something that almost &amp;quot;works&amp;quot; by the deadline.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;They hate us forever because they have to think about what actually matters in this application.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;We give up now.&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;They hate us forever for not even trying.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>SOA, Web Services, and Other Religious Experiences</title><link href="https://slott56.github.io/2007_08_17-soa_web_services_and_other_religious_experiences.html" rel="alternate"></link><published>2007-08-17T21:53:00-04:00</published><updated>2007-08-17T21:53:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-08-17:/2007_08_17-soa_web_services_and_other_religious_experiences.html</id><summary type="html">&lt;p&gt;TC writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m sitting in the corner, considering SOA from various perspectives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What sized company?&lt;/li&gt;
&lt;li&gt;When you sell/license the tech, what are you actually
trying to sell? The initial implementation, individual services, ???&lt;/li&gt;
&lt;li&gt;Chicken vs. egg – implement first or align the culture first?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is &lt;em&gt;our company's&lt;/em&gt;  approach?&lt;/p&gt;
&lt;p&gt;Has …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;TC writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m sitting in the corner, considering SOA from various perspectives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What sized company?&lt;/li&gt;
&lt;li&gt;When you sell/license the tech, what are you actually
trying to sell? The initial implementation, individual services, ???&lt;/li&gt;
&lt;li&gt;Chicken vs. egg – implement first or align the culture first?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is &lt;em&gt;our company's&lt;/em&gt;  approach?&lt;/p&gt;
&lt;p&gt;Has anyone generated succinct flyers or white papers?
I’m lost in a Google-lanche of info, and I dearly want to narrow the
focus a bit before I have to explain it to &lt;em&gt;VP's&lt;/em&gt;  and others.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="what-sized-company"&gt;
&lt;h2&gt;What Sized Company?&lt;/h2&gt;
&lt;p&gt;TC's an architect, so he's asking about selling something that we'll develop, install and support.&lt;/p&gt;
&lt;p&gt;SOA is for every size of company.  Developing applications with an SOA is cheaper and
simpler than traditional &amp;quot;wholistic&amp;quot; apps that don’t have
clearly defined services.&lt;/p&gt;
&lt;p&gt;Why?  Simplicty.  Services force you to think about agility and
simplicity.  The result can be software which is simpler, cheaper and more effective.&lt;/p&gt;
&lt;p&gt;To achieve the required agility requires you to pare things down to their essence and then build that essential service.  The more traditional approach is to gatther a bunch of requirements and design a bunch of software.  At no point in the process does anyone ask you to simplify those requirements or the resulting software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-you-trying-to-sell"&gt;
&lt;h2&gt;What Are You Trying to Sell?&lt;/h2&gt;
&lt;p&gt;Actually, there are two parts to this, because there are two things you can sell.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;2. You can use the technology as a means to an end.  This, I think, is where you are coming from.   The customer
wants an app -- a solution to a business problem -- and you are going to use an SOA framework to save yourself considerable agony.   Much of
the glue that takes time to specify, build and test is now part of
most SOA frameworks.  Generally, the customer could care less
whether it comes from a vendor or you.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;Consider applications for which we have extensive proprietary source.  We could convert our code to a SOA framework (for example &lt;a class="reference external" href="http://www.sun.com/software/javaenterprisesystem/javacaps/index.jsp"&gt;Sun's JCAPS&lt;/a&gt; ).  Our apps would work
the same, but the overall installation is MUCH smaller and simpler.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="culture-a-k-a-governance"&gt;
&lt;h2&gt;Culture (a/k/a Governance)&lt;/h2&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;The culture of
the developers must precede the implementation.  If they don't get the SOA viewpoint, then you can't build an SOA application.  What's important is separating the final &amp;quot;to the user&amp;quot; presentation, the composite workflows and the underlying services.  In many cases -- particularly where schedules are golden -- managers will undermine the SOA work by insisting that some piece of user interface be completed RIGHT NOW, irrespective of how it devastates the architecture.  Serious, essential business functionality cut and pasted into several JSP pages leaps to mind.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;Some places are brain-dead.  I blogged a specific quote in &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_09_30-why_soa_is_doa_in_some_organizations.html"&gt;SOA is DOA&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;Culture of the customer is a “don’t
care” item if you are using SOA to build a solution.  If the customer is clueless and you’ve built a working solution, the orientation of the architecture doesn't matter.  It could be service oriented, object oriented or aspect oriented.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;However, if you're trying to
teach them SOA, it had best be strategic for them.  Otherwise, the mentoring will be immediately trumped by management.  &amp;quot;It's taking too long to write the use cases,&amp;quot; for example, will subvert everything by undoing the training and coaching you've done for the first few weeks of the program.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lost-in-the-google-lanche"&gt;
&lt;h2&gt;Lost in the Google-lanche&lt;/h2&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;Read up on the &lt;a class="reference external" href="http://www.sun.com/software/javaenterprisesystem/javacaps/index.jsp"&gt;Sun Java Composite Application
Suite&lt;/a&gt;  (JCAPS).  The presentations are focused on what matters: lowering TCO by making it easy to manage the composite application as a whole.  Look at the eGate Integrator as the lynchpin -- everything else is an add-on.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;p&gt;Also, for the leading-edge folks, there's a lot of SOA goodness in the Python community.  The Python folks exploit the dynamic language to create a proper Don't Repeat Yourself (DRY) technology that's considerably simpler than the Java worldview.&lt;/p&gt;
&lt;p&gt;1. You can sell the technology as an end in itself.  For example, when the customer wants
to use it and you’re the expert.  We're doing some of this for customers who want to build in-house skills.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Problems, problems, problems</title><link href="https://slott56.github.io/2007_08_08-problems_problems_problems.html" rel="alternate"></link><published>2007-08-08T19:39:00-04:00</published><updated>2007-08-08T19:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-08-08:/2007_08_08-problems_problems_problems.html</id><summary type="html">&lt;p&gt;Centuries ago -- it seems -- Jim Coplien facilitated a session for us at &lt;a class="reference external" href="http://hillside.net/chiliplop/"&gt;CiliPLoP&lt;/a&gt; .  Eventually, I figured out that patterns are a solution to a problem in a context which resolves various alternative forces, and has some understood consequences.  Context - Problem - Forces - Solution - Consequences.&lt;/p&gt;
&lt;p&gt;In this month's CACM, the article on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Centuries ago -- it seems -- Jim Coplien facilitated a session for us at &lt;a class="reference external" href="http://hillside.net/chiliplop/"&gt;CiliPLoP&lt;/a&gt; .  Eventually, I figured out that patterns are a solution to a problem in a context which resolves various alternative forces, and has some understood consequences.  Context - Problem - Forces - Solution - Consequences.&lt;/p&gt;
&lt;p&gt;In this month's CACM, the article on &amp;quot;&lt;a class="reference external" href="http://portal.acm.org/citation.cfm?id=1278201.1278206&amp;amp;coll=portal&amp;amp;dl=ACM&amp;amp;idx=1278201&amp;amp;part=periodical&amp;amp;WantType=periodical&amp;amp;title=Communications%20of%20the%20ACM&amp;amp;CFID=26238735&amp;amp;CFTOKEN=67485512"&gt;Involving Top Management In IT Projects&lt;/a&gt; &amp;quot; describes a technique called &lt;em&gt;Problem Mapping&lt;/em&gt;.  Wow!  I think this is the other side of the pattern coin.  The article's a tough read -- it requires careful study because it makes a rigorous philosophical argument about the nature of truth in requirements analysis.&lt;/p&gt;
&lt;p&gt;I find that too many people jump past the problem, past the requirements, straight into design.  I complained about this recently in &lt;a class="reference external" href="https://slott56.github.io/2007_08_05-use_cases_why_cases_and_the_bentley_test.html"&gt;Use Cases, Why Cases and the Bentley Test&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;This Problem Mapping thing may be just what's required to stop the blind leap into specifying a solution before the problem is really understood.  The technique is gloriously simple, and requires three relatively simple steps: gathering, organizing and criticizing.&lt;/p&gt;
&lt;div class="section" id="three-step-process"&gt;
&lt;h2&gt;Three Step Process&lt;/h2&gt;
&lt;p&gt;Gathering is what analysts and consultants do anyway.  Interview people, read code, find the problem, document the problem.&lt;/p&gt;
&lt;p&gt;During the organizing phase, the real magic happens.  Your findings are partitioned into four buckets.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Problems and Needs.&lt;/strong&gt;   These are the going-in problems or organizational needs.  Things don't work, or don't work well.  Things are complex, expensive, risky, error-prone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Causes.&lt;/strong&gt;  These are the answers to &amp;quot;Why does this problem exist?&amp;quot;  This is critical, and often under-documented.  There's a chain of root-cause analysis that leads to things like &amp;quot;That's just the way it is&amp;quot; or &amp;quot;Darned if I know why&amp;quot;.  The whole root-cause analysis isn't as important as separating problems from causes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consequences.&lt;/strong&gt;   These are the consequences of the problem.  If something's complex, expensive, risky or error-prone, what's wrong with that?  What's the consequence to the enterprise of something being complex?  Complexity -- in and of itself -- isn't a problem; but it can have consequences that include cost, risk, time, pain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Suggested Solutions.&lt;/strong&gt;   This is the part that can now be set aside.  Without this four-part map, the solutions get muddied in with everything else.  With this problem map, they can be neatly set aside for what they're worth.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="calling-the-baby-ugly"&gt;
&lt;h2&gt;Calling the Baby Ugly&lt;/h2&gt;
&lt;p&gt;The final, criticizing, step is where we bring the interviewees together to learn what the consultants learned.  The point is to achieve a common organizational understanding.  There will be pain involved.  One person's problem may point a finger at someone else's cause.  You can't call someone's baby ugly without the situation becoming tense.&lt;/p&gt;
&lt;p&gt;Fundamentally, change involves perception of a problem, which can be stressful.  It also requires disruption of the bad situation; disruption by itself is stressful, even if the outcome is better for everyone.&lt;/p&gt;
&lt;p&gt;Most importantly, this technique coaches everyone in the essential logic of causality.  Something's broken, that breakage has a cause and consequences.  Will the solution actually address the breakage?  Would addressing the cause be smarter?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="follow-up"&gt;
&lt;h2&gt;Follow-Up&lt;/h2&gt;
&lt;p&gt;I've fumbled around with something a little bit like this.  I didn't have the clear-headed approach that Simonsen describes.  I merely tried to separate problem, cause and solution so that I could keep folks from implementing their favorite technology when it wouldn't actually help solve the problem.&lt;/p&gt;
&lt;p&gt;I found it helpful to recast the lessons learned in the Pattern mold.  Document the Context, Problem, Forces, Solution and Consequences to capture the information in a concise, story-like format.  When you have a problem in a context, it's like reading a screenplay.  The second act of the screenplay -- the forces -- is where the conflict plays out.  The solution and consequences are the third act of the story.&lt;/p&gt;
&lt;p&gt;Having an arc makes the whole something we can understand and use.  It makes it possible for top management to articulate the reasons for the technology solution and maintain some focus and follow-through.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Use Cases, Why Cases and The Bentley Test</title><link href="https://slott56.github.io/2007_08_05-use_cases_why_cases_and_the_bentley_test.html" rel="alternate"></link><published>2007-08-05T23:09:00-04:00</published><updated>2007-08-05T23:09:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-08-05:/2007_08_05-use_cases_why_cases_and_the_bentley_test.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.ddj.com/architect/201202946?cid=RSSfeed_DDJ_All"&gt;So What Are Requirements?&lt;/a&gt;  in Dr. Dobb's.&lt;/p&gt;
&lt;p&gt;I've seen requirements done badly.  I've seen some notable failures of the use case technique: almost entirely because people refuse to actually apply the technique; they refuse to write use cases from the actor's point of view.  I've whined about this before …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.ddj.com/architect/201202946?cid=RSSfeed_DDJ_All"&gt;So What Are Requirements?&lt;/a&gt;  in Dr. Dobb's.&lt;/p&gt;
&lt;p&gt;I've seen requirements done badly.  I've seen some notable failures of the use case technique: almost entirely because people refuse to actually apply the technique; they refuse to write use cases from the actor's point of view.  I've whined about this before in Notable Failures of Use Cases, &lt;a class="reference external" href="https://slott56.github.io/2005_10_26-notable_failure_of_use_cases.html"&gt;part 1&lt;/a&gt; , &lt;a class="reference external" href="https://slott56.github.io/2005_10_28-notable_failure_of_use_cases_part_2.html"&gt;part 2&lt;/a&gt; , &lt;a class="reference external" href="https://slott56.github.io/2005_10_31-notable_failure_of_use_cases_part_3.html"&gt;part 3&lt;/a&gt; , and &lt;a class="reference external" href="https://slott56.github.io/2006_04_28-notable_failure_of_use_cases_part_4.html"&gt;part 4&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The interesting point that Wiegers makes is that there are different species of requirements.  Failing to recognize this is what can lead to diluting the use cases with junk.&lt;/p&gt;
&lt;p&gt;The summary definition (from &lt;a class="reference external" href="http://www.coyotevalley.com/tools.htm"&gt;Coyote Valley Software&lt;/a&gt;  principal Brian Lawrence) appears to be that the line between requirements and design is that requirements lead to design choices.  While I like this, it has to be refined a bit.&lt;/p&gt;
&lt;p&gt;Pressman calls this the &amp;quot;What vs. How&amp;quot; distinction.  Requirements specify what must happen.  Design chooses how this will happen.  Again, this needs some refinement.  In a way, Pressman throws up his hands in despair, noting only that there is a hierarchy of what's and how's.  For example, interface requirements are &amp;quot;how&amp;quot; we'll implement some business requirement.  On the other hand, the interface requirements are a &amp;quot;what&amp;quot; to a lower-level piece of software that opens and closes sockets.&lt;/p&gt;
&lt;p&gt;Exacerbating this hierarchy problem is more fundamental confusion on techniques to capture requirements in the first place.&lt;/p&gt;
&lt;div class="section" id="point-of-view"&gt;
&lt;h2&gt;Point of View&lt;/h2&gt;
&lt;p&gt;Recently we were working through some use cases where the author had identified a document as the actor.  The body of the use case was a bunch of technical processing details for the document.  It's painful to claim that all 20 use cases weren't use cases because the actual actor (the user who needed to see the document's processing) was never mentioned even once.&lt;/p&gt;
&lt;p&gt;At some point, the customer trotted out a use case with no actor.  The use case summary had a passive-voice construction (&amp;quot;will be notified&amp;quot;)  At that point I could drop the bomb that use case actors are usually people (sometimes they are interfaces) by asking &amp;quot;for whom?&amp;quot;&lt;/p&gt;
&lt;p&gt;The customer's project manager made the claim that he thought that use cases were written from the system's point of view.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technical-requirements"&gt;
&lt;h2&gt;&amp;quot;Technical&amp;quot; Requirements&lt;/h2&gt;
&lt;p&gt;I told the customer's team that it was a common misconception.  It arises because of the vast wealth of technical details with no obvious home when writing use cases.  They wanted to call the details &amp;quot;technical requirements&amp;quot;.  I balked.&lt;/p&gt;
&lt;p&gt;Wiegers suggests that we have business requirements, user requirements (the proper use cases) and functional requirements.  This certainly peels the outermost layers of the onion, and is a potential tool for guiding people into writing usable requirements.  But it has a small problem.&lt;/p&gt;
&lt;p&gt;The name &amp;quot;functional&amp;quot; requirements is a fairly serious problem with Wieger's breakdown.  Most people don't know what constitutes non-functional requirements.  Consequently, they just throw the phrase around more-or-less at random.  I have to object strongly when I'm shown a document with dozens of pages related to performance, maintainability, and ownership issues -- all non-functional requirements.&lt;/p&gt;
&lt;p&gt;The core issue is that everyone wants to design the solution.  The more people you interview, the more you discover that everyone is an architect, and everyone has very strong opinions on precisely how to build the software solution.&lt;/p&gt;
&lt;p&gt;At every level of the organization, you'll hear the following: &amp;quot;I'm not technical, but wouldn't it be simpler if...&amp;quot; followed by some kind of design.  If I remark on how their solution might have issues, they'll explain to me that one of their non-technical staff built something like their preferred solution in MS-Access during lunch-hours over the previous week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-why-cases"&gt;
&lt;h2&gt;The Why Cases&lt;/h2&gt;
&lt;p&gt;Rather than ask &amp;quot;If your staff member is such a hot-shot programmer, why am I here?&amp;quot; it becomes important to dig into the real requirements.&lt;/p&gt;
&lt;p&gt;I find that we have the following kinds of requirements.  These aren't presented in a top-down order, but in an inside-out order.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What the user sees.&lt;/strong&gt;   These are the use cases.  The wisdom here is that we can use the definition (&amp;quot;A user interacts with a system to create business value&amp;quot;) to locate users, interactions, the system and value.  Absent these elements, we don't have a use case, and can set it aside as a solution design.  One of the acid-tests is to see if the use case addresses the &amp;quot;for whom?&amp;quot; question.  If this isn't someone's job, it isn't a use case.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why the user's even doing this.&lt;/strong&gt;   These are the &lt;strong&gt;Why Cases&lt;/strong&gt;™ that bracket the Use Cases.  We can ask &amp;quot;why?&amp;quot; and locate the overall business requirements that create the use cases in the first place.  Generally, the use cases are a solution to a business problem; in some cases, they're a bad solution.  Asking &amp;quot;why?&amp;quot; periodically helps to focus people on the rational behind the use cases.  It helps us recognize that we're only building software to make someone happier and more productive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How we'll support the user.&lt;/strong&gt;   This is a high-level design for the solution.  We can't call it functional requirements because few people know what the non-functional requirements are.  We can't call them &amp;quot;technical requirements&amp;quot; because this also leads to more confusion than it prevents.  We need to call it design.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="passive-voice-reporting"&gt;
&lt;h2&gt;Passive Voice Reporting&lt;/h2&gt;
&lt;p&gt;One of the best indicators of confusion seems to be the passive voice constructs like &amp;quot;the exception report will be generated daily.&amp;quot;  This invites us to ask two questions:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For whom?&lt;/strong&gt; This question will let us locate the proper use case.  Generating an exception report doesn't involve any interaction.  Someone looks at the exceptions, makes a decision, and takes action.  Who does this?  What are they supposed to do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;   This question will let us locate the driving business requirement.  For example, we may have a contractual obligation for a particular service level.  Someone must investigate each exception, determine a root cause, and take action to correct problems that are internal and finish processing the exceptional transaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customer-guidance"&gt;
&lt;h2&gt;Customer Guidance&lt;/h2&gt;
&lt;p&gt;What do we do when we're confronted with stuff that isn't really a requirement?  Generally, we're given design documents with titles like &amp;quot;Software Requirement Specification&amp;quot; or &amp;quot;Use Case&amp;quot;.  Since the documents don't allow us any design choices, they aren't really requirements; they're specifications.&lt;/p&gt;
&lt;p&gt;All too often, folks have downloaded an SRS template (like &lt;a class="reference external" href="http://www.processimpact.com/goodies.shtml"&gt;Wieger's&lt;/a&gt; ) and then abused the template.  I've seen SRS documents with the titles and template instructions still in place, essentially ignored by the author.  Large sections of the SRS template are left empty, because the author wasn't writing requirements.&lt;/p&gt;
&lt;p&gt;I think that we need to look at the design documents we're given ask the two fundamental questions: why? and for whom?  From these two questions we can back up to the business requirements and the use case.&lt;/p&gt;
&lt;p&gt;Hopefully, we can achieve a fundamental rethinking of the specifications to improve their value in a number of ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-architect-gets-a-bentley"&gt;
&lt;h2&gt;The Architect Gets a Bentley&lt;/h2&gt;
&lt;p&gt;Defining who does the job gets us away from writing software that seems necessary to the author (&amp;quot;of course we need notification of exceptions&amp;quot;.)  It can help us locate software that really is essential (&amp;quot;typically, Frank checks the exceptions each once or twice a week by looking at the logs, not a report&amp;quot;).  If it isn't going to be done daily, why over-engineer the system?  If the logs satisfy the need, why design a report?  Why not target the implementation for what people will actually do?&lt;/p&gt;
&lt;p&gt;Including the business requirements can simplify or focus the use cases.  If we can't articulate the business need, then we have the &lt;strong&gt;I Get A Bentley&lt;/strong&gt;™ requirements.&lt;/p&gt;
&lt;p&gt;I had a customer claim that they required 24x7 availability.  But they would not consider any hardware changes, and the hardware they had purchased couldn't provide the level of availability they were asking for.  When I brought this up, they claimed that 24x7 wasn't really a &amp;quot;requirement&amp;quot; it was more of a &amp;quot;goal.&amp;quot;  My follow-up question was &amp;quot;Where's the line?  What's the least availability that you'll tolerate before you sue me.&amp;quot;  They chuckled nervously, and said that any talk of lawsuits was irrelevant.&lt;/p&gt;
&lt;p&gt;It isn't irrelevant.  &amp;quot;Required&amp;quot; means required, as in &amp;quot;if the system doesn't do this, you don't get paid.&amp;quot;&lt;/p&gt;
&lt;p&gt;If 24x7 availability is a requirement, then &amp;quot;Architect gets a Bentley&amp;quot; is also a requirement.  There's no business justification for either position.  They were clearly a 12x5 operation, and could justify requiring 18x6 to cover weekends and west-coast timezones.  They could not show a business reason for 24x7 any more than I could show a business reason for a Bentley.  It may have been my goal, but I couldn't justify it as a contractual requirement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bentley-test"&gt;
&lt;h2&gt;The Bentley Test&lt;/h2&gt;
&lt;p&gt;If the answer to &amp;quot;why?&amp;quot; is isomorphic to &amp;quot;because I'm the customer,&amp;quot; then you've located a place to apply &lt;strong&gt;The Bentley Test&lt;/strong&gt;™.  If you get feature [&lt;strong&gt;X&lt;/strong&gt; ] because you're the customer, then I get a Bentley because I'm the architect.  It sounds fair to me.  Prove that it isn't.&lt;/p&gt;
&lt;p&gt;Phrases like &amp;quot;you must have known we wanted this when you wrote the proposal&amp;quot; or &amp;quot;if we didn't want that feature, why would we be building software?&amp;quot; are isomorphic to &amp;quot;because I'm the customer.&amp;quot;  Other examples include&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Don't bother trying to save us money with Linux, we're an all-[&lt;strong&gt;Y&lt;/strong&gt;] shop.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We absolutely have to have all of our purchased applications share a single common database -- without any of that schema mumbo-jumbo.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;You must fix our database without changing the user interface.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;You have to achieve acceptable performance with no hardware or data model changes.&amp;quot;  Followed by &amp;quot;no, we can't define acceptable.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sure, and I get a Bentley.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>KTLO Management</title><link href="https://slott56.github.io/2007_06_28-ktlo_management.html" rel="alternate"></link><published>2007-06-28T19:20:00-04:00</published><updated>2007-06-28T19:20:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-06-28:/2007_06_28-ktlo_management.html</id><summary type="html">&lt;p&gt;We wind up in this situation from time to time.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Customer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;[X] is broken, what will it cost to fix it?&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Us&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;Depends, but put $$$ in your budget.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Customer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;I can't afford $$$, I can barely afford to Keep The Lights On™!&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;At this point, the conversation is usually over.  There …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We wind up in this situation from time to time.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Customer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;[X] is broken, what will it cost to fix it?&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Us&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;Depends, but put $$$ in your budget.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Customer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;I can't afford $$$, I can barely afford to Keep The Lights On™!&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;At this point, the conversation is usually over.  There is more to talk about, much more.  However, most customers simply stop talking.  Even if try to respond along the line of the following, the conversation is usually over.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Us&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;What do you need to know about the cost?  Software projects can grow without limit, so there's no practical upper bound.  Even with a tiny scope, you can polish and gold-plate that scope until it's too costly to consider.  Do you have some budget already in mind and want to know if I agree with it?  For any amount (even a silly amount like a week's revenue) something positive can be accomplished.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Somewhere there's this (false) expectation that given a vague statement of &amp;quot;requirements&amp;quot; there's a fixed, single dollar figure that will implement those requirements.  What's irritating is the &amp;quot;Keep The Lights On&amp;quot; rational for preventing progress.&lt;/p&gt;
&lt;p&gt;Where does this come from?  Why is it so paralyzing?&lt;/p&gt;
&lt;div class="section" id="the-situation"&gt;
&lt;h2&gt;The Situation&lt;/h2&gt;
&lt;p&gt;When it costs a fortune to KTLO, it usually means that a lot of labor is squandered on &amp;quot;break fix&amp;quot; work.  It's like paying a union electrician to replace the 10A fuse every time you use the 12A drill press.  If the motor was in a good position and there's not much load, the draw may be under 10A -- or over 10A for a short-enough period of time -- and everything's fine.&lt;/p&gt;
&lt;p&gt;When I get called in, it's because the drill press isn't doing everything people want it to do.  The changes will require rewiring the drill press.  The customer, however can't afford to rewire anything because the electrician is fully occupied changing fuses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-remedy"&gt;
&lt;h2&gt;The Remedy&lt;/h2&gt;
&lt;p&gt;So, if we have drill press and power problems, we'll need to fix the power distribution infrastructure first.  That will free up the electrician to rewire the drill press.&lt;/p&gt;
&lt;p&gt;The sensible thing to do is to replace the fuse panel with higher-rated fuses.  This makes sense to me.  And it makes superficial sense to the customer and the electrician.  However, the customer has a kind of fundamental brain damage that makes this simple, sensible, incremental work impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-choke"&gt;
&lt;h2&gt;The Choke&lt;/h2&gt;
&lt;p&gt;The customer, for some reason, chokes on this.  Rather than just do it, we get into hand-wringing and justification.  In order to make it &amp;quot;palatable&amp;quot; to executives or peers or someone else, we have to fold in more features.&lt;/p&gt;
&lt;p&gt;A simple fuse upgrade turns into task to replace the fuses with circuit breakers.  There are fewer safety issues.  In someone's mind, an end-user can flip the breaker, and we don't need a skilled, union electrician to put fuses in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-choke-after-the-choke"&gt;
&lt;h2&gt;The Choke After the Choke&lt;/h2&gt;
&lt;p&gt;An IT manager has taken a simple task, choked, and made it more complex than is required.  Often, they choke a second time.  This second choke is the killer.&lt;/p&gt;
&lt;p&gt;Rather than upgrade the fuse, we tried to replace the fuse box with a breaker panel.  But we then run out of time (or money or both) and stop the project.&lt;/p&gt;
&lt;p&gt;We now have a half-rebuilt fuse box and a half-installed breaker panel.  We haven't freed up the union electrician.  We now need him on permanent overtime to sort out the wiring mess that was created by the second choke.  Each time a tool stops, we have to figure out if it is a fuse or a breaker, then make the necessary repair.&lt;/p&gt;
&lt;p&gt;It's this crazy double-choke that raises the cost of KTLO, and makes progress impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;At some point the cost of KTLO prevents work from being done.  Everyone is tied up replacing fuses, tracking down wiring messes, and trying to troubleshoot production machinery which doesn't work correctly.&lt;/p&gt;
&lt;p&gt;Eventually, after enough frustration and turnover, this is &amp;quot;business as usual.&amp;quot;  Nothing can get done because we're so busy keeping the lights on.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>State-Based Object Modeling</title><link href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html" rel="alternate"></link><published>2007-06-25T13:29:00-04:00</published><updated>2007-06-25T13:29:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-06-25:/2007_06_25-state_based_object_modeling.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2005_10_16-object_modeling_revised.html"&gt;Object Modeling&lt;/a&gt; , I repeated a procedure for object identification that comes from the classic &lt;a class="reference external" href="http://www.amazon.com/Object-Oriented-Modeling-Design-James-Rumbaugh/dp/0136298419"&gt;Object-Oriented Modeling and Design&lt;/a&gt;  (Rumbaugh, et. al.)&lt;/p&gt;
&lt;p&gt;Objects are characterized by their state change.  Therefore, to distinguish among classes of objects, we need to determine if two objects have the same states and state transitions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2005_10_16-object_modeling_revised.html"&gt;Object Modeling&lt;/a&gt; , I repeated a procedure for object identification that comes from the classic &lt;a class="reference external" href="http://www.amazon.com/Object-Oriented-Modeling-Design-James-Rumbaugh/dp/0136298419"&gt;Object-Oriented Modeling and Design&lt;/a&gt;  (Rumbaugh, et. al.)&lt;/p&gt;
&lt;p&gt;Objects are characterized by their state change.  Therefore, to distinguish among classes of objects, we need to determine if two objects have the same states and state transitions.&lt;/p&gt;
&lt;p&gt;States are defined by the object that undergoes the state change.  Therefore, we need to examine the object to distinguish among its states.  We need to know the object in order to know the states; we need to know the states in order to know the object.&lt;/p&gt;
&lt;p&gt;How do we cut through this tangled hierarchy, and locate some place we can begin?&lt;/p&gt;
&lt;p&gt;One of my &lt;a class="reference external" href="http://www.moleskine.com/eng/default.htm"&gt;Mokeskines&lt;/a&gt;  and this Blog have many features in common.  They have very similar state transitions - writing, reviewing, editing, etc.  There are, however, some slight differences in state transition rules; based on those differences we can see that there may be a common superclass, but the individual subclasses are distinct.  In particular, my Moleskine has no &amp;quot;power off&amp;quot; state.&lt;/p&gt;
&lt;p&gt;Can we start from object identification and then determine state?  Or do we have to begin with state and use this to inform object identification?&lt;/p&gt;
&lt;div class="section" id="procedure"&gt;
&lt;h2&gt;Procedure&lt;/h2&gt;
&lt;p&gt;Try to begin with &lt;a class="reference external" href="https://slott56.github.io/2005_10_16-object_modeling_revised.html"&gt;noun analysis&lt;/a&gt; .  If, for some reason, you have only one noun, or cannot distinguish among the nouns, then you probably have very serious scope definition problems.  For example, if the only noun you can identify is &amp;quot;the system&amp;quot; or &amp;quot;the user&amp;quot; then your initial summary is deeply flawed.&lt;/p&gt;
&lt;p&gt;Step 4 suggests that you bounce back and forth among categorizing, associating, defining attributes and defining operations.  An addition activity is defining states.&lt;/p&gt;
&lt;p&gt;State definition can be tackled for a given noun using something like the following procedure.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Find examples&lt;/strong&gt;. To prevent fruitless hypothetical and counterfactual discussions it helps to have tangible examples of an object in each state.  For business documents, get print-outs.  For other kinds of objects, use notecards or sticky notes, or &lt;a class="reference external" href="http://www.kooshball.com/"&gt;Koosh Balls&lt;/a&gt; ; use something tangible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Characterize Each State&lt;/strong&gt;. For each example of a given state, highlight (or circle or underline or write down) the attributes which define the state.  States are defined by the attributes; they are not &amp;quot;implied&amp;quot; or &amp;quot;obvious&amp;quot;.  Expert judgement isn't part of this.  If things are implied, obvious or require judgement, you'll need to add attributes.  The best case is adding attributes to make the implied state into a manifest state.  A bad case is adding attributes that are going to be set by having an expert (i.e., a person) look at the other attributes and make their oracular pronouncement.  The worst case is where you cannot establish a finite, definite list of attributes that characterize the states.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Confirm&lt;/strong&gt;. At this point, you may have learned many things.  You may have, for example, found that your &amp;quot;object&amp;quot; was really a composite and you have multiple, parallel sets of states.  You may have found, for example, that your object has several associations, each of which has it's own set of states.  You may have found that some states are indistinguishable and other states have substates.  This is all good.  In some cases, you'll have to rework your object model, bounce around among categories, associations, attributes, operations, and begin this process again with a new object model.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Determine Transitions&lt;/strong&gt;.  We're not fully specifying things; we're only discovering.  It's important to set aside details for the moment, since many kinds of details only serve to muddy the waters.  In particular, processing details -- which are stateful -- can often confuse the identification of states.  To make it possible to see what's going on, the magic words &amp;quot;processing happens&amp;quot; have to be used when defining the transitions.&lt;/p&gt;
&lt;p&gt;Examine each state, saying the words &amp;quot;processing happens&amp;quot; and determine what update will move the object to the next state.  The point is to avoid the details of the processing and focus on the net effect of the processing.  Some processing is an object's internal response to arriving in a state; other processing is initiated from outside the object to force it to a particular state.  &amp;quot;Processing Happens&amp;quot; and now the object is in a new state; capture this relationship first, provide details later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Elaborate&lt;/strong&gt;. You've learned a great deal, and can add a few details at this point.  First, check for orphan states.  If you've got an object state (you have an example, right?) but you don't have any transitions to or from this state, you've got more work to do.  You may be missing some transitions, but you may also be missing some states; states which are intermediate between states you've identified and this orphan state.  An orphan state can also be caused by examining a composite object; this may be a state of one component of the composite object.&lt;/p&gt;
&lt;p&gt;You should have identified inital and final states, also.  Objects begin their existence in initial states.  Some kind of objects will reach a final state, from which no more state transitions are possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Reconcile&lt;/strong&gt;.  You can now march an object through the various state transitions beginning from one of the initial states.  Generally, each &amp;quot;path&amp;quot; or sequence of transitions is a scenario for a potential life of this object.  It is essential that the tangible examples be compared against this model to be sure that all states are part of a scenario and all the scenarios make sense when compared with use cases or other source documentation.  If necessary, rework other elements of the model based on what has been learned so far.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Elaborate&lt;/strong&gt;.  Now, at long last, you can write detailed specifications.  The reason details are left for last is because people often confuse state (&amp;quot;static&amp;quot;, &amp;quot;status&amp;quot;) with processing.  It's inevitable to think of the sequence of steps in an object's processing, not the stages along that lifeline.  At this time, you can finally write state entry and exit processing; this is processing which sets attributes, but doesn't change the overall state being modeled.  Each transition can be annotated with events, guard conditions and processing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, you should have a state transition or activity model that helps define your object class.  You can select a diagram, either state diagram or activity diagram, depending on what features need to be emphasized in the state model.&lt;/p&gt;
&lt;p&gt;Use a state diagram when there is relatively little processing or the entity is relatively active.  When there is relatively little processing, a quick summary on a transition line, or within the state's rectangle conveys everything that's required.&lt;/p&gt;
&lt;p&gt;Use an activity diagram when there is rather complex processing or the entity is passive, and is acted on by other objects.  An activity diagram adds activity states or responsibility swimlanes to the basic state machine notation.&lt;/p&gt;
&lt;p&gt;In some cases, both diagrams are required.  The state diagram shows the states and their transitions for a given object class.  An activity diagram may show the ways this object collaborates with other objects to achieve those state transitions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Methodologies we love to hate.</title><link href="https://slott56.github.io/2007_06_19-methodologies_we_love_to_hate.html" rel="alternate"></link><published>2007-06-19T23:19:00-04:00</published><updated>2007-06-19T23:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-06-19:/2007_06_19-methodologies_we_love_to_hate.html</id><summary type="html">&lt;p&gt;Today's entry in Scott Berkun's blog (&lt;a class="reference external" href="http://www.scottberkun.com/blog/2007/asshole-driven-development/#comment-146302"&gt;Asshole driven development&lt;/a&gt; ) is brilliantly scathing.  The comments are also handy for identifying the key dysfunctionality in an organization.&lt;/p&gt;
&lt;p&gt;A couple of years ago &lt;a class="reference external" href="http://www.mindspring.com/~mgrand/"&gt;Mark Grand&lt;/a&gt;  shared with me a number of things that seem to make software development needlessly clumsy and complex.  Indeed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today's entry in Scott Berkun's blog (&lt;a class="reference external" href="http://www.scottberkun.com/blog/2007/asshole-driven-development/#comment-146302"&gt;Asshole driven development&lt;/a&gt; ) is brilliantly scathing.  The comments are also handy for identifying the key dysfunctionality in an organization.&lt;/p&gt;
&lt;p&gt;A couple of years ago &lt;a class="reference external" href="http://www.mindspring.com/~mgrand/"&gt;Mark Grand&lt;/a&gt;  shared with me a number of things that seem to make software development needlessly clumsy and complex.  Indeed, he theorized that there is a culture of complexity that worships clumsy process and management inefficiencies.&lt;/p&gt;
&lt;p&gt;There happened to be seven kinds of dumb-ass complexities.  It isn't like the standard &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Seven_deadly_sins"&gt;deadly sins&lt;/a&gt;  actually match up with complexities; the seven is just coincidental.&lt;/p&gt;
&lt;div class="section" id="cause-and-effect"&gt;
&lt;h2&gt;Cause and Effect&lt;/h2&gt;
&lt;p&gt;The net effect of failing to come to grips with complexity are the dysfunctionalities that Scott Berkun (and many others) identified in his blog entry.  Let's look at a few.&lt;/p&gt;
&lt;p&gt;ADD (Asshole-Driven Development) for example, tackles everything head-on.  If you have a conflict between end-user requirements and technology budgeting, then an chief asshole can make a certain kind of motion happen:  it may not be progress, but it will be activity.&lt;/p&gt;
&lt;p&gt;CDD (Cognitive Dissonance Drive Development) is a way of encouraging a quantity of ideas in lieu of any high quality ideas.&lt;/p&gt;
&lt;p&gt;CYAE (Cover Your Ass Engineering) is what you do when you have a fragile, immature process.  Rather than actually solve the problem, you layer in more complexity -- particularly complex processes -- because that's rewarded more than success.  There's nothing like an integration test, performance test, QA test, user acceptance test, regression test dance to replace real understanding of the user's requirements.&lt;/p&gt;
&lt;p&gt;DBD (Development By Denial) is a way to cope with a failure to assess risks.  Software development is always about management of ignorance:  you must be ignorant of something, or you'd just download the solution.  Either you don't have the use cases fully understood, or the technology is new, or both; that's why you're building something.  Failure to manage ignorance means you are doing DBD development.&lt;/p&gt;
&lt;p&gt;&amp;quot;In the real world we don't have time to explore every nuance,&amp;quot; for example, is classic DBD-speak.  Somehow ignorance must vanish, but we can't spend money on exploratory proof-of-concept prototypes or training in the new tools.&lt;/p&gt;
&lt;p&gt;GMPM (Get Me Promoted Methodology) is what we do when we have a deep-seated fear of showing weakness.  We lead by fiat, making sure that our decisiveness gets us noted and promoted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When you don't know what you're doing, you pick a leadership style that maximizes activity in the hope that it might maximize progress.  You can be a jerk, foster disagreement, cover your ass, deny the obvious, and leverage the situation to make yourself look good.&lt;/p&gt;
&lt;p&gt;I think Mark was right, the complexity of software, and software development, makes people into bad leaders.&lt;/p&gt;
&lt;p&gt;I think complexity and bad management are behind &lt;a class="reference external" href="https://slott56.github.io/2007_02_18-its_drive_to_self_destruction.html"&gt;IT's Drive To Self-Destruction&lt;/a&gt; .  My person gripe centers on Next Year's Dollars (NYD) being less valuable than this year's dollars.  Dumb, bad design can be forced into production because maintenance (which goes on for decades) is cheaper that getting something done by the fantasy dead-line date.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>PL/SQL and Java - The Benchmark Challenge (revised)</title><link href="https://slott56.github.io/2007_05_27-plsql_and_java_the_benchmark_challenge_revised.html" rel="alternate"></link><published>2007-05-27T13:07:00-04:00</published><updated>2007-05-27T13:07:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-05-27:/2007_05_27-plsql_and_java_the_benchmark_challenge_revised.html</id><summary type="html">&lt;p&gt;First, the confusion.  A couple of comments asked for code, offering to &amp;quot;fix&amp;quot; the problems.  Specifically, offering to optimize or improve the PL/SQL.  The code was already posted, but I failed to make that clear.  Here's a recap of the various blog entries on this subject.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_03_23-plsql_vs_java_which_is_really_faster.html"&gt;PL/SQL vs …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;First, the confusion.  A couple of comments asked for code, offering to &amp;quot;fix&amp;quot; the problems.  Specifically, offering to optimize or improve the PL/SQL.  The code was already posted, but I failed to make that clear.  Here's a recap of the various blog entries on this subject.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_03_23-plsql_vs_java_which_is_really_faster.html"&gt;PL/SQL vs. Java - Which is Really Faster?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_03_23-plsql_vs_java_additional_information.html"&gt;PL/SQL vs. Java - Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_05_26-plsql_vs_java_yet_again.html"&gt;PL/SQL vs. Java - Yet Again&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="sizing"&gt;
&lt;h2&gt;Sizing&lt;/h2&gt;
&lt;p&gt;Someone asked how a real-world problem can have so few (only a few thousand) invoices.  The answer is that the customer has a giant table of business records, from which they extract the business records to be processed.  That extraction isn't on the table as part of the overall performance problem.&lt;/p&gt;
&lt;p&gt;It should be.  Indeed, they should have a data warehouse so that they aren't doing extracts of live data from history.  To them, in their real world, that's another problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="native-code"&gt;
&lt;h2&gt;Native Code&lt;/h2&gt;
&lt;p&gt;One interesting response lifted up Oracle's PL/SQL Native Compilation technique.  I think they're talking about Oracle® Database PL/SQL User's Guide and Reference, chapter 11, &lt;a class="reference external" href="http://download-east.oracle.com/docs/cd/B19306_01/appdev.102/b14261/tuning.htm"&gt;Tuning PL/SQL Applications for Performance&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;While an interesting approach, my customers are unlikely to agree to this as a solution to slowness.  They use PL/SQL precisely because it's flexible.  They like it for the same reasons people like Python -- it's (in effect) a scripting language.  The development overhead of native compilation is daunting.&lt;/p&gt;
&lt;p&gt;Java doesn't have the level of complexity (i.e., C compilers, shared libraries, etc.) that this native compilation of PL/SQL has.  That doesn't eliminate the native compilation, it makes it undesirable as a solution.&lt;/p&gt;
&lt;p&gt;However, if performance matters, I suppose this needs to to be put on the table.  It is complex -- far more complex than Java -- but it could be considered as a solution.  To run a comparison will take me some time to configure and install this under Fedora Core 6.  I'm not sure I want to go through the agony, when Java is already a solution in hand.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-real-world"&gt;
&lt;h2&gt;In The Real World&lt;/h2&gt;
&lt;p&gt;[&lt;em&gt;Digression&lt;/em&gt;.  One response included the disturbing magic words &amp;quot;in the real world&amp;quot;.  Often I stop reading there, because it's an attempted trump card.  It is a kind of power play; the claim is that the &amp;quot;real world&amp;quot; situation deserves more credence than other situations.  It subverts a useful comparison of constraints and priorities.  Your &amp;quot;real world&amp;quot; is no more real than my &amp;quot;real world&amp;quot;; you have different priorities and different values.  Let's talk about those in detail rather than summarily dismissing my customer's real world as being less real than your real world.]&lt;/p&gt;
&lt;p&gt;One response noted that time is lost transferring big chunks of data.  That was specifically what I was trying to avoid in my benchmark.   The client code I was basing this on did not involve big chunks of data.  If the queries did involve big chunks of data, the application might work better in PL/SQL.  The issue centered on queries with small chunks of data; this doesn't work better in PL/SQL.&lt;/p&gt;
&lt;p&gt;I didn't make it clear that I'm running a specific benchmark, for which I provided code.  If, in your world, things behave differently, provide the code, post your results.  &lt;strong&gt;Let's see this benchmark&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wrong-algorithm"&gt;
&lt;h2&gt;Wrong Algorithm&lt;/h2&gt;
&lt;p&gt;One response hinted that I was using entirely the wrong algorithm.  That's an interesting notion.  The claim is that 6 SELECT statements would do the same thing as the two-part business rule I fabricated.  I'm dying to see the 6 SELECT statements.  &lt;strong&gt;Let's see this benchmark&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What I failed to make clear is that my benchmark is drawn from the situation where the business has a large number of business rules.  Consequently, they a large number of if-statements.  Worse, the if-statements interact with each other, so that you need to (effectively) union all of the rules together and determine the composite predicate for each rule.&lt;/p&gt;
&lt;p&gt;With two rules, it's easy to work out the four conditions that apply.  For &lt;em&gt;n&lt;/em&gt;  rules, there are 2*n*  predicate combinations that need to be analyzed and optimized.  I'm daunted by the prospect, and don't see how a sizable collection of if-then-else business rules can be optimized into simple SELECTS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-processing"&gt;
&lt;h2&gt;Additional Processing&lt;/h2&gt;
&lt;p&gt;I raised the confusion level by leaving out the updates.  Since I only wanted to illustrate the basic business rules, I took out the update which is an essential operation for each kind of match (and non-match).  This makes the issue more that simple SELECT statements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks for the thoughtful comments.  Please post your competing benchmarks so I can see what can be improved in my situation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>PL/SQL vs. Java - Yet Again</title><link href="https://slott56.github.io/2007_05_26-plsql_vs_java_yet_again.html" rel="alternate"></link><published>2007-05-26T14:43:00-04:00</published><updated>2007-05-26T14:43:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-05-26:/2007_05_26-plsql_vs_java_yet_again.html</id><summary type="html">&lt;p&gt;There appear to be four responses.  Two were numbered, the third is a rambling thought on scalability, and the fourth
is a thought on management's discomfort with the truth.&lt;/p&gt;
&lt;div class="section" id="response-1-denial"&gt;
&lt;h2&gt;Response 1 -- Denial&lt;/h2&gt;
&lt;p&gt;&amp;quot;1) How can using Java/... be faster ? You have to go up and down the architectural stack of …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;There appear to be four responses.  Two were numbered, the third is a rambling thought on scalability, and the fourth
is a thought on management's discomfort with the truth.&lt;/p&gt;
&lt;div class="section" id="response-1-denial"&gt;
&lt;h2&gt;Response 1 -- Denial&lt;/h2&gt;
&lt;p&gt;&amp;quot;1) How can using Java/... be faster ? You have to go up and down the architectural stack of JDBC over and over and you have the network in between.&amp;quot;&lt;/p&gt;
&lt;p&gt;Since the code is nearly identical, and the PL/SQL is slower, the &amp;quot;you have to go up and down the architectural stack&amp;quot; part must be false.  Indeed, that was the point of the posting in the first place.  This argument (PL/SQL has to be faster because it's &amp;quot;closer&amp;quot; to the RDBMS) is false.&lt;/p&gt;
&lt;p&gt;&amp;quot;Suggested response: Well, as in any perf. activity, you have to actually benchmark it in your specific env.&amp;quot;&lt;/p&gt;
&lt;p&gt;My result shows that &amp;quot;specific env.&amp;quot; doesn't matter.  I'm convinced that in all environments PL/SQL will be slower than Java for the same algorithm.  It's slower because (1) the &amp;quot;closer to the RDBMS&amp;quot; statement is false, and (2) the PL/SQL virtual machine can't do JIT optimization.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;benchmark&lt;/strong&gt;  is the critical issue here.  Dogmatic acceptance of the received truth of PL/SQL's performance is a mistake.  Benchmarking is essential when performance matters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="response-2-negotiation"&gt;
&lt;h2&gt;Response 2 -- Negotiation&lt;/h2&gt;
&lt;p&gt;&amp;quot;2) You did not properly take advantage of PL/SQL&amp;quot;&lt;/p&gt;
&lt;p&gt;That was the point.  Some algorithms are basic, transactional Insert-Update-Delete, where PL/SQL is as good as anything else.  Other algorithms, however, involve IF-statements, and PL/SQL doesn't do this well.&lt;/p&gt;
&lt;p&gt;Further -- and this is hard to grasp at first -- RDBMS indexes are slow compared to in-memory Java collections.  Therefore, a Java program has all the advantages.  The RDBMS is good at persistence, transactional locking, and some kinds of ad-hoc query processing.  Focus on that, and put other kinds of large analytical and ETL processes outside the RDBMS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="response-3-thoughts-on-scalability"&gt;
&lt;h2&gt;Response 3 -- Thoughts on Scalability&lt;/h2&gt;
&lt;p&gt;This wasn't part of my point, but it's interesting none the less.&lt;/p&gt;
&lt;p&gt;&amp;quot;DB's don't scale... What about RAC, what about multi-master replication ?... Each DB has one and only 1 area that does sorting. ...  just get a  bigger CPU and more and faster disks. ... &amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If &lt;em&gt;[you?]&lt;/em&gt;  used Java and properly architected the system, just add another cheap PC or another cheap single board computer and you are done.&amp;quot;&lt;/p&gt;
&lt;p&gt;I suppose that's true.  If your Java application is too slow, you can throw more popcorn processors at the problem.  Indeed, the whole concurrency issue plays into this.  Modern Linux OS's will distribute processes among the processors and cores in multi-core processors, giving your Java applications wonderful levels of concurrent processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="response-4-anger"&gt;
&lt;h2&gt;Response 4 -- Anger&lt;/h2&gt;
&lt;p&gt;&amp;quot;I don't have Java resources or budget to buy more hardware. However, I already paid for the DB and I have people that [know] PL/SQL.&amp;quot;&lt;/p&gt;
&lt;p&gt;If IT management says (1) performance matters and (2) don't make use of the benchmark results, then you have a serious problem with schizophrenia.  If, on the other hand, IT management doesn't care about performance, then why were you benchmarking in the first place?&lt;/p&gt;
&lt;p&gt;If performance doesn't actually matter, PL/SQL is fine.  It's ugly and hard to maintain, but that's what management is all about.  Managers make the &amp;quot;hard&amp;quot; decisions.  For example, managers can elect to use a slow, complex language which is a maintenance nightmare.  But maintenance is paid for with &lt;a class="reference external" href="https://slott56.github.io/2007_02_18-its_drive_to_self_destruction.html"&gt;Next Year's Dollars&lt;/a&gt; , which don't matter.  It's a &lt;a class="reference external" href="https://slott56.github.io/2005_09_15-essay_11_management_trump_cards.html"&gt;Management Trump Card&lt;/a&gt; , and you can't beat it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Graphics Learning, Cairo and PyCairo</title><link href="https://slott56.github.io/2007_05_02-graphics_learning_cairo_and_pycairo.html" rel="alternate"></link><published>2007-05-02T10:26:00-04:00</published><updated>2007-05-02T10:26:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-05-02:/2007_05_02-graphics_learning_cairo_and_pycairo.html</id><summary type="html">&lt;p&gt;There are three reasons, none of them terribly
good in isolation.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I build business applications, not graphics
applications, so the &amp;quot;basic&amp;quot; GTK was precisely what I needed.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cairographics.org/pycairo"&gt;PyCairo&lt;/a&gt;  is (to me) a fairly recent innovation,
and my GTK knowledge is a few years old.&lt;/li&gt;
&lt;li&gt;Cairo requires a more complex technology …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;There are three reasons, none of them terribly
good in isolation.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I build business applications, not graphics
applications, so the &amp;quot;basic&amp;quot; GTK was precisely what I needed.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cairographics.org/pycairo"&gt;PyCairo&lt;/a&gt;  is (to me) a fairly recent innovation,
and my GTK knowledge is a few years old.&lt;/li&gt;
&lt;li&gt;Cairo requires a more complex technology
stack; GTK 2.10 is already complex
enough.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OLPC's &lt;a class="reference external" href="http://www.laptop.org/laptop/software/specs.shtml"&gt;Sugar&lt;/a&gt;  specification does include Cairo, so there
isn't a good reason to avoid it.&lt;/p&gt;
&lt;p&gt;Your
point about Cairo is interesting, since it provides a more powerful drawing
environment which does very clever things very simply.  Some of the drawing
power, however, is a distraction from my real purpose, which is to teach
programming.&lt;/p&gt;
&lt;p&gt;Essentially, programming
is all about data structures.  In modern languages (Python, Java, C, C++) the
&amp;quot;language&amp;quot; part of the education is quick.  The data structure part of the
language, and the add-on modules are the interesting and challenging bits.  This
is were the real learning occurs, since the statements are used to manipulate
the data structures.  For the consequences of this philosophy, see my two
boring, useless &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/index.html"&gt;&amp;quot;Building Skills&amp;quot;
books&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;This means that I (as
consultant/educator) have to dig deeply into Cairo to ferret out the data
structure features to show how a Path is similar to a Python list.  It
has the advantage of making the list structure immediately applicable to a Path.&lt;/p&gt;
&lt;p&gt;Additionally, there seems to be a
pleasant subset of Cairo features that mirror the basic drawing features of a
more naked GTK.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>IT Management's Love-Hate Relationship with Tools</title><link href="https://slott56.github.io/2007_04_28-it_managements_love_hate_relationship_with_tools.html" rel="alternate"></link><published>2007-04-28T13:04:00-04:00</published><updated>2007-04-28T13:04:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-04-28:/2007_04_28-it_managements_love_hate_relationship_with_tools.html</id><summary type="html">&lt;p&gt;Mr. Hayes says that &amp;quot;...we’re afraid that
programmers simply won’t use the hot new technology and that the money we
spend on it will be wasted.&amp;quot;  He plays up this fear factor, providing lots of
programmer-centric reasons: &amp;quot;Either programmers don’t use the tools at
all, or they …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mr. Hayes says that &amp;quot;...we’re afraid that
programmers simply won’t use the hot new technology and that the money we
spend on it will be wasted.&amp;quot;  He plays up this fear factor, providing lots of
programmer-centric reasons: &amp;quot;Either programmers don’t use the tools at
all, or they use them half-heartedly, or they find reasons to subvert them,
...&amp;quot;&lt;/p&gt;
&lt;p&gt;He even provides a plausible
logical contradiction: &amp;quot;But programmers won’t waste their time trying a
new approach unless they really believe it’s better than what
they’re already using. And they won’t believe it’s better
until they’ve given it an honest, committed try. But they’re not
going to waste their time doing that unless they already
believe.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is mostly false.  The
consequences are true.  The logical conundrum is largely
true.&lt;/p&gt;
&lt;p&gt;Here's the real answer:  It's Not
Programmers; It's Their
Managers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Managers Buy Tools And Subvert Their Use.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How do
managers subvert tool use?  Let me enumerate the
ways.&lt;/p&gt;
&lt;p&gt;Here's the root cause:
&lt;strong&gt;All software development is project-centered, deadline driven, with fantasy budgets.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This root cause leads managers to
deprecate tool use in every possible way.  Let's say we're considering
Application Portfolio Management to automate code inspections.  Subversion One:
there's no time, no budget and no staff to install, configure, develop standards
or train.  Subversion Two: once the project gets close to delivery, the tool use
is rejected with the magic phrase &amp;quot;our customers expect on-time delivery, they
don't expect code inspections&amp;quot; (or source-code control, CASE diagrams, or
requirements repository or whatever the tool does.)&lt;/p&gt;
&lt;p&gt;The consequence is that management
eventually sets the tool aside.  They stop asking for the code inspection
results, the source-code check-in reports, the CASE diagram reviews or the
requirements summaries.  They fall back to &amp;quot;is it running?&amp;quot; kind of management,
bypassing all testing, configuration control, code standards, design patterns or
requirements clarity.  If it isn't running right now, they demand immediate
patching and subversion of all disciplined effort or tool
use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Project-Centrism.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since
there is a project, and the project is the only goal, tools are a distraction.
While they might help, every manager is deeply suspicious of anything which
differs from the previous project.  Therefore, the following conversation is
standard.&lt;/p&gt;
&lt;p&gt;Manager:  &amp;quot;Is it done
yet?&amp;quot;&lt;/p&gt;
&lt;p&gt;Programmer:
&amp;quot;No.&amp;quot;&lt;/p&gt;
&lt;p&gt;Manager:  &amp;quot;What's the hold up?  Let's
stop using the APM and go back to the way we used to do
it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Programmer:
&amp;quot;What?&amp;quot;&lt;/p&gt;
&lt;p&gt;Manager: &amp;quot;Tools are out of scope for
this project.  Stop using
them.&amp;quot;&lt;/p&gt;
&lt;p&gt;Management's short-sighted,
narrow project focus tends to subvert tool
use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deadline Driven.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since there is a deadline,
there is no time for tool training.  Nor is there time for rework or
improvements.  We must -- from thin air -- develop a strategy for using the tool
and implement that strategy with no budget or schedule of any
kind.&lt;/p&gt;
&lt;p&gt;Since each software product is
unique, each project is unique.  (Yes, each product is unique; it if wasn't
unique you'd either buy something or download something.)  Since each project is
unique, the team organization, workflow and tool use will be unique.
Introducing new tools on top of new requirements and a new team is too many
unknowns.  To mitigate schedule risk, we must replace unknowns with
knowns.&lt;/p&gt;
&lt;p&gt;Faced with a looming deadline,
a late start, mushy requirements, and no available resources, training is
eliminated.  Prototyping, proof-of-concept and pilot projects to understand the
tooling are eliminated.  The main deliverable project is both pilot and final
deployment for the toolset.&lt;/p&gt;
&lt;p&gt;Any delays
in tool use are delays in the project as a whole.  Therefore, management will be
very clear that deliverable deadlines preclude use of
tools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fantasy Budgets.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The ROI is a lie to
justify the project.  The project costs are a lie to make a respectable ROI.
Everyone does this for every project.  Managers ask the programmers how long it
will take.  Then the manager repeats the magic phrase &amp;quot;I don't want a
gold-plated Bentley, I just want a solid, reliable Trabant.&amp;quot;  Then the
programmers reduce the schedule to fit the manager's fantasy price.  The scope
can't change, the effort can't change, so the schedule and budget shouldn't
change.  Managers demand that the programmers change the price without changing
the scope.&lt;/p&gt;
&lt;p&gt;Small wonder that many
projects run over budget and under-deliver on
features.&lt;/p&gt;
&lt;p&gt;More importantly, the lack of
budget realism means that tools, tool training, and tool pilot projects cannot
be funded.  The only path left is for programmers to attempt on-the-job training
by playing with the tools.  When it turns out that critical modules were not
purchased (they were too expensive) then the budget crunch means that they
cannot ever be purchased.  This project can't afford them and the lack of
resounding success means no future project will ever use this tool set
again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Agreement.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's
how I know I'm right.  I ask for budget, schedule and a pilot project to
introduce a new tools.  Managers say that my fantasy realm of tool introduction
isn't realistic.  In the real world all projects are narrowly scoped, tightly
budgeted and have a fixed deadline.  They claim that budget, schedule and a
pilot project are &amp;quot;unrealistic&amp;quot; or &amp;quot;impossible&amp;quot; and I need to fold in new tools
in a way that doesn't require money, time or scope
changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tool
use makes programmers more effective.  Tool use requires three
things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Purchasing the tools in the first
place.&lt;/li&gt;
&lt;li&gt;Paying for and scheduling training in tool
use.&lt;/li&gt;
&lt;li&gt;Paying for and scheduling a pilot project for
tool use that is not constrained by other
projects.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lacking these three things,
software tools cannot be used in big IT shops.  It isn't fear that prevents tool
use.  It's management.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Business Analysis vs. Architecture</title><link href="https://slott56.github.io/2007_04_03-business_analysis_vs_architecture.html" rel="alternate"></link><published>2007-04-03T17:41:00-04:00</published><updated>2007-04-03T17:41:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-04-03:/2007_04_03-business_analysis_vs_architecture.html</id><summary type="html">&lt;p&gt;Much of the work called &amp;quot;Business Analysis&amp;quot;
conflates business problem discovery and technical meddling.  I draw a firm line
between the discovery part of analysis and the non-discovery (or design) part.
Discovery is all about managing ignorance; this can be ignorance of the business
need or ignorance of the available …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Much of the work called &amp;quot;Business Analysis&amp;quot;
conflates business problem discovery and technical meddling.  I draw a firm line
between the discovery part of analysis and the non-discovery (or design) part.
Discovery is all about managing ignorance; this can be ignorance of the business
need or ignorance of the available technology.  The idea of analysis is to
reduce ignorance.&lt;/p&gt;
&lt;p&gt;The line is crossed
when implementation decisions are made.  Many analysts cross this line in an
effort to &amp;quot;help&amp;quot; the developers by bracketing some technical aspect of the
preferred solution.  This varies from
&lt;strong&gt;Petty Petitions&lt;/strong&gt; ™ (&amp;quot;the user expects technology
X&amp;quot;) to &lt;strong&gt;Pointless Political Pandering&lt;/strong&gt; ™ (&amp;quot;we have a significant
investment in technology Y&amp;quot;).&lt;/p&gt;
&lt;p&gt;Users
-- as a practical matter -- rarely care how their business problem is solved.
I dislike seeing technical decisions in a document that is supposed to describe
the problem and bracket the features of an acceptable solution.  Sometimes I
bother to complain about overly technical business
analysis.&lt;/p&gt;
&lt;p&gt;Almost every IT manager (and
most Business Analysts) respond to my complaints with something that includes
the phrase &amp;quot;in the real world....&amp;quot;  Often they lecture me on why the petty or
pandering request is important.&lt;/p&gt;
&lt;p&gt;Sometimes, there are technical
considerations regarding cost and risk that make a Petty Petition or Political
Pandering  into the only viable alternative.  Other times, the technology is a
toss-up, and the existence of a preference is sufficient to tip the tables.
However, that doesn't stifle my
objection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Best vs. Preferred.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There's a world of
difference between &amp;quot;best&amp;quot; and &amp;quot;preferred&amp;quot;.  Best is something you design, based
on the available information.  By definition, best can't be a going-in
assumption.  If you assume some technology is &amp;quot;best&amp;quot; and it doesn't fit the
problem very well, you have two choices: change the meaning of &amp;quot;best&amp;quot; or change
the problem being solved.  Both are
unappealing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Choice 1.&lt;/strong&gt; The problem is immutable, and the Petty
Petition or Political Pandering solution technology isn't really &amp;quot;best&amp;quot;.  If the
technology is really just a suggestion, it isn't part of the problem and ought
to be documented elsewhere.  Here's the response: &amp;quot;we put it in that document so
we wouldn't forget / lose track / fail to exploit the technology.&amp;quot;&lt;/p&gt;
&lt;p&gt;Bah.  If it's important you won't
forget or lose track.  No one ever forgets; writing &amp;quot;preferences&amp;quot; in the
requirements has only negative impact.  If it's good, you'll remember to use it.
Also, two documents can live in the same folder.  One document has the problem,
and a
&lt;em&gt;separate&lt;/em&gt;
document tracks unresolved issues, technology suggestions, history, previous
solutions, and other corporate
memory.&lt;/p&gt;
&lt;p&gt;There are few things in a
requirements document that are as useless as descriptions of previous solutions.
Requirements aren't the repository for corporate memory.  They're a summary of
what &lt;strong&gt;is&lt;/strong&gt;
and what &lt;strong&gt;will be&lt;/strong&gt; , not what once
was.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Choice 2.&lt;/strong&gt; The technology is immutable, and the problem
is subject to some adjustment.  In this case, the problem description must
contain some fluff.  If any part of the problem statement is
&lt;strong&gt;negotiable&lt;/strong&gt; ,
then it's not
&lt;strong&gt;required&lt;/strong&gt; .
If the solution cannot be amended, then start revising the problem until the
given technology is the &amp;quot;best&amp;quot; and only solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We'll Listen If It &amp;quot;Makes Sense&amp;quot;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My favorite situation is
one where I ask what is going on and the customer tries to explain the
contradiction when the technology doesn't solve the problem, and neither cannot
be changed.&lt;/p&gt;
&lt;p&gt;They invoke all kinds of
weird phrasings to resolve the contradiction:  &amp;quot;There's a strategic preference&amp;quot;,
a &amp;quot;technology incumbency&amp;quot;, a &amp;quot;historical precedent&amp;quot;, a &amp;quot;fit with our skills&amp;quot;.
They never seem to realize the basic
issue:&lt;/p&gt;
&lt;p&gt;&amp;quot;The problem is that our user's
can't solve 2+3.  Our technology selection for the solution must be the number
4.&amp;quot;&lt;/p&gt;
&lt;p&gt;After they repeat their rationale a
few times, and it begins to sound hollow, they fall back to the following.
&amp;quot;We'll listen to an alternative, if it makes sense.&amp;quot;  In this case, &amp;quot;makes
sense&amp;quot; remains undefined so that anything outside the box doesn't make sense.
Even the correct answer of (4*4+4)/4 doesn't make sense.  Either the problem or
solution isn't being stated clearly or
honestly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
business analyst's job should involve business, and the management of ignorance
about that business.  In &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_08_22-a_new_architecture_involves_ignorance.html"&gt;A New Architecture Involves Ignorance&lt;/a&gt; &amp;quot; I
recounted the kinds of ignorance that must be managed, stealing from Armour's
&lt;a class="reference external" href="http://www.amazon.com/Laws-Software-Process-Production-Management/dp/0849314895"&gt;The Laws of Software Process&lt;/a&gt; .  Technology
selection, and how well that technology does or does not solve the problem, is
the role of the architect.&lt;/p&gt;
&lt;p&gt;Once the
technology appears to solve the problem, we can proceed with an implementation.
Note that we can't start implementing unless the problem is fixed and immutable.
If the problem could be this (&amp;quot;can't match work orders and labor hours&amp;quot;) or
could be that (&amp;quot;can't match labor hours with checks written by SAP&amp;quot;) then we
can't solve it.  We can only solve one problem (even if it is one problem with
multiple parts.)  If there are issues, or concerns about priorities, or
alternatives, then we need to manage ignorance more than we need to declare that
the application will use Oracle, PL/SQL, Java and be built in Visual Studio to
run on the desktop.&lt;/p&gt;
&lt;p&gt;Some of the
technical ignorance is corrected with reverse engineering.  See &lt;a class="reference external" href="https://slott56.github.io/2007_04_02-python_and_reverse_engineering_part_1.html"&gt;Python and Reverse Engineering, Part 1&lt;/a&gt;  for the
first of several posts on this subject.  Some technical ignorance is corrected
with a Proof of Concept.  But no technical ignorance is corrected by having a
business analyst declare the recommended technology for the
solution.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>A Simple Graphic Learning Environment - Part 2</title><link href="https://slott56.github.io/2007_03_31-a_simple_graphic_learning_environment_part_2.html" rel="alternate"></link><published>2007-03-31T02:32:00-04:00</published><updated>2007-03-31T02:32:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-03-31:/2007_03_31-a_simple_graphic_learning_environment_part_2.html</id><summary type="html">&lt;p&gt;Here's a simple graphic application which is
built on the graphicApp.py framework.  This isn't a beginner's hello world.
This is the final project kind of program, and only for a student with some
trigonometry background.  The basic trig isn't too complex, but would require
rather detailed documentation to motivate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a simple graphic application which is
built on the graphicApp.py framework.  This isn't a beginner's hello world.
This is the final project kind of program, and only for a student with some
trigonometry background.  The basic trig isn't too complex, but would require
rather detailed documentation to motivate the math behind the
solution.&lt;/p&gt;
&lt;p&gt;This does show shading, text,
masks, filling and line drawing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overheads.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here
are the essential module overheads.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env python
&amp;quot;&amp;quot;&amp;quot;venn.py Application

Draw the eight canonical 2-set Venn diagrams.

This builds on basic &amp;quot;sketchpad&amp;quot; style application, which has general
application framework surrounding a simple &amp;quot;drawImage&amp;quot; method.
&amp;quot;&amp;quot;&amp;quot;

from graphicApp import *
import math
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Venn class, part 1.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's the beginning of the
drawing application class, it's a subclass of
graphicApp.GraphicApplication.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Venn( GraphicApplication ):
    &amp;quot;&amp;quot;&amp;quot;A Graphic Application which displays the canonical
    2-set Venn Diagrams.

    The control area has a combo box added to select which
    of the 8 diagrams to draw.

    The Pixmap drawing routine decodes the selected diagram
    and then draws the expected Venn diagram.
    &amp;quot;&amp;quot;&amp;quot;

    def __init__( self ):
        self.imageToDraw= 2
        GraphicApplication.__init__( self )

    def fileName( self ):
        return &amp;quot;venn-%d.png&amp;quot; % ( self.imageToDraw, )

    def selectImage( self, widget, data ):
        &amp;quot;&amp;quot;&amp;quot;Handle the image selection event on the Image selection button.&amp;quot;&amp;quot;&amp;quot;
        print &amp;quot;selectImage&amp;quot;, widget.get_active()
        # Set the image selector
        self.imageToDraw= widget.get_active()
        # Invalidate the drawable's region to force a refresh
        self.graphic_area.queue_draw()

    def build_application_controls( self, controls ):
        self.b_choices= gtk.combo_box_new_text()
        self.b_choices.append_text( &amp;quot;Set()&amp;quot; )
        self.b_choices.append_text( &amp;quot;S1-S2&amp;quot; )
        self.b_choices.append_text( &amp;quot;S1&amp;amp;S2;&amp;quot; )
        self.b_choices.append_text( &amp;quot;S1&amp;quot; )
        self.b_choices.append_text( &amp;quot;S2-S1&amp;quot; )
        self.b_choices.append_text( &amp;quot;S1^S2&amp;quot; )
        self.b_choices.append_text( &amp;quot;S2&amp;quot; )
        self.b_choices.append_text( &amp;quot;S1|S2&amp;quot; )
        self.b_choices.set_property( &amp;quot;active&amp;quot;, self.imageToDraw )
        self.b_choices.connect(&amp;quot;changed&amp;quot;, self.selectImage, None)
        controls.add(self.b_choices)
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Venn Class, Part 2.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's the application's
drawImage
method, which does the actual work of the
application.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def drawImage( self, venn, widget ):
        &amp;quot;&amp;quot;&amp;quot;Venn Diagram 2: s1&amp;amp;s2;&amp;quot;&amp;quot;&amp;quot;
        print &amp;quot;Drawing&amp;quot;, self.imageToDraw
        # Fill pattern is diagonal lines
        stripe_bits= &amp;quot;&amp;quot;&amp;quot;\x83\x07\x0e\x1c\x38\x70\xe0\xc1&amp;quot;&amp;quot;&amp;quot;
        stripe= gtk.gdk.bitmap_create_from_data(None, stripe_bits, 8, 8)
        # Blank pattern is solid
        solid_bits= &amp;quot;&amp;quot;&amp;quot;\xff\xff\xff\xff\xff\xff\xff\xff&amp;quot;&amp;quot;&amp;quot;
        solid= gtk.gdk.bitmap_create_from_data(None, solid_bits, 8, 8)
        # Create our graphic contexts
        colorMap= venn.get_colormap()
        width2= venn.new_gc(
            line_width=2,
            background=colorMap.alloc_color(&amp;quot;white&amp;quot;),
            foreground=colorMap.alloc_color(&amp;quot;black&amp;quot;),
            )
        width1= venn.new_gc(
            line_width=1,
            background=colorMap.alloc_color(&amp;quot;white&amp;quot;),
            foreground=colorMap.alloc_color(&amp;quot;blue&amp;quot;),
            )
        fill= venn.new_gc(
            line_width=2,
            fill=gtk.gdk.STIPPLED,
            stipple= stripe,
            foreground=colorMap.alloc_color(&amp;quot;dark slate grey&amp;quot;),
            )
        blank= venn.new_gc(
            line_width=2,
            fill=gtk.gdk.STIPPLED,
            stipple= solid,
            foreground=colorMap.alloc_color(&amp;quot;white&amp;quot;),
            )

        # Compute the coordinates for our picture
        print &amp;quot;get_size&amp;quot;, venn.get_size()
        width, height= venn.get_size()

        # Radius, r, is (h-48)/2; diameter is 2*r
        r= (height-48)/2

        # Left Center is (24+r, 24+r)
        print &amp;quot;Left Center&amp;quot;, 24+r, 24+r
        # Left rectangle: x=24, width=2*r, y=24, height=2*r
        left_x, left_y = 24, 24

        # Spaing between circles, s, is r*5/4 (between 0 and 2r)
        s= r*5/4

        # Right Center is (24+r+s, 24+r)
        print &amp;quot;Right Center&amp;quot;, 24+r+s, 24+r
        # Right rectangle: x=24+s, width=2*r, y=24, height=2*r
        right_x, right_y = 24+s, 24

        # x intercept is 24+r+s/2
        # y intercept is (24+r +/- r*sin( acos( (s/2)/r ) )
        # Fill rectangle: x = 24+r+s/2, width r-s/2, y = y+yd, height 2*yd
        x= 24+r+s/2
        yd= int(r*math.sin( math.acos( s/(2.0*r) ) ))
        y= 24+r
        print &amp;quot;Top Intersection&amp;quot;, x, y+yd
        print &amp;quot;Bottom Intsection&amp;quot;, x, y-yd

        # The angles of the arcs are from +acos(s/2/r) to -acos(s/2/r).
        a= int(360*64*math.acos( s/(2.0*r) )/(2*math.pi))
        #print &amp;quot;radians&amp;quot;, math.acos( s/(2.0*r) ), &amp;quot;64ths&amp;quot;, a, &amp;quot;degrees&amp;quot;, a/64.0

        # Blank and Outline the Venn universe rectangle
        # Leave a 16-pixel edge border.
        venn.draw_rectangle( blank, True, 8, 8, width-16, height-16 )
        venn.draw_rectangle( width2, False, 8, 8, width-16, height-16 )

        # Now, we need to accumulate the selected regions.
        fill1= (self.imageToDraw &amp;amp; 1) != 0
        fill2= (self.imageToDraw &amp;amp; 2) != 0
        fill4= (self.imageToDraw &amp;amp; 4) != 0
        #print &amp;quot;Fills&amp;quot;, fill1, fill2, fill4

        # NOTE that this is relatively simple looking, but
        # inefficient, since any combination with region 2 will lead to filling,
        # blanking and filling again.
        if fill1:
            # Left circle minus the center (region 1)
            # Shade the left circle
            venn.draw_arc( fill, True, left_x, left_y, 2*r, 2*r, 0, 64*360 )
            # Lay the cipped left arc on top of it
            blank.set_clip_rectangle( gtk.gdk.Rectangle(x, y-yd, r-s/2, 2*yd) )
            venn.draw_arc( blank, True, left_x, left_y, 2*r, 2*r, -a, 2*a )
            # Lay the clipped right arc on top of it
            blank.set_clip_rectangle( gtk.gdk.Rectangle(x-r+s/2, y-yd, r-s/2, 2*yd) )
            venn.draw_arc( blank, True, right_x, right_y, 2*r, 2*r, -a+180*64, 2*a )

        if fill4:
            # Right circle minus the center (region 4)
            # Shade the right circle
            venn.draw_arc( fill, True, right_x, right_y, 2*r, 2*r, 0, 64*360 )
            # Lay the cipped left arc on top of it
            blank.set_clip_rectangle( gtk.gdk.Rectangle(x, y-yd, r-s/2, 2*yd) )
            venn.draw_arc( blank, True, left_x, left_y, 2*r, 2*r, -a, 2*a )
            # Lay the clipped right arc on top of it
            blank.set_clip_rectangle( gtk.gdk.Rectangle(x-r+s/2, y-yd, r-s/2, 2*yd) )
            venn.draw_arc( blank, True, right_x, right_y, 2*r, 2*r, -a+180*64, 2*a )

        if fill2:
            # Center (region 2)
            # Left Arc, clipped by the right-side rectangle.
            fill.set_clip_rectangle( gtk.gdk.Rectangle(x, y-yd, r-s/2, 2*yd) )
            venn.draw_arc( fill, True, left_x, left_y, 2*r, 2*r, -a, 2*a )
            # Right Arc, clipped by the left-sie rectangle
            fill.set_clip_rectangle( gtk.gdk.Rectangle(x-r+s/2, y-yd, r-s/2, 2*yd) )
            venn.draw_arc( fill, True, right_x, right_y, 2*r, 2*r, -a+180*64, 2*a )

        # Outline the circles
        venn.draw_arc( width2, False, left_x, left_y, 2*r, 2*r, 0, 64*360 )
        venn.draw_arc( width2, False, right_x, right_y, 2*r, 2*r, 0, 64*360 )

        # Add set labels &amp;quot;S1&amp;quot; and &amp;quot;S2&amp;quot;.
        # Create a Pango Context for applying text labels to the diagram
        # A 24-point font would look good.
        self.pangoContext= widget.get_pango_context()
        fontAttrList= pango.AttrList()
        fontAttrList.change( pango.AttrSize( 24*1000, 0, 2 ) )
        # Create Pango.Layouts using pangoContext.
        label_s1= pango.Layout( self.pangoContext )
        label_s1.set_text( &amp;quot;S1&amp;quot; )
        label_s1.set_attributes( fontAttrList )
        label_s2= pango.Layout( self.pangoContext )
        label_s2.set_text( &amp;quot;S2&amp;quot; )
        label_s2.set_attributes( fontAttrList )

        # Get ink size and logical size of label s1
        ex1_ink, ex1_log = label_s1.get_pixel_extents()
        log_x, log_y, width, height= ex1_log
        # Position the label centered half-way across and 3/5 of the way to the top
        lftLab_x, lftLab_y = left_x + r-width/2, left_y+3*r/5 - height/2
        venn.draw_layout( width2, lftLab_x, lftLab_y, label_s1 )

        # Get ink size and logical size of label s2
        ex2_ink, ex2_log = label_s2.get_pixel_extents()
        log_x, log_y, width, height= ex1_log
        rgtLab_x, rgtLab_y = right_x + r-width/2, right_y+3*r/5 - height/2
        # Position the label centered half-way across and 3/5 of the way to the top
        venn.draw_layout( width2, rgtLab_x, rgtLab_y, label_s2 )

        # Debugging rectangles
        #venn.draw_rectangle( width1, False, x, y-yd, r-s/2, 2*yd )
        #venn.draw_rectangle( width1, False, x-r+s/2, y-yd, r-s/2, 2*yd )
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Main program switch.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if __name__ == &amp;quot;__main__&amp;quot;:
    vennDiagram = Venn()
    vennDiagram.main()
&lt;/pre&gt;
&lt;p&gt;In addition to the TODO's in part 1, I
have another complaint.  I don't really like separating the pixmap from the
widget which displays the pixmap.  It seems a little silly to do most of the
work in the pixmap, but still use the widget to get the Pango
context.&lt;/p&gt;
&lt;p&gt;When I get some more time,
I'll look at cleaning it up and putting together some course material oriented
around the pedagogical framework I used in &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt; .&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>A Simple Graphic Learning Environment - Part 1</title><link href="https://slott56.github.io/2007_03_26-a_simple_graphic_learning_environment_part_1.html" rel="alternate"></link><published>2007-03-26T16:31:00-04:00</published><updated>2007-03-26T16:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-03-26:/2007_03_26-a_simple_graphic_learning_environment_part_1.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Background.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
suggested environment for learning to program using graphics instead of text was
&lt;a class="reference external" href="http://www.livewires.org.uk/python/index.html"&gt;LiveWires&lt;/a&gt; .  This includes a curriculum and
associated product, making it a tidy
package.&lt;/p&gt;
&lt;p&gt;There are a number of
alternatives, however.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python includes &lt;a class="reference external" href="http://www.pythonware.com/library/tkinter/introduction/"&gt;tkinter&lt;/a&gt; , &lt;a class="reference external" href="http://docs.python.org/lib/module-Tkinter.html"&gt;section 20.1&lt;/a&gt;  of the Python Library Reference, v2.5.&lt;/li&gt;
&lt;li&gt;Python includes turtle …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Background.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
suggested environment for learning to program using graphics instead of text was
&lt;a class="reference external" href="http://www.livewires.org.uk/python/index.html"&gt;LiveWires&lt;/a&gt; .  This includes a curriculum and
associated product, making it a tidy
package.&lt;/p&gt;
&lt;p&gt;There are a number of
alternatives, however.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python includes &lt;a class="reference external" href="http://www.pythonware.com/library/tkinter/introduction/"&gt;tkinter&lt;/a&gt; , &lt;a class="reference external" href="http://docs.python.org/lib/module-Tkinter.html"&gt;section 20.1&lt;/a&gt;  of the Python Library Reference, v2.5.&lt;/li&gt;
&lt;li&gt;Python includes turtle, &lt;a class="reference external" href="http://docs.python.org/lib/module-turtle.html"&gt;section 20.4&lt;/a&gt;  of the Python Library Reference. v2.5.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python.org/lib/other-gui-packages.html"&gt;Section 20.5&lt;/a&gt;  of the Python Library reference
lists 7 other toolkits -- most of which are for building GUI applications, and
aren't terribly pedagogical.&lt;/li&gt;
&lt;li&gt;OLPC's Sugar
is based on GTK, and pyGTK.  For pedagogical purposes, this interests me.
Recently (&amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2007_03_13-sugar_gtk_and_olpc.html"&gt;Sugar, GTK and OLPC&lt;/a&gt; &amp;quot;) I put together the PyGTK
environment so I could look at updating my &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills In Python&lt;/a&gt;  book to align it with
Dr. Ceder's approach to programming.  Also, I need to align the book with &lt;a class="reference external" href="http://www.python.org/cp4e/"&gt;CP4E&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's
some little scraps of code which might amount to a livewires-like environment
which is strictly PyGTK in
implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;graphicApp.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
foundation is a small hierarchy of classes which embody a non-document graphic
application with an extensible control panel for simple controls.  By default, a
simple Save As... and Quit button can be
provided.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 1 - Python Basics&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env python
&amp;quot;&amp;quot;&amp;quot;graphicApp module.

Define a simple pyGTK Graphic Application with a simple
user interface.

This application is built in two layers:

TinyApplication is a small pyGTK no-document application.
It handles the basic GTK application initialization, run, and
termination.  This superclass provides a build_main_area()
method which must be overridden by a subclass.

GraphicApplication is a subclass of TinyApplication which overrides
build_main_area() to create an area with a control area and a graphic
area.  The control area is seeded with a save button and quit button.

The GraphicApplication provides two stub methods: build_application_controls()
and drawImage().  An application will override these two methods to
add controls and draw an image based on the control setting.

This is usually imported with a
    from graphicApp import *

So that the full gtk, gobject and pango libraries are brought in, also.

A more sophisticated application would involve a document, and the
main application window would be a document window, with a menu bar in addition
to any other buttons and controls.
&amp;quot;&amp;quot;&amp;quot;

import pygtk
pygtk.require('2.0') # Selects version library.
import gtk
print &amp;quot;Check for version 2.6:&amp;quot;, gtk.check_version(2,6,3) or &amp;quot;V2.6.3 found&amp;quot;
import gobject
print &amp;quot;GLIB Version:&amp;quot;, gobject.glib_version
import pango

import os

_version_ = &amp;quot;0.2&amp;quot;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Part 2 - TinyApplication&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This class handles
the minimum GTK handshake to start and stop cleanly.  Subclasses will override
methods to extend this class into something more
useful.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class TinyApplication( object ):
    &amp;quot;&amp;quot;&amp;quot;A simple single-window application superclass.
    A subclass must override the build_main_area() function
    to build the main window content.

    This parent application will provide
    self.window, which is the top-level window for the application.
    self.status, which is a status bar including a grow icon.
    &amp;quot;&amp;quot;&amp;quot;

    def delete_event(self, widget, event, data=None):
        &amp;quot;&amp;quot;&amp;quot;Handle delete of the top-level window.
        Override this to provide a confirm-to-quit dialog box.
        &amp;quot;&amp;quot;&amp;quot;
        # If you return FALSE in the &amp;quot;delete_event&amp;quot; signal handler,
        # GTK will emit the &amp;quot;destroy&amp;quot; signal. Returning TRUE means
        # you don't want the window to be destroyed.
        # This is useful for popping up 'are you sure you want to quit?'
        # type dialogs.
        print &amp;quot;delete-event signal occurred&amp;quot;

        # Change FALSE to TRUE and the main window will not be destroyed
        # with a &amp;quot;delete_event&amp;quot;.
        return False

    def destroy(self, widget, data=None):
        &amp;quot;&amp;quot;&amp;quot;Handle destroy of the top-level window.&amp;quot;&amp;quot;&amp;quot;
        print &amp;quot;destroy-event signal occurred&amp;quot;
        gtk.main_quit()

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;Build the top-level single-window application.
        This will call the subclass build_main_area() to
        construct the interesting bits of the application.&amp;quot;&amp;quot;&amp;quot;
        # create a new top-level window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        # When the window is given the &amp;quot;delete_event&amp;quot; signal (this is given
        # by the window manager, usually by the &amp;quot;close&amp;quot; option, or on the
        # titlebar), we ask it to call the delete_event () function
        # as defined above. The data passed to the callback
        # function is NULL and is ignored in the callback function.
        self.window.connect(&amp;quot;delete_event&amp;quot;, self.delete_event)

        # Here we connect the &amp;quot;destroy&amp;quot; event to a signal handler.
        # This event occurs when we call gtk_widget_destroy() on the window,
        # or if we return FALSE in the &amp;quot;delete_event&amp;quot; callback.
        self.window.connect(&amp;quot;destroy&amp;quot;, self.destroy)

        # Sets the border width of the window.
        self.window.set_border_width(2)

        # Build the main working area of the window.
        self.main_area= self.build_main_area()

        # Create a Statusbar to hold messages.
        self.status= gtk.Statusbar()
        self.status.set_has_resize_grip( True )

        # Create a VBox to hold the controls and the StatusBar
        self.app_box= gtk.VBox()
        self.app_box.add( self.main_area )
        self.app_box.add( self.status )

        # This packs the box into the window (a GTK container).
        self.window.add(self.app_box)

        # Show the status bar, the main control panel and the window
        self.status.show()
        self.app_box.show()
        self.window.show()

    def main(self):
        &amp;quot;&amp;quot;&amp;quot;Run the application.&amp;quot;&amp;quot;&amp;quot;
        # All PyGTK applications must have a gtk.main(). Control ends here
        # and waits for an event to occur (like a key press or mouse event).
        gtk.main()

    def hello_world( self, widget, param ):
        &amp;quot;&amp;quot;&amp;quot;A function to demonstrate that the application works.&amp;quot;&amp;quot;&amp;quot;
        ctx= self.status.get_context_id(&amp;quot;hello world&amp;quot;)
        print &amp;quot;hello: %r&amp;quot; % ( param, )
        self.status.pop(ctx)
        self.status.push(ctx,&amp;quot;hello: %r&amp;quot; % ( param, ) )

    def build_main_area( self ):
        &amp;quot;&amp;quot;&amp;quot;Build the main display area.

        A subclass will override this to build a more interesting
        main area.
        &amp;quot;&amp;quot;&amp;quot;

        controls= gtk.HButtonBox()
        controls.set_border_width(16)

        self.b_hello = gtk.Button(&amp;quot;Hello&amp;quot;)
        self.b_quit= gtk.Button(&amp;quot;Quit&amp;quot;,gtk.STOCK_QUIT)

        # When the button receives the &amp;quot;clicked&amp;quot; signal, it will call the
        # method hello_world() passing it None as its argument.
        self.b_hello.connect(&amp;quot;clicked&amp;quot;, self.hello_world, &amp;quot;world&amp;quot;)

        # This will cause the window to be destroyed by calling
        # gtk_widget_destroy(window) when &amp;quot;clicked&amp;quot;.  Again, the destroy
        # signal could come from here, or the window manager.
        self.b_quit.connect_object(&amp;quot;clicked&amp;quot;, gtk.Widget.destroy, self.window)

        controls.add(self.b_hello)
        controls.add(self.b_quit)

        # The final step is to display this newly created widget.
        self.b_hello.show()
        self.b_quit.show()
        controls.show()
        return controls
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Part 3 - GraphicApplication&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This class adds
structure for a graphic application with a simple control panel.  Specifically,
it narrows the final application down to providing a method that replaces
drawImage.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class GraphicApplication( TinyApplication ):
    &amp;quot;&amp;quot;&amp;quot;A Tiny Application which displays a control panel
    and a graphic area.

    The control area has a save and quit
    button.  A subclass application can add controls
    to this area to adjust the image which is displayed.

    The save button will save the image as a PNG file.
    The quit button will quit.

    The graphic area is a simple DrawingArea into which
    a pixmap is drawn.  A subclass application will
    redefine the method for drawing this pixmap.
    &amp;quot;&amp;quot;&amp;quot;

    def fileName( self ):
        return &amp;quot;image.png&amp;quot;

    def fileFormat( self ):
        return &amp;quot;png&amp;quot;

    def defaultSize( self ):
        return 414, 256

    def save(self, widget, data=None):
        &amp;quot;&amp;quot;&amp;quot;Handle the clicked event on the Save As button.&amp;quot;&amp;quot;&amp;quot;
        ctx= self.status.get_context_id(&amp;quot;save&amp;quot;)
        self.status.pop(ctx)
        # show a file chooser
        # TODO: include a selector for file formats handled
        formats= [ f for f in gtk.gdk.pixbuf_get_formats() if f['is_writable'] ]
        for f in formats:
            print '  ', f['name'], f['extensions'][0]
        self.chooser= gtk.FileChooserDialog(
            title=&amp;quot;Save the Drawing&amp;quot;,
            parent=None,
            action=gtk.FILE_CHOOSER_ACTION_SAVE,
            buttons=( gtk.STOCK_SAVE, gtk.RESPONSE_ACCEPT,
                      gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL), )
        # TODO: add keyboard accelerators so Enter key works.
        self.chooser.set_current_name( self.fileName() )
        #self.chooser.set_do_overwrite_confirmation(True) # 2.8 only
        event= self.chooser.run()
        if event == gtk.RESPONSE_ACCEPT:
            name= self.chooser.get_filename()
            # TODO: Prior to 2.8, must manually Prevent Overwrite
            # If overwrite, need to confirm.
            #   If overwrite and confirmation == no, continue a loop
            # Create a Pixbuf from the drawing area Pixmap
            width, height= self.drawing.get_size()
            pb= gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height)
            pb.get_from_drawable( self.drawing, self.drawing.get_colormap(),
                0, 0, 0, 0, width, height )
            # Save the resulting Pixbuf as a PNG
            pb.save(name, self.fileFormat() )
            self.status.push(ctx,&amp;quot;Saved %s&amp;quot; % name)
        else:
            self.status.push(ctx,&amp;quot;File not saved.&amp;quot;)
        self.chooser.destroy()

    def build_application_controls( self, controls ):
        pass

    def build_control_area( self ):
        &amp;quot;&amp;quot;&amp;quot;Build the top control area and the two default
        buttons (save and quit).

        Call build_application_controls to build
        any additional controls.

        A subclass would override build_application_controls
        to build application-specific buttons or fields.
        &amp;quot;&amp;quot;&amp;quot;
        # Create a ButtonBox to hold the buttons.
        controls= gtk.HButtonBox()
        controls.set_border_width(8)

        self.b_save = gtk.Button(&amp;quot;Save As...&amp;quot;, gtk.STOCK_SAVE_AS)
        self.b_quit= gtk.Button(&amp;quot;Quit&amp;quot;,gtk.STOCK_QUIT)

        # When the button receives the &amp;quot;clicked&amp;quot; signal, it will call the
        # method save() passing it None as its argument.
        self.b_save.connect(&amp;quot;clicked&amp;quot;, self.save, None)

        # This will cause the window to be destroyed by calling
        # gtk_widget_destroy(window) when &amp;quot;clicked&amp;quot;.  Again, the destroy
        # signal could come from here, or the window manager.
        self.b_quit.connect_object(&amp;quot;clicked&amp;quot;, gtk.Widget.destroy, self.window)

        # Add any additional controls, if necessary.
        self.build_application_controls( controls )

        # Pack the buttons into the box
        controls.add(self.b_save)
        controls.add(self.b_quit)

        # The final step is to display this newly created control area widget.
        for b in controls.get_children():
            b.show()
        controls.show()
        return controls

    def drawImage( self, pixmap, widget ):
        # Create a Pango Context for applying text labels to the diagram
        pangoContext= widget.get_pango_context()
        graphicContext= widget.get_style().fg_gc[gtk.STATE_NORMAL]
        fontAttrList= pango.AttrList()
        fontAttrList.change( pango.AttrSize( 24*1000, 0, 2 ) )
        label_s1= pango.Layout( pangoContext )
        label_s1.set_text( &amp;quot;Hello World&amp;quot; )
        page_width, page_height= pixmap.get_size()
        ex1_ink, ex1_log = label_s1.get_pixel_extents()
        x, y, label_width, label_height= ex1_log
        pixmap.draw_layout( graphicContext,
            page_width/2-label_width/2, page_height*2/5-label_height/2,
            label_s1 )

    def expose( self, widget, event, data=None ):
        &amp;quot;&amp;quot;&amp;quot;Connected to the expose-event for the graphic area.
        This will refresh the image by first creating the
        necessary Pixmap (self.drawing) and then drawing
        that Pixmap into the DrawingArea (widget).
        &amp;quot;&amp;quot;&amp;quot;
        # What are we drawing?
        x , y, width, height = event.area
        # Create the selected image
        self.drawImage( self.drawing, widget )
        # Apply to the Image widget
        widget.window.draw_drawable(
            widget.get_style().fg_gc[gtk.STATE_NORMAL],
            self.drawing, x, y, x, y, width, height)
        return False # We're not done; the Event can propagate

    def configure( self, widget, event, data ):
        &amp;quot;&amp;quot;&amp;quot;Connected to the configure-event for the graphic area.
        This will create the initial Pixmap, and set the default
        size for the DrawingArea.  It will also blank the Pixmap
        to assure that it has some initial content.
        &amp;quot;&amp;quot;&amp;quot;
        # Create an empty drawing that we will insert into the graphic_area
        width, height = self.defaultSize()
        self.drawing= gtk.gdk.Pixmap(widget.window, width, height)
        self.drawing.draw_rectangle(
                widget.get_style().white_gc,
                True, 0, 0, width, height)
        # Stake out the preferred size, since the drawing area has
        # no internal elements to request screen space.
        widget.set_property( &amp;quot;height-request&amp;quot;, height )
        widget.set_property( &amp;quot;width-request&amp;quot;, width ) # 1x1.6 ratio
        return False # We're not done; the Event can propagate

    def build_graphic_area( self ):
        &amp;quot;&amp;quot;&amp;quot;Build the Drawing Area, connect two events.
        The configure-event creates the initial, empty Pixmap, and
        establishes the default size.
        The expose-event then creates the Pixmap, and draws it into
        the graphic area widget.
        &amp;quot;&amp;quot;&amp;quot;
        graphic_area= gtk.DrawingArea()
        graphic_area.connect( &amp;quot;configure-event&amp;quot;, self.configure, None )
        graphic_area.connect( &amp;quot;expose-event&amp;quot;, self.expose, None )
        graphic_area.show()
        return graphic_area

    def build_main_area(self):
        &amp;quot;&amp;quot;&amp;quot;Build the graphic application panel.&amp;quot;&amp;quot;&amp;quot;

        # Create the main graphics + buttons area
        area= gtk.VBox()
        #area.set_property( &amp;quot;style&amp;quot;, &amp;quot;draw-border&amp;quot;, 1 ) # pyGTK 2.8

        # Create the content of the main area
        self.control_area= self.build_control_area()
        self.graphic_area= self.build_graphic_area()

        sep= gtk.HSeparator()
        sep.set_property(&amp;quot;height-request&amp;quot;,16)
        sep.show()

        area.add( self.control_area )
        area.add( sep )
        area.add( self.graphic_area )
        area.show()

        return area
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Part 4 - The Main Switch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This main switch is
essential, and shows how the final application is self-contained.  The main loop
is part of the application's main method.  I'm not a fan of having the main loop
outside the application class definition.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if __name__ == &amp;quot;__main__&amp;quot;:
    helloWorld = GraphicApplication()
    helloWorld.main()
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Some Design Issues&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is, essentially, a TODO
list.&lt;/p&gt;
&lt;p&gt;First, I don't like doing so much
in __init__.
While the pyGTK examples make heavy use of
__init__, and I
preserved that approach, I'm not generally happy with it.  Too many things
happen automagically.  In other GUI's, I have had an explicit three step build,
add, show.  However, those were big and complex applications, and I need to
split the difference between small applications for learning and large
expensive-to-maintain
applications.&lt;/p&gt;
&lt;p&gt;Second, I'm unhappy with
the exposed sophistication of Pango.  Typesetting, while complex in reality,
seems simple, and should be simple for newbies.  A wrapper for Pango with a lot
of defaults and assumptions would be
helpful.&lt;/p&gt;
&lt;p&gt;Third, I need to fold in the
Application-Document-Window abstractions.  This design pattern is central to the
most usable GUI's.  Apple describes it nicely in &amp;quot;&lt;a class="reference external" href="http://developer.apple.com/documentation/MacOSX/Conceptual/OSX_Technology_Overview/PortingTips/chapter_7_section_3.html"&gt;Windows Considerations&lt;/a&gt; &amp;quot;.   You can read some
interesting stuff, followed by pointless invective in Tom Yager's &amp;quot;&lt;a class="reference external" href="http://www.infoworld.com/article/07/03/14/12OPcurve_1.html"&gt;Mac sense and nonsense&lt;/a&gt; &amp;quot; in &lt;a class="reference external" href="http://www.infoworld.com/"&gt;InfoWorld&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The
old Think/Lightspeed C libraries had some great designs for this essential
application structure.  But that was long ago and far away; some of those design
patterns don't seem to be well preserved.  Or perhaps I'm just not looking in
all the right places.  Rather than find good stuff on Application, Document and
Window, I can only find things on Single Document Interface (SDI), which is a
Micro$oft-ism.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>PL/SQL vs. Java - Additional Information</title><link href="https://slott56.github.io/2007_03_23-plsql_vs_java_additional_information.html" rel="alternate"></link><published>2007-03-23T15:21:00-04:00</published><updated>2007-03-23T15:21:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-03-23:/2007_03_23-plsql_vs_java_additional_information.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Physical Tuning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;...databases can be tuned
by creating appropriate indexes, removing others, modifying the physical
database schema to suit the most common types of queries, etc. So it isn't clear
whether the PL/SQL figure could be better if the database was optimised by a
good DBA.&amp;quot;&lt;/p&gt;
&lt;p&gt;While a good …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Physical Tuning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;...databases can be tuned
by creating appropriate indexes, removing others, modifying the physical
database schema to suit the most common types of queries, etc. So it isn't clear
whether the PL/SQL figure could be better if the database was optimised by a
good DBA.&amp;quot;&lt;/p&gt;
&lt;p&gt;While a good point, it
doesn't apply.  In order to compare Java and PL/SQL, I had to use the same
database for both implementations.  It was the same Oracle 10 XE
instance.&lt;/p&gt;
&lt;p&gt;The physical design question
is really about comparing two data models, not about comparing two languages for
processing a single, common data model.  Yes, a change to the index might make
both the PL/SQL and the Java run even faster.  However, any performance
improvement would apply across the board to Java as well as
PL/SQL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DB Interaction.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;...it was typically
faster to do as much processing as possible in the database, rather than outside
of the database. This is particularly true where the external code has to make
many queries to the database in the course of doing a particular piece of work.
Replacing those with a single call to the database ... was a big performance
gain.&amp;quot;&lt;/p&gt;
&lt;p&gt;Again, a really good point, but
one that doesn't completely apply.&lt;/p&gt;
&lt;p&gt;The
core issue of PL/SQL vs. Java doesn't matter.  PL/SQL, while resident in the
RDBMS server, isn't really part of the database.  PL/SQL makes SQL requests just
like Java (via JDBC) is making SQL requests.  Both the PL/SQL and the Java use
nearly the same SQL SELECT statements.  They can't be identical because SELECT
is part of the PL/SQL language, but a simple String object to
Java.&lt;/p&gt;
&lt;p&gt;In both Java and PL/SQL, we're
doing as much in the DB as possible -- executing a SELECT which does simple
matching and executing a SELECT which does &amp;quot;near-miss&amp;quot; matching.  The PL/SQL
version is slower because the non-DB work done in the PL/SQL program is slower
than Java.  Further, the PL/SQL run-time environment is tightly constrained to
be part and parcel of the RDBMS, limiting memory and
throughput.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Bigger Picture.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From a slightly broader
point of view, people regularly claim that calling a PL/SQL procedure does &amp;quot;more
work in the database.&amp;quot;  In this case, we have designed a moderately complex
procedure, which has to exist -- as a procedure -- somewhere.  We can't rewrite
our process to embed the logic in a SELECT statement.  We can't do more work in
the database; the procedure is either PL/SQL making SQL requests or Java making
SQL requests.&lt;/p&gt;
&lt;p&gt;What happens all too
often is people take something this is already a first-class feature of SQL, and
write their own procedure to implement it.  For example, people will write
algorithms to do joins as nested lookups, or unions as a series of queries, or
group-by's in their own programs because they didn't understand SQL, or thought
they could write something faster.  In these cases, writing proper SQL, and
providing a sound RDBMS physical structure, is probably going to be fastest.&lt;/p&gt;
&lt;p&gt;Any speedup from doing more work in
SQL and less work in the &amp;quot;application&amp;quot; applies to a Java application as well as
a PL/SQL application.  The point is to make better use of the SQL query and DML
features, and the physical structures in the
RDBMS.&lt;/p&gt;
&lt;p&gt;In my example, the processing
can't easily be reduced to simple SQL.  It involves decision-making that is hard
to code as a simple WHERE-clause.  Therefore, we have two places to put the
processing: PL/SQL (slow) or Java (fast).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
SQL-For-Smarties crowd will note that multi-part matching is -- technically -- a
kind of union.  We could try to implement this processing as a union of exact
matches with near-miss-but-not-exact matches.  This can get very hairy, and it
becomes hard to maintain because we have to do a lot of predicate calculus to
work out the effect of implicitly procedural business
rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Sample.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's the PL/SQL package I
used.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
create or replace package body &amp;quot;MATCHSQL&amp;quot; is
procedure MAIN
as
   invno NUMBER;
   temp NUMBER;
   CURSOR invoice_qry( mandate DATE, mantotal NUMBER, manshiptocust NUMBER ) IS
       SELECT invno FROM INVOICE
       WHERE INVOICE.invtotal = mantotal
       AND   INVOICE.invdate = mandate
       AND   NVL(INVOICE.shiptocust,-1) = NVL(manshiptocust,-1);
   CURSOR invoice2_qry( mandate DATE, mantotal NUMBER, manshiptocust NUMBER ) IS
      SELECT invno FROM INVOICE
      WHERE INVOICE.invtotal BETWEEN mantotal-10 AND mantotal+10
      AND   INVOICE.invdate BETWEEN mandate-10 AND mandate+10
      AND   NVL(INVOICE.shiptocust,-1) = NVL(manshiptocust,-1);
   manCount NUMBER := 0;
   match NUMBER := 0;
   nearMatch NUMBER := 0;
   nonMatch NUMBER := 0;
   dupMatch NUMBER := 0;
begin
 DBMS_OUTPUT.PUT_LINE( 'Pure SQL' );
 -- Iterate through all Manifests
 FOR man IN (SELECT manno, mantotal, mandate, shiptocust FROM MANIFEST)
 LOOP
    manCount := manCount + 1;
    -- Lookup matching Invoice
    OPEN invoice_qry( man.mandate, man.mantotal, man.shiptocust );
    FETCH invoice_qry INTO invno;
    IF invoice_qry%FOUND THEN -- Exact Match?
      FETCH invoice_qry INTO temp;
      IF invoice_qry%FOUND THEN -- Duplicate?
          dupMatch := dupMatch + 1; -- Duplicate
      ELSE
          match:= match + 1; -- Exact Match
      END IF;
    ELSE
      -- No Exact Match, try a fall-back near match
      OPEN invoice2_qry(man.mandate, man.mantotal, man.shiptocust);
      FETCH invoice2_qry INTO invno;
      IF invoice2_qry%FOUND THEN -- near match?
          FETCH invoice2_qry INTO temp;
          IF invoice2_qry%FOUND THEN -- duplicate?
            dupMatch := dupMatch + 1;
          ELSE
            nearMatch := nearMatch + 1;
          END IF;
      ELSE
         nonMatch := nonMatch + 1; -- No Match
      END IF;
      CLOSE invoice2_qry;
    END IF;
    CLOSE invoice_qry;
 END LOOP;
 -- Final Report
 DBMS_OUTPUT.PUT_LINE( 'Count ' || manCount );
 DBMS_OUTPUT.PUT_LINE( '  Match ' || match );
 DBMS_OUTPUT.PUT_LINE( '  Non-Match ' || nonMatch );
 DBMS_OUTPUT.PUT_LINE( '  Near Match ' || nearMatch );
 DBMS_OUTPUT.PUT_LINE( '  Duplicate ' || dupMatch );
end MAIN;

end MATCHSQL;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The Real Speedup.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In addition to Java being
faster than PL/SQL, an additional speedup comes from making fewer DB requests in
the first place.  That's why I included the Pure SQL, One Dictionary and Two
Dictionary results.  Eliminating SQL entirely (and using Java HashMap) cuts the
time down to 0.4 of the Pure SQL performance.&lt;/p&gt;
&lt;p&gt;Here's my golden
rule:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Fastest RDBMS Operation is The One You Don't Do.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If it can be done outside the
database, it will be faster than if it is done in the database.  Clearly,
there's a fuzzy border between a sensible performance improvement and
reinventing your own RDBMS in your own application
program.&lt;/p&gt;
&lt;p&gt;When it involves concurrent
transactions, your program's private cache of data is
&lt;strong&gt;A Bad Thing&lt;/strong&gt; ™.  However, any data which is
static can -- and should -- be cached if you need to get maximum processing
speed.  Static, of course, is relative.  Some batch jobs run during windows in
which the database isn't &amp;quot;transactional&amp;quot;, or during which the transaction load
is light or doesn't adversely impact the correctness of results that come from
cache.&lt;/p&gt;
&lt;p&gt;if. for example, a batch job
runs after midnight on yesterday's transactions, then an in-memory cache of
transaction data isn't invalidated by processing of today's transactions.   In
&amp;quot;&lt;a class="reference external" href="http://ddj.com/dept/architect/184406071"&gt;Processing Rows in Batches&lt;/a&gt; &amp;quot;, for example, one of
the factors left out of the article was the confusion over what rows were
actually part of a batch.  The original code did lots of thrashing around to try
and capture every transaction.  Why not just wait until the next batch
scheduling interval?  Or, why have batches in the first place?  Why not process
rows as they
arrive?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DB physical tuning helps both Java
and PL/SQL.  Since Java is already faster than PL/SQL, physical design is still
important and still helps.&lt;/p&gt;
&lt;p&gt;Doing more
work in SQL's DML helps both Java and PL/SQL, also.  Knowing SQL, and making use
of the DML features is still important and still
helps.&lt;/p&gt;
&lt;p&gt;PL/SQL is slow, and I find it
painful to manage, since it is relatively inflexible.  I don't have classpath,
working directories, environment variables, command-line parameters in my PL/SQL
environment.  I do have a kind of symbolic link as my only control mechanism for
introducing flexibility.&lt;/p&gt;
&lt;p&gt;Since PL/SQL
is slower and less flexible than Java, I'm forced to to conclude that PL/SQL
isn't an effective way to implement anything.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>PL/SQL vs. Java - Which is REALLY faster?</title><link href="https://slott56.github.io/2007_03_23-plsql_vs_java_which_is_really_faster.html" rel="alternate"></link><published>2007-03-23T00:12:00-04:00</published><updated>2007-03-23T00:12:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-03-23:/2007_03_23-plsql_vs_java_which_is_really_faster.html</id><summary type="html">&lt;p&gt;While the question of speed came up recently, it
ties in to a long-standing position of mine.  I ran some realistic benchmarks,
and I'm much happier with my architecture
now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Years
ago, at a Siebel conference, I heard a heretical comment.  Specifically, they
use the RDBMS as simple, flat …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While the question of speed came up recently, it
ties in to a long-standing position of mine.  I ran some realistic benchmarks,
and I'm much happier with my architecture
now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Years
ago, at a Siebel conference, I heard a heretical comment.  Specifically, they
use the RDBMS as simple, flat storage: tables and indexes, nothing more.  I was
shocked and dismayed that they had just knocked the idea of stored procedures
and triggers right on its ear.&lt;/p&gt;
&lt;p&gt;About
the same time, we had reached our limit in coping with an application that was
in &amp;quot;trigger hell&amp;quot; -- it had so many triggers firing for so many reasons, we
couldn't work with it.  Further, it had stored procedures in the RDBMS, plus is
had blocks of Tcl code in the database.  Too much architecture, without really
clear allocation of responsibility.  Application developers and maintainers
didn't really get intent behind the various features, and it was slowly spinning
out of control.&lt;/p&gt;
&lt;p&gt;Since then, my position
has been that nothing -- nothing -- goes in the RDBMS but data.  All processing
(by all, I mean &amp;quot;all&amp;quot;, as in &amp;quot;all&amp;quot;) belongs in proper programming language class
definitions which are part of a proper application software architecture that is
outside the RDBMS.  I have lots of arguments with people who want to blur the
line between &amp;quot;data&amp;quot; and &amp;quot;processing&amp;quot; by claiming that some processing is so
intimately tied to the data that it can legitimately be encoded in the RDBMS as
part of the persistent storage.  The argument is silly.  Data is persistent and
processing isn't -- they are fundamentally different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent Questions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One recent question was
nearly incomprehensible, and appeared to be an attempt to sort out a jumble of
C++ and PL/SQL.&lt;/p&gt;
&lt;p&gt;As a side, note, the
literal question was &amp;quot;What is the fastest way for C++ code to get data from
Oracle ? By fastest I mean w/ the least software overhead.&amp;quot;  I have no idea what
this means.  Fastest means fastest, except to this questioner, where it means
least &amp;quot;overhead&amp;quot;, whatever &amp;quot;overhead&amp;quot; might be defined as.  In addition to
proposing that faster means &amp;quot;faster&amp;quot;, I proposed several definitions for
&amp;quot;overhead&amp;quot; but haven't heard back.&lt;/p&gt;
&lt;p&gt;The
other recent question was part of proposing some work to implement some really
complex business rules.  The initial request was to build them in PL/SQL.
Complex rules don't often work out well in PL/SQL, since the language is fairly
thin on sophisticated data structures.  Yes, the most recent versions have some
kind of collections and some notion of objects, but it isn't a first-class part
of the language the way it is in Java.  It's seems to be a creepy-looking
add-on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Performance Comparison.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The comparison in
&amp;quot;&lt;a class="reference external" href="http://www.dbazine.com/oracle/or-articles/moore2"&gt;Java vs.
PL/SQL: Where Do I Put the SQL?&lt;/a&gt; &amp;quot; uses a very limited set of processing
steps.  It uses some simplistic queries that don't reflect real-world problems.&lt;/p&gt;
&lt;p&gt;To be specific, real-world queries are
rarely simple &amp;quot;SELECT COUNT(*)&amp;quot; queries.  They fall into a number of
categories.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Simple COUNT(*) queries, with few or no bind
variables.  These are a rarity in real-world applications, and aren't a good
choice for a benchmark.&lt;/li&gt;
&lt;li&gt;Big queries, based on complex table
definitions in the FROM clause, but few or no bind variables.  These are
commonly part of rather complex data warehouse query processing, and don't often
have complex selection criteria.&lt;/li&gt;
&lt;li&gt;Closely-related families of queries with
multiple WHERE-clause alternatives.  These are dismayingly common because the
data model hasn't kept up with actual use cases.  We have to use complex
conditions to work around some limitations of the
data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These third class of queries are
the interesting ones.  These are the queries where you have to use CASE, DECODE
and NVL constructs.  These are the kinds of queries where you have a number of
variants, and you have to resort to &amp;quot;Cursor Variables&amp;quot; in
PL/SQL.&lt;/p&gt;
&lt;p&gt;These, generally, are also
queries for which SQL is not completely appropriate.   If you have a problem
that sits squarely in SQL's sweet-spot, PL/SQL is a likely best-choice for
processing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sample Problem.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's look at a sample
problem that portrays a more realistic problem.  Let's look at a common kind of
&amp;quot;near-miss&amp;quot; matching.  This happens when comparing work hours with work
requests, invoices with purchase orders, shipping manifests with advanced
shipping notices, manufacturing orders with shipments, etc.  In many cases,
these involve multi-way matches as we compare our vendors, our internal
processes, our logistics and our sales.  In extreme cases where we are the
vendor managing inventory at our customer's location, this can involve matching
customer logistics and sales records with our
records.&lt;/p&gt;
&lt;p&gt;Typically, we have business
rules that match two documents based on a series of rules.  The first kinds of
rules look for exact matches, the subsequent business rules relax the criteria
in various ways to find a &amp;quot;near miss&amp;quot;
match.&lt;/p&gt;
&lt;p&gt;There are a number of relaxation
approaches that are common:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Replacing an equality test (on numbers or
dates) with a BETWEEN clause&lt;/li&gt;
&lt;li&gt;Testing for equality of a nullable field
(using IFNULL or NVL functions, or CASE expressions)&lt;/li&gt;
&lt;li&gt;Testing for similarity of strings with a
LIKE clause&lt;/li&gt;
&lt;li&gt;Replacing an equality test with an EXISTS
clause&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notably absent is the IN clause,
which isn't often &amp;quot;relaxed&amp;quot; into a less strict comparison.  When IN conditions
are changed it usually means adding additional values to the IN list, which is
essentially the same test.&lt;/p&gt;
&lt;p&gt;We'll use
the first two kinds of comparison relaxations on numeric and date fields.  We
can create two hypothetical matching rules:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Exact match on three fields.  This will be a
query of the form WHERE num=? AND date=? AND NVL(optional,-1) = ?&lt;/li&gt;
&lt;li&gt;Range match on two of the three fields and
exact match on the third.  This will be a query of the form WHERE (num BETWEEN ?
AND ?) AND (date BETWEEN ? AND ?) AND (NVL(optional,-1) =
?)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll wind up with two
closely-related queries.  The matching algorithm will attempts the exact match
query first, then the near-miss query
second.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Procedural Optimization.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This problem is
amenable to a non-database optimization.  This is a common optimization, and
I've talked about it at PyCon and seen some folks following up with similar
implementations.&lt;/p&gt;
&lt;p&gt;Here's the secret: a
HashMap (a Python dictionary, indexed by tuples) is blazingly fast, far faster
than any RDBMS can ever be.  Other than customer data for utilities or banks,
you can almost always fit all the data in memory.  10,000 Java or Python objects
is not too much to fit into memory on modern
processors.&lt;/p&gt;
&lt;p&gt;The common optimization is
to load one of the two document collections into a HashMap, keyed by the &amp;quot;exact
match&amp;quot; criteria.  Then, you can query the other document collection, do a nearly
instantaneous lookup in the HashMap.  if you don't find what you're looking for,
then you can fall back to the &amp;quot;relaxed&amp;quot; SQL query.&lt;/p&gt;
&lt;p&gt;This gives you a number of
implementation alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pure SQL.  There really are two queries:
the exact lookup query, and the relaxed (&amp;quot;near miss&amp;quot;) query.&lt;/li&gt;
&lt;li&gt;One Dictionary.  In this case, you load a
dictionary (or HashMap) with one document collection, and do the exact lookup in
the HashMap.  The near-miss query is still used for the special
cases.&lt;/li&gt;
&lt;li&gt;More Dictionaries.  In some cases, you
can partition the document collection into a number of &amp;quot;closely-related&amp;quot;
buckets.  You can use a fast Hash to locate a bucket which contains a number of
candidate documents.  You can iterate through the collection of candidates
looking for the best near-miss
match.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Sample Code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sample code is here to
show the algorithms -- in general.  The specific PL/SQL code and Java code
mirror this Python reference information
precisely.&lt;/p&gt;
&lt;p&gt;Here's the basic, Pure SQL
algorithm, in Python.  I'm using Python and SQLAlchemy to simplify the
presentation.  PL/SQL and Java are god-awful wordy and long for precisely the
same piece of code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def pureSQL():
    &amp;quot;&amp;quot;&amp;quot;Pure SQL matching.&amp;quot;&amp;quot;&amp;quot;
    # Get a working session
    session = create_session(bind_to=engine)
    invoice_qry= session.query(Invoice)
    manifest_qry= session.query(Manifest)

    # Match invoices
    count= 0
    match= 0
    nearMatch= 0
    multiMatch= 0
    nonMatch= 0
    for man in manifest_qry.select():
        invoices= invoice_qry.select_by(
            invtotal=man.mantotal, invdate=man.mandate,
            shiptocust=man.shiptocust )
        if len(invoices) == 1:
            match += 1
        elif len(invoices) &amp;gt; 1:
            multiMatch += 1 #multiple candidates!
        else:
            totW= 10
            dateW= datetime.timedelta(10)
            candidates= invoice_qry.select( and_(
                invoice_tbl.c.shiptocust==man.shiptocust,
                invoice_tbl.c.invtotal.between(man.mantotal-totW,man.mantotal+totW),
                invoice_tbl.c.invdate.between(man.mandate-dateW,man.mandate+dateW) ) )
            if len(candidates) == 1:
                nearMatch += 1
            elif len(candidates) == 0:
                nonMatch += 1 # non-match
            else:
                multiMatch += 1 #multiple candidates!
        count += 1
    print &amp;quot;Manifests&amp;quot;, count
    print &amp;quot;  matches&amp;quot;, match
    print &amp;quot;  near matches&amp;quot;, nearMatch
    print &amp;quot;  multiple near matches&amp;quot;, multiMatch
    print &amp;quot;  non-matches&amp;quot;, nonMatch
&lt;/pre&gt;
&lt;p&gt;Here's the One Dictionary algorithm,
in Python.  The only change is on lines 25 and 26.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def oneDict():
    &amp;quot;&amp;quot;&amp;quot;Use a single dictionary for complete matches.&amp;quot;&amp;quot;&amp;quot;
    # Get a working session
    session = create_session(bind_to=engine)
    invoice_qry= session.query(Invoice)
    manifest_qry= session.query(Manifest)

    # Load the high-speed lookup dictionary
    invDict= {}
    for inv in invoice_qry.select():
        key= ( inv.invtotal, inv.invdate, inv.shiptocust )
        invDict[key]= inv
    print &amp;quot;Invoices&amp;quot;, len(invDict)
    totW= 10
    dateW= datetime.timedelta(10)

    # Match invoices
    count= 0
    match= 0
    nearMatch= 0
    multiMatch= 0
    nonMatch= 0
    for man in manifest_qry.select():
        invkey= ( man.mantotal, man.mandate, man.shiptocust )
        if invDict.has_key( invkey ):
            match += 1
        else:
            candidates= invoice_qry.select( and_(
                invoice_tbl.c.shiptocust==man.shiptocust,
                invoice_tbl.c.invtotal.between(man.mantotal-totW,man.mantotal+totW),
                invoice_tbl.c.invdate.between(man.mandate-dateW,man.mandate+dateW) ) )
            if len(candidates) == 1:
                nearMatch += 1
            elif len(candidates) == 0:
                nonMatch += 1 # non-match
            else:
                multiMatch += 1 #multiple candidates!
        count += 1
    print &amp;quot;Manifests&amp;quot;, count
    print &amp;quot;  matches&amp;quot;, match
    print &amp;quot;  near matches&amp;quot;, nearMatch
    print &amp;quot;  multiple near matches&amp;quot;, multiMatch
    print &amp;quot;  non-matches&amp;quot;, nonMatch
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Comparison Results.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's the important part.
I ran the Python, PL/SQL and Java versions on my Dell Laptop using Oracle 10 XE.
Since it's Oracle, the results are widely applicable.  (I often do this kind of
thing in SQLite, which leads to some disputes.)  Also, since it's all on a
single single-core box, it's the worst case.  A more complex architecture will
perform better.&lt;/p&gt;
&lt;p&gt;I built about 4000
random invoices and 4000 random manifests that need to be matched.  About 2000
matched exactly, the remaining 2000 had about 1000 near-miss matches and about
1000 non-matches.  The numbers aren't exact because I use random number
generators and there are 81 documents which were supposed to be near misses, but
happened to be exact matches.  When you miss by zero, it looks like a
hit.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;PL/SQL&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;24 sec.&lt;/td&gt;
&lt;td&gt;7.7 sec.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Java is much faster than
PL/SQL.&lt;/p&gt;
&lt;p&gt;How is this
possible?&lt;/p&gt;
&lt;p&gt;Easy.  Java isn't competing
for scarce resources.  Java runs outside the RDBMS, where it has unlimited
processor resources.  PL/SQL, on the other hand, is just one of the things that
the RDBMS is doing.  Further, Java has JIT translation to hardware-speed
processing, something PL/SQL lacks.  Finally, Java has a slick optimizer
available to further reduce
overheads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further Performance Improvement.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As if Java isn't fast
enough, we can squeeze a lot more performance out of this process by reducing
the SQL operations.  As mentioned above, we can replace some of the SQL with a
HashMap.  This has the following effects.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Algorithm&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pure SQL&lt;/td&gt;
&lt;td&gt;7.8 sec.&lt;/td&gt;
&lt;td&gt;31 sec.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;One Dictionary&lt;/td&gt;
&lt;td&gt;3.5 sec.&lt;/td&gt;
&lt;td&gt;12.5 sec.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Two Dictionaries&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;9.7 sec.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Yes, Python plus SQLAlchemy is slow.
That's not the point.&lt;/p&gt;
&lt;p&gt;Eliminating the
exact-match SQL, cuts the run time to 0.4 of the pure SQL run time.  Replacing
all of the matching SQL reduces the run time to 0.3 of the original.  This
reflects a tradeoff between a more complex setup (which takes some of the
run-time) vs. a faster match algorithm.&lt;/p&gt;
&lt;p&gt;We'd predict a final run time of 2.4
seconds in Java.  However, I got bored of coding this in Java, since it's rather
tedious.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You
want things to run faster?  An order of magnitude faster?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Replace PL/SQL with Java.&lt;/li&gt;
&lt;li&gt;Replace SQL lookups with in-memory HashMap
lookups.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With some hard work, you can
change 24 seconds of processing to 2.4 seconds of processing.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Sugar, GTK and OLPC</title><link href="https://slott56.github.io/2007_03_13-sugar_gtk_and_olpc.html" rel="alternate"></link><published>2007-03-13T19:12:00-04:00</published><updated>2007-03-13T19:12:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-03-13:/2007_03_13-sugar_gtk_and_olpc.html</id><summary type="html">&lt;p&gt;Some additional Sugar notes recently appeared in
&amp;quot;&lt;a class="reference external" href="http://blog.vrplumber.com/1792"&gt;Plumbing
Life's Depths&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;After
attending PyCon, I polished up my GTK environment, reloading the current
releases.  Here's what I did to get a workable PyGTK on my  various
desktops.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The GTK Technology Stack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's an overview of the
components of this stack:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;GLIB …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Some additional Sugar notes recently appeared in
&amp;quot;&lt;a class="reference external" href="http://blog.vrplumber.com/1792"&gt;Plumbing
Life's Depths&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;After
attending PyCon, I polished up my GTK environment, reloading the current
releases.  Here's what I did to get a workable PyGTK on my  various
desktops.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The GTK Technology Stack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's an overview of the
components of this stack:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;GLIB - the essential graphics library.&lt;/li&gt;
&lt;li&gt;GTK - the GIMP Toolkit, used to build
interesting and useful applications.&lt;/li&gt;
&lt;li&gt;PyGTK - The Python bindings for the GTK toolkit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Linux users will use an X11
Graphics server or GNOME, which implements glib, and interacts with GTK
applications.  Windows users will install binaries which implement the glib
calls directly as window graphics
operations.&lt;/p&gt;
&lt;p&gt;Associated components that
are essential to successful use of GTK:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ATK (Accessibility Toolkit)&lt;/li&gt;
&lt;li&gt;Pango (text formatting)&lt;/li&gt;
&lt;li&gt;Cairo (printing)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This technology is
supported, largely, by &lt;a class="reference external" href="http://www.gnome.org/"&gt;www.GNOME.org&lt;/a&gt; , &lt;a class="reference external" href="http://www.gtk.org"&gt;www.GTK.org&lt;/a&gt; `
&amp;lt;&lt;a class="reference external" href="http://www.gtk.org"&gt;http://www.gtk.org&lt;/a&gt;&amp;gt;`_  and &lt;a class="reference external" href="http://www.pygtk.org"&gt;www.pyGTK.org&lt;/a&gt; .  &lt;a class="reference external" href="http://www.finkproject.org/"&gt;Fink&lt;/a&gt;  versions
for Mac OS X tends to lag behind these other
sites.&lt;/p&gt;
&lt;p&gt;Gecko would also be a nice
addition to this stack to render
HTML.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mac OS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://wiki.laptop.org/go/Sugar_on_MacOS_X"&gt;http://wiki.laptop.org/go/Sugar_on_MacOS_X&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We're assuming Python 2.4.4 is already
installed.&lt;/p&gt;
&lt;p&gt;The pyGTK makes use of an X
window server.  It might be nice to have native GTK+ without the overhead of X
windows.   There is a GTK+ for Mac OS X project (&lt;a class="reference external" href="http://sourceforge.net/projects/gtk-osx/"&gt;http://sourceforge.net/projects/gtk-osx/&lt;/a&gt; ) This
does not appear to be kept up-to-date.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 1 - Setup Fink&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, get dev-tools, known as
XCode 2.4.1 from &lt;a class="reference external" href="http://connect.apple.com"&gt;http://connect.apple.com&lt;/a&gt; .  This will download a
massive file named
xcode_2.4.1_8m1910_6936315.dmg.
This file almost a gigabyte in size.  You can order a DVD, which might be
quicker than downloading on an unreliable or low-speed connection.  Install
this.&lt;/p&gt;
&lt;p&gt;Second, get Fink (&lt;a class="reference external" href="http://www.finkproject.org/download/index.php?phpLang=en"&gt;http://www.finkproject.org/download/index.php?phpLang=en&lt;/a&gt; ).
Install this.&lt;/p&gt;
&lt;p&gt;You'll want to do a
self-upgrade of Fink, which rebuilds itself using dev-tools.  Run the Fink
Commander, and look for Source menu.  Select the &amp;quot;Self-Update-rsync&amp;quot; option to
resynch Fink and the package descriptions that Fink knows about.&lt;/p&gt;
&lt;p&gt;You'll then be advised to do an
Update-All.  This can take a very long time to complete.  However, it applies
updates to any add-on packages.  You'll do this periodically to get additional
updates.&lt;/p&gt;
&lt;p&gt;You are looking for the
complete stack (glib, GTK, X11), which is based on &amp;quot;unstable packages&amp;quot;.
Therefore, in Fink Commander, locate the preferences.  The second tab (labeled
&amp;quot;Fink&amp;quot;) has a button for using unstable packages, make sure this is checked.
This will add this collection of &amp;quot;unstable&amp;quot;
packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 2 - Get pyGTK and GTK+&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two groups of
Fink packages that provide you the necessary Python bindings:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;pygobject2&lt;/strong&gt;, which includes pygobject2-py24 and
pygobject2-py24-dev.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pygtk2&lt;/strong&gt;, which includes pygtk2-gtk-py24,
pygtk2-gtk-p24-dev and
pygtk2-py24.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These Fink projects, in
turn, depend on GLIB, and GTK+, so Fink
&lt;em&gt;should&lt;/em&gt;
download and build these
automatically.&lt;/p&gt;
&lt;p&gt;When prompted, there is
a choice between Apple's x11 vs xfree86.  Which is better?  My first choice was
XFree86 (&amp;quot;XDarwin&amp;quot;), and this seems to work reasonably well.  Later, there is a
warning that switching back to Apple's X11 requires rebuilding from scratch, so
perhaps X11 might have been a better choice.  Currently, everything works, so
I'm reluctant to change.&lt;/p&gt;
&lt;p&gt;This drops
some demo software in
/usr/local/lib/pygtk.&lt;/p&gt;
&lt;p&gt;Libraries
are installed in
/usr/local/lib/python2.4/site-packages/gtk-2.0,
plus
/usr/local/bin/pygtk*.&lt;/p&gt;
&lt;p&gt;What's
important, however, is the final location of the completed
software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 3 - Using Fink's Packages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fink places the software
it builds in a directory named
/sw.   To make
use of this new software, you need to put
/sw/lib/python2.4/site-packages
on your
PYTHONPATH.
You can do this one of two ways:&lt;/p&gt;
&lt;p&gt;Edit
your .profile
to include the line export
PYTHONPATH=&amp;quot;/sw/lib/python2.4/site-packages&amp;quot; or
edit the
/etc/profile to
include the same export
statement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 4 - Upgrades&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Note that there are
several components with different version numbers.  This can make configuration
management complex.&lt;/p&gt;
&lt;p&gt;The GTK.org website
(&lt;a class="reference external" href="http://www.gtk.org"&gt;www.gtk.org&lt;/a&gt; )
has the following stable versions available.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;glib - 2.12&lt;/li&gt;
&lt;li&gt;GTK+ - 2.10&lt;/li&gt;
&lt;li&gt;Pango - 1.14&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fink tends to lag behind these
versions.  Version 2.6.3. is available in Fink.  To upgrade to the GNOME
distribution, you would have to do a more-or-less manual build, outside of
Fink's management and control.&lt;/p&gt;
&lt;p&gt;The
pyGTK.org website (&lt;a class="reference external" href="http://www.pygtk.org"&gt;www.pygtk.org&lt;/a&gt; ) has bindings for GTK+ version
2.10 and glib version 2.12.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://live.gnome.org/PyGTK"&gt;http://live.gnome.org/PyGTK&lt;/a&gt;  has documentation
and downloads,
also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
GLADE for Windows project (&lt;a class="reference external" href="http://gladewin32.sourceforge.net"&gt;http://gladewin32.sourceforge.net&lt;/a&gt;   offers glib,
GTK+ for Windows.  GTK+ is version 2.10.7  GLIB is version
2.12.7.&lt;/p&gt;
&lt;p&gt;The
gtk-2.10.7-win32-1.exe
includes all of the Glib and GTK you'll need.  Be sure to install it in
C:GTK
directory.  It is a common mistake to attempt to install this in &amp;quot;Program
Files&amp;quot;; this won't work well because of the space between Program and
Files.&lt;/p&gt;
&lt;p&gt;Then you'll need to get PyGTK,
PyGObject and PyCairo from Gnome.ORG.  These are pre-built
binaries.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>Great Quotes about The Spreadsheet Problem™</title><link href="https://slott56.github.io/2007_02_07-great_quotes_about_the_spreadsheet_problemtm.html" rel="alternate"></link><published>2007-02-07T18:10:00-05:00</published><updated>2007-02-07T18:10:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-02-07:/2007_02_07-great_quotes_about_the_spreadsheet_problemtm.html</id><summary type="html">&lt;p&gt;Here are some useful quotes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Andrew’s first law of career
spotting:  Accountants are people who, when confronted with a problem, think
“I know, I’ll use [A spreadsheet]”. Now they have two
problems.&lt;/li&gt;
&lt;li&gt;[A spreadsheet] is a great prototyping
tool, just don’t let it anywhere near your production …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here are some useful quotes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Andrew’s first law of career
spotting:  Accountants are people who, when confronted with a problem, think
“I know, I’ll use [A spreadsheet]”. Now they have two
problems.&lt;/li&gt;
&lt;li&gt;[A spreadsheet] is a great prototyping
tool, just don’t let it anywhere near your production
systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While &lt;a class="reference external" href="http://panko.cba.hawaii.edu/ssr/Mypapers/whatknow.htm"&gt;Panko&lt;/a&gt;  provides a taxonomy of errors, it is
focused on quantitative errors, where an answer is demonstrably wrong.  In &lt;a class="reference external" href="http://portal.acm.org/citation.cfm?id=938435.938681&amp;amp;coll=GUIDE&amp;amp;dl=G&amp;amp;CFID=15151515&amp;amp;CFTOKEN=6184618"&gt;Teo and Tan&lt;/a&gt; , there is some discussion of
qualitative errors, but the discussion is limited to &amp;quot;jamming&amp;quot; constants into a
formula and duplicating values around the
model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Good Design.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spreadsheet design is
essentially the same as other software design.  There are pretty
well-established patterns, and a spreadsheet that follows well-established
software design patterns is easier to work with than one that is
haphazard.&lt;/p&gt;
&lt;p&gt;In particular, a basic
input-output pattern is critical to avoiding constants and duplication.  The
criteria for decomposing modules, based on allocation of responsibility,
minimizing coupling and maximizing cohesion are all essential for avoiding
duplication.  In some cases, a &lt;strong&gt;Hidden Model&lt;/strong&gt; ™ page may be essential to cleanly
separating inputs from
reports.&lt;/p&gt;
&lt;p&gt;Further, many of the basic
usability design patterns can  also be applied.  A spreadsheet that looks like a
document is useful for a final report.  A spreadsheet that looks like an input
panel is useful for the input side of the document.  Mixing the inputs and the
final report, while possible, isn't always the best
strategy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spreadsheet as Document.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When we look at a &lt;a class="reference external" href="https://slott56.github.io/2007_01_25-spreadsheet_as_syntax.html"&gt;spreadsheet as syntax&lt;/a&gt;  of a document for
capturing input from people, then we have to pay close attention to
user-interface design patterns.  In particular, most GUI's insist on labels
preceding input fields.  While this is largely taken for granted, anyone who has
worked with a GUI builder knows that you have labels and input controls in an
obvious juxtaposition.  Usually labels are to the left of controls, but
sometimes they are above.&lt;/p&gt;
&lt;p&gt;In
spreadsheets, we see the strange and poorly-thought-out documents.  I think that
a substantial number of &amp;quot;qualitative&amp;quot; errors can be stemmed with a few design
guidelines.  Here's an example that could be used to train users in a better way
to use spreadsheets.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sheet 1 - Instructions&lt;/li&gt;
&lt;li&gt;Sheet 2 - Assumptions and Constants&lt;/li&gt;
&lt;li&gt;Sheet 3 to &lt;em&gt;n&lt;/em&gt;  -
Inputs.  These sheets look like forms with labels and fields.  Some calculations
are possible, as an aid to data entry, but the final answer isn't
here.&lt;/li&gt;
&lt;li&gt;Sheet &lt;em&gt;n&lt;/em&gt; +1 to the end - Reports.  These sheets look like final documents.  The calculations
depend on Assumptions and Inputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We
can, with a little XML and Python, validate the overall design pattern.  We can
locate constants in formulas, and improper references among
spreadsheets.&lt;/p&gt;
&lt;p&gt;Further, we can parse
sheets 3 to
&lt;em&gt;n&lt;/em&gt;  to
extract the meaningful user inputs and put them into a more sophisticated,
controlled, persistent and widely-shared
repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Hidden Model™&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;In
a few cases, a spreadsheet has outputs that come from the inputs via a tangle of
intermediate results.  Often that tangle is a business model that started out as
one tidy report and then expanded out of control (usually via copy and paste)
into a number of related reports.&lt;/p&gt;
&lt;p&gt;Good
software design (i.e., the MVC pattern) tells us that we have two views of the
underlying model.  We have the input parameters, we have a number of related
reports.  Between the two, we have the model itself, often a pretty simple set
of calculations.   The control is implicit in the way spreadsheets work; we just
build the model and the views.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Spreadsheet as Syntax</title><link href="https://slott56.github.io/2007_01_25-spreadsheet_as_syntax.html" rel="alternate"></link><published>2007-01-25T16:11:00-05:00</published><updated>2007-01-25T16:11:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-01-25:/2007_01_25-spreadsheet_as_syntax.html</id><summary type="html">&lt;p&gt;If we look at a spreadsheet as a document we can
develop a parser that locates the user-supplied information in that document.
Like any language, we'll have to treat some elements of the spreadsheet as pure
syntax, little more than punctuation.  In the case of embedded formulas, these
are elaborate …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If we look at a spreadsheet as a document we can
develop a parser that locates the user-supplied information in that document.
Like any language, we'll have to treat some elements of the spreadsheet as pure
syntax, little more than punctuation.  In the case of embedded formulas, these
are elaborate punctuation that is an important part of overall usability.&lt;/p&gt;
&lt;p&gt;We'll look at parsing an XML version
of a spreadsheet, since that is a delightfully simple exercise in Python.
Looking back at &amp;quot;The Problem with Spreadsheets&amp;quot;, we're looking at simplifying
some of the business processes, and saving the spreadsheets as XML files so that
we can write application programs to extract meaningful information from the
spreadsheets.&lt;/p&gt;
&lt;p&gt;Generally, parsing
happens at two levels: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lexical_analysis"&gt;lexical analysis&lt;/a&gt;  and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Parsing"&gt;syntax
analysis&lt;/a&gt; .  A lexical scanner will break the stream of input characters
into discrete tokens.  The syntax analysis looks at the stream of tokens to
create a usable representation, often called an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;abstract syntax tree&lt;/a&gt;
(AST).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Layers of Meaning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Compounding the essential
parsing problem are the number of layers of syntax that we have to work
with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;XML.  XML lexical analysis locates tags,
and punctuation, building up a document object model of Nodes, Elements and
Attributes.&lt;/li&gt;
&lt;li&gt;Spreadsheet.  The spreadsheet analysis
interprets the XML nodes are parts of a Workbook, with Worksheets, Rows and
Cells.&lt;/li&gt;
&lt;li&gt;Business Process Objects.  What we
observe in the spreadsheet is really an implementation of some essential
business process.  There are business objects which have been written down in
the cells of the spreadsheet.  The mapping from business entity to spreadsheet
representation is sometimes haphazard.  The objects we find in the spreadsheet
rows and cells are something we'll call Business Process Objects.  They aren't
the real essence of the processing, they're just one possible implementation.&lt;/li&gt;
&lt;li&gt;Essential Business Entities.  These are
the fundamental business entities that we are really interested in.  These are
plans for selling or making product, commitments from vendors, prospective
customers, financial arrangements, etc.  These get encoded in a number of forms,
one of which is Business Process Objects in a spreadsheet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since there are multiple levels of
meaning, there are multiple abstract syntax trees that we will be developing.
In essence we work from the bottom up, accreting information to create the
essential business entities.  Our SAX parser will examine the XML syntax.  We
can use a generic Document Object Model (DOM) for the XML
structure.&lt;/p&gt;
&lt;p&gt;We can traverse the DOM to
uncover spreadsheet objects.  We can traverse the spreadsheet objects to uncover
the Business Process Objects (BPO).   Typically, we can optimize some of these
traversal steps and locate the BPO's while traversing the DOM.  The essential
business entities, however, can present a more complex problem.  Business
Entities often exist as dimensions in a star schema, leading us toward
conforming the BPO's into a data warehouse for analysis
purposes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Basic SAX Parsing.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Python SAX and DOM
libraries can be used to build a complete DOM from an XML document.  For our
purposes, we'll elide some features which aren't a common part of parsing
spreadsheets.  This
xml.sax.ContentHandler
does the minimal work required to create a DOM structure that contains our
spreadsheet XML.  We'll have to do more to make sense of this DOM
structure.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import xml.sax, xml.dom.minidom

class DOMContentHandler( xml.sax.ContentHandler ):
    &amp;quot;&amp;quot;&amp;quot;A SAX ContentHandler which creates a simple DOM object.&amp;quot;&amp;quot;&amp;quot;
    def __init__( self ):
        &amp;quot;&amp;quot;&amp;quot;Initialize this handler.&amp;quot;&amp;quot;&amp;quot;
        self.dom= xml.dom.minidom.getDOMImplementation()
        self.document= self.dom.createDocument(None,None,None)
        self.context= [ self.document ]
    def startElement( self, name, attrs ):
        &amp;quot;&amp;quot;&amp;quot;Starts a new Element, pushing this onto the stack.&amp;quot;&amp;quot;&amp;quot;
        new= self.document.createElement( name )
        for k,v in attrs.items():
            new.setAttribute( k, v )
        self.context[-1].appendChild( new )
        self.context.append( new )
    def endElement( self, name ):
        &amp;quot;&amp;quot;&amp;quot;Ends an Element, popping the matching Element off the stack.&amp;quot;&amp;quot;&amp;quot;
        while self.context[-1].nodeName  != name:
            self.context.pop( -1 )
        self.context.pop(-1)
    def characters( self, content ):
        &amp;quot;&amp;quot;&amp;quot;Captures characters, creating a Text Node.&amp;quot;&amp;quot;&amp;quot;
        new= self.document.createTextNode( content )
        self.context[-1].appendChild( new )
    def getDocument( self ):
        &amp;quot;&amp;quot;&amp;quot;Returns the DOM object.&amp;quot;&amp;quot;&amp;quot;
        return self.document
&lt;/pre&gt;
&lt;p&gt;To use this
DOMContentHandler
we have to create a SAX parser and initiate
parsing on an input source.  Note that this creates a generic DOM object, which
we have to examine to locate the spreadsheet
structure.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class XMLParser( FileParser ):
    &amp;quot;&amp;quot;&amp;quot;SAX2 parsing of entire DOM.&amp;quot;&amp;quot;&amp;quot;
    def __init__( self, aFile ):
        &amp;quot;&amp;quot;&amp;quot;Initialize parsing a given XML file which contains a SpreadSheet.&amp;quot;&amp;quot;&amp;quot;
        FileParser.__init__( self, aFile )
        handler= DOMContentHandler()
        myReader= xml.sax.parse( self.file, handler )
        self.xmlDoc= handler.getDocument()
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The Spreadsheet Object Model (SSOM)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The low-level DOM structure
is a large collection of Element and Text Nodes with Attribute values.   It's
much more pleasant to work with proper Worksheet, Row and Cell objects.  We can
condense the DOM into something more usable through a fairly simple algorithm
that makes good use of Python's
generators.&lt;/p&gt;
&lt;p&gt;First, we'll need class
definitions for the various spreadsheet entities we're going to deal
with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Style.  The spreadsheet style
information is spread through a number of tags and attributes.  Most of the tag
values are single-occurence elements and the list-oriented
getElementsByTagName()
and
getAttribute()
aren't the most convenient API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Workbook&lt;/strong&gt; .  The Workbook is a collection of
Styles, Names, and &amp;quot;SupBook&amp;quot; references to external files.  It is also a
collection of Worksheets.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WorkbookLink&lt;/strong&gt; .  This is the Path information of
a &amp;quot;SupBook&amp;quot; reference in a Workbook.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Worksheet&lt;/strong&gt; .  A Worksheet is essentially a
container for Rows.  It can also be looked at as a container for columns, but we
won't often need to make use of this representation.  Unlike the pure XML model,
which is row-oriented, our spreadsheet object model can include additional
indexing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Row&lt;/strong&gt; .  A Row is a container for
Cells.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cell&lt;/strong&gt; .  A Cell has a number of attributes:
data, an optional formula, and an optional style.  We'll need these to parse the
spreadsheet document.  We can safely ignore any other attributes of a
cell.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WorksheetReference&lt;/strong&gt; .  This is an reference
embedded in a formula.  These references are usually a subset of the &amp;quot;SubBook&amp;quot;
references.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these class
definitions are relatively simple.  They are containers with basic accessor
methods to put and get specific components.  A Workbook, for example, uses a
number of dictionaries to keep Names, Styles and Worksheets.  A Row is little
more than a simple list of
Cells.&lt;/p&gt;
&lt;p&gt;However, since these are formal
containers, the accessors create a very convenient API for accessing spreadsheet
structure.  Rather than a complex XPATH expression to locate a given cell of a
given row of a given sheet, we can provide a pleasant method in the Workbook
class to locate the Sheet, delegating the row and cell lookup.  Within Worksheet
we can locate the requested Row, and within Row we locate the requested
Cell.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generating SSOM Objects.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can handle the creation
of SSOM objects via Python generators.  Here's a method that yields the
top-level Worksheet instances.  It also assures that each Worksheet is properly
contained in the parent Workbook.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def nextSheet( self ):
        &amp;quot;&amp;quot;&amp;quot;Generator which yields the next, empty L{Worksheet}.&amp;quot;&amp;quot;&amp;quot;
        wsList= self.xmlDoc.getElementsByTagName(&amp;quot;Worksheet&amp;quot;)
        for ws in wsList:
            self.currentWS= ws
            name= ws.getAttribute( &amp;quot;ss:Name&amp;quot; )
            self.sheet= Worksheet( name )
            self.document.addSheet( self.sheet )
            yield self.sheet
&lt;/pre&gt;
&lt;p&gt;Our final application can use this
method something like the following.  This snippet looks for worksheets named
&amp;quot;Assumptions&amp;quot;, and examines only those pages of a
Workbook.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
parse= ssDOM.XMLParser( file(aFile,'r') )
    doc= parse.getWorkbook()
    for ws in parse.nextSheet():
        if ws.name != &amp;quot;Assumptions&amp;quot;:
            continue
        print ws
&lt;/pre&gt;
&lt;p&gt;Generating the Rows (and Cells) is
somewhat more complex because of the very rich information content in an
individual Cell.  However, the essential processing is pretty straightforward.
We need to collect all the Cells within a row, along with any style or comments
associated with the Cell.  Then we bundle it into a SSDOM object that we can
work with in our next level of parsing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def nextRow( self ):
        &amp;quot;&amp;quot;&amp;quot;Generator which yields a complete L{Row}.&amp;quot;&amp;quot;&amp;quot;
        for table in self.currentWS.getElementsByTagName(&amp;quot;Table&amp;quot;):
            self.rowNumber= 0
            for row in table.getElementsByTagName(&amp;quot;Row&amp;quot;):
                aRow= Row()
                for cell in row.getElementsByTagName(&amp;quot;Cell&amp;quot;):
                    styleID= cell.getAttribute( &amp;quot;ss:StyleID&amp;quot; )
                    index= cell.getAttribute( &amp;quot;ss:Index&amp;quot; )
                    formula= cell.getAttribute( &amp;quot;ss:Formula&amp;quot; )
                    data = cell.getElementsByTagName(&amp;quot;Data&amp;quot;)+cell.getElementsByTagName(&amp;quot;ss:Data&amp;quot;)
                    ... some thrashing omitted ...
                    aRow.addCell( Cell(text,formula,style) )
                self.sheet.addRow( aRow )
                yield aRow
                self.rowNumber += 1
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Business Process Objects.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once we've got Rows, Cells
and Worksheets, we can then do useful analysis of the resulting spreadsheet to
locate the user's inputs.  As one example, we'll peel the assumptions off the
assumptions worksheet in the
workbook.&lt;/p&gt;
&lt;p&gt;In the following case, we're
only looking at the Worksheet named assumptions.  The worksheet contains a
formula which repeats some identifying information on this worksheet.  We'll
need that to establish some business context for the following
data.&lt;/p&gt;
&lt;p&gt;The rows of the sheet have some
instructions and examples, which we have to skip.  Once we get to the &amp;quot;Summary
P&amp;amp;amp;L Assumptions&amp;quot; cell, everything below that will be user-entered
Assumptions.  The interesting part of the parsing is recognizing headings for
areas that group the assumptions assumptions and the detailed assumptions within
an area.  The headings for an area have a style that involves a color plus a
single underline.  Unlike parsing text, where we simply compare strings, here we
have to compare one attribute of a cell's style to see if the cell has special
meaning.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for ws in parse.nextSheet():
        if ws.name != &amp;quot;Assumptions&amp;quot;:
            continue
        print ws
        rowIter= parse.nextRow()
        for row in rowIter:
            if row[0].formula == u&amp;quot;='Summary PNL LC'!RC&amp;quot;:
                print &amp;quot;Title:&amp;quot;, row[0].data
            if row[0].data == u&amp;quot;Summary P&amp;amp;L; Assumptions&amp;quot;:
                # Keep rows after the assumptions header.
                break
        area= &amp;quot;&amp;quot;
        for row in rowIter:
            if row[0].data.startswith( u&amp;quot;Examples &amp;quot; ):
                continue
            if len(row) == 0 or len(row[0].data) == 0:
                continue
            if len(row) == 1 and row[0].style.fontUnderline == u&amp;quot;Single&amp;quot;:
                area= row[0].data
            else:
                txt= &amp;quot;; &amp;quot;.join( [ c.data for c in row if c.data ] )
                a= Assumption( area, txt, w_fk )
                print a
&lt;/pre&gt;
&lt;p&gt;Since iterators maintain state, we can
use the iterator to implement a very clean
&lt;strong&gt;Skip The Headers&lt;/strong&gt;  design pattern.  The first
&amp;quot;for row in
rowIter&amp;quot; loop will process rows until we find the
last of the &amp;quot;overhead&amp;quot; rows.  The second &amp;quot;for
row in rowIter&amp;quot; loop will process the remaining
rows; we skip blank rows and rows that contain
examples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Essential Business Entities.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our Business Process
Object may be the essential business entity or it may only be selected
attributes of a more complex entity.  In this case, the Assumption object that
we parsed is just a puddle of text, and not very interesting.  It is, however, a
label on a more complete business model, which pervades the
spreadsheet.&lt;/p&gt;
&lt;p&gt;By accumulating the
individual BPO's, we can accrete enough information to reconstruct the business
model which is implemented as a spreadsheet.   Extracting the parameters from
this model is the heart of what our spreadsheet parser is doing.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>The Problem with Spreadsheets</title><link href="https://slott56.github.io/2007_01_23-the_problem_with_spreadsheets.html" rel="alternate"></link><published>2007-01-23T11:13:00-05:00</published><updated>2007-01-23T11:13:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-01-23:/2007_01_23-the_problem_with_spreadsheets.html</id><summary type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2005_09_27-essay_102_when_a_column_is_not_a_column.html"&gt;When a Column is Not a Column&lt;/a&gt; &amp;quot; for a rant on
failed attempts to scale spreadsheets up into relational databases.  Bottom
Line:  A spreadsheet column is rarely an RDBMS column.  Often the SS column's
label is a key value, just like the SS row's label, and the cell's value …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2005_09_27-essay_102_when_a_column_is_not_a_column.html"&gt;When a Column is Not a Column&lt;/a&gt; &amp;quot; for a rant on
failed attempts to scale spreadsheets up into relational databases.  Bottom
Line:  A spreadsheet column is rarely an RDBMS column.  Often the SS column's
label is a key value, just like the SS row's label, and the cell's value is
RDBMS data in the RDBMS row.  Both models borrow terminology, but the concepts
under those terms don't map very well.  It's almost universally a mistake to
transform a spreadsheet page (which is table-like) into a proper RDBMS
table.&lt;/p&gt;
&lt;p&gt;Here's the interesting problem
&lt;em&gt;du jour&lt;/em&gt; .  The customer has a collection of
massive spreadsheets (20 tabs) that are prepared by 20 or so people.  This
collection of 20 copies of the same template must then be consolidated into one
amalgam.&lt;/p&gt;
&lt;p&gt;If the spreadsheets were just
data entry vehicles, we'd be replacing them with a simple web application, and
that would be straight-forward.&lt;/p&gt;
&lt;p&gt;The
essential problem (to consolidate the data) is compounded by the spreadsheets
having some pretty fancy calculations and feedback. We could replace them with a
web application that had enough AJAX to be similar to the &lt;a class="reference external" href="http://docs.google.com/"&gt;Google Docs&lt;/a&gt;  spreadsheet: it would
provide a rich user interface, and the data would be centrally
located.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collaboration and Consolidation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this case, the
collaboration is more than just consolidation.  While the proximate problem is
consolidation, we quickly uncovered additional use cases.  There are at least
three classes of actors: directors who originate the templates, managers who
fill in the templates, and analysts who consolidate and report on the
data.&lt;/p&gt;
&lt;p&gt;The managers filling in the
templates, in some cases, actively use them to control their business.  They
create alternate scenarios, they make decisions, they take action and they
compare predicted results with actual results.  Other managers, however, don't
do more than fill in the templates and dutifully post them to the
analysts.&lt;/p&gt;
&lt;p&gt;Our collaboration goes beyond
simple consolidation.  The superficial collaborative task is only the tip of a
larger iceberg of use cases for the spreadsheets.  What is a technology choice
that supports consolidation, but preserves the other use
cases?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Excel Extraction.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some managers make
extensive use of the original spreadsheet functionality; the spreadsheet's
native use cases are essential to the enterprise.  In addition to the
spreadsheet use cases, consolidation and refreshing history must be added to
this.  One of the decisions we have to make is where we allocate the additional
ETL (Extract Transform Load) processing that produces consolidated information.
Since we working with (against?) MS-Office products, we're talking about some
fairly complex use cases with Excel at the center.&lt;/p&gt;
&lt;p&gt;Note that we have to strike a fine
balance between two opposing forces.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Managers tinker with the spreadsheets
as part of their business modeling.  The Directors also tinker with the
templates as part of the larger planning cycle.&lt;/li&gt;
&lt;li&gt;The Analysts need a fixed, standard set
of spreadsheets they can consolidate without a lot of study and reverse
engineering.  They need to prevent
tinkering.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have a spectrum of
platform alternatives.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Excel.  We can write gloriously complex
macros and VB scripts and embed them in the spreadsheet.  This makes them large,
difficult to email, and presents a security nightmare.  First, some email and
firewall programs are grumpy about this kind of embedded functionality.  Second,
and more important, managers are tinkering with the spreadsheets, but directors
need standardization in the spreadsheets.  If we &amp;quot;lock things down&amp;quot; for the
analysts' benefit, we prevent the managers from making good use of the tool.  If
we allow the managers the freedom to use the tool, the analysts struggle to
consolidate.&lt;/li&gt;
&lt;li&gt;Desktop Application.  We can write a
desktop application; this will exploit the .Net API's to extract from the local
spreadsheet and load to a remote database.  This has to use more sophisticated
parsing and pattern matching to tolerate tinkering.  However, it can also
provide immediate feedback if names are dropped or changed, or cells moved in a
way that makes the results hard to use.&lt;/li&gt;
&lt;li&gt;Web Application.  We can write a web
application to which people upload their spreadsheet, do the ETL on the web
server, and then provide reports (or pivot tables) to help them manage their
business.  Like a desktop application, this must have more sophisticated parsing
and pattern-matching.  However, this can't even make good use of the .NET API's,
but must work around a number of tragic
limitations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A Show Stopper.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's a potential
show-stopper for the web alternative, &amp;quot;&lt;a class="reference external" href="http://support.microsoft.com/kb/257757"&gt;Considerations for service-side
Automation of Office&lt;/a&gt; &amp;quot;:  &amp;quot;Microsoft does not currently recommend, and
does not support, Automation of Microsoft Office applications from any
unattended, non-interactive client application or component (including ASP,
DCOM, and NT Services), because Office may exhibit unstable behavior and/or
deadlock when run in this environment.&amp;quot;&lt;/p&gt;
&lt;p&gt;Ouch.&lt;/p&gt;
&lt;p&gt;The
web application could have had a pretty nifty overview:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The Director creates a new template and
populates it with the most recent plan and the actual performance information.
It's posted to the collaboration website.&lt;/li&gt;
&lt;li&gt;The Manager gets the template from the web,
makes changes, creates models, does the managerial thing.  The Manager uploads
spreadsheets from time to time.  At some point, one is the &amp;quot;current&amp;quot; plan, and
is canonized for purposes of overall enterprise consolidated business
planning.&lt;/li&gt;
&lt;li&gt;The Analysts have all of the Manager's uploads
to consolidate and report on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The
end-user experience would be slightly different than today's mass-emailing
frenzy.  There'd be a nice collaboration web site for upload and download.  The
upload would validate and provide feedback as part of the upload
process.&lt;/p&gt;
&lt;p&gt;It appears that we can't make
this work very easily.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Desktop and Excel Platforms.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'm not a big
fan of the desktop as a platform.  Primarily, I hate the configuration
management problem: who has what version of the
application.&lt;/p&gt;
&lt;p&gt;&amp;quot;But there are tools to
help.&amp;quot;&lt;/p&gt;
&lt;p&gt;While true, desktop deployment
tools merely plaster over the essential problem:  the people who &amp;quot;control&amp;quot; the
desktop aren't very disciplined.  We can only make desktop software work as part
of a total lock-down of the end-user's computer.  Since the client doesn't do
this (and won't for this one business application), we can't really make use of
the desktop as a platform.&lt;/p&gt;
&lt;p&gt;Excel is a
viable programming platform.  However, it, too is prone to getting out of
control.  The current 20-plus-tab monstrosity is packed full of macros and VB
modules and doesn't work reliably.  In addition to bugs, people can easily add
inter-workbook links to documents on their C: drive and in their Windows TEMP
directory.  The whole thing rapidly spins out of control when we try to make use
of the clever features of Excel.  We need something simpler and more
reliable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter POI and XML.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can exploit two
technologies to make a simple, reliable web-based solution.  First, we have
&lt;a class="reference external" href="http://jakarta.apache.org/poi/"&gt;Jakarta
POI&lt;/a&gt; , which allows us to read Excel files directly.  This is pleasant,
and the HSSF reliably picks apart a spreadsheet.  Second, we can use XML
versions of the spreadsheets, making them readable by &lt;a class="reference external" href="http://sax.sourceforge.net/"&gt;SAX&lt;/a&gt;  or &lt;a class="reference external" href="http://xerces.apache.org/"&gt;Xerces&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Here's
the overall Compiler design pattern, and how we would implement it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lexical scanning is done by POI or SAX.
From this, we get a sequence of tokens which are Worksheets, Rows and
Cells.&lt;/li&gt;
&lt;li&gt;Parsing is done by our application.  From
the sequence of Cells, Rows and Worksheets, we assemble higher-level constructs
that are the essential Business Entities described in the spreadsheets.  If the
user has made the wrong kinds of changes, we can't interpret the spreadsheet,
and must reject the upload with an error.  Since we know the Worksheet, Row and
Cell where parsing fell apart, we can report an error pretty
precisely.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we've parsed the
spreadsheet and have the Business Entities, we can then do the required
transform and load operations.  These will lead to the consolidated data.  We
can then cough out the next generation template, or a reporting pivot table, or
simply redirect the user to a typical data warehouse reporting
portal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spreadsheet as Syntax.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This leaves us with the
spreadsheet document filling an interesting role in this processing.  Rather
than being an active platform, the spreadsheet is downgraded to a mostly passive
document with a few active elements.&lt;/p&gt;
&lt;p&gt;Once we look at a spreadsheet as a
kind of syntax -- a sequence of tokens -- we can parse it using either of a
couple of techniques.  We can try to create an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/LR_parser"&gt;LR&lt;/a&gt;
or &lt;a class="reference external" href="http://en.wikipedia.org/wiki/LL_parser"&gt;LL&lt;/a&gt;   kind of grammar, which may work out,
depending on how complex the spreadsheet is.  Often, user inputs are preceded by
labels which allow us to do very simple LR(0) parsing.&lt;/p&gt;
&lt;p&gt;We can, for example, look for the cell
which contains the &amp;quot;Weekly Forecast&amp;quot; data.  In the next row, a cell will have a
product name, and the following cell will have a forecast number of cases
sold.&lt;/p&gt;
&lt;p&gt;The other technique is to use a
more sophisticated &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Regular_expression"&gt;regular expression&lt;/a&gt;  technique where we need to
see a longer sequence of cells or rows to determine the pattern.  These aren't
as easy to implement because most RE processing software works with individual
characters.  We would need to write a RE matcher as a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Nondeterministic_Finite_State_Machine"&gt;non-deterministic finite automaton&lt;/a&gt;  that worked
with Cells and Rows instead of
characters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution Outline.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's a fun kind of
solution.  It works best if the spreadsheets are pared down to just the input
sections with just enough calculation and history to facilitate creating
high-quality plans.  From the current spreadsheets, we would delete the various
tabs that are simply reporting and consolidation within the
spreadsheet.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Directors build their templates, including
ODBC queries which pull historical data into the spreadsheets for use by
managers.  They save them as XML documents.  These are large, but also very easy
to cope with.  They post them to the web site for use by managers.&lt;/li&gt;
&lt;li&gt;Managers download the spreadsheets and work
with them.  They upload their various planning scenarios so that the plans can
be validated, and reports can be generated from plans and actuals.&lt;/li&gt;
&lt;li&gt;Analysts use the same reporting tools that
managers use.  The only practical difference between an analyst and a manager is
the breadth of information which is visible.  A manager can see their plan, an
analyst can see multiple plans.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The
upload process uses a SAX application to parse, validate, extract, transform and
load the spreadsheet.  In the (all-too-common) situation where the spreadsheet
doesn't parse successfully, there are two kinds of feedback:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An error page in the web
application.&lt;/li&gt;
&lt;li&gt;A revised spreadsheet with a different
style for the erroneous section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll
come back to spreadsheet as syntax in future posts.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Measurable Improvement</title><link href="https://slott56.github.io/2007_01_04-measurable_improvement.html" rel="alternate"></link><published>2007-01-04T11:27:00-05:00</published><updated>2007-01-04T11:27:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-01-04:/2007_01_04-measurable_improvement.html</id><summary type="html">&lt;p&gt;Here's what I
observed.&lt;/p&gt;
&lt;p&gt;Customer:  &amp;quot;Our business
performance isn't what we want.  We think some of our intranet is no
good.&amp;quot;&lt;/p&gt;
&lt;p&gt;Us:  &amp;quot;We'd love to look at
it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Customer:  &amp;quot;Not so fast.  You can't
'look at it'.  You have to propose a measurable change in business performance,
define a fixed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's what I
observed.&lt;/p&gt;
&lt;p&gt;Customer:  &amp;quot;Our business
performance isn't what we want.  We think some of our intranet is no
good.&amp;quot;&lt;/p&gt;
&lt;p&gt;Us:  &amp;quot;We'd love to look at
it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Customer:  &amp;quot;Not so fast.  You can't
'look at it'.  You have to propose a measurable change in business performance,
define a fixed budget for that change.&amp;quot;&lt;/p&gt;
&lt;p&gt;Us:
&amp;quot;To look at everything would cost you half a million dollars, or more, depending
on how pervasive the problems are.  We have to bring in the executive
consultants, we have to observe the business in operation for a few months,
product roll-outs, training, everything that impacts
performance.&amp;quot;&lt;/p&gt;
&lt;p&gt;Customer:  &amp;quot;We have $100,000 to
spend.&amp;quot;&lt;/p&gt;
&lt;p&gt;Additionally, they included one
of those &amp;quot;[X] will be performed after [Y]&amp;quot; sentences in the statement of work.
Since it's a &amp;quot;&lt;a class="reference external" href="http://web.cn.edu/kwheeler/gram_passive_voice.html"&gt;weak passive-voice&lt;/a&gt; &amp;quot; construction, we have no
idea who will be doing [X] or [Y], or what bearing it has on the project.
Worse, the customer won't let us remove the sentence from the statement of work.
We have to invest non-billable sales time to ferret out the real meaning behind
this, since it doesn't describe something we're supposed to do.&lt;/p&gt;
&lt;p&gt;Here's where things will fall apart:
business is a mix of people, process, technology, funding and organization.
They're asking us to fix one of the five elements.  We can easily upgrade their
technology.  However, we can't easily retrain their people, redefine their
business processes, adjust their budgeting priorities or change the
responsibilities in the organization.&lt;/p&gt;
&lt;p&gt;Let's say we put in brilliant web site
changes and then they fire their training department.  What now?  How can we be
answerable for business performance improvements when they've done more damage
than we've done good?&lt;/p&gt;
&lt;p&gt;While it's smart
to look for measurable business improvements, you can't pin those improvements
on technology change.  We don't have authority to make changes that match our
responsibility for improvement.  I think that articles like this (&amp;quot;&lt;a class="reference external" href="http://business.enotes.com/business-finance-encyclopedia/management-authority-responsibility"&gt;Management: Authority and Responsibility&lt;/a&gt; &amp;quot;) cover
some of the bases.  The article &amp;quot;&lt;a class="reference external" href="http://builder.com.com/5100-6401-1046495.html"&gt;Assign Responsibility and Authority&lt;/a&gt; &amp;quot; may be
helpful also.&lt;/p&gt;
&lt;p&gt;Having done some reading,
I'm at a loss for a strategy that would get the two in synch.  Either we should
have our authority expanded to cover our responsibility for business
improvement, or we should have our responsibility contracted to match our
authority to make a few technical changes in their web pages.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Code Quality - Which Implementation is "Better"?</title><link href="https://slott56.github.io/2007_01_03-code_quality_which_implementation_is_better.html" rel="alternate"></link><published>2007-01-03T11:39:00-05:00</published><updated>2007-01-03T11:39:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-01-03:/2007_01_03-code_quality_which_implementation_is_better.html</id><summary type="html">&lt;p&gt;To begin with, we're talking about the
implementation's source code.  Here's the situation: Ann says that Bob's code is
no good, and she's provided an alternative implementation.  How do we
choose?&lt;/p&gt;
&lt;p&gt;The first part of any scorecard
is the &lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;SEI Quality Measures Taxonomy&lt;/a&gt; .  It's marked
&amp;quot;Legacy&amp;quot;, but I haven't seen …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To begin with, we're talking about the
implementation's source code.  Here's the situation: Ann says that Bob's code is
no good, and she's provided an alternative implementation.  How do we
choose?&lt;/p&gt;
&lt;p&gt;The first part of any scorecard
is the &lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;SEI Quality Measures Taxonomy&lt;/a&gt; .  It's marked
&amp;quot;Legacy&amp;quot;, but I haven't seen anything as good or complete to replace
it.&lt;/p&gt;
&lt;p&gt;There are five top-level categories
on which you can evaluate any implementation.  Actual numeric scores for these
are hard to come by, since they don't all have units and measurement instruments
defined.  However, you can use subjective scores.  More importantly, these
topics focus the conversation around useful quality
attributes.&lt;/p&gt;
&lt;p&gt;Here are the five top-level
categories:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Need Satisfaction.  In short, does it
work?  Does it solve the problem in the first place?&lt;/li&gt;
&lt;li&gt;Performance.  Here is where the classical
memory and time considerations are evaluated.&lt;/li&gt;
&lt;li&gt;Maintenance.  How easy is it to
fix?&lt;/li&gt;
&lt;li&gt;Adaptive.  How easy is it to extend or
port?&lt;/li&gt;
&lt;li&gt;Organizational.  How expensive is it?  Do
we have the skills?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The SEI taxonomy
has 16 subcategories, enough to cover all the bases.  For me, this is the final
word on quality, and I haven't seen anything better than
this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understandability.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Under
&amp;quot;Maintenance&amp;quot;, there's a subcategory of &amp;quot;Understandability&amp;quot;, which includes four
lower-level metrics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Complexity&lt;/li&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Structuredness&lt;/li&gt;
&lt;li&gt;Readability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &amp;quot;Understanability&amp;quot;
group is so important that we need to pull it out and evaluate it by itself.
The SEI information directs us to a &amp;quot;&lt;a class="reference external" href="http://www.sei.cmu.edu/str/descriptions/mitmpm.html"&gt;Maintainability Index&lt;/a&gt; &amp;quot; technique that combines a
number of metrics.  Detailed values are a pain to gather because they involve
parsing the source code, something that isn't very quick or easy to do.&lt;/p&gt;
&lt;p&gt;On the other hand, an informal survey
of the source can be done using the following techniques.  These aren't the
official numbers, but they're a way to have a useful conversation about which
implementation is &amp;quot;better&amp;quot;.  They provide a workable definition of
&amp;quot;understandable&amp;quot; that -- to an extent -- is free from subjective complaints
about someone else's coding style.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Halstead Length = total number of
variable occurrences plus total number of method calls, operators, and (in
Python) function calls.  How long is the component, not in lines of code, but in
things the program represents and things the program does?&lt;/li&gt;
&lt;li&gt;Halstead Volume = number of
&lt;em&gt;distinct&lt;/em&gt;
variables plus
&lt;em&gt;distinct&lt;/em&gt;
methods, operators and functions.  Often a much smaller number than the length.
This is &amp;quot;volume&amp;quot; in the sense of how many distinct things do you have to keep in
your head to understand it; it's the brain volume tied up in working on the
program.&lt;/li&gt;
&lt;li&gt;McCabe Complexity = number of nested
&lt;strong&gt;if&lt;/strong&gt; ,
&lt;strong&gt;while&lt;/strong&gt;
and &lt;strong&gt;for&lt;/strong&gt;
statements.  In the case of Python
&lt;strong&gt;elif&lt;/strong&gt;
constructs, these count, also.  Statements at the &amp;quot;top-level&amp;quot; of a method or
function don't count, only the nested ones.  Yes, you can finesse this score to
zero with a lot of small methods, that would be the whole point.&lt;/li&gt;
&lt;li&gt;Total source lines of code.  If you want,
you can segregate comments from non-comments.  Python and Java programmers have
three categories: the Javadoc (or docstring) comments, the &amp;quot;other&amp;quot; comments, and
the remaining code.  The Javadoc (or docstring) comments have to be taken as
seriously as the code itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These can
be combined into a single score, but that defeats the purpose of looking at the
code and evaluating it based on the textual complexity (the Halstead metrics)
and the structural complexity (the McCabe)
metric.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Evils of If-Statements.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I find that my own
quick-and-dirty McCabe metric works well in evaluating complex.  I count
&lt;strong&gt;if&lt;/strong&gt; -statements.
In my experience, little good comes from
&lt;strong&gt;if&lt;/strong&gt; -statements.
Each one needs to be scrutinized carefully and justified as essential.&lt;/p&gt;
&lt;p&gt;Generally, every one of the cool
design patterns in the &lt;em&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt;
book can be replaced with an amazingly poor cluster of rotten, unmanageable
&lt;strong&gt;if&lt;/strong&gt; -statements.
In particular,
&lt;strong&gt;State&lt;/strong&gt; ,
&lt;strong&gt;Command&lt;/strong&gt;
and
&lt;strong&gt;Strategy&lt;/strong&gt;
are often bollixed up into a horrifying morass of
iffiness.&lt;/p&gt;
&lt;p&gt;Here's the
conversation:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customer&lt;/strong&gt; :
&amp;quot;Make it do 'X', not 'Y', in this
situation.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt; :
&amp;quot;What does that mean?  Why is this situation
unique?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customer&lt;/strong&gt; :
&amp;quot;That doesn't matter; there's no underlying meaning.  It's just an
&lt;strong&gt;if&lt;/strong&gt; -statement.&amp;quot;&lt;/p&gt;
&lt;p&gt;Everything
has meaning.  There's no such thing as &amp;quot;just an
&lt;strong&gt;if&lt;/strong&gt; -statement&amp;quot;.
Generally, the things we think of as &amp;quot;conditions&amp;quot; are not last-minute decisions
in the middle of an algorithm.  They are starting conditions that describe what
objects we should be created in the first place.  Most
&lt;strong&gt;if&lt;/strong&gt; -statements
belong in some sort of
&lt;strong&gt;Factory&lt;/strong&gt;
or
&lt;strong&gt;Builder&lt;/strong&gt; :
they have deep and pervasive meaning.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Hidden Costs of "Convenience"</title><link href="https://slott56.github.io/2006_12_12-hidden_costs_of_convenience.html" rel="alternate"></link><published>2006-12-12T16:19:00-05:00</published><updated>2006-12-12T16:19:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-12-12:/2006_12_12-hidden_costs_of_convenience.html</id><summary type="html">&lt;p&gt;This is an important topic.  I've blogged on the
layers issue before (&amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_10_20-layers_interfaces_and_mutability.html"&gt;Layers, Interfaces and Mutabilty&lt;/a&gt; &amp;quot;), and this
AJAX issue is a great additional
point.&lt;/p&gt;
&lt;p&gt;With depressing regularity I
also hear the complementary &amp;quot;stored procedure&amp;quot; question.  This question takes a
number of different forms, but they all mean the same …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an important topic.  I've blogged on the
layers issue before (&amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_10_20-layers_interfaces_and_mutability.html"&gt;Layers, Interfaces and Mutabilty&lt;/a&gt; &amp;quot;), and this
AJAX issue is a great additional
point.&lt;/p&gt;
&lt;p&gt;With depressing regularity I
also hear the complementary &amp;quot;stored procedure&amp;quot; question.  This question takes a
number of different forms, but they all mean the same thing.  Here are some
alternative formulations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Where should the &amp;quot;business logic&amp;quot; live?
Stored procedures or application code?&lt;/li&gt;
&lt;li&gt;What kinds of &amp;quot;business logic&amp;quot; are best
to encode in stored procedures?&lt;/li&gt;
&lt;li&gt;How can we make best use of evolving
stored procedures?&lt;/li&gt;
&lt;li&gt;How can we implement a &lt;a class="reference external" href="https://slott56.github.io/2006_10_11-absurdity_consistent_code_and_inconsistent_data_structures.html"&gt;common code base without a consistent data
model&lt;/a&gt; ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In essence the
question has a hidden assertion: Stored procedures are handy, but we need to
justify them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad Business.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stored procedures, like
AJAX, are an accident waiting to happen.  The ideal is that AJAX is pure
presentation and stored procedures are pure persistence.  As a practical matter,
bleed-through is inevitable.  As soon as the line is crossed, that piece of code
becomes a costly stumbling block that prevents change and
adaptation.&lt;/p&gt;
&lt;p&gt;When we bury business rules
in the front-end, we slow down the pace of change.  Even in a simple STRUTS
application, the biding between JSP and JavaBean makes some kinds of changes
more difficult than others.  If the JSP expands to include any business logic at
all, the changes to the business rules either spread between application and
presentation (doubling the cost), or we stop making changes to the presentation
because it's too complex to
change.&lt;/p&gt;
&lt;p&gt;When we bury business rules in
stored procedures, we also slow down the pace of change.  We are stopped from
making logical database changes because of the impact on our stored
procedures.&lt;/p&gt;
&lt;p&gt;The convenience items like
AJAX and stored procedures turn out to be bad business from IT's perspective.
While AJAX is fun for the users, stored procedures are invisible to the users.
Stored procedures are short-term fun with long-term costs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Worst-Case Scenario.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Think about this kind of
worst-case scenario.  Some non-thinker declares that the each person will have
home phone, work phone, mobile phone, fax and email, and that's the end of it.
One will be marked &amp;quot;preferred&amp;quot;.  This is clearly unsuitable for a lot of CRM
purposes because it ignores people who share email addresses, and the use of
instant messenger as a preferred
channel.&lt;/p&gt;
&lt;p&gt;The DB designer puts five (5)
fields in the database for communication channels; they write stored procedures
to create a person with five (5) points of contact, assuring that the email
address is the unique &amp;quot;natural key&amp;quot;.  The GUI designer lays out five fields and
assembles a bunch of widgets to validate the various data types and assure each
is unique.  The application developer validates each field before passing it to
a stored procedure, and assures that all five form a unique
combination.&lt;/p&gt;
&lt;p&gt;Clearly, everyone's wrong
about some nuance, but it's suddenly very difficult to make changes.  Each has
encapsulated a business assumption into code where it doesn't belong.&lt;/p&gt;
&lt;p&gt;Unit tests will likely work, since the
most common scenario for use lies at the intersection of the nuanced rules.
However, as soon as we make a change, we uncover problems.  Worst, of course,
the problems are not in our code, but in someone else's code, and we can't quite
pinpoint the problem.  Things just don't work
right.&lt;/p&gt;
&lt;p&gt;No one can disentangle this
without forcing a rewrite that eliminates features.  Who wants to eliminate
features?  If we're going eliminate features, we might was well just throw away
the whole GUI or Database (pick one).  Why do we have a rich GUI or Database
(pick one) if we're not going to make full use of every
feature?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Better Case.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A Better Case is for GUI
designers to make generic, reusable widgets.  The phrases &amp;quot;Application-neutral&amp;quot;
or &amp;quot;application-agnostic&amp;quot; are too weak.  They have to be openly antagonistic to
any particular application.  The power of HTML and SQL is that they are so
neutral as to be irritating.  In a similar way, we need to carefully partition
our application into layers which are loosely coupled and only reflect the truly
immutable features of that layer.&lt;/p&gt;
&lt;p&gt;The
persistence layer is focused on just making business entities persistent.  Other
features of the entity, like natural keys, are outside the database's realm.
Similarly, relationships have a low-level representation (as a link or foreign
key), but any other constraint (cardinality, optionality, etc.) isn't part of
persistence, but is a business rule that's bleeding through to the wrong
layer.&lt;/p&gt;
&lt;p&gt;The presentation layer makes the
business object visible, and little else.  While rich input validation is fun,
there are limits to what can be done meaningfully, and what is subject to change
without notice.  Data types (i.e., email address, telephone number) don't
change.  Other rules regarding uniqueness, identity, cardinality and even
optionality, aren't enduring features of the presentation.  They're business
relationships that can (and will)
change.&lt;/p&gt;
&lt;p&gt;AJAX and Stored Procedures both
have the potential to thwart change, making them costly.  The cost of adaptation
to new business requirements must be factored in to the design of every
layer.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>PyCon Presentation</title><link href="https://slott56.github.io/2006_12_02-pycon_presentation.html" rel="alternate"></link><published>2006-12-02T14:36:00-05:00</published><updated>2006-12-02T14:36:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-12-02:/2006_12_02-pycon_presentation.html</id><summary type="html">&lt;p&gt;I'm very excited to be giving a presentation at
PyCon '07.   A 30-minute slot is tough because the Star Schema can be confusing.
The coding is pretty transparent (IMO), but the background for why I had to do
this and places where it can be used are more interesting than …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm very excited to be giving a presentation at
PyCon '07.   A 30-minute slot is tough because the Star Schema can be confusing.
The coding is pretty transparent (IMO), but the background for why I had to do
this and places where it can be used are more interesting than the code itself.
However, it's about Python -- really -- not dimensional modeling design
patterns, so that helps to narrow the
focus.&lt;/p&gt;
&lt;p&gt;Decades ago, my employer had an
annual technical conference, and I presented papers every year on a variety of
subjects.   But that was relatively easy: the conference was open to any topic,
and the pool of potential presenters was very small.  I was one of a few dozen
employees that took the time to create a suitable
presentation.&lt;/p&gt;
&lt;p&gt;This is different.  The
pool is potentially much larger, the levels of expertise are much higher.  I
know that I'm a good speaker because I get invited back to speak again by people
who've heard me.  However, the technical depth a PyCon is
intimidating.&lt;/p&gt;
&lt;p&gt;I work for a services
firm.  Some of our customers are starting to smell the advantages of adopting
Open Source solutions.  At this point, our primary market is Large IT, with some
penetration into &amp;quot;SMB&amp;quot; (Small to Medium Businesses).  No one with revenues under
$2B can afford to talk to us for long.  These organizations tend to be dominated
by the Microsoft FUD message.  Older companies have grown out of the IBM FUD
message and embraced the new MS-FUD V3.0.  Open Source solutions are,
consequently, tainted.&lt;/p&gt;
&lt;p&gt;I'm hoping to
learn about Open Source adoption.  In particular, I'm looking a products which
my company should start learning about so that we can adopt the &amp;quot;Red Hat
Business Model&amp;quot; and offer support and customization.  If we identified only one
or two Open Source projects, made significant contributions, and landed support,
integration or customization work because of our support, that would give us a
first step down the road of a business model that has dramatic growth potential.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Layers, Interfaces and Mutability</title><link href="https://slott56.github.io/2006_10_20-layers_interfaces_and_mutability.html" rel="alternate"></link><published>2006-10-20T18:50:00-04:00</published><updated>2006-10-20T18:50:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-10-20:/2006_10_20-layers_interfaces_and_mutability.html</id><summary type="html">&lt;p&gt;Here's the full, minimally-edited
question:&lt;/p&gt;
&lt;p&gt;&amp;quot;We are having a debate about
the basic way the UI, Business Logic, and Data Access layers
communicate.&lt;/p&gt;
&lt;p&gt;My experience has been
that the UI talks to the BizLogic, and the BizLogic maps between itself and the
Data Access layer.. like
this:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;::&lt;/dt&gt;
&lt;dd&gt;UI -&amp;gt; BizLogic -&amp;gt; Data …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;Here's the full, minimally-edited
question:&lt;/p&gt;
&lt;p&gt;&amp;quot;We are having a debate about
the basic way the UI, Business Logic, and Data Access layers
communicate.&lt;/p&gt;
&lt;p&gt;My experience has been
that the UI talks to the BizLogic, and the BizLogic maps between itself and the
Data Access layer.. like
this:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;::&lt;/dt&gt;
&lt;dd&gt;UI -&amp;gt; BizLogic -&amp;gt; Data Access -&amp;gt; DB&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The debate is whether the UI should
see both the Data Access and the BizLogic, and the Data Access object references
the Biz Object.&lt;/p&gt;
&lt;p&gt;So instead
of&lt;/p&gt;
&lt;pre class="literal-block"&gt;
myBizObject.Save()
&lt;/pre&gt;
&lt;p&gt;you
have&lt;/p&gt;
&lt;pre class="literal-block"&gt;
DataAccess.Save(myBizObject)
&lt;/pre&gt;
&lt;p&gt;In my view
there are a few flaws with this approach, not the least being that the business
object cannot ask for another business object required for processing, since the
business layer does not know of the existence of the data
access.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What's the real problem?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We could look at this as
&amp;quot;how do the layer communicate?&amp;quot; but that's can become too broad.  It doesn't
focus on intent, but folds in technology choices, and allows us to wring our
hands over kinds of side issues.&lt;/p&gt;
&lt;p&gt;We
should look at much of what has been written about the &lt;a class="reference external" href="http://java.sun.com/blueprints/patterns/MVC.html"&gt;Model-View-Controller&lt;/a&gt;  (MVC) design pattern.
We'll return to this after looking at layers in
general.&lt;/p&gt;
&lt;p&gt;I think that it's helpful to
reframe the question as “What are the appropriate bindings between
layers?”  This allows us to focus on cohesive design within a layer
and bindings between layers.  For basics on this topic, see &lt;a class="reference external" href="http://www.acm.org/classics/may96/"&gt;On the Criteria
To Be Used in Decomposing Systems into Modules&lt;/a&gt; , by D. L. Parnas.
Additional terms, Coupling and Cohesion were introduced by Constantine and
Yourdon in Structured Design: Fundamentals of a Discipline of Computer Program
and Systems Design.  I like Binding instead of
Coupling.&lt;/p&gt;
&lt;p&gt;As we go forward, we’ll
have to further reframe the question again into “What is an appropriate
interface design, and how is it separated from the implementation?”
However, for now, we'll just look at the binding between
layers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Architectural Bindings.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Usage is bound to
UI.  We know that, and we want that.  We want the users to think of the
application as the UI and nothing more.  The supporting implementation is none
of their business.&lt;/p&gt;
&lt;p&gt;Ultimately, the only
thing that matters is the data.  This is an important point; there's additional
supporting material and links in &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_10_11-absurdity_consistent_code_and_inconsistent_data_structures.html"&gt;Absurdity? Consistent Code and Inconsistent Data
Structures&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;Between the UI
and the Data, there' s a lot of software.  We have “what”,
“how” and “where” (logical data model, processing and
network locations).  We want to strike a balanced solution to the binding
problem.  We want an appropriate level of binding: tight enough to assure
things work without tying up too many resources in endless layers of
meta-programming; loose enough that we can make changes without breaking too
much.&lt;/p&gt;
&lt;p&gt;I'm a fan of &lt;a class="reference external" href="https://slott56.github.io/2005_09_18-essay_14_mutability_analysis.html"&gt;Mutability Analysis&lt;/a&gt; ; let’s look at what
the potential mutations are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;UI changes should be isolated from the
processing.  There’s the essential processing and UI which guides a
human being through that processing.  We know those are independent.
However, there’s a lot of potential bleed-through here.  We’ll
return to this.&lt;/li&gt;
&lt;li&gt;Processing changes should be isolated from the
UI.  When we add details as part of a next release, there are some parts of
the UI where we want stability.&lt;/li&gt;
&lt;li&gt;Processing changes should be isolated from the
model.  Clearly, a change in process is pretty normal.  A change in
the data model, however, is less common.  Indeed, the principle reason we
make software changes is because the users need flexibility to handle their odd,
special cases.  However, a reasonably good data model may cover many
variations in processing needs.&lt;/li&gt;
&lt;li&gt;Data Model changes must be isolated from the
processing.  This is less common, but we will often add features to the
data model, but want the processing (and the UI on top of it) to remain
stable.  SQL, in fact, encourages this by allowing us to alter tables to
add features, and to alter indexes without breaking the processing (or the
UI).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In short, isolation is essential
to allowing flexibility.  We define an interface so that the implementation
is free to change.  We must explicitly separate interface from
implementation.&lt;/p&gt;
&lt;p&gt;Really, we're binding
one layer's implementation to another layer's interface.  This is the secret
sauce that allows our bindings to remain
flexible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technology Implications.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generally, we want
some immunity from technology changes, as well as data or processing
changes.  That’s why we often add a Data Access layer.  Its
purpose is to make the business logic immune to changes in the technology that
implements the data model.  Sadly, the interface to the data storage layer
isn’t completely standardized, so we create a Façade (a data access
layer) to wrap the variability up and isolate it.  It creates a relatively
fixed interface in spite of product
variability.&lt;/p&gt;
&lt;p&gt;If we use X-windows (or
Mac OS &lt;a class="reference external" href="http://developer.apple.com/cocoa/"&gt;Cocoa&lt;/a&gt; , or Java &lt;a class="reference external" href="http://java.sun.com/products/jfc/"&gt;SWING&lt;/a&gt; ,
or a browser), we can have immunity from the software which implements our
UI.  Folks don’t often pursue this as hotly as they pursue the data
access independence.  I’m not sure why, but many people are willing
to marry the MS-Windows proprietary UI but not marry SQL/Server. The
interface between UI and Processing isn’t treated with the same respect as
the interface between Processing and
Data.&lt;/p&gt;
&lt;p&gt;So, the Data Access layer is
really there to isolate processing from database technology.  It’s
not really part of our essential “who”, “what”,
“how” and “where” set of questions.  We feel the
need to define a relatively fixed interface because RDBMS implementations differ
in often significant ways; we don't want to suffer from differences among
proprietary interfaces.&lt;/p&gt;
&lt;p&gt;Further, we may
also have an Object-Relational mapping layer.  This sublayer is above the
data access layer, but below the rest of the processing layer.  It provides
the mappings between RDBMS and actual objects as used by the application.
This, too, is best looked at as a sublayer on part processing and not part of
the persistent RDBMS storage
model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Struts Example.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A good example of the
UI-Processing-Persistence separation is the implementation of &lt;a class="reference external" href="http://struts.apache.org/"&gt;Struts&lt;/a&gt; .  In
Struts, there is a separation among the layers, and a pleasant test to assure
that the separation has been implemented
properly.&lt;/p&gt;
&lt;p&gt;The Struts UI layer is built
with simple JSP's (read ASP if you don't know Java.)  The UI displays Java Beans
that may have been created by an Object-Relational mapper (and really live in
the database) or they may be containers of validation errors that were created
by the processing layer.  The UI doesn’t know and can't know; they're all
just beans.  It displays beans and produces beans from filled-in
forms.&lt;/p&gt;
&lt;p&gt;The Struts UI will have
considerable programming logic, but this is merely presentation gloss, not
substantial processing.  For example, pluralizing words, formatting dates and
numbers, handling variant form layouts or optional fields are all appropriate
ways to improve presentation without bleeding through into providing real
processing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Django Example.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a second example, we
can look at &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;  framework.  They distinguish between a
number of layers.  The low-level RDBMS is wrapped with an access layer (the
Python DB-API) and a Django Object-Relational layer to define the &amp;quot;Model&amp;quot;.  A
web request and response is handled by a &amp;quot;View&amp;quot; which implements the processing.
Most views will use Django templates to present the final web content.&lt;/p&gt;
&lt;p&gt;The template doesn't have access to
any real functionality, by design.  Unlike Java JSP's (and ASP's), Django
templates use a special-purpose template language, not the full Python (or Java
or VB) programming language.  By limiting the templates to just simple
alternatives, iteration and object navigation, any &amp;quot;real&amp;quot; processing has to be
put into the view layer.  Since the UI can't &amp;quot;do&amp;quot; anything, the whole question
of layering is moot.&lt;/p&gt;
&lt;p&gt;Just to complete
the picture, Django implement the &amp;quot;Control&amp;quot; of MVC in the URL dispatcher.  It's
a very elegant solution.  Struts has to coexist with the Servlet API's.  Django,
on the other hand, doesn't need to make this legacy interface visible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommendation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So,
what should the UI bind to?  Should it bind to Processing, or can it bind
to Data Access?&lt;/p&gt;
&lt;p&gt;The answer was hinted
at above, when I mentioned “bleed-through”.  When the
processing details bleed up into the UI, this breaks the isolation rules.
Here's the acid test:  we know the isolation rules are broken because we
can’t just change the implementation of the business processing without
also locating the bleed-through cases and fixing the
UI.&lt;/p&gt;
&lt;p&gt;For
example, the business layer is supposed to validate some user inputs.
However, the UI developer wrote a JSP (or Ajax or ASP) thingy that did some of
the validation.  They were creating a “rich” user interface.
When the business rule changes, however, we find that the JSP (or Ajax or ASP)
interface component isn’t doing the right validation any more.
That’s &lt;strong&gt;A Bad Thing&lt;/strong&gt; ™, and a direct consequence of
processing rules being implemented -- whole or in part -- in the UI
layer.&lt;/p&gt;
&lt;p&gt;When too much processing bleeds
through into the UI, you have – in effect -- created a very complex
interface between the UI and the Processing layer.  The interface will
include the obvious Processing hooks used by the UI, but will also include the
Data Access hooks.  It’s much better to create a narrow interface of
the relevant Processing and nothing more.  Bundling the Data Access as part of
the Processing interface is adding complexity with no real
value.&lt;/p&gt;
&lt;p&gt;You break your isolation rules
when the UI looks directly at the Data Access layer.  Specifically, a data
model change now leads directly to a UI change in addition to the expected
processing change.  This ripple effect of a data model change is
&lt;strong&gt;A Bad Thing&lt;/strong&gt; ™, and it's the exact thing we were
trying to avoid when we broke things into layers in the first
place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequences.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One
of the consequences of this is the clear isolation of
&lt;strong&gt;all&lt;/strong&gt;
processing into a processing layer.  The UI becomes thinner, and the
database can also become thinner.&lt;/p&gt;
&lt;p&gt;The UI merely displays beans.  Any
“richness” to the interface involves close design cooperation
between the UI folks and the business layer folks to keep the UI pure and
simple.  This cooperation is a necessary part of designing good software.
Too often, the UI folks work around this because the processing folks are slow
to respond to UI requests.&lt;/p&gt;
&lt;p&gt;Similarly,
the data base becomes flat table storage, and all processing (triggers, stored
procedures, everything) moves into a processing layer where it is easier to
control and reuse.  The hard-core DBA's balk at this, and claim that their layer
is the ideal place for processing.  Sometimes they'll try to qualify this and
distinguish &amp;quot;stable&amp;quot; processing from &amp;quot;mutable&amp;quot; processing.  Generally,
processing in the database only serves to muddy the distinction between data and
processing.&lt;/p&gt;
&lt;p&gt;The &amp;quot;stored procedures
involve less overhead&amp;quot; argument isn't often helpful, because it requires a
number of assumptions.  Specifically, a stored procedure in the database layer
is faster than the processing layer only when you demand all of your processing
be done with low-level SQL statements.  If, on the other hand, we rethink the
processing design to use objects in memory, we can often work out ways to do
much less SQL.  And, if we really want to push the envelope, we can resort to
ETL processing outside the
RDBMS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Root Causes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It looks like there are two
causes for this question, both of which need to be addressed in order to keep
separation between layers.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;UI layer people want to provide richer
functionality, but processing can't or won't provide the necessary
API's.&lt;/li&gt;
&lt;li&gt;Processing layer people have pushed some
processing into the RDBMS, blurring the line, and making it unclear where the
processing is in the first place.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If UI
layer developers want more API's, the processing layer folks should be ready,
willing and able to provide them.  This requires an adaptable style of work,
with fairly high levels of cooperation.  They need to be on the same team,
working for the same manager.  If it takes more than spinning around in your
chair to engage between teams, then the UI folks will bypass the processing
folks to get what they think they
need.&lt;/p&gt;
&lt;p&gt;It's hard to foresee the entire
spectrum of UI needs.  In writing some processing logic, you may think you
instantiated all the relevant beans.  But during a review of the functionality,
someone (user or developer) realized that one more factoid would be helpful.
When it isn't in the available beans, the UI developer has two choices: wait
around for the beans to be upgraded, or go straight to the database and do the
additional query.  What the UI developer does next is purely about
organizational culture.&lt;/p&gt;
&lt;p&gt;If processing
is pushed into the RDBMS, then the horse is out, and locking the barn door seems
a bit silly.  You can insist that all UI requests go through the Processing
layer, but everyone knows that the Processing API simply calls an RDBMS
procedure through the Access layer.  It looks silly because it is.  However,
since the Processing was split up into multiple locations, a single, unified API
must be defined to preserve the intent of the Processing-Database interface and
allow implementation changes without breakage.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>Absurdity? Consistent Code and Inconsistent Data Structures</title><link href="https://slott56.github.io/2006_10_11-absurdity_consistent_code_and_inconsistent_data_structures.html" rel="alternate"></link><published>2006-10-11T16:27:00-04:00</published><updated>2006-10-11T16:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-10-11:/2006_10_11-absurdity_consistent_code_and_inconsistent_data_structures.html</id><summary type="html">&lt;p&gt;First, see &amp;quot;&lt;a class="reference external" href="http://www.tbray.org/ongoing/When/200x/2006/07/28/Open-Data"&gt;OSCON - Open Data&lt;/a&gt; &amp;quot; by Tim Bray, then see &amp;quot;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2006/07/set_my_data_fre.html"&gt;Set My Data Free&lt;/a&gt; &amp;quot; in
Kontrawize.&lt;/p&gt;
&lt;p&gt;Here are some quotes &amp;quot;At
the end of the day, information outlives software and transcends software and is
more valuable than software.&amp;quot;  &amp;quot;Data matters. It shouldn't be an afterthought.
It will outlive your applications …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, see &amp;quot;&lt;a class="reference external" href="http://www.tbray.org/ongoing/When/200x/2006/07/28/Open-Data"&gt;OSCON - Open Data&lt;/a&gt; &amp;quot; by Tim Bray, then see &amp;quot;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2006/07/set_my_data_fre.html"&gt;Set My Data Free&lt;/a&gt; &amp;quot; in
Kontrawize.&lt;/p&gt;
&lt;p&gt;Here are some quotes &amp;quot;At
the end of the day, information outlives software and transcends software and is
more valuable than software.&amp;quot;  &amp;quot;Data matters. It shouldn't be an afterthought.
It will outlive your applications.&amp;quot;&lt;/p&gt;
&lt;p&gt;Hopefully, these are clear enough to
show where this is headed.  However, since I was asked, I'll press on
anyway.&lt;/p&gt;
&lt;p&gt;So that we can start somewhere,
let's start with the &lt;a class="reference external" href="http://www.zifa.com/"&gt;Zachman Framework&lt;/a&gt; .  We see several ways to look
at IT.  I'll paraphrase slightly.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data (&amp;quot;what&amp;quot;)&lt;/li&gt;
&lt;li&gt;Processing (&amp;quot;how&amp;quot;)&lt;/li&gt;
&lt;li&gt;Network (&amp;quot;where&amp;quot;)&lt;/li&gt;
&lt;li&gt;Users (&amp;quot;who&amp;quot;)&lt;/li&gt;
&lt;li&gt;Schedule (&amp;quot;when&amp;quot;)&lt;/li&gt;
&lt;li&gt;Value (&amp;quot;why&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data is first.  Why?  Because
it's the only thing that matters.&lt;/p&gt;
&lt;p&gt;Do
I have any evidence of this, outside the Zachman framework?  Here's some other
anecdotal evidence: &amp;quot;Data Processing&amp;quot;, &amp;quot;Data Structures and Algorithms&amp;quot;.  Data's
always first.&lt;/p&gt;
&lt;p&gt;Now, let's look at some
real evidence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Real Evidence.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, let's look at any
SDLC methodology.  They have big sections on &amp;quot;data conversion&amp;quot;.  Why?&lt;/p&gt;
&lt;p&gt;Let's think.  We're writing software
to apply new (or different) processing to our data.  We often want to preserve
our data, but not our legacy processing.  Indeed, preserving data so important,
that it becomes a first-class goal in a methodology.  Preserving functionality
(through analysis and reverse engineering) may or may not be important.  It is
rarely a huge, visible part of any
methodology.&lt;/p&gt;
&lt;p&gt;Second, let's look at
non-IT people.  They preserve files, documents, and content very carefully.  And
they process this precious data with the most slip-shod manual steps.  People
will have massive spreadsheets on the shared &amp;quot;H:&amp;quot; drive, which anyone can touch.
Why allow other members of the department to touch it?  Because processing is
just processing.  Data, however, is the reason the organization
exists.&lt;/p&gt;
&lt;p&gt;Third, let's look outside IT at
our regulatory context.  The IRS doesn't ask how you deposited the money, or how
you signed the receipts to spend the money.  The IRS wants to see the records of
the transactions, not the process for executing the transactions.  You can tell
the auditor that you turned the clipboard around three times, clicked the pen
twice, and signed with a single flourish.  They want to see the receipt: the
thing, the data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Model Variants.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A variant data model with
a common code base has a number of serious
issues.&lt;/p&gt;
&lt;p&gt;First -- and foremost -- it
puts processing ahead of data.  Therefore, it's just the wrong thing to do.  The
processing comes and goes, but the data endures forever.  So, a common data
model with variant processing is the normal case.  That's why we have software
version numbers in two (or more) parts.  Often, version 3.2 has a data structure
which is compatible with version 3.3, but incompatible with version 4.1.  The
processing changes, but we advertise a consistent data
model.&lt;/p&gt;
&lt;p&gt;Second -- and this is weird --
how did the data wind up different?  Why aren't both data models the same?  Why
does one have additional data, or why is one missing some data?  Does this
reflect divergent evolution?  What changed?  Or, more important, what failed to
change?&lt;/p&gt;
&lt;p&gt;In essence, the questioner
wants software version 3.2 and 4.1 to be the same code base.  This is clearly
silly.  Therefore, there must have been another, deeper
question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Options and Extensions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I couldn't make sense
out of the question, so I asked what was really going on.  The response -- while
murky -- appears to indicate that there are two more-or-less parallel
environments, which differ, slightly, in structure.  This smells like an
optional feature which is used in one environment, but not used in another
environment.&lt;/p&gt;
&lt;p&gt;On one hand we have two
installations of some software: one with and one without an optional feature.
On the other hand we have &amp;quot;common code base without a common data model&amp;quot;.  The
&amp;quot;no common data model&amp;quot; is absurd, and almost incomprehensible.  The &amp;quot;optional
feature&amp;quot;, however, is a much more common, and tractable problem.&lt;/p&gt;
&lt;p&gt;Indeed, the root cause of the question
seems to stem from inflating an &amp;quot;optional feature&amp;quot; into &amp;quot;no common data model&amp;quot;.
It appears as if the minor variation made the two structures appear to be
irreconcilably different.  The molehill of &amp;quot;one optional table&amp;quot; grew to the
mountain of &amp;quot;no common data
model&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Real Question.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The real request, then,
appears to be this: discuss 'a common code base with an optional table' .  Or,
phrased as a question: &amp;quot;how do I cope with an optional
table?&amp;quot;&lt;/p&gt;
&lt;p&gt;Databases are full of optional
features like indexes, triggers and constraints.  These can be added or deleted
without any change to a working application program.  Tables and columns,
however, are different: they must exist for our programs to bind properly.  So,
we have two flavors of optionality in RDBMS world: truly optional, and
present-but-not-used optional.&lt;/p&gt;
&lt;p&gt;Optional
features are a touchy subject.  How does the software know that something is
optional?  Clearly, the software must have some kind of configuration
information.  Often, these configuration options are poorly chosen.  In the case
where a single optional table turned into &amp;quot;no common data model&amp;quot;, I have
suspicions that the configuration of optional features will be equally
confusing.&lt;/p&gt;
&lt;p&gt;There are several
steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't turn an insignificant optional feature
into a &amp;quot;no common data model&amp;quot; situation.  Inflating the problem made it
insoluble.  Please try to stick to specifics wherever possible.  In general,
don't generalize.&lt;/li&gt;
&lt;li&gt;If a table is optional, then it can be present
but empty.  A similar situation applies to columns: it can be present, but
filled with NULL's.&lt;/li&gt;
&lt;li&gt;Choose a simple design for configuration.
PL/SQL can't rely on environment variables or command-line parameters.
Therefore, there must be an RDBMS table with configuration options.  Or a
wrapper program parses environment and command-line information and passes this
in as parameters to a &amp;quot;main&amp;quot; PL/SQL procedure.&lt;/li&gt;
&lt;li&gt;Stop coding.  If code comes first, you're
probably doing the wrong thing.  Data comes first.  Understand the data
completely before doing any coding at all.  Get the data model completely
correct and consistent before doing any coding of any kind.  If you feel
management &amp;quot;pressure&amp;quot; to &amp;quot;produce&amp;quot; something, stop anyway.  This thing you're
describing as management &amp;quot;pressure&amp;quot; is entirely your own response to your
environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Stop coding and repeat
after me:  &amp;quot;I can't code until I understand all the data.&amp;quot;&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Why SOA is DOA in some organizations</title><link href="https://slott56.github.io/2006_09_30-why_soa_is_doa_in_some_organizations.html" rel="alternate"></link><published>2006-09-30T03:09:00-04:00</published><updated>2006-09-30T03:09:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-09-30:/2006_09_30-why_soa_is_doa_in_some_organizations.html</id><summary type="html">&lt;p&gt;&amp;quot;Here are the exact words from the client when I
suggested using the &amp;quot;official calendar&amp;quot;: I’m aware of other systems having
tables for Holidays but I don’t know that we can piggy back off any of
them (not aware they are publicly available). Besides, I’d rather we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;Here are the exact words from the client when I
suggested using the &amp;quot;official calendar&amp;quot;: I’m aware of other systems having
tables for Holidays but I don’t know that we can piggy back off any of
them (not aware they are publicly available). Besides, I’d rather we have
better control over our own destiny than relying on someone else. As far as
Month End is concerned, we have unique needs that only system x might operate in
a similar fashion but that too is user
entered&amp;quot;&lt;/p&gt;
&lt;p&gt;This came up in a discussion
of how to find the &amp;quot;first business day&amp;quot; of a month.  Clearly, using the RDBMS
calendar functions to find the first day of the month is completely wrong, since
it doesn't account for legal holidays in any form.    So, the approach suggested
was to add tables and programming logic to -- essentially -- approximate the
calendar information already available in the General
Ledger.&lt;/p&gt;
&lt;p&gt;The very idea of reuse was a
non-starter.  This response characterizes the impassible barrier to SOA:
&amp;quot;I’d rather we have better control over our own destiny than relying on
someone else&amp;quot;.&lt;/p&gt;
&lt;p&gt;Worse still is the idea
that the &amp;quot;user-entered&amp;quot; business calendar (the one actually used by the
business) isn't appropriate, and an algorithmic approximation -- in spite of the
inevitable errors -- is somehow better.  It's almost as if the official business
calendar is not trustworthy because it is tweaked by accountants to get the
number of business days and holidays to balance in each
period.&lt;/p&gt;
&lt;p&gt;The simple idea of reuse is
lost in the politics of who controls who's fate.  Does anyone else find this
behavior fringing on the criminal?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>The Browser as OS? Perhaps Not</title><link href="https://slott56.github.io/2006_09_23-the_browser_as_os_perhaps_not.html" rel="alternate"></link><published>2006-09-23T15:02:00-04:00</published><updated>2006-09-23T15:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-09-23:/2006_09_23-the_browser_as_os_perhaps_not.html</id><summary type="html">&lt;p&gt;While &amp;quot;Browser as OS&amp;quot; is what
&lt;em&gt;appears&lt;/em&gt;
to be happening.  The browser is the front-end for many applications.  Even in
the Ajax case, however, the browser is only one piece of the application, and
the browser isn't relevant on the server
side.&lt;/p&gt;
&lt;p&gt;The important point that is
missed in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While &amp;quot;Browser as OS&amp;quot; is what
&lt;em&gt;appears&lt;/em&gt;
to be happening.  The browser is the front-end for many applications.  Even in
the Ajax case, however, the browser is only one piece of the application, and
the browser isn't relevant on the server
side.&lt;/p&gt;
&lt;p&gt;The important point that is
missed in the browser wars is that the browser is only the top-most layer in a
technology stack that is getting taller.&lt;/p&gt;
&lt;p&gt;Look at the latest fad:
virtualization.  Here's the layers in our &amp;quot;platform&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Browser&lt;/li&gt;
&lt;li&gt;&amp;quot;OS&amp;quot;&lt;/li&gt;
&lt;li&gt;Virtualization Engine&lt;/li&gt;
&lt;li&gt;BIOS, ROM's and ASIC's&lt;/li&gt;
&lt;li&gt;Hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we have OS's sitting on the
virtualization engine, we make the OS more flexible and portable.  Similarly, if
we have platform-neutral browser, we make the browser portable.  Further, if we
have a browser-neutral application, our application is more
portable.&lt;/p&gt;
&lt;p&gt;While Rapoza's point it good,
it conflates the entire technology stack into a single term, &amp;quot;OS&amp;quot;, which isn't a
very helpful thing to do.  It misses the point that &amp;quot;the OS&amp;quot; isn't monolithic,
and changes to this technology stack are occurring in many places.&lt;/p&gt;
&lt;p&gt;If, however, we write an application
that depends on a browser, and that browser is portable enough to meet our
objectives, we're happy.  If that browser isn't portable enough, then we're
forced into multi-browser compatibility, and all the ugly hacks entailed by
that.  However, in either case, we're divorced from the rest of the technology
stack.  That's the most important part of this: browsers give us a portable
presentation layer.&lt;/p&gt;
&lt;p&gt;Note that the thing
we call &amp;quot;Linux&amp;quot; is really GNU/Linux, and can be decomposed into the Linux
kernel, and the rest of the GNU drivers, file system, commands and utilities.
Even the middle bit of our technology stack has
layers.&lt;/p&gt;
&lt;p&gt;The browser is certainly not
the new OS.  It's the long-sought-after standard presentation tier of an OS.
For years, we've wanted a standard presentation interface, and it's finally
arrived.  The previous &amp;quot;standard&amp;quot; presentation interfaces have included Curses,
CICS, various Forms API's.  Even the X-Window system promised a &amp;quot;standard&amp;quot;
presentation layer.&lt;/p&gt;
&lt;p&gt;All of the previous
presentation tiers struck the compromise between hardware-feature-specific and
portable by bowing to the vendor's hardware features.  Each character-mode
terminal or X server had vendor-specific features and extensions.  Now, however,
the browser swings the compromise the other way, providing a minimal interface
that all hardware can support
successfully.&lt;/p&gt;
&lt;p&gt;The browser isn't the new
OS.  The browser is the new, standard presentation layer.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry><entry><title>Faerie Dust™ - Part 2</title><link href="https://slott56.github.io/2006_09_06-faerie_dusttm_part_2.html" rel="alternate"></link><published>2006-09-06T00:42:00-04:00</published><updated>2006-09-06T00:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-09-06:/2006_09_06-faerie_dusttm_part_2.html</id><summary type="html">&lt;p&gt;Here's another symptom of a
&lt;strong&gt;Request for Faerie Dust&lt;/strong&gt; ™:&lt;/p&gt;
&lt;p&gt;A
proposal that includes (1) analysis, (2) proof-of-concept, and (3) a plan for a
solution.&lt;/p&gt;
&lt;p&gt;Sounds sensible, doesn't it?
Study it, prove that you can solve it, and write the complete plan to solve
it.&lt;/p&gt;
&lt;p&gt;Sounded sensible to me, until I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's another symptom of a
&lt;strong&gt;Request for Faerie Dust&lt;/strong&gt; ™:&lt;/p&gt;
&lt;p&gt;A
proposal that includes (1) analysis, (2) proof-of-concept, and (3) a plan for a
solution.&lt;/p&gt;
&lt;p&gt;Sounds sensible, doesn't it?
Study it, prove that you can solve it, and write the complete plan to solve
it.&lt;/p&gt;
&lt;p&gt;Sounded sensible to me, until I had
to write the plan.&lt;/p&gt;
&lt;p&gt;Let's say we spend 3
weeks meeting the users, figuring out what's wrong, brainstorming root causes.
What, then, will the problem turn out to be?  And what, precisely are we
supposed to propose
&lt;em&gt;now&lt;/em&gt;
before having actually done the
analysis?&lt;/p&gt;
&lt;p&gt;Before we do the analysis, we
can't rationally plan a POC or even set a budget for a POC.  Indeed, we can't
even be sure that a POC is
needed.&lt;/p&gt;
&lt;p&gt;Unless -- and this is my thesis
-- the problem is already firmly in someone's mind, and they want me to sprinkle
Faerie Dust on the known problem to make it go
away.&lt;/p&gt;
&lt;p&gt;I suspect that any change that's
outside the box will be unacceptable.  For example, it is most likely that their
training is inadequate, and some of their content management practices aren't
quite right.  Their staff can't find things in the knowledge repository because
the titles, names or index keywords aren't what people think they should be.
However, they want Faerie Dust sprinkled on Search to make it &amp;quot;more
effective&amp;quot;.&lt;/p&gt;
&lt;p&gt;Clearly, they expect the
analysis to turn up problems with search.  The RFP listed a bunch of candidate
suggestions for improvements, most of which were performance-related -- i.e.,
speed up search.&lt;/p&gt;
&lt;p&gt;The good news is that
some of the candidate suggestions for improvements were organizational.  In this
case, the POC isn't purely technical, and will require scheduling people like
information designers, authors, trainers or users.  How do we propose that work?&lt;/p&gt;
&lt;p&gt;And how do we know -- without doing
the analysis -- what we
&lt;em&gt;are&lt;/em&gt;
proposing for the POC?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>A New Architecture Involves Ignorance</title><link href="https://slott56.github.io/2006_08_22-a_new_architecture_involves_ignorance.html" rel="alternate"></link><published>2006-08-22T17:07:00-04:00</published><updated>2006-08-22T17:07:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-22:/2006_08_22-a_new_architecture_involves_ignorance.html</id><summary type="html">&lt;p&gt;Without mentioning Armour's
&lt;em&gt;The Laws of Software Process: A New Model for the Production and Management of Software&lt;/em&gt;  (which includes the Five Orders of
Ignorance, quoted by Paul Freedman in &amp;quot;&lt;a class="reference external" href="http://www.computer.org/portal/site/software/menuitem.538c87f5131e26244955a4108bcd45f3/index.jsp?&amp;amp;pName=software_level1&amp;amp;path=software/bookshelf/2005&amp;amp;file=2005s1fre.xml&amp;amp;xsl=article.xsl"&gt;Uncovering Ignorance in Software Development&lt;/a&gt; &amp;quot;),
Purdy has hit the nail on the head regarding gestation of
architectures.&lt;/p&gt;
&lt;p&gt;Is Gestation overhead …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Without mentioning Armour's
&lt;em&gt;The Laws of Software Process: A New Model for the Production and Management of Software&lt;/em&gt;  (which includes the Five Orders of
Ignorance, quoted by Paul Freedman in &amp;quot;&lt;a class="reference external" href="http://www.computer.org/portal/site/software/menuitem.538c87f5131e26244955a4108bcd45f3/index.jsp?&amp;amp;pName=software_level1&amp;amp;path=software/bookshelf/2005&amp;amp;file=2005s1fre.xml&amp;amp;xsl=article.xsl"&gt;Uncovering Ignorance in Software Development&lt;/a&gt; &amp;quot;),
Purdy has hit the nail on the head regarding gestation of
architectures.&lt;/p&gt;
&lt;p&gt;Is Gestation overhead?
Is it a mistake?  How do we budget for it?  What, exactly, is
it?&lt;/p&gt;
&lt;p&gt;Let's compare.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Zero order ignorance: Lack of ignorance&lt;/strong&gt; .  Purdy describes this as &amp;quot;the more
one understands a problem, the more likely one is to precisely predict its
implementation cost in terms of time&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;First order ignorance: Lack of knowledge&lt;/strong&gt; .  This is manifested by the
distinction Purdy makes: &amp;quot;Some implementation unknowns are at most minor
speed-bumps, while others can be major project de-railers.&amp;quot;  If all you need is
some additional knowledge, it's a speed-bump.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Second order ignorance: Lack of awareness&lt;/strong&gt; ... You are unaware that you have
first order ignorance.  Purdy notes that &amp;quot;architectural timeline slippage could
be of completely off-the-scale proportions&amp;quot;.  Clearly, if you aren't aware of
your ignorance, you have this off-the-scale phenomena of trying all kinds of
things just to discover what you don't know.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Third order ignorance: Lack of process&lt;/strong&gt; ... You don’t know how to
discover ignorance.  Purdy reminds us that &amp;quot;An application architecture is not
fully gestated until the architect can visualize the implementation, and explain
the architecture to the implementation team clearly enough that they can
visualize the implementation.&amp;quot;  In short, you need to embody the management of
ignorance in your software development process, expecting that you will have
awareness problems somewhere along the way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fourth order ignorance: Lack of ignorance about the orders of ignorance.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've tried (and failed)
to lift this situation up to customers for just about every project I've been
involved in since people started calling me an architect in the
mid-90's.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;War Stories.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've tried to put in a
project phase for &amp;quot;validating the architecture&amp;quot; or something similar.  I would
try to allocate time to build skills in the processes, technology, management
and governance issues.&lt;/p&gt;
&lt;p&gt;In one case,
they had already bought everything, and felt that their DBA would somehow handle
all of the learning.  I wasn't sure when or how, since we hadn't written the
application software.  We would be -- essentially -- learning as we went.  We'd
originally planned to use one set of tools, and then upgraded to the next set of
tools, hoping that everything would still be just as easy to develop and manage.
Sadly, the toolset was immature, and things didn't go well.  Worse, the
specifications were very focused on a character-mode interface (it was '95), but
the tools were GUI tools.  Everyone's first-order ignorance of using the tools
ground the project to a halt.&lt;/p&gt;
&lt;p&gt;In one
case, there just wasn't time to shake out an architecture.  The customer
demanded (repeatedly) that I produce a reliable, definite, indisputable
architecture from thin air.  They wanted to talk about L2 cache and memory bus
options.  I wanted to get a half-dozen servers and a storage array up and
running ASAP so we could start building a web environment.  The customer got
into a shoving match with the IBM representative because the customer wanted
just one Ethernet interface in each server and couldn't see paying for two.  The
whole &amp;quot;standard configuration&amp;quot; meant nothing -- each box had to be customized.
Eventually, common-sense prevailed and we talked them into commodity servers.&lt;/p&gt;
&lt;p&gt;[As an aside, their CEO had to tell
their CIO to stop badgering me.  The CIO kept repeating the phrase, &amp;quot;I expected
you to give me a recommendation.&amp;quot;  And I kept saying &amp;quot;I'm recommending a
half-dozen servers and a storage array.&amp;quot;  The CIO would claim that it was too
breezy and informal, and he expected a recommendation, and around we went.  More
than once I asked the CIO what else he wanted, and we would begin at the &amp;quot;I
expected you to give me a recommendation&amp;quot; part again.
]&lt;/p&gt;
&lt;p&gt;Since the architecture was done in a
vacuum, when the software began to arrive we learned that we didn't really have
everything under control.  We had second-order ignorance problems getting a very
complex web application built based on use cases that were little more than
titles.  Some of the use cases were performance-critical, but without solid
volume and throughput information, we could only guess what was going to happen
in production.&lt;/p&gt;
&lt;p&gt;In another case, the
client insisted that their IT department did this &amp;quot;all the time.&amp;quot;  Sadly, that's
an example of fourth-order ignorance which masks some obvious third-order
ignorance.  The IT department didn't do this exact thing &amp;quot;all the time&amp;quot;.  No one
had a process for gathering the required awareness and knowledge.  The hubris of
claiming that it was done &amp;quot;all the time&amp;quot; lead to a schedule which presumed a
90-day hardware acquire, setup, install, test, secure, and transition to
operations.  Followed immediately by software installation, testing and
production roll-out.  Clearly, if there was anything we were unaware of, the
whole house of cards would
collapse.&lt;/p&gt;
&lt;p&gt;Was anyone aware that the
RDBMS interfaces might not be suitable for high-volume data warehouse transfers?
Was anyone aware that we needed to compare export-FTP-import and
instance-to-instance copies?&lt;/p&gt;
&lt;p&gt;Worse,
how could anyone be aware that business rules might blow up from 100 rows to
9,000 rows?  I couldn't believe it, and didn't even know that users could
concoct 9,000 business rules.  I couldn't imagine putting additional time in the
plan for that kind of thing.  The software, of course, didn't run very
effectively when applying 9,000 more-or-less random rules to the input.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Managing Ignorance.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gestation is a good way
to manage ignorance.  If everything isn't rock-solid and well-understood by the
developers, don't plan on getting anything done by a given due
date.&lt;/p&gt;
&lt;p&gt;But how can we get started if we
need to understand &amp;quot;everything&amp;quot; before starting?  Excellent
conundrum.&lt;/p&gt;
&lt;p&gt;Well... actually, it's only
a conundrum if we conflate everything that is knowable into one unstructured
mass of facts.  Really, we have a series of steps we have to ascend from
business ignorance, through application ignorance to architectural ignorance.
In principle, we want to know the business processing and know the application
before we select an
architecture.&lt;/p&gt;
&lt;p&gt;Purdy's advice gives a
way to structure the work: &amp;quot;get the gestation on the hard architectural problems
started well before you need to nail down a timeline&amp;quot;.  In short, guess at what
the hard architectural problems are likely to be.  This is a fourth-order
solution; it creates a process (managing third-order ignorance).  This start
early approach will turn up second-order ignorance (awareness) gaps before they
derail a project.&lt;/p&gt;
&lt;p&gt;The fantasy is that
someone conceives of software, begins a project, collects requirements and gives
those requirements to the architect.  We see it in RFP's all the time.  My war
stories above reflect that fantasy.&lt;/p&gt;
&lt;p&gt;As a practical matter, we can do
something more proactive.  For in-house development, nothing is a surprise.  The
users, and the IT folks
&lt;em&gt;are&lt;/em&gt;
talking, and the architects can be engaged in this conversation.  In some
organizations, this conversation is made difficult by charge-back accounting,
but everyone knows how to sand-bag the charge-backs and accumulate enough time
to hold forward-looking conversations.  This is a kind of 3rd-order solution;
it's an informal process (hated by the controllers, but essential for success)
that hopes to prevent 2nd-order ignorance from derailing a
project.&lt;/p&gt;
&lt;p&gt;For out-of-house developers
(like me) this is much tougher to do.  One approach is to pick a technology and
hope our customers ask for it.  There aren't too many bases to cover (.Net,
J2EE, for example) and as long we have deep expertise, this can work out.
However, our customers rarely have the same depth (or experience) we do, they
often insist on something unique, essentially forcing 2nd-order ignorance on us.
We can decline the work, hope for the best, or try to educate the customer on
the value of waiting -- investing in risk
reduction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Bottom Line.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Until we are aware of all the
knowledge we need, we can't commit to a timeline.   If we recognize that a
gestation period is required for all architectural change, how do we pay for
this?  What is the value of
gestation?&lt;/p&gt;
&lt;p&gt;We can monetize gestation.
The dollar value is measured in risk dollars.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;No Gestation&lt;/strong&gt; .  We'll need a huge risk budget to
work around 2nd-order ignorance.  Indeed, Purdy's lesson learned is that we are
likely to wind up in a situation where no amount of money can save the
project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gestation&lt;/strong&gt; .  Eliminates risk of missing
deadlines and risk having to spend more money to resolve 2nd-order ignorance.
Because &amp;quot;rushing the architectural process will exponentially increase the
likelihood of project failure,&amp;quot; all the money we spend on Gestation has a
handsome return in predictability, risk reduction, time to market, and all the
benefits we want from a predictable software
process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially, every proposal
for work needs to include &amp;quot;architecture risk reduction.&amp;quot;  This is a more
palatable phrase than &amp;quot;validating the architecture.&amp;quot;&lt;/p&gt;
&lt;p&gt;Doing a &amp;quot;validation&amp;quot; or a &amp;quot;proof of
concept&amp;quot; may appear silly when planners have already selected the architecture.
Indeed, I had a customer insist that I write a test plan for Oracle's backup and
recovery.  What -- precisely -- am I testing?  And if it fails the test, what
does that do to the product they already purchased, installed, and built the
application around?&lt;/p&gt;
&lt;p&gt;Proposing a &amp;quot;risk
reduction&amp;quot; (or &amp;quot;due diligence&amp;quot;) to locate sources of 2nd-order ignorance, may
seem like good business.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Meeting The Customer's Expectation (Revised)</title><link href="https://slott56.github.io/2006_08_20-meeting_the_customers_expectation_revised.html" rel="alternate"></link><published>2006-08-20T15:26:00-04:00</published><updated>2006-08-20T15:26:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-20:/2006_08_20-meeting_the_customers_expectation_revised.html</id><summary type="html">&lt;p&gt;The customer -- usually someone from IT -- has
met with the users, and determined what their problem is and what is required to
solve it.  This is the standard procedure, but it rarely works out well.  Here
are some scenarios and some coping strategies.  After some hand-wringing about
scope and budget …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The customer -- usually someone from IT -- has
met with the users, and determined what their problem is and what is required to
solve it.  This is the standard procedure, but it rarely works out well.  Here
are some scenarios and some coping strategies.  After some hand-wringing about
scope and budget and how to engage usefully, a two-step process is
identified.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unbounded Specifications.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The customer wants
a &amp;quot;simple&amp;quot; program to do [X], but hasn't actually written [X] down completely.
Any further conversation generally points up the lack of a fixed list of
features that constitute [X].  If there is something written, the material turns
out to be incomplete.  Indeed, in many cases, the definition of [X] seems to
vary during the conversation.  At the end of the meeting, we often ask the &amp;quot;what
do you expect?&amp;quot; question, and get answers like &amp;quot;We'll supply more definition,
then you supply an estimate.&amp;quot;&lt;/p&gt;
&lt;p&gt;So what
was their going-in expectation?  Did they expect to discover their documentation
was non-existent or incomplete?  Clearly not; no one calls and says &amp;quot;would you
QA our Request for Proposal?&amp;quot;&lt;/p&gt;
&lt;p&gt;They
must have thought that their specifications were complete and usable and that we
would thank them and provide an estimate.  Why did they think this?  They don't
seem to have a lot of internal discipline in the first place; it must be that
they rarely involve outsiders; they must be so used to clever people who fully
understand the user's needs that documentation just isn't part of their
world.&lt;/p&gt;
&lt;p&gt;Is the customer's expectation
wrong?  By definition, it isn't wrong -- we should sell what the customer is
asking to buy.  How can we satisfy this customer's expectations?  How can we
breeze in and create software without a well-bounded
specification?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Problem Doesn't Matter.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The customer wants
a simple program to do [Y], but [Y] is nearly incomprehensible.  So, we ask for
the problem which is being solved, or the context in which the software might be
used.  There's a fork in this road: either they refuse to provide it, or they
game the problem.  We'll look at the refusal path, since that's quite
common.&lt;/p&gt;
&lt;p&gt;When we ask what problem they
have and how a program to do [Y] addresses that problem, we often get a strange
circumlocution.  In one case, for example, the customer told us that they needed
to reduce their personnel costs.  They had about 120 people on the payroll,
removing one will save less than 1%.  Can we focus on something more serious?
It was a $500M manufacturing company; clearly their raw materials were
dominating their cost structure, not their personnel costs.  Their whole payroll
couldn't be more than 20% of their
costs.&lt;/p&gt;
&lt;p&gt;In  other cases, the description
involves so many unknowns and unknowables that it clearly becomes silly, even to
them.  They can't provide start dates, or test data, or a tool set.  Perhaps
they don't have hardware or infrastructure.  They may be vague on the users, or
who will ultimately control the software.  All they have is a deadline which
cannot be missed, and the specification for
[Y].&lt;/p&gt;
&lt;p&gt;My personal favorites were the use
cases which all began with &amp;quot;we could...&amp;quot;, or &amp;quot;it would be great if...&amp;quot;  Nothing
was definite, and their current business practices weren't -- it appeared -- a
model for the future business practices.  There wasn't a tangible problem to be
solved.&lt;/p&gt;
&lt;p&gt;In other cases, the answer is a
curt, &amp;quot;We've already thought about that, and this is optimal.&amp;quot;  And that's the
end of it.  They've already thought it through.  However -- and this is the
interesting point -- they can't (or won't) articulate it.  Maybe they think that
compartmentalizing the solution prevents any one person from seeing the overall
pattern and doing something malicious.  Maybe they're just domineering and feel
that dribbling out information puts them in
control.&lt;/p&gt;
&lt;p&gt;What was their expectation?
They expected us to salute, provide a price, and start programming.  From our
point of view, as vendors, we hate to program up a storm only to have the
product rejected because &amp;quot;it didn't solve the business problem.&amp;quot;  It did the
parts of [Y] that could be done (we didn't do the other parts that involved
time-travel, anti-gravity or perpetual motion), but that's not good enough.
Merely doing what they asked didn't solve the business problem -- and it's now
our fault.&lt;/p&gt;
&lt;p&gt;They assure us that we're
not on the hook to solve the business problem, we're only responsible for [Y].
But that's often a lie.  When [Y] doesn't solve the business problem, that
ridiculous assurance flies out the window, and we're into doing rework on [Y] to
make it solve the business problem.&lt;/p&gt;
&lt;p&gt;How
can we satisfy this customer's expectations?  How can we breeze in and create
software when they won't state the business problem that it solves?  Clearly, we
can play this game by becoming Talmudic scholars, scrutinizing every word,
writing a pile of assumptions and looking out for violations of those
assumptions.  Is this what the customer really wants?  Or do they want the
unstated problem solved, irrespective of the non-solution specified in
[Y]?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Find A Problem for Our Solution.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The customer wants a
simple program to do [Z], but [Z] is nearly incomprehensible.  So, we ask for
the problem which is being solved, or the context in which the software might be
used.   In a few cases, the customer may ask for help in formalizing the problem
in order to assure that [Z] really does solve the business
problem.&lt;/p&gt;
&lt;p&gt;In one case, [Z] had only one
sentence of user-oriented requirements, and pages of items out of the &lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;SEI Quality Taxonomy&lt;/a&gt; .  They had made an effort
to capture the business problem, but fell short.  They were willing to consider
the possibility that their requirements were not up to snuff.  However, they did
steadfastly refuse to engage in characterizing the business problem, and kept
their focus squarely on building technology.  In the end, we built mountains of
software to work around something that was never very
complex.&lt;/p&gt;
&lt;p&gt;What did the customer expect
in this case?  They wanted someone to state a business problem for which [Z] was
the solution.  Failure to do this meant either declaring &amp;quot;Scope Creep&amp;quot;, or
gaming the process by editing everything to make [Z] the
solution.&lt;/p&gt;
&lt;p&gt;How can we satisfy this
customer's expectations?  How can we breeze in and create software when they
want us to help them look for the business problem that fits their preferred
solution?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategies for Coping.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How can we breeze in and
create software without a well-bounded specification?  Or, if they have a
specification, how can we create software when they won't state the business
problem that it solves?  Worse, how can we create software when they want us to
help them look for the business problem that fits their technology
choice?&lt;/p&gt;
&lt;p&gt;Customer Education is
challenging.  Their expectation is that they are right.  They write software.
&lt;strong&gt;They Know What They're Doing&lt;/strong&gt; ™.&lt;/p&gt;
&lt;p&gt;How
do we sell into unbounded specifications?  Essentially, we have to ease into it
with them.  An Agile strategy can let us build something quickly, and charge for
each working deliverable.  However, this is &amp;quot;pay as you go,&amp;quot; which leaves some
executives confused about how much the whole project will
cost.&lt;/p&gt;
&lt;p&gt;How do we sell when the problem
doesn't matter?  Again, an Agile approach may help them see that their
specification was way off base.  As we engage with real users, however, and
uncover the real problem, what happens next will be called &amp;quot;scope creep&amp;quot;, and
the project will be cancelled.&lt;/p&gt;
&lt;p&gt;How do
we sell when we're looking for a problem that fits their chosen solution?  When
the problem isn't solved by the chosen technology, an Agile approach will
immediately get stopped because it looks like scope creep.  While unpleasant,
this is necessary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Agile Dilemma.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An Agile approach can fall
apart when the customer asks for the evil &amp;quot;budgetary&amp;quot; or &amp;quot;overall&amp;quot; estimate.
This estimate -- BTW -- is silly.  They have a budget already, our input isn't
going to change that budget.  In all cases, the decision is nuanced, but  we're
not allowed to participate at the &amp;quot;negotiate a reasonable solution for the
available budget&amp;quot; conversation, because we're evil and we'll only soak up all
the available money.&lt;/p&gt;
&lt;p&gt;Worse, any
number you name -- especially when they say &amp;quot;we won't hold you to it, we just
need a number&amp;quot; -- becomes the price, and nothing can change that.  A reduction
in scope means you lied about the initial estimate to get more money than it was
worth.  An increase in budget to add features means you lied about the initial
estimate to get in the door and get more money through change
orders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scope and Budget.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Balancing scope and budget
is almost impossible because -- as outsiders -- we're not allowed to participate
in that conversation.  If the customer doesn't often formalize things, then
scope is flexible; after all, everyone knows the real business issue and can
make all of the necessary prioritization and tradeoff decisions on a daily
basis.   When we provide a budget, the project gets cancelled:  too expensive.
We can't put down features as line-items, since they aren't
known.&lt;/p&gt;
&lt;p&gt;If the problem doesn't matter,
then tradeoffs are impossible.  The technology is fixed, and the business
considerations aren't on the table.  Our price is a make-or-break; there's no
way to engage in prioritization and tradeoff decisions without knowing the
problem and context.  When we provide a budget, the project gets cancelled: too
expensive.   We can put down features as line-items, but without knowing the
problem, the line items may be irrelevant or confusing.&lt;/p&gt;
&lt;p&gt;If the problem has to be gamed to fit
the solution, then tradeoffs are confusing.  We have business tradeoffs in the
problem space, and technology tradeoffs in the solution space.  Since neither is
fixed, no one can make any decisions, and the project gets cancelled:  too
expensive.  Worse, the customer accuses us of gold-bricking because we want to
charge them money just to restate their business problem, something that may
call their solution technology into
question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Engaging Usefully.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's really hard to
engage usefully.  If we give a &amp;quot;let's start with 8 weeks at
&lt;em&gt;x&lt;/em&gt; K$,
we have to explain what they get for their
&lt;em&gt;x&lt;/em&gt; K$.
Now we're back to explaining why no scope, no problem, or a movable problem are
serious issues.  And we look bad for not being able to take their murky
statements and make crystal-clear prognostications about what we'll have done in
8 weeks.&lt;/p&gt;
&lt;p&gt;If we develop a big, formal
proposal, with a SOW, WBS, Project Plan, Deliverables, and Quality Plan, we've
often thrown good money after bad.  If the customer didn't provide much scope,
our SOW is far more formality than they want, and the change control provisions
are daunting.&lt;/p&gt;
&lt;p&gt;If the problem's none
of our business, then a SOW plays well, but doesn't address their problem.  We
get paid, we discover the real problem; then they throw us out for initiating
the scope creep; the project gets cancelled.  While everyone's unhappy, at least
we got paid.&lt;/p&gt;
&lt;p&gt;If the problem's
flexible, then the business context and problem statement in the SOW are either
wrong to begin with, or immediately become wrong.  But who wants to replan the
entire project every time we redefine the problem to fit the technology?  The
technology isn't changing, so we should just press on with the implementation.
When the project gets cancelled because it isn't solving the real problem, at
least we got paid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cancellation is Always Bad.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sadly, we predicted
&lt;em&gt;x&lt;/em&gt; K$
in revenue, but a project cancellation counts against us.  Wall Street penalizes
us for falling short of our revenue predictions.  Just as badly, a project
extension to actually
&lt;em&gt;solve&lt;/em&gt;
the underlying problem (distinct from providing the deliverables they asked for)
means that we can't predict our revenues correctly.  In short, any scope change
is -- for a consulting firm -- &lt;strong&gt;Wall Street Death&lt;/strong&gt; ™.&lt;/p&gt;
&lt;p&gt;So,
while it gets us engaged and gets us some revenue, it's wholly unsatisfying to
meet the customers where they are and offer them what they want.  I'd much
rather offer them what they
need.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You Can't Always Get...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When they want [X], [Y] or
[Z], their expectation is clear.  They expect us to provide what they want.  In
the same way that they pull up to their local fast food joint and say &amp;quot;I want a
new Bentley.&amp;quot;&lt;/p&gt;
&lt;p&gt;Here's the fantasy.  You
have a problem you can state (&amp;quot;I'm hungry&amp;quot;, &amp;quot;I'm not at the beach&amp;quot;).  You pick a
product, you engage a vendor to provide a product that you think will solve your
problem.  If your problem isn't solved, you still have the
product.&lt;/p&gt;
&lt;p&gt;Well, almost.  If your problem
is that you aren't at the beach, and you buy a car, and still can't get to the
beach, at least you still have the car.  If your problem is that your hungry,
and you buy a burger, and are still hungry, well, you're still hungry.  I
suppose you could complain about the burger, but you don't possess the burger as
a tangible asset the way you possess the
car.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Services and The Real World.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For services, the fantasy
transaction almost never happens, even in the non-software (&amp;quot;real&amp;quot;) world.  When
you engage for services (i.e., lawn-mowing or a manicure), you often contract
for the service
&lt;em&gt;without&lt;/em&gt;
stating your real problem.  You may contract a lawn service, but your real
problem is weeds, not tall grass.  You may contract a manicurist, but your real
problem is a lousy social life because you hang around with nerds, not because
your fingernails are shabby-looking.  And when the problem's not solved, you
have no tangible product.&lt;/p&gt;
&lt;p&gt;So, you ask
for an estimate from the lawn service: &amp;quot;how much will this cost?&amp;quot;  And she has
no clue what you are talking about.  Sure, she can mow it, but it's a tangle of
weeds: you need it tilled under, fertilized and re-seeded.  No matter how much
she mows it, it will still look like
crap.&lt;/p&gt;
&lt;p&gt;And she can't engage you on the
solution, either.  If you are vague on the &amp;quot;make it look better&amp;quot;, the formal
specifications will be daunting.  If you are fixed on mowing, then she hasn't
solved your problem.  And if you are willing to negotiate on the problem (&amp;quot;make
the weeds shorter sounds about right, do that&amp;quot;) then you're never going to be
satisfied.&lt;/p&gt;
&lt;p&gt;Is the customer's
expectation wrong?  By definition, it isn't wrong -- we should sell what the
customer is asking to buy.  Or, perhaps the customer's expectation really is
wrong, after all.  If we can't solve the customer's problem, the customer is in
denial, and we need to apply some more serious consumer therapy, rather than
join their insanity.  Perhaps the customer isn't always
right.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solving Problems.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The problem with solving
problems is that it's a vague service offering.  &amp;quot;We solve lawn problems&amp;quot;, has a
smidgen of focus, but it still doesn't bracket precisely which problems they'll
tackle and which they won't.  &amp;quot;We solve social-life problems&amp;quot; is even worse.
Sure, fingernail polish is part of the social contract, but the offer is way too
broad to be believed.&lt;/p&gt;
&lt;p&gt;What's left?
Educating the customer.  All of the &amp;quot;this is what I want&amp;quot; meetings -- where the
customer has a specification, and we're expected to ask questions and prepare an
estimate -- ought to be preceded by at least two earlier meetings:
&lt;strong&gt;This Is Our Approach&lt;/strong&gt; , and
&lt;strong&gt;What Is Your Problem?&lt;/strong&gt; .  The first meeting is pure sales.
The second meeting is free
consulting.&lt;/p&gt;
&lt;p&gt;During
&lt;strong&gt;This Is Our Approach&lt;/strong&gt; , we lay it out as clearly as we can.
You have a problem, and your users must tell us the problem.  You may have a
preferred solution, and we'd love to hear it.  But, be prepared to demonstrate
how your solution fits your problem, and what you need from us.  And if you
aren't ready for this, we can help you get ready for it.  After that, we can do
architecture, design, programming, installation, whatever you
want.&lt;/p&gt;
&lt;p&gt;During
&lt;strong&gt;What Is Your Problem?&lt;/strong&gt; , real business users will describe
the business problem; you'll then tell us about your solution, how the solution
fits the problem, and what you need from us.  This is a QA session -- in essence
we will QA your Request for a Proposal.   If there are disconnects, questions,
concerns, unknowns or unknowables, we'll identify them as defects.  We'll then
write a proposal, or we'll suggest rework on your problem, solution or scope.&lt;/p&gt;
&lt;p&gt;Central to this is to ferret out the
features that actually solve the user's problem -- and are not negotiable --
from other things that are nice to have but don't focus squarely on the problem.
We want to be able to make informed decisions on priorities and trade offs.  We
don't want to be involved in that peculiar form of RFP negotiation where we
propose and get a &amp;quot;No&amp;quot;; the decision is more nuanced, and boiling it down to a
&amp;quot;No&amp;quot; is a disservice to the users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Selling It.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is this harsh?  Yes.  Will it
sell?  Probably not.  Will it prevent bad customer relationships?  Absolutely.
We'll only engage with customers who are willing to solve problems, and who will
recognize the value of solving the problem rather than building
software.&lt;/p&gt;
&lt;p&gt;It won't sell because the
customer's internal IT shop already did all of that problem identification
stuff.  Redoing it with a contractor present is -- to IT folks -- just a waste
of time.  Either it over-specifies, it dwells on non-technical stuff like the
business problem, or it leads to scope creep by taking the focus off the
preferred solution.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Calendar Calculations - Part 2</title><link href="https://slott56.github.io/2006_08_20-calendar_calculations_part_2.html" rel="alternate"></link><published>2006-08-20T01:26:00-04:00</published><updated>2006-08-20T01:26:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-20:/2006_08_20-calendar_calculations_part_2.html</id><summary type="html">&lt;p&gt;First, let's pick the conclusion out of the
middle: &amp;quot;However, the computation for the first and last business day of the
month is trivial. So, just codify
this.&amp;quot;&lt;/p&gt;
&lt;p&gt;Since we still lack any usable
context, we're struggling with the definition of basic terms.  Is this the
&lt;em&gt;calendar&lt;/em&gt;
month, or the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, let's pick the conclusion out of the
middle: &amp;quot;However, the computation for the first and last business day of the
month is trivial. So, just codify
this.&amp;quot;&lt;/p&gt;
&lt;p&gt;Since we still lack any usable
context, we're struggling with the definition of basic terms.  Is this the
&lt;em&gt;calendar&lt;/em&gt;
month, or the
&lt;em&gt;fiscal&lt;/em&gt;
period that overlaps with that calendar month?  The first business day of a
&lt;em&gt;fiscal&lt;/em&gt;
period that includes a random date in January could very well be Monday,
December 31st of the previous year.&lt;/p&gt;
&lt;p&gt;The
statement was made; to interpret it, we have to guess at the underlying
assumptions that make it appear true to the poster.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;They're talking
&lt;em&gt;calendar&lt;/em&gt;
month, not fiscal period.  Why, on earth, would anyone mix the calendar and the
fiscal periods?  How, precisely does &amp;quot;business day&amp;quot; apply to a calendar month,
which is separate from a fiscal period?  Any given calendar month may have one,
two or three relevant fiscal periods.  Since the terminology appears
contradictory, we'll set this aside as unlikely.  January 2 and January 31 could
belong to different fiscal periods and have different &amp;quot;first business day&amp;quot;
definitions.&lt;/li&gt;
&lt;li&gt;They're talking about
&lt;em&gt;fiscal&lt;/em&gt;
period, not calendar month.  However, the original question behind the &lt;a class="reference external" href="https://slott56.github.io/2006_08_07-the_hubris_of_calendrical_calculations.html"&gt;Hubris post&lt;/a&gt;  had to do with using the built in
RDBMS calculation methods, which are for
&lt;em&gt;calendar&lt;/em&gt;
months, not fiscal periods.  So, we can't be talking about fiscal periods if
we're also talking about RDBMS calendar functions.&lt;/li&gt;
&lt;li&gt;They're talking about fiscal period, and have
conflated it with calendar month, not realizing there's a difference.  This must
be the case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What we appear to have
is the argument that (1) the
&lt;em&gt;fiscal&lt;/em&gt;
&amp;quot;first business day&amp;quot; can be calculated from the
&lt;em&gt;calendar&lt;/em&gt;
functions in the RDBMS in spite of the date being defined for a
&lt;em&gt;fiscal&lt;/em&gt;
period; and (2) this calculation is simpler that looking up the correct date in
the G/L calendar.&lt;/p&gt;
&lt;p&gt;Since this argument
only makes sense if we presume that fiscal period and calendar month are the
same thing, I can't believe a word of it.  Indeed, I find it
alarming.&lt;/p&gt;
&lt;p&gt;I'd need to see some context
-- to define the terms -- and then some code.  And, of course, the appropriate
business policy that gives me a reason to believe the code is more reliable and
correct than the manually-prepared calendar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;: Calendar Calculations involve hubris that stems from conflating calendar and fiscal periods.&lt;/p&gt;
&lt;p&gt;For the second part, let
me rearrange the posting as follows.  &amp;quot;Banking holidays have to be loaded into a
table. The rules to compute the banking holidays are too complex and change.
[&lt;em&gt;snip&lt;/em&gt; ]
Why is it more efficient to have a human on a yearly basis compute the first and
last business day of the month. It has to be done on a yearly basis because the
banking holidays change on a yearly basis.
&amp;quot;&lt;/p&gt;
&lt;p&gt;This is something that I can't fully
understand.  It appears to be the following three points: (1) calendar
definition is manual, (2) some of the manual work has to be persisted in a
table, (3) other parts of the manual work should not be persisted in a table.&lt;/p&gt;
&lt;p&gt;To the person posting, points 2 and 3
aren't a contradiction.  Somehow, they've got a secret assumption that resolves
the above craziness.  I can only guess.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The fiscal periods don't apply.  See the above
analysis: somehow we're supposed to get &amp;quot;first business day&amp;quot; from the calendar
without knowing anything about fiscal periods.&lt;/li&gt;
&lt;li&gt;Either the bank holiday definitions or the
fiscal period definitions don't wind up in the persisted G/L calendar; it
&lt;em&gt;must&lt;/em&gt;
be calculated.&lt;/li&gt;
&lt;li&gt;The person working on the calendar doesn't
know the fiscal period starting dates, even though they have to allocate the
bank holidays into fiscal periods.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's
pretty pointless to guess what the unspoken assumptions are.  However, there is
clearly a lot of confusion on what information is already available and why it
shouldn't be treated as a value that can reliably be calculated.&lt;/p&gt;
&lt;p&gt;Recomputing will -- unconditionally --
insert errors.  A person does something to balance fiscal controls, policy, law,
contractual obligations, and regulatory considerations.  Since the software
doesn't have all of this information, it can't produce the same result.&lt;/p&gt;
&lt;p&gt;Imagine -- just for a moment -- the
controls and audits that would have to be in place to assure that this calendar
calculation really worked in production.  We'd have to have some control for the
calculation rules, and a log of results to be sure we did it correctly.  Since
the benchmark data against which we're basing our controls is
&lt;em&gt;manual&lt;/em&gt; ,
what do we use for an ongoing audit?
&lt;em&gt;Compare the calculation against the manual data?&lt;/em&gt;   Hello?  Isn't the manual data
the answer in the first place?  Why are we recomputing the controls we're using?
Why not just load them and be done with
it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:  Calendar
Calculations involve ignorance of &lt;a class="reference external" href="http://www.amazon.com/gp/product/0471153370/"&gt;The
Data Warehouse Toolkit&lt;/a&gt; .  This may be
unintentional, but the ignorance can be cleared up on page 7 and page 32.  About
four pages of
reading.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;/strong&gt;:
Any calendar calculation module based on the confusion between calendar and
fiscal period will have bugs.  It will diverge from other bank calendars.  It
will require almost endless maintenance, and provide essentially no value for
the effort involved.&lt;/p&gt;
&lt;p&gt;As near as I can
tell, Calendar Computations are &lt;strong&gt;An Attractive Time Sink&lt;/strong&gt; ™:  a nuisance, a
source of errors and cost.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>The Hubris of Calendrical Calculations</title><link href="https://slott56.github.io/2006_08_07-the_hubris_of_calendrical_calculations.html" rel="alternate"></link><published>2006-08-07T13:34:00-04:00</published><updated>2006-08-07T13:34:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-07:/2006_08_07-the_hubris_of_calendrical_calculations.html</id><summary type="html">&lt;p&gt;Here's the
example:&lt;/p&gt;
&lt;p&gt;&amp;quot;I need to calculate first
'business day' of the month.  Last 'business day',
too.&amp;quot;&lt;/p&gt;
&lt;p&gt;Note that the problem which this
solves is unstated.  Why does anyone need to &amp;quot;calculate&amp;quot; this?&lt;/p&gt;
&lt;p&gt;Here's a single tidbit of technical
context, not useful really, but all I know: it's a polyglot …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's the
example:&lt;/p&gt;
&lt;p&gt;&amp;quot;I need to calculate first
'business day' of the month.  Last 'business day',
too.&amp;quot;&lt;/p&gt;
&lt;p&gt;Note that the problem which this
solves is unstated.  Why does anyone need to &amp;quot;calculate&amp;quot; this?&lt;/p&gt;
&lt;p&gt;Here's a single tidbit of technical
context, not useful really, but all I know: it's a polyglot environment with
.NET and Java.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Worst Solution.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A PL/SQL package called
&amp;quot;date_calculations&amp;quot; is perhaps the worst possible implementation.  Why is this
so bad?&lt;/p&gt;
&lt;p&gt;First, and foremost,
&lt;strong&gt;it duplicates existing information&lt;/strong&gt; , stored elsewhere in the
organization.  I don't even need to ask if there's a business calendar in a
database.  The General Ledger application (among others) has a business
calendar, which has these facts in it.  The calendar is often a table, and can
be queried trivially.&lt;/p&gt;
&lt;p&gt;If you -- for
inexplicable reasons -- must wrap everything in a slow, complex and error-prone
stored procedure, you can write a PL/SQL package which queries this table.  Then
your Java or .NET objects can use that stored procedure to construct the
necessary object.  (I love the indirection of doing Object-Relational Mapping
through a stored procedure, the pointless wasted time and processing appeals to
me.)&lt;/p&gt;
&lt;p&gt;The second reason this is so bad
is that &lt;strong&gt;it attempts to impose business rules on something that is the province of hand-wringing policy-makers&lt;/strong&gt; .  While several months have
ordinary, simple rules for 'first business day', January and September are often
complex.  There are Federal rules for the New Years Day holiday.  Further, when
New Years Day falls on a weekend, it may be celebrated on the following Monday.
Just to compound this, the fiscal year may actually end on December 30 or 31 or
Jan 1 or 2 in order to make four full 13-week periods: what does this mean
regarding first business day of the
&amp;quot;month&amp;quot;?&lt;/p&gt;
&lt;p&gt;Can you really codify all of
the subtlety of the orbit of the planet, US federal and state law, GAAP, and
business policy in a stored procedure?  What's wrong with a table that simply
lists this information?&lt;/p&gt;
&lt;p&gt;The third
reason is &lt;strong&gt;it requires the overhead involved of JDBC/ODBC connections for a relatively simple one-shot Q&amp;amp;amp;A&lt;/strong&gt; .  If you've already got an RDBMS
connection open, then it isn't so bad.  But -- check above -- the problem is
free of useful context, so we just don't know if this is appropriate or
not.&lt;/p&gt;
&lt;p&gt;The fourth reason is
&lt;strong&gt;the vague (and misleading) name of the package&lt;/strong&gt; .  &amp;quot;date_calculation&amp;quot; is far from true.
It answers two questions about the business calendar.  The package happens to
use dates, but doesn't really do much
calculation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Better Approach.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since the problem is (a)
unstated and (b) free of usable context, it's challenging to propose a better
approach.  However, there are some universal truths about the calendar that
point to an approach that makes sense almost all of the
time.&lt;/p&gt;
&lt;p&gt;A table.  Yes,
&lt;strong&gt;load the business calendar into a table&lt;/strong&gt; , and use that table.  The calendar is a
complex fact, touched by many people, and the rules are nearly impossible to
codify.  When confronted with that kind of complexity, punt.  Just put in a
table.&lt;/p&gt;
&lt;p&gt;Two stupid (yes, stupid)
objections I've heard: &lt;strong&gt;the storage&lt;/strong&gt;  and
&lt;strong&gt;the performance&lt;/strong&gt; .  The storage is a ridiculous
objection.  Let's say we explode each date into a 9-tuple of facts about that
date (year, month, day, day of week, day of year, quarter, day of quarter,
business day, holiday).  With the exception of year, these are tiny numbers.  We
have a bunch of one- and two-digit fields plus a four-digit field.  Let's punish
ourselves and allocate 80 bytes for this to include every possible overhead,
large numbers, everything.  Let's store dates for the entire 80-year history of
the company, plus the next 200 years into the future.  That's 280 years x 365.25
date records x 80 bytes = 8Mb.  That's 8 Mb of date information.  Why are we
talking about the storage?&lt;/p&gt;
&lt;p&gt;If you
think 8Mb matters, then price 80Gb disk drives.  At roughly $1/Gb, this is
$0.008 of storage.  Almost a penny's
worth.&lt;/p&gt;
&lt;p&gt;The second objection is
performance of the table.  This question presumes that somehow a 102,000 row
table is profoundly slow and cannot be indexed, while a 7M row customer table is
the price of doing business.  If the 102,000 row table is intimidating, then
only put in a few decades of dates, and cut down to 7,300 rows of date
information.   Our candidate query needs year and month to locate the first
business day of the month.  Since we'll be doing this for the &amp;quot;current&amp;quot; month,
that cluster of rows is likely going to get pinned into
cache.&lt;/p&gt;
&lt;p&gt;If you still think that a 7,300
row table is slow (and you can't run any performance tests to prove that indexes
really are fast), you can write a PL/SQL procedure to cache the results, and
feed them back when asked.&lt;/p&gt;
&lt;p&gt;If you still
think that a table is slow, try getting out of the mental box you're in.  Your
LDAP server can provide this information.  Define a schema for the business
calendar and a domain into which you place dates, not people.  Weird, but really
fast if you use a no-binding
connection.&lt;/p&gt;
&lt;p&gt;If you still think that a
table is slow, try writing a special-purpose Servlet and put it on a web server
somewhere.  It can cache all kinds of calendar information and respond to very
simple GET queries with a text response (not HTML) that has just the relevant
date.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom Line.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bottom line on dates is
this:  &lt;strong&gt;The Business Calendar is Static: Calculation is Silly&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;Why
is calculation silly?  Things don't change; the &amp;quot;first business day&amp;quot; is a
persistent fact.  While derived from complex rules, it doesn't change once it's
established.  Further, there are so few instances of this fact, that a
calculation isn't really
appropriate.&lt;/p&gt;
&lt;p&gt;What we're doing, in
essence, is reconstructing a Date object.  We have a Calendar which is a
container for Dates.  Any given Date is associated with a number of other dates,
including &amp;quot;first business date in the same month&amp;quot;, and &amp;quot;last business date in
the same month.&amp;quot;  We simply want these persistent objects reconstructed in our
program.  They can be shelved, hibernated, serialized, fetched from a relational
database by an Object-Relational Mapping, or brought in via Container Managed
Persistence.&lt;/p&gt;
&lt;p&gt;We aren't &amp;quot;calculating&amp;quot;
anything.  We're chasing a simple
relationship.&lt;/p&gt;
&lt;p&gt;We need to have a
Calendar object with Calendar Month and Business Month containers.  We want to
work with a Business Month container, examining the individual Date objects.
These -- in general -- should just come from the database through simple
queries.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Three Arguments for Using the Hammer</title><link href="https://slott56.github.io/2006_07_30-three_arguments_for_using_the_hammer.html" rel="alternate"></link><published>2006-07-30T16:42:00-04:00</published><updated>2006-07-30T16:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-07-30:/2006_07_30-three_arguments_for_using_the_hammer.html</id><summary type="html">&lt;p&gt;When we're
&lt;strong&gt;Holding the Hammer&lt;/strong&gt; , everything's a nail.  There are a
number of supporting arguments for this.  I won't beat down the
&lt;strong&gt;All Those Features&lt;/strong&gt; ™ decision-making pattern again.
That, and some part of &lt;strong&gt;Tomorrow's Dollars Don't Exist&lt;/strong&gt; ™ decision-making pattern are
in &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_07_21-is_it_over_solving_or_exploiting_technology.html"&gt;Is it Over-Solving or Exploiting
Technology?&lt;/a&gt; &amp;quot;&lt;/p&gt;
&lt;p&gt;From &lt;a class="reference external" href="http://improving-nao.blogspot.com/"&gt;Improving-NAO&lt;/a&gt; : &amp;quot;I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we're
&lt;strong&gt;Holding the Hammer&lt;/strong&gt; , everything's a nail.  There are a
number of supporting arguments for this.  I won't beat down the
&lt;strong&gt;All Those Features&lt;/strong&gt; ™ decision-making pattern again.
That, and some part of &lt;strong&gt;Tomorrow's Dollars Don't Exist&lt;/strong&gt; ™ decision-making pattern are
in &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_07_21-is_it_over_solving_or_exploiting_technology.html"&gt;Is it Over-Solving or Exploiting
Technology?&lt;/a&gt; &amp;quot;&lt;/p&gt;
&lt;p&gt;From &lt;a class="reference external" href="http://improving-nao.blogspot.com/"&gt;Improving-NAO&lt;/a&gt; : &amp;quot;I [struggle] with the Tomorrows
Dollars Don't Exist argument. Every other application or component of my app
that really requires the RDBMS will already be paying for its mass of features,
so the incremental cost to my app using a limited set of the features is
limited.&amp;quot;&lt;/p&gt;
&lt;p&gt;Clearly, we agree that the
basic &lt;strong&gt;Tomorrow's Dollars Don't Exist&lt;/strong&gt; ™ management pattern is flawed.
My point is that
&lt;strong&gt;all&lt;/strong&gt;  of
the cost -- no matter how limited -- is money that's wasted.  Limited is still
non-zero, and I find all cost to be
objectionable.&lt;/p&gt;
&lt;p&gt;Additionally, I argue
that the &amp;quot;limited&amp;quot; costs are surprisingly large.  It takes a lot of work and
coordination to do schema migration, when a file format change has almost zero
impact.  It takes a lot of work and coordination to back up a message-queue
database where the message queue data is transient;  A restore could lead to
serious problems stemming from duplicating
transactions.&lt;/p&gt;
&lt;p&gt;The real issue is that
&lt;strong&gt;all&lt;/strong&gt;  of
the costs associated with applying the RDBMS to transient data are
wasted.&lt;/p&gt;
&lt;p&gt;Here's the nub of the
&lt;strong&gt;It's Already Here&lt;/strong&gt; ™ decision
pattern.&lt;/p&gt;
&lt;p&gt;&amp;quot;Since it exists in the
organization already ... The app requiring queuing does not live in a
vacuum.&amp;quot;&lt;/p&gt;
&lt;p&gt;True, we're making
&lt;em&gt;additional&lt;/em&gt;
use of the RDBMS.  We have the organization and the skills to make use of the
RDBMS.  However, we will wind up canonizing many worthless features into
essential parts of the solution architecture.&lt;/p&gt;
&lt;p&gt;I strongly object to this canonization
of the RDBMS as an essential feature of the solution.  It leads to the following
problem:&lt;/p&gt;
&lt;p&gt;When the RDBMS doesn't scale, we diddle
around with queries and indexes.  This won't make it scalable, since the
insert/update interleaved with full table scans is what slows everything
down.&lt;/p&gt;
&lt;p&gt;We won't consider viable
solutions to the scaling issue.  Instead, we waste time putting lipstick on a
pig.  None of this solves the real, underlying message queueing problem.&lt;/p&gt;
&lt;p&gt;Using the RDBMS defers costs to
tomorrow, raising the TCO.  Using the RDBMS throws features at the problem,
which don't contribute to the solution, and raise the TCO.  Using things because
they are ready to hand specifically avoids comparing the solution against the
problem.&lt;/p&gt;
&lt;p&gt;Each of these is a way of
dodging our responsibility as problem-solvers.  Rather than engage with the
users to determine what's wrong and how we can fix it, we start bashing away at
various kinds of fasteners with our hammer.  And when it doesn't work, we demand
a bigger hammer.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>How to Avoid Problem-Solving</title><link href="https://slott56.github.io/2006_07_30-how_to_avoid_problem_solving.html" rel="alternate"></link><published>2006-07-30T13:41:00-04:00</published><updated>2006-07-30T13:41:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-07-30:/2006_07_30-how_to_avoid_problem_solving.html</id><summary type="html">&lt;p&gt;One of the best ways to avoid problem solving is
to treat the problem as fluff.  Often, our users begin the conversation with
this assumption, and we play along.  Other times, we make this choice because
we're just too lazy (or negligent) to make an effort.&lt;/p&gt;
&lt;p&gt;Here's how it plays …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the best ways to avoid problem solving is
to treat the problem as fluff.  Often, our users begin the conversation with
this assumption, and we play along.  Other times, we make this choice because
we're just too lazy (or negligent) to make an effort.&lt;/p&gt;
&lt;p&gt;Here's how it plays
out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User:  &amp;quot;I need a workflow solution.&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IT Person:  &amp;quot;Great, I'll find one and install it.  We use [X] brand infrastructure components, I'll locate something compatible.&amp;quot;  Fill in Sun, IBM, Oracle or Microsoft for [X].&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Note the things
that are missing from the previous -- and all-too-typical --
conversation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Who has a problem?&lt;/li&gt;
&lt;li&gt;What problem do they have?&lt;/li&gt;
&lt;li&gt;Where, when and why does this problem occur?&lt;/li&gt;
&lt;li&gt;What happens when we solve this problem?&lt;/li&gt;
&lt;li&gt;What happens if we don't solve this problem?&lt;/li&gt;
&lt;li&gt;What are the constraints on potential solutions?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since we don't know any of
the above, we can buy and install anything -- anything at all -- and the odds of
success are just random chance.&lt;/p&gt;
&lt;p&gt;Better
yet, we can draft a random set of purely technical requirements that are little
more than quality factors, and avoid the tedious process of understanding the
actors and the use cases.  I find that many requirements documents are
essentially the SEI &lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;Quality Measures Taxonomy&lt;/a&gt; ; they barely mention
users, business value, or business
context.&lt;/p&gt;
&lt;p&gt;The consequence is the
following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User:  &amp;quot;I need a workflow solution.&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IT Person:  &amp;quot;We already installed one and you didn't use it.  So we installed a different one and you didn't use that either.  What does it take to make you happy?&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another way to avoid
problem solving is to assure that all solutions involve programming.  Some
management-types deny they are mandating programming solutions.  No matter how
much they deny it, no other choice is ever on the table.  Lacking any
alternative problem-solving strategy, we're left with writing expensive and
ineffective programs.&lt;/p&gt;
&lt;p&gt;Note that this
can be the result of ignorance or malice.  An IT manager can be simply ignorant
of IT's role in organizational structure and operations; they could be under the
manifestly false impression that end-users can put together a logical process
better than IT people.  An IT manager can be malicious in spreading their
preference for programming (and the resulting empire of programmers and
maintainers) over solving problems.  The root cause doesn't matter.  What
matters is that software is the solution of
choice.&lt;/p&gt;
&lt;p&gt;What's wrong with that?  Since
we aren't allowed to talk about organizational change, and how an ineffective
process can create errors, we are put into patch mode.  We're accreting
functionality that turns a problem into a
feature.&lt;/p&gt;
&lt;p&gt;First, system X has a bug,
leading to process defects.  Management dictates that we write new programs Y1
and Y2 to work around that bug.&lt;/p&gt;
&lt;p&gt;&amp;quot;No one
would ever do that,&amp;quot; you say.  Which is far from true.  There are a million
reasons why people do this every day.  System X is a legacy, it's an investment
that we must preserve, it's too expensive to fix, we don't know what the bug
really is, it's a packaged product, it's someone else's problem, it's slated for
replacement anyway, ...  The list is long and
sickening.&lt;/p&gt;
&lt;p&gt;Second, we note that the
results of Y1 and Y2 aren't quite right, so we institute manual procedures to
check Y1 and Y2.  These are complex and error-prone procedures.  Our defect rate
is reduced in one area, but increased in others.  Note that adding process to
correct another process, means we're losing ground
here.&lt;/p&gt;
&lt;p&gt;So we decide to add a workflow
solution to make sure that the manual repairs for Y1 and Y2 is executed
flawlessly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Wait!  Hold the phone!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We have a &lt;em&gt;bug&lt;/em&gt;
in X.  We have &lt;em&gt;incorrect&lt;/em&gt;
fixes in Y.  We have &lt;em&gt;incomplete&lt;/em&gt;
manual procedures to fix the problems in Y that fix the problems in X.  We're
now going to canonize this whole mess with a workflow product, W.  Adding
software only serves to compact this aggregate into expensive, complex
coprolite.&lt;/p&gt;
&lt;p&gt;Here's what happens next.
We try to replace X, only to conflate it with Y and W.  We can't tease apart the
essential processing from the workarounds.  The original bug in X is now a
feature of the overall Gordian knot of
processing.&lt;/p&gt;
&lt;p&gt;What were we doing in the
first place?&lt;/p&gt;
&lt;p&gt;It doesn't matter what we
were doing.  IT management needs software to make X, Y and W play nicely
together.  We have a mandate to reduce cost.  The cost of X is high.  The cost
of Y is relatively low, but the cost of W is large.  The workflow package, in
particular, is enabling (or infrastructure) software, not a complete solution;
it requires skilled people to implement solutions.   And, it's only used for one
thing, the workflow to fix the problems in Y (which were supposed to fix the
problems in X.)&lt;/p&gt;
&lt;p&gt;How can we reduce the
cost of this mess?  Easy.&lt;/p&gt;
&lt;p&gt;The
standard answer is to write more software.  Replace the whole thing with a new
application that enshrines the bug in X and the workarounds in Y.  The
maintenance cost of a solution developed in house is negligible.  If not zero,
it's always acceptable.  As a consultant, I'm often involved in empire-spreading
software construction efforts that add maintenance cost far beyond the projected
small number of FTE's.&lt;/p&gt;
&lt;p&gt;How does this
avoid work?  It keeps us from the tedious process of understanding the actors
and the use cases.  We know that's just fluff.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Is it Over-Solving or Exploiting Technology?</title><link href="https://slott56.github.io/2006_07_21-is_it_over_solving_or_exploiting_technology.html" rel="alternate"></link><published>2006-07-21T22:01:00-04:00</published><updated>2006-07-21T22:01:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-07-21:/2006_07_21-is_it_over_solving_or_exploiting_technology.html</id><summary type="html">&lt;p&gt;Here's a snip from the &lt;a class="reference external" href="http://www.haloscan.com/comments/slott/E20060620162253/#142442"&gt;comment&lt;/a&gt; :
&amp;quot;... over-solving the problem is writing a bunch of custom code (the file
readers and writers) when there is already a perfectly good mechanism available
for all of the persistence, reliability, repeatability and scalability issues.
To me, if my application has already been designed to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a snip from the &lt;a class="reference external" href="http://www.haloscan.com/comments/slott/E20060620162253/#142442"&gt;comment&lt;/a&gt; :
&amp;quot;... over-solving the problem is writing a bunch of custom code (the file
readers and writers) when there is already a perfectly good mechanism available
for all of the persistence, reliability, repeatability and scalability issues.
To me, if my application has already been designed to provide data access to the
database, all of my connection, security, data transformation, etc issues have
already been solved. Prior to me someone has already taken ODBC/JDBC and worked
out the issues within my app. Why would I want to go to a custom code based
system where I have to work all of this
out?&amp;quot;&lt;/p&gt;
&lt;p&gt;In short, since the RDBMS does
all this wonderful stuff, why not use
it?&lt;/p&gt;
&lt;p&gt;Good question.  I can tell it's a
good question because the question doesn't have a single pat answer.  It has two
answers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Choice 1: Go Ahead, Use the RDBMS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Of course, if I need
all those wonderful features (&amp;quot;persistence, reliability, repeatability and
scalability issues&amp;quot;), then I'll use the RDBMS.&lt;/p&gt;
&lt;p&gt;Clearly, the &amp;quot;DB hides a lot of the
low level issues from the standard software developer.&amp;quot;  There are many times
when an RDBMS solves our problem.&lt;/p&gt;
&lt;p&gt;My
point is about applying the gigantic overhead of the RDBMS to a problem for
which it is
inappropriate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Choice 2: Don't use the RDBMS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The issue that I
want to dwell on is the
&lt;em&gt;need&lt;/em&gt;
for all those wonderful features.  I don't think it's appropriate to throw the
RDBMS at a problem which requires almost only three of the endless litany of
RDBMS features.&lt;/p&gt;
&lt;p&gt;Here's the crux of the
matter: &amp;quot;The cost of a professional developer throwing a file based mechanism
together and working the bugs out of it for a few days may be more that the cost
of the DB resources used.&amp;quot;&lt;/p&gt;
&lt;p&gt;I like to
call this the &lt;strong&gt;Tomorrow's Dollars Don't Exist&lt;/strong&gt; ™ viewpoint.  The big, visible,
obvious cost is the up-front cost of a developer.  For the next 10 years,
however, we have to support, maintain, upgrade, enhance, and pay for this
solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Three Specific Features.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My point centered on
three specific features.  In a situation where we have more complex
requirements, clearly, the RDBMS is likely to be appropriate.  But the three
specific features aren't costly.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reliability.  Double writes don't require
developer time to debug.  They're a first class feature of the OS.&lt;/li&gt;
&lt;li&gt;Scalability.  This is -- actually -- not
solved by the RDBMS.  That was the genesis of my thoughts on this subject.  The
RDBMS doesn't scale well because it doesn't handle queueing well.&lt;/li&gt;
&lt;li&gt;Recoverability.  Again, file system
writes and reads don't require developer time to debug.  They're the essence of
the OS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What leads to confusion is the
&lt;strong&gt;All Those Features&lt;/strong&gt; ™**** comparison.  We're comparing
&lt;em&gt;all&lt;/em&gt;
of the features of the RDBMS with a problem that requires almost none of the
features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
convenience factor is aptly summarized as &amp;quot;Why would I want to go to a custom
code based system where I have to work all of this
out?&amp;quot;&lt;/p&gt;
&lt;p&gt;By assuming that
&lt;strong&gt;Tomorrow's Dollars Don't Exist&lt;/strong&gt; ™, the convenience carries even
more weight.  Further, if we look at &lt;strong&gt;All Those Features&lt;/strong&gt; ™, the RDBMS looks perfect
for the problem at hand.&lt;/p&gt;
&lt;p&gt;If, however,
we look at the few features we need and the long term cost of the features we
don't need, the RDBMS is &lt;strong&gt;A Bad Thing&lt;/strong&gt; ™ for this class of problems.  A
RDBMS isn't appropriate for a message queue, and I don't find the convenience
argument terribly convincing.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Over-Solving the Problem or When your architect is a DBA...</title><link href="https://slott56.github.io/2006_06_20-over_solving_the_problem_or_when_your_architect_is_a_dba.html" rel="alternate"></link><published>2006-06-20T20:22:00-04:00</published><updated>2006-06-20T20:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-06-20:/2006_06_20-over_solving_the_problem_or_when_your_architect_is_a_dba.html</id><summary type="html">&lt;p&gt;R. Lucente shared an email with me that included
&lt;a class="reference external" href="http://www.hotsos.com"&gt;Cary
Millsap's&lt;/a&gt;   Volume Theorem.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Theorem&lt;/em&gt; :
&lt;strong&gt;No human wants to see more than 10 rows. Ever.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which caused me to wonder why
anyone would ever use an RDBMS as a slow, complex, high-overhead message queue.
I've seen it done several times, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;R. Lucente shared an email with me that included
&lt;a class="reference external" href="http://www.hotsos.com"&gt;Cary
Millsap's&lt;/a&gt;   Volume Theorem.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Theorem&lt;/em&gt; :
&lt;strong&gt;No human wants to see more than 10 rows. Ever.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which caused me to wonder why
anyone would ever use an RDBMS as a slow, complex, high-overhead message queue.
I've seen it done several times, and in all cases, it was considered A Bad Thing
after it had been in production for a while.  Either it was slow or it was
inflexible.&lt;/p&gt;
&lt;p&gt;Why do we end up with this
situation?&lt;/p&gt;
&lt;p&gt;I had a DBA tell me that the
user registration application shouldn't directly update the LDAP server.
Instead, the users should be placed in the database, where Oracle's DIPTEST
process would take the changes out of the database and apply them to the LDAP
directory.  He was adamant about it: the RDBMS was the sacred truth and
bypassing the RDBMS put the application in a state of
sin.&lt;/p&gt;
&lt;p&gt;It turns out that there are some
things DIPTEST can't do.  The database-centric philosophy did us more harm than
good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The RDBMS-as-Reliable-Message-Queue design pattern.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We use the RDBMS as a
message queue for the same reason we use it as a front-end to the LDAP server.
The RDBMS is the biggest, most expensive, most visible and most central
persistence mechanism we see.  We can't or don't see the file system, because
it's free with our OS; we take it for granted.&lt;/p&gt;
&lt;p&gt;So what features do we get from the
RDBMS As Message Queue?&lt;/p&gt;
&lt;p&gt;1.
&lt;strong&gt;Reliability&lt;/strong&gt; .
The RDBMS has logs and rollback space and carefully designed algorithms to
assure that dirty cache storage is written to disk quickly.   Why not just write
a file or two to different devices?  Isn't that multiple-device write what's
going on under the hood in the
RDBMS?&lt;/p&gt;
&lt;p&gt;2.
&lt;strong&gt;Scalability&lt;/strong&gt; .
Multiple writers or multiple readers can share the RDBMS.  Multiple writers is
easily handled by multiples files in a directory.  Multiple readers is easily
handled by isolating the state information that describes &amp;quot;next transaction&amp;quot;
from the multiple processes which execute individual
transactions.&lt;/p&gt;
&lt;p&gt;3.
&lt;strong&gt;Recoverability&lt;/strong&gt; .
When the transaction is finished, we can update the record in the RDBMS to show
that it's complete.  Why?  To promote a reliable restart in the event of a
crash; that way we won't reprocess queued transactions.  Why not write a second
file of completed transaction id's?  At startup, read and locate transactions
that are in the queue but not in the completed transaction file.  It can't take
more than a second or so to write an updated, unprocessed transaction queue, and
then be up and processing
again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why did the RDBMS win out over simple files?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My current
theory is that architecture depends on the project manager.  It's all about the
manager's level of comprehension of the technology choices, their level of trust
in their information sources and their involvement in the project.   It has
little to do with applying technology to solve a problem -- unless the PM
actually makes an effort to be involved, comprehend the alternatives, and have a
trusted source of technology
directions.&lt;/p&gt;
&lt;p&gt;I've been undermined by all
three.&lt;/p&gt;
&lt;p&gt;No involvement means that the
client DBA's opinion carries more weight than mine.  Until things don't work,
and then the DBA can easily recast their insistence as a suggestion or a
preference.&lt;/p&gt;
&lt;p&gt;No comprehension means that
the project sticks to what the project manager actually knows.  If the PM's
technical expertise includes RDBMS, then everything has to include a database.
If the PM doesn't understand star-schema design, then the warehouse will not be
a usable warehouse -- it will be highly normalized and look like an OLTP
application database.&lt;/p&gt;
&lt;p&gt;No trusted
sources mean that decisions get made, revoked, and then reinstated.  This isn't
about learning something and making a change based on new information.
(Politicians call learning and changing &amp;quot;flip-flopping&amp;quot; and make it sound bad;
it's just learning.)  I'm talking about the extreme case of making the decision
to do X, backing down on that decision because X really is a bad idea, then
reinstating the decision to do X because the alternative isn't trusted
enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don't Over Solve.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Millsap's point is really
important.  It's about the people -- the actors, the use cases, the information,
decisions and actions.  If we are solving their problem, then we can make
rational technology choices.   The RDBMS-As-Message-Queue is grotesque overhead
for a tiny problem of reliable application integration.  TIBCO would have been
cheaper.  A file or two would have been
simpler.&lt;/p&gt;
&lt;p&gt;But how do we know in advance
which is better: RDBMS-As-Message-Queue or File-As-Message-Queue?  The decision
is easy to make.  It depends on answering the following question:
&lt;strong&gt;are we are over-solving the problem?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We're over-solving the
problem when the RDBMS-As-Message-Queue has added features like locking,
rollbacks, schema management, and -- worst of all -- ad-hoc query capability.
We don't need these features, so why are they here?  We only need a couple of
files.  So, just build readers and writers for a couple of files and be
done.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Faerie Dust™</title><link href="https://slott56.github.io/2006_06_19-faerie_dusttm.html" rel="alternate"></link><published>2006-06-19T20:12:00-04:00</published><updated>2006-06-19T20:12:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-06-19:/2006_06_19-faerie_dusttm.html</id><summary type="html">&lt;p&gt;Here's how to recognize a
&lt;strong&gt;Faerie Dust&lt;/strong&gt;
request:&lt;/p&gt;
&lt;p&gt;1.  We have identified a
problem.  It can be with almost anything: scalability, reliability,
auditability, any &lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;Quality Measure&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;2.  We're pursuing a specific technology.
Typically, something that has the lowest impact on our
architecture.&lt;/p&gt;
&lt;p&gt;3.  We can't address anything
other than this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's how to recognize a
&lt;strong&gt;Faerie Dust&lt;/strong&gt;
request:&lt;/p&gt;
&lt;p&gt;1.  We have identified a
problem.  It can be with almost anything: scalability, reliability,
auditability, any &lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;Quality Measure&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;2.  We're pursuing a specific technology.
Typically, something that has the lowest impact on our
architecture.&lt;/p&gt;
&lt;p&gt;3.  We can't address anything
other than this specific technology variation -- we can't change the application
software or buy hardware.&lt;/p&gt;
&lt;p&gt;Once we're in
the Faerie Dust realm, what can we
do?&lt;/p&gt;
&lt;p&gt;Laughing doesn't help.  They have a
serious problem, they need a solution.  The fact that they won't address the
cause isn't completely relevant -- we have to work on the denial, anger,
negotiation, depression cycle first.  Hopefully skipping past the anger, or
assuring the anger is directed
elsewhere.&lt;/p&gt;
&lt;p&gt;Helping doesn't help.  If we
join the quest for their Faerie Dust, what will we accomplish?  We'll burn
billable hours to -- eventually -- reach an equivocal non-solution with a
complex write-up and recommendations that won't be
implemented.&lt;/p&gt;
&lt;p&gt;Not helping doesn't help.
If we obstinately refuse to join the quest for the Faerie Dust... well... then
we've done nothing.  We haven't advanced their understanding of their
problem.&lt;/p&gt;
&lt;p&gt;What's left?  Is there a
middle road that allows us to join the Faerie Dust quest, but still point out
the side roads, other monsters and other treasures along the
way?&lt;/p&gt;
&lt;p&gt;Perhaps there is, but it would
require a kind of saintly patient persistence.  We would have to start with an
enumeration of problem causes, prioritize them, and then focus on their selected
bit of Faerie Dust.  My idea is that enumerating the possible causes allows us
to identify the missed opportunities, and the possible magnitude of fixing
something essential (algorithm or data structure) instead of throwing up
window-dressing to cover problems in something inessential (reducing the time
required for a table scan).&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Office is Bloated, Let's Add More</title><link href="https://slott56.github.io/2006_06_07-office_is_bloated_lets_add_more.html" rel="alternate"></link><published>2006-06-07T15:39:00-04:00</published><updated>2006-06-07T15:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-06-07:/2006_06_07-office_is_bloated_lets_add_more.html</id><summary type="html">&lt;p&gt;&amp;quot;There has been a lot of skepticism about the
usefulness--and necessity--of the Ribbon, and I have to admit that I was among
the doubters. Why change something that works? Because, according to Microsoft,
the current interface has become bloated with too many
menus.&amp;quot;&lt;/p&gt;
&lt;p&gt;Ugh.  It's bloated, so we'll
add features …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;There has been a lot of skepticism about the
usefulness--and necessity--of the Ribbon, and I have to admit that I was among
the doubters. Why change something that works? Because, according to Microsoft,
the current interface has become bloated with too many
menus.&amp;quot;&lt;/p&gt;
&lt;p&gt;Ugh.  It's bloated, so we'll
add features to conceal the bloat.  Great approach.  Feed the obese, hand anvils
to the drowning, throw gasoline on the
fire.&lt;/p&gt;
&lt;p&gt;Why do we buy
this?&lt;/p&gt;
&lt;p&gt;I think it's because we don't see
a choice.  OpenOffice &lt;a class="reference external" href="http://www.openoffice.org/"&gt;http://www.openoffice.org/&lt;/a&gt; is risky, too new, feature poor or some
such malarky.  All false, but who wants to be first to jump ship?  Not my
company's IT department.&lt;/p&gt;
&lt;p&gt;I wish that
&amp;quot;Big IT&amp;quot; (the architects in Fortune 500 companies) would survey users and
examine documents to find out what
&lt;strong&gt;really&lt;/strong&gt;
happens with users of MS-Office products.  I suspect the 80-20 rule would apply
and they'd see the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;10% of the users are power-users who can
do nice high-quality publication, using style sheets and other tools.  These
people are essentially professional layout/editor writer types or the kind of
jack-of-all-trade administrative assistants who support a power
user.&lt;/li&gt;
&lt;li&gt;They'd find 80% of the ordinary user
community who can write a document and are happy with that.  This breaks down
into the 16% who can use the spell checker and know what the grammar checker is
doing, and the 64% who can't use the spell checker and turn the grammar checker
off.&lt;/li&gt;
&lt;li&gt;They'd find the weird 10% of people who
misuse Word egregiously.  These are people who make giant spreadsheet-like
tables because they can't figure out Excel, or who make hyper-complex
interlinked documents because they can't figure out FrontPage.  These are the
people writing VBA scripts and attaching them to documents to automate something
that has little or nothing to do with
Word.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If users would complain about how
Office is structured, perhaps we could get many simple applications that really
work instead of a few bloated, complex applications that we can barely
use.&lt;/p&gt;
&lt;p&gt;When they went to the hidden and
optional menu items, I was already baffled by the complexity of the product.
When they put functions that
&lt;strong&gt;only&lt;/strong&gt;
appear when you right click the right UI element, I hated it.  Now, they've had
to do away with their menu structure altogether because they won't fix the root
cause (bloat) and instead elect to add to
it.&lt;/p&gt;
&lt;p&gt;Here's the
bottom-line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If the menu structure isn't obvious, you're working with the wrong metaphors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Check out resources like Trolltech's Books
about GUI Design &lt;a class="reference external" href="http://doc.trolltech.com/4.1/guibooks.html"&gt;http://doc.trolltech.com/4.1/guibooks.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apple's Human Interface Guidelines
&lt;a class="reference external" href="http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/index.html"&gt;http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/index.html&lt;/a&gt; are pretty
clear.&lt;/p&gt;
&lt;p&gt;&amp;quot;Take advantage
of people’s knowledge of the world by using metaphors to convey concepts
and features of your application. Metaphors are the building blocks in the
user’s mental model of a task. Use metaphors that represent concrete,
familiar ideas, and make the metaphors obvious, so that users can apply a set of
expectations to the computer environment.&amp;quot;&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>What was this supposed to fix?</title><link href="https://slott56.github.io/2006_05_22-what_was_this_supposed_to_fix.html" rel="alternate"></link><published>2006-05-22T18:19:00-04:00</published><updated>2006-05-22T18:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-05-22:/2006_05_22-what_was_this_supposed_to_fix.html</id><summary type="html">&lt;p&gt;This is the part that helped me understand this:
&amp;quot;It was kind of like a miracle drug,&amp;quot; [Ruth Samuelson] said. &amp;quot;It's going to do
all this stuff and I just didn't think it was
possible.&amp;quot;&lt;/p&gt;
&lt;p&gt;It appears to me, just
reading this account, that there wasn't a clearly articulated problem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the part that helped me understand this:
&amp;quot;It was kind of like a miracle drug,&amp;quot; [Ruth Samuelson] said. &amp;quot;It's going to do
all this stuff and I just didn't think it was
possible.&amp;quot;&lt;/p&gt;
&lt;p&gt;It appears to me, just
reading this account, that there wasn't a clearly articulated problem.  Perhaps
the reporter is only summarizing, but the quote &amp;quot;The state and county had long
wanted to make a largely paper-driven court system more efficient and speed up
arrest processing, among other things&amp;quot; says a lot: &amp;quot;more efficient&amp;quot; is wishful
thinking.&lt;/p&gt;
&lt;p&gt;I wonder how this would have
played out if the criminal justice folks had a list of specific problems they
needed solved?&lt;/p&gt;
&lt;p&gt;For example (again,
hypothesizing here), &amp;quot;County employees continued to test more than 30 versions
of the system in 2005, and documented problem after problem.&amp;quot;  Did they have
concrete problems they were trying to solve?  Were they applying new technology
to older procedures?&lt;/p&gt;
&lt;p&gt;My experience is
that when you have a specific problem, the &amp;quot;solved&amp;quot; and &amp;quot;not solved&amp;quot; issues are
a little easier to lift up.  Documenting &amp;quot;problem after problem&amp;quot; sure sounds
like the users were exploring the software, rather than applying the
software.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Software Engineering doesn't fit the Standard Model</title><link href="https://slott56.github.io/2006_05_08-software_engineering_doesnt_fit_the_standard_model.html" rel="alternate"></link><published>2006-05-08T11:06:00-04:00</published><updated>2006-05-08T11:06:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-05-08:/2006_05_08-software_engineering_doesnt_fit_the_standard_model.html</id><summary type="html">&lt;p&gt;Nisley says &amp;quot;Imagine a programming contractor
proposing that increasing the average interrupt latency by 10 μs would
reduce the module size by 5 percent and improve the error rate by 3 percent.
When was the last time you saw precise numeric relations between various aspects
of a  programming project, before …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nisley says &amp;quot;Imagine a programming contractor
proposing that increasing the average interrupt latency by 10 μs would
reduce the module size by 5 percent and improve the error rate by 3 percent.
When was the last time you saw precise numeric relations between various aspects
of a  programming project, before the coding began, that actually worked out as
intended?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Precise Numeric Relations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First -- and foremost --
we have to recognize that programming is always about creating something
radically new.  If there was existing, measurable, quantifiable, well-known
stuff, we'd just use it.  It's software -- it's adaptable by definition.
Indeed, when the problem is well-understood, with well-known numeric
relationships, then that means there is an existing body of code, and we're not
really programming.  We're either simply installing or we're
configuring.&lt;/p&gt;
&lt;p&gt;I find that this &amp;quot;a
software design should be fully quantifiable&amp;quot; approach leads to some common
management mistakes.  Principally, it overlooks that fact that software
engineering isn't like most other forms of engineering because
&lt;em&gt;construction&lt;/em&gt;
is essentially free.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The final, complete, detailed design is
isomorphic to the code.  The additional cost to do the coding from a complete
design is essentially zero, it's recompiling the design into an executable form.
What we call the &amp;quot;construction&amp;quot; phase of a development project is really the
tail end of detailed design, merged into the hand-translation of that complete
design into an executable form.  No additional design artifact is produced
separate from the executable form of the design, making this distinction
blurry.&lt;/li&gt;
&lt;li&gt;If someone does know everything about a
given problem, we can often download their solution.&lt;/li&gt;
&lt;li&gt;Software is cloneable at zero additional
cost; we are not laying bricks with a fixed cost per brick
laid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This conflation of software
engineering and other engineering leads to some strange mismanagement
behaviors.&lt;/p&gt;
&lt;p&gt;1.  Mismanagers presume they
can (and will) gather complete knowledge of the problem, the solution and the
technology at design time.  This complete knowledge can only be gathered if we
have software in place that we can base our measurements and models on.  But if
we have this software, and it provides a complete, accurate model, why are we
programming?  If it works so well that it is the basis for quantified judgement,
why not just use it?&lt;/p&gt;
&lt;p&gt;2.  Mismanagers
presume we have repeatable task execution while doing software development.  In
manufacturing and construction, the foremen and general contractors look at
repeated execution of tasks, which is unlike the one-off world of software
development.  When we perform tasks repeatedly, we gain a quantitative model.
In software, we build it once and clone it many times.  If you have a detailed
model of the tasks involved in construction, you must be
&lt;em&gt;rewriting&lt;/em&gt;
the same software on which your model is
based.&lt;/p&gt;
&lt;p&gt;Managers have to get comfortable
working in a framework of what is unknown, and look at software construction
projects as an exercise in reducing their ignorance.  Demanding that something
should be fully quantifiable is essentially a self-contradiction -- we can't
know everything until we are done with a design which is isomorphic to the code
itself.  To understand software, one must understand Armour's Five Orders of
Ignorance &lt;a class="reference external" href="http://www.computer.org/portal/site/software/menuitem.538c87f5131e26244955a4108bcd45f3/index.jsp?&amp;amp;pName=software_level1&amp;amp;path=software/bookshelf/2005&amp;amp;file=2005s1fre.xml&amp;amp;xsl=article"&gt;http://www.computer.org/portal/site/software/menuitem.538c87f5131e26244955a4108bcd45f3/index.jsp?&amp;amp;pName=software_level1&amp;amp;path=software/bookshelf/2005&amp;amp;file=2005s1fre.xml&amp;amp;xsl=article&lt;/a&gt;.xsl&amp;amp;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before Coding Began.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My second complaint
-- and this is more subtle -- is the question of &amp;quot;before the coding began.&amp;quot;
This bothers me because it implies a strict &amp;quot;all-design-before-any-code&amp;quot; world
view.  This kind of world view often looks with suspicion on prototypes and
experiments.  This kind of &amp;quot;analyze the design on paper&amp;quot; management style is
good for many things.  It is particularly good for database design, and I don't
mean to devalue it completely.  However, it does lead to a number of big
mistakes.&lt;/p&gt;
&lt;p&gt;Without getting all Agile
&lt;a class="reference external" href="http://agilemanifesto.org/"&gt;http://agilemanifesto.org/&lt;/a&gt;,
it's important to note that the time before the coding begins is the time before
the project begins.  During the earliest of scope-defining phases, there is room
for prototypes and mock-ups that involve code, and may actually be
production-ready elements of the final
deliverable.&lt;/p&gt;
&lt;p&gt;Further, software involves
hellish complexity because of the huge spread in orders of magnitude (from bits
to gigabytes, often 10 orders of magnitude) and from nanoseconds to 168 hours
each week (another dozen orders of magnitude).  Simulation, modeling,
incremental development and testing, and reengineering are part of the software
development process.  All of this involves
coding.&lt;/p&gt;
&lt;p&gt;The most important reason that
there is not time before the coding began is because the code is actually the
final step in the detailed design.  Since the code is the most detailed level of
the design, all design details are code.  As soon as you look at details in one
area, you're looking at code.&lt;/p&gt;
&lt;p&gt;The twin
mistakes of &amp;quot;fully quantifiable&amp;quot; and &amp;quot;before coding began&amp;quot; are impediments to
good software development.  They can't be looked at as desirable features of a
software engineering process.  If we aim for fully quantifiable, we have to
ignore the fact that the cost for software is all design cost.  One consequent
mistake is to think that there's some benefit in separating the final phase of
design from coding the design in the executable language.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Notable Failure of Use Cases - Part 4</title><link href="https://slott56.github.io/2006_04_28-notable_failure_of_use_cases_part_4.html" rel="alternate"></link><published>2006-04-28T10:32:00-04:00</published><updated>2006-04-28T10:32:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-04-28:/2006_04_28-notable_failure_of_use_cases_part_4.html</id><summary type="html">&lt;p&gt;I recently reviewed some end user-authored use
cases, and they -- of course -- reflect the way people actually work.  The
computer system was largely incidental to what they
did.&lt;/p&gt;
&lt;p&gt;Each use case listed half a dozen
actors, had a dozen or more steps, and involved many off-line interactions among
the actors …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently reviewed some end user-authored use
cases, and they -- of course -- reflect the way people actually work.  The
computer system was largely incidental to what they
did.&lt;/p&gt;
&lt;p&gt;Each use case listed half a dozen
actors, had a dozen or more steps, and involved many off-line interactions among
the actors.  All of these are signs of business process definitions.  These can
be considered as use cases, but they are use cases written at a higher level of
abstraction than a single application
system.&lt;/p&gt;
&lt;p&gt;What went
wrong?&lt;/p&gt;
&lt;p&gt;First, I think it takes
training, spread over several days, to get a grip on use case writing.  The core
definition (&amp;quot;an actor interacting with a system to create business value&amp;quot;) isn't
obvious, even to professional business analysts.  The basic features of &amp;quot;actor&amp;quot;
and &amp;quot;interaction&amp;quot; require many examples, many writing exercises, and many
group-level discussions.&lt;/p&gt;
&lt;p&gt;The &amp;quot;business
value&amp;quot; part of the equation is often a show-stopper.  In an earlier experience
with end-user use-case writing, we spent four hours discussing what &amp;quot;business
value&amp;quot; really means.  Time and energy get expended in pursuing what I call an
&amp;quot;attractive sink&amp;quot; &amp;lt;{filename}/blog/2005/10/2005_10_31-notable_failure_of_use_cases_part_3.rst&amp;gt; that isn't really  of any value at all.
One of those sinks is the &amp;quot;&lt;strong&gt;Technology Workaround&lt;/strong&gt; &amp;quot;, another is the
&amp;quot;&lt;strong&gt;Reviews and Approvals&lt;/strong&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Documenting the Technology.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The users had
written a use case with dozens of individual steps.  They received their source
data on a CD.  In those days, CD players were rare and specialized, and only
servers had them.  The nearest server was in Hartford, so they mailed the CD to
Hartford where it was loaded onto a network drive.  The data from the CD was
FTP'd to the mainframe where a tape could be made.  The tape was then shipped to
another processing center where the actual processing happened.  The result of
that processing was FTP'd back to Hartford, where someone with root privileges
could move the final result to a shared area that the end users could copy to
their local file
server.&lt;/p&gt;
&lt;p&gt;Really.&lt;/p&gt;
&lt;p&gt;And
what was the business value?  Somewhere in the word &amp;quot;processing&amp;quot; was some kind
of algorithm that actually created something of business value.  This was -- to
the author -- so obvious that it didn't bear repeating in the use case
document.&lt;/p&gt;
&lt;p&gt;The more important question
is &amp;quot;where is the interaction?&amp;quot;  The use case didn't say what the actual business
user really does to initiate this process, make decisions or take actions.  The
business value was lost in a welter of
technology.&lt;/p&gt;
&lt;p&gt;The users were focused on
the &lt;strong&gt;Technology Workaround&lt;/strong&gt;  in this process.  It took a long
time to develop and it was deeply technical.  To many people, the point of use
cases is to capture the technology issues, not the creation of business
value.&lt;/p&gt;
&lt;p&gt;It wasn't until I threatened to
walk out of the meeting, and walk over &lt;a class="reference external" href="http://www.compusa.com/"&gt;CompUSA&lt;/a&gt; `  &amp;lt;{filename}/blog/2005/10/2005_10_31-notable_failure_of_use_cases_part_3.rst&amp;gt;`_ to buy a CD drive that the people started to
get the &amp;quot;business value&amp;quot; part of use case writing.&lt;/p&gt;
&lt;p&gt;Threatening to go to CompUSA wasn't
the &amp;quot;aha&amp;quot; moment, however.  I had to write down the numbers.  Six people times
$50 per hour times four hours is $1,200.  The CD player was $500.  And that
still wasn't the &amp;quot;aha&amp;quot; moment.&lt;/p&gt;
&lt;p&gt;The
&amp;quot;aha&amp;quot; moment came when they finally realized that IT would have proposed this
from the very beginning if they'd only described the problem instead of
insisting on this particular solution.  To get to the &amp;quot;aha&amp;quot; moment, we had to
review the various conversations that led to the implementation of the technical
work-arounds.  As they recapitulated the conversation, I provided the color
commentary from IT's point of view.  Mostly with comments like &amp;quot;why do they need
that?&amp;quot; and &amp;quot;we don't know what problem this solves, but the users are demanding
it.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Documenting Reviews.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many manual operations
exist to check the results of other manual operations.  There are two reasons
for this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The manual operation is
error-prone.&lt;/li&gt;
&lt;li&gt;The manual operation is governed by rules
which are murky, incomplete, or too complex for one person to
implement.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We cope with this by
defining business processes with numerous reviews and approvals.  In many cases,
the reviews are legacy operations to prevent a recurrence of of some
particularly visible mistake.  In these cases, the manual operations that we are
describing don't &lt;em&gt;create value&lt;/em&gt; , they prevent loss, which is not quite
the same thing.&lt;/p&gt;
&lt;p&gt;We see the effects of
these kinds of processes when the users document their off-line meetings,
notifications; the &lt;strong&gt;Reviews and Approvals&lt;/strong&gt; .  They are capturing details for the
things that are happening among human beings without support from an automated
system.&lt;/p&gt;
&lt;p&gt;What is the business value?
The standard answers include &amp;quot;we have to notify everybody (or that person, or
that team).&amp;quot;  But if we probe a bit, &amp;quot;everybody&amp;quot; or the named person don't need
the information to make a decision or take action.&lt;/p&gt;
&lt;p&gt;Sometimes the answer includes &amp;quot;we have
to be sure the results are correct.&amp;quot;  But the reason for incorrect results is
the manual process that creates the results in the first place.  Automating the
process eliminates the need for all the checking and review.  Some people are so
enamored with the processes that they don't see the irony in writing detailed
specifications for the exact processes automation is supposed to eliminate.&lt;/p&gt;
&lt;p&gt;We might see a step in the use case
like &amp;quot;when all five groups approve...&amp;quot;   Which means that we don't have an actor
interacting with the system.  Instead, we have five similar interactions on
behalf of five separate actors: each looks at the information, makes the
approval decision, and responds to the system with that decision.  Do all five
actors need the same information?  Doubtful.  What is unique about each of these
five brains that requires their
participation?&lt;/p&gt;
&lt;p&gt;The more interesting
question -- omitted from the use case -- was what happens when someone vetoes
the decision.  If all five don't approve, then what?  How are people notified?
What is the interaction?  Has it ever happened?  What did people do?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What can we do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What can we do to get the users
on track, writing use cases that express their interaction with a system to
create business value?  How do we get away from describing the manual processes
we're trying to eliminate?&lt;/p&gt;
&lt;p&gt;In the case
of documenting the &lt;strong&gt;Technology Workarounds&lt;/strong&gt; , it's a hard habit to break.  Many
-- too many -- people think the business analysis job is to translate the
business problem into IT techno-speak.  In doing this, they generally presume a
solution to a poorly-framed problem, and then document all kinds of irrelevant
technical details.&lt;/p&gt;
&lt;p&gt;Few -- too few --
realize that the business analysts job is to capture the business problem
accurately and completely.   So, one important piece of training is in
recognizing and describing problems irrespective of your favorite (or despised)
solution.&lt;/p&gt;
&lt;p&gt;It helps to work on
non-technology problems like moving topsoil into the backyard or finding out why
the windshield wiper keeps breaking.  Getting out of the technology framework
can help develop the skill of isolating underlying problems.&lt;/p&gt;
&lt;p&gt;In the case of documenting the
&lt;strong&gt;Reviews and Approvals&lt;/strong&gt; , it's difficult to separate the
business process from the business value created by the process.  However, with
some training and practice, it's possible to distinguish between the cook, the
toast, and the toaster used to prepare the
toast.&lt;/p&gt;
&lt;p&gt;In the restaurant setting, the
distinctions seem obvious.  But when users document reviews and approvals as
part of the business value, they may have conflated preparation or presentation
into the meal itself.&lt;/p&gt;
&lt;p&gt;I like to ask the
question &amp;quot;Are you describing the toaster or the toast?&amp;quot;  The toast is an
important part of the use case goal; it's the business value we are creating.
The user will interact with a toaster.   The trick is that neither of these are
the central feature of the use case.  The use case is about &amp;quot;making toast&amp;quot;.  The
use case will be used to design a better toaster.  The toaster, in turn, will be
used to make
toast.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequences.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One
consequence of getting away from technology workarounds is that many, many
things get questioned.  This, ultimately, is a good thing.  However, it does
lead to some frustration as people locate the boundaries of what can be
questioned, and what cannot be
questioned.&lt;/p&gt;
&lt;p&gt;One consequence of
separating the toaster from the toast is that we are often left with a
dependency loop.  A use case -- in a way -- depends on seeing a user interface.
The user interface will be designed from the use cases.  Which comes first,
interface or use case?  If we draw an interface to help the users write the use
cases, we've -- in a way -- designed the entire application.  Once we've drawn
the interface, why bother with all the other work, why not just write technical
specifications?&lt;/p&gt;
&lt;p&gt;One way to cut this
tangle is to draw UI sketches on paper.  Use them to help visualize potential
screens, displays, reports and buttons.  Add, change and delete while writing
the use cases.  Then, throw the paper sketch away.  Leave it to the GUI
designers to craft a presentation that fits the use cases.   It might
reconstruct the sketch, or it might be a lot
better.&lt;/p&gt;
&lt;p&gt;It's important that people who
write use cases are able to articulate the business value, and describe ways to
create that value.  Their job isn't to wrestle with technology, but to determine
how people should interact with a system to create the value they're
describing.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>The Weirdness Of Change (Revised)</title><link href="https://slott56.github.io/2006_04_07-the_weirdness_of_change_revised.html" rel="alternate"></link><published>2006-04-07T16:02:00-04:00</published><updated>2006-04-07T16:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-04-07:/2006_04_07-the_weirdness_of_change_revised.html</id><summary type="html">&lt;p&gt;The following weirdness often happens when we
encounter complex business problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The users hate something and want new
software.  They justify a project to spend $100K replacing something that
appears broken.&lt;/li&gt;
&lt;li&gt;The Business Analyst notes a control issue
that is really a conflict between software functionality and business rewards.&lt;/li&gt;
&lt;li&gt;The …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The following weirdness often happens when we
encounter complex business problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The users hate something and want new
software.  They justify a project to spend $100K replacing something that
appears broken.&lt;/li&gt;
&lt;li&gt;The Business Analyst notes a control issue
that is really a conflict between software functionality and business rewards.&lt;/li&gt;
&lt;li&gt;The resulting conversation leads to
organizational changes.&lt;/li&gt;
&lt;li&gt;The software development project schedule must
be changed to accommodate the change.&lt;/li&gt;
&lt;li&gt;This cycle of business change and software
change repeats a few times.  We are still &amp;quot;analyzing&amp;quot; and haven't produced much.&lt;/li&gt;
&lt;li&gt;The project changes are declared &amp;quot;out of
control&amp;quot; and the project is
cancelled.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some good things happened,
but the final result -- somehow -- appears bad.  One result of the business
analysis could have been a rewrite of the application to put in the &amp;quot;20-minute
solution&amp;quot;; a simple application which correctly captured the information,
supported the decisions and the
actions.&lt;/p&gt;
&lt;p&gt;The weirdness is, of course,
compounded by the famous &amp;quot;schedule compression&amp;quot; technique.  This is where IT
spins up analysts, architects, designers and programmers all at once.  When the
analysts throw firecrackers into the hen-house, what is everyone else supposed
do to while waiting for the users to settle down
again?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Is All Change Disruptive?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes.  Otherwise, it
isn't real change, just incremental adjustment.  In some cases, an adjustment is
all we need.  If so, we don't need a lot of business analysis and software
development.  If we're making incremental process improvements, then the
analysis won't ask disruptive
questions.&lt;/p&gt;
&lt;p&gt;When analysts uncover
discrepancies between &amp;quot;requirements&amp;quot; and the behavior that is rewarded in the
user organization, then there are three consequences:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Change will be disruptive: either behavior or
requirements must change.&lt;/li&gt;
&lt;li&gt;The requested software can only be part of the
change: behavior is the other part.&lt;/li&gt;
&lt;li&gt;The reward system will have to change, and the
software has to fit into that revised reward
system.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the key stakeholders don't
express this as a change to the organization, then it's just disruption, and no
one likes that.  Projects will be
cancelled.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User-Initiated Change&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One comment &lt;a class="reference external" href="http://www.haloscan.com/comments/slott/E20060405120217/#85108"&gt;http://www.haloscan.com/comments/slott/E20060405120217/#85108&lt;/a&gt; points at my lack of clarity here.
&amp;quot;Change implies questioning ones assumptions. Even if we can get users to do
that, we still have to actually get them to do the hard work of making changes.&amp;quot;
This quote reveals that the topic (user-initiated change) wasn't clearly
articulated.&lt;/p&gt;
&lt;p&gt;Change can -- eventually
-- result in an IT project being cancelled.  Good things happened, but the
project only catalyzed the change, and wasn't really part of it.  Since this is
user-initiated change, the comment doesn't apply.  The user's
&lt;strong&gt;did&lt;/strong&gt;
change their assumptions, and took on the hard work of making a change.&lt;/p&gt;
&lt;p&gt;The project was cancelled and IT was
blamed -- blamed! -- for a failed project.  What was the real failure?  Failure
to change and improve?  No.  It was a failure to engage in a technology
hobby.&lt;/p&gt;
&lt;p&gt;Avoiding change can either lead
to the cancellation of a project, or -- worse -- grumpiness with the result.
The comment (&amp;quot;even if we can get users to do that&amp;quot;) appears to stem from IT is
&lt;strong&gt;forcing&lt;/strong&gt;
change on users, a situation that makes no sense at all.  If we're in the
situation where users won't question their assumptions, then we have to ask
progressively more disruptive questions until they elect to
change.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tangent: Refusing to Change&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don't really want to talk
about flat refusal to change.   I mention it here only because this tangent may
be the meaning behind the comment.  If so, the comment is pretty far off topic.&lt;/p&gt;
&lt;p&gt;The topic can be summarized as
follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sometimes user-initiated change leads to
project cancellation&lt;/li&gt;
&lt;li&gt;Project cancellation is an IT failure,
irrespective of the benefits or the origin of the
change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refusal to change just doesn't
match the topic very well at all.  The topic is about IT being a catalyst for
change, but not participating in the change by building
software.&lt;/p&gt;
&lt;p&gt;Here's the situation: during
analysis we find contradictions -- requirements don't match behavior -- and the
contradictions can't be worked resolved.  We're in a tight spot.  The users
demand change in the form of new software, and refuse to change their behaviors,
then what is IT to do?  The project is going to get cancelled or denigrated as a
waste of money.  Which makes more business sense?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Development, Pedagogy and Hobby</title><link href="https://slott56.github.io/2006_03_27-development_pedagogy_and_hobby.html" rel="alternate"></link><published>2006-03-27T15:35:00-05:00</published><updated>2006-03-27T15:35:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-03-27:/2006_03_27-development_pedagogy_and_hobby.html</id><summary type="html">&lt;p&gt;In
&lt;em&gt;Rat-holes of Lost Time&lt;/em&gt;  [&lt;a class="reference external" href="https://slott56.github.io/2006_02_24-rat_holes_of_lost_time.html"&gt;Rat-Holes of Lost Time&lt;/a&gt; ], I thought out loud about software
development and how the resulting software product may or may not be of any
value.  In SEI terminology [&lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;view_qm&lt;/a&gt; ], this is Need Satisfaction.  Sometimes I
call it &lt;strong&gt;Solving The Problem&lt;/strong&gt; ™.&lt;/p&gt;
&lt;p&gt;I
tried to distinguish two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In
&lt;em&gt;Rat-holes of Lost Time&lt;/em&gt;  [&lt;a class="reference external" href="https://slott56.github.io/2006_02_24-rat_holes_of_lost_time.html"&gt;Rat-Holes of Lost Time&lt;/a&gt; ], I thought out loud about software
development and how the resulting software product may or may not be of any
value.  In SEI terminology [&lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;view_qm&lt;/a&gt; ], this is Need Satisfaction.  Sometimes I
call it &lt;strong&gt;Solving The Problem&lt;/strong&gt; ™.&lt;/p&gt;
&lt;p&gt;I
tried to distinguish two dimensions of need satisfaction: viability and
applicability.  Is it viable (workable, useful, valuable), and does it even
apply to the problem at hand?  They are, IMO, separate, and they lead to
different kinds of rat-holes and require different kinds of
interventions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comments.&lt;/strong&gt; A comment &lt;a class="reference external" href="http://www.haloscan.com/comments/slott/E20060223203608/#77978"&gt;http://www.haloscan.com/comments/slott/E20060223203608/#77978&lt;/a&gt; suggests that software development can be
done for pedagogical purposes, listing two examples.  I wasn't sure how to take
this because pedagogy and software development aren't the same thing.  They're
both &amp;quot;programming&amp;quot; exercises, but they have very different purposes.  If we're
going to conflate software development with other activities, why stop at
pedagogy?&lt;/p&gt;
&lt;p&gt;I'm not sure what --
precisely -- the comment meant, but I can see this from the comment: I didn't
make the distinction clear enough.  So, here's a summary that may clarify
things.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Software development builds &lt;strong&gt;software&lt;/strong&gt; .&lt;/li&gt;
&lt;li&gt;Pedagogical exercises build &lt;strong&gt;skills&lt;/strong&gt;  in software development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My point
remains that building software to solve a problem can involve pursuing
technology that would never actually solve the problem, or pursuing a solution
in a way it isn't really viable.  By a non-viable solution, I mean that it lacks
the quality attributes necessary to make it valuable.&lt;/p&gt;
&lt;p&gt;The comment notes that pedagogical
exercises come in a variety of forms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learning the language.&lt;/li&gt;
&lt;li&gt;Learning the libraries (I think this is
what &amp;quot;demo a certain ability&amp;quot;
means).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But why stop there?  There are
many other things we need to learn.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learning the layers of the technology
stack (e.g., web servers, LDAP servers, etc.)&lt;/li&gt;
&lt;li&gt;Learning to lessen resource use (or any
of the SEI cost-focused quality measures like cost of ownership to name a
few)&lt;/li&gt;
&lt;li&gt;Learning to get the largest of any of the
other SEI value-focused quality measures (including maintainability,
adaptability)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But why stop there?
There are still higher-level things we need to learn.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learning to allocate functionality appropriately.&lt;/li&gt;
&lt;li&gt;Learning design patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beyond pedagogy, there's also
the hobby of programming, which is yet another very bothersome thing
masquerading as software
development.&lt;/p&gt;
&lt;p&gt;When it comes to software
development, we can even split a hair between a software product that is
&amp;quot;bespoke&amp;quot; and belongs in one and only one context, and &amp;quot;product&amp;quot; which is more
generic and usable in a variety of contexts by a number of customers.  However,
there aren't dramatically different skills or lost-time rat-holes when we split
this hair.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Practice makes Permanent.&lt;/strong&gt; The craft or sullen art of
programming can be applied to a number of situations.  Software development is
the one I'm interested in because that's where the cost and value are.  Skill
building is tangential to my original post, but it does lead to the following
considerations of rat-holes and
learning.&lt;/p&gt;
&lt;p&gt;Skill-building in software
development is a very touchy subject because there is so much to learn.  In
addition to the language, library, layers, leasts and largests, we also have to
learn how to manage our time, design something that will work, debug something
that doesn't work, and write test cases to demonstrate how well it works.  And
we haven't even touched on asset management issues like configuration control,
change control and documentation.&lt;/p&gt;
&lt;p&gt;So,
let's take the comment as meaning that &amp;quot;pedagogy can have rat-holes, too.&amp;quot;  That
seems as good an interpretation as
any.&lt;/p&gt;
&lt;p&gt;We make permanent what we
practice.  If we have shoddy pedagogical practices, the skills we build are
shoddy skills.  Practice only makes perfect if we are practicing perfect things.
If we are practicing the wrong things, we will build poor skills and make those
non-skills permanent personal
liabilities.&lt;/p&gt;
&lt;p&gt;If pedagogy has rat-holes,
how do we manage those rat-holes?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning to Capture Knowledge.&lt;/strong&gt;   The answer is the same.  When we
learn to program (or learn the libraries, layers, leasts and largests), we are
focused on knowledge capture and using that captured knowledge appropriately.
We need to keep our heads out of the rat-holes and look at our
goals.&lt;/p&gt;
&lt;p&gt;We aren't focused on knowledge
capture of the language itself.  We are focused on knowledge capture in the
problem domain, on behalf of the users, for benefit of the users.  It's hard to
say this enough times to make it clear as crystal.  But we aren't capturing
knowledge on the technology, we are capturing knowledge in the area to which the
technology is applied:  we are capturing application
knowledge.&lt;/p&gt;
&lt;p&gt;For example, if we practice
writing the fewest lines of source code, we perfect obscurity.  We can claim we
are doing an optimization to use the least resources, but that may be a false
economy because the short, obscure statement may also be slower.  We can claim
we are learning nuances of the language, but that may be of no value, since we
write for the benefit of maintainers and adapters, who may not care about
language nuances.&lt;/p&gt;
&lt;p&gt;We could, for
example, dive into rat-holes to exploit things we don't understand fully;
perhaps the buzzwords appealed to us.  Design patterns are notorious for giving
us large hammers that make every problem look like a nail.  We could go
&lt;strong&gt;State&lt;/strong&gt; -happy,
or
&lt;strong&gt;Strategy&lt;/strong&gt; -happy,
and have an application with a useless level of flexibility.  Indeed, this is a
common indictment of OO programming: it's too complex for simple problems.  I
think this is true because of the rat-hole of design
patterns.&lt;/p&gt;
&lt;p&gt;We could implement things in
inappropriate places in the technology stack because it's the part we understand
or want to play with.  We put everything in JSP because we understand how it
extends HTML, and don't want to learn Java and Struts and all that OO
mumbo-jumbo.&lt;/p&gt;
&lt;p&gt;Or, we struggled to learn
XML and XSLT, so now we want to find a use for it.  Since it is a pretty general
programming model, it looks like the ultimate solution to all the world's
problems.  I don't know if XSLT is a Turning-complete programming language; even
if it is, it's opaque for the most part, and it becomes a real rat-hole of lost
time.  It can be slow, and it can be obscure; is it solving our
problem?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Course Corrections.&lt;/strong&gt; The most important course correction comes
from having a goal.  If we are developing software, we have a goal.  If we are
learning, we have to establish goals, or we're doomed to chasing around in the
rat-warrens.  If, on the other hand, this is a hobby, goals don't matter -- code
away.&lt;/p&gt;
&lt;p&gt;Establishing goals for learning
isn't too difficult.  One source is the on-line tutorials to help a vendor (or
an open-source project) sell their product.  The other source for goals is the
actual source for open-source projects.  Even a commercial framework (like
Micro$oft .Net) has tons of open-source projects associated with it.  Use these
projects to establish a standard of professionalism.  Avoid pursuing every
buzzword, every inappropriate piece of technology, every non-viable solution,
and every non-solution.  Instead, aspire to the standards set by open-source
projects.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Rat-holes of Lost Time</title><link href="https://slott56.github.io/2006_02_24-rat_holes_of_lost_time.html" rel="alternate"></link><published>2006-02-24T01:36:00-05:00</published><updated>2006-02-24T01:36:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-02-24:/2006_02_24-rat_holes_of_lost_time.html</id><summary type="html">&lt;p&gt;Much of software development is best described as
&amp;quot;problem-solving&amp;quot;.  Much of the rest, BTW, is knowledge
capture.&lt;/p&gt;
&lt;p&gt;When we look at the time spent
on problem solving we can see four potential outcomes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Time is spent producing a viable solution to
the actual problem.&lt;/li&gt;
&lt;li&gt;Time is spent producing a non-solution …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Much of software development is best described as
&amp;quot;problem-solving&amp;quot;.  Much of the rest, BTW, is knowledge
capture.&lt;/p&gt;
&lt;p&gt;When we look at the time spent
on problem solving we can see four potential outcomes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Time is spent producing a viable solution to
the actual problem.&lt;/li&gt;
&lt;li&gt;Time is spent producing a non-solution to the
actual problem.&lt;/li&gt;
&lt;li&gt;Time is spent producing a solution to
something that isn't the actual problem.&lt;/li&gt;
&lt;li&gt;Time is spent producing a non-solution to
something that isn't the actual
problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, we want to invest
in the first (solving the problem) and avoid non-solution activity, and
non-problem-focused activity.  The latter three situations are sometimes called
&amp;quot;spinning the wheels&amp;quot;, but they are very different situations, almost nothing
alike.  We'll separate #2 (non-solution) from #3 and #4
(non-problem).&lt;/p&gt;
&lt;p&gt;A non-solution is one of
those regrettable situations where the programmers think and work and meet and
develop and when they're done, we have one or more new problems.  Sometimes the
new problems are less onerous, which means we are seeing progress.  Other times,
the new problems are no less a burden, and we've merely shifted the problem
around a bit.  Sometimes, the lessons learned have more value than the
non-solution.&lt;/p&gt;
&lt;p&gt;Bad algorithms become a
large and costly processor; bad data structures become a large storage array and
complex backups; non-solutions to the real
problems.&lt;/p&gt;
&lt;p&gt;Activity focused on a
non-problem is much more costly.  When we're done, we haven't addressed the real
problem at all.  We haven't changed the problem to something simpler, we haven't
shifted the problem to something more tractable, nor have we learned lessons
which can be applied to solving the
problem.&lt;/p&gt;
&lt;p&gt;We make a wrong assumption, we
code to that assumption.  At the end of the day, some (or all) of the code is
worthless.  Perhaps, surfacing the bad assumption is a good thing, but we
weren't even addressing the problem, we were working around our faulty
assumption.  Couldn't we have spotted the wrong assumption
sooner?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perceptual Narrowing&lt;/strong&gt; .  Pursuing non-problems and
non-solutions are two examples of &amp;quot;Perceptual Narrowing&amp;quot;.  We think that our
activity is important.  However, a little reflection reveals that it can't lead
to success.  The sooner we can see that we are not going to be successful, the
sooner we get out of the rat-holes and onto a useful course of
action.&lt;/p&gt;
&lt;p&gt;The trick in avoiding
perceptual narrowing is to stop doing what isn't working, breathe normally and
think logically about what we need to accomplish, not what we think we need to
do.  When should we stop?  How do we know to
stop?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategies&lt;/strong&gt; .
Pursuing a non-solution can be prevented by setting more than one mind to the
activity.  Exposing your thinking in pairs often separates rat-holes from viable
paths toward a solution.  The process of &amp;quot;talking it through&amp;quot; forces some
justification and some focus on the core
problem.&lt;/p&gt;
&lt;p&gt;Pursuing a non-problem is
largely prevented by active management engaged in the problem-solving process.
The idea is to assure that the technical giants really understand the problem,
the cost of the problem and the value of solving the actual problem -- as
presented.&lt;/p&gt;
&lt;p&gt;The real challenge is to
assure that the problem is defined, and the value of a solution is also defined.
Too many technical people are left to contemplate the myriad, interlocking
mysteries of business, technology, corporate strategy, budget, schedule, and
risk.  There are sub-problems, contingent problems, derived problems, nascent
problems and irrelevant details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cutting the Gordian Knot&lt;/strong&gt; .  One technique that can be applied to
sorting out the problem from the non-problem, and the solution from the
non-solution is a multiple-step process.  Taking multiple steps is a way to
expose the thinking at the end of each step, providing some reflection, feedback
and chance to articulate where we are and where we are
aimed.&lt;/p&gt;
&lt;p&gt;First, and most important, is
defining the problem.  IT people leap past the problem into the solution as
naturally as they breathe.  It's a hard habit to
break.&lt;/p&gt;
&lt;p&gt;Second, and almost as important,
is a written record.  A meeting that defines the problem and produces a written
statement of the problem is an excellent start.  Once defined, solutions can be
brainstormed at a separate meeting.  A written log of ideas, subject to some
review and thought, is a great way to select viable alternatives for further
investment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On Your Own&lt;/strong&gt; .  But what do you do when you're solving a
small problem, by yourself, in your cubicle?  The same discipline applies.  Big
formal documents, of course, are a waste of time.  However, a &amp;quot;journal&amp;quot; or
&amp;quot;blog&amp;quot; of problems, alternatives and solutions is just what the doctor
ordered.&lt;/p&gt;
&lt;p&gt;Programming -- as I claimed at
the outset -- is knowledge capture.  If you can't write, you can't code.  You
don't have to write well.  But you have to be able to write in a variety of
languages.  Svenska, Engelska, Python, Java, SQL, XML, HTML, JSP, are all just
part of the job.&lt;/p&gt;
&lt;p&gt;When working alone,
it's critical to write things down.  The discipline of writing will often lift
up a non-problem for what it is -- a rat-hole of sunk cost.  Other times, the
written summary of the candidate solution is something we'd be embarrassed to
publish; if so, why put in any
time?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Faulty Assumptions&lt;/strong&gt; .  The discipline of writing may be
the best way to surface improper assumptions.  How?  The answer is references.
A footnote is what separates a fact from an assumption.  Preventing faulty
assumptions may be the way to prevent the perceptual narrowing that leads us
into a rat-hole of lost time.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Don't Pave the Cowpaths</title><link href="https://slott56.github.io/2006_02_19-dont_pave_the_cowpaths.html" rel="alternate"></link><published>2006-02-19T21:33:00-05:00</published><updated>2006-02-19T21:33:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-02-19:/2006_02_19-dont_pave_the_cowpaths.html</id><summary type="html">&lt;p&gt;In it, Bruce Silver recollects process
reengineering gurus who warned &amp;quot;Don't pave the cowpaths!&amp;quot;.  Presumably because
the cow path was a random walk all over the pasture land, and wasn't the most
efficient course.&lt;/p&gt;
&lt;p&gt;However, anyone who
was watched cows at work will tell you that the cow path is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In it, Bruce Silver recollects process
reengineering gurus who warned &amp;quot;Don't pave the cowpaths!&amp;quot;.  Presumably because
the cow path was a random walk all over the pasture land, and wasn't the most
efficient course.&lt;/p&gt;
&lt;p&gt;However, anyone who
was watched cows at work will tell you that the cow path is absolutely the most
efficient possible path.  It may wander, but it follows the contours of the land
to minimize the energy the cow expends wandering from food to barn and back to
food.&lt;/p&gt;
&lt;p&gt;I think the metaphor, while
colorful, may not be completely apt.  The point about automating a
poorly-designed legacy process is very important.  Maybe there's a better
metaphor for this bad behavior.&lt;/p&gt;
&lt;p&gt;Since
cows (and most animals) are ruthlessly lazy, we have to be careful about
metaphors based on their behavior.  Automating a badly-designed business process
is more like putting people-movers in a labyrinth than it is like paving a
cow-path.  A bad business process, like a maze, is something people create to
make the walking around more important than reaching the goal.  Walk through a
garden maze, and you'll see that the point of it is to conceal the
goal.&lt;/p&gt;
&lt;p&gt;Since &amp;quot;paving the cowpath&amp;quot; is
shorter and more colorful than &amp;quot;putting a people mover in the labyrinth&amp;quot;, I
can't offer any real literary improvement.  But I like my formula better because
it points to the root-cause problem a little more clearly.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Stating the Problem</title><link href="https://slott56.github.io/2006_01_20-stating_the_problem.html" rel="alternate"></link><published>2006-01-20T12:01:00-05:00</published><updated>2006-01-20T12:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-01-20:/2006_01_20-stating_the_problem.html</id><summary type="html">&lt;p&gt;RL's blog &lt;a class="reference external" href="http://rlucente.bloki.com/blog"&gt;http://rlucente.bloki.com/blog&lt;/a&gt; is
full of scrambling attempts at stating a problem.  While, in principle, stating
a problem is a trivial exercise (someone can't do something), RL has managed to
make it wonderfully complex.  The root cause of the complexity could be a
fundamental unwillingness to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;RL's blog &lt;a class="reference external" href="http://rlucente.bloki.com/blog"&gt;http://rlucente.bloki.com/blog&lt;/a&gt; is
full of scrambling attempts at stating a problem.  While, in principle, stating
a problem is a trivial exercise (someone can't do something), RL has managed to
make it wonderfully complex.  The root cause of the complexity could be a
fundamental unwillingness to state the problem without including technology
hints like &amp;quot;database&amp;quot; or &amp;quot;hierarchy&amp;quot; or &amp;quot;project management&amp;quot; or &amp;quot;change
control&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When
the portal goes live, 10,000 people will want
accounts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
help desk can't handle 10,000 account activation
requests.&lt;/p&gt;
&lt;p&gt;The problem here will never
change.  My favorite technology may not solve this problem.  In spite of the
problem not being nuanced enough to justify a month of programming, that is the
problem.  It is only that, and it won't
change.&lt;/p&gt;
&lt;p&gt;My advice?  Look at the people
you are supposed to be helping.  What can't they do?  In an hour of observing,
you should be able to figure out what they can't do and what is blocking them.
The point of software is to remove constraints on their work-space so that they
can do more with
less.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Forces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On
the one hand, we could hire a suitably-sized help desk staff for the week or so
that the desk will be flooded with account open requests.  10,000 requests
spread over 40 hours will be 250/hour, 4 each minute.  The calls aren't trivial,
we need to establish identity of the users, each call will take 5 minutes or
more.  You'd need a staff of 20+ to handle the flood; they'd only work for that
week.&lt;/p&gt;
&lt;p&gt;The portal toolset has a
self-registration portlet, but it has no validation, we'll need to add
functionality to establish identity.  Most of the 10,000 users are listed on an
employee file, where we have enough personally identifiable information to
establish identity.  Few of the 10,000 users have existing application or
network access accounts that can be used as part of single-sign-on
solution.&lt;/p&gt;
&lt;p&gt;Some of the potential users
are at remote locations and remote security teams will have to establish
identity for them.  There's a workflow for requests involving the help desk,
remote security, and the help desk.&lt;/p&gt;
&lt;p&gt;We
can't email people their passwords.  Direct mail, while possible, is also
expensive.  Further, direct mail is relatively removed from the high-tech image
of the portal.  This is marketing, and a high-tech portal needs a high-tech
registration process so that people can fully embrace this as central to their
work-life.&lt;/p&gt;
&lt;p&gt;Some remote sites have LDAP
servers that we can interrogate to establish identity.  Some, however, do not,
and will require a more manual
process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All
of the various forces and nuances of the problem don't change the fundamental
problem.  There's something people can't do.  They can't establish identify and
create accounts for 10,000 users in the space of a week.  All of the other
forces that shape the solution don't change the
problem.&lt;/p&gt;
&lt;p&gt;Now, folding in my technology
choices (J2EE, JDBC, Struts/JSF, etc.) doesn't change the
problem.&lt;/p&gt;
&lt;p&gt;Adding features (logging the
interactions with the help desk, integrating with other LDAP servers,
bulk-loading people with existing accounts) doesn't change the
problem.&lt;/p&gt;
&lt;p&gt;It's a hard discipline to
simply state what people can't do, and stick to it in spite of all the appealing
technologies and features.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Why Is OO So Popular?</title><link href="https://slott56.github.io/2006_01_10-why_is_oo_so_popular.html" rel="alternate"></link><published>2006-01-10T03:29:00-05:00</published><updated>2006-01-10T03:29:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-01-10:/2006_01_10-why_is_oo_so_popular.html</id><summary type="html">&lt;p&gt;&amp;quot;Polymorphism is nice as well, although I can't
grok (yet) why this is necessarily not part of non-OO things. I'm not clear that
it goes with the strong binding of state and method in a
class.&amp;quot;&lt;/p&gt;
&lt;p&gt;Polymorphism isn't necessarily
part of OO.  Python actually has polymorphic functions outside of class …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;Polymorphism is nice as well, although I can't
grok (yet) why this is necessarily not part of non-OO things. I'm not clear that
it goes with the strong binding of state and method in a
class.&amp;quot;&lt;/p&gt;
&lt;p&gt;Polymorphism isn't necessarily
part of OO.  Python actually has polymorphic functions outside of class
definitions.&lt;/p&gt;
&lt;p&gt;Further, Python offers an
interface called &amp;quot;callable&amp;quot;, which makes an object equivalent to a function,
giving you stateful function-like things with hysteresis (or other odd
not-very-function-like properties).  [It isn't really an interface, it's a
special method name, but that's just
syntax.]&lt;/p&gt;
&lt;p&gt;The Java distinctions between
class and method can be teased apart in the Python world.  This causes me to
think that the crispness of some of these Java-world OO definitions -- while
laudable -- isn't essential to good
programming.&lt;/p&gt;
&lt;p&gt;AND.  Smalltalk (like
Python) was free of type declarations.  Originally, OO seems to have been
type-less.  Big, complex, subtle and profound simulations were built in
Smalltalk (and some related earlier OO languages like Simula) and LOOPS (Lisp
with Objects) without benefit of formal
type-checking.&lt;/p&gt;
&lt;p&gt;What does this
mean?&lt;/p&gt;
&lt;p&gt;C++ introduced strong typing and
Java perpetuated that.  C++ suffers from the bizarre mish-mash of types with
class names, but no actual class objects.  Without a root &amp;quot;object&amp;quot; declaration,
C++ collection classes require the very complex template mechanism.  Why is this
better than C?  I don't know.  C++ adds inheritance and encapsulation to C, but
the strong typing also adds templates.  A net loss,
IMO.&lt;/p&gt;
&lt;p&gt;Java introduced class objects and
good memory management to C++; it recast everything to stem from object, making
the collection classes almost as simple as Smalltalk.  To banish multiple
inheritance, it introduced interfaces (approximately a wash between what was
lost and what is gained).&lt;/p&gt;
&lt;p&gt;But the
recent hot tickets (Perl, PHP, Ruby and Python) don't have formal type
declarations.  I'll set aside Perl and PHP.  Perl's OO material is ungainly and
doesn't seem to be widely used.  PHP has OO machinery.  It looks very nice, but
it, too, seems to be largely ignored in favor of the excellent HTML templating
engine.&lt;/p&gt;
&lt;p&gt;Ruby and Python are OO to the
very core of the virtual machine, giving them more complete polymorphism.  Also,
lacking type declarations, you are freed from the complexity of the subtle
interface declarations required to pile not-very-similar things into a useable
collection class.  You can just bunch all kinds of things into a polymorphic
Python collection as long as they have the right method signatures, all other
considerations be damned.&lt;/p&gt;
&lt;p&gt;The Real
Benefits of Java.&lt;/p&gt;
&lt;p&gt;I think it isn't
objects -- per se -- that are the appeal of OO programming.  I think it is many
things, exemplified by Python.  (Why Python? you ask.  Because Python predates
Java.)  I think the currency of Java, Python and Ruby comes from a 1-2 punch of
coolnesses.&lt;/p&gt;
&lt;p&gt;1.   Powerful tools that
make compiling, linking and executing a breeze.  Ada tools in the 80's struggled
to do the simplest compilation dependency checking -- there were elaborate
provisions for libraries and library lookups and reconciliations and junk that
Java does for free without even asking.   Python embeds the compiler and the JVM
into a single entity, making the whole &amp;quot;compile&amp;quot; thing seamless, silent,
odorless and grease-free.&lt;/p&gt;
&lt;p&gt;2.  A
rational approach to programming in the large.  Java has packages, (files),
classes and methods.  Python has packages, modules/files, classes and methods.
Python packages are more than just a path to a file.  C just had files, you were
on your own for any other structure you wanted to impose.  C++, similarly, is
largely just files, it takes craft and skill to manage the
complexity.&lt;/p&gt;
&lt;p&gt;I think these two reinforce
each other as part of a feedback loop.   I think the modern, hot-ticket
languages all provide insanely powerful tools and highly structured
programming.&lt;/p&gt;
&lt;p&gt;The tougher question is
&amp;quot;what is next?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer, I think, is
&amp;quot;more of the same&amp;quot;.  I think that Java's lack of effective DRY mentality is a
problem.  There is too much extra information floating around in JavaDoc's that
repeat parts of the code and XML files that repeat parts of the
Java.&lt;/p&gt;
&lt;p&gt;The hard problems (defining the
problem, defining data structures that solve the problem, defining functions to
manage the data structures that solve the problem) won't go away.  However, more
powerful tools make it easier to explore same with lower costs and risks.&lt;/p&gt;
&lt;p&gt;Hence my investment in learning
Django.  I think this kind of thing (not this specific thing) is the reason why
Ruby on Rails is welcomed by many web developers as packaging all the standard
best practices in one place.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Tabular Results</title><link href="https://slott56.github.io/2005_12_13-tabular_results.html" rel="alternate"></link><published>2005-12-13T11:43:00-05:00</published><updated>2005-12-13T11:43:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-12-13:/2005_12_13-tabular_results.html</id><summary type="html">&lt;p&gt;The &amp;quot;correct&amp;quot; answer is to fully normalize the
design and get away from a mixed bag of columns and nulls.  The MESS is bad from
every perspective, except query performance.  A semi-normalized design that
separates the STATE CHANGES from the ESSENTIAL DEFINITION is an optimal design
in many respects.&lt;/p&gt;
&lt;p&gt;Here …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &amp;quot;correct&amp;quot; answer is to fully normalize the
design and get away from a mixed bag of columns and nulls.  The MESS is bad from
every perspective, except query performance.  A semi-normalized design that
separates the STATE CHANGES from the ESSENTIAL DEFINITION is an optimal design
in many respects.&lt;/p&gt;
&lt;p&gt;Here are the tabular
results that show the cost of fragmentation in size and
time.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;fragmented size&lt;/td&gt;
&lt;td&gt;fragmented time&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Denorm&lt;/td&gt;
&lt;td&gt;1.58&lt;/td&gt;
&lt;td&gt;2.67&lt;/td&gt;
&lt;td&gt;1.11&lt;/td&gt;
&lt;td&gt;1.13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Semi-Norm&lt;/td&gt;
&lt;td&gt;1.63&lt;/td&gt;
&lt;td&gt;2.13&lt;/td&gt;
&lt;td&gt;1.49&lt;/td&gt;
&lt;td&gt;1.56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Norm&lt;/td&gt;
&lt;td&gt;1.73&lt;/td&gt;
&lt;td&gt;2.23&lt;/td&gt;
&lt;td&gt;1.46&lt;/td&gt;
&lt;td&gt;2.04&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Normalization Results</title><link href="https://slott56.github.io/2005_12_12-normalization_results.html" rel="alternate"></link><published>2005-12-12T12:16:00-05:00</published><updated>2005-12-12T12:16:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-12-12:/2005_12_12-normalization_results.html</id><summary type="html">&lt;p&gt;Experimental results depend on details of the
database server and the data model used.  Actual application software may have
other confounding problems that make these results less dramatic or more
dramatic when applied to a existing application
design.&lt;/p&gt;
&lt;p&gt;I compared three table designs
described in a previous posting &lt;a class="reference external" href="https://slott56.github.io/2005_12_01-normalization_experiment_protocol_revised.html"&gt;Normalization Experiment …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Experimental results depend on details of the
database server and the data model used.  Actual application software may have
other confounding problems that make these results less dramatic or more
dramatic when applied to a existing application
design.&lt;/p&gt;
&lt;p&gt;I compared three table designs
described in a previous posting &lt;a class="reference external" href="https://slott56.github.io/2005_12_01-normalization_experiment_protocol_revised.html"&gt;Normalization Experiment Protocol&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The multiple entity sub-species MESS with
many NULL columns and updates.&lt;/li&gt;
&lt;li&gt;A partially normalized table with &amp;quot;core&amp;quot;
entities and &amp;quot;extension&amp;quot; entities.&lt;/li&gt;
&lt;li&gt;A fully normalized table that extracts
all of the extra entities to create rows from related clusters of
columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used three update scenarios
for each design.  The first job did only two updates -- one to update each
sub-entity's attributes.  I compared this with scenarios doing five updates and
ten updates.  The higher number of updates would show the effects of any storage
reclamation strategy the RDDBMS
used.&lt;/p&gt;
&lt;p&gt;The MESS storage grew by a factor
from 1.58 to 2.67, as expected.  Each update replaced NULL's or short strings
with longer strings, taking up more storage, leading to rows being placed
elsewhere in the file structure.&lt;/p&gt;
&lt;p&gt;The
MESS query time, however, did not grow as rapidly as the storage did.  There is
only a 12% penalty from fragmentation.  This is interesting, and most likely
reflects the very small size of the sample data (100 rows).  Since the database
only occupies a few physical blocks, it can be read quite rapidly in spite of
fragmentation.  A larger database would have a larger performance
penalty.&lt;/p&gt;
&lt;p&gt;The partially normalized
storage grew by a factor from 1.62 to 2.12.  Separating the columns which change
from the columns which are static reduces fragmentation.  Query performance, as
expected from doing joins and using unique indexes, was 49% to 56% longer after
a series of updates to this
structure&lt;/p&gt;
&lt;p&gt;The fully normalized storage
grew by a factor from 1.73 to 2.23.  The fully normalized version had one row in
each table before fragmentation, and a number of rows after fragmentation.
Query performance took between 46% and 104% longer after the updates due to the
change in cardinality from 1:1 to 1:n.&lt;/p&gt;
&lt;p&gt;Comparison between structures reveals
that the partially normalized has a performance penalty of just 14%.  Without
fragmentation, the partially normalized structure may actually return results
faster than the denormalized MESS.  The fully normalized structure, with a 1:n
join has a performance penalty of 68% to 131%.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom Line&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The MESS has a storage penalty
as well as processing complexity and a risk of failure when defragmenting.  For
these reasons, it is unacceptable for transactional processing.  However, query
performance is 23% better than a fully normalized design, so it is suitable for
the Write Once Read Many world of data warehousing.  Making changes to this
table can be devastating to transactional
applications.&lt;/p&gt;
&lt;p&gt;The fully normalized
design has a performance penalty, but is a big enhancement and maintainability
win.  While it uses more storage, application changes involve merely adding
rows, not adding columns.  This immunizes the application programs against
change.  There is some fragmentation from updates, but since the rate of growth
is smaller, the frequency of defragmentations is reduced which reduces the risk
of failure during defragmentation.&lt;/p&gt;
&lt;p&gt;A
semi-normalized design does not endure the same level of fragmentation as a
denormalized MESS design.  Since it uses a 1:1 join instead of a 1:m join, the
performance is generally quite good.  Further, change can often be isolated to
the extension table, offering some protection from devastating change.  The rate
of fragmentation is the lowest and the performance penalty from a 1:1 join is
also quite low.&lt;/p&gt;
&lt;p&gt;The management overview
is this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Normalization is slow, but low
maintenance and easy to enhance.&lt;/li&gt;
&lt;li&gt;Denormalization is fast but suffers
fragmentation; it is high maintenance and hard to
enhance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This semi-normalized version,
however, requires the most insight to create.  It requires understanding the
attributes and their semantics.  Since a MESS design is little more than a
collection of attributes, the investment in understanding is minimal.  A fully
normalized design requires a complete understanding of the entities are defined,
but less knowledge of the update use
cases.&lt;/p&gt;
&lt;p&gt;Investments made in
understanding the application data and processing can pay dividends by reducing
administrative busy-work and reducing the risk of problems that are caused by
that administrative overhead.  Further, understanding the application can lead
to optimization of the data and the associated processing.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Normalization - More Comments</title><link href="https://slott56.github.io/2005_12_02-normalization_more_comments.html" rel="alternate"></link><published>2005-12-02T03:02:00-05:00</published><updated>2005-12-02T03:02:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-12-02:/2005_12_02-normalization_more_comments.html</id><summary type="html">&lt;p&gt;Fragmentation &amp;amp;amp; similar is sometimes a
storage problem in I/O generated, vs. the gross space consumed. This distinction
didn't leap out at me.&lt;/p&gt;
&lt;p&gt;Performance
degradation and storage expansion are closely related, but only for certain
kinds of queries.  Full table scans are penalized by sparsely used storage.
Individual row …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Fragmentation &amp;amp;amp; similar is sometimes a
storage problem in I/O generated, vs. the gross space consumed. This distinction
didn't leap out at me.&lt;/p&gt;
&lt;p&gt;Performance
degradation and storage expansion are closely related, but only for certain
kinds of queries.  Full table scans are penalized by sparsely used storage.
Individual row retrievals, however, aren't as badly penalized.  Oracle's
row-chaining does penalize even a single-row retrieval, but this is a problem
unique to Oracle.&lt;/p&gt;
&lt;p&gt;Normalization can
have a performance payoff from row-level locking if your locking scheme in the
DBMS engine is correct. Spread things all over hell's creation and you get more
frequent blocks, deadlocks, and live-locks. Didn't see
this.&lt;/p&gt;
&lt;p&gt;Concurrency and concurrent
performance are more sensitive issues, not really amenable to empirical study.
Yes, this does need to be mentioned.  However, in the cases that will be
examined, normalization has little locking benefit.  Typically, the MESS problem
means that we were not clear on what the entity was to begin with.  Once
normalized, there will likely be transactions that will lock several of the
normalized tables and increase the possibility of deadlock.  Generally, a
standard from-clause ordering will reduce problems.  The decomposition, however,
should include a recognition that that MESS was bad design; there really are
separate entities, and separate transactions with separate business rules.&lt;/p&gt;
&lt;p&gt;Related to the locking, update
anomolies are less frequent as you normalize. This is a big winner, and one of
the biggest as the concurrent users'
scales.&lt;/p&gt;
&lt;p&gt;Yes, Normalization is
Necessary.  However, the original MESS uni-table was created because update
anomalies weren't possible for other business reasons.  A close study of the
keys might reveal that update anomalies were a theoretical possibility, but no
update in the application would ever create inconsistent data.  Further
normalization wouldn't change that, since the business view is one of a
uni-table.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Normalization Experiment Protocol (revised)</title><link href="https://slott56.github.io/2005_12_01-normalization_experiment_protocol_revised.html" rel="alternate"></link><published>2005-12-01T11:24:00-05:00</published><updated>2005-12-01T11:24:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-12-01:/2005_12_01-normalization_experiment_protocol_revised.html</id><summary type="html">&lt;p&gt;The open question is &amp;quot;What is the cost of
fragmentation?&amp;quot;&lt;/p&gt;
&lt;p&gt;The cost has some
absolute components and some relative components.  Since fragmentation is
difficult to avoid except through grotesque over-allocation of space, the issue
is to control fragmentation through normalization.  A more important pair of
questions, then, are these:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The open question is &amp;quot;What is the cost of
fragmentation?&amp;quot;&lt;/p&gt;
&lt;p&gt;The cost has some
absolute components and some relative components.  Since fragmentation is
difficult to avoid except through grotesque over-allocation of space, the issue
is to control fragmentation through normalization.  A more important pair of
questions, then, are these:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What
are the background costs of fragmented
data?&lt;/li&gt;
&lt;li&gt;What are the relative merits
of normalizing to control
fragmentation?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The absolute costs are
relatively easy to identify: they are the costs of defragmenting.  These are the
downtime to defragment, and risk of failure in this processing which adds
complexity but does not create
value.&lt;/p&gt;
&lt;p&gt;The relative costs can be
measured through a comparison between three designs: denormalized, partially
normalized and fully normalized.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The denormalized design is the Multiple
Entity SubSpecies (MESS) or Uni-table.  Suitable for a number of data warehouse
purposes, but a poor choice for transactional applications.&lt;/li&gt;
&lt;li&gt;The partially normalized design
partitions columns into &amp;quot;core&amp;quot; and &amp;quot;extension&amp;quot; using a rough estimation of the
relative frequency of update.  Things rarely or never updated are part of the
core, and will be quite compact.  Things updated -- in particular, things with
an initial value of NULL -- go in the extension.  The extension is expected to
fragment, but the fragmentation will be isolated and (hopefully) under some
control.&lt;/li&gt;
&lt;li&gt;The fully normalized design partitions
columns into the dimension and a fact table that records individual events
separately.  The idea is that events accrete.  Replacing a NULL with event
information creates a sparse and fragmented table.  This is the CREEP - a
Continuously Re-Evolving Entity Pattern, where growth is part of the design.
Inserts make more sense than updates for evolving
entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the denormalized MESS
design.  The ev's are &amp;quot;Events&amp;quot; which are filled in by updates, leading to
fragmentation.  The business processing makes ev1 mandatory, and the other
events may, or may not happen.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE TABLE MESS(
    key    VARCHAR(20),
    ev1text    VARCHAR(100),
    ev1date    TIMESTAMP,
    ev2text    VARCHAR(100),
    ev2date    TIMESTAMP,
    ev3text    VARCHAR(100),
    ev3date    TIMESTAMP );
&lt;/pre&gt;
&lt;p&gt;Here's a normalized design
which controls fragmentation by isolating ev2 and ev3 event data into a separate
table.  The M2 table can be sparse and can
fragment.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE TABLE M1C(
    key VARCHAR(20),
    ev1text VARCHAR(100),
    ev1date TIMESTAMP );

CREATE TABLE M1X(
    key VARCHAR(20),
    ev2text VARCHAR(100),
    ev2date TIMESTAMP,
    ev3text VARCHAR(100),
    ev3date TIMESTAMP );

CREATE UNIQUE INDEX M1C_X1 ON M1C( key );

CREATE UNIQUE INDEX M1X_X1 ON M1X( key );
&lt;/pre&gt;
&lt;p&gt;The most interesting design is the following.  This uses inserts instead of updates
to fold in the additional data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE TABLE M2C(
    key VARCHAR(20) );

CREATE TABLE M2E(
    key VARCHAR(20),
    evt NUMBER,
    evtext VARCHAR(100),
    evdate TIMESTAMP );

CREATE UNIQUE INDEX M2C_X1 ON M2C( key );

CREATE INDEX M2E_X1 ON M2E( key );
&lt;/pre&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Normalization - Some Comments</title><link href="https://slott56.github.io/2005_11_30-normalization_some_comments.html" rel="alternate"></link><published>2005-11-30T16:53:00-05:00</published><updated>2005-11-30T16:53:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-11-30:/2005_11_30-normalization_some_comments.html</id><summary type="html">&lt;p&gt;&lt;em&gt;&amp;quot;How do we prevent storage fragmentation and the associated slow-down ?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why prevent ?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is hard to respond
to.  The ounce-of-prevent-pound-of-cure didn't resonate with the reviewer.  What
would resonate?  An in-depth discussion of the &amp;quot;prevention is an investment with
an indefinite period of return and correction is an ongoing cost&amp;quot; doesn't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;&amp;quot;How do we prevent storage fragmentation and the associated slow-down ?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why prevent ?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is hard to respond
to.  The ounce-of-prevent-pound-of-cure didn't resonate with the reviewer.  What
would resonate?  An in-depth discussion of the &amp;quot;prevention is an investment with
an indefinite period of return and correction is an ongoing cost&amp;quot; doesn't seem
to be appropriate because it side-tracks the main issue.  It's embarrassing to
have to include the &amp;quot;prevention is smart, ongoing correction is stupid&amp;quot;
phrasing.&lt;/p&gt;
&lt;p&gt;It appears that the value of
prevention vs. the cost of remediation/work-around is not perfectly
clear.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;On the one hand, we can design any old table, and compound this design with lots of additional processing to defragment storage periodically.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Is this phrase necessary?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a
slightly different question: Is it appropriate to characterize correction of a
problem as &amp;quot;lots of additional processing&amp;quot;.  I can't see any other way to
characterize it.&lt;/p&gt;
&lt;p&gt;Both questions point
to the same objection: prevention isn't of any value -- a known work-around is
&amp;quot;better&amp;quot;.  Okay, so what is the value proposition between correcting a problem
for the entire service life of the software and preventing that
problem?&lt;/p&gt;
&lt;p&gt;1.  Need Satisfaction?  Both
prevention and correction provide the same basic feature set in the application
software.&lt;/p&gt;
&lt;p&gt;2.  Resource Use?  Prevention
uses fewer resources, does not require down-time for table maintenance and
performs better.&lt;/p&gt;
&lt;p&gt;3.  Maintainability?
Maybe the normalized application is somehow seen as too complex.  In the case of
a trivial example with one table, normalization doubles the number of tables.
But when we have 100 tables, normalization adds 1, an increase in complexity of
only 1%.&lt;/p&gt;
&lt;p&gt;4.  Adaptability?  Maybe a
correctly normalized application is harder to adapt to new uses in the
enterprise.  However, this is what RDBMS views are for, so this doesn't seem
sensible.&lt;/p&gt;
&lt;p&gt;5.  TCO?  Since prevention
adds no ongoing maintenance and support, where correction adds processing (and
the risk of breakage, the resources to do this processing, poor performance,
additional storage and no-value down-time) it's hard to say what TCO benefit
there could be.&lt;/p&gt;
&lt;p&gt;In balance, it looks
like correcting the problem is valued strictly because it has a historical
precedent to the reviewer.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Normalization for Performace (revised)</title><link href="https://slott56.github.io/2005_11_25-normalization_for_performace_revised.html" rel="alternate"></link><published>2005-11-25T20:27:00-05:00</published><updated>2005-11-25T20:27:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-11-25:/2005_11_25-normalization_for_performace_revised.html</id><summary type="html">&lt;p&gt;Perhaps this is heresy.  Perhaps it merely shows
that the orthodox may be focused on short-term delivery, not long-term
value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CONTEXT AND PROBLEM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The client has a table we
could describe as following the M.E.S.S. -- Multiple Entity Sub-Species --
design pattern.  The hallmarks of this design are a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Perhaps this is heresy.  Perhaps it merely shows
that the orthodox may be focused on short-term delivery, not long-term
value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CONTEXT AND PROBLEM&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The client has a table we
could describe as following the M.E.S.S. -- Multiple Entity Sub-Species --
design pattern.  The hallmarks of this design are a large number of optional
columns, a large number of null attributes values, and generally sparse
data.&lt;/p&gt;
&lt;p&gt;The business reason is that raw
materials (&amp;quot;prospects&amp;quot;) are supplied from a variety of customers.  A number of
services are performed, all of which will update the prospect.  Each customer
relationship involves slightly different features of each prospect, but the
overall value-add business process is substantially similar.  The business
processes, viewed from a distance, are all nearly identical; they differ in some
details, but are more alike than
different.&lt;/p&gt;
&lt;p&gt;In this case, the situation
is compounded by a C.R.E.E.P. -- the Continuously Re-Evolving Entity Pattern.
Each &amp;quot;prospect&amp;quot; has an almost indefinite number of features, including events,
conditions, services, processes and relationships.  A CREEP object is often
miscast as a relational row, with each feature modeled as a column.  The
attributes may not be sparse, but they grow without any practical boundary, and
the naive mapping from attribute to column is often
inappropriate.&lt;/p&gt;
&lt;p&gt;The biggest consequence
of a MESS + CREEP design is that we have columns which are initially null, but
get filled with large text comments or dates.  We also have text comments which
evolve; rarely getting smaller.  This often leads to issues with the space
allocation in the RDBMS.  Before too long we have highly fragmented storage.  In
the case of Oracle, we have row chaining.   This fragmentation and chaining is a
performance burden with a number of candidate
solutions.&lt;/p&gt;
&lt;p&gt;How do we prevent storage
fragmentation and the associated
slow-down?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FORCES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We
can attempt to prevent fragmentation.  On the one hand, an ounce of prevention
has a historical ROI of 1600%.  On the other hand, this is radical surgery to
our way of looking at the problem.  It means one of two approaches: a higher
degree of normalization or pre-allocating storage.  We can easily pre-allocate
storage by using data types like
CHAR(&lt;em&gt;x&lt;/em&gt; )
which often pre-allocates all
x positions.
In this case, our rows will never change size when null fields are replaced with
data.  On the other hand, our rows wind up as gigantic objects; we can rarely
fit them within a database block of 4096 characters, making this approach
unworkable.&lt;/p&gt;
&lt;p&gt;We can attempt to cure
fragmentation.  On the one hand, we can design any old table, and compound this
design with lots of additional processing to defragment storage periodically.
While complex and slow, this does permit an incomplete design to be put into
production quickly.  In principle, something good could be said about this
approach, but it's hard to say something good about an incomplete design.  The
&amp;quot;solution&amp;quot; commonly adopted is to throw more processing at a simple problem;
something that is hard to characterize as good
design.&lt;/p&gt;
&lt;p&gt;When we look closely at the
normalization of this data we can identify two closely intertwined issues.
First, we have a MESS table, a number of &amp;quot;prospect&amp;quot; sub-species are collected
into a single, large table.  There are several ways to handle subclasses in a
relational database.  One approach is the unified MESS table, which unifies all
sub-species by providing the union of all possible attributes and making liberal
use of null.  Another approach is to decompose each subclass into distinct
tables.  This makes the processing more complex, since a number of tables must
be used, leading to a number of similar programs that differ in a few column
names and a table name.&lt;/p&gt;
&lt;p&gt;A third
choice is to mirror the sub-species inheritance in the table design.  A core
table contains the superclass attributes: those features which are truly common
(or very nearly common) to all subclasses.  Other tables contain subclass-unique
attributes and are joined to the core table as needed by specific applications.
When we look at this design closely, we often see that the core table attributes
are not really CREEP-style attributes: they are remarkable stable values.  Rows
go into the core table and stay in one place; minimizing fragmentation in the
normal course of events.&lt;/p&gt;
&lt;p&gt;The second of
the intertwined issues is the CREEP problem: we keep tacking features onto this
entity, some of which may not attributes in the narrow sense that attributes
should be understood.  By narrow, we mean the third normal form definition that
each attribute depends on the key and nothing but the key.  What we find is that
some attributes are part of a data tuple that has a timestamp, an actor's name,
a comment string, and possibly an official event or condition.  This is clearly
a subsidiary entity, not a cluster of related columns in the &amp;quot;prospect&amp;quot;
entity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SOLUTION&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When
we find MESS tables that also implement CREEP, the best solution is to properly
normalize the table into a number of distinct entities.  The MESS sub-species
should be split apart based on the commonality of the attributes.  A few
optional columns can help create an intellectually manageable number of tables.
There's no reason to be overly formal and rigidly denormalize each potentially
distinct sub-entity.  Where entities differ markedly in attributes as well as
processing, clean separate is appropriate.  Where entities differ in only a few
attributes and a bit of optional processing, separation isn't
necessary.&lt;/p&gt;
&lt;p&gt;The CREEP attributes are not
really columns in the first place.  The cluster of timestamp, actor's name,
comment string, the official event or condition should be a separate &amp;quot;event&amp;quot; or
&amp;quot;contact&amp;quot; fact table, with the &amp;quot;prospect&amp;quot; being a complex dimension associated
with a long sequence of events.  For performance reasons, a sequence of events
may be aggregated into a summary
attribute.&lt;/p&gt;
&lt;p&gt;In this case, adding events,
conditions, situations, and the like merely adds another kind of event to the
event fact table.  This is merely a row in the event-type dimension.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CONSEQUENCES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Normalizing
the MESS table to separate the sub-species adds tables to the database.  The new
tables, however, are not as sparse.  Further, the separation of data elements
will tend to reduce fragmentation of the data.  Updates will often be focused on
a sub-entity, moving around rows in a smaller and more densely-packed
tables.&lt;/p&gt;
&lt;p&gt;Many operations will now
require joins.  However, measurements typically reveal that there are fewer
physical data blocks with the more dense data model.  Further, only the core
&amp;quot;prospect&amp;quot; table has a large number of rows.  The normalized design reduces the
number of data blocks.  The various sub-species tables that are joined in are
often considerably smaller than the core
table.&lt;/p&gt;
&lt;p&gt;Many application programs will
have to be rewritten to use the core table plus a sub-entity table.  Generally,
this is done by defining application-specific views to conceal the join and
leave the original program largely unchanged, except for a rename of the
original table to the view of more properly normalized tables.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Notable Failure Of Use Cases - Part 3</title><link href="https://slott56.github.io/2005_10_31-notable_failure_of_use_cases_part_3.html" rel="alternate"></link><published>2005-10-31T19:52:00-05:00</published><updated>2005-10-31T19:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-31:/2005_10_31-notable_failure_of_use_cases_part_3.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Forces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While
the intent of the use case technique is clear, it requires some discipline and
creativity to execute
successfully.&lt;/p&gt;
&lt;p&gt;There seem to be three
attractive sinks for time and
energy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stepping In Sequence&lt;/strong&gt; .  Often, the first use cases
developed are often those that occur “early” in the business
process …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Forces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While
the intent of the use case technique is clear, it requires some discipline and
creativity to execute
successfully.&lt;/p&gt;
&lt;p&gt;There seem to be three
attractive sinks for time and
energy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stepping In Sequence&lt;/strong&gt; .  Often, the first use cases
developed are often those that occur “early” in the business
process.  In many cases, these are focused around inputs, or authentication, or
an overview of the processing steps.  In
&lt;em&gt;W&lt;/em&gt; ’s
case [&lt;a class="reference external" href="https://slott56.github.io/2005_10_26-notable_failure_of_use_cases.html"&gt;Notable Failure of Use Cases&lt;/a&gt; ], the login scenario was described in
detail.  The web-based customer interactions assumed that customer segmentation
had already occurred.  There were no uses cases that described the mysterious
process of customer
segmentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Free-Running Imagination&lt;/strong&gt; .  Business actors can find it hard
to separate what could
&lt;em&gt;possibly&lt;/em&gt;
be implemented in software from what must
&lt;em&gt;minimally&lt;/em&gt;
be implemented in software.  As an outsider, I like to use the “would you
sue us if that was omitted” question to separate needed from desired.  For
internal development teams, this question lacks resonance, making it difficult
to determine the actual business value of a use case.  In
&lt;em&gt;H&lt;/em&gt; 's
case [&lt;a class="reference external" href="https://slott56.github.io/2005_10_28-notable_failure_of_use_cases_part_2.html"&gt;Notable Failure of Use Cases - Part 2&lt;/a&gt; ], they were very uncomfortable with the
idea that something the user mentioned once was not absolutely
essential.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow the Precedent&lt;/strong&gt; .  Business actors who can become
narrowly focused on current operations, or an early proof-of-concept (POC).
Where the current operations include workarounds for incomplete or
non-integrated software applications, these are often canonized as processing
steps rather than constraints that could be changed.  When a POC embodies a
particular scenario, this is often considered as the only possible processing
scenario, and the use cases are simply details to supplement this processing
sequence.  In both
&lt;em&gt;W&lt;/em&gt; 's
and
&lt;em&gt;H&lt;/em&gt; 's
cases, early proof-of-concept thinking dominated the
implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
&lt;strong&gt;Stepping In Sequence&lt;/strong&gt;  problem appears to stem from a
failure to characterize the overall business value of the application.  Lacking
any guidance, the use-case writers attempt to begin with the process that seems
to occur first, then moving on to the process that seems to produces the most
tangible results.  This tends to omit preparatory steps that have an indirect
effect on the final results.  It helps to work backwards from the results, not
forward following the existing
process.&lt;/p&gt;
&lt;p&gt;The
&lt;strong&gt;Free-Running Imagination&lt;/strong&gt;  problem appears to stem from a
failure to focus on the business value that is created.  In many cases,
additional features do not create any additional value.  In some cases, the
additional flexibility or maintainability concerns increase the overall cost of
development and operational use, diluting the value
created.&lt;/p&gt;
&lt;p&gt;The
&lt;strong&gt;Follow the Precedent&lt;/strong&gt;  problem appears to stem from an
emphasis on business process without an understanding of the business value.
Process-oriented end-users often fail to understand the purpose behind the
process, and the value created by successful execution of the process.  In many
cases, processes create intangible or indirect benefits, like confidence in
correct execution of other
processes.&lt;/p&gt;
&lt;p&gt;The most critical portion of
any use case is the creation of business value.  The interaction scenarios
should be derived from the kind of value that is created.  Business value is
often intangible or indirect; examples include confidence, assurance,
compliance, certification, or authorization. For example, customer marketplace
segmentation may involve creation of user-specified segmentation rules.  These
user-specified rules are entered by an actor; the immediate business value is
the improved segmentation; this leads in turn to improved web sales which has
numerous other business consequences.  The user-specified rules must be
validated prior to their actual use on live customers.  This validation process
creates confidence in the rules.&lt;/p&gt;
&lt;p&gt;I feel
that a business analyst should (1) help users identify the indirect or
intangible value created by a use case, and (2) challenge every part of a use
case that does not contribute to the expressed value.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Notable Failure of Use Cases - Part 2</title><link href="https://slott56.github.io/2005_10_28-notable_failure_of_use_cases_part_2.html" rel="alternate"></link><published>2005-10-28T10:38:00-04:00</published><updated>2005-10-28T10:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-28:/2005_10_28-notable_failure_of_use_cases_part_2.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
company,
&lt;em&gt;H&lt;/em&gt; , is
a large, well-established financial services firm.  In order to meet regulatory
reporting requirements, they elected to build a data warehouse that would
integrate information from 40 applications to feed an application that would
produce the regulatory
reports.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;H&lt;/em&gt; put together a team of business analysts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
company,
&lt;em&gt;H&lt;/em&gt; , is
a large, well-established financial services firm.  In order to meet regulatory
reporting requirements, they elected to build a data warehouse that would
integrate information from 40 applications to feed an application that would
produce the regulatory
reports.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;H&lt;/em&gt; put together a team of business analysts and
end-users to determine the use cases, and document these.  Training consisted of
a half-day presentation on use
cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problems&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
use cases, while partially narrative in form, were not interactive and were
dominated by processing details, including algorithms, database structures, and
processing components.&lt;/p&gt;
&lt;p&gt;The operational
processing focus reached the point where the sequence of application programs
that was run during a particular production cycle was written up as a “use
case”.  This sequence involved no user interaction, no decision-making, no
confirmation, nor any controls for stopping or restarting.  The business value
for this &amp;quot;use case&amp;quot; was identical with the business value proposition for the
overall application; meaning that no additional information was supplied.
Indeed, this simply described the
implementation.&lt;/p&gt;
&lt;p&gt;There were many gaps in
the use cases.  One notable gap was the absence of any mechanism for validating
changes to the processing rules encoded in the database.  Lacking any defined
user interaction, the processing steps presumed that the rules appeared as if by
magic -- all consistent, complete and correct -- and were then processed through
an elaborate pipeline of programs.&lt;/p&gt;
&lt;p&gt;When
it was discovered that user rules did not appear in a final, perfect form, the
error handling and rerun processing immediately devolved into a quagmire of
ad-hoc steps and procedures.  Precisely the thing use case analysis is supposed
to prevent.  The use cases had not addressed interaction with users, but instead
became traditional program specifications.  Faced with issues where users must
analyze, make decisions, and take action, use cases were, in effect, abandoned.&lt;/p&gt;
&lt;p&gt;An additional problem with the highly
procedural and operational use cases appeared when database optimizations were
attempted.  After a year, and three production releases, it became apparent that
a large number of rows were moved from warehouse to datamart, these rows were
then processed through an elaborate pipeline, finally a subset of these rows
were used to do end-user reporting.  A little reflection showed that only the
final subset needed to be moved from warehouse to datamart, reducing the volume
of data to two percent of the original
volume.&lt;/p&gt;
&lt;p&gt;However, since the use cases
gave a very specific processing sequence, irrelevant to the actual results
desired, it was not possible to make otherwise transparent changes to the
processing.  We found that the end-user’s mental model of the processing
sequence could not be easily separated from the results obtained.  Moving the
subset selection predicates forward in the pipeline was not seen as a reduction
in data volume, but as a reduction in processing scope.  The users demanded a
complete proof-of-concept demonstration plus parallel testing to assure that the
predicates produced the same results irrespective of their position in the
pipeline.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Numerology</title><link href="https://slott56.github.io/2005_10_27-numerology.html" rel="alternate"></link><published>2005-10-27T13:58:00-04:00</published><updated>2005-10-27T13:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-27:/2005_10_27-numerology.html</id><summary type="html">&lt;p&gt;Here are three additional levels of numerology
that just don't belong the discipline of software
architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Empiricism&lt;/strong&gt; .
Ideally these are from Physics and related &amp;quot;hard&amp;quot; sciences.  Psychology or
Economics are &amp;quot;hard&amp;quot; sciences in the other sense of hard -- they're difficult
because of the subject matter.  The magic number 7 ± 2 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are three additional levels of numerology
that just don't belong the discipline of software
architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Empiricism&lt;/strong&gt; .
Ideally these are from Physics and related &amp;quot;hard&amp;quot; sciences.  Psychology or
Economics are &amp;quot;hard&amp;quot; sciences in the other sense of hard -- they're difficult
because of the subject matter.  The magic number 7 ± 2, for example, is a
piece of research [&lt;a class="reference external" href="http://www.well.com/user/smalin/miller.html"&gt;miller&lt;/a&gt; ] that has some standing.  There's some
fuzziness to this, and a change in theory or measurement or sample population
could refine
this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mysticism&lt;/strong&gt; .
The idea that every industry is dominated by three major players, or that there
are five layers to a good architecture is just mysticism.  They are comfortable
numbers, they form patterns in our heads, but they aren't natural &amp;quot;laws&amp;quot;, or
even empirical
measurements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tautologies&lt;/strong&gt; .
A logical tautology can be framed with numbers to make it seem empirical.  &amp;quot;If
the solution/consequence does not directly (ie no more than 1 logic jump) tie
back to the problem, then something is wrong somewhere.&amp;quot;  More than one logic
jump is just a faux-empirical code for &amp;quot;non-sequitur&amp;quot; or &amp;quot;not directly&amp;quot;.&lt;/p&gt;
&lt;p&gt;Let's test &amp;quot;more than 1 logic jump&amp;quot;.
What it if were more than, say, 3 logic jumps?  Would that be more or less of an
indirect thread of logic?  Since it would be equally baffling, the number 1 has
no real significance, and is just
numerology.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JB
Says:&lt;/p&gt;
&lt;p&gt;I found this
particular rant and your associated personal forum article kind of bothersome.
Counting for me is often a way of beginning to make sense when I'm otherwise
lost. So, I pondered for a bit, until an insight appeared. It's not about
counting. It's about hypothesys formation. It's about doing
science.&lt;/p&gt;
&lt;p&gt;So, when I'm
lost and go start counting things I have no idea what the numbers gathered mean.
That's the point, actually. The numbers become additional chunks to mix around
and try to find or make some meaning, 27 fizbins observed each day except
alternate Tuesdays, when there are literally hundreds. Interesting. Something is
different here between alternate Tuesdays and the other days at least as regards
fizbins. Now one can begin positing this explanation or that, and testing
them.&lt;/p&gt;
&lt;p&gt;&amp;quot;Well, perhaps
all fizbins have a genetic, cognitive disorder which wires in the twin
compulsions of exhibitionsim an an attraction to Tuesdays. Unlikely, as fizbins
have no DNA, not being creatures, and are never seen around calendars so they
can't know what day it
is.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Is there
something interesting about alternate
Tuesdays?&amp;quot;&lt;/p&gt;
&lt;p&gt;The folly of
counting stuff we don't already understand comes not from the counting, but from
whipping on the numbers an unrealized belief in some silly, weak, uncontemplated
model of the world. Too often the same presumed models are used again and again
without  even realizing  that they are being used. &amp;quot;More is better.&amp;quot; &amp;quot;More input
makes more output.&amp;quot;
Etc.&lt;/p&gt;
&lt;p&gt;I don't think it's
the counting, so much as the absence of the perspective and the discipline to do
science, even in a lightweight manner, with whatever small aspect of the mundane
world we decide to count.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Notable Failure of Use Cases</title><link href="https://slott56.github.io/2005_10_26-notable_failure_of_use_cases.html" rel="alternate"></link><published>2005-10-26T22:43:00-04:00</published><updated>2005-10-26T22:43:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-26:/2005_10_26-notable_failure_of_use_cases.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
company,
&lt;em&gt;W&lt;/em&gt; , is
an e-business startup with a successful, profitable business operation.  They
were using a mixture of PCs and small servers from various sources to conduct
business.  They had a base of customers, a positive cash-flow and investment
dollars.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;W&lt;/em&gt;
contacted two large software and services companies …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
company,
&lt;em&gt;W&lt;/em&gt; , is
an e-business startup with a successful, profitable business operation.  They
were using a mixture of PCs and small servers from various sources to conduct
business.  They had a base of customers, a positive cash-flow and investment
dollars.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;W&lt;/em&gt;
contacted two large software and services companies for proposals to build a
complete web-based solution to replace the ad-hoc mixture of software and
outside services that formed the current operation.  The total bill for
development was over $10M from each vendor.  The job was beyond their investors
capabilities.  Unlike many e-business startups, they had limited in-house
technical expertise; and no in-house
developers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;W&lt;/em&gt;
came to us with a document, prepared by one of the vendors, which was an
architecture and blueprint for the system to be developed.  It contained a
number of “use cases”; we were contracted to prioritize the use
cases, and deliver the required functionality
incrementally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problems&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
initial set of use cases were not narrative in form; they did not contain
sequences of interactions between an actor and the system to create business
value.  In all but a few cases, they were bulleted lists of features, data
elements, business rules, constraints, and implementation hints.  The most
notable exception was the first use case, one that described how a particular
class of actors logs in to the
application.&lt;/p&gt;
&lt;p&gt;Further, the description
of the various login scenarios provided by
&lt;em&gt;W&lt;/em&gt;
implied some additional use cases not present in the documentation.  This
quality problem, plus the egregious focus on login, indicated some kind of rush
to create a deliverable, even thought it was
incomplete.&lt;/p&gt;
&lt;p&gt;We also noted that the most
critical business process, market place segmentation, was not covered at all.
The entire marketing component was summarized in a single “use case”
with a few vague bullets as supporting
details.&lt;/p&gt;
&lt;p&gt;One consequence of the project
history was that
&lt;em&gt;W&lt;/em&gt;  was
firmly committed to the document.  It appeared that
&lt;em&gt;W&lt;/em&gt;  had
spent considerable time and effort with their vendor arriving at the “use
case” descriptions.  They considered the document to be of considerable
value, even though we found it an opaque summary of features without any usable
narrative structure.  We could not mock up business transactions from the
information provided, but were not permitted to gather additional
information.&lt;/p&gt;
&lt;p&gt;Additionally, our analysts
were able to develop use cases or scenarios from the end users.  The most
critical actor would only attend meetings when all other business principals
(including the CEO) were present, diluting the actor’s contributions.
Further, one of the customers funding the business and serving on the board of
directors, was only able to speak hypothetically about what could be done.  It
was difficult to get the critical actor to say what actually needed to be done
to conduct
business.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We
note that while there were numerous personnel and management issues, there is
also a problem with the use case technique.  The use case issue is that users
often cannot focus on the business problem, they will either describe a specific
solution or speak hypothetically about potential
solutions.&lt;/p&gt;
&lt;p&gt;As developers, we often find
there is an intense focus on the login sequence.  The login or authentication
sequence seems to be the feature that is most often over-specified.  In many IT
operations, authentication is determined by existing standard procedures, and
not subject to specifications.  In other cases, as firms move toward single
sign-on (SSO), the details of login are delegated to the SSO component, and do
not need to be specified.&lt;/p&gt;
&lt;p&gt;Our
preference is to simply state the user’s level of access as a precondition
for all use cases, and leave it out of the business description entirely.  We
feel that authentication, by itself, does not create business
value.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Rolling Your Own Hashmap (performance)</title><link href="https://slott56.github.io/2005_10_25-rolling_your_own_hashmap_performance.html" rel="alternate"></link><published>2005-10-25T14:19:00-04:00</published><updated>2005-10-25T14:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-25:/2005_10_25-rolling_your_own_hashmap_performance.html</id><summary type="html">&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part7"&gt;Minimum Object Count Map, part 9 (Performance)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[snip]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part7"&gt;Minimum Object Count Map, part 9 (Performance)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am not trying to attack/bash HashMap or suggest that MocMap is the new miracle implementation that should replace all other maps. I am trying to obtain an objective comparison to see where …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part7"&gt;Minimum Object Count Map, part 9 (Performance)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[snip]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part7"&gt;Minimum Object Count Map, part 9 (Performance)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am not trying to attack/bash HashMap or suggest that MocMap is the new miracle implementation that should replace all other maps. I am trying to obtain an objective comparison to see where each one fits.[snip]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part7"&gt;Minimum Object Count Map, part 9 (Performance)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Previous Opinion &lt;a class="reference external" href="https://slott56.github.io/2005_10_04-rolling_your_own_hashmap.html"&gt;Rolling Your Own HashMap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And
yet, the comparison does not mention TreeMap.  I wonder how the
already-available TreeMap compares with all of this effort.  The quality is
undeniable, but is there real value in this?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Software Project Management and Magic: The Gathering</title><link href="https://slott56.github.io/2005_10_24-software_project_management_and_magic_the_gathering.html" rel="alternate"></link><published>2005-10-24T00:18:00-04:00</published><updated>2005-10-24T00:18:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-24:/2005_10_24-software_project_management_and_magic_the_gathering.html</id><summary type="html">&lt;p&gt;Having problems with possibly the dumbest
strategy of all time. It's difficult to work around because it comes from a
management interrupt, and all my lands are tapped out. I've got nothing left to
do except to sit around and watch bad things
happen.&lt;/p&gt;
&lt;p&gt;It's not the whole crew; it's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having problems with possibly the dumbest
strategy of all time. It's difficult to work around because it comes from a
management interrupt, and all my lands are tapped out. I've got nothing left to
do except to sit around and watch bad things
happen.&lt;/p&gt;
&lt;p&gt;It's not the whole crew; it's a
manager with a hand full of interrupts. I played just about all the design cards
there are, but an interrupt is an interrupt, and I'm forced to respond to
it.&lt;/p&gt;
&lt;p&gt;As an architect, I see systems
emerging from the interplay of requirements, context and solution cards.
Currently, we have a solution on the table; I have to play an appropriate design
to implement this solution. I've got the design in my hand, I'm just waiting
until its my turn so that I can play
it.&lt;/p&gt;
&lt;p&gt;However, there's this whole side
battle going on that (I hope) will eventually get an old, bad solution card off
the table. This requires me to play an instant as soon as the DBA finishes her
turn. Once she's done pooping around with the data model, I play this instant
I've been holding and give her the revised enrichment rules, then it's her turn
again to poop around with the data model.  We have to do it this way because the
whole solution is complex, and the best way to understand complexity is to grow
it a step at a time rather than cope with it all at
once.&lt;/p&gt;
&lt;p&gt;Meanwhile, Project Leader has a
&amp;quot;Brain Calorie Burn&amp;quot; that she is powering with every land she has. It's the &amp;quot;I
don't need that detail in the data model, take it out&amp;quot; card. We spend hours
crossing stuff off the model.  Stuff that the DBA and I know we'll put back in.
It doesn't save any development cost that I can see, but the card is out and we
don't have any way to stop it.  We take out details that, in the next release,
will be put back in again.&lt;/p&gt;
&lt;p&gt;Bottom Line.
Rather than build new, simple, fast software, management is insisting on
adaptation of existing, complex, slow software. Analyst and DBA were in my cube
with the &amp;quot;how can you let them do this?&amp;quot; two-on-one. I said that we have to let
folks do it this way; otherwise they'll just stand around in the barnyard like
goats starting at thunder.  They think of the broken software as an &amp;quot;investment&amp;quot;
not the sunk cost it really is.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Object Modeling (Revised)</title><link href="https://slott56.github.io/2005_10_16-object_modeling_revised.html" rel="alternate"></link><published>2005-10-16T18:16:00-04:00</published><updated>2005-10-16T18:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-16:/2005_10_16-object_modeling_revised.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To write software, we need to understand what we're doing. We need to have a well-defined universe of discourse. This understanding must be documented. The documentation proceeds through increasingly refined levels of documentation.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;English prose.&lt;/li&gt;
&lt;li&gt;Diagrams and other semi-formal notations.&lt;/li&gt;
&lt;li&gt;Formal notations (BNF, IDL, Java, etc.)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes, the first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To write software, we need to understand what we're doing. We need to have a well-defined universe of discourse. This understanding must be documented. The documentation proceeds through increasingly refined levels of documentation.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;English prose.&lt;/li&gt;
&lt;li&gt;Diagrams and other semi-formal notations.&lt;/li&gt;
&lt;li&gt;Formal notations (BNF, IDL, Java, etc.)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sometimes, the first or second level of formality (prose or diagrams) is skipped, reducing this approach to two levels: informal and formal.&lt;/p&gt;
&lt;p&gt;The documents often iterate between the various levels because the increasing formalism often uncovers problems in the less formal representations. We rethink the less formal version, and identify a simplification or a missing feature; this begins the cycle again.&lt;/p&gt;
&lt;p&gt;Various steps in this process will often benefit from prototyping. For example, when trying to capture the english prose version, an initial UML diagram helps clarify. This prototype is then discarded and the more refined UML model used to generate final Java code.&lt;/p&gt;
&lt;p&gt;Mistake.&lt;/p&gt;
&lt;p&gt;It is common to correct problems in the more refined levels, but not go back to the less refined levels and reconcile all the various descriptions.  Be sure to go back and reconcile all of the descriptions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A formal procedure constrains free thinking. In this case, that's the point: object modeling is not expressionist painting. It is science (not engineering); it is an attempt to fully describe something in formal terms. As a science, object modeling forms a testable hypothesis based on observation, experimentation and measurement.&lt;/p&gt;
&lt;p&gt;Experimentation can be done via prototyping - building something to see if it fits the theory or refutes the theory. The information gained may then modify the theory, leading another lap around the iterative track. However, prototyping in the early phases can be harmful; it tends to narrow the thought process.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Write a short summary of the problem at hand.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you have requirements, project scope documents, text book examples, or other references you can try to take a high-lighter to this text; however, it's hard to internalize that way. It's easier to internalize by rewriting from scratch, aiming for succinct explanations without background or justification. Many documents have to explain and justify much.  When modeling, you have to capture the entities and associations, but the why's and wherefore's aren't part of the object model.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identify the entities (nouns).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;This is part of internalizing the model; without positive identification of the nouns, you don't have a universe of discourse. I don't know what you have, but when my clients try to rush past this step, their incomplete understanding is a train-wreck waiting to happen. Do not try too hard to assign attributes or associations. Some will surface, so collect them at this time.  Your goal is to identify nouns in a way that you can write a definition, give the definition to a non-expert and have them be able to distinguish among real-world examples based on the definitions.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List the nouns.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Confirm that the nouns are truly independent entities. Sometimes they are aliases, sometimes they are attributes of each other. Sometimes they are prepositional phrases (associations). Sometimes they are verbs that have been nounized; these are operations of a noun, and can be collapsed into the relevant noun.  Sometimes they are states of a noun; in this case, also, they can be collapsed into the noun's definition.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;The following steps will occur in a non-deterministic back-and forth fashion.  You may also need to look at &lt;a class="reference external" href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html"&gt;State-Based Object Modeling&lt;/a&gt;  to see if a dynamic view of the object will help create a definition.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;strong&gt;Categorize the nouns.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;Some nouns are generalizations, others are specializations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;strong&gt;Associate the nouns.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;Put in the prepositional phrases, labeled approximately correctly. Don't burn calories on optionality and cardinality. Don't waste time normalizing. We're only internalizing someone else's description.  You're not designing a database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;strong&gt;Assign attributes to the nouns.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;Don't waste time on primary keys or foreign keys or surrogate keys. An association will eventually require an implementation, which may be a foreign key; at this time it does not have to be identified.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;strong&gt;Assign operations to the nouns.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;Some nouns will be &amp;quot;active&amp;quot; and will be the center of action. Other nouns are &amp;quot;passive&amp;quot; and simply contain attributes and participate in associations.  Some nouns will have state changes, some nouns will be immutable objects that are created and destroyed without any transformations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write the semi-formal diagram of the objects under consideration.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;UML or ERD's will do. Don't burn too many calories on details that will be handled in implementation. Don't decide what kind of collection will implement a container, or what kind of foreign key will be used to implement an association.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reconcile.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Fix up or revise the original narrative to match the diagram. Fix the diagram to match the new narrative.  If necessary, revisit the external documents (project scope statements, plans, budgets, justifications, etc.) and be sure they match your current understanding; often, they will be seen in a new light and changes must be made.  These changes can be characterized as &amp;quot;scope creep&amp;quot; and labeled as &amp;quot;bad.&amp;quot;  Or they can be characterized as lessons learned, management of ignorance, or similar and labeled as &amp;quot;good.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Construct object instances to be sure that the general classes of objects describe the specific instances correctly and completely.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, you have an object model that you can use for design and eventually develop into fully formal notation (like Java or Python).&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Deployment</title><link href="https://slott56.github.io/2005_10_15-deployment.html" rel="alternate"></link><published>2005-10-15T14:56:00-04:00</published><updated>2005-10-15T14:56:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-15:/2005_10_15-deployment.html</id><summary type="html">&lt;p&gt;The deployment document describes an installation
of the system, with specific host names and addresses.  This document is the
last of the formal deliverables, and forms the basis for an operator's or user's
guide.&lt;/p&gt;
&lt;p&gt;The deployment follows
successful implementation of the design, based on the architecture and
requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UML …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The deployment document describes an installation
of the system, with specific host names and addresses.  This document is the
last of the formal deliverables, and forms the basis for an operator's or user's
guide.&lt;/p&gt;
&lt;p&gt;The deployment follows
successful implementation of the design, based on the architecture and
requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UML
diagrams for
deployment.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There
is a great deal of variability, based on the
architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Standards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All
components have a processor, all processors have one or more
components.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Office 12 Interface</title><link href="https://slott56.github.io/2005_10_15-office_12_interface.html" rel="alternate"></link><published>2005-10-15T02:06:00-04:00</published><updated>2005-10-15T02:06:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-15:/2005_10_15-office_12_interface.html</id><summary type="html">&lt;p&gt;This is a real &lt;a class="reference external" href="http://news.com.com/Office+12+makeover+takes+on+feature+creep/2100-1012_3-5873597.html?tag=st.prev"&gt;C|net&lt;/a&gt;   thought provoker on the Office 12 changes
that may come with Vista (or whatever they're calling Longhorn this
year).&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.codinghorror.com/blog/archives/000397.html"&gt;Coding Horror&lt;/a&gt;   for a view of Office 12.  &lt;a class="reference external" href="http://www.37signals.com/svn/archives2/microsoft_office_12_screen_shots.php"&gt;Signal vs. Noise&lt;/a&gt;   has some
thoughts.&lt;/p&gt;
&lt;p&gt;The bad thing is the
following apology for a bloated …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a real &lt;a class="reference external" href="http://news.com.com/Office+12+makeover+takes+on+feature+creep/2100-1012_3-5873597.html?tag=st.prev"&gt;C|net&lt;/a&gt;   thought provoker on the Office 12 changes
that may come with Vista (or whatever they're calling Longhorn this
year).&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.codinghorror.com/blog/archives/000397.html"&gt;Coding Horror&lt;/a&gt;   for a view of Office 12.  &lt;a class="reference external" href="http://www.37signals.com/svn/archives2/microsoft_office_12_screen_shots.php"&gt;Signal vs. Noise&lt;/a&gt;   has some
thoughts.&lt;/p&gt;
&lt;p&gt;The bad thing is the
following apology for a bloated application that is nearly incomprehensible:
Jakob Nielsen's &lt;a class="reference external" href="http://www.useit.com/alertbox/wysiwyg.html"&gt;Alertbox&lt;/a&gt;   for October 10.&lt;/p&gt;
&lt;p&gt;I think it's time to switch to &lt;a class="reference external" href="http://www.openoffice.org"&gt;Open
Office&lt;/a&gt; .&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Implementation</title><link href="https://slott56.github.io/2005_10_11-implementation.html" rel="alternate"></link><published>2005-10-11T11:02:00-04:00</published><updated>2005-10-11T11:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-11:/2005_10_11-implementation.html</id><summary type="html">&lt;p&gt;An implementation document is prepared along with
the software to present the packaging and component structure, including visible
interfaces of components.  This shows the structure of the final deliverables,
and describes the files, databases and other persitent features of the system.
This document will also identify all third-party components
used …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An implementation document is prepared along with
the software to present the packaging and component structure, including visible
interfaces of components.  This shows the structure of the final deliverables,
and describes the files, databases and other persitent features of the system.
This document will also identify all third-party components
used.&lt;/p&gt;
&lt;p&gt;The implementation depends on the
design, the architecture and the
requirements.&lt;/p&gt;
&lt;p&gt;This process summarizes
implementation, omitting the difficult problems of testing and
integration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Final
software.  Typically source, plus executable form.  This of course, varies with
language.&lt;/p&gt;
&lt;p&gt;UML diagrams for packages and
components.&lt;/p&gt;
&lt;p&gt;Either UML diagrams or
narratives describing the packaging and installation
procedures.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For
each architectural component, create a detailed design of all classes required
to implement the component.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define the overall responsibilities and
constraints.  Write a clear statement of the component.&lt;/li&gt;
&lt;li&gt;Determine the entities, associations,
operations and attributes in the statement of the component.  Noun and verb
analysis of the statement is a good starting point.&lt;/li&gt;
&lt;li&gt;Select appropriate design patterns for the
overall structure and relationships among the classes.  This will help select
design for associations, state and collections.&lt;/li&gt;
&lt;li&gt;Select appropriate data structures and
algorithms.&lt;/li&gt;
&lt;li&gt;Construct diagrams.&lt;/li&gt;
&lt;li&gt;Validate the design via a &amp;quot;walkthrough.&amp;quot;
Follow each relevant use case's execution through the classes and methods in the
design.  Confirm the responsibility
assignments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Construct the source.
Stick to widely used standards.  Read open source projects for examples.
Consider the use of literate programming tools to merge design and source into a
single
document.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Standards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Trace
back to architectural components and requirements.  Every class belongs to a
package, every package has one or more classes.  Each component is built from
packages of classes.  Each package contributes to one or more
components.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Management Crutches</title><link href="https://slott56.github.io/2005_10_07-management_crutches.html" rel="alternate"></link><published>2005-10-07T00:28:00-04:00</published><updated>2005-10-07T00:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-07:/2005_10_07-management_crutches.html</id><content type="html">&lt;p&gt;See ComputerWorld vol 39, no 40.  &lt;a class="reference external" href="http://computerworld.com/printthis/2005/0,4814,105074,00.html"&gt;56878&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See RLucente's BLOKI &amp;quot;I can't get any
work done because I get too many emails&amp;quot; thread [&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?tid=122257&amp;amp;fid=63455"&gt;bloki&lt;/a&gt; ].  The whole thread hammers the same point
home as the CW article.  Connected is an ego trip, petty controlling or a kind
of power play.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>The Value of IT</title><link href="https://slott56.github.io/2005_10_07-the_value_of_it.html" rel="alternate"></link><published>2005-10-07T00:22:00-04:00</published><updated>2005-10-07T00:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-07:/2005_10_07-the_value_of_it.html</id><summary type="html">&lt;p&gt;See ComputerWorld vol 39, no 40, &lt;a class="reference external" href="http://www.computerworld.com/printthis/2005/0,4814,105042,00.html"&gt;56830&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&amp;quot;Since
IT rarely drives the revenue of the business, its policies are little more than
lines in the sand at low tide.&amp;quot;&lt;/p&gt;
&lt;p&gt;See
RLucente's BLOKI  [&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?tid=121692&amp;amp;fid=63898#forum-message1126636772113slott"&gt;bloki 1&lt;/a&gt;  ] for the &amp;quot;IT uses ROI, but no one else
does&amp;quot; conversation.  I'll summarize some of
it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See ComputerWorld vol 39, no 40, &lt;a class="reference external" href="http://www.computerworld.com/printthis/2005/0,4814,105042,00.html"&gt;56830&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&amp;quot;Since
IT rarely drives the revenue of the business, its policies are little more than
lines in the sand at low tide.&amp;quot;&lt;/p&gt;
&lt;p&gt;See
RLucente's BLOKI  [&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?tid=121692&amp;amp;fid=63898#forum-message1126636772113slott"&gt;bloki 1&lt;/a&gt;  ] for the &amp;quot;IT uses ROI, but no one else
does&amp;quot; conversation.  I'll summarize some of
it.&lt;/p&gt;
&lt;p&gt;IT's focus on ROI can often stifle
business investment in the technology.  IT can stop the business cold by
trivializing technical innovation as an ROI-creating activity.  A great deal of
marketing and communication has no ROI; why should IT invent
road-blocks?&lt;/p&gt;
&lt;p&gt;&amp;quot;The question that I still
have is doesn't marketing need to show ROI
?&amp;quot;&lt;/p&gt;
&lt;p&gt;No.  They don't.  Marketing sells
product.  That's their value proposition.  Measuring ROI isn't appropriate.
It's only a coping mechanism for IT.  It isn't good business management, in
general.&lt;/p&gt;
&lt;p&gt;See RLucente's BLOKI Forum
[&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?tid=121766&amp;amp;fid=63455#forum-message1127401809592slott"&gt;bloki 2&lt;/a&gt; ] for the &amp;quot;IT Overcompensates&amp;quot; conversation.
I'll summarize some of it.&lt;/p&gt;
&lt;p&gt;IT
intentionally makes short-sighted
decisions.&lt;/p&gt;
&lt;p&gt;I Think This is Over-Compensating
Because They Don't Look At Themselves As A Profit-Center.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Rolling Your Own HashMap</title><link href="https://slott56.github.io/2005_10_04-rolling_your_own_hashmap.html" rel="alternate"></link><published>2005-10-04T10:22:00-04:00</published><updated>2005-10-04T10:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-04:/2005_10_04-rolling_your_own_hashmap.html</id><summary type="html">&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part1"&gt;Minimum Object Count Map, part 2 (Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[snip]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part1"&gt;Minimum Object Count Map, part 2 (Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Was this really necessary? Yeah, it could be an overkill. [snip]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part1"&gt;Minimum Object Count Map, part 2 (Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think it was overkill in the worst way.  I
don't see the head-to-head comparison with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part1"&gt;Minimum Object Count Map, part 2 (Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[snip]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part1"&gt;Minimum Object Count Map, part 2 (Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Was this really necessary? Yeah, it could be an overkill. [snip]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=minimum_object_count_map_part1"&gt;Minimum Object Count Map, part 2 (Analysis)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think it was overkill in the worst way.  I
don't see the head-to-head comparison with HashTree, which already minimizes
storage.  Since storage was the only problem, HashTree appears to be the
solution.  If performance was
&lt;em&gt;also&lt;/em&gt;
a problem, then perhaps this might be worth the
effort.&lt;/p&gt;
&lt;p&gt;I'll need to see the results of
actual performance testing before I can agree that this was a worthwhile
exercise.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Design</title><link href="https://slott56.github.io/2005_10_03-design.html" rel="alternate"></link><published>2005-10-03T10:29:00-04:00</published><updated>2005-10-03T10:29:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-03:/2005_10_03-design.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
Design model generally consists of UML diagrams plus narratives where necessary.
The model describes the static structure and dynamic behavior of each class.
Additional non-behavioral requirements must also be included in the design
document.&lt;/p&gt;
&lt;p&gt;In the 4+1 view, the design
is the details of how to implement …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
Design model generally consists of UML diagrams plus narratives where necessary.
The model describes the static structure and dynamic behavior of each class.
Additional non-behavioral requirements must also be included in the design
document.&lt;/p&gt;
&lt;p&gt;In the 4+1 view, the design
is the details of how to implement the logical view and functional view.  It is
any additional information to fill out the component view, and the plans for the
final implementation.  The information added to each view is technical, not
business-oriented, and is an elaboration on the initial design decisions made as
part of
Architecture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
process of design refines the responsibility assignment begun by the
architecture effort.  This involves consideration of algorithm and data
structure.  It identifies opportunities for reuse via inheritance.  It applies
design patterns to create robust, reliable, reusable
software.&lt;/p&gt;
&lt;p&gt;Note that the modeling
process seeks to create more refined and formal models of the problem universe.
The design document is the next-to-final level of formality.  The final level is
the source code for the application
software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Standards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
level of detail varies with the audience.  Experienced developers may be able to
proceed with a high-level class diagram.  Novice developers may require sequence
diagrams for more complex methods.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Architecture</title><link href="https://slott56.github.io/2005_10_01-architecture.html" rel="alternate"></link><published>2005-10-01T13:34:00-04:00</published><updated>2005-10-01T13:34:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-01:/2005_10_01-architecture.html</id><summary type="html">&lt;p&gt;An architecture document not only describes the
solution, it must trace back to individual functional requirements, and also
should satisfy the non-functional requirements.  In most cases, the requirements
must be prioritized, and there will be tradeoffs for meeting absolutely all of
the requirements.&lt;/p&gt;
&lt;p&gt;In some cases, an
architecture exists, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An architecture document not only describes the
solution, it must trace back to individual functional requirements, and also
should satisfy the non-functional requirements.  In most cases, the requirements
must be prioritized, and there will be tradeoffs for meeting absolutely all of
the requirements.&lt;/p&gt;
&lt;p&gt;In some cases, an
architecture exists, and the requirements must be matched to the existing
architecture.  This will lead to iteration in requirements gathering.  The
tradeoffs between what might be nice to have, and what is available at a
reasonable cost and level of risk require revisiting the requirements and
managing the scope of the overall
effort.&lt;/p&gt;
&lt;p&gt;In some cases, the solution
leads to a novel architecture.  In this case, the development process will
complex as various alternatives are explored.  In other cases, the architecture
already exists, and the solution is simply a new application, or an extension to
an existing application.  In this case, the architecture process is simpler, and
the resulting document is more of a high-level
design.&lt;/p&gt;
&lt;p&gt;The architecture can be
examined in both layers and partitions.  The partitions depend in part on some
patterns established by the` Zachman framework &amp;lt;&lt;a class="reference external" href="http://www.zifa.com"&gt;http://www.zifa.com&lt;/a&gt;&amp;gt;`_ : data, processing,
communications, people and motivation.  The layers should correspond to one of
the multi-layer design patterns for systems.  One five layer approach
is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Presentation or View&lt;/li&gt;
&lt;li&gt;Control&lt;/li&gt;
&lt;li&gt;Model (or Domain)&lt;/li&gt;
&lt;li&gt;Access (or Data Transport or Mapping, e.g.
JDBC or CORBA)&lt;/li&gt;
&lt;li&gt;Persistence (or Database)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some applications may require
fewer layers, or may collapse layers together.  For example, a &amp;quot;fat client&amp;quot;
application may have the top four layers in a client-side component and the
bottom two layers on a database
server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
architecture transforms the analysis model into an implementation model.  It
&amp;quot;turns the corner&amp;quot; from analysis and elaboration -- in the problem domain -- to
technology.  It adds the component and deployment views to a model that starts
with the use case, logical and functional
views.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Architecture
seeks to optimize the allocation of responsibility.  Unlike the requirements,
which clearly define the problem, architecture balances the tradeoffs between
costs and benefits to arrive at a
solution.&lt;/p&gt;
&lt;p&gt;The number of choices that
confront an architect require a disciplined approach to problem solving.  This
is best done by clearly stating context, problem, forces, solution and
consequences and being prepared to refine solutions and consequences as the
forces are more fully understood.  The process is iterative, and may cycle
several times to arrive at an acceptable solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A metaphor&lt;/strong&gt; .  An architecture begins as a
chemical solution.  Decisions act as a nucleus for crystalization.  A software
incompatibility is a fault, and a different decision must be used as anucleus
for crystalization.  When the solution crystalizes fault-free, this is an
acceptable architecture.&lt;/p&gt;
&lt;p&gt;There are a
number of background issues that must be added to the requirements.  These
include: implementation of associations and collections, history, security,
persistence, state, startup, shutdown, failure and recovery from failure.  These
issues are rarely appropriate for the requirements, but are essential features
of an implementation.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Identify the regulatory, industry, business
and application context.  Other constraints from within the business (customer,
vendor, product, organization, time or geography) shouldn't alter the
architecture, but will alter the design or implementation.  Identify all
available components through reuse, commercial or open sources.&lt;/li&gt;
&lt;li&gt;Subdivide the exisiting problem into layers
and partitions.  Identify components with responsibility for each layer of the
architecture.  Note that some components may be defined by the context (i.e.,
they are preferred by the business as part of a standardized framework).
Consult design patterns available and document the context, problem, forces,
solutions and consequences for each decision.&lt;/li&gt;
&lt;li&gt;Identify the interfaces between layers and
assure that all connectivity is properly addressed through available or
to-be-built components.&lt;/li&gt;
&lt;li&gt;Identify infrastructure requirements for all
components, with a focus on compatibility.  Incompatibilities will require
adding a constraint to the context and reworking the process from the
beginning.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The available components may
require considerable analysis.  Additionally, the to-be-built components must
have some broad overview of their responsibilities, interfaces, behaviors and
non-functional attributes.  This information creates the Analysis Model, as well
as a target Implementation and Deployment
model.&lt;/p&gt;
&lt;p&gt;The modeling effort follows the
general outline of Object Modeling.  However, the starting point is not nebulous
prose or powerpoint slides.  The starting point is the business model in the use
cases.  This Analysis Model is really an elaboration of the Business Model, not
a new effort, built from
scratch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Standards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
architecture must address all Zachman topics (data, process, communication,
people and motivation).&lt;/p&gt;
&lt;p&gt;The
architecture must identify components to be used and to be built.  To be used
components must have specific source and version information.  To be built
components must have an overview of responsibilities, interfaces, behaviors and
non-functional attributes.&lt;/p&gt;
&lt;p&gt;Note that
the architecture is essentially a check-list of components to acquire, install,
configure, test, implement and
deploy.&lt;/p&gt;
&lt;p&gt;The architecture must trace
back to the requirements:  everything in the architecture supports a
requirement, and every requirement is satisfied by one or more elements of the
architecture.  This can be done by a &amp;quot;walkthrough:&amp;quot;  follow the execution of a
use case through the various components, assuring that the responsibilities and
operations will meet the needs of the use
case.&lt;/p&gt;
&lt;p&gt;Additionally, the architecture
must be proven.  If it is not currently in use by the development team or the
business, a working small-scale reference installation must be
created.&lt;/p&gt;
&lt;p&gt;Risk.
Failure to create the working reference architecture is a leading indicator of
project failure.  Until you have the architecture working, it doesn't matter how
simple or widespread the
adoption.&lt;/p&gt;
&lt;p&gt;Risk.
Failure to verify the trace between architecture and requirements can create an
architecture that is too complex or inadequate to meet non-functional
requirements.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Requirements</title><link href="https://slott56.github.io/2005_09_29-requirements.html" rel="alternate"></link><published>2005-09-29T10:39:00-04:00</published><updated>2005-09-29T10:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-29:/2005_09_29-requirements.html</id><summary type="html">&lt;p&gt;Requirements describe the problem, and provide a
direction for composing a solution.  The remaining deliverables, leading up to
the creation of software, are created from the requirements.    These includes
the architecture, design, implementation and deployment
documents.&lt;/p&gt;
&lt;p&gt;By defining the problem, the
requirements document also serves to bracket the scope of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Requirements describe the problem, and provide a
direction for composing a solution.  The remaining deliverables, leading up to
the creation of software, are created from the requirements.    These includes
the architecture, design, implementation and deployment
documents.&lt;/p&gt;
&lt;p&gt;By defining the problem, the
requirements document also serves to bracket the scope of the effort. It
describes the context, the details of problem and the constraints on candidate
solutions. It evolves from a business use case through system use cases. It also
includes a conceptual or business model that depicts enties and relationships
named by the use cases.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;use case&lt;/strong&gt;
defines an actor's interactions with the system and how those interactions
produce business value. There are many templates for use cases. Simpler is
better.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;actor&lt;/strong&gt;  is
a person or an automated interface, external to the system.  An actor has goals
behind their interactions with the system.  These goals define the business
value the actor creates through their interaction with the
system.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;system&lt;/strong&gt;
is the hardware, software or procedures (or combination) under consideration.
When doing use case analysis, the system is a &amp;quot;black box&amp;quot; or &amp;quot;tool&amp;quot; with which
the actors interact.  Further steps in the process will decompose this black
box.  That activity has to wait until the system, as a whole, has been
described.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Business value&lt;/strong&gt;  is some kind of benefit, either
intellectual, emotional or economic created through interaction with the system.
Generally, it is informational in nature and leads an actor to make a decision
or take an action outside the
system.&lt;/p&gt;
&lt;p&gt;The uses cases form &amp;quot;functional
requirements&amp;quot; - things the system will
&lt;em&gt;do&lt;/em&gt;.
The constraints form &amp;quot;non-functional requirements&amp;quot; - other attributes of the
system. The non-functional requirements should be organized according to the SEI
&lt;a class="reference external" href="http://www.sei.cmu.edu/str/taxonomies/view_qm.html"&gt;Quality Measures Taxonomy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do
not start any other activities until requirements gathering is complete. All
time spent prior to understanding the problem is
wasted.&lt;/p&gt;
&lt;p&gt;A use case should identify the
following; for information see the &lt;a class="reference external" href="http://www.zifa.com/"&gt;Zachman framework&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Actor (who?)&lt;/li&gt;
&lt;li&gt;Goal and Business Value Proposition (why?)&lt;/li&gt;
&lt;li&gt;Trigger (when? where?)&lt;/li&gt;
&lt;li&gt;Sequence of Interactions (what? how?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
activity of analysis can create three models of the business problem.  Each
model has a different point of view, but describe the same value-creating
activities.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Business Use Case Model -
business-oriented actors and processes - what people do to create
value.&lt;/li&gt;
&lt;li&gt;Business Model - definitions of the
busines entities with attributes and relationships.&lt;/li&gt;
&lt;li&gt;Use Case Model - system-oriented actors
and their interactions - how people create the business
value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
following four process steps outline the requirements analysis
process.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write the short summary overview of the system
If you can't write a pithy paragraph, continue refining and simplifying. Try
explaining it to your mother to see if she understands.&lt;/li&gt;
&lt;li&gt;Identify the actors. Each actor has a reason
for interacting with the system: collect their goals and the business value they
create.&lt;/li&gt;
&lt;li&gt;Identify the interactions. Each actor does
something to create value. Generally, actors make decisions and take action. A
use case without decision or action does not have any &amp;quot;interaction&amp;quot; and must be
questioned.&lt;/li&gt;
&lt;li&gt;Develop a business model based on the nouns in
the pithy summary and the use cases. See the Object Modeling document for a
procedure. Reconcile the model, the summary and the use cases to get complete,
consistent terminology. There will be much rework and scope
creep.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that this is a discovery
exercise, and is inherently unscopable. Active management of scope and potential
scope creep issues is critical.&lt;/p&gt;
&lt;p&gt;Note
that this often proceeds in several phases: a scoping or inception phase for
planning purposes, a high-level analysis phase to decompose the problem and then
detailed analysis for individual subject
areas.&lt;/p&gt;
&lt;p&gt;Note that is iterative: often,
the initial results will be refined until they are usable.  Common problems
include early specification of implementation details, failure to completely
identify actors or use cases.  These kinds of problems are resolved by iteration
through the
process.&lt;/p&gt;
&lt;p&gt;Standards&lt;/p&gt;
&lt;p&gt;Requirements
must be finite, definite and effective.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finite means that they are measuable or
quantitative.&lt;/li&gt;
&lt;li&gt;Definite means there is a specific
threshold or target. Failure to meet the threshold makes the solution
unacceptable or useless.&lt;/li&gt;
&lt;li&gt;Effective means that they consistently
describe a specific business
problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Risk. Failure to
define the problem typically leads to a premature effort to define a
solution.&lt;/p&gt;
&lt;p&gt;Examples of problems include
the following.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Too narrow a definition of data,
processing or interfaces.  This document is focused on a specific solution
without having fully defined the problem.&lt;/li&gt;
&lt;li&gt;Focus on non-functional requirements.
This document does not provide information on interactions with actors or the
creation of business value; rather than define the problem, it defines
constraints on a solution.&lt;/li&gt;
&lt;li&gt;No interactions with actors is really a
complex step within a larger use case. This is often the result of detailed
analysis without adequate problem definition.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Good Design and Pragmatic Design</title><link href="https://slott56.github.io/2005_09_28-good_design_and_pragmatic_design.html" rel="alternate"></link><published>2005-09-28T10:46:00-04:00</published><updated>2005-09-28T10:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-28:/2005_09_28-good_design_and_pragmatic_design.html</id><summary type="html">&lt;p&gt;Kenny YoungBuck approaches the Master and asks,
&amp;quot;What is good design?&amp;quot;&lt;/p&gt;
&lt;p&gt;The Master
replies, &amp;quot;Kenny, you innocent little monkey, it's a wonder you haven't joined a
cult.  Good design maximizes business value while minimizing costs including
development, maintenance, adaptation and
operation.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Master, are there
circumstances where this is not
true …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Kenny YoungBuck approaches the Master and asks,
&amp;quot;What is good design?&amp;quot;&lt;/p&gt;
&lt;p&gt;The Master
replies, &amp;quot;Kenny, you innocent little monkey, it's a wonder you haven't joined a
cult.  Good design maximizes business value while minimizing costs including
development, maintenance, adaptation and
operation.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Master, are there
circumstances where this is not
true?&amp;quot;&lt;/p&gt;
&lt;p&gt;By way of an answer, the Master
took out his
&lt;em&gt;shinai&lt;/em&gt;
and smacked Kenny on the head so hard that his ears rang like the aftershocks of
an earthquake.&lt;/p&gt;
&lt;p&gt;&amp;quot;Master, where should I
check constraints on input
arguments?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Why Kenny, we've been over
this in essay 15, &lt;a class="reference external" href="https://slott56.github.io/2005_09_19-essay_15_errors_and_exceptions.html"&gt;Errors and Exceptions&lt;/a&gt; .  A class has this
responsibility for its own
inputs.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Master, it seems simpler for
each client to validate data before sending it to my
class.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Simpler for whom, Kenny?  Your
validation rules are now spread out into multiple classes, leading to duplicated
code, and increasing your maintenance costs.  Change is not localized, and
classes are tightly coupled.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;But
Master, I have an example of validation rules in the client that creates
business value.  Can't business value trump good
design?&amp;quot;&lt;/p&gt;
&lt;p&gt;By way of an answer, the
Master took out his
&lt;em&gt;shinai&lt;/em&gt; ;
Kenny, adroitly, jumped back before he was
smacked.&lt;/p&gt;
&lt;p&gt;&amp;quot;Tell me, Kenny, how did the
client side validation rules create business
value?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;They solved two problems in
sending batches of data to a vendor, Master.  First, they provided immediate
feedback on the quality of the data being sent.  Second, they provided clear
error messages for diagnosing the
problem.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;You must suspect this
solution is bad design, or you wouldn't be asking questions,&amp;quot; the Master
replied.&lt;/p&gt;
&lt;p&gt;&amp;quot;It violates the principle of
checking constraints only once,&amp;quot; Kenny
said.&lt;/p&gt;
&lt;p&gt;&amp;quot;Therefore, it was not the best
solution, was it?&amp;quot; the Master
replied.&lt;/p&gt;
&lt;p&gt;&amp;quot;But Master, it creates
business value,&amp;quot; Kenny said. &amp;quot;Isn't that the
goal?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Since the duplicated
constraints add maintenance cost, I hope that was balanced against the value of
early detection and better diagnosis of
problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;Kenny, triumphant, replied
that cost and benefit had both been
considered.&lt;/p&gt;
&lt;p&gt;&amp;quot;What, my furry little
friend, was the business
problem?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Why, the problem was bad
data being sent to the vendor,&amp;quot; Kenny
replied.&lt;/p&gt;
&lt;p&gt;The Master cracked Kenny
across the chops so hard that Kenny had to pick himself up off the
floor.&lt;/p&gt;
&lt;p&gt;&amp;quot;That's a technical problem.
What was the business problem?&amp;quot; The Master
asked.&lt;/p&gt;
&lt;p&gt;&amp;quot;It took too long to discover
the bad data, and too long to diagnose the
errors.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;So, what else could have been
done?&amp;quot; the Master asked.&lt;/p&gt;
&lt;p&gt;&amp;quot;What else?&amp;quot;
Kenny asked, flinching back and
cowering.&lt;/p&gt;
&lt;p&gt;&amp;quot;You identified two problems:
timing and opacity of error messages.  Let's focus on one to solve: how can you
solve the timing problem?&amp;quot; the Master
asked.&lt;/p&gt;
&lt;p&gt;&amp;quot;Timing?  The batch isn't
complete until late in the day.&amp;quot;&lt;/p&gt;
&lt;p&gt;The
Master raised the
&lt;em&gt;shinai&lt;/em&gt; ,
Kenny ducked to the side, but the Master landed a
&lt;em&gt;mawashi-geri&lt;/em&gt;
on Kenny's head that dropped him like a bag of dirty
laundry.&lt;/p&gt;
&lt;p&gt;&amp;quot;Do you mean, Master, that the
batch processing is part of the
problem?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Very good, Kenny,&amp;quot; the
Master said.&lt;/p&gt;
&lt;p&gt;&amp;quot;But Master, the vendor
can't process partial batches.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Kenny,
Kenny, Kenny,&amp;quot; the Master said.  &amp;quot;Good design and business management have
nothing to do with each other.  Just because the vendor is unwilling to change a
bad process does not invalidate good design
principles.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;But Master, in the face
of such a business context, what design should I use?  The right design won't
work because we can't change the vendor.  All we're left with is the bad
design.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If it makes you feel better,&amp;quot;
the Master said, &amp;quot;call it pragmatic; or better, call it the interim
design.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Interim?&amp;quot; Kenny asked,
forgetting to duck. The Master brained him with the
shinai.&lt;/p&gt;
&lt;p&gt;&amp;quot;Once you know the root cause
and the real fix, that is the good design solution.  You did identify the proper
resolution, didn't you?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;But Master,
it would be a huge project to fix the
interface.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Really?  To fix a single
interface?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Well, we do have several
relationships with the vendor, Master, and we would have to fix all of them,&amp;quot;
Kenny said&lt;/p&gt;
&lt;p&gt;&amp;quot;Why?&amp;quot; the Master asked.
&amp;quot;One interface should be message oriented to save time and reduce errors.  What
do the other interfaces have to do with
this?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Even changing one interface
would be a large project.  Where duplicating the constraints was a small
project.  How can you justify all that development effort for a small
problem?&amp;quot;&lt;/p&gt;
&lt;p&gt;The Master put down the
&lt;em&gt;shinai&lt;/em&gt; .
Kenny stopped cowering and looked at the Master, who appeared lost in thought.
With a sudden
&lt;em&gt;tsuki&lt;/em&gt; ,
the Master knocked Kenny back onto his kiester.  Kenny fell like a load of
gravel pouring off a dump truck.&lt;/p&gt;
&lt;p&gt;&amp;quot;Which
is cheaper: development or maintenance?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;But Master,&amp;quot; Kenny coughed, &amp;quot;labor
costs are the same.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Which has the
bigger duration?  What is the life-span of
software?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Years?&amp;quot; Kenny asked, just
before being pounded back down to the
tatami.&lt;/p&gt;
&lt;p&gt;&amp;quot;Decades, my little monkey,&amp;quot;
the Master said.  &amp;quot;Decades.  You're wringing your hands over one-time
development cost that will be returned hansomely over years of flawless
operation.  Instead of a single investment in good design, you endure the
ongoing extortion  of bad design.&amp;quot;&lt;/p&gt;
&lt;p&gt;With
that, the interview was over; the master left the dojo.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 10.2 - When a Column is Not a Column</title><link href="https://slott56.github.io/2005_09_27-essay_102_when_a_column_is_not_a_column.html" rel="alternate"></link><published>2005-09-27T10:41:00-04:00</published><updated>2005-09-27T10:41:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-27:/2005_09_27-essay_102_when_a_column_is_not_a_column.html</id><summary type="html">&lt;p&gt;Sometimes a column is not the atomic piece of
data you thought it was.  See &lt;a class="reference external" href="https://slott56.github.io/2005_09_14-essay_101_when_a_column_is_not_a_column.html"&gt;Essay 10.1&lt;/a&gt;  for the first part of this rant,
which address multi-dimensionality.&lt;/p&gt;
&lt;p&gt;A
second example of a column not being an atomic piece of data is when we have to
support navigation through a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes a column is not the atomic piece of
data you thought it was.  See &lt;a class="reference external" href="https://slott56.github.io/2005_09_14-essay_101_when_a_column_is_not_a_column.html"&gt;Essay 10.1&lt;/a&gt;  for the first part of this rant,
which address multi-dimensionality.&lt;/p&gt;
&lt;p&gt;A
second example of a column not being an atomic piece of data is when we have to
support navigation through a tree (or graph) of information.  In this case, you
could represent the entire thing as a join table of parent and child
pairs.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;parent&lt;/td&gt;
&lt;td&gt;child&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;child 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;child 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;child 1&lt;/td&gt;
&lt;td&gt;child 1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;chile 1&lt;/td&gt;
&lt;td&gt;child 1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;While correct,  no one can easily navigate that structure in pure SQL.  You either have to resort to proprietary extensions to the SQL, or hope that your visualization tool is up to the job.&lt;/p&gt;
&lt;p&gt;You can do a transitive closure on this structure and expand the columns to show multiple generations of parents and children.  You can call this limiting -- it isn't first normal form.  However, it's derived from the proper 1NF view and is merely an aid to navigation&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;level 0&lt;/td&gt;
&lt;td&gt;level 1&lt;/td&gt;
&lt;td&gt;level 2&lt;/td&gt;
&lt;td&gt;level 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;Child 1&lt;/td&gt;
&lt;td&gt;Child 1.1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;Child 1&lt;/td&gt;
&lt;td&gt;Child 1.2&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;Child 2&lt;/td&gt;
&lt;td&gt;Child 2.1&lt;/td&gt;
&lt;td&gt;Child 2.1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;Child 2&lt;/td&gt;
&lt;td&gt;Child 2.1&lt;/td&gt;
&lt;td&gt;Child 2.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This structure is what most people
think of when the think of a hierarchy.  The down side of this presentation is
the hand-wringing that goes with maintenance.  After all, they wouldn't be
considering a data warehouse if they had this hierarchy problem solved.  The
transitive closure algorithm is painful to explain, so an example like this can
help understand the mapping from a small, easily maintained, normalized piece of
data to this, denormalized representation of the same data.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Deliverables, Process and Standards</title><link href="https://slott56.github.io/2005_09_27-deliverables_process_and_standards.html" rel="alternate"></link><published>2005-09-27T01:22:00-04:00</published><updated>2005-09-27T01:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-27:/2005_09_27-deliverables_process_and_standards.html</id><summary type="html">&lt;p&gt;Software development evolves through four phases:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Identification of a problem and inception of a
project to implement a solution.&lt;/li&gt;
&lt;li&gt;Elaboration (analysis) of that problem to
determine the most effective solution.&lt;/li&gt;
&lt;li&gt;Design of software to implement that
solution.&lt;/li&gt;
&lt;li&gt;Implementation of the solution; installing and
configuring software, training, and everything that goes …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Software development evolves through four phases:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Identification of a problem and inception of a
project to implement a solution.&lt;/li&gt;
&lt;li&gt;Elaboration (analysis) of that problem to
determine the most effective solution.&lt;/li&gt;
&lt;li&gt;Design of software to implement that
solution.&lt;/li&gt;
&lt;li&gt;Implementation of the solution; installing and
configuring software, training, and everything that goes with creating a
software product.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Development proceeds
more or less sequentially through these phases.  Where possible, iteration
should be confined to the first two.  Problem identification and elaboration,
being discovery exercises, require careful control of scope.  This is sometimes
accomplished by starting, pruning back the domain of possible problems, and
restarting.  There are not a lot of opportunities for parallelism until
discovery is complete.&lt;/p&gt;
&lt;p&gt;The goal is
successful deployment of software that creates value for the users.  The purpose
of producing intermediate documents is to steer toward that goal in spite of the
often overwhelming complexity of the software that will get
built.&lt;/p&gt;
&lt;p&gt;Several documents collect
information on the process and serve as specification for future steps of that
process.  A methodology provides guidance on tasks that will create the various
documents and deliverables.  A methodology should also provide techniques for
accomplishing the tasks.&lt;/p&gt;
&lt;p&gt;This BLOG
describes five recommended deliverables with some notes on content, process and
standards.  Each of these are independent documents.  However, some elements may
be derived out of a strict linear sequence.  For example, when developing the
architecture, there will be both architectural and design implications; this may
lead to creating some preliminary sections of the design document while
developing the architecture.&lt;/p&gt;
&lt;p&gt;The
documents are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Scope&lt;/strong&gt; or &lt;strong&gt;Problem&lt;/strong&gt; .  This is a clear, complete statement
of the context, problem and constraints on any candidate solution.  This is
produced during project inception.  It is the &amp;quot;charter&amp;quot; that describes what
constitutes success by defining the problem.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2005_09_29-requirements.html"&gt;Requirements&lt;/a&gt; This is the result of problem
&lt;em&gt;elaboration&lt;/em&gt;
or analysis.  This is the use case view and analysis versions of the other
views; they are necessarily incomplete and preliminary.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2005_10_01-architecture.html"&gt;Architecture&lt;/a&gt; This is the high-level description of a
solution.  Where the solution requires a novel architecture, this will be a
complex document.  If the solution adds application software to an existing
architecture, this will be a very simple document.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2005_10_03-design.html"&gt;Design&lt;/a&gt;  This is the description of components to
be built.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2005_10_11-implementation.html"&gt;Implementation&lt;/a&gt; and &lt;a class="reference external" href="https://slott56.github.io/2005_10_15-deployment.html"&gt;Deployment&lt;/a&gt;.  This document describes packaging of
components and their final deployment for value-creating
work.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of these documents are
developed more or less independently and sequentially.  There is no easy way to
start design or implementation until the requirements and architecture are
complete.  Any attempt will typically burn up labor hours that will be
invalidated by changes to the
requirements.&lt;/p&gt;
&lt;p&gt;Each of these documents
looks at the system from five distinct points of view.  The first phases
(Inception and Elaboration) merely outline these views.  The architecture,
design and implementation documents add detail to this structure. They call this
the 4+1 model because 4 views are technical and one is non-technical. &lt;a class="reference external" href="http://www.win.tue.nl/~mchaudro/sa2004/Kruchten4+1.pdf"&gt;Kruchten4+1&lt;/a&gt;  &lt;a class="reference external" href="http://www.developer.com/design/article.php/1553851"&gt;UML Overview&lt;/a&gt; &lt;a class="reference external" href="http://www-128.ibm.com/developerworks/wireless/library/wi-arch11/"&gt;wi-arch11&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Use Case View&lt;/strong&gt;  - what the interactions are that create
value.  A use case defines how an actor interacts with the system to create
business value.  This is the who, when and why of the system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logical&lt;/strong&gt;  or
&lt;strong&gt;Static View&lt;/strong&gt;  - structure of the information.  The data
side of &amp;quot;data processing&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional&lt;/strong&gt;  or
&lt;strong&gt;Dynamic View&lt;/strong&gt;  - the states and activities.  The
processing side of &amp;quot;data processing&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Component View&lt;/strong&gt;  - the technology stack, the hardware and
software components that build out the solution.   The &amp;quot;Architecture&amp;quot;.  This is
the how of the system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployment View&lt;/strong&gt;  - the installation on specific servers
with specific IP addresses.  This is the where of the
system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are not, of course,
distinct in any way.  Changing one changes the others.  Indeed, merely
attempting to write from one POV is almost impossible, since you have to fill in
functional aspects to support the data model (triggers, constraints, etc.) as
much as you need a data model to explain the functionality of the
system.&lt;/p&gt;
&lt;p&gt;This overview omits project
management concerns.  For example, the strategies for team communication, work
procedures, development environment setup, etc. are not covered at all in this
document.  Nor does this approach include any kind of formal quality management
plan.  This is just enough documentation to successfully craft working
software.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="methodology"></category><category term="process"></category><category term="agile"></category></entry><entry><title>Essay 19 - Disentangling Use Cases and GUI Design (Revised)</title><link href="https://slott56.github.io/2005_09_24-essay_19_disentangling_use_cases_and_gui_design_revised.html" rel="alternate"></link><published>2005-09-24T11:40:00-04:00</published><updated>2005-09-24T11:40:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-24:/2005_09_24-essay_19_disentangling_use_cases_and_gui_design_revised.html</id><summary type="html">&lt;p&gt;There are two layers of use case authoring and
minimal consensus on which level is &amp;quot;right&amp;quot; for any particular
purpose.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Business Level use cases - ignore the presence
or absence of a GUI, and pursue the business problem. This leaves designers free
to create any GUI, perhaps one that is not …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;There are two layers of use case authoring and
minimal consensus on which level is &amp;quot;right&amp;quot; for any particular
purpose.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Business Level use cases - ignore the presence
or absence of a GUI, and pursue the business problem. This leaves designers free
to create any GUI, perhaps one that is not so easy to use.&lt;/li&gt;
&lt;li&gt;Interaction Level use cases - dwell on
detailed interactions with GUI elements, presuming an overall business context
in which these interactions create value. This can ignore larger Business Issues
in favor of simple productivity.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There
are more and less detailed levels, also. There is less confusion about these
additional levels.  At the highest level, people sometimes write
application-level use cases that involve interactions among enterprise
applications. These are focused on Enterprise Application Integration (EAI)
issues.  At the lowest level of detail we see use cases that specify the
interaction among individual objects.  Typically, each layer involves &amp;quot;5
plus-or-minus 2&amp;quot; more detailed interactions at the next lower level of
detail.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use Cases&lt;/strong&gt; .  The definition of a use case (An Actor
interacting with a System to create business value) tells me that a use case is
&lt;strong&gt;business&lt;/strong&gt;
focused, and anything more detailed is more of an operating scenario. This
leaves us with two levels of operating scenarios: business-level and
user-interaction-level. However, the context is now much more clear. Business
Use Cases focus on value creation, not on the software technology of how that
business value is created. User Interaction Scenarios implement use cases by
showing the steps a person performs to create that
value.&lt;/p&gt;
&lt;p&gt;There can be a proper tree from
one use case to a few variant business scenarios to a number of of user
interaction scenarios. This makes requirements traceability simple. However, it
is not strictly necessary; often, a clever application scenario may address
multiple use cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User Interaction&lt;/strong&gt; .  There appears to be a tangled
hierarchy between use cases and GUI design. We know that use cases should come
first, and GUI design should be based on use cases. However, it often appears
that the use cases need to presuppose some GUI in order to step through the
user's interactions with the system.  How do we draw the GUI when we don't have
use cases?  How do we document the use cases when we don't have a GUI?
Something has to come first.&lt;/p&gt;
&lt;p&gt;This
situation often indicates that the use cases aren't business focused in the
first place, but technology focused. People who can't write their use cases
without sketching the GUI have conflated business value and software
implementation. They need to step back and define the value creation first. Then
(and only then) can they propose a GUI and work through interaction scenarios
that implement the business-value use cases.&lt;/p&gt;
&lt;p&gt;Writing the use case without a GUI
often seems like a pointless exercise.  Analysts (or users) complain that until
they know the details of how a person will execute their job, they can't specify
what the job accomplishes.  Worse, when you reflect that back, they're
comfortable saying that the goal comes from the detailed steps.  This means that
they aren't comfortable articulating the business goal.  Perhaps the goal is
vague, or perhaps there are political considerations that make it difficult to
expose the real business purpose.&lt;/p&gt;
&lt;p&gt;Generally, however, the reason people
can't articulate the business goal is because they are focused on developing a
specific technical solution.  Business analysts working for IT are often guilty
of channeling the user's business needs into technologies.  Business users with
a technology background or hobby are just as bad at &amp;quot;translating&amp;quot; the business
need into IT terminology to &amp;quot;help&amp;quot; the business analyst.  Both are steering the
use case analysis into GUI interaction design, and neither will successfully
articulate the actual purpose behind the interactions.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 18 - What Is Your Problem?</title><link href="https://slott56.github.io/2005_09_23-essay_18_what_is_your_problem.html" rel="alternate"></link><published>2005-09-23T17:58:00-04:00</published><updated>2005-09-23T17:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-23:/2005_09_23-essay_18_what_is_your_problem.html</id><summary type="html">&lt;p&gt;We know something is wrong or can be improved,
but we lack the will to drill into details and write a problem statement.  It
isn't a lack of ability, it is purely a lack of
will.&lt;/p&gt;
&lt;p&gt;A common source of serious issues
with software comes from proposing a solution without …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We know something is wrong or can be improved,
but we lack the will to drill into details and write a problem statement.  It
isn't a lack of ability, it is purely a lack of
will.&lt;/p&gt;
&lt;p&gt;A common source of serious issues
with software comes from proposing a solution without a full definition of the
problem.  Lacking a crisp definition of the problem, we don't really know when
the problem has been solved.  The most common symptom of this is scope
creep.&lt;/p&gt;
&lt;p&gt;Since we can propose solutions,
we can identify problems.  It's not an ability or skill issue.  Generally, it's
a willingness issue.  Often, root cause identification involves some
considerable embarassment to people who put it software that didn't work and
required work-arounds, or software that had to work-around the work-arounds,
compounding an already bad
problem.&lt;/p&gt;
&lt;p&gt;There are several
problem-identification techniques.  You might want to look at Gause and Weinberg
&lt;em&gt;Are Your Lights On?: How to Figure Out What the Problem Really Is&lt;/em&gt;  [&lt;a class="reference external" href="http://www.amazon.com/exec/obidos/tg/detail/-/0932633161/102-2076231-0120167?v=glance"&gt;Amazon&lt;/a&gt; ]
for a very thorough treatment.&lt;/p&gt;
&lt;p&gt;Here is
an exercise that may help formalize the problem prior to attempting to specify
an incomplete, over-engineered or mis-applied
solution.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What works?&lt;/li&gt;
&lt;li&gt;What are the consequences of what is working?&lt;/li&gt;
&lt;li&gt;What doesn't work?&lt;/li&gt;
&lt;li&gt;What are the consequences of what isn't working?&lt;/li&gt;
&lt;li&gt;What does it take to align the not-working with the working?&lt;/li&gt;
&lt;li&gt;What are the consequences of these changes?&lt;/li&gt;
&lt;li&gt;What are possible mechanisms for the change?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm sure there are many similar
&amp;quot;structured brain-storming&amp;quot; exercises that can be used to ferret out the problem
without discussing candidate solutions too early in the process.  This one seems
to present the core questions in a usable
order.&lt;/p&gt;
&lt;p&gt;An alternative is to attempt to
solve the problem.  We learn about the problem by observing failed solutions.
This has a very rational appeal, but I believe that it can't be managed
successfully.  I think there are several reasons why &amp;quot;discovery prototyping&amp;quot; is
doomed from the outset.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Almost no one who pays the bills is capable of
attempting a solution.  They work by funding a project.  If you ask them to fund
discovery prototyping, they will generally consider the deliverable to be code,
not knowledge.  This expectation implicitly changes the project from discovery
prototyping to solution prototyping.  Because they'll try to keep the code, the
failed solutions will look like mistakes, and there will be tremendous pressure
to create a deliverable solution instead of knowledge.&lt;/li&gt;
&lt;li&gt;It is an expensive use of time.  The number of
false starts to create non-solutions in an effort to uncover the real problem is
a tremendous amount of time; time that could be invested in more profitable
question and answer sessions with a facilitator.  A person with a modicum of
common sense and a good distance from the problem should be able to guide
others.&lt;/li&gt;
&lt;li&gt;It looks too much like creating a solution.
Since we have a track record of cruddy, ad-hoc solutions, a cruddy, ad-hoc
prototype often looks like production software.  Sad, but often true.  It is too
hard to distinguish exploration from production in most
environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think that a
&amp;quot;technical&amp;quot; approach to discovery is fraught with peril.  I would suggest almost
any &amp;quot;non-technical&amp;quot; approach is better.  Particularly if you keep it well
separated from premature description of a solution.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 23 - Jumping the Technology Ship</title><link href="https://slott56.github.io/2005_09_22-essay_23_jumping_the_technology_ship.html" rel="alternate"></link><published>2005-09-22T20:42:00-04:00</published><updated>2005-09-22T20:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-22:/2005_09_22-essay_23_jumping_the_technology_ship.html</id><summary type="html">&lt;p&gt;We're told, repeatedly, to avoid changing horses
in mid-stream.  We're told not to follow the crowd blindly.&lt;/p&gt;
&lt;p&gt;Once upon a time, we made a technology
decision that -- at the time -- was right.  But things have shifted around a
bit, and what was once prudence is now folly.  When do you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're told, repeatedly, to avoid changing horses
in mid-stream.  We're told not to follow the crowd blindly.&lt;/p&gt;
&lt;p&gt;Once upon a time, we made a technology
decision that -- at the time -- was right.  But things have shifted around a
bit, and what was once prudence is now folly.  When do you jump
ship?&lt;/p&gt;
&lt;p&gt;Clearly, the politics of this
decision are paralyzing.  I generally throw up my hands and appeal to the
nebulous &amp;quot;strategic direction&amp;quot;.  If anyone wants to declare the new
tools/language/infrastructure/platform &amp;quot;strategic&amp;quot;, that can quell most
pointless hand-wringing.&lt;/p&gt;
&lt;p&gt;When you
switch from mixed Oracle + DB2 to all DB2, you'll piss off all the developers
and support people who like Oracle.  They'll tell you that it's a mistake to
switch away from their favorite product.  They'll have a lot of reasons to stick
with or switch to their favorite product.  The decision, ultimately,
&lt;strong&gt;is&lt;/strong&gt;
political.  It can't be looked at as anything but serving a constituency to
curry favor.  Yes, there's
&lt;em&gt;some&lt;/em&gt;
engineering sense to it, but don't think that there is one &amp;quot;correct,&amp;quot; rational
engineering decision which will win the day.  Engineering is trade-offs; it's
just applied politics using math and
physics.&lt;/p&gt;
&lt;p&gt;Here's a thought [&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?fid=63455&amp;amp;tid=121766#forum-message1127407549817jbullock"&gt;bloki&lt;/a&gt; ] that might help frame up the decision in a
way that makes it possible to bypass the politics of the situation and move on
to something perhaps more
fruitful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timing&lt;/strong&gt; .
Or, the cost of doing nothing. What will it really cost if we wait until later,
and it gets worse (i.e., things start to break for want of compatibility,
upgrades, bug-fixes,
etc.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt; .
How sure are we that we will continue to create products of comparable quality?
Note that we have a current level of success, and it doesn't really depend on
the technology, but rather on process and
organization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Productivity&lt;/strong&gt; .
What will the productivity drop be as we switch?  Will there be an improvement
with newer technology?&lt;/p&gt;
&lt;p&gt;Let's apply this
model to the age-old PL/SQL vs. J2EE web development
question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timing&lt;/strong&gt;
of jumping ship.  Currently, we're building our web pages with PL/SQL.  As we
move into the portal-based architecture, and look around at open-source
solutions, we find that they're all J2EE.  Are things broken?  No.  Things
aren't broken today.&lt;/p&gt;
&lt;p&gt;Will they break?
Not until Oracle turns its back on PL/SQL.  Considering their vast size, PL/SQL
has a good decade run left in it.  Indeed, if someone had real guts, they'd open
source it and let it stand as a competitor to Perl, PHP and
Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt; .
Currently, we're pretty good a PL/SQL web pages.  Would we be better with J2EE?
Would STRUTS improve the overall quality?  Specifically, which of the quality
factors might be touched: Need Satisfaction, Resource Use, Maintainability,
Adaptability, TCO?&lt;/p&gt;
&lt;p&gt;PL/SQL -- lacking
effective object definition -- can impose limitations on reuse and
understandability.  While Java has the capability of producing larger and more
sophisticated applications, the quality of work that I've seen in Java indicates
that it isn't the norm.   PL/SQL has limited adaptability.  But that puts us
back into the &amp;quot;Oracle Viability&amp;quot; question; and PL/SQL has a long
future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Productivity&lt;/strong&gt; .
While jumping ship does lead to a dip in deliverables, it may lead to
improvements in the long run.  First, STRUTS can be a big simplification, as can
JSP's.  Second, there's a lot of open source out
there.&lt;/p&gt;
&lt;p&gt;While it is clear that we
shouldn't consider jumping ship yet, we now have criteria for revisiting the
decision.  When someone brings it up again, we can look at timing, quality and
productivity and see if anything has changed that would make us rethink any of
these factors.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 17 - Solution or Workaround?</title><link href="https://slott56.github.io/2005_09_22-essay_17_solution_or_workaround.html" rel="alternate"></link><published>2005-09-22T17:29:00-04:00</published><updated>2005-09-22T17:29:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-22:/2005_09_22-essay_17_solution_or_workaround.html</id><summary type="html">&lt;p&gt;The challenge in starting a project correctly is
to get a problem statement written down in spite of the lack of clue.  There is
a pervasive unwillingness to tackle problem description because it is so hard.
It's hard because there is a potentially lengthy search to separate proximate
from root …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The challenge in starting a project correctly is
to get a problem statement written down in spite of the lack of clue.  There is
a pervasive unwillingness to tackle problem description because it is so hard.
It's hard because there is a potentially lengthy search to separate proximate
from root causes.&lt;/p&gt;
&lt;p&gt;I think that another
cause of the unwillingness to commit to written descriptions is the conflation
of &amp;quot;solutions&amp;quot; and &amp;quot;work-arounds&amp;quot;.  Without recognition of the actual problem
(and actual root causes), it's hard to tell what is being fixed and what is
being adapted.  Often we avoid root cause fixes because they are pervasive;
fixing the real problem would break a number of work-arounds.  This is termed
scope control and is somehow
meritorious.&lt;/p&gt;
&lt;p&gt;Compounding the difficulty
of clearly defining a problem is that problems (and their solutions) are often
negotiable.  The solutions to some problems have high value and we're willing to
pay to have them fixed.  Other problems are mere trifles, and we don't invest
any effort in fixing them.  The costs and benefits are subtle and shifty; the
number of alternative solutions make it sometimes difficult to pin down a
crisply defined problem.  Problem identification can be embarassing, and there
is a lot of blame deflection that prevents root cause
analysis.&lt;/p&gt;
&lt;p&gt;My theory on how to proceed
is this.  Warning: what follows is an iterative approach to analysis; it
involves rework and incremental delivery.  This is, in many circles, anethma:
analysis can't be that hard, rework can't be necessary, etc.  However, bad
analysis leads to bad everything that follows.  If incremental delivery is good
for the construction phases, it ought to be good for the discovery phases,
also.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State The Problem&lt;/strong&gt; .  No one gets to propose any solution
until the problem statement is reasonably complete, been agreed to by the
stake-holders, and has been edited to be &amp;quot;solution neutral.&amp;quot;  This is painful.
The powerpoint presentation used to justify spending $15M often merely implies a
problem statement, and describes a solution, but fails to nail down the problem.&lt;/p&gt;
&lt;p&gt;My preference is to take hostages
until this is done.  Refuse to do my &amp;quot;architect&amp;quot; job until I have a problem
statement.  I try really hard to do that, but at some point I realize that the
battle-front has moved, and I'm left assaulting an empty
bunker.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Clarify The Problem&lt;/strong&gt; .  No one gets to propose any solution
until the problem statement has been rewritten with a reasonably well-defined
list of real business entities, and a reasonably well-defined list of
consistently used verbs.  The lexicon of discourse defines the problem domain
and is the seed for a data
dictionary.&lt;/p&gt;
&lt;p&gt;I find it hard to do this.
I try and try and try, and people say &amp;quot;in the real world we just don't have time
for all that formality and rigor.&amp;quot;  To which I respond, &amp;quot;what problem are you
solving?&amp;quot;  To which they rarely have a reply.  They run on anyway, with me left
whining in the background.  I often put it on my weekly status reports until
they ask me to stop saying that, it makes the project look bad.  They wave their
hands at the 25 use cases, and say &amp;quot;if that doesn't define the problem, what
does?&amp;quot;  To which I resopnd &amp;quot;a problem
statement.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Propose A Solution&lt;/strong&gt; .  Now that you have a problem, you
get to propose a solution and write up use cases to describe that proposal.
Plan to throw the first batch or two away.  Hopefully, you'll get a chance to
trash them before people start writing software that doesn't really solve the
problem.  However, you will often have to wait for a later release to attempt to
address the real problem.&lt;/p&gt;
&lt;p&gt;This is
something new that I've begun to realize: the lack of clue is so profound, and
so hard to recognize that the only real way to understand the problem is to
write it up once, realize how little you know, throw it all away, and write it
up again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand the Problem&lt;/strong&gt; .  You will rewrite the initial problem
statement, write a third (or fourth) draft of the use cases.  At this point, you
will have figured out what the root causes of the problem are, and recognize
when you are &amp;quot;solving&amp;quot; something and when you are &amp;quot;working around&amp;quot; something.
These are conflated all the time with horrible consequences in cost and
complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Weigh The Effectiveness Of Solution Alternatives&lt;/strong&gt; .  Once
you actually understand the problem, you can make rational judgments about the
solutions, their actual value and their costs.  Only now can you seriously
consider building something.  Since you finally know what you are solving and
what you are working around, you can make intelligent progress with intelligent
trade-offs.&lt;/p&gt;
&lt;p&gt;Until you understood the
problem, you were really in discovery mode.  Once you understood the problem,
you could transition to engineering
mode.&lt;/p&gt;
&lt;p&gt;For some additional details on
this, see Essay 9, &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2005_09_12-essay_9_getting_started.html"&gt;Getting Started&lt;/a&gt; &amp;quot;.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>What are "Requirements"?</title><link href="https://slott56.github.io/2005_09_21-what_are_requirements.html" rel="alternate"></link><published>2005-09-21T14:48:00-04:00</published><updated>2005-09-21T14:48:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-21:/2005_09_21-what_are_requirements.html</id><summary type="html">&lt;p&gt;See Holub's column &amp;quot;Requirements Gathering&amp;quot;
[&lt;a class="reference external" href="http://www.sdtimes.com/fullcolumn/column-20050915-02.html"&gt;Requirements Gathering&lt;/a&gt; ] for the goods on what is actually useful
and what isn't so useful in this activity we call &amp;quot;Requirements
Gathering&amp;quot;.&lt;/p&gt;
&lt;p&gt;I have to applaud the
notion that &amp;quot;focus on the minutiae&amp;quot; misses the whole point.  A clear problem
statement is perhaps more important …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Holub's column &amp;quot;Requirements Gathering&amp;quot;
[&lt;a class="reference external" href="http://www.sdtimes.com/fullcolumn/column-20050915-02.html"&gt;Requirements Gathering&lt;/a&gt; ] for the goods on what is actually useful
and what isn't so useful in this activity we call &amp;quot;Requirements
Gathering&amp;quot;.&lt;/p&gt;
&lt;p&gt;I have to applaud the
notion that &amp;quot;focus on the minutiae&amp;quot; misses the whole point.  A clear problem
statement is perhaps more important that anything else, and the &amp;quot;requirements&amp;quot;
are often negotiable, depending on the problem and the nature of the
solution.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2005_09_17-essay_13_analysis_without_running_aground.html"&gt;&amp;quot;Analysis Without Running Aground&amp;quot;&lt;/a&gt;
I tried to capture this sense of define
the problem first.  I've got many war stories on this subject.  Over the next
month or so, I hope to get many of these off my chest in into this
Blog.&lt;/p&gt;
&lt;p&gt;Having Holub's clearly-stated
version of my opinion is a real help.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Essay 16 - Three Rules of Deferred Decision-Making</title><link href="https://slott56.github.io/2005_09_21-essay_16_three_rules_of_deferred_decision_making.html" rel="alternate"></link><published>2005-09-21T10:10:00-04:00</published><updated>2005-09-21T10:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-21:/2005_09_21-essay_16_three_rules_of_deferred_decision_making.html</id><summary type="html">&lt;p&gt;This is what I remind myself to do on a daily
basis.  It forces me to be problem-focused, not technology focused.  It also
enforces the design principle of &amp;quot;deferred decision-making&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Isolate design decisions (via proper
allocation of responsibility) so that the final, final decision can be made as
late in …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is what I remind myself to do on a daily
basis.  It forces me to be problem-focused, not technology focused.  It also
enforces the design principle of &amp;quot;deferred decision-making&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Isolate design decisions (via proper
allocation of responsibility) so that the final, final decision can be made as
late in the development process as possible.&lt;/li&gt;
&lt;li&gt;Create an architecture that allows
designers the freedom to tackle as many issues as possible as part of detailed
design.&lt;/li&gt;
&lt;li&gt;Create a detailed design that makes as
many questions as possible into simple programming choices.&lt;/li&gt;
&lt;li&gt;Make programming choices reconfigurable
with minimal rework.&lt;/li&gt;
&lt;li&gt;Implement reconfiguration through
run-time parameters: the final decisions are now the user's to
make.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 22 - Predictability, Hysteresis and Idempotency</title><link href="https://slott56.github.io/2005_09_19-essay_22_predictability_hysteresis_and_idempotency.html" rel="alternate"></link><published>2005-09-19T23:50:00-04:00</published><updated>2005-09-19T23:50:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-19:/2005_09_19-essay_22_predictability_hysteresis_and_idempotency.html</id><summary type="html">&lt;p&gt;It can be said that software is 'non-linear and
time variant. ... The output is definitely not just a function of the current
input.' (&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?fid=65820&amp;amp;tid=120824#forum-message1127163619932jbullock"&gt;bloki&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;While
possibly true in one sense, that understanding has to conflate a number of
things into &amp;quot;software&amp;quot;, and makes it very difficult to take action to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It can be said that software is 'non-linear and
time variant. ... The output is definitely not just a function of the current
input.' (&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?fid=65820&amp;amp;tid=120824#forum-message1127163619932jbullock"&gt;bloki&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;While
possibly true in one sense, that understanding has to conflate a number of
things into &amp;quot;software&amp;quot;, and makes it very difficult to take action to improve
predictability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hysteresis and Idempotency&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Software does not wear
out or change behavior.  If you want to talk about physical damage to media, you
are conflating software with the computer system, including hardware and
entropy.  Or, if you are talking about unintentional overwriting of software
files (the Windows &amp;quot;corrupted DLL&amp;quot; problem) you are conflating application
software plus buggy OS
software.&lt;/p&gt;
&lt;p&gt;Software is idempotent: the
outputs reflect the inputs every single time.  To say otherwise is to conflate
the software with the running application plus persistent data.  Or, worse, to
conflate the running application plus persistent data plus user inputs.  While
the software is idempotent, your scenario may exploit a timing dependency,
making it difficult to predict the
results.&lt;/p&gt;
&lt;p&gt;The hysteresis question is &amp;quot;do
you know all of the inputs?&amp;quot;  You may have hidden inputs.  There may be inputs
which are outside the declared variables, class definitions, packages and
dependencies.  There may be inputs which are buried as defects or ambiguities in
the programming language  formal specification or its implementation.  In the
case of Java, it could be either in the Java Language Specification or your
particular JVM.   In languages like C, you'd have a hard time pinning down all
of the hidden inputs in language and implementation.  They can be enumerated --
it's all just software -- but it can be challenging because it is a lot of
software.&lt;/p&gt;
&lt;p&gt;There are two sources of
&amp;quot;Unpredictability&amp;quot; in software:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The presence of bugs makes behavior hard to predict.&lt;/li&gt;
&lt;li&gt;The sheer size of the software that makes
it unpleasantly difficult to predict.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One oft-cited issue is timing
dependencies: are these bugs or are we just overwhelmed by complexity?  They're
bugs.  A race condition means that timing matters: when timing matters, this is
a bug.  Period.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Software (Ideal) vs. Computer System (real)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can make a distinction
between software &amp;quot;as designed -- in the realm of ideas&amp;quot; and software &amp;quot;as
implemented -- in the realm of hardware&amp;quot;.  This gives us two senses of
predictability.  One a mathematical absolute, with idempotency.  The other is a
stochastic process where things wear out and
break.&lt;/p&gt;
&lt;p&gt;We can also separate what we
mean by correct behvior: the &amp;quot;as designed&amp;quot; behavior vs. the &amp;quot;meets requirements&amp;quot;
behavior.  There are two senses of what our basis for comparison is: &amp;quot;Designed
Behavior&amp;quot; vs. &amp;quot;Desired Behavior&amp;quot;.  The desired behavior is notoriously slippery:
users lie, fail to tell the whole truth and change their mind.  The designed
behavior, again, is a mathematical
absolute.&lt;/p&gt;
&lt;p&gt;Consequently there's this
little grid.  (But iBlog doesn't handle HTML formatting well, so we'll unwind it
into a hierarchy)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ideal Software&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Designed Behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Software -- the formal language --
matches the designed behavior perfectly.  Any failure in predictability here is
failure to understand the formal language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Desired Behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Software matches what is required or
intended; the extent to which it fails can be called
&lt;strong&gt;Design Noise&lt;/strong&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Real Software&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;•Designed Behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A computer system (hardware+software)
matches the designed behavior to the extent that the implementation of hardware
and operating system is correct.  It also matches to the extent that language
and run-time environment work correctly.  The extent to which this fails can be
called &lt;strong&gt;Implementation Noise&lt;/strong&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Desired Behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A computer system (hardware+software)
match against the required or intended behavior depends on both
&lt;strong&gt;Design Noise&lt;/strong&gt;  and
&lt;strong&gt;Implementation Noise&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design Noise&lt;/strong&gt;  is all about process.  A good process
gives you an acceptable level of noise.  Having no process at all, of course,
produces noise so huge you may never get a chance to finish the project.  It
gets cancelled because of &amp;quot;scope creep&amp;quot; or other goofy management fiats.  If you
have no process, you cannot hope to control design noise.  Indeed, the very
reason for defining a process at all is to identify sources of design noise by
having a repeatable work effort and
deliverable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation Noise&lt;/strong&gt;  is all about tools.  You can, with
appropriate tool use, reduce this noise to very, very low levels.  Can you
eliminate it?  My argument is &amp;quot;yes&amp;quot;.  A simple-enough language, a simple-enough
OS, and a simple-enough design approach makes this very doable.  Most popular
tools fail the simple-enough test.  However, this is a noise source that is
controllable and measurable because it doesn't involve people and process; it
involves relatively static hardware and software.  Experiments are easy to run
and rerun.  Statistics aren't involved; this is basic cause and
effect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Controls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Control
Design Noise with process and reviews of work products.&lt;/p&gt;
&lt;p&gt;Control Implementation Noise with
tools to automate testing.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 15 - Errors and Exceptions</title><link href="https://slott56.github.io/2005_09_19-essay_15_errors_and_exceptions.html" rel="alternate"></link><published>2005-09-19T18:00:00-04:00</published><updated>2005-09-19T18:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-19:/2005_09_19-essay_15_errors_and_exceptions.html</id><summary type="html">&lt;p&gt;When we embed explicit constraint checking into a
design, they can occur in any of the available tiers: persistence (database),
access, model, control or view.  Some of these options are easier to consider
than others.  The view tier, for instance, merely has responsibility for
presentation and should be able to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When we embed explicit constraint checking into a
design, they can occur in any of the available tiers: persistence (database),
access, model, control or view.  Some of these options are easier to consider
than others.  The view tier, for instance, merely has responsibility for
presentation and should be able to cope with any data provided.  The other
tiers, however, do require some tradeoff
analysis.&lt;/p&gt;
&lt;p&gt;The database tier is
appealing, but problems here can escalate because database triggers and checks
interact in subtle ways, and cascading trigger operations can consume precious
shared resources on a centralized database
server.&lt;/p&gt;
&lt;p&gt;The access tier is appealing,
but often it is simply JDBC or CORBA connectivity.  Enhancing this with
application-specific constraints seems to be like cluttering the view tier with
application-specific features.  This may be appropriate, but may also limit
reuse as well distribute rules into unexpected
locations.&lt;/p&gt;
&lt;p&gt;Remaining are the model and
control tiers.  Some contraints are essential, structural features of the model.
Many however, are a matter of enforcing a range of values that involves subtle,
mutable or weakly defined business semantics.  In this case, the control tier is
ideal, since these are part of the actor's interaction, not part of the essence
of the data model.&lt;/p&gt;
&lt;p&gt;Having allocated
most constraints to control-related packages, we note that constraints reveal
two kinds of problems: design problems and operational problems. We also note
that software lives on a development phase of its life and a deployment phase.
This gives us the following four places where constraint violations can be
discovered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design Problem found in a Design Phase&lt;/strong&gt; .  Excellent.  Just
what we hoped for.  Thrown exceptions are very nice here: the application
crashes with a traceback dump that can be used for diagnosis.  The tools for
locating design problems are highly specialized.  Constraints in the code that
locate design problems at design time are nice to have; they are like JUnit test
cases.  Note that these are not part of the problem or the solution, they are
part of the software development process, and should stay there. It's on the
same order of utility as a debugger - fine for programmers, but not fine for end
users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design Problem found in a Deployment Phase&lt;/strong&gt; .  The root cause is a
failure in the software development process.  The question is how to detect
these.  My preference is to avoid masking them with &amp;quot;clean&amp;quot;, &amp;quot;user-invisible&amp;quot;
error handling.  The application is badly broken if it has design flaws.
Silently ignoring these problems is bad.  Crashing outright, in some contexts is
bad, too.  There's a fine line here.  My preference is to crash, but application
errors logs with full tracebacks that help diagnosis are good when they are read
and acted upon by
developers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operational Problems found in a Design Phase&lt;/strong&gt; .  Hmmm.
While some would say this is just good design -- &amp;quot;idiot-proofing the software&amp;quot;
-- I disagree.  If operational problems are discovered during testing, it means
the requirements may have been wrong in the first place.  Note that we are not
talking about mechanisms to prevent fraud and abuse, those are ordinary
requirements.  We are talking about users trying to put textual notes in an
amount field, or creating domain-specific nulls.&lt;/p&gt;
&lt;p&gt;Example of a domain-specific null is
creating a goofy-looking default date (e.g., 10/29/1892) because the date is
mandatory but not actually available.  Using a goofy-looking amount (e.g.,
-9999.99) for the amount because it is mandatory in the software, but not in the
business process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operational Problems found in a Deployment Phase&lt;/strong&gt; .  There
are two cases here.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Operational Problems&lt;/strong&gt; . Bad operation means that the actor
was mistaken in their understanding of how to create business value: wrong goal,
wrong software to meet that goal, etc. Constraints may help discover this.
Typically a few key constraints will find this situation very early in the
user's experience.  These are clearly part of the control layer, and meaningful
diagnostic messages are important to alerting the actor that their actions are
inappropriate for this piece of the system, but may be more appropriate with a
different piece of the system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software Problems&lt;/strong&gt; .  Other than bad design, bad software
usually means the business context has changed, and the software has not. This
is ordinary evolution, and overly constrained software is an impediment, not a
solution.  Again, a few key constraints to locate the situation and support
diagnosis is the most important step.  The user's response, however, is
different, because they are now asking the system to behave differently instead
of using the system differently.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note
that constraints lead to (1) development, (2) maintainence cost and (3)
adaptation cost.  Too many constraints, and inappropriately located constraints
will make adaptation costly, with the consequence of making business evolution
slow and complex.&lt;/p&gt;
&lt;p&gt;When a constraint is
added to an application, there are two design considerations for the situation
we are trying to prevent.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If we omit the constraint, what breaks?
The Law? Industry practices? The company structure? The line of business? An
operational process?&lt;/li&gt;
&lt;li&gt;If we omit the constraint, what is the
nature of the breakage? OS crash? Application crash? Missing or damaged data
with legal or financial consequences? Inconvenience?
Confusion?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, is there a
reasonable return on the investment?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 14 - Mutability Analysis</title><link href="https://slott56.github.io/2005_09_18-essay_14_mutability_analysis.html" rel="alternate"></link><published>2005-09-18T16:24:00-04:00</published><updated>2005-09-18T16:24:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-18:/2005_09_18-essay_14_mutability_analysis.html</id><summary type="html">&lt;p&gt;First, there are several tiers of mutability in
requirements in general.  These tiers define typical levels of change context,
problem and forces that select a solution.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Natural Laws&lt;/strong&gt;  (i.e., Gravity). As well as metaphysical
&amp;quot;laws&amp;quot; (i.e., reality). These don't change much. Sometimes we encapsulate this
information with static …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;First, there are several tiers of mutability in
requirements in general.  These tiers define typical levels of change context,
problem and forces that select a solution.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Natural Laws&lt;/strong&gt;  (i.e., Gravity). As well as metaphysical
&amp;quot;laws&amp;quot; (i.e., reality). These don't change much. Sometimes we encapsulate this
information with static final constants so we can use names to identify the
constants.  Pi, e, seconds_per_minute, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Legal Context&lt;/strong&gt;  (both statutory law and case law), as
well as standards and procedures with the effect of law (i.e. GAAP). Most
software products are implicitly constrained, and the constraints are so
fundamental as to be immutable. They aren't design constraints, per se, they are
constraints on the context space for the basic description of the problem. Like
air, these are hard to see, and their effects are usually noted
indirectly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry&lt;/strong&gt; . That is to say, industry practices
and procedures which are prevelant, and required to be called a business in a
particular industry. Practices and procedures that cannot be ignored without
severe, business-limiting consequences. These are more flexible than laws, but
as pervasive and almost as implicit. Some software will call out
industry-specific features. Health-care packages, banking packages, etc., are
explicitly tailored to an industry context.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Company&lt;/strong&gt; . Constraints imposed by the
organization of the company itself. The structure of ownership, subsidiaries,
stock-holders, directors, trustees, etc. Often, this is reflected in the
accounting, HR and Finance systems. The chart of accounts is the backbone of
these constraints. These constraints are often canonized in customized software
to create unique value based on the company's organization, or in spite of
it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line of Business&lt;/strong&gt; .  Line of business changes stem from
special considerations for subsets of vendors, customers, or products.
Sometimes it is a combination of company organization and line of business
considerations, making the relationship even more obscure.  Often, these are
identified as special cases in software.  In many cases, the fact that these are
special, abnormal cases is lost, and the &amp;quot;normal&amp;quot; case is hard to isolate from
all the special cases. Since these are things change, they often become opaque
mysteries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operational Bugs and Workarounds&lt;/strong&gt; . Some procedures or software are
actually fixes for problems introduced in other software. These are the most
ephemeral of constraints. The root cause is obscure, the need for the fix is
hidden, the problem is enigmatic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of these, tiers 1 to 3 are modeled in the very nature of the problem, context and
solution. They aren't modeled explicitly as constraints on X, or business rules
that apply to X, they are modeled as X itself.  These things are so hard to
change that they are embodied in packaged applications, from third parties, that
don't create unique business value, but permit engaging in business to begin
with.&lt;/p&gt;
&lt;p&gt;Layers 4 to 6, however, might
involve software constraints, explicitly packaged to make it clear. Mostly,
these are procedural steps required to either expose or conceal special cases.
Once in a while these become actual limitations on the domain of allowed data
values.&lt;/p&gt;
&lt;p&gt;After considering changes to
the problem, we also have to consider changes to the solution.  The mutation of
the implementation can be decomposed into procedural mutation and data model
mutation.  The &lt;a class="reference external" href="http://www.zifa.com"&gt;Zachman
Framework&lt;/a&gt;   gives us the hint the communication, people and motivation
may also change.  Often these changes are manifested through procedural or data
changes.&lt;/p&gt;
&lt;p&gt;Procedural mutation means
programming changes.  This implies that flexible software is required to respond
to business changes, customer/vendor/product changes, and evolving workarounds
for other IT bugs.  Packaged solutions aren't appropriate, the maintenance costs
are astronomical.  Internally developed solutions that require extensive
development, installation and configuration aren't appropriate either.  Scripted
solutions using tools like Python and Perl are most appropriate to support
flexible adaptation of business
processes.&lt;/p&gt;
&lt;p&gt;Data model mutations fall
into two deeper categories: structural and
non-structural.&lt;/p&gt;
&lt;p&gt;When data values are
keys (natural, primary, surrogate or foreign) they generally must satisfy
integrity constraints (they must exist, or must not exist, or are mandatory or
occur 0..m times). These are structural. The data is uninterpretable, incomplete
and broken without them.  When these change, it is a either a profound change to
the business or a long-standing bug in the data model.  Either way the fix is
expensive.  These have to be considered carefully and understood
fully.&lt;/p&gt;
&lt;p&gt;When data values are non-key
values, the constraints must be free to evolve. The semantics of non-key data
fields are rarely fixed by any formalism. Changes to the semantics are rampant,
and sometimes imposed by the users without resorting to software change. In the
face of such change, the constraints must be chosen wisely.&lt;/p&gt;
&lt;p&gt;&amp;quot;Yes, it says its the number of days
overdue, but it's really the deposit amount in pennies. They're both numbers,
after all.&amp;quot;&lt;/p&gt;
&lt;p&gt;Mutability Analysis, then,
seeks to characterize expected changes to requirements (the problem) as weel as
the data and processing aspects of the solution.  With some care, this will
direct the selection of solutions.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 13 - Analysis Without Running Aground</title><link href="https://slott56.github.io/2005_09_17-essay_13_analysis_without_running_aground.html" rel="alternate"></link><published>2005-09-17T11:27:00-04:00</published><updated>2005-09-17T11:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-17:/2005_09_17-essay_13_analysis_without_running_aground.html</id><summary type="html">&lt;p&gt;Analysis is a difficult job. It requires
capturing the business problem, including the business entities and the business
processing. It requires endless patience, good interviewing skills and excellent
writing skills. Most important, it also requires the discipline to discover the
whole problem before putting forth any
solution.&lt;/p&gt;
&lt;p&gt;This essay provides …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Analysis is a difficult job. It requires
capturing the business problem, including the business entities and the business
processing. It requires endless patience, good interviewing skills and excellent
writing skills. Most important, it also requires the discipline to discover the
whole problem before putting forth any
solution.&lt;/p&gt;
&lt;p&gt;This essay provides some
background, followed by the 5-step process, then a summary of the objectives of
the analysis exercise. The process has the following steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Problem Description&lt;/li&gt;
&lt;li&gt;Nouns and Verbs&lt;/li&gt;
&lt;li&gt;Use Cases&lt;/li&gt;
&lt;li&gt;Solution Summary&lt;/li&gt;
&lt;li&gt;Iterate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most
analysts have strong IT backgrounds, and immediately solve the problem. Before
the user has finished describing it, the solution forms in their heads. Sadly,
many line-of-business end-users have so much IT experience, they are solving the
problem, also. They describe files, processing, conditions, business rules, and
all the trappings of IT solutions. They also ignore their own actual problem,
and instead describe a solution they think IT can
build.&lt;/p&gt;
&lt;p&gt;Frustratingly, there is a lot of
second-guessing that goes on. People say things during analysis that are
calibrated to create a certain kind of response. They don't often report the
whole story, but just enough of the story to get the desired response. This is
often revealed when the condition that is &amp;quot;always true&amp;quot; has &amp;quot;a few minor
exceptions, but you don't need to worry about those, they'll never
occur.&amp;quot;&lt;/p&gt;
&lt;p&gt;Warning:
user manipulation in
process.&lt;/p&gt;
&lt;p&gt;There are two important
subject areas for analysis: data and processing. For others, see the Zachman
Framework. &lt;a class="reference external" href="http://www.zifa.com"&gt;http://www.zifa.com&lt;/a&gt;  . You can argue which of
these is more enduring and essential. Data if often identified as essential,
since business processes change, but the artifacts (the data) doesn't evolve as
rapidly.  See &lt;a class="reference external" href="https://slott56.github.io/2005_09_11-essay_8_data_first_user_interface_later.html"&gt;Essay 8&lt;/a&gt; , &amp;quot;Data First, User Interface Later&amp;quot; for
an opinion.  This could be termed functional drift. We also have to resolve the
issue of two organizations using different processes around the same artifact;
e.g., two different invoicing systems. This could be termed functional
heterogeneity.&lt;/p&gt;
&lt;p&gt;However, data is not
immune from these problems. Databases are full of attributes where the actual
purpose doesn't match the name. This is either evolution (semantic drift) or
conflict (semantic heterogeneity).&lt;/p&gt;
&lt;p&gt;I like to call this the &amp;quot;Third
Christmas Club Problem.&amp;quot; Once upon a time, there was a bank service called a
Christmas club. Make deposits for 50 weeks, get your money with a big interest
payment at the end of the year. It's a terrible deal, banks don't offer it
anymore, but their systems still have places to record Christmas Club account
numbers in the customer database. Interestingly, those fields have been reused
for other purposes, but the database column names have not been changed. Now you
find the credit card account number that is tied to a home equity loan hidden in
the otherwise unused XMAS_CLUB_3
field.&lt;/p&gt;
&lt;p&gt;We have to start somewhere, and
neither data nor process is perfect. We'll start with
process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write a narrative of
the problem, from the user's point of view. Focus on the user's purpose,
objectives, goals. Include a high-level summary overview of the essential
processing that can't get done properly. Don't metion solutions; be accurate but
not perfectly precise. You will rework this
heavily.&lt;/p&gt;
&lt;p&gt;You are only writing a few
paragraphs. You are, however, describing the business problem. See Essay 17,
&amp;quot;Solution or Workaround?&amp;quot; for guidance on this. Given a problem, it is possible
to define a solution. Lacking a problem to solve ... well ... the entire project
can never be
successful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Potential Difficulties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dry Shoals&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can't think of anything
to say. This is writer's block. Everyone gets it. Do two things to cure
it.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Get away from the computer; take notes on
paper with a pen. Computers are too much like the final, published form. This is
intimidating. It makes the first draft of the first revision seem like it is
&amp;quot;for the record&amp;quot;. It isn't; it doesn't count for anything. Do it off
line.&lt;/li&gt;
&lt;li&gt;Write anything. List the users; list the
business entities; list the departments. Jot down phrases in no particular
order. Call you uncle John and ask him to tell you about the time he bumped into
Buddy Ebsen in the Philadelphia airport and write that story down, just to write
something. Eventually, you will start to write down the user's view of what the
system does and how it helps them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Warning:
Do not skip this step and move on, hoping to make up for the lack of written
ideas later in the process. If are blocked now, you will be blocked later. You
have to start with something written, but you will evolve it into something
useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Orinoco Flow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You have written 15 pages of
single-spaced material, summarizing all of the powerpoint presentations, email
traffic, process manuals, company policies and the sports section of the Sunday
New York Times. You haven't even begun to scratch the surface on the highly
nuanced and sophisticated capabilities that would provide enduring business
advantage well into the next decade. You've accounted for technology shifts and
opportunities to create additional value above and beyond the project
scope.&lt;/p&gt;
&lt;p&gt;You have, of course, solved the
problem without formally defining it. You need to throw this away and begin
again to describe just the user's experience with the system: their
interactions, and how this creates value for the
users.&lt;/p&gt;
&lt;p&gt;Warning:
Do not save this original material. It is a thought virus, and will infect
everything you do. Indeed, you may be unable to shake this solution and actually
focus on the user's real problems. Consider recusing yourself from the project
if you can't delete it all and start
again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edge of the World&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You've written some stuff,
but it's too abstract to be of any use. You can't code from it, or even design
from it. It's high level, pointless fluff. It's incomplete, and cannot be
completed because it's so vague and
purposeless.&lt;/p&gt;
&lt;p&gt;This is actually usable
stuff. There's more process to making this valuable, and the process is
iterative. This is at least grist for the mill, and can be
refined.&lt;/p&gt;
&lt;p&gt;Warning:
Do not resort to prototyping at this point. All the code you write will be a
thought virus, and will shape your concept of problem and solution. At some
point in the future, you might resort to prototyping to drive out additional
requirements or resolve design issues. Don't do it
now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Nouns and Verbs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While sometimes deprecated as
misleading or simplistic, I found noun and verb analysis to be a good technique
for getting started on understanding the problem
domain.&lt;/p&gt;
&lt;p&gt;From your narrative
description, locate nouns and verbs. Nouns should give you big hints about the
actors, the business entities, attributes of the entities. Verbs will help you
identify processing that the business entities are part
of.&lt;/p&gt;
&lt;p&gt;You will find that your description
is often incomplete or off-target.&lt;/p&gt;
&lt;p&gt;Warning:
Don't rewrite heavily at this time; wait for the end of the iteration before
rewriting.&lt;/p&gt;
&lt;p&gt;From the nouns and verbs
concoct a business model, including the static (entity or class) and dynamic
(activity and state) descriptions. This is not a logical model; it doesn't have
all of the attributes, all of the relationships, or even all of the entities. It
is a conceptual model that defines the terms used in the narrative. It will
evolve (eventually) into a more technical, more usable
model.&lt;/p&gt;
&lt;p&gt;Advice:
Work quickly, don't spend too much time editing, revising or extending; your job
is to capture information and iterate through a number of
steps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Use Cases&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the business model and
the narrative description, refine the description into some kind of use
cases.&lt;/p&gt;
&lt;p&gt;A use case identifies an actor, the
interactions between the actor and the system, and the business value created by
that interaction.&lt;/p&gt;
&lt;p&gt;Note that the use
cases presume some kind of &amp;quot;system&amp;quot;. We haven't defined the system, so how do we
describe interactions? This is challenging at first. The secret is an idealized,
hypothetical system which does the minimum to help the user's meet their goals.
Don't over-automate a super-system that does everything automatically. Don't
worry about under-automating.&lt;/p&gt;
&lt;p&gt;Start
with the actors. Don't name each person; classify the actors by roles. If you
can't identify the actors from what you know, you can start again at the
beginning. You now know more than you did when you started. The second trip
around will produce better
results.&lt;/p&gt;
&lt;p&gt;Each actor has a goal. Write
it down. They'll have to use the system to meet that goal. What will the actor
provide? What will the system provide? What decisions do the actors make? What
actions do they take based on information from the
system?&lt;/p&gt;
&lt;p&gt;This will lead you to one or
more sequences of interactions for each actor. Each sequence is discrete when it
has a discrete goal; a purpose; and ending point. Name the sequences (they are
&amp;quot;use cases&amp;quot;); write down the
interactions.&lt;/p&gt;
&lt;p&gt;When writing the
interactions, use words from the business entity diagram. Use consistent verbs.
When in doubt, remember that people interact with computers for two fundamental
purposes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;To Make Decisions.  Decisions that
involve information they don't have available without a computer.&lt;/li&gt;
&lt;li&gt;To Take Action.  Actions that involve
business information that is already in a computer
somewhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Algorithms, processes,
procedures and the like aren't often interactive.  Go too far down the &amp;quot;detailed
procedures&amp;quot; road and you leave the person out of the picture.  Be sure you can
answer the basic questions: Why is the person doing this?  What is their
goal?&lt;/p&gt;
&lt;p&gt;Warning:
Do not over document the system side of the processing; that is part of the
solution. We're iterating, remember. The first thing you write down is not the
final answer, it's only a
draft.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Solution Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Summarize the use cases
using a well-defined set of nouns and verbs. You are trying to clarify (and
sometimes simplify) the use cases to name the real business entities -- the real
nouns in the problem domain. When writing the summary, you may realize that some
use cases need rewriting. In the process of use case writing, you may have some
summary material that eliminates some tiresome details. You should bounce back
and forth between summary writing and use case
editing.&lt;/p&gt;
&lt;p&gt;Your solution should match
your problem. Indeed, this is the final check for proper scope: does the summary
describe a solution to the
problem?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Iterate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that you have some
entities and some interactions, you know much, much more about the system. You
have to do two things. First, throw away all your notes to date. Second, go back
to the beginning of the process and write a new narrative description. This will
be better (more complete, more accurate, more focused and more useful) than your
first draft. Watch the shoals carefully, and don't create the
solution.&lt;/p&gt;
&lt;p&gt;You may have to iterate more
than once to really capture the essence of the user's problem. Actors will come
and go from the model. Business entities will come and go. The focus will
narrow. The implementation details (mainframe vs. server, web vs. batch, Java
vs. COBOL, DB2 vs. Oracle, Army vs. Navy) will drop
away.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objective&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
objective isn't the problem definition.   However, this is so hard that people
get stalled trying to write this. See Essay 17, &amp;quot;Solution or Workaround&amp;quot; for
guidance. They often jump past problem to solution, omitting any clear
definition of what the problem really is. The real objective is the business
entity model and the use cases. The solution summary simply frames the use cases
up for easy digestion.&lt;/p&gt;
&lt;p&gt;The business
entity model has nouns from the use cases. The use case nouns are clarified and
defined in the business entity model. When someone reads a use case, they should
be able to follow along on the business entity diagram.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 12 - Don't Talk to Strangers</title><link href="https://slott56.github.io/2005_09_16-essay_12_dont_talk_to_strangers.html" rel="alternate"></link><published>2005-09-16T20:25:00-04:00</published><updated>2005-09-16T20:25:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-16:/2005_09_16-essay_12_dont_talk_to_strangers.html</id><summary type="html">&lt;p&gt;There is a Design Pattern, somtimes called &amp;quot;Don't
Talk to Strangers&amp;quot; that embodies the OO design principle of &amp;quot;Responsibility
Assignment&amp;quot;.  This pattern can also be called &amp;quot;The Opacity
Principle.&amp;quot;&lt;/p&gt;
&lt;p&gt;Sometimes I like to
describe it as &amp;quot;If you don't control it, it's none of your business what's under
the hood …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is a Design Pattern, somtimes called &amp;quot;Don't
Talk to Strangers&amp;quot; that embodies the OO design principle of &amp;quot;Responsibility
Assignment&amp;quot;.  This pattern can also be called &amp;quot;The Opacity
Principle.&amp;quot;&lt;/p&gt;
&lt;p&gt;Sometimes I like to
describe it as &amp;quot;If you don't control it, it's none of your business what's under
the hood.&amp;quot;  It isn't really a design pattern, because it isn't constuctive; it's
more of a principle, because it informs the selection of
patterns.&lt;/p&gt;
&lt;p&gt;It is a subtle principle, and
violations are sometimes hard to detect.  I like to use the &amp;quot;Mutability Test&amp;quot; to
discover improper allocation of reponsibility, and violations of the &amp;quot;Don't Talk
to Strangers&amp;quot; principle.&lt;/p&gt;
&lt;p&gt;A notable
recent example is a designer who was managing the surrogate keys generated by a
database, and wanted a class that embodied everything he know about those
surrogate keys.  They were, essentially, longs, but with some constraints that
had been imposed by the DBA.&lt;/p&gt;
&lt;p&gt;Developing
a class to embody knowledge that is properly the responsibility of the RDBMS
violates the &amp;quot;Don't Talk to Strangers&amp;quot; principle.  In this case, the violation
is subtle, but made apparent when considering the impact of a
change.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What if the database constraint on the
surrogate keys changes positive numbers to any number (including negative).  The
class wrapping the long numeric key now has to change, also.&lt;/li&gt;
&lt;li&gt;What if the surrogate keys changes from
long to something more appropriately coded as BigDecimal?  The class wrapping
key numeric key has a different kind of change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is too much interdependency
between database constraints and application program
constraints.&lt;/p&gt;
&lt;p&gt;It is better to simply
treat the database key as a piece of opaque data.  The current implementation
uses long, a future implementation may change to String or BigDecimal.  No
further assumptions are made about the surrogate
key.&lt;/p&gt;
&lt;p&gt;Another test of opacity is to note
that the class would have no methods.  An object would be created by an Insert,
and must be used for Queries, Updates and Deletes.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 11 - Management Trump Cards</title><link href="https://slott56.github.io/2005_09_15-essay_11_management_trump_cards.html" rel="alternate"></link><published>2005-09-15T15:13:00-04:00</published><updated>2005-09-15T15:13:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-15:/2005_09_15-essay_11_management_trump_cards.html</id><summary type="html">&lt;p&gt;I've seen two common varieties of management
trump cards.  These are played by managers who don't like the architecture, and
want to make changes.  These are a little bit like the spell cards in Magic:The
Gathering.  These cards can either change the state of the game (different
requirements, context …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've seen two common varieties of management
trump cards.  These are played by managers who don't like the architecture, and
want to make changes.  These are a little bit like the spell cards in Magic:The
Gathering.  These cards can either change the state of the game (different
requirements, context, problem or constraints) or change the rules of the game
itself.&lt;/p&gt;
&lt;p&gt;One management trump card is
the &amp;quot;&lt;strong&gt;Let's Step Back&lt;/strong&gt; &amp;quot; or
&amp;quot;&lt;strong&gt;Taking a 50,000 Foot View&lt;/strong&gt; &amp;quot;.  This card allows the manager to
reformulate the context, leading to a reinterpretation of the requirements.
This, of course, changes the forces and constraints, the proposed solution and
the consequences.  This can be countered by the
&amp;quot;&lt;strong&gt;Framework Focus&lt;/strong&gt; &amp;quot; or the
&amp;quot;&lt;strong&gt;Appeal to Users&lt;/strong&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;A
&amp;quot;&lt;strong&gt;Framework Focus&lt;/strong&gt; &amp;quot; response emphasizes the generic
framework the underpins the solution.  Since this is based on non-functional
requirements, it may change only slightly when the problem is reformulated in a
new context.  We emphasize that no matter how the context changes, the solution
is still a web site running over tomcat.  We can, with patience, keep the
project on track in spite of the &amp;quot;Let's Step Back&amp;quot;
card.&lt;/p&gt;
&lt;p&gt;An
&amp;quot;&lt;strong&gt;Appeal to Users&lt;/strong&gt; &amp;quot; response prevents context and problem
changes by making an authority (the users in the case) mediate the conversation.
In many cases, they don't care too mcuh.  You may find that the manager is
overruled by the users, or you are overruled.  Either way, the meddling will
continue.  If you were right, you may be able leverage the user's help.  If you
were wrong, you were wrong, and need to make appropriate adjustments.  Take your
damage.&lt;/p&gt;
&lt;p&gt;Another management trump card
is the &amp;quot;&lt;strong&gt;I'm Fuzzy&lt;/strong&gt; &amp;quot; card.  This is played when the
architecture (or some element of it) is not what was expected.  You try to
answer the question and explain, but it won't work: this was not a question.
This card is a demand for change that was framed rhetorically as a question.
Since this card has a more technical focus, it requires a more involved,
technical response, generally &amp;quot;&lt;strong&gt;Proof of Concept&lt;/strong&gt; .&amp;quot;&lt;/p&gt;
&lt;p&gt;A
&amp;quot;&lt;strong&gt;Proof of Concept&lt;/strong&gt; &amp;quot; can take one of two forms:
&amp;quot;&lt;strong&gt;Demonstration&lt;/strong&gt; &amp;quot;
and
&amp;quot;&lt;strong&gt;Evolution&lt;/strong&gt; &amp;quot;.
The
&amp;quot;&lt;strong&gt;Demonstration&lt;/strong&gt; &amp;quot;
response builds a throw-away demo or proof-of-concept.  This is used to reduce
technical risks: a specific risk area has to be identified, and the results are
used to finalize the architecture.  An
&amp;quot;&lt;strong&gt;Evolution&lt;/strong&gt; &amp;quot;
response is not a throw-away.  This is done when there are no real technical
risks, but a manager insists that something undefinable is still unknown.  When
there are no defined risks, nothing much will be learned.  You are, in effect,
building the first release of the software.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 10.1 - When A Column Is Not A Column</title><link href="https://slott56.github.io/2005_09_14-essay_101_when_a_column_is_not_a_column.html" rel="alternate"></link><published>2005-09-14T10:00:00-04:00</published><updated>2005-09-14T10:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-14:/2005_09_14-essay_101_when_a_column_is_not_a_column.html</id><summary type="html">&lt;p&gt;Recently, I've seen a number of data structures
that evolved from 2-dimensional data models.  They devolved into a morass of
complications because they started out violating First Normal Form rules.  Once
that rule has been broken, the door is shut on the benefits of the relational
model of data.&lt;/p&gt;
&lt;p&gt;For …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I've seen a number of data structures
that evolved from 2-dimensional data models.  They devolved into a morass of
complications because they started out violating First Normal Form rules.  Once
that rule has been broken, the door is shut on the benefits of the relational
model of data.&lt;/p&gt;
&lt;p&gt;For another viewpoint on
this, see &lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2005/09/how_many_parent.html"&gt;How many parents do you have?&lt;/a&gt;   It provides
another example of
multi-dimensionality.&lt;/p&gt;
&lt;p&gt;How does this
happen?&lt;/p&gt;
&lt;p&gt;Consider subcontract
management.  Each contact has a number of milestone events and status changes
that get recorded.  For the first few contractors, a spreadsheet lists the
contractor going down the page, and the events across the
page.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Events&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Contract&lt;/td&gt;
&lt;td&gt;This Form&lt;/td&gt;
&lt;td&gt;That Form&lt;/td&gt;
&lt;td&gt;A Meeting&lt;/td&gt;
&lt;td&gt;A Report&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor 1&lt;/td&gt;
&lt;td&gt;3/19&lt;/td&gt;
&lt;td&gt;4/18&lt;/td&gt;
&lt;td&gt;planned&lt;/td&gt;
&lt;td&gt;(null)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor B&lt;/td&gt;
&lt;td&gt;3/21&lt;/td&gt;
&lt;td&gt;4/5&lt;/td&gt;
&lt;td&gt;4/12&lt;/td&gt;
&lt;td&gt;planned&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Then complications set in.  First, there
were contract-specific events.  Then there were more contracts with
contract-specific events.  Eventually, the 255 column limit was reached in their
database.&lt;/p&gt;
&lt;p&gt;Clearly,
&lt;em&gt;contract&lt;/em&gt;
and
&lt;em&gt;event&lt;/em&gt;
are two dimensions of a common fact.  The relational table has a row for each
cell in the original spreadsheet.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Contract&lt;/td&gt;
&lt;td&gt;Event&lt;/td&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor 1&lt;/td&gt;
&lt;td&gt;This Form&lt;/td&gt;
&lt;td&gt;3/18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor 1&lt;/td&gt;
&lt;td&gt;That Form&lt;/td&gt;
&lt;td&gt;4/18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor 1&lt;/td&gt;
&lt;td&gt;A Meeting&lt;/td&gt;
&lt;td&gt;planned&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor B&lt;/td&gt;
&lt;td&gt;This Form&lt;/td&gt;
&lt;td&gt;3/21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor B&lt;/td&gt;
&lt;td&gt;That Form&lt;/td&gt;
&lt;td&gt;4/5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor B&lt;/td&gt;
&lt;td&gt;A Meeting&lt;/td&gt;
&lt;td&gt;4/12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Vendor B&lt;/td&gt;
&lt;td&gt;A Report&lt;/td&gt;
&lt;td&gt;planned&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, this row-at-a time structure
is inconvenient for seeing a summarized contract-by-contract report.  The
original spreadsheet did this properly, but the normalized table requires extra
processing to denormalize it for presentation purposes.  This denormalization is
often done via a complex view that places specific values for event into
specific columns.  In pure SQL, it looks like this, and produces a result that
is hard to read.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
select contract,
status, null, null, null
from table
where event = 'This Form'

union

select
contract, null, status, null, null
from table where event = 'That Form'

union

select
contract, null, null, status, null
...
&lt;/pre&gt;
&lt;p&gt;Most
SQL's have extensions to help denormalize the columns of the report from rows of
individual data elements.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
select
contract,
(select status from table col
     where col.contract=row.contract
     and event='This Form'),
(select status
    from table col
    where col.contract=row.contract
    and event='That Form'),
...
from
table row
&lt;/pre&gt;
&lt;p&gt;You're better off creating an
extract file and loading MS-Excel Pivot Tables from the normalized
representation and letting people slice and dice on their desktop.  The pure SQL
approach to denormalization makes the problem appear more complex than it really
is.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 21 - Avoiding the Issue</title><link href="https://slott56.github.io/2005_09_13-essay_21_avoiding_the_issue.html" rel="alternate"></link><published>2005-09-13T23:27:00-04:00</published><updated>2005-09-13T23:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-13:/2005_09_13-essay_21_avoiding_the_issue.html</id><summary type="html">&lt;p&gt;The thesis is that the first step in solving a
problem is stating it.  It's hard to argue with that, but people
do.&lt;/p&gt;
&lt;p&gt;Here are all some ways that people
have made stating a problem as difficult as possible.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Complain that there are too many steps in the
methodology.  For …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;The thesis is that the first step in solving a
problem is stating it.  It's hard to argue with that, but people
do.&lt;/p&gt;
&lt;p&gt;Here are all some ways that people
have made stating a problem as difficult as possible.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Complain that there are too many steps in the
methodology.  For example: (1) state the problem, (2) brainstorm solutions, (3)
use the solution as the inception of a project, (4) elaborate the analysis, (5)
design and implement and (6) transition for production use.  Since this is more
than two steps, it is too many.&lt;/li&gt;
&lt;li&gt;Complain that methodologies limit
creativity/insight/flexibility/whatever.  Refuse to pursue any structured
approach.&lt;/li&gt;
&lt;li&gt;Simply refuse to define the problem without
providing much of an explanation.  Things like &amp;quot;That isn't the number one
priority&amp;quot; are great ways to rephrase simple refusal as if it is merely a
question of priorities.  Everything that isn't priority one will never get done,
and putting problem definition below #1 on the list of things do to damns it to
eternal avoidance.&lt;/li&gt;
&lt;li&gt;Complain that it is hard to define a problem.
For example, &amp;quot;It's easier to hack out a prototype than define the problem we are
solving&amp;quot;.&lt;/li&gt;
&lt;li&gt;Complain that there is no point to defining
the problem.  We can, for example, insist that there is no ROI on defining the
problem, all the ROI accrues from solving the problem.&lt;/li&gt;
&lt;li&gt;Complain that defining the problem requires
interaction.  It's not clear exactly how this is &amp;quot;bad&amp;quot;.  It appears that problem
solving (like programming) is a solitary experience: we discuss briefly with the
users, then run away to our Fortress of Solitude to invent a solution which we
briefly discussed.  Unwillingly, we engage in weekly/monthly/quarterly progress
meetings.  The idea of negotiating over the context, problem, costs and values
seems to be pointless, since it isn't the solutions, it's just
talk.&lt;/li&gt;
&lt;li&gt;Complain that budgets are sacrosanct.  It's
not clear what this means.  Perhaps this means that taking time to define the
problem will derail an improper or ill-advised solution that's already in
process.  Note the sequence of events implied by this objection:  (1) we're
already &amp;quot;solving&amp;quot; the &amp;quot;problem&amp;quot;, now you want us to (2) formally define the
&amp;quot;problem&amp;quot;?  That might invalidate the &amp;quot;solution&amp;quot;, already in
progress.&lt;/li&gt;
&lt;li&gt;Complain that problem definition requires
people to admit that they made a mistake.  I don't understand this at all, but
some people are very, very sensitive to the possibility of problem definition
being taken as an &amp;quot;attack&amp;quot; on someone who made a &amp;quot;mistake&amp;quot; which we now have to
&amp;quot;fix&amp;quot;.  Okay.  Can we move beyond the fear that there might be childish name
calling?  It's not like we actually have any name-calling; the objection is that
recognition of a problem may be
&lt;em&gt;perceived&lt;/em&gt;
as name-calling and finger-pointing.&lt;/li&gt;
&lt;li&gt;Complain that it's difficult because an
individual (a single human being; one person) might wander from the original
problem to other problems.  With a committee, this is a very real issue.  But
for a single key user?  If there isn't a problem that is bothering them...
well... there isn't a problem.  If they can't say &amp;quot;fix this and I'll be
satisfied,&amp;quot; that's an important cultural or organizational issue.   Clearly, it
isn't technical, and doesn't deserve much more than professional
counseling.&lt;/li&gt;
&lt;li&gt;Conflate the solution with the problem and
describe the solution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I see three
parallel activities as part of this concentrated avoidance effort: ignore it,
evade it, and pervert it.&lt;/p&gt;
&lt;p&gt;One
&lt;strong&gt;ignores&lt;/strong&gt;
it by pretending a problem statement isn't required.  This is the most blatant
denial of the value.  A specification of the solution will do.  Lacking any
definition of success, scope creep or dissatisfaction are
inevitable.&lt;/p&gt;
&lt;p&gt;One
&lt;strong&gt;evades&lt;/strong&gt;
it by acknowledging that there may be some potential value, but assigning all
other activities a higher priority.  This is a more subtle denial of the value,
but the effect is the same: the tacit assumption of a problem means unclear or
divergent definitions of success, which leads to scope creep or dissatisfaction
or both.&lt;/p&gt;
&lt;p&gt;One
&lt;strong&gt;perverts&lt;/strong&gt;
it by twisting around the meaning of &amp;quot;problem&amp;quot; to include solution-oriented
concepts.  In this case, we're urged to write very complex &amp;quot;problem&amp;quot; statements
that include technology and business constraints &amp;quot;so they won't be forgotten&amp;quot;
during the process of solving the problem.  This is absurd.  The technology
constraints aren't part of the problem and they won't be forgotten unless the
entire project team wins the lottery and leaves with no forwarding
address.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 9 - Getting Started</title><link href="https://slott56.github.io/2005_09_12-essay_9_getting_started.html" rel="alternate"></link><published>2005-09-12T14:51:00-04:00</published><updated>2005-09-12T14:51:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-12:/2005_09_12-essay_9_getting_started.html</id><summary type="html">&lt;p&gt;How do we get started writing requirements (or
doing architecture or even design)?&lt;/p&gt;
&lt;p&gt;The
important thing is to recognize the
&lt;em&gt;what&lt;/em&gt;
vs.
&lt;em&gt;how&lt;/em&gt;
distinction.  Following Pressman's advice, we note a whole waterfall of
&lt;em&gt;what&lt;/em&gt; 's
and
&lt;em&gt;how&lt;/em&gt; 's.
It breaks down something like the following four phases.  For information on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How do we get started writing requirements (or
doing architecture or even design)?&lt;/p&gt;
&lt;p&gt;The
important thing is to recognize the
&lt;em&gt;what&lt;/em&gt;
vs.
&lt;em&gt;how&lt;/em&gt;
distinction.  Following Pressman's advice, we note a whole waterfall of
&lt;em&gt;what&lt;/em&gt; 's
and
&lt;em&gt;how&lt;/em&gt; 's.
It breaks down something like the following four phases.  For information on
techniques for Inception and Elaboration (&amp;quot;Analysis&amp;quot;), see Essay 13, &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2005_09_17-essay_13_analysis_without_running_aground.html"&gt;Analysis Without Running Aground&lt;/a&gt; &amp;quot;, for
guidance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inception&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Identify
the problem.  This is often very hard to do clearly and precisely.  See Essay
17, &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2005_09_22-essay_17_solution_or_workaround.html"&gt;Solution or Workaround?&lt;/a&gt; &amp;quot; for guidance.  The
solution to this is
&lt;em&gt;What&lt;/em&gt;
we are doing, the biggest, summarized
&amp;quot;&lt;em&gt;what&lt;/em&gt; &amp;quot;
for the entire effort.  All that follows will be a
&amp;quot;&lt;em&gt;how&lt;/em&gt; &amp;quot;
to accomplish this.  Also known as a goal, objective, charter, critical success
factor, etc.  Central in importance here to write an active-voice &amp;quot;what the
system and users will accomplish&amp;quot; statement.  A passive voice (&amp;quot;sales will be
increased by 2%&amp;quot;) is part of the benefits, but not what we will be able to do
that we cannot do today.&lt;/p&gt;
&lt;p&gt;This will be
broken down into one or more
&amp;quot;&lt;em&gt;how&lt;/em&gt; 's&amp;quot;
that are sometimes called the Business Use Cases (BUCs).  The BUCs provide the
top-level interactions to show how the what can be achieved by actors using some
kind of
system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elaboration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The
analysis of the problem spins off System Use Cases (often called just Use Cases,
UCs).  This elaboration &amp;quot;drills into the details&amp;quot; of the business problem.
These use cases accept a BUC as a given, a
&amp;quot;&lt;em&gt;what&lt;/em&gt; &amp;quot;
to be accomplished, and specifies
&amp;quot;&lt;em&gt;how&lt;/em&gt; &amp;quot;
that will be done.   Note that the Business Use Case was a
&amp;quot;&lt;em&gt;how&lt;/em&gt; &amp;quot;,
when viewed from the top, but is now a given -- a
&amp;quot;&lt;em&gt;what&lt;/em&gt; &amp;quot;
-- as we move toward
implementation.&lt;/p&gt;
&lt;p&gt;Note that we are still
describing the problem, using the problem's terminology.  We are specifying
actor interactions with a hypothetical &amp;quot;Black Box&amp;quot; System that will be built,
but does not yet exist.  We are elaborating the problem by describing the
interactions actors' would like to engage in to accomplish their
goals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design (Architecture)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The initial, high
level design, or architecture, accepts each of the UCs as
&amp;quot;&lt;em&gt;what&lt;/em&gt; &amp;quot;
statements, and defines a technical implementation that shows
&amp;quot;&lt;em&gt;how&lt;/em&gt; &amp;quot;
that will be accomplished.  This is where we step out of purely business problem
domain language into system and software
language.&lt;/p&gt;
&lt;p&gt;This is the top of the
design, and identifies components that can be used to accomplish the use cases.
The quality assurance test of the architecture is to walk through each use case,
and identify the components involved in the interactions.  Responsibilities are
allocated to each component based on the role in the
interactions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Construction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Detailed Design&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The detailed design accepts
the architecture as the
&amp;quot;&lt;em&gt;what&lt;/em&gt; &amp;quot;
and determines
&amp;quot;&lt;em&gt;how&lt;/em&gt; &amp;quot;
each component must be constructed to achieve the architectural goals (which
achieve the UC goals, which achieve the BUC
goals).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Programming&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Programming
moves down the
&lt;em&gt;what-how&lt;/em&gt;
tree to the final level of determing
&lt;em&gt;how&lt;/em&gt;
to implement the design.  Generally, the design should provide enough guidance
in selection of fine-grained data structures and algorithms.  If it does not,
the architectural goals (or even high-level goals) should supply the missing
guidance.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 8 - Data First, User Interface Later</title><link href="https://slott56.github.io/2005_09_11-essay_8_data_first_user_interface_later.html" rel="alternate"></link><published>2005-09-11T16:30:00-04:00</published><updated>2005-09-11T16:30:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-11:/2005_09_11-essay_8_data_first_user_interface_later.html</id><summary type="html">&lt;p&gt;Is data more important than processing?  Not
necessarily; the central issue is one of enduring impact on the problem,
solution, architecture and
implementation.&lt;/p&gt;
&lt;p&gt;Generally, the
available or desired data has the most enduring impact.  Processing,
functionality, user interface nice-to-haves and other considerations are much
softer and more malleable than the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Is data more important than processing?  Not
necessarily; the central issue is one of enduring impact on the problem,
solution, architecture and
implementation.&lt;/p&gt;
&lt;p&gt;Generally, the
available or desired data has the most enduring impact.  Processing,
functionality, user interface nice-to-haves and other considerations are much
softer and more malleable than the actual
data.&lt;/p&gt;
&lt;p&gt;Consider a postal envelope that
omits the city and zip code.  It is essentially
undeliverable.&lt;/p&gt;
&lt;p&gt;Consider two postal
handling systems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One version of the processing for mail
pre-stages the outbound mail in a basket.  Each day the mail with checks payable
on that day is moved from there to the post office box where the postal service
commences delivery.&lt;/li&gt;
&lt;li&gt;This postal handling system can be easily
changed to use a piece of furniture with 31 slots, numbered by day of the month.
This reduces the time required to locate today's outbound mail, but increases
the time required to stage the
mail.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data elements of an envelope
cannot be changed without compromising the system.  However, within some very
broad limits, the processing can be very flexible and
dynamic.&lt;/p&gt;
&lt;p&gt;The essential data
classifiers, relationships, attributes and operations are of enduring value.
The application or user interface processing can be changed very freely on top
of this data model.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The data elements are identified as nouns in
the initial context and problem statements.&lt;/li&gt;
&lt;li&gt;The data elements are further elaborated as
part of the use cases, and any supporting data model.  A set of data elements
can easily be defined as absolutely required; without these, the software will
not work or will be worthless.&lt;/li&gt;
&lt;li&gt;An implementation of the data elements are
begins during architecture and is elaborated during
design.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The processing, however, does
not have the same enduring value.  Often the processing concepts are negotiable
because the depth and degree of automation is negotiable.  In some cases, the
processing cannot be automated because it requires either intelligence or
judgement.&lt;/p&gt;
&lt;p&gt;The user interface, is even
more flexible.  People, being intelligent, are able to form a mental model of
the underlying data model in spite of terrible user interfaces.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 7 - Application Design</title><link href="https://slott56.github.io/2005_09_09-essay_7_application_design.html" rel="alternate"></link><published>2005-09-09T15:27:00-04:00</published><updated>2005-09-09T15:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-09:/2005_09_09-essay_7_application_design.html</id><summary type="html">&lt;p&gt;Architecture is the first step in creating
software to meet the requirements.  This is followed by the design effort to
transform the high-level picture into components that can be realized in
software.  This line between assemblies of components, and the internal
construction of components is a good dividing line between …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Architecture is the first step in creating
software to meet the requirements.  This is followed by the design effort to
transform the high-level picture into components that can be realized in
software.  This line between assemblies of components, and the internal
construction of components is a good dividing line between architecture and
design.&lt;/p&gt;
&lt;p&gt;It is generally best to use
well-known and widely used design patterns when developing a design.  This
creates a design with elements that are reasonably well understood, and lead to
early confidence that the design will meet the
requirements.&lt;/p&gt;
&lt;p&gt;A common component is a
stand-alone application.  This may be a fat-client application that runs on a
desktop, or a web application accessed through the browser.  An application
typicall has five layers or tiers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; .  The presentation of data to the users,
or other interfaces.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control&lt;/strong&gt; .  The sequence of activities or state
changes to manage interaction.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; .  The underlying data model that the
application manipulates.  This is optimized for interaction, and may differ from
the persistent data structure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access&lt;/strong&gt; .  The mechanism for acquiring
persistent data.  This may be CORBA, JDBC or other access
mechanism.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistence&lt;/strong&gt; .  The mechanism of persistence.
This may be the file system or the
RDBMS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these has more narrowly
defined responsibilities.  The overall functionality of the application can then
be partitioned according to these layers.  Once the larger problem is
decomposed, each can be tackled and built
separately.&lt;/p&gt;
&lt;p&gt;Generally, it is best to
proceed up the hierarchy.  The first phase of effort moves from persistent data,
through access, to the model.  This creates a simple framework for the
following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Validating the persistent data model.
The initial design may have ommitted classes or attributes, or mis-communicated
those.&lt;/li&gt;
&lt;li&gt;Assuring that the access methods meet
requirements.  The initial design may have omitted useful navigation paths or
other physical access mechanisms.&lt;/li&gt;
&lt;li&gt;Developing a usable application data
model.  The matching between the working model and the persistent model must be
resolved and tested.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the
Model-Access-Persistence is in place, then the View and Control can be added.
It is critical that the model's methods be completely tested before attempting
to add view and control features.  If the model is incomplete, inconsistent or
incorrect, and these problems are fixed in View and Control, then reuse is
compromised, and the essential functionality is spread across the
application.&lt;/p&gt;
&lt;p&gt;Since the essential
feature of object-oriented design is correct assignment of responsibility,
spreading application features through multiple layers defeats basic good
design.  For this reason, the essential functions must be completely developed
and tested in the lower layer of the application design.  Then the GUI can be
fastened onto a working structure.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 6 - Politics</title><link href="https://slott56.github.io/2005_09_08-essay_6_politics.html" rel="alternate"></link><published>2005-09-08T10:00:00-04:00</published><updated>2005-09-08T10:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-08:/2005_09_08-essay_6_politics.html</id><summary type="html">&lt;p&gt;Politics are the lifeblood of requirements
gathering.  For architecture, they are important, but don't as often take center
stage.&lt;/p&gt;
&lt;p&gt;Requirements are about the
actors, their goals and motivations, and their interactions with some potential
system.  People are political, and the presence or absence of certain
requirements, certain turns of phrase …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Politics are the lifeblood of requirements
gathering.  For architecture, they are important, but don't as often take center
stage.&lt;/p&gt;
&lt;p&gt;Requirements are about the
actors, their goals and motivations, and their interactions with some potential
system.  People are political, and the presence or absence of certain
requirements, certain turns of phrase is all part of the
process.&lt;/p&gt;
&lt;p&gt;I like to bracket the
&amp;quot;Institutional Bias,&amp;quot; also.  I often call it the &amp;quot;preference&amp;quot; in written
communications.  This is a nod to the ways things always work around here.  Many
times, this is termed &amp;quot;the real world,&amp;quot; as in &amp;quot;that may be a good idea, but in
the real world, no one would ever do it that
way.&amp;quot;&lt;/p&gt;
&lt;p&gt;It's hard to respond when someone
tries to play the &amp;quot;real world&amp;quot; card.  This is often played by people who won't
adapt to a better process or deliverable.  You find yourself being the different
drummer and try to get them to march to the new beat, which may be an exercise
in futility.&lt;/p&gt;
&lt;p&gt;You can try to play the
&amp;quot;new reality&amp;quot; card.  Some people will respond to this, acknowledging that the
reason they are building application software is to create a new real world in
which the old preferences and limitations are
removed.&lt;/p&gt;
&lt;p&gt;However, this is a war that
must be won one heart at a time.  A long struggle, especially for outsider
consultants.&lt;/p&gt;
&lt;p&gt;The architecture,
similarly, must often bow to skill set, experience, and novelty constraints.
While many people may be perfectly happy with MySQL under Linux, there are still
many more who will bracket it as unproven, risky and
dangerous.&lt;/p&gt;
&lt;p&gt;I've heard good old Unix
called &amp;quot;too new and too risky&amp;quot;.  This was back in the 90's, when UNIX was over
20 years old.  But, to someone who had never seen it before, it was too new to
consider.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 5 - Using the Requirements</title><link href="https://slott56.github.io/2005_09_07-essay_5_using_the_requirements.html" rel="alternate"></link><published>2005-09-07T10:10:00-04:00</published><updated>2005-09-07T10:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-07:/2005_09_07-essay_5_using_the_requirements.html</id><summary type="html">&lt;p&gt;Requirements have a number of
uses.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;They document progress.  This management value
is sometimes the only value placed on requirements.  This happens when
requirements are really just high-level design and don't describe the problem
adequately.&lt;/li&gt;
&lt;li&gt;They test candidate architectures.  This is
done well when there is a back and forth …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Requirements have a number of
uses.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;They document progress.  This management value
is sometimes the only value placed on requirements.  This happens when
requirements are really just high-level design and don't describe the problem
adequately.&lt;/li&gt;
&lt;li&gt;They test candidate architectures.  This is
done well when there is a back and forth between requirements are architecture.
We gather requirements and propose an architecture.  If the architecture isn't
desirable, either the requirements are incomplete, or the architecture is
incorrect.  We add or adjust the requirements, or we modify the architecture.
This process can and should iterate until the requirements cannot be changed
further.&lt;/li&gt;
&lt;li&gt;They quantify and qualify design alternatives.
Once the overall architecture for a solution has been chosen, the requirements
should continue to add value by providing guidance into selection of design
patterns for implementation.&lt;/li&gt;
&lt;li&gt;They describe the final acceptance test.  If
the requirements are not measurable enough to act as a final test, then they
need clarification.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The back-and-forth
between requirements and architecture takes many paths, each of which helps
clarify the requirements.&lt;/p&gt;
&lt;p&gt;Sometimes an
architecture is too complex or expensive.  The requirements often include some
non-functional features that drive up costs.  Other times, a use case has too
much automation, or is otherwise poorly constrained and leads to large costs in
software purchases or
development.&lt;/p&gt;
&lt;p&gt;Sometimes an architecture
is incomplete.  The requirements are often vague or incomplete, allowing a
too-simple architecture to appear to be a
solution.&lt;/p&gt;
&lt;p&gt;Sometimes the architecture
seems to have the wrong components or focus.  This is often the case when the
requirements writers had a specific technology in mind, and weren't open to
alternative solutions to the problem.  In this case, the traceability between
architecture and requirements has to be examined to see if a change to the
requirements is really necessary.  Sometimes a formal proof of concept is
necessary to convince the reviewers that the proposed architecture does meet the
requirements, even when it is not the expected
solution.&lt;/p&gt;
&lt;p&gt;The big failures occur when
the project plan has a strict, one-way waterfall from requirements to
architecture to implementation with no back-and-forth.  That is madness because
then every bad idea in the requirements becomes an architectural feature adding
cost and risk; any attempt to revoke a bad idea becomes scope creep and the
project collapses.&lt;/p&gt;
&lt;p&gt;Cause of death: a
lack of useful interplay between requirements and architecture.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 4 - Creeping Scope</title><link href="https://slott56.github.io/2005_09_06-essay_4_creeping_scope.html" rel="alternate"></link><published>2005-09-06T10:54:00-04:00</published><updated>2005-09-06T10:54:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-06:/2005_09_06-essay_4_creeping_scope.html</id><summary type="html">&lt;p&gt;Walker Royce notes that the early parts of a
project involve discovery; as a consequence the scope is subject to change.  He
calls the early phases inception and elaboration.  Inception identifies the need
for a project, and stakes out an initial context and problem.  Elaboration adds
details, including the constraining …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Walker Royce notes that the early parts of a
project involve discovery; as a consequence the scope is subject to change.  He
calls the early phases inception and elaboration.  Inception identifies the need
for a project, and stakes out an initial context and problem.  Elaboration adds
details, including the constraining forces and a candidate
solution.&lt;/p&gt;
&lt;p&gt;During the early phases, the
scope can and should change.  The scope changes as information is gathered, and
the understanding of context, problem and forces
changes.&lt;/p&gt;
&lt;p&gt;Often, the inception begins
with an operational concept, not a definite problem.  As the problem and context
are refined, the scope will appear to creep.  What really happens is that the
operational concept is teased apart into problem (functional and non-functional
requirements) and solution.  As the elements separate, the requirements are
refined into a clean statement of the problem, and the solution is also refined
to be a solution to that
problem.&lt;/p&gt;
&lt;p&gt;Another kind of scope creep
occurs when different solutions are proposed to resolve the problem.  Each
proposed solution may uncover additional requirements, further refining the
problem.  It is sometimes difficult to both brainstorm solutions and document
the requirements uncovered during
brainstorming.&lt;/p&gt;
&lt;p&gt;For example, it may
appear that networked storage is required to make a knowledge base widely
accessible.  However, it may also be possible to replicate the knowledge base
whenever an approved change is made.  Since both solutions are possible
candidates, other constraints must be examined to choose between the two.
Problem attributes like the frequency or volume of updates, of the nature of
shared document authoring may help to promote one solution over
another.&lt;/p&gt;
&lt;p&gt;One of the desirable
attributes of an architecture is the flexibility to move elements around in the
structure.  The isolation of responsibility and use of standard interfaces
promotes flexibility in tailoring the solution to the actual problem and
context.&lt;/p&gt;
&lt;p&gt;The issue is to correctly
label the work activity.  It is exploration of the problem?  Is it exploration
of the solution?  If you never had a problem statement to begin with, how do you
know what the scope of the investigation should be?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>7 kinds of complexity - 7 deadly sins?</title><link href="https://slott56.github.io/2005_09_04-7_kinds_of_complexity_7_deadly_sins.html" rel="alternate"></link><published>2005-09-04T11:44:00-04:00</published><updated>2005-09-04T11:44:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-04:/2005_09_04-7_kinds_of_complexity_7_deadly_sins.html</id><summary type="html">&lt;p&gt;Here's a possible match-up between the Seven
Deadly Sins and Seven Species of Complexity.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;lust for someone we cannot have - &amp;quot;When I Grow Up&amp;quot;&lt;/li&gt;
&lt;li&gt;gluttony or over-indulgence - &amp;quot;How Hard Can It Be?&amp;quot;&lt;/li&gt;
&lt;li&gt;avarice (covetousness, greed) for things
we do not need - &amp;quot;Quality vs. Quantity of Ideas&amp;quot;&lt;/li&gt;
&lt;li&gt;sloth (laziness, idleness) wasting …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Here's a possible match-up between the Seven
Deadly Sins and Seven Species of Complexity.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;lust for someone we cannot have - &amp;quot;When I Grow Up&amp;quot;&lt;/li&gt;
&lt;li&gt;gluttony or over-indulgence - &amp;quot;How Hard Can It Be?&amp;quot;&lt;/li&gt;
&lt;li&gt;avarice (covetousness, greed) for things
we do not need - &amp;quot;Quality vs. Quantity of Ideas&amp;quot;&lt;/li&gt;
&lt;li&gt;sloth (laziness, idleness) wasting time -
&amp;quot;If I Had A Hammer&amp;quot;&lt;/li&gt;
&lt;li&gt;wrath (anger) - &amp;quot;Conflict is the Story&amp;quot;&lt;/li&gt;
&lt;li&gt;envy (jealousy) resentment of others for
their possessions - &amp;quot;Form vs. Structure&amp;quot;&lt;/li&gt;
&lt;li&gt;pride (vanity) - &amp;quot;Fear of Showing Weakness&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lust and Envy don't match up
well - there isn't a strong parallel here.  Neither list is a canonical
decomposition of mistakes and evils.  Further, there is a strong emotional
content to the seven sins which isn't really present in software development
projects.&lt;/p&gt;
&lt;p&gt;Perhaps the 7 virtues
(humility, meekness, charity, chastity, moderation, zeal and generosity) provide
guidance on overcoming the culture of complexity?&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Why Are Things So Complicated? - 7 Deadly Reasons?</title><link href="https://slott56.github.io/2005_09_03-why_are_things_so_complicated_7_deadly_reasons.html" rel="alternate"></link><published>2005-09-03T14:27:00-04:00</published><updated>2005-09-03T14:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-03:/2005_09_03-why_are_things_so_complicated_7_deadly_reasons.html</id><summary type="html">&lt;p&gt;See RLucente.bloki.com: &lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?tid=121450&amp;amp;fid=63455"&gt;The Culture of Programming - Why Programmers Make Things
So Complicated&lt;/a&gt;  .&lt;/p&gt;
&lt;p&gt;RL
identifies 4 reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It could be that its actually
complicated&lt;/li&gt;
&lt;li&gt;It could be that have not found the real
problem&lt;/li&gt;
&lt;li&gt;It could be that I have to patch because I
can't redesign and rebuild the …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;See RLucente.bloki.com: &lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?tid=121450&amp;amp;fid=63455"&gt;The Culture of Programming - Why Programmers Make Things
So Complicated&lt;/a&gt;  .&lt;/p&gt;
&lt;p&gt;RL
identifies 4 reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It could be that its actually
complicated&lt;/li&gt;
&lt;li&gt;It could be that have not found the real
problem&lt;/li&gt;
&lt;li&gt;It could be that I have to patch because I
can't redesign and rebuild the system&lt;/li&gt;
&lt;li&gt;It could be that I am not using the right
tool&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There really seem to be
seven.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&amp;quot;The Conflict Is The
Drama&amp;quot;.  The inherent conflicts in the relationship between developers and
buyers or users make the problem appear complex.  Often because buyers insist on
their solution to an assumed problem.&lt;/li&gt;
&lt;li&gt;&amp;quot;Fear of Showing Weakness&amp;quot;.  Simplicity isn't
valued.&lt;/li&gt;
&lt;li&gt;&amp;quot;Quality vs. Quantity of
Ideas&amp;quot;.  It's hard to let go of the first idea, no matter how bad it
is.&lt;/li&gt;
&lt;li&gt;&amp;quot;Form vs. Structure&amp;quot;.  We fail to
define the problem in the first place; we don't know what problem we're solving.
(RL's #2)&lt;/li&gt;
&lt;li&gt;&amp;quot;When I Grow Up&amp;quot;.  Lack of
mature processes for solving problems.&lt;/li&gt;
&lt;li&gt;&amp;quot;If I Had A Hammer&amp;quot;.  Inappropriate use of tools or solution design patterns,
viewing all fastener problems as nails because we really understand hammers.
(RL's #4)&lt;/li&gt;
&lt;li&gt;&amp;quot;How Hard Can It Be?&amp;quot;
Failure to assess risks appropriately. (RL's
#3)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This list was a cosmic accident.
However 7 is a magic number.  See Wikipedia's entry on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Seven_deadly_sins"&gt;Seven Deadly Sins&lt;/a&gt;  .  Since it was just a cosmic
accident, we now have to do some careful matching of our reasons and those sins
and see what might be the real parallel (if
any).&lt;/p&gt;
&lt;p&gt;Also, what about RL's #1 - it
really is hard?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Yes.  Some problems may actually be hard.  But
I think that truly hard problems only occur in the realm of public policy.
We're talking about software here.&lt;/li&gt;
&lt;li&gt;I think anything that appears to be hard in
software can be one of two things: it's an NP problem with a lot of mathematical
details or you're solving the wrong problem.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="complexity"></category></entry><entry><title>Essay 3 - Assuming a Solution</title><link href="https://slott56.github.io/2005_09_02-essay_3_assuming_a_solution.html" rel="alternate"></link><published>2005-09-02T22:56:00-04:00</published><updated>2005-09-02T22:56:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-02:/2005_09_02-essay_3_assuming_a_solution.html</id><summary type="html">&lt;p&gt;A great deal of the requirements analysis
activity is identifying the entire problem.  Many software people are eager to
present a solution to some of the
problem.&lt;/p&gt;
&lt;p&gt;Perhaps I can't locate my
keys.  Having a &amp;quot;Clapper&amp;quot; on my key ring so that my keys chirp may be a
solution.  However …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A great deal of the requirements analysis
activity is identifying the entire problem.  Many software people are eager to
present a solution to some of the
problem.&lt;/p&gt;
&lt;p&gt;Perhaps I can't locate my
keys.  Having a &amp;quot;Clapper&amp;quot; on my key ring so that my keys chirp may be a
solution.  However, if the real problem is that my keys were in my car when it
was stolen, the Clapper isn't really part of a solution to the actual
problem.&lt;/p&gt;
&lt;p&gt;Another example that is common
is &amp;quot;reducing network traffic&amp;quot;.  This is often stated as a requirement, as if
this has merit in its own right.&lt;/p&gt;
&lt;p&gt;This
is a &amp;quot;non-functional&amp;quot; requirement.  It is part of resource use or performance,
and should be clearly identified as such.  It has nothing to do with the
behavior of  the software; it doesn't help to meet the actor's goals or
objectives except in a peripheral way of not being slow.  The real requirement,
then is for some timeline or performance objective, irrespective of the chosen
solution.&lt;/p&gt;
&lt;p&gt;Network traffic may not be
part of the problem or the solution.  Stating it in the requirements makes the
assumption that a network will be part of the solution.  This assumption may be
false, and may also needlessly constrain thinking of actual solutions to the
actual problem.&lt;/p&gt;
&lt;p&gt;Often, a needless
constraint appears on the scene because the actual problem is incompletely
defined.  Assuming a network in the solution may be because the context was not
clearly stated, or the actual problem was not identified.&lt;/p&gt;
&lt;p&gt;Typically, the solution is assumed
because the problem appears to be a weakness in the existing technology.  The
fix, then is a patch or revision to that specific technology-related
problem.&lt;/p&gt;
&lt;p&gt;I might, for example, find
myself too far from my keys to get my &amp;quot;Clapper&amp;quot; to respond.  My engineer then
builds a wireless web-based device with an integrated Global Positioning System
(GPS) that posts the exact location of my keys on the Internet.  I still have to
translate this information to a specific spot within my house, but that is only
more technology.  The real problem is that I leave my keys in my car with the
engine running when I go to the liquor store in crime-ridden
neighborhoods.&lt;/p&gt;
&lt;p&gt;The real problem has
still not been identified, but a great deal of technology has been designed
based on a great many technical assumptions.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 2 - A Solution Is A Story</title><link href="https://slott56.github.io/2005_09_01-essay_2_a_solution_is_a_story.html" rel="alternate"></link><published>2005-09-01T22:43:00-04:00</published><updated>2005-09-01T22:43:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-01:/2005_09_01-essay_2_a_solution_is_a_story.html</id><summary type="html">&lt;p&gt;Software, and a software architecture, is a
solution to a problem.  Without a specific problem, software is a pointless
exercise:  statements in a formal language with no thesis or purpose.  An
abstract piece of software akin to the statement: &amp;quot;Time flies like an arrow.&amp;quot;
It parses (two different ways!) but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Software, and a software architecture, is a
solution to a problem.  Without a specific problem, software is a pointless
exercise:  statements in a formal language with no thesis or purpose.  An
abstract piece of software akin to the statement: &amp;quot;Time flies like an arrow.&amp;quot;
It parses (two different ways!) but doesn't solve a
problem.&lt;/p&gt;
&lt;p&gt;The central issues, then
are&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Identifying the problem&lt;/li&gt;
&lt;li&gt;Developing a solution&lt;/li&gt;
&lt;li&gt;Describing the solution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here, we'll look closely at
the description of the solution.  The description, like any story, establishes a
context or setting (time and place); it peoples this place with actors who have
goals and objectives.  A good story creates drama by putting the actors in
conflict with each other or their setting.  The characters typically evolve and
change, making moral choices, and eventually resolving their conflict.  There
are, in a good story, consequences to this resolution.  In a movie, these
consequences comprise the &amp;quot;third act,&amp;quot; and are sometimes overlooked or
ignored.&lt;/p&gt;
&lt;p&gt;We have, then a general
pattern for story telling:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Context&lt;/li&gt;
&lt;li&gt;Problem&lt;/li&gt;
&lt;li&gt;Forces&lt;/li&gt;
&lt;li&gt;Solution&lt;/li&gt;
&lt;li&gt;Consequences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this is a good
order, but not the only order.  Films will interleave the elements of context
and problem during the first act.  Some characters (representing the forces to
be resolved) may also be introduced during the second act.  The solution may be
hinted at from the very beginning, or introduced as a twist at the
end.&lt;/p&gt;
&lt;p&gt;Given this framework or pattern,
we can craft a compelling description of a software solution to a problem.
Consider what happens when we omit elements of the narrative
structure.&lt;/p&gt;
&lt;p&gt;Omit the Context.   The
reader knows the problem, but may not understand why it is a problem.  The
necessary background is, of course, the context; it does not have to be
presented first, but is essential to understanding the problem.  Generally, the
context is a fixed background against which the problem is solved: it is often a
phsyical, legal and social fabric.&lt;/p&gt;
&lt;p&gt;Omit
the Problem.  The reader may say, &amp;quot;nice algorithm but why do I care?&amp;quot;  The
visionary project plan includes budget, staffing, tools, schedule, but not hint
as to why we are doing this.&lt;/p&gt;
&lt;p&gt;Omit the
Forces.  Given the problem and the solution, descriptions of the forces seem
redundant.  However, without the resolution of various forces, it may not be
clear why this solution is the best solution.  Most problems have a large number
of solutions, including &amp;quot;ignore it.&amp;quot;  What is essential is the description of
why the other solutions are impossible or inappropriate.  This shows how the
solution optimizes all of the competing
forces.&lt;/p&gt;
&lt;p&gt;Note that when the forces do
not compete, there is no problem.  Sometimes, this needs to be carefully and
clearly explained.  People often propose to build needless or redundant software
because they have failed to recognize all of the forces and provide adequate
resolution.&lt;/p&gt;
&lt;p&gt;Omit the Solution.  This is
rare, but not impossible.  Failing to describe the solution means that it was
taken for granted, somehow, and didn't bear to be repeated.  Looking back on
projects in the past and trying to justify ongoing funding or future development
is made more difficult when the obvious is not stated just once for the record.
The reader is left with a description of a problem, and perhaps consequences
from some unstated solution, but no clear vision of the solution
itself.&lt;/p&gt;
&lt;p&gt;Omit the Consequences.  This is
not as severe a problem as omitting other parts of the story.  If the forces and
solution are presented fully, this may be obvious and not bear repeating.
Leaving the consequences implicit may leave the reader unable to understand
project plan details, costs or schedule required to create the solution.  As
with the problem, it is most important to state the consequences &amp;quot;once, for the
record.&amp;quot;&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 1 - All Software Problems are Large or Complex</title><link href="https://slott56.github.io/2005_08_31-essay_1_all_software_problems_are_large_or_complex.html" rel="alternate"></link><published>2005-08-31T23:38:00-04:00</published><updated>2005-08-31T23:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-08-31:/2005_08_31-essay_1_all_software_problems_are_large_or_complex.html</id><summary type="html">&lt;p&gt;All software problems are large or complex as a
direct result of the tremendous reuse potential of software.  Consider two
alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The problem is
relatively well understood.  Solution: locate an open source or commercial
solution and use or adapt that solution.&lt;/li&gt;
&lt;li&gt;The problem is not well understood.  Solution: study enough …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;All software problems are large or complex as a
direct result of the tremendous reuse potential of software.  Consider two
alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The problem is
relatively well understood.  Solution: locate an open source or commercial
solution and use or adapt that solution.&lt;/li&gt;
&lt;li&gt;The problem is not well understood.  Solution: study enough to realize that
existing solutions are not appropriate.  The problem will be like existing
problems, but different enough that existing solutions are inappropriate.  The
use or adapt possibilities are limited or
non-existent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The consequence is the
need for a disciplined approach to software problem-solving.  This is a step
removed from the technical mastery of tools.  A skilled programmer may not
always be a good problem solver.  We know that skilled tool-users often have
their vision narrowed by their tools:  &amp;quot;If all you have is a hammer, every
problem looks like a nail.&amp;quot;&lt;/p&gt;
&lt;p&gt;Let's talk
about Armour's Five Orders of Ignorance:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0 - When you already know.  In this case,
you either have software or have a complete design for software.  You can
construct the software with no mysteries about business problem, software
solution, technology stack or productivity.&lt;/li&gt;
&lt;li&gt;1 - When you know that you don't know.
These are configuration parameters for a product.  Things are well-understood;
so well understood that you have a checklist and that is a framework for your
ignorance.  The list of parameters is defined, you only need to supply the
values.&lt;/li&gt;
&lt;li&gt;2 -  When you don't know what you don't
know.  This is where custom software starts.  If you knew what you were doing,
you'd download it.  You know that you can't download it: either because you
don't really know what you're doing, or you were hoping for a mythical perfect
fit between problem and available solutions.  Since you don't know what you
don't know, you assume the gaps can be bridged only by custom
software.&lt;/li&gt;
&lt;li&gt;3 - When you don't even have a process
for identifying your knowledge gaps.  This is why we can't find a applicable
existing software package.&lt;/li&gt;
&lt;li&gt;4 - When you don't even know that there
is ignorance.  That's precisely the level of bravado needed to write custom
software.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Essay 20 - Moving the Topsoil</title><link href="https://slott56.github.io/2005_08_31-essay_20_moving_the_topsoil.html" rel="alternate"></link><published>2005-08-31T11:09:00-04:00</published><updated>2005-08-31T11:09:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-08-31:/2005_08_31-essay_20_moving_the_topsoil.html</id><summary type="html">&lt;p&gt;The topsoil is in the front yard, the garden is
in the back yard.&lt;/p&gt;
&lt;p&gt;The users form up a
bucket brigade to use several pails and buckets to move the soil.  It's
backbreaking and slow, so they go to IT for a
solution.&lt;/p&gt;
&lt;p&gt;&amp;quot;We've measured the work
activity very carefully …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The topsoil is in the front yard, the garden is
in the back yard.&lt;/p&gt;
&lt;p&gt;The users form up a
bucket brigade to use several pails and buckets to move the soil.  It's
backbreaking and slow, so they go to IT for a
solution.&lt;/p&gt;
&lt;p&gt;&amp;quot;We've measured the work
activity very carefully, and we need shovels that are precisely sized for our
buckets,&amp;quot; the users say.  &amp;quot;We were careful not to specify the technical details,
we just wrote up these business requirements that say, in effect, we need a
right-sized shovel.  But we didn't specify the technical details because we know
that adds cost and risk to the
project.&amp;quot;&lt;/p&gt;
&lt;p&gt;IT architects look the
situation over and counter-offer with a one-hand scoopy-bucket which does both
the soil scooping and transporting in one single wonder of sheet metal and
spot-welding.&lt;/p&gt;
&lt;p&gt;The CIO looks at the
proposal and complains that there isn't sufficient return on investment to
design and build the scoopy-bucket.  First, no one can be spared from the
maintenance activities that are so vital to day-to-day operations.  Second, this
doesn't have any provision for disaster recovery or business continuity.  It
probably won't pass a SAS-70 audit.  Third, it involves new technology and new
skills and doesn't fit with the strategic direction.  Since the strategic
direction uses more rakes, they have to rework the entire plan to be rake-based
not bucket-based.&lt;/p&gt;
&lt;p&gt;The architects hack
out a modification to the existing raking systems, called a Rake-O-Filler.  They
will purchase an off the shelf bucket, and the modify it so heavily that it is
unrecognizable and call it the Lift-O-Land.  The resulting integrated system
(ROFLOL) that should do some of the job that the users requested.  They'll still
need to change their bucket brigade strategy, however, because it takes three
people to fill, and only one to
carry.&lt;/p&gt;
&lt;p&gt;The programmers take twice as
long as scheduled to build the Rake-O-Filler.  The project manager controlling
the modifications to Lift-O-Land reworks the specifications so that it does
almost the entire job, making the Rake-O-Filler almost unnecessary.
Unfortunately, the Lift-O-Land is now so slow that the bucket brigade  isn't
really effective.  Instead, people take turns running a bucket of soil when it
is filled.&lt;/p&gt;
&lt;p&gt;The users request a
&amp;quot;Bucket-Runner-Scheduler&amp;quot; to help allow the bucket runners to do more useful
work until a bucket is filled.  The architects suggest using the calendar in
MS-Outlook.  The security manager doesn't like the idea of a shared calendar in
a desktop tool that could be vulnerable to hacking.  The architects suggest an
open-source shared-calendar application in PHP that's free, but the CIO and the
security manager won't permit open source
solutions.&lt;/p&gt;
&lt;p&gt;The management consultant
asks, &amp;quot;Why not have a second load delivered to the back yard?&amp;quot;&lt;/p&gt;
&lt;p&gt;The CIO bellows that she doesn't want
to pay for the topsoil twice.&lt;/p&gt;
&lt;p&gt;[See
&lt;a class="reference external" href="http://rlucente.bloki.com/forum/messages-index.jsp?tid=121512&amp;amp;fid=69143"&gt;http://rlucente.bloki.com/forum/messages-index.jsp?tid=121512&amp;amp;amp;fid=69143&lt;/a&gt;
for a response.]&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category></entry><entry><title>Building a Web Interface</title><link href="https://slott56.github.io/2004_01_06-building_a_web_interface.html" rel="alternate"></link><published>2004-01-06T11:01:00-05:00</published><updated>2004-01-06T11:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2004-01-06:/2004_01_06-building_a_web_interface.html</id><summary type="html">&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;I would like to build a web browser interface that has capabilities like a spreadsheet.&lt;/p&gt;
&lt;p&gt;At the same time, would like to use a tool like OpenROAD from Ingres/CA to do this.&lt;/p&gt;
&lt;p&gt;It seems that XUL is the way to go but the entire Mozilla thing is unstable.&lt;/p&gt;
&lt;p&gt;Perhaphs …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;I would like to build a web browser interface that has capabilities like a spreadsheet.&lt;/p&gt;
&lt;p&gt;At the same time, would like to use a tool like OpenROAD from Ingres/CA to do this.&lt;/p&gt;
&lt;p&gt;It seems that XUL is the way to go but the entire Mozilla thing is unstable.&lt;/p&gt;
&lt;p&gt;Perhaphs [there are] other alternatives ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are always
alternatives.  There are four processing locations in the architecture you're
describing:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;On the desktop via
a separate application or component that a user downloads.  For example, in
Windows, an ActiveX control can lodge on the desktop, interact with Excel (if
present) and be a spreadsheet, not
spreadsheet-like.&lt;/li&gt;
&lt;li&gt;In the
browser as a Java applet.  Some other plugins are possible, also.  For non-Java
plugins, the users must download and install the plugin, then your application
will be handled by the plugin.  For instance, the Tcl plugin can do this by
creating a Tk interface from the
plugin.&lt;/li&gt;
&lt;li&gt;In the browser as a
complex form with Javascript programming to handle all of the spreadsheet-like
capabilities.  This implies a lot of Javascript and little
persistence.&lt;/li&gt;
&lt;li&gt;In the web server
as a complex form.  Each interaction will take a while, since it will all be
done by the web server, but every step is now
persistent.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;None of these depend
on Mozilla's XUL.&lt;/p&gt;
&lt;p&gt;The issue, BTW,
is not the stability of Mozilla -- it is a better-engineered piece of software
than most.  The issue is the adoption of XUL; if Explorer doesn't adopt it, then
it will languish in a nook somewhere with all the other great ideas that never
took off.&lt;/p&gt;
</content><category term="Architecture &amp; Design"></category><category term="architecture"></category><category term="design"></category><category term="UX"></category><category term="UI"></category><category term="GUI"></category><category term="TUI"></category></entry></feed>