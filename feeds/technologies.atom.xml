<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>S.Lott -- Software Architect - Technologies</title><link href="https://slott56.github.io/" rel="alternate"></link><link href="/feeds/technologies.atom.xml" rel="self"></link><id>https://slott56.github.io/</id><updated>2025-06-14T18:11:00-04:00</updated><entry><title>Testing Your AI</title><link href="https://slott56.github.io/2025-06-14-tesing_your_ai.html" rel="alternate"></link><published>2025-06-14T18:11:00-04:00</published><updated>2025-06-14T18:11:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-06-14:/2025-06-14-tesing_your_ai.html</id><summary type="html">&lt;p&gt;We test software.
We test people.&lt;/p&gt;
&lt;p&gt;My lawyer, all my various doctors, even the coffee bar on main street is subject to testing.
The coffee shop proudly posts their score from health inspections.
Want to know about food safety? Ask them.&lt;/p&gt;
&lt;p&gt;My professionals all have walls full of diplomas and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We test software.
We test people.&lt;/p&gt;
&lt;p&gt;My lawyer, all my various doctors, even the coffee bar on main street is subject to testing.
The coffee shop proudly posts their score from health inspections.
Want to know about food safety? Ask them.&lt;/p&gt;
&lt;p&gt;My professionals all have walls full of diplomas and certifications.
You know, credentials.&lt;/p&gt;
&lt;p&gt;They can speak with authority on certain topics.
They've been tested by boards and experts in their field.&lt;/p&gt;
&lt;p&gt;My daughter-in-law has a PhD.
This means she's been subject to rigorous testing by other experts in her chosen field.&lt;/p&gt;
&lt;p&gt;The crap AI in my browser?&lt;/p&gt;
&lt;p&gt;Any testing? Any certification? Any credentials? Any diploma? Any endorsements?&lt;/p&gt;
&lt;p&gt;What? nothing?&lt;/p&gt;
&lt;p&gt;An AI without a stack of diplomas is no better than a drunk bloviating in a bar.
I there was a stack of diplomas, I'd consider venturing a question in one of the diploma subject areas.
Otherwise?
Without rigorous testing by other experts?&lt;/p&gt;
</content><category term="Technologies"></category><category term="ai"></category><category term="testing"></category></entry><entry><title>Stingray Reader Release 5.1</title><link href="https://slott56.github.io/2024-10-24_stingray_reader_release_5_1.html" rel="alternate"></link><published>2024-10-24T08:00:00-04:00</published><updated>2024-10-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-10-24:/2024-10-24_stingray_reader_release_5_1.html</id><summary type="html">&lt;p&gt;Starting back in 2011 I was working on a way to manage a variety of spreadsheets in a variety of layouts with a common schema.
Over the last 13 years, I've been updating and maintaining this little project.
It's not widely used, but it interests me.&lt;/p&gt;
&lt;p&gt;Fundamentally, the use of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Starting back in 2011 I was working on a way to manage a variety of spreadsheets in a variety of layouts with a common schema.
Over the last 13 years, I've been updating and maintaining this little project.
It's not widely used, but it interests me.&lt;/p&gt;
&lt;p&gt;Fundamentally, the use of well-defined schema is really important.
And often overlooked.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://pypi.org/project/stingray-reader/"&gt;https://pypi.org/project/stingray-reader/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/Stingray-Reader/build/html/index.html"&gt;https://slott56.github.io/Stingray-Reader/build/html/index.html&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2011_10_13-more_command_line_goodness.html"&gt;More Command-Line Goodness&lt;/a&gt;.
This started as an elaborate exercise in literate programming.
In 2012, I got some feedback.
See &lt;a class="reference external" href="https://slott56.github.io/2012_06_07-stingray_schema_based_file_reader.html"&gt;Stingray Schema-based File Reader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In 2014, I added and refactored it quite a bit.
See &lt;a class="reference external" href="https://slott56.github.io/2014_05_22-python_package_design_refactoring_and_the_stingray_reader_project.html"&gt;Python Package Design, Refactoring and the Stingray Reader Project&lt;/a&gt;
and &lt;a class="reference external" href="https://slott56.github.io/2014_05_29-stingray_44_update_the_posix_split_command_applied_to_cobol_files.html"&gt;Stingray 4.4 Update -- the Posix split command applied to COBOL files&lt;/a&gt;
and &lt;a class="reference external" href="https://slott56.github.io/2014_06_12-tdd_api_design_and_refactoring.html"&gt;TDD, API Design and Refactoring&lt;/a&gt;.
Busy year.
This was the tail end of my hiatus, and I was back to looking for paying jobs.&lt;/p&gt;
&lt;p&gt;In 2015, I considered the Literate Programming nature of the project.
See &lt;a class="reference external" href="https://slott56.github.io/2015_06_23-literate_programming_and_github.html"&gt;Literate Programming and GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then. Work interfered.&lt;/p&gt;
&lt;p&gt;In 2018, I added some things.
See &lt;a class="reference external" href="https://slott56.github.io/2018_07_02-coping_with_a_spreadsheet_database.html"&gt;Coping with a Spreadsheet Database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, I moved from SourceForge to GitHub.
See &lt;a class="reference external" href="https://slott56.github.io/2018_10_30-the_sourceforge_vs_github_conundrum.html"&gt;The SourceForge vs. GitHub Conundrum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 2020, some more upgrades.
See &lt;a class="reference external" href="https://slott56.github.io/2020_01_26-stingrayreader_upgrade.html"&gt;StingrayReader Upgrade&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2020_01_31-stingray_reader_rewrite.html"&gt;Stingray Reader Rewrite&lt;/a&gt;, and
&lt;a class="reference external" href="https://slott56.github.io/2020_02_25-stingray_reader_pervasively_bad_decision.html"&gt;Stingray Reader Pervasively Bad Decision&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;In 2021, some more revisions, mostly related to annotations.
See &lt;a class="reference external" href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html"&gt;Spreadsheets, COBOL, and Schema-Driven File Processing&lt;/a&gt;.
Also &lt;a class="reference external" href="https://slott56.github.io/2021_11_16-reading_spreadsheets_with_stingray_reader_and_type_hinting.html"&gt;Reading Spreadsheets with Stingray Reader and Type Hinting&lt;/a&gt;.
And &lt;a class="reference external" href="https://slott56.github.io/2021_12_01-processing_apple_numbers_files.html"&gt;Processing Apple Numbers Files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 2022, some additional thoughts.
See &lt;a class="reference external" href="https://slott56.github.io/2022_07_12-the_enterprise_cobol_conundrum.html"&gt;The Enterprise COBOL Conundrum&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="CLI"></category></entry><entry><title>any() and all() and Identity Elements</title><link href="https://slott56.github.io/2023-06-27-any_and_all_and_identity_elements.html" rel="alternate"></link><published>2023-06-27T09:00:00-04:00</published><updated>2023-06-27T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-06-27:/2023-06-27-any_and_all_and_identity_elements.html</id><summary type="html">&lt;p&gt;This was a surprising thing (for me) to see.
Surprising because -- after writing a book about functional programming,
I'd forgotten that some of the ideas are actually really new to people.&lt;/p&gt;
&lt;p&gt;(I've omitted the source of the quote because I want to reuse this
without worrying about link rot. Some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was a surprising thing (for me) to see.
Surprising because -- after writing a book about functional programming,
I'd forgotten that some of the ideas are actually really new to people.&lt;/p&gt;
&lt;p&gt;(I've omitted the source of the quote because I want to reuse this
without worrying about link rot. Some web sites have rocky futures.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;
Python tip:&lt;/p&gt;
&lt;p&gt;Be careful when using all()&lt;/p&gt;
&lt;p&gt;all() returns True for an empty sequence
&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seemed to be a surprise to the author. And a large number of people argued -- a few seemed vehement -- that Python is wrong here.&lt;/p&gt;
&lt;p&gt;When I pointed out this is the mathematical definition they argued that&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Programming isn't math. (This is demonstrably false. You may not have wide-ranging math skills, but programming very much is applied math.)&lt;/li&gt;
&lt;li&gt;The math is wrong. (Also false.)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="what-is-all"&gt;
&lt;h2&gt;What is all()?&lt;/h2&gt;
&lt;p&gt;First. What is &lt;tt class="docutils literal"&gt;all(x)&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;In effect it's &lt;tt class="docutils literal"&gt;reduce(and, x)&lt;/tt&gt;. Except, of course, there's no simple &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; operator. So, it's not &lt;strong&gt;exactly&lt;/strong&gt; that, but it's close enough.
We'll get to &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; in the next setion.&lt;/p&gt;
&lt;p&gt;Let's reason by analogy for a while, using &lt;cite&gt;sum()&lt;/cite&gt; and &lt;cite&gt;math.prod()&lt;/cite&gt;.
These are also &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; operations, but they work with numbers, not boolean values.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([1,2,3])
6
&amp;gt;&amp;gt;&amp;gt; prod([1,2,3])
6
&lt;/pre&gt;
&lt;p&gt;Okay. Using a perfect number like 6 is a bad example, isn't it?&lt;/p&gt;
&lt;p&gt;Here's a better example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([0, 1, 2])
3
&amp;gt;&amp;gt;&amp;gt; prod([0, 1, 2])
0
&lt;/pre&gt;
&lt;p&gt;No surprise, right?&lt;/p&gt;
&lt;p&gt;Here is a more fundamental definition of the &lt;tt class="docutils literal"&gt;sum()&lt;/tt&gt; function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from functools import reduce
&amp;gt;&amp;gt;&amp;gt; from operator import add, mul
&amp;gt;&amp;gt;&amp;gt; reduce(add, [0, 1, 2])
3
&lt;/pre&gt;
&lt;p&gt;In effect, &lt;tt class="docutils literal"&gt;sum = functools.partial(reduce, add)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This works for &lt;tt class="docutils literal"&gt;prod = functools.partial(reduce, mul)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It would work for &lt;tt class="docutils literal"&gt;any()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;all()&lt;/tt&gt; &lt;strong&gt;if&lt;/strong&gt; there was a simple operator in the
&lt;tt class="docutils literal"&gt;operator&lt;/tt&gt; module.&lt;/p&gt;
&lt;p&gt;There's an &lt;tt class="docutils literal"&gt;and_&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or_&lt;/tt&gt; definition in operator, but these are names for &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;,
which a bit-tweaking operations, only defined over integer values. They're &lt;strong&gt;not&lt;/strong&gt;
the general-purpose, short-circuiting &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operators.&lt;/p&gt;
&lt;p&gt;You could create a lambda for this. &lt;tt class="docutils literal"&gt;all = functools.partial(reduce, lambda a, b: a and b)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;All of this depends on the definition of &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-reduce"&gt;
&lt;h2&gt;What is reduce()?&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; function is sometimes described as  a &amp;quot;fold&amp;quot;.&lt;/p&gt;
&lt;p&gt;When we do &lt;tt class="docutils literal"&gt;reduce(add, [1, 2, 3])&lt;/tt&gt; it's essentially &lt;tt class="docutils literal"&gt;1 + 2 + 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We've folded the &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; operator into the sequence of values.&lt;/p&gt;
&lt;p&gt;When we do &lt;tt class="docutils literal"&gt;reduce(mul, [1, 2, 3])&lt;/tt&gt; it's a lot like we did &lt;tt class="docutils literal"&gt;1 * 2 * 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This folding idea also applies well to &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or&lt;/tt&gt;. We can fold logical operators into the sequence of values.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;all(x)&lt;/tt&gt; is (conceptually) &lt;tt class="docutils literal"&gt;reduce(and, x)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;x[0] and x[1] and &lt;span class="pre"&gt;x[2]...&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;any(y)&lt;/tt&gt; is (also, in concept) &lt;tt class="docutils literal"&gt;reduce(or, y)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;y[0] or y[1] or &lt;span class="pre"&gt;y[2]...&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;(We have to throw around conceptually, because there's no trivial &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operator.)&lt;/p&gt;
&lt;p&gt;So far, so good. This &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; hasn't introduced an complications, it's just a way of defining things
around the &amp;quot;fold&amp;quot; idea.&lt;/p&gt;
&lt;p&gt;What about empty sequences or iterables?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-initialization-problem"&gt;
&lt;h2&gt;The Initialization Problem&lt;/h2&gt;
&lt;p&gt;Here's the problem with our overly-simplistic use of Python's &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; reduce(add, [])
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty iterable with no initial value
&amp;gt;&amp;gt;&amp;gt; reduce(mul, [])
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty iterable with no initial value
&lt;/pre&gt;
&lt;p&gt;Failure.&lt;/p&gt;
&lt;p&gt;Here are the right answers:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([])
0
&amp;gt;&amp;gt;&amp;gt; prod([])
1
&lt;/pre&gt;
&lt;p&gt;The sum of an empty list is zero.&lt;/p&gt;
&lt;p&gt;The product of an empty list is 1.&lt;/p&gt;
&lt;p&gt;Similarly.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; any([])
False
&amp;gt;&amp;gt;&amp;gt; all([])
True
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;any()&lt;/tt&gt; function is a little bit like a sum. The &lt;tt class="docutils literal"&gt;all()&lt;/tt&gt; function is a little bit like
a product.&lt;/p&gt;
&lt;p&gt;I think that's why the &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; operator has precedence over the &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-what"&gt;
&lt;h2&gt;Wait, what?&lt;/h2&gt;
&lt;p&gt;Yes, the value of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all([])&lt;/span&gt;&lt;/tt&gt; is True and the value of the expression &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; is 1.&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;must&lt;/strong&gt; be true. It's not an implementation choice. It's a matter of definition.&lt;/p&gt;
&lt;p&gt;Roll back to the definition of &amp;quot;reduce&amp;quot; as &amp;quot;folding in an operator&amp;quot;.
(See &lt;a class="reference internal" href="#what-is-reduce"&gt;What is reduce()?&lt;/a&gt;, above.)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([1,&lt;/span&gt; 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;reduce(mul, [1, 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * 2 * 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; works and &lt;tt class="docutils literal"&gt;reduce(mul, [])&lt;/tt&gt; doesn't work. Something's wrong with &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This is a problem with the &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; function (as we used it above) not quite providing &lt;strong&gt;all&lt;/strong&gt; the features required by the &lt;tt class="docutils literal"&gt;sum()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;prod()&lt;/tt&gt; functions.&lt;/p&gt;
&lt;p&gt;Enter the initial value parameter for &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; reduce(mul, [], 1)
1
&lt;/pre&gt;
&lt;p&gt;Aha. This fixes the &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; problem. It's a little more complicated, but it's now correct.&lt;/p&gt;
&lt;p&gt;This means &lt;tt class="docutils literal"&gt;reduce(mul, [x, y, z], 1)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * x * y * z&lt;/tt&gt;.  The 1 is the multiplicative identity element and does nothing.&lt;/p&gt;
&lt;p&gt;This means &lt;tt class="docutils literal"&gt;reduce(mul, [x, y, z])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;x * y * z&lt;/tt&gt;. The 1 isn't needed because there's a value in the sequence.&lt;/p&gt;
&lt;p&gt;And &lt;tt class="docutils literal"&gt;reduce(mul, [], 1)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.  The multiplicative identity element is &lt;strong&gt;required&lt;/strong&gt; when the sequence is empty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consider-the-fold"&gt;
&lt;h2&gt;Consider the Fold&lt;/h2&gt;
&lt;p&gt;Where are we?&lt;/p&gt;
&lt;p&gt;Right.  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([1,&lt;/span&gt; 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * 1 * 2 * 3&lt;/tt&gt;. A multiplicateive identity element is provided.&lt;/p&gt;
&lt;p&gt;Therefore, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Note the delightful algebraic elegance of the fold definition.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2,&lt;/span&gt; 3, 4])&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2,&lt;/span&gt; 3]) * 4&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2])&lt;/span&gt; * 3 * 4&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt; * 2 * 3 * 4&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This is the reason why &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all([])&lt;/span&gt;&lt;/tt&gt; &lt;strong&gt;must&lt;/strong&gt; return &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="patterns"></category><category term="python"></category><category term="functional-programming"></category></entry><entry><title>Python and Encapsulation -- How do I private?</title><link href="https://slott56.github.io/2023_06_20-python_and_encapsulation.html" rel="alternate"></link><published>2023-06-20T08:00:00-04:00</published><updated>2023-06-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-06-20:/2023_06_20-python_and_encapsulation.html</id><summary type="html">&lt;p&gt;Central to OO design is &amp;quot;encapsulation.&amp;quot; It's so central it is part of several separate principles.&lt;/p&gt;
&lt;p&gt;In the S. O. L. I. D. design principles it's the &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;.
And a significant part of the &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, Python n00bz -- folks who already know some OO …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Central to OO design is &amp;quot;encapsulation.&amp;quot; It's so central it is part of several separate principles.&lt;/p&gt;
&lt;p&gt;In the S. O. L. I. D. design principles it's the &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;.
And a significant part of the &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, Python n00bz -- folks who already know some OO programming in other languages -- complain
that the usual artifacts of encapsulation are missing from the Python language.&lt;/p&gt;
&lt;p&gt;There's no &lt;strong&gt;private&lt;/strong&gt; or &lt;strong&gt;static&lt;/strong&gt; or &lt;strong&gt;protected&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;p&gt;How can we implement super-important encapsulation without this super-important text marker in the source?&lt;/p&gt;
&lt;p&gt;I'll address this from two points of view: what to do, and what not to do.&lt;/p&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to do&lt;/h2&gt;
&lt;p&gt;Design with encapsulation in mind. Follow the S.O.L.I.D. design principles.&lt;/p&gt;
&lt;p&gt;I suggest starting with Interface Separation.&lt;/p&gt;
&lt;p&gt;For things that aren't part of the public API (perhaps &amp;quot;private&amp;quot; in some sense) use a leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; in their name.
One &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; only, please.&lt;/p&gt;
&lt;p&gt;For things that are &amp;quot;protected&amp;quot;, or &amp;quot;final&amp;quot;, you probably don't need to do anything.
If you're really &lt;strong&gt;really&lt;/strong&gt; worried about someone misapprehending your design intent,
include many comments.&lt;/p&gt;
&lt;p&gt;If you're &lt;strong&gt;sure&lt;/strong&gt; someone will utterly disregard your comments,
misuse a private item outside the class,
or misuse a protected item outside the package or subclass,
or extend a final item,
or some other nefarious thing, well, there it is.
You'll have to ask yourself why this feature is both private/protected and so appealingly attractive.
If you can't discourage people from abusing it, perhaps there are other design problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-not-to-do"&gt;
&lt;h2&gt;What not to do&lt;/h2&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;__name&lt;/tt&gt; is mangled to make it an implementation detail of a &lt;em&gt;specific&lt;/em&gt; class.
These names tend to defeat ordinary inheritance.&lt;/p&gt;
&lt;p&gt;Don't use double-underscore before-and-after &lt;tt class="docutils literal"&gt;__names__&lt;/tt&gt; at all.
Never.
These are not conventionally &amp;quot;private&amp;quot; -- these are implementation details.
The name space is reserved to be part of Python's run-time.&lt;/p&gt;
&lt;p&gt;Other double-underscore before &lt;tt class="docutils literal"&gt;__names&lt;/tt&gt; are private, but are private to the class.
They cannot easily be overridden by a subclass. This is by design, and these are
specific solutions to the problem of implementing something where an override
is constrained to a single class in a hierarchy.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers"&gt;https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the quote:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Names in this category, when used within the context of a class definition, are re-written to use a mangled form to help avoid name clashes between “private” attributes of base and derived classes.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This is not conventional encapsulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-additional-thoughts"&gt;
&lt;h2&gt;Some additional thoughts&lt;/h2&gt;
&lt;p&gt;Some questions I ask when people have &lt;strong&gt;Serious Problems&lt;/strong&gt;
with Python's approach to privacy.&lt;/p&gt;
&lt;div class="section" id="question-1-is-private-really-important"&gt;
&lt;h3&gt;Question 1 -- Is private really important?&lt;/h3&gt;
&lt;p&gt;Let me state as a going-on assumption that encapsulation is an important part of an OO design.
Failure to encapsulate can create incomprehensible state changes, which is isomorphic to
a lot of functions sharing global variables. That's precisely the thing OO design
lets us avoid.&lt;/p&gt;
&lt;p&gt;So, yes, private -- as a design concept -- is very important.
Perhaps it's the single most important of OO design.&lt;/p&gt;
&lt;p&gt;Inheritance follows behind encapsulation. It's riddled with disputes
because we can often use delegation instead of inheritance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="question-2-given-encapsulation-what-more-does-the-language-need"&gt;
&lt;h3&gt;Question 2 -- Given encapsulation, what more does the language need?&lt;/h3&gt;
&lt;p&gt;In other words, Python lacks a &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword: is this a problem?&lt;/p&gt;
&lt;p&gt;Python's notion of &amp;quot;hidden-ish&amp;quot; attributes and methods
seems to be perfectly adequate.
The leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; on the name seems to be &lt;strong&gt;more&lt;/strong&gt; visible
than having to look back at a class definition to
see if a name is public, protected, or private.&lt;/p&gt;
&lt;p&gt;It looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyExampleClass:
    def visble_method(self, anArgValue: int) -&amp;gt; None:
        self._less_visible_method(anArgValue * 2)

    def _less_visible_method(self, anArgValue: int) -&amp;gt; None:
        self.anAttribute = anArgValue
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;visible_method()&lt;/tt&gt; method is considered &amp;quot;public&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;_less_visible_method()&lt;/tt&gt; method is considered by most to be &amp;quot;private&amp;quot;.
Yes, we can all see the method when we read the source.&lt;/p&gt;
&lt;p&gt;Many tools will make some effort to hide this behind a thin screen.&lt;/p&gt;
&lt;p&gt;Many developers understand this distinction. Sometimes n00bz don't -- at first -- recognize this convention.
They might complain that the &lt;tt class="docutils literal"&gt;_less_visible_method()&lt;/tt&gt; method is missing from the API documentation.
Then they're told this is because it's an implementation detail they can't depend on.
Then they complain that it's still visible in the source -- they can see the implementation!
It's not &lt;strong&gt;really&lt;/strong&gt; private!&lt;/p&gt;
&lt;p&gt;The language makes no distinction between these methods.&lt;/p&gt;
&lt;p&gt;The leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; is a convention. Widely-followed. Pretty universally adopted.
But not formally part of the language semantics.&lt;/p&gt;
&lt;p&gt;Some linters will remind you that you've broken the rules by using a &amp;quot;private&amp;quot; method
from outside the confines of the class hierarchy.&lt;/p&gt;
&lt;p&gt;Do we need more? Let's dig into what more we might ask for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2a1-the-language-needs-formal-semantic-support-for-private"&gt;
&lt;h3&gt;Q2A1. The language needs formal semantic support for private&lt;/h3&gt;
&lt;p&gt;Q: Why?&lt;/p&gt;
&lt;p&gt;A: Because I need all the tools to absolutely guarantee that I don't abuse this.&lt;/p&gt;
&lt;p&gt;Recall the use for privacy is to help us &lt;strong&gt;design&lt;/strong&gt; API's cleanly.
Keywords like &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;final&lt;/tt&gt; are part of a design effort.
They're (sometimes) helpful information for designers.&lt;/p&gt;
&lt;p&gt;They're easily overlooked when using the class.&lt;/p&gt;
&lt;p&gt;And, at run-time, they cease to be useful.&lt;/p&gt;
&lt;p&gt;Do we really want the byte-code interpreter to be checking some kind of &amp;quot;ownership&amp;quot; before each
write to memory?&lt;/p&gt;
&lt;p&gt;The usual answer is &amp;quot;No.&amp;quot;&lt;/p&gt;
&lt;p&gt;For a compiled language, privacy is honored as part of code generation.
But. That's essentially the same as having a convention and using a linter to
confirm the convention is followed properly.&lt;/p&gt;
&lt;p&gt;(And yes, &amp;quot;language + linter&amp;quot; is not the same as &amp;quot;language&amp;quot;.
Those folks who can't tolerate the &amp;quot;two-ness&amp;quot; of it
can write a shell script to bundle a linter with the Python run-time.
After all, that's how gcc used to work. It was a bundle of precompiler, C++ to C translator,
and the C compiler, which -- itself -- was a multi-step operation to build code.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2a2-the-languge-tools-must-support-private"&gt;
&lt;h3&gt;Q2A2. The languge tools must support private&lt;/h3&gt;
&lt;p&gt;Q: Why? Do you have trouble seeing the &lt;tt class="docutils literal"&gt;_&lt;/tt&gt;? Do you have trouble remembering the semantics? Do you like referring back to the class definition all the time to see if a name is private or not?&lt;/p&gt;
&lt;p&gt;A: Don't be an ass with questions like that. Of course &lt;strong&gt;I&lt;/strong&gt; see it. Of course &lt;strong&gt;I&lt;/strong&gt; know what it means. I worry about others, who aren't as gifted in the programming. Everyone knows there's always &lt;em&gt;someone&lt;/em&gt; who can't follow the simple rules.&lt;/p&gt;
&lt;p&gt;This is about projecting nefarious intent on others?&lt;/p&gt;
&lt;p&gt;Some folks insist a Very Clever IDE (VCI™) would recognize context and provide
private or protected attributes in a drop-down list of alternatives based on
context. That seems nice, I suppose.&lt;/p&gt;
&lt;p&gt;We've wandered far from the design intent behind encapsulation and into
areas of IDE UX. A UX can identify leading-&lt;tt class="docutils literal"&gt;_&lt;/tt&gt; variables pretty well,
and mark them as not public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="some-backstory"&gt;
&lt;h2&gt;Some Backstory&lt;/h2&gt;
&lt;p&gt;The quote that drives this is &amp;quot;We're all consenting adults here.&amp;quot;&lt;/p&gt;
&lt;p&gt;This summarizes the idea that Python is distributed as source.
We can all see the implementation.
The notion of &amp;quot;private&amp;quot; is -- at best -- a suggestion.&lt;/p&gt;
&lt;p&gt;(Tangentially related: &lt;a class="reference external" href="https://slott56.github.io/2015_12_08-python_big_picture_whats_the_roadmap_revised.html"&gt;Python Big Picture -- What's the &amp;quot;roadmap&amp;quot;?&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="design patterns"></category><category term="python"></category></entry><entry><title>Software Rewrites to Add Hints</title><link href="https://slott56.github.io/2023_05_04-software_rewrites_to_add_hints.html" rel="alternate"></link><published>2023-05-04T08:00:00-04:00</published><updated>2023-05-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-05-04:/2023_05_04-software_rewrites_to_add_hints.html</id><summary type="html">&lt;p&gt;Let's reach way, way back. 1989 - 1990.
This will let me talk about OO programming and Python Type Hints. (really)
And doing OO design for things that are as pervasive (and transparent) as air.
Things that &lt;strong&gt;need&lt;/strong&gt; to be part of a design, but don't appear in
any documentation.&lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's reach way, way back. 1989 - 1990.
This will let me talk about OO programming and Python Type Hints. (really)
And doing OO design for things that are as pervasive (and transparent) as air.
Things that &lt;strong&gt;need&lt;/strong&gt; to be part of a design, but don't appear in
any documentation.&lt;/p&gt;
&lt;p&gt;In the early 90's the Hero Game System, 4ed had just come out.
PC's were an expensive luxury item. But the Macintosh was there to help us think different.&lt;/p&gt;
&lt;p&gt;My TTRPG group is loving the Hero Game System. Complicated stories. Super heroes. Sophisticated game mechanics.
The Fantasy Hero rules were a delight, and lead to many long, involved campaigns.&lt;/p&gt;
&lt;p&gt;There's no overt OO programming to it (yet.) And, of course, Python has barely been invented.&lt;/p&gt;
&lt;p&gt;But there's a down-side to the Hero Game System:&lt;/p&gt;
&lt;div class="section" id="accounting"&gt;
&lt;h2&gt;Accounting&lt;/h2&gt;
&lt;p&gt;The game requires a fairly scrupulous accounting of &amp;quot;Character Points&amp;quot;.
Some are assigned at the outset. A hero, for example, may have a base budget of 75 points.
Some are purchased by taking on disadvantages. For example Paranoia, or Hunted and Watched by Authorities,
or a Dependence, or a Weakness you'd like to keep secret, can all add to the budget of character points.&lt;/p&gt;
&lt;p&gt;All of the powers, skills, talents, perks, and what-not are purchased
with character points.&lt;/p&gt;
&lt;p&gt;And it all has to balance.&lt;/p&gt;
&lt;p&gt;Too high a skill in Guns means ripping away some strength or intelligence.
Or reducing other skills.&lt;/p&gt;
&lt;p&gt;So what can we do to make sure our character's, gadgets, vehicles, and bases
are all designed properly?&lt;/p&gt;
&lt;p&gt;Clearly, the answer is tools. Eventually, there will be OO design in here, I promise.
We'll work through the history, though.&lt;/p&gt;
&lt;div class="section" id="paper-and-pencil"&gt;
&lt;h3&gt;Paper and Pencil&lt;/h3&gt;
&lt;p&gt;In the 90's, I played the game using actual paper spreadsheets. 3-column accounting pads to tally up base
points, advantages, and limitations to compute the net points after adjustments.&lt;/p&gt;
&lt;p&gt;After all, we're talking about table-top role-playing.
Paper and pencil gaming. Of course we have 3-column ledger pads.
Along with hex mapping paper. And Dice. Lots of dice.&lt;/p&gt;
&lt;p&gt;It's the 90's. I've got Macintosh LC (?) I think.
I remember the Mac+. I remember the iMac. In between the two was a slim pizza box with a front-loading CD.&lt;/p&gt;
&lt;p&gt;Software tools are ramping up quickly to the point where they can be used casually
for gaming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h3&gt;Software&lt;/h3&gt;
&lt;p&gt;It didn't take too long to start using spreadsheet software. Appleworks. Then Clarisworks.&lt;/p&gt;
&lt;p&gt;It's clunky, but the computations aren't complicated. It's just a lot of typing.&lt;/p&gt;
&lt;p&gt;First, you have to be super-careful to type all the stuff from the rule books into the spreadsheet properly.&lt;/p&gt;
&lt;p&gt;Second -- it's the early 90's -- laptops are still very expensive. This means I'm going to
design offline, print, and use paper on game night to play.&lt;/p&gt;
&lt;p&gt;Remember, it's a spreadsheet: it introduces as many problems as it solves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v2-hypercard"&gt;
&lt;h3&gt;Software V2: Hypercard&lt;/h3&gt;
&lt;p&gt;HyperCard -- if you've never seen it -- isn't easy to understand.&lt;/p&gt;
&lt;p&gt;With some work, I created cards for each power/skill/perk/talent/whatever.&lt;/p&gt;
&lt;p&gt;I can use those cards to create new cards for a character with abilities, and references to powers, skills, talents, perks, whatever.&lt;/p&gt;
&lt;p&gt;I can then sum up the points to be sure the Character Points balance. I can tweak the card and try
again until I make the budget add up properly.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;With a little care, I can serialize the output as a CSV file that can be pumped into a spreadsheet and formatted.&lt;/p&gt;
&lt;p&gt;This was heavenly.&lt;/p&gt;
&lt;p&gt;I built elaborate campaigns, worlds, scenarios, adventures. All the things designed with HyperCard.
The pubishing involved spreadsheet formatting and some word-processing to tie it together.&lt;/p&gt;
&lt;p&gt;But. All good things come to an end. 2004 was the end of Hypercard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v3-python-and-oop"&gt;
&lt;h3&gt;Software V3: Python and OOP&lt;/h3&gt;
&lt;p&gt;(See, I told you we'd get to OOP, eventually.)&lt;/p&gt;
&lt;p&gt;When you consider the problem domain
it's a classic Object-Oriented Programming problem.
(I'd been thinking about it for well over decade at this point in the historial narrative.)&lt;/p&gt;
&lt;p&gt;Classic. OOP.&lt;/p&gt;
&lt;p&gt;There's tons of Inheritance. Tons of Delegation. Lots of Composition.  Lots of Instances of Classes.&lt;/p&gt;
&lt;p&gt;It's all there. And it's pretty simple. There are relatively few exceptions.
And the exceptions are trivially handled by footnotes to the &amp;quot;Game Master&amp;quot; (me).&lt;/p&gt;
&lt;p&gt;This means I have to drag all of the work I already did out of Hypercard and rewrite it into Python.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Once that's done, I can now use a block of code like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
normal1 = hero.Character(
    &amp;quot;Normal&amp;quot;,
    hero.NORMAL,
    # Characteristics
    hero.STR(13),
    hero.DEX(12),
    hero.CON(10),
    hero.BODY(12),
    hero.INT(10),
    hero.EGO(8),
    hero.PRE(13),
    hero.COM(9),
    # Skills, Talents, Perks, Powers
    hero.skills.WeaponFamiliarity_Category(&amp;quot;Common Melee&amp;quot;, 1),
    hero.skills.TransportFamiliarity_Single(&amp;quot;Horses&amp;quot;),
    hero.skills.Familiarity(&amp;quot;Jungle&amp;quot;, 1),
    hero.skills.Familiarity(&amp;quot;Town&amp;quot;, 1),
    hero.skills.AnimalHandling(1),
    # Disadvantages
    hero.disadvantages.Coward(),
)
&lt;/pre&gt;
&lt;p&gt;If the points don't balance, the class initializer will print a message.&lt;/p&gt;
&lt;p&gt;There's a serializer to produce CSV files for incorporation into spreadsheets.
This means the characters can format nicely for game night.&lt;/p&gt;
&lt;p&gt;We're back in business. I introduced my kids to TTRPG. Some of my nephews.
But I could balance the books on my laptop to make sure their characters were legit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v4-python-3-and-type-hints"&gt;
&lt;h3&gt;Software V4: Python 3 and Type Hints&lt;/h3&gt;
&lt;p&gt;So now it's 2023.&lt;/p&gt;
&lt;p&gt;I don't play Hero games much anymore.
In spite of not playing regularly,
the TTRPG topic surfaces from time to time. Maybe once every few years, now.&lt;/p&gt;
&lt;p&gt;And the OO Design topic is -- in the back of my mind -- evergreen.&lt;/p&gt;
&lt;p&gt;As a kind of mental palate cleansing &lt;em&gt;Amuse Bouche&lt;/em&gt; I decided to clean up the type hints
and unit tests and make sure my hobby stuff still ran in Python 3.11 or 3.12.
I did this in the unlikely event I ever wind up playing this TTRPG again.&lt;/p&gt;
&lt;p&gt;The cleanup inovolved a fair amount of work spread over almost a week.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Getting the type hints right revealed problems.
There are two parts to why this took so much work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="type-hint-fundamentals"&gt;
&lt;h2&gt;Type Hint Fundamentals&lt;/h2&gt;
&lt;p&gt;One issue is in the way the various columns of a standard
&amp;quot;Full Character Sheet&amp;quot; are formatted.
The publication guidelines are for paper-and-pencil, hard-copy kind of adventure guides and campaing books.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;Cost&amp;quot; column isn't -- universally -- numeric. Sometimes there's text.&lt;/li&gt;
&lt;li&gt;Same for the &amp;quot;Endurance&amp;quot; column. It may have text explanations comingled with numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a big deal when serializing the data for a spreadsheet.
Mixtures of numbers and words and what-not are tolerated politely.&lt;/p&gt;
&lt;p&gt;Using &lt;strong&gt;mypy&lt;/strong&gt; to check the type hints revealed a number of bad mistakes.&lt;/p&gt;
&lt;p&gt;Eventually, I could distinguish between the internal cost computations,
and the external presentation. This cleanly isolated the essentially numeric
accounting. (Which, if you roll back to the top of this post, was why we started this
in the first place: accounting.)&lt;/p&gt;
&lt;p&gt;Thst's not all, though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-issues"&gt;
&lt;h2&gt;Use Case Issues&lt;/h2&gt;
&lt;p&gt;The more fundamental issue was the conflation of &lt;tt class="docutils literal"&gt;Character | Gadget | Base | Vehicle&lt;/tt&gt;.
This requires some care in writing type hints and doing OO design to make
sure that any differences are essential differences in these classes of objects.&lt;/p&gt;
&lt;p&gt;For the most part, everything's a &amp;quot;Framework&amp;quot; that has a collection of features,
advantages, and limitations. A Power is a Feature, so Frameworks can nest.&lt;/p&gt;
&lt;p&gt;From a usability perspective there are two distinct kinds of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Raw Materials. Powers, Skills, Talents, etc., with a cost.
Ideally, these are all class definitions. They change very slowly, if at all.
An instance of one these classes has a CP cost and a list of effects.&lt;/p&gt;
&lt;p&gt;The Raw Materials are all &lt;tt class="docutils literal"&gt;class SomePower(Power): effects: list[Effect] = &lt;span class="pre"&gt;[STRBonus(+10)]&lt;/span&gt;&lt;/tt&gt; kind of definitions.
More-or-less right out of the rules, rewritten into Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished Goods. Things like Characters have a budget, which must balance the sum of the costs of the Raw Materials that make up the Character.
The characters in a game will be instances of some generic class, popuulated by instances raw material classes.
The &lt;tt class="docutils literal"&gt;Character&lt;/tt&gt; class definition has a few features that are distinct from the raw materials classes.&lt;/p&gt;
&lt;p&gt;The Finished goods are built with &lt;tt class="docutils literal"&gt;character = hero.Character(THIS(10), THAT(10), &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This distinction makes for some gnarly OO design decisions to reflect the variety of use cases.&lt;/p&gt;
&lt;p&gt;A raw material has a fairly fixed definition, and there's a direct mapping
from the desired effects to the required cost. (The mapping isn't always &lt;strong&gt;simple&lt;/strong&gt;
because there are advantages and disadvantages that are figured in.)&lt;/p&gt;
&lt;p&gt;A finished good is built &amp;quot;on the fly&amp;quot; as a collection of instances of raw materials.&lt;/p&gt;
&lt;p&gt;Right now, the distinction is kind of buried: the classes &lt;tt class="docutils literal"&gt;Character&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Gadget&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Base&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Vehicle&lt;/tt&gt;
lack a unifying abstraction or protocol. This needs to be fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oo-design-advice"&gt;
&lt;h2&gt;OO Design Advice&lt;/h2&gt;
&lt;p&gt;It's not at all clear this distinction between raw material and finished good &lt;strong&gt;needs&lt;/strong&gt; to be present.
Superficially, it seems like everything's a &lt;tt class="docutils literal"&gt;Feature&lt;/tt&gt; and that's all we need to know.&lt;/p&gt;
&lt;p&gt;The use cases for design based on raw materials are an unstated element of the rules.
Technicall, we can argue that it's stated because design the essential purpose of
most of the rulebook. But. It's not stated as a simple &amp;quot;Here are things you'll design
based on raw materials we've already designed.&amp;quot; And &amp;quot;When you design a Campaign, you'll often
be extending the pool of raw materials.&amp;quot; Instead, it's assumed that you -- the reader --
understand the two kinds of design.&lt;/p&gt;
&lt;p&gt;This is a chronic problem in software architecture.&lt;/p&gt;
&lt;p&gt;There are things that are essential, but are -- like the atmosphere -- so pervasive
and invisble no one things to mention them.&lt;/p&gt;
&lt;p&gt;There's more (of course.)&lt;/p&gt;
&lt;div class="section" id="software-v5-python-3"&gt;
&lt;h3&gt;Software V5: Python 3&lt;/h3&gt;
&lt;p&gt;Interactivity was part of HyperCard (and the spreadsheets that preceeded it.)&lt;/p&gt;
&lt;p&gt;The Python 2 and Python 3 definitions of a Character was something
I implemented as a simple script.
This isn't &lt;strong&gt;too&lt;/strong&gt; interactive. You have an edit-run-crash cycle.&lt;/p&gt;
&lt;p&gt;The scripts aren't complicated, and a simple &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; rule can be used to rebuild
all the CSV's after a software bug fix or after a change to some Power definition.&lt;/p&gt;
&lt;p&gt;The work flow is tweak something. execute the script, look for error messages. Not too bad
when compared with paper-and-pencil of thirty years ago.&lt;/p&gt;
&lt;p&gt;Yesterday... (Seriously. Yesterday...)&lt;/p&gt;
&lt;p&gt;It occurred to me that Jupyter Lab is a way to restore the original HyperCard interactivity.
The Character/Gadget/Vehicle/Base can be a cell.
I can run the notebook to validate the budgets for all the various bad guys in the scenario.&lt;/p&gt;
&lt;p&gt;Over-budget? Tweak a definition until the cell stops printing the &amp;quot;over/under budget&amp;quot; error.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;I can write the supplemental stuff as Markdown. Right there. In the notebook.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v6-adventure-books"&gt;
&lt;h3&gt;Software V6: Adventure Books&lt;/h3&gt;
&lt;p&gt;There's a very small, dedicated markeplace for Hero content.&lt;/p&gt;
&lt;p&gt;(See &lt;a class="reference external" href="https://www.herogames.com"&gt;https://www.herogames.com&lt;/a&gt;, &lt;a class="reference external" href="https://www.patreon.com/hero_games"&gt;https://www.patreon.com/hero_games&lt;/a&gt;, and &lt;a class="reference external" href="https://roll20.net/compendium/HERO/BookIndex#content"&gt;https://roll20.net/compendium/HERO/BookIndex#content&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;While I'll never be a proper game author,
I can still write up a scenario in a tidy format as if it's still 1995 and I might
get a few bucks for an Adventurer's Club submission.&lt;/p&gt;
&lt;p&gt;And this means using Sphinx, ReStructured Text (or maybe Markdown) to create a Scenario book.&lt;/p&gt;
&lt;p&gt;I will slowly unearth my old campaign books (written in Pages) and convert them
to Python/Sphinx projects.
While it might be fun to imagine publishing them to HeroGames or Roll20, they're based 4th ed out-of-date rules.
So. It's a hobby project that pleases only me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="object-oriented design"></category><category term="patterns"></category><category term="python"></category><category term="games"></category></entry><entry><title>Some Design Pattern Thoughts</title><link href="https://slott56.github.io/2023_04_25-some_design_pattern_thoughts.html" rel="alternate"></link><published>2023-04-25T08:00:00-04:00</published><updated>2023-04-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-04-25:/2023_04_25-some_design_pattern_thoughts.html</id><summary type="html">&lt;p&gt;The question was &amp;quot;Favorite Design Patterns.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is tricky because -- well -- so many patterns appear and re-appear in software.
Picking a few from the vast world of patterns is fraught with difficulties.&lt;/p&gt;
&lt;p&gt;Here are some thoughts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_01_03-code_quality_which_implementation_is_better.html"&gt;Code Quality - Which Implementation is &amp;quot;Better&amp;quot;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html"&gt;State-Based Object Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html"&gt;Functional Programming and Finite State …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The question was &amp;quot;Favorite Design Patterns.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is tricky because -- well -- so many patterns appear and re-appear in software.
Picking a few from the vast world of patterns is fraught with difficulties.&lt;/p&gt;
&lt;p&gt;Here are some thoughts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_01_03-code_quality_which_implementation_is_better.html"&gt;Code Quality - Which Implementation is &amp;quot;Better&amp;quot;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html"&gt;State-Based Object Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html"&gt;Functional Programming and Finite State Automata (FSA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_09_21-deconstructing_programs_from_c_or_finding_the_objects.html"&gt;Deconstructing Programs from C; or Finding The Objects™&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2009_02_20-python_business_rules_engine.html"&gt;Python Business Rules Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2010_12_27-the_anti_if_campaign.html"&gt;The Anti-IF Campaign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes. That's a lot of writing on design patterns.&lt;/p&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="design patterns"></category><category term="python"></category></entry><entry><title>Side Quest</title><link href="https://slott56.github.io/2023_04_04-side_quest.html" rel="alternate"></link><published>2023-04-04T08:00:00-04:00</published><updated>2023-04-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-04-04:/2023_04_04-side_quest.html</id><summary type="html">&lt;p&gt;Few things are as distracting as those god-awful side quests.&lt;/p&gt;
&lt;p&gt;In this case, I had to search out all of the examples in my new book drafts.&lt;/p&gt;
&lt;div class="section" id="previously"&gt;
&lt;h2&gt;Previously&lt;/h2&gt;
&lt;p&gt;Once upon a time, it was a manual check of code in the book to be sure it made sense.&lt;/p&gt;
&lt;p&gt;Ugh. Not …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Few things are as distracting as those god-awful side quests.&lt;/p&gt;
&lt;p&gt;In this case, I had to search out all of the examples in my new book drafts.&lt;/p&gt;
&lt;div class="section" id="previously"&gt;
&lt;h2&gt;Previously&lt;/h2&gt;
&lt;p&gt;Once upon a time, it was a manual check of code in the book to be sure it made sense.&lt;/p&gt;
&lt;p&gt;Ugh. Not living like that again.&lt;/p&gt;
&lt;p&gt;Tons of mistakes found by readers.&lt;/p&gt;
&lt;p&gt;The root cause? Editors who liked MS Word forcing me to copy-and-paste examples.&lt;/p&gt;
&lt;p&gt;Never again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-i"&gt;
&lt;h2&gt;Automation I&lt;/h2&gt;
&lt;p&gt;I would draft in RST and then use Pandoc to convert to MS Word.&lt;/p&gt;
&lt;p&gt;Then tweak the MS Word to use the publisher's preferred MS Word Template.
Point and click at every single thing to make sure it has the right
paragraph or character style name.&lt;/p&gt;
&lt;p&gt;Nope. Never doing that again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-ii"&gt;
&lt;h2&gt;Automation II&lt;/h2&gt;
&lt;p&gt;Let's use LaTeX. My project is an update to a book to the 3rd edition.&lt;/p&gt;
&lt;p&gt;(It's this: &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The 2nd ed. files came to me in MS Word format. I converted them to LaTeX with Pandoc.
Easy. Peasy.&lt;/p&gt;
&lt;p&gt;I can now edit the LaTeX Like a real person with a text editor.
Global search and replace now works reliably.
No need to endlessly point and click at pieces of text to set the style.&lt;/p&gt;
&lt;p&gt;I do need to remove some pandoc-isms and replace them with the publisher's preferred LaTeX.
This works out very nicely.&lt;/p&gt;
&lt;p&gt;But... The examples...&lt;/p&gt;
&lt;p&gt;Here's the side quest. (Foreshadowing: it's not the only one.)&lt;/p&gt;
&lt;div class="section" id="side-quest-ii-a"&gt;
&lt;h3&gt;Side Quest II-A&lt;/h3&gt;
&lt;p&gt;Parse the LaTeX (ugh) and locate all the examples.&lt;/p&gt;
&lt;p&gt;Pandoc made them &lt;tt class="docutils literal"&gt;{verbatim}&lt;/tt&gt; (I think) or maybe &lt;tt class="docutils literal"&gt;{lstlisting}&lt;/tt&gt;. Not sure. Doesn't matter.&lt;/p&gt;
&lt;p&gt;Change them all to &lt;tt class="docutils literal"&gt;{minted}&lt;/tt&gt;. (The publisher then changed them all to a customized &lt;tt class="docutils literal"&gt;{codeblock}&lt;/tt&gt; that looked GREAT!)&lt;/p&gt;
&lt;p&gt;The code to do this &lt;strong&gt;also&lt;/strong&gt; added a unique label to each example so the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;example~\\ref{ex-some-tag}&lt;/span&gt;&lt;/tt&gt; worked.&lt;/p&gt;
&lt;p&gt;(Yes, LaTeX is ugly.)&lt;/p&gt;
&lt;p&gt;This was really only preparation for the second side quest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="side-quest-ii-b"&gt;
&lt;h3&gt;Side Quest II-B&lt;/h3&gt;
&lt;p&gt;That's really only the start.
Once every example has a unique label, I can then do the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Extract all of the code snippets from the book, and load them up into a big-old dictionary. LaTeX parsing is a potential ugh, but it works for this book's LaTeX.&lt;/li&gt;
&lt;li&gt;Put each snippet into a test context using Jinja and a directory of templates.&lt;ul&gt;
&lt;li&gt;Some snippets are doctest code, and require little-to-no context.&lt;/li&gt;
&lt;li&gt;Some snippets are full functions, easy to plug into a file that includes test case(s).&lt;/li&gt;
&lt;li&gt;Some snippets are code fragments that require a much more elaborate context. And test cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run Black on the filled-in templates to undo any formatting mischief from the book (or from the template.)&lt;/li&gt;
&lt;li&gt;Run pytest on the whole show and make sure &lt;strong&gt;everything&lt;/strong&gt; works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The book's examples are a lot of code.
It works out better with a combination of &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; to go chapter-by-chapter
to be sure everything works.&lt;/p&gt;
&lt;p&gt;This is only to be sure the examples withstand scrutiny. I still have to write the text.
And rewrite the text when the reviewers find problems.
Which means rewriting the examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code"&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;Here's a LaTeX parser. I can't make any guarantees, because your LaTeX may involve
constructs that I've never seen before.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class BlockKind(Enum):
    BLANK = 0         # An empty line.
    COMMENT = 1       # A &amp;quot;%...&amp;quot; line. Comments at the end of a line are treated as part of the text.
    ENV = 2           # \\begin{name}[opts] ... \\end{name}. Nesting is **not** examined.
    MATH = 3          # $$ ... $$
    TEXTWITHMATH = 4  # A block with &amp;quot;$&amp;quot; in it
    TEXT = 5          # A block, frequently containing \\command[opts]{stuff}
&lt;/pre&gt;
&lt;p&gt;I don't think this is all of the block types. But it is representative of all the block types I actually used.&lt;/p&gt;
&lt;p&gt;Here's the definition of a block.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;dataclass
class Block:
    kind: BlockKind
    lines: list[str]

    &amp;#64;property
    def text(self) -&amp;gt; str:
        return '\n'.join(self.lines)
&lt;/pre&gt;
&lt;p&gt;The first goal being that we can iterate through the blocks, and perform special-case
processing based on the enumerated &lt;tt class="docutils literal"&gt;BlockKind&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The second goal is to be lossless. This means that some block text contains trailing or
leading stuff. Specifically, LaTeX in-line comments.&lt;/p&gt;
&lt;p&gt;Next up, the various regex patterns that recognize most instances of the above
blocks.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p class="last"&gt;This is not a general solution.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;LaTeX has lots and lots of ways to extend the language. Lots.&lt;/p&gt;
&lt;p&gt;One opinion I've seen is that the whole thing is better understood
as a Turing machine that's executed and produces an output stream.&lt;/p&gt;
&lt;p&gt;And it has constructs that extend the Turing machine with new syntax.
Dynamically.  On-the-fly.&lt;/p&gt;
&lt;p&gt;But I don't use any of those. Or if I do use them, the implementation details
are opaque to me and I don't need to care.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
COMMENT_PAT = re.compile(r&amp;quot;^\s*%&amp;quot;)
MATH_ENV_PAT = re.compile(r&amp;quot;^\s*\$\$\s*$&amp;quot;)
ENV_BEGIN_PAT = re.compile(r&amp;quot;^\s*\\begin\{(\w+)\}(\[.*\])?&amp;quot;)
ENV_END_PAT = re.compile(r&amp;quot;^\s*\\end\{(\w+)\}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;A few more patterns that are used later to distinguish different kinds of block content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CONSOLE_PAT = re.compile(r&amp;quot;^\\textbf\{(.*)\}&amp;quot;)
GREATER_PAT = re.compile(r&amp;quot;\\textgreater\{\}|\\textgreater&amp;quot;)
CURLY_PAT = re.compile(r&amp;quot;\{(.)\}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Here's the parser that breaks LaTeX into &lt;tt class="docutils literal"&gt;Block&lt;/tt&gt; instances:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BlockKind.BLANK  Blank lines between paragraphs.&lt;/li&gt;
&lt;li&gt;BlockKind.COMMENT: Line starting with &amp;quot;%&amp;quot;. Note that comments at the end of a line are treated as part of the text.
This is semantically wrong but syntactically lossless; it preserves the comment in an odd context.&lt;/li&gt;
&lt;li&gt;BlockKind.ENV: \begin{env}[options] -- \end{env}
This is not &lt;strong&gt;all&lt;/strong&gt; environments. It's only a short list of code sample environments.
These are {&amp;quot;quote&amp;quot;, &amp;quot;lstlisting&amp;quot;, &amp;quot;minted&amp;quot;, &amp;quot;codeblock&amp;quot;, &amp;quot;consoleblock&amp;quot;}.
The potential complication is an admonition environment (&lt;tt class="docutils literal"&gt;\\begin{tipbox}&lt;/tt&gt;) MAY contain
embedded code sample environments, but would not be found because we don't parse the full LaTeX tree.&lt;/li&gt;
&lt;li&gt;BlockKind.MATH: $$ to $$ block&lt;/li&gt;
&lt;li&gt;BlockKind.TEXTWITHMATH: Block of text with &amp;quot;$&amp;quot; in it somewhere.&lt;/li&gt;
&lt;li&gt;BlockKind.TEXT: blocks of text, possibly including commands of the form &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\\command[options]{stuff}&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://pylatexenc.readthedocs.io/en/latest/latexwalker/"&gt;https://pylatexenc.readthedocs.io/en/latest/latexwalker/&lt;/a&gt; for a possibly better approach.&lt;/p&gt;
&lt;p&gt;This flat expansion works here because we &lt;strong&gt;ONLY&lt;/strong&gt; want to distinguish code environments from non-code environments.
We don't really need the full parse tree.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def block_iter(text: str) -&amp;gt; Iterator[Block]:
    &amp;quot;&amp;quot;&amp;quot;
    Dirty hack lossless LaTeX parser. Treats LaTeX as if it were a flat tree of environments (and commands.)
    Ignores nested environments. Will not dig into lists, for example.
    Doesn't find all comments.
    Will be confused by verbatim in general, but not in most examples that aren't books about LaTeX
    &amp;quot;&amp;quot;&amp;quot;

    target_environs =  {&amp;quot;quote&amp;quot;, &amp;quot;lstlisting&amp;quot;, &amp;quot;minted&amp;quot;, &amp;quot;codeblock&amp;quot;, &amp;quot;consoleblock&amp;quot;}
    text_lines = []
    line_iter = iter(text.splitlines())
    for line in line_iter:
        if len(line) == 0:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.BLANK, [&amp;quot;&amp;quot;])
        elif (comment := COMMENT_PAT.match(line)) and comment:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.COMMENT, [line])
        elif (start := ENV_BEGIN_PAT.match(line)) and start and start.group(1) in target_environs:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            body_lines = [line]
            for body in line_iter:
                body_lines.append(body)
                if (end := ENV_END_PAT.match(body)) and end and end.group(1) == start.group(1):
                    break
            yield Block(BlockKind.ENV, body_lines)
        elif (math := MATH_ENV_PAT.match(line)) and math:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            body_lines = [line]
            for body in line_iter:
                body_lines.append(body)
                if body.strip() == &amp;quot;$$&amp;quot;:
                    break
            yield Block(BlockKind.MATH, body_lines)
        elif &amp;quot;$&amp;quot; in line:  # TODO: must be unescaped and outside \verb
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.TEXTWITHMATH, [line])
        else:
            # Accumulate a block
            text_lines.append(line)
    if text_lines:
        # End any final block
        yield Block(BlockKind.TEXT, text_lines)
&lt;/pre&gt;
&lt;p&gt;Once we have the sequence of blocks, we can tweak the various code sample blocks.&lt;/p&gt;
&lt;p&gt;Because the parsing is lossless, we can reconstruct a modified LaTeX document,
as long we nothing too weird is going on inside &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\\verbatim|...|&lt;/span&gt;&lt;/tt&gt; blocks.&lt;/p&gt;
&lt;p&gt;This worked well-enough to -- reliably -- pull all the code samples out of the text.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-iii"&gt;
&lt;h2&gt;Automation III&lt;/h2&gt;
&lt;p&gt;New book in the works.&lt;/p&gt;
&lt;p&gt;Two key alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Write all the examples and use minted to pull lines of code from the example files.&lt;/li&gt;
&lt;li&gt;Recapitulate the previous book's unique approach to example labels, and injection into specific contexts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This book has a distinct focus, however. There isn't as much code.
it doesn't seem to be essential for the code to be copy-and-paste complete.&lt;/p&gt;
&lt;p&gt;Further, it doesn't seem helpful to provide doctest-like examples.
The book is for a more advanced audience.&lt;/p&gt;
&lt;p&gt;What I'm could try to do is locate all of the code examples in a corpus of code files.
Then I can gingerly switch out actual code for a reference to lines in a code file.&lt;/p&gt;
&lt;p&gt;That seems easier to live with.&lt;/p&gt;
&lt;p&gt;If I need to change the code, I fix the corpus of code files, and rerun the test suite.
If the example's line numbers changed, fiddle with the LaTeX a little to get the right lines into the book.&lt;/p&gt;
&lt;p&gt;The downside of doing this is the corpus of code files become a first-class part of the book's
source. It lives side-by-side with images and LaTeX files.&lt;/p&gt;
&lt;p&gt;Some more thinking required before I finally make a commitment.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="writing"></category><category term="workflow"></category></entry><entry><title>EDI Message Parsing</title><link href="https://slott56.github.io/2023_03_17-edi_message_parsing.html" rel="alternate"></link><published>2023-03-17T08:00:00-04:00</published><updated>2023-03-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-03-17:/2023_03_17-edi_message_parsing.html</id><summary type="html">&lt;p&gt;Reaching back to 2008. Yes. Decade(s) ago. Python 2.5.&lt;/p&gt;
&lt;p&gt;I was reminded of this when a former colleague
pinged me about this: &lt;a class="reference external" href="https://github.com/slott56/TigerShark"&gt;https://github.com/slott56/TigerShark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's an X12/EDI message parsing library from -- well -- decades ago.&lt;/p&gt;
&lt;div class="section" id="what-is-all-this-about"&gt;
&lt;h2&gt;What is all this about?&lt;/h2&gt;
&lt;p&gt;Short answer: Parsing X12 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Reaching back to 2008. Yes. Decade(s) ago. Python 2.5.&lt;/p&gt;
&lt;p&gt;I was reminded of this when a former colleague
pinged me about this: &lt;a class="reference external" href="https://github.com/slott56/TigerShark"&gt;https://github.com/slott56/TigerShark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's an X12/EDI message parsing library from -- well -- decades ago.&lt;/p&gt;
&lt;div class="section" id="what-is-all-this-about"&gt;
&lt;h2&gt;What is all this about?&lt;/h2&gt;
&lt;p&gt;Short answer: Parsing X12 EDI messages, which have an obscure-as-hell structure.&lt;/p&gt;
&lt;p&gt;Long Answer: EDI (Electronic Data Interchange) is a way
for business enterprises and government agencies to exchange
data in well-defined formats. See &lt;a class="reference external" href="https://www.edibasics.com/what-is-edi/"&gt;https://www.edibasics.com/what-is-edi/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It sounds so simple and generic. It's so old, it predates
HTML, XML, JSON, etc. Therefore, the formats are -- well -- weird.&lt;/p&gt;
&lt;p&gt;There's a &amp;quot;standard&amp;quot;, X12, that defines these messages.
See &lt;a class="reference external" href="https://x12.org"&gt;https://x12.org&lt;/a&gt;. See &lt;a class="reference external" href="https://www.stedi.com/edi/x12"&gt;https://www.stedi.com/edi/x12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But. The exchange of message used to be done through proprietary networks
and software. Therefore the compliance with the standard
is sometimes incomplete. (Remember, this is &lt;strong&gt;old&lt;/strong&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-in-the-day"&gt;
&lt;h2&gt;Back In The Day&lt;/h2&gt;
&lt;p&gt;Some history&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_12-python_as_config_language_forget_xml_and_ini_files.html"&gt;Python as Config Language -- Forget XML and INI files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_19-two_python_config_file_design_patterns.html"&gt;Two Python Config-File Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_26-configuration_file_scalability_who_knew_revised.html"&gt;Configuration File Scalability -- Who Knew? (Revised)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_03_08-technical_debt_the_cost_of_cheap_and_get_this_done_acap.html"&gt;Technical Debt, the Cost of Cheap and &amp;quot;Get This Done ACAP&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_03_31-synchronicity_and_document_object_models.html"&gt;Synchronicity and Document Object Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_04_01-popo_and_gops_plain_old_python_objects_and_good_old_python_syntax.html"&gt;POPO and GOPS - Plain Old Python Objects and Good Old Python Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote an X12 parser in Python.&lt;/p&gt;
&lt;p&gt;It transforms X12 text into Plain Old Python Objects (POPO.)&lt;/p&gt;
&lt;p&gt;Back in the day (2008) this was targeted for Python 2.5.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-time"&gt;
&lt;h2&gt;It's Time&lt;/h2&gt;
&lt;p&gt;Nowadays, this is does &lt;strong&gt;not&lt;/strong&gt; need to be quite so complicated.&lt;/p&gt;
&lt;p&gt;Modern Python has a few changes since release 2.5.
Two are central to this project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;type annotations&lt;/li&gt;
&lt;li&gt;classes maintain the order of the definitions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the backbone of &lt;a class="reference external" href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclasses&lt;/a&gt; (and &lt;a class="reference external" href="https://docs.pydantic.dev"&gt;pydantic&lt;/a&gt; and &lt;a class="reference external" href="https://www.attrs.org/en/stable/"&gt;attrs&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;I believe there are two parts to the rewrite.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create dataclass-like class definition for segments and loops. These generally come from the non-Python configuration files used elsewhere. The Python is built from this. Once.&lt;/li&gt;
&lt;li&gt;Create a generic parser protocol that can extract the segments, loops, and atomic fields from the X12 messages. This becomes a superclass feature of all X12 components.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This should be much simpler than the old version. Which was &lt;strong&gt;very&lt;/strong&gt; complicated.
The old release had two levels of interpretation of the X12 content:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generic segments and loops&lt;/li&gt;
&lt;li&gt;A Pythonic &lt;strong&gt;Façade&lt;/strong&gt; over the generic structure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think this was (and continues to be) a bad idea.&lt;/p&gt;
&lt;p&gt;(Progress will be flaky. I have a book to write, also.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-things-first"&gt;
&lt;h2&gt;First Things First&lt;/h2&gt;
&lt;p&gt;Some updates to reflect Python 3.11 and better GitHub practices.
I'll make the documentation more visible as a first step.
I may rewrite the diagrams to PlantUML, also.&lt;/p&gt;
&lt;p&gt;Just a few small cleanups before throwing the entire
thing away and beginning again.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="data structure"></category><category term="algorithm"></category><category term="edi"></category><category term="x12"></category></entry><entry><title>Programming Languages -- In Time Order</title><link href="https://slott56.github.io/2023_02_21-programming_languages.html" rel="alternate"></link><published>2023-02-21T08:00:00-05:00</published><updated>2023-02-21T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-21:/2023_02_21-programming_languages.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html"&gt;Programming Languages I've Learned (more-or-less in order) [Update]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This came up on Twitter and Fosstodon.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943"&gt;https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943&lt;/a&gt;
and &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56/109908527412493172"&gt;https://fosstodon.org/&amp;#64;slott56/109908527412493172&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I omitted a few things from the list because -- well -- there are a LOT of languages.&lt;/p&gt;
&lt;p&gt;For example, in the 90's I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html"&gt;Programming Languages I've Learned (more-or-less in order) [Update]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This came up on Twitter and Fosstodon.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943"&gt;https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943&lt;/a&gt;
and &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56/109908527412493172"&gt;https://fosstodon.org/&amp;#64;slott56/109908527412493172&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I omitted a few things from the list because -- well -- there are a LOT of languages.&lt;/p&gt;
&lt;p&gt;For example, in the 90's I got really good at using Awk.
Just before I learned Perl, which (at the time) was almost -- but not quite -- better.&lt;/p&gt;
&lt;p&gt;Recently, I've grown to like Gherkin at lot.
See &lt;a class="reference external" href="https://cucumber.io/docs/gherkin/reference/"&gt;https://cucumber.io/docs/gherkin/reference/&lt;/a&gt;.
The language is sometimes called cucumber, but that's incorrect.
Cucumber is one (of many) tools that process Gherkin.&lt;/p&gt;
&lt;p&gt;I also need to add Markdown, ReStructuredText, and LaTeX to the long
list of markup languages I know.&lt;/p&gt;
&lt;p&gt;I should probably extract JSON, YAML, and TOML into a separate category.
They don't properly qualify as markup languages.&lt;/p&gt;
&lt;p&gt;What's central here is the idea of choosing a single language.&lt;/p&gt;
&lt;p&gt;The question shows up: &amp;quot;What's the most important programming language that will land me a job?&amp;quot;
Or &amp;quot;... land me a better job?&amp;quot;&lt;/p&gt;
&lt;p&gt;I remember -- back in the 70's -- being told that programming languages come and go.
That's why the undergrad CS degree program only requires a few 1-credit courses in a language.
They were considered far, far less important that data structures and algorithms, which really
are timeless and eternal features of computing.&lt;/p&gt;
&lt;p&gt;It's still true.&lt;/p&gt;
&lt;p&gt;Some hiring managers look for folks with specific technical skills,
as if that matters.&lt;/p&gt;
&lt;p&gt;Smarter hiring managers look for folks who learn skills quickly,
are quick to adapt, and share their knowledge widely.&lt;/p&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="building skills"></category><category term="learning"></category><category term="programming languages"></category></entry><entry><title>New Monitor</title><link href="https://slott56.github.io/2023_02_18-new_monitor.html" rel="alternate"></link><published>2023-02-18T08:00:00-05:00</published><updated>2023-02-18T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-18:/2023_02_18-new_monitor.html</id><summary type="html">&lt;p&gt;The (almost) 10-year old 27&amp;quot; Thunderbolt display finally died.&lt;/p&gt;
&lt;p&gt;Well, it didn't really &lt;strong&gt;die&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Thunderbolt connector had gotten impossibly flaky.
If I looked at it wrong, the monitor glitched or disonnected.&lt;/p&gt;
&lt;p&gt;It was dead enough that I wasn't going to deal with it.&lt;/p&gt;
&lt;p&gt;It involved this morass of adapters …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The (almost) 10-year old 27&amp;quot; Thunderbolt display finally died.&lt;/p&gt;
&lt;p&gt;Well, it didn't really &lt;strong&gt;die&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Thunderbolt connector had gotten impossibly flaky.
If I looked at it wrong, the monitor glitched or disonnected.&lt;/p&gt;
&lt;p&gt;It was dead enough that I wasn't going to deal with it.&lt;/p&gt;
&lt;p&gt;It involved this morass of adapters:&lt;/p&gt;
&lt;img alt="Two Connectors" src="https://slott56.github.io/media/IMG_0765.png" /&gt;
&lt;p&gt;(Try to ignore the dust. That's been fixed, too.)&lt;/p&gt;
&lt;p&gt;The top one is a USB-C to Thunderbolt adapter.
You can't quite make out the wrap of tape where the wiring
insulation started falling apart.&lt;/p&gt;
&lt;p&gt;The bottom one (with the blue tape) adapts the monitor's ancient MagSafe charging to
a modern USB-C port.&lt;/p&gt;
&lt;p&gt;These two merge into a single, heavy cable.&lt;/p&gt;
&lt;p&gt;I bought a repair kit with a whole new wiring harness.&lt;/p&gt;
&lt;p&gt;It's not &lt;strong&gt;impossible&lt;/strong&gt; to do. Indeed, it looks like it might be fun.&lt;/p&gt;
&lt;blockquote&gt;
I took an old iMac (same physical case) apart to retrieve the internal hard drive.
It wasn't impossible to get at the various pieces.&lt;/blockquote&gt;
&lt;p&gt;The problem is that I'd still be looking at a stack of adapters.
And the resulting reliability issue of bumping the MagSafe connection.&lt;/p&gt;
&lt;div class="section" id="a-better-choice"&gt;
&lt;h2&gt;A Better Choice&lt;/h2&gt;
&lt;p&gt;Instead of limping along, I replaced it with the 24&amp;quot; LG TV. (Check Apple's on-line store for &lt;a class="reference external" href="https://www.apple.com/shop/product/HMUA2VC/A/lg-ultrafine-4k-display"&gt;specifics&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Brighter. Better sound. Adjustable height.&lt;/p&gt;
&lt;p&gt;One connector from TV to Mac (instead of two.) No Adapters.&lt;/p&gt;
&lt;p&gt;There are three USB-C ports on the back of the moitor. Places to plug chargers for keyboards or trackpads or whatever.&lt;/p&gt;
&lt;p&gt;This means I can leave a backup drive hanging off the back of the monitor. Backs up whenever I'm using this desk.&lt;/p&gt;
&lt;p&gt;No camera, though. Experimenting with iPhone as Zoom camera. May need
a bracket to position the camera up at face level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-disposition"&gt;
&lt;h2&gt;Final Disposition&lt;/h2&gt;
&lt;p&gt;The next step is to put some notices out on local services
web sites (i.e. &lt;a class="reference external" href="https://www.craigslist.org"&gt;https://www.craigslist.org&lt;/a&gt;) to see
who might want this &amp;quot;works, but...&amp;quot; monitor.&lt;/p&gt;
&lt;p&gt;I'm not happy taking to the landfill, because it works.
It will include with the unused repair kit and the adapters.
It just needs a hair more attention to detail than I can
manage.&lt;/p&gt;
&lt;p&gt;Much happier meeting someone by the library to hand it off.&lt;/p&gt;
&lt;p&gt;Back to writing. Making good progress on the new book.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="hardware"></category><category term="macosx"></category><category term="macintosh"></category><category term="work-life"></category><category term="writing"></category></entry><entry><title>Python Confusion</title><link href="https://slott56.github.io/2023_02_07-python_confusion.html" rel="alternate"></link><published>2023-02-07T08:00:00-05:00</published><updated>2023-02-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-07:/2023_02_07-python_confusion.html</id><summary type="html">&lt;p&gt;For social contact, I'm generally following people on &lt;a class="reference external" href="https://fosstodon.org/home"&gt;https://fosstodon.org/home&lt;/a&gt;.
I'm &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56"&gt;https://fosstodon.org/&amp;#64;slott56&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or &lt;cite&gt;&amp;#64;slott56&amp;#64;fosstodon.org &amp;lt;https://fosstodon.org/&amp;#64;slott56&amp;gt;&lt;/cite&gt; as they say in the Fediverse.&lt;/p&gt;
&lt;p&gt;But I saw some stuff on Twitter that was disheartening.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought Python🐍wasn't strongly typed.🤔
But this code …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;For social contact, I'm generally following people on &lt;a class="reference external" href="https://fosstodon.org/home"&gt;https://fosstodon.org/home&lt;/a&gt;.
I'm &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56"&gt;https://fosstodon.org/&amp;#64;slott56&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or &lt;cite&gt;&amp;#64;slott56&amp;#64;fosstodon.org &amp;lt;https://fosstodon.org/&amp;#64;slott56&amp;gt;&lt;/cite&gt; as they say in the Fediverse.&lt;/p&gt;
&lt;p&gt;But I saw some stuff on Twitter that was disheartening.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought Python🐍wasn't strongly typed.🤔
But this code seems to be casting input into an int?&lt;/p&gt;
&lt;p&gt;✅guess = int(input(&amp;quot;Pick a number: &amp;quot;))&lt;/p&gt;
&lt;p&gt;The ugliness of all the round brackets aside, why
does this need to be cast into an int?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh dear.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python &lt;em&gt;is&lt;/em&gt; strongly typed.  Variables don't have a type associated with them, so we say that variable types are dynamic. Object types are essentially immutable.&lt;/li&gt;
&lt;li&gt;It's not a &amp;quot;cast&amp;quot;. It's a conversion. You can't cast objects to another type in Python. Types are essentially immutable.&lt;/li&gt;
&lt;li&gt;The &amp;quot;cast to an int&amp;quot; is really &amp;quot;converted to an int&amp;quot; and that's required because the string value from the &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; is likely useless later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without more code, it's hard to know why the conversion is required.
I'm willing to guess there's comparisons against integers elsewhere,
and therefore, this conversion from string to int will make those
later comparisons work.&lt;/p&gt;
&lt;p&gt;Some of the responses to the tweet were a bit off. I have
the urge to enumerate the problems, but that's likely to be unhelpful.&lt;/p&gt;
&lt;p&gt;(I say types are &lt;em&gt;essentially&lt;/em&gt; immutable because I have a vague
feeling that it's possible to around some of the dunder attributes
for some kinds of classes and change the association between
object and creating class. I have not investigated this
because the horror of casting in C, C++, Java, etc., is so emotionally
scarring that I can't even.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>Book Offers</title><link href="https://slott56.github.io/2023_02_03-book_offers.html" rel="alternate"></link><published>2023-02-03T08:48:00-05:00</published><updated>2023-02-03T08:48:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-03:/2023_02_03-book_offers.html</id><summary type="html">&lt;div class="section" id="packt-publishing"&gt;
&lt;h2&gt;Packt Publishing&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much newness here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="packt-publishing"&gt;
&lt;h2&gt;Packt Publishing&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much newness here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h3&gt;Unlearning SQL&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h2&gt;Google Play&lt;/h2&gt;
&lt;p&gt;Also available on Google Play. Here's &lt;strong&gt;Unlearning SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Link Rot and Editing</title><link href="https://slott56.github.io/2023_01_17-link_rot_and_editing.html" rel="alternate"></link><published>2023-01-17T08:00:00-05:00</published><updated>2023-01-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-17:/2023_01_17-link_rot_and_editing.html</id><summary type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html"&gt;Finished Moving: Lessons Learned&lt;/a&gt;
link rot is real.&lt;/p&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I've got 23 ancient (2004 to 2006, ancient) posts
with clearly broken links. These are easy to identify
because the service vanished years ago.&lt;/p&gt;
&lt;p&gt;The tricky part is figuring out of there's any
content worth preserving. In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html"&gt;Finished Moving: Lessons Learned&lt;/a&gt;
link rot is real.&lt;/p&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I've got 23 ancient (2004 to 2006, ancient) posts
with clearly broken links. These are easy to identify
because the service vanished years ago.&lt;/p&gt;
&lt;p&gt;The tricky part is figuring out of there's any
content worth preserving. In many cases, the blog
post was really an extended response to someone's forum
question.&lt;/p&gt;
&lt;p&gt;If I can recall the back-story, the blog post may be
of some interest. If I can't recall the context, then,
I'll need to delete it.&lt;/p&gt;
&lt;p&gt;First, however, I've got a book outline and schedule to
finish.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="markup"></category><category term="rst"></category></entry><entry><title>Finished Moving: Lessons Learned</title><link href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html" rel="alternate"></link><published>2023-01-10T08:00:00-05:00</published><updated>2023-01-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-10:/2023_01_10-finished_moving_lessons_learned.html</id><summary type="html">&lt;p&gt;Moved everything from blogger.com to &amp;quot;here&amp;quot; (&lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What did I learn?&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use WYSIWYG editors. Always use plain text markup.&lt;/li&gt;
&lt;li&gt;Think about your categories and tags.&lt;/li&gt;
&lt;li&gt;Links rot.&lt;/li&gt;
&lt;li&gt;Have a data model and tooling to process entries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;Back in the early '00's (up to …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Moved everything from blogger.com to &amp;quot;here&amp;quot; (&lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What did I learn?&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use WYSIWYG editors. Always use plain text markup.&lt;/li&gt;
&lt;li&gt;Think about your categories and tags.&lt;/li&gt;
&lt;li&gt;Links rot.&lt;/li&gt;
&lt;li&gt;Have a data model and tooling to process entries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;Back in the early '00's (up to 2003 or so) blogging
was &lt;strong&gt;Rocket Science&lt;/strong&gt;. Consider that &lt;a class="reference external" href="https://boingboing.net"&gt;https://boingboing.net&lt;/a&gt; started
to be an online blog in January 2000.&lt;/p&gt;
&lt;p&gt;Back then, you needed hosting. And blogging software.&lt;/p&gt;
&lt;p&gt;Hosting wasn't as easy as signing up with &lt;a class="reference external" href="https://www.a2hosting.com"&gt;https://www.a2hosting.com&lt;/a&gt;.
A2 hosting didn't exist until 2001. Back then it was complicated and expensive.
Not for the faint of heart.&lt;/p&gt;
&lt;p&gt;Apple offered iBlog which they would host for you on one of their domains like &lt;a class="reference external" href="http://homepage.mac.com"&gt;http://homepage.mac.com&lt;/a&gt; or some such.
See &lt;a class="reference external" href="https://slott56.github.io/2003_11_15-iblog.html"&gt;iBlog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Big. Mistake. (See &lt;a class="reference internal" href="#big-mistakes"&gt;Big Mistakes&lt;/a&gt;, below.)&lt;/p&gt;
&lt;p&gt;From about 2004 to 2006 (maybe)
there was  service called &amp;quot;Bloki&amp;quot;, which offered blogging and forum capabilities.
That was super-helpful because you could edit on-line.&lt;/p&gt;
&lt;p&gt;Big.  Mistake. (See &lt;a class="reference internal" href="#big-mistakes"&gt;Big Mistakes&lt;/a&gt;, below.)&lt;/p&gt;
&lt;p&gt;By 2008, iBlog had run its course.
See &lt;a class="reference external" href="https://slott56.github.io/2008_03_19-iblog_buggy_since_leopards_release_no_fixes_in_sight.html"&gt;iBlog Buggy... Since Leopard's release... No fixes in sight.&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By 2009, it appears that I must have consolidated my content onto &lt;a class="reference external" href="https://blogspot.com"&gt;https://blogspot.com&lt;/a&gt;.
Which got merged with &lt;a class="reference external" href="https://blogger.com"&gt;https://blogger.com&lt;/a&gt; at some point later in life.
(It's hard to tell, but there were blogspot references scattered through
the internal links.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-move"&gt;
&lt;h2&gt;Why Move?&lt;/h2&gt;
&lt;p&gt;If &lt;a class="reference external" href="https://blogger.com"&gt;https://blogger.com&lt;/a&gt; isn't &lt;strong&gt;broken&lt;/strong&gt;, why change?&lt;/p&gt;
&lt;p&gt;There aren't any &lt;strong&gt;good&lt;/strong&gt; reasons. Only a few weak reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I have a personal blog, which is &lt;strong&gt;not&lt;/strong&gt; on blogger.
It, too, had a long, complex history that went from
Apple's iWeb to Sandvox until Sandvox stopped working,
forcing me to consolidate into &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;https://itmaybeahack.com/TeamRedCruising2/index.html&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I had been following some folks who were starting blogs,
and they didn't like &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;.
They seemed to really like did like &lt;a class="reference external" href="https://gohugo.io"&gt;Hugo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In researching Hugo, I found out about how &lt;a class="reference external" href="https://github.io"&gt;https://github.io&lt;/a&gt; can
host content, like a blog, with relatively little real work.
Mostly &lt;tt class="docutils literal"&gt;git commit&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;I'm over on-line editing. I'm retired, living on a boat,
and I travel a lot. I need to edit off-line.
Creating and staging blog posts for the future
is fun, but requires me to save notes, and then create posts
when I have connectivity, staging them for future release.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These add up to &amp;quot;move to &lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="big-mistakes"&gt;
&lt;h2&gt;Big Mistakes&lt;/h2&gt;
&lt;p&gt;There was one big mistake that manifested itself two ways.&lt;/p&gt;
&lt;p&gt;WYSIWYG -- What You See Is What You Get.&lt;/p&gt;
&lt;p&gt;Some secondary mistakes involve the way that blogger lacked
categories. It was &amp;quot;simply&amp;quot; a list of posts.&lt;/p&gt;
&lt;p&gt;Finally, I needed to address &amp;quot;link rot&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wysiwyg-is-evil"&gt;
&lt;h2&gt;WYSIWYG Is Evil&lt;/h2&gt;
&lt;p&gt;Any purely visual editor is a burning dumpster fire
of weirdly inconsistent content that happens to look
right, but is actually wrong.&lt;/p&gt;
&lt;p&gt;Writing involves three separate issues:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The words chosen.&lt;/li&gt;
&lt;li&gt;The semantics of the words.&lt;/li&gt;
&lt;li&gt;The presentation to highlight the semantics.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, we write &lt;tt class="docutils literal"&gt;code&lt;/tt&gt; in a distinct font.
The word &lt;tt class="docutils literal"&gt;code&lt;/tt&gt; has distinct semantics, it's in a programming
language, and gets a distinct font to reveal that.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;emphasize&lt;/strong&gt; things with a style change. We might write foreign &lt;em&gt;words&lt;/em&gt; or &lt;em&gt;phrases&lt;/em&gt; in a separate style.&lt;/p&gt;
&lt;p&gt;In some cases, we're forced to overload styles.
We might use &lt;strong&gt;bold&lt;/strong&gt; for an &lt;strong&gt;AOA&lt;/strong&gt; (Abbreviation or Acronym).
And we also use it for &lt;strong&gt;emphasis&lt;/strong&gt; and for &lt;strong&gt;Chapter Titles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;HTML has many semantic categories available as markup.
We can use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;abbr&amp;gt;ABBR&amp;lt;/abbr&amp;gt;&lt;/span&gt;&lt;/tt&gt; to denote an abbreviation.
The style sheet may render this in bold (or not, maybe in &lt;span class="text-danger"&gt;red&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;Here's the problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;WYSIWYG editors conceal the semantics, and only reveal the markup.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;While it's not impossible to check semantics, it's hard.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;bold&lt;/strong&gt; something and it looks fine.&lt;/p&gt;
&lt;p&gt;But it should have been a Section Heading, not simply bold.&lt;/p&gt;
&lt;p&gt;You can't tell.&lt;/p&gt;
&lt;p&gt;Offline editors and proprietary file formats exacerbate
the problem. The content is very difficult to recover.&lt;/p&gt;
&lt;p&gt;In Apple's case, the files were all XML and could
be read.&lt;/p&gt;
&lt;p&gt;Newer products use Snappy compression and Protobuf,
which is relentlessly evil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="categories-are-hard"&gt;
&lt;h2&gt;Categories Are Hard&lt;/h2&gt;
&lt;p&gt;The iBlog posts had categories.&lt;/p&gt;
&lt;p&gt;The Blogspot/Blogger posts didn't have categories.&lt;/p&gt;
&lt;p&gt;I think categories are useful.&lt;/p&gt;
&lt;p&gt;Now what?&lt;/p&gt;
&lt;p&gt;I have to categorize about 1,000 blog posts.&lt;/p&gt;
&lt;p&gt;This becomes a kind of K-nn problem. Locate the
tags and find the most popular category.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="link-rot"&gt;
&lt;h2&gt;Link Rot&lt;/h2&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I'm not going to use the Wayback Machine (&lt;a class="reference external" href="https://web.archive.org"&gt;https://web.archive.org&lt;/a&gt;)
to locate the old content.&lt;/p&gt;
&lt;p&gt;Instead I'm going to (eventually) flag broken links.&lt;/p&gt;
&lt;p&gt;In some cases, I'll probably delete the whole blog entry
because it's aged to the point of irrelevance.&lt;/p&gt;
&lt;p&gt;After a ton of work, I found 19 old blogspot
URL's that I didn't know about. I have a link
converted app that I can update to handle these the
way I handled hundreds of more visible problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tooling"&gt;
&lt;h2&gt;Tooling&lt;/h2&gt;
&lt;p&gt;Some old iBlog entries were in XML.
I converted these to RST without exposing
an intermediate data model. Not good.&lt;/p&gt;
&lt;p&gt;The blogger posts were exported in ATOM notation,
a distinct XML format.&lt;/p&gt;
&lt;p&gt;What's common?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Feed:
    ...

class Entry:
    ...

class Post(Entry):
    ...

class Page(Entry):
    ...
&lt;/pre&gt;
&lt;p&gt;A model like this lets a feed contain entries.&lt;/p&gt;
&lt;p&gt;This unified model can be parsed from RST or XML,
and then small scripts (and Jupyter notebooks)
can tweak the content to make it consistent.&lt;/p&gt;
&lt;p&gt;And, no, I doubt I'll publish any of the tools
I used. It was all one-time hackery.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="markup"></category><category term="rst"></category></entry><entry><title>DZone's lack of a Python Zone</title><link href="https://slott56.github.io/2023_01_03-dzones_lack_of_a_python_zone.html" rel="alternate"></link><published>2023-01-03T10:00:00-05:00</published><updated>2023-01-03T10:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-03:/2023_01_03-dzones_lack_of_a_python_zone.html</id><summary type="html">&lt;p&gt;Check out DZone's Coding zone: &lt;a class="reference external" href="https://dzone.com/coding"&gt;https://dzone.com/coding&lt;/a&gt;. Hover over the
&amp;quot;Coding&amp;quot; drop-down menu.&lt;/p&gt;
&lt;p&gt;Notice anything lacking?&lt;/p&gt;
&lt;p&gt;I'll give you a hint: Python.&lt;/p&gt;
&lt;p&gt;They have &amp;quot;Frameworks&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;Javascript&amp;quot;, &amp;quot;Languages&amp;quot; and &amp;quot;Tools&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Languages&amp;quot; seems to be general programming, and the posts include
Java, JavaScript and numerous other languages.&lt;/p&gt;
&lt;p&gt;Let's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out DZone's Coding zone: &lt;a class="reference external" href="https://dzone.com/coding"&gt;https://dzone.com/coding&lt;/a&gt;. Hover over the
&amp;quot;Coding&amp;quot; drop-down menu.&lt;/p&gt;
&lt;p&gt;Notice anything lacking?&lt;/p&gt;
&lt;p&gt;I'll give you a hint: Python.&lt;/p&gt;
&lt;p&gt;They have &amp;quot;Frameworks&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;Javascript&amp;quot;, &amp;quot;Languages&amp;quot; and &amp;quot;Tools&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Languages&amp;quot; seems to be general programming, and the posts include
Java, JavaScript and numerous other languages.&lt;/p&gt;
&lt;p&gt;Let's look at the evidence, shall we?&lt;/p&gt;
&lt;p&gt;## Python Trending&lt;/p&gt;
&lt;p&gt;Here's some evidence.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://statisticstimes.com/tech/top-computer-languages.php"&gt;https://statisticstimes.com/tech/top-computer-languages.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.infoworld.com/article/3669232/python-popularity-still-soaring.html"&gt;https://www.infoworld.com/article/3669232/python-popularity-still-soaring.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.tiobe.com/tiobe-index/"&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypl.github.io/PYPL.html"&gt;https://pypl.github.io/PYPL.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And yes, the last two are summarized by the first one.&lt;/p&gt;
&lt;p&gt;The Bottom Line?&lt;/p&gt;
&lt;p&gt;Python has grown to be the most popular programming language.
It has edge ahead of Java, C, and C++.&lt;/p&gt;
&lt;p&gt;This isn't a new thing. See this from StackOverflow back in 2017.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/"&gt;https://stackoverflow.blog/2017/09/06/incredible-growth-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks looked at the growth curve back in 2017 and concluded the increase in interest
on StackOverflow was due to the language being so hard to
learn and use that lots of people had questions.&lt;/p&gt;
&lt;p&gt;A simpler conclusion is lots of people are using it.&lt;/p&gt;
&lt;p&gt;And the trend continued for five more years.&lt;/p&gt;
&lt;p&gt;## Why?&lt;/p&gt;
&lt;p&gt;Why is Python so popular?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's hard to say.&lt;/li&gt;
&lt;li&gt;It doesn't really matter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have some suspicions on why it's so popular.
In his Keynote at PyCon 2017, (&lt;a class="reference external" href="https://youtu.be/ZyjCqQEUa8o"&gt;https://youtu.be/ZyjCqQEUa8o&lt;/a&gt;)
Jake Vanderplas pointed out that scientists can
install Python, install Jupyter Lab, open a notebook,
download data, and start analyzing results immediately.&lt;/p&gt;
&lt;p&gt;The whole &amp;quot;getting started&amp;quot; process takes minutes,
and you're doing real science.&lt;/p&gt;
&lt;p&gt;As your skills mature, you can write cooler and better-engineered
software.&lt;/p&gt;
&lt;p&gt;All in Python.&lt;/p&gt;
&lt;p&gt;That's a compelling story.&lt;/p&gt;
&lt;p&gt;The other part of it is the response to the growth from publishers and web content providers.&lt;/p&gt;
&lt;p&gt;Years ago DZone reliably reposted my blog posts.
It was fun (for me) to get 1,000's of views.
They spent time curating Most Valuable Bloggers.
(&lt;a class="reference external" href="https://dzone.com/pages/mvb"&gt;https://dzone.com/pages/mvb&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I didn't actively participate because I had a day job
and was writing books, and couldn't do the kinds of
things DZone wanted from content creators.
(It was like taking on &lt;em&gt;another&lt;/em&gt; book.)&lt;/p&gt;
&lt;p&gt;I'm lightly invested in DZone's success in following this
trend. (If I was in the MVB program, I might be more heavily
invested. But I have books to write.)&lt;/p&gt;
&lt;p&gt;## DZone Response&lt;/p&gt;
&lt;p&gt;The structure of DZone's content leaves me with questions about the basis for the &amp;quot;Zones&amp;quot;. It can't be
popularity, since Java has slipped behind Python. Maybe there's some
other criteria; I wonder what they could be? Sponsorships? Or the
historical &amp;quot;Javalobby&amp;quot; web site?&lt;/p&gt;
&lt;p&gt;It also leaves me with the urge to suggest they radically rethink their
approach to content management. The &amp;quot;Zones&amp;quot; don't seem to have crisp
definitions. If they do have definitions, it might help to share them.
If they don't have a formal editorial policy on the zones,
perhaps they should be assigned more dynamically as content is reviewed
and included on the site. Perhaps there should be a zoning board?&lt;/p&gt;
&lt;p&gt;What's essential here is shfting DZone away from their historically
Java-centric view to embrace Python.&lt;/p&gt;
&lt;p&gt;Java can still be a prominent feature, but it needs to be put into
perspective. Python is large, and growing. Java is not quite as large,
and not growing as quickly.&lt;/p&gt;
&lt;p&gt;It's time for change.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="dzone"></category></entry><entry><title>Christmas Book Offers</title><link href="https://slott56.github.io/2022_12_20-christmas_book_offers.html" rel="alternate"></link><published>2022-12-20T11:00:00-05:00</published><updated>2022-12-20T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-20:/2022_12_20-christmas_book_offers.html</id><summary type="html">&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h3&gt;Unlearning SQL&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h2&gt;Google Play&lt;/h2&gt;
&lt;p&gt;Also available on Google Play. Here's &lt;strong&gt;Unlearning SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>On Algorithm Design</title><link href="https://slott56.github.io/2022_12_13-on_algorithm_design.html" rel="alternate"></link><published>2022-12-13T11:00:00-05:00</published><updated>2022-12-13T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-13:/2022_12_13-on_algorithm_design.html</id><summary type="html">&lt;p&gt;Some background: &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-faerie_dusttm.html"&gt;FAERIE DUST™&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html"&gt;Obstinate Idiocy, Expanded&lt;/a&gt;,
and even &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html"&gt;Permutations, Combinations and Frustrations&lt;/a&gt;.
I want to set up algorithm design as the diametric opposite of Obstinate
Stupidity. To do that, let's look at Obstinate Stupidity.&lt;/p&gt;
&lt;p&gt;The theme?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We did something wrong, and we don't want to fix it …&lt;/strong&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Some background: &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-faerie_dusttm.html"&gt;FAERIE DUST™&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html"&gt;Obstinate Idiocy, Expanded&lt;/a&gt;,
and even &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html"&gt;Permutations, Combinations and Frustrations&lt;/a&gt;.
I want to set up algorithm design as the diametric opposite of Obstinate
Stupidity. To do that, let's look at Obstinate Stupidity.&lt;/p&gt;
&lt;p&gt;The theme?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We did something wrong, and we don't want to fix it.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I emphasize this because it takes many forms. Another common variant is
&amp;quot;We can't afford to continue the way we are, but we can't afford the
time to fix it, either.&amp;quot; Sometimes, &amp;quot;Management wants this fixed, but we
don't have any budget.&amp;quot; You know how it is.&lt;/p&gt;
&lt;p&gt;The current go-round is someone who has an algorithm of intensely stupid
(and largely irrelevant) complexity. See &lt;a class="reference external" href="https://slott56.github.io/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html"&gt;My algorithm performs badly,
do I need
asyncio?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The situation is touchy. They have pre-reasoned an answer -- &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt;
-- and they're looking for (a) confirmation that they're obviously right
and (b) help rewriting something needlessly complex to somehow be faster
even when it's compute-bound. Specifically, they want Faerie Dust.&lt;/p&gt;
&lt;div class="section" id="frivolous-complexity"&gt;
&lt;h2&gt;Frivolous Complexity&lt;/h2&gt;
&lt;p&gt;How do I know it has needless, frivolous complexity?&lt;/p&gt;
&lt;p&gt;Here are two symptoms.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The problem has a lot of context. In thise case, there's a hierarchy.
The hierarchy may seem irrelevant, but it has this mind-numbingly
complex back-story, that they can't seem to ignore or abstract out of
the essential problem. There's a (large) number of details that don't
really explain what the hierarchy means or why it has to be
preserved. but somehow make it essential.&lt;/li&gt;
&lt;li&gt;The problem can only be described by repeating the legacy algorithm.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's dwell on this second symptom for a moment. We have two competing
issues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The legacy algorithm is too slow. AND,&lt;/li&gt;
&lt;li&gt;There's no other way to describe the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should make it clear they are looking at &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; as a kind of
Faerie Dust that will magically make the bad algorithm good. Without
fixing the bad algorithm.&lt;/p&gt;
&lt;p&gt;I want to emphasize the existence of details which can neither be
explained nor removed. The hierarchy must be there simply because it
must be there. Bizarre complications to walk the hierarchy are,
therefore, essential even if no one can explain them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="algorithm-design"&gt;
&lt;h2&gt;Algorithm Design&lt;/h2&gt;
&lt;p&gt;To actually improve the processing they need a new algorithm.&lt;/p&gt;
&lt;p&gt;I can't emphasize this enough: &lt;strong&gt;they need a new algorithm&lt;/strong&gt;. (This
often means a new data structure.)&lt;/p&gt;
&lt;p&gt;&amp;quot;Tuning&amp;quot; in any form is nothing more than nibbling around the edges to
make a bad algorithm run 15% faster.&lt;/p&gt;
&lt;p&gt;Rewriting may replace
&lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(2&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;)&lt;/span&gt; with &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;log&lt;i&gt;n&lt;/i&gt;)&lt;/span&gt;.
This would be dramatically better. From seconds to milliseconds. You know, 1,000% faster.&lt;/p&gt;
&lt;p&gt;There's a disciplined approach to this. Here are the steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write the post-condition for the processing as a whole.&lt;/li&gt;
&lt;li&gt;Write code that achieves the post-condition. (This may involve
decomposing the big problem into sub-problems, each of which is
approached by the same two-step process.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The intensely painful part of this is creating the post-condition.&lt;/p&gt;
&lt;p&gt;I suggested they &amp;quot;write an assert statement that must be true when the
algorithm has completed, and computed the right answer.&amp;quot;&lt;/p&gt;
&lt;p&gt;Hahahah.&lt;/p&gt;
&lt;p&gt;What an idiot I was.&lt;/p&gt;
&lt;p&gt;They didn't know how to write an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement. And at this
point, they stopped. Brick Wall. Dead in the water. Cannot proceed.
Done. Failed.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement has become the end-of-the-line. They can't (or
won't) do that. And they won't ask about it.&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Do you have a question?&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;I have to think before I can even begin to ask a question.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;How about think less and ask more. Do you have trouble writing the
word assert? What's stopping you?&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: [silence]&lt;/p&gt;
&lt;p&gt;Okay.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-conditions"&gt;
&lt;h2&gt;Post-Conditions&lt;/h2&gt;
&lt;p&gt;The post-condition is true when you're done. Let's look at my favorite,
M must be the maximum of A and B.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;B&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;This becomes an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement through (what seems to me, but boy
was I wrong) the following kind of translation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
assert M &amp;gt;= A and M &amp;gt;= B, f&amp;quot;Algorithm Failed {M=} {A=} {B=}&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Again, I acknowledge I was wrong to think
creating an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement from a post condition was in any way
clear. It's absolutely bewilderingly impossible.&lt;/p&gt;
&lt;p&gt;It's also important to note that the above condition is incomplete. The
value &lt;span class="formula"&gt;&lt;i&gt;M&lt;/i&gt; = &lt;i&gt;A&lt;/i&gt; + &lt;i&gt;B&lt;/i&gt;&lt;/span&gt; will also satisfy the condition. We need to test our
test cases to be sure they really do what we want.&lt;/p&gt;
&lt;p&gt;We really need to be more complete on what the domain of values for
&lt;span class="formula"&gt;&lt;i&gt;M&lt;/i&gt;&lt;/span&gt; is.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;M&lt;/i&gt; = &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; or &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; = &lt;i&gt;B&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;B&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;We could rewrite this slightly to be&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;M&lt;/i&gt; ∈ {&lt;i&gt;A&lt;/i&gt;, &lt;i&gt;B&lt;/i&gt;}&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;B&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;This version directly suggests a potential set comprehension to compute
the result:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
M = {m for m in {A, B} if m &amp;gt;= A and m &amp;gt;= B}.pop()
&lt;/pre&gt;
&lt;p&gt;This is the advantage of writing post-conditions. They often map to
code.&lt;/p&gt;
&lt;p&gt;You can even try it as pseudo-SQL if that helps you get past the
&lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SELECT M FROM (TABLE INT(X); A; B) WHERE M &amp;gt;= A AND M &amp;gt;= B
&lt;/pre&gt;
&lt;p&gt;I made up a &lt;tt class="docutils literal"&gt;TABLE INT(X); A; B&lt;/tt&gt; to describe a two-row table with
candidate solutions. I'm sure SQL folks have other sort of &amp;quot;interim
table&amp;quot; constructs they like.&lt;/p&gt;
&lt;p&gt;The point is to write down the final condition.&lt;/p&gt;
&lt;p&gt;I'll repeat that because the folks I was trying to work with refused to
understand the assert statement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write down the final condition&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-current-problem-s-post-condition"&gt;
&lt;h2&gt;The Current Problem's Post-Condition&lt;/h2&gt;
&lt;p&gt;The problem at hand seems to involve a result set, &lt;span class="formula"&gt;&lt;i&gt;R&lt;/i&gt;&lt;/span&gt;, pulled from
nodes of some hierarchy, &lt;span class="formula"&gt;&lt;i&gt;H&lt;/i&gt;&lt;/span&gt;, &lt;span class="formula"&gt;&lt;i&gt;R&lt;/i&gt; ⊆ &lt;i&gt;H&lt;/i&gt;&lt;/span&gt;. Each element of
the hierarchy, &lt;span class="formula"&gt;&lt;i&gt;h&lt;/i&gt; ∈ &lt;i&gt;H&lt;/i&gt;&lt;/span&gt; has a set of strings, &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;)&lt;/span&gt;. It
appears that a target string, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;&lt;/span&gt;, must be a member
of &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt; ∈ &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;), &lt;i&gt;r&lt;/i&gt; ∈ &lt;i&gt;R&lt;/i&gt;&lt;/span&gt;. I think.&lt;/p&gt;
&lt;p&gt;Note that the hierarchy is nothing more than a collection of identified
collections of strings. The parent-childness doesn't seem to matter for
the search algorithm. Within the result set, there's some importance to
the tier of the hierarchy, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;)&lt;/span&gt;, and a node from tier 1 means all
others are ignored or something. Can't be sure. (The endless backstory
on the hierarchy was little more than a review of the algorithm to query
it.)&lt;/p&gt;
&lt;p&gt;If any of this is true, it would be a fairly straightforward &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt; what could be parallelized with &lt;tt class="docutils literal"&gt;dask&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;concurrent.futures&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But we can't know if this really is the post-condition until someone in
a position to know writes the post-condition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-to-do"&gt;
&lt;h2&gt;Things To Do&lt;/h2&gt;
&lt;p&gt;The post-condition defines the results of test cases. The
&lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement becomes part of the pytest test cases. In a kind of
direct copy-and-paste process to shift from design aid to test result
condition.&lt;/p&gt;
&lt;p&gt;Currently, the algorithm they have seems to have no test cases. They
can't write a condition to describe correct answers, which suggests they
actually don't know what'a correct.&lt;/p&gt;
&lt;p&gt;If they wrote test cases, they might be able to
visualize an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement that confirms the test worked. Might.
It appears to be asking a lot to write test cases for the legacy
algorithm.&lt;/p&gt;
&lt;p&gt;Indeed, if they wrote a conditional expression that described the
results of any working example, they'd have taken giant steps toward the
necessary &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement. But that's asking a lot, it appears.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-then-what"&gt;
&lt;h2&gt;And Then What?&lt;/h2&gt;
&lt;p&gt;Once you have a target condition, you can then design code to satisfy
some (or all) of the target condition. &lt;a class="reference external" href="https://www.google.com/books/edition/A_Discipline_of_Programming/MsUmAAAAMAAJ?hl=en"&gt;Dijkstra's A Discipline of
Programming&lt;/a&gt;
has a thorough description of the &amp;quot;weakest precondition&amp;quot; operator. It
works like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Imagine a statement that might satisfy some or all of your
post-condition.&lt;/li&gt;
&lt;li&gt;Substitute the effect of the statement into the post-condition.&lt;/li&gt;
&lt;li&gt;What's left is the weakest pre-condition for that statement to work.
It's often the post-condition for a statement must precede the
statement you wrote.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You write the program from the desired post-condition moving forward
until you get a weakest pre-condition of True. Back to front. From goal
to initialization.&lt;/p&gt;
&lt;p&gt;Post-condition gives you statements. Statements have pre-conditions. You
iterate, writing conditions, statements, and more conditions.&lt;/p&gt;
&lt;p&gt;(You can also spot useless code because the pre-condition matches the
post-condition.)&lt;/p&gt;
&lt;p&gt;For the silly &amp;quot;maximum&amp;quot; problem?&lt;/p&gt;
&lt;p&gt;Try M := A as a statement. This only works if A &amp;gt;= B. That's the
pre-condition that is derived from substituting M = A into the
post-condition.&lt;/p&gt;
&lt;p&gt;Try M := B as a statement. This only works if B &amp;gt;= A. That's the
pre-condition that is derived from substituting M = B into the
post-condition.&lt;/p&gt;
&lt;p&gt;These two pre-conditions describe an if-elif statement.&lt;/p&gt;
&lt;p&gt;Note that this feels weirdly arbitrary and exploratory. It's a kind of
empiricism where we try statements and see if they're helpful. There
don't need to be any constraints. The post-condition is all that's
required to explore the space of statements that might work, or at least
might help.&lt;/p&gt;
&lt;p&gt;Of course, we're not stupid. And we're lazy. We don't search the
infinite space of statements. We can often imagine the statements
without a &lt;strong&gt;lot&lt;/strong&gt; of complex work. The formal weakest pre-condition
process is necessary to confirm our intuition. Or to assert that
something is free of astonishing side-effects.&lt;/p&gt;
&lt;p&gt;It all depends on one thing: a clear, formal statement of the
post-condition.&lt;/p&gt;
&lt;p&gt;Since I made the mistake of describing the post-condition as a line of
code, we've hit some kind of brick wall related to &amp;quot;I won't write code.&amp;quot;
Or &amp;quot;I don't want to be seen writing code.&amp;quot; or &amp;quot;I don't want you to
critique my code.&amp;quot;&lt;/p&gt;
&lt;p&gt;Dunno.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category><category term="Design Principles"></category><category term="asycnio"></category><category term="faerie dust"></category></entry><entry><title>My algorithm performs badly, do I need asyncio?</title><link href="https://slott56.github.io/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html" rel="alternate"></link><published>2022-12-06T11:00:00-05:00</published><updated>2022-12-06T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-06:/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html</id><summary type="html">&lt;p&gt;Real Question (somewhat abbreviated): &amp;quot;My algorithm performs badly, do I
need asyncio?&amp;quot;&lt;/p&gt;
&lt;p&gt;Short answer: No.&lt;/p&gt;
&lt;p&gt;Long answer: Sigh. No. Do you need a slap upside the head?&lt;/p&gt;
&lt;p&gt;Here's how it plays out:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We figured that if we 'parallelize' it, then we can apply multiple
cores, and it will run …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Real Question (somewhat abbreviated): &amp;quot;My algorithm performs badly, do I
need asyncio?&amp;quot;&lt;/p&gt;
&lt;p&gt;Short answer: No.&lt;/p&gt;
&lt;p&gt;Long answer: Sigh. No. Do you need a slap upside the head?&lt;/p&gt;
&lt;p&gt;Here's how it plays out:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We figured that if we 'parallelize' it, then we can apply multiple
cores, and it will run 4x as fast.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;What kind of I/O are you doing?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;None, really. It's compute-intensive.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Async is for I/O. A function can be computing while other functions
are waiting for I/O to complete.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Right. We can have lots of them, so they each get a core.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Listen, please. A function can be computing. That's &amp;quot;A&amp;quot;. Singular.
One. Take a step back from the asyncio package. What are you trying to
do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Make things faster.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Take a breath. Make &lt;em&gt;what&lt;/em&gt; faster?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;A slow algorithm.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Do you want to know what we're trying do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;First, we query the database to get categories. Then we query the
database to get details for the categories. Then we query the database
to organize the categories into a hierarchy. Except for certain
categories which are special. So we have if-statements to handle the
special cases.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's I/O intensive.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;That's not the part that's slow.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Context is important. I feel the need to describe all of the
background.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's trivia. It's as important as your mother's maiden name.
What's the problem?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;The problem is we don't know how to use asyncio to use multiple
cores.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Do you know how to divide by zero?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;No. It's absurd.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;We already talked about asyncio for compute-intensive processing.
Same level of absurd as dividing by zero. What are you trying to do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We have some for loops that compute a result slowly. We want to
parallelize them.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Every for statement that computes a collection is a generator
expression. Every generator expression can be made into a list, set, or
dictionary comprehension. Start there.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;But what if the for statement has a super-complex body with lots of
conditions?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Then you might have to take a step back and redesign the algorithm.
What does it do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;lt;code&amp;gt; &amp;quot;See all these for statements and if-statements?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;What does it do? What's the final condition?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;A set of valid answers.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Define valid.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;What do you mean? 'Define valid?' It's a set that's valid!&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Write a condition that defines whether or not a result set is
valid. Don't hand-wave, write the condition.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;That's impossible. The algorithm is too complex.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;How do you test this process? How do you create test data? How do
you know an answer it produces is correct?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q:&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's the fundamental problem. You need to have a well-defined
post-condition. Logic. An &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement that defines all correct
answers. From that you can work backwards into an algorithm. You may not
need parallelism; you may simply have a wrong data structure somewhere
in &amp;lt;code&amp;gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Can you point out the wrong data structure?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;What? Why won't you? You read the code, you can point out the
problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Do I have to do all the work?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category><category term="analysis"></category><category term="asyncio"></category><category term="concurrency"></category></entry><entry><title>Functional Programming and Finite State Automata (FSA)</title><link href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html" rel="alternate"></link><published>2022-11-29T11:00:00-05:00</published><updated>2022-11-29T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-29:/2022_11_29-functional_programming_and_finite_state_automata_fsa.html</id><summary type="html">&lt;p&gt;When I talk about functional programming in Python, folks like to look
for place where functional programming isn't appropriate. They latch
onto finite-state automata (FSA) because &amp;quot;state&amp;quot; of an automata doesn't
seem to fit with stateless objects used in functional programming.&lt;/p&gt;
&lt;p&gt;This is a false dichotomy.&lt;/p&gt;
&lt;p&gt;It's emphatically false in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I talk about functional programming in Python, folks like to look
for place where functional programming isn't appropriate. They latch
onto finite-state automata (FSA) because &amp;quot;state&amp;quot; of an automata doesn't
seem to fit with stateless objects used in functional programming.&lt;/p&gt;
&lt;p&gt;This is a false dichotomy.&lt;/p&gt;
&lt;p&gt;It's emphatically false in Python, where we don't have a purely
functional language.&lt;/p&gt;
&lt;p&gt;(In a purely functional language, monads can help make FSA's behave
properly and avoid optimization. The use of a recursion to consume an
iterable and make state transitions is sometimes hard to visualize. We
don't have these constraints.)&lt;/p&gt;
&lt;p&gt;Let's look at a trivial kind of FSA: the parity computation. We want to
know how many 1-bits are in a given value. Step 1 is to expand an
integer into bits.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def bits(n: int) -&amp;gt; Iterable[int]:
    if n &amp;lt; 0:
        raise ValueError(f&amp;quot;{n} must be &amp;gt;= 0&amp;quot;)
    while n &amp;gt; 0:
        n, bit = divmod(n, 2)
        yield bit
&lt;/pre&gt;
&lt;p&gt;This will transform a number into a sequence of bits. (They're in order
from LSB to MSB, which is the reverse order of the &lt;tt class="docutils literal"&gt;bin()&lt;/tt&gt; function.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; list(bits(42))
[0, 1, 0, 1, 0, 1]
&lt;/pre&gt;
&lt;p&gt;Given a sequence of bits, is there an odd number or an even number? This
is the parity question. The parity FSA is often depicted like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/FSA_image.png"&gt;
&lt;img alt="two-state finite-state automaton" src="https://slott56.github.io/media/FSA_image.png" style="width: 320px; height: 188px;" /&gt;
&lt;/a&gt;
&lt;p&gt;When the parity is in the &lt;strong&gt;even&lt;/strong&gt; state, a 1-bit transitions to the
&lt;strong&gt;odd&lt;/strong&gt; state. When the parity is in the &lt;strong&gt;odd&lt;/strong&gt;, a 1-bit transitions to
the &lt;strong&gt;even&lt;/strong&gt; state.&lt;/p&gt;
&lt;p&gt;Clearly, this demands the &lt;strong&gt;State&lt;/strong&gt; design pattern, right?&lt;/p&gt;
&lt;div class="section" id="an-oo-implementation"&gt;
&lt;h2&gt;An OO Implementation&lt;/h2&gt;
&lt;p&gt;Here's a detailed OO implementation using the &lt;strong&gt;State&lt;/strong&gt; design pattern.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Parity:
    def signal(self, bit: int) -&amp;gt; &amp;quot;Parity&amp;quot;:
        ...


class EvenParity(Parity):
    def signal(self, bit: int) -&amp;gt; Parity:
        if bit % 2 == 1:
            return OddParity()
        else:
            return self


class OddParity(Parity):
    def signal(self, bit: int) -&amp;gt; Parity:
        if bit % 2 == 1:
            return EvenParity()
        else:
            return self


class ParityCheck:
    def __init__(self):
        self.parity = EvenParity()

    def check(self, message: Iterable[int]) -&amp;gt; None:
        for bit in message:
            self.parity = self.parity.signal(bit)

    &amp;#64;property
    def even_parity(self) -&amp;gt; bool:
        return isinstance(self.parity, EvenParity)
&lt;/pre&gt;
&lt;p&gt;Each of the &lt;tt class="docutils literal"&gt;Parity&lt;/tt&gt; subclasses implements one of the states of the
FSA. The lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method implements state-specific behavior.
In this case, it's a transition to another state. In more complex
examples it may involve side-effects like updating a mutable data
structure to log progress.&lt;/p&gt;
&lt;p&gt;This mapping from state to diagram to class is pretty pleasant. Folks
really like to implement each state as a distinct class. It somehow
feels really solid.&lt;/p&gt;
&lt;p&gt;It's import to note the loneliness of the lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method.
It's all by itself in that big, empty class.&lt;/p&gt;
&lt;p&gt;Hint. This could be a function.&lt;/p&gt;
&lt;p&gt;It's also important to note that this kind of design is subject to odd,
unpleasant design tweaks. Ideally, the transition is *only* done by
the lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method. Nothing stops the unscrupulous
programmer from putting state transitions in other methods. Sigh.&lt;/p&gt;
&lt;p&gt;We'll look at more complex kinds of state transitions later. In the UML
state chart diagrams sates may also have entry actions and exit actions,
a bit more complex behavior than we we're showing in this example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-functional-implementation"&gt;
&lt;h2&gt;A Functional Implementation&lt;/h2&gt;
&lt;p&gt;What's the alternative? Instead of modeling state as an object with
methods for behavior, we can model state as a function. The state is a
function that transitions to the next state.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def even(bit: int) -&amp;gt; ParityF:
    if bit % 2 == 1:
        return odd
    else:
        return even


def odd(bit: int) -&amp;gt; ParityF:
    if bit % 2 == 1:
        return even
    else:
        return odd


def parity_check(message: Iterable[int], init: ParityF = None) -&amp;gt; ParityF:
    parity = init or even
    for bit in message:
        parity = parity(bit)
    return parity


def even_parity(p: ParityF) -&amp;gt; bool:
    return p is even
&lt;/pre&gt;
&lt;p&gt;Each state is modeled by a function.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;parity_check()&lt;/tt&gt; function examines each bit, and applies the
current state function (either &lt;tt class="docutils literal"&gt;even()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;odd()&lt;/tt&gt;) to compute the
next state, and save this as the vakue of the &lt;tt class="docutils literal"&gt;parity&lt;/tt&gt; variable.&lt;/p&gt;
&lt;p&gt;What's the ParityF type? This:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import Protocol


class ParityF(Protocol):
    def __call__(self, bit: int) -&amp;gt; &amp;quot;ParityF&amp;quot;:
        ...
&lt;/pre&gt;
&lt;p&gt;This uses a Protocol to define a type with a recursive cycle in it. It
would be more fun to use something like
&lt;tt class="docutils literal"&gt;ParityF = &lt;span class="pre"&gt;Callable[[int],&lt;/span&gt; &amp;quot;ParityF&amp;quot;]&lt;/tt&gt;, but that's not (yet)
supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-extensions"&gt;
&lt;h2&gt;Some Extensions&lt;/h2&gt;
&lt;p&gt;What if we need each state to have more attributes?&lt;/p&gt;
&lt;p&gt;Python functions have attributes. Like this: &lt;tt class="docutils literal"&gt;even.some_value = 2&lt;/tt&gt;;
&lt;tt class="docutils literal"&gt;odd.some_value = 1&lt;/tt&gt;. We can add all the attributes we require.&lt;/p&gt;
&lt;p&gt;What about other functions that happen on entry to a state or exit from
a state? This is trickier. My preference is to use a class as a
namespace that contains a number of related functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Even:
    &amp;#64;staticmethod
    def __call__(bit: int) -&amp;gt; ParityF:
        if bit % 2 == 1:
            odd.enter()
            return odd
        else:
            return even
    &amp;#64;staticmethod
    def enter() -&amp;gt; None:
        print(&amp;quot;even&amp;quot;)

even = Even()
&lt;/pre&gt;
&lt;p&gt;This seems to work out well, and keeps each state-specific material in a
single namespace. It uses static methods to follow the same design
principle as the previous example -- these are pure functions, collected
into the class only to provide a namespace so we can use &lt;tt class="docutils literal"&gt;odd.enter()&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;even.enter()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;State&lt;/strong&gt; design pattern isn't &lt;em&gt;required&lt;/em&gt; to implement a FSA.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="functional python programming"></category><category term="software design"></category><category term="#python"></category></entry><entry><title>Permutations, Combinations and Frustrations</title><link href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html" rel="alternate"></link><published>2022-11-22T17:21:00-05:00</published><updated>2022-11-22T17:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-permutations_combinations_and_frustrations.html</id><summary type="html">&lt;p&gt;The issue of permutations and combinations is sometimes funny.&lt;/p&gt;
&lt;p&gt;Not funny weird. But, funny &amp;quot;haha.&amp;quot;&lt;/p&gt;
&lt;p&gt;I received an email with 100's of words and 10 attachments. (10.
Really.) The subject was how best to enumerate 6! permutations of
something or other. With a goal of comparing some optimization algorithm
with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The issue of permutations and combinations is sometimes funny.&lt;/p&gt;
&lt;p&gt;Not funny weird. But, funny &amp;quot;haha.&amp;quot;&lt;/p&gt;
&lt;p&gt;I received an email with 100's of words and 10 attachments. (10.
Really.) The subject was how best to enumerate 6! permutations of
something or other. With a goal of comparing some optimization algorithm
with a brute force solution. (I don't know why. I didn't ask.)&lt;/p&gt;
&lt;p&gt;Apparently, the programmer was not aware that permutation creation is a
pretty standard algorithm with a standard solution. Most &amp;quot;real&amp;quot;
programming languages have libraries which already solve this in a tidy,
efficient, and well-documented way.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.permutations"&gt;https://docs.python.org/3/library/itertools.html#itertools.permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I suspect that this is true for every language in common use.&lt;/p&gt;
&lt;p&gt;In Python, this doesn't even really involve programming. It's a
first-class expression you enter at the Python &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/tt&gt; prompt.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import itertools
&amp;gt;&amp;gt;&amp;gt; list(itertools.permutations(&amp;quot;ABC&amp;quot;))
[('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]
&lt;/pre&gt;
&lt;p&gt;What's really important about this question was the obstinate inability
of the programmer to realize that their problem had a tidy, well
understood solution. And has had a good solution for decades. Instead
they did a lot of programming and sent 100's of words and 10 attachments
(10. Really.)&lt;/p&gt;
&lt;p&gt;The best I could do was provide this link:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.algorist.com"&gt;Steven Skiena, The Algorithm Design
Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It appears that too few programmers are aware of how much already
exists. They plunge ahead creating a godawful mess when a few minutes of
reading would have provided a very nice answer.&lt;/p&gt;
&lt;p&gt;Eventually, they sent me this:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Heap's_algorithm"&gt;http://en.wikipedia.org/wiki/Heap's_algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a grudging acknowledgement that they had wasted hours failing to
reinvent the wheel.&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category></entry><entry><title>Obstinate Idiocy, Expanded</title><link href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html" rel="alternate"></link><published>2022-11-22T17:15:00-05:00</published><updated>2022-11-22T17:15:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-obstinate_idiocy_expanded.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;Here are three warning signs I was able to deduce.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No Rational Justification&lt;/li&gt;
&lt;li&gt;Ineffective Tool Choice&lt;/li&gt;
&lt;li&gt;Random Whining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To which I can now add two more.&lt;/p&gt;
&lt;p&gt;Symptom 4 of Obstinate Idiocy is that &lt;strong&gt;all questions are rhetorical&lt;/strong&gt;
and they often come with pre-argued answers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;Here are three warning signs I was able to deduce.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No Rational Justification&lt;/li&gt;
&lt;li&gt;Ineffective Tool Choice&lt;/li&gt;
&lt;li&gt;Random Whining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To which I can now add two more.&lt;/p&gt;
&lt;p&gt;Symptom 4 of Obstinate Idiocy is that &lt;strong&gt;all questions are rhetorical&lt;/strong&gt;
and they often come with pre-argued answers.&lt;/p&gt;
&lt;p&gt;Actual email quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: &amp;quot;&amp;gt;Excel is almost the stupidest choice possible&lt;/p&gt;
&lt;p&gt;OI: &amp;quot;What criteria are you using to make that statement?&lt;/p&gt;
&lt;p&gt;My criteria was that I needed a way for non-tech people and
non-programmers...&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And on the email spins, pre-arguing points about &amp;quot;non-programmers&amp;quot; and pre-justifying a bad
answer. Since their argument is already presented (in mind-numbing
detail), there's no effective way to answer the question they asked.
Indeed, there's little point in trying to answer, since the pre-argued
response is likely to be the final response.&lt;/p&gt;
&lt;p&gt;In order to answer, we have to get past the pre-argued response. And
this can be difficult because this devolves to &amp;quot;it's political, you
don't need the details.&amp;quot; So, if it's not technical, why am I involved?&lt;/p&gt;
&lt;p&gt;Symptom 5 of Obstinate Idiocy is &lt;strong&gt;Learning is Impossible&lt;/strong&gt;. This may
actually be the root cause for Symptom 3, &lt;strong&gt;Ineffective Tool Choice&lt;/strong&gt;.
It now seems to me that the tool was chosen to minimize learning. I had
suggested using Mathematica. I got this response: &amp;quot; I don't know Python
or R or SAS.&amp;quot; The answer seems like a non-sequitur because it is. It's
justification for a bad decision.&lt;/p&gt;
&lt;p&gt;The problem they're trying to solve is gnarly, perhaps it's time to
consider learning a better toolset.&lt;/p&gt;
&lt;p&gt;Excel has already failed the OI. They asked for an opinion (&amp;quot;Q2: What do
you believe are the pros/cons of ... using Excel with &amp;quot;Excel Solver&amp;quot;
...?&amp;quot;) that seems to ignore the fact that they already failed trying to
use Excel. They already failed, and they followed up by asking for the
pros and cons of a tool they already failed with.&lt;/p&gt;
&lt;p&gt;From this limited exchange it appears that they're so unwilling to learn
that they can't gather data from their own experience and learn from it.&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="software design"></category><category term="analysis"></category><category term="spreadsheet"></category></entry><entry><title>FAERIE DUST™</title><link href="https://slott56.github.io/2022_11_22-faerie_dusttm.html" rel="alternate"></link><published>2022-11-22T16:39:00-05:00</published><updated>2022-11-22T16:39:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-faerie_dusttm.html</id><summary type="html">&lt;p&gt;Here's how to recognize a &lt;strong&gt;Faerie Dust&lt;/strong&gt; request:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have identified a problem. It can be with almost anything:
scalability, reliability, auditability, any Quality Measure.&lt;/li&gt;
&lt;li&gt;We're pursuing a specific technology. Typically, something that has
the lowest impact on our architecture.&lt;/li&gt;
&lt;li&gt;We can't address anything other than this specific technology
variation …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's how to recognize a &lt;strong&gt;Faerie Dust&lt;/strong&gt; request:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have identified a problem. It can be with almost anything:
scalability, reliability, auditability, any Quality Measure.&lt;/li&gt;
&lt;li&gt;We're pursuing a specific technology. Typically, something that has
the lowest impact on our architecture.&lt;/li&gt;
&lt;li&gt;We can't address anything other than this specific technology
variation -- we can't change the application software or buy
hardware.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once we're in the &lt;strong&gt;Faerie Dust&lt;/strong&gt; realm, what can we do?&lt;/p&gt;
&lt;p&gt;Laughing doesn't help. They have a serious problem, they need a
solution. The fact that they won't address the cause isn't completely
relevant -- we have to work on the denial, anger, negotiation,
depression cycle first. Hopefully skipping past the anger, or assuring
the anger is directed elsewhere.&lt;/p&gt;
&lt;p&gt;Helping doesn't help. If we join the quest for their Faerie Dust, what
will we accomplish? We'll burn billable hours to -- eventually -- reach
an equivocal non-solution with a complex write-up and recommendations
that won't be implemented.&lt;/p&gt;
&lt;p&gt;Not helping doesn't help. If we obstinately refuse to join the quest for
the Faerie Dust... well... then we've done nothing. We haven't advanced
their understanding of their problem.&lt;/p&gt;
&lt;p&gt;What's left? Is there a middle road that allows us to join the Faerie
Dust quest, but still point out the side roads, other monsters and other
treasures along the way?&lt;/p&gt;
&lt;p&gt;Perhaps there is, but it would require a kind of saintly patient
persistence. We would have to start with an enumeration of problem
causes, prioritize them, and then focus on their selected bit of Faerie
Dust. My idea is that enumerating the possible causes allows us to
identify the missed opportunities, and the possible magnitude of fixing
something essential (algorithm or data structure) instead of throwing up
window-dressing to cover problems in something inessential (reducing the
time required for a table scan).&lt;/p&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here's a concrete example of Faerie Dust.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pick a data model that doesn't fit the use cases. i.e., lumped many
discrete details into a single text field that has &amp;quot;rich semantic
content&amp;quot;. Work around this mistake by using wild-card matches.&lt;/li&gt;
&lt;li&gt;Complained about performance and dug into nuanced details of LIKE
clause and full-text search. Lots of study time spent on LIKE clause
processing and how to improvement performance.&lt;/li&gt;
&lt;li&gt;Refused to discuss the actual use case or the mismatch between data
structures and requirements.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The design didn't match the use cases. &lt;strong&gt;Faerie Dust&lt;/strong&gt; won't help.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="quot-helping-doesn-39-t-help-if-we-join-the-que"&gt;
&lt;h2&gt;&amp;amp;quot;Helping doesn&amp;amp;#39;t help. If we join the que...&lt;/h2&gt;
&lt;p&gt;TechNeilogy&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-27 09:27:52.554000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Helping doesn't help. If we join the quest for their Faerie Dust, what
will we accomplish? ...Not helping doesn't help.&amp;quot;
This really hits home. I once had to make this agonizing decision
regarding a project to which I had pledged commitment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-clients-who-request-quot-faerie-dust-quot-ar"&gt;
&lt;h2&gt;The clients who request &amp;amp;quot;Faerie Dust&amp;amp;quot; ar...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-30 20:11:13.261000-05:00&lt;/p&gt;
&lt;p&gt;The clients who request &amp;quot;Faerie Dust&amp;quot; are also the ones that will
probably also claim that they are &amp;quot;special&amp;quot; and nobody has ever had a
problem like they currently have. Pointing out a web page or a book
which describes a similar problem to theirs will at best get you dirty
looks and sometimes even a boot out the door.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category></entry><entry><title>Testing with PySpark</title><link href="https://slott56.github.io/2022_11_22-testing_with_pyspark.html" rel="alternate"></link><published>2022-11-22T11:00:00-05:00</published><updated>2022-11-22T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-testing_with_pyspark.html</id><summary type="html">&lt;p&gt;This isn't about details of pySpark. This is about the philosophy of
testing when working with a large, complex framework, like pySpark,
pandas, numpy, or whatever.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Use data subsets.&lt;/p&gt;
&lt;p&gt;Write unit tests for the functions that process the data.&lt;/p&gt;
&lt;p&gt;Don't test pyspark itself. Test the code you write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This isn't about details of pySpark. This is about the philosophy of
testing when working with a large, complex framework, like pySpark,
pandas, numpy, or whatever.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Use data subsets.&lt;/p&gt;
&lt;p&gt;Write unit tests for the functions that process the data.&lt;/p&gt;
&lt;p&gt;Don't test pyspark itself. Test the code you write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some History&lt;/h2&gt;
&lt;p&gt;I've worked with folks -- data scientists specifically -- without a deep
background in software engineering.&lt;/p&gt;
&lt;p&gt;When we said their model-building applications needed a &lt;strong&gt;test case&lt;/strong&gt;,
they supplied the test case they used to validate the model.&lt;/p&gt;
&lt;p&gt;Essentially, their test script ran the entire training set. Built the
model. Did extensive statistical testing on the resulting decisions made
by the model. The test case asserted that the stats were &amp;quot;good.&amp;quot; In
fact, they recapitulated the entire model review process that had gone
on in the data science community to get the model from &amp;quot;someone's idea&amp;quot;
to a &amp;quot;central piece of the business.&amp;quot;&lt;/p&gt;
&lt;p&gt;The test case ran for hours and required a huge server loaded up with
GPUs. It cost a fortune to run. And. It tended to timeout the deployment
pipeline.&lt;/p&gt;
&lt;p&gt;This isn't what we mean by &amp;quot;test.&amp;quot; Our mistake.&lt;/p&gt;
&lt;p&gt;We had to explain that &lt;strong&gt;a unit test demonstrates the code works&lt;/strong&gt;. That
was all. It shouldn't involve the full training set of data and the full
training process with all the hyperparameter tuning and hours of compute
time. We don't need to revalidate your model. We want to know the code
won't crash. We'd like 100% code coverage. But the objective is little
more than show it won't crash when we deploy it.&lt;/p&gt;
&lt;p&gt;It was difficult to talk them down from full training sets. They
couldn't see the value in testing code in isolation. A phrase like &amp;quot;just
enough data to prove the thing could plausibly work with real data&amp;quot;
seemed to resonate.&lt;/p&gt;
&lt;p&gt;A few folks complained that a numpy array with a few rows didn't really
show very much. We had to explain (more than once) that we didn't really
want to know all the algorithmic and performance nuances. We mostly
wanted to know it wouldn't crash when we applied it to production data.
We agreed with them the test case didn't show much. We weren't qualified
to revalidate the model; we were only qualified to run their training
process for them. If they had done enough work to be sure we *could*
run it.&lt;/p&gt;
&lt;p&gt;(It was a bank. Software deployments have rules. An AI model-building
app is still an app. It still goes through the same CI/CD pipeline as
demand deposit account software changes. It's a batch job, really, just
a bit more internally sophisticated than the thing that clears checks.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-structure"&gt;
&lt;h2&gt;Some Structure&lt;/h2&gt;
&lt;p&gt;I lean toward the following tiers of testing:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Unit tests of every class and function. 100% code coverage here. I
suggest using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-cov&lt;/span&gt;&lt;/tt&gt; packages to tracking
testing and make sure every line of code has some test case. For a
few particularly tricky things, every logic path is better than
simply testing lines of code. In some cases, every line of code will
tend to touch every logic path, but seems less burdensome.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;hypothesis&lt;/tt&gt; for the more sensitive numeric functions. In “data
wrangling” applications there may not be too many of these. In the
machine learning and model application software, there may be more
sophisticated math that benefits from hypothesis testing.&lt;/li&gt;
&lt;li&gt;Write larger integration tests that mimic &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt; processing,
using multiple functions or classes to be sure they work together
correctly, but without the added complication of actually using
pySpark. This means creating mocks for some of the libraries using
&lt;tt class="docutils literal"&gt;unittest.mock&lt;/tt&gt; objects. This is a fair bit of work, but it pays
handsome dividends when debugging. For well-understood &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt;
APIs, it should be easy to provide mocked results for the app
components under test to use. For the less well-understood parts, the
time spent building a mock will often provide useful insight into how
(and why) it works the way it does. In rare cases, building the mock
suggests a better design that's easier to test.&lt;/li&gt;
&lt;li&gt;Finally. Write a few overall acceptance tests that use your modules
and also start and run a small &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt; instance from the command
line. For this, I really like using &lt;tt class="docutils literal"&gt;behave&lt;/tt&gt;, and writing the
acceptance testing cases using the Gherkin language. This enforces a
very formal “Given-When-Then” structure on the test scenarios, and
allows you to write in English. You can share the Gherkin with users
and other stakeholders to be sure they agree on what the application
should do.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Each tier of testing builds up a larger, and more complete picture of
the overall application.&lt;/p&gt;
&lt;p&gt;More important, we don't emphasize running pySpark and testing it. It
already works. It has it's own tests. We need to test the stuff we
wrote, not the framework.&lt;/p&gt;
&lt;p&gt;We need to test our code in isolation.&lt;/p&gt;
&lt;p&gt;We need to test integrated code with mocked pySpark.&lt;/p&gt;
&lt;p&gt;Once we're sure our code is likely to work, the next step is
confirmation that the important parts do work with pySpark. For
life-critical applications, the integration tests will need to touch
100% of the logic paths. For data analytics, extensive integration
testing is a lot of cost for relatively little benefit.&lt;/p&gt;
&lt;p&gt;Even for data analytics, testing is a lot of work. The alternative is
hope and prayer. I suggest starting with small unit tests, and expanding
from there.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="pySpark"></category><category term="gherkin"></category><category term="#python"></category></entry><entry><title>Buzz in the general public regarding software bugs</title><link href="https://slott56.github.io/2022_11_22-buzz_in_the_general_public_regarding_software_bugs.html" rel="alternate"></link><published>2022-11-22T10:17:00-05:00</published><updated>2022-11-22T10:17:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-buzz_in_the_general_public_regarding_software_bugs.html</id><summary type="html">&lt;p&gt;I got this the other day: &amp;quot;there seems to be a lot of buzz out in the
general public regarding software bugs&amp;quot;.&lt;/p&gt;
&lt;p&gt;Attached to this was an article from The Economist in 2003 plus one
from 2010. To me, this doesn't seem to be a &amp;quot;lot&amp;quot; of buzz. But what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got this the other day: &amp;quot;there seems to be a lot of buzz out in the
general public regarding software bugs&amp;quot;.&lt;/p&gt;
&lt;p&gt;Attached to this was an article from The Economist in 2003 plus one
from 2010. To me, this doesn't seem to be a &amp;quot;lot&amp;quot; of buzz. But what
do I know?&lt;/p&gt;
&lt;p&gt;Further, it did &lt;em&gt;not&lt;/em&gt; come from someone outside the software/IT
industry. It came from a DBA. I guess the presence of this email in
my inbox must mean some DBA's are surprised that there are bugs. I
guess they were surprised to see &amp;quot;bug&amp;quot; in a general-interest
magazine.&lt;/p&gt;
&lt;p&gt;They also forwarded a link to &lt;a class="reference external" href="http://www.glitchthebook.com/"&gt;http://www.glitchthebook.com/&lt;/a&gt;. This
looks more interesting than a writer for The Economist
(&lt;a class="reference external" href="http://www.economist.com/"&gt;http://www.economist.com/&lt;/a&gt;) providing information to a general
audience that every professional should already know.&lt;/p&gt;
&lt;p&gt;I guess it could be interesting when someone notices &amp;quot;bug&amp;quot; in a
general-interest magazine.&lt;/p&gt;
&lt;div class="section" id="hidden-cost-hogwash"&gt;
&lt;h2&gt;Hidden Cost Hogwash&lt;/h2&gt;
&lt;p&gt;I object, however to this &amp;quot;hidden cost&amp;quot; hogwash. Bugs have an
explicit, obvious, direct cost. There may be &amp;quot;hidden costs&amp;quot; but they
are largely irrelevant and pale in comparison to direct costs.&lt;/p&gt;
&lt;p&gt;What we need are articles not on the &amp;quot;hidden cost&amp;quot;, but on actual
bugs. In particular, there are two kinds of actual costs that we need
to look at: &amp;quot;hidden bugs&amp;quot; and &amp;quot;compound bugs&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Hidden Bugs.&lt;/strong&gt;
These are things simply below the user interface
level. They're present and they're often worked-around by UI
hacks. Hidden Bugs are more costly than visible bugs. Complex
multi-layered and multi-component architectures are packed with
hidden bugs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compound Bugs.&lt;/strong&gt;
These are hidden bugs where the workaround also
has a bug. The interface file has an intermittent glitch, so the
web services are cluttered with &lt;strong&gt;try:&lt;/strong&gt; statements. The &lt;strong&gt;try:&lt;/strong&gt;
statements, themselves, harbor bugs, so we have to then add
&lt;strong&gt;assert&lt;/strong&gt; statements and declare it &amp;quot;defensive programming&amp;quot;. The
net effect is to simply log something that was provided to the
interface incorrectly. Sigh.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We shouldn't waste time talking about &amp;quot;hidden costs&amp;quot; of glitches
when we aren't even sure what the actual up-front costs are. If we
knew the costs, we'd spend a bit more on the software to prevent
the bugs in the first place.&lt;/p&gt;
&lt;p&gt;We also shouldn't be surprised to see &amp;quot;bug&amp;quot; in a general-interest
magazine.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="API Design"></category><category term="defensive programming"></category></entry><entry><title>Generators as Stacks of Operations</title><link href="https://slott56.github.io/2022_11_15-generators_as_stacks_of_operations.html" rel="alternate"></link><published>2022-11-15T11:00:00-05:00</published><updated>2022-11-15T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-15:/2022_11_15-generators_as_stacks_of_operations.html</id><summary type="html">&lt;p&gt;See
&lt;a class="reference external" href="https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff"&gt;https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm delighted by this article.&lt;/p&gt;
&lt;p&gt;I was shown only the first, horrible, example. I think the idea was to
push back on the idea of complex generators. I fumed.&lt;/p&gt;
&lt;p&gt;Then I read the entire article.&lt;/p&gt;
&lt;p&gt;Now I'm fuming at someone who posted the first example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See
&lt;a class="reference external" href="https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff"&gt;https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm delighted by this article.&lt;/p&gt;
&lt;p&gt;I was shown only the first, horrible, example. I think the idea was to
push back on the idea of complex generators. I fumed.&lt;/p&gt;
&lt;p&gt;Then I read the entire article.&lt;/p&gt;
&lt;p&gt;Now I'm fuming at someone who posted the first example -- apparently
having failed to read the rest of the post.&lt;/p&gt;
&lt;p&gt;This idea of building a stack of iterators is very, very good.&lt;/p&gt;
&lt;p&gt;The example (using simple operations) can be misleading. A follow-on
example doing something like file parsing might be helpful. But, if you
go too far, you wind up writing an entire book about Functional
Programming in Python.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="generator functions"></category></entry><entry><title>Fighting Against Over-Engineering</title><link href="https://slott56.github.io/2022_11_08-fighting_against_over_engineering.html" rel="alternate"></link><published>2022-11-08T16:18:00-05:00</published><updated>2022-11-08T16:18:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-08:/2022_11_08-fighting_against_over_engineering.html</id><summary type="html">&lt;p&gt;I've been trying to help some folks who have a &amp;quot;search&amp;quot; algorithm that's
slow.&lt;/p&gt;
&lt;p&gt;They know it's slow -- that's pretty obvious.&lt;/p&gt;
&lt;p&gt;They're -- unfortunately -- &lt;strong&gt;sure&lt;/strong&gt; that asyncio will help. That's not
an obvious conclusion. It involves no useful research. Indeed, that's a
kind of magical thinking. Which leads me to consider …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been trying to help some folks who have a &amp;quot;search&amp;quot; algorithm that's
slow.&lt;/p&gt;
&lt;p&gt;They know it's slow -- that's pretty obvious.&lt;/p&gt;
&lt;p&gt;They're -- unfortunately -- &lt;strong&gt;sure&lt;/strong&gt; that asyncio will help. That's not
an obvious conclusion. It involves no useful research. Indeed, that's a
kind of magical thinking. Which leads me to consider the process of
over-engineering.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over-engineering is essentially a technique for burning brain-calories
on planning to build something instead of building something.&lt;/p&gt;
&lt;p&gt;The distinction is &amp;quot;planning&amp;quot; vs. &amp;quot;doing.&amp;quot;&lt;/p&gt;
&lt;p&gt;Lots of folks subscribe to Methodology Magic Thinking (MMT™). The core
tenet of MMT is that some  methodology is good, and more methodology is
better.&lt;/p&gt;
&lt;p&gt;The classic waterfall methodology expects requirements, design, code,
test, and what-not, all flowing downhill. A series of waterfalls.&lt;/p&gt;
&lt;p&gt;The more modern agile-fall methodology expects requirements, design,
code, test, and what-not all being done in tiny MVP slices.&lt;/p&gt;
&lt;p&gt;Why is this bad?&lt;/p&gt;
&lt;p&gt;Its bad because it falls apart when confronted with really difficult
algorithm and data structure problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-breaks"&gt;
&lt;h2&gt;What Breaks?&lt;/h2&gt;
&lt;p&gt;The thing that breaks is the &amp;quot;learn about the technology&amp;quot; or &amp;quot;learn
about the problem domain&amp;quot; things that we need to do. We like to pretend
with understand the technology -- in spite of the obvious information
that we're rarely &lt;strong&gt;experts&lt;/strong&gt;. We're smart. We're capable. But. We're
not &lt;strong&gt;experts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This applies to both the solution technology (i.e., language,
persistence, framework, etc.) and the problem domain.&lt;/p&gt;
&lt;p&gt;When we have a process that takes *forever* to run, we've got a bad
algorithm/data structure, and we don't know what to do.&lt;/p&gt;
&lt;p&gt;We need to explore.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;Managers rarely permit exploration.&lt;/p&gt;
&lt;p&gt;They have a schedule. The waterfall comes with a schedule. The agilefall
sprints have timelines. And these are rarely negotiable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-some-wrong-things-to-do"&gt;
&lt;h2&gt;What Are Some Wrong Things to Do?&lt;/h2&gt;
&lt;p&gt;One wrong thing to do is to pick some technology and dig in hard. The
asyncio module is not magical pixie dust. It doesn't make arbitrary bad
code run faster. This is true in general. Picking a solution technology
isn't right. Exploring alternatives -- emphasis on the plural -- is
essential.&lt;/p&gt;
&lt;p&gt;Another wrong thing to do is demand yet more process. More design docs.
More preliminary analysis docs. More preliminary study. More
over-engineering.&lt;/p&gt;
&lt;p&gt;This is unhelpful. There are too many intellectual vacuums. And nature
abhors a vacuum. So random ideas get sucked in. Some expertise in the
language/tool/framework is required. Some expertise in the problem
domain is required. Avoid assumptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do"&gt;
&lt;h2&gt;What Should We Do?&lt;/h2&gt;
&lt;p&gt;We have to step back from the technology trap. We're not &lt;strong&gt;experts&lt;/strong&gt;: we
need to learn more. Which means exploring more. Which means putting time
in the schedule for this.&lt;/p&gt;
&lt;p&gt;We have to understand the problem domain better. We're not &lt;strong&gt;experts&lt;/strong&gt;:
we need to learn more. Which means putting time in the schedule for
this.&lt;/p&gt;
&lt;p&gt;We have to step back from the &amp;quot;deliverable code&amp;quot; trap. Each line of code
is not a precious gift from some eternal god of code. It's an idea. And
since the thing doesn't run well, it's provably a &lt;strong&gt;bad&lt;/strong&gt; idea.&lt;/p&gt;
&lt;p&gt;Code needs to be deleted. And rewritten. And rewritten again. And
benchmarked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frustration"&gt;
&lt;h2&gt;Frustration&lt;/h2&gt;
&lt;p&gt;I like fixing bad code. I like helping people fix bad code.&lt;/p&gt;
&lt;p&gt;I can't -- however -- work with folks who can't delete the old bad code.&lt;/p&gt;
&lt;p&gt;It's unfortunate when they reach out and then block progress with a
number of constraints that amount to &amp;quot;We can't focus on this; we can't
make changes rapidly. Indeed, we're unlikely to make any changes.&amp;quot;&lt;/p&gt;
&lt;p&gt;The only way to learn is to become an expert is something. This takes
time. To minimize the time means work with focus and work rapidly.&lt;/p&gt;
&lt;p&gt;Instead of working rapidly, they want magical pixie dust that makes
things faster. They want me to tell them were the &amp;quot;Turbo Boost&amp;quot; button
is hidden.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category><category term="methodology"></category></entry><entry><title>Some Functional Programming in Python material</title><link href="https://slott56.github.io/2022_10_25-some_functional_programming_in_python_material.html" rel="alternate"></link><published>2022-10-25T08:00:00-04:00</published><updated>2022-10-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-10-25:/2022_10_25-some_functional_programming_in_python_material.html</id><summary type="html">&lt;p&gt;This is bonus content for the forthcoming &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;Functional Python Programming
3rd
edition&lt;/a&gt;
book. It didn't make it into the book because -- well -- it was just too
much of the wrong kind of detail.&lt;/p&gt;
&lt;p&gt;See this &amp;quot;&lt;a class="reference external" href="https://itmaybeahack.com/buildingskills/Tough_TCO.pdf"&gt;Tough
TCO&lt;/a&gt;&amp;quot; document
for some thoughts on Tail-Call Optimization that can be particularly
difficult. This …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is bonus content for the forthcoming &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;Functional Python Programming
3rd
edition&lt;/a&gt;
book. It didn't make it into the book because -- well -- it was just too
much of the wrong kind of detail.&lt;/p&gt;
&lt;p&gt;See this &amp;quot;&lt;a class="reference external" href="https://itmaybeahack.com/buildingskills/Tough_TCO.pdf"&gt;Tough
TCO&lt;/a&gt;&amp;quot; document
for some thoughts on Tail-Call Optimization that can be particularly
difficult. This isn't terribly original, but I think it's helpful for
folks working through more complex problems from a functional
perspective.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Why a PDF?&amp;quot; I've been working with with LaTeX, and the switching to
other ways of editing and presenting code seemed like too much work.&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="tail call optimization"></category></entry><entry><title>Books! Books! More Channels!</title><link href="https://slott56.github.io/2022_09_21-books_books_more_channels.html" rel="alternate"></link><published>2022-09-21T15:05:00-04:00</published><updated>2022-09-21T15:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-09-21:/2022_09_21-books_books_more_channels.html</id><summary type="html">&lt;p&gt;I started with the Apple Books platform because it's an easy default for
me.&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I started with the Apple Books platform because it's an easy default for
me.&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h3&gt;Google Play&lt;/h3&gt;
&lt;p&gt;Now, I'm duplicating the books on Google Play. Here's &lt;strong&gt;Unlearning
SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="just-bought-unlearning-sql-thanks-for-helping-me"&gt;
&lt;h3&gt;Just bought Unlearning SQL - Thanks for helping me...&lt;/h3&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2022-08-26 17:02:51.255000-04:00&lt;/p&gt;
&lt;p&gt;Just bought Unlearning SQL - Thanks for helping me break out of not just
thinking about sql&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Enterprise Python -- Some initial thoughts</title><link href="https://slott56.github.io/2022_08_16-enterprise_python_some_initial_thoughts.html" rel="alternate"></link><published>2022-08-16T08:00:00-04:00</published><updated>2022-08-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-16:/2022_08_16-enterprise_python_some_initial_thoughts.html</id><summary type="html">&lt;p&gt;In the long run, I think there's a small book here. See &lt;a class="reference external" href="https://www.infoworld.com/article/3604473/8-reasons-python-will-rule-the-enterprise-and-8-reasons-it-wont.html%20"&gt;8 reasons
Python will rule the enterprise — and 8 reasons it won’t |
InfoWorld&lt;/a&gt;.
The conclusion, &amp;quot;Teams need to migrate slowly into the future, and
adopting more Python is a way to do that,&amp;quot; seems to be sensible …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the long run, I think there's a small book here. See &lt;a class="reference external" href="https://www.infoworld.com/article/3604473/8-reasons-python-will-rule-the-enterprise-and-8-reasons-it-wont.html%20"&gt;8 reasons
Python will rule the enterprise — and 8 reasons it won’t |
InfoWorld&lt;/a&gt;.
The conclusion, &amp;quot;Teams need to migrate slowly into the future, and
adopting more Python is a way to do that,&amp;quot; seems to be sensible. Some of
the cautionary tales along the way, however, don't make as much sense.&lt;/p&gt;
&lt;p&gt;TL;DR. There are no reasons to avoid Python. Indeed, the 8 points
suggest that Python is perhaps a smart decision.&lt;/p&gt;
&lt;p&gt;I want to focus on the negatives part of this because some of them are
wrong. I think there's a &amp;quot;technology hegemony&amp;quot; viewpoint where
everything in an enterprise must be exactly the same. This tends to
prevent creative solutions to problems and mires an enterprise into
fighting problems that are inherent in bad technology choices. Also, I
think there's an enterprises are run by idiots subtext.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Popularity&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Really this is about having polyglot software
portfolio. The reasoning appears to be that a polyglot software
portfolio is impossible to maintain because (1) no one can learn an old
language, and (2) software will never be rewritten from an obsolete
language to a modern language. If these are both true, it appears the
organization is full of idiots. The notion that a polyglot tech stack
&lt;strong&gt;must&lt;/strong&gt; devolve into chaos seems to ignore the endless chain of
management decisions that are required to create chaos. Leaving obsolete
tech in place isn't a consequence of the tech, or the tech's lack of
compatibility, it's a management decision to enshrine bad ideas, frozen
in amber, forever.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Scripting Languages&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Specifically, the spreadsheet is already the
&lt;em&gt;de facto&lt;/em&gt; scripting language of choice, and nothing can be done about
it. Nothing. No one can learn to use Jupyter Lab to do business
analytics. If this is true, it appears that the organization is full of
idiots. Python will not replace all spreadsheets. A pandas data frame
will replace an opaque macro-filled nightmare with code that can be unit
tested. Imagine unit testing a spreadsheet. Consider the possibilities
of expanding business analysis work to include a few test cases; not
100% code coverage, but a few test cases to confirm the analytical
process was implemented consistently.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Dynamic Languages&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Specifically, dynamic languages are useless
for reliable software because there's no comprehensive type checking
across some interfaces. Which begs the question of why there are
software failures in statically typed languages. More importantly,
complaining about dynamic languages raises important questions about
integration and acceptance testing procedures in an organization in
general. All languages require extensive test suites for all developed
code. All languages benefit from static analysis. Sometimes the compiler
does this, sometimes external tools do the linting. Sometimes folks use
both the compiler and linters to check types. If we are sure dynamic
languages will break, are we equally sure statically typed languages
cannot break? Or, do we take steps to prevent problems? I think we tend
to take a lot of steps to make sure software works.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Tooling&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;I can't figure this point out. But somehow C++ or Java
have better tools for managing large source code bases. There are no
details behind this claim, so I'm left to guess. I would suggest that
the &amp;quot;incremental recompilation&amp;quot; problem of large C++ (and Java) code
bases is its own nightmare. Folks go to great lengths to architect C++
so that an implementation change does not require recompilation of
everything. While this could be seen as &amp;quot;evolved to handle the jobs that
enterprise coders need done&amp;quot;, I submit that there's a deeper problem
here, and stepping away from the compiler is a better solution than
complex architectures. See Lakos &lt;a class="reference external" href="https://www.oreilly.com/library/view/large-scale-c-volume/9780133927573/"&gt;Large-Scale C++ Software
Design&lt;/a&gt; for
some architectural features that don't solve any enterprise problem, but
solve the scaling problem of big C++ applications. This bumps into the
micro-services/monolith discussion, and the question of carefully
testing each interface. None of which has anything to do with Python
specifically.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Machine Learning and Data Science&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;These are fads, apparently.
I'm not sure I can respond to this, since it has little to do with
Python. Of course, Python has one of the most complete data science
toolsets, so perhaps avoiding data science makes it easier to avoid
Python.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Rapid Growth&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The growth of Python is rapid, and there's no
promise of endless backwards compatibility. This is a consequence of
active development and learning. I think it's better than the endless
backwards compatibility that leads to JavaScript's list of WATs. Or the
endless confusion between java.util.date and Joda-Time. The idea that no
one will ever look at the Enterprise code base for Common
Vulnerabilities and Exposures seems to indicate a lack of concern for
reliability or security. Since the entire compiled code base has to be
checked for vulnerabilities, why not also check the Python code base for
ongoing upgrades and changes and enhancements? Is code really written
once and never looked at again? If so, it sounds like an organization
run by idiots.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Python Shipped With Some OS's&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;There's a long story of woe that
stems from relying on the OS-supplied Python. The lesson learned here is
&lt;strong&gt;Never Rely on the OS Python; Always Install Your Own&lt;/strong&gt;. This doesn't
seem like a reason to avoid Python in the enterprise. It seems like an
important lesson learned for all software that's not part of the OS:
always install your own. I've been using
&lt;a class="reference external" href="https://docs.conda.io/en/latest/miniconda.html"&gt;Miniconda&lt;/a&gt; to spin
up Python environments and absolutely love it.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Open Source Software&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Agreed. Nothing to do with Python
specifically. Everything to do with tech stack and architecture. The
question of using Open Source in the first place doesn't seem difficult.
It's a well-established way to reduce start-up costs for software
development.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of the eight points, two seem to be completely generic issues. Yes,
Machine Learning is new, and yes, choices must be made. The two
questions around scripting and dynamic languages seem specious; all
programming requires careful design and testing. The Python shipped with
the OS is a non-concern; the lesson learned is clear.&lt;/p&gt;
&lt;p&gt;We have have three remaining points:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Polyglot Portfolio&lt;/strong&gt; (From pursuing popularity.) This is already
the case in most Enterprises, and needs to be managed through
aggressive retiring of old software. I may have taken decades to
build that old app, but it often takes months to rewrite it in a new
language. The legacy app provides acceptance test cases; it's often
filled with cruft and detritus of old decisions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tooling&lt;/strong&gt;. Agreed. Tooling is important. Not sure that Java or C++
have a real edge here, but, tooling is important.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Growth and Change&lt;/strong&gt;. Python's rapid evolution requires active
management. An enterprise must adopt a YBYO (You Build it You Own it)
attitude so that every level of management is aware of the components
they're responsible for. CVE's are checked, Python PEP's are checked.
Tools like &lt;a class="reference external" href="https://tox.wiki/en/latest/"&gt;tox&lt;/a&gt; or
&lt;a class="reference external" href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt; are used to build (and
rebuild) virtual environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If these seem like a high bar, perhaps there are deeper issues in the
enterprise. If adding Yet Another Language is a problem, then it's
time to start retiring some languages. If Adding Another Tool is a
problem, it's worth examining the existing tool chain to see why it's
such a burden. If the idea of change is terrifying, perhaps the
ongoing change is not being watched carefully enough.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="enterprise"></category></entry><entry><title>Tragedy Averted</title><link href="https://slott56.github.io/2022_08_09-tragedy_averted.html" rel="alternate"></link><published>2022-08-09T08:00:00-04:00</published><updated>2022-08-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-09:/2022_08_09-tragedy_averted.html</id><summary type="html">&lt;p&gt;I almost made a terrible blunder.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for some background. This is
a &amp;quot;Literate Programming&amp;quot; tool. I started fooling around with this kind
of thing back in '05 (maybe even earlier.) This is not the blunder. The
whole idea of literate programming is not very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I almost made a terrible blunder.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for some background. This is
a &amp;quot;Literate Programming&amp;quot; tool. I started fooling around with this kind
of thing back in '05 (maybe even earlier.) This is not the blunder. The
whole idea of literate programming is not very popular. I'm a fan of
&lt;a class="reference external" href="https://jupyterbook.org/en/stable/intro.html"&gt;Jupyter{Book}&lt;/a&gt; as the
state of the art in sophisticated literate programming, if you're
interested in it.&lt;/p&gt;
&lt;p&gt;In my case, I started this project so long ago, I
used &lt;a class="reference external" href="https://docutils.sourceforge.io"&gt;docutils&lt;/a&gt;. This was
long before &lt;a class="reference external" href="https://github.com/sphinx-doc/sphinx"&gt;Sphinx&lt;/a&gt; arrived on
the scene. I never updated my little project to use Sphinx. The point
was to have a kind of pure literate programming tool that could work
with a variety of markup languages, including (but not limited to) RST.&lt;/p&gt;
&lt;p&gt;Recently, I learned about &lt;a class="reference external" href="https://plantuml.com"&gt;PlantUML&lt;/a&gt;. The idea
of a text description of a diagram is appealing. I don't really need to
draw it; I just need to specify what's in it and let
&lt;a class="reference external" href="https://graphviz.org"&gt;graphviz&lt;/a&gt; do the rest. This tool is very, very
cool. You can capture ideas quickly. You can refine and expand on ideas
until you reach a point where code makes more sense than a picture of
code.&lt;/p&gt;
&lt;p&gt;For some things, you can gather data and draw a picture of things *as
they are*. This is particularly valuable for cloud-based infrastructure
where a few queries leads to PlantUML source that is depicted very
nicely.&lt;/p&gt;
&lt;p&gt;Which leads to the idea of Literate Programming including UML diagrams.&lt;/p&gt;
&lt;p&gt;Doesn't sound too difficult. I can create an extension to &lt;strong&gt;docutils&lt;/strong&gt;
to introduce a UML directive. The resulting RST would look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
..  uml::

    left to right direction
    skinparam actorStyle awesome

    actor &amp;quot;Developer&amp;quot; as Dev
    rectangle PyWeb {
        usecase &amp;quot;Tangle Source&amp;quot; as UC_Tangle
        usecase &amp;quot;Weave Document&amp;quot; as UC_Weave
    }
    rectangle IDE {
        usecase &amp;quot;Create WEB&amp;quot; as UC_Create
        usecase &amp;quot;Run Tests&amp;quot; as UC_Test
    }
    Dev --&amp;gt; UC_Tangle
    Dev --&amp;gt; UC_Weave
    Dev --&amp;gt; UC_Create
    Dev --&amp;gt; UC_Test

    UC_Test --&amp;gt; UC_Tangle
&lt;/pre&gt;
&lt;p&gt;This could be handy to have the diagrams as part of the documentation
that tangles the working the code. One source for all of it.&lt;/p&gt;
&lt;p&gt;I started down the path of researching &lt;strong&gt;docutils&lt;/strong&gt; extensions. Got
pretty far. Far enough that I had an empty repository and everything. I
was about ready to start creating spike solutions.&lt;/p&gt;
&lt;p&gt;Then.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;music cue&lt;/em&gt;] *&lt;a class="reference external" href="https://www.youtube.com/watch?v=9mSVzGnKsXw"&gt;duh duh
duuuuuuh&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;I found that Sphinx already has an extension for PlantUML. I almost
started reading the code to see how it worked.&lt;/p&gt;
&lt;p&gt;Then I realized how dumb that was. It already works. Why read the code?
Why not install it?&lt;/p&gt;
&lt;p&gt;I had a choice to make.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Continue building my own &lt;strong&gt;docutils&lt;/strong&gt; plug-in.&lt;/li&gt;
&lt;li&gt;Switch to Sphinx.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some complications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My Literate Programming tool produces RST that *may* not be
compatible with Sphinx.&lt;/li&gt;
&lt;li&gt;It's yet another dependency in a tool that started out with zero
dependencies. I've added pytest and tox. What next?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What to do?&lt;/p&gt;
&lt;p&gt;I have to say that Git is amazing. I can make a branch for the spike. If
it works, pull request. If it doesn't work, delete the branch. This
continues to be game-changing to me. I'm old. I remember when we had to
back up the whole project directory tree before making this kind of
change.&lt;/p&gt;
&lt;p&gt;It worked. My tool's RST (with one exception) worked perfectly with
Sphinx. The one exception was an obscure directive, &lt;tt class="docutils literal"&gt;.. class:: name&lt;/tt&gt;,
used to provide an HTML class name for the following block. This always
should have been the &lt;strong&gt;docutils&lt;/strong&gt; &lt;tt class="docutils literal"&gt;.. container:: name&lt;/tt&gt; directive.
With this fix, we're good to go.&lt;/p&gt;
&lt;p&gt;I'm happy I avoided the trap of reimplementing something. Instead of
that, I upgraded from &amp;quot;bare&amp;quot; &lt;strong&gt;docutils&lt;/strong&gt; with my own CSS to Sphinx with
it's sophisticated templates and HTML Themes.&lt;/p&gt;
</content><category term="Technologies"></category><category term="sphinx"></category><category term="#python"></category><category term="literate programming"></category><category term="docutils"></category><category term="plantuml"></category><category term="pyWeb"></category></entry><entry><title>Books! Books! Books!</title><link href="https://slott56.github.io/2022_08_02-books_books_books.html" rel="alternate"></link><published>2022-08-02T08:00:00-04:00</published><updated>2022-08-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-02:/2022_08_02-books_books_books.html</id><summary type="html">&lt;p&gt;First, there's&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;First, there's&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is all new. It's written for folks who know Python, and are
struggling with the architectural balance between writing bulk
processing in SQL or writing it in Python. For too many developers, SQL
is effectively the only tool they can use. With a variety of tools, it
becomes easier to solve a wider variety of problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Bashing the Bash -- The shell is awful and what you can do about it</title><link href="https://slott56.github.io/2022_07_26-bashing_the_bash_the_shell_is_awful_and_what_you_can_do_about_it.html" rel="alternate"></link><published>2022-07-26T08:00:00-04:00</published><updated>2022-07-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-26:/2022_07_26-bashing_the_bash_the_shell_is_awful_and_what_you_can_do_about_it.html</id><summary type="html">&lt;p&gt;A presentation I did recently.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/slott56/bashing-the-bash"&gt;https://github.com/slott56/bashing-the-bash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks were polite and didn't have too many questions. I guess they
fundamentally agreed: the shell is awful, we can use it for a few
things.&lt;/p&gt;
&lt;p&gt;Safe Shell Scripts Stay Simple: Set the environment, Start the
application.
---------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;The Seven S's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A presentation I did recently.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/slott56/bashing-the-bash"&gt;https://github.com/slott56/bashing-the-bash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks were polite and didn't have too many questions. I guess they
fundamentally agreed: the shell is awful, we can use it for a few
things.&lt;/p&gt;
&lt;p&gt;Safe Shell Scripts Stay Simple: Set the environment, Start the
application.
---------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;The Seven S's of shell scripting.&lt;/p&gt;
&lt;p&gt;Many many thanks to &lt;a class="reference external" href="https://codeandsupply.co"&gt;Code &amp;amp; Supply&lt;/a&gt; for
hosting me.&lt;/p&gt;
</content><category term="Technologies"></category><category term="bash"></category><category term="#python"></category><category term="shell"></category></entry><entry><title>I've got a great Proof-of-Concept. How do I go forward with it?</title><link href="https://slott56.github.io/2022_07_19-ive_got_a_great_proof_of_concept_how_do_i_go_forward_with_it.html" rel="alternate"></link><published>2022-07-19T08:00:00-04:00</published><updated>2022-07-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-19:/2022_07_19-ive_got_a_great_proof_of_concept_how_do_i_go_forward_with_it.html</id><summary type="html">&lt;p&gt;This is the best part about Python -- you can build something quickly.
And it really works.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;What are the next steps?&lt;/p&gt;
&lt;p&gt;While there are a *lot* of possibilities, I'm focused on an
&amp;quot;enterprise work group&amp;quot; application that involves a clever web
service/RESTful API built in Flask. Maybe with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the best part about Python -- you can build something quickly.
And it really works.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;What are the next steps?&lt;/p&gt;
&lt;p&gt;While there are a *lot* of possibilities, I'm focused on an
&amp;quot;enterprise work group&amp;quot; application that involves a clever web
service/RESTful API built in Flask. Maybe with NLP.&lt;/p&gt;
&lt;p&gt;Let me catalog a bunch of things you might want to think about to
&amp;quot;productionize&amp;quot; your great idea. Here's a short list to get started.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;File System Organization&lt;/li&gt;
&lt;li&gt;Virtual Environments&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;Integration Testing&lt;/li&gt;
&lt;li&gt;Acceptance Testing&lt;/li&gt;
&lt;li&gt;Static Analysis&lt;/li&gt;
&lt;li&gt;Tool Chain&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Let's dive into each one of these. Then we'll look at Flask
deployments.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="file-system-organization"&gt;
&lt;h2&gt;File System Organization&lt;/h2&gt;
&lt;p&gt;When you're gotten something to work, the directory in which it works
is sometimes not organized ideally. There are a lot of ways to do
this, but what seems to work well is a structure like the following.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some parent directory. Often in Git&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; -- your code is here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests&lt;/tt&gt; -- your tests are here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; -- your documentation will be here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; -- the list of packages to install. Exact,&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;requirements-dev.txt&lt;/span&gt;&lt;/tt&gt; -- the list of packages used for maintenance and development&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;environment.yml&lt;/tt&gt; -- another list of packages in conda format&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pyproject.toml&lt;/tt&gt; -- this has your tox setup in it&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; -- sometimes helpful&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that a lot of packages you see have a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;.  This is
&lt;strong&gt;only&lt;/strong&gt; needed if you're going open source your code. For
enterprise projects, this is not the first thing you will focus on.
Ignore it, for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h2&gt;Virtual Environments&lt;/h2&gt;
&lt;p&gt;When you're developing in Python you may not even worry about virtual
environments. You have Python. It works. You downloaded NLP and Flask.
You put things together and they work.&lt;/p&gt;
&lt;p&gt;The trick here is the Python ecosystem is vast, and you have (without
really observing it closely) likely downloaded a lot of projects.
Projects that depend on projects.&lt;/p&gt;
&lt;p&gt;You can't trust your current environment to be reliable or repeatable.
You'll need to use a virtual environment manager of some kind.&lt;/p&gt;
&lt;p&gt;Python's built-in virtual environment manager &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; is readily
available and works nicely.
See &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;https://docs.python.org/3/library/venv.html&lt;/a&gt;  It's my second choice.&lt;/p&gt;
&lt;p&gt;My first choice is &lt;strong&gt;conda&lt;/strong&gt;. Start with
&lt;strong&gt;miniconda&lt;/strong&gt;. &lt;a class="reference external" href="https://docs.conda.io/en/latest/miniconda.html"&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;. Use this
to assemble your environment and retest your application to be sure
you've got everything.&lt;/p&gt;
&lt;p&gt;You'll be creating (and destroying) virtual environments until you get
it right. They're cheap. They don't impact your code in any way. Feel
free to make mistakes.&lt;/p&gt;
&lt;p&gt;When it works, build conda's environment.yml file and the
requirements.txt files. This will rebuild the environment.  You'll use
them with &lt;strong&gt;tox&lt;/strong&gt; for testing.&lt;/p&gt;
&lt;p&gt;If you don't use conda, you'll omit the environment.yml.  Nothing else
will change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing"&gt;
&lt;h2&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;Of course, you'll need automated unit tests. You'll want 100% code
coverage. You *really* want 100% logic path coverage, but that's
aspirational. 100% code coverage is a lot of work and uncovers enough
problems that the extra testing for all logic paths seems unhelpful.&lt;/p&gt;
&lt;p&gt;You have two built-in unit testing toolsets: doctest and unittest. I
like doctest. &lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;https://docs.python.org/3/library/doctest.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You'll want to get &lt;strong&gt;pytest&lt;/strong&gt; and the &lt;strong&gt;pytest-cov&lt;/strong&gt; add-on
package. &lt;a class="reference external" href="https://docs.pytest.org/en/6.2.x/contents.html"&gt;https://docs.pytest.org/en/6.2.x/contents.html&lt;/a&gt;  &lt;a class="reference external" href="https://pytest-cov.readthedocs.io/en/latest/"&gt;https://pytest-cov.readthedocs.io/en/latest/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your test modules go in the tests directory. You know you've done it
right when you can use the &lt;strong&gt;pytest&lt;/strong&gt; command at the command line and it
finds (and runs) all your tests.&lt;/p&gt;
&lt;p&gt;This is part of your requirements-dev.txt file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-testing"&gt;
&lt;h2&gt;Integration Testing&lt;/h2&gt;
&lt;p&gt;This is unit testing without so many mocks. I recommend using pytest for
this, also. The difference is that your &amp;quot;fixtures&amp;quot; will be much more
complex. Files. Databases. Flask Clients. Certificates. Maybe starting
multiple services. All kinds of things that have a complex setup and
perhaps a complex teardown, also.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://docs.pytest.org/en/6.2.x/fixture.html#yield-fixtures-recommended"&gt;https://docs.pytest.org/en/6.2.x/fixture.html#yield-fixtures-recommended&lt;/a&gt;
for good ways to handle this more complex setup and teardown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acceptance-testing"&gt;
&lt;h2&gt;Acceptance Testing&lt;/h2&gt;
&lt;p&gt;Depending on the community of users, it may be necessary to provide
automated acceptance tests. For this, I recommend &lt;strong&gt;behave&lt;/strong&gt;.
&lt;a class="reference external" href="https://behave.readthedocs.io/en/stable/"&gt;https://behave.readthedocs.io/en/stable/&lt;/a&gt; You're can write the test cases
in the Gherkin language. This language is open-ended, and many
stakeholders can contribute to the test cases. It's not easy to get
consensus sometimes, and a more formal Gherkin test case lets people
debate, come to an agreement, and prioritize the features and scenarios
they need to see.&lt;/p&gt;
&lt;p&gt;This is part of your requirements-dev.txt file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-analysis"&gt;
&lt;h2&gt;Static Analysis&lt;/h2&gt;
&lt;p&gt;This is an extra layer of checking to be sure best practices are being
followed. There are a variety of tools for this. You *always* want to
process your code through
&lt;strong&gt;black&lt;/strong&gt;. &lt;a class="reference external" href="https://black.readthedocs.io/en/stable/"&gt;https://black.readthedocs.io/en/stable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some folks love &lt;strong&gt;isort&lt;/strong&gt; for putting the imports into a canonical
order.  &lt;a class="reference external" href="https://pycqa.github.io/isort/"&gt;https://pycqa.github.io/isort/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flake8&lt;/strong&gt; should be used to be sure there's no obviously bad
programming practices. &lt;a class="reference external" href="https://flake8.pycqa.org/en/latest/"&gt;https://flake8.pycqa.org/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm a huge fan of type hints. I consider &lt;strong&gt;mypy&lt;/strong&gt; to be
essential. &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/"&gt;https://mypy.readthedocs.io/en/stable/&lt;/a&gt;  I prefer &amp;quot;--strict&amp;quot;
mode, but that can be a high bar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tool-chain"&gt;
&lt;h2&gt;Tool Chain&lt;/h2&gt;
&lt;p&gt;You can try to manage this with &lt;strong&gt;make&lt;/strong&gt;. But don't.&lt;/p&gt;
&lt;p&gt;Download &lt;strong&gt;tox&lt;/strong&gt;, instead.  &lt;a class="reference external" href="https://tox.wiki/en/latest/index.html"&gt;https://tox.wiki/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The point of tox is to combine virtual environment setup with testing in
that virtual environment. You can -- without too much pain -- define
multiple virtual environments. You can then test the various releases of
the various packages your project depends on in various combinations.
This is how to manage a clean upgrade.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Figure out the new versions.&lt;/li&gt;
&lt;li&gt;Setup tox to test existing and new.&lt;/li&gt;
&lt;li&gt;Run tox.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I often set the tox commands to run black first, then unit testing, then
static analysis, ending with mypy --strict.&lt;/p&gt;
&lt;p&gt;When the code is reformatted by black, it's technically a build failure.
(You should have run &lt;strong&gt;black&lt;/strong&gt; manually before running &lt;strong&gt;tox&lt;/strong&gt;.)
When &lt;strong&gt;tox&lt;/strong&gt; works cleanly, you're ready to commit and push and pull
request and merge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Not an after-thought.&lt;/p&gt;
&lt;p&gt;For human documents, use Sphinx. &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;https://www.sphinx-doc.org/en/master/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Put docstrings in every package, every module, every class, every
method, and every function. Summarize *what* and *why*. (Don't
explain *how*: people can read your code.)&lt;/p&gt;
&lt;p&gt;Use the autodoc feature to create the API reference documentation from
the code. Start with this.&lt;/p&gt;
&lt;p&gt;Later, you can write a README, and some explanations, and installation
instructions, and all the things other people expect to see.&lt;/p&gt;
&lt;p&gt;For a RESTful API, be sure to write an OpenAPI specification and be sure
to test against that spec. &lt;a class="reference external" href="https://www.openapis.org"&gt;https://www.openapis.org&lt;/a&gt;. While a lot of the
examples are complicated, you can easily use a small subset to describe
your documents, the validation rules, and the transactions. You can add
the security details later. They're part of your web server, but they
don't need an extensive OpenAPI documentation at the beginning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flask-deployments"&gt;
&lt;h2&gt;Flask Deployments&lt;/h2&gt;
&lt;p&gt;Some folks like to define a flask application that can be installed in
the Python virtual environment. This means the components are on the
default &lt;tt class="docutils literal"&gt;sys.path&lt;/tt&gt; without any &amp;quot;extra&amp;quot; effort. (It's a fair amount of
effort to begin with. I'm not sure it's worth it.)&lt;/p&gt;
&lt;p&gt;When you run a flask app, you'll be using some kind of engine. NGINX,
uWSGI, GUnicorn, etc. (GUnicorn is very nice. &lt;a class="reference external" href="https://gunicorn.org"&gt;https://gunicorn.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://flask.palletsprojects.com/en/2.0.x/deploying/wsgi-standalone/"&gt;https://flask.palletsprojects.com/en/2.0.x/deploying/wsgi-standalone/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In all cases, these engines will &amp;quot;wrap&amp;quot; your Flask application. You'll
want to make your application visible by setting the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;
environment variable, naming your &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; directory. Do not run from
your project's directory.&lt;/p&gt;
&lt;p&gt;You will have the engine running in some distinct &lt;tt class="docutils literal"&gt;/opt/the_app&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;/Users/the_app&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;/usr/home/the_app&lt;/tt&gt; or some such directory,
unrelated to where the code lives. You'll use GUnicorns command-line
options to locate your app, wherever it lives on the filesystem.
GUnicorn will use &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; to find your app. Since web servers
often run as nobody, you'll need to make sure your code base is
readable. But. Not. Writable.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="enterprise"></category><category term="#python"></category></entry><entry><title>The Enterprise COBOL Conundrum</title><link href="https://slott56.github.io/2022_07_12-the_enterprise_cobol_conundrum.html" rel="alternate"></link><published>2022-07-12T08:00:00-04:00</published><updated>2022-07-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-12:/2022_07_12-the_enterprise_cobol_conundrum.html</id><summary type="html">&lt;p&gt;Enterprise COBOL is both a liability and an asset. There's tangible
value hidden in the code.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/looking-at-cobol"&gt;https://github.com/slott56/looking-at-cobol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've tweaked the presentation a little.&lt;/p&gt;
&lt;p&gt;The essential ingredients in coping with COBOL are these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use something like &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt; to parse COBOL
DDE's and process the data …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Enterprise COBOL is both a liability and an asset. There's tangible
value hidden in the code.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/looking-at-cobol"&gt;https://github.com/slott56/looking-at-cobol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've tweaked the presentation a little.&lt;/p&gt;
&lt;p&gt;The essential ingredients in coping with COBOL are these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use something like &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt; to parse COBOL
DDE's and process the data in the native format.&lt;/li&gt;
&lt;li&gt;Analyze the Job Control Language (JCL) to work out the directed
acyclic graph (DAG) that leads to file and database updates. These
&amp;quot;master&amp;quot; files and databases are the data artifacts that matter most.
This is the value-creating processing. There aren't many of these
files.&lt;/li&gt;
&lt;li&gt;Create a process to clone those files, and write Python data access
modules to process the data. This is a two-way process. You'll be
shipping files from your Z/OS world to another server running Python.
In some cases, files will need to come back to Z/OS to permit legacy
processing to continue.&lt;/li&gt;
&lt;li&gt;Work backwards through the DAG to understand the COBOL apps that
update the master files. These can be rewritten as Python apps that
consume transactions and update master files/databases. Transfer
transaction files out of Z/OS to a server doing the Python
processing. Either update a shared database or send updated master
files back to Z/OS if there's further processing that needs an
updated master.&lt;/li&gt;
&lt;li&gt;Continue working backwards through the DAG, replacing COBOL with
Python until you've found source files for the transactions. Expect
to find transaction validation programs as well as transaction
analytics or reporting. The validations are useful; the analytics and
reporting can be replaced with simpler, more modern tools.&lt;/li&gt;
&lt;li&gt;When there's no more legacy processing that depends on a given master
file or database, then the Z/OS can be formally decommissioned. Have
a party.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is relatively low risk work. It's high value. The COBOL code
encodes enterprise knowledge. Preserving this knowledge in a more modern
language is a value-maintaining exercise. Indeed, the improved clarity
may be a value-creating exercise.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="COBOL"></category><category term="stingray reader"></category></entry><entry><title>Revised Understanding --&gt; Revised Data Structures --&gt; Revised Type Hints</title><link href="https://slott56.github.io/2022_07_05-revised_understanding_revised_data_structures_revised_type_hints.html" rel="alternate"></link><published>2022-07-05T08:00:00-04:00</published><updated>2022-07-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-05:/2022_07_05-revised_understanding_revised_data_structures_revised_type_hints.html</id><summary type="html">&lt;p&gt;My literate programming tool, pyWeb, has moved to version 3.1 --
supporting modern Python.&lt;/p&gt;
&lt;p&gt;Next up, version 3.2. This is a massive reworking of the data structures
involved. The rework lets me use Jinja2 for templates. There's a lot of
fiddliness to getting the end-of-line spacing right. Jinja has …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My literate programming tool, pyWeb, has moved to version 3.1 --
supporting modern Python.&lt;/p&gt;
&lt;p&gt;Next up, version 3.2. This is a massive reworking of the data structures
involved. The rework lets me use Jinja2 for templates. There's a lot of
fiddliness to getting the end-of-line spacing right. Jinja has the
following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for construct in container -%}
{{construct}}
{%- endfor %}
&lt;/pre&gt;
&lt;p&gt;The easy-to-overlook hyphens suppress spacing, allowing the construct to
be spread onto multiple lines without introducing extra newlines into
the output. This makes it a little easier to debug the templates.&lt;/p&gt;
&lt;p&gt;It now works. But. Until I get past strict type checks, there's no
reason for calling it done.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Found 94 errors in 1 file (checked 3 source files)
&lt;/pre&gt;
&lt;p&gt;The bulk of the remaining problems seem to be new methods where I forgot
to include a type hint. The more pernicious problems are places where I
have inconsistent hints and Liskov substitution problems. The worst a
places where I had a last-minute change change and switched from &lt;tt class="docutils literal"&gt;str&lt;/tt&gt;
to &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; and did not actually follow-through and make required
changes.&lt;/p&gt;
&lt;p&gt;The biggest issue?&lt;/p&gt;
&lt;p&gt;When building an AST, it's common to have a union of a wide variety of
types. This union often has a discriminator value to separate
&lt;tt class="docutils literal"&gt;NamedChunk&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;OutputChunk&lt;/tt&gt;. This is &amp;quot;type narrowing&amp;quot; and there
are a variety of approaches. I think my best choice is a &lt;tt class="docutils literal"&gt;TypeGuard&lt;/tt&gt;
declaration. This is new to me, so I've got to do some learning before I
can properly define the required type guard function(s).
(See &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/type_narrowing.html#user-defined-type-guards"&gt;https://mypy.readthedocs.io/en/stable/type_narrowing.html#user-defined-type-guards&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I'm looking forward (eagerly) to finishing the cleanup.&lt;/p&gt;
&lt;p&gt;The problem is that I'm -- also -- working on the updates to &lt;a class="reference external" href="https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=packt+functional+python+programming+2e&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8"&gt;Functional
Python
Programming&lt;/a&gt;.
The PyWeb project is a way to relax my brain from editing the book.&lt;/p&gt;
&lt;p&gt;Which means the pyWeb updates have to wait for Chapter 4 and 5 edits.
(Sigh.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>Massive Rework of Data Structures</title><link href="https://slott56.github.io/2022_06_28-massive_rework_of_data_structures.html" rel="alternate"></link><published>2022-06-28T08:00:00-04:00</published><updated>2022-06-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-28:/2022_06_28-massive_rework_of_data_structures.html</id><summary type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html"&gt;My Shifting Understanding and A Terrible Design
Mistake&lt;/a&gt;,
I had a design that focused on serialization instead of proper modeling
of the objects in question.&lt;/p&gt;
&lt;p&gt;Specifically, I didn't start with a suitable abstract syntax tree (AST)
structure. I started with an algorithmic view of &amp;quot;weaving&amp;quot; and
&amp;quot;tangling …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html"&gt;My Shifting Understanding and A Terrible Design
Mistake&lt;/a&gt;,
I had a design that focused on serialization instead of proper modeling
of the objects in question.&lt;/p&gt;
&lt;p&gt;Specifically, I didn't start with a suitable abstract syntax tree (AST)
structure. I started with an algorithmic view of &amp;quot;weaving&amp;quot; and
&amp;quot;tangling&amp;quot; to transform a WEB of definitions into documentation and
code. The weaving and tangling are two of the three distinct
serializations of a common AST.&lt;/p&gt;
&lt;p&gt;The third serialization is the common source format that underpins the
WEB of definitions. Here's an example that contains a number of
definitions and a tangled output file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Fast Exponentiation
===================

A classic divide-and-conquer algorithm.

&amp;#64;d fast exp &amp;#64;{
def fast_exp(n: int, p: int) -&amp;gt; int:
    match p:
        case 0:
            return 1
        case _ if p % 2 == 0:
            t = fast_exp(n, p // 2)
            return t * t
        case _ if p % 1 == 0:
            return n * fast_exp(n, p - 1)
&amp;#64;| fast_exp
&amp;#64;}

With a test case.

&amp;#64;d test case &amp;#64;{
&amp;gt;&amp;gt;&amp;gt; fast_exp(2, 30)
1073741824
&amp;#64;}

&amp;#64;o example.py &amp;#64;{
&amp;#64;&amp;lt; fast exp &amp;#64;&amp;gt;

__test__ = {
    &amp;quot;test 1&amp;quot;: '''
&amp;#64;&amp;lt; test case &amp;#64;&amp;gt;
    '''
}
&amp;#64;| __test__
&amp;#64;}

Use ``python -m doctest`` to test.

Macros
------

&amp;#64;m

Names
-----

&amp;#64;u
&lt;/pre&gt;
&lt;p&gt;This example uses RST as the markup language for the woven document. A
tool can turn this simplified document into complete RST with
appropriate wrappers around the code blocks. The tool can also weave the
&lt;tt class="docutils literal"&gt;example.py&lt;/tt&gt; file from the source document.&lt;/p&gt;
&lt;p&gt;The author can focus on exposition, explaining the algorithm. The reader
gets the key points without the clutter of programming language
overheads and complications.&lt;/p&gt;
&lt;p&gt;The compiler gets a tangled source.&lt;/p&gt;
&lt;p&gt;The key point is to have a tool that's (mostly) agnostic with respect to
programming language and markup language. Being fully agnostic isn't
possible, of course. The &lt;tt class="docutils literal"&gt;&amp;#64;d name &amp;#64;{code&amp;#64;}&lt;/tt&gt; constructs are transformed
into markup blocks of some sophistication. The &lt;tt class="docutils literal"&gt;&amp;#64;&amp;lt;name&amp;#64;&amp;gt;&lt;/tt&gt; becomes a
hyperlink, with suitable markup. Similarly, the cross
reference-generating commands, &lt;tt class="docutils literal"&gt;&amp;#64;m&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;#64;u&lt;/tt&gt;, generate a fair amount
of markup content.&lt;/p&gt;
&lt;p&gt;I now have Jinja templates to do this in RST. I'll also have to provide
LaTeX and HTML. Further, I need to provide generic LaTeX along with
LaTeX I can use with PacktPub's LaTeX publishing pipeline. But let's not
look too far down the road. First things first.&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Here's today's progress measurement.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==================== 67 failed, 13 passed, 1 error in 1.53s ====================
&lt;/pre&gt;
&lt;p&gt;This comforts me a great deal. Some elements of the original structure
still work. There are two kinds of failures: new test fixtures that
require &lt;tt class="docutils literal"&gt;TestCase.setUp()&lt;/tt&gt; methods, and tests for features that are no
longer part of the design.&lt;/p&gt;
&lt;p&gt;In order to get the refactoring to a place where it would even run, I
had to incorporate some legacy methods that -- it appears -- will
&lt;em&gt;eventually&lt;/em&gt; become dead code. It's not totally dead, yet, because I'm
still mid-way through the refactoring.&lt;/p&gt;
&lt;p&gt;But. I'm no longer beating back and forth trying to see if I've got a
better design. I'm now on the downwind broad reach of finding and fixing
the 67 test cases that are broken.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Test-Driven Development"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>My Shifting Understanding and A Terrible Design Mistake</title><link href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html" rel="alternate"></link><published>2022-06-21T08:00:00-04:00</published><updated>2022-06-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-21:/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html</id><summary type="html">&lt;p&gt;I've been fascinated by Literate Programming forever.&lt;/p&gt;
&lt;p&gt;I have two utterly divergent takes on this.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt; for one.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for another.&lt;/p&gt;
&lt;p&gt;And yet, I've still done a really bad design job. Before we get to the
design, a little bit …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been fascinated by Literate Programming forever.&lt;/p&gt;
&lt;p&gt;I have two utterly divergent takes on this.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt; for one.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for another.&lt;/p&gt;
&lt;p&gt;And yet, I've still done a really bad design job. Before we get to the
design, a little bit of back story.&lt;/p&gt;
&lt;div class="section" id="back-story"&gt;
&lt;h2&gt;Back Story&lt;/h2&gt;
&lt;p&gt;Why two separate literate programming projects? Because it's not
&lt;strong&gt;clear&lt;/strong&gt; what's best. It's a field without too many boundaries and a
lot of questions about the value produced.&lt;/p&gt;
&lt;p&gt;PyLit I found, forked, and upgraded to Python 3. I didn't design it.
It's far more clever than something I'd design.&lt;/p&gt;
&lt;p&gt;Py-Web-Tool is something I wrote based on using a whole bunch of tools
that follow along behind the original WEB tools. Nothing to do with web
servers or web.py.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem-domain"&gt;
&lt;h2&gt;The Problem Domain&lt;/h2&gt;
&lt;p&gt;The design problem is, in retrospect, pretty obvious. I set it out here
as a cautionary tale.&lt;/p&gt;
&lt;p&gt;I'm looking at the markup languages for doing literate programming. The
idea is to have named blocks of code in your document, presented in an
order that makes sense to your reader. A tool will &amp;quot;weave&amp;quot; a document
from your source. It will also &amp;quot;tangle&amp;quot; source code by rearranging the
code snippets from presentation order into compiler-friendly order.&lt;/p&gt;
&lt;p&gt;This means you can present your core algorithm first, even though it's
buried in the middle of some module in the middle of your package.&lt;/p&gt;
&lt;p&gt;The presentation order is *not* tied to the order needed by your
language's toolchain.&lt;/p&gt;
&lt;p&gt;For languages like C this is huge freedom. For Python, it's not such a
gigantic win.&lt;/p&gt;
&lt;p&gt;The source material is a &amp;quot;web&amp;quot; of code and information about the code. A
web file may look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Important insight.

&amp;#64;d core feature you need to know about first &amp;#64;{
    def somecode() -&amp;gt; None:
        pass
&amp;#64;}

And see how this fits into a larger context?

&amp;#64;d something more expansive &amp;#64;{
def this() -&amp;gt; None:
    pass

def that() -&amp;gt; None:
    pass

&amp;#64;&amp;lt;core feature you need to know about first&amp;#64;&amp;gt;
&amp;#64;}

See how that works?
&lt;/pre&gt;
&lt;p&gt;This is easy to write and (relatively) easy to read. The
&lt;tt class="docutils literal"&gt;&amp;#64;&amp;lt;core feature you need to know about first&amp;#64;&amp;gt;&lt;/tt&gt; becomes a hyperlink in
the published documentation. So you can flip between the sections. It's
physically expanded inline to tangle the code, but you don't often need
to look at the tangled code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-design-question"&gt;
&lt;h2&gt;The Design Question&lt;/h2&gt;
&lt;p&gt;The essential Literate Programming tool is a compiler with two outputs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;woven&amp;quot; document with markup and such&lt;/li&gt;
&lt;li&gt;The &amp;quot;tangled&amp;quot; code files which are code, largely untouched, but
reordered.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've got four related problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Parsing the input&lt;/li&gt;
&lt;li&gt;An AST we can process&lt;/li&gt;
&lt;li&gt;Emitting tangled output from the AST&lt;/li&gt;
&lt;li&gt;Emitting woven output form the AST&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or, we can look at it as three classic problems: deserialization, AST
representation, and serialization. Additionally, we have two distinct
serialization alternatives.&lt;/p&gt;
&lt;p&gt;What did I do?&lt;/p&gt;
&lt;p&gt;I tackled serialization first. Came up with a cool bunch of classes and
methods to serialize the two kinds of documents.&lt;/p&gt;
&lt;p&gt;Then I wrote the deserialization (or parsing) of the source WEB file.
This is pretty easy, since the markup is designed to be as trivial as
possible.&lt;/p&gt;
&lt;p&gt;The representation is little more than glue between the two.&lt;/p&gt;
&lt;p&gt;What a mistake.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-wrong-answer"&gt;
&lt;h2&gt;A Wrong Answer&lt;/h2&gt;
&lt;p&gt;Focusing on serialization was an epic mistake.&lt;/p&gt;
&lt;p&gt;I want to try using
&lt;a class="reference external" href="https://jinja.palletsprojects.com/en/3.1.x/"&gt;Jinja2&lt;/a&gt; for the markup
templates instead of
&lt;a class="reference external" href="https://docs.python.org/3/library/string.html#template-strings"&gt;string.Template&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;My AST was such a bad hack job it was essentially impossible to use it.
It was a quagmire of inconsistent ad-hoc methods to solve a specific
serialization issue.&lt;/p&gt;
&lt;p&gt;As I start down the Jinja road, I found a need to be able to build an
AST without the overhead of parsing.&lt;/p&gt;
&lt;p&gt;Which caused me to realize that the AST was -- while structurally
sensible -- far from the simple ideal.&lt;/p&gt;
&lt;p&gt;What's the ideal?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-right-answer"&gt;
&lt;h2&gt;The Right Answer&lt;/h2&gt;
&lt;p&gt;This ideal AST is something that lets me build test fixtures like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
example = Web(
   chunks=[
       TextChunk(&amp;quot;\n&amp;quot;),
       NamedCodeChunk(name=&amp;quot;core feature you need to know about first&amp;quot;, lines=[&amp;quot;def someconme() -&amp;gt; None: ...&amp;quot;, &amp;quot;pass&amp;quot;])),
       TextChunk(&amp;quot;\nAnd see how this fits into a larger context?\n&amp;quot;),
       NamedCodeChunk(name=&amp;quot;something more expansive&amp;quot;, lines=[etc. etc.])
   ]
)
&lt;/pre&gt;
&lt;p&gt;Here's my test for usability: I can build the AST &amp;quot;manually&amp;quot; without a
parser.&lt;/p&gt;
&lt;p&gt;The parser can build one, also, but I can build it as a sensible,
readable, first-class Python object.&lt;/p&gt;
&lt;p&gt;This has pointed me to a better design for the overall constructs of the
WEB source document. Bonus. It's helping me define Jinja templates that
can render this as a sensible woven document.&lt;/p&gt;
&lt;p&gt;Tangling does not need Jinja. It's simpler. And -- by convention -- the
tangled code does not have anything injected into it. The woven code is
in a markup language (Markdown, RST, HTML, LaTeX, ASCII DOC, whatever)
and some markup is required to create hyperlinks and code sections.
Jinja is super helpful here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The essence of the problem is rarely serialization or deserialization.&lt;/dt&gt;
&lt;dd&gt;It's the internal representation.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="when-learning-how-to-use-a-word-processor-it-turn"&gt;
&lt;h2&gt;When learning how to use a word processor, it turn...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2022-07-16 13:24:35.832000-04:00&lt;/p&gt;
&lt;p&gt;When learning how to use a word processor, it turns out the second word
processor you learn takes longer than the first. As you explore the
second one, the core ideas get contemplated and refined. The third one
on is just &amp;quot;where's the quick reference&amp;quot;. We do the same with rewriting
code, as you are discovering. One point of literate programming is to
explain the insights we gain.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="literate programming"></category><category term="jinja"></category><category term="pyWeb"></category><category term="PyLit3"></category></entry><entry><title>A LaTeX Thing I Did -- And A ToDo:</title><link href="https://slott56.github.io/2022_06_14-a_latex_thing_i_did_and_a_todo.html" rel="alternate"></link><published>2022-06-14T08:00:00-04:00</published><updated>2022-06-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-14:/2022_06_14-a_latex_thing_i_did_and_a_todo.html</id><summary type="html">&lt;p&gt;When writing about code in LaTeX, the essential strategy is to use an
environment to format the code so it stands out from surrounding text.
There are a few of these environments available as LaTeX add-on
packages. The three popular ones are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;verbatim&lt;/strong&gt;. I think this is built-in to LaTeX …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;When writing about code in LaTeX, the essential strategy is to use an
environment to format the code so it stands out from surrounding text.
There are a few of these environments available as LaTeX add-on
packages. The three popular ones are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;verbatim&lt;/strong&gt;. I think this is built-in to LaTeX. It's not very
clever, but it is simple to use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listings&lt;/strong&gt;. See &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Code_listing"&gt;https://www.overleaf.com/learn/latex/Code_listing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minted&lt;/strong&gt;.
See &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted"&gt;https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are nice for making code readable and distinct from the
surrounding text.&lt;/p&gt;
&lt;p&gt;A common way to talk about the code is to use inline verbatim
&lt;tt class="docutils literal"&gt;\verb|code|&lt;/tt&gt; sections. I prefer inline &lt;tt class="docutils literal"&gt;\lstinline|code|&lt;/tt&gt;, but, my
editor prefers &lt;tt class="docutils literal"&gt;\verb&lt;/tt&gt;. (I have trouble getting all the moving parts
of minted installed properly, so I use &lt;strong&gt;listings&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;Also. And more important.&lt;/p&gt;
&lt;p&gt;There's the
&lt;tt class="docutils literal"&gt;\lstinputlisting[language=Python, firstline=2, &lt;span class="pre"&gt;lastline=12]{some_module.py}&lt;/span&gt;&lt;/tt&gt;
command. This lets an author incorporate examples from working, tested
modules. Minted doesn't seem to have this, but it might work with an
&lt;tt class="docutils literal"&gt;\input&lt;/tt&gt; command. Don't know. Haven't tried.&lt;/p&gt;
&lt;p&gt;Let's talk about workflow.&lt;/p&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;The idea behind these tools is you have code and after that, you write
about the code. I call this &lt;strong&gt;code first&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Doing this means you can include code snippets from a file.&lt;/p&gt;
&lt;p&gt;Which is okay, but, there's another point of view: you have a document
that contains the code. This is closer to the Literate Programming POV.
I call this &lt;strong&gt;document first&lt;/strong&gt;. I've got all the code in the document
you're reading, I've just broken it up and spread it around in an order
to serve my purpose as a writer, not serve the limitations of a parser
or compiler.&lt;/p&gt;
&lt;p&gt;There is a development environment --
&lt;a class="reference external" href="https://texfaq.org/FAQ-webpkgs"&gt;WEB&lt;/a&gt; -- to create code that can be
run through the Weave and Tangle tools to create working code and usable
documentation. This is appealing in many ways.&lt;/p&gt;
&lt;p&gt;For now, I'm settling for the following workflow:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write the document with code samples. Use &lt;tt class="docutils literal"&gt;\lstlisting&lt;/tt&gt; environment
with explicit unique labels for each snippet. The idea is to focus on
the documentation with explanations.&lt;/li&gt;
&lt;li&gt;Write a Jinja template that references the code samples. This is a
lot of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{extract['lst:listing_1']}}&lt;/span&gt;&lt;/tt&gt; kind of references. There's a
bit more that can go in here, we'll return to the templates in a
moment.&lt;/li&gt;
&lt;li&gt;Run a tool to extract all the &lt;tt class="docutils literal"&gt;\lstlisting&lt;/tt&gt; environments to a
dictionary with the label as the key and the block of text as the
value. This serializes nicely as a JSON (or TOML or YAML) file. It
can even be pickled, but I prefer to be able to look at the file to
see what's in it.&lt;/li&gt;
&lt;li&gt;The tool to populate the template is a kind of trivial thing to build
a Jinja environment, load up the template, fill in the code samples,
and write the result.&lt;/li&gt;
&lt;li&gt;I can then use &lt;strong&gt;tox&lt;/strong&gt; (and &lt;strong&gt;doctest&lt;/strong&gt; and &lt;strong&gt;pytest&lt;/strong&gt; and &lt;strong&gt;mypy&lt;/strong&gt;)
to test the resulting module to be sure it works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This tangles code from a source document. There's no weave step, since
the source is already designed for publication. This does require me to
make changes to the LaTeX document I'm writing and run a &lt;tt class="docutils literal"&gt;make test&lt;/tt&gt;
command to extract, tangle, and test. This is not a huge burden. Indeed,
it's easy to implement in PyCharm, because the latest release of PyCharm
understands Makefiles and tox. Since each chapter is a distinct
environment, I can use &lt;tt class="docutils literal"&gt;tox &lt;span class="pre"&gt;-e&lt;/span&gt; ch01&lt;/tt&gt; to limit the testing to only the
chapter I'm working on.&lt;/p&gt;
&lt;p&gt;I like this because it lets me focus on explanation, not implementation
details. It helps me make sure that all the code in the book is fully
tested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-templates"&gt;
&lt;h2&gt;The Templates&lt;/h2&gt;
&lt;p&gt;The template files for an example module have these three kinds of code
blocks:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ordinary Listings. These fall into two subclasses.&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;Complete function or class definitions.&lt;/li&gt;
&lt;li&gt;Lines of code taken out of context.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;REPL Examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These have three different testing requirements. We'll start with the
&amp;quot;complete function or class definitions.&amp;quot;  For these, the template might
look like the following&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{extract['lst:listing_1']}}

def test_listing_1() -&amp;gt; None:
    assert listing_1(42)
    assert not listing_1(None)
&lt;/pre&gt;
&lt;p&gt;This has both the reference to the code in the text of the book and a
test case for the code.&lt;/p&gt;
&lt;p&gt;For lines of code out of context, we have to be more careful. We might
have this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def some_example(arg: int) -&amp;gt; bool:
    {{extract['lst:listing_2']}}

def test_listing_2() -&amp;gt; None:
    assert listing_2(42)
    assert not listing_2(None)
&lt;/pre&gt;
&lt;p&gt;This is similar to a complete definition, but it has a fiddly
indentation that needs to be properly managed, also. Jinja's generally
good about not inserting spaces. The template, however, is full of what
&lt;em&gt;could&lt;/em&gt; appear to be syntax errors, so the code editor &lt;strong&gt;could&lt;/strong&gt; have a
conniption with all those &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; blocks of code. They happen to be valid
Python set literals, so, they're tolerated. PyCharm's type checking
hates them.&lt;/p&gt;
&lt;p&gt;The REPL examples, look like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
REPL_listing_3 = &amp;quot;&amp;quot;&amp;quot;
{{extract['lst:listing_3']}}
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;I collect these into a &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; variable to make them easy for
doctest to find. The extra fussiness of  a &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; variable isn't
needed, but it provides a handy audit for me to make sure everything has
a home.&lt;/p&gt;
&lt;p&gt;The following line of code is in most (not all) templates.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
__test__ = {
    name: value
    for name, value in globals().items()
    if name.startswith(&amp;quot;REPL&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;This will locate all of the global variables with names starting with
REPL and put them in the &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; mapping. The REPL names then
become the test case names, making any test failures easier to spot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-goal"&gt;
&lt;h2&gt;My Goal&lt;/h2&gt;
&lt;p&gt;I do have some Literate Programming tools that I might be able to
leverage to make myself a Weaver that produces useful LaTeX my publisher
can work with. I should do this because it would be slightly simpler.
The problem is my Web/Weave/Tangle tooling has a bunch of dumb
assumptions about the weave and tangle outputs; a problem I really need
to fix.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;py-web-tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea here is to mimic other WEB-based tooling. These are the two
primary applications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Weave&lt;/strong&gt;. This makes documentation in a fairly transparent way from
the source. There are a bunch of substitutions required to fill in
HTML or LaTeX or Markdown or RST around the generic source. Right
now, this is pretty inept and almost impossible to configure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tangle&lt;/strong&gt;. This makes code from the source. The point here is the
final source file is not necessarily built in any &lt;em&gt;obvious&lt;/em&gt; order.
It's a tangle of things from the documentation, put into the order
required by parser or compiler or build system or whatever.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The weaving requires a better way to provide the various templates that
fill in missing bits. Markdown, for example, works well with fenced
blocks. RST uses a code directive that leads to an extra level of
indentation that needs to be carefully excised. Futher, most markup
languages have a mountain of cruft that goes around the content. This is
unpleasantly complex, and very much subject to odd little changes that
don't track against the content, but are part of the evolution of the
markup language.&lt;/p&gt;
&lt;p&gt;My going-in assumption on tangling was the document contained &lt;strong&gt;all&lt;/strong&gt;
the code. All of it. Without question or exception. For C/C++ this means
all the fiddly little pre-processor directives that add no semantic
clarity yet must be in the code file. This means the preprocessor
nonsense had to be relegated to an appendix of &amp;quot;yet more code that just
has to be there.&amp;quot;&lt;/p&gt;
&lt;p&gt;After writing a tangler to pull code from a book into a variety of
contexts, I'm thinking I need to have a tangler that works with a
template engine. I think there would be the following two use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;No-Template Case&lt;/strong&gt;. The WEB source is complete. This works well for
a lot of languages that don't have the kind of cruft that C/C++ has.
It generally means a WEB source document will contain definition(s)
for the final code file(s) as a bunch of references to the
previously-explained bits. For C/C++, this final presentation can
include the fiddly bits of preprocessor cruft.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template Case&lt;/strong&gt;. A template is used to with the source to create
the tangled output. This is what I have now for pulling book content
into a context where it is testable. For the most part, the template
files are quite small because the book includes test cases in the
form of REPL blocks. This presents a bit of a problem because it
breaks the &amp;quot;all in one place&amp;quot; principle of a WEB project. I have a
WEB source file with the visible content plus one or more templates
with invisible content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I like about this is an attempt to reduce some of the cruftiness of
the various tools.&lt;/p&gt;
&lt;p&gt;I think my py-web-tool might be expanded to handle my expanded
understanding of literate programming.&lt;/p&gt;
&lt;p&gt;I have a book to finish, first, though. Then I can look at improving my
workflow. (And yes, this is backwards from a properly Agile approach.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="literate programming"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Code so bad it causes me physical pain</title><link href="https://slott56.github.io/2022_05_23-code_so_bad_it_causes_me_physical_pain.html" rel="alternate"></link><published>2022-05-23T20:38:00-04:00</published><updated>2022-05-23T20:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-05-23:/2022_05_23-code_so_bad_it_causes_me_physical_pain.html</id><summary type="html">&lt;p&gt;Here's the code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def get_categories(file):
    &amp;quot;&amp;quot;&amp;quot;
    Get categories.
    &amp;quot;&amp;quot;&amp;quot;
    verify_file(file)

    categories = set()

    with open(file, &amp;quot;r&amp;quot;) as cat_file:
        while line := cat_file.readline().rstrip():
            categories.add(line)

    return categories
&lt;/pre&gt;
&lt;p&gt;To me this was terrible. truly and deeply horrifying. Let me count the
ways.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The docstring repeats the name of the function …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's the code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def get_categories(file):
    &amp;quot;&amp;quot;&amp;quot;
    Get categories.
    &amp;quot;&amp;quot;&amp;quot;
    verify_file(file)

    categories = set()

    with open(file, &amp;quot;r&amp;quot;) as cat_file:
        while line := cat_file.readline().rstrip():
            categories.add(line)

    return categories
&lt;/pre&gt;
&lt;p&gt;To me this was terrible. truly and deeply horrifying. Let me count the
ways.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The docstring repeats the name of the function providing no
additional information.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;verify_file()&lt;/tt&gt; function checks are pure, useless LBYL code. It
seemed designed to map a lot of detailed exceptions to a
&lt;tt class="docutils literal"&gt;RuntimeError&lt;/tt&gt;. Which is misleading.&lt;/li&gt;
&lt;li&gt;The use &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;readline()&lt;/tt&gt; to iterate through the lines of
a file is -- I guess -- reasonable if we're working Pascal or
Modula-2. But we're not. Use of the walrus operator isn't really
getting any bonus points because -- well -- this is terrible.&lt;/li&gt;
&lt;li&gt;While pathlib is used elsewhere in this module, it's not used here.
This function works with a filename string, assigned to the &lt;tt class="docutils literal"&gt;file&lt;/tt&gt;
parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Actually, taking a step back, it's not that the author is being
malicious. They just missed all the features of files and sets. And --
somehow -- were able to learn about the walrus operator while never
figuring out how files work.&lt;/p&gt;
&lt;p&gt;This is something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source = Path(&amp;quot;some_file.txt&amp;quot;)
with source.open() as source_file:
    categories = set(source_file)
&lt;/pre&gt;
&lt;p&gt;And that's it.&lt;/p&gt;
&lt;div class="section" id="it-gets-worse"&gt;
&lt;h2&gt;It Gets Worse&lt;/h2&gt;
&lt;p&gt;This was part of some category mapping application.&lt;/p&gt;
&lt;p&gt;They've got a CSV file with some string values. And they want to map
those string values to summary category values.&lt;/p&gt;
&lt;p&gt;Most folks think of a dictionary for a mapping from one string to
another string.&lt;/p&gt;
&lt;p&gt;The code I was sent -- I kid you not -- used a list of two-tuples. I'll
repeat that for those who are skimming. It use &lt;strong&gt;A LIST OF TWO-TUPLES
INSTEAD OF A DICTIONARY&lt;/strong&gt;.  It used a colossally bad search through an
unsorted list of tuples to find matches. (The only search that would
have been worse was random probes instead of iteration.)&lt;/p&gt;
&lt;p&gt;It really did.&lt;/p&gt;
&lt;p&gt;It can't even show you that code, it's such a horrifyingly bad design.&lt;/p&gt;
&lt;p&gt;They had a question. Was the looping over a list of two-tuples
ineffective? That's why they asked for help.&lt;/p&gt;
&lt;p&gt;It was like they had never heard of a dictionary. Nor seen a tutorial
with a dictionary. Nor read a book that mentioned dictionaries. They had
managed to learn enough Python to see the walrus operator without
hearing of dictionaries.&lt;/p&gt;
&lt;p&gt;A list of two-tuples, when provided to the &lt;tt class="docutils literal"&gt;dict()&lt;/tt&gt; function, will
make a dictionary. They were ignorant of this.&lt;/p&gt;
&lt;p&gt;A dictionary that does &lt;strong&gt;O&lt;/strong&gt;(1) lookups and avoids looping over a list
of two-tuples. This was a mystery to them..&lt;/p&gt;
&lt;p&gt;When someone doesn't know the Python dictionary exists, what is the
appropriate response?&lt;/p&gt;
&lt;p&gt;How can you politely say &amp;quot;Find another tutorial and do the ENTIRE thing
all of it!&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="that-s-not-all"&gt;
&lt;h2&gt;That's Not All&lt;/h2&gt;
&lt;p&gt;There's this nugget of &amp;quot;You can't be serious.&amp;quot;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
category_counts = {element: 0 for element in categories}
&lt;/pre&gt;
&lt;p&gt;And&lt;/p&gt;
&lt;pre class="literal-block"&gt;
category_counts[category] += 1
&lt;/pre&gt;
&lt;p&gt;Yes. They used a dictionary to count instances of the categories. They
did not understand &lt;tt class="docutils literal"&gt;collections.defaultdict&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;collections.Counter&lt;/tt&gt;. But they understood a dictionary well enough to
use it here. But not use it elsewhere for the central functionality of
the app.&lt;/p&gt;
&lt;p&gt;So. They couldn't use a dictionary, but could use a dictionary.&lt;/p&gt;
&lt;p&gt;They couldn't use the csv module, so they wrote their own (bad) CSV
parser.&lt;/p&gt;
&lt;p&gt;It's almost impossible to write a polite code review.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hopefully-you-have-tests-on-it-and-can-refactor-or"&gt;
&lt;h2&gt;Hopefully you have tests on it and can refactor or...&lt;/h2&gt;
&lt;p&gt;McSee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-10-19 13:03:56.467000-04:00&lt;/p&gt;
&lt;p&gt;Hopefully you have tests on it and can refactor or write it again from
scratch&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data structure"></category><category term="#python"></category></entry><entry><title>Python is a Bad Programming Language. Wait, wut?</title><link href="https://slott56.github.io/2022_05_23-python_is_a_bad_programming_language_wait_wut.html" rel="alternate"></link><published>2022-05-23T20:35:00-04:00</published><updated>2022-05-23T20:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-05-23:/2022_05_23-python_is_a_bad_programming_language_wait_wut.html</id><summary type="html">&lt;p&gt;It may help to read &lt;a class="reference external" href="https://medium.com/nerd-for-tech/python-is-a-bad-programming-language-2ab73b0bda5"&gt;Python is a Bad Programming
Language&lt;/a&gt;,
but it's not very useful.&lt;/p&gt;
&lt;p&gt;I shouldn't be tempted by click-bait headlines. But.  I am drawn in by
bad articles on Python.&lt;/p&gt;
&lt;p&gt;In particular, any post claiming Python is deficient causes me to look
for the concrete PEP's that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It may help to read &lt;a class="reference external" href="https://medium.com/nerd-for-tech/python-is-a-bad-programming-language-2ab73b0bda5"&gt;Python is a Bad Programming
Language&lt;/a&gt;,
but it's not very useful.&lt;/p&gt;
&lt;p&gt;I shouldn't be tempted by click-bait headlines. But.  I am drawn in by
bad articles on Python.&lt;/p&gt;
&lt;p&gt;In particular, any post claiming Python is deficient causes me to look
for the concrete PEP's that fix the problems.&lt;/p&gt;
&lt;p&gt;Interestingly, there never seem to be any PEP's in any article that
bashes Python. This post is yet another example of complaining without
offering any practical solutions.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;The article has a complaining tone, but, I can't figure out some of the
complaints. It lifts up a confusing collection of features from other
languages as if these features are somehow universally desirable. No
justification is provided. The author seems to rely exclusively on Stack
Overflow answers for information about Python. There are no PEP's
proposed to fix Python. There aren't even any examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="point-by-point"&gt;
&lt;h2&gt;Point-by-Point&lt;/h2&gt;
&lt;p&gt;I will try to address each point. It's difficult, because some of the
points are hard to discern. There's a lot of &amp;quot;Who thought that was a
good idea?&amp;quot; which isn't really a specific point that can be refuted.
It's a kind of rhetorical flourish that seems to work best with folks
that already agree.&lt;/p&gt;
&lt;p&gt;Let's start.&lt;/p&gt;
&lt;div class="section" id="a-fragmented-language"&gt;
&lt;h3&gt;A Fragmented Language&lt;/h3&gt;
&lt;p&gt;This is the result of profound confusion. It's hard to find anyone
recommending Python 2 anywhere. The supplied link is 9 years old, making
this comment extremely misleading.  (I'm being charitable. A nine-year
old link on Stack Overflow requires some curation. This is not a Python
problem.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ugly-object-orientation"&gt;
&lt;h3&gt;Ugly Object-Orientation&lt;/h3&gt;
&lt;p&gt;The inconsistent use of &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; in C++ and Java is lifted up as somehow
good. The consistent use of the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; instance variable in Python is
somehow less good; perhaps because it's consistent.&lt;/p&gt;
&lt;p&gt;&amp;quot;See how I have to both declare and initialize them in the constructor?
Another example of Python stupidity.&amp;quot; Um. No, I don't actually see you
&lt;em&gt;declare&lt;/em&gt; them anywhere. I guess you're unaware of what &lt;em&gt;declare&lt;/em&gt; means
in languages like C++ and why &lt;em&gt;declare&lt;/em&gt; isn't a thing in Python.&lt;/p&gt;
&lt;p&gt;Somehow using the &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword is better than &lt;tt class="docutils literal"&gt;__&lt;/tt&gt; name
mangling. I'm unclear on why it's better, it's simply stated in a way
that makes it sound like a long keyword used once is better because it's
better. No additional reason or justification is offered. The idea of
using __ to emphasize the privacy is somehow inconceivable.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; keywords are in C++, C#, and Java to
optimize recompilation. To an extent, this also permits distribution of
libraries in the form of &amp;quot;headers&amp;quot; and obfuscated binaries. None of this
makes sense in a Python context.  A single example of how the
&lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword would be helpful in Python is missing from the
original post. There are huge complications of the &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt;
keyword, also; these make the keywords more trouble than they are worth,
and any example needs to cover these issues, also.&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, when you point out any flaws in their language, Python
developers will act hostile and condescending.&amp;quot; Sorry, this complaint in
the original post sounds hostile and condescending. I'll try to ignore
the tone and stick to what content I can find.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whitespace"&gt;
&lt;h3&gt;Whitespace&lt;/h3&gt;
&lt;p&gt;&amp;quot;...how is using whitespace any better than curly braces?&amp;quot; has an
answer. But. Somehow it can't be chased down and included in the
original post. Whitespace (like name mangling) is described as wrong
because it's wrong, with no further justification provided.&lt;/p&gt;
&lt;p&gt;An example where braces seem to be essential for sorting out syntax
would be nice. The entire Python community is waiting for any example
where braces were &lt;strong&gt;necessary&lt;/strong&gt; and the indentation wasn't already
clear.&lt;/p&gt;
&lt;p&gt;&amp;quot;And only in Python will the difference between tabs and spaces cause
the interpreter to have a heart attack.&amp;quot; Um. A syntax error is a heart
attack? I wish I was able to type code without syntax errors. I am
humbled thinking about the idea of seeing syntax errors so rarely. I
have my editor set up to use spaces instead of tabs, and haven't had a
problem in 20 years of using Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-typing"&gt;
&lt;h3&gt;Dynamic Typing&lt;/h3&gt;
&lt;p&gt;The opening quote, &amp;quot;Dynamic typing is bad,&amp;quot; is stated as if it's
axiomatic. The rest of the paragraph seems like vitriol rather than
justification. &amp;quot;Some Python programmers have realized that dynamic
typing is bad&amp;quot; requires some justification; a link to some documentation
to support the claim would be helpful. An example would be good.&lt;/p&gt;
&lt;p&gt;I can only assume that code like this is important and needs to be
flagged by the compiler or something.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for data in some_list:
    if data == 42:
        print(&amp;quot;data is int&amp;quot;)
for data in some_other_list:
    if data == &amp;quot;wait&amp;quot;:
        print(&amp;quot;see the type of data changed.&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This seems like poor programming to begin with. Expecting the compiler
to reject this seems weak. It seems better to not reuse variable names
in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constants"&gt;
&lt;h3&gt;Constants&lt;/h3&gt;
&lt;p&gt;Not sure what the point is here. There's no justification for demanding
the inconsistent behavior of a one-time-only assignment statement.
There's no reference how how folks can use enums to define constant-like
names and values.&lt;/p&gt;
&lt;p&gt;The concluding paragraph &amp;quot;The Emperor Has Not Clothes&amp;quot; is some kind of
summary. It says &amp;quot;Python will only grow in popularity as more and more
software is written in it,&amp;quot; which does seem to be true. I think that
might be the single most useful sentence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-have-we-learned"&gt;
&lt;h2&gt;What Have We Learned?&lt;/h2&gt;
&lt;p&gt;First, reading a few Stack Overflow posts can be misleading. Python now
is not Python from nine years ago.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Everyone says to use Python3. Really. If you have found a Python2
tutorial, stop now. Don't follow it.&lt;/li&gt;
&lt;li&gt;The consistent use of the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; variable seems simpler than trying
to understand the rules for the &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; variable.&lt;/li&gt;
&lt;li&gt;Variables aren't &lt;em&gt;declared&lt;/em&gt;, they're assigned values. It's as simple
as it can be and avoids the clutter of variable declarations.&lt;/li&gt;
&lt;li&gt;We can read the source; the complexities of private (or protected)
instance variables doesn't really help.&lt;/li&gt;
&lt;li&gt;Python's use of whitespace is very simple; most people can indent
their code correctly. Anyone who's tried to debug C++ code that's
correctly indented but missing a (nearly invisible) } will agree that
the indentation is easier to get right.&lt;/li&gt;
&lt;li&gt;AFAICT, the reason dynamic typing might be bad is when a function or
class reuses the same variable name for multiple different types of
data. This seems wrong to reuse a variable name for multiple types. A
small effort at inspecting the code can prevent this.&lt;/li&gt;
&lt;li&gt;Constants are easily implemented via enum. But. They appear to be
useless in a dynamic language where the source is trivially available
to be changed. I'm not sure why they seem important to people. And
this article provides no help there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bottom line: Without concrete PEPs to fix things, or examples of what
better might look like, this is click-bait whining.&lt;/p&gt;
&lt;p&gt;Starting from C# or Java to locate deficiencies is just as wrong as
starting from Dartmouth Basic or FORTH as the standard against which
Python is measured.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="click-bait"></category></entry><entry><title>Pelican and Static Web Content</title><link href="https://slott56.github.io/2022_04_12-pelican_and_static_web_content.html" rel="alternate"></link><published>2022-04-12T08:00:00-04:00</published><updated>2022-04-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-04-12:/2022_04_12-pelican_and_static_web_content.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2022_03_01-static_site_blues.html"&gt;Static Site
Blues&lt;/a&gt;
I was wringing my hands over ways to convert a &lt;strong&gt;ton&lt;/strong&gt; of content from a
two different proprietary tools (the very old iWeb, and the merely old
Sandvox) into something I could work with.&lt;/p&gt;
&lt;p&gt;After a bit of fiddling around, I'm delighted with
&lt;a class="reference external" href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2022_03_01-static_site_blues.html"&gt;Static Site
Blues&lt;/a&gt;
I was wringing my hands over ways to convert a &lt;strong&gt;ton&lt;/strong&gt; of content from a
two different proprietary tools (the very old iWeb, and the merely old
Sandvox) into something I could work with.&lt;/p&gt;
&lt;p&gt;After a bit of fiddling around, I'm delighted with
&lt;a class="reference external" href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, of course, I had to extract all the iWeb and Sandvox content.
This was emphatically not fun. While both used XML, they used it in
subtly different ways. Apple's frameworks serialize internal state as
XML in a way that preserves a lot of semantic details. It also preserves
endless irrelevant details.&lt;/p&gt;
&lt;p&gt;I wound up with a Markdown data structure definition, plus a
higher-level &amp;quot;content model&amp;quot; with sites, pages, blogs, blog entries and
images. Plus the iWeb extractor and the Sandvox extractor. It's a lot of
code, much of which lacks solid unit test cases. It worked -- once --
and I was tolerant of the results.&lt;/p&gt;
&lt;p&gt;I also wound up writing tools to walk the resulting tree of Markdown
files doing some post-extraction cleanup. There's a lot of cleanup that
should be done.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;I can now add to the blog with the state of my voyaging. I've been able
to keep &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/"&gt;Team Red
Cruising&lt;/a&gt; up to date.&lt;/p&gt;
&lt;p&gt;Eventually (i.e., when the boat is laid up for Hurricane Season) I may
make an effort to clean up the older content and make it more
consistent. In particular, I need to add some annotations around
anchorages to make it possible to locate all of the legs of all of the
journeys. Since the HTML is what most people can see, that means a class
identifier for lat-lon pairs.&lt;/p&gt;
&lt;p&gt;As it is, the blog entries are *mostly* markdown. Getting images and
blockquotes even close to readable requires dropping to HTML to make
direct use of the bootstrap CSS. This also requires some comprehensive
cleanup to properly use the Bootstrap classes. (I think I've may have
introduced some misspelled CSS classes into the HTML that aren't doing
anything.)&lt;/p&gt;
&lt;p&gt;For now, however, it works. I'm still tweaking small things that require
republishing *all* the HTML.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="blogging"></category><category term="markdown"></category><category term="static site generator"></category></entry><entry><title>Static Site Blues</title><link href="https://slott56.github.io/2022_03_01-static_site_blues.html" rel="alternate"></link><published>2022-03-01T08:00:00-05:00</published><updated>2022-03-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-03-01:/2022_03_01-static_site_blues.html</id><summary type="html">&lt;p&gt;I have a very large, static site with 10+ years of stuff about my boat.
Most of it is pretty
boring. &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;http://www.itmaybeahack.com/TeamRedCruising/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started with iWeb. It was very -- well -- 2000-ish look and feel. Too
many pastels and lines and borders.&lt;/p&gt;
&lt;p&gt;In 2012, I switched to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a very large, static site with 10+ years of stuff about my boat.
Most of it is pretty
boring. &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;http://www.itmaybeahack.com/TeamRedCruising/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started with iWeb. It was very -- well -- 2000-ish look and feel. Too
many pastels and lines and borders.&lt;/p&gt;
&lt;p&gt;In 2012, I switched to Sandvox. I lived on a boat back then. I don't
have reliable internet. Using blogger.com, for example, required a
sincere commitment to bandwidth. I moved ashore in 2014 and returned to
the boat in 2020.&lt;/p&gt;
&lt;p&gt;Sandvox's creator seems to be out-of-business.&lt;/p&gt;
&lt;p&gt;What's next?&lt;/p&gt;
&lt;p&gt;Give up on these fancy editors and switch to a static site generator.
Write markdown. Run the tool. Upload when in a coffee shop with Wi-Fi.&lt;/p&gt;
&lt;p&gt;What site generator?&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.fullstackpython.com/static-site-generator.html"&gt;https://www.fullstackpython.com/static-site-generator.html&lt;/a&gt; for some
suggestions.&lt;/p&gt;
&lt;p&gt;There are three parts to this effort.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Extract the goodness from iWeb and Sandvox. I knew this would be real
work. iWeb's site has too much javascript to be easy-to-parse. I have
to navigate the underlying XML database. Sandvox is much easier to
deal with: their published site is clean, static HTML with useful
classes and ids in their tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reformat the source material into Markdown. I've grudgingly grown to
accept Markdown, even through RST is clearly superior. Some tools
work with RST and I may pandoc the entire thing over to RST from
Markdown. For now, though, the content seems to be captured.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fixup internal links and cross references. This is a godawful
problem. Media links -- in particular -- seem to be a nightmare.
Since iWeb resolves things via Javascript, the HTML is opaque.&lt;/p&gt;
&lt;p&gt;Fortunately, the database's internal cross-references aren't
horrible. Maybe this was exacerbated a poor choice of generators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Convert to HTML for a local server. Validate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Convert to HTML for the target server. Upload to a staging server and
validate again. This requires a coffee shop. Not doing this with my
phone's data plan.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Steps 1 and 2 aren't too bad. I've extracted serviceable markdown from
the iWeb database and the published Sandvox site. The material parallels
the Site/Blog/Page structure of the originals. The markdown seems to be
mostly error-free. (Some images have the caption in the wrong place,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;![caption](link)&lt;/span&gt;&lt;/tt&gt; isn't as memorable as I'd like.)&lt;/p&gt;
&lt;p&gt;Step 3, the internal links and cross-references, has been a difficult
problem, it turns out. I can, mostly, associate media with postings. I
can also find all the cross-references among postings and fix those up.
The question that arises is how to reference media from a blog post?&lt;/p&gt;
&lt;div class="section" id="mynt"&gt;
&lt;h2&gt;Mynt&lt;/h2&gt;
&lt;p&gt;I started with &lt;a class="reference external" href="https://mynt.uhnomoli.com"&gt;mynt&lt;/a&gt;. And had to bail.
It's clever and very simple. Too simple for blog posts that have a lot
of associated media assets.&lt;/p&gt;
&lt;p&gt;The issue is what to write in the markdown to refer to the images that
go with a specific blog post. I resorted to a master &lt;tt class="docutils literal"&gt;_Media&lt;/tt&gt;
directory. Which means each posting has
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;![caption][../../../../_Media/image.png)&lt;/span&gt;&lt;/tt&gt; in it.  This is
semi-manageable. But exasperating in bulk.&lt;/p&gt;
&lt;p&gt;What scrambled my brain is the way a mynt posting becomes a directory,
with an index.html. Clearly, the media could be adjacent to the
index.html. But. I can't figure out how to get mynt's generator to put
the media into each post's published directory. It seems like each post
should not be a markdown file.&lt;/p&gt;
&lt;p&gt;Also, I can trivially change the base URL when generating, but I can't
change the domain. When I publish, I want to swap domains *only*,
leaving the base URL alone. I tried. It's too much fooling around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;Pelican&lt;/h2&gt;
&lt;p&gt;Next up. &lt;a class="reference external" href="https://www.fullstackpython.com/pelican.html"&gt;Pelican&lt;/a&gt;.
We'll see if I can get my media and blog posts neatly organized.
This &lt;a class="reference external" href="http://chdoig.github.io/create-pelican-blog.html"&gt;http://chdoig.github.io/create-pelican-blog.html&lt;/a&gt; seems encouraging.
I think I should have started here first. Lektor is another possibility.&lt;/p&gt;
&lt;p&gt;Since my legacy sites have RSS feeds, it may be sensible to turn Pelican
loose on the RSS and (perhaps) skip steps 1, 2, and 3, entirely.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="#python"></category><category term="blogging"></category><category term="markdown"></category><category term="static site generator"></category></entry><entry><title>LaTeX Mysteries and an algorithmicx thing I learned.</title><link href="https://slott56.github.io/2022_02_15-latex_mysteries_and_an_algorithmicx_thing_i_learned.html" rel="alternate"></link><published>2022-02-15T08:00:00-05:00</published><updated>2022-02-15T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-15:/2022_02_15-latex_mysteries_and_an_algorithmicx_thing_i_learned.html</id><summary type="html">&lt;p&gt;I've been an on-and-off user of LaTeX since the very, very beginning.
Back in the dark days when the one laser printer that could render the
images was in a closely-guarded secret location to prevent everyone from
using it and exhausting the (expensive) toner cartridges.&lt;/p&gt;
&lt;p&gt;A consequence of this is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been an on-and-off user of LaTeX since the very, very beginning.
Back in the dark days when the one laser printer that could render the
images was in a closely-guarded secret location to prevent everyone from
using it and exhausting the (expensive) toner cartridges.&lt;/p&gt;
&lt;p&gt;A consequence of this is I think the various algorithm environments are
a ton of fun. Pseudo-code with math embedded in it. It's marvelous. It's
a pain in the neck with this clunky blogging package, so I can't easily
show off the coolness. But. You can go
to &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Algorithms"&gt;https://www.overleaf.com/learn/latex/Algorithms&lt;/a&gt; to see some examples.&lt;/p&gt;
&lt;p&gt;None of which have try/except blocks. Not a thing.&lt;/p&gt;
&lt;p&gt;Why not? I suspect it's because &amp;quot;algorithmic&amp;quot; meant &amp;quot;Algol-60&amp;quot; for
years. The language didn't have exceptions and so, the presentation of
algorithms continues to this day without exceptions.&lt;/p&gt;
&lt;p&gt;What can one do?&lt;/p&gt;
&lt;p&gt;This.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
\algblock{Try}{EndTry}
\algcblock[Try]{Try}{Except}{EndTry}
\algcblockdefx{Try}{Except}{EndTry}
   [1][Exception]{\textbf{except} \texttt{#1}}

\algrenewtext{Try}{\textbf{try}}
&lt;/pre&gt;
&lt;p&gt;This will extend the notation to add &lt;tt class="docutils literal"&gt;\Try&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;\Except&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;\EndTry&lt;/tt&gt; commands. I think I've done it all more-or-less correctly.
I'm vague on where the &lt;tt class="docutils literal"&gt;\algnotext{EndTry}&lt;/tt&gt; goes, but it seems to be
needed in each &lt;tt class="docutils literal"&gt;\Try&lt;/tt&gt; block to silence the &lt;tt class="docutils literal"&gt;\EndTry&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;As far as I know, I'm the only person who seems to care. There seems to
be little about this anywhere online. I'm guessing it's because the
basics work perfectly, and no one wants this kind of weird add-on.&lt;/p&gt;
</content><category term="Technologies"></category><category term="writing"></category><category term="latex"></category><category term="markup"></category></entry><entry><title>Desktop Notifications and EPIC DESIGN FAIL</title><link href="https://slott56.github.io/2022_02_08-desktop_notifications_and_epic_design_fail.html" rel="alternate"></link><published>2022-02-08T08:00:00-05:00</published><updated>2022-02-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-08:/2022_02_08-desktop_notifications_and_epic_design_fail.html</id><summary type="html">&lt;p&gt;I was asked to review code that -- well -- was evil.&lt;/p&gt;
&lt;p&gt;Not like &amp;quot;shabby&amp;quot; or &amp;quot;non-pythonic&amp;quot;. Nothing so simple as that.&lt;/p&gt;
&lt;p&gt;We'll get to the evil in a moment. First, we have to suffer two horrible
indignities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Busy Waiting&lt;/li&gt;
&lt;li&gt;Undefined Post-Conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll beat all three issues to death separately, starting with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was asked to review code that -- well -- was evil.&lt;/p&gt;
&lt;p&gt;Not like &amp;quot;shabby&amp;quot; or &amp;quot;non-pythonic&amp;quot;. Nothing so simple as that.&lt;/p&gt;
&lt;p&gt;We'll get to the evil in a moment. First, we have to suffer two horrible
indignities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Busy Waiting&lt;/li&gt;
&lt;li&gt;Undefined Post-Conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll beat all three issues to death separately, starting with busy
waiting.&lt;/p&gt;
&lt;div class="section" id="busy-waiting"&gt;
&lt;h2&gt;Busy Waiting&lt;/h2&gt;
&lt;p&gt;The Busy Waiting is a sleep-loop. If you're not familiar, it's this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
while something has not happened yet AND we haven't timed out:
    time.sleep(2)
&lt;/pre&gt;
&lt;p&gt;Which is often a dumb design. Busy waiting is polling. It's a lot of
pointless doing something while waiting for something else.&lt;/p&gt;
&lt;p&gt;There are dozens of message-passing and event-passing frameworks. Any of
those is better than this.&lt;/p&gt;
&lt;p&gt;Folks complain &amp;quot;Why install ZMQ when I could instead write a
busy-waiting loop?&amp;quot;&lt;/p&gt;
&lt;p&gt;Why indeed?&lt;/p&gt;
&lt;p&gt;For me, the primary reason is to avoid polling at fixed intervals, and
instead wait for the notification.&lt;/p&gt;
&lt;p&gt;The asyncio module, confusing as it is, is better than polling. Because
it dispatches events properly.&lt;/p&gt;
&lt;p&gt;This is minor compared with the undefined post-conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="undefined-post-conditions"&gt;
&lt;h2&gt;Undefined Post-Conditions&lt;/h2&gt;
&lt;p&gt;With this crap design, there are two events. There's a race between
them. One will win. The other will be silently lost forever.&lt;/p&gt;
&lt;p&gt;If &amp;quot;something has not happened&amp;quot; is false, the thing has happened. Yay.
The while statement ends.&lt;/p&gt;
&lt;p&gt;If &amp;quot;something has not happened&amp;quot; is true and the timeout occurs, then
Boo. The while statement ends.&lt;/p&gt;
&lt;p&gt;Note the there are two, unrelated post-conditions: the thing has
happened OR the timeout occurred. Is it possible for both to happen?
(hint: yes.)&lt;/p&gt;
&lt;p&gt;Ideally, the timeout and the thing happening are well-separated in time.&lt;/p&gt;
&lt;p&gt;Heh.&lt;/p&gt;
&lt;p&gt;Otherwise, they're coincident, and it's a coin-toss as to which one will
lead to completion of the while statement.&lt;/p&gt;
&lt;p&gt;The code I was asked to review made no provision for this unhappy
coincidence.&lt;/p&gt;
&lt;p&gt;Which leads us to the pure evil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pure-evil"&gt;
&lt;h2&gt;Pure Evil&lt;/h2&gt;
&lt;p&gt;What's pure evil about this is the very clear statement that there are
not enough desktop notification apps, and there's a need for another.&lt;/p&gt;
&lt;p&gt;I asked for justification. Got a stony silence.&lt;/p&gt;
&lt;p&gt;They might claim &amp;quot;It's only a little script that runs in the Terminal
Window,&amp;quot; which is garbage. There are already lots and lots of desktop
apps looking for asynchronous notification of events.&lt;/p&gt;
&lt;p&gt;Email is one of them.&lt;/p&gt;
&lt;p&gt;Do we really need another email-like message queue?&lt;/p&gt;
&lt;p&gt;(Hint: &amp;quot;My email is a lot of junk I ignore&amp;quot; is a personal problem, not a
software product description. Consider learning how to create filters
before writing yet another desktop app.)&lt;/p&gt;
&lt;p&gt;Some enterprises use Slack for notifications.&lt;/p&gt;
&lt;p&gt;What makes it even worse (I said it was pure evil) was a hint about the
context. They were doing batch data prep for some kind of
analytics/Machine Learning thing.&lt;/p&gt;
&lt;p&gt;They were writing this as if Luigi and related Workflow managers didn't
exist.&lt;/p&gt;
&lt;p&gt;Did they not know? If they were going to invent their own, they were off
to a really bad start. Really bad.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="notification"></category><category term="workflow"></category><category term="#python"></category></entry><entry><title>No one wins at Code Golf vs. This is more noise than signal</title><link href="https://slott56.github.io/2022_02_03-no_one_wins_at_code_golf_vs_this_is_more_noise_than_signal.html" rel="alternate"></link><published>2022-02-03T20:14:00-05:00</published><updated>2022-02-03T20:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-03:/2022_02_03-no_one_wins_at_code_golf_vs_this_is_more_noise_than_signal.html</id><summary type="html">&lt;p&gt;Looking at code. Came to a 20-line block of code that did exactly this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sorted(Path.cwd().glob(&amp;quot;some_pattern[1-9]*.*&amp;quot;), reverse=True)
&lt;/pre&gt;
&lt;p&gt;Twenty lines. Seriously.&lt;/p&gt;
&lt;p&gt;To be fair, 8 of the 20 lines were comments. 3 were blank. Which leaves
9 lines of code to perform the task of a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Looking at code. Came to a 20-line block of code that did exactly this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sorted(Path.cwd().glob(&amp;quot;some_pattern[1-9]*.*&amp;quot;), reverse=True)
&lt;/pre&gt;
&lt;p&gt;Twenty lines. Seriously.&lt;/p&gt;
&lt;p&gt;To be fair, 8 of the 20 lines were comments. 3 were blank. Which leaves
9 lines of code to perform the task of a one-liner.&lt;/p&gt;
&lt;p&gt;I often say &amp;quot;no one wins at code golf&amp;quot; as a way to talk people out of
trying to minimize Python code into vanishingly small black holes where
no information about the code's design escapes.&lt;/p&gt;
&lt;p&gt;However. Blowing a line of code into 9 lines seems to be just as bad.&lt;/p&gt;
&lt;p&gt;I'll spare you the 9 lines. I will say this, though, the author was
blissfully ignorant that &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects are comparable. So. There were
needless conversions. And. Even after commenting on this, they seemed to
somehow feel (without evidence of any kind) that &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects were
incomparable.&lt;/p&gt;
&lt;p&gt;This is not the first time I've seen folks who like assembler-style
code. There is at most one state-change or attribute reference on each
line of code. The code has a very voluble verticality (VVV™).&lt;/p&gt;
&lt;p&gt;This seems as wrong as code golf.  Neither style provides meaningful
code.&lt;/p&gt;
&lt;p&gt;How can we measure &amp;quot;meaningful&amp;quot;?&lt;/p&gt;
&lt;p&gt;Of the 8 lines of comments, the English summary, the &amp;quot;reverse alphabetic
order&amp;quot; phrase is only a few words. Therefore, the matching code can be
an equally terse few symbols. I think code can parallel natural
language.&lt;/p&gt;
</content><category term="Technologies"></category><category term="code golf"></category><category term="#python"></category></entry><entry><title>How to Test a Random Number Generator</title><link href="https://slott56.github.io/2022_01_18-how_to_test_a_random_number_generator.html" rel="alternate"></link><published>2022-01-18T08:00:00-05:00</published><updated>2022-01-18T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-18:/2022_01_18-how_to_test_a_random_number_generator.html</id><summary type="html">&lt;p&gt;Nowadays, we don't have the same compelling reasons to test a random
number generator. The intervening decades have seen a lot of fruitful
research. Good algorithms.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, however, I still feel a need to work out
the solution to an old problem. See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nowadays, we don't have the same compelling reasons to test a random
number generator. The intervening decades have seen a lot of fruitful
research. Good algorithms.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, however, I still feel a need to work out
the solution to an old problem. See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca.
1968&lt;/a&gt;
for some background on this.&lt;/p&gt;
&lt;p&gt;What could I have done on that ancient NCE Fortran -- with four digit
integers -- to create random numbers? Step 1 was to stop using the
middle-squared generator. It doesn't work.&lt;/p&gt;
&lt;p&gt;Step 2 is to find a Linear Congruential Generator that works. LCG's have
a (relatively) simple form:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt; + 1&lt;/sub&gt; = (&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;×&lt;i&gt;a&lt;/i&gt; + &lt;i&gt;c&lt;/i&gt;)&lt;span class="unknown"&gt;\bmod&lt;/span&gt;&lt;i&gt;m&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;In this case, the modulo value, &lt;em&gt;m&lt;/em&gt;, is 10,000. What's left is step 3:
find &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; parameters.&lt;/p&gt;
&lt;p&gt;To find suitable parameters, we need battery of empirical tests. Most of
them are extensions to the following class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections import Counter
from typing import Hashable
from functools import cache

class Chi2Test:
    &amp;quot;&amp;quot;&amp;quot;The base class for empirical PRNG tests based on the Chi-2 testing.&amp;quot;&amp;quot;&amp;quot;

    #: The actual distribution, created by ``test()``.
    actual_fq : dict[Hashable, int]

    #: The expected distribution, created by ``__init__()``.
    expected_fq: dict[Hashable, int]

    #: The lower and upper bound on acceptable chi-squared values.
    expected_chi_2_range: tuple[float, float]

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;
        A subclass will override this to call ``super().__init__()`` and then
        create the expected distribution.
        &amp;quot;&amp;quot;&amp;quot;
        self._chi2 = None

    def test(self):
        &amp;quot;&amp;quot;&amp;quot;
        A subclass will override this to call ``super().test()`` and then
        create an actual distribution, usually with a distinct seed value.
        &amp;quot;&amp;quot;&amp;quot;
        self._chi2 = None

    &amp;#64;property
    def chi2(self) -&amp;gt; float:
        &amp;quot;&amp;quot;&amp;quot;Return chi-squared metric between actual and expected observations.&amp;quot;&amp;quot;&amp;quot;
        if self._chi2 is None:
            a_e = (
                (self.actual_fq[k], self.expected_fq[k])
                for k in self.expected_fq
                if self.expected_fq[k] &amp;gt; 0
            )
            v = sum((a-e)**2/e for a, e in a_e)
            self._chi2 = v
        return self._chi2

    &amp;#64;property
    def pass_test(self) -&amp;gt; bool:
        return self.expected_chi_2_range[0] &amp;lt;= self.chi2 &amp;lt;= self.expected_chi_2_range[1]
&lt;/pre&gt;
&lt;p&gt;This defines the essence of a chi-squared test. There's another test
that isn't based on chi-squared. The serial correlation where a
correlation coefficient is computed between adjacent pairs of samples.
We'll ignore this special case for now. Instead, we'll focus on the
battery of chi-squared tests.&lt;/p&gt;
&lt;div class="section" id="linear-congruential-pseudo-random-number-generator"&gt;
&lt;h2&gt;Linear Congruential Pseudo-Random Number Generator&lt;/h2&gt;
&lt;p&gt;We'll also need an LC PRNG that's constrained to 4 decimal digits.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class LCM4:
    &amp;quot;&amp;quot;&amp;quot;Constrained by the NCE Fortran 4-digit integer type.&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, a: int, c: int) -&amp;gt; None:
        self.a = a
        self.c = c
    def seed(self, v: int) -&amp;gt; None:
        self.v = v
    def random(self) -&amp;gt; int:
        self.v = (self.a*self.v % 10_000 + self.c) % 10_000
        return self.v
&lt;/pre&gt;
&lt;p&gt;This mirrors the old NCE Fortran on the IBM 1620 computer. 4 decimal
digits. No more.&lt;/p&gt;
&lt;p&gt;We can use this to generate a pile of samples that can be evaluated. I'm
a fan of using generators because they're so efficient. The use of a set
to create a list seems weird, but it's very fast.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def lcg_samples(rng: LCM4, seed: int, n_samples: int = N_SAMPLES) -&amp;gt; list[int]:
    &amp;quot;&amp;quot;&amp;quot;
    Generate a bunch of sample values. A repeat implies a cycle, and we'll stop early.

    &amp;gt;&amp;gt;&amp;gt; lcg_samples(LCM4(1621, 3), 1234)[:12]
    [317, 3860, 7063, 9126, 3249, 6632, 475, 9978, 4341, 6764, 4447, 8590]

    &amp;quot;&amp;quot;&amp;quot;
    rng.seed(seed)
    def until_dup(f: Callable[..., Hashable], n_samples: int) -&amp;gt; Iterator[Hashable]:
        seen: set[Hashable] = set()
        while (v := f()) not in seen and len(seen) &amp;lt; n_samples:
            seen.add(v)
            yield v
    return list(until_dup(rng.random, n_samples))
&lt;/pre&gt;
&lt;p&gt;This function builds a list of values for us. We can then subject the
set of samples to a battery of tests. We'll look at one test as an
example for the others. They're each devilishy clever, and require a
little bit of coding smarts to get them to work correctly and quickly.&lt;/p&gt;
&lt;div class="section" id="frequency-test"&gt;
&lt;h3&gt;Frequency Test&lt;/h3&gt;
&lt;p&gt;Here's one of the tests in the battery of chi-squared tests. This is the
frequency test that examines values to see if they have the right number
of occurrences. We pick a domain, &lt;em&gt;d&lt;/em&gt;, and parcel numbers out into this
domain. We use &lt;span class="formula"&gt;&lt;br/&gt;&lt;i&gt;frac&lt;/i&gt;&lt;i&gt;d&lt;/i&gt;&lt;br/&gt;&lt;i&gt;times&lt;/i&gt;&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;10, 000&lt;/span&gt; because this tends
to leverage the left-most digits which are somewhat more random than the
right-most digits.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class FQTest(Chi2Test):
    expected_chi_2_range = (7.261, 25.00)

    def __init__(self, d: int = 16, size_samples: int = 6_400) -&amp;gt; None:
        super().__init__()
        #: Size of the domain
        self.d = d
        #: Number of samples expected
        self.size_samples = size_samples
        #: Frequency for Chi-squared comparison
        self.expected_fq = {e: int(self.size_samples/self.d) for e in range(self.d)}

    def test(self, sequence: list[int]) -&amp;gt; None:
        super().test()
        self.actual_fq = Counter(int(self.d*s/10_000) for s in sequence)
&lt;/pre&gt;
&lt;p&gt;We can apply this test to some samples, compare with the expectation,
and save the chi-squared value. This lets us look at LCM parameters to
see if the generator creates suitably random values.&lt;/p&gt;
&lt;p&gt;The essential test protocol is this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
samples = lcg_samples(LCM4(1621, 3), seed=1234)
fqt = FQTest()
fqt.test(samples)
fqt.chi2
&lt;/pre&gt;
&lt;p&gt;The test creates some samples, applies the frequency test. The next step
is to examine the chi-squared value to see if it's in the allowable
range, &lt;span class="formula"&gt;7.261&lt;br/&gt;&lt;i&gt;leq&lt;/i&gt;&lt;br/&gt;&lt;i&gt;chi&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt; &amp;lt; 25&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-search-space"&gt;
&lt;h3&gt;The search space&lt;/h3&gt;
&lt;p&gt;Superficially, it seems like there could be 10,000 choices of &lt;em&gt;a&lt;/em&gt; and
10,000 choices of &lt;em&gt;c&lt;/em&gt; parameter values for this PRNG. That's 100 million
combinations. It takes a bit of processing to look at all of those.&lt;/p&gt;
&lt;p&gt;Looking more deeply, the values of &lt;em&gt;c&lt;/em&gt; are often small prime numbers. 1
or 11 or some such. That really cuts down on the search. The values of
&lt;em&gt;a&lt;/em&gt; have a number of other constraints with respect to the modulo value.
Because 10,000 has factors of 4 and 5, this suggests values like &lt;span class="formula"&gt;20&lt;i&gt;k&lt;/i&gt; + 1&lt;/span&gt; will work. Sensible combinations are defined by the following
domain:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
combinations = [
    (a, c)
    for c in (1, 3, 7, 11,)
    for a in range(21, 10_000, 20)
]
&lt;/pre&gt;
&lt;p&gt;This is 2,000 distinct combinations, something we can compute on our
laptop.&lt;/p&gt;
&lt;p&gt;The problem we have trying to evaluate these is each combination's
testing is compute-intensive. This means we want to use as many cores of
our machine as we have available. We don't want this to process each
combination serially on a single core. A thread pool isn't going to help
much because the OS doesn't scatter threads among all the cores.&lt;/p&gt;
&lt;p&gt;Because the OS likes to scatter processes among all the cores, we need a
process pool.&lt;/p&gt;
&lt;p&gt;Here's how to spread the work among the cores:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from concurrent.futures import ProcessPoolExecutor, as_completed

combinations = [
    (a, c)
    for c in (1, 3, 7, 11)
    for a in range(21, 10_000, 20)
]

with Progress() as progress:
    setup_task = progress.add_task(&amp;quot;setup ...&amp;quot;, total=len(combinations))
    finish_task = progress.add_task(&amp;quot;finish...&amp;quot;, total=len(combinations))

    with ProcessPoolExecutor(max_workers=8) as pool:
        futures = [
            pool.submit(evaluate, (a, c))
            for a, c in progress.track(combinations, task_id=setup_task, total=len(combinations))
        ]
        results = [
            f.result()
            for f in progress.track(as_completed(futures), task_id=finish_task, total=len(combinations))
        ]
&lt;/pre&gt;
&lt;p&gt;This will occupy *all* the cores of the computer executing the
`evaluate()` function. This function applies the battery of tests to
each combination of a and c. We can then check the results for
combinations where the chi-squared results for each test are in the
acceptable ranges for the test.&lt;/p&gt;
&lt;p&gt;It's fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Use &lt;strong&gt;a=1621&lt;/strong&gt; and &lt;strong&gt;c=3&lt;/strong&gt; can generate acceptable random numbers using
4 decimal digits.&lt;/p&gt;
&lt;p&gt;Here's some output using only a subset of the tests.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(rngtest2) % python lcmfinder.py
setup ... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
finish... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
2361  1  11.46  14.22  46.64  63.76   2.30  11.33   2.16   2.16
 981  3  10.28  15.24  52.56  66.32   2.28  11.08  10.47  10.47
1221  3  10.19  14.12  48.72  62.08   3.03  10.08   2.59   2.59
1621  3  11.70  14.91  47.12  69.52   2.23   9.69   0.86   0.86
&lt;/pre&gt;
&lt;p&gt;The output shows the &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; values followed by the minimum and
maximum chi-squared values for each test. The chi-squared values are in
pairs for the frequency test, serial pairs test, gap test, and poker
test.&lt;/p&gt;
&lt;p&gt;Each test uses about two dozen seed values to generate piles of 3,200
samples and subject each pile of samples to a battery of tests. The seed
values, BTW, are &lt;tt class="docutils literal"&gt;range(1, 256, 11)&lt;/tt&gt;; kind of arbitrary. Once I find
the short list of candidates, I can test with more seeds. There are only
10,000 seed values, so, this can be done in finite time.&lt;/p&gt;
&lt;p&gt;For example, a=1621, c=3, had chi-squared values between 11.70 and 14.91
for the frequency test. Well within the 7.261 to 25.0 range required.
The remaining numbers show that it passed the other tests, also.&lt;/p&gt;
&lt;p&gt;For completeness, I intend to implement the remaining half-dozen or so
tests. Then I need to make sure the sphinx-produced documentation looks
good. I've done this
before. &lt;a class="reference external" href="http://slott.itmaybeahack.com/_static/rngtest/rngdoc.html"&gt;http://slott.itmaybeahack.com/_static/rngtest/rngdoc.html&lt;/a&gt; It's
kind of an obsession, I think.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, this would have been better than the
middle-squared nonsense that caused me to struggle with bad games that
behaved badly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="random numbers"></category><category term="multiprocessing"></category></entry><entry><title>The Old Days -- ca. 2000 -- Empirical Tests of Random Numbers (Python and Chi-Square Testing)</title><link href="https://slott56.github.io/2022_01_11-the_old_days_ca_2000_empirical_tests_of_random_numbers_python_and_chi_square_testing.html" rel="alternate"></link><published>2022-01-11T08:00:00-05:00</published><updated>2022-01-11T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-11:/2022_01_11-the_old_days_ca_2000_empirical_tests_of_random_numbers_python_and_chi_square_testing.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca. 1974 Random Numbers Before
Python&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;We'll get to Python after reminiscing about the olden days. I want to
provide some back story on why
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; has had a huge
impact on ordinary hacks like myself.&lt;/p&gt;
&lt;p&gt;What we're talking about is how we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca. 1974 Random Numbers Before
Python&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;We'll get to Python after reminiscing about the olden days. I want to
provide some back story on why
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; has had a huge
impact on ordinary hacks like myself.&lt;/p&gt;
&lt;p&gt;What we're talking about is how we struggled with randomness before&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/dev/random&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;The Mersenne Twister Pseudo-Random Number Generator (PRNG)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pre-1997, we performed empirical tests of PRNG's to find one that was
random enough for our application. Maybe we were doing random samples of
data to compare statistical measures. Maybe we were writing a game. What
was important was a way to create a sequence of values that passed a
battery of statistical tests.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://link.springer.com/chapter/10.1007%2F978-1-4612-1690-2_7"&gt;https://link.springer.com/chapter/10.1007%2F978-1-4612-1690-2_7&lt;/a&gt; for
the kind of material we salivated over.&lt;/p&gt;
&lt;p&gt;While there are an infinite number of bad algorithms, some math reveals
that the Linear Congruential Generator (LCG) is simple and effective.
Each new number is based on the previous number:
&lt;span class="formula"&gt;&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt; + 1&lt;/sub&gt; = (&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;×&lt;i&gt;a&lt;/i&gt; + &lt;i&gt;c&lt;/i&gt;)&lt;span class="unknown"&gt;\bmod&lt;/span&gt;&lt;i&gt;m&lt;/i&gt;&lt;/span&gt;. There's a multiply and an add, modulo some
big number. The actual samples are often a subset of the bits in
&lt;span class="formula"&gt;&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;After the Mersenne Twister became widely used, we essentially stopped
looking at alternative random number algorithms. Before then -- well --
things weren't so good.&lt;/p&gt;
&lt;p&gt;Here are some classics that I tested.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ACM Collected Algorithms (CALGO) number 294 is a random-number
generator. This is so obsolete, I have trouble finding links to it.
It was a 28-bit generator.&lt;/li&gt;
&lt;li&gt;The ACM Collected Algorithms (CALGO) number 266 has code still
available. See &lt;a class="reference external" href="http://www.netlib.no/netlib/toms/266"&gt;toms/266&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Cheney-Kincaid generator is available. See &lt;a class="reference external" href="https://www.netlib.org/cgi-bin/netlibfiles.pl?filename=/cheney-kincaid/random.f"&gt;random.f plus
dependencies&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These formed a kind of benchmark I used when looking at Python's
built-in Mersenne Twister.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Nowadays, you can find a great list of LCM PRNG's at&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linear_congruential_generator"&gt;https://en.wikipedia.org/wiki/Linear_congruential_generator&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="section" id="python-empirical-testing"&gt;
&lt;h2&gt;Python Empirical Testing&lt;/h2&gt;
&lt;p&gt;One of the early questions I had was whether or not the &lt;tt class="docutils literal"&gt;random&lt;/tt&gt;
module in Python stacked up against these older RNG's that I was a
little more familiar with.&lt;/p&gt;
&lt;p&gt;So, I wrote a big, fancy random number testing tool in Python.&lt;/p&gt;
&lt;p&gt;When? Around 2000. I started this in the Python 1.6 and 2.1 era. I have
files showing results from Python 2.3 (#2, Jul 30 2003). This is about
when I stopped fooling around with this and moved on to trusting that
Python really did work and was -- perhaps -- the best approach to
working with randomly-sampled data for statistical work.&lt;/p&gt;
&lt;p&gt;The OO design for the test classes was Lavish Over The Top (LOTT™) OO:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Too Many Methods&lt;/li&gt;
&lt;li&gt;Too Many Superclasses&lt;/li&gt;
&lt;li&gt;No Duck Typing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We won't look at that code. It's regrettable and stems from trying to
make Python into C++.&lt;/p&gt;
&lt;p&gt;What I do want to look at is the essential Chi-Squared test methodology.
This is some cool stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comparing-expected-and-actual"&gt;
&lt;h2&gt;Comparing Expected and Actual&lt;/h2&gt;
&lt;p&gt;The chi-squared metric is a way to compare actual and expected
distributions. You can read about it on your own time. It's a way to
establish if data is random or there's something else going on that's
not random. i.e., a trend or a bias.&lt;/p&gt;
&lt;p&gt;The empirical tests for PRNG's that Knuth defines all come with
chi-squared values that bracket acceptable levels of randomness. For the
purposes of writing a working set of tests the magic chi-squared values
supplied by Knuth are fine. Magical. But fine. Really. Trust them.&lt;/p&gt;
&lt;p&gt;If you make modifications, you'd use your statistics text-book. You'd
open to the back where it had a Chi-Squared table. That table gave you
chi-squared values for a given degree of freedom and a given probability
of being random.&lt;/p&gt;
&lt;p&gt;Or, You could look for the NIST handbook online. It has a section on
chi-squared testing.
See &lt;a class="reference external" href="https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm"&gt;https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm&lt;/a&gt;.
Same drill. Degrees of freedom and probability map to a chi-squared
threshold.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Were do these magical Chi-Squared values come from? This gets
interesting in a useless-sidebar kind of way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chi-squared-values"&gt;
&lt;h2&gt;Chi-Squared Values&lt;/h2&gt;
&lt;p&gt;There's a really, really terse summary of chi-squared numbers
here: &lt;a class="reference external" href="https://www.danielsoper.com/statcalc/formulas.aspx?id=11"&gt;https://www.danielsoper.com/statcalc/formulas.aspx?id=11&lt;/a&gt;. This is
all you need to know. It may be too terse to help you learn about it,
but it's a handy reference.&lt;/p&gt;
&lt;p&gt;We need to evaluate two functions: partial gamma and gamma. These are
defined as integrals. And they're nasty levels of complexity. Nasty.&lt;/p&gt;
&lt;p&gt;This kind of nasty:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;γ&lt;/i&gt;(&lt;i&gt;s&lt;/i&gt;, &lt;i&gt;z&lt;/i&gt;) = &lt;span class="limits"&gt;&lt;sup class="limit"&gt;&lt;i&gt;z&lt;/i&gt;&lt;/sup&gt;&lt;span class="limit"&gt;&lt;span class="bigoperator integral"&gt;∫&lt;/span&gt;&lt;/span&gt;&lt;sub class="limit"&gt;0&lt;/sub&gt;&lt;/span&gt;&lt;i&gt;t&lt;/i&gt;&lt;sup&gt;&lt;i&gt;s&lt;/i&gt; − 1&lt;/sup&gt;&lt;i&gt;e&lt;/i&gt;&lt;sup&gt; − &lt;i&gt;t&lt;/i&gt;&lt;/sup&gt;&lt;i&gt;dt&lt;/i&gt;
&lt;/div&gt;
&lt;div class="formula"&gt;
Γ(&lt;i&gt;z&lt;/i&gt;) = &lt;span class="limits"&gt;&lt;sup class="limit"&gt;∞&lt;/sup&gt;&lt;span class="limit"&gt;&lt;span class="bigoperator integral"&gt;∫&lt;/span&gt;&lt;/span&gt;&lt;sub class="limit"&gt;0&lt;/sub&gt;&lt;/span&gt;&lt;i&gt;t&lt;/i&gt;&lt;sup&gt;&lt;i&gt;z&lt;/i&gt; − 1&lt;/sup&gt;&lt;i&gt;e&lt;/i&gt;&lt;sup&gt; − &lt;i&gt;t&lt;/i&gt;&lt;/sup&gt;&lt;i&gt;dt&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;These are not easy things to evaluate. Back to the ACM Collected
Algorithms (CALGO) to find ways to evaluate these integrals. There are
algorithms in CALGO 435 and 654 that are expressed as Fortran for
evaluating these. This ain't all, of course, we need Stirling Numbers
and Bernoulli Numbers. So there's a lot going on here.&lt;/p&gt;
&lt;p&gt;A lot of this can be transliterated from Fortran. The resulting code is
frankly quite ugly, and requires extensive test cases. Fortran with
GOTO's requires some cleverness to unwind the conceptual for/while/if
constructs.&lt;/p&gt;
&lt;p&gt;OR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-sympy"&gt;
&lt;h2&gt;Enter Sympy&lt;/h2&gt;
&lt;p&gt;In the 20+ years since I implemented my empirical PRNG tests &amp;quot;the hard
way,&amp;quot; &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; has come of age.&lt;/p&gt;
&lt;p&gt;Check this out&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from sympy import Sum, rf
from sympy.abc import k, s, z
from sympy.functions import exp
from sympy import oo
Sum(z**s * exp(-z) * z**k / rf(s, k+1), (k, 0, oo)).simplify()
&lt;/pre&gt;
&lt;p&gt;I could use this in Jupyter Lab to display a computation for the partial
gamma function.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;z&lt;/i&gt;&lt;sup&gt;&lt;i&gt;s&lt;/i&gt;&lt;/sup&gt;&lt;i&gt;e&lt;/i&gt;&lt;sup&gt; − &lt;i&gt;z&lt;/i&gt;&lt;/sup&gt;&lt;span class="limits"&gt;&lt;sup class="limit"&gt;∞&lt;/sup&gt;&lt;span class="limit"&gt;&lt;span class="bigoperator"&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;sub class="limit"&gt;&lt;i&gt;k&lt;/i&gt; = 0&lt;/sub&gt;&lt;/span&gt;&lt;span class="fullfraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;z&lt;/i&gt;&lt;sup&gt;&lt;i&gt;k&lt;/i&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sup&gt;&lt;span class="overline"&gt;&lt;i&gt;k&lt;/i&gt; + 1&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;This requires a fancy Rising Factorial computation,
the &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sup&gt;&lt;span class="overline"&gt;&lt;i&gt;k&lt;/i&gt; + 1&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt; term. This is available in &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; as the &lt;tt class="docutils literal"&gt;rf(s, k+1)&lt;/tt&gt;
expression.&lt;/p&gt;
&lt;p&gt;It turns out that sympy offers lowergamma() and gamm() as first-class
functions. I don't even need to work through the closed-form
simplifications.&lt;/p&gt;
&lt;p&gt;I could do this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def gammap(s: float, z: float) -&amp;gt; float:
    return (z**s * exp(-z) * Sum(z**k / rf(s, k+1), (k, 0, oo))).evalf()

def gamma(z: float) -&amp;gt; float:
    return integrate(t**(z-1) * exp(-t), (t, 0, oo)).doit()
&lt;/pre&gt;
&lt;p&gt;It works well. And it provides elegant documentation. But I don't need
to. I can write this, instead,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def chi2P(chi2: float, degF: int) -&amp;gt; float:
   return lowergamma(degF/2, chi2/2) / gamma(degF/2)
&lt;/pre&gt;
&lt;p&gt;This is used to compute the probability of seeing a chi-squared value.&lt;/p&gt;
&lt;p&gt;For the frequency test, as an example. We partition the random numbers
into 16 bins. These gives us 15 degrees of freedom. We want chi-squared
values between 7.2578125 and 25.0.&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;Given a chi-squared value of 6.0, we can say the probability of 0.02 is
suspiciously low, less than 0.05 level that we've decided signifies
mostly random. The data is &amp;quot;too random&amp;quot;; that is to say it's too close
to the ideal distribution to be trusted.&lt;/p&gt;
&lt;p&gt;The established practice was to lookup a chi-squared value because you
couldn't easily compute the probability of that value. With sympy, we
can compute the probability. It's slow, so we have to optimize this
carefully and not compute probabilities more frequently than necessary.&lt;/p&gt;
&lt;p&gt;We can, for example, compute chi-squared values for a number of seeds,
take the max and min of these and compute the probability of those two
boundary values. This will bracket the probability that the pseudo
random number generator is producing suitably random numbers.&lt;/p&gt;
&lt;p&gt;This also applies to any process we're measuring with results that might
vary randomly or might indicate a consistent problem that requires
evaluation.&lt;/p&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; eliminates the complexity of understanding these
beautifully hand-crafted antique algorithms. It acts as a kind of
super-compiler. From Math to an intermediate AST to a concrete
implementation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="fortran"></category><category term="random numbers"></category></entry><entry><title>The Old Days -- ca. 1974 -- Random Numbers before Python</title><link href="https://slott56.github.io/2022_01_04-the_old_days_ca_1974_random_numbers_before_python.html" rel="alternate"></link><published>2022-01-04T20:52:00-05:00</published><updated>2022-01-04T20:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-04:/2022_01_04-the_old_days_ca_1974_random_numbers_before_python.html</id><summary type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Old Days -- ca.
1968&lt;/a&gt;&amp;quot;
for my first exposure to an actual computer. Nothing about Python there.
But. It's what motivated me to get started learning to code -- I was
fascinated by games that involved randomization. Games with cards or
dice.&lt;/p&gt;
&lt;p&gt;After filling in a little background, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Old Days -- ca.
1968&lt;/a&gt;&amp;quot;
for my first exposure to an actual computer. Nothing about Python there.
But. It's what motivated me to get started learning to code -- I was
fascinated by games that involved randomization. Games with cards or
dice.&lt;/p&gt;
&lt;p&gt;After filling in a little background, I will get to the Python part of
this. First, however, I want to compare the olden days with what we have
now.&lt;/p&gt;
&lt;p&gt;From 1969 to 1974 I had access to the high school's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/IBM_1620"&gt;IBM
1620&lt;/a&gt;. This means programming
in &lt;a class="reference external" href="https://www.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP1620.html"&gt;IBM's SPS
assembler&lt;/a&gt;,
or using the NCE Load-and-Go Fortran compiler.
See &lt;a class="reference external" href="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD00xx/EWD37.html"&gt;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD00xx/EWD37.html&lt;/a&gt;
for a scathing review of the problems with this machine.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.bitsavers.org/pdf/ibm/1620/GC20-1603-10_1620_Catalog_of_Programs_Jan71.pdf"&gt;http://www.bitsavers.org/pdf/ibm/1620/GC20-1603-10_1620_Catalog_of_Programs_Jan71.pdf&lt;/a&gt;
Page 36 has this:&lt;/p&gt;
&lt;img alt="Load-and-Go Fortran Manual Cover Page" src="https://slott56.github.io/media/39D362EE-AF0A-4E0E-B4A2-056A99E94BE8.jpeg" style="width: 238px; height: 320px;" /&gt;
&lt;p&gt;That's a quick overview of my earliest programming language. What's
essential here is the NCE Fortran used 4-digit integers.&lt;/p&gt;
&lt;p&gt;I'll repeat that for those skimming, and wondering what the Python
connection is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Four. Digit. Integers.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;That's four decimal digits. Decimal digits required at least 4
hardware bits. IBM 1620 digits also had flags and signs, so, there
were maybe 6 bits per digit. 24 bits of hardware used to represent
just under 14 bits of useful information.&lt;/p&gt;
&lt;p&gt;My interest is in simulation and randomness. So. I have this question
of how to create random sequences of numbers limited to 4-digit
integers.&lt;/p&gt;
&lt;div class="section" id="prng-algorithms"&gt;
&lt;h2&gt;PRNG Algorithms&lt;/h2&gt;
&lt;p&gt;There are a number of classic Pseudo-Random Number Generator (PRNG)
algorithms from the early days before Mersenne Twister took over in
1997.&lt;/p&gt;
&lt;p&gt;We used to be super-careful to emphasize the letter &lt;strong&gt;P&lt;/strong&gt; in
&lt;strong&gt;P&lt;/strong&gt;RNG because the numbers we're really random. They just behaved
randomish. This is contrasted with real randomness, also known as
&lt;em&gt;entropy&lt;/em&gt;. For example, &lt;tt class="docutils literal"&gt;/dev/random&lt;/tt&gt; device driver has a fair
amount of entropy. I think it's comparable to a person throwing dice
across a table. I think it's as random as a noise-generating diode
with a sample-and-hold circuit to pluck out random values from the
noise.&lt;/p&gt;
&lt;p&gt;Pre-Mersenne-Twister -- pre-1997 -- we worried a lot about random
number generation. See Knuth, Donald E. &lt;em&gt;The Art of Computer
Programming, Volume 2, Seminumerical Algorithms&lt;/em&gt;, Addison-Wesley,
1969. Section 3.3.2. covers empirical testing of random number
generators. Section 3.3.1. covers the Chi-squared test for fit
between actual and expected frequency distributions.&lt;/p&gt;
&lt;p&gt;Back in the olden days, it was stylish to perform an empirical test
(or ten) to confirm we really had &amp;quot;good&amp;quot; random numbers. The built-in
libraries that came with your compiler or OS could not be trusted
without evidence.&lt;/p&gt;
&lt;p&gt;One of the classic (bad) PRNG's is the &amp;quot;Middle-Squared&amp;quot; method.
See &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Middle-square_method"&gt;https://en.wikipedia.org/wiki/Middle-square_method&lt;/a&gt;. I learned
about this in the 70's. And used it in the old NCE Fortran.&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;Four. Digit. Integers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Did I mention that the Fortran compiler used &lt;strong&gt;four&lt;/strong&gt; decimal digits
for integers? That means plucking the middle two digits out of a
four-digit number. How random can that be?&lt;/p&gt;
&lt;p&gt;Not very. The longest possible sequence is 100 numbers. If, by some
miracle, you found a seed number with the right properties and only
two digits.&lt;/p&gt;
&lt;p&gt;Nowadays I can, in Python, do a quick middle-squared analysis for all
100 seed values.&lt;/p&gt;
&lt;p&gt;This kind of thing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def csqr4(value: int) -&amp;gt; list[int]:
    &amp;quot;&amp;quot;&amp;quot;The 4 decimal digit center-squared PRNG.&amp;quot;&amp;quot;&amp;quot;
    sequence = []
    while value not in sequence:
        sequence.append(value)
        value = (((value**2) // 10) % 100)
    return sequence
&lt;/pre&gt;
&lt;p&gt;Which you can run and see that &lt;strong&gt;all&lt;/strong&gt; of my early attempts at games
and simulations were doomed. The seed values of 76, 42, and 69
provided kind of long sequences of almost random-seeming numbers.
Otherwise, pfft, this was junk computer science. 50% of the seeds
provide 5 or fewer numbers before repeating.&lt;/p&gt;
&lt;p&gt;For blackjack, a few random numbers for shuffling &lt;em&gt;might&lt;/em&gt; be enough.
For other games, the lack of randomness made the outcomes trivially
predictable.&lt;/p&gt;
&lt;p&gt;What's funny is how far the state of the art has moved since then.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Hardware now has more than 20,000 decimal digits (about 10K bytes) of storage.&lt;/li&gt;
&lt;li&gt;Software with algorithms that are really, really clever.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's hard to understate these two advances, particularly, the second
one. I'll return to the algorithm thing a lot in the next few posts.&lt;/p&gt;
&lt;p&gt;My focus was on games and randomization. Ideally, simple stuff.
But... under the hood, it's not simple. I've spent some time (not
much, and not in much depth) looking at the tip of this iceberg.&lt;/p&gt;
&lt;p&gt;It served me as an incentive to dive just a little more deeply into a
topic, like math or a programming language or a statistical tool.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="fortran"></category><category term="random numbers"></category></entry><entry><title>The Old Old Days -- ca. 1968</title><link href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html" rel="alternate"></link><published>2021-12-28T08:00:00-05:00</published><updated>2021-12-28T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-12-28:/2021_12_28-the_old_old_days_ca_1968.html</id><summary type="html">&lt;p&gt;As the olds do, I reminisce sometimes. Not often. Let me rewind the
memory tapes a back to 1967 or '68.&lt;/p&gt;
&lt;p&gt;(What a dumb metaphor for folks who have never used serial storage.)&lt;/p&gt;
&lt;p&gt;This isn't -- directly -- about Python. But it may help folks who live
at the edge of programming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As the olds do, I reminisce sometimes. Not often. Let me rewind the
memory tapes a back to 1967 or '68.&lt;/p&gt;
&lt;p&gt;(What a dumb metaphor for folks who have never used serial storage.)&lt;/p&gt;
&lt;p&gt;This isn't -- directly -- about Python. But it may help folks who live
at the edge of programming find a project that motivates them to learn
to code.&lt;/p&gt;
&lt;p&gt;This was my first exposure to an actual computer. I think it was an old
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/IBM_650"&gt;IBM 650&lt;/a&gt; that our high-school
had. I wasn't in high school yet, but there was an open house, and they
fired this thing up.&lt;/p&gt;
&lt;p&gt;What was the demo program?&lt;/p&gt;
&lt;p&gt;The thing was running a version of blackjack.&lt;/p&gt;
&lt;p&gt;It would clatter and type something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 J S
 9 C  7 D
&amp;gt;
&lt;/pre&gt;
&lt;p&gt;And wait for your input. The first line was the dealer's card and your
two cards. You could then enter your plan -- hit, stand, split, or
double. Subsequent lines would play out your hand.&lt;/p&gt;
&lt;p&gt;And yes, I recall much of the interaction to this day. (Not all the
details. It was a long time ago.)&lt;/p&gt;
&lt;p&gt;This shaped my understanding of &amp;quot;computing as simulation.&amp;quot;&lt;/p&gt;
&lt;p&gt;It also caused me to become interested in random numbers and the idea of
generating pseudo-random numbers with digital computers. I'll be posting
some more thoughts on random numbers and -- I promise -- there will be
Python code.&lt;/p&gt;
</content><category term="Technologies"></category><category term="history"></category><category term="learning"></category><category term="simulation"></category><category term="random numbers"></category></entry><entry><title>Some Harsh Criticism for Python Object-Oriented Programming 4th ed.</title><link href="https://slott56.github.io/2021_12_26-some_harsh_criticism_for_python_object_oriented_programming_4th_ed.html" rel="alternate"></link><published>2021-12-26T11:11:00-05:00</published><updated>2021-12-26T11:11:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-12-26:/2021_12_26-some_harsh_criticism_for_python_object_oriented_programming_4th_ed.html</id><summary type="html">&lt;p&gt;Here are some links to
reviews: &lt;a class="reference external" href="https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar"&gt;https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar"&gt;https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are reviews of &lt;a class="reference external" href="https://subscription.packtpub.com/book/programming/9781801077262/2"&gt;Python Object-Oriented Programming: Build robust
and maintainable object-oriented …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some links to
reviews: &lt;a class="reference external" href="https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar"&gt;https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar"&gt;https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are reviews of &lt;a class="reference external" href="https://subscription.packtpub.com/book/programming/9781801077262/2"&gt;Python Object-Oriented Programming: Build robust
and maintainable object-oriented Python applications and libraries, 4th
Edition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All reviews are helpful, even ones that are critical. We're constantly
striving to improve this content. Also, we're aware we can't please
everyone. I like reviews with clearly-stated points. The one-star review
had three important points.&lt;/p&gt;
&lt;p&gt;First. &amp;quot;There are enough typed and strongly typed languages in the
world&amp;quot;. I don't think this is something I can address in a book about
Python. &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt; dates
from 2014. Back then, this opinion may have been more influential. As it
is, the comment is perhaps too late to be useful. The annotations are a
feature of the language, and it seems important to include them in a
book about the language.&lt;/p&gt;
&lt;p&gt;Perhaps, the criticism isn't about the Python language. Perhaps this is
really a criticism of presenting type annotations as a central part of
the book. The comment seems to be about the language more than the
book.&lt;/p&gt;
&lt;p&gt;Second. &amp;quot;...the k-NN example seems too incongruous...&amp;quot; and &amp;quot;... it was
more of an hindrance...&amp;quot; This is interesting. The book covers the k-NN
algorithm from a variety of perspectives. The intent was to provide
multiple partial solutions, each illustrating only techniques shown in a
given chapter. I can see how this might be confusing, and perhaps the
examples need to be refactored to reduce overlap between them.&lt;/p&gt;
&lt;p&gt;Or. Perhaps k-NN is too simple. Or. It might be that k-NN is already
solved in a number of packages like scikit learn. It seemed like a
algorithm with a moderate level of complexity and direct application to
analytics and data science.&lt;/p&gt;
&lt;p&gt;Third, &amp;quot;The English is not always good ... the book could have done with
a bit more proofreading.&amp;quot; I'd love some concrete examples. I suspect the
problem is my Americanisms have caused problems for non-American
readers. Perhaps I didn't try hard enough to match Dusty's
conversational tone in the 3rd edition. Examples would help to point out
where language problems were introduced.&lt;/p&gt;
&lt;p&gt;The three-star review had a misleading statement, &amp;quot;This edition also
uses non-standard python syntax on definitions functions etc&amp;quot;. The type
hints have been part of the language since PEP 484, and it seems
inappropriate to describe them as non-standard.&lt;/p&gt;
</content><category term="Technologies"></category><category term="python"></category><category term="writing"></category></entry><entry><title>Processing Apple Numbers Files</title><link href="https://slott56.github.io/2021_12_01-processing_apple_numbers_files.html" rel="alternate"></link><published>2021-12-01T07:00:00-05:00</published><updated>2021-12-01T07:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-12-01:/2021_12_01-processing_apple_numbers_files.html</id><summary type="html">&lt;p&gt;Apple's freebie tools -- Pages, Numbers, Keynote, Garage Band, etc. --
are wonderful things. I really like Numbers. I'm tolerant of Pages. I've
used Pages to write books and publish them to the Apple Bookstore.
(Shameless Plug: &lt;a class="reference external" href="https://books.apple.com/us/book/id1586977675"&gt;Pivot to
Python&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;These tools have a significant problem. Protobuf.&lt;/p&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some History&lt;/h2&gt;
&lt;p&gt;Once upon a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Apple's freebie tools -- Pages, Numbers, Keynote, Garage Band, etc. --
are wonderful things. I really like Numbers. I'm tolerant of Pages. I've
used Pages to write books and publish them to the Apple Bookstore.
(Shameless Plug: &lt;a class="reference external" href="https://books.apple.com/us/book/id1586977675"&gt;Pivot to
Python&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;These tools have a significant problem. Protobuf.&lt;/p&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some History&lt;/h2&gt;
&lt;p&gt;Once upon a time, Numbers used an XML-based format. This was back in
'09, I think. At some point, version 10 of Numbers (2013?) switched to
Protobuf.&lt;/p&gt;
&lt;p&gt;I had already unwound XLSX and ODS files, which are XML. I had also
unwound Numbers '09 in XML. I had a sense of what a spreadsheet needed
to look like.&lt;/p&gt;
&lt;p&gt;The switch to Protobuf also meant using Snappy compression. Back in
2014? I worked out my own version of the Snappy decompression algorithm
in pure Python. I think I knew about
&lt;a class="reference external" href="https://github.com/andrix/python-snappy"&gt;python-snappy&lt;/a&gt; but didn't
want the complex binary dependency. I wrote my own instead.&lt;/p&gt;
&lt;p&gt;I found the
&lt;a class="reference external" href="https://github.com/obriensp/iWorkFileFormat"&gt;iWorkFileFormat&lt;/a&gt;
project. From this, and a lot of prior knowledge about the XML formats,
I worked out a way to unpack the protobuf bytes into Python objects. I
didn't leverage the formal protobuf definitions; instead I lazily mapped
the objects to a dictionary of keys and bytes. If a field had a complex
internal structure, I parsed the subset of bytes.&lt;/p&gt;
&lt;p&gt;(I vaguely recall the Protobuf definitions are in XCode somewhere. But.
I didn't want to write a protobuf compiler to make a pure-Python
implementation. See the
&lt;a class="reference external" href="https://github.com/eigenein/protobuf"&gt;protobuf&lt;/a&gt; project for what I
was looking for, but didn't have at the time.)&lt;/p&gt;
&lt;p&gt;Which brings us to today's discovery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="state-of-the-art"&gt;
&lt;h2&gt;State of the Art&lt;/h2&gt;
&lt;p&gt;Someone has taken the steps necessary to properly unpack Numbers files.
See &lt;a class="reference external" href="https://github.com/masaccio/numbers-parser"&gt;numbers-parser&lt;/a&gt;.
This has first-class snappy and protobuf processing. It installs
cleanly. It has an issue, and I may try to work on it.&lt;/p&gt;
&lt;p&gt;I'm rewriting my own Stingray Reader with intent to dispose of my own
XLSX, ODS, and Numbers processing. These can (and should) be imported
separately. It's a huge simplification to stand on the shoulders of
giants and write a dumb &lt;strong&gt;Facade&lt;/strong&gt; over their work.&lt;/p&gt;
&lt;p&gt;Ideally, all the various spreadsheet parsing folks would adopt some kind
of standard API. This could be analogous to the database API used by SQL
processing in Python. The folks with &lt;a class="reference external" href="https://www.excelpython.org"&gt;https://www.excelpython.org&lt;/a&gt;
or &lt;a class="reference external" href="http://www.python-excel.org"&gt;http://www.python-excel.org&lt;/a&gt; might be a place to start, since they
list a number of packages.&lt;/p&gt;
&lt;p&gt;The bonus part? Seeing my name in the &lt;a class="reference external" href="https://github.com/masaccio/numbers-parser#credits"&gt;Credits for
numbers-parser&lt;/a&gt;.
That was delightful.&lt;/p&gt;
&lt;p&gt;At some point, I need to make a coherent pitch for a common API with
permits external JSON Schema as part of extracting data from
spreadsheets.&lt;/p&gt;
&lt;p&gt;First. I need to get Stingray Reader into a more final form.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="#python"></category><category term="workbook"></category><category term="spreadsheet"></category><category term="jsonschema"></category><category term="stingray reader"></category></entry><entry><title>Reading Spreadsheets with Stingray Reader and Type Hinting</title><link href="https://slott56.github.io/2021_11_16-reading_spreadsheets_with_stingray_reader_and_type_hinting.html" rel="alternate"></link><published>2021-11-16T08:00:00-05:00</published><updated>2021-11-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-11-16:/2021_11_16-reading_spreadsheets_with_stingray_reader_and_type_hinting.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html"&gt;Spreadsheets, COBOL, and schema-driven file
processing&lt;/a&gt;,
etc. for some history on this project.&lt;/p&gt;
&lt;p&gt;Also, see
&lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray-Reader&lt;/a&gt; for the
current state of this effort.&lt;/p&gt;
&lt;p&gt;(This started almost 20 years ago, I've been refining and revising a
lot.)&lt;/p&gt;
&lt;div class="section" id="big-lesson-up-front"&gt;
&lt;h2&gt;Big Lesson Up Front&lt;/h2&gt;
&lt;p&gt;Python is very purely driven by the idea that …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html"&gt;Spreadsheets, COBOL, and schema-driven file
processing&lt;/a&gt;,
etc. for some history on this project.&lt;/p&gt;
&lt;p&gt;Also, see
&lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray-Reader&lt;/a&gt; for the
current state of this effort.&lt;/p&gt;
&lt;p&gt;(This started almost 20 years ago, I've been refining and revising a
lot.)&lt;/p&gt;
&lt;div class="section" id="big-lesson-up-front"&gt;
&lt;h2&gt;Big Lesson Up Front&lt;/h2&gt;
&lt;p&gt;Python is very purely driven by the idea that everything you write is
generic with respect to type. Adding type hints narrows the type domain,
removing the concept of &amp;quot;generic&amp;quot;.&lt;/p&gt;
&lt;p&gt;Generally, this is good.&lt;/p&gt;
&lt;p&gt;But not universally.&lt;/p&gt;
&lt;p&gt;Duck Typing -- and Python's generic approach to types -- is made visible
via Protocols and Generics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-ugly-type-hinting-problem"&gt;
&lt;h2&gt;An Ugly Type Hinting Problem&lt;/h2&gt;
&lt;p&gt;One type hint complication arises when writing code that really is
generic. Decorators are a canonical example of functions that are
generic with respect to the function being decorated. This, then, leads
to kind of complicated-looking type hints.&lt;/p&gt;
&lt;p&gt;See the mypy page on &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/generics.html?highlight=typevar#declaring-decorators"&gt;declaring
decorators&lt;/a&gt;.
The use of a &lt;tt class="docutils literal"&gt;TypeVar&lt;/tt&gt; to show that how a decorator's argument type
matches the the return type is big help. Not all decorators follow the
simple pattern, but many do.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import TypeVar
F = TypeVar('F', bound=Callable[..., Any])
def myDecorator(function: F) -&amp;gt; F:
    etc.
&lt;/pre&gt;
&lt;p&gt;The Stingray Reader problem is that a number of abstractions are generic
with respect to an underlying instance object.&lt;/p&gt;
&lt;p&gt;If we're working with CSV files, the instance is a &lt;tt class="docutils literal"&gt;tuple[str]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If we're working with ND JSON objects, the instance is some JSON type.&lt;/p&gt;
&lt;p&gt;If we're working with some Workbook (e.g., via xlrd, openpyxl, or
pyexcel) then, the instance is defined by one of these external
libraries.&lt;/p&gt;
&lt;p&gt;If we're working with COBOL files, then the instances may be str or may
be bytes. The &lt;tt class="docutils literal"&gt;typing.AnyStr&lt;/tt&gt; type provides a useful generic
definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="traditional-oo-design-is-the-problem"&gt;
&lt;h2&gt;Traditional OO Design Is The Problem&lt;/h2&gt;
&lt;p&gt;Once upon a time, in the dark days, we had exactly one design choice:
inheritance.&lt;/p&gt;
&lt;p&gt;Actually, we had two, but so many writers get focused on &amp;quot;explaining&amp;quot; OO
programming, that they tend to gloss over composition. The focus on the
sort-of novel concept of inheritance.&lt;/p&gt;
&lt;p&gt;And this leads to folks arguing that inheritance shouldn't be thought of
as central. Which is a kind of moot argument over what we're doing when
we're writing about OO design. We have to cover both. Inheritance has
more drama, so it becomes a bit more visible than composition. Indeed,
inheritance creates a number of design constraints, and that's where the
drama surfaces.&lt;/p&gt;
&lt;p&gt;Any discussion of design patterns tends to be more balanced. Many
patterns -- like &lt;strong&gt;Strategy&lt;/strong&gt; and &lt;strong&gt;State&lt;/strong&gt; -- are compositional
patterns. Inheritance actually plays a relatively minor role until you
reach interesting boundary cases.&lt;/p&gt;
&lt;p&gt;Specifically.&lt;/p&gt;
&lt;p&gt;What do you do when you have a &lt;strong&gt;Strategy&lt;/strong&gt; class hierarchy and ONE of
those strategies has an unique type hint for a parameter? Most of the
classes use one type. One unique subclass needs a distinct type. For
example, this outlier among the &lt;strong&gt;Strategy&lt;/strong&gt; alternatives uses a str
parameter instead of float.&lt;/p&gt;
&lt;p&gt;Do you push that type distinction up to the top of the hierarchy? Maybe
define it as &lt;tt class="docutils literal"&gt;edge_case: Optional[Union[str, float]] = None&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;You can't simply change the parameter's value in one subclass with
impunity. mypy will catch you at this, and tell you you have Liskov
Substitution problems.&lt;/p&gt;
&lt;p&gt;Traditionally, we would often take this to mean that we have a larger
problem here. We have a leaky abstraction. Some implementation details
are surfacing in a bad way and we need more abstract classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-a-protocol-duck-typing"&gt;
&lt;h2&gt;It's A Protocol (&amp;quot;Duck Typing&amp;quot;)&lt;/h2&gt;
&lt;p&gt;When I started rewriting Stingray Reader, I started with a fair number
of abstract classes. These classes were supposed to have widely varying
implementations, but common semantics.&lt;/p&gt;
&lt;p&gt;Applying a schema definition to a CSV file means that data values can be
converted from strings to something more useful,&lt;/p&gt;
&lt;p&gt;Applying a schema to a JSON file means doing a validation pass to be
sure the loaded object meets the schema's expectations.&lt;/p&gt;
&lt;p&gt;Applying a schema to a Workbook file is a kind of hybrid between CSV
processing and JSON processing. The workbook's values will have been
unpacked by the interface module. Each row will look like a
&lt;tt class="docutils literal"&gt;list[Any]&lt;/tt&gt; that can be subject to JSON schema validation.&lt;/p&gt;
&lt;p&gt;Apply a schema to COBOL means using the schema details to figure out how
to unpack the bytes. This is suddenly a lot more complex than the other
cases.&lt;/p&gt;
&lt;p&gt;The concepts of inheritance and composition aren't really applicable.&lt;/p&gt;
&lt;p&gt;This is something even more open-ended. It's a protocol.&lt;/p&gt;
&lt;p&gt;We want a common interface and common semantics. But. We're not really
going to leverage any common code.&lt;/p&gt;
&lt;p&gt;This unwinds a lot abstract superclasses, replacing them with
&lt;tt class="docutils literal"&gt;Protocol&lt;/tt&gt; class definitions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Workbook(abc.ABC):
    &amp;#64;abc.abstractmethod
    def sheet(self, name: str, schema: Schema) -&amp;gt; Sheet:
        ...
    def row_iter(self) -&amp;gt; Iterator[list[Union[str, bytes, int, float, etc.]]]:
        ...
&lt;/pre&gt;
&lt;p&gt;The above is not universally useful. Liskov Substitution has to apply.
In some cases, we don't have a tidy set of relationships. Here's the
alternative&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Workbook(Protocol):
    def sheet(self, name: str, schema: Schema) -&amp;gt; Sheet:
        ...
    def row_iter(self) -&amp;gt; Iterator[list[Any]]:
        ...
&lt;/pre&gt;
&lt;p&gt;This gives us the ability to define classes that adhere to the Workbook
Protocol but don't have a simple, strict subclass-superclass-Liskov
substitution relationship.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-a-generic-protocol"&gt;
&lt;h2&gt;It's A Generic Protocol&lt;/h2&gt;
&lt;p&gt;It turns out, this isn't quite right. What's really required is a
&lt;tt class="docutils literal"&gt;Generic[Type]&lt;/tt&gt;, not the simple &lt;tt class="docutils literal"&gt;Protocol&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Workbook(Generic[Instance]):
    def sheet(self, name: str, schema: Schema) -&amp;gt; Sheet:
        ...
    def row_iter(self) -&amp;gt; Iterator[list[Instance]]:
        ...
&lt;/pre&gt;
&lt;p&gt;This lets us create Workbook variants that are highly type-specific, but
not narrowly constrained by inheritance rules.&lt;/p&gt;
&lt;p&gt;This type hinting technique describes Python code that really is generic
with respect to implementation type details. It allows a single Facade
to contain a number of implementations.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="protocols"></category><category term="annotations"></category><category term="type hints"></category></entry><entry><title>Welcome to Python: Some hints for ways to explain how truly bad the language is</title><link href="https://slott56.github.io/2021_11_02-welcome_to_python_some_hints_for_ways_to_explain_how_truly_bad_the_language_is.html" rel="alternate"></link><published>2021-11-02T14:55:00-04:00</published><updated>2021-11-02T14:55:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-11-02:/2021_11_02-welcome_to_python_some_hints_for_ways_to_explain_how_truly_bad_the_language_is.html</id><summary type="html">&lt;p&gt;As an author with many books on Python, I'm captivated by people's hot
takes on why Python is so epically bad. Really Bad. Uselessly Bad.
Profoundly Broken. etc.&lt;/p&gt;
&lt;p&gt;I'll provide some hints on topics that get repeated a lot. If you really
need to write a blog post about how …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As an author with many books on Python, I'm captivated by people's hot
takes on why Python is so epically bad. Really Bad. Uselessly Bad.
Profoundly Broken. etc.&lt;/p&gt;
&lt;p&gt;I'll provide some hints on topics that get repeated a lot. If you really
need to write a blog post about how bad Python is, please try to take a
unique approach on any of these common complaints.  If you have a blog
post half-written, skip to the &lt;strong&gt;tl;dr&lt;/strong&gt; section to see if your ideas
are truly unique.&lt;/p&gt;
&lt;div class="section" id="whitespace"&gt;
&lt;h2&gt;Whitespace&lt;/h2&gt;
&lt;p&gt;Please don't waste time complaining about having to use whitespace in
your code. I'm sure it's a burden on your soul to configure your editor
to indent in groups of four spaces. I'm sorry it's so painful. But.
Python isn't the only language with whitespace.&lt;/p&gt;
&lt;p&gt;The shell scripting language has semantic whitespace. (It's not used for
indentation, but please try &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cat$HOME/.bashrc&lt;/span&gt;&lt;/tt&gt; (without any spaces)
and tell me what happens. Spaces matter in a lot of languages.&lt;/p&gt;
&lt;p&gt;Even in C, some whitespace is semantic. The rest of the whitespace is
for humans to read your code.&lt;/p&gt;
&lt;p&gt;If you're *sure* that indentation is a fatal problem, please provide
an example in the language of your choice where the &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;'s or the&lt;/p&gt;
&lt;p&gt;case/esac&lt;/p&gt;
&lt;p&gt;was *required* because ordinary, readable indentation didn't --
somehow -- express the nesting.&lt;/p&gt;
&lt;p&gt;The example can be the basis for a Python Enhancement Proposal (PEP) to
fix the whitespace problem you've identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-self-instance-variable"&gt;
&lt;h2&gt;The &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; Instance Variable&lt;/h2&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; everywhere is simpler than using &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; in those
obscure special cases where it's ambiguous. Python developers are sure
that being uniformly explicit is a terrible burden on your soul. If you
really feel that obscure special cases are required, consider writing a
pre-processor to sort out the special cases for us.&lt;/p&gt;
&lt;p&gt;I'm sure there's a way to inject another level of name resolution into
the local v. global choices. Maybe local-self-global or
self-local-global could be introduced.&lt;/p&gt;
&lt;p&gt;Please include examples. From this a Python Enhancement Proposal can be
drafted to clarify what the improvement is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-formal-constants"&gt;
&lt;h2&gt;No Formal Constants&lt;/h2&gt;
&lt;p&gt;Python doesn't waste too much time on keywords, like &lt;tt class="docutils literal"&gt;const&lt;/tt&gt;, to alter
the behavior of assignment. Instead, we tend to rely on tools to check
our code.&lt;/p&gt;
&lt;p&gt;Other languages have compilers to look for assignment to consts. Python
has tools like flake8, pyflakes, pylint, and others, to look for this
kind of thing. Conventionally, variables at the module level with
ALL_CAPS names are likely to be constants. Multiple assignment
statements would be a problem. Got it.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why can't the language check?&amp;quot; you ask. Python doesn't normally have a
separate compile pass to pre-check the code. But. As I said above, you
can use tools to create a pre-checking pass. That's what most of us do.&lt;/p&gt;
&lt;p&gt;&amp;quot;But what if someone accidentally overwrites a constant?&amp;quot; you insist.
Many folks would suggest some better documentation to explain the
consequences an clarify how unit tests will fail when this happens.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why should I write unit tests to be sure a constant wasn't changed?&amp;quot;
you demand. I'm not really insisting on it. But you said you had
developers who would &amp;quot;accidentally&amp;quot; overwrite a constant in an
assignment statement, and you couldn't use tools like pylint to check
for it. So. I suggested another choice. If you don't like that, use
enums. Or write documentation and explain which global items can be
changed and which can't be changed.&lt;/p&gt;
&lt;p&gt;BTW. If you have global variables that are NOT constants, consider this
a code smell.&lt;/p&gt;
&lt;p&gt;If you really need a mixture of constants and variables as module
globals, you can use the &lt;tt class="docutils literal"&gt;enum&lt;/tt&gt; module to create named attribute
values of a class definition. You get constants and a namespace. It's
pretty sweet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lack-of-privacy"&gt;
&lt;h2&gt;Lack of Privacy&lt;/h2&gt;
&lt;p&gt;It appears to be an article of faith that a &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword is
&lt;em&gt;unconditionally&lt;/em&gt; required.&lt;/p&gt;
&lt;p&gt;Looking at the history of OO languages, it looks like &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; seems
to have been introduced with C++. Not every OO language has the same
notion of private the C++ has. CLU has no concept of private. Smalltalk
considers instance variables equivalent to C++ &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt;, not
&lt;tt class="docutils literal"&gt;private&lt;/tt&gt;. Eiffel has a particularly sophisticated feature exportation
that doesn't involve a trivial private/public distinction.&lt;/p&gt;
&lt;p&gt;Since many languages that aren't C++ or Java have a variety of
approaches, it appears private isn't required. The next question, then,
is it necessary?&lt;/p&gt;
&lt;p&gt;It really helps to have a concrete example of a place where a private
method or attribute was absolutely essential. And it helps to do this in
a way that a leading _ on the variable name -- every time it's used --
is &lt;strong&gt;more&lt;/strong&gt; confusing than a keyword like private somewhere else in the
code.&lt;/p&gt;
&lt;p&gt;It also helps when the example does not involve a hypothetical Idiot
Developer who (a) doesn't read the documentation and (b) doesn't
understand the &lt;tt class="docutils literal"&gt;_leading_underscore&lt;/tt&gt; variable, and can still manage to
use the class. It's not that this developer doesn't exist; it's
questionable whether or not a complex language feature is better than a
little time spent on a code review.&lt;/p&gt;
&lt;p&gt;It helps when the example does not include the mysterious Evil Genius
Developer who (a) reads the documentation, and (b) leverages
the &lt;tt class="docutils literal"&gt;_leading_underscore&lt;/tt&gt; variable to format one of the OS disks or
something. This is far-fetched because the Evil Genius Developer had
access to the Python source, and didn't need a sophisticated subclassing
subterfuge. They could simply edit the code to remove the magical
privacy features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-declarations"&gt;
&lt;h2&gt;No Declarations&lt;/h2&gt;
&lt;p&gt;Python is not the only language where variables don't have type
declarations. In some languages, there are implied types associated with
certain kinds of names. In other languages, there are naming conventions
to help a reader understand what's going on.&lt;/p&gt;
&lt;p&gt;It's an article of faith that variable declarations are essential. C
programmers will insist that a &lt;tt class="docutils literal"&gt;void *&lt;/tt&gt; pointer is still helpful even
though the thing to which it points is left specifically undeclared.&lt;/p&gt;
&lt;p&gt;C (and C++) let you cast a pointer to -- well -- anything. With
resulting spectacular run-time crashes. Java has some limitations on
casting. Python doesn't have casting. An object is a member of a class
and that's the end of that. There's no wiggle-room to push it up or down
the class hierarchy.&lt;/p&gt;
&lt;p&gt;Since Python isn't the only language without variable declarations, it
raises the question: are they necessary?&lt;/p&gt;
&lt;p&gt;It really helps to have a concrete example of a place where a variable
declaration was absolutely essential for preventing some kind of
behavior that could not be prevented with a pylint check or a unit test.
While I think it's impossible to find a situation that's untestable and
can only be detected by careful scrutiny of the source, I welcome the
counter-example that proves me wrong.&lt;/p&gt;
&lt;p&gt;And. Please avoid this example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for data in some_list_of_int:
    if data == 42:
        print(&amp;quot;data is int&amp;quot;)
for data in some_list_of_str:
    if data == &amp;quot;bletch&amp;quot;:
        print(&amp;quot;data is str&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This requires reusing a variable name. Not really a good look for code.
If you have an example where there's a problem that's not fixed by
better variable names, I'm looking forward to it.&lt;/p&gt;
&lt;p&gt;This will change the world of Python type annotations. It will become an
epic PEP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="murky-call-by-value-semantics"&gt;
&lt;h2&gt;Murky Call-By-Value Semantics&lt;/h2&gt;
&lt;p&gt;Python doesn't have primitive types. There are no call-by-value
semantics. It's not that the semantics are confusing: they don't exist.
Everything is a reference. It seems simpler to avoid the special case of
a few classes of objects that don't have classes.&lt;/p&gt;
&lt;p&gt;The complex special cases surrounding unique semantics for bytes or ints
or strings or something requires an example. Since this likely involves
a lot of hand-waving about performance (e.g., primitive types are faster
for certain things) then benchmarking is also required. Sorry to make
you do all that work, but the layer of complexity requires some
justification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-compiler-or-all-errors-are-runtime-errors"&gt;
&lt;h2&gt;No Compiler (or All Errors are Runtime Errors)&lt;/h2&gt;
&lt;p&gt;This isn't completely true. Even without a &amp;quot;compiler&amp;quot; there are a lot of
ways to check for errors prior to runtime. Tools like flake8, pyflakes,
pylint, and mypy can check code for a number of common problems. Unit
tests are another common way to look for problems.&lt;/p&gt;
&lt;p&gt;Code that passes a unit test suite and crashes at runtime doesn't seem
to be a language problem. It seems to be a unit testing problem.&lt;/p&gt;
&lt;p&gt;&amp;quot;I prefer the compiler/IDE/something else find my errors,&amp;quot; you say.
Think of pylint as the compiler. Many Python IDE's actually do some
static analysis. If you think unit tests aren't appropriate for finding
and preventing problems, perhaps programming isn't your calling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;You may have some unique insight. If you do, please share that.&lt;/p&gt;
&lt;p&gt;If on the other hand, you're writing about these topics, please realize
that Python has been around for over 30 years. These topics are not new.
For the following, please try to provide something unique:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Whitespace&lt;/li&gt;
&lt;li&gt;The self Instance Variable&lt;/li&gt;
&lt;li&gt;No Formal Constants&lt;/li&gt;
&lt;li&gt;Lack of Privacy&lt;/li&gt;
&lt;li&gt;No Declarations&lt;/li&gt;
&lt;li&gt;Murky Call-By-Value Semantics&lt;/li&gt;
&lt;li&gt;No Compiler (or All Errors Are Run-Time Errors)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It helps to provide a distinctive spin on these problems. It helps even
more when you provide a concrete example. It really helps to write up a
Python Enhancement Proposal. Otherwise, we can seem dismissive of Yet
Another Repetitive Rant On Whitespace (YARROW).&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-used-to-whine-about-the-lack-of-case-switch-stat"&gt;
&lt;h2&gt;I used to whine about the lack of case/switch stat...&lt;/h2&gt;
&lt;p&gt;Jim Collins&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-11-17 13:22:29.382000-05:00&lt;/p&gt;
&lt;p&gt;I used to whine about the lack of case/switch statements until a) people
showed me how to work around it and b) it got fixed in 3.10.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="PEP"></category></entry><entry><title>Legacy Software is a Sticky Mess</title><link href="https://slott56.github.io/2021_10_12-legacy_software_is_a_sticky_mess.html" rel="alternate"></link><published>2021-10-12T08:00:00-04:00</published><updated>2021-10-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-10-12:/2021_10_12-legacy_software_is_a_sticky_mess.html</id><summary type="html">&lt;p&gt;I'll get to legacy software. First, however, some backstory on
observability.&lt;/p&gt;
&lt;p&gt;Sailors will sometimes create &amp;quot;Float Plans&amp;quot;. Like aircraft flight plans,
they have an itinerary to make it slightly easier to find us when
something goes wrong. Unlike airspace, which is tightly controlled by
the FAA, the seas are more-or-less …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'll get to legacy software. First, however, some backstory on
observability.&lt;/p&gt;
&lt;p&gt;Sailors will sometimes create &amp;quot;Float Plans&amp;quot;. Like aircraft flight plans,
they have an itinerary to make it slightly easier to find us when
something goes wrong. Unlike airspace, which is tightly controlled by
the FAA, the seas are more-or-less chaos.&lt;/p&gt;
&lt;p&gt;The practice then, is to create float plan and give it to a trusted
shore-side party, go out sailing, check in periodically, and cancel the
whole thing when you're done sailing. If you miss a check-in, they can
call an appropriate Search-And-Rescue agency like the US Coast Guard or
BASRA or local cops with jurisdiction over a lake or river.&lt;/p&gt;
&lt;p&gt;How much detail should be in this plan? For a long or complex trip, it
doesn't seem sensible to say &amp;quot;Going to the Bahamas&amp;quot; as your float plan.
That's a little thin on details. The bare minimum is to provide an
Estimated Time of Arrival (ETA). But. When you summarize 36 hours of
sailing to a single ETA, you invite observability problems. It's a
sailboat, and you could be becalmed. Things are fine, you're just going
to be late.&lt;/p&gt;
&lt;p&gt;Late, of course is relative. Simply late means you missed your ETA. If
you're becalmed to the point where you're running low on supplies, then,
this can become a bit of a problem.&lt;/p&gt;
&lt;p&gt;The general policy followed by SAR is to allow several hours past the
ETA before activating SAR resources. (The US Coast announces overdue
mariners on the VHF radio so others can keep a lookout for them and
render assistance.)&lt;/p&gt;
&lt;p&gt;If you have a one-checkin-plan that summarizes 36 hours of sailing with
a single ETA, you're going to be waiting for many hours after the ETA
for help. So. Total systems failure after the first hour means 35 hours
of drifting before someone will even alert SAR folks. And then the SAR
folks will wait several hours after the ETA in case you're only slow.&lt;/p&gt;
&lt;p&gt;What seems better is to have a sequence of waypoints with ETA's at each
waypoint. That way you have incremental evidence of success or failure,
and you're not waiting a LOOOONG time for your one-and-only ETA to pass
without a check-in.&lt;/p&gt;
&lt;p&gt;This leads us to software. And legacy software.&lt;/p&gt;
&lt;div class="section" id="creating-the-plan"&gt;
&lt;h2&gt;Creating the Plan&lt;/h2&gt;
&lt;p&gt;To create a sensible plan, you have waypoints as Latitude, Longitude
pairs. These are angles on a sphere, not distances on a plane, so
computing the length of a leg isn't a simple hypotenuse.&lt;/p&gt;
&lt;p&gt;It is a lot like a hypotenuse. For short distances, we can assume the
earth is more-or-less flat. We can then use a relatively simple
conversion (cosine of the latitude) to compress the longitudes toward
the poles. We can convert lat and lon to distances and use a hypotenuse
and get a really close answer.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def range_bearing(p1: LatLon, p2: LatLon, R: float = NM) -&amp;gt; tuple[float, Angle]:
    &amp;quot;&amp;quot;&amp;quot;Rhumb-line course from :py:data:`p1` to :py:data:`p2`.

    See :ref:`calc.range_bearing`.
    This is the equirectangular approximation.
    Without even the minimal corrections for non-spherical Earth.

    :param p1: a :py:class:`LatLon` starting point
    :param p2: a :py:class:`LatLon` ending point
    :param R: radius of the earth in appropriate units;
        default is nautical miles.
        Values include :py:data:`KM` for kilometers,
        :py:data:`MI` for statute miles and :py:data:`NM` for nautical miles.
    :returns: 2-tuple of range and bearing from p1 to p2.

    &amp;quot;&amp;quot;&amp;quot;
    d_NS = R * (p2.lat.radians - p1.lat.radians)
    d_EW = (
        R
        * math.cos((p2.lat.radians + p1.lat.radians) / 2)
        * (p2.lon.radians - p1.lon.radians)
    )
    d = math.hypot(d_NS, d_EW)
    tc = math.atan2(d_EW, d_NS) % (2 * math.pi)
    theta = Angle(tc)
    return d, theta
&lt;/pre&gt;
&lt;p&gt;This means we can't trivially write down a list of waypoints. We need to
do some fancy math to compute distances.&lt;/p&gt;
&lt;p&gt;For years and years. (Since our first &amp;quot;big&amp;quot; trip in 2007.) I've used
spreadsheets in various forms to work out the waypoints, distances,
estimated time enroute (ETE) and ETA.&lt;/p&gt;
&lt;p&gt;The math isn't too far beyond what a spreadsheet can do. But. There's a
complication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="complications"&gt;
&lt;h2&gt;Complications&lt;/h2&gt;
&lt;p&gt;File formats are a complication.&lt;/p&gt;
&lt;p&gt;There are KML files, GPX files, and CSV files that are used by various
pieces of software. This is only the tip of the iceberg, because some of
Navionics devices have an even more interesting USR file that contains
everything in your chartplotter. It's cool. But complicated.&lt;/p&gt;
&lt;p&gt;The file formats are -- clearly -- way outside the box for a
spreadsheet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-to-the-rescue"&gt;
&lt;h2&gt;Python to the rescue.&lt;/h2&gt;
&lt;p&gt;Since I'm a Python hack (and have been since well before 2007) I've got
all kinds of file conversion tools.
See &lt;a class="reference external" href="https://github.com/slott56/navtools"&gt;https://github.com/slott56/navtools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;And here's where legacy enters the picture. (Music Cue.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Fear that rattles in men's ears&lt;/div&gt;
&lt;div class="line"&gt;And rears its hideous head&lt;/div&gt;
&lt;div class="line"&gt;Dread ... Death ... in the wind ...&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spreadsheets.&lt;/p&gt;
&lt;p&gt;Up until yesterday, the final planning tool was a spreadsheet with
waypoints and times. Mac OS X Numbers is GREAT for this. I can pile in
boat information, crew information, safety information, the itinerary,
and SAR contact details in one spreadsheet, save it as a PDF, and email
it to my shore-side contacts.&lt;/p&gt;
&lt;p&gt;The BEST part of this was tinkering with the departure time while we
waited for weather. We could plug in the day we're leaving, get revised
ETA's for the waypoints, push the document, and take off.&lt;/p&gt;
&lt;p&gt;(We use an old &lt;a class="reference external" href="https://www.findmespot.com/en-us/"&gt;Spot Navigator&lt;/a&gt; to
provide notifications at midnight to show progress. We're going to
upgrade to a SpotX so we can send messages a little more flexibly.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-legacy-spreadsheet"&gt;
&lt;h2&gt;The Legacy Spreadsheet&lt;/h2&gt;
&lt;p&gt;The legacy spreadsheet has a lot of good UX features. It's really
adequate for some user stories. Save as PDF rocks.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;For the more advanced route planning, it isn't ideal. Specifically,
spreadsheets can be weak on multiple &amp;quot;what-if&amp;quot; scenarios.&lt;/p&gt;
&lt;p&gt;The genesis of spreadsheets (I'm old, I was there, I remember VisiCalc)
was &amp;quot;what-if&amp;quot; analysis. Change an assumption and follow the consequences
through the lattice of dependent cells. These are hard to save. You can
&amp;quot;Save As&amp;quot; to make a copy of the spreadsheet. You can save pages within a
single spreadsheet. These are terrible because you can't really make a
more fundamental change very easily. You have to make the same change to
all the copies in your pile of &amp;quot;what-if&amp;quot; alternatives.&lt;/p&gt;
&lt;p&gt;To be very specific. I often need to plan for different boat speeds. We
have a sailboat; wind and water matter a lot. Slow is about 5 knots.
Fast is about 6 knots. Our theoretical top speed is 8 knots, but we've
rarely seen that without a river flowing along with us. Sailing at that
speed means a lot of sail wrestling, something we'd rather not do.&lt;/p&gt;
&lt;p&gt;Fine. That's 3 scenarios, one for each speed: 5, 5.5, and 6. No big
deal.&lt;/p&gt;
&lt;p&gt;Until we add a waypoint. Or move a waypoint. Now we have to reset all
three spreadsheets with a different itinerary. Since it's a different
number of rows, we have the usual copy-and-paste problems in
spreadsheets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-better"&gt;
&lt;h2&gt;What's Better?&lt;/h2&gt;
&lt;p&gt;Jupyter notebooks crush the life out of spreadsheets.&lt;/p&gt;
&lt;p&gt;Here's the revised workflow.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create the route. Use tools like OpenCPN so the route can be exported
as a GPX or CSV file.&lt;/li&gt;
&lt;li&gt;Use a notebook to parse the route file, creating an internal Route
object.&lt;/li&gt;
&lt;li&gt;Manipulate the Route object, providing different ETA's and speed
assumptions. These assumptions lead to multiple cells in the
notebook. They can all share details so that one fundamental change
leads to lots and lots of recomputation of itineraries. We can
include all kinds of headings and markdown notes and thoughts and
considerations.&lt;/li&gt;
&lt;li&gt;Finalize a route that's part of the plan. Still working in the
confines of a longish notebook.&lt;/li&gt;
&lt;li&gt;Emit a Markdown file with Vessel Identification, Itinerary, Notes,
and SAR Contact sections. Run &lt;a class="reference external" href="https://pandoc.org"&gt;pandoc&lt;/a&gt; to make
a PDF. (This is the foundation for the nbconvert utility.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This workflow creates two categories results:&lt;/p&gt;
&lt;p&gt;One result is a Notebook with all of the planning details and thoughts
and contingencies and considerations.&lt;/p&gt;
&lt;p&gt;The other result(s) are float plan documents as PDF's that can be shared
widely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-did-this-take-so-long"&gt;
&lt;h2&gt;Why did this take so long?&lt;/h2&gt;
&lt;p&gt;I used spreadsheets from 2007 to 2021. Why switch now? Some reasons.&lt;/p&gt;
&lt;p&gt;Legacy solutions are sticky. This has a lot of consequences. I built up
&amp;quot;expertise&amp;quot; in making the legacy work. I had become an &amp;quot;expert&amp;quot; in
working around the hinky little problems with multiple what-if scenarios
and propagating changes from the route into the what-ifs. For example, I
limited the number of what-if scenarios I would consider because more
than two got confusing.&lt;/p&gt;
&lt;p&gt;New solutions are sometimes invisible. I only learned about Jupyter
Notebooks about three years ago. I did not realize how powerful they
were. I've since rearranged my thinking.&lt;/p&gt;
&lt;p&gt;I've known about RST and Markdown and Pandoc for years. But. Getting
from spreadsheet-like flexibility to a Markdown document was never a
clear step. Without something like Jupyter Lab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pulling-it-all-together"&gt;
&lt;h2&gt;Pulling it all together&lt;/h2&gt;
&lt;p&gt;Does it require some kind of catalyst to force change?&lt;/p&gt;
&lt;p&gt;Is it a slow accretion of evidence that the legacy software isn't
working?&lt;/p&gt;
&lt;p&gt;I'm pretty sure I had a long, slow Aha! moment as I realized that the
Numbers spreadsheet was a large pain in the ass and a notebook would be
simpler. It took a few days of fiddling to become really, really sure
Numbers was not working out.&lt;/p&gt;
&lt;p&gt;I think one of the biggest issues was a third &amp;quot;what-if&amp;quot; scenario. It was
helpful to visualize arrival times. But. It was a huge pain in the neck
to fiddle with the spreadsheets to get the right waypoints in there and
summarize the alternatives.&lt;/p&gt;
&lt;p&gt;I think the lesson here is to avoid automating anything unless you
actually are the user.&lt;/p&gt;
&lt;p&gt;If an organization wants software, a developer needs to do the job
manually to *really* understand what the pain points are. Users
develop expertise in the wrong things. And they want automation where
the benefits are minor. Automating the spreadsheet-to-PDF is wrong.
Replacing the spreadsheet is right.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="navtools"></category><category term="navigation"></category><category term="object-oriented design"></category><category term="#python"></category></entry><entry><title>New to Python -- How to manage architecture choices</title><link href="https://slott56.github.io/2021_10_05-new_to_python_how_to_manage_architecture_choices.html" rel="alternate"></link><published>2021-10-05T10:00:00-04:00</published><updated>2021-10-05T10:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-10-05:/2021_10_05-new_to_python_how_to_manage_architecture_choices.html</id><summary type="html">&lt;p&gt;This is a problem folks new to Python have, and sometimes can't
articulate that they have it.&lt;/p&gt;
&lt;p&gt;They don't know which package is the &amp;quot;right&amp;quot; one to use. Tox vs. Nox.
Click vs. Argparse vs. getopts? What's the &amp;quot;best&amp;quot; choice?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Response 1&lt;/strong&gt;. The whole Python ecosystem is chaos and the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is a problem folks new to Python have, and sometimes can't
articulate that they have it.&lt;/p&gt;
&lt;p&gt;They don't know which package is the &amp;quot;right&amp;quot; one to use. Tox vs. Nox.
Click vs. Argparse vs. getopts? What's the &amp;quot;best&amp;quot; choice?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Response 1&lt;/strong&gt;. The whole Python ecosystem is chaos and the language
is just a &amp;quot;toy&amp;quot;. You don't have this many choices with (pick your
language: e.g., Go or Rust or Scala).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response 2&lt;/strong&gt;. We need a way to make architectural choices that the
team understands and can use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Response 1 is remarkably common. It's hard to argue against. If someone
thinks innovation is chaos, they -- perhaps -- shouldn't be in
technology to begin with. &lt;strong&gt;Innovation IS chaos&lt;/strong&gt;. That's the essential
definition!&lt;/p&gt;
&lt;p&gt;However, they may be a project owner (or the manager of an old-school
waterfall-style project) or -- worse -- someone responsible for
architecture, and complain about chaos. If so, they're not really cut
out for managing rapid technological change, and they need to be
bypassed.&lt;/p&gt;
&lt;p&gt;Yes. Bypassed. Ignore them. Go to their meetings. Nod politely when they
rant about chaos. Then build working software. Eventually, they'll grow
to understand that a large ecosystem is NOT chaos. Rapid innovation is
not chaos. They may come to understand that filters are required to
reject some of the noise that comes from innovation.&lt;/p&gt;
&lt;div class="section" id="response-2-how-do-we-make-choices"&gt;
&lt;h2&gt;Response 2 -- How do we make choices?&lt;/h2&gt;
&lt;p&gt;Glad you asked.&lt;/p&gt;
&lt;p&gt;I have seen four common approaches.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;HiPPO&lt;/strong&gt;: The Highest-Paid Person's Opinion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tech Oracle&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HashTAG&lt;/strong&gt;: Hyperconnected And Socially Helpful Tech Advisory Group.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer Pressure&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's look at each of these.&lt;/p&gt;
&lt;div class="section" id="hippo"&gt;
&lt;h3&gt;HiPPO&lt;/h3&gt;
&lt;p&gt;The Highest-Paid Person's Opinion isn't easy to dismiss. They're an
executive or the product owner and they think their position in the
company gives them a magical ability to somehow predict the technical
shortcomings of a component or a framework or a language.&lt;/p&gt;
&lt;p&gt;Once upon a time, when all components were licensed, someone negotiated
contracts for support and training. The contracts (and negotiations)
were a Big Sweaty Deal (BSD™). The HiPPO needed to justify all the time
and money spent with the vendor. Okay. Sure. Then their opinion on
continuing to invest in a losing proposition makes a lot of sense. Since
they've already spent money with the vendor, they'd like us to continue
to spend money with the vendor, even if the vendor's product isn't
really very good.&lt;/p&gt;
&lt;p&gt;Those times are past. Most everything is open source nowadays, and we
pay for support reluctantly. We often have POC's to chose among
alternatives. We can fire a vendor quickly. We don't invest heavily in
inking a deal. (In the olden days, I got lots of plane rides and hotels
from vendors. Getting to a deal was fun back then.)&lt;/p&gt;
&lt;p&gt;The HiPPO needs to be informed that their opinion isn't helpful unless
they can back it up with a POC. If they can't supply the POC, then the
technical folks will keep arguing until they have competing POC's to
help make a technical choice.&lt;/p&gt;
&lt;p&gt;With good languages (like Python) and large ecosystems, POC's are cheap
insurance to back up an opinion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tech-oracle"&gt;
&lt;h3&gt;Tech Oracle&lt;/h3&gt;
&lt;p&gt;The Tech Oracle is expected to provide an opinion on everything. In many
cases, this can work.&lt;/p&gt;
&lt;p&gt;If the architecture is reasonably well known to the Oracle, then picking
open-source projects to help build a solution isn't too difficult.
Filters like &amp;quot;date of last update&amp;quot; and &amp;quot;volume of changes on GitHub&amp;quot; can
be useful ways for the Oracle to locate better components and
frameworks.&lt;/p&gt;
&lt;p&gt;The Oracle should be producing POC's. This makes it hard for them also
to produce production code. Not impossible, but hard. Their role isn't
quite the same as other devs, since they have to provide up-front
justification before too much real work is invested.&lt;/p&gt;
&lt;p&gt;If the Oracle can't provide POC's, that's a bit of a problem. I've met
architects who don't code. I couldn't find a way to trust them. Yes,
they may know a lot. They're wonderfully articulate. Great slide decks.
Good choices of lunch places where they try to influence you. But... I
don't trust architects who don't code. Sorry. Personal weakness.&lt;/p&gt;
&lt;p&gt;Architecture diagrams are an essential work product in addition to
POC's. Usually, they're focused on a specific project, rather than
providing general-purpose guidance. Generally, the overall ecosystem
moves so quickly that the idea of a general-purpose, one-size-fits-all
architecture isn't a good idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hashtag"&gt;
&lt;h3&gt;HashTAG&lt;/h3&gt;
&lt;p&gt;The Hyperconnected And Socially Helpful Tech Advisory Group is often a
really good thing. It's best when there are multiple teams who need to
coordinate. It can be slow-ish, however, and time needs to be invested
in this. TAG meetings deserve stories on the storyboard. TAG time needs
to be prioritized above individual team needs.&lt;/p&gt;
&lt;p&gt;A TAG needs to look at choices, and publish recommendations. That often
means reviewing POC's. And that means folks have to take POC's to the
TAG for them to weigh in on the difficult-to-quantify &amp;quot;better solution&amp;quot;.&lt;/p&gt;
&lt;p&gt;These are interesting demos. The TAG should be looking at the same (or
similar) functionality from competing POC's to render a final, binding
judgement. There needs to be an agenda, strict time-lines for the
presentation, and a final -- almost objective -- score-card to show the
elements of the final decision.&lt;/p&gt;
&lt;p&gt;Decisions are an essential work product. Published. Socialized.
Well-known. Easy-to-find. A whole GitHub repo with decisions is
essential.&lt;/p&gt;
&lt;p&gt;Architecture diagrams are also an essential work product. These should
provide general-purpose guidance. A team should be able to start with
one of these, eliminate the parts they don't need, plug in their product
name, and move forward quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="peer-pressure"&gt;
&lt;h3&gt;Peer Pressure&lt;/h3&gt;
&lt;p&gt;This is the HashTAG reduced to a single team. Given a choice, the
members of the team need to look at filters the way the Tech Oracle
should. They need to weigh things like More stars in GitHub? Fewer bug
reports? Documentation? And they need to capture the decision in
something more than a conversation.&lt;/p&gt;
&lt;p&gt;If it's hard to reach consensus, this means the team has to commit to
dueling POC's. This needs to be time-boxed work. It's enough of a POC to
show how competing libraries or frameworks *could* be used in the
implementation. It's important not to run down the road to a candidate
implementation. The POC should point the implementers in the right
direction.&lt;/p&gt;
&lt;p&gt;(A candidate implementation becomes a kind of &lt;em&gt;fait accompli&lt;/em&gt;: &amp;quot;I've
already built it, we might as well use it. This dilutes consensus in
favor of fast coding.)&lt;/p&gt;
&lt;p&gt;Ideally, the POC shows what code could look like. It might include
benchmarks. Test cases. Concrete things that can be compared -- line by
line if necessary -- to show some measurable aspect of &amp;quot;better.&amp;quot;&lt;/p&gt;
&lt;p&gt;The decision and the diagram are part of the team's legacy. It has to
live with the code. The number of decisions that get redebated after a
few sprints needs to be minimal. It's never zero, but the team needs to
put stories on the board for finalizing tech documentation with
architectural decisions, reasons, and links to the POC that backs up the
decision.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-what-about-python"&gt;
&lt;h2&gt;Wait. What about Python?&lt;/h2&gt;
&lt;p&gt;This, clearly, has nothing to do with Python.&lt;/p&gt;
&lt;p&gt;The vastness and rapidity of change in the Python ecosystem surfaces a
need for some kind of formal decision-making process.&lt;/p&gt;
&lt;p&gt;But Python isn't the cause of the problem. All open source software
moves quickly. A popular language like Python has more potential sources
of confusion than a more specialized language/framework like R.&lt;/p&gt;
&lt;p&gt;Embrace the community nature of decision-making. Python is about
community building and collective solutions to difficult problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-all-those-proofs-of-concept"&gt;
&lt;h2&gt;But. All those Proofs of Concept...&lt;/h2&gt;
&lt;p&gt;Yes, there will be POC's. In the case of a HashTAG or TechOracle, these
need to be preserved and maintained and upgraded all the time. It's real
work. It's a lot of real work.&lt;/p&gt;
&lt;p&gt;Remember, the Python ecosystem moves rapidly. There's a lot of
innovation, and it needs to be actively tracked. (Unlike the olden days
where a C compiler update was an annual affair buried in an annual OS
upgrade.)&lt;/p&gt;
&lt;p&gt;This leads to defining projects via project templates.
See &lt;a class="reference external" href="https://cookiecutter.readthedocs.io/en/1.7.2/"&gt;https://cookiecutter.readthedocs.io/en/1.7.2/&lt;/a&gt; for a good approach to
this. You want to create cookie cutters that include enough skeleton
code that you can run a complete 100% code coverage unit test.&lt;/p&gt;
&lt;p&gt;You can then use &lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt; (or
&lt;a class="reference external" href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt;) to define your component
and framework versions as variant virtual environments. As components
evolve, you update the versions and rerun your test suite. You can
publish internal update trackers for project teams to make sure they're
testing with the latest-and-greatest environments.&lt;/p&gt;
&lt;p&gt;You'll also have to watch Python version changes. These can creep up on
organizations. The PEP's and the schedules need to be central to folks
using Python. See &lt;a class="reference external" href="https://endoflife.date/python"&gt;https://endoflife.date/python&lt;/a&gt; for a handy
visualization.&lt;/p&gt;
&lt;div class="section" id="the-billboard"&gt;
&lt;h3&gt;The Billboard&lt;/h3&gt;
&lt;p&gt;Enterprise developers all discover that there's no way to share code
&lt;strong&gt;easily&lt;/strong&gt; within an enterprise. Everyone is isolated in their teams,
and each team winds up reinventing some wheel or other. It's been an
ongoing problem since IT organizations grew beyond a single team.&lt;/p&gt;
&lt;p&gt;Python is no different. Teams solving related problems don't talk
enough. If you have lots of meetings to share things, no real work gets
done.&lt;/p&gt;
&lt;p&gt;Python uses a Package Index to track popular useful packages. Visit
&lt;a class="reference external" href="https://pypi.org"&gt;https://pypi.org&lt;/a&gt; if you haven't seen it yet. You have two paths forward
in an enterprise.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Your own PyPI. This is easy and fun. You can have the internal PyPI
shadow the global PyPI.&lt;/li&gt;
&lt;li&gt;Use JFrog Artifactory. &lt;a class="reference external" href="https://jfrog.com/artifact-management/"&gt;https://jfrog.com/artifact-management/&lt;/a&gt; This
involves spending money to track in-house artifacts as well as global
PyPI artifacts.&lt;/li&gt;
&lt;li&gt;A GitHub Billboard organization. This is an organization that serves
as a place to post links to other repos. It needs a little bit of
curation. As an implementation, the organization's repositories are a
lot of small project advertisements. The degenerate case is a README.md.
A better case is the POC repo showing how to use the real project. In
the middle is a cookie cutter. This is your in-house advertising. It's
relatively easy to search because you're looking at one organization's
list of repositories. Each is a pithy, focused summary of another
project. Choose names that reflect why someone wants to look more deeply
at the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The point here is to embrace the chaos that stems from innovation and
make it visible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="community"></category><category term="management"></category></entry><entry><title>Pivot to Python -- 150 pages of things you might need to know</title><link href="https://slott56.github.io/2021_09_28-pivot_to_python_150_pages_of_things_you_might_need_to_know.html" rel="alternate"></link><published>2021-09-28T08:00:00-04:00</published><updated>2021-09-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-28:/2021_09_28-pivot_to_python_150_pages_of_things_you_might_need_to_know.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://books.apple.com/us/book/id1586977675"&gt;http://books.apple.com/us/book/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Python Programming language is a deep topic. This book provides
focused guidance on installing Python, creating virtual enivironments
and using Jupyter Lab to build foundational skills in using Python. The
book covers many built-in data types. There are two small case …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://books.apple.com/us/book/id1586977675"&gt;http://books.apple.com/us/book/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Python Programming language is a deep topic. This book provides
focused guidance on installing Python, creating virtual enivironments
and using Jupyter Lab to build foundational skills in using Python. The
book covers many built-in data types. There are two small case studies
and one larger case study to provide examples of how Python can be used
to tackle real-world problems. There are over 100 code samples.&lt;/p&gt;
&lt;p&gt;The companion GitHub repository,
&lt;a class="reference external" href="https://github.com/slott56/pivot-to-python"&gt;https://github.com/slott56/pivot-to-python&lt;/a&gt;, contains all of the example
code.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills"></category></entry><entry><title>Python and the "Syntactic Whitespace Problem"</title><link href="https://slott56.github.io/2021_09_27-python_and_the_syntactic_whitespace_problem.html" rel="alternate"></link><published>2021-09-27T16:04:00-04:00</published><updated>2021-09-27T16:04:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-27:/2021_09_27-python_and_the_syntactic_whitespace_problem.html</id><summary type="html">&lt;p&gt;Check out this list of questions on Stack Overflow:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax"&gt;http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About 10% of these are really just complaints about Python's syntax.
Almost every Stack Overflow question on Python's use of syntactic
whitespace is really just a complaint.&lt;/p&gt;
&lt;p&gt;Here's today's example: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3994765/python-without-whitespace-requirements"&gt;Python without …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this list of questions on Stack Overflow:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax"&gt;http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About 10% of these are really just complaints about Python's syntax.
Almost every Stack Overflow question on Python's use of syntactic
whitespace is really just a complaint.&lt;/p&gt;
&lt;p&gt;Here's today's example: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3994765/python-without-whitespace-requirements"&gt;Python without whitespace requirements&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's the money quote: &amp;quot;I could potentially be interested in
learning Python but the whitespace restrictions are an absolute no-go
for me.&amp;quot;&lt;/p&gt;
&lt;p&gt;Here's the reality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Everyone Indents Correctly All The Time In All Languages.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Everyone. All the time. Always.&lt;/p&gt;
&lt;p&gt;It's amazing how well, and how carefully people indent code. Not
Python code.&lt;/p&gt;
&lt;p&gt;All Code. XML. HTML. CSS. Java. C++. SQL. All Code.&lt;/p&gt;
&lt;p&gt;Everyone indents. And they always indent &lt;strong&gt;correctly&lt;/strong&gt;. It's truly
amazing how well people indent. In particular, when the syntax
doesn't require any indentation, they still indent beautifully.&lt;/p&gt;
&lt;p&gt;Consider this snippet of C code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if( a == 0 )
   printf( &amp;quot;a is zero&amp;quot; );
   r = 1;
else
   printf( &amp;quot;a is non-zero&amp;quot; );
   r = a % 2;
&lt;/pre&gt;
&lt;p&gt;Over the last few decades, I've probably spent a complete man-year
reading code like that and trying to figure out why it doesn't work.
It's not easy to debug.&lt;/p&gt;
&lt;p&gt;The indentation completely and accurately reflects the programmer's
intention. Everyone gets the indentation right. All the time. In
every language.&lt;/p&gt;
&lt;p&gt;And people still complain about Python, even when they indent
beautifully in other languages.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="when-first-learning-python-i-found-the-use-of-whit"&gt;
&lt;h2&gt;When first learning python I found the use of whit...&lt;/h2&gt;
&lt;p&gt;Mark&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 08:53:12.128000-04:00&lt;/p&gt;
&lt;p&gt;When first learning python I found the use of whitespace for defining
blocks odd too. What was especially troublesome was the notion of tabs
vs. spaces for the whitespace. Once you get a decent python aware editor
that problem is no longer a problem and you are left with a language
that helps enforce readability. Maybe &amp;quot;get a good python aware editor&amp;quot;
should be the first step to every tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="every-one-indents-correctly-all-the-time-in"&gt;
&lt;h2&gt;&amp;quot;Every[one] Indents Correctly All The Time In...&lt;/h2&gt;
&lt;p&gt;Robin Norwood&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 11:45:18.435000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Every[one] Indents Correctly All The Time In All Languages.&amp;quot;
Oh, if only that were true. Look at pretty much any Javascript code that
isn't part of a framework. For some reason, JS coders seem to treat
mis-indentation as an obfuscation technique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempting-to-do-templating-with-django-templating"&gt;
&lt;h2&gt;Attempting to do templating with django templating...&lt;/h2&gt;
&lt;p&gt;Travis&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 13:00:24.648000-04:00&lt;/p&gt;
&lt;p&gt;Attempting to do templating with django templating language can be ugly
and horrifying, but jinja2 fixes most of those problems.&lt;/p&gt;
&lt;p&gt;What I find fascinating is that HAML, a syntax for HTML and XML that
represents structure using indentation and a syntax similar to CSS, is
written in ruby. It's also an extremely popular ruby library. There's no
popular alternative for python.&lt;/p&gt;
&lt;p&gt;The same is true for its' whitespace significant CSS syntax, SASS, but
that's understandable... since it's a product that has no barrier to
using it standalone other than a zealotry for having everything in your
language of choice.&lt;/p&gt;
&lt;p&gt;I miss HAML working with python. :/&lt;/p&gt;
&lt;p&gt;s/not and error free/not as error free/
sorry
----------------------------------------------&lt;/p&gt;
&lt;p&gt;matt harrison&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 12:04:22.431000-04:00&lt;/p&gt;
&lt;p&gt;s/not and error free/not as error free/
sorry&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whenever-you-respond-to-complaints-you-should-ask"&gt;
&lt;h2&gt;Whenever you respond to complaints, you should ask...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 19:33:59.273000-04:00&lt;/p&gt;
&lt;p&gt;Whenever you respond to complaints, you should ask yourself whether the
complaint is worth answering.&lt;/p&gt;
&lt;p&gt;I think people who make a reflexive judgement based on whitespace (or
even any syntax, so long as the syntax is internally reflective) are
likely to either be zealots for some other technology, irrational, or -
most likely - very inexperienced with real-world development. In other
words, they are people whose acceptance the Python community (or any
community) does not need.&lt;/p&gt;
&lt;p&gt;Python's whitespace requirement is a trade-off like any other. I find it
easy to work with and aesthetically pleasing. It does have some pitfalls
(tabs vs. spaces when working with poorly configured editors; pasting a
block at a different level of statement nesting than the level it was
copied from), but those are just different trade-offs to other languages
where e.g. you may have more superfluous syntax or less consistency in
code layout (which makes debugging other people's code and co-operation
harder).
Martin&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-are-a-couple-of-times-the-whitespace-bites-y"&gt;
&lt;h2&gt;There are a couple of times the whitespace bites y...&lt;/h2&gt;
&lt;p&gt;matt harrison&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 12:02:40.573000-04:00&lt;/p&gt;
&lt;p&gt;There are a couple of times the whitespace bites you in Python (and not
in non-whitespace aware languages).&lt;/p&gt;
&lt;p&gt;One is pasting code. If you are at different levels of the block or the
pasted code contains tabs instead of spaces it's annoying. Other
languages don't have this.&lt;/p&gt;
&lt;p&gt;Automatic re-indent is not and error free as in other languages.
This also makes Python a bad language for (html) templating. Python
based template languages end up looking like ruby (with end statements).
But ... people don't mention these, they only say that it's hard to use
whitespace. Well the rule is easy (replace { with : and indent
consistently), not sure what the holdup is since no one seems to mention
what I've just said.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ok-having-a-look-at-your-post-once-more-i-now-d"&gt;
&lt;h2&gt;Ok, having a look at your post once more, I now d...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-27 06:24:54.731000-04:00&lt;/p&gt;
&lt;p&gt;Ok, having a look at your post once more, I now *do* think that was
exactly your point (people getting indentation right when not getting
the braces right)...&lt;/p&gt;
&lt;p&gt;Sorry about that stupid comment :-)&lt;/p&gt;
&lt;p&gt;Is there a Python auto-formatter?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-i-don"&gt;
&lt;h2&gt;Because I don&amp;amp;#...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 12:50:22.324000-04:00&lt;/p&gt;
&lt;p&gt;Is there a Python auto-formatter?
Because I don't format my code any more. I let tools format it. And I
don't fool with it. I used to spend a lot of time on indentation, but I
ended up letting it go and I'm a lot more productive now. (C#, SQL)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-loved-the-significant-whitespace-in-python-from"&gt;
&lt;h2&gt;I loved the significant whitespace in Python from ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 13:23:48.083000-04:00&lt;/p&gt;
&lt;p&gt;I loved the significant whitespace in Python from the first time I saw
it.&lt;/p&gt;
&lt;p&gt;&amp;#64;matt harrison:
Cut and paste will mess up a program more ways than whitespace. I very
often regret doing it. If the same code is repeated often it should be
refactored into a function.&lt;/p&gt;
&lt;p&gt;&amp;#64;cade:
Many editors/IDEs have Python formatters. emacs comes to mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-m-not-100-whether-this-actually-might-be-yo"&gt;
&lt;h2&gt;I&amp;amp;#39;m not 100% whether this actually might be yo...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-27 06:19:52.348000-04:00&lt;/p&gt;
&lt;p&gt;I'm not 100% whether this actually might be your point about the C
example, but: This C code will not compile.&lt;/p&gt;
&lt;p&gt;The indentation hides the fact that the &amp;quot;if&amp;quot; only refers to the next
statement. The &amp;quot;else&amp;quot; therefore has no matching &amp;quot;if&amp;quot; and the compiler
will throw an error. In those archaic languages you need braces {...}
:-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-are-people-who-don-39-t-indent-correctly-w"&gt;
&lt;h2&gt;There are people who don&amp;amp;#39;t indent correctly. W...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-28 15:25:07.925000-04:00&lt;/p&gt;
&lt;p&gt;There are people who don't indent correctly. When I was a TA for
Programming 101, there was a student in the class that indented Every.
Single. Line. Differently. I had to reformat his code to see what the
heck he was up to.&lt;/p&gt;
&lt;p&gt;He was the only one who did this, though.&lt;/p&gt;
&lt;p&gt;&amp;amp;quot;Everyone Indents&amp;amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oh-man-you-don-39"&gt;
&lt;h2&gt;Oh man, you don&amp;amp;#39;...&lt;/h2&gt;
&lt;p&gt;Herberth Amaral&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-27 10:38:01.125000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Everyone Indents&amp;quot;&lt;/p&gt;
&lt;p&gt;Oh man, you don't know non-experienced programmers. In the beginning,
make them indent their code is like make an turtle climb a mountain:
they don't do.&lt;/p&gt;
&lt;p&gt;Python solves this problem in a very elegant way, by throwing syntax
errors when indentation aren't done right.&lt;/p&gt;
&lt;p&gt;For me, at least, whitespace is a Python's killer feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-believe-you-meant-quot-everyone-indents-quo"&gt;
&lt;h2&gt;I believe you meant &amp;amp;quot;Everyone indents ...&amp;amp;quo...&lt;/h2&gt;
&lt;p&gt;André Roberge&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 21:45:30.073000-04:00&lt;/p&gt;
&lt;p&gt;I believe you meant &amp;quot;Everyone indents ...&amp;quot; when you wrote &amp;quot;Every indents
...&amp;quot;. Also, for the commenter who mentions missing HAML, lookup shpaml
...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sorry-but-you-have-no-idea-what-youre-talking-ab"&gt;
&lt;h2&gt;Sorry, but you have no idea what you’re talking ab...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-05 06:00:12.819000-04:00&lt;/p&gt;
&lt;p&gt;Sorry, but you have no idea what you’re talking about. When writing in
C#, I don’t indent correctly. I don’t bother, because I don’t have to.
Visual Studio fixes all indentation for me. If I did what you said, I
would end up with wrong programs, as demonstrated in your own example.
Instead I rely on Visual Studio’s formatting to tell me what I
*actually* wrote. Your example demonstrates how to end up with a wrong
program that doesn’t mean what you think it does. I get the feedback
that tells me that my code structure is *actually* what I mean it to
be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-good-topic-really-i-like-any-post-talking-about"&gt;
&lt;h2&gt;So good topic really i like any post talking about...&lt;/h2&gt;
&lt;p&gt;Smart Spanish Blogs&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-05-05 06:13:16.655000-04:00&lt;/p&gt;
&lt;p&gt;So good topic really i like any post talking about &lt;a class="reference external" href="javascript:void(0);"&gt;STD symptoms
pictures&lt;/a&gt; and more , you shall search in Google
and Wikipedia about that .... thanks a gain ,,,&lt;/p&gt;
&lt;p&gt;&amp;amp;quot;Consider this snippet of C code.&amp;amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-do"&gt;
&lt;h2&gt;I do...&lt;/h2&gt;
&lt;p&gt;Earth&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-03-26 08:12:00.003000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Consider this snippet of C code.&amp;quot;
I don't understand your example. Is it correctly indented or badly
indented? What does it do and what should it do?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="indeed-no-one-in-their-right-mind-would-write-c"&gt;
&lt;h2&gt;Indeed.  No one in their right mind would write C ...&lt;/h2&gt;
&lt;p&gt;drichardson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-07-09 18:04:35.162000-04:00&lt;/p&gt;
&lt;p&gt;Indeed. No one in their right mind would write C code (or code in any
language with C-like syntax) that looks like that.&lt;/p&gt;
&lt;p&gt;This same example is repeated over and over on the web. It seems
Python's goofy syntactic whitespace solves only a single problem -- a
problem that no one has ever actually had.&lt;/p&gt;
&lt;p&gt;The problems Python's syntactic whitespace causes, however, are varied
and numerous. The astonishing number of apologetic articles like this
are a testament to that.&lt;/p&gt;
&lt;p&gt;I'm sure replies will follow with all the usual &amp;quot;rules&amp;quot; (PEP 8, only use
spaces, use a special editor) to solve the problems that Python
apologists refuse to acknowledge actually exist!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Found an ancient CGI script -- part IV -- OpenAPI specification</title><link href="https://slott56.github.io/2021_09_21-found_an_ancient_cgi_script_part_iv_openapi_specification.html" rel="alternate"></link><published>2021-09-21T11:00:00-04:00</published><updated>2021-09-21T11:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-21:/2021_09_21-found_an_ancient_cgi_script_part_iv_openapi_specification.html</id><summary type="html">&lt;p&gt;See the previous sections, starting with the first on finding an
&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;ancient CGI
script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We don't &lt;strong&gt;need&lt;/strong&gt; an OpenAPI specification. But, it is so helpful to
formalize the behavior of a web site that it's hard for me to imagine
working without it.&lt;/p&gt;
&lt;p&gt;In this case, the legacy script only …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See the previous sections, starting with the first on finding an
&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;ancient CGI
script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We don't &lt;strong&gt;need&lt;/strong&gt; an OpenAPI specification. But, it is so helpful to
formalize the behavior of a web site that it's hard for me to imagine
working without it.&lt;/p&gt;
&lt;p&gt;In this case, the legacy script only have a few paths, so the OpenAPI
specification is relatively small.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
openapi: 3.0.1
info:
  title: CGI Conversion
  version: 1.0.0
paths:
  /resources/{type}/:
    get:
      summary: Query Form
      operationId: form
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Form
          content: {}
    post:
      summary: Add a document
      operationId: update
      requestBody:
        description: document
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            text/html:
              {}
        405:
          description: Invalid input
          content:
            text/html:
              {}
  /resources/{type}/{guid}:
    get:
      summary: Find documents
      operationId: find
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: guid
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            text/html:
              {}
        404:
          description: Not Found
          content:
            text/html:
              {}

components:
  schemas:
    Document:
      type: object
      properties:
        fname:
          type: string
        lname:
          type: string
&lt;/pre&gt;
&lt;p&gt;This shows the rudiments of the paths and the responses. There are three
&amp;quot;successful&amp;quot; kinds of responses, plus two additional error responses
that are formally defined.&lt;/p&gt;
&lt;p&gt;There is a lot of space in this document for additional documentation
and details. Every opportunity should be taken to capture details about
the application, what it does now, and what it should do when it's
rewritten.&lt;/p&gt;
&lt;p&gt;In our example, the form (and resulting data structure) is a degenerate
class with a pair of fields. We simply write the &lt;tt class="docutils literal"&gt;repr()&lt;/tt&gt; string to a
file. In a practical application, this will often be a bit more complex.
There may be validation rules, some of which are obscure, hidden in odd
places in the application code.&lt;/p&gt;
&lt;p&gt;What's essential here is continuing the refactoring process to more
fully understand the underlying data model and state processing. These
features need to be disentangled from HTML output and CGI input.&lt;/p&gt;
&lt;p&gt;The OpenAPI spec serves as an important part of the definition of done.
It supplements the context diagram with implementation details. In a
very real and practical way, this drives the integration test suite. We
can transform OpenAPI to Gherkin and use this to test the overall web
site.
See &lt;a class="reference external" href="https://medium.com/capital-one-tech/spec-to-gherkin-to-code-902e346bb9aa"&gt;https://medium.com/capital-one-tech/spec-to-gherkin-to-code-902e346bb9aa&lt;/a&gt;
for more on this topic.&lt;/p&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>Found an ancient cgi script -- part III -- refactoring</title><link href="https://slott56.github.io/2021_09_17-found_an_ancient_cgi_script_part_iii_refactoring.html" rel="alternate"></link><published>2021-09-17T14:27:00-04:00</published><updated>2021-09-17T14:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-17:/2021_09_17-found_an_ancient_cgi_script_part_iii_refactoring.html</id><summary type="html">&lt;p&gt;Be sure to see the &lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;original script&lt;/a&gt;
and the test cases in the prior posts.&lt;/p&gt;
&lt;p&gt;We need to understand a little about what a web request is. This can
help us do the refactoring.&lt;/p&gt;
&lt;p&gt;It can help to think of a web server a function that maps a request to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Be sure to see the &lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;original script&lt;/a&gt;
and the test cases in the prior posts.&lt;/p&gt;
&lt;p&gt;We need to understand a little about what a web request is. This can
help us do the refactoring.&lt;/p&gt;
&lt;p&gt;It can help to think of a web server a function that maps a request to a
response. The request is really a composite object with headers,
&lt;span class="formula"&gt;&lt;i&gt;h&lt;/i&gt;&lt;/span&gt;, method verb, &lt;span class="formula"&gt;&lt;i&gt;v&lt;/i&gt;&lt;/span&gt;, and URL, &lt;span class="formula"&gt;&lt;i&gt;u&lt;/i&gt;&lt;/span&gt;. Similarly, the response
is a composite with headers, &lt;span class="formula"&gt;&lt;i&gt;h&lt;/i&gt;&lt;/span&gt;, and content, &lt;span class="formula"&gt;&lt;i&gt;c&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;c&lt;/i&gt; = &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;)
&lt;/div&gt;
&lt;p&gt;The above is true for idempotent requests; usually, the method verb is
GET.&lt;/p&gt;
&lt;p&gt;Some requests make a state change, however, and use method verbs like
POST, PUT, PATCH, or DELETE.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;c&lt;/i&gt;;&lt;i&gt;Ŝ&lt;/i&gt; = &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)
&lt;/div&gt;
&lt;p&gt;There's a state,  &lt;span class="formula"&gt;&lt;i&gt;S&lt;/i&gt;&lt;/span&gt;, which is transformed to a new state, &lt;span class="formula"&gt;&lt;i&gt;Ŝ&lt;/i&gt;&lt;/span&gt;, as part of making the request.&lt;/p&gt;
&lt;p&gt;For the most part, CGI scripts are limited to GET and POST methods. The
GET method is (ideally) for idempotent, no-state-change requests. The
POST should be limited to making state changes. In some cases, there
will be an explicit GET-after-POST sequence of operations using an
intermediate redirection so the browser's &amp;quot;back&amp;quot; button works properly.&lt;/p&gt;
&lt;p&gt;In too many cases, the rules aren't followed well and their will be
state transitions on GET and idempotent POST operations. Sigh.&lt;/p&gt;
&lt;div class="section" id="multiple-resources"&gt;
&lt;h2&gt;Multiple Resources&lt;/h2&gt;
&lt;p&gt;Most web servers will provide content for a number of resource
instances. Often they will work with a number of instances of a variety
of resource types. The degenerate case is a server providing content for
a single instance of a single type.&lt;/p&gt;
&lt;p&gt;Each resource comes from the servers's universe of resources, &lt;span class="formula"&gt;&lt;i&gt;R&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;r&lt;/i&gt; ∈ &lt;i&gt;R&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;Each resource type, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;, is part of some overall collection of
types that describe the various resources. In some cases we'll identify
resources with a path that includes the type of the resource,
&lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;, and an identifier within that type, &lt;span class="formula"&gt;&lt;i&gt;i&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;,
&lt;span class="formula"&gt;⟨&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;), &lt;i&gt;i&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)⟩&lt;/span&gt;. This often maps to a character string &amp;quot;type/name&amp;quot;
that's part of a URL's path.&lt;/p&gt;
&lt;p&gt;We can think of a response's content as the HTML markup, &lt;span class="formula"&gt;&lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;,
around a resource, &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt;&lt;/span&gt;, managed by the web server.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;c&lt;/i&gt; = &lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;r&lt;/i&gt;)
&lt;/div&gt;
&lt;p&gt;This is a representation of the resource's state. The HTML
representation can have both semantic and style components. We might,
for example, have a number of HTML structure elements like &lt;tt class="docutils literal"&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;, as
well as CSS styles. Ideally, the styles don't convey semantic
information, but the HTML tags do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-services"&gt;
&lt;h2&gt;Multiple Services&lt;/h2&gt;
&lt;p&gt;There are often multiple, closely-related services within a web server.
A common design pattern is to have services that vary based on a path
item, &lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/span&gt;, within the url.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;r&lt;/i&gt;);&lt;i&gt;Ŝ&lt;/i&gt; = &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;) = &lt;span class="array"&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎧&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎪&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎨&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎪&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="bracketcases"&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;x&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)&lt;span class="textbf"&gt; if $p(u) = x$ &lt;/span&gt; 
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
  
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;y&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)&lt;span class="textbf"&gt; if $p(u) = y$ &lt;/span&gt; 
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
  
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
 
&lt;/span&gt;

&lt;/span&gt;

&lt;/span&gt;

&lt;/div&gt;
&lt;p&gt;There isn't, of course, any formal requirement for a tidy mapping from
some element of the path, &lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/span&gt;, to a type, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;, that
characterizes a resource, &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt;&lt;/span&gt;. Utter chaos is allowed. Thankfully,
it's not common.&lt;/p&gt;
&lt;p&gt;While there may not be a tidy type-based mapping, there must be a
mapping from a triple and a state, &lt;span class="formula"&gt;⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;⟩&lt;/span&gt;
to a resource, &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt;&lt;/span&gt;. This mapping can be considered a database or
filesystem query, &lt;span class="formula"&gt;&lt;i&gt;q&lt;/i&gt;(⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;⟩)&lt;/span&gt;. The request may
also involve state change.  It can help to think of the state as a
function that can emit a new state for a request. This implies two
low-level processing concepts:&lt;/p&gt;
&lt;div class="formula"&gt;
{&lt;i&gt;r&lt;/i&gt; ∈ &lt;i&gt;R&lt;/i&gt;|&lt;i&gt;q&lt;/i&gt;(⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;⟩, &lt;i&gt;r&lt;/i&gt;)}
&lt;/div&gt;
&lt;p&gt;And&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;Ŝ&lt;/i&gt; = &lt;i&gt;S&lt;/i&gt;(⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;⟩)
&lt;/div&gt;
&lt;p&gt;The query processing to locate resources is one aspect of the underlying
model. The state change for the universe of resources is another aspect
of the underlying model. Each request must return a resource; it may
also make a state change.&lt;/p&gt;
&lt;p&gt;What's essential, then, is to see how these various &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;x&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt; functions
are related to the original code. The &lt;span class="formula"&gt;&lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt; function,
the &lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/span&gt; mappings, and the &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/sub&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)&lt;/span&gt; functions are all
separate features that can be disentangled from each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-all-the-math"&gt;
&lt;h2&gt;Why All The Math?&lt;/h2&gt;
&lt;p&gt;We need to be utterly ruthless about separating several things that are
often jumbled together.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A web server works with a universe of resources. These can be
filesystem objects, database rows, external web services, anything.&lt;/li&gt;
&lt;li&gt;Resources have an internal state. Resources may also have internal
types (or classes) to define common features.&lt;/li&gt;
&lt;li&gt;There's at least one function to create an HTML representation of
state. This may be partial or ambiguous. It may also be complete and
unambiguous.&lt;/li&gt;
&lt;li&gt;There is at least one function to map a URL to zero or more
resources. This can (and often does) result in 404 errors because a
resource cannot be found.&lt;/li&gt;
&lt;li&gt;There may be a function to create a server state from the existing
server state and a request. This can result in 403 errors because an
operation is forbidden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, there can be user authentication and authorization rules.
The users are simply resources. Authentication is simply a query to
locate a user. It may involve using the password as part of the user
lookup. Users can have roles. Authorization is a property of a user's
role required by a specific query or state change (or both.)&lt;/p&gt;
&lt;p&gt;As we noted in the overview, the HTML representation of state is handled
(entirely) by Jinja. HTML templates are used. Any non-Jinja HTML
processing in legacy CGI code can be deleted.&lt;/p&gt;
&lt;p&gt;The mapping from URL to resource may involve several steps. In Flask,
some of these steps are handled by the mapping from a URL to a view
function. This is often used to partition resources by type. Within a
view function, individual resources will be located based on URL
mapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-we-do"&gt;
&lt;h2&gt;What do we do?&lt;/h2&gt;
&lt;p&gt;In our example code, we have a great deal of redundant HTML processing.
One sensible option is to separate all of the HTML printing into one or
more functions that emit the various kinds of pages.&lt;/p&gt;
&lt;p&gt;In our example, the parsing of the path is a single, long nested bunch
of if-elif processing. This should be refactored into individual
functions. A single, top-level function can decide what the URL pattern
and verb mean, and then delegate the processing to a view function. The
view function can then use an HTML rendering function to build the
resulting page.&lt;/p&gt;
&lt;p&gt;One family of URL's result in presentation of a form. Another family of
URL's processes the form input. The form data leads to a resource with
internal state. The form content should be used to define a Python
class. A separate class should read and write files with these Python
objects. The forms should be defined at a high level using a module like
&lt;a class="reference external" href="https://wtforms.readthedocs.io/en/2.3.x/"&gt;WTForms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When rewriting, I find it helps to keep several things separated:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A class for the individual resource objects.&lt;/li&gt;
&lt;li&gt;A  form that is one kind of serialization of the resource objects.&lt;/li&gt;
&lt;li&gt;An HTML page that is another kind of serialization of the resource
objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While these things are related very closely, they are not isomorphic to
each other. Objects may have implementation details or derived values
that should not be trivially shown on a form or HTML page.&lt;/p&gt;
&lt;p&gt;In our example, the form only has two fields. These should be properly
described in a class. The field objects have different types. The types
should also be modeled more strictly, not treated casually as a piece of
a file path. (What happens if we use a type name of &amp;quot;this/that&amp;quot;?)&lt;/p&gt;
&lt;p&gt;Persistent state change is handled with filesystem updates. These, too,
are treated informally, without a class to encapsulate the valid
operations, and reject invalid operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-examples"&gt;
&lt;h2&gt;Some Examples&lt;/h2&gt;
&lt;p&gt;Here is one the HTML output functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def html_post_response(type_name, name, data):
    print &amp;quot;Status: 201 CREATED&amp;quot;
    print &amp;quot;Content-Type: text/html&amp;quot;
    print
    print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Created New %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % type_name
    print &amp;quot;&amp;lt;body&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;h1&amp;gt;Created New %s&amp;lt;/h1&amp;gt;&amp;quot; % type_name
    print &amp;quot;&amp;lt;p&amp;gt;Path: %s/%s&amp;lt;/p&amp;gt;&amp;quot; % (type_name, name)
    print &amp;quot;&amp;lt;p&amp;gt;Content: &amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;
    print data
    print &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;
    # cgi.print_environ()
    print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;There are several functions like this. We aren't wasting any time
optimizing all these functions. We're simply segregating them from the
rest of the processing. There's a huge amount of redundancy; we'll fix
this when we starting using jinja templates.&lt;/p&gt;
&lt;p&gt;Here's the revised &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def main():
    try:
        os.mkdir(&amp;quot;data&amp;quot;)
    except OSError:
        pass

    path_elements = os.environ[&amp;quot;PATH_INFO&amp;quot;].split(&amp;quot;/&amp;quot;)
    if path_elements[0] == &amp;quot;&amp;quot; and path_elements[1] == &amp;quot;resources&amp;quot;:
        if os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;POST&amp;quot;:
            type_name = path_elements[2]
            base = os.path.join(&amp;quot;data&amp;quot;, type_name)
            try:
                os.mkdir(base)
            except OSError:
                pass
            name = str(uuid.uuid4())
            full_name = os.path.join(base, name)
            data = cgi.parse(sys.stdin)
            output_file = open(full_name, 'w')
            output_file.write(repr(data))
            output_file.write('\n')
            output_file.close()
            html_post_response(type_name, name, data)

        elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 3:
            type_name = path_elements[2]
            html_get_form_response(type_name)

        elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 4:
            type_name = path_elements[2]
            resource_name = path_elements[3]
            full_name = os.path.join(&amp;quot;data&amp;quot;, type_name, resource_name)
            input_file = open(full_name, 'r')
            content = input_file.read()
            input_file.close()
            html_get_response(type_name, resource_name, content)

        else:
            html_error_403_response(path_elements)
    else:
        html_error_404_response(path_elements)
&lt;/pre&gt;
&lt;p&gt;This has the HTML output fully segregated from the rest of the
processing. We can now see the request parsing and the model processing
more clearly. This lets us move further and refactor into yet smaller
and more focused functions. We can see file system updates and file path
creation as part of the underlying model.&lt;/p&gt;
&lt;p&gt;Since these examples are contrived. The processing is essentially a
&lt;tt class="docutils literal"&gt;repr()&lt;/tt&gt; function call. Not too interesting, but the point is to
identify this clearly by refactoring the application to expose it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;When we start to define the classes to properly model the persistent
objects and their state, we'll see that there are zero lines of legacy
code that we can keep.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Zero lines of legacy code have enduring value.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This is not unusual. Indeed, I think it's remarkably common.&lt;/p&gt;
&lt;p&gt;Reworking a CGI application should not be called a &amp;quot;migration.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There is no &amp;quot;migration&amp;quot; of code from Python 2 to Python 3. The Python
2 code is (almost) entirely useless except to explain the use cases.&lt;/li&gt;
&lt;li&gt;There is no &amp;quot;migration&amp;quot; of code from CGI to some better framework.
Flask (and any of the other web frameworks) are nothing like CGI
scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The functionality should be completely rewritten into Python 3 and
Flask. The processing concept is preserved. The data is preserved. The
code is not preserved.&lt;/p&gt;
&lt;p&gt;In some projects, where there are proper classes defined, there may be
some code that can be preserved. However, a Python dataclass may do
everything a more complex Python2 class definition does with a lot less
code. &lt;strong&gt;The Python2 code is not sacred&lt;/strong&gt;. Code should not be preserved
because someone thinks it might reduce cost or risk.&lt;/p&gt;
&lt;p&gt;The old code is useful for three things.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define the unit test cases.&lt;/li&gt;
&lt;li&gt;Define the integration test cases.&lt;/li&gt;
&lt;li&gt;Answer questions about edge cases when writing new code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means we won't be using the &lt;strong&gt;2to3&lt;/strong&gt; tool to convert any of the
code.&lt;/p&gt;
&lt;p&gt;It also means the unit test cases are the new definition of the project.
These are the single most valuable part of the work. Given test cases
that describe the old application, writing the new app using Flask is
relatively easy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>Found an ancient cgi script -- part II -- testing</title><link href="https://slott56.github.io/2021_09_07-found_an_ancient_cgi_script_part_ii_testing.html" rel="alternate"></link><published>2021-09-07T11:00:00-04:00</published><updated>2021-09-07T11:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-07:/2021_09_07-found_an_ancient_cgi_script_part_ii_testing.html</id><summary type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;We have an ancient Python2 CGI script -- what do we
do?&lt;/a&gt;&amp;quot;
The previous post in this series provides an overview of the process of
getting rid of legacy code.&lt;/p&gt;
&lt;p&gt;Here's some code. I know it's painfully long; the point is to provide a
super-specific, very concrete example of what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;We have an ancient Python2 CGI script -- what do we
do?&lt;/a&gt;&amp;quot;
The previous post in this series provides an overview of the process of
getting rid of legacy code.&lt;/p&gt;
&lt;p&gt;Here's some code. I know it's painfully long; the point is to provide a
super-specific, very concrete example of what to keep and what to
discard. (I've omitted the module docstring and the imports.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
try:
    os.mkdir(&amp;quot;data&amp;quot;)
except OSError:
    pass

path_elements = os.environ[&amp;quot;PATH_INFO&amp;quot;].split(&amp;quot;/&amp;quot;)
if path_elements[0] == &amp;quot;&amp;quot; and path_elements[1] == &amp;quot;resources&amp;quot;:
    if os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;POST&amp;quot;:
        type_name = path_elements[2]
        base = os.path.join(&amp;quot;data&amp;quot;, type_name)
        try:
            os.mkdir(base)
        except OSError:
            pass
        name = str(uuid.uuid4())
        full_name = os.path.join(base, name)
        data = cgi.parse(sys.stdin)
        output_file = open(full_name, 'w')
        output_file.write(repr(data))
        output_file.write('\n')
        output_file.close()

        print &amp;quot;Status: 201 CREATED&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Created New %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % type_name
        print &amp;quot;&amp;lt;body&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;h1&amp;gt;Created New %s&amp;lt;/h1&amp;gt;&amp;quot; % type_name
        print &amp;quot;&amp;lt;p&amp;gt;Path: %s/%s&amp;lt;/p&amp;gt;&amp;quot; % (type_name, name)
        print &amp;quot;&amp;lt;p&amp;gt;Content: &amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;
        print data
        print &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
        # cgi.print_environ()
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
    elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 3:
        type_name = path_elements[2]
        print &amp;quot;Status: 200 OK&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Query %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % (type_name,)
        print &amp;quot;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Create new instance of &amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt;&amp;lt;/h1&amp;gt;&amp;quot; % type_name
        print '&amp;lt;form action=&amp;quot;/cgi-bin/example.py/resources/%s&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;' % (type_name,)
        print &amp;quot;&amp;quot;&amp;quot;
          &amp;lt;label for=&amp;quot;fname&amp;quot;&amp;gt;First name:&amp;lt;/label&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;fname&amp;quot; name=&amp;quot;fname&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
          &amp;lt;label for=&amp;quot;lname&amp;quot;&amp;gt;Last name:&amp;lt;/label&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;lname&amp;quot; name=&amp;quot;lname&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
          &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;
        &amp;quot;&amp;quot;&amp;quot;
        print &amp;quot;&amp;lt;/form&amp;gt;&amp;quot;
        # cgi.print_environ()
        print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
    elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 4:
        type_name = path_elements[2]
        resource_name = path_elements[3]
        full_name = os.path.join(&amp;quot;data&amp;quot;, type_name, resource_name)
        input_file = open(full_name, 'r')
        content = input_file.read()
        input_file.close()

        print &amp;quot;Status: 200 OK&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Document %s -- %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % (type_name, resource_name)
        print &amp;quot;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Instance of &amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt;&amp;lt;/h1&amp;gt;&amp;quot; % type_name
        print &amp;quot;&amp;lt;p&amp;gt;Path: %s/%s&amp;lt;/p&amp;gt;&amp;quot; % (type_name, resource_name)
        print &amp;quot;&amp;lt;p&amp;gt;Content: &amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;
        print content
        print &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
        # cgi.print_environ()
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
    else:
        print &amp;quot;Status: 403 Forbidden&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Forbidden: %s to %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot;  % (os.environ[&amp;quot;REQUEST_METHOD&amp;quot;], path_elements)
        cgi.print_environ()
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
else:
    print &amp;quot;Status: 404 Not Found&amp;quot;
    print &amp;quot;Content-Type: text/html&amp;quot;
    print                               # blank line, end of headers
    print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Not Found: %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % (os.environ[&amp;quot;PATH_INFO&amp;quot;], )
    print &amp;quot;&amp;lt;h1&amp;gt;Error&amp;lt;/h1&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;b&amp;gt;Resource &amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt; not found&amp;lt;/b&amp;gt;&amp;quot; % (os.environ[&amp;quot;PATH_INFO&amp;quot;], )
    cgi.print_environ()
    print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;At first glance you might notice (1) there are several resource types
located on the URL path, and (2) there are several HTTP methods, also.
These features aren't always obvious in a CGI script, and it's one of
the reasons why CGI is simply horrible.&lt;/p&gt;
&lt;p&gt;It's not clear from this what -- exactly -- the underlying data model is
and what processing is done and what parts are merely CGI and HTML
overheads.&lt;/p&gt;
&lt;p&gt;This is why refactoring this code is absolutely essential to replacing
it.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;We can't refactor without test cases.&lt;/p&gt;
&lt;p&gt;And (bonus).&lt;/p&gt;
&lt;p&gt;We can't have test cases without some vague idea of what this thing
purports to do.&lt;/p&gt;
&lt;p&gt;Let's tackle this in order. Starting with test cases.&lt;/p&gt;
&lt;div class="section" id="unit-test-cases"&gt;
&lt;h2&gt;Unit Test Cases&lt;/h2&gt;
&lt;p&gt;We can't unit test this.&lt;/p&gt;
&lt;p&gt;As written, it's a top-level script without so much as as single def or
class. This style of programming -- while legitimate Python -- is an
epic fail when it comes to testing.&lt;/p&gt;
&lt;p&gt;Step 1, then, is to refactor a script file into a module with
function(s) or class(es) that can be tested.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def main():
    ... the original script ...

if __name__ == &amp;quot;__main__&amp;quot;:  # pragma: no cover
    main()
&lt;/pre&gt;
&lt;p&gt;For proper testability, there can be at most these two lines of code
that are not easily tested. These two (and only these two) are marked
with a special comment (&lt;tt class="docutils literal"&gt;# pragma: no cover&lt;/tt&gt;) so the coverage tool can
politely ignore the fact that we won't try to test these two lines.&lt;/p&gt;
&lt;p&gt;We can now provide a os.environ values that look like a CGI requests,
and exercise this script with concrete unit test cases.&lt;/p&gt;
&lt;p&gt;How many things does it do?&lt;/p&gt;
&lt;p&gt;Reading the code is headache-inducing, so, a fall-back plan is to count
the number of logic paths. Look at if/elif blocks and count those
without thinking too deeply about why the code looks the way it looks.&lt;/p&gt;
&lt;p&gt;There appear to be five distinct behaviors. Since there are
possibilities of unhandled exceptions, there may be as many as 10 things
this will do in production.&lt;/p&gt;
&lt;p&gt;This leads to a unit test that looks like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import unittest
import urllib
import example_2
import os
import io
import sys

class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.cwd = os.getcwd()
        try:
            os.mkdir(&amp;quot;test_path&amp;quot;)
        except OSError:
            pass
        os.chdir(&amp;quot;test_path&amp;quot;)
        self.output = io.BytesIO()
        sys.stdout = self.output
    def tearDown(self):
        sys.stdout = sys.__stdout__
        sys.stdin = sys.__stdin__
        os.chdir(self.cwd)
    def test_path_1(self):
        &amp;quot;&amp;quot;&amp;quot;No /resources in path&amp;quot;&amp;quot;&amp;quot;
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/not/valid&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;invalid&amp;quot;
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 404 Not Found&amp;quot;)
    def test_path_2(self):
        &amp;quot;&amp;quot;&amp;quot;Path /resources but bad method&amp;quot;&amp;quot;&amp;quot;
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/resources/example&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;invalid&amp;quot;
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 403 Forbidden&amp;quot;)
    def test_path_3(self):
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/resources/example&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;GET&amp;quot;
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 200 OK&amp;quot;)
        self.assertIn(&amp;quot;&amp;lt;form &amp;quot;, out)
    def test_path_5(self):
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/resources/example&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;POST&amp;quot;
        os.environ[&amp;quot;CONTENT_TYPE&amp;quot;] = &amp;quot;application/x-www-form-urlencoded&amp;quot;
        content = urllib.urlencode({&amp;quot;field1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;field2&amp;quot;: &amp;quot;value2&amp;quot;})
        form_data = io.BytesIO(content)
        os.environ[&amp;quot;CONTENT_LENGTH&amp;quot;] = str(len(content))
        sys.stdin = form_data
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 201 CREATED&amp;quot;)
        self.assertIn(&amp;quot;'field2': ['value2']&amp;quot;, out)
        self.assertIn(&amp;quot;'field1': ['value1']&amp;quot;, out)


if __name__ == '__main__':
    unittest.main()
&lt;/pre&gt;
&lt;p&gt;Does this have 100% code coverage? I'll leave it to the reader to
copy-and-paste, add the &lt;tt class="docutils literal"&gt;coverage run&lt;/tt&gt; command and look at the output.
What else is required?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-test-case"&gt;
&lt;h2&gt;Integration Test Case&lt;/h2&gt;
&lt;p&gt;We can (barely) do an integration test on this. It's tricky because we
don't want to run Apache httpd (or some other server.) We want to run a
small Python script to be sure this works.&lt;/p&gt;
&lt;p&gt;This means we need to (1) start a server as a separate process, and (2)
use urllib to send requests to that separate process. This isn't too
difficult. Right now, it's not &lt;em&gt;obviously&lt;/em&gt; required. The test cases
above run the entire script from end to end, providing what we think are
appropriate mock values. Emphasis on &amp;quot;what we think.&amp;quot; To be sure, we'll
need to actually fire up a separate process.&lt;/p&gt;
&lt;p&gt;As with the unit tests, we need to enumerate &lt;strong&gt;all&lt;/strong&gt; of the expected
behaviors.&lt;/p&gt;
&lt;p&gt;Unlike the unit tests, there are (generally) fewer edge cases.&lt;/p&gt;
&lt;p&gt;It looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import unittest
import subprocess
import time
import urllib2

class TestExample_2(unittest.TestCase):
    def setUp(self):
        self.proc = subprocess.Popen(
            [&amp;quot;python2.7&amp;quot;, &amp;quot;mock_httpd.py&amp;quot;],
            cwd=&amp;quot;previous&amp;quot;
        )
        time.sleep(0.25)
    def tearDown(self):
        self.proc.kill()
        time.sleep(0.1)
    def test(self):
        req = urllib2.Request(&amp;quot;http://localhost:8000/cgi-bin/example.py/resources/example&amp;quot;)
        result = urllib2.urlopen(req)
        self.assertEqual(result.getcode(), 200)
        self.assertEqual(set(result.info().keys()), set(['date', 'status', 'content-type', 'server']))
        content = result.read()
        self.assertEqual(content.splitlines()[0], &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;)
        self.assertIn(&amp;quot;&amp;lt;form &amp;quot;, content)

if __name__ == '__main__':
    unittest.main()
&lt;/pre&gt;
&lt;p&gt;This will start a separate process and then make a request from that
process. After the request, it kills the subprocess.&lt;/p&gt;
&lt;p&gt;We've only covered one of the behaviors. A bunch more test cases are
required. They're all going to be reasonably similar to the &lt;tt class="docutils literal"&gt;test()&lt;/tt&gt;
method.&lt;/p&gt;
&lt;p&gt;Note the &lt;tt class="docutils literal"&gt;mock_httpd.py&lt;/tt&gt; script. It's a tiny thing that invokes CGI's.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import CGIHTTPServer
import BaseHTTPServer

server_class = BaseHTTPServer.HTTPServer
handler_class = CGIHTTPServer.CGIHTTPRequestHandler

server_address = ('', 8000)
httpd = server_class(server_address, handler_class)
httpd.serve_forever()
&lt;/pre&gt;
&lt;p&gt;This will run any script file in the cgi-bin directory, acting as a kind
of mock for Apache httpd or other CGI servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tests-pass-now-what"&gt;
&lt;h2&gt;Tests Pass, Now What?&lt;/h2&gt;
&lt;p&gt;We need to formalize our knowledge with a some diagrams. This is a
Context diagram in PlantUML. It draws a picture that we can use to
discuss what this app does and who actually uses it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;startuml
actor user
usecase post
usecase query
usecase retrieve
user --&amp;gt; post
user --&amp;gt; query
user --&amp;gt; retrieve

usecase 404_not_found
usecase 403_not_permitted
user --&amp;gt; 404_not_found
user --&amp;gt; 403_not_permitted

retrieve &amp;lt;|-- 404_not_found
&amp;#64;enduml
&lt;/pre&gt;
&lt;p&gt;We can also update the Container diagram. There's an &amp;quot;as-is&amp;quot; version and
a &amp;quot;to-be&amp;quot; version.&lt;/p&gt;
&lt;p&gt;Here's the as-is diagram of any CGI.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;startuml
interface HTTP

node &amp;quot;web server&amp;quot; {
    component httpd as  &amp;quot;Apache httpd&amp;quot;
    interface cgi
    component app
    component python
    python --&amp;gt; app
    folder data
    app --&amp;gt; data
}

HTTP --&amp;gt; httpd
httpd -&amp;gt; cgi
cgi -&amp;gt; python
&amp;#64;enduml
&lt;/pre&gt;
&lt;p&gt;Here's a to-be diagram of a typical (small) Flask application.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;startuml
interface HTTP

node &amp;quot;web server&amp;quot; {
    component httpd as  &amp;quot;nginx&amp;quot;
    component uwsgi
    interface wsgi
    component python
    component app
    component model
    component flask
    component jinja
    folder data
    folder static
    httpd --&amp;gt; static
    python --&amp;gt; wsgi
    wsgi --&amp;gt; app
    app --&amp;gt; flask
    app --&amp;gt; jinja
    app -&amp;gt; model
    model --&amp;gt; data
}

HTTP --&amp;gt; httpd
httpd -&amp;gt; uwsgi
uwsgi -&amp;gt; python
&amp;#64;enduml
&lt;/pre&gt;
&lt;p&gt;These diagrams can help to clarify how the CGI will be restructured. A
complex CGI might have a database or external web services involved.
These should be correctly depicted.&lt;/p&gt;
&lt;p&gt;The previous post on this subject said we can now refactor this code.
The unit tests are required before making any real changes. (Yes, we
made one change to promote testability by repackaging a script to be a
function.)&lt;/p&gt;
&lt;p&gt;We're aimed to start disentangling the HTML and CGI overheads from the
application and narrowing our focus onto the useful things it does.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>We have an ancient Python2 CGI script -- what do we do?</title><link href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html" rel="alternate"></link><published>2021-08-31T11:00:00-04:00</published><updated>2021-08-31T11:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-31:/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html</id><summary type="html">&lt;p&gt;This was a shocking email: the people have a Python 2 CGI script. They
needed advice on Python 2 to 3 migration.&lt;/p&gt;
&lt;p&gt;Here's my advice on a Python 2 CGI script: &lt;strong&gt;Throw It Away&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A great deal of the CGI processing is part of the wsgi module, as well
as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was a shocking email: the people have a Python 2 CGI script. They
needed advice on Python 2 to 3 migration.&lt;/p&gt;
&lt;p&gt;Here's my advice on a Python 2 CGI script: &lt;strong&gt;Throw It Away&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A great deal of the CGI processing is part of the wsgi module, as well
as tools like jinja and flask. This means that the ancient Python 2 CGI
script has to be disentangled into two parts.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All the stuff that deals with CGI and HTML. This isn't valuable and
must be deleted.&lt;/li&gt;
&lt;li&gt;Whatever additional, useful, interesting processing it does for the
various user communities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second part -- the useful work -- needs to be preserved. The rest is
junk.&lt;/p&gt;
&lt;p&gt;With web services there are often at least three communities: the
&amp;quot;interactive users&amp;quot;, &amp;quot;analysts&amp;quot;, and the administrators who keep it
running. The names vary a lot with the problem domain. The interactive
users may further decompose into anonymous visitors, people with
privileges to make changes, and administrators to manage the privileges.
There may be multiple flavors of analytical work based on the web
transactions that are logged. A lot can go on, and each of these
communities has a feature set they require.&lt;/p&gt;
&lt;p&gt;The idea here is to look at the project as a rewrite where &lt;strong&gt;some&lt;/strong&gt; of
the legacy code may be preserved. It's better to proceed as though this
is new development with the legacy code providing examples and test
cases. If we look at this as new, we'll start with some diagrams to
provide a definition of done.&lt;/p&gt;
&lt;div class="section" id="step-one"&gt;
&lt;h2&gt;Step One&lt;/h2&gt;
&lt;p&gt;Understand the user communities. Create a &lt;a class="reference external" href="https://c4model.com"&gt;4C&lt;/a&gt;
Context Diagram to show who the users are and what the expect. Ideally,
it's small with &amp;quot;users&amp;quot; and &amp;quot;administrators.&amp;quot; It may turn out to be big
with complex privilege rules to segregate users.&lt;/p&gt;
&lt;p&gt;It's hard to get this right. Everyone wants the code &amp;quot;converted&amp;quot;. But no
one really knows all the things the code does. There's a lot of pressure
to ignore this step.&lt;/p&gt;
&lt;p&gt;This step creates the definition of done. Without this, there's no way
to do anything with the CGI code and make sure that the original
features still work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-two"&gt;
&lt;h2&gt;Step Two&lt;/h2&gt;
&lt;p&gt;Create a &lt;a class="reference external" href="https://c4model.com"&gt;4C&lt;/a&gt; Container Diagram showing the
Apache HTTPD (or whatever server you're using) that fires the CGI.
Document all other ancillary things are going on. Ideally, there's
nothing. Ideally, this is a minor, stand-alone server that no one
noticed until today. Label this picture &amp;quot;As Is.&amp;quot; It will change, but you
need a checklist of what's running right now.&lt;/p&gt;
&lt;p&gt;(This should be very quick to produce. If it's not, go back to step one
and make sure you really understand the context.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-three"&gt;
&lt;h2&gt;Step Three&lt;/h2&gt;
&lt;p&gt;Create a &lt;a class="reference external" href="https://c4model.com"&gt;4C&lt;/a&gt; Component Diagram, and label it
&amp;quot;As Is&amp;quot;. This has all the parts of your code base. Be sure you locate
all the things in the local site-packages directory that were added onto
Python. Ideally, there isn't much, but -- of course -- there could be
dozens of add-on libraries.&lt;/p&gt;
&lt;p&gt;You will have several lists. One list has all the things in
site-packages. If the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; environment variable is used, all
the things in the directories named in this environment variable. Plus.
All the things named in &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; statements.&lt;/p&gt;
&lt;p&gt;These lists should overlap. Of course someone can install a package
that's not used, so the site-packages list should be a superset of the
import list.&lt;/p&gt;
&lt;p&gt;This is a checklist of things that must be read (and possibly converted)
to build the new features.&lt;/p&gt;
&lt;p&gt;Step Four?&lt;/p&gt;
&lt;p&gt;You'll need two suites of fully automated tests.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit tests for the Python code. This must have 100% code coverage and
will not be easy.&lt;/li&gt;
&lt;li&gt;Integration tests for the CGI. You will be using the WSGI module
instead of Apache HTTPD (or whatever the server was) for this
testing. You will NOT integrate with the original web server,
because, that interface is no longer supported and is a security
nightmare.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's break this into two steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-four"&gt;
&lt;h2&gt;Step Four&lt;/h2&gt;
&lt;p&gt;You need automated unit tests. You need to reach at last 100% code
coverage for the unit tests. This is going to be difficult for two
reasons. First, the legacy code may not be easy to read or test. Second,
Python 2 testing tools are no longer well supported. Many of them still
work, but if you encounter problems, the tool will never be fixed.&lt;/p&gt;
&lt;p&gt;If you can find a Python 2 version of &lt;strong&gt;coverage&lt;/strong&gt;, and a Python 2
version of &lt;strong&gt;pytest&lt;/strong&gt;, I suggest using this combination to write a test
suite, and make sure you have 100% code coverage.&lt;/p&gt;
&lt;p&gt;This is a lot of work, and there's no way around it. Without automated
testing, there's no way to prove that you're done and the software can
be trusted in production.&lt;/p&gt;
&lt;p&gt;You will find bugs. Don't fix them now. Log them by marking the test
case with the proper answer different from the answer you're getting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-five"&gt;
&lt;h2&gt;Step Five&lt;/h2&gt;
&lt;p&gt;Python has a built-in CGI server you can use.
See &lt;a class="reference external" href="https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler"&gt;https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler&lt;/a&gt;
for a handler that will provide core CGI features from a Python script
allowing you to test without the overhead of Apache httpd or some other
server.&lt;/p&gt;
&lt;p&gt;You need an integration test suite for each user stories in the context
you created in Step One. No exceptions. Each User. Each Story. A test to
show that it works.&lt;/p&gt;
&lt;p&gt;You'll likely want to use the CGIHTTPRequestHandler class in the
http.server module to create a test server. You'll then create a pytest
fixture that starts the web server before a test and then kills the
process after the test. It's very important to use subprocess.Popen() to
start and stop the target server to be sure the CGI interface works
correctly.&lt;/p&gt;
&lt;p&gt;It is common to find bugs. Don't fix them now. Log them by marking the
test case with the proper answer different from the answer you're
getting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-six"&gt;
&lt;h2&gt;Step Six&lt;/h2&gt;
&lt;p&gt;Refactor. Now that you have automated tests to prove the legacy CGI
script really works, you need to disentangle the Python code into three
distinct components.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A Component to parse the request: the methods, cookies, headers, and
URL.&lt;/li&gt;
&lt;li&gt;A Component that does useful work. This corresponds to the &amp;quot;model&amp;quot;
and &amp;quot;control&amp;quot; part of the MVC design pattern.&lt;/li&gt;
&lt;li&gt;A Component that builds the response: the status, headers, and
content.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In many CGI scripts, there is often a hopeless jumble of bad code.
Because you have tests in Step Four and Step Five, you can refactor and
confirm the tests still pass.&lt;/p&gt;
&lt;p&gt;If the code is already nicely structured, this step is easy. Don't plan
on it being easy.&lt;/p&gt;
&lt;p&gt;One goal is to eventually replace HTML page output creation with jinja.
Similarly, another goal is to eventually replace parsing the request
with flask. All of the remaining CGI-related features get pushed into a
wsgi-compatible plug-in to a web server.&lt;/p&gt;
&lt;p&gt;The component that does the useful work will have some underlying data
model (resources, files, downloads, computations, something) and some
control (post, get, different paths, queries.) We'd like to clean this
up, too. For now, it can be one module.&lt;/p&gt;
&lt;p&gt;After refactoring, you'll have a new working application. You'll have a
new top-level CGI script that uses the built-in wsgi module to do
request and response processing. This is temporary, but is required to
pass the integration test suite.&lt;/p&gt;
&lt;p&gt;You may want to create an intermediate Component diagram to describe the
new structure of the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-seven"&gt;
&lt;h2&gt;Step Seven&lt;/h2&gt;
&lt;p&gt;Write an OpenAPI specification for the revised application.
See &lt;a class="reference external" href="https://swagger.io/specification/"&gt;https://swagger.io/specification/&lt;/a&gt; for more information. Add the path
processing so openapi.json (or openapi.yaml) will produce the
specification. This means updating unit and integration tests to add
this feature.&lt;/p&gt;
&lt;p&gt;While this is new development, it is absolutely essential for building
any kind of web service. It will implement the Context diagram, and most
of the Container diagram. It will describe significant portions of the
Component diagram, also. It is not optional. It's very likely this was
not part of the legacy application.&lt;/p&gt;
&lt;p&gt;Some of the document structures described in the OpenAPI specification
will be based on the data model and control components factored out of
the legacy code. It's essential to get these details write in the
OpenAPI specification and the unit tests.&lt;/p&gt;
&lt;p&gt;This may expose problems in the CGI's legacy behavior. Don't fix it now.
Instead document the features that don't fit with modern API's. Don't be
afraid to use # TODO comments to show what should be fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-eight"&gt;
&lt;h2&gt;Step Eight&lt;/h2&gt;
&lt;p&gt;Use the 2to3 tool to convert ONLY the model and control components. Do
not convert request parsing and response processing components; they
will be discarded. This may involve additional redesign and rewrites
depending on how bad the old code was.&lt;/p&gt;
&lt;p&gt;Convert the unit tests for ONLY the model and control
components components.&lt;/p&gt;
&lt;p&gt;Get the unit tests for the model and control to work in Python 3. This
is the foundation for the new web site. Update the C4 container,
component, and code diagrams. Since there's no request handling or HTML
processing, don't worry about code coverage for the project as a whole.
Only get the model and control to have 100% coverage.&lt;/p&gt;
&lt;p&gt;Do not start writing view functions or HTML templates until underlying
model and control module works. This is the foundation of the
application. It is not tied to HTTP, but must exist and be tested
independently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-nine"&gt;
&lt;h2&gt;Step Nine&lt;/h2&gt;
&lt;p&gt;Using Flask as a framework and the OpenAPI specification for the web
application, build the view functions to exercise all the features of
the application. Build Jinja templates for the HTML output. Use proper
cookie management from Flask, discarding any legacy cookie management
from the CGI. Use proper header parsing rules in Flask, discarding any
legacy header processing.&lt;/p&gt;
&lt;p&gt;Rewrite the remaining unit tests manually. These unit tests will now use
the Flask test client. The goal is to get back to 100% code coverage.&lt;/p&gt;
&lt;p&gt;Update the C4 container, component, and code diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-ten"&gt;
&lt;h2&gt;Step Ten&lt;/h2&gt;
&lt;p&gt;There are untold number of ways to deploy a Flask application. Pick
something simple and secure. Do some test deployments to be sure you
understand how this works. As one example, you can continue to use
Apache httpd. As another example, some people prefer GUnicorn, others
prefer to use NGINX. There's lots of advice in the Flask project on ways
to deploy Flask applications.&lt;/p&gt;
&lt;p&gt;Do not reuse the Apache httpd and CGI interface. This was terrible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-eleven"&gt;
&lt;h2&gt;Step Eleven&lt;/h2&gt;
&lt;p&gt;Create a pyproject.toml file that includes a tox section so that you
have a fully-automated integration capability. You can automate the
CI/CD pipeline. Once the new app is in production, you can archive the
old code and never use it again for anything. Ever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-twelve"&gt;
&lt;h2&gt;Step Twelve&lt;/h2&gt;
&lt;p&gt;Fix the bugs you found in Steps Four, Five, and Seven. You will be
creating a new release with new, improved features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;This is a lot of work. There's no real alternative. CGI scripts need a
lot of rework.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>Spreadsheets, COBOL, and Schema-Driven File Processing</title><link href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html" rel="alternate"></link><published>2021-08-24T09:00:00-04:00</published><updated>2021-08-24T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-24:/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html</id><summary type="html">&lt;p&gt;I need to rewrite &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt;. This project
handles a certain amount of file processing using a schema to assure the
Logical Layout is understood.  It handles several common Physical
Formats:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSV files where the format is extended by the various dialects
options.&lt;/li&gt;
&lt;li&gt;COBOL files in ASCII or EBCDIC.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I need to rewrite &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt;. This project
handles a certain amount of file processing using a schema to assure the
Logical Layout is understood.  It handles several common Physical
Formats:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSV files where the format is extended by the various dialects
options.&lt;/li&gt;
&lt;li&gt;COBOL files in ASCII or EBCDIC.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project's code can be applied to text files where a regular
expression can yield a row-level dictionary object. Web server log
files, for example, are in first normal form, but have irregular
punctuation that CSV can't handle.&lt;/p&gt;
&lt;p&gt;It can also be applied to NDJSON files (see &lt;a class="reference external" href="http://ndjson.org"&gt;http://ndjson.org&lt;/a&gt;
or &lt;a class="reference external" href="https://jsonlines.org"&gt;https://jsonlines.org&lt;/a&gt;) without too much work. This also means it can
be applied to YAML files. I suspect it can also be applied to TOML files
as a distinct physical format.&lt;/p&gt;
&lt;p&gt;The complication in the Singran Reader is that COBOL files aren't really
in first normal form. They can have repeating groups of fields that CSV
files don't (generally) have. And the initial data model in the project
wasn't really up to handling this cleanly. The repeating group logic was
patched in.&lt;/p&gt;
&lt;p&gt;Further complicating this particular project was the history of its
evolution. It started as a way to grub through hellishly complex CSV
files. You know, the files where there are no headings, or the headings
are 8 lines long, or the files where there are a lot of lines before the
proper headings for the data. It handled all of those
not-first-normal-form issues that arise in CSV world.&lt;/p&gt;
&lt;p&gt;I didn't (initially) understand JSON Schema (&lt;a class="reference external" href="https://json-schema.org"&gt;https://json-schema.org&lt;/a&gt;)
and did not leverage it properly as an intermediate representation for
CSV as well as COBOL layouts. It arose as a kind of after-thought. There
are a lot of todo's related to applying JSON Schema to the problem.&lt;/p&gt;
&lt;p&gt;Recently, I learned about Lowrance USR files.
See &lt;a class="reference external" href="https://github.com/slott56/navtools"&gt;https://github.com/slott56/navtools&lt;/a&gt; in general
and &lt;a class="reference external" href="https://github.com/slott56/navtools/blob/master/navtools/lowrance_usr.py"&gt;https://github.com/slott56/navtools/blob/master/navtools/lowrance_usr.py&lt;/a&gt;
for details.&lt;/p&gt;
&lt;p&gt;It turns out that the USR file &lt;strong&gt;could&lt;/strong&gt; be described, reasonably well,
with a Stingray schema. More to the point, it &lt;strong&gt;should&lt;/strong&gt; be describable
by a Stingray schema, and the application to extract waypoints or routes
should look a lot like a CSV reader.&lt;/p&gt;
&lt;div class="section" id="consequences"&gt;
&lt;h2&gt;Consequences&lt;/h2&gt;
&lt;p&gt;There are a bunch of things I need to do.&lt;/p&gt;
&lt;p&gt;First, and foremost, I need to unwind some of the COBOL field extraction
logic. It's a right awful mess because of the way I hacked in
&lt;tt class="docutils literal"&gt;OCCURS DEPENDING ON&lt;/tt&gt;. The USR files also have numerous instances of
arrays with a boundary defined by other content of the file. This is a
JSON Schema Extension (not a weird COBOL special case) and I need to use
proper JSON schema extensions and attribute cross-references.&lt;/p&gt;
&lt;p&gt;Of course, the &lt;tt class="docutils literal"&gt;OCCURS DEPENDING ON&lt;/tt&gt; clauses can nest, leading to
quite complex navigation through a dynamically-sized collection of
bytes. This is not done terribly well in the current version, and
involves leaving little state reminders around to &amp;quot;simplify&amp;quot; some of the
coding.&lt;/p&gt;
&lt;p&gt;The field extractions for COBOL apply to binary files and should be able
to leverage the Python &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt; module to decode individual fields. We
should be able to also extract data from USR files. The schema can be in
pure JSON or it can be in Python as an internal data structure. This is
a new feature and (in principle) can be applied to a variety of binary
files that are in (approximately) first normal form.&lt;/p&gt;
&lt;p&gt;(It may also be sensible to extend the &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt; module to handle some
EBCDIC conversions: int, float, packed-decimal, numeric string, and
alphanumeric string.)&lt;/p&gt;
&lt;p&gt;Once we can handle COBOL and USR file occurs-depending-on with some JSON
Schema extensions, we can then work on ways to convert source material
(including JSON Schema) to the internal representation of a schema.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;CSV headers -&amp;gt; JSON Schema has an API that has worked in the past.
The trivial case of first-line-is-degenerate-schema and
schema-in-a-separate-file are pleasant. The more complex cases of
skip-a-bunch-of-prefix-lines is a bit more complex, but isn't much of
a rewrite. This recovers the original feature of handling CSV files
in all their various incarnations and dialects with more formally
defined schema. It means that CSV with type conversions can be
handled.&lt;/li&gt;
&lt;li&gt;Parse COBOL DDE  -&amp;gt; JSON Schema. The COBOL parser is a bit of a hacky
mess. A better lexical scanner would simplify things slightly.
Because the field extraction logic will be rebuilt, we'll also have
the original feature of being able to directly decode Z/OS EBCDIC
files in Python.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This feels ambitious because the original design was so weak.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="stingray reader"></category><category term="EBCDIC"></category><category term="COBOL"></category></entry><entry><title>I Have Code That Didn't Work. What Now?</title><link href="https://slott56.github.io/2021_08_17-i_have_code_that_didnt_work_what_now.html" rel="alternate"></link><published>2021-08-17T09:00:00-04:00</published><updated>2021-08-17T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-17:/2021_08_17-i_have_code_that_didnt_work_what_now.html</id><summary type="html">&lt;p&gt;I don't get many of these &amp;quot;I have code that doesn't work&amp;quot; requests. But
I do see them once in a great while.&lt;/p&gt;
&lt;p&gt;It might be something like the following two-part explanation with a
following question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have this code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from base64 import b64encode
def some_func(message):
    msg = b64encode(message …&lt;/pre&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I don't get many of these &amp;quot;I have code that doesn't work&amp;quot; requests. But
I do see them once in a great while.&lt;/p&gt;
&lt;p&gt;It might be something like the following two-part explanation with a
following question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have this code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from base64 import b64encode
def some_func(message):
    msg = b64encode(message)

msg = some_func(b'hello world')
print(f&amp;quot;padding = {msg.count(b'=')}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;I'm getting this error.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Traceback (most recent call last):
  File &amp;quot;/Users/slott/miniconda3/envs/CaseStudy39/lib/python3.9/site-packages/IPython/core/interactiveshell.py&amp;quot;, line 3437, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File &amp;quot;&amp;lt;ipython-input-18-d54347890e97&amp;gt;&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    print(f&amp;quot;padding = {msg.count(b'=')}&amp;quot;)
AttributeError: 'NoneType' object has no attribute 'count'
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What can I do?&lt;/p&gt;
&lt;p&gt;&amp;lt;rant&amp;gt;As a personal note, I'm extremely grumpy when I get this in the
form of a screen picture. I cannot work with images of code. It's really
important to present code as text. Not a picture of text. &amp;lt;/rant&amp;gt;&lt;/p&gt;
&lt;p&gt;There are two kinds of answers to this question.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's obvious (to me) what's wrong. While I can say what the problem
is likely to be, that doesn't help the questioner.&lt;/li&gt;
&lt;li&gt;The questioner needs a strategy for getting to working software.
This, of course, can piss off some people because they insist all
questions have simple answers and I'm just being unhelpful by giving
them a bunch of steps they're supposed to follow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm going to stick to answers of the second kind. I don't provide
answers of the first kind.&lt;/p&gt;
&lt;div class="section" id="the-two-general-answers"&gt;
&lt;h2&gt;The Two General Answers&lt;/h2&gt;
&lt;p&gt;There are two general answers of the second kind.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Use the debugger.&lt;/li&gt;
&lt;li&gt;Add &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm told the debugger can be fun to use. I'm not skilled in using it, so
I don't generally recommend it. I find it difficult to uncover state
change using the debugger. It's great for exploring a data structure.&lt;/p&gt;
&lt;p&gt;Adding &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; is something I find easier and more useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-print"&gt;
&lt;h2&gt;Add print()&lt;/h2&gt;
&lt;p&gt;Here's what folks can do to uncover a problem. This is all we ever need
to do. There are no weird other cases or complex situations where this
doesn't work.&lt;/p&gt;
&lt;p&gt;The procedure for adding &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; works like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Find the line with the error. In the example, it's the final
&lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Look at all the variables. In this case, there's only one, &lt;tt class="docutils literal"&gt;msg&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Put a &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; in front to show the values of all the variables.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;print(f&amp;quot;{msg=}&amp;quot;)&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will reveal that &lt;tt class="docutils literal"&gt;msg is None&lt;/tt&gt; after the assignment statement.&lt;/p&gt;
&lt;p&gt;Now we have to look at the function, &lt;tt class="docutils literal"&gt;some_func()&lt;/tt&gt;, that creates the
value for &lt;tt class="docutils literal"&gt;msg&lt;/tt&gt;. We'll start from the end of this function and work
forward, following the above three-step procedure faithfully. And
recursively.&lt;/p&gt;
&lt;p&gt;Eventually, we'll uncover the problem. It may not be blazingly obvious,
but we will, without fail, find a missing state change or an unexpected
state change. (In this case, it's missing.)&lt;/p&gt;
&lt;p&gt;I can't emphasize enough that this is done as simply and directly as
possible. If the code is hellishly complex, perhaps it should be
refactored until this can be done. If the test case involves
hyper-complex conditions before it fails, then perhaps the code needs to
be refactored until this can be done.&lt;/p&gt;
&lt;p&gt;This is the only answer I can ever give to &amp;quot;why doesn't my code work?&amp;quot;
question: Add &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="debugging"></category></entry><entry><title>Why Python Is Weird For C++ Developers -- Some Thoughts</title><link href="https://slott56.github.io/2021_08_10-why_python_is_weird_for_c_developers_some_thoughts.html" rel="alternate"></link><published>2021-08-10T09:00:00-04:00</published><updated>2021-08-10T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-10:/2021_08_10-why_python_is_weird_for_c_developers_some_thoughts.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://betterprogramming.pub/9-reasons-why-python-is-weird-for-c-developers-b37e650471d6"&gt;9 Reasons Why Python Is Weird For C++
Developers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm often bothered by inter-language comparisons. Mostly because
programming languages -- except in the most abstract way -- aren't
really very comparable. At the Turing Machine level the finite state
automata are comparable, but that reductionist view (intentionally)
eliminates all the expressive …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://betterprogramming.pub/9-reasons-why-python-is-weird-for-c-developers-b37e650471d6"&gt;9 Reasons Why Python Is Weird For C++
Developers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm often bothered by inter-language comparisons. Mostly because
programming languages -- except in the most abstract way -- aren't
really very comparable. At the Turing Machine level the finite state
automata are comparable, but that reductionist view (intentionally)
eliminates all the expressive power from a given language.&lt;/p&gt;
&lt;p&gt;Let's look at the reasons in some detail. A few of them actually are
interesting.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Whitespace&lt;/strong&gt;. I'm dismissive of this as an interesting difference.
When I read code in EVERY other programming language, I'm immediately
aware that programmers can indent. Indeed, I've seen C and C++ code
were {}'s were omitted, but the code was indented properly, making it
devilishly hard to debug. My experience is that folks get the
indentation right BEFORE the get the {}'s right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntax&lt;/strong&gt;. In this article, it's the lack of {}'s. Again, I'm
dismissive because I've actually helped folks learning C++ who had
the indentation right and the {}'s wrong. This is ony &amp;quot;weird&amp;quot; if
you're absolutely and completely convinced that {}'s are somehow a
divine requirement that transcends all human attempts at
interpretation. With Unicode, we're in a position to separate set
membership from block-of-code and start using multiple variants on
{}'s.  I'd vote for &lt;tt class="docutils literal"&gt;if a &amp;gt; b 【m = a】else 【m = b】&lt;/tt&gt; using
【】for code blocks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class Variables&lt;/strong&gt;. This points out an inherent ambiguity of C++.
Most of the time, most things are not &amp;quot;static&amp;quot;. They're &amp;quot;automatic&amp;quot;
that is, associated with the instance. The auto keyword, however, is
rarely used, and is mostly assumed. Python (outside &lt;strong&gt;dataclasses&lt;/strong&gt;)
is more consistent. All things inside the class statement are
&amp;quot;static&amp;quot;: part of the class. In the case of &lt;strong&gt;dataclasses&lt;/strong&gt;, this
simple rule is broken, which can be confusing. But. This wasn't
mentioned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pointer and Reference Transparency&lt;/strong&gt;. This is simple confusion. All
Python is handled by reference all the time. C++ is an absolute mess
of &amp;quot;primitive&amp;quot; types that don't use references and objects that do
use references. Java is just as bad. And I want to emphasize bad.
Python is perfectly consistent, and -- I would suggest -- the
opposite of weird. But. The article is describing things from a C++
perspective, as if C++ were somehow not weird. I suggest this isn't a
great approach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private Class Members&lt;/strong&gt;. This is summarized as &amp;quot;better
encapsulation and control&amp;quot; without a concrete example. It's hard to
provide a concrete example because the Pythonic approach works so
well. The only use case for &amp;quot;private&amp;quot; that I've been able to
understand is when you're concealing the entire implementation from
all scrutiny. That is, you have a proprietary implementation with an
encrypted JAR file and you want to avoid revealing it to protect some
intellectual property. Since Python is source, this can't happen, and
we say &amp;quot;We're all adults here.&amp;quot; Flag it with a leading _ and we'll
recognize it as part of an implementation detail that might change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self vs. this&lt;/strong&gt;. Not sure what this is but the phrase &amp;quot;only major
programming language&amp;quot; is something that relies on Java and C++ being
near the top of the TIOBE index. I suspect we can find a lot of
languages that use neither &amp;quot;self&amp;quot; nor &amp;quot;this&amp;quot;. I'm not sure exactly
how this is weird, but, I get that it's different.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Return Values&lt;/strong&gt;. This seems like an intentional refusal to
understand how tuples and tuple unpacking work. Again, this seems to
make C++ the yardstick when C++ is clearly kind of weird here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Strong Data Types&lt;/strong&gt;. This seems like another refusal to
understand Python. In this case, it feels like it's a refusal
understand that objects are strongly typed in Python and variables
are transient labels attached to objects. The mypy tool will try to
associate a type with a variable and will warn you about
&lt;tt class="docutils literal"&gt;a = &amp;quot;string&amp;quot;&lt;/tt&gt; followed by &lt;tt class="docutils literal"&gt;a = 42&lt;/tt&gt;. Perhaps I'm not
understanding, but the portrayal of C++ rules as &amp;quot;not weird&amp;quot; seems
like it's being taken too far.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Constants&lt;/strong&gt;. This isn't completely true. Some folks use enums to
provide enumerated numeric constant values in the rare cases where
this might matter. Using global variables as constants actually works
out fine in practice. Most tools will look for ALL_CAPS names on the
left of an = sign; and if this occurs more than once will raise a
warning. If you have really stupid fellow programmers who can't
understand how some variables shouldn't be reused, you can easily
write a script to walk the AST looking for references to global
variables and warn your colleagues that there are rules and they're
not following them. This is part and parcel of the &amp;quot;We're all adults
here&amp;quot; approach. If folks can't figure out how constants work, you
need to collaborate more fully with other developers to help them
understand this.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm unhappy with lifting up C++ quirks as if they're somehow really
important. I don't think C++ is a terribly helpful language. The need
for explicit memory management, for example, is a terrible problem. The
explicit distinction between primitives and objects is also terrible.&lt;/p&gt;
&lt;p&gt;While compare-and-contrast with Python might be helpful for C++
expatriates, I think this article has it exactly backwards. I think the
following list couuld be more useful.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python frees you from counting {}'s. Just indent. It's easier.&lt;/li&gt;
&lt;li&gt;Python has simple rules for class/instance variables (except in the
case of dataclasses and named tuples.) Also: if it starts with
&lt;tt class="docutils literal"&gt;self.&lt;/tt&gt; it's an instance variable.&lt;/li&gt;
&lt;li&gt;Python is all references without the horrifying complexity of
primitive types.&lt;/li&gt;
&lt;li&gt;We're all adults here. Don't stress yourself out over privacy or
constants. Document your code, instead. Write a unit test case or
two. Use mypy. Use black.&lt;/li&gt;
&lt;li&gt;Tuple unpacking and the fact that tuples are often implied works out
very nicely to create very clean code.&lt;/li&gt;
&lt;li&gt;Data types are part of the object. There's no magical &amp;quot;cast&amp;quot;
capability to process a block of bytes as if they're some other
type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are advantages of Python. And disadvantages of C++. I think
it's better to talk about what Python has than what Python lacks when
measured against a terribly complex language like C++.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="C++"></category><category term="Programming Languages"></category></entry><entry><title>Writing Interactive Compute-Intensive Programs for Web Browsers</title><link href="https://slott56.github.io/2021_08_03-writing_interactive_compute_intensive_programs_for_web_browsers.html" rel="alternate"></link><published>2021-08-03T09:00:00-04:00</published><updated>2021-08-03T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-03:/2021_08_03-writing_interactive_compute_intensive_programs_for_web_browsers.html</id><summary type="html">&lt;p&gt;Fascinating. The reference to the classic Mac OS with non-preemptive
multi-tasking is quite cool. The concept fits nicely with Python's
async/await coroutines that need to collaborate with a periodic OS
request to permit interaction with streams of events from another
source (i.e., a foreground window.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://link.medium.com/5KY6wClGAhb"&gt;Writing Interactive Compute-Intensive …&lt;/a&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Fascinating. The reference to the classic Mac OS with non-preemptive
multi-tasking is quite cool. The concept fits nicely with Python's
async/await coroutines that need to collaborate with a periodic OS
request to permit interaction with streams of events from another
source (i.e., a foreground window.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://link.medium.com/5KY6wClGAhb"&gt;Writing Interactive Compute-Intensive Programs for Web
Browsers&lt;/a&gt; by Henry Kautz
Download Medium on the &lt;a class="reference external" href="https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&amp;amp;mt=8&amp;amp;ct=app_email_share"&gt;App
Store&lt;/a&gt;
or &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.medium.reader&amp;amp;referrer=utm_source%3Dios_app%26utm_medium%3Demail%26utm_campaign%3Dios_app_email_share"&gt;Play
Store&lt;/a&gt;&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="parallel processing"></category></entry><entry><title>How can people find inspiration at work? #CreateMeaning</title><link href="https://slott56.github.io/2021_07_20-how_can_people_find_inspiration_at_work_createmeaning.html" rel="alternate"></link><published>2021-07-20T09:00:00-04:00</published><updated>2021-07-20T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-20:/2021_07_20-how_can_people_find_inspiration_at_work_createmeaning.html</id><summary type="html">&lt;p&gt;What do I know about &amp;quot;inspiration&amp;quot; at work? I'm not sure I know much,
but I think I may have some advice that could be useful.&lt;/p&gt;
&lt;p&gt;I was in the high-tech write-software-every-day workplace since about
1976 or so. (The first two years were part-time while in college.) I use
past …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What do I know about &amp;quot;inspiration&amp;quot; at work? I'm not sure I know much,
but I think I may have some advice that could be useful.&lt;/p&gt;
&lt;p&gt;I was in the high-tech write-software-every-day workplace since about
1976 or so. (The first two years were part-time while in college.) I use
past perfect &amp;quot;was&amp;quot; because I'm old enough (and lucky enough) to be able
to retire from daily work. I've switched from writing code to writing
books about writing code.&lt;/p&gt;
&lt;p&gt;For the math-impaired, my software career spanned 45 years.&lt;/p&gt;
&lt;p&gt;Early in this career, the question of finding inspiration at work wasn't
asked in the same stark way people discuss it nowadays. When I was
younger, the idea of maintaining a work/life balance wasn't something we
were asked or encouraged to consider. We did the best we could and tried
to avoid getting replaced by someone who could do it better.&lt;/p&gt;
&lt;p&gt;Which -- with the advantages of hind-sight -- was a terrible way to live
and work. Simply awful. I was lucky enough to see hundreds of projects
in my working career. I worked with scores of different organizations.
There was a spectrum of bad behavior.&lt;/p&gt;
&lt;p&gt;I did learn this: &lt;strong&gt;Fear is not Inspiring&lt;/strong&gt;. I learned a few other
things, but let's start with fear.&lt;/p&gt;
&lt;div class="section" id="the-fear-factor"&gt;
&lt;h2&gt;The Fear Factor&lt;/h2&gt;
&lt;p&gt;I want to dwell a bit on the fear factor in the workplace. I'm firmly
convinced that some manager types suffer with a nagging background of
essential fear for their own jobs. And they can project this fear onto
folks around them.&lt;/p&gt;
&lt;p&gt;Try these shoes on for a moment. The technology has moved on and you
haven't kept up. You're trying to manage people, but you have a nagging
suspicion your core managerial skills are weak enough that you could be
replaced. Motivated by fear, you encourage &amp;quot;casual overtime&amp;quot; and
&amp;quot;working weekends&amp;quot; and &amp;quot;meeting the committed schedule&amp;quot;. Perhaps you
feel it necessary to go so far as to demand these things.&lt;/p&gt;
&lt;p&gt;Fear of getting fired creates an uninspiring place to work. It will be
an incubator for burnout.&lt;/p&gt;
&lt;p&gt;Further, I suspect it can lead to worse situations than people quitting.
I think the &amp;quot;work a little harder&amp;quot; folks plant seeds for various kinds
of workplace abuses.&lt;/p&gt;
&lt;p&gt;I think there are a variety of fears. The fear of getting fired is at
the bottom of Maslow's hierarchy of needs: we could get fired, and be
unable to get another job. We're in the Physiological and Safety realm
of the needs pyramid.&lt;/p&gt;
&lt;p&gt;A fear of a project not working out means we'll tumble in the eyes of
more senior management. This is somewhere in the higher level of Social
Belonging and Esteem needs. The problem is that projects have a variety
of metrics, and simply making the schedule is an easy metric and can
seem to lead to immediate esteem.&lt;/p&gt;
&lt;p&gt;What about higher level cognitive needs like Self-actualization and
Transcendence? I strongly suspect fears related to these needs can color
someone's workplace. I think these often show up as &amp;quot;Am I really going
to be doing this for the Rest of My Life?&amp;quot; questions. This becomes an
undercurrent of negativity stemming from fear of being trapped in
unfulfilling work.&lt;/p&gt;
&lt;p&gt;We might see these fears in several places. We each harbor our own
private fears. In any organization with a hierarchy, we'll have to deal
with fears that trickle down to us from supervisors. In non-hierarchical
organizations, we'll have to deal with fears of our peers and
colleagues. We're surrounded by fears, and I think this can sap our
inspiration.&lt;/p&gt;
&lt;p&gt;What can we do to find inspiration in a work environment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-experience"&gt;
&lt;h2&gt;My Experience&lt;/h2&gt;
&lt;p&gt;I've worked on hundreds of projects. That means hundreds of jobs that
came to an end. And when the project ended, I was no longer needed.&lt;/p&gt;
&lt;p&gt;In effect, I was fired hundreds of times.&lt;/p&gt;
&lt;p&gt;This isn't a helpful thing. If Maslow's base physiological needs are
met, then having a project end isn't too horrible. I was a contract
programmer in the olden days when we were salaried, and the company
would carry us from assignment to assignment. Being let go by a customer
can be harsh, but getting paid in spite of being let go softens the
blow.&lt;/p&gt;
&lt;p&gt;I emphatically do not recommend this way of working as a source of
inspiration. Some people like the constant changing gears and changing
directions. Other people might find it terrifying: each project is a
whole new group of people in a new organization. Potentially very
unsettling.&lt;/p&gt;
&lt;p&gt;I don't think the &amp;quot;get tougher&amp;quot; or &amp;quot;grow thicker skin&amp;quot; advice is good.
I'm don't think it worked out for me. I think this kind of transience
left me feeling isolated. I think it lead me to carry around a sense of
superiority. So. Let's set aside any dumb-sounding advice based on a
literal review of my experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-did-i-cope"&gt;
&lt;h2&gt;How Did I Cope?&lt;/h2&gt;
&lt;p&gt;Finding ways to cope, I think, is important, but it is also potentially
misleading. The idea of &lt;strong&gt;coping&lt;/strong&gt; with new projects, new organizations,
travel, and getting fired all the time isn't inspiring. It's merely
coping with an endless stream of loss and separation.&lt;/p&gt;
&lt;p&gt;Underpinning the idea of coping is a more foundational question. Where
did I find the inspiration to keep on doing this contract programming
thing for so many years? And the other question is how well my search
for inspiration might apply to folks who aren't commuting computer
programmers?&lt;/p&gt;
&lt;p&gt;I think there's a first step that many people can take. It's this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We can disentangle our self-worth from the work-place imposed sense of worth.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This may be overly glib. But. I think the things rewarded in the
workplace aren't a good reflection of who we are and what we're capable
of. While it's important to be confident in one's self, our confidence
can be undermined by a toxic workplace. Having confidence can let us
take our skills and abilities in a variety of directions. We might, for
example, decide to find another workplace; one where our value is
recognized. Or, we might decide to change our circumstances in the
workplace we're currently inhabiting. In both cases, we're asserting our
value. We're making a further claim about our value: we may not match
the workplace's expectations of us. The workplace can change, or we can
find another workplace.&lt;/p&gt;
&lt;p&gt;We might see a mismatch in lousy performance reviews. These can can stem
from many causes. Perhaps we're not suited for a job and need to find
something else. Or, perhaps the person reviewing our work doesn't see
what we could (or should) be doing. (They have their own fears, and they
may not be willing to try to make the changes we'd like them to make.)&lt;/p&gt;
&lt;p&gt;Looking back, I may have been doing this all along, without being clear
or intentional about it. Perhaps I excelled at places that valued me,
and failed to meet expectations at places that treated me poorly.
Perhaps my job shifting was (in an indirect way) a search for a
workplace that valued me, my unique experiences, and my distinctive
voice.&lt;/p&gt;
&lt;p&gt;I was not intentional about it. I stumbled from job to job, knowing the
sales folks would find me a next assignment when the current assignment
had run its course. I think a vague sense of self-worth is what lead me
to locating inspiration in spite of a lot of change and disruption.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finding-inspiration"&gt;
&lt;h2&gt;Finding Inspiration&lt;/h2&gt;
&lt;p&gt;When we think of inspiration, we think of a spiritual drive to do the
work. This doesn't often parallel with working for pay to cover rent and
expenses.&lt;/p&gt;
&lt;p&gt;A good manager, however, can create a cohesive team from a group of
people. A group of peers can welcome a new colleague. This creates
belonging and esteem: the middle levels of Maslow's hierarchy of needs.
We may find that a team or a team's goal may be inspiring. This means
that our own self-worth is recognized and valued by our co-workers. This
can be a marvelous experience.&lt;/p&gt;
&lt;p&gt;What about the bad manager or unhelpful group of colleagues? In this
cases, we're forced to make the best of an awkward situation. I think we
can do this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We can search for inspiration at the margins of our work life.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Can we find some side-bar aspect of the work that leads to some helpful
insights? Perhaps there is a chronic problem we can take notes on and --
eventually -- fix. Perhaps someone is less helpful that others, and we
can try to understand what would make them less toxic. Perhaps cleaning
the break-room fridge is better than complaining about month-old food.
(Yuck. But. If things are better, it may be worth it.)&lt;/p&gt;
&lt;p&gt;For years, I had an aspiration to write about software development. To
further this dream, I started taking more and more careful notes of
projects I was on. In the era before the World Wide Web, publication was
difficult, but not impossible. I wrote small articles for technical
magazines; this effort was something that inspired me to work with
customers who were inept and had horrible, horrible problems. I liked
the awful customers because it provided me good examples of things that
should not be done.&lt;/p&gt;
&lt;p&gt;At the end of a horrible project, I'd have a good anecdote for what not
to do.&lt;/p&gt;
&lt;p&gt;I acknowledge my two ideas of self worth and inspiration isn't a
dramatic, life-changing epiphany. I'm pretty sure the scales won't fall
from anyone's eyes as they think about looking at sidebar topics as a
source of inspiration.&lt;/p&gt;
&lt;p&gt;Looking at the margins, edges, and corners of a job can help to reveal
the whole job. The whole team. The whole goal. Finding this broader view
might inspire us to look for a better team with better goals. In other
cases, it might help us find the missing skills in the team we're on. In
other cases, a better perspective might help us steer our supervisor
toward doing something that's better than what they're doing right now.&lt;/p&gt;
&lt;p&gt;There are very fine lines between toxic, poorly organized, poorly
managed, confusing work places, and workplaces that are still trying to
find a workable organization. Most places have a combination of good and
bad, inept and well-done, confusing and sensible features. Indeed, these
may all be different axes and an organization is really a
multi-dimensional object with different kinds of overlaps and gaps.&lt;/p&gt;
&lt;p&gt;I believe the foundation for inspiration is a clear sense of self-worth.
I think we create meaning in our workplace by knowing what we can
contribute, what we want to contribute, and what the organization needs.
Our unique contribution and what the organization needs may not overlap
at all, or the organization may have always been searching for someone
like us. Either way, our awareness of our skills, our experience, and
our authentic voice is what lets us find inspiration.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="great-article-steve-i-have-had-similar-thoughts-o"&gt;
&lt;h2&gt;Great article Steve. I have had similar thoughts o...&lt;/h2&gt;
&lt;p&gt;Dunn Family&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-07-29 09:18:19.089000-04:00&lt;/p&gt;
&lt;p&gt;Great article Steve. I have had similar thoughts over the years as I saw
how various organizations / departments valued or didn't value the
people that worked in them.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="career"></category><category term="#CreateMeaning"></category><category term="work-life"></category></entry><entry><title>What Books Should I Read? In What Order?</title><link href="https://slott56.github.io/2021_07_13-what_books_should_i_read_in_what_order.html" rel="alternate"></link><published>2021-07-13T09:00:00-04:00</published><updated>2021-07-13T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-13:/2021_07_13-what_books_should_i_read_in_what_order.html</id><summary type="html">&lt;p&gt;A fascinating question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I'm baffled by the amount of books you've published over the
course of time. Currently Reddit suggests that I use Building
Skills in Python under Beginner's section, but it looks quite
outdated. So back and forth, I found your Building Skills in OO on
GitHub Page and …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A fascinating question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I'm baffled by the amount of books you've published over the
course of time. Currently Reddit suggests that I use Building
Skills in Python under Beginner's section, but it looks quite
outdated. So back and forth, I found your Building Skills in OO on
GitHub Page and was quite happy with the read on the first 100
pages.&lt;/p&gt;
&lt;p&gt;I searched for more info on the books you've published and wanted
to know if you could sort them in ascending order of difficulty
for me as I intend to purchase them slowly.&lt;/p&gt;
&lt;p&gt;My main concern to learn Python is just to cross technical
interviews and building applications that help with my workflow
(they are in bash with around 200 functions, so I'm hoping to
migrate them to something which is more robust).&lt;/p&gt;
&lt;p&gt;Currently the focus I intend to develop is on:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Strong Foundations of the Python Language.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2) Strong Foundations on the Basic Libraries for Data Structures
and Algorithms (For example, bisect gives me insort(), calendar
gives me isleap(), iter_tools gives me permutation(), etc).&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Strong Foundations on the Design Patterns.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So could you please help me out and suggest your books?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is challenging for a few reasons.&lt;/p&gt;
&lt;p&gt;First, the &amp;quot;Building Skills&amp;quot; books have been reduced to only the
&lt;em&gt;Building Skills in OO Design&lt;/em&gt;. This can be found in GitHub.
&lt;a class="reference external" href="https://github.com/slott56/building-skills-oo-design-book"&gt;https://github.com/slott56/building-skills-oo-design-book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That book is not really targeted to beginners, though. It presumes some
core OO skills, and provides a (very) long series of exercises to build
on those skills.&lt;/p&gt;
&lt;p&gt;Second, I never really conceived of a beginner-to-expert sequence of
books. From your letter, I see that I need to look at filling in some
gaps in my sequence of books. I'll alert my editors at Packt, and we can
consider this in the future.&lt;/p&gt;
&lt;div class="section" id="specific-needs"&gt;
&lt;h2&gt;Specific Needs&lt;/h2&gt;
&lt;p&gt;Let's look at your needs.&lt;/p&gt;
&lt;div class="section" id="foundations-in-the-python-language"&gt;
&lt;h3&gt;1. Foundations in the Python language.&lt;/h3&gt;
&lt;p&gt;This might be something you can learn from my &lt;a class="reference external" href="https://bookshop.org/books/python-essentials/9781784390341"&gt;Python
Essentials&lt;/a&gt;.
This isn't focused on complete n00bs. All of my books expect some
programming background. Since you're an Android engineer and write code
in C++ and Java, this may be helpful. This title is getting old,
however, and needs a second edition.&lt;/p&gt;
&lt;p&gt;For someone with core programming skills, I suspect that &lt;a class="reference external" href="https://www.oreilly.com/library/view/mastering-object-oriented-python/9781789531367/"&gt;Mastering OO
Python&lt;/a&gt; will
be suitable. My &lt;a class="reference external" href="https://www.packtpub.com/product/python-object-oriented-programming-fourth-edition/9781801077262"&gt;Python 3 OO
Programming&lt;/a&gt; (4th
ed.) is similarly aimed at folks who can program and can learn a new
language quickly.&lt;/p&gt;
&lt;p&gt;A book like Martelli's &lt;a class="reference external" href="https://www.amazon.com/Python-Nutshell-Second-Alex-Martelli/dp/0596100469"&gt;Python in a
Nutshell&lt;/a&gt; may
provide a better foundation the way the language works than any of mine.
Also Lutz's &lt;a class="reference external" href="https://www.amazon.com/Learning-Python-5th-Mark-Lutz/dp/1449355730/ref=pd_lpo_14_t_2/145-5116566-3930956"&gt;Learning
Python&lt;/a&gt;
is extremely popular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="foundations-in-the-standard-library"&gt;
&lt;h3&gt;2. Foundations in the Standard Library.&lt;/h3&gt;
&lt;p&gt;This is tricky. I touch on some of these topics in &lt;a class="reference external" href="https://www.abebooks.com/Functional-Python-Programming-Second-Edition-Lott/30276798601/bd"&gt;Functional Python
Programming&lt;/a&gt;
(2nd ed.) I also touch on some of these topics in the &lt;a class="reference external" href="https://www.ebooks.com/en-us/book/210095364/modern-python-cookbook/steven-f-lott/"&gt;Modern Python
Cookbook&lt;/a&gt;
(2nd ed.)&lt;/p&gt;
&lt;p&gt;I don't, however, cover very much of the library. I touch on a few
really important modules. The library is vast. A book like
Hellmann's &lt;a class="reference external" href="https://www.amazon.com/Python-Standard-Library-Example/dp/0321767349"&gt;The Python Standard Library by
Example&lt;/a&gt; might
be more suitable than one of mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns"&gt;
&lt;h3&gt;3. Design Patterns.&lt;/h3&gt;
&lt;p&gt;This is central to &lt;a class="reference external" href="https://www.packtpub.com/product/python-object-oriented-programming-fourth-edition/9781801077262"&gt;Python 3 OO
Programming&lt;/a&gt; (4th
ed.) Dusty Phillips and I cover a number of popular design patterns in
detail.&lt;/p&gt;
&lt;p&gt;There are -- of course -- a lot of very, very good books on Python. I'm
honored you reached out to me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="other-random-advice"&gt;
&lt;h2&gt;Other Random Advice&lt;/h2&gt;
&lt;p&gt;Because Python is a relatively simple language (with a vast library) I
have always suspected that language foundations don't really require a
ton of explanation. Many languages (i.e., C++) are filled with odd
details and weird features that are really unpleasantly complex. Many
Java programmers get used to the distinction between the primitive
&lt;tt class="docutils literal"&gt;int&lt;/tt&gt; type and the &lt;tt class="docutils literal"&gt;Integer&lt;/tt&gt; class type. While the Java and C++
approach can seem simple (after a while) it really isn't simple at all.&lt;/p&gt;
&lt;p&gt;The standard library is vast, and it takes time to get used to how much
is there. I would suggest having a browser tab open
to &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;https://docs.python.org/3/library/&lt;/a&gt; at all times.&lt;/p&gt;
&lt;p&gt;Design patterns, similarly, require some care. There are complex details
around implementing the &lt;strong&gt;Singleton&lt;/strong&gt; pattern in C++ and Java. Python
class definitions and Python module definitions are Singletons, and
using a class definition as a &lt;strong&gt;Singleton&lt;/strong&gt; object is often far simpler
than the commonly-used techniques for C++ and Java.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>A Python Roadmap</title><link href="https://slott56.github.io/2021_07_06-a_python_roadmap.html" rel="alternate"></link><published>2021-07-06T08:00:00-04:00</published><updated>2021-07-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-06:/2021_07_06-a_python_roadmap.html</id><summary type="html">&lt;p&gt;An interesting tweet. The  roadmap has three sections. I'm not sure this
is actually complete, or even grouped correctly. It is a very good list
of topics.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/prasoonpratham/status/1408435475426254849?s=11"&gt;https://twitter.com/prasoonpratham/status/1408435475426254849?s=11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Here's a complete roadmap of topics to master Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;The thread, however, seems no longer …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An interesting tweet. The  roadmap has three sections. I'm not sure this
is actually complete, or even grouped correctly. It is a very good list
of topics.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/prasoonpratham/status/1408435475426254849?s=11"&gt;https://twitter.com/prasoonpratham/status/1408435475426254849?s=11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Here's a complete roadmap of topics to master Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;The thread, however, seems no longer to exist.&lt;/p&gt;
&lt;div class="section" id="foundations"&gt;
&lt;h2&gt;Foundations&lt;/h2&gt;
&lt;p&gt;I want start by quibbling about variables being first. I'm not sold on
this.&lt;/p&gt;
&lt;p&gt;I think that operators, expressions, and the built-in immutable types
are foundational. int, float, str, and tuple are hugely important as
core concepts in computing and Python.&lt;/p&gt;
&lt;p&gt;I also think that &amp;quot;loops&amp;quot; is a sketchy notion and I kind of wish we
wouldn't describe for and while statements as &amp;quot;loops&amp;quot;. I think we should
call them iterations. They implement two kinds of logical quantifiers
&amp;quot;for all&amp;quot; and &amp;quot;there exists.&amp;quot; I think we should talk about the final
result of a for statement: all of the values in a range are processed.
Similarly a for-if-break construct establishes a &amp;quot;for exists&amp;quot; that
defines the first value in a range for which a condition is met. And
yes, range objects will be central.&lt;/p&gt;
&lt;p&gt;I think that a huge amount of programming can be covered with these
topics. I'm not sure &amp;quot;basic&amp;quot; is the right term; &lt;strong&gt;foundations&lt;/strong&gt; might be
a better idea.&lt;/p&gt;
&lt;p&gt;The use of variables to manage state is part of this. But. Variables,
assignment, and state change are a bit more advanced and maybe shouldn't
be first.&lt;/p&gt;
&lt;p&gt;I also think function definitions are foundational. Mathematics has been
defining functions based on other functions. It's a way of providing a
mental short-hand for complex concepts. I don't need to know all the
details of how to compute a square root to make use of square root as a
concept.&lt;/p&gt;
&lt;p&gt;The wide varieties of assignment statements, including assignment to
decompose collections aren't mentioned in the original post. This may be
an important omission, causing me to quibble on &amp;quot;complete.&amp;quot;&lt;/p&gt;
&lt;p&gt;I agree that files and elements of File IO are part of this foundation.
If we limit ourselves to reading and writing files, then they're
essentially immutable structures. I think we can safely avoid
update-in-place files because this is an application topic more than a
language topic. Python offers the minimal level of support via seek and
tell, but little more. And most modern application relies on a database
for updatable files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-structures"&gt;
&lt;h2&gt;Data Structures&lt;/h2&gt;
&lt;p&gt;Moving from basic to intermediate. I prefer the term &amp;quot;data structures&amp;quot;
which are built on the language foundations. I think that the mutable
built-in data structures come next in the roadmap. My preference is to
omit terms like Object-Oriented or Functional, and focus on list, dict,
and set, and how the iteration works. This means comprehensions and
generators are part of this essential data structure section.&lt;/p&gt;
&lt;p&gt;No, comprehensions aren't and shouldn't be called &amp;quot;advanced.&amp;quot; They're
very much a core concept. Thinking about statements to implement a
map/filter/reduce over a collection is the essence of a great deal of
programming. We don't always learn it that way, but it needs to be
presented in that framework even to beginners. A pile of for and if
statements and a bunch of variables is a programmer's first step toward
a simpler comprehension. In both cases, they're doing a mapping and it
needs to be described as mapping one collection to another collection.&lt;/p&gt;
&lt;p&gt;This is where the standard library collections module is introduced.&lt;/p&gt;
&lt;p&gt;Yes it's part of the library. I think it's too central to be ignored. I
think dataclasses belong here, too.&lt;/p&gt;
&lt;p&gt;Talking about the mutable data structures means revisiting the for
statement and using it on a variety of iterables. The way Python's
concepts apply to a variety of data types is an important feature of the
language. (In the olden days, they used to talk about &amp;quot;orthogonality&amp;quot; of
data and processing; we don't need to dwell on it, but I think it helps
to acknowledge it.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;It appears to me that the functional programming topics can come next.
The idea of functional composition via higher-order functions and
decorators builds on the existing foundation. This is where map() and
filter() belong. Because of the way sorted(), max(), and min() work on
collections with a key= function, these are part of the functional
programming roadmap. The inconsistency between map() and functions like
max() is an important thing to note.&lt;/p&gt;
&lt;p&gt;I also think itertools belongs here. We can make the case that it's in
the standard library, but then, so is io. I think itertools and
functools are as central to practical Python as the math module and
collections.&lt;/p&gt;
&lt;p&gt;I think typing.NamedTuple and dataclasses belong here, also. A frozen
dataclass is stateless, and can be helpful when creating list
comprehensions to perform a mapping from one collection to another
collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="object-oriented-programming"&gt;
&lt;h2&gt;Object-Oriented Programming&lt;/h2&gt;
&lt;p&gt;I think OO programming and related concepts build on the previous
material. Class definitions and state management aren't simple, even
though they're essential parts of Python.&lt;/p&gt;
&lt;p&gt;To an extent, OO programming can be decomposed into two layers. While I
hate to overuse &amp;quot;foundation&amp;quot;, there seem to be two parts:&lt;/p&gt;
&lt;p&gt;OO Foundations -- inheritance, composition, and different kinds of
delegation. This tends to expose a number of common design patterns like
Strategy, Decorator, and Facade.&lt;/p&gt;
&lt;p&gt;OO Features -- this includes metaprogramming, decorators, ABC's, mixins,
and the like. These topics are all designed to avoid copy-and-paste in
sophisticated edge cases that cross class boundaries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="concurrency"&gt;
&lt;h2&gt;Concurrency&lt;/h2&gt;
&lt;p&gt;I'm not sure why concurrency and parallelism are separate topics in the
original list. I've had folks try to split this hair a number of ways.
The idea is to find a place where async lives that's &amp;quot;concurrency lite&amp;quot;
or something.&lt;/p&gt;
&lt;p&gt;The concepts here become blurry because threads and processes are OS
features, not language features. The async/await language features,
however, are clearly part of Python. It becomes particularly awful when
working on something practical where asyncio doesn't provide the feature
you need. Specifically, blocking file system I/O isn't part of asyncio
and requires an explicit appeal to the underlying thread pool for the
blocking operation.&lt;/p&gt;
&lt;p&gt;To an extent, async/await needs to be on the roadmap. It's tricky,
though, to cover this without also digressing into threads as a way to
deal with blocking operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-integration-and-deployment"&gt;
&lt;h2&gt;Test, Integration, and Deployment&lt;/h2&gt;
&lt;p&gt;This is where tools show up. This is where pip, unittest, pytest,
tox/nox, coverage, etc. live. Are these part of the language? Or are the
part of the broader ecosystem?&lt;/p&gt;
&lt;p&gt;I submit they're explicitly not part of the language. The roadmap ends
just before this topic. The idea is that we should have a Python roadmap
that uses the language and the standard library.&lt;/p&gt;
&lt;p&gt;Once we've talked about the language (and some of the library) we can
move on to pip and packaging. I don't think pip is and &amp;quot;intermediate&amp;quot;
topic. I find that premature introduction of pip is a sign of trying to
create useful interesting examples. Examples that don't use pip wind up
being kind of boring. Everyone wants to play with pygame and pillow and
other kinds of projects, but, those aren't foundational to the language.
They're interesting and appealing and -- frankly -- a lot of fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;I'm not a fan of the roadmap. I like some of it. I don't like some of
it.&lt;/p&gt;
&lt;p&gt;I am a fan of presenting the idea for discussion.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="object-oriented programming"></category><category term="functional python programming"></category><category term="#python"></category></entry><entry><title>Letter to Mom -- What Is This "Computer Programming" Thing?</title><link href="https://slott56.github.io/2021_07_04-letter_to_mom_what_is_this_computer_programming_thing.html" rel="alternate"></link><published>2021-07-04T14:31:00-04:00</published><updated>2021-07-04T14:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-04:/2021_07_04-letter_to_mom_what_is_this_computer_programming_thing.html</id><summary type="html">&lt;p&gt;Happy birthday, mom. Glad to see you're still doing well, avoiding the
complications of COVID-19.&lt;/p&gt;
&lt;p&gt;You asked what it was I did for a living. Emphasis on the past tense,
now that we're both fully retired old people.&lt;/p&gt;
&lt;p&gt;I have to confess that it's not easy describing high-tech work. There's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Happy birthday, mom. Glad to see you're still doing well, avoiding the
complications of COVID-19.&lt;/p&gt;
&lt;p&gt;You asked what it was I did for a living. Emphasis on the past tense,
now that we're both fully retired old people.&lt;/p&gt;
&lt;p&gt;I have to confess that it's not easy describing high-tech work. There's
a lot of jargon. Your varied range of careers included many things, one
of which was being a school librarian. The world has had libraries and
librarians for millennia. The job title is pretty well understood. The
world hasn't had electronic computers for very long, making the job of
programming them a relative novelty.&lt;/p&gt;
&lt;p&gt;Aids to computation include slide rules and other mechanical devices.
The idea of a mechanical computer dates from the 1830's. You can read
about the first computer programmer, Ada Lovelace, here:
&lt;a class="reference external" href="https://www.computerhistory.org/babbage/adalovelace/"&gt;https://www.computerhistory.org/babbage/adalovelace/&lt;/a&gt;. Proper electronic
digital computes didn't arise until the 40's, when you were a child.
ENIAC, for example dates from 1945.&lt;/p&gt;
&lt;p&gt;While a lot has changed since the ENIAC, there are a few universal
truths. I'm going to beat one of those truths like a dead horse because
it's both essential and obscured by layers of technology.&lt;/p&gt;
&lt;p&gt;This first and most fundamental truth is that a computer -- even
something as sophisticated as a laptop with a dozen open browser tabs,
zoom, and two different solitaire games -- is really a small device that
is patiently waiting for you to type or click; the software works out
some response and this is displayed on the screen or burbles out the
speakers (or both.)&lt;/p&gt;
&lt;p&gt;We can say that a general-purpose computer is &amp;quot;applied&amp;quot; to a specific
problem. We shorthand this into creating &amp;quot;Application Software;&amp;quot; the
software that applies the computer's hardware to a problem. And we
shorthand this into &amp;quot;Apps&amp;quot; or &amp;quot;Applications&amp;quot; that do useful things on a
general-purpose device.&lt;/p&gt;
&lt;p&gt;The distinction between software (things you download and change) and
hardware (the box on your desk) has become pretty common-place. The
details of the software are what we need to put under the magnifying
glass to look at closely.&lt;/p&gt;
&lt;p&gt;To make your computer more useful, clever engineers have worked out a
way to interleave activities from a variety of applications, all of
which are using your computer concurrently. There's a set of rules to
determine which application is in the &amp;quot;foreground&amp;quot;; this is the
application software that has access to keyboard, mouse, display, and
speakers. When you click on another window, you bring another
application to the foreground. Access to the hardware switches and the
display updates. It's very slick. They provide a number of visual cues
to show you which application's &amp;quot;window&amp;quot; is in the foreground; all the
others have different cues to show you they're in the background.&lt;/p&gt;
&lt;p&gt;What's important about this foreground/background concept is that each
application is -- from one point of view -- free to behave as if it is
in total control of the entire computer. In reality, an application
emphatically does not have unfettered control over the computing
resources; there are a large number of gates and fences forcing
applications into an orderly, and disciplined sharing and cooperation.&lt;/p&gt;
&lt;p&gt;You taught at a nursery school. You know how important an orderly set of
rules is. Applications are no different than unruly three- and four-year
olds: they try to grab snacks out of order. They forget how pants work
when they try to use the toilet. They need lessons in how to put their
coats on to go outside in the winter.&lt;/p&gt;
&lt;p&gt;These rules -- the set of policies and procedures that constrain
applications -- is collectively called the &amp;quot;Operating System.&amp;quot; (Don't
ask why, the computer folks borrow terms from other disciplines and
imbue them with new meanings. There's rarely a sensible etymology, just
conventional usage.) The idea of a &amp;quot;system&amp;quot; of components is essential.
There are a lot of layers of engineering in the OS.&lt;/p&gt;
&lt;p&gt;The presence of an operating system lets multiple apps cooperate. But,
it doesn't change the fundamental truth that originated with Babbage and
Lovelace and continued on through Turing and Von Neumann and others and
was handed down to me.&lt;/p&gt;
&lt;p&gt;The general-purpose computer is applied (&amp;quot;programmed&amp;quot;) to a problem;
it's set up to respond to inputs by displaying outputs.&lt;/p&gt;
&lt;div class="section" id="so-that-was-boring-what-did-you-do"&gt;
&lt;h2&gt;So that was boring. What did you do?&lt;/h2&gt;
&lt;p&gt;Good point. That was boring. But necessary, I think, to bracket the
nuanced difference between &amp;quot;computer&amp;quot; as a collection and an individual
application. The computer-as-collection includes a lot of software: an
OS plus applications. This is distinct from each individual application
that's part of the collection. It's all software, but the context shifts
from everything the computer is doing to one specific solitaire game.&lt;/p&gt;
&lt;p&gt;Above, I mentioned that the OS has layers. In a way it's like a quilt,
there's a backing, batting in the middle, and a complex quilt top made
from pieces. Most important is the quilting that holds the layers
together.&lt;/p&gt;
&lt;p&gt;In a way, it's also like a library. There's the foundational problem of
storing and loaning books. But there's a secondary problem of finding
the damn things; leading to Dewey or LC codes for topics so we can keep
related books together. And there's a third layer problem of having an
accurate index or catalog of all the books. Using small cards (the card
catalog) gives the library flexibility to make sure the catalog matches
the stacks. And there are related problems of loaning them out with some
reasonable promise to return them.&lt;/p&gt;
&lt;p&gt;I might even be able to work out an analogy with the Apple Orchard or
the Arboretum or the Summer Camp. But, I think you get my drift here,
that there are foundational elements that we can't really change, and we
build on those foundations to make the whole slightly easier for people
to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-get-it-you-built-application-software-what-did-you-do"&gt;
&lt;h2&gt;I get it, you built application software. What did you do?&lt;/h2&gt;
&lt;p&gt;What's important about concept of layers is how pervasive the layering
idea is in all of computing.&lt;/p&gt;
&lt;p&gt;Because of the potential complexity of a solution to a problem, we take
the &amp;quot;layering&amp;quot; idea one step further than simply decreeing there should
be layers.&lt;/p&gt;
&lt;p&gt;What we found, starting in the 70's, was that the operating system
tended to conceal many details of the underlying hardware. A modern
programming language also divorced us from details of the hardware.
Admiral Grace Murray Hopper's idea was to have an application that would
transform a program written in some neutral language into the language
of whatever hardware we had on hand. She pioneered the COBOL programming
language; the language was utterly unlike any specific piece of
hardware, and required a &amp;quot;compiler&amp;quot; application to translate COBOL
statements into a form that the OS could run as an application.&lt;/p&gt;
&lt;p&gt;We liked this idea: the underlying hardware became a kind of hazy
abstraction. We knew it was there, but between our languages, libraries
of pre-written software, our compilers, and the OS, we didn't really see
the underlying hardware. This lets us decompose a complex problem into a
number of smaller problems; giving us a lot of leverage.&lt;/p&gt;
&lt;p&gt;The core idea of &amp;quot;abstraction&amp;quot; leads to the idea of layers of
abstraction. Within our application software we can can also use this
idea of layers to decompose our solution to a problem. An application
layer can be quilted to a library layer that we bought or downloaded.
The library is -- independently -- quilted to an OS layer. And the whole
stack of layers is carefully stitched down to the underlying silicon
chip. Maybe it was a Motorola chip, or an Intel chip, or an AMD chip. We
didn't much know or care.&lt;/p&gt;
&lt;p&gt;Well. We cared a little. Some of the AMD chips were faster than some of
the Intel chips. So we would prefer to have our OS and our language
focused on those chips because things were faster. Until Intel jumped
ahead of AMD. The concept was to remain divorced from gritty details of
how the little fleck of silicon with its millions of transistors
actually worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recap"&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;Application software configures the general-purpose computer to a
specific task. Applications coexist via an operating system and reusable
libraries.&lt;/p&gt;
&lt;p&gt;Software (application, operating system, libraries) is created in layers
and provide abstractions to hide the details of underlying layers.&lt;/p&gt;
&lt;p&gt;My job?&lt;/p&gt;
&lt;p&gt;Design the layers. Get other programmers to understand the design for
the layers. Help them to create statements (&amp;quot;code&amp;quot;) using the language
of choice. (I'm a big fan of Python, but I've used many, many other
languages.)&lt;/p&gt;
&lt;p&gt;Note that I didn't (generally) design the visible quilt top in any
detail. My job was to help the visual designers and the user experience
(UX) designers create a top that delighted people using the software. I
made sure that the top and the layers underneath it all fit together
reasonably well for a sensible budget. Cutting and stitching all the
blocks was a specialized skill that I tried to avoid.&lt;/p&gt;
&lt;p&gt;I did more than design, however. When I say design of the structure, you
can imagine an architect or civil engineer looking over drawings of
girders and beams and making sure the floor would hold the weight of all
those books in the new wing of the library.&lt;/p&gt;
&lt;p&gt;While many software designers and architects do pour over drawings, I --
personally -- didn't like to leave it at the drawing stage. This was
probably a career-limiting choice, but I liked to get my hands dirty
actually digging holes and standing up cinderblocks in the foundation.
The idea of swinging a hammer to build components told me -- directly --
how good (or bad) my design was.&lt;/p&gt;
&lt;p&gt;There's a fork in the career path for programmers. Some software
architects work best with Keynote presentations to developers and
executives. They build understanding and consensus. They're trusted with
larger projects and larger budgets. If things didn't work out, they
could deflect blame to the folks writing the software. This distinction
between design and realization can be used to avoid culpability. It
worried me.&lt;/p&gt;
&lt;p&gt;Other architects (me, specifically) work best with code. I still needed
to build understanding and consensus. But I also built software so I
could be *sure* things worked. I liked to provide concrete, tangible,
&amp;quot;do it like this&amp;quot; code.&lt;/p&gt;
&lt;p&gt;To higher-level executives -- people with budget authority -- I was only
a low-level programmer.&lt;/p&gt;
&lt;p&gt;For decades, this meant a project would wind down after completion, and
I would leave the customer's location, and move on to a new project.
That's why I traveled a LOT.&lt;/p&gt;
&lt;p&gt;A few clients would come to realize that I did offer significant value
by being able to design the layers and abstractions while also helping
folks actually build the software. This recognition was a rarity, which
is why I call it a career-limiting choice. It happened a few times.
There's a particularly memorable offer from a client in the 90's that --
in retrospect -- I should have taken. But, generally, I moved from work
site to work site, designing, and building the application software for
very, very large computers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-you-went-to-meetings-a-lot"&gt;
&lt;h2&gt;So, you went to meetings a lot?&lt;/h2&gt;
&lt;p&gt;Precisely.&lt;/p&gt;
&lt;p&gt;At first, I needed to talk about the problem. What they want software to
do. Why do they think new, custom-built, unique software will solve the
problem they have? This means meeting with people to understand the
problem in the first place. &amp;quot;What can't you do?&amp;quot; &amp;quot;Why can't you do it?&amp;quot;
There's a lot of &amp;quot;Why?&amp;quot; questions that need to be asked to locate the
obstacle that's easiest to remove. (Or the lowest-hanging fruit we can
pick.)&lt;/p&gt;
&lt;p&gt;Then, we need to talk about the solution. How will we solve the problem
with computers and software? In some cases, they have departments that
aren't talking. Or they have legal obstacles. Or they have a half-wit
vice president in charge of being the owner's brother. Eventually, we
wind up at &amp;quot;aha. They have software that acts as a kind of 'custodian'
for their cloud-based resources, but the language of the rules for that
custodian are opaque.&amp;quot;&lt;/p&gt;
&lt;p&gt;(Seriously. A real problem. Very, very removed from reality: governance
of rented &amp;quot;cloud&amp;quot; resources. Enterprise policies for use of cloud
resources. Concrete rules for cleaning up the computers rented from a
cloud vendor. Mathematical foundations for those rules. Very. Abstract.
&lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Once we've got the preferred solution, we need to decompose it into
things we can download, and things we have to build. Ideally, we can
download most (or all) of it and move on. Realistically, the problem
domain is unique or something about the overall context and organization
is unique, and means leads to customized software to reflect the unique
situation.&lt;/p&gt;
&lt;p&gt;Before too long, we have meetings to review some pictures: some
contexts, some containers for application software, some components (or
I've called them &amp;quot;layers&amp;quot; above). This will lead to people writing some
code. (The 4 C's: Context, Container, Component, Code.)&lt;/p&gt;
&lt;p&gt;(Side-bar. The &amp;quot;container&amp;quot; is a generalization of the idea of a
computer. The OS lets multiple applications cooperate; what if we have
multiple OS's cooperating? This idea of layers of abstraction is so
compelling, we can apply it in a variety of places. This lets us to talk
about abstract containers instead of concrete computers.)&lt;/p&gt;
&lt;p&gt;We'll have daily meetings while we're building the code that populates
the components that gets installed into the containers that fills out
the context. These last 10 minutes. What we've done. What we're doing.&lt;/p&gt;
&lt;p&gt;We'll have meetings every two weeks to look at components and containers
and be sure they work. People will demo what they've done. It will be
fun. We'll have donuts.&lt;/p&gt;
&lt;p&gt;We'll have impromptu meetings to talk about how to write tests and do
quality assurance on our code and components. The testing and quality
checking became my obsession during the last five years of my career.
Answering the question &amp;quot;Did you test &lt;strong&gt;everything&lt;/strong&gt;?&amp;quot;&lt;/p&gt;
&lt;p&gt;We'll have meetings to talk about managing the containers to be sure
they're working. And how to integrate and deploy the components into the
containers.&lt;/p&gt;
&lt;p&gt;In and among the meetings, I wrote code. For the last ten years, it was
always in Python. Before that it was in other languages.&lt;/p&gt;
&lt;p&gt;So, that's what I did for a living. I went to meetings. I wrote code.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="C4model"></category><category term="Programming Languages"></category><category term="API Design"></category><category term="os"></category></entry><entry><title>SQL linting — this sounds cool</title><link href="https://slott56.github.io/2021_06_17-sql_linting_this_sounds_cool.html" rel="alternate"></link><published>2021-06-17T21:16:00-04:00</published><updated>2021-06-17T21:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-06-17:/2021_06_17-sql_linting_this_sounds_cool.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.pythonpodcast.com/sqlfluff-sql-linter-episode-318/"&gt;https://www.pythonpodcast.com/sqlfluff-sql-linter-episode-318/&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Real Math (symbolic math, like mathematicians do) and a spreadsheet-like feedback loop</title><link href="https://slott56.github.io/2021_06_01-real_math_symbolic_math_like_mathematicians_do_and_a_spreadsheet_like_feedback_loop.html" rel="alternate"></link><published>2021-06-01T08:00:00-04:00</published><updated>2021-06-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-06-01:/2021_06_01-real_math_symbolic_math_like_mathematicians_do_and_a_spreadsheet_like_feedback_loop.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/replacing-a-spreadsheet/"&gt;https://slott56.github.io/replacing-a-spreadsheet/&lt;/a&gt;. This document is
really exciting (to me).&lt;/p&gt;
&lt;p&gt;This is still shaky -- I'm still learning -- but it's a very cool
combination of Python components
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; and &lt;a class="reference external" href="https://jupyterlab.readthedocs.io/en/stable/"&gt;Jupyter
Lab&lt;/a&gt;. As a bonus,
&lt;a class="reference external" href="https://jupyterbook.org/intro.html"&gt;Jupyter{Book}&lt;/a&gt; appeals to me as
a writer. There's an aspect of literate programing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/replacing-a-spreadsheet/"&gt;https://slott56.github.io/replacing-a-spreadsheet/&lt;/a&gt;. This document is
really exciting (to me).&lt;/p&gt;
&lt;p&gt;This is still shaky -- I'm still learning -- but it's a very cool
combination of Python components
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; and &lt;a class="reference external" href="https://jupyterlab.readthedocs.io/en/stable/"&gt;Jupyter
Lab&lt;/a&gt;. As a bonus,
&lt;a class="reference external" href="https://jupyterbook.org/intro.html"&gt;Jupyter{Book}&lt;/a&gt; appeals to me as
a writer. There's an aspect of literate programing in this that is also
very appealing.&lt;/p&gt;
&lt;p&gt;The core is this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I have a problem that involves complex math. Well, it's complex to
me. It involves integrals, so there's a lot of space for confusion.&lt;/li&gt;
&lt;li&gt;This is applied math, and I want to plug in numbers and get answers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In effect, I want a spreadsheet.&lt;/p&gt;
&lt;p&gt;I don't want rows-and-columns. I do want cells, though, that's a nice
organizing principle.&lt;/p&gt;
&lt;p&gt;I don't want the goofy little formulas in a spreadsheet. I want real
Python code.&lt;/p&gt;
&lt;p&gt;I want the spreadsheet-like feature of computations that depend on
inputs and are re-run when the inputs change. This has been the core
value proposition for spreadsheets since the days of VisiCalc. It's a
great UX in general. We just need to get past the rows-and-columns.&lt;/p&gt;
&lt;p&gt;The problem with most spreadsheet apps is the limited capability for
more serious math.&lt;/p&gt;
&lt;p&gt;Which is why the sympy + Jupyter Lab was a blinding revelation to me.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="jupyter lab"></category><category term="spreadsheet"></category><category term="sympy"></category></entry><entry><title>Python's Protocol Annotation vs. Duck Typing</title><link href="https://slott56.github.io/2021_05_25-pythons_protocol_annotation_vs_duck_typing.html" rel="alternate"></link><published>2021-05-25T08:00:00-04:00</published><updated>2021-05-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-05-25:/2021_05_25-pythons_protocol_annotation_vs_duck_typing.html</id><summary type="html">&lt;p&gt;Let's talk about profound confusion.&lt;/p&gt;
&lt;p&gt;I got an email with a subject of this, &amp;quot;Python's Protocol Reduces
Reliance on Duck Typing&amp;quot;. The resulting conversation led to this nugget:
&amp;quot;... my current project could use protocols in Python, and thus I didn't
need to rely on duck typing and instead could use …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's talk about profound confusion.&lt;/p&gt;
&lt;p&gt;I got an email with a subject of this, &amp;quot;Python's Protocol Reduces
Reliance on Duck Typing&amp;quot;. The resulting conversation led to this nugget:
&amp;quot;... my current project could use protocols in Python, and thus I didn't
need to rely on duck typing and instead could use that as my type.&amp;quot;&lt;/p&gt;
&lt;p&gt;I'm unclear on what &amp;quot;reliance&amp;quot; really meant here.&lt;/p&gt;
&lt;p&gt;Python depends (heavily) on duck typing. Because type annotations are
optional, this cannot change. It's unlikely to ever change.&lt;/p&gt;
&lt;p&gt;Here's the bottom line: Duck Typing Won't Go Away.&lt;/p&gt;
&lt;p&gt;Indeed, there's more: Duck Typing Isn't Bad.&lt;/p&gt;
&lt;p&gt;Python doesn't &amp;quot;rely&amp;quot; on the type annotations. They're a bonus feature
to make sure you aren't lying about the types and how they're used.&lt;/p&gt;
&lt;p&gt;Protocols are how duck typing works. When we leverage duck typing among
classes, we're implicitly relying on the classes all supporting a common
protocol. Numbers, for example, implement a ton of methods; this
collection of common methods (e.g., &lt;tt class="docutils literal"&gt;__add__()&lt;/tt&gt;, etc.) define a
protocol.&lt;/p&gt;
&lt;p&gt;With mypy, we can create our own distinct protocols as named types.&lt;/p&gt;
&lt;p&gt;I don't get the &amp;quot;reducing reliance&amp;quot; business when protocols make duck
typing work. And. Sadly. I couldn't figure out where the confusion
arose.&lt;/p&gt;
&lt;div class="section" id="follow-up"&gt;
&lt;h2&gt;Follow-up&lt;/h2&gt;
&lt;p&gt;I asked for clarification and got nothing useful in response. The person
sending the email seemed to be working from a summary of another
conversation, or something. I couldn't figure it out.&lt;/p&gt;
&lt;p&gt;I can try to assume they used to have this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Something:
    def useful_method(self, x: str) -&amp;gt; int:
        # whatever

class CloselyRelated:
    def useful_method(self, x: str) -&amp;gt; int:
        # another polymorphic thing

Polymorphic = Union[Something, CloselyRelated]

# many classes and functions relying on Polymorphic
&lt;/pre&gt;
&lt;p&gt;And they've realized that there may be a better way.&lt;/p&gt;
&lt;p&gt;But. I haven't really got much to go on.&lt;/p&gt;
&lt;p&gt;The better approach often involves something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Polymorphic(Protocol):
    def useful_method(self, x: str) -&amp;gt; int:
        ...
&lt;/pre&gt;
&lt;p&gt;We can define a protocol to help locate the essential features of a
parameter or a result type.&lt;/p&gt;
&lt;p&gt;But. I don't really know what was going on.&lt;/p&gt;
&lt;p&gt;And I couldn't figure out why the word &amp;quot;Reliance&amp;quot; was used.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="duck typing"></category><category term="protocols"></category><category term="annotations"></category><category term="type hints"></category></entry><entry><title>OpenMarine and Signal-K</title><link href="https://slott56.github.io/2021_04_20-openmarine_and_signal_k.html" rel="alternate"></link><published>2021-04-20T08:00:00-04:00</published><updated>2021-04-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-04-20:/2021_04_20-openmarine_and_signal_k.html</id><summary type="html">&lt;p&gt;I heard about these less than a week ago.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openmarine.net/openplotter"&gt;https://openmarine.net/openplotter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openplotter/pypilot"&gt;https://github.com/openplotter/pypilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://signalk.org/installation.html"&gt;https://signalk.org/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is very interesting. Very interesting.&lt;/p&gt;
&lt;p&gt;I have a partially complete IoT anchor alarm.&lt;/p&gt;
&lt;p&gt;The idea of leveraging the boat's other devices through a Signal-K
interface is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I heard about these less than a week ago.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openmarine.net/openplotter"&gt;https://openmarine.net/openplotter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openplotter/pypilot"&gt;https://github.com/openplotter/pypilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://signalk.org/installation.html"&gt;https://signalk.org/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is very interesting. Very interesting.&lt;/p&gt;
&lt;p&gt;I have a partially complete IoT anchor alarm.&lt;/p&gt;
&lt;p&gt;The idea of leveraging the boat's other devices through a Signal-K
interface is appealing.&lt;/p&gt;
&lt;p&gt;The problem is, I don't want the power draw.&lt;/p&gt;
&lt;p&gt;I think I want to continue on the path of a small, thrifty, stand-alone
device that can be used when the rest of the boat's systems are mostly
shut down.&lt;/p&gt;
&lt;p&gt;However. Seeing these projects causes me to rethink my use of Arduino
and C++. While the Arduino is the thriftiest possible device -- the
power consumption is negligible -- I think that a small upgrade to a
Python-based device might make the software a tiny bit simpler.&lt;/p&gt;
&lt;p&gt;An Arduino Uno, specifically, is just barely capable of the UX I was
hoping to build. The two-line LCD with a &amp;quot;mark&amp;quot; push-button, an &amp;quot;anchor
circle&amp;quot; knob, and a &amp;quot;display page&amp;quot; button is right at the limit; I'm
using analog inputs instead of digital for the buttons.&lt;/p&gt;
&lt;p&gt;A Raspberry Pi can support more sophisticated displays, at some cost in
power consumption. An e-ink display might be a better choice than the
two-line LCD because -- well -- anchoring details change slowly.  Once
you've drifted too far (or have a consistent COG away from the marked
point with a steadily growing distance) then the alarm sounds and the
display is more-or-less irrelevant. You're going to get up, and eyeball
the situation to see what's going on. Wether or not the display updates
doesn't matter much.&lt;/p&gt;
&lt;p&gt;We haven't drifted very often, so I don't have too much data.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Once we slid to a new position. It was a stormy, blowy day. We eased
out more scope. And we never moved again. We stood on deck, taking
visual bearings. An e-ink display of the details wasn't what we
depended on.&lt;/li&gt;
&lt;li&gt;We used to rely on an iPhone app to monitor our position. (We've
switched to using SafeAnchor, we used to use an older app, no longer
available.) We were moving slowly, but steadily. It was during a
hurricane, we weren't surprised. We started the engine, raised the
anchor and motored to a new place to reset. Again, we weren't using
the display on the phone, we were looking at Pungo creek.&lt;/li&gt;
&lt;li&gt;And once we were not on the boat when she moved. That would have been
awkward for our neighbors. So. We'd need to have a &amp;quot;reset the anchor
alarm&amp;quot; switch in the cockpit. This would mark a new position. Fatty
Goodlander's advice is to leave a big sign with a string showing them
where it is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A full 1.0 knot of speed is 1.7 feet per second. We often have 50 feet
of line, meaning any movement under 100' is likely ordinary boat motion.
That means 30 seconds until we're suspicious of a problem, and a full
minute before we must sound the alarm. (In the middle, a constant COG
and increasing distance is a leading indicator of trouble; alarm chirps
might be helpful.)&lt;/p&gt;
&lt;p&gt;As intermediate data gathering format, the Signal-K data stream is
appealing. It steps away from the NMEA GPS talker messages. It's
heavy-going for an Arduino Uno. But. Might work out well on something a
little bigger.&lt;/p&gt;
</content><category term="Technologies"></category><category term="arduino"></category><category term="#python"></category><category term="CircuitPlayground"></category><category term="boat"></category><category term="IoT"></category><category term="RaspberryPi"></category></entry><entry><title>A 5-point framework for Python performance management</title><link href="https://slott56.github.io/2021_04_06-a_5_point_framework_for_python_performance_management.html" rel="alternate"></link><published>2021-04-06T08:00:00-04:00</published><updated>2021-04-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-04-06:/2021_04_06-a_5_point_framework_for_python_performance_management.html</id><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/capital-one-tech/a-5-point-framework-for-python-performance-management-5af2be5739d9"&gt;A 5-Point Framework For Python Performance
Management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems straight-forward to me. Have goals. Measure your ability to
meet them.&lt;/p&gt;
&lt;p&gt;I don't see too many teams doing this, though.&lt;/p&gt;
&lt;p&gt;I could be wrong, but, I think performance is left to arguments and
complaints, not solid engineering.&lt;/p&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="#python"></category></entry><entry><title>Recommended Books</title><link href="https://slott56.github.io/2021_03_19-recommended_books.html" rel="alternate"></link><published>2021-03-19T07:33:00-04:00</published><updated>2021-03-19T07:33:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-03-19:/2021_03_19-recommended_books.html</id><summary type="html">&lt;p&gt;I get asked about good books for beginners. Here's an example:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;What Python books do you recommend for novices so they can learn
from beginner to advanced?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;For me, this is nearly impossible to answer.&lt;/p&gt;
&lt;p&gt;&amp;quot;Beginner&amp;quot; is often undefined. I have to turn this around and ask what
you already …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I get asked about good books for beginners. Here's an example:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;What Python books do you recommend for novices so they can learn
from beginner to advanced?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;For me, this is nearly impossible to answer.&lt;/p&gt;
&lt;p&gt;&amp;quot;Beginner&amp;quot; is often undefined. I have to turn this around and ask what
you already know about -- well-- everything. Computing. Programming.
Languages. etc. etc.&lt;/p&gt;
&lt;p&gt;&amp;quot;Advanced&amp;quot; similarly is undefined. Most folks have areas they're
interested in. Machine Learning. IoT. Security. Cloud Engineering.
Graphics. Games. Sound. etc. et yet even more ceteras.&lt;/p&gt;
&lt;p&gt;And -- even more fascinating to me -- where are you on that journey?
What have you done so far?&lt;/p&gt;
&lt;p&gt;I'm am (overly) sensitive to being a Personal Search Concierge, PSC™.&lt;/p&gt;
&lt;p&gt;I know people who (actually) cannot make Google work. Seriously. Utterly
unable to use it. I believe that they are incapable of reframing their
question with synonyms, but instead insist on typing a single thing into
the search bar, and if the first promoted response in the list of
advertisements doesn't literally answer their question, they email me.&lt;/p&gt;
&lt;p&gt;This leads me to a stammering stupidity when asked about Python books.&lt;/p&gt;
&lt;p&gt;Yes, I'm an author. Yes, I read other books. But no, I don't think I can
answer your question.&lt;/p&gt;
&lt;p&gt;One possible non-answer: &lt;a class="reference external" href="https://realpython.com/best-python-books/"&gt;https://realpython.com/best-python-books/&lt;/a&gt;.
Start here.&lt;/p&gt;
&lt;div class="section" id="what-does-advanced-mean"&gt;
&lt;h2&gt;What does &amp;quot;advanced&amp;quot; mean?&lt;/h2&gt;
&lt;p&gt;Most of the Python experts I know are experts at applying Python to a
problem domain. In rare cases, the problem domain is Python itself, but
even then, the focus often narrows to a specific package in the standard
library, or an aspect of the run-time.&lt;/p&gt;
&lt;p&gt;In the process of solving problems with Python, most people tend to
learn a fair amount of the language. I work with folks who are fabulous
problem-solvers but who'll sometimes be surprised by a Python feature
that's outside their already broad experience.&lt;/p&gt;
&lt;p&gt;What's central here is that they're apply Python &lt;strong&gt;to&lt;/strong&gt; something. The
thing that seems to distinguish novices from experts is the pursuit of a
solution to a problem, and learning Python as part of solving the
problem.&lt;/p&gt;
&lt;p&gt;It's essential, then, to have a problem about which one is passionate.
Given a problem, and passion to solve that problem, expertise will grow.&lt;/p&gt;
&lt;p&gt;So that's my other possible non-answer: find a problem you're passionate
about and apply Python to solving it.&lt;/p&gt;
&lt;p&gt;And yes, that's not a book. Books can help with understanding the
problem or working out a solution in Python. Rarely does one book do
both.&lt;/p&gt;
&lt;p&gt;A good friend of mine's Python expertise comes from arranging the
metadata in thousands of photographs on his computer. Apple's photos app
has gone through numerous changes, and his photo library had become a
jumble of obsolete folders, no longer supported by the current app. So
they mastered Python and Apple's scripting tools, and Photos, and Mac OS
X to arrange their photos.&lt;/p&gt;
&lt;p&gt;There are many Civic Tech organizations like the &lt;a class="reference external" href="https://www.codeforamerica.org/events/brigade-congress-2020"&gt;Code for
America&lt;/a&gt;
where you can confront large, complex problems, and build tech skills
while helping solve a real-world problem.&lt;/p&gt;
&lt;p&gt;Another possible
non-answer: &lt;a class="reference external" href="https://www.govwebworks.com/2018/12/03/investigating-the-civic-tech-movement/"&gt;https://www.govwebworks.com/2018/12/03/investigating-the-civic-tech-movement/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everyone's journey is unique.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="tutorial"></category></entry><entry><title>The "The reader won't know what that means" Comment</title><link href="https://slott56.github.io/2021_02_16-the_the_reader_wont_know_what_that_means_comment.html" rel="alternate"></link><published>2021-02-16T08:00:00-05:00</published><updated>2021-02-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-02-16:/2021_02_16-the_the_reader_wont_know_what_that_means_comment.html</id><summary type="html">&lt;p&gt;I have to admit, it's very difficult to respond to this comment. I have
to fight down the urge to say things like &amp;quot;The Reader is not an idiot,&amp;quot;
or &amp;quot;At some point, we have to assume they've seen a computer before.&amp;quot;&lt;/p&gt;
&lt;p&gt;AFAIK there's little or no useful data data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have to admit, it's very difficult to respond to this comment. I have
to fight down the urge to say things like &amp;quot;The Reader is not an idiot,&amp;quot;
or &amp;quot;At some point, we have to assume they've seen a computer before.&amp;quot;&lt;/p&gt;
&lt;p&gt;AFAIK there's little or no useful data data on how much background
people buying technical books have.&lt;/p&gt;
&lt;p&gt;Subjectively, it seems like folks who leave the most comments -- the
noisy few -- seem to balk at chapter 1 things, write a bad review or
blog post and move on.&lt;/p&gt;
&lt;p&gt;It appears they expect to see chapter 1 reinforce their impressions of
their own skills and present the things they -- individually -- don't
yet know but tend to suspect. It needs to involve minimal surprises, and
no forward references to later chapters.&lt;/p&gt;
&lt;p&gt;I wish I could write like that.&lt;/p&gt;
&lt;p&gt;But I can't write like that. I feel the need to assume that some readers
actually do know some things and want the forward references so they can
skip around.&lt;/p&gt;
&lt;p&gt;I feel the need to assume readers have seen another programming language
and have worked through a tutorial or two.&lt;/p&gt;
&lt;p&gt;I may be wrong. It may be true that most readers buy exactly one book
and expect this to be an introduction to computers, languages, and
computer science. If so, I need to learn how to cater to their needs.&lt;/p&gt;
&lt;p&gt;I may be right. People may have background in at least one language and
buy multiple books. If so, I don't think &amp;quot;the reader won't know what
that means&amp;quot; is really a helpful comment.&lt;/p&gt;
&lt;p&gt;For some technical concepts, I like to rely on inductive definitions.
Rather than fussy formalisms, I think it's helpful to use concrete
examples. If there are weird edge cases or seeming contradictions, a
fussy definition may be helpful, but not as a starting point. The
comment &amp;quot;the reader won't know what that means&amp;quot; prior to the first
example is a teeth-grinding thing. Yes. They won't know. That's why the
rest of the paragraph is an example so the reader will know what it
means.&lt;/p&gt;
&lt;p&gt;The good news is the reviewers are reading very closely and splitting
each hair. I am eternally grateful for the opportunity to grind my teeth
in exasperation.&lt;/p&gt;
</content><category term="Technologies"></category><category term="writing"></category></entry><entry><title>The Awkwardness of Fundamental Definitions</title><link href="https://slott56.github.io/2021_02_13-the_awkwardness_of_fundamental_definitions.html" rel="alternate"></link><published>2021-02-13T13:45:00-05:00</published><updated>2021-02-13T13:45:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-02-13:/2021_02_13-the_awkwardness_of_fundamental_definitions.html</id><summary type="html">&lt;p&gt;A pragmatic description of a language (like Python) from axiomatic -- or
really axiom-like -- foundations is exasperatingly hard. I don't think I
have any answers, but I sure do have a lot of challenges. I think
there's a path that involves a lot of &amp;quot;don't look down -- just edge
along the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A pragmatic description of a language (like Python) from axiomatic -- or
really axiom-like -- foundations is exasperatingly hard. I don't think I
have any answers, but I sure do have a lot of challenges. I think
there's a path that involves a lot of &amp;quot;don't look down -- just edge
along the face of this cliff a few more feet and it's going to be okay.&amp;quot;&lt;/p&gt;
&lt;p&gt;The actual language foundations, and a more useful conceptual foundation
don't always match up.&lt;/p&gt;
&lt;p&gt;My specific example is trying to use a subset of Python to get started
with.&lt;/p&gt;
&lt;p&gt;One of the reasons we write software is to see useful results. So you
need output, i.e., the &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; function. On the other end of this,
you might want to accept inputs. But. But... You could finesse that by
simply assigning literal values instead of reading something.&lt;/p&gt;
&lt;p&gt;This leads to the print() function and expressions as a kind of minimal
language to see the essence of programming. (I know this isn't an
original thought. I'm setting up the conflict.)&lt;/p&gt;
&lt;p&gt;Do we explain functions in general when we're explaining this subset of
Python? Or do we stick with arithmetic?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print(&amp;quot;Hello, world!&amp;quot;)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
print(&amp;quot;355/113=&amp;quot;, 355/113)
&lt;/pre&gt;
&lt;p&gt;Maybe the F-string?  Assignment? Or do we really need assignment?
(Spoiler alert, no.)&lt;/p&gt;
&lt;p&gt;What about other functions? Python has a bunch of built-ins. The math
and random modules let us build small games without much intellectual
overhead.&lt;/p&gt;
&lt;p&gt;And how much can we explain about functions? The whole mathematical
notion of function as mapping from domain to range: does that count? Or
nah? What about Python's flexible argument and parameter handling?&lt;/p&gt;
&lt;p&gt;Exceptions? Do we have to explain them? Or do we shrug at division by
zero and kind of ignore it? If we talk about exceptions, do we have to
talk about stack frames and tracebacks?&lt;/p&gt;
&lt;p&gt;At the foundation, a language is variable bindings and function
evaluation. But. Do you explain any of that? And if so, how?&lt;/p&gt;
&lt;p&gt;The additional complication is multiple authors, technical reviews,
editors, and everyone else involved. There's a complex web of varying
opinions on what's foundational and how much explanation is required.
It's new to one person, so it should be up font. But, a lot of up-front
material is boring. Everything in programming involves a tricky nuance
somewhere; how much of that nuance is relevant now and how much is later
and how much is digressive?&lt;/p&gt;
&lt;div class="section" id="trust"&gt;
&lt;h2&gt;Trust&lt;/h2&gt;
&lt;p&gt;To an extent, there's a trust relationship between writer and reader. It
may help to build this if the writer can provide a &amp;quot;trust me on this,&amp;quot;
scenario that (eventually) results in a more complete explanation. The
logical conclusion here is that there's no place in the book for &amp;quot;too
advanced, buy my next book.&amp;quot; Instead, every difficult and nuanced thing
would need to (eventually) be explained. That seems impossible, though.&lt;/p&gt;
&lt;p&gt;With editors, co-authors, and reviewers, the trust relationship is
exactly wrong. Everything needs to be challenged and clarified.&lt;/p&gt;
&lt;p&gt;tl;dr Writing is sometimes hard. And that's the expectation. It's a
narrow fairway surrounded by shoals.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="writing"></category></entry><entry><title>Diagrams and UML notation</title><link href="https://slott56.github.io/2021_01_05-diagrams_and_uml_notation.html" rel="alternate"></link><published>2021-01-05T08:00:00-05:00</published><updated>2021-01-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-01-05:/2021_01_05-diagrams_and_uml_notation.html</id><summary type="html">&lt;p&gt;When I started in this business I was given a flowcharting template.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://americanhistory.si.edu/collections/object-groups/flowcharting-templates"&gt;https://americanhistory.si.edu/collections/object-groups/flowcharting-templates&lt;/a&gt;.
I'm pretty sure I had one of
these: &lt;a class="reference external" href="https://americanhistory.si.edu/collections/search/object/nmah_690078"&gt;https://americanhistory.si.edu/collections/search/object/nmah_690078&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since then, things have changed a little.&lt;/p&gt;
&lt;p&gt;I fondly recall using the Rational Rose …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I started in this business I was given a flowcharting template.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://americanhistory.si.edu/collections/object-groups/flowcharting-templates"&gt;https://americanhistory.si.edu/collections/object-groups/flowcharting-templates&lt;/a&gt;.
I'm pretty sure I had one of
these: &lt;a class="reference external" href="https://americanhistory.si.edu/collections/search/object/nmah_690078"&gt;https://americanhistory.si.edu/collections/search/object/nmah_690078&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since then, things have changed a little.&lt;/p&gt;
&lt;p&gt;I fondly recall using the Rational Rose (and an earlier tool that did
Rumbaugh OMT diagrams) to create object models.&lt;/p&gt;
&lt;p&gt;But these were expensive.&lt;/p&gt;
&lt;p&gt;After much searching, I found &lt;strong&gt;ArgoUML&lt;/strong&gt;. This was my go-to-diagrammer
of choice for many years. It's available
here: &lt;a class="reference external" href="https://argouml-tigris-org.github.io"&gt;https://argouml-tigris-org.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, I wound up using &lt;strong&gt;yuml&lt;/strong&gt;
at &lt;a class="reference external" href="https://yuml.me/diagram/scruffy/class/draw"&gt;https://yuml.me/diagram/scruffy/class/draw&lt;/a&gt;. This was very nice
because there was a source text version of the diagram. It was a
high-level code-like description that would lead to a handy picture you
could include in documentation.&lt;/p&gt;
&lt;p&gt;Heavenly.&lt;/p&gt;
&lt;p&gt;Recently, I spent time using &lt;strong&gt;draw.io&lt;/strong&gt;. Start here &lt;a class="reference external" href="https://draw.io"&gt;https://draw.io&lt;/a&gt;.
You have plain-text source version of the diagram that's Git-friendly. I
liked that. It has a lot of UML features, which is very nice, also.&lt;/p&gt;
&lt;p&gt;But now.&lt;/p&gt;
&lt;p&gt;I'm using &lt;strong&gt;plantUML&lt;/strong&gt;, and I think it's pretty
handy. &lt;a class="reference external" href="https://plantuml.com"&gt;https://plantuml.com&lt;/a&gt;. It's a big-old JAR file that converts text
to a diagram. There's no GUI component to this. You describe the image
in a source-code like way. Run it through the tool, and you get a
picture you can paste into documentation. Like yuml, it has an
easy-to-understand high-level text description. I strongly suspect I
could walk a Python AST and emit plantUML source as an intermediate
language from which pictures can be created.&lt;/p&gt;
&lt;p&gt;The Python-Markup tool (&lt;a class="reference external" href="https://python-markdown.github.io/extensions/"&gt;https://python-markdown.github.io/extensions/&lt;/a&gt;)
has a third-party PlantUML plug-in. PyCharm can leverage this to draw
while you're editing in the markdown window.&lt;/p&gt;
&lt;div class="section" id="the-fiddly-bits"&gt;
&lt;h2&gt;The Fiddly Bits&lt;/h2&gt;
&lt;p&gt;It's a little fiddly to get all the parts organized properly, but, it
really, really does work. You can write technical documentation, with
pictures.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add the Markdown tool to PyCharm.&lt;/li&gt;
&lt;li&gt;In the preferences for the PyCharm Markdown tool, install and enable
PlantUML.&lt;/li&gt;
&lt;li&gt;You can usually use &lt;strong&gt;conda&lt;/strong&gt; to install &lt;strong&gt;graphviz&lt;/strong&gt; as well as
installing the &lt;strong&gt;plantuml-markdown&lt;/strong&gt; tools. You can manually run the
&lt;strong&gt;markdown_py&lt;/strong&gt; application to create the HTML copies of the .md
files.&lt;/li&gt;
&lt;li&gt;Update your OS environment settings to set the
&lt;strong&gt;GRAPHVIZ_DOT&lt;/strong&gt; environment variable to name the conda virtual
environment where &lt;strong&gt;graphviz&lt;/strong&gt; was installed. For macOS and Linux
users update the &lt;strong&gt;~/.zshrc&lt;/strong&gt; (or &lt;strong&gt;~/.bashrc&lt;/strong&gt;) file, depending on
which shell is in use. Windows users have my heartfelt sympathy;
maybe set the system environment variables.&lt;/li&gt;
&lt;li&gt;You may also need to create a &lt;strong&gt;plantuml&lt;/strong&gt; shell script that's on
your &lt;strong&gt;PATH&lt;/strong&gt;. I put it in &lt;strong&gt;/usr/local/bin&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/mikitex70/plantuml-markdown"&gt;https://github.com/mikitex70/plantuml-markdown&lt;/a&gt; for details on
installation.&lt;/p&gt;
&lt;p&gt;After all this fussing around, it worked delightfully. I'm a convert to
PlantUML.&lt;/p&gt;
&lt;p&gt;I suggest the following in each diagram.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
skinparam monochrome true
skinparam handwritten false
skinparam shadowing false
hide class circle
&lt;/pre&gt;
&lt;p&gt;You may want to set a more global configuration, but I sometimes want to
change the handwritten parameter to true for &amp;quot;draft&amp;quot; diagrams, separate
from final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;You can integrate plantUML with PyCharm to draw pictures while you're
editing in the markdown window.&lt;/p&gt;
&lt;p&gt;You do have to trust plantUML to draw more-or-less what you want. There
are limits, and if you don't like what plantUML is doing, switch to
draw.io. If you are flexible, however, it's really, really good.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="plantuml"></category><category term="UML"></category></entry><entry><title>Inelegant Python</title><link href="https://slott56.github.io/2020_12_16-inelegant_python.html" rel="alternate"></link><published>2020-12-16T08:54:00-05:00</published><updated>2020-12-16T08:54:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-12-16:/2020_12_16-inelegant_python.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/"&gt;https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/&lt;/a&gt;
This seems to be a popular coding interview problem.&lt;/p&gt;
&lt;p&gt;The Python code shown on the site seems almost maliciously misleading.&lt;/p&gt;
&lt;p&gt;The full problem is this:&lt;/p&gt;
&lt;blockquote&gt;
You are given an unsorted array with both positive and negative
elements. You have to find the smallest positive …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/"&gt;https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/&lt;/a&gt;
This seems to be a popular coding interview problem.&lt;/p&gt;
&lt;p&gt;The Python code shown on the site seems almost maliciously misleading.&lt;/p&gt;
&lt;p&gt;The full problem is this:&lt;/p&gt;
&lt;blockquote&gt;
You are given an unsorted array with both positive and negative
elements. You have to find the smallest positive number missing from
the array in O(n) time using constant extra space. You can modify the
original array.&lt;/blockquote&gt;
&lt;p&gt;Here's a common-enough Python solution.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def smallest_missing_1(x):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_1([2, 3, 7, 6, 8, -1, -10, 15])
    1
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_1([2, 3, -7, 6, 8, 1, -10, 15])
    4
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_1([1, 1, 0, -1, -2])
    2
    &amp;quot;&amp;quot;&amp;quot;
    try:
        return min(set(range(1, max(x)+2))-set(x))
    except ValueError as ex:
        # min() arg is an empty sequence
        return 1
&lt;/pre&gt;
&lt;p&gt;Some folks don't like the try/except to detect the edge case of all
negative values. If  max(x) &amp;lt;= 0, then the exception will be raised, and
we could use an if statement for a LBYL solution.&lt;/p&gt;
&lt;p&gt;What's more important is this solution violates the constant extra space
constraint. It builds two sets, which isn't a simple constant size
object; it depends on the size of the input object.&lt;/p&gt;
&lt;p&gt;To avoid the sets, we'll use a generator.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def smallest_missing_2(x):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_2([2, 3, 7, 6, 8, -1, -10, 15])
    1
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_2([2, 3, -7, 6, 8, 1, -10, 15])
    4
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_2([1, 1, 0, -1, -2])
    2
    &amp;quot;&amp;quot;&amp;quot;
    try:
        return next(n for n in range(1, max(x)+2) if n not in x)
    except StopIteration as ex:
        # next() found an empty sequence
        return 1
&lt;/pre&gt;
&lt;p&gt;This violates the &lt;strong&gt;O&lt;/strong&gt;(&lt;em&gt;n&lt;/em&gt;) constraint with the repeated use of the
&lt;strong&gt;in&lt;/strong&gt; operator.&lt;/p&gt;
&lt;p&gt;To get to &lt;strong&gt;O&lt;/strong&gt;(&lt;em&gt;n&lt;/em&gt;) and no extra storage, we're forced to (a) demand
the input is a mutable list, so we can (b) reuse the input list object
to track which numbers are present and which are absent. This reuse of a
mutable list is atypical for Python programming. Indeed, it seems like a
bad idea.&lt;/p&gt;
&lt;p&gt;Consistent with the spirit of the problem, we're constrained to making
arithmetic changes to the values in the original list, x, to track the
state of the computation. The idea is that the value x[i] will have
*both* an original input value, and the presence (or absence) of some
value, p+i, in the sequence.&lt;/p&gt;
&lt;p&gt;One traditional approach is to use the sign as a way to carry this extra
bit of information. That's why negative numbers are thrown in to the
input data. They make the sign business super confusing. Also. That's
why zero is excluded. Conventional integer math doesn't have a negative
zero, confounding the problem with array slots that have numbers that
make sign processing icky.&lt;/p&gt;
&lt;p&gt;I'm not a fan of using the sign for this. I'd prefer to use Least
Significant Bits (LSB's) because we have a fairly large number of
available LSB's. And. We can trivially ignore zero values and their
habit of not having useful signs. Unless the list has 2**62 elements, a
little shifting won't hurt any.&lt;/p&gt;
&lt;p&gt;Here's a solution that would *rarely* be used in normal Python work.
Maybe on a Circuit Playground Express MicroPython. But not anywhere
else.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import List

def smallest_missing_3(x: List[int]) -&amp;gt; int:
    &amp;quot;&amp;quot;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_3([2, 3, 7, 6, 8, -1, -10, 15])
    1
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_3([2, 3, -7, 6, 8, 1, -10, 15])
    4
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_3([1, 1, 0, -1, -2])
    2
    &amp;quot;&amp;quot;&amp;quot;
    # Purge negative numbers. Scale the other numbers.
    for i in range(len(x)):
        if x[i] &amp;lt; 0:
            x[i] = 0
        else:
            x[i] = x[i] &amp;lt;&amp;lt; 1
    # Set LSB on positions which are filled; ignoring None values.
    # This can raise an index out-of-bounds exception, which we silence.
    for v in filter(None, (scaled &amp;gt;&amp;gt; 1 for scaled in x)):
        try:
            x[v-1] = x[v-1] | 1
        except IndexError:
            pass
    # Find first value with LSB not set.
    for i in range(len(x)):
        if x[i] &amp;amp; 1 == 0:
            return i+1
&lt;/pre&gt;
&lt;p&gt;This is pretty atypical Python code. I'm kind of shocked folks would use
something like this as an interview question. It's rather complex and
requires some very old-school programming tricks to make the whole thing
remotely palatable.&lt;/p&gt;
&lt;p&gt;The index out-of-bounds is particularly nasty. It means there's a
number, n, that's greater than len(x). This is worrisome, but, it also
means any gap MUST be less than this large number n. For this reason, we
can silence array index errors.&lt;/p&gt;
&lt;p&gt;I would not be able to simply stand up in a conference room and solve
this without some additional direction. The &amp;quot;making arithmetic changes
to the values in the original list&amp;quot; secret is something I knew about and
did -- when I was younger -- but I haven't done that kind of thing in
decades.&lt;/p&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="#python"></category></entry><entry><title>Mind the Gap -- mypy's slight lag behind Python 3.9</title><link href="https://slott56.github.io/2020_11_10-mind_the_gap_mypys_slight_lag_behind_python_39.html" rel="alternate"></link><published>2020-11-10T08:00:00-05:00</published><updated>2020-11-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-11-10:/2020_11_10-mind_the_gap_mypys_slight_lag_behind_python_39.html</id><summary type="html">&lt;p&gt;Working on a new book. Fun stuff. It's going to cover Python 3.9.&lt;/p&gt;
&lt;p&gt;I'm adding the type hints material. And that means &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585/#forward-compatibility"&gt;PEP
585&lt;/a&gt;.
Which means type hints for generics can use the generic types. We can
use list[int] instead of List[int] and avoid from typing import …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working on a new book. Fun stuff. It's going to cover Python 3.9.&lt;/p&gt;
&lt;p&gt;I'm adding the type hints material. And that means &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585/#forward-compatibility"&gt;PEP
585&lt;/a&gt;.
Which means type hints for generics can use the generic types. We can
use list[int] instead of List[int] and avoid from typing import List.&lt;/p&gt;
&lt;p&gt;It's all fun.&lt;/p&gt;
&lt;p&gt;Until...&lt;/p&gt;
&lt;p&gt;Wait... What?&lt;/p&gt;
&lt;p&gt;When I run &lt;strong&gt;mypy&lt;/strong&gt;, it doesn't like the PEP 585 changes.&lt;/p&gt;
&lt;p&gt;I make sure I'm running Python 3.9.0 everywhere. I make sure I have mypy
0.790. I'm baffled.&lt;/p&gt;
&lt;p&gt;Then. I find this.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/python/mypy/issues/7907"&gt;https://github.com/python/mypy/issues/7907&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ah. It appears that &lt;strong&gt;mypy&lt;/strong&gt; is not completely up-to-speed with Python.&lt;/p&gt;
&lt;p&gt;And this makes perfect sense.&lt;/p&gt;
&lt;p&gt;What I think it means is that I'll have to tweak all of the examples
when &lt;strong&gt;mypy&lt;/strong&gt; also supports PEP 585.&lt;/p&gt;
&lt;p&gt;For now, I'm sticking with strict checks and the 0.790 release of
&lt;strong&gt;mypy&lt;/strong&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="mypy"></category><category term="PEP"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>"Python doesn’t do tail recursion" -- wait, what?</title><link href="https://slott56.github.io/2020_11_07-python_doesnt_do_tail_recursion_wait_what.html" rel="alternate"></link><published>2020-11-07T15:36:00-05:00</published><updated>2020-11-07T15:36:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-11-07:/2020_11_07-python_doesnt_do_tail_recursion_wait_what.html</id><summary type="html">&lt;p&gt;Yes, that's what the email said.&lt;/p&gt;
&lt;p&gt;I was -- well -- shocked. Too shocked to be polite. Content Warning:
much snark follows.&lt;/p&gt;
&lt;div class="section" id="bluf-tail-recursion-is-not-tail-recursion-optimization"&gt;
&lt;h2&gt;BLUF: Tail Recursion is not Tail Recursion Optimization.&lt;/h2&gt;
&lt;p&gt;Eventually, it became clear they were worried about tail recursion
&lt;strong&gt;optimization&lt;/strong&gt;. Maybe I'm too focused on words, but I think words
matter …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Yes, that's what the email said.&lt;/p&gt;
&lt;p&gt;I was -- well -- shocked. Too shocked to be polite. Content Warning:
much snark follows.&lt;/p&gt;
&lt;div class="section" id="bluf-tail-recursion-is-not-tail-recursion-optimization"&gt;
&lt;h2&gt;BLUF: Tail Recursion is not Tail Recursion Optimization.&lt;/h2&gt;
&lt;p&gt;Eventually, it became clear they were worried about tail recursion
&lt;strong&gt;optimization&lt;/strong&gt;. Maybe I'm too focused on words, but I think words
matter. The initial claim was so clearly wrong, I had to challenge it.
It took three *more* emails to get to the optimization point.&lt;/p&gt;
&lt;p&gt;Hence my overload of snark. Three emails to discover they didn't see the
word &amp;quot;optimization.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tail-recursion"&gt;
&lt;h2&gt;Tail Recursion&lt;/h2&gt;
&lt;p&gt;Here's an example. (I wish questions included example code instead of
weird assertions that are clearly false.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def f(x: int) -&amp;gt; int:
    if x == 0: return 1
    return x*f(x-1)
&lt;/pre&gt;
&lt;p&gt;This function demonstrates tail recursion. The &amp;quot;tail&amp;quot; of the function
involves a recursive reference to the function. An optimizing compiler
can optimize the recursion to make it not recursive.&lt;/p&gt;
&lt;p&gt;If Python doesn't do tail recursion, this function would not work.&lt;/p&gt;
&lt;p&gt;Since it works, Python does tail recursion.&lt;/p&gt;
&lt;p&gt;Python limits recursion so that you crash cleanly before you're out of
memory.&lt;/p&gt;
&lt;p&gt;This is important. Older languages would run out of memory for stack
frames. Instead of reporting a recursion problem, they'd just crash.
Out-of-memory. Sorry. No drop to `pdb`. Nothing. This is bad.&lt;/p&gt;
&lt;p&gt;In the old Mac OS (≤9) the stack and heap memory grew from opposite ends
of the available RAM. If they collided, it was a stack overflow, and the
running app was crashed.&lt;/p&gt;
&lt;p&gt;Here's how the stack limitation plays out in practice:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Python 3.9.0 | packaged by conda-forge | (default, Oct 10 2020, 20:36:05)
[Clang 10.0.1 ] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; def f(x: int) -&amp;gt; int:
...     if x == 0: return 1
...     return x*f(x-1)
...
&amp;gt;&amp;gt;&amp;gt; f(999)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 3, in f
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 3, in f
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 3, in f
  [Previous line repeated 995 more times]
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in f
RecursionError: maximum recursion depth exceeded in comparison
&amp;gt;&amp;gt;&amp;gt; f(997)
403597244616453902342926527652907402110903352461393891430307973735196631901068423726375883385358710213700663198466197719394411318126551961682447808198924968051643330792790545975658652366984953410102994729193397927862707860663312211428139657339199210288839829245965893084586772188847949801354437616450752245066665598898009417557796737695167521343249479413631414534202184726421479392615730781173164526393982880263279118925406206180689438683308644696334133955184235540077242451165903811018277198321800315958279899941381566151490917379981054549852483223292752438981198080270888254399197574536460570473430371595872403169486757166154294941258045311241382930836862005052391967478429035362983199050663230586866257612402804942403442331663944341683350732204123565349869446216232111598995678724462182568501131746383857706790400107507266739002631612931124112227909672935742104968533278074796000335855930432060517447195226436187301231195091058916141500005034486568847599649004940677693185232218378659444854645703908824934015144550035704605317977378620311855095356769488892217130200011250491151641531090120083765159221969755314437880209281708574493693840125338722070514029362985801732618715060934298236579096167095859504053310608725711198457200226544350445941157734863407428532431126485686678788466148681975019174010453297639004006819520704463840773528691224455265229985489764356909675383800245969276679872407757924211918488179598530382266647547907226165479802976547896939656888813256826539067915695278878516257396920983511389029563101112325372395464739783143361362879872578550147571168136083391354242735142803988735616917749898060073075542403509536490539404444972668319521415425667918323473675966566332390993259591959049424070380861864682206986463729281557338747466546627859206287571996491606797979064142819469589200812679026561288124087136359830959867034513441434850212864818601504529520195828528045600869420646442863720485414968365312690523835026508545772659712105161137693595262919371358840019473383802028344531181679417716563013501242477291139042422814166369601152223293596957527530934652046662174154235850073391729650007182794396630407081318880947107940245036774649857429379220776637356890211596540009349092255988047909417594778375705723841918167663026277009033939654785671715045122185315730249393616044737902170116980736000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This shows how a large number of operations (around 1,000) exceeds an
internal limit. The exception is not out-of-memory, it's too much
recursion.&lt;/p&gt;
&lt;p&gt;A slightly smaller number (997 in this example) worked.  999 didn't work
because it exceeded the threshold.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manual-tail-recursion-optimization"&gt;
&lt;h2&gt;Manual Tail Recursion Optimization&lt;/h2&gt;
&lt;p&gt;New word: Optimization. New concept.&lt;/p&gt;
&lt;p&gt;If the tail recursion were optimized into a loop, we'd see code that
behaves as if we wrote this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from math import prod
&amp;gt;&amp;gt;&amp;gt; def f1(x: int) -&amp;gt; int:
...     return prod(range(1, x+1))
&lt;/pre&gt;
&lt;p&gt;This unwinds the tail recursion into a loop. A generator,
&lt;tt class="docutils literal"&gt;range(1, x+1)&lt;/tt&gt;, creates a sequence of values, which are reduced into
a product. This doesn't involve recursion or stack frames. Indeed,
because it's a generator, it involves very little memory.&lt;/p&gt;
&lt;p&gt;And it works for  numbers well over 1,000. Evidence (if any were needed)
that tail recursion optimization is *not* being done in Python.&lt;/p&gt;
&lt;p&gt;We'll repeat this for those who feel the need to send me crazy-sounding
emails.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automatic-tail-recursion-optimization"&gt;
&lt;h2&gt;Automatic Tail Recursion Optimization&lt;/h2&gt;
&lt;p&gt;There is no automatic transformation from tail recursion to loop in
Python.&lt;/p&gt;
&lt;p&gt;I'll repeat that for the folks who send me emails claiming tail
recursion isn't supported. (Everyone else probably has a pretty good
grip on this.)&lt;/p&gt;
&lt;p&gt;There is no &lt;strong&gt;automatic&lt;/strong&gt; transformation from tail recursion to loop.&lt;/p&gt;
&lt;p&gt;Tail recursion works. It has a limit.&lt;/p&gt;
&lt;p&gt;Manually optimized tail recursion (to create a loop) also works. It
doesn't have the same limit.&lt;/p&gt;
&lt;p&gt;Stated yet another way: unlike some languages, Python does &lt;strong&gt;not&lt;/strong&gt;
optimize for you. You must do the rewrite yourself.&lt;/p&gt;
&lt;p&gt;While I would have thought these ideas (tail recursion and tail
recursion &lt;strong&gt;optimization&lt;/strong&gt;) were different. I was wrong. Hopefully, this
blog post will help folks read *all* the words.&lt;/p&gt;
&lt;p&gt;I'm also pretty sure it's covered in
here: &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-second-edition/9781788627061"&gt;https://www.packtpub.com/product/functional-python-programming-second-edition/9781788627061&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category></entry><entry><title>Python 3.9 Rearranging typing and collections.abc</title><link href="https://slott56.github.io/2020_10_27-python_39_rearranging_typing_and_collectionsabc.html" rel="alternate"></link><published>2020-10-27T08:54:00-04:00</published><updated>2020-10-27T08:54:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-10-27:/2020_10_27-python_39_rearranging_typing_and_collectionsabc.html</id><summary type="html">&lt;p&gt;This is glorious.&lt;/p&gt;
&lt;p&gt;There was this sort of awkward shoving match between &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;collections.abc&lt;/tt&gt;. Both had generic type definitions and it was --
often -- unclear how to use them.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585"&gt;PEP 585&lt;/a&gt;. Now they are
all unified into a much happier family.&lt;/p&gt;
&lt;p&gt;And. We wind up writing things like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is glorious.&lt;/p&gt;
&lt;p&gt;There was this sort of awkward shoving match between &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;collections.abc&lt;/tt&gt;. Both had generic type definitions and it was --
often -- unclear how to use them.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585"&gt;PEP 585&lt;/a&gt;. Now they are
all unified into a much happier family.&lt;/p&gt;
&lt;p&gt;And. We wind up writing things like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import collections.abc
import typing
import sys

if sys.version_info &amp;gt;= (3, 9):
    BucketCollection = collections.abc.Collection[Sample]
else:
    BucketCollection = typing.Collection[Sample]
&lt;/pre&gt;
&lt;p&gt;Now we can have code that passes tests for 3.8 and 3.9. And at some
point we can cut off the 3.8 support and delete the ancient alternative
definition.&lt;/p&gt;
&lt;p&gt;I'm delighted to be able to move forward with a much simpler future in
which collections are in the &lt;tt class="docutils literal"&gt;collections.abc&lt;/tt&gt; and other, more
foundational stuff is in &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>Type Hints to extend built-in structures</title><link href="https://slott56.github.io/2020_10_20-type_hints_to_extend_built_in_structures.html" rel="alternate"></link><published>2020-10-20T08:00:00-04:00</published><updated>2020-10-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-10-20:/2020_10_20-type_hints_to_extend_built_in_structures.html</id><summary type="html">&lt;p&gt;Working on revisions to a book. Fun stuff.
See &lt;a class="reference external" href="https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261"&gt;https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261&lt;/a&gt;
I may have the privilege of working with Dusty.&lt;/p&gt;
&lt;p&gt;I've been using &lt;strong&gt;mypy&lt;/strong&gt; for all my 2nd edition changes, but not in
--strict mode.&lt;/p&gt;
&lt;p&gt;I've decided to ramp things up, and switch to strict …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working on revisions to a book. Fun stuff.
See &lt;a class="reference external" href="https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261"&gt;https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261&lt;/a&gt;
I may have the privilege of working with Dusty.&lt;/p&gt;
&lt;p&gt;I've been using &lt;strong&gt;mypy&lt;/strong&gt; for all my 2nd edition changes, but not in
--strict mode.&lt;/p&gt;
&lt;p&gt;I've decided to ramp things up, and switch to strict type checking for
all of the examples and case studies.&lt;/p&gt;
&lt;p&gt;This lead me to stumble over&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyThing(dict):
    def some_extra_method(self):
        pass
&lt;/pre&gt;
&lt;p&gt;I absolutely could not get this to work for hours and hours.&lt;/p&gt;
&lt;p&gt;I more-or-less gave up on it, until I started a similar example for a
later chapter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ListWithFeatures(list):
    def feature(self):
        pass
&lt;/pre&gt;
&lt;p&gt;This is almost the same, but, somehow, I understood it better.  As
written, it is rejected by mypy. What I meant was this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ListWithFeatures(List[MyThing]):
    &amp;#64;overload
    def __init__(self) -&amp;gt; None: ...
    &amp;#64;overload
    def __init__(self, source: Iterable[MyThing]) -&amp;gt; None: ...
    def __init__(self, source: Optional[Iterable[MyThing]]) -&amp;gt; None:
        if source:
        super().__init__(source)
        else:
            super().__init__()
    def feature(self) -&amp;gt; float:
        return sum(thing.some_extra_method())/len(self)
&lt;/pre&gt;
&lt;p&gt;I don't know why, but this was easier for me to visualize the problem..
It clarified my understanding profoundly.&lt;/p&gt;
&lt;p&gt;We don't simply extend list or dict.  We should extend them because list
is an alias for List[Any], and when being strict, we need to avoid Any.
Aha.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>Sources of Confusion: a "mea culpa" [Updated]</title><link href="https://slott56.github.io/2020_10_14-sources_of_confusion_a_mea_culpa_updated.html" rel="alternate"></link><published>2020-10-14T08:45:00-04:00</published><updated>2020-10-14T08:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-10-14:/2020_10_14-sources_of_confusion_a_mea_culpa_updated.html</id><summary type="html">&lt;p&gt;I am not patient. I have been dismissed as one who does not suffer
fools gladly.&lt;/p&gt;
&lt;p&gt;This is a bad attitude, and I absolutely suffer from it. No denials
here. I'm aware it limits my ability to help the deeply confused.&lt;/p&gt;
&lt;p&gt;My personal failing is not being patient enough to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am not patient. I have been dismissed as one who does not suffer
fools gladly.&lt;/p&gt;
&lt;p&gt;This is a bad attitude, and I absolutely suffer from it. No denials
here. I'm aware it limits my ability to help the deeply confused.&lt;/p&gt;
&lt;p&gt;My personal failing is not being patient enough to discover the root
cause of their confusion.&lt;/p&gt;
&lt;p&gt;It's not that I don't care -- I would truly like to help them. It's that
I can't keep my mouth shut while they explain their ridiculous chain of
invalid assumptions as if things they invented have some tangible
reality.&lt;/p&gt;
&lt;p&gt;I'm old, and I'm not planning on becoming more empathetic. Instead, I've
become less curious about wrong ideas. I find silence is helpful because
I don't yell at them as much as I could.&lt;/p&gt;
&lt;p&gt;Recently someone tried to tell me that a Python tuple wasn't
&lt;strong&gt;really&lt;/strong&gt; immutable.&lt;/p&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;p&gt;That's what they said.&lt;/p&gt;
&lt;p&gt;A tuple of lists has lists that &lt;strong&gt;can&lt;/strong&gt; be modified. (They did not have
the courtesy to provide examples, I've had to add examples based I what
I &lt;strong&gt;assume&lt;/strong&gt; they're talking about.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; t = ([], [], [])
&amp;gt;&amp;gt;&amp;gt; t[0].append(42)
&amp;gt;&amp;gt;&amp;gt; t
([42]. [], [])
&lt;/pre&gt;
&lt;p&gt;&amp;quot;See,&amp;quot; they said. &amp;quot;Mutable.&amp;quot;&lt;/p&gt;
&lt;p&gt;Implicit follow-up: Python is a web of lies and there's no reason for it
to be better than a spreadsheet.&lt;/p&gt;
&lt;p&gt;I did not ask how the immutability of a tuple was magically transferred
to the lists contained within the tuple.&lt;/p&gt;
&lt;p&gt;I did not ask about their infections disease theory of protocol
transformation of types. Somehow, when associated with a tuple, the list
became tuple-like, and lost a bunch of methods.&lt;/p&gt;
&lt;p&gt;I did not ask if they thought there was some some method-shedding
feature where an immutable structure forces other data structures to
shed methods.&lt;/p&gt;
&lt;p&gt;I did not ask what was supposed to happen to a dictionary, where there's
no built-in frozen dictionary.&lt;/p&gt;
&lt;p&gt;I did not ask what would happen with a &amp;quot;custom&amp;quot; class (one created in
the app, not a built-in collection.)&lt;/p&gt;
&lt;p&gt;I did not ask what fantasy land they come from where a tuple of mutable
objects would lead to immutability of the contained objects.&lt;/p&gt;
&lt;p&gt;I did not ask if it worked the other way, too: was a list of tuples also
supposed to freeze up?&lt;/p&gt;
&lt;p&gt;I did not ask if it transferred more than one level deep into the lists
inside the tuple.&lt;/p&gt;
&lt;p&gt;I should have.&lt;/p&gt;
&lt;p&gt;It was an epic failing on my part to not dig into the bizzaro world
where the question could arise.&lt;/p&gt;
&lt;p&gt;BTW. They had the same complaint about frozen data classes. (Again. They
did not have the courtesy to provide code. I'm guessing this is what
they meant. My failure for not asking.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from typing import List
&amp;gt;&amp;gt;&amp;gt; from dataclasses import dataclass
&amp;gt;&amp;gt;&amp;gt; &amp;#64;dataclass(frozen=True)
... class Kidding_Right:
...     one_thing: List[int]
...     another_thing: List[int]
...
&amp;gt;&amp;gt;&amp;gt; kr = Kidding_Right([], [])
&amp;gt;&amp;gt;&amp;gt; kr.one_thing.append(42)
&amp;gt;&amp;gt;&amp;gt; kr
Kidding_Right(one_thing=[42], another_thing=[])
&lt;/pre&gt;
&lt;p&gt;Triumphant Sneer: &amp;quot;See, frozen is little more than a suggestion. The
lists within the data class are *not* frozen.&amp;quot;&lt;/p&gt;
&lt;p&gt;Yes. They appeared to be claiming frozen was supposed to apply
transitively to the objects within the dataclass.  Appeared. My mistake
was failing to ask what they hell they were talking about.&lt;/p&gt;
&lt;p&gt;I really couldn't bear to know what caused someone to think this was in
any way &amp;quot;confusing&amp;quot; or required &amp;quot;clarification.&amp;quot; I didn't want to hear
about transitivity and how the data class properties were supposed to
infect the underlying objects.&lt;/p&gt;
&lt;p&gt;Their notion was essentially wrong, and wickedly so. I could have asked,
but I'm not sure I could have waited patiently through their answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;quot;little more than a suggestion&amp;quot;.&lt;/p&gt;
&lt;p&gt;Ah.&lt;/p&gt;
&lt;p&gt;This is an strange confusion.&lt;/p&gt;
&lt;p&gt;A dynamic language (like Python) resolves everything at run-time. It
turns out that there are ways to override __getattr__() and
__setattr__() to break the frozen setting. Indeed, you can reach into
the internal __dict__ object and do real damage to the object.&lt;/p&gt;
&lt;p&gt;I guess the consequences of a dynamic language can be confusing if you
aren't expecting a dynamic language to actually be dynamic.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="quot-i-guess-the-consequences-of-a-dynamic-langua"&gt;
&lt;h2&gt;&amp;amp;quot;I guess the consequences of a dynamic langua...&lt;/h2&gt;
&lt;p&gt;McSee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-10-20 21:55:24.002000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;I guess the consequences of a dynamic language can be confusing if you
aren't expecting a dynamic language to actually be dynamic.&amp;quot;
Exactly. You were TOO patient&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-might-help-people-if-they-read-the-following-py"&gt;
&lt;h2&gt;It might help people if they read the following Py...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-10-16 16:05:57.573000-04:00&lt;/p&gt;
&lt;p&gt;It might help people if they read the following Python documentation
&lt;a class="reference external" href="https://docs.python.org/3/reference/executionmodel.html#interaction-with-dynamic-features"&gt;https://docs.python.org/3/reference/executionmodel.html#interaction-with-dynamic-features&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Open Source Support Ideas</title><link href="https://slott56.github.io/2020_09_09-open_source_support_ideas.html" rel="alternate"></link><published>2020-09-09T19:02:00-04:00</published><updated>2020-09-09T19:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-09-09:/2020_09_09-open_source_support_ideas.html</id><summary type="html">&lt;p&gt;&amp;quot;... [I] am thinking of building an in house conda forge, or buying a
solution, or paying someone to set something up.&amp;quot;&lt;/p&gt;
&lt;p&gt;The build v. Buy decision. This is always hard. Really hard.&lt;/p&gt;
&lt;p&gt;We used to ask &amp;quot;What's your business? Is it building software or making
widgets?&amp;quot;&lt;/p&gt;
&lt;p&gt;And (for some) the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;... [I] am thinking of building an in house conda forge, or buying a
solution, or paying someone to set something up.&amp;quot;&lt;/p&gt;
&lt;p&gt;The build v. Buy decision. This is always hard. Really hard.&lt;/p&gt;
&lt;p&gt;We used to ask &amp;quot;What's your business? Is it building software or making
widgets?&amp;quot;&lt;/p&gt;
&lt;p&gt;And (for some) the business is making widgets.&lt;/p&gt;
&lt;p&gt;This is short-sighted.&lt;/p&gt;
&lt;p&gt;But. A lot of folks in senior positions were given this as a model back
in the olden days. So, you need to address the &amp;quot;how much non-widget
stuff are we going to take on?&amp;quot; question.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Our Business is Widgets&amp;quot; is short-sighted because it fails to
recognize where the money is made. It's the ancillary things *around*
the widgets. Things only software can do. Customer satisfaction.
Supply-chain management.&lt;/p&gt;
&lt;p&gt;So. Business development == Software development. They're inextricably
bound.&lt;/p&gt;
&lt;p&gt;With that background, lets' look at what you want to do.&lt;/p&gt;
&lt;p&gt;Open Source software is not actually &amp;quot;free&amp;quot; in any sense. Someone has to
support it. If you embrace open source, then, you have to support it
in-house. Somehow. And that in-house work isn't small.&lt;/p&gt;
&lt;p&gt;The in-house open-source support comes in degrees, starting with a
distant &amp;quot;throw money at a maintainer&amp;quot; kind of action. You know. Support
NumFocus and Anaconda and hope it trickles down appropriately (it
sometimes does) to the real maintainers.&lt;/p&gt;
&lt;p&gt;The next step is to build the tooling (and expertise) in-house. Conda
forge (or maybe JFrog or something else) and have someone on staff who
can grow to really understand how it fits together. They may not be up
to external contributions, but they can do the installs, make sure
things are running, handle updates, manage certificates, rotate keys,
all the things that lead to smooth experience for users.&lt;/p&gt;
&lt;p&gt;The top step is to hire one of the principles and let them do their open
source thing but give them office space and a salary.&lt;/p&gt;
&lt;p&gt;I'm big on the middle step. Do it in-house. It's *not* your core
business (in a very narrow, legal and finance sense) but it *is* the
backbone fo the information-centric value-add where the real money is
made.&lt;/p&gt;
&lt;p&gt;Folks in management (usually accouting) get frustrated with this
approach. It seems like it should take a month or two and you're up and
running. (The GAAP requires we plan like this. Make up a random date.
Make up a random budget.)&lt;/p&gt;
&lt;p&gt;But. Then. 13 weeks into the 8-week project, you still don't have a
reliable, high-performance server.  Accounting gets grumpy because the
plan you have them months ago turns out to have been riddled with
invalid assumptions and half-truths. (They get revenge by cancelling the
project at the worst moment to be sure it's a huge loss in everyone's
eyes.)&lt;/p&gt;
&lt;p&gt;I think the mistake is failing to enumerate the lessons learned. A lot
will be learned. A real lot. And some of it is small, but it still takes
all day to figure it out. Other things are big and take failed roll-outs
and screwed up backup-restore activities. It's essential to make a
strong parallel between open source and open learning.&lt;/p&gt;
&lt;p&gt;You don't know everything. (Indeed, you can't, much to the consternation
of the accountants.) But. You are learning at a steady rate. The money
is creating significant value.&lt;/p&gt;
&lt;p&gt;And after 26 weeks, when things *really* seem to be working, there
needs to be a very splashy list of &amp;quot;things we can do now that we
couldn't do before.&amp;quot;  A demo of starting a new project. `conda create
demo python=3.8.6 --file demo_env.yml` and watch it run, baby. A little
dask. Maybe analyze some taxicab data.&lt;/p&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="conda"></category></entry><entry><title>Another shiny new MacBook pro</title><link href="https://slott56.github.io/2020_08_27-another_shiny_new_macbook_pro.html" rel="alternate"></link><published>2020-08-27T07:19:00-04:00</published><updated>2020-08-27T07:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-08-27:/2020_08_27-another_shiny_new_macbook_pro.html</id><summary type="html">&lt;p&gt;See {filename}/blog/2014/03/2014_03_20-shiny_new_macbook_pro.rst&lt;/p&gt;
&lt;p&gt;At the time (2014), the 8Gb machine was way more than adequate for all
my needs as a writer.&lt;/p&gt;
&lt;p&gt;Enter bloat.&lt;/p&gt;
&lt;p&gt;Mac OS Catalina has essentially filled this machine to the breaking
point. Six short years is the lifespan. Things (generally) work, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See {filename}/blog/2014/03/2014_03_20-shiny_new_macbook_pro.rst&lt;/p&gt;
&lt;p&gt;At the time (2014), the 8Gb machine was way more than adequate for all
my needs as a writer.&lt;/p&gt;
&lt;p&gt;Enter bloat.&lt;/p&gt;
&lt;p&gt;Mac OS Catalina has essentially filled this machine to the breaking
point. Six short years is the lifespan. Things (generally) work, but
it now crashes frequently. Sometimes, streaming TV won't play
properly. I've tried a large number of remedies (reboot WiFi, reboot
computer, reset Bluetooth) and it glitches too offten to be
comfortable.&lt;/p&gt;
&lt;p&gt;(Rumors suggest the crashes seem to be associated with going to
sleep. The machine crashes when it's idle. I come back to it and find
it has restarted, and needs to restart my apps. It's not horrible.
But it's an indication of a deeper problem. And it's time.)&lt;/p&gt;
&lt;p&gt;It works. But. I've spent too many years waiting for slow computers
and slow networks. An hour a day (cumulative) for 300 days a year for
40 years means I've spent 1.3 years of my life waiting for a computer
to do something.&lt;/p&gt;
&lt;p&gt;I’m reluctantly replacing my kind-of-working &amp;quot;Late 2013&amp;quot; vintage
machine with a new 13” MacBook Pro. At least 16Gb RAM. At least a
terabyte of storage. Hopefully, things will not be &amp;quot;glitchy&amp;quot; and I
won't have constant crashes.&lt;/p&gt;
&lt;p&gt;I’ve gotten used to having an 27&amp;quot; Thunderbolt Display, and a USB
Querkywriter keyboard, and two USB disks doing backups. That's a lot
of stuff plugged in all the time. Also. I really &lt;strong&gt;need&lt;/strong&gt; a slot for
SD cards (the boat uses micro SD cards, as does the old GoPro
camera.). So. A fancy USB-C hub will be essential, I think.&lt;/p&gt;
&lt;p&gt;The question is 2 ports (power and hub) or 4 ports (power, hub, and
two other things)?  I suspect I can live with 2 ports.  4 ports ships
immediately.&lt;/p&gt;
&lt;p&gt;I have several use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Writing Python books (e.g. Modern Python Cookbook 2e, &lt;a class="reference external" href="https://www.packtpub.com/product/modern-python-cookbook-second-edition/9781800207455"&gt;https://www.packtpub.com/product/modern-python-cookbook-second-edition/9781800207455&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Writing fiction. (Still editing second drafts, don’t hold your breath)&lt;/li&gt;
&lt;li&gt;Creating a MicroPython (or Arduino) device to track my boat’s position and act as an alarm if the anchor drags&lt;/li&gt;
&lt;li&gt;Boating (in a vague, general way)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing books actually requires some computing power. But. Not
*too* much power. The general reader doesn’t always have a huge
computer. If my examples require more computing power than my
readers have access to, that’s a problem. The advantage of having
a smallish computer is I’m not overstepping what’s available to my
readers. This is a handy way to take a tax deduction to pay for
this extravagance.&lt;/p&gt;
&lt;p&gt;Writing fiction requires a small machine. Scrivener works on an iPad
Pro. I’m good with almost anything. Even an iPhone can be used for
writing and editing fiction. It’s hard, of course, with a tiny
screen. But not impossible. And. I'm trying to learn the craft, so
tools aren't as important as understanding character arc.&lt;/p&gt;
&lt;p&gt;Creating MicroPython-based devices is a bit confusing right now. A
lot of the development environments depend on a reliable USB
connectivity to the Arduino or Circuit Playground Express board. I
worry about the (potential) complexity of introducing a USB hub into
the mix.  I suspect I only need to replace some of my USB cables; the
Arduino boards all seem to use a bulky USB type B. The CPX use USB
type Micro B. (I thinks one can be replaced with a USB C to USB B
“printer cable”, the other is a USB microB to C adapter. Or, maybe a
USB C to USB A adapter can be used with my vast collection of legacy
cables. Don't know.)&lt;/p&gt;
&lt;p&gt;Boating involves connecting external devices like the GPS antenna to
the laptop and tracking position or planning routes. This is a
Bluetooth thing, generally.&lt;/p&gt;
&lt;p&gt;It does require considerable power for the laptop; the 60W power
brick becomes a constraint. The boat have an inverter and can handle
the load gracefully. A computer is a dedicated 5A draw, though; twice
what the fridge pulls (and the fridge runs infrequently.) We have
225Ah available. The computer could be as bad as 120Ah if it was left
on for 24 hours during an overnight passage.&lt;/p&gt;
&lt;p&gt;The good news is that the use cases are more-or-less exclusive. The
boating use case is rare. We have more thrifty navigation systems
permanently installed on the boat. Many folks are using CPX and
Arduino’s with MacBook Pro’s, so I shouldn’t worry too much, just buy
new cables.&lt;/p&gt;
&lt;p&gt;The best part?&lt;/p&gt;
&lt;p&gt;Since I use Time Machine, the new machine recovers from the Time
Machine backups. It has to be left to run overnight, but. Boom. Done.&lt;/p&gt;
&lt;p&gt;(On the to-do list -- encrypt the backup volumes. Ugh. But.
Necessary.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="arduino"></category><category term="macosx"></category><category term="CircuitPlayground"></category><category term="macintosh"></category><category term="hardware"></category></entry><entry><title>Why Python is not the programming language of the future -- a response</title><link href="https://slott56.github.io/2020_08_01-why_python_is_not_the_programming_language_of_the_future_a_response.html" rel="alternate"></link><published>2020-08-01T08:22:00-04:00</published><updated>2020-08-01T08:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-08-01:/2020_08_01-why_python_is_not_the_programming_language_of_the_future_a_response.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66"&gt;https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an interesting article with some important points. And. It has
some points that I disagree with.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Speed. This is a narrow perspective. numpy and pandas are fast, dask
is fast. A great many Python ecosystem packages are fast. This
complaint seems to be …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66"&gt;https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an interesting article with some important points. And. It has
some points that I disagree with.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Speed. This is a narrow perspective. numpy and pandas are fast, dask
is fast. A great many Python ecosystem packages are fast. This
complaint seems to be unsupported by evidence.&lt;/li&gt;
&lt;li&gt;Dynamic Scoping Rules. This actually isn't the problem. The problem
is something about not being able to change containing scopes. First,
I'm not sure changing nesting scopes is of any value at all. Second,
the complaint ignores the global and nonlocal statements. The vague
&amp;quot;leads to a lot of confusion&amp;quot; seems unsupported by any evidence.&lt;/li&gt;
&lt;li&gt;Lambdas. The distinction between expressions and statements isn't
really a distinction in Python in general, only in  the bodies of
lambdas. I'm not sure what the real problem is, since a lambda with
statements seems like a syntactic nightmare better solved with an
ordinary, named function.&lt;/li&gt;
&lt;li&gt;Whitespace. Sigh. I've worked with many people who get the whitespace
right but the {}'s wrong in C++. The code looks great but doesn't
work. Python gets it right. The code looks great and works.&lt;/li&gt;
&lt;li&gt;Mobile App Platform.
See &lt;a class="reference external" href="https://beeware.org/"&gt;https://beeware.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Runtime Errors. &amp;quot;coding error manifests itself at runtime&amp;quot; seems to
be the problem. I'm not sure what this means, because lots of
programming languages have run-time problems. Here's the quote: &amp;quot;This
leads to poor performance, time consumption, and the need for a lot
of tests. Like, a &lt;em&gt;lot&lt;/em&gt; of tests.&amp;quot; Performance? See above. Use numpy.
Or Cuda. Time consumption? Not sure what this means. A lot of tests?
Yes. Software requires tests. I'm not sure that a compiled language
like Rust, Go, or Julia require fewer tests. Indeed, I think the
testing is essentially equivalent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm interested in ways Python could be better.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-ways-to-improve-python-check-out-the-comments"&gt;
&lt;h2&gt;For ways to improve Python, check out the comments...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-24 00:54:46.523000-04:00&lt;/p&gt;
&lt;p&gt;For ways to improve Python, check out the comments by Jerry Howard at
the following YouTube video
Jeremy Howard: fast.ai Deep Learning Courses and Research Artificial
Intelligence (AI) Podcast
Aug 27, 2019 - Lex Fridman
&lt;a class="reference external" href="https://www.youtube.com/watch?v=J6XcP4JOHmk"&gt;https://www.youtube.com/watch?v=J6XcP4JOHmk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wow-people-are-still-writing-articles-like-that"&gt;
&lt;h2&gt;Wow, people are still writing articles like that? ...&lt;/h2&gt;
&lt;p&gt;Wingware&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-22 11:46:00.243000-04:00&lt;/p&gt;
&lt;p&gt;Wow, people are still writing articles like that? It belies a
fundamental lack of understanding what Python is and how it works. For
one, it's not intended for writing CPU intensive code. Instead, it's the
user-friendly glue that puts things together. In most Python code, very
little time is spent actually spinning the interpreter's wheels; the
work is done in the packages written in C or whatever. That's why
numpy/etc are so fast. Also the idea that compilation can find anything
but a tiny subset of runtime errors is absurd. You need just as many
tests if not more with other languages. Oh well... thanks for posting
this link, though!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Modern Python Cookbook 2nd ed -- Advance Copies -- DM me</title><link href="https://slott56.github.io/2020_07_28-modern_python_cookbook_2nd_ed_advance_copies_dm_me.html" rel="alternate"></link><published>2020-07-28T08:02:00-04:00</published><updated>2020-07-28T08:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-07-28:/2020_07_28-modern_python_cookbook_2nd_ed_advance_copies_dm_me.html</id><summary type="html">&lt;p&gt;This is your &amp;quot;why wait&amp;quot; invitation.&lt;/p&gt;
&lt;p&gt;Advanced copies will be available.&lt;/p&gt;
&lt;p&gt;IF.&lt;/p&gt;
&lt;p&gt;And this is a big &amp;quot;if&amp;quot;.&lt;/p&gt;
&lt;p&gt;You have to write a blurb.&lt;/p&gt;
&lt;p&gt;I'll be putting you in contact with Packt marketing folks who will
get you your advanced copy so you can write blurbs and reviews and --
well …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is your &amp;quot;why wait&amp;quot; invitation.&lt;/p&gt;
&lt;p&gt;Advanced copies will be available.&lt;/p&gt;
&lt;p&gt;IF.&lt;/p&gt;
&lt;p&gt;And this is a big &amp;quot;if&amp;quot;.&lt;/p&gt;
&lt;p&gt;You have to write a blurb.&lt;/p&gt;
&lt;p&gt;I'll be putting you in contact with Packt marketing folks who will
get you your advanced copy so you can write blurbs and reviews and --
well -- actually use the content.&lt;/p&gt;
&lt;p&gt;It's all updated to Python 3.8. Type hints almost everywhere.
F-strings and the walrus operator. Bunches of devops and data science
examples. Plus a few personal examples involving sailboat navigation
and management.&lt;/p&gt;
&lt;p&gt;See me at LinkedIn &lt;a class="reference external" href="https://www.linkedin.com/in/steven-lott-029835/"&gt;https://www.linkedin.com/in/steven-lott-029835/&lt;/a&gt;
and I'll hook you up with Packt marketing folks.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.amazon.com/Modern-Python-Cookbook-Updated-programmer/dp/180020745X"&gt;https://www.amazon.com/Modern-Python-Cookbook-Updated-programmer/dp/180020745X&lt;/a&gt;
for the official Amazon Book Link. This is for ordinary &amp;quot;no
obligation to write a review&amp;quot; orders.&lt;/p&gt;
&lt;p&gt;DM me directly slott56 at gmail to be put into the marketing
spreadsheet.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="modern python cookbook"></category></entry><entry><title>Overcoming Incuriosity -- Sailing Over The Horizon</title><link href="https://slott56.github.io/2020_06_02-overcoming_incuriosity_sailing_over_the_horizon.html" rel="alternate"></link><published>2020-06-02T08:00:00-04:00</published><updated>2020-06-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-06-02:/2020_06_02-overcoming_incuriosity_sailing_over_the_horizon.html</id><summary type="html">&lt;p&gt;I'm in regular contact with a few folks who seem remarkably incurious.
Seem.
Perhaps they're curious about something other than software. I don't
know.
But I do know they're remarkably incurious about software. And are
trying to write Python applications.
I know some people don't sail out of sight of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm in regular contact with a few folks who seem remarkably incurious.
Seem.
Perhaps they're curious about something other than software. I don't
know.
But I do know they're remarkably incurious about software. And are
trying to write Python applications.
I know some people don't sail out of sight of their home port. I've
sailed over a few horizons. It's not courage. It's curiosity. And
patience. And preparation.
I find this frustrating. I refuse to write their code for them.
But any advice I give them devolves to &amp;quot;Do you have an example?&amp;quot; With
the implicit &amp;quot;Which I can copy and paste?&amp;quot;
Even the few who claim they don't want examples, suffer from a
paralyzing level of incuriosity. They can't seem to make search work
because they never read beyond the first few results on their first
attempt. A lot of people seem to be able to make search work; and the
incurious folks seem uniquely paralyzed by search.
And it's an attribute I don't understand.
Specific example.
They read through the multiprocessing module until they got to examples
with apply_async() and appear to have stopped reading.  They've asked
for code reviews on two separate module. Both based on apply_async().
One module was so hopelessly broken it was difficult to make the case
that it could never be made to work. There's a way the results of
apply_async() have to be consumed, and the code not only did not reflect
this, it seemed like they had decided specifically never to consider an
alternative. (Spoiler alert, it requires an explicit wait().)
The results were sometimes consumed -- by luck -- and the rest of the
time, the app was quirky. It wasn't quirky. It was deplorably wrong. And
&amp;quot;reread the apply_async()&amp;quot; advice fell on deaf ears. They couldn't have
failed to read the page in the standard library documentation, no, it
had to be Python or Windows or me or something.
The other module was a trivial map() application. But. Since
apply_async() has an incumbency, there was an amazingly elaborate
implementation that amounted to rebuilding &lt;tt class="docutils literal"&gt;apply()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt; with
globals and callbacks. This was wrapped by queue processing of Byzantine
complexity. The whole mess appeared to stem from an unwillingness to
read the documentation past the first example.
What to do?
My current suggestion is to exhaustively enumerate each of the methods
for putting work into the processing pool. Write an example of each and
every one.
In effect: &amp;quot;Learn the methods by building throw-away code.&amp;quot;
I anticipate a series of objections. &amp;quot;Why write throw-away code?&amp;quot; and
this one: &amp;quot;That's not realistic, what do you do?&amp;quot;
What do I do?
I write throw-away code.
But that's no substitute for a lack of curiosity.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Hi&lt;/p&gt;
&lt;div class="section" id="have-you-tried-tdd-with-them-maybe-they-want"&gt;
&lt;h2&gt;Have you tried TDD with them. Maybe they want ...&lt;/h2&gt;
&lt;p&gt;McSee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-06-03 23:02:18.227000-04:00&lt;/p&gt;
&lt;p&gt;Hi
Have you tried TDD with them. Maybe they want to start with a functional
approach instead of an implementative one.
With good guidance this might lead to a simpler implementation&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category></entry><entry><title>Modern Python Cookbook 2nd ed -- big milestone</title><link href="https://slott56.github.io/2020_05_26-modern_python_cookbook_2nd_ed_big_milestone.html" rel="alternate"></link><published>2020-05-26T08:00:00-04:00</published><updated>2020-05-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-05-26:/2020_05_26-modern_python_cookbook_2nd_ed_big_milestone.html</id><content type="html">&lt;p&gt;Whew.
Chapter rewrites finished.
Technical reviews in process.
Things are going pretty well. Look for Packt to publish this in the next
few months. Details will be posted.
Now. For LinkedIn Learning course recordings.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>The COBOL-to-SomeBetterLang Translator</title><link href="https://slott56.github.io/2020_04_14-the_cobol_to_somebetterlang_translator.html" rel="alternate"></link><published>2020-04-14T08:00:00-04:00</published><updated>2020-04-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-04-14:/2020_04_14-the_cobol_to_somebetterlang_translator.html</id><summary type="html">&lt;p&gt;Here's a popular idea.&lt;/p&gt;
&lt;blockquote&gt;
... a COBOL-to-X translator, where X is a more-modern programming
language ...&lt;/blockquote&gt;
&lt;p&gt;This is a noble aspiration.&lt;/p&gt;
&lt;p&gt;In principle -- down deep -- all programming can be reduced to an
idealized Turing Machine.&lt;/p&gt;
&lt;p&gt;This means that we *should* be able to locate all the state changes
in a given spaghetti-bowl …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a popular idea.&lt;/p&gt;
&lt;blockquote&gt;
... a COBOL-to-X translator, where X is a more-modern programming
language ...&lt;/blockquote&gt;
&lt;p&gt;This is a noble aspiration.&lt;/p&gt;
&lt;p&gt;In principle -- down deep -- all programming can be reduced to an
idealized Turing Machine.&lt;/p&gt;
&lt;p&gt;This means that we *should* be able to locate all the state changes
in a given spaghetti-bowl of COBOL. Given the abstract state
transitions, we can emit a version of that machine in any language.&lt;/p&gt;
&lt;p&gt;Emphasis on the *should*.&lt;/p&gt;
&lt;p&gt;There are road-blocks.&lt;/p&gt;
&lt;p&gt;The first two are rarities. But. When confronted with these, we'll
have significant problems.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;ALTER&lt;/tt&gt; statement means the code can be changed at run-time. There
are constraints, but still... When the code is not static, the
possible domain of state changes moves outside working storage and
into the procedure division itself.&lt;/li&gt;
&lt;li&gt;A data structure with a &lt;tt class="docutils literal"&gt;RENAMES&lt;/tt&gt; clause. This adds a layer of
alternative naming, making the data states quite a bit more complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next one is a huge complication: the &lt;tt class="docutils literal"&gt;GOTO&lt;/tt&gt; statement. This makes
state transitions extremely difficult to analyze. It's possible to
untangle any GOTO of arbitrary complexity into properly tested IF and
WHILE statements.&lt;/p&gt;
&lt;p&gt;However. The tangle of GOTO's may have been actually meaningful. It
may have carried some suggestion of a business owner's intent. A
COBOL elimination algorithm may turn tangled code into opaque code.
(It's also possible that it clarifies age-old bad programming.)&lt;/p&gt;
&lt;p&gt;The ordinary &lt;tt class="docutils literal"&gt;REDEFINES&lt;/tt&gt; clause. This was heavily used as a storage
optimization for the tiny, slow file systems we had back in the olden
days. It's a union of distinct types. And. It's a &amp;quot;free&amp;quot; union. We do
not know how to distinguish the various types that are being
redefined. It's intimately tied to processing logic in the procedure
division.&lt;/p&gt;
&lt;p&gt;Just to make it even more horrifying...&lt;/p&gt;
&lt;p&gt;File layouts evolve over time. It's entirely possible for a
*working*, *valid*, *in-production* file to have content that
does not match any working program's DDE. The data has flags or
indicators or something that lets the app glide past the bad data.
But the data is bad. It used to be good. Then something changed, and
now it's almost uninterpretable. But the apps work because there are
enough paths through the logic to make the row &amp;quot;work&amp;quot; without it
matching any file layout in any obvious way.&lt;/p&gt;
&lt;p&gt;I'm not sure an automated translation from COBOL is of any value.&lt;/p&gt;
&lt;p&gt;I think it's far better to start with file layouts, review the code,
and then write new code from scratch in a modern language. This
manual rewrite leads directly to small programs that -- in a modern
language -- are little more than class definitions. In some cases,
each legacy COBOL app would like becomes a Python module.&lt;/p&gt;
&lt;p&gt;Given snapshots of legacy files, the Python can be tested to be sure
it does the same things. The processing is not nuanced, or tricky, or
even particularly opaque.&lt;/p&gt;
&lt;p&gt;The biggest problem is the knowledge captured in COBOL code tends to
be disorganized. The real work is disentangling it. A language that
supports ruthless refactoring will be helpful.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="COBOL"></category></entry><entry><title>Why Isn't COBOL Dead? Or Why Didn't It Evolve?</title><link href="https://slott56.github.io/2020_04_07-why_isnt_cobol_dead_or_why_didnt_it_evolve.html" rel="alternate"></link><published>2020-04-07T21:07:00-04:00</published><updated>2020-04-07T21:07:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-04-07:/2020_04_07-why_isnt_cobol_dead_or_why_didnt_it_evolve.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's part of the question:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
Why didn't COBOL evolve more successfully?&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
FORTRAN, OTOH, has survived precisely because it--and more
importantly, related tools, esp compilers--has evolved to
solve/overcome many (certainly not all!) of the sorts of pain-points
you describe, while retaining the significant performance edge that
(IMHO, ICBW) prevents challengers …&lt;/blockquote&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's part of the question:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
Why didn't COBOL evolve more successfully?&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
FORTRAN, OTOH, has survived precisely because it--and more
importantly, related tools, esp compilers--has evolved to
solve/overcome many (certainly not all!) of the sorts of pain-points
you describe, while retaining the significant performance edge that
(IMHO, ICBW) prevents challengers (e.g., Python) from dislodging it
for tasks like (e.g.) running dynamical models (esp weather
forecasting).&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In short, why is FORTRAN still OK? Why is COBOL not still OK?&lt;/div&gt;
&lt;div class="line"&gt;Actually, I'd venture to say the stories of these languages are
essentially identical. They're both used because they have significant
legacy implementations.&lt;/div&gt;
&lt;div class="line"&gt;There's a distinction, that I think might be relevant to the
&amp;quot;revulsion factor.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Folks don't find Fortran quite so revolting because it's sequestered
into libraries where we don't really have to look at it. It's often
wrapped into SciPy. The GCC compiler system handles it and we're
happy.&lt;/div&gt;
&lt;div class="line"&gt;COBOL, however, isn't sequestered into libraries with tidy Python
wrappers and Conda installers. COBOL is the engine of enterprise
applications.&lt;/div&gt;
&lt;div class="line"&gt;Also. COBOL is used by organizations that suffer from high amounts of
technical inertia, which makes the language a kind of bellwether for
the rest of the organization. The organization changes slowly (or not
at all) and the language changes at an even more tectonic pace.&lt;/div&gt;
&lt;div class="line"&gt;This is a consequence of very large organizations with regulatory
advantages. Governments, for example, regulate themselves into
permanence. Other highly-regulated industries like banks and insurance
companies can move slowly and tolerate the stickiness of COBOL.&lt;/div&gt;
&lt;div class="line"&gt;Also.&lt;/div&gt;
&lt;div class="line"&gt;For a FORTRAN library function that does something useful, it's not
utterly mysterious. There's often a crisp mathematical definition, and
a way to test the implementation. There are no quirks.&lt;/div&gt;
&lt;div class="line"&gt;For a COBOL program that does something required by law, there can
still be absolutely opaque mysteries and combinations of features
without acceptable unit test cases. This isn't for lack of trying.
It's the nature of &amp;quot;application&amp;quot; vs. &amp;quot;subroutine.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The special case and exceptions have to live somewhere. They live in
the application.&lt;/div&gt;
&lt;div class="line"&gt;For FORTRAN, the exceptions are in the Python wrapper using numpy
using FORTRAN.&lt;/div&gt;
&lt;div class="line"&gt;For COBOL, the exceptions are in the COBOL  Somewhere.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="gt-cobol-is-used-by-organizations-that-suffer-fr"&gt;
&lt;h2&gt;&amp;amp;gt; COBOL is used by organizations that suffer fr...&lt;/h2&gt;
&lt;p&gt;Tom Roche&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-08 00:15:25.622000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt; COBOL is used by organizations that suffer from high amounts of
technical inertia, which makes the language a kind of bellwether for the
rest of the organization. [...] This is a consequence of very large
organizations with regulatory advantages.&lt;/p&gt;
&lt;p&gt;I misspent the mid-noughties at a Giant Acronym for which banks are a
major [host](&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Host_(biology"&gt;https://en.wikipedia.org/wiki/Host_(biology&lt;/a&gt;)) genus. While
there, I'm fairly sure I heard at least 3 different versions of [this
post's predecessor]({filename}/blog/2020/04/2020_04_07-the_cobol_problem.rst),
all given by quasi-academic manager/mandarins sufficiently
up-the-food-chain that junior/grunt software engineers (like me) were
paid to Sit and Listen (and eat snacks :-) My group built IDEs designed
to make big bucks [^Hx14] help bankers wrap, refactor, and ultimately
replace their COBOL.&lt;/p&gt;
&lt;p&gt;(I also once heard it said there--I have no idea if it's true, or who
has ever studied this sort of thing--that CICS is the single most
profitable piece of software ever written. And still earning.)&lt;/p&gt;
&lt;p&gt;My impression (from a long spatiotemporal distance, and which again is
open to your empirical correction) is, banks *did* lotsa
better-engineered wraps and extensions. But when it came to getting
dirty with the COBOL base, banks just maintained, because offshoring
was--and, IIUC, remains--sooo much cheaper. Not just because Indians (et
al) cost less, but also because they were/are the only folks getting
trained in not just COBOL but the whole 370-390-Z ecosystem.&lt;/p&gt;
&lt;p&gt;So my guess (YMMV) is, no change until boolean-OR (1) cheap labor gets
lots less cheap (2) governments/quangos (e.g., standards organizations)
with teeth start regulating software the way they currently do other
economically-significant products. But I'd be interested to read your
2030 followup on this topic ... presuming we all get there :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="just-noting-that-this-opinion-piece-was-especially"&gt;
&lt;h2&gt;Just noting that this opinion piece was especially...&lt;/h2&gt;
&lt;p&gt;crsevern&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-10 14:08:16.605000-04:00&lt;/p&gt;
&lt;p&gt;Just noting that this opinion piece was especially topical for me as I
embark on trying to wrap a Medicare COBOL program in Python. No way I'm
touching the COBOL source.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="COBOL"></category><category term="#python"></category><category term="fortran"></category></entry><entry><title>The COBOL Problem</title><link href="https://slott56.github.io/2020_04_07-the_cobol_problem.html" rel="alternate"></link><published>2020-04-07T08:00:00-04:00</published><updated>2020-04-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-04-07:/2020_04_07-the_cobol_problem.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/audreywatters/status/1246609613203505152"&gt;https://twitter.com/audreywatters/status/1246609613203505152&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tweet has since been deleted. Here's the old text&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Pet peeve: technologists who sneer at the longevity of programming languages like COBOL. Ain't nobody made it to the moon on react.js. And nobody is willing to replace critical aging software with your …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/audreywatters/status/1246609613203505152"&gt;https://twitter.com/audreywatters/status/1246609613203505152&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tweet has since been deleted. Here's the old text&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Pet peeve: technologists who sneer at the longevity of programming languages like COBOL. Ain't nobody made it to the moon on react.js. And nobody is willing to replace critical aging software with your new tangled, untested, VC funded framework&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It's a tweet, so I know there's no room for depth here.&lt;/p&gt;
&lt;p&gt;As it is, it's absolutely correct. Allow me to add to it.&lt;/p&gt;
&lt;p&gt;First. Replacing COBOL with something shiny and new is more-or-less
impossible. Replacing COBOL is a two-step job.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Replace the COBOL with something that's nearly identical but
written in a new language. Python. Java. Scala. Whatevs. Language
doesn't matter. What matters is the hugeness of this leap.&lt;/li&gt;
&lt;li&gt;Once the COBOL is gone and the mainframe powered off, then you can
rebuild things yet again to create RESTful API's and put many shiny
things around it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Second. Replacing COBOL is essential. Software is a form of knowledge
capture. If the language (and tools) have become opaque, then the job
of knowledge capture has failed. Languages drift. &lt;strong&gt;The audience is in
a constant state of flux&lt;/strong&gt;. New translations are required.&lt;/p&gt;
&lt;p&gt;Let's talk about the &amp;quot;Nearly Identical But In A New Language.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="nearly-identical"&gt;
&lt;h2&gt;Nearly Identical&lt;/h2&gt;
&lt;p&gt;COBOL code has two large issues in general&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data. The file layouts are very hard to work with. I know a lot
about this.&lt;/li&gt;
&lt;li&gt;Processing. The code has crap implementations of common data
structures. I know. I wrote some. There's more, we'll get to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have -- for the most part -- two kinds of COBOL code in common
use.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Batch processing. Once upon a time, we called it &amp;quot;Programming in
the Large.&amp;quot; The Z/OS Job Control Language (JCL) was a kind of
shell script or AWS Step Function state transition map among
applications. This isn't easy to deal with because the overall
data flow is not a simple Directed Acyclic Graph (DAG.) It has
cycles and state changes.&lt;/li&gt;
&lt;li&gt;Interactive (once called &amp;quot;on-line&amp;quot;) processing. We called it OLTP:
On-Line Transaction Processing. There are two common frameworks,
CICS and IMS, and both are complicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay. Big Breath. What do we *DO*?&lt;/p&gt;
&lt;p&gt;Here's the free consulting part.&lt;/p&gt;
&lt;p&gt;You have to run the new and old side-by-side until you're sick of the
errors and poor performance of the old machine.&lt;/p&gt;
&lt;p&gt;You have to migrate incrementally, one app at a time.&lt;/p&gt;
&lt;p&gt;It's hellishly expensive to positively determine what the COBOL
really did. You can't easily do a &amp;quot;clean-room&amp;quot; conversion by writing
intermediate specifications. You must read the COBOL and rewrite it
into Python (or Java or Scala or whatever.)&lt;/p&gt;
&lt;p&gt;You cannot unit test your way to success here, because you never
really knew what the COBOL does/did. All you can do is extract
example records and use those to build Gherkin-language acceptance
tests using a template like this. GIVEN a source document WHEN the
app runs THEN the output document matches the example.&lt;/p&gt;
&lt;p&gt;In effect, you're going to do TDD on the COBOL, replacing COBOL with
Python essentially 1-for-1 until you have a test suite that passes.&lt;/p&gt;
&lt;p&gt;Don't do this alphabetically, BTW.&lt;/p&gt;
&lt;p&gt;The processing graph for COBOL will include three essential design
patterns for programs. &amp;quot;Edit&amp;quot; programs validate and possibly merge
input files. &amp;quot;Update&amp;quot; programs will apply changes to master files or
databases. &amp;quot;Report&amp;quot; programs will produce useful reports and feeds
for reporting systems that involve yet more data derivation and
merging.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Find the updates. Convert them first. They will involve the most
knowledge capture, A/K/A &amp;quot;Business Logic.&amp;quot;  There will be a lot of
special cases and exceptions. You will find latent bugs that have
always been there.&lt;/li&gt;
&lt;li&gt;Convert the programs that produce files for the updates, working
forward in the graph.&lt;/li&gt;
&lt;li&gt;The &amp;quot;reporting&amp;quot; is generally a proper DAG, and should be easier to
deal with than the updates and edits. You never know, but the
reporting apps are filled with redundancy. Tons of reporting
programs are minor variations on each other, often built as
copy-pasta from some original text and then patched haphazardly.
Most of them can be replaced with a tool to emit CSV files as an
interim step.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each converted application requires two new steps injected into the
COBOL batch jobs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Before an update runs, the files are pushed to some place where
they can be downloaded.&lt;/li&gt;
&lt;li&gt;The app runs as it always had. For now.&lt;/li&gt;
&lt;li&gt;After the update, the results are pushed, also.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This changes merely slow things down with file transfers. It provides
fodder for parallel testing.&lt;/p&gt;
&lt;p&gt;Then.&lt;/p&gt;
&lt;p&gt;Two changes are made so the job now looks like this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Before an update runs, the files are pushed to some place where
they can be downloaded. (No change here.)&lt;/li&gt;
&lt;li&gt;Kill time polling the file location, waiting for the file to be
created externally. (The old app is still around. We could run it
if we wanted to.)&lt;/li&gt;
&lt;li&gt;After the update, download the results from the external location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This file-copy-and-parallel-run dance can, of course, be optimized if
you take whole streams of edit-update processing and convert them as
a whole.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="yes-but-the-cobol-is-complicated"&gt;
&lt;h2&gt;Yes, But, The COBOL Is Complicated&lt;/h2&gt;
&lt;p&gt;No. It's not.&lt;/p&gt;
&lt;p&gt;It's a lot of code working around language limitations. There aren't
many design patterns, and they're easy to find.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Read, Validate, Write. The validation is quirky, but generally
pretty easy to understand. In the long run, the whole thing is a
JSONSchema document. But for now, there may be some data cleansing
or transformation steps buried in here.&lt;/li&gt;
&lt;li&gt;Merged Reading. Execute the Transaction. Write. The transaction
execution updates are super important. These are the state changes
in object classes. They're often entangled among bad
representations of data.&lt;/li&gt;
&lt;li&gt;Cached Data. A common performance tweak is to read reference data
(&amp;quot;Lookups&amp;quot;) into an array. This was often hellishly complex
because... well... COBOL. It was a Python dict, for the love of
God, there's nothing to it. Now. Then. Well. It was tricky.&lt;/li&gt;
&lt;li&gt;Accumulators. Running totals and counts were essential for audit
purposes. The updates could be hidden anywhere. Anywhere. Not part
of the overall purpose, but necessary anyway.&lt;/li&gt;
&lt;li&gt;Parameter Processing. This can be quirky. Some applications had a
standard dataset with parameters like the as-of-date for the
processing. Some applications prompted an operator. Some had other
quirky ways of handling the parameters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The bulk of the code isn't very complex. It's quirky. But not
complicated.&lt;/p&gt;
&lt;p&gt;The absolute worst applications were summary reports with a
hierarchy. We called these &amp;quot;control break&amp;quot; reports. I don't know why.
Each level of the hierarchy had its own accumulators. The data had to
be properly sorted. It was complicated.&lt;/p&gt;
&lt;p&gt;Do Not Convert these. Find any data cleansing or transformation and
simply pour the data into a CSV file and let the users put it into a
spreadsheet.&lt;/p&gt;
&lt;p&gt;Right now. We have to keep the lights on. COBOL apps have to be kept
operational to manage unemployment benefits through the pandemic.&lt;/p&gt;
&lt;p&gt;But once we're out of this. We need to get rid of the COBOL.&lt;/p&gt;
&lt;p&gt;And we need to recognize that all code expires and we need to plan
for expiration.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="good-response-https-slott-softwarearchitect-bl"&gt;
&lt;h2&gt;[Good response](&lt;a class="reference external" href="https://slott-softwarearchitect.bl"&gt;https://slott-softwarearchitect.bl&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Tom Roche&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-07 23:13:45.372000-04:00&lt;/p&gt;
&lt;p&gt;[Good response]({filename}/blog/2020/04/2020_04_07-why_isnt_cobol_dead_or_why_didnt_it_evolve.rst),
thanks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="great-post-or-great-sounding-anyway-as-i"&gt;
&lt;h2&gt;Great post ... or great-sounding anyway, as I'...&lt;/h2&gt;
&lt;p&gt;Tom Roche&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-07 15:36:42.299000-04:00&lt;/p&gt;
&lt;p&gt;Great post ... or great-sounding anyway, as I'll admit to having minimal
exposure to COBOL. But since you seem to have had lots, perhaps you can
answer this question: Why didn't COBOL evolve more successfully?
I'm asking because I have had significant exposure to FORTRAN, the other
surviving-at-scale 1st-generation language. By which I mean, there is
still a lot of it &amp;quot;in production&amp;quot; in engineering and science, as opposed
to&lt;/p&gt;
&lt;p&gt;* Lisp: while it continues to be popular in some non-academic niches
(e.g., Emacs), there is (IIRC, ICBW) no economically-significant
long-lived software coded in any Lisp dialect.&lt;/p&gt;
&lt;p&gt;* Algol: which is all-the-way dead.
FORTRAN, OTOH, has survived precisely because it--and more importantly,
related tools, esp compilers--has evolved to solve/overcome many
(certainly not all!) of the sorts of pain-points you describe, while
retaining the significant performance edge that (IMHO, ICBW) prevents
challengers (e.g., Python) from dislodging it for tasks like (e.g.)
running dynamical models (esp weather forecasting).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="context-i-spent-several-years-early-in-my-career"&gt;
&lt;h2&gt;(Context: I spent several years early in my career...&lt;/h2&gt;
&lt;p&gt;Justin du Coeur&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-12 18:03:13.064000-04:00&lt;/p&gt;
&lt;p&gt;(Context: I spent several years early in my career building a system in
COBOL. I've since been through about forty languages, and am now a Scala
geek.)&lt;/p&gt;
&lt;p&gt;Huh. The interesting corollary of this approach (which, I agree, is
likely the only practical way to go in many cases) is that step one can
probably be done *automatically*. That is, I would do this as:&lt;/p&gt;
&lt;p&gt;1. Write a COBOL-to-X translator, where X is a more-modern programming
language that -- very important -- provides good refactoring tools. (I
would of course use Scala; given that Scala is actually fairly popular
in the finance world, that might actually be right in some cases.) Along
with this, you'd need to write the necessary libraries and adapters for
the data and environment.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Test the hell out of it, the way you describe.&lt;/li&gt;
&lt;li&gt;Start refactoring the resulting monstrosity.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The heart of the current problem isn't just that COBOL is obsolete, it's
that it predates the notion that refactoring *matters*; the result is
that making incremental improvements is unreasonably hard. If you did a
literal translation to a better language, the resulting code would still
be horrible, but you would have a path forward.&lt;/p&gt;
&lt;p&gt;And yes, I would bet that writing an automatic translator isn't all that
hard, in the grand scheme of things. Trying to *analyze* COBOL code
properly is likely impossible, but simply translating it, warts and all,
is simply a routine cross-compiler -- a substantial project, but not a
huge one.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="COBOL"></category><category term="#python"></category><category term="data migration"></category></entry><entry><title>70% of Modern Python Cookbook 2e...</title><link href="https://slott56.github.io/2020_03_17-70_of_modern_python_cookbook_2e.html" rel="alternate"></link><published>2020-03-17T08:00:00-04:00</published><updated>2020-03-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-03-17:/2020_03_17-70_of_modern_python_cookbook_2e.html</id><summary type="html">&lt;p&gt;At this point, we're closing in on 9/13 (70%) of the way through the
2nd edition rewrite.&lt;/p&gt;
&lt;p&gt;Important changes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;/ol&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;First.&lt;/dt&gt;
&lt;dd&gt;Every single class, method, or function has to be changed to
add hints. Every. Single. One. This is kind of huge. The book …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;At this point, we're closing in on 9/13 (70%) of the way through the
2nd edition rewrite.&lt;/p&gt;
&lt;p&gt;Important changes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;/ol&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;First.&lt;/dt&gt;
&lt;dd&gt;Every single class, method, or function has to be changed to
add hints. Every. Single. One. This is kind of huge. The book is
based on over 13,000 lines of example code in 157 files. A big bunch
of rewrites.&lt;/dd&gt;
&lt;dt&gt;Second.&lt;/dt&gt;
&lt;dd&gt;Some things were either wrong or at least sketchy. These
rewrites are important consequences of using type hints in the first
place. If you can't make &lt;strong&gt;mypy&lt;/strong&gt; see things your way, then perhaps
your way needs rework.&lt;/dd&gt;
&lt;dt&gt;Third.&lt;/dt&gt;
&lt;dd&gt;Dataclasses, frozen dataclasses, and NamedTuples have some
nuanced overlapping use cases. Frequently, they differ only by small
type hint changes.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I hate to provide useless non-advice like &amp;quot;try them and see which
works for you.&amp;quot; However, there's only so much room to try and beat
out a detailed list of consequences of each alternative. Not every
decision has a clear, prescriptive, &amp;quot;do this and you'll be happy.&amp;quot;
Further, I doubt any reader needs detailed explanations of
*potential* performance consequences of mutable vs. immutable
objects.&lt;/p&gt;
&lt;p&gt;Also. I'm very happy cutting back on the overwrought, detailed
explanations. This is (a) not the only book on Python, and (b) not my
only book. When I started the first drafts 20 years ago, I wrote as
though this was my &lt;em&gt;magnum opus&lt;/em&gt;, a lifetime achievement.  A Very Bad
Idea (VBI™).&lt;/p&gt;
&lt;p&gt;This is a resource for people who want more depth. At work, I spend
time coaching people who call themselves advanced beginners. The time
spent with them has helped me understand my audience a lot better,
and stuck to useful exposition of the language features.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category><category term="modern python cookbook"></category></entry><entry><title>Stingray Reader Pervasively Bad Decision</title><link href="https://slott56.github.io/2020_02_25-stingray_reader_pervasively_bad_decision.html" rel="alternate"></link><published>2020-02-25T08:00:00-05:00</published><updated>2020-02-25T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-02-25:/2020_02_25-stingray_reader_pervasively_bad_decision.html</id><summary type="html">&lt;p&gt;I made some bad decisions when I wrote this a few years
ago: &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;. Really bad. And.
Recently, I've burdened myself with conflicting goals. Ugh.&lt;/p&gt;
&lt;p&gt;I need to upgrade to Python 3.8, and add type hints. This exposed
somes badness.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="{filename/blog/2020/01/2020_01_31-stingray_reader_rewrite.rst"&gt;Stingray Reader Rewrite&lt;/a&gt; for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I made some bad decisions when I wrote this a few years
ago: &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;. Really bad. And.
Recently, I've burdened myself with conflicting goals. Ugh.&lt;/p&gt;
&lt;p&gt;I need to upgrade to Python 3.8, and add type hints. This exposed
somes badness.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="{filename/blog/2020/01/2020_01_31-stingray_reader_rewrite.rst"&gt;Stingray Reader Rewrite&lt;/a&gt; for some status.&lt;/p&gt;
&lt;p&gt;The very first version(s) of this were expeditious solutions to some
separate-but-related problems. Spreadsheet processing was an important
thing for me f. Fixed-format file versions of spreadsheets showed up
once in a while mixed with XLS and CSV files. Separately, COBOL code
analysis was a thing I'd been involved in going back to the turn of
the century.&lt;/p&gt;
&lt;p&gt;The two overlap. A lot.&lt;/p&gt;
&lt;p&gt;The first working versions of apps to process COBOL data in Python
relied on a somewhat-stateful representation of the COBOL DDE (Data
Definition Element.) The structure had to be visited more than once to
figure out size, offset, and dimensionality. We'll talk about this
some more.&lt;/p&gt;
&lt;p&gt;A slightly more clever algorithm would leverage the essential parsing
as a kind of tree walk, pushing details down into children and
summarizing up into the parent when the level number changed. It
didn't seem necessary at the time.&lt;/p&gt;
&lt;div class="section" id="today"&gt;
&lt;h2&gt;Today&lt;/h2&gt;
&lt;p&gt;I've been working for almost three weeks on trying to disentangle the
original DDE's from the newer schema. I've been trying to invert the
relationships so a DDE exists independently of a schema attribute.
This means some copy-and-paste of data between the DDE source and the
more desirable and general schema definition.&lt;/p&gt;
&lt;p&gt;It turns out that some design decisions can be pervasively bad. Really
bad-foundation-wrecks-the-whole-house kind of bad.&lt;/p&gt;
&lt;p&gt;At this point, I &lt;strong&gt;think&lt;/strong&gt; I've teased apart the root cause problem.
(Of course, you never know until you have things fixed.)&lt;/p&gt;
&lt;p&gt;For the most part, this is a hierarchical schema. It's modeled nicely
by JSONSchema or XSD. However. There are two additional, huge problems
to solve.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REDEFINES&lt;/strong&gt;. The first huge problem is a COBOL definition can
redefine another field. I'm not sure about the directionality of the
reference. I know many languages require things be presented in
dependency order: a base definition is provided  lexically first and
all redefinitions are subsequent to it. Rather than depend on order of
presentation, it seems a little easier to make a &amp;quot;reference
resolution&amp;quot; pass. This plugs in useful references from items to the
things they redefine, irrespective of any lexical ordering of the
definitions.&lt;/p&gt;
&lt;p&gt;This means we data can only be processed strictly lazily. A given
block of bytes may have multiple, conflicting interpretations. It is,
in a way, a free union of types. In some cases, it's a discriminated
union, but the discriminating value is not a formal part of the
specification. It's part of the legacy COBOL code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OCCURS DEPENDING ON&lt;/strong&gt;. The second huge problem is the number of
elements in an array can depend on another field in the current
record. In the common happy-path cases, occurrences are fixed. Having
fixed occurrences means sizes and offsets can be computed as soon as
the REDEFINES are sorted out.&lt;/p&gt;
&lt;p&gt;Having occurrences depending on data means sizes and offsets cannot be
computed until some data is present. The most general case, then,
means settings sizes and offsets uniquely for each row of data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="current-release"&gt;
&lt;h2&gt;Current Release&lt;/h2&gt;
&lt;p&gt;The current release (4.5) handles the ODO, size, and offset
computation via a stateful DDE object.&lt;/p&gt;
&lt;p&gt;Yes. You read that right. There are stateful values in the DDE. The
values are adjusted on a row-by-row basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tomorrow"&gt;
&lt;h2&gt;Tomorrow&lt;/h2&gt;
&lt;p&gt;There's got to be a better way.&lt;/p&gt;
&lt;p&gt;Part of the problem has been conflicting goals.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Minimal tweaks required to introduce type hints.&lt;/li&gt;
&lt;li&gt;Minimal tweaks to break the way a generic schema depended on the DDE
implementation. This had to be inverted to make the DDE and generic
schema independent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;minimal tweaks&lt;/strong&gt; idea is really bad. Really bad.&lt;/p&gt;
&lt;p&gt;The intent was to absolutely prevent breaking the demo programs. I
may still be able to achieve this, but... There needs to be a clean
line between the exposed work-book like functionality, and some
behind the scenes COBOL DDE processing.&lt;/p&gt;
&lt;p&gt;I now think it's essential to gut two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Building a schema from the DDE. This is a (relatively) simple
transformation from the COBOL-friendly source model to a generic,
internal model that's compatible with JSONSchema or XSD. The
simple attributes useful for workbooks require some additional
details for dimensionality introduced by COBOL.&lt;/li&gt;
&lt;li&gt;Navigating to the input file bytes and creating Workbook Cell
objects in a way that fits with the rest of the Workbook
abstraction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The happy path for Cell processing is more-or-less by attribute
name: row.get('attribute').  This changes in the presence of COBOL
OCCURS clause items. We have to add an index.
row.get('ARRAY-ITEM', index=2) is the Python version of COBOL's
ARRAY-ITEM(3).&lt;/p&gt;
&lt;p&gt;The COBOL variable names *could* be mapped to Python names, and we
*could* overload __getitem__() so that row.array_item[3] could be
valid Python to fetch a value.&lt;/p&gt;
&lt;p&gt;But nope. COBOL has 1-based indexing, and I'm not going to hide that.
COBOL has a global current instance of the row, and I'm not going to
work with globals.&lt;/p&gt;
&lt;p&gt;So. Where do I stand?&lt;/p&gt;
&lt;p&gt;I'm about to start gutting. Some of the DDE size-and-offset (for a
static occurrences)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="Design Principles"></category><category term="object-oriented design"></category><category term="type hints"></category></entry><entry><title>Interesting Data Restructuring Problem</title><link href="https://slott56.github.io/2020_02_18-interesting_data_restructuring_problem.html" rel="alternate"></link><published>2020-02-18T20:35:00-05:00</published><updated>2020-02-18T20:35:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-02-18:/2020_02_18-interesting_data_restructuring_problem.html</id><summary type="html">&lt;p&gt;This seemed like an interesting problem. I hope this isn't someone's
take-home homework or an interview question. It seemed organic enough
when I found out about it.&lt;/p&gt;
&lt;p&gt;Given a document like this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
doc = {
    &amp;quot;key&amp;quot;: &amp;quot;the key&amp;quot;,
    &amp;quot;tag1&amp;quot;: [&amp;quot;list&amp;quot;, &amp;quot;of&amp;quot;, &amp;quot;values&amp;quot;],
    &amp;quot;tag2&amp;quot;: [&amp;quot;another&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;here&amp;quot;],
    &amp;quot;tag3&amp;quot;: [&amp;quot;lorem&amp;quot;, &amp;quot;ipsum&amp;quot;, &amp;quot;dolor&amp;quot;],
}
&lt;/pre&gt;
&lt;p&gt;We want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This seemed like an interesting problem. I hope this isn't someone's
take-home homework or an interview question. It seemed organic enough
when I found out about it.&lt;/p&gt;
&lt;p&gt;Given a document like this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
doc = {
    &amp;quot;key&amp;quot;: &amp;quot;the key&amp;quot;,
    &amp;quot;tag1&amp;quot;: [&amp;quot;list&amp;quot;, &amp;quot;of&amp;quot;, &amp;quot;values&amp;quot;],
    &amp;quot;tag2&amp;quot;: [&amp;quot;another&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;here&amp;quot;],
    &amp;quot;tag3&amp;quot;: [&amp;quot;lorem&amp;quot;, &amp;quot;ipsum&amp;quot;, &amp;quot;dolor&amp;quot;],
}
&lt;/pre&gt;
&lt;p&gt;We want a document like this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
doc = {
    &amp;quot;key&amp;quot;: &amp;quot;the key&amp;quot;,
    &amp;quot;values&amp;quot;: [
        {&amp;quot;tag1&amp;quot;: &amp;quot;list&amp;quot;, &amp;quot;tag2&amp;quot;: &amp;quot;another&amp;quot;, &amp;quot;tag3&amp;quot;: &amp;quot;lorem&amp;quot;},
        {&amp;quot;tag1&amp;quot;: &amp;quot;of&amp;quot;, &amp;quot;tag2&amp;quot;: &amp;quot;list&amp;quot;, &amp;quot;tag3&amp;quot;: &amp;quot;ipsum&amp;quot;},
        {&amp;quot;tag1&amp;quot;: &amp;quot;values&amp;quot;, &amp;quot;tag2&amp;quot;: &amp;quot;here&amp;quot;, &amp;quot;tag3&amp;quot;: &amp;quot;dolor&amp;quot;},
    ]
}
&lt;/pre&gt;
&lt;p&gt;In effect, rotating the structure from &lt;tt class="docutils literal"&gt;Dict[str, List[Any]]&lt;/tt&gt; to
&lt;tt class="docutils literal"&gt;List[Dict[str, Any]]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Bonus, we need to limiting the rotation to those keys with a value of
&lt;tt class="docutils literal"&gt;List[Any]&lt;/tt&gt;, ignoring keys with atomic values (int, str, etc.).&lt;/p&gt;
&lt;div class="section" id="step-1-key-partitioning"&gt;
&lt;h2&gt;Step 1. Key Partitioning&lt;/h2&gt;
&lt;p&gt;We need to distinguish the keys to be rotated from the other keys in
the dict.&lt;/p&gt;
&lt;p&gt;We start with &lt;tt class="docutils literal"&gt;Dict[str, Union[List[Any], Any]]&lt;/tt&gt;. We need to
distinguish the two subtypes in the union.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from itertools import filterfalse
list_of_values = lambda x: isinstance(doc[x], list)
lov_keys = list(filter(list_of_values, doc.keys()))
non_lov_keys = list(filterfalse(list_of_values, doc.keys()))
&lt;/pre&gt;
&lt;p&gt;This gets two disjoint subsets of keys: those which have a list and
all the others. The others, presumably, are strings or integers or
something irrelevant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="list-lengths"&gt;
&lt;h2&gt;List lengths&lt;/h2&gt;
&lt;p&gt;There's no requirement for the lists to be the same lengths. We have
three choices here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;insist on uniformity,&lt;/li&gt;
&lt;li&gt;truncate the long ones,&lt;/li&gt;
&lt;li&gt;pad the short ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll opt for uniformity in this example. Truncating is what
&lt;tt class="docutils literal"&gt;zip()&lt;/tt&gt; normally does. Padding is what &lt;tt class="docutils literal"&gt;itertools.zip_longest()&lt;/tt&gt;
does.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
lengths = (len(doc[k]) for k in lov_keys)
sample = next(lengths)
assert all(l == sample for l in lengths), &amp;quot;Inconsistent lengths&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Some folks don't like using &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; for this. This can be a more
elaborate &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;if-raise&lt;/span&gt; ValueError()&lt;/tt&gt; if that's necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-zip-to-merge-data-values"&gt;
&lt;h2&gt;Use zip() to merge data values&lt;/h2&gt;
&lt;p&gt;We have several &lt;tt class="docutils literal"&gt;List[Any]&lt;/tt&gt; instances in the document. The
intermediate goal is a &lt;tt class="docutils literal"&gt;List[Tuple[Any, &lt;span class="pre"&gt;...]]&lt;/span&gt;&lt;/tt&gt; structure where the
items from each tuple are chosen from the source lists. This gets us
a sequence of tuples that have parallel selections of items from each
of the source lists.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;zip(list, list)&lt;/tt&gt; function produces pairs from each of the two
lists. In our case, we have n lists in the original document. A
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zip(*lists)&lt;/span&gt;&lt;/tt&gt; will produce a sequence of items selected from each
list.&lt;/p&gt;
&lt;p&gt;Here's what it looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
list(zip(*(doc[k] for k in lov_keys)))
&lt;/pre&gt;
&lt;p&gt;We can also use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zip(key-list,&lt;/span&gt; &lt;span class="pre"&gt;value-list)&lt;/span&gt;&lt;/tt&gt; to make a list of
key-value pairs from a tuple of the keys and a tuple of values.
&lt;tt class="docutils literal"&gt;zip(Tuple[Any, &lt;span class="pre"&gt;...],&lt;/span&gt; Typle[Any, &lt;span class="pre"&gt;...]])&lt;/span&gt;&lt;/tt&gt; gives us a
&lt;tt class="docutils literal"&gt;List[Tuple[Any, Any]]&lt;/tt&gt; structure. These objects can be turned into
dictionaries with the &lt;tt class="docutils literal"&gt;dict()&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
list(dict(zip(lov_keys, row)) for row in zip(*(doc[k] for k in lov_keys)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="assemble-the-parts"&gt;
&lt;h2&gt;Assemble the parts&lt;/h2&gt;
&lt;p&gt;The final document, then, is built from untouched keys and touched
keys.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
d1 = {
    k: doc[k] for k in non_lov_keys
}
d2 = {
    &amp;quot;values&amp;quot;: list(dict(zip(lov_keys, row)) for row in zip(*(doc[k] for k in lov_keys)))
}
d1.update(d2)
&lt;/pre&gt;
&lt;p&gt;It might be slightly easier to &amp;quot;somehow&amp;quot; build this as s single
dictionary, but the two subsets of keys make it seem more sensible to
build the resulting document in two parts.&lt;/p&gt;
&lt;p&gt;The code I was asked to comment on was quite complex. It built a
large number of intermediate structures rather than building a
&lt;tt class="docutils literal"&gt;List[Dict]&lt;/tt&gt; using a list comprehension.&lt;/p&gt;
&lt;p&gt;What's important about this problem is the complexity of the list
comprehension. In particular, the keys are used twice in the
comprehension. One use extracts the source lists from the original
document. The second use attaches the key to each value from the
original list.&lt;/p&gt;
&lt;p&gt;It almost seems like the Python 3.8 &amp;quot;Walrus&amp;quot; operator might be a
handy way to shrink this code down from about 14 lines. I'm not sure
it's helpful to make this any shorter. Indeed, I'm not 100% sure this
compact form is really optimal. The fact that I had to expand things
as part of an explanation suggests that separate lines of code are as
important as separate subsections of this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="minor-typo-ziplongest-should-be-zip-longest"&gt;
&lt;h2&gt;Minor typo: ziplongest should be zip_longest&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-02-14 09:15:44.588000-05:00&lt;/p&gt;
&lt;p&gt;Minor typo: ziplongest should be zip_longest
&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest"&gt;https://docs.python.org/3/library/itertools.html#itertools.zip_longest&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="#python"></category></entry><entry><title>Dictionary clear() as a code smell</title><link href="https://slott56.github.io/2020_02_06-dictionary_clear_as_a_code_smell.html" rel="alternate"></link><published>2020-02-06T16:50:00-05:00</published><updated>2020-02-06T16:50:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-02-06:/2020_02_06-dictionary_clear_as_a_code_smell.html</id><summary type="html">&lt;p&gt;Using the clear() method of a dict isn't *wrong*. But. The reasons
have to be investigated. I got a question about this code not working
&amp;quot;properly.&amp;quot; (&amp;quot;Properly&amp;quot;? Seems too vague to be useful.)&lt;/p&gt;
&lt;p&gt;Here's a summary of the example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
final_list = []
temp_dict = {}
for obj in some_source:
    cool_function(obj, temp_dict)
    final_list.append …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Using the clear() method of a dict isn't *wrong*. But. The reasons
have to be investigated. I got a question about this code not working
&amp;quot;properly.&amp;quot; (&amp;quot;Properly&amp;quot;? Seems too vague to be useful.)&lt;/p&gt;
&lt;p&gt;Here's a summary of the example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
final_list = []
temp_dict = {}
for obj in some_source:
    cool_function(obj, temp_dict)
    final_list.append(temp_dict)
    temp_dict.clear()  # Ready for reuse, right?
&lt;/pre&gt;
&lt;p&gt;This can't work.&lt;/p&gt;
&lt;p&gt;(Bonus points if you suspect that list.append() is a smell, too. There
may be a list comprehension solution that's tidier than this.)&lt;/p&gt;
&lt;p&gt;It's not always easy to get to a succinct statement of what doesn't
work &amp;quot;properly,&amp;quot; or what's confusing about the Python list structure.
Getting useful information can be hard. Why?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some programmers are &amp;quot;Assumptions First&amp;quot; kind of people, and their
complaint is often &amp;quot;doesn't match my assumption&amp;quot; not &amp;quot;doesn't
actually work.&amp;quot;&lt;/li&gt;
&lt;li&gt;Some people live in &amp;quot;All Details Matter&amp;quot; world. Rather than create
the smallest example of code that's confusing, they send the
*entire* project. The problem is buried in a log, wrapped with &amp;quot;Why
is the list of dictionaries not being properly updated?&amp;quot; In an email
that provides background details. For a Trello story that links to
background details. Details. None of which point to the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;Properly?&amp;quot; What does that even mean?&lt;/p&gt;
&lt;p&gt;Confronted with hundreds of lines of impenetrable code, I asked for a
definition of &amp;quot;properly&amp;quot; and got these exact seven words: &amp;quot;Properly is
defined as correctly or satisfactorily.&amp;quot;&lt;/p&gt;
&lt;p&gt;So...&lt;/p&gt;
&lt;p&gt;They have no idea what's wrong, can't summarize the code that's
broken, and it's my fault because I'm the Python guru.&lt;/p&gt;
&lt;div class="section" id="why-won-t-my-code-work"&gt;
&lt;h2&gt;Why Won't My Code Work?&lt;/h2&gt;
&lt;p&gt;The short answer is &amp;quot;Because You're Making an Assumption.&amp;quot;&lt;/p&gt;
&lt;p&gt;Of course, anyone who puts their assumptions first is as blind to
their assumptions as we are to the air that surrounds us. Assumptions
are just there. All around them. They breathe their assumptions in and
out without seeing them.&lt;/p&gt;
&lt;p&gt;The long answer is Python uses references.&lt;/p&gt;
&lt;p&gt;If you apply the id() function to the items in the resulting
final_list, you'll see that it's reference after reference of one
object, temp_dict.  Not copies of individually populated dictionaries,
but multiple references to the same dictionary. The same dictionary
which was cleared and reloaded over and over again.&lt;/p&gt;
&lt;p&gt;The very first log, crammed with useless details, had output from
print() functions. It showed multiple copies of the same dict.&lt;/p&gt;
&lt;p&gt;Because they assumed Python is making copies, there was no explanation
for why the list of dictionaries was broken. Clearly, it couldn't be
in their code. They assume their code is correct. The only choice has
to be an undocumented mystery in Python. And I'm the Python guru, so
it's my problem.&lt;/p&gt;
&lt;p&gt;The presence of duplicates in the output meant &amp;quot;something&amp;quot; to them.
They could point it out as somehow wrong. But the idea that their
assumptions might be wrong? That was a nope.&lt;/p&gt;
&lt;p&gt;They wanted it to be the list object, final_list, which didn't append
dictionaries the way they assumed it would. They needed it to be a
Python internals problem. They needed it to be a bad documentation
problem. (Seriously. These convos have spun out of control in the
past.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;Using the clear() method of a dict may indicate the developer is
hoping Python shares copies, not references. Either add an explicit
copy() (or deepcopy.copy()) or fix things to create new, fresh
dictionaries each time. Objects are cheap. Why reuse them?&lt;/p&gt;
&lt;p&gt;(Indeed, an interesting side-bar question I did not ask is &amp;quot;In what
god-forsaken programming language does this 'clear-and-reuse' a data
structure even make sense? FORTRAN?)&lt;/p&gt;
&lt;p&gt;The list comprehension solution to this problem will have to wait.
Stay tuned. I want to disentangle the algorithmic design problem from
the &amp;quot;why aren't my assumptions correct?&amp;quot; problem..&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Stingray Reader Rewrite</title><link href="https://slott56.github.io/2020_01_31-stingray_reader_rewrite.html" rel="alternate"></link><published>2020-01-31T10:39:00-05:00</published><updated>2020-01-31T10:39:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-01-31:/2020_01_31-stingray_reader_rewrite.html</id><summary type="html">&lt;p&gt;See {filename}/blog/2020/01/2020_01_26-stingrayreader_upgrade.rst&lt;/p&gt;
&lt;p&gt;This drifted into some serious rethinking of bad design decisions.
(If someone else did this, I'd call it weak, and suggest
improvements. It was me. It was bad. I'm a bad programmer and I feel
bad about it.)&lt;/p&gt;
&lt;p&gt;An an example, there's this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See {filename}/blog/2020/01/2020_01_26-stingrayreader_upgrade.rst&lt;/p&gt;
&lt;p&gt;This drifted into some serious rethinking of bad design decisions.
(If someone else did this, I'd call it weak, and suggest
improvements. It was me. It was bad. I'm a bad programmer and I feel
bad about it.)&lt;/p&gt;
&lt;p&gt;An an example, there's this sketchy construct:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
some_data = {name: source[name] for name in the_names}
the_object = SomeClass(**some_data)
&lt;/pre&gt;
&lt;p&gt;The some_data dictionary could be called Dict[str, Any], but that's
unhelpful for letting &lt;strong&gt;mypy&lt;/strong&gt; check the consistency of data
structures. This is what was required:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FullAttr = TypedDict(&amp;quot;FullAttr&amp;quot;,
    {
        &amp;quot;name&amp;quot;: str,
        &amp;quot;offset&amp;quot;: int,
        &amp;quot;size&amp;quot;: int,
        &amp;quot;type&amp;quot;: str,
        &amp;quot;create&amp;quot;: Cell,
    },
    total=False
)
&lt;/pre&gt;
&lt;p&gt;This dictionary changes -- profoundly -- the relationship between
classes. The FullAttr type gives us an intermediary representation.
The SomeClass hierarchy has a flexible collection of attributes. We
can use this to uncouple some parsing operations from object factory
operations, using this minimal subset of definitions as a kind of
bridge between modules, both of which can be fully type-checked, but
still permit Python's duck-type flexibility.&lt;/p&gt;
&lt;div class="section" id="it-got-worse"&gt;
&lt;h2&gt;It Got Worse&lt;/h2&gt;
&lt;p&gt;Adding type hints to Stingray Reader required navigating some shoal
water created by a poor set of dependency decisions.&lt;/p&gt;
&lt;p&gt;The original, vague, concept was to have a Schema and Attribute
definition that could be shared by all the various readers. A schema
contains a number of attributes. Ideally, an attribute can be defined
by a sub-schema. This is how JSONSchema and XSD work.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;The Stingray Reader reads Workbooks with an extension to read COBOL.&lt;/p&gt;
&lt;p&gt;There are a bunch of extensions required.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The schema is loaded by a COBOL parser.&lt;/li&gt;
&lt;li&gt;The physical file formats require the possibility of EBCDIC -&amp;gt; Unicode conversion.&lt;/li&gt;
&lt;li&gt;Unlike ordinary workbooks, the record layouts have to be built
lazily. An ordinary workbook row is complete. Some physical
formats elide empty cells, but they're easy to replace with an
explicit empty cell. COBOL has a REDEFINES clause that means we
can't even attempt to parse the bytes for a row until they're
required by the app. There's no way -- from the data definition
alone -- to discern which of the redefines options will have valid
data. There's more, but you get the idea: COBOL is kind of
complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Versions 1 to 4 had a dumb-as-a-bag-of-hammers problem.&lt;/p&gt;
&lt;p&gt;The Schema and Attribute definitions where extended to depend on
COBOL implementation details.&lt;/p&gt;
&lt;p&gt;It works nicely because of duck typing and late binding of types.
Python's type hinting exposes the grotesque consequences of this
dependency.&lt;/p&gt;
&lt;p&gt;We tried several ways of reordering a bunch of definitions to remove
forward type references. It took almost an hour to realize the
circularity could not be removed trivially because of a circularity.
Two Attribute subclasses depended on COBOL features. And the COBOL
features had weakref references back to their Attributes.&lt;/p&gt;
&lt;p&gt;Crushing everything into a single, large module, worked to ease the
complications or circularity. But the essential interdependence needs
to be expunged.&lt;/p&gt;
&lt;p&gt;What has to happen next is to invert the relationship between
Attributes and COBOL details. This means two changes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Extending the Attribute class hierarchy to contain just enough
information to cover the COBOL complications.&lt;/li&gt;
&lt;li&gt;Changing the function that builds an Attribute definition from the
COBOL source so it copies details into the Attribute. The COBOL
detail needs to be little more than the description of the
property.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This isn't easy. But. 187 test cases and a TOX setup makes it a
reasonable effort.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;I can finally look seriously at converting between JSON Schema and
COBOL.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>StingrayReader Upgrade</title><link href="https://slott56.github.io/2020_01_26-stingrayreader_upgrade.html" rel="alternate"></link><published>2020-01-26T12:27:00-05:00</published><updated>2020-01-26T12:27:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-01-26:/2020_01_26-stingrayreader_upgrade.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's time to add type hints.&lt;/div&gt;
&lt;div class="line"&gt;And.&lt;/div&gt;
&lt;div class="line"&gt;Learn some interesting lessons.&lt;/div&gt;
&lt;div class="line"&gt;Here's the interesting problem:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
some_data = {name: source[name] for name in the_names}
the_object = SomeClass(**some_data)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;While valid, this concerns &lt;strong&gt;mypy&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;The point here is to have a flexible source of data, source. Perhaps …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's time to add type hints.&lt;/div&gt;
&lt;div class="line"&gt;And.&lt;/div&gt;
&lt;div class="line"&gt;Learn some interesting lessons.&lt;/div&gt;
&lt;div class="line"&gt;Here's the interesting problem:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
some_data = {name: source[name] for name in the_names}
the_object = SomeClass(**some_data)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;While valid, this concerns &lt;strong&gt;mypy&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;The point here is to have a flexible source of data, source. Perhaps
this is a spreadsheet row, or a complex JSON/YAML-formatted document
with optional or irrelevant fields. The short list of relevant names
is in the_names.  Ideally, this list of names matches the keyword args
of SomeClass.&lt;/div&gt;
&lt;div class="line"&gt;This gives &lt;strong&gt;mypy&lt;/strong&gt; fits because there's no way to match the
dictionary with the object's parameters.&lt;/div&gt;
&lt;div class="line"&gt;We have two paths forward.&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Eliminate the intermediate dictionary. Use SomeClass(x=source['x'],
y=source['y'], ... etc.)&lt;/li&gt;
&lt;li&gt;Consider using a TypedDict for the intermediate dictionary. But. Then
the dictionary's types must be kept in sync with the SomeClass
definition, which may be a little crazy.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Item 2 isn't as crazy as it sounds, though. The SomeClass definition
has a **kwargs option, allowing extra attributes to be set. This is,
perhaps also crazy. But, the framework needs to drag around extra
attributes for the application's benefit.&lt;/div&gt;
&lt;div class="line"&gt;A possibility is to do away with **kwargs, and replace it with other:
Dict[Any, Any]. This cuts down on the expressivity of the framework.
Now we support SomeClass.app_name. This change would mean we'd have
SomeClass.other['app_name']. While possibly better for &lt;strong&gt;mypy&lt;/strong&gt;, I
don't think it's ideal for users.&lt;/div&gt;
&lt;div class="line"&gt;I can also rework SomeClass to use __getattribute__() to look into
self.other for extra attribute names.&lt;/div&gt;
&lt;div class="line"&gt;I'm very happy to have the rigorous static check. The rethinking is
helpful.&lt;/div&gt;
&lt;div class="line"&gt;(&amp;quot;Wait,&amp;quot; you say. &amp;quot;You didn't provide the recommended path forward.&amp;quot;
Correct.  I'll update.)&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>The Wrong Abstraction Problem</title><link href="https://slott56.github.io/2020_01_14-the_wrong_abstraction_problem.html" rel="alternate"></link><published>2020-01-14T08:00:00-05:00</published><updated>2020-01-14T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-01-14:/2020_01_14-the_wrong_abstraction_problem.html</id><summary type="html">&lt;p&gt;For the last week I've been working with some legacy code that reveals
a kind of problem I hadn't really seen before.&lt;/p&gt;
&lt;p&gt;I'm calling it the &lt;strong&gt;Wrong Abstraction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I want to contrast this with the &lt;strong&gt;Leaky Abstraction&lt;/strong&gt;, where
implementation details are revealed and raise havoc.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Wrong Abstraction&lt;/strong&gt; problem seems …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the last week I've been working with some legacy code that reveals
a kind of problem I hadn't really seen before.&lt;/p&gt;
&lt;p&gt;I'm calling it the &lt;strong&gt;Wrong Abstraction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I want to contrast this with the &lt;strong&gt;Leaky Abstraction&lt;/strong&gt;, where
implementation details are revealed and raise havoc.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Wrong Abstraction&lt;/strong&gt; problem seems to arise when a specification
is too technical. A detailed, code-like tangle of if-then-else becomes
its own problem. I'm guessing someone worked to detail &lt;strong&gt;all&lt;/strong&gt; the
technical considerations. The chosen format as code-like text was not
a great idea. The cyclomatic complexity of the specification is
through the roof. And the code reflects this failure to actually
capture anyone's underlying intent.&lt;/p&gt;
&lt;p&gt;Cue the gif from the office. &lt;a class="reference external" href="https://gph.is/1m89uqR"&gt;https://gph.is/1m89uqR&lt;/a&gt; Someone with
&amp;quot;people skills&amp;quot; tried to recast the business intent into technical
if-then-else.&lt;/p&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;p&gt;The context doesn't matter very much, but it can help people visualize
the problem.&lt;/p&gt;
&lt;p&gt;We're talking about validation rules. A document arrives, perhaps it's
source code, or perhaps it's a shopping cart, or perhaps it's a schema
definition. The document is validated according to some fairly
sophisticated rules.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There's the obvious syntax check: is it valid JSON or Python or
whatever the language is.&lt;/li&gt;
&lt;li&gt;There are isolated validity checks. Individual elements (statements,
items in the cart, subschemas) have to be valid.&lt;/li&gt;
&lt;li&gt;There are aggregate validity checks. Groups of items -- the cart
overall -- must satisfy some additional criteria. In our case, nine
additional rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the rules are complex. I think they original intent was
drafted by a committee. It's visible, and involves large piles of
money and potential lawsuits. Serious rules.&lt;/p&gt;
&lt;p&gt;There are at least two separate implementations, mostly in JavaScript.
(I'm not here to curse out JavaScript. The language has a lot of wat
-- &lt;a class="reference external" href="https://github.com/denysdovhan/wtfjs"&gt;https://github.com/denysdovhan/wtfjs&lt;/a&gt; -- but that's not the point.)&lt;/p&gt;
&lt;p&gt;So, you ask, where's the Wrongness?&lt;/p&gt;
&lt;p&gt;It's a vast gap between intent and implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mind-the-gap"&gt;
&lt;h2&gt;Mind the Gap&lt;/h2&gt;
&lt;p&gt;The source documents decompose the validation into 9 steps. There's an
explicit &amp;quot;all or nothing&amp;quot; disclaimer. That's nice.&lt;/p&gt;
&lt;p&gt;The code looks more-or-less like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
valid = True
for item in cart:
    for r in (Rule1, Rule2, Rule3, Rule4, ..., Rule9):
        if applies(r, item):
            valid = valid and r(item)
&lt;/pre&gt;
&lt;p&gt;It turns out, though, we don't really apply all 9 rules like this.
This is &lt;strong&gt;The Gap&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We actually have three types of items in the cart (or code or schema
or whatever.) One type item has a default, a hidden feature of rule 1.
It breaks down like this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rule 1 applies to an item of Type A. If the Type A item is omitted,
the default value will pass the Rule 1 check.&lt;/li&gt;
&lt;li&gt;Rule 2 applies to all the items of Type B. Only.&lt;/li&gt;
&lt;li&gt;Rules 3 to 8 apply to the items of Type C. Only. And they work in
pairs, 3-4, 5-6, 7-8.&lt;/li&gt;
&lt;li&gt;Rule 9 applies to a subset of items of Type C. The C9 subset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code with a nested &amp;quot;for all items&amp;quot; and &amp;quot;for all rules&amp;quot; is -- well --
wrong. It's flat-out lying about the validation rules and the objects
(and collections) being validated. It's lying to a level that seems
unconscionable to me. But. Maybe there's a reason.&lt;/p&gt;
&lt;p&gt;The validation is really something more like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
valid = Rule1(filter(lambda item: item.is_a, cart))
    and Rule2(filter(lambda item: item.is_b, cart))
    and all(
        r(x)
        for r in (Rule3, Rule4, Rule5, ..., Rule8)
        for x in filter(lambda item: item.is_c, cart)
    )
    and Rule9(filter(lambda item: item.is_c9, cart))
&lt;/pre&gt;
&lt;p&gt;This reflects the actual structure of item types and rule types
without wrapping them in a wrong abstraction.&lt;/p&gt;
&lt;p&gt;(It's actually *more* complex than this, but, this is enough to
expose the core issue.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-the-gap"&gt;
&lt;h2&gt;Why The Gap?&lt;/h2&gt;
&lt;p&gt;There are a number of causes. In part, the gap seems to reflect a
disconnect between &lt;strong&gt;intention&lt;/strong&gt; and &lt;strong&gt;implementation&lt;/strong&gt;. Indeed, this
seems to be an example of &lt;a class="reference external" href="http://www.melconway.com/Home/Conways_Law.html"&gt;Conway's
Law&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Any organization that designs a system (defined broadly) will
produce a design whose structure is a copy of the organization's
communication structure.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;I think the for item in cart: for rule in (Rule1, ..., Rule9):
structure reflects some intermediate design work between the
original intent and the developer who implemented the code.&lt;/p&gt;
&lt;p&gt;The extra layer of design work was a failed attempt to &amp;quot;simplify&amp;quot;
things for the developer. I can imagine the conversation.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;It's simple. There are 12 rules. Each rule applies
to each item.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Developer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;Rule one only seems to apply to Type A. So maybe
it's not simple.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;It's simple. Don't make it complex. Write an
'applicability' test. Evaluate the rule if it applies to the
item.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Developer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;So it's not trivially all rules against all items?
Could we associate subsets of rules with the separate item types?&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;No. You're making it complex; It's simply
evaluating all 12 rules against each item. If the rule applies to
the item type. Other than that, it's simple.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Developer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;Instead of the 'applicability test,' could we
group the rules?&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;No. You're making it complex.&amp;quot;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I also think the gap also reflects an inability (or a lack of
permission) to hack incrementally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="incremental-development"&gt;
&lt;h2&gt;Incremental Development&lt;/h2&gt;
&lt;p&gt;One of Python's strong suits is the ability to run code at the &amp;gt;&amp;gt;&amp;gt;
prompt. Confronted with a complex data structure and complex rules,
some of us will try different designs on for size as quickly as we
can. We hack out the essence of the code and see if it would make
sense in a tutorial explanation.&lt;/p&gt;
&lt;p&gt;I've darted down any number of dead-ends trying to get a sensible
abstraction that I can understand and explain. The idea is to write a
bit of code, mess around, and then decide to backtrack or push
forward. (For a lot of people, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber
ducking&lt;/a&gt; or
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pair_programming"&gt;pair programming&lt;/a&gt;
helps with this.)&lt;/p&gt;
&lt;p&gt;When you're only a few lines of code into the problem, it's easy and
fun to delete it all and start again. Or. It *should* be easy and
fun. Some folks worry about deleting bad code and starting over.&lt;/p&gt;
&lt;p&gt;I think the overall context didn't facilitate hacking around. The
documentation talks about creating mock documents (or carts or
collections) of items for testing purposes. I don't think anyone
tried that. I'm not sure they knew the feature was available. I think
they put the validation code into the framework, ran it in the
development environment, looked at the debugging logs, changed the
code, deployed, and ran things again until it worked. A long, painful
slog, where backtracking would be considered a horrible set-back.&lt;/p&gt;
&lt;p&gt;The complex &amp;quot;applies()&amp;quot; test has a surprising bunch of if statements
that don't seem to reflect the actual properties of the three types
of items. It seems to reflect an evolving series of guesses about
attributes that were present or absent.&lt;/p&gt;
&lt;p&gt;When I was younger, writing COBOL, PL/I, Fortran and the like, that's
how we worked. Run it. Look at logs. Run it again later in the day.
The long, slow development cycle meant that as soon as something
looked like it was working, we called the project 90% complete.&lt;/p&gt;
&lt;p&gt;This lead inexorably to the
&lt;a class="reference external" href="http://catb.org/jargon/html/N/Ninety-Ninety-Rule.html"&gt;ninety-ninety&lt;/a&gt;
rule.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The first 90% of the code accounts for the first 90% of the
development time. The remaining 10% of the code accounts for the
other 90% of the development time.”&lt;/blockquote&gt;
&lt;p&gt;Even if the abstraction is wrong. We've take 90% of the time to get
something that works. There's no fixing it, now. We have to ship
something, so we spend the next 90% of the time working around the
wrongness and filling in gaps that shouldn't have existed.&lt;/p&gt;
&lt;p&gt;A horrid development environment tends to prohibit refactoring. You
can't simply run the test suite with refactored code because the test
suite is neither fast nor fully automated. In this case, I don't
think it runs in a handy form on the desktop, but requires a
dedicated server. Without a Docker container for each developer, I
think the project gets paralyzed and stuck with icky code and me
doing a very expensive rewrite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;An utterly wrong abstraction seems have two root causes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Too many designers&lt;/li&gt;
&lt;li&gt;No ability to delete the garbage abstraction and start over with
something better&lt;/li&gt;
&lt;li&gt;No simple unit test environment to support refactoring&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="architecture"></category></entry></feed>