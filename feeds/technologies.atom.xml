<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>S.Lott -- Software Architect - Technologies</title><link href="https://slott56.github.io/" rel="alternate"></link><link href="/feeds/technologies.atom.xml" rel="self"></link><id>https://slott56.github.io/</id><updated>2023-06-27T09:00:00-04:00</updated><entry><title>any() and all() and Identity Elements</title><link href="https://slott56.github.io/2023-06-27-any_and_all_and_identity_elements.html" rel="alternate"></link><published>2023-06-27T09:00:00-04:00</published><updated>2023-06-27T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-06-27:/2023-06-27-any_and_all_and_identity_elements.html</id><summary type="html">&lt;p&gt;This was a surprising thing (for me) to see.
Surprising because -- after writing a book about functional programming,
I'd forgotten that some of the ideas are actually really new to people.&lt;/p&gt;
&lt;p&gt;(I've omitted the source of the quote because I want to reuse this
without worrying about link rot. Some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was a surprising thing (for me) to see.
Surprising because -- after writing a book about functional programming,
I'd forgotten that some of the ideas are actually really new to people.&lt;/p&gt;
&lt;p&gt;(I've omitted the source of the quote because I want to reuse this
without worrying about link rot. Some web sites have rocky futures.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;
Python tip:&lt;/p&gt;
&lt;p&gt;Be careful when using all()&lt;/p&gt;
&lt;p&gt;all() returns True for an empty sequence
&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seemed to be a surprise to the author. And a large number of people argued -- a few seemed vehement -- that Python is wrong here.&lt;/p&gt;
&lt;p&gt;When I pointed out this is the mathematical definition they argued that&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Programming isn't math. (This is demonstrably false. You may not have wide-ranging math skills, but programming very much is applied math.)&lt;/li&gt;
&lt;li&gt;The math is wrong. (Also false.)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="what-is-all"&gt;
&lt;h2&gt;What is all()?&lt;/h2&gt;
&lt;p&gt;First. What is &lt;tt class="docutils literal"&gt;all(x)&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;In effect it's &lt;tt class="docutils literal"&gt;reduce(and, x)&lt;/tt&gt;. Except, of course, there's no simple &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; operator. So, it's not &lt;strong&gt;exactly&lt;/strong&gt; that, but it's close enough.
We'll get to &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; in the next setion.&lt;/p&gt;
&lt;p&gt;Let's reason by analogy for a while, using &lt;cite&gt;sum()&lt;/cite&gt; and &lt;cite&gt;math.prod()&lt;/cite&gt;.
These are also &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; operations, but they work with numbers, not boolean values.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([1,2,3])
6
&amp;gt;&amp;gt;&amp;gt; prod([1,2,3])
6
&lt;/pre&gt;
&lt;p&gt;Okay. Using a perfect number like 6 is a bad example, isn't it?&lt;/p&gt;
&lt;p&gt;Here's a better example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([0, 1, 2])
3
&amp;gt;&amp;gt;&amp;gt; prod([0, 1, 2])
0
&lt;/pre&gt;
&lt;p&gt;No surprise, right?&lt;/p&gt;
&lt;p&gt;Here is a more fundamental definition of the &lt;tt class="docutils literal"&gt;sum()&lt;/tt&gt; function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from functools import reduce
&amp;gt;&amp;gt;&amp;gt; from operator import add, mul
&amp;gt;&amp;gt;&amp;gt; reduce(add, [0, 1, 2])
3
&lt;/pre&gt;
&lt;p&gt;In effect, &lt;tt class="docutils literal"&gt;sum = functools.partial(reduce, add)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This works for &lt;tt class="docutils literal"&gt;prod = functools.partial(reduce, mul)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It would work for &lt;tt class="docutils literal"&gt;any()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;all()&lt;/tt&gt; &lt;strong&gt;if&lt;/strong&gt; there was a simple operator in the
&lt;tt class="docutils literal"&gt;operator&lt;/tt&gt; module.&lt;/p&gt;
&lt;p&gt;There's an &lt;tt class="docutils literal"&gt;and_&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or_&lt;/tt&gt; definition in operator, but these are names for &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;,
which a bit-tweaking operations, only defined over integer values. They're &lt;strong&gt;not&lt;/strong&gt;
the general-purpose, short-circuiting &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operators.&lt;/p&gt;
&lt;p&gt;You could create a lambda for this. &lt;tt class="docutils literal"&gt;all = functools.partial(reduce, lambda a, b: a and b)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;All of this depends on the definition of &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-reduce"&gt;
&lt;h2&gt;What is reduce()?&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; function is sometimes described as  a &amp;quot;fold&amp;quot;.&lt;/p&gt;
&lt;p&gt;When we do &lt;tt class="docutils literal"&gt;reduce(add, [1, 2, 3])&lt;/tt&gt; it's essentially &lt;tt class="docutils literal"&gt;1 + 2 + 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We've folded the &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; operator into the sequence of values.&lt;/p&gt;
&lt;p&gt;When we do &lt;tt class="docutils literal"&gt;reduce(mul, [1, 2, 3])&lt;/tt&gt; it's a lot like we did &lt;tt class="docutils literal"&gt;1 * 2 * 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This folding idea also applies well to &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or&lt;/tt&gt;. We can fold logical operators into the sequence of values.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;all(x)&lt;/tt&gt; is (conceptually) &lt;tt class="docutils literal"&gt;reduce(and, x)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;x[0] and x[1] and &lt;span class="pre"&gt;x[2]...&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;any(y)&lt;/tt&gt; is (also, in concept) &lt;tt class="docutils literal"&gt;reduce(or, y)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;y[0] or y[1] or &lt;span class="pre"&gt;y[2]...&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;(We have to throw around conceptually, because there's no trivial &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operator.)&lt;/p&gt;
&lt;p&gt;So far, so good. This &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; hasn't introduced an complications, it's just a way of defining things
around the &amp;quot;fold&amp;quot; idea.&lt;/p&gt;
&lt;p&gt;What about empty sequences or iterables?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-initialization-problem"&gt;
&lt;h2&gt;The Initialization Problem&lt;/h2&gt;
&lt;p&gt;Here's the problem with our overly-simplistic use of Python's &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; reduce(add, [])
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty iterable with no initial value
&amp;gt;&amp;gt;&amp;gt; reduce(mul, [])
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty iterable with no initial value
&lt;/pre&gt;
&lt;p&gt;Failure.&lt;/p&gt;
&lt;p&gt;Here are the right answers:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([])
0
&amp;gt;&amp;gt;&amp;gt; prod([])
1
&lt;/pre&gt;
&lt;p&gt;The sum of an empty list is zero.&lt;/p&gt;
&lt;p&gt;The product of an empty list is 1.&lt;/p&gt;
&lt;p&gt;Similarly.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; any([])
False
&amp;gt;&amp;gt;&amp;gt; all([])
True
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;any()&lt;/tt&gt; function is a little bit like a sum. The &lt;tt class="docutils literal"&gt;all()&lt;/tt&gt; function is a little bit like
a product.&lt;/p&gt;
&lt;p&gt;I think that's why the &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; operator has precedence over the &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-what"&gt;
&lt;h2&gt;Wait, what?&lt;/h2&gt;
&lt;p&gt;Yes, the value of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all([])&lt;/span&gt;&lt;/tt&gt; is True and the value of the expression &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; is 1.&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;must&lt;/strong&gt; be true. It's not an implementation choice. It's a matter of definition.&lt;/p&gt;
&lt;p&gt;Roll back to the definition of &amp;quot;reduce&amp;quot; as &amp;quot;folding in an operator&amp;quot;.
(See &lt;a class="reference internal" href="#what-is-reduce"&gt;What is reduce()?&lt;/a&gt;, above.)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([1,&lt;/span&gt; 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;reduce(mul, [1, 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * 2 * 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; works and &lt;tt class="docutils literal"&gt;reduce(mul, [])&lt;/tt&gt; doesn't work. Something's wrong with &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This is a problem with the &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; function (as we used it above) not quite providing &lt;strong&gt;all&lt;/strong&gt; the features required by the &lt;tt class="docutils literal"&gt;sum()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;prod()&lt;/tt&gt; functions.&lt;/p&gt;
&lt;p&gt;Enter the initial value parameter for &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; reduce(mul, [], 1)
1
&lt;/pre&gt;
&lt;p&gt;Aha. This fixes the &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; problem. It's a little more complicated, but it's now correct.&lt;/p&gt;
&lt;p&gt;This means &lt;tt class="docutils literal"&gt;reduce(mul, [x, y, z], 1)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * x * y * z&lt;/tt&gt;.  The 1 is the multiplicative identity element and does nothing.&lt;/p&gt;
&lt;p&gt;This means &lt;tt class="docutils literal"&gt;reduce(mul, [x, y, z])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;x * y * z&lt;/tt&gt;. The 1 isn't needed because there's a value in the sequence.&lt;/p&gt;
&lt;p&gt;And &lt;tt class="docutils literal"&gt;reduce(mul, [], 1)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.  The multiplicative identity element is &lt;strong&gt;required&lt;/strong&gt; when the sequence is empty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consider-the-fold"&gt;
&lt;h2&gt;Consider the Fold&lt;/h2&gt;
&lt;p&gt;Where are we?&lt;/p&gt;
&lt;p&gt;Right.  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([1,&lt;/span&gt; 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * 1 * 2 * 3&lt;/tt&gt;. A multiplicateive identity element is provided.&lt;/p&gt;
&lt;p&gt;Therefore, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Note the delightful algebraic elegance of the fold definition.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2,&lt;/span&gt; 3, 4])&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2,&lt;/span&gt; 3]) * 4&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2])&lt;/span&gt; * 3 * 4&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt; * 2 * 3 * 4&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This is the reason why &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all([])&lt;/span&gt;&lt;/tt&gt; &lt;strong&gt;must&lt;/strong&gt; return &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="patterns"></category><category term="python"></category><category term="functional-programming"></category></entry><entry><title>Python and Encapsulation -- How do I private?</title><link href="https://slott56.github.io/2023_06_20-python_and_encapsulation.html" rel="alternate"></link><published>2023-06-20T08:00:00-04:00</published><updated>2023-06-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-06-20:/2023_06_20-python_and_encapsulation.html</id><summary type="html">&lt;p&gt;Central to OO design is &amp;quot;encapsulation.&amp;quot; It's so central it is part of several separate principles.&lt;/p&gt;
&lt;p&gt;In the S. O. L. I. D. design principles it's the &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;.
And a significant part of the &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, Python n00bz -- folks who already know some OO …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Central to OO design is &amp;quot;encapsulation.&amp;quot; It's so central it is part of several separate principles.&lt;/p&gt;
&lt;p&gt;In the S. O. L. I. D. design principles it's the &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;.
And a significant part of the &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, Python n00bz -- folks who already know some OO programming in other languages -- complain
that the usual artifacts of encapsulation are missing from the Python language.&lt;/p&gt;
&lt;p&gt;There's no &lt;strong&gt;private&lt;/strong&gt; or &lt;strong&gt;static&lt;/strong&gt; or &lt;strong&gt;protected&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;p&gt;How can we implement super-important encapsulation without this super-important text marker in the source?&lt;/p&gt;
&lt;p&gt;I'll address this from two points of view: what to do, and what not to do.&lt;/p&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to do&lt;/h2&gt;
&lt;p&gt;Design with encapsulation in mind. Follow the S.O.L.I.D. design principles.&lt;/p&gt;
&lt;p&gt;I suggest starting with Interface Separation.&lt;/p&gt;
&lt;p&gt;For things that aren't part of the public API (perhaps &amp;quot;private&amp;quot; in some sense) use a leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; in their name.
One &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; only, please.&lt;/p&gt;
&lt;p&gt;For things that are &amp;quot;protected&amp;quot;, or &amp;quot;final&amp;quot;, you probably don't need to do anything.
If you're really &lt;strong&gt;really&lt;/strong&gt; worried about someone misapprehending your design intent,
include many comments.&lt;/p&gt;
&lt;p&gt;If you're &lt;strong&gt;sure&lt;/strong&gt; someone will utterly disregard your comments,
misuse a private item outside the class,
or misuse a protected item outside the package or subclass,
or extend a final item,
or some other nefarious thing, well, there it is.
You'll have to ask yourself why this feature is both private/protected and so appealingly attractive.
If you can't discourage people from abusing it, perhaps there are other design problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-not-to-do"&gt;
&lt;h2&gt;What not to do&lt;/h2&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;__name&lt;/tt&gt; is mangled to make it an implementation detail of a &lt;em&gt;specific&lt;/em&gt; class.
These names tend to defeat ordinary inheritance.&lt;/p&gt;
&lt;p&gt;Don't use double-underscore before-and-after &lt;tt class="docutils literal"&gt;__names__&lt;/tt&gt; at all.
Never.
These are not conventionally &amp;quot;private&amp;quot; -- these are implementation details.
The name space is reserved to be part of Python's run-time.&lt;/p&gt;
&lt;p&gt;Other double-underscore before &lt;tt class="docutils literal"&gt;__names&lt;/tt&gt; are private, but are private to the class.
They cannot easily be overridden by a subclass. This is by design, and these are
specific solutions to the problem of implementing something where an override
is constrained to a single class in a hierarchy.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers"&gt;https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the quote:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Names in this category, when used within the context of a class definition, are re-written to use a mangled form to help avoid name clashes between “private” attributes of base and derived classes.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This is not conventional encapsulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-additional-thoughts"&gt;
&lt;h2&gt;Some additional thoughts&lt;/h2&gt;
&lt;p&gt;Some questions I ask when people have &lt;strong&gt;Serious Problems&lt;/strong&gt;
with Python's approach to privacy.&lt;/p&gt;
&lt;div class="section" id="question-1-is-private-really-important"&gt;
&lt;h3&gt;Question 1 -- Is private really important?&lt;/h3&gt;
&lt;p&gt;Let me state as a going-on assumption that encapsulation is an important part of an OO design.
Failure to encapsulate can create incomprehensible state changes, which is isomorphic to
a lot of functions sharing global variables. That's precisely the thing OO design
lets us avoid.&lt;/p&gt;
&lt;p&gt;So, yes, private -- as a design concept -- is very important.
Perhaps it's the single most important of OO design.&lt;/p&gt;
&lt;p&gt;Inheritance follows behind encapsulation. It's riddled with disputes
because we can often use delegation instead of inheritance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="question-2-given-encapsulation-what-more-does-the-language-need"&gt;
&lt;h3&gt;Question 2 -- Given encapsulation, what more does the language need?&lt;/h3&gt;
&lt;p&gt;In other words, Python lacks a &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword: is this a problem?&lt;/p&gt;
&lt;p&gt;Python's notion of &amp;quot;hidden-ish&amp;quot; attributes and methods
seems to be perfectly adequate.
The leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; on the name seems to be &lt;strong&gt;more&lt;/strong&gt; visible
than having to look back at a class definition to
see if a name is public, protected, or private.&lt;/p&gt;
&lt;p&gt;It looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyExampleClass:
    def visble_method(self, anArgValue: int) -&amp;gt; None:
        self._less_visible_method(anArgValue * 2)

    def _less_visible_method(self, anArgValue: int) -&amp;gt; None:
        self.anAttribute = anArgValue
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;visible_method()&lt;/tt&gt; method is considered &amp;quot;public&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;_less_visible_method()&lt;/tt&gt; method is considered by most to be &amp;quot;private&amp;quot;.
Yes, we can all see the method when we read the source.&lt;/p&gt;
&lt;p&gt;Many tools will make some effort to hide this behind a thin screen.&lt;/p&gt;
&lt;p&gt;Many developers understand this distinction. Sometimes n00bz don't -- at first -- recognize this convention.
They might complain that the &lt;tt class="docutils literal"&gt;_less_visible_method()&lt;/tt&gt; method is missing from the API documentation.
Then they're told this is because it's an implementation detail they can't depend on.
Then they complain that it's still visible in the source -- they can see the implementation!
It's not &lt;strong&gt;really&lt;/strong&gt; private!&lt;/p&gt;
&lt;p&gt;The language makes no distinction between these methods.&lt;/p&gt;
&lt;p&gt;The leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; is a convention. Widely-followed. Pretty universally adopted.
But not formally part of the language semantics.&lt;/p&gt;
&lt;p&gt;Some linters will remind you that you've broken the rules by using a &amp;quot;private&amp;quot; method
from outside the confines of the class hierarchy.&lt;/p&gt;
&lt;p&gt;Do we need more? Let's dig into what more we might ask for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2a1-the-language-needs-formal-semantic-support-for-private"&gt;
&lt;h3&gt;Q2A1. The language needs formal semantic support for private&lt;/h3&gt;
&lt;p&gt;Q: Why?&lt;/p&gt;
&lt;p&gt;A: Because I need all the tools to absolutely guarantee that I don't abuse this.&lt;/p&gt;
&lt;p&gt;Recall the use for privacy is to help us &lt;strong&gt;design&lt;/strong&gt; API's cleanly.
Keywords like &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;final&lt;/tt&gt; are part of a design effort.
They're (sometimes) helpful information for designers.&lt;/p&gt;
&lt;p&gt;They're easily overlooked when using the class.&lt;/p&gt;
&lt;p&gt;And, at run-time, they cease to be useful.&lt;/p&gt;
&lt;p&gt;Do we really want the byte-code interpreter to be checking some kind of &amp;quot;ownership&amp;quot; before each
write to memory?&lt;/p&gt;
&lt;p&gt;The usual answer is &amp;quot;No.&amp;quot;&lt;/p&gt;
&lt;p&gt;For a compiled language, privacy is honored as part of code generation.
But. That's essentially the same as having a convention and using a linter to
confirm the convention is followed properly.&lt;/p&gt;
&lt;p&gt;(And yes, &amp;quot;language + linter&amp;quot; is not the same as &amp;quot;language&amp;quot;.
Those folks who can't tolerate the &amp;quot;two-ness&amp;quot; of it
can write a shell script to bundle a linter with the Python run-time.
After all, that's how gcc used to work. It was a bundle of precompiler, C++ to C translator,
and the C compiler, which -- itself -- was a multi-step operation to build code.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2a2-the-languge-tools-must-support-private"&gt;
&lt;h3&gt;Q2A2. The languge tools must support private&lt;/h3&gt;
&lt;p&gt;Q: Why? Do you have trouble seeing the &lt;tt class="docutils literal"&gt;_&lt;/tt&gt;? Do you have trouble remembering the semantics? Do you like referring back to the class definition all the time to see if a name is private or not?&lt;/p&gt;
&lt;p&gt;A: Don't be an ass with questions like that. Of course &lt;strong&gt;I&lt;/strong&gt; see it. Of course &lt;strong&gt;I&lt;/strong&gt; know what it means. I worry about others, who aren't as gifted in the programming. Everyone knows there's always &lt;em&gt;someone&lt;/em&gt; who can't follow the simple rules.&lt;/p&gt;
&lt;p&gt;This is about projecting nefarious intent on others?&lt;/p&gt;
&lt;p&gt;Some folks insist a Very Clever IDE (VCI™) would recognize context and provide
private or protected attributes in a drop-down list of alternatives based on
context. That seems nice, I suppose.&lt;/p&gt;
&lt;p&gt;We've wandered far from the design intent behind encapsulation and into
areas of IDE UX. A UX can identify leading-&lt;tt class="docutils literal"&gt;_&lt;/tt&gt; variables pretty well,
and mark them as not public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="some-backstory"&gt;
&lt;h2&gt;Some Backstory&lt;/h2&gt;
&lt;p&gt;The quote that drives this is &amp;quot;We're all consenting adults here.&amp;quot;&lt;/p&gt;
&lt;p&gt;This summarizes the idea that Python is distributed as source.
We can all see the implementation.
The notion of &amp;quot;private&amp;quot; is -- at best -- a suggestion.&lt;/p&gt;
&lt;p&gt;(Tangentially related: &lt;a class="reference external" href="https://slott56.github.io/2015_12_08-python_big_picture_whats_the_roadmap_revised.html"&gt;Python Big Picture -- What's the &amp;quot;roadmap&amp;quot;?&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="design patterns"></category><category term="python"></category></entry><entry><title>Software Rewrites to Add Hints</title><link href="https://slott56.github.io/2023_05_04-software_rewrites_to_add_hints.html" rel="alternate"></link><published>2023-05-04T08:00:00-04:00</published><updated>2023-05-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-05-04:/2023_05_04-software_rewrites_to_add_hints.html</id><summary type="html">&lt;p&gt;Let's reach way, way back. 1989 - 1990.
This will let me talk about OO programming and Python Type Hints. (really)
And doing OO design for things that are as pervasive (and transparent) as air.
Things that &lt;strong&gt;need&lt;/strong&gt; to be part of a design, but don't appear in
any documentation.&lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's reach way, way back. 1989 - 1990.
This will let me talk about OO programming and Python Type Hints. (really)
And doing OO design for things that are as pervasive (and transparent) as air.
Things that &lt;strong&gt;need&lt;/strong&gt; to be part of a design, but don't appear in
any documentation.&lt;/p&gt;
&lt;p&gt;In the early 90's the Hero Game System, 4ed had just come out.
PC's were an expensive luxury item. But the Macintosh was there to help us think different.&lt;/p&gt;
&lt;p&gt;My TTRPG group is loving the Hero Game System. Complicated stories. Super heroes. Sophisticated game mechanics.
The Fantasy Hero rules were a delight, and lead to many long, involved campaigns.&lt;/p&gt;
&lt;p&gt;There's no overt OO programming to it (yet.) And, of course, Python has barely been invented.&lt;/p&gt;
&lt;p&gt;But there's a down-side to the Hero Game System:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accounting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The game requires a fairly scrupulous accounting of &amp;quot;Character Points&amp;quot;.
Some are assigned at the outset. A hero, for example, may have a base budget of 75 points.
Some are purchased by taking on disadvantages. For example Paranoia, or Hunted and Watched by Authorities,
or a Dependence, or a Weakness you'd like to keep secret, can all add to the budget of character points.&lt;/p&gt;
&lt;p&gt;All of the powers, skills, talents, perks, and what-not are purchased
with character points.&lt;/p&gt;
&lt;p&gt;And it all has to balance.&lt;/p&gt;
&lt;p&gt;Too high a skill in Guns means ripping away some strength or intelligence.
Or reducing other skills.&lt;/p&gt;
&lt;p&gt;So what can we do to make sure our character's, gadgets, vehicles, and bases
are all designed properly?&lt;/p&gt;
&lt;p&gt;Clearly, the answer is tools. Eventually, there will be OO design in here, I promise.
We'll work through the history, though.&lt;/p&gt;
&lt;div class="section" id="paper-and-pencil"&gt;
&lt;h2&gt;Paper and Pencil&lt;/h2&gt;
&lt;p&gt;In the 90's, I played the game using actual paper spreadsheets. 3-column accounting pads to tally up base
points, advantages, and limitations to compute the net points after adjustments.&lt;/p&gt;
&lt;p&gt;After all, we're talking about table-top role-playing.
Paper and pencil gaming. Of course we have 3-column ledger pads.
Along with hex mapping paper. And Dice. Lots of dice.&lt;/p&gt;
&lt;p&gt;It's the 90's. I've got Macintosh LC (?) I think.
I remember the Mac+. I remember the iMac. In between the two was a slim pizza box with a front-loading CD.&lt;/p&gt;
&lt;p&gt;Software tools are ramping up quickly to the point where they can be used casually
for gaming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h2&gt;Software&lt;/h2&gt;
&lt;p&gt;It didn't take too long to start using spreadsheet software. Appleworks. Then Clarisworks.&lt;/p&gt;
&lt;p&gt;It's clunky, but the computations aren't complicated. It's just a lot of typing.&lt;/p&gt;
&lt;p&gt;First, you have to be super-careful to type all the stuff from the rule books into the spreadsheet properly.&lt;/p&gt;
&lt;p&gt;Second -- it's the early 90's -- laptops are still very expensive. This means I'm going to
design offline, print, and use paper on game night to play.&lt;/p&gt;
&lt;p&gt;Remember, it's a spreadsheet: it introduces as many problems as it solves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v2-hypercard"&gt;
&lt;h2&gt;Software V2: Hypercard&lt;/h2&gt;
&lt;p&gt;HyperCard -- if you've never seen it -- isn't easy to understand.&lt;/p&gt;
&lt;p&gt;With some work, I created cards for each power/skill/perk/talent/whatever.&lt;/p&gt;
&lt;p&gt;I can use those cards to create new cards for a character with abilities, and references to powers, skills, talents, perks, whatever.&lt;/p&gt;
&lt;p&gt;I can then sum up the points to be sure the Character Points balance. I can tweak the card and try
again until I make the budget add up properly.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;With a little care, I can serialize the output as a CSV file that can be pumped into a spreadsheet and formatted.&lt;/p&gt;
&lt;p&gt;This was heavenly.&lt;/p&gt;
&lt;p&gt;I built elaborate campaigns, worlds, scenarios, adventures. All the things designed with HyperCard.
The pubishing involved spreadsheet formatting and some word-processing to tie it together.&lt;/p&gt;
&lt;p&gt;But. All good things come to an end. 2004 was the end of Hypercard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v3-python-and-oop"&gt;
&lt;h2&gt;Software V3: Python and OOP&lt;/h2&gt;
&lt;p&gt;(See, I told you we'd get to OOP, eventually.)&lt;/p&gt;
&lt;p&gt;When you consider the problem domain
it's a classic Object-Oriented Programming problem.
(I'd been thinking about it for well over decade at this point in the historial narrative.)&lt;/p&gt;
&lt;p&gt;Classic. OOP.&lt;/p&gt;
&lt;p&gt;There's tons of Inheritance. Tons of Delegation. Lots of Composition.  Lots of Instances of Classes.&lt;/p&gt;
&lt;p&gt;It's all there. And it's pretty simple. There are relatively few exceptions.
And the exceptions are trivially handled by footnotes to the &amp;quot;Game Master&amp;quot; (me).&lt;/p&gt;
&lt;p&gt;This means I have to drag all of the work I already did out of Hypercard and rewrite it into Python.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Once that's done, I can now use a block of code like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
normal1 = hero.Character(
    &amp;quot;Normal&amp;quot;,
    hero.NORMAL,
    # Characteristics
    hero.STR(13),
    hero.DEX(12),
    hero.CON(10),
    hero.BODY(12),
    hero.INT(10),
    hero.EGO(8),
    hero.PRE(13),
    hero.COM(9),
    # Skills, Talents, Perks, Powers
    hero.skills.WeaponFamiliarity_Category(&amp;quot;Common Melee&amp;quot;, 1),
    hero.skills.TransportFamiliarity_Single(&amp;quot;Horses&amp;quot;),
    hero.skills.Familiarity(&amp;quot;Jungle&amp;quot;, 1),
    hero.skills.Familiarity(&amp;quot;Town&amp;quot;, 1),
    hero.skills.AnimalHandling(1),
    # Disadvantages
    hero.disadvantages.Coward(),
)
&lt;/pre&gt;
&lt;p&gt;If the points don't balance, the class initializer will print a message.&lt;/p&gt;
&lt;p&gt;There's a serializer to produce CSV files for incorporation into spreadsheets.
This means the characters can format nicely for game night.&lt;/p&gt;
&lt;p&gt;We're back in business. I introduced my kids to TTRPG. Some of my nephews.
But I could balance the books on my laptop to make sure their characters were legit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v4-python-3-and-type-hints"&gt;
&lt;h2&gt;Software V4: Python 3 and Type Hints&lt;/h2&gt;
&lt;p&gt;So now it's 2023.&lt;/p&gt;
&lt;p&gt;I don't play Hero games much anymore.
In spite of not playing regularly,
the TTRPG topic surfaces from time to time. Maybe once every few years, now.&lt;/p&gt;
&lt;p&gt;And the OO Design topic is -- in the back of my mind -- evergreen.&lt;/p&gt;
&lt;p&gt;As a kind of mental palate cleansing &lt;em&gt;Amuse Bouche&lt;/em&gt; I decided to clean up the type hints
and unit tests and make sure my hobby stuff still ran in Python 3.11 or 3.12.
I did this in the unlikely event I ever wind up playing this TTRPG again.&lt;/p&gt;
&lt;p&gt;The cleanup inovolved a fair amount of work spread over almost a week.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Getting the type hints right revealed problems.
There are two parts to why this took so much work.&lt;/p&gt;
&lt;div class="section" id="type-hint-fundamentals"&gt;
&lt;h3&gt;Type Hint Fundamentals&lt;/h3&gt;
&lt;p&gt;One issue is in the way the various columns of a standard
&amp;quot;Full Character Sheet&amp;quot; are formatted.
The publication guidelines are for paper-and-pencil, hard-copy kind of adventure guides and campaing books.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;Cost&amp;quot; column isn't -- universally -- numeric. Sometimes there's text.&lt;/li&gt;
&lt;li&gt;Same for the &amp;quot;Endurance&amp;quot; column. It may have text explanations comingled with numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a big deal when serializing the data for a spreadsheet.
Mixtures of numbers and words and what-not are tolerated politely.&lt;/p&gt;
&lt;p&gt;Using &lt;strong&gt;mypy&lt;/strong&gt; to check the type hints revealed a number of bad mistakes.&lt;/p&gt;
&lt;p&gt;Eventually, I could distinguish between the internal cost computations,
and the external presentation. This cleanly isolated the essentially numeric
accounting. (Which, if you roll back to the top of this post, was why we started this
in the first place: accounting.)&lt;/p&gt;
&lt;p&gt;Thst's not all, though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-issues"&gt;
&lt;h3&gt;Use Case Issues&lt;/h3&gt;
&lt;p&gt;The more fundamental issue was the conflation of &lt;tt class="docutils literal"&gt;Character | Gadget | Base | Vehicle&lt;/tt&gt;.
This requires some care in writing type hints and doing OO design to make
sure that any differences are essential differences in these classes of objects.&lt;/p&gt;
&lt;p&gt;For the most part, everything's a &amp;quot;Framework&amp;quot; that has a collection of features,
advantages, and limitations. A Power is a Feature, so Frameworks can nest.&lt;/p&gt;
&lt;p&gt;From a usability perspective there are two distinct kinds of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Raw Materials. Powers, Skills, Talents, etc., with a cost.
Ideally, these are all class definitions. They change very slowly, if at all.
An instance of one these classes has a CP cost and a list of effects.&lt;/p&gt;
&lt;p&gt;The Raw Materials are all &lt;tt class="docutils literal"&gt;class SomePower(Power): effects: list[Effect] = &lt;span class="pre"&gt;[STRBonus(+10)]&lt;/span&gt;&lt;/tt&gt; kind of definitions.
More-or-less right out of the rules, rewritten into Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished Goods. Things like Characters have a budget, which must balance the sum of the costs of the Raw Materials that make up the Character.
The characters in a game will be instances of some generic class, popuulated by instances raw material classes.
The &lt;tt class="docutils literal"&gt;Character&lt;/tt&gt; class definition has a few features that are distinct from the raw materials classes.&lt;/p&gt;
&lt;p&gt;The Finished goods are built with &lt;tt class="docutils literal"&gt;character = hero.Character(THIS(10), THAT(10), &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This distinction makes for some gnarly OO design decisions to reflect the variety of use cases.&lt;/p&gt;
&lt;p&gt;A raw material has a fairly fixed definition, and there's a direct mapping
from the desired effects to the required cost. (The mapping isn't always &lt;strong&gt;simple&lt;/strong&gt;
because there are advantages and disadvantages that are figured in.)&lt;/p&gt;
&lt;p&gt;A finished good is built &amp;quot;on the fly&amp;quot; as a collection of instances of raw materials.&lt;/p&gt;
&lt;p&gt;Right now, the distinction is kind of buried: the classes &lt;tt class="docutils literal"&gt;Character&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Gadget&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Base&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Vehicle&lt;/tt&gt;
lack a unifying abstraction or protocol. This needs to be fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oo-design-advice"&gt;
&lt;h3&gt;OO Design Advice&lt;/h3&gt;
&lt;p&gt;It's not at all clear this distinction between raw material and finished good &lt;strong&gt;needs&lt;/strong&gt; to be present.
Superficially, it seems like everything's a &lt;tt class="docutils literal"&gt;Feature&lt;/tt&gt; and that's all we need to know.&lt;/p&gt;
&lt;p&gt;The use cases for design based on raw materials are an unstated element of the rules.
Technicall, we can argue that it's stated because design the essential purpose of
most of the rulebook. But. It's not stated as a simple &amp;quot;Here are things you'll design
based on raw materials we've already designed.&amp;quot; And &amp;quot;When you design a Campaign, you'll often
be extending the pool of raw materials.&amp;quot; Instead, it's assumed that you -- the reader --
understand the two kinds of design.&lt;/p&gt;
&lt;p&gt;This is a chronic problem in software architecture.&lt;/p&gt;
&lt;p&gt;There are things that are essential, but are -- like the atmosphere -- so pervasive
and invisble no one things to mention them.&lt;/p&gt;
&lt;p&gt;There's more (of course.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v5-python-3"&gt;
&lt;h2&gt;Software V5: Python 3&lt;/h2&gt;
&lt;p&gt;Interactivity was part of HyperCard (and the spreadsheets that preceeded it.)&lt;/p&gt;
&lt;p&gt;The Python 2 and Python 3 definitions of a Character was something
I implemented as a simple script.
This isn't &lt;strong&gt;too&lt;/strong&gt; interactive. You have an edit-run-crash cycle.&lt;/p&gt;
&lt;p&gt;The scripts aren't complicated, and a simple &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; rule can be used to rebuild
all the CSV's after a software bug fix or after a change to some Power definition.&lt;/p&gt;
&lt;p&gt;The work flow is tweak something. execute the script, look for error messages. Not too bad
when compared with paper-and-pencil of thirty years ago.&lt;/p&gt;
&lt;p&gt;Yesterday... (Seriously. Yesterday...)&lt;/p&gt;
&lt;p&gt;It occurred to me that Jupyter Lab is a way to restore the original HyperCard interactivity.
The Character/Gadget/Vehicle/Base can be a cell.
I can run the notebook to validate the budgets for all the various bad guys in the scenario.&lt;/p&gt;
&lt;p&gt;Over-budget? Tweak a definition until the cell stops printing the &amp;quot;over/under budget&amp;quot; error.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;I can write the supplemental stuff as Markdown. Right there. In the notebook.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v6-adventure-books"&gt;
&lt;h2&gt;Software V6: Adventure Books&lt;/h2&gt;
&lt;p&gt;There's a very small, dedicated markeplace for Hero content.&lt;/p&gt;
&lt;p&gt;(See &lt;a class="reference external" href="https://www.herogames.com"&gt;https://www.herogames.com&lt;/a&gt;, &lt;a class="reference external" href="https://www.patreon.com/hero_games"&gt;https://www.patreon.com/hero_games&lt;/a&gt;, and &lt;a class="reference external" href="https://roll20.net/compendium/HERO/BookIndex#content"&gt;https://roll20.net/compendium/HERO/BookIndex#content&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;While I'll never be a proper game author,
I can still write up a scenario in a tidy format as if it's still 1995 and I might
get a few bucks for an Adventurer's Club submission.&lt;/p&gt;
&lt;p&gt;And this means using Sphinx, ReStructured Text (or maybe Markdown) to create a Scenario book.&lt;/p&gt;
&lt;p&gt;I will slowly unearth my old campaign books (written in Pages) and convert them
to Python/Sphinx projects.
While it might be fun to imagine publishing them to HeroGames or Roll20, they're based 4th ed out-of-date rules.
So. It's a hobby project that pleases only me.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="object-oriented design"></category><category term="patterns"></category><category term="python"></category><category term="games"></category></entry><entry><title>Some Design Pattern Thoughts</title><link href="https://slott56.github.io/2023_04_25-some_design_pattern_thoughts.html" rel="alternate"></link><published>2023-04-25T08:00:00-04:00</published><updated>2023-04-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-04-25:/2023_04_25-some_design_pattern_thoughts.html</id><summary type="html">&lt;p&gt;The question was &amp;quot;Favorite Design Patterns.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is tricky because -- well -- so many patterns appear and re-appear in software.
Picking a few from the vast world of patterns is fraught with difficulties.&lt;/p&gt;
&lt;p&gt;Here are some thoughts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_01_03-code_quality_which_implementation_is_better.html"&gt;Code Quality - Which Implementation is &amp;quot;Better&amp;quot;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html"&gt;State-Based Object Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html"&gt;Functional Programming and Finite State …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The question was &amp;quot;Favorite Design Patterns.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is tricky because -- well -- so many patterns appear and re-appear in software.
Picking a few from the vast world of patterns is fraught with difficulties.&lt;/p&gt;
&lt;p&gt;Here are some thoughts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_01_03-code_quality_which_implementation_is_better.html"&gt;Code Quality - Which Implementation is &amp;quot;Better&amp;quot;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html"&gt;State-Based Object Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html"&gt;Functional Programming and Finite State Automata (FSA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_09_21-deconstructing_programs_from_c_or_finding_the_objects.html"&gt;Deconstructing Programs from C; or Finding The Objects™&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2009_02_20-python_business_rules_engine.html"&gt;Python Business Rules Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2010_12_27-the_anti_if_campaign.html"&gt;The Anti-IF Campaign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes. That's a lot of writing on design patterns.&lt;/p&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="design patterns"></category><category term="python"></category></entry><entry><title>Side Quest</title><link href="https://slott56.github.io/2023_04_04-side_quest.html" rel="alternate"></link><published>2023-04-04T08:00:00-04:00</published><updated>2023-04-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-04-04:/2023_04_04-side_quest.html</id><summary type="html">&lt;p&gt;Few things are as distracting as those god-awful side quests.&lt;/p&gt;
&lt;p&gt;In this case, I had to search out all of the examples in my new book drafts.&lt;/p&gt;
&lt;div class="section" id="previously"&gt;
&lt;h2&gt;Previously&lt;/h2&gt;
&lt;p&gt;Once upon a time, it was a manual check of code in the book to be sure it made sense.&lt;/p&gt;
&lt;p&gt;Ugh. Not …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Few things are as distracting as those god-awful side quests.&lt;/p&gt;
&lt;p&gt;In this case, I had to search out all of the examples in my new book drafts.&lt;/p&gt;
&lt;div class="section" id="previously"&gt;
&lt;h2&gt;Previously&lt;/h2&gt;
&lt;p&gt;Once upon a time, it was a manual check of code in the book to be sure it made sense.&lt;/p&gt;
&lt;p&gt;Ugh. Not living like that again.&lt;/p&gt;
&lt;p&gt;Tons of mistakes found by readers.&lt;/p&gt;
&lt;p&gt;The root cause? Editors who liked MS Word forcing me to copy-and-paste examples.&lt;/p&gt;
&lt;p&gt;Never again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-i"&gt;
&lt;h2&gt;Automation I&lt;/h2&gt;
&lt;p&gt;I would draft in RST and then use Pandoc to convert to MS Word.&lt;/p&gt;
&lt;p&gt;Then tweak the MS Word to use the publisher's preferred MS Word Template.
Point and click at every single thing to make sure it has the right
paragraph or character style name.&lt;/p&gt;
&lt;p&gt;Nope. Never doing that again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-ii"&gt;
&lt;h2&gt;Automation II&lt;/h2&gt;
&lt;p&gt;Let's use LaTeX. My project is an update to a book to the 3rd edition.&lt;/p&gt;
&lt;p&gt;(It's this: &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The 2nd ed. files came to me in MS Word format. I converted them to LaTeX with Pandoc.
Easy. Peasy.&lt;/p&gt;
&lt;p&gt;I can now edit the LaTeX Like a real person with a text editor.
Global search and replace now works reliably.
No need to endlessly point and click at pieces of text to set the style.&lt;/p&gt;
&lt;p&gt;I do need to remove some pandoc-isms and replace them with the publisher's preferred LaTeX.
This works out very nicely.&lt;/p&gt;
&lt;p&gt;But... The examples...&lt;/p&gt;
&lt;p&gt;Here's the side quest. (Foreshadowing: it's not the only one.)&lt;/p&gt;
&lt;div class="section" id="side-quest-ii-a"&gt;
&lt;h3&gt;Side Quest II-A&lt;/h3&gt;
&lt;p&gt;Parse the LaTeX (ugh) and locate all the examples.&lt;/p&gt;
&lt;p&gt;Pandoc made them &lt;tt class="docutils literal"&gt;{verbatim}&lt;/tt&gt; (I think) or maybe &lt;tt class="docutils literal"&gt;{lstlisting}&lt;/tt&gt;. Not sure. Doesn't matter.&lt;/p&gt;
&lt;p&gt;Change them all to &lt;tt class="docutils literal"&gt;{minted}&lt;/tt&gt;. (The publisher then changed them all to a customized &lt;tt class="docutils literal"&gt;{codeblock}&lt;/tt&gt; that looked GREAT!)&lt;/p&gt;
&lt;p&gt;The code to do this &lt;strong&gt;also&lt;/strong&gt; added a unique label to each example so the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;example~\\ref{ex-some-tag}&lt;/span&gt;&lt;/tt&gt; worked.&lt;/p&gt;
&lt;p&gt;(Yes, LaTeX is ugly.)&lt;/p&gt;
&lt;p&gt;This was really only preparation for the second side quest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="side-quest-ii-b"&gt;
&lt;h3&gt;Side Quest II-B&lt;/h3&gt;
&lt;p&gt;That's really only the start.
Once every example has a unique label, I can then do the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Extract all of the code snippets from the book, and load them up into a big-old dictionary. LaTeX parsing is a potential ugh, but it works for this book's LaTeX.&lt;/li&gt;
&lt;li&gt;Put each snippet into a test context using Jinja and a directory of templates.&lt;ul&gt;
&lt;li&gt;Some snippets are doctest code, and require little-to-no context.&lt;/li&gt;
&lt;li&gt;Some snippets are full functions, easy to plug into a file that includes test case(s).&lt;/li&gt;
&lt;li&gt;Some snippets are code fragments that require a much more elaborate context. And test cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run Black on the filled-in templates to undo any formatting mischief from the book (or from the template.)&lt;/li&gt;
&lt;li&gt;Run pytest on the whole show and make sure &lt;strong&gt;everything&lt;/strong&gt; works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The book's examples are a lot of code.
It works out better with a combination of &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; to go chapter-by-chapter
to be sure everything works.&lt;/p&gt;
&lt;p&gt;This is only to be sure the examples withstand scrutiny. I still have to write the text.
And rewrite the text when the reviewers find problems.
Which means rewriting the examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code"&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;Here's a LaTeX parser. I can't make any guarantees, because your LaTeX may involve
constructs that I've never seen before.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class BlockKind(Enum):
    BLANK = 0         # An empty line.
    COMMENT = 1       # A &amp;quot;%...&amp;quot; line. Comments at the end of a line are treated as part of the text.
    ENV = 2           # \\begin{name}[opts] ... \\end{name}. Nesting is **not** examined.
    MATH = 3          # $$ ... $$
    TEXTWITHMATH = 4  # A block with &amp;quot;$&amp;quot; in it
    TEXT = 5          # A block, frequently containing \\command[opts]{stuff}
&lt;/pre&gt;
&lt;p&gt;I don't think this is all of the block types. But it is representative of all the block types I actually used.&lt;/p&gt;
&lt;p&gt;Here's the definition of a block.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;dataclass
class Block:
    kind: BlockKind
    lines: list[str]

    &amp;#64;property
    def text(self) -&amp;gt; str:
        return '\n'.join(self.lines)
&lt;/pre&gt;
&lt;p&gt;The first goal being that we can iterate through the blocks, and perform special-case
processing based on the enumerated &lt;tt class="docutils literal"&gt;BlockKind&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The second goal is to be lossless. This means that some block text contains trailing or
leading stuff. Specifically, LaTeX in-line comments.&lt;/p&gt;
&lt;p&gt;Next up, the various regex patterns that recognize most instances of the above
blocks.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p class="last"&gt;This is not a general solution.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;LaTeX has lots and lots of ways to extend the language. Lots.&lt;/p&gt;
&lt;p&gt;One opinion I've seen is that the whole thing is better understood
as a Turing machine that's executed and produces an output stream.&lt;/p&gt;
&lt;p&gt;And it has constructs that extend the Turing machine with new syntax.
Dynamically.  On-the-fly.&lt;/p&gt;
&lt;p&gt;But I don't use any of those. Or if I do use them, the implementation details
are opaque to me and I don't need to care.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
COMMENT_PAT = re.compile(r&amp;quot;^\s*%&amp;quot;)
MATH_ENV_PAT = re.compile(r&amp;quot;^\s*\$\$\s*$&amp;quot;)
ENV_BEGIN_PAT = re.compile(r&amp;quot;^\s*\\begin\{(\w+)\}(\[.*\])?&amp;quot;)
ENV_END_PAT = re.compile(r&amp;quot;^\s*\\end\{(\w+)\}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;A few more patterns that are used later to distinguish different kinds of block content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CONSOLE_PAT = re.compile(r&amp;quot;^\\textbf\{(.*)\}&amp;quot;)
GREATER_PAT = re.compile(r&amp;quot;\\textgreater\{\}|\\textgreater&amp;quot;)
CURLY_PAT = re.compile(r&amp;quot;\{(.)\}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Here's the parser that breaks LaTeX into &lt;tt class="docutils literal"&gt;Block&lt;/tt&gt; instances:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BlockKind.BLANK  Blank lines between paragraphs.&lt;/li&gt;
&lt;li&gt;BlockKind.COMMENT: Line starting with &amp;quot;%&amp;quot;. Note that comments at the end of a line are treated as part of the text.
This is semantically wrong but syntactically lossless; it preserves the comment in an odd context.&lt;/li&gt;
&lt;li&gt;BlockKind.ENV: \begin{env}[options] -- \end{env}
This is not &lt;strong&gt;all&lt;/strong&gt; environments. It's only a short list of code sample environments.
These are {&amp;quot;quote&amp;quot;, &amp;quot;lstlisting&amp;quot;, &amp;quot;minted&amp;quot;, &amp;quot;codeblock&amp;quot;, &amp;quot;consoleblock&amp;quot;}.
The potential complication is an admonition environment (&lt;tt class="docutils literal"&gt;\\begin{tipbox}&lt;/tt&gt;) MAY contain
embedded code sample environments, but would not be found because we don't parse the full LaTeX tree.&lt;/li&gt;
&lt;li&gt;BlockKind.MATH: $$ to $$ block&lt;/li&gt;
&lt;li&gt;BlockKind.TEXTWITHMATH: Block of text with &amp;quot;$&amp;quot; in it somewhere.&lt;/li&gt;
&lt;li&gt;BlockKind.TEXT: blocks of text, possibly including commands of the form &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\\command[options]{stuff}&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://pylatexenc.readthedocs.io/en/latest/latexwalker/"&gt;https://pylatexenc.readthedocs.io/en/latest/latexwalker/&lt;/a&gt; for a possibly better approach.&lt;/p&gt;
&lt;p&gt;This flat expansion works here because we &lt;strong&gt;ONLY&lt;/strong&gt; want to distinguish code environments from non-code environments.
We don't really need the full parse tree.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def block_iter(text: str) -&amp;gt; Iterator[Block]:
    &amp;quot;&amp;quot;&amp;quot;
    Dirty hack lossless LaTeX parser. Treats LaTeX as if it were a flat tree of environments (and commands.)
    Ignores nested environments. Will not dig into lists, for example.
    Doesn't find all comments.
    Will be confused by verbatim in general, but not in most examples that aren't books about LaTeX
    &amp;quot;&amp;quot;&amp;quot;

    target_environs =  {&amp;quot;quote&amp;quot;, &amp;quot;lstlisting&amp;quot;, &amp;quot;minted&amp;quot;, &amp;quot;codeblock&amp;quot;, &amp;quot;consoleblock&amp;quot;}
    text_lines = []
    line_iter = iter(text.splitlines())
    for line in line_iter:
        if len(line) == 0:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.BLANK, [&amp;quot;&amp;quot;])
        elif (comment := COMMENT_PAT.match(line)) and comment:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.COMMENT, [line])
        elif (start := ENV_BEGIN_PAT.match(line)) and start and start.group(1) in target_environs:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            body_lines = [line]
            for body in line_iter:
                body_lines.append(body)
                if (end := ENV_END_PAT.match(body)) and end and end.group(1) == start.group(1):
                    break
            yield Block(BlockKind.ENV, body_lines)
        elif (math := MATH_ENV_PAT.match(line)) and math:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            body_lines = [line]
            for body in line_iter:
                body_lines.append(body)
                if body.strip() == &amp;quot;$$&amp;quot;:
                    break
            yield Block(BlockKind.MATH, body_lines)
        elif &amp;quot;$&amp;quot; in line:  # TODO: must be unescaped and outside \verb
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.TEXTWITHMATH, [line])
        else:
            # Accumulate a block
            text_lines.append(line)
    if text_lines:
        # End any final block
        yield Block(BlockKind.TEXT, text_lines)
&lt;/pre&gt;
&lt;p&gt;Once we have the sequence of blocks, we can tweak the various code sample blocks.&lt;/p&gt;
&lt;p&gt;Because the parsing is lossless, we can reconstruct a modified LaTeX document,
as long we nothing too weird is going on inside &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\\verbatim|...|&lt;/span&gt;&lt;/tt&gt; blocks.&lt;/p&gt;
&lt;p&gt;This worked well-enough to -- reliably -- pull all the code samples out of the text.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-iii"&gt;
&lt;h2&gt;Automation III&lt;/h2&gt;
&lt;p&gt;New book in the works.&lt;/p&gt;
&lt;p&gt;Two key alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Write all the examples and use minted to pull lines of code from the example files.&lt;/li&gt;
&lt;li&gt;Recapitulate the previous book's unique approach to example labels, and injection into specific contexts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This book has a distinct focus, however. There isn't as much code.
it doesn't seem to be essential for the code to be copy-and-paste complete.&lt;/p&gt;
&lt;p&gt;Further, it doesn't seem helpful to provide doctest-like examples.
The book is for a more advanced audience.&lt;/p&gt;
&lt;p&gt;What I'm could try to do is locate all of the code examples in a corpus of code files.
Then I can gingerly switch out actual code for a reference to lines in a code file.&lt;/p&gt;
&lt;p&gt;That seems easier to live with.&lt;/p&gt;
&lt;p&gt;If I need to change the code, I fix the corpus of code files, and rerun the test suite.
If the example's line numbers changed, fiddle with the LaTeX a little to get the right lines into the book.&lt;/p&gt;
&lt;p&gt;The downside of doing this is the corpus of code files become a first-class part of the book's
source. It lives side-by-side with images and LaTeX files.&lt;/p&gt;
&lt;p&gt;Some more thinking required before I finally make a commitment.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="writing"></category><category term="workflow"></category></entry><entry><title>EDI Message Parsing</title><link href="https://slott56.github.io/2023_03_17-edi_message_parsing.html" rel="alternate"></link><published>2023-03-17T08:00:00-04:00</published><updated>2023-03-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-03-17:/2023_03_17-edi_message_parsing.html</id><summary type="html">&lt;p&gt;Reaching back to 2008. Yes. Decade(s) ago. Python 2.5.&lt;/p&gt;
&lt;p&gt;I was reminded of this when a former colleague
pinged me about this: &lt;a class="reference external" href="https://github.com/slott56/TigerShark"&gt;https://github.com/slott56/TigerShark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's an X12/EDI message parsing library from -- well -- decades ago.&lt;/p&gt;
&lt;div class="section" id="what-is-all-this-about"&gt;
&lt;h2&gt;What is all this about?&lt;/h2&gt;
&lt;p&gt;Short answer: Parsing X12 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Reaching back to 2008. Yes. Decade(s) ago. Python 2.5.&lt;/p&gt;
&lt;p&gt;I was reminded of this when a former colleague
pinged me about this: &lt;a class="reference external" href="https://github.com/slott56/TigerShark"&gt;https://github.com/slott56/TigerShark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's an X12/EDI message parsing library from -- well -- decades ago.&lt;/p&gt;
&lt;div class="section" id="what-is-all-this-about"&gt;
&lt;h2&gt;What is all this about?&lt;/h2&gt;
&lt;p&gt;Short answer: Parsing X12 EDI messages, which have an obscure-as-hell structure.&lt;/p&gt;
&lt;p&gt;Long Answer: EDI (Electronic Data Interchange) is a way
for business enterprises and government agencies to exchange
data in well-defined formats. See &lt;a class="reference external" href="https://www.edibasics.com/what-is-edi/"&gt;https://www.edibasics.com/what-is-edi/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It sounds so simple and generic. It's so old, it predates
HTML, XML, JSON, etc. Therefore, the formats are -- well -- weird.&lt;/p&gt;
&lt;p&gt;There's a &amp;quot;standard&amp;quot;, X12, that defines these messages.
See &lt;a class="reference external" href="https://x12.org"&gt;https://x12.org&lt;/a&gt;. See &lt;a class="reference external" href="https://www.stedi.com/edi/x12"&gt;https://www.stedi.com/edi/x12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But. The exchange of message used to be done through proprietary networks
and software. Therefore the compliance with the standard
is sometimes incomplete. (Remember, this is &lt;strong&gt;old&lt;/strong&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-in-the-day"&gt;
&lt;h2&gt;Back In The Day&lt;/h2&gt;
&lt;p&gt;Some history&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_12-python_as_config_language_forget_xml_and_ini_files.html"&gt;Python as Config Language -- Forget XML and INI files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_19-two_python_config_file_design_patterns.html"&gt;Two Python Config-File Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_26-configuration_file_scalability_who_knew_revised.html"&gt;Configuration File Scalability -- Who Knew? (Revised)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_03_08-technical_debt_the_cost_of_cheap_and_get_this_done_acap.html"&gt;Technical Debt, the Cost of Cheap and &amp;quot;Get This Done ACAP&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_03_31-synchronicity_and_document_object_models.html"&gt;Synchronicity and Document Object Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_04_01-popo_and_gops_plain_old_python_objects_and_good_old_python_syntax.html"&gt;POPO and GOPS - Plain Old Python Objects and Good Old Python Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote an X12 parser in Python.&lt;/p&gt;
&lt;p&gt;It transforms X12 text into Plain Old Python Objects (POPO.)&lt;/p&gt;
&lt;p&gt;Back in the day (2008) this was targeted for Python 2.5.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-time"&gt;
&lt;h2&gt;It's Time&lt;/h2&gt;
&lt;p&gt;Nowadays, this is does &lt;strong&gt;not&lt;/strong&gt; need to be quite so complicated.&lt;/p&gt;
&lt;p&gt;Modern Python has a few changes since release 2.5.
Two are central to this project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;type annotations&lt;/li&gt;
&lt;li&gt;classes maintain the order of the definitions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the backbone of &lt;a class="reference external" href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclasses&lt;/a&gt; (and &lt;a class="reference external" href="https://docs.pydantic.dev"&gt;pydantic&lt;/a&gt; and &lt;a class="reference external" href="https://www.attrs.org/en/stable/"&gt;attrs&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;I believe there are two parts to the rewrite.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create dataclass-like class definition for segments and loops. These generally come from the non-Python configuration files used elsewhere. The Python is built from this. Once.&lt;/li&gt;
&lt;li&gt;Create a generic parser protocol that can extract the segments, loops, and atomic fields from the X12 messages. This becomes a superclass feature of all X12 components.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This should be much simpler than the old version. Which was &lt;strong&gt;very&lt;/strong&gt; complicated.
The old release had two levels of interpretation of the X12 content:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generic segments and loops&lt;/li&gt;
&lt;li&gt;A Pythonic &lt;strong&gt;Façade&lt;/strong&gt; over the generic structure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think this was (and continues to be) a bad idea.&lt;/p&gt;
&lt;p&gt;(Progress will be flaky. I have a book to write, also.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-things-first"&gt;
&lt;h2&gt;First Things First&lt;/h2&gt;
&lt;p&gt;Some updates to reflect Python 3.11 and better GitHub practices.
I'll make the documentation more visible as a first step.
I may rewrite the diagrams to PlantUML, also.&lt;/p&gt;
&lt;p&gt;Just a few small cleanups before throwing the entire
thing away and beginning again.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="data structure"></category><category term="algorithm"></category><category term="edi"></category><category term="x12"></category></entry><entry><title>Programming Languages -- In Time Order</title><link href="https://slott56.github.io/2023_02_21-programming_languages.html" rel="alternate"></link><published>2023-02-21T08:00:00-05:00</published><updated>2023-02-21T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-21:/2023_02_21-programming_languages.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html"&gt;Programming Languages I've Learned (more-or-less in order) [Update]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This came up on Twitter and Fosstodon.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943"&gt;https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943&lt;/a&gt;
and &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56/109908527412493172"&gt;https://fosstodon.org/&amp;#64;slott56/109908527412493172&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I omitted a few things from the list because -- well -- there are a LOT of languages.&lt;/p&gt;
&lt;p&gt;For example, in the 90's I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html"&gt;Programming Languages I've Learned (more-or-less in order) [Update]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This came up on Twitter and Fosstodon.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943"&gt;https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943&lt;/a&gt;
and &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56/109908527412493172"&gt;https://fosstodon.org/&amp;#64;slott56/109908527412493172&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I omitted a few things from the list because -- well -- there are a LOT of languages.&lt;/p&gt;
&lt;p&gt;For example, in the 90's I got really good at using Awk.
Just before I learned Perl, which (at the time) was almost -- but not quite -- better.&lt;/p&gt;
&lt;p&gt;Recently, I've grown to like Gherkin at lot.
See &lt;a class="reference external" href="https://cucumber.io/docs/gherkin/reference/"&gt;https://cucumber.io/docs/gherkin/reference/&lt;/a&gt;.
The language is sometimes called cucumber, but that's incorrect.
Cucumber is one (of many) tools that process Gherkin.&lt;/p&gt;
&lt;p&gt;I also need to add Markdown, ReStructuredText, and LaTeX to the long
list of markup languages I know.&lt;/p&gt;
&lt;p&gt;I should probably extract JSON, YAML, and TOML into a separate category.
They don't properly qualify as markup languages.&lt;/p&gt;
&lt;p&gt;What's central here is the idea of choosing a single language.&lt;/p&gt;
&lt;p&gt;The question shows up: &amp;quot;What's the most important programming language that will land me a job?&amp;quot;
Or &amp;quot;... land me a better job?&amp;quot;&lt;/p&gt;
&lt;p&gt;I remember -- back in the 70's -- being told that programming languages come and go.
That's why the undergrad CS degree program only requires a few 1-credit courses in a language.
They were considered far, far less important that data structures and algorithms, which really
are timeless and eternal features of computing.&lt;/p&gt;
&lt;p&gt;It's still true.&lt;/p&gt;
&lt;p&gt;Some hiring managers look for folks with specific technical skills,
as if that matters.&lt;/p&gt;
&lt;p&gt;Smarter hiring managers look for folks who learn skills quickly,
are quick to adapt, and share their knowledge widely.&lt;/p&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="building skills"></category><category term="learning"></category><category term="programming languages"></category></entry><entry><title>New Monitor</title><link href="https://slott56.github.io/2023_02_18-new_monitor.html" rel="alternate"></link><published>2023-02-18T08:00:00-05:00</published><updated>2023-02-18T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-18:/2023_02_18-new_monitor.html</id><summary type="html">&lt;p&gt;The (almost) 10-year old 27&amp;quot; Thunderbolt display finally died.&lt;/p&gt;
&lt;p&gt;Well, it didn't really &lt;strong&gt;die&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Thunderbolt connector had gotten impossibly flaky.
If I looked at it wrong, the monitor glitched or disonnected.&lt;/p&gt;
&lt;p&gt;It was dead enough that I wasn't going to deal with it.&lt;/p&gt;
&lt;p&gt;It involved this morass of adapters …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The (almost) 10-year old 27&amp;quot; Thunderbolt display finally died.&lt;/p&gt;
&lt;p&gt;Well, it didn't really &lt;strong&gt;die&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Thunderbolt connector had gotten impossibly flaky.
If I looked at it wrong, the monitor glitched or disonnected.&lt;/p&gt;
&lt;p&gt;It was dead enough that I wasn't going to deal with it.&lt;/p&gt;
&lt;p&gt;It involved this morass of adapters:&lt;/p&gt;
&lt;img alt="Two Connectors" src="https://slott56.github.io/media/IMG_0765.png" /&gt;
&lt;p&gt;(Try to ignore the dust. That's been fixed, too.)&lt;/p&gt;
&lt;p&gt;The top one is a USB-C to Thunderbolt adapter.
You can't quite make out the wrap of tape where the wiring
insulation started falling apart.&lt;/p&gt;
&lt;p&gt;The bottom one (with the blue tape) adapts the monitor's ancient MagSafe charging to
a modern USB-C port.&lt;/p&gt;
&lt;p&gt;These two merge into a single, heavy cable.&lt;/p&gt;
&lt;p&gt;I bought a repair kit with a whole new wiring harness.&lt;/p&gt;
&lt;p&gt;It's not &lt;strong&gt;impossible&lt;/strong&gt; to do. Indeed, it looks like it might be fun.&lt;/p&gt;
&lt;blockquote&gt;
I took an old iMac (same physical case) apart to retrieve the internal hard drive.
It wasn't impossible to get at the various pieces.&lt;/blockquote&gt;
&lt;p&gt;The problem is that I'd still be looking at a stack of adapters.
And the resulting reliability issue of bumping the MagSafe connection.&lt;/p&gt;
&lt;div class="section" id="a-better-choice"&gt;
&lt;h2&gt;A Better Choice&lt;/h2&gt;
&lt;p&gt;Instead of limping along, I replaced it with the 24&amp;quot; LG TV. (Check Apple's on-line store for &lt;a class="reference external" href="https://www.apple.com/shop/product/HMUA2VC/A/lg-ultrafine-4k-display"&gt;specifics&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Brighter. Better sound. Adjustable height.&lt;/p&gt;
&lt;p&gt;One connector from TV to Mac (instead of two.) No Adapters.&lt;/p&gt;
&lt;p&gt;There are three USB-C ports on the back of the moitor. Places to plug chargers for keyboards or trackpads or whatever.&lt;/p&gt;
&lt;p&gt;This means I can leave a backup drive hanging off the back of the monitor. Backs up whenever I'm using this desk.&lt;/p&gt;
&lt;p&gt;No camera, though. Experimenting with iPhone as Zoom camera. May need
a bracket to position the camera up at face level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-disposition"&gt;
&lt;h2&gt;Final Disposition&lt;/h2&gt;
&lt;p&gt;The next step is to put some notices out on local services
web sites (i.e. &lt;a class="reference external" href="https://www.craigslist.org"&gt;https://www.craigslist.org&lt;/a&gt;) to see
who might want this &amp;quot;works, but...&amp;quot; monitor.&lt;/p&gt;
&lt;p&gt;I'm not happy taking to the landfill, because it works.
It will include with the unused repair kit and the adapters.
It just needs a hair more attention to detail than I can
manage.&lt;/p&gt;
&lt;p&gt;Much happier meeting someone by the library to hand it off.&lt;/p&gt;
&lt;p&gt;Back to writing. Making good progress on the new book.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="hardware"></category><category term="macosx"></category><category term="macintosh"></category><category term="work-life"></category><category term="writing"></category></entry><entry><title>Python Confusion</title><link href="https://slott56.github.io/2023_02_07-python_confusion.html" rel="alternate"></link><published>2023-02-07T08:00:00-05:00</published><updated>2023-02-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-07:/2023_02_07-python_confusion.html</id><summary type="html">&lt;p&gt;For social contact, I'm generally following people on &lt;a class="reference external" href="https://fosstodon.org/home"&gt;https://fosstodon.org/home&lt;/a&gt;.
I'm &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56"&gt;https://fosstodon.org/&amp;#64;slott56&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or &lt;cite&gt;&amp;#64;slott56&amp;#64;fosstodon.org &amp;lt;https://fosstodon.org/&amp;#64;slott56&amp;gt;&lt;/cite&gt; as they say in the Fediverse.&lt;/p&gt;
&lt;p&gt;But I saw some stuff on Twitter that was disheartening.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought Python🐍wasn't strongly typed.🤔
But this code …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;For social contact, I'm generally following people on &lt;a class="reference external" href="https://fosstodon.org/home"&gt;https://fosstodon.org/home&lt;/a&gt;.
I'm &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56"&gt;https://fosstodon.org/&amp;#64;slott56&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or &lt;cite&gt;&amp;#64;slott56&amp;#64;fosstodon.org &amp;lt;https://fosstodon.org/&amp;#64;slott56&amp;gt;&lt;/cite&gt; as they say in the Fediverse.&lt;/p&gt;
&lt;p&gt;But I saw some stuff on Twitter that was disheartening.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought Python🐍wasn't strongly typed.🤔
But this code seems to be casting input into an int?&lt;/p&gt;
&lt;p&gt;✅guess = int(input(&amp;quot;Pick a number: &amp;quot;))&lt;/p&gt;
&lt;p&gt;The ugliness of all the round brackets aside, why
does this need to be cast into an int?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh dear.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python &lt;em&gt;is&lt;/em&gt; strongly typed.  Variables don't have a type associated with them, so we say that variable types are dynamic. Object types are essentially immutable.&lt;/li&gt;
&lt;li&gt;It's not a &amp;quot;cast&amp;quot;. It's a conversion. You can't cast objects to another type in Python. Types are essentially immutable.&lt;/li&gt;
&lt;li&gt;The &amp;quot;cast to an int&amp;quot; is really &amp;quot;converted to an int&amp;quot; and that's required because the string value from the &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; is likely useless later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without more code, it's hard to know why the conversion is required.
I'm willing to guess there's comparisons against integers elsewhere,
and therefore, this conversion from string to int will make those
later comparisons work.&lt;/p&gt;
&lt;p&gt;Some of the responses to the tweet were a bit off. I have
the urge to enumerate the problems, but that's likely to be unhelpful.&lt;/p&gt;
&lt;p&gt;(I say types are &lt;em&gt;essentially&lt;/em&gt; immutable because I have a vague
feeling that it's possible to around some of the dunder attributes
for some kinds of classes and change the association between
object and creating class. I have not investigated this
because the horror of casting in C, C++, Java, etc., is so emotionally
scarring that I can't even.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>Book Offers</title><link href="https://slott56.github.io/2023_02_03-book_offers.html" rel="alternate"></link><published>2023-02-03T08:48:00-05:00</published><updated>2023-02-03T08:48:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-03:/2023_02_03-book_offers.html</id><summary type="html">&lt;div class="section" id="packt-publishing"&gt;
&lt;h2&gt;Packt Publishing&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much newness here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="packt-publishing"&gt;
&lt;h2&gt;Packt Publishing&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much newness here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h3&gt;Unlearning SQL&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h2&gt;Google Play&lt;/h2&gt;
&lt;p&gt;Also available on Google Play. Here's &lt;strong&gt;Unlearning SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Link Rot and Editing</title><link href="https://slott56.github.io/2023_01_17-link_rot_and_editing.html" rel="alternate"></link><published>2023-01-17T08:00:00-05:00</published><updated>2023-01-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-17:/2023_01_17-link_rot_and_editing.html</id><summary type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html"&gt;Finished Moving: Lessons Learned&lt;/a&gt;
link rot is real.&lt;/p&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I've got 23 ancient (2004 to 2006, ancient) posts
with clearly broken links. These are easy to identify
because the service vanished years ago.&lt;/p&gt;
&lt;p&gt;The tricky part is figuring out of there's any
content worth preserving. In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html"&gt;Finished Moving: Lessons Learned&lt;/a&gt;
link rot is real.&lt;/p&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I've got 23 ancient (2004 to 2006, ancient) posts
with clearly broken links. These are easy to identify
because the service vanished years ago.&lt;/p&gt;
&lt;p&gt;The tricky part is figuring out of there's any
content worth preserving. In many cases, the blog
post was really an extended response to someone's forum
question.&lt;/p&gt;
&lt;p&gt;If I can recall the back-story, the blog post may be
of some interest. If I can't recall the context, then,
I'll need to delete it.&lt;/p&gt;
&lt;p&gt;First, however, I've got a book outline and schedule to
finish.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="markup"></category><category term="rst"></category></entry><entry><title>Finished Moving: Lessons Learned</title><link href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html" rel="alternate"></link><published>2023-01-10T08:00:00-05:00</published><updated>2023-01-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-10:/2023_01_10-finished_moving_lessons_learned.html</id><summary type="html">&lt;p&gt;Moved everything from blogger.com to &amp;quot;here&amp;quot; (&lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What did I learn?&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use WYSIWYG editors. Always use plain text markup.&lt;/li&gt;
&lt;li&gt;Think about your categories and tags.&lt;/li&gt;
&lt;li&gt;Links rot.&lt;/li&gt;
&lt;li&gt;Have a data model and tooling to process entries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;Back in the early '00's (up to …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Moved everything from blogger.com to &amp;quot;here&amp;quot; (&lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What did I learn?&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use WYSIWYG editors. Always use plain text markup.&lt;/li&gt;
&lt;li&gt;Think about your categories and tags.&lt;/li&gt;
&lt;li&gt;Links rot.&lt;/li&gt;
&lt;li&gt;Have a data model and tooling to process entries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;Back in the early '00's (up to 2003 or so) blogging
was &lt;strong&gt;Rocket Science&lt;/strong&gt;. Consider that &lt;a class="reference external" href="https://boingboing.net"&gt;https://boingboing.net&lt;/a&gt; started
to be an online blog in January 2000.&lt;/p&gt;
&lt;p&gt;Back then, you needed hosting. And blogging software.&lt;/p&gt;
&lt;p&gt;Hosting wasn't as easy as signing up with &lt;a class="reference external" href="https://www.a2hosting.com"&gt;https://www.a2hosting.com&lt;/a&gt;.
A2 hosting didn't exist until 2001. Back then it was complicated and expensive.
Not for the faint of heart.&lt;/p&gt;
&lt;p&gt;Apple offered iBlog which they would host for you on one of their domains like &lt;a class="reference external" href="http://homepage.mac.com"&gt;http://homepage.mac.com&lt;/a&gt; or some such.
See &lt;a class="reference external" href="https://slott56.github.io/2003_11_15-iblog.html"&gt;iBlog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Big. Mistake. (See &lt;a class="reference internal" href="#big-mistakes"&gt;Big Mistakes&lt;/a&gt;, below.)&lt;/p&gt;
&lt;p&gt;From about 2004 to 2006 (maybe)
there was  service called &amp;quot;Bloki&amp;quot;, which offered blogging and forum capabilities.
That was super-helpful because you could edit on-line.&lt;/p&gt;
&lt;p&gt;Big.  Mistake. (See &lt;a class="reference internal" href="#big-mistakes"&gt;Big Mistakes&lt;/a&gt;, below.)&lt;/p&gt;
&lt;p&gt;By 2008, iBlog had run its course.
See &lt;a class="reference external" href="https://slott56.github.io/2008_03_19-iblog_buggy_since_leopards_release_no_fixes_in_sight.html"&gt;iBlog Buggy... Since Leopard's release... No fixes in sight.&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By 2009, it appears that I must have consolidated my content onto &lt;a class="reference external" href="https://blogspot.com"&gt;https://blogspot.com&lt;/a&gt;.
Which got merged with &lt;a class="reference external" href="https://blogger.com"&gt;https://blogger.com&lt;/a&gt; at some point later in life.
(It's hard to tell, but there were blogspot references scattered through
the internal links.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-move"&gt;
&lt;h2&gt;Why Move?&lt;/h2&gt;
&lt;p&gt;If &lt;a class="reference external" href="https://blogger.com"&gt;https://blogger.com&lt;/a&gt; isn't &lt;strong&gt;broken&lt;/strong&gt;, why change?&lt;/p&gt;
&lt;p&gt;There aren't any &lt;strong&gt;good&lt;/strong&gt; reasons. Only a few weak reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I have a personal blog, which is &lt;strong&gt;not&lt;/strong&gt; on blogger.
It, too, had a long, complex history that went from
Apple's iWeb to Sandvox until Sandvox stopped working,
forcing me to consolidate into &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;https://itmaybeahack.com/TeamRedCruising2/index.html&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I had been following some folks who were starting blogs,
and they didn't like &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;.
They seemed to really like did like &lt;a class="reference external" href="https://gohugo.io"&gt;Hugo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In researching Hugo, I found out about how &lt;a class="reference external" href="https://github.io"&gt;https://github.io&lt;/a&gt; can
host content, like a blog, with relatively little real work.
Mostly &lt;tt class="docutils literal"&gt;git commit&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;I'm over on-line editing. I'm retired, living on a boat,
and I travel a lot. I need to edit off-line.
Creating and staging blog posts for the future
is fun, but requires me to save notes, and then create posts
when I have connectivity, staging them for future release.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These add up to &amp;quot;move to &lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="big-mistakes"&gt;
&lt;h2&gt;Big Mistakes&lt;/h2&gt;
&lt;p&gt;There was one big mistake that manifested itself two ways.&lt;/p&gt;
&lt;p&gt;WYSIWYG -- What You See Is What You Get.&lt;/p&gt;
&lt;p&gt;Some secondary mistakes involve the way that blogger lacked
categories. It was &amp;quot;simply&amp;quot; a list of posts.&lt;/p&gt;
&lt;p&gt;Finally, I needed to address &amp;quot;link rot&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wysiwyg-is-evil"&gt;
&lt;h2&gt;WYSIWYG Is Evil&lt;/h2&gt;
&lt;p&gt;Any purely visual editor is a burning dumpster fire
of weirdly inconsistent content that happens to look
right, but is actually wrong.&lt;/p&gt;
&lt;p&gt;Writing involves three separate issues:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The words chosen.&lt;/li&gt;
&lt;li&gt;The semantics of the words.&lt;/li&gt;
&lt;li&gt;The presentation to highlight the semantics.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, we write &lt;tt class="docutils literal"&gt;code&lt;/tt&gt; in a distinct font.
The word &lt;tt class="docutils literal"&gt;code&lt;/tt&gt; has distinct semantics, it's in a programming
language, and gets a distinct font to reveal that.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;emphasize&lt;/strong&gt; things with a style change. We might write foreign &lt;em&gt;words&lt;/em&gt; or &lt;em&gt;phrases&lt;/em&gt; in a separate style.&lt;/p&gt;
&lt;p&gt;In some cases, we're forced to overload styles.
We might use &lt;strong&gt;bold&lt;/strong&gt; for an &lt;strong&gt;AOA&lt;/strong&gt; (Abbreviation or Acronym).
And we also use it for &lt;strong&gt;emphasis&lt;/strong&gt; and for &lt;strong&gt;Chapter Titles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;HTML has many semantic categories available as markup.
We can use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;abbr&amp;gt;ABBR&amp;lt;/abbr&amp;gt;&lt;/span&gt;&lt;/tt&gt; to denote an abbreviation.
The style sheet may render this in bold (or not, maybe in &lt;span class="text-danger"&gt;red&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;Here's the problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;WYSIWYG editors conceal the semantics, and only reveal the markup.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;While it's not impossible to check semantics, it's hard.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;bold&lt;/strong&gt; something and it looks fine.&lt;/p&gt;
&lt;p&gt;But it should have been a Section Heading, not simply bold.&lt;/p&gt;
&lt;p&gt;You can't tell.&lt;/p&gt;
&lt;p&gt;Offline editors and proprietary file formats exacerbate
the problem. The content is very difficult to recover.&lt;/p&gt;
&lt;p&gt;In Apple's case, the files were all XML and could
be read.&lt;/p&gt;
&lt;p&gt;Newer products use Snappy compression and Protobuf,
which is relentlessly evil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="categories-are-hard"&gt;
&lt;h2&gt;Categories Are Hard&lt;/h2&gt;
&lt;p&gt;The iBlog posts had categories.&lt;/p&gt;
&lt;p&gt;The Blogspot/Blogger posts didn't have categories.&lt;/p&gt;
&lt;p&gt;I think categories are useful.&lt;/p&gt;
&lt;p&gt;Now what?&lt;/p&gt;
&lt;p&gt;I have to categorize about 1,000 blog posts.&lt;/p&gt;
&lt;p&gt;This becomes a kind of K-nn problem. Locate the
tags and find the most popular category.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="link-rot"&gt;
&lt;h2&gt;Link Rot&lt;/h2&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I'm not going to use the Wayback Machine (&lt;a class="reference external" href="https://web.archive.org"&gt;https://web.archive.org&lt;/a&gt;)
to locate the old content.&lt;/p&gt;
&lt;p&gt;Instead I'm going to (eventually) flag broken links.&lt;/p&gt;
&lt;p&gt;In some cases, I'll probably delete the whole blog entry
because it's aged to the point of irrelevance.&lt;/p&gt;
&lt;p&gt;After a ton of work, I found 19 old blogspot
URL's that I didn't know about. I have a link
converted app that I can update to handle these the
way I handled hundreds of more visible problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tooling"&gt;
&lt;h2&gt;Tooling&lt;/h2&gt;
&lt;p&gt;Some old iBlog entries were in XML.
I converted these to RST without exposing
an intermediate data model. Not good.&lt;/p&gt;
&lt;p&gt;The blogger posts were exported in ATOM notation,
a distinct XML format.&lt;/p&gt;
&lt;p&gt;What's common?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Feed:
    ...

class Entry:
    ...

class Post(Entry):
    ...

class Page(Entry):
    ...
&lt;/pre&gt;
&lt;p&gt;A model like this lets a feed contain entries.&lt;/p&gt;
&lt;p&gt;This unified model can be parsed from RST or XML,
and then small scripts (and Jupyter notebooks)
can tweak the content to make it consistent.&lt;/p&gt;
&lt;p&gt;And, no, I doubt I'll publish any of the tools
I used. It was all one-time hackery.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="markup"></category><category term="rst"></category></entry><entry><title>DZone's lack of a Python Zone</title><link href="https://slott56.github.io/2023_01_03-dzones_lack_of_a_python_zone.html" rel="alternate"></link><published>2023-01-03T10:00:00-05:00</published><updated>2023-01-03T10:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-03:/2023_01_03-dzones_lack_of_a_python_zone.html</id><summary type="html">&lt;p&gt;Check out DZone's Coding zone: &lt;a class="reference external" href="https://dzone.com/coding"&gt;https://dzone.com/coding&lt;/a&gt;. Hover over the
&amp;quot;Coding&amp;quot; drop-down menu.&lt;/p&gt;
&lt;p&gt;Notice anything lacking?&lt;/p&gt;
&lt;p&gt;I'll give you a hint: Python.&lt;/p&gt;
&lt;p&gt;They have &amp;quot;Frameworks&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;Javascript&amp;quot;, &amp;quot;Languages&amp;quot; and &amp;quot;Tools&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Languages&amp;quot; seems to be general programming, and the posts include
Java, JavaScript and numerous other languages.&lt;/p&gt;
&lt;p&gt;Let's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out DZone's Coding zone: &lt;a class="reference external" href="https://dzone.com/coding"&gt;https://dzone.com/coding&lt;/a&gt;. Hover over the
&amp;quot;Coding&amp;quot; drop-down menu.&lt;/p&gt;
&lt;p&gt;Notice anything lacking?&lt;/p&gt;
&lt;p&gt;I'll give you a hint: Python.&lt;/p&gt;
&lt;p&gt;They have &amp;quot;Frameworks&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;Javascript&amp;quot;, &amp;quot;Languages&amp;quot; and &amp;quot;Tools&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Languages&amp;quot; seems to be general programming, and the posts include
Java, JavaScript and numerous other languages.&lt;/p&gt;
&lt;p&gt;Let's look at the evidence, shall we?&lt;/p&gt;
&lt;p&gt;## Python Trending&lt;/p&gt;
&lt;p&gt;Here's some evidence.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://statisticstimes.com/tech/top-computer-languages.php"&gt;https://statisticstimes.com/tech/top-computer-languages.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.infoworld.com/article/3669232/python-popularity-still-soaring.html"&gt;https://www.infoworld.com/article/3669232/python-popularity-still-soaring.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.tiobe.com/tiobe-index/"&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypl.github.io/PYPL.html"&gt;https://pypl.github.io/PYPL.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And yes, the last two are summarized by the first one.&lt;/p&gt;
&lt;p&gt;The Bottom Line?&lt;/p&gt;
&lt;p&gt;Python has grown to be the most popular programming language.
It has edge ahead of Java, C, and C++.&lt;/p&gt;
&lt;p&gt;This isn't a new thing. See this from StackOverflow back in 2017.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/"&gt;https://stackoverflow.blog/2017/09/06/incredible-growth-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks looked at the growth curve back in 2017 and concluded the increase in interest
on StackOverflow was due to the language being so hard to
learn and use that lots of people had questions.&lt;/p&gt;
&lt;p&gt;A simpler conclusion is lots of people are using it.&lt;/p&gt;
&lt;p&gt;And the trend continued for five more years.&lt;/p&gt;
&lt;p&gt;## Why?&lt;/p&gt;
&lt;p&gt;Why is Python so popular?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's hard to say.&lt;/li&gt;
&lt;li&gt;It doesn't really matter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have some suspicions on why it's so popular.
In his Keynote at PyCon 2017, (&lt;a class="reference external" href="https://youtu.be/ZyjCqQEUa8o"&gt;https://youtu.be/ZyjCqQEUa8o&lt;/a&gt;)
Jake Vanderplas pointed out that scientists can
install Python, install Jupyter Lab, open a notebook,
download data, and start analyzing results immediately.&lt;/p&gt;
&lt;p&gt;The whole &amp;quot;getting started&amp;quot; process takes minutes,
and you're doing real science.&lt;/p&gt;
&lt;p&gt;As your skills mature, you can write cooler and better-engineered
software.&lt;/p&gt;
&lt;p&gt;All in Python.&lt;/p&gt;
&lt;p&gt;That's a compelling story.&lt;/p&gt;
&lt;p&gt;The other part of it is the response to the growth from publishers and web content providers.&lt;/p&gt;
&lt;p&gt;Years ago DZone reliably reposted my blog posts.
It was fun (for me) to get 1,000's of views.
They spent time curating Most Valuable Bloggers.
(&lt;a class="reference external" href="https://dzone.com/pages/mvb"&gt;https://dzone.com/pages/mvb&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I didn't actively participate because I had a day job
and was writing books, and couldn't do the kinds of
things DZone wanted from content creators.
(It was like taking on &lt;em&gt;another&lt;/em&gt; book.)&lt;/p&gt;
&lt;p&gt;I'm lightly invested in DZone's success in following this
trend. (If I was in the MVB program, I might be more heavily
invested. But I have books to write.)&lt;/p&gt;
&lt;p&gt;## DZone Response&lt;/p&gt;
&lt;p&gt;The structure of DZone's content leaves me with questions about the basis for the &amp;quot;Zones&amp;quot;. It can't be
popularity, since Java has slipped behind Python. Maybe there's some
other criteria; I wonder what they could be? Sponsorships? Or the
historical &amp;quot;Javalobby&amp;quot; web site?&lt;/p&gt;
&lt;p&gt;It also leaves me with the urge to suggest they radically rethink their
approach to content management. The &amp;quot;Zones&amp;quot; don't seem to have crisp
definitions. If they do have definitions, it might help to share them.
If they don't have a formal editorial policy on the zones,
perhaps they should be assigned more dynamically as content is reviewed
and included on the site. Perhaps there should be a zoning board?&lt;/p&gt;
&lt;p&gt;What's essential here is shfting DZone away from their historically
Java-centric view to embrace Python.&lt;/p&gt;
&lt;p&gt;Java can still be a prominent feature, but it needs to be put into
perspective. Python is large, and growing. Java is not quite as large,
and not growing as quickly.&lt;/p&gt;
&lt;p&gt;It's time for change.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="dzone"></category></entry><entry><title>Christmas Book Offers</title><link href="https://slott56.github.io/2022_12_20-christmas_book_offers.html" rel="alternate"></link><published>2022-12-20T11:00:00-05:00</published><updated>2022-12-20T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-20:/2022_12_20-christmas_book_offers.html</id><summary type="html">&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h3&gt;Unlearning SQL&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h2&gt;Google Play&lt;/h2&gt;
&lt;p&gt;Also available on Google Play. Here's &lt;strong&gt;Unlearning SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>On Algorithm Design</title><link href="https://slott56.github.io/2022_12_13-on_algorithm_design.html" rel="alternate"></link><published>2022-12-13T11:00:00-05:00</published><updated>2022-12-13T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-13:/2022_12_13-on_algorithm_design.html</id><summary type="html">&lt;p&gt;Some background: &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-faerie_dusttm.html"&gt;FAERIE DUST™&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html"&gt;Obstinate Idiocy, Expanded&lt;/a&gt;,
and even &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html"&gt;Permutations, Combinations and Frustrations&lt;/a&gt;.
I want to set up algorithm design as the diametric opposite of Obstinate
Stupidity. To do that, let's look at Obstinate Stupidity.&lt;/p&gt;
&lt;p&gt;The theme?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We did something wrong, and we don't want to fix it …&lt;/strong&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Some background: &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-faerie_dusttm.html"&gt;FAERIE DUST™&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html"&gt;Obstinate Idiocy, Expanded&lt;/a&gt;,
and even &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html"&gt;Permutations, Combinations and Frustrations&lt;/a&gt;.
I want to set up algorithm design as the diametric opposite of Obstinate
Stupidity. To do that, let's look at Obstinate Stupidity.&lt;/p&gt;
&lt;p&gt;The theme?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We did something wrong, and we don't want to fix it.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I emphasize this because it takes many forms. Another common variant is
&amp;quot;We can't afford to continue the way we are, but we can't afford the
time to fix it, either.&amp;quot; Sometimes, &amp;quot;Management wants this fixed, but we
don't have any budget.&amp;quot; You know how it is.&lt;/p&gt;
&lt;p&gt;The current go-round is someone who has an algorithm of intensely stupid
(and largely irrelevant) complexity. See &lt;a class="reference external" href="https://slott56.github.io/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html"&gt;My algorithm performs badly,
do I need
asyncio?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The situation is touchy. They have pre-reasoned an answer -- &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt;
-- and they're looking for (a) confirmation that they're obviously right
and (b) help rewriting something needlessly complex to somehow be faster
even when it's compute-bound. Specifically, they want Faerie Dust.&lt;/p&gt;
&lt;div class="section" id="frivolous-complexity"&gt;
&lt;h2&gt;Frivolous Complexity&lt;/h2&gt;
&lt;p&gt;How do I know it has needless, frivolous complexity?&lt;/p&gt;
&lt;p&gt;Here are two symptoms.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The problem has a lot of context. In thise case, there's a hierarchy.
The hierarchy may seem irrelevant, but it has this mind-numbingly
complex back-story, that they can't seem to ignore or abstract out of
the essential problem. There's a (large) number of details that don't
really explain what the hierarchy means or why it has to be
preserved. but somehow make it essential.&lt;/li&gt;
&lt;li&gt;The problem can only be described by repeating the legacy algorithm.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's dwell on this second symptom for a moment. We have two competing
issues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The legacy algorithm is too slow. AND,&lt;/li&gt;
&lt;li&gt;There's no other way to describe the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should make it clear they are looking at &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; as a kind of
Faerie Dust that will magically make the bad algorithm good. Without
fixing the bad algorithm.&lt;/p&gt;
&lt;p&gt;I want to emphasize the existence of details which can neither be
explained nor removed. The hierarchy must be there simply because it
must be there. Bizarre complications to walk the hierarchy are,
therefore, essential even if no one can explain them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="algorithm-design"&gt;
&lt;h2&gt;Algorithm Design&lt;/h2&gt;
&lt;p&gt;To actually improve the processing they need a new algorithm.&lt;/p&gt;
&lt;p&gt;I can't emphasize this enough: &lt;strong&gt;they need a new algorithm&lt;/strong&gt;. (This
often means a new data structure.)&lt;/p&gt;
&lt;p&gt;&amp;quot;Tuning&amp;quot; in any form is nothing more than nibbling around the edges to
make a bad algorithm run 15% faster.&lt;/p&gt;
&lt;p&gt;Rewriting may replace
&lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(2&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;)&lt;/span&gt; with &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;log&lt;i&gt;n&lt;/i&gt;)&lt;/span&gt;.
This would be dramatically better. From seconds to milliseconds. You know, 1,000% faster.&lt;/p&gt;
&lt;p&gt;There's a disciplined approach to this. Here are the steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write the post-condition for the processing as a whole.&lt;/li&gt;
&lt;li&gt;Write code that achieves the post-condition. (This may involve
decomposing the big problem into sub-problems, each of which is
approached by the same two-step process.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The intensely painful part of this is creating the post-condition.&lt;/p&gt;
&lt;p&gt;I suggested they &amp;quot;write an assert statement that must be true when the
algorithm has completed, and computed the right answer.&amp;quot;&lt;/p&gt;
&lt;p&gt;Hahahah.&lt;/p&gt;
&lt;p&gt;What an idiot I was.&lt;/p&gt;
&lt;p&gt;They didn't know how to write an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement. And at this
point, they stopped. Brick Wall. Dead in the water. Cannot proceed.
Done. Failed.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement has become the end-of-the-line. They can't (or
won't) do that. And they won't ask about it.&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Do you have a question?&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;I have to think before I can even begin to ask a question.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;How about think less and ask more. Do you have trouble writing the
word assert? What's stopping you?&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: [silence]&lt;/p&gt;
&lt;p&gt;Okay.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-conditions"&gt;
&lt;h2&gt;Post-Conditions&lt;/h2&gt;
&lt;p&gt;The post-condition is true when you're done. Let's look at my favorite,
M must be the maximum of A and B.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;B&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;This becomes an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement through (what seems to me, but boy
was I wrong) the following kind of translation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
assert M &amp;gt;= A and M &amp;gt;= B, f&amp;quot;Algorithm Failed {M=} {A=} {B=}&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Again, I acknowledge I was wrong to think
creating an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement from a post condition was in any way
clear. It's absolutely bewilderingly impossible.&lt;/p&gt;
&lt;p&gt;It's also important to note that the above condition is incomplete. The
value &lt;span class="formula"&gt;&lt;i&gt;M&lt;/i&gt; = &lt;i&gt;A&lt;/i&gt; + &lt;i&gt;B&lt;/i&gt;&lt;/span&gt; will also satisfy the condition. We need to test our
test cases to be sure they really do what we want.&lt;/p&gt;
&lt;p&gt;We really need to be more complete on what the domain of values for
&lt;span class="formula"&gt;&lt;i&gt;M&lt;/i&gt;&lt;/span&gt; is.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;M&lt;/i&gt; = &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; or &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; = &lt;i&gt;B&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;B&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;We could rewrite this slightly to be&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;M&lt;/i&gt; ∈ {&lt;i&gt;A&lt;/i&gt;, &lt;i&gt;B&lt;/i&gt;}&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;A&lt;/i&gt;&lt;span class="textbf"&gt; and &lt;/span&gt;&lt;i&gt;M&lt;/i&gt; ≥ &lt;i&gt;B&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;This version directly suggests a potential set comprehension to compute
the result:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
M = {m for m in {A, B} if m &amp;gt;= A and m &amp;gt;= B}.pop()
&lt;/pre&gt;
&lt;p&gt;This is the advantage of writing post-conditions. They often map to
code.&lt;/p&gt;
&lt;p&gt;You can even try it as pseudo-SQL if that helps you get past the
&lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SELECT M FROM (TABLE INT(X); A; B) WHERE M &amp;gt;= A AND M &amp;gt;= B
&lt;/pre&gt;
&lt;p&gt;I made up a &lt;tt class="docutils literal"&gt;TABLE INT(X); A; B&lt;/tt&gt; to describe a two-row table with
candidate solutions. I'm sure SQL folks have other sort of &amp;quot;interim
table&amp;quot; constructs they like.&lt;/p&gt;
&lt;p&gt;The point is to write down the final condition.&lt;/p&gt;
&lt;p&gt;I'll repeat that because the folks I was trying to work with refused to
understand the assert statement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write down the final condition&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-current-problem-s-post-condition"&gt;
&lt;h2&gt;The Current Problem's Post-Condition&lt;/h2&gt;
&lt;p&gt;The problem at hand seems to involve a result set, &lt;span class="formula"&gt;&lt;i&gt;R&lt;/i&gt;&lt;/span&gt;, pulled from
nodes of some hierarchy, &lt;span class="formula"&gt;&lt;i&gt;H&lt;/i&gt;&lt;/span&gt;, &lt;span class="formula"&gt;&lt;i&gt;R&lt;/i&gt; ⊆ &lt;i&gt;H&lt;/i&gt;&lt;/span&gt;. Each element of
the hierarchy, &lt;span class="formula"&gt;&lt;i&gt;h&lt;/i&gt; ∈ &lt;i&gt;H&lt;/i&gt;&lt;/span&gt; has a set of strings, &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;)&lt;/span&gt;. It
appears that a target string, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;&lt;/span&gt;, must be a member
of &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt; ∈ &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;), &lt;i&gt;r&lt;/i&gt; ∈ &lt;i&gt;R&lt;/i&gt;&lt;/span&gt;. I think.&lt;/p&gt;
&lt;p&gt;Note that the hierarchy is nothing more than a collection of identified
collections of strings. The parent-childness doesn't seem to matter for
the search algorithm. Within the result set, there's some importance to
the tier of the hierarchy, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;)&lt;/span&gt;, and a node from tier 1 means all
others are ignored or something. Can't be sure. (The endless backstory
on the hierarchy was little more than a review of the algorithm to query
it.)&lt;/p&gt;
&lt;p&gt;If any of this is true, it would be a fairly straightforward &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt; what could be parallelized with &lt;tt class="docutils literal"&gt;dask&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;concurrent.futures&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But we can't know if this really is the post-condition until someone in
a position to know writes the post-condition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-to-do"&gt;
&lt;h2&gt;Things To Do&lt;/h2&gt;
&lt;p&gt;The post-condition defines the results of test cases. The
&lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement becomes part of the pytest test cases. In a kind of
direct copy-and-paste process to shift from design aid to test result
condition.&lt;/p&gt;
&lt;p&gt;Currently, the algorithm they have seems to have no test cases. They
can't write a condition to describe correct answers, which suggests they
actually don't know what'a correct.&lt;/p&gt;
&lt;p&gt;If they wrote test cases, they might be able to
visualize an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement that confirms the test worked. Might.
It appears to be asking a lot to write test cases for the legacy
algorithm.&lt;/p&gt;
&lt;p&gt;Indeed, if they wrote a conditional expression that described the
results of any working example, they'd have taken giant steps toward the
necessary &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement. But that's asking a lot, it appears.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-then-what"&gt;
&lt;h2&gt;And Then What?&lt;/h2&gt;
&lt;p&gt;Once you have a target condition, you can then design code to satisfy
some (or all) of the target condition. &lt;a class="reference external" href="https://www.google.com/books/edition/A_Discipline_of_Programming/MsUmAAAAMAAJ?hl=en"&gt;Dijkstra's A Discipline of
Programming&lt;/a&gt;
has a thorough description of the &amp;quot;weakest precondition&amp;quot; operator. It
works like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Imagine a statement that might satisfy some or all of your
post-condition.&lt;/li&gt;
&lt;li&gt;Substitute the effect of the statement into the post-condition.&lt;/li&gt;
&lt;li&gt;What's left is the weakest pre-condition for that statement to work.
It's often the post-condition for a statement must precede the
statement you wrote.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You write the program from the desired post-condition moving forward
until you get a weakest pre-condition of True. Back to front. From goal
to initialization.&lt;/p&gt;
&lt;p&gt;Post-condition gives you statements. Statements have pre-conditions. You
iterate, writing conditions, statements, and more conditions.&lt;/p&gt;
&lt;p&gt;(You can also spot useless code because the pre-condition matches the
post-condition.)&lt;/p&gt;
&lt;p&gt;For the silly &amp;quot;maximum&amp;quot; problem?&lt;/p&gt;
&lt;p&gt;Try M := A as a statement. This only works if A &amp;gt;= B. That's the
pre-condition that is derived from substituting M = A into the
post-condition.&lt;/p&gt;
&lt;p&gt;Try M := B as a statement. This only works if B &amp;gt;= A. That's the
pre-condition that is derived from substituting M = B into the
post-condition.&lt;/p&gt;
&lt;p&gt;These two pre-conditions describe an if-elif statement.&lt;/p&gt;
&lt;p&gt;Note that this feels weirdly arbitrary and exploratory. It's a kind of
empiricism where we try statements and see if they're helpful. There
don't need to be any constraints. The post-condition is all that's
required to explore the space of statements that might work, or at least
might help.&lt;/p&gt;
&lt;p&gt;Of course, we're not stupid. And we're lazy. We don't search the
infinite space of statements. We can often imagine the statements
without a &lt;strong&gt;lot&lt;/strong&gt; of complex work. The formal weakest pre-condition
process is necessary to confirm our intuition. Or to assert that
something is free of astonishing side-effects.&lt;/p&gt;
&lt;p&gt;It all depends on one thing: a clear, formal statement of the
post-condition.&lt;/p&gt;
&lt;p&gt;Since I made the mistake of describing the post-condition as a line of
code, we've hit some kind of brick wall related to &amp;quot;I won't write code.&amp;quot;
Or &amp;quot;I don't want to be seen writing code.&amp;quot; or &amp;quot;I don't want you to
critique my code.&amp;quot;&lt;/p&gt;
&lt;p&gt;Dunno.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category><category term="Design Principles"></category><category term="asycnio"></category><category term="faerie dust"></category></entry><entry><title>My algorithm performs badly, do I need asyncio?</title><link href="https://slott56.github.io/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html" rel="alternate"></link><published>2022-12-06T11:00:00-05:00</published><updated>2022-12-06T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-06:/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html</id><summary type="html">&lt;p&gt;Real Question (somewhat abbreviated): &amp;quot;My algorithm performs badly, do I
need asyncio?&amp;quot;&lt;/p&gt;
&lt;p&gt;Short answer: No.&lt;/p&gt;
&lt;p&gt;Long answer: Sigh. No. Do you need a slap upside the head?&lt;/p&gt;
&lt;p&gt;Here's how it plays out:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We figured that if we 'parallelize' it, then we can apply multiple
cores, and it will run …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Real Question (somewhat abbreviated): &amp;quot;My algorithm performs badly, do I
need asyncio?&amp;quot;&lt;/p&gt;
&lt;p&gt;Short answer: No.&lt;/p&gt;
&lt;p&gt;Long answer: Sigh. No. Do you need a slap upside the head?&lt;/p&gt;
&lt;p&gt;Here's how it plays out:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We figured that if we 'parallelize' it, then we can apply multiple
cores, and it will run 4x as fast.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;What kind of I/O are you doing?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;None, really. It's compute-intensive.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Async is for I/O. A function can be computing while other functions
are waiting for I/O to complete.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Right. We can have lots of them, so they each get a core.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Listen, please. A function can be computing. That's &amp;quot;A&amp;quot;. Singular.
One. Take a step back from the asyncio package. What are you trying to
do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Make things faster.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Take a breath. Make &lt;em&gt;what&lt;/em&gt; faster?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;A slow algorithm.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Do you want to know what we're trying do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;First, we query the database to get categories. Then we query the
database to get details for the categories. Then we query the database
to organize the categories into a hierarchy. Except for certain
categories which are special. So we have if-statements to handle the
special cases.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's I/O intensive.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;That's not the part that's slow.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Context is important. I feel the need to describe all of the
background.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's trivia. It's as important as your mother's maiden name.
What's the problem?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;The problem is we don't know how to use asyncio to use multiple
cores.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Do you know how to divide by zero?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;No. It's absurd.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;We already talked about asyncio for compute-intensive processing.
Same level of absurd as dividing by zero. What are you trying to do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We have some for loops that compute a result slowly. We want to
parallelize them.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Every for statement that computes a collection is a generator
expression. Every generator expression can be made into a list, set, or
dictionary comprehension. Start there.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;But what if the for statement has a super-complex body with lots of
conditions?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Then you might have to take a step back and redesign the algorithm.
What does it do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;lt;code&amp;gt; &amp;quot;See all these for statements and if-statements?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;What does it do? What's the final condition?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;A set of valid answers.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Define valid.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;What do you mean? 'Define valid?' It's a set that's valid!&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Write a condition that defines whether or not a result set is
valid. Don't hand-wave, write the condition.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;That's impossible. The algorithm is too complex.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;How do you test this process? How do you create test data? How do
you know an answer it produces is correct?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q:&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's the fundamental problem. You need to have a well-defined
post-condition. Logic. An &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement that defines all correct
answers. From that you can work backwards into an algorithm. You may not
need parallelism; you may simply have a wrong data structure somewhere
in &amp;lt;code&amp;gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Can you point out the wrong data structure?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;What? Why won't you? You read the code, you can point out the
problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Do I have to do all the work?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category><category term="analysis"></category><category term="asyncio"></category><category term="concurrency"></category></entry><entry><title>Functional Programming and Finite State Automata (FSA)</title><link href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html" rel="alternate"></link><published>2022-11-29T11:00:00-05:00</published><updated>2022-11-29T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-29:/2022_11_29-functional_programming_and_finite_state_automata_fsa.html</id><summary type="html">&lt;p&gt;When I talk about functional programming in Python, folks like to look
for place where functional programming isn't appropriate. They latch
onto finite-state automata (FSA) because &amp;quot;state&amp;quot; of an automata doesn't
seem to fit with stateless objects used in functional programming.&lt;/p&gt;
&lt;p&gt;This is a false dichotomy.&lt;/p&gt;
&lt;p&gt;It's emphatically false in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I talk about functional programming in Python, folks like to look
for place where functional programming isn't appropriate. They latch
onto finite-state automata (FSA) because &amp;quot;state&amp;quot; of an automata doesn't
seem to fit with stateless objects used in functional programming.&lt;/p&gt;
&lt;p&gt;This is a false dichotomy.&lt;/p&gt;
&lt;p&gt;It's emphatically false in Python, where we don't have a purely
functional language.&lt;/p&gt;
&lt;p&gt;(In a purely functional language, monads can help make FSA's behave
properly and avoid optimization. The use of a recursion to consume an
iterable and make state transitions is sometimes hard to visualize. We
don't have these constraints.)&lt;/p&gt;
&lt;p&gt;Let's look at a trivial kind of FSA: the parity computation. We want to
know how many 1-bits are in a given value. Step 1 is to expand an
integer into bits.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def bits(n: int) -&amp;gt; Iterable[int]:
    if n &amp;lt; 0:
        raise ValueError(f&amp;quot;{n} must be &amp;gt;= 0&amp;quot;)
    while n &amp;gt; 0:
        n, bit = divmod(n, 2)
        yield bit
&lt;/pre&gt;
&lt;p&gt;This will transform a number into a sequence of bits. (They're in order
from LSB to MSB, which is the reverse order of the &lt;tt class="docutils literal"&gt;bin()&lt;/tt&gt; function.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; list(bits(42))
[0, 1, 0, 1, 0, 1]
&lt;/pre&gt;
&lt;p&gt;Given a sequence of bits, is there an odd number or an even number? This
is the parity question. The parity FSA is often depicted like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/FSA_image.png"&gt;&lt;img alt="two-state finite-state automaton" src="https://slott56.github.io/media/FSA_image.png" style="width: 320px; height: 188px;" /&gt;&lt;/a&gt;
&lt;p&gt;When the parity is in the &lt;strong&gt;even&lt;/strong&gt; state, a 1-bit transitions to the
&lt;strong&gt;odd&lt;/strong&gt; state. When the parity is in the &lt;strong&gt;odd&lt;/strong&gt;, a 1-bit transitions to
the &lt;strong&gt;even&lt;/strong&gt; state.&lt;/p&gt;
&lt;p&gt;Clearly, this demands the &lt;strong&gt;State&lt;/strong&gt; design pattern, right?&lt;/p&gt;
&lt;div class="section" id="an-oo-implementation"&gt;
&lt;h2&gt;An OO Implementation&lt;/h2&gt;
&lt;p&gt;Here's a detailed OO implementation using the &lt;strong&gt;State&lt;/strong&gt; design pattern.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Parity:
    def signal(self, bit: int) -&amp;gt; &amp;quot;Parity&amp;quot;:
        ...


class EvenParity(Parity):
    def signal(self, bit: int) -&amp;gt; Parity:
        if bit % 2 == 1:
            return OddParity()
        else:
            return self


class OddParity(Parity):
    def signal(self, bit: int) -&amp;gt; Parity:
        if bit % 2 == 1:
            return EvenParity()
        else:
            return self


class ParityCheck:
    def __init__(self):
        self.parity = EvenParity()

    def check(self, message: Iterable[int]) -&amp;gt; None:
        for bit in message:
            self.parity = self.parity.signal(bit)

    &amp;#64;property
    def even_parity(self) -&amp;gt; bool:
        return isinstance(self.parity, EvenParity)
&lt;/pre&gt;
&lt;p&gt;Each of the &lt;tt class="docutils literal"&gt;Parity&lt;/tt&gt; subclasses implements one of the states of the
FSA. The lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method implements state-specific behavior.
In this case, it's a transition to another state. In more complex
examples it may involve side-effects like updating a mutable data
structure to log progress.&lt;/p&gt;
&lt;p&gt;This mapping from state to diagram to class is pretty pleasant. Folks
really like to implement each state as a distinct class. It somehow
feels really solid.&lt;/p&gt;
&lt;p&gt;It's import to note the loneliness of the lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method.
It's all by itself in that big, empty class.&lt;/p&gt;
&lt;p&gt;Hint. This could be a function.&lt;/p&gt;
&lt;p&gt;It's also important to note that this kind of design is subject to odd,
unpleasant design tweaks. Ideally, the transition is *only* done by
the lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method. Nothing stops the unscrupulous
programmer from putting state transitions in other methods. Sigh.&lt;/p&gt;
&lt;p&gt;We'll look at more complex kinds of state transitions later. In the UML
state chart diagrams sates may also have entry actions and exit actions,
a bit more complex behavior than we we're showing in this example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-functional-implementation"&gt;
&lt;h2&gt;A Functional Implementation&lt;/h2&gt;
&lt;p&gt;What's the alternative? Instead of modeling state as an object with
methods for behavior, we can model state as a function. The state is a
function that transitions to the next state.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def even(bit: int) -&amp;gt; ParityF:
    if bit % 2 == 1:
        return odd
    else:
        return even


def odd(bit: int) -&amp;gt; ParityF:
    if bit % 2 == 1:
        return even
    else:
        return odd


def parity_check(message: Iterable[int], init: ParityF = None) -&amp;gt; ParityF:
    parity = init or even
    for bit in message:
        parity = parity(bit)
    return parity


def even_parity(p: ParityF) -&amp;gt; bool:
    return p is even
&lt;/pre&gt;
&lt;p&gt;Each state is modeled by a function.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;parity_check()&lt;/tt&gt; function examines each bit, and applies the
current state function (either &lt;tt class="docutils literal"&gt;even()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;odd()&lt;/tt&gt;) to compute the
next state, and save this as the vakue of the &lt;tt class="docutils literal"&gt;parity&lt;/tt&gt; variable.&lt;/p&gt;
&lt;p&gt;What's the ParityF type? This:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import Protocol


class ParityF(Protocol):
    def __call__(self, bit: int) -&amp;gt; &amp;quot;ParityF&amp;quot;:
        ...
&lt;/pre&gt;
&lt;p&gt;This uses a Protocol to define a type with a recursive cycle in it. It
would be more fun to use something like
&lt;tt class="docutils literal"&gt;ParityF = &lt;span class="pre"&gt;Callable[[int],&lt;/span&gt; &amp;quot;ParityF&amp;quot;]&lt;/tt&gt;, but that's not (yet)
supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-extensions"&gt;
&lt;h2&gt;Some Extensions&lt;/h2&gt;
&lt;p&gt;What if we need each state to have more attributes?&lt;/p&gt;
&lt;p&gt;Python functions have attributes. Like this: &lt;tt class="docutils literal"&gt;even.some_value = 2&lt;/tt&gt;;
&lt;tt class="docutils literal"&gt;odd.some_value = 1&lt;/tt&gt;. We can add all the attributes we require.&lt;/p&gt;
&lt;p&gt;What about other functions that happen on entry to a state or exit from
a state? This is trickier. My preference is to use a class as a
namespace that contains a number of related functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Even:
    &amp;#64;staticmethod
    def __call__(bit: int) -&amp;gt; ParityF:
        if bit % 2 == 1:
            odd.enter()
            return odd
        else:
            return even
    &amp;#64;staticmethod
    def enter() -&amp;gt; None:
        print(&amp;quot;even&amp;quot;)

even = Even()
&lt;/pre&gt;
&lt;p&gt;This seems to work out well, and keeps each state-specific material in a
single namespace. It uses static methods to follow the same design
principle as the previous example -- these are pure functions, collected
into the class only to provide a namespace so we can use &lt;tt class="docutils literal"&gt;odd.enter()&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;even.enter()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;State&lt;/strong&gt; design pattern isn't &lt;em&gt;required&lt;/em&gt; to implement a FSA.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="functional python programming"></category><category term="software design"></category><category term="#python"></category></entry><entry><title>Permutations, Combinations and Frustrations</title><link href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html" rel="alternate"></link><published>2022-11-22T17:21:00-05:00</published><updated>2022-11-22T17:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-permutations_combinations_and_frustrations.html</id><summary type="html">&lt;p&gt;The issue of permutations and combinations is sometimes funny.&lt;/p&gt;
&lt;p&gt;Not funny weird. But, funny &amp;quot;haha.&amp;quot;&lt;/p&gt;
&lt;p&gt;I received an email with 100's of words and 10 attachments. (10.
Really.) The subject was how best to enumerate 6! permutations of
something or other. With a goal of comparing some optimization algorithm
with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The issue of permutations and combinations is sometimes funny.&lt;/p&gt;
&lt;p&gt;Not funny weird. But, funny &amp;quot;haha.&amp;quot;&lt;/p&gt;
&lt;p&gt;I received an email with 100's of words and 10 attachments. (10.
Really.) The subject was how best to enumerate 6! permutations of
something or other. With a goal of comparing some optimization algorithm
with a brute force solution. (I don't know why. I didn't ask.)&lt;/p&gt;
&lt;p&gt;Apparently, the programmer was not aware that permutation creation is a
pretty standard algorithm with a standard solution. Most &amp;quot;real&amp;quot;
programming languages have libraries which already solve this in a tidy,
efficient, and well-documented way.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.permutations"&gt;https://docs.python.org/3/library/itertools.html#itertools.permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I suspect that this is true for every language in common use.&lt;/p&gt;
&lt;p&gt;In Python, this doesn't even really involve programming. It's a
first-class expression you enter at the Python &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/tt&gt; prompt.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import itertools
&amp;gt;&amp;gt;&amp;gt; list(itertools.permutations(&amp;quot;ABC&amp;quot;))
[('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]
&lt;/pre&gt;
&lt;p&gt;What's really important about this question was the obstinate inability
of the programmer to realize that their problem had a tidy, well
understood solution. And has had a good solution for decades. Instead
they did a lot of programming and sent 100's of words and 10 attachments
(10. Really.)&lt;/p&gt;
&lt;p&gt;The best I could do was provide this link:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.algorist.com"&gt;Steven Skiena, The Algorithm Design
Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It appears that too few programmers are aware of how much already
exists. They plunge ahead creating a godawful mess when a few minutes of
reading would have provided a very nice answer.&lt;/p&gt;
&lt;p&gt;Eventually, they sent me this:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Heap's_algorithm"&gt;http://en.wikipedia.org/wiki/Heap's_algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a grudging acknowledgement that they had wasted hours failing to
reinvent the wheel.&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category></entry><entry><title>Obstinate Idiocy, Expanded</title><link href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html" rel="alternate"></link><published>2022-11-22T17:15:00-05:00</published><updated>2022-11-22T17:15:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-obstinate_idiocy_expanded.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;Here are three warning signs I was able to deduce.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No Rational Justification&lt;/li&gt;
&lt;li&gt;Ineffective Tool Choice&lt;/li&gt;
&lt;li&gt;Random Whining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To which I can now add two more.&lt;/p&gt;
&lt;p&gt;Symptom 4 of Obstinate Idiocy is that &lt;strong&gt;all questions are rhetorical&lt;/strong&gt;
and they often come with pre-argued answers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;Here are three warning signs I was able to deduce.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No Rational Justification&lt;/li&gt;
&lt;li&gt;Ineffective Tool Choice&lt;/li&gt;
&lt;li&gt;Random Whining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To which I can now add two more.&lt;/p&gt;
&lt;p&gt;Symptom 4 of Obstinate Idiocy is that &lt;strong&gt;all questions are rhetorical&lt;/strong&gt;
and they often come with pre-argued answers.&lt;/p&gt;
&lt;p&gt;Actual email quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: &amp;quot;&amp;gt;Excel is almost the stupidest choice possible&lt;/p&gt;
&lt;p&gt;OI: &amp;quot;What criteria are you using to make that statement?&lt;/p&gt;
&lt;p&gt;My criteria was that I needed a way for non-tech people and
non-programmers...&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And on the email spins, pre-arguing points about &amp;quot;non-programmers&amp;quot; and pre-justifying a bad
answer. Since their argument is already presented (in mind-numbing
detail), there's no effective way to answer the question they asked.
Indeed, there's little point in trying to answer, since the pre-argued
response is likely to be the final response.&lt;/p&gt;
&lt;p&gt;In order to answer, we have to get past the pre-argued response. And
this can be difficult because this devolves to &amp;quot;it's political, you
don't need the details.&amp;quot; So, if it's not technical, why am I involved?&lt;/p&gt;
&lt;p&gt;Symptom 5 of Obstinate Idiocy is &lt;strong&gt;Learning is Impossible&lt;/strong&gt;. This may
actually be the root cause for Symptom 3, &lt;strong&gt;Ineffective Tool Choice&lt;/strong&gt;.
It now seems to me that the tool was chosen to minimize learning. I had
suggested using Mathematica. I got this response: &amp;quot; I don't know Python
or R or SAS.&amp;quot; The answer seems like a non-sequitur because it is. It's
justification for a bad decision.&lt;/p&gt;
&lt;p&gt;The problem they're trying to solve is gnarly, perhaps it's time to
consider learning a better toolset.&lt;/p&gt;
&lt;p&gt;Excel has already failed the OI. They asked for an opinion (&amp;quot;Q2: What do
you believe are the pros/cons of ... using Excel with &amp;quot;Excel Solver&amp;quot;
...?&amp;quot;) that seems to ignore the fact that they already failed trying to
use Excel. They already failed, and they followed up by asking for the
pros and cons of a tool they already failed with.&lt;/p&gt;
&lt;p&gt;From this limited exchange it appears that they're so unwilling to learn
that they can't gather data from their own experience and learn from it.&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="software design"></category><category term="analysis"></category><category term="spreadsheet"></category></entry><entry><title>FAERIE DUST™</title><link href="https://slott56.github.io/2022_11_22-faerie_dusttm.html" rel="alternate"></link><published>2022-11-22T16:39:00-05:00</published><updated>2022-11-22T16:39:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-faerie_dusttm.html</id><summary type="html">&lt;p&gt;Here's how to recognize a &lt;strong&gt;Faerie Dust&lt;/strong&gt; request:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have identified a problem. It can be with almost anything:
scalability, reliability, auditability, any Quality Measure.&lt;/li&gt;
&lt;li&gt;We're pursuing a specific technology. Typically, something that has
the lowest impact on our architecture.&lt;/li&gt;
&lt;li&gt;We can't address anything other than this specific technology
variation …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's how to recognize a &lt;strong&gt;Faerie Dust&lt;/strong&gt; request:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have identified a problem. It can be with almost anything:
scalability, reliability, auditability, any Quality Measure.&lt;/li&gt;
&lt;li&gt;We're pursuing a specific technology. Typically, something that has
the lowest impact on our architecture.&lt;/li&gt;
&lt;li&gt;We can't address anything other than this specific technology
variation -- we can't change the application software or buy
hardware.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once we're in the &lt;strong&gt;Faerie Dust&lt;/strong&gt; realm, what can we do?&lt;/p&gt;
&lt;p&gt;Laughing doesn't help. They have a serious problem, they need a
solution. The fact that they won't address the cause isn't completely
relevant -- we have to work on the denial, anger, negotiation,
depression cycle first. Hopefully skipping past the anger, or assuring
the anger is directed elsewhere.&lt;/p&gt;
&lt;p&gt;Helping doesn't help. If we join the quest for their Faerie Dust, what
will we accomplish? We'll burn billable hours to -- eventually -- reach
an equivocal non-solution with a complex write-up and recommendations
that won't be implemented.&lt;/p&gt;
&lt;p&gt;Not helping doesn't help. If we obstinately refuse to join the quest for
the Faerie Dust... well... then we've done nothing. We haven't advanced
their understanding of their problem.&lt;/p&gt;
&lt;p&gt;What's left? Is there a middle road that allows us to join the Faerie
Dust quest, but still point out the side roads, other monsters and other
treasures along the way?&lt;/p&gt;
&lt;p&gt;Perhaps there is, but it would require a kind of saintly patient
persistence. We would have to start with an enumeration of problem
causes, prioritize them, and then focus on their selected bit of Faerie
Dust. My idea is that enumerating the possible causes allows us to
identify the missed opportunities, and the possible magnitude of fixing
something essential (algorithm or data structure) instead of throwing up
window-dressing to cover problems in something inessential (reducing the
time required for a table scan).&lt;/p&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here's a concrete example of Faerie Dust.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pick a data model that doesn't fit the use cases. i.e., lumped many
discrete details into a single text field that has &amp;quot;rich semantic
content&amp;quot;. Work around this mistake by using wild-card matches.&lt;/li&gt;
&lt;li&gt;Complained about performance and dug into nuanced details of LIKE
clause and full-text search. Lots of study time spent on LIKE clause
processing and how to improvement performance.&lt;/li&gt;
&lt;li&gt;Refused to discuss the actual use case or the mismatch between data
structures and requirements.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The design didn't match the use cases. &lt;strong&gt;Faerie Dust&lt;/strong&gt; won't help.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="quot-helping-doesn-39-t-help-if-we-join-the-que"&gt;
&lt;h2&gt;&amp;amp;quot;Helping doesn&amp;amp;#39;t help. If we join the que...&lt;/h2&gt;
&lt;p&gt;TechNeilogy&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-27 09:27:52.554000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Helping doesn't help. If we join the quest for their Faerie Dust, what
will we accomplish? ...Not helping doesn't help.&amp;quot;
This really hits home. I once had to make this agonizing decision
regarding a project to which I had pledged commitment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-clients-who-request-quot-faerie-dust-quot-ar"&gt;
&lt;h2&gt;The clients who request &amp;amp;quot;Faerie Dust&amp;amp;quot; ar...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-30 20:11:13.261000-05:00&lt;/p&gt;
&lt;p&gt;The clients who request &amp;quot;Faerie Dust&amp;quot; are also the ones that will
probably also claim that they are &amp;quot;special&amp;quot; and nobody has ever had a
problem like they currently have. Pointing out a web page or a book
which describes a similar problem to theirs will at best get you dirty
looks and sometimes even a boot out the door.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category></entry><entry><title>Testing with PySpark</title><link href="https://slott56.github.io/2022_11_22-testing_with_pyspark.html" rel="alternate"></link><published>2022-11-22T11:00:00-05:00</published><updated>2022-11-22T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-testing_with_pyspark.html</id><summary type="html">&lt;p&gt;This isn't about details of pySpark. This is about the philosophy of
testing when working with a large, complex framework, like pySpark,
pandas, numpy, or whatever.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Use data subsets.&lt;/p&gt;
&lt;p&gt;Write unit tests for the functions that process the data.&lt;/p&gt;
&lt;p&gt;Don't test pyspark itself. Test the code you write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This isn't about details of pySpark. This is about the philosophy of
testing when working with a large, complex framework, like pySpark,
pandas, numpy, or whatever.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Use data subsets.&lt;/p&gt;
&lt;p&gt;Write unit tests for the functions that process the data.&lt;/p&gt;
&lt;p&gt;Don't test pyspark itself. Test the code you write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some History&lt;/h2&gt;
&lt;p&gt;I've worked with folks -- data scientists specifically -- without a deep
background in software engineering.&lt;/p&gt;
&lt;p&gt;When we said their model-building applications needed a &lt;strong&gt;test case&lt;/strong&gt;,
they supplied the test case they used to validate the model.&lt;/p&gt;
&lt;p&gt;Essentially, their test script ran the entire training set. Built the
model. Did extensive statistical testing on the resulting decisions made
by the model. The test case asserted that the stats were &amp;quot;good.&amp;quot; In
fact, they recapitulated the entire model review process that had gone
on in the data science community to get the model from &amp;quot;someone's idea&amp;quot;
to a &amp;quot;central piece of the business.&amp;quot;&lt;/p&gt;
&lt;p&gt;The test case ran for hours and required a huge server loaded up with
GPUs. It cost a fortune to run. And. It tended to timeout the deployment
pipeline.&lt;/p&gt;
&lt;p&gt;This isn't what we mean by &amp;quot;test.&amp;quot; Our mistake.&lt;/p&gt;
&lt;p&gt;We had to explain that &lt;strong&gt;a unit test demonstrates the code works&lt;/strong&gt;. That
was all. It shouldn't involve the full training set of data and the full
training process with all the hyperparameter tuning and hours of compute
time. We don't need to revalidate your model. We want to know the code
won't crash. We'd like 100% code coverage. But the objective is little
more than show it won't crash when we deploy it.&lt;/p&gt;
&lt;p&gt;It was difficult to talk them down from full training sets. They
couldn't see the value in testing code in isolation. A phrase like &amp;quot;just
enough data to prove the thing could plausibly work with real data&amp;quot;
seemed to resonate.&lt;/p&gt;
&lt;p&gt;A few folks complained that a numpy array with a few rows didn't really
show very much. We had to explain (more than once) that we didn't really
want to know all the algorithmic and performance nuances. We mostly
wanted to know it wouldn't crash when we applied it to production data.
We agreed with them the test case didn't show much. We weren't qualified
to revalidate the model; we were only qualified to run their training
process for them. If they had done enough work to be sure we *could*
run it.&lt;/p&gt;
&lt;p&gt;(It was a bank. Software deployments have rules. An AI model-building
app is still an app. It still goes through the same CI/CD pipeline as
demand deposit account software changes. It's a batch job, really, just
a bit more internally sophisticated than the thing that clears checks.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-structure"&gt;
&lt;h2&gt;Some Structure&lt;/h2&gt;
&lt;p&gt;I lean toward the following tiers of testing:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Unit tests of every class and function. 100% code coverage here. I
suggest using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-cov&lt;/span&gt;&lt;/tt&gt; packages to tracking
testing and make sure every line of code has some test case. For a
few particularly tricky things, every logic path is better than
simply testing lines of code. In some cases, every line of code will
tend to touch every logic path, but seems less burdensome.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;hypothesis&lt;/tt&gt; for the more sensitive numeric functions. In “data
wrangling” applications there may not be too many of these. In the
machine learning and model application software, there may be more
sophisticated math that benefits from hypothesis testing.&lt;/li&gt;
&lt;li&gt;Write larger integration tests that mimic &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt; processing,
using multiple functions or classes to be sure they work together
correctly, but without the added complication of actually using
pySpark. This means creating mocks for some of the libraries using
&lt;tt class="docutils literal"&gt;unittest.mock&lt;/tt&gt; objects. This is a fair bit of work, but it pays
handsome dividends when debugging. For well-understood &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt;
APIs, it should be easy to provide mocked results for the app
components under test to use. For the less well-understood parts, the
time spent building a mock will often provide useful insight into how
(and why) it works the way it does. In rare cases, building the mock
suggests a better design that's easier to test.&lt;/li&gt;
&lt;li&gt;Finally. Write a few overall acceptance tests that use your modules
and also start and run a small &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt; instance from the command
line. For this, I really like using &lt;tt class="docutils literal"&gt;behave&lt;/tt&gt;, and writing the
acceptance testing cases using the Gherkin language. This enforces a
very formal “Given-When-Then” structure on the test scenarios, and
allows you to write in English. You can share the Gherkin with users
and other stakeholders to be sure they agree on what the application
should do.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Each tier of testing builds up a larger, and more complete picture of
the overall application.&lt;/p&gt;
&lt;p&gt;More important, we don't emphasize running pySpark and testing it. It
already works. It has it's own tests. We need to test the stuff we
wrote, not the framework.&lt;/p&gt;
&lt;p&gt;We need to test our code in isolation.&lt;/p&gt;
&lt;p&gt;We need to test integrated code with mocked pySpark.&lt;/p&gt;
&lt;p&gt;Once we're sure our code is likely to work, the next step is
confirmation that the important parts do work with pySpark. For
life-critical applications, the integration tests will need to touch
100% of the logic paths. For data analytics, extensive integration
testing is a lot of cost for relatively little benefit.&lt;/p&gt;
&lt;p&gt;Even for data analytics, testing is a lot of work. The alternative is
hope and prayer. I suggest starting with small unit tests, and expanding
from there.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="pySpark"></category><category term="gherkin"></category><category term="#python"></category></entry><entry><title>Buzz in the general public regarding software bugs</title><link href="https://slott56.github.io/2022_11_22-buzz_in_the_general_public_regarding_software_bugs.html" rel="alternate"></link><published>2022-11-22T10:17:00-05:00</published><updated>2022-11-22T10:17:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-buzz_in_the_general_public_regarding_software_bugs.html</id><summary type="html">&lt;p&gt;I got this the other day: &amp;quot;there seems to be a lot of buzz out in the
general public regarding software bugs&amp;quot;.&lt;/p&gt;
&lt;p&gt;Attached to this was an article from The Economist in 2003 plus one
from 2010. To me, this doesn't seem to be a &amp;quot;lot&amp;quot; of buzz. But what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got this the other day: &amp;quot;there seems to be a lot of buzz out in the
general public regarding software bugs&amp;quot;.&lt;/p&gt;
&lt;p&gt;Attached to this was an article from The Economist in 2003 plus one
from 2010. To me, this doesn't seem to be a &amp;quot;lot&amp;quot; of buzz. But what
do I know?&lt;/p&gt;
&lt;p&gt;Further, it did &lt;em&gt;not&lt;/em&gt; come from someone outside the software/IT
industry. It came from a DBA. I guess the presence of this email in
my inbox must mean some DBA's are surprised that there are bugs. I
guess they were surprised to see &amp;quot;bug&amp;quot; in a general-interest
magazine.&lt;/p&gt;
&lt;p&gt;They also forwarded a link to &lt;a class="reference external" href="http://www.glitchthebook.com/"&gt;http://www.glitchthebook.com/&lt;/a&gt;. This
looks more interesting than a writer for The Economist
(&lt;a class="reference external" href="http://www.economist.com/"&gt;http://www.economist.com/&lt;/a&gt;) providing information to a general
audience that every professional should already know.&lt;/p&gt;
&lt;p&gt;I guess it could be interesting when someone notices &amp;quot;bug&amp;quot; in a
general-interest magazine.&lt;/p&gt;
&lt;div class="section" id="hidden-cost-hogwash"&gt;
&lt;h2&gt;Hidden Cost Hogwash&lt;/h2&gt;
&lt;p&gt;I object, however to this &amp;quot;hidden cost&amp;quot; hogwash. Bugs have an
explicit, obvious, direct cost. There may be &amp;quot;hidden costs&amp;quot; but they
are largely irrelevant and pale in comparison to direct costs.&lt;/p&gt;
&lt;p&gt;What we need are articles not on the &amp;quot;hidden cost&amp;quot;, but on actual
bugs. In particular, there are two kinds of actual costs that we need
to look at: &amp;quot;hidden bugs&amp;quot; and &amp;quot;compound bugs&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Hidden Bugs.&lt;/strong&gt;
These are things simply below the user interface
level. They're present and they're often worked-around by UI
hacks. Hidden Bugs are more costly than visible bugs. Complex
multi-layered and multi-component architectures are packed with
hidden bugs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compound Bugs.&lt;/strong&gt;
These are hidden bugs where the workaround also
has a bug. The interface file has an intermittent glitch, so the
web services are cluttered with &lt;strong&gt;try:&lt;/strong&gt; statements. The &lt;strong&gt;try:&lt;/strong&gt;
statements, themselves, harbor bugs, so we have to then add
&lt;strong&gt;assert&lt;/strong&gt; statements and declare it &amp;quot;defensive programming&amp;quot;. The
net effect is to simply log something that was provided to the
interface incorrectly. Sigh.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We shouldn't waste time talking about &amp;quot;hidden costs&amp;quot; of glitches
when we aren't even sure what the actual up-front costs are. If we
knew the costs, we'd spend a bit more on the software to prevent
the bugs in the first place.&lt;/p&gt;
&lt;p&gt;We also shouldn't be surprised to see &amp;quot;bug&amp;quot; in a general-interest
magazine.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="API Design"></category><category term="defensive programming"></category></entry><entry><title>Generators as Stacks of Operations</title><link href="https://slott56.github.io/2022_11_15-generators_as_stacks_of_operations.html" rel="alternate"></link><published>2022-11-15T11:00:00-05:00</published><updated>2022-11-15T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-15:/2022_11_15-generators_as_stacks_of_operations.html</id><summary type="html">&lt;p&gt;See
&lt;a class="reference external" href="https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff"&gt;https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm delighted by this article.&lt;/p&gt;
&lt;p&gt;I was shown only the first, horrible, example. I think the idea was to
push back on the idea of complex generators. I fumed.&lt;/p&gt;
&lt;p&gt;Then I read the entire article.&lt;/p&gt;
&lt;p&gt;Now I'm fuming at someone who posted the first example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See
&lt;a class="reference external" href="https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff"&gt;https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm delighted by this article.&lt;/p&gt;
&lt;p&gt;I was shown only the first, horrible, example. I think the idea was to
push back on the idea of complex generators. I fumed.&lt;/p&gt;
&lt;p&gt;Then I read the entire article.&lt;/p&gt;
&lt;p&gt;Now I'm fuming at someone who posted the first example -- apparently
having failed to read the rest of the post.&lt;/p&gt;
&lt;p&gt;This idea of building a stack of iterators is very, very good.&lt;/p&gt;
&lt;p&gt;The example (using simple operations) can be misleading. A follow-on
example doing something like file parsing might be helpful. But, if you
go too far, you wind up writing an entire book about Functional
Programming in Python.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="generator functions"></category></entry><entry><title>Fighting Against Over-Engineering</title><link href="https://slott56.github.io/2022_11_08-fighting_against_over_engineering.html" rel="alternate"></link><published>2022-11-08T16:18:00-05:00</published><updated>2022-11-08T16:18:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-08:/2022_11_08-fighting_against_over_engineering.html</id><summary type="html">&lt;p&gt;I've been trying to help some folks who have a &amp;quot;search&amp;quot; algorithm that's
slow.&lt;/p&gt;
&lt;p&gt;They know it's slow -- that's pretty obvious.&lt;/p&gt;
&lt;p&gt;They're -- unfortunately -- &lt;strong&gt;sure&lt;/strong&gt; that asyncio will help. That's not
an obvious conclusion. It involves no useful research. Indeed, that's a
kind of magical thinking. Which leads me to consider …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been trying to help some folks who have a &amp;quot;search&amp;quot; algorithm that's
slow.&lt;/p&gt;
&lt;p&gt;They know it's slow -- that's pretty obvious.&lt;/p&gt;
&lt;p&gt;They're -- unfortunately -- &lt;strong&gt;sure&lt;/strong&gt; that asyncio will help. That's not
an obvious conclusion. It involves no useful research. Indeed, that's a
kind of magical thinking. Which leads me to consider the process of
over-engineering.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over-engineering is essentially a technique for burning brain-calories
on planning to build something instead of building something.&lt;/p&gt;
&lt;p&gt;The distinction is &amp;quot;planning&amp;quot; vs. &amp;quot;doing.&amp;quot;&lt;/p&gt;
&lt;p&gt;Lots of folks subscribe to Methodology Magic Thinking (MMT™). The core
tenet of MMT is that some  methodology is good, and more methodology is
better.&lt;/p&gt;
&lt;p&gt;The classic waterfall methodology expects requirements, design, code,
test, and what-not, all flowing downhill. A series of waterfalls.&lt;/p&gt;
&lt;p&gt;The more modern agile-fall methodology expects requirements, design,
code, test, and what-not all being done in tiny MVP slices.&lt;/p&gt;
&lt;p&gt;Why is this bad?&lt;/p&gt;
&lt;p&gt;Its bad because it falls apart when confronted with really difficult
algorithm and data structure problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-breaks"&gt;
&lt;h2&gt;What Breaks?&lt;/h2&gt;
&lt;p&gt;The thing that breaks is the &amp;quot;learn about the technology&amp;quot; or &amp;quot;learn
about the problem domain&amp;quot; things that we need to do. We like to pretend
with understand the technology -- in spite of the obvious information
that we're rarely &lt;strong&gt;experts&lt;/strong&gt;. We're smart. We're capable. But. We're
not &lt;strong&gt;experts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This applies to both the solution technology (i.e., language,
persistence, framework, etc.) and the problem domain.&lt;/p&gt;
&lt;p&gt;When we have a process that takes *forever* to run, we've got a bad
algorithm/data structure, and we don't know what to do.&lt;/p&gt;
&lt;p&gt;We need to explore.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;Managers rarely permit exploration.&lt;/p&gt;
&lt;p&gt;They have a schedule. The waterfall comes with a schedule. The agilefall
sprints have timelines. And these are rarely negotiable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-some-wrong-things-to-do"&gt;
&lt;h2&gt;What Are Some Wrong Things to Do?&lt;/h2&gt;
&lt;p&gt;One wrong thing to do is to pick some technology and dig in hard. The
asyncio module is not magical pixie dust. It doesn't make arbitrary bad
code run faster. This is true in general. Picking a solution technology
isn't right. Exploring alternatives -- emphasis on the plural -- is
essential.&lt;/p&gt;
&lt;p&gt;Another wrong thing to do is demand yet more process. More design docs.
More preliminary analysis docs. More preliminary study. More
over-engineering.&lt;/p&gt;
&lt;p&gt;This is unhelpful. There are too many intellectual vacuums. And nature
abhors a vacuum. So random ideas get sucked in. Some expertise in the
language/tool/framework is required. Some expertise in the problem
domain is required. Avoid assumptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do"&gt;
&lt;h2&gt;What Should We Do?&lt;/h2&gt;
&lt;p&gt;We have to step back from the technology trap. We're not &lt;strong&gt;experts&lt;/strong&gt;: we
need to learn more. Which means exploring more. Which means putting time
in the schedule for this.&lt;/p&gt;
&lt;p&gt;We have to understand the problem domain better. We're not &lt;strong&gt;experts&lt;/strong&gt;:
we need to learn more. Which means putting time in the schedule for
this.&lt;/p&gt;
&lt;p&gt;We have to step back from the &amp;quot;deliverable code&amp;quot; trap. Each line of code
is not a precious gift from some eternal god of code. It's an idea. And
since the thing doesn't run well, it's provably a &lt;strong&gt;bad&lt;/strong&gt; idea.&lt;/p&gt;
&lt;p&gt;Code needs to be deleted. And rewritten. And rewritten again. And
benchmarked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frustration"&gt;
&lt;h2&gt;Frustration&lt;/h2&gt;
&lt;p&gt;I like fixing bad code. I like helping people fix bad code.&lt;/p&gt;
&lt;p&gt;I can't -- however -- work with folks who can't delete the old bad code.&lt;/p&gt;
&lt;p&gt;It's unfortunate when they reach out and then block progress with a
number of constraints that amount to &amp;quot;We can't focus on this; we can't
make changes rapidly. Indeed, we're unlikely to make any changes.&amp;quot;&lt;/p&gt;
&lt;p&gt;The only way to learn is to become an expert is something. This takes
time. To minimize the time means work with focus and work rapidly.&lt;/p&gt;
&lt;p&gt;Instead of working rapidly, they want magical pixie dust that makes
things faster. They want me to tell them were the &amp;quot;Turbo Boost&amp;quot; button
is hidden.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category><category term="methodology"></category></entry><entry><title>Some Functional Programming in Python material</title><link href="https://slott56.github.io/2022_10_25-some_functional_programming_in_python_material.html" rel="alternate"></link><published>2022-10-25T08:00:00-04:00</published><updated>2022-10-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-10-25:/2022_10_25-some_functional_programming_in_python_material.html</id><summary type="html">&lt;p&gt;This is bonus content for the forthcoming &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;Functional Python Programming
3rd
edition&lt;/a&gt;
book. It didn't make it into the book because -- well -- it was just too
much of the wrong kind of detail.&lt;/p&gt;
&lt;p&gt;See this &amp;quot;&lt;a class="reference external" href="https://itmaybeahack.com/buildingskills/Tough_TCO.pdf"&gt;Tough
TCO&lt;/a&gt;&amp;quot; document
for some thoughts on Tail-Call Optimization that can be particularly
difficult. This …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is bonus content for the forthcoming &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;Functional Python Programming
3rd
edition&lt;/a&gt;
book. It didn't make it into the book because -- well -- it was just too
much of the wrong kind of detail.&lt;/p&gt;
&lt;p&gt;See this &amp;quot;&lt;a class="reference external" href="https://itmaybeahack.com/buildingskills/Tough_TCO.pdf"&gt;Tough
TCO&lt;/a&gt;&amp;quot; document
for some thoughts on Tail-Call Optimization that can be particularly
difficult. This isn't terribly original, but I think it's helpful for
folks working through more complex problems from a functional
perspective.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Why a PDF?&amp;quot; I've been working with with LaTeX, and the switching to
other ways of editing and presenting code seemed like too much work.&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="tail call optimization"></category></entry><entry><title>Books! Books! More Channels!</title><link href="https://slott56.github.io/2022_09_21-books_books_more_channels.html" rel="alternate"></link><published>2022-09-21T15:05:00-04:00</published><updated>2022-09-21T15:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-09-21:/2022_09_21-books_books_more_channels.html</id><summary type="html">&lt;p&gt;I started with the Apple Books platform because it's an easy default for
me.&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I started with the Apple Books platform because it's an easy default for
me.&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h3&gt;Google Play&lt;/h3&gt;
&lt;p&gt;Now, I'm duplicating the books on Google Play. Here's &lt;strong&gt;Unlearning
SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="just-bought-unlearning-sql-thanks-for-helping-me"&gt;
&lt;h3&gt;Just bought Unlearning SQL - Thanks for helping me...&lt;/h3&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2022-08-26 17:02:51.255000-04:00&lt;/p&gt;
&lt;p&gt;Just bought Unlearning SQL - Thanks for helping me break out of not just
thinking about sql&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Enterprise Python -- Some initial thoughts</title><link href="https://slott56.github.io/2022_08_16-enterprise_python_some_initial_thoughts.html" rel="alternate"></link><published>2022-08-16T08:00:00-04:00</published><updated>2022-08-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-16:/2022_08_16-enterprise_python_some_initial_thoughts.html</id><summary type="html">&lt;p&gt;In the long run, I think there's a small book here. See &lt;a class="reference external" href="https://www.infoworld.com/article/3604473/8-reasons-python-will-rule-the-enterprise-and-8-reasons-it-wont.html%20"&gt;8 reasons
Python will rule the enterprise — and 8 reasons it won’t |
InfoWorld&lt;/a&gt;.
The conclusion, &amp;quot;Teams need to migrate slowly into the future, and
adopting more Python is a way to do that,&amp;quot; seems to be sensible …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the long run, I think there's a small book here. See &lt;a class="reference external" href="https://www.infoworld.com/article/3604473/8-reasons-python-will-rule-the-enterprise-and-8-reasons-it-wont.html%20"&gt;8 reasons
Python will rule the enterprise — and 8 reasons it won’t |
InfoWorld&lt;/a&gt;.
The conclusion, &amp;quot;Teams need to migrate slowly into the future, and
adopting more Python is a way to do that,&amp;quot; seems to be sensible. Some of
the cautionary tales along the way, however, don't make as much sense.&lt;/p&gt;
&lt;p&gt;TL;DR. There are no reasons to avoid Python. Indeed, the 8 points
suggest that Python is perhaps a smart decision.&lt;/p&gt;
&lt;p&gt;I want to focus on the negatives part of this because some of them are
wrong. I think there's a &amp;quot;technology hegemony&amp;quot; viewpoint where
everything in an enterprise must be exactly the same. This tends to
prevent creative solutions to problems and mires an enterprise into
fighting problems that are inherent in bad technology choices. Also, I
think there's an enterprises are run by idiots subtext.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Popularity&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Really this is about having polyglot software
portfolio. The reasoning appears to be that a polyglot software
portfolio is impossible to maintain because (1) no one can learn an old
language, and (2) software will never be rewritten from an obsolete
language to a modern language. If these are both true, it appears the
organization is full of idiots. The notion that a polyglot tech stack
&lt;strong&gt;must&lt;/strong&gt; devolve into chaos seems to ignore the endless chain of
management decisions that are required to create chaos. Leaving obsolete
tech in place isn't a consequence of the tech, or the tech's lack of
compatibility, it's a management decision to enshrine bad ideas, frozen
in amber, forever.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Scripting Languages&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Specifically, the spreadsheet is already the
&lt;em&gt;de facto&lt;/em&gt; scripting language of choice, and nothing can be done about
it. Nothing. No one can learn to use Jupyter Lab to do business
analytics. If this is true, it appears that the organization is full of
idiots. Python will not replace all spreadsheets. A pandas data frame
will replace an opaque macro-filled nightmare with code that can be unit
tested. Imagine unit testing a spreadsheet. Consider the possibilities
of expanding business analysis work to include a few test cases; not
100% code coverage, but a few test cases to confirm the analytical
process was implemented consistently.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Dynamic Languages&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Specifically, dynamic languages are useless
for reliable software because there's no comprehensive type checking
across some interfaces. Which begs the question of why there are
software failures in statically typed languages. More importantly,
complaining about dynamic languages raises important questions about
integration and acceptance testing procedures in an organization in
general. All languages require extensive test suites for all developed
code. All languages benefit from static analysis. Sometimes the compiler
does this, sometimes external tools do the linting. Sometimes folks use
both the compiler and linters to check types. If we are sure dynamic
languages will break, are we equally sure statically typed languages
cannot break? Or, do we take steps to prevent problems? I think we tend
to take a lot of steps to make sure software works.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Tooling&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;I can't figure this point out. But somehow C++ or Java
have better tools for managing large source code bases. There are no
details behind this claim, so I'm left to guess. I would suggest that
the &amp;quot;incremental recompilation&amp;quot; problem of large C++ (and Java) code
bases is its own nightmare. Folks go to great lengths to architect C++
so that an implementation change does not require recompilation of
everything. While this could be seen as &amp;quot;evolved to handle the jobs that
enterprise coders need done&amp;quot;, I submit that there's a deeper problem
here, and stepping away from the compiler is a better solution than
complex architectures. See Lakos &lt;a class="reference external" href="https://www.oreilly.com/library/view/large-scale-c-volume/9780133927573/"&gt;Large-Scale C++ Software
Design&lt;/a&gt; for
some architectural features that don't solve any enterprise problem, but
solve the scaling problem of big C++ applications. This bumps into the
micro-services/monolith discussion, and the question of carefully
testing each interface. None of which has anything to do with Python
specifically.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Machine Learning and Data Science&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;These are fads, apparently.
I'm not sure I can respond to this, since it has little to do with
Python. Of course, Python has one of the most complete data science
toolsets, so perhaps avoiding data science makes it easier to avoid
Python.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Rapid Growth&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The growth of Python is rapid, and there's no
promise of endless backwards compatibility. This is a consequence of
active development and learning. I think it's better than the endless
backwards compatibility that leads to JavaScript's list of WATs. Or the
endless confusion between java.util.date and Joda-Time. The idea that no
one will ever look at the Enterprise code base for Common
Vulnerabilities and Exposures seems to indicate a lack of concern for
reliability or security. Since the entire compiled code base has to be
checked for vulnerabilities, why not also check the Python code base for
ongoing upgrades and changes and enhancements? Is code really written
once and never looked at again? If so, it sounds like an organization
run by idiots.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Python Shipped With Some OS's&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;There's a long story of woe that
stems from relying on the OS-supplied Python. The lesson learned here is
&lt;strong&gt;Never Rely on the OS Python; Always Install Your Own&lt;/strong&gt;. This doesn't
seem like a reason to avoid Python in the enterprise. It seems like an
important lesson learned for all software that's not part of the OS:
always install your own. I've been using
&lt;a class="reference external" href="https://docs.conda.io/en/latest/miniconda.html"&gt;Miniconda&lt;/a&gt; to spin
up Python environments and absolutely love it.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Open Source Software&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Agreed. Nothing to do with Python
specifically. Everything to do with tech stack and architecture. The
question of using Open Source in the first place doesn't seem difficult.
It's a well-established way to reduce start-up costs for software
development.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of the eight points, two seem to be completely generic issues. Yes,
Machine Learning is new, and yes, choices must be made. The two
questions around scripting and dynamic languages seem specious; all
programming requires careful design and testing. The Python shipped with
the OS is a non-concern; the lesson learned is clear.&lt;/p&gt;
&lt;p&gt;We have have three remaining points:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Polyglot Portfolio&lt;/strong&gt; (From pursuing popularity.) This is already
the case in most Enterprises, and needs to be managed through
aggressive retiring of old software. I may have taken decades to
build that old app, but it often takes months to rewrite it in a new
language. The legacy app provides acceptance test cases; it's often
filled with cruft and detritus of old decisions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tooling&lt;/strong&gt;. Agreed. Tooling is important. Not sure that Java or C++
have a real edge here, but, tooling is important.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Growth and Change&lt;/strong&gt;. Python's rapid evolution requires active
management. An enterprise must adopt a YBYO (You Build it You Own it)
attitude so that every level of management is aware of the components
they're responsible for. CVE's are checked, Python PEP's are checked.
Tools like &lt;a class="reference external" href="https://tox.wiki/en/latest/"&gt;tox&lt;/a&gt; or
&lt;a class="reference external" href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt; are used to build (and
rebuild) virtual environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If these seem like a high bar, perhaps there are deeper issues in the
enterprise. If adding Yet Another Language is a problem, then it's
time to start retiring some languages. If Adding Another Tool is a
problem, it's worth examining the existing tool chain to see why it's
such a burden. If the idea of change is terrifying, perhaps the
ongoing change is not being watched carefully enough.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="enterprise"></category></entry><entry><title>Tragedy Averted</title><link href="https://slott56.github.io/2022_08_09-tragedy_averted.html" rel="alternate"></link><published>2022-08-09T08:00:00-04:00</published><updated>2022-08-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-09:/2022_08_09-tragedy_averted.html</id><summary type="html">&lt;p&gt;I almost made a terrible blunder.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for some background. This is
a &amp;quot;Literate Programming&amp;quot; tool. I started fooling around with this kind
of thing back in '05 (maybe even earlier.) This is not the blunder. The
whole idea of literate programming is not very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I almost made a terrible blunder.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for some background. This is
a &amp;quot;Literate Programming&amp;quot; tool. I started fooling around with this kind
of thing back in '05 (maybe even earlier.) This is not the blunder. The
whole idea of literate programming is not very popular. I'm a fan of
&lt;a class="reference external" href="https://jupyterbook.org/en/stable/intro.html"&gt;Jupyter{Book}&lt;/a&gt; as the
state of the art in sophisticated literate programming, if you're
interested in it.&lt;/p&gt;
&lt;p&gt;In my case, I started this project so long ago, I
used &lt;a class="reference external" href="https://docutils.sourceforge.io"&gt;docutils&lt;/a&gt;. This was
long before &lt;a class="reference external" href="https://github.com/sphinx-doc/sphinx"&gt;Sphinx&lt;/a&gt; arrived on
the scene. I never updated my little project to use Sphinx. The point
was to have a kind of pure literate programming tool that could work
with a variety of markup languages, including (but not limited to) RST.&lt;/p&gt;
&lt;p&gt;Recently, I learned about &lt;a class="reference external" href="https://plantuml.com"&gt;PlantUML&lt;/a&gt;. The idea
of a text description of a diagram is appealing. I don't really need to
draw it; I just need to specify what's in it and let
&lt;a class="reference external" href="https://graphviz.org"&gt;graphviz&lt;/a&gt; do the rest. This tool is very, very
cool. You can capture ideas quickly. You can refine and expand on ideas
until you reach a point where code makes more sense than a picture of
code.&lt;/p&gt;
&lt;p&gt;For some things, you can gather data and draw a picture of things *as
they are*. This is particularly valuable for cloud-based infrastructure
where a few queries leads to PlantUML source that is depicted very
nicely.&lt;/p&gt;
&lt;p&gt;Which leads to the idea of Literate Programming including UML diagrams.&lt;/p&gt;
&lt;p&gt;Doesn't sound too difficult. I can create an extension to &lt;strong&gt;docutils&lt;/strong&gt;
to introduce a UML directive. The resulting RST would look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
..  uml::

    left to right direction
    skinparam actorStyle awesome

    actor &amp;quot;Developer&amp;quot; as Dev
    rectangle PyWeb {
        usecase &amp;quot;Tangle Source&amp;quot; as UC_Tangle
        usecase &amp;quot;Weave Document&amp;quot; as UC_Weave
    }
    rectangle IDE {
        usecase &amp;quot;Create WEB&amp;quot; as UC_Create
        usecase &amp;quot;Run Tests&amp;quot; as UC_Test
    }
    Dev --&amp;gt; UC_Tangle
    Dev --&amp;gt; UC_Weave
    Dev --&amp;gt; UC_Create
    Dev --&amp;gt; UC_Test

    UC_Test --&amp;gt; UC_Tangle
&lt;/pre&gt;
&lt;p&gt;This could be handy to have the diagrams as part of the documentation
that tangles the working the code. One source for all of it.&lt;/p&gt;
&lt;p&gt;I started down the path of researching &lt;strong&gt;docutils&lt;/strong&gt; extensions. Got
pretty far. Far enough that I had an empty repository and everything. I
was about ready to start creating spike solutions.&lt;/p&gt;
&lt;p&gt;Then.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;music cue&lt;/em&gt;] *&lt;a class="reference external" href="https://www.youtube.com/watch?v=9mSVzGnKsXw"&gt;duh duh
duuuuuuh&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;I found that Sphinx already has an extension for PlantUML. I almost
started reading the code to see how it worked.&lt;/p&gt;
&lt;p&gt;Then I realized how dumb that was. It already works. Why read the code?
Why not install it?&lt;/p&gt;
&lt;p&gt;I had a choice to make.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Continue building my own &lt;strong&gt;docutils&lt;/strong&gt; plug-in.&lt;/li&gt;
&lt;li&gt;Switch to Sphinx.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some complications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My Literate Programming tool produces RST that *may* not be
compatible with Sphinx.&lt;/li&gt;
&lt;li&gt;It's yet another dependency in a tool that started out with zero
dependencies. I've added pytest and tox. What next?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What to do?&lt;/p&gt;
&lt;p&gt;I have to say that Git is amazing. I can make a branch for the spike. If
it works, pull request. If it doesn't work, delete the branch. This
continues to be game-changing to me. I'm old. I remember when we had to
back up the whole project directory tree before making this kind of
change.&lt;/p&gt;
&lt;p&gt;It worked. My tool's RST (with one exception) worked perfectly with
Sphinx. The one exception was an obscure directive, &lt;tt class="docutils literal"&gt;.. class:: name&lt;/tt&gt;,
used to provide an HTML class name for the following block. This always
should have been the &lt;strong&gt;docutils&lt;/strong&gt; &lt;tt class="docutils literal"&gt;.. container:: name&lt;/tt&gt; directive.
With this fix, we're good to go.&lt;/p&gt;
&lt;p&gt;I'm happy I avoided the trap of reimplementing something. Instead of
that, I upgraded from &amp;quot;bare&amp;quot; &lt;strong&gt;docutils&lt;/strong&gt; with my own CSS to Sphinx with
it's sophisticated templates and HTML Themes.&lt;/p&gt;
</content><category term="Technologies"></category><category term="sphinx"></category><category term="#python"></category><category term="literate programming"></category><category term="docutils"></category><category term="plantuml"></category><category term="pyWeb"></category></entry><entry><title>Books! Books! Books!</title><link href="https://slott56.github.io/2022_08_02-books_books_books.html" rel="alternate"></link><published>2022-08-02T08:00:00-04:00</published><updated>2022-08-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-02:/2022_08_02-books_books_books.html</id><summary type="html">&lt;p&gt;First, there's&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;First, there's&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is all new. It's written for folks who know Python, and are
struggling with the architectural balance between writing bulk
processing in SQL or writing it in Python. For too many developers, SQL
is effectively the only tool they can use. With a variety of tools, it
becomes easier to solve a wider variety of problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Bashing the Bash -- The shell is awful and what you can do about it</title><link href="https://slott56.github.io/2022_07_26-bashing_the_bash_the_shell_is_awful_and_what_you_can_do_about_it.html" rel="alternate"></link><published>2022-07-26T08:00:00-04:00</published><updated>2022-07-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-26:/2022_07_26-bashing_the_bash_the_shell_is_awful_and_what_you_can_do_about_it.html</id><summary type="html">&lt;p&gt;A presentation I did recently.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/slott56/bashing-the-bash"&gt;https://github.com/slott56/bashing-the-bash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks were polite and didn't have too many questions. I guess they
fundamentally agreed: the shell is awful, we can use it for a few
things.&lt;/p&gt;
&lt;p&gt;Safe Shell Scripts Stay Simple: Set the environment, Start the
application.
---------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;The Seven S's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A presentation I did recently.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/slott56/bashing-the-bash"&gt;https://github.com/slott56/bashing-the-bash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks were polite and didn't have too many questions. I guess they
fundamentally agreed: the shell is awful, we can use it for a few
things.&lt;/p&gt;
&lt;p&gt;Safe Shell Scripts Stay Simple: Set the environment, Start the
application.
---------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;The Seven S's of shell scripting.&lt;/p&gt;
&lt;p&gt;Many many thanks to &lt;a class="reference external" href="https://codeandsupply.co"&gt;Code &amp;amp; Supply&lt;/a&gt; for
hosting me.&lt;/p&gt;
</content><category term="Technologies"></category><category term="bash"></category><category term="#python"></category><category term="shell"></category></entry><entry><title>I've got a great Proof-of-Concept. How do I go forward with it?</title><link href="https://slott56.github.io/2022_07_19-ive_got_a_great_proof_of_concept_how_do_i_go_forward_with_it.html" rel="alternate"></link><published>2022-07-19T08:00:00-04:00</published><updated>2022-07-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-19:/2022_07_19-ive_got_a_great_proof_of_concept_how_do_i_go_forward_with_it.html</id><summary type="html">&lt;p&gt;This is the best part about Python -- you can build something quickly.
And it really works.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;What are the next steps?&lt;/p&gt;
&lt;p&gt;While there are a *lot* of possibilities, I'm focused on an
&amp;quot;enterprise work group&amp;quot; application that involves a clever web
service/RESTful API built in Flask. Maybe with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the best part about Python -- you can build something quickly.
And it really works.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;What are the next steps?&lt;/p&gt;
&lt;p&gt;While there are a *lot* of possibilities, I'm focused on an
&amp;quot;enterprise work group&amp;quot; application that involves a clever web
service/RESTful API built in Flask. Maybe with NLP.&lt;/p&gt;
&lt;p&gt;Let me catalog a bunch of things you might want to think about to
&amp;quot;productionize&amp;quot; your great idea. Here's a short list to get started.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;File System Organization&lt;/li&gt;
&lt;li&gt;Virtual Environments&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;Integration Testing&lt;/li&gt;
&lt;li&gt;Acceptance Testing&lt;/li&gt;
&lt;li&gt;Static Analysis&lt;/li&gt;
&lt;li&gt;Tool Chain&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Let's dive into each one of these. Then we'll look at Flask
deployments.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="file-system-organization"&gt;
&lt;h2&gt;File System Organization&lt;/h2&gt;
&lt;p&gt;When you're gotten something to work, the directory in which it works
is sometimes not organized ideally. There are a lot of ways to do
this, but what seems to work well is a structure like the following.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some parent directory. Often in Git&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; -- your code is here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests&lt;/tt&gt; -- your tests are here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; -- your documentation will be here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; -- the list of packages to install. Exact,&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;requirements-dev.txt&lt;/span&gt;&lt;/tt&gt; -- the list of packages used for maintenance and development&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;environment.yml&lt;/tt&gt; -- another list of packages in conda format&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pyproject.toml&lt;/tt&gt; -- this has your tox setup in it&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; -- sometimes helpful&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that a lot of packages you see have a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;.  This is
&lt;strong&gt;only&lt;/strong&gt; needed if you're going open source your code. For
enterprise projects, this is not the first thing you will focus on.
Ignore it, for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h2&gt;Virtual Environments&lt;/h2&gt;
&lt;p&gt;When you're developing in Python you may not even worry about virtual
environments. You have Python. It works. You downloaded NLP and Flask.
You put things together and they work.&lt;/p&gt;
&lt;p&gt;The trick here is the Python ecosystem is vast, and you have (without
really observing it closely) likely downloaded a lot of projects.
Projects that depend on projects.&lt;/p&gt;
&lt;p&gt;You can't trust your current environment to be reliable or repeatable.
You'll need to use a virtual environment manager of some kind.&lt;/p&gt;
&lt;p&gt;Python's built-in virtual environment manager &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; is readily
available and works nicely.
See &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;https://docs.python.org/3/library/venv.html&lt;/a&gt;  It's my second choice.&lt;/p&gt;
&lt;p&gt;My first choice is &lt;strong&gt;conda&lt;/strong&gt;. Start with
&lt;strong&gt;miniconda&lt;/strong&gt;. &lt;a class="reference external" href="https://docs.conda.io/en/latest/miniconda.html"&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;. Use this
to assemble your environment and retest your application to be sure
you've got everything.&lt;/p&gt;
&lt;p&gt;You'll be creating (and destroying) virtual environments until you get
it right. They're cheap. They don't impact your code in any way. Feel
free to make mistakes.&lt;/p&gt;
&lt;p&gt;When it works, build conda's environment.yml file and the
requirements.txt files. This will rebuild the environment.  You'll use
them with &lt;strong&gt;tox&lt;/strong&gt; for testing.&lt;/p&gt;
&lt;p&gt;If you don't use conda, you'll omit the environment.yml.  Nothing else
will change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing"&gt;
&lt;h2&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;Of course, you'll need automated unit tests. You'll want 100% code
coverage. You *really* want 100% logic path coverage, but that's
aspirational. 100% code coverage is a lot of work and uncovers enough
problems that the extra testing for all logic paths seems unhelpful.&lt;/p&gt;
&lt;p&gt;You have two built-in unit testing toolsets: doctest and unittest. I
like doctest. &lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;https://docs.python.org/3/library/doctest.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You'll want to get &lt;strong&gt;pytest&lt;/strong&gt; and the &lt;strong&gt;pytest-cov&lt;/strong&gt; add-on
package. &lt;a class="reference external" href="https://docs.pytest.org/en/6.2.x/contents.html"&gt;https://docs.pytest.org/en/6.2.x/contents.html&lt;/a&gt;  &lt;a class="reference external" href="https://pytest-cov.readthedocs.io/en/latest/"&gt;https://pytest-cov.readthedocs.io/en/latest/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your test modules go in the tests directory. You know you've done it
right when you can use the &lt;strong&gt;pytest&lt;/strong&gt; command at the command line and it
finds (and runs) all your tests.&lt;/p&gt;
&lt;p&gt;This is part of your requirements-dev.txt file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-testing"&gt;
&lt;h2&gt;Integration Testing&lt;/h2&gt;
&lt;p&gt;This is unit testing without so many mocks. I recommend using pytest for
this, also. The difference is that your &amp;quot;fixtures&amp;quot; will be much more
complex. Files. Databases. Flask Clients. Certificates. Maybe starting
multiple services. All kinds of things that have a complex setup and
perhaps a complex teardown, also.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://docs.pytest.org/en/6.2.x/fixture.html#yield-fixtures-recommended"&gt;https://docs.pytest.org/en/6.2.x/fixture.html#yield-fixtures-recommended&lt;/a&gt;
for good ways to handle this more complex setup and teardown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acceptance-testing"&gt;
&lt;h2&gt;Acceptance Testing&lt;/h2&gt;
&lt;p&gt;Depending on the community of users, it may be necessary to provide
automated acceptance tests. For this, I recommend &lt;strong&gt;behave&lt;/strong&gt;.
&lt;a class="reference external" href="https://behave.readthedocs.io/en/stable/"&gt;https://behave.readthedocs.io/en/stable/&lt;/a&gt; You're can write the test cases
in the Gherkin language. This language is open-ended, and many
stakeholders can contribute to the test cases. It's not easy to get
consensus sometimes, and a more formal Gherkin test case lets people
debate, come to an agreement, and prioritize the features and scenarios
they need to see.&lt;/p&gt;
&lt;p&gt;This is part of your requirements-dev.txt file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-analysis"&gt;
&lt;h2&gt;Static Analysis&lt;/h2&gt;
&lt;p&gt;This is an extra layer of checking to be sure best practices are being
followed. There are a variety of tools for this. You *always* want to
process your code through
&lt;strong&gt;black&lt;/strong&gt;. &lt;a class="reference external" href="https://black.readthedocs.io/en/stable/"&gt;https://black.readthedocs.io/en/stable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some folks love &lt;strong&gt;isort&lt;/strong&gt; for putting the imports into a canonical
order.  &lt;a class="reference external" href="https://pycqa.github.io/isort/"&gt;https://pycqa.github.io/isort/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flake8&lt;/strong&gt; should be used to be sure there's no obviously bad
programming practices. &lt;a class="reference external" href="https://flake8.pycqa.org/en/latest/"&gt;https://flake8.pycqa.org/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm a huge fan of type hints. I consider &lt;strong&gt;mypy&lt;/strong&gt; to be
essential. &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/"&gt;https://mypy.readthedocs.io/en/stable/&lt;/a&gt;  I prefer &amp;quot;--strict&amp;quot;
mode, but that can be a high bar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tool-chain"&gt;
&lt;h2&gt;Tool Chain&lt;/h2&gt;
&lt;p&gt;You can try to manage this with &lt;strong&gt;make&lt;/strong&gt;. But don't.&lt;/p&gt;
&lt;p&gt;Download &lt;strong&gt;tox&lt;/strong&gt;, instead.  &lt;a class="reference external" href="https://tox.wiki/en/latest/index.html"&gt;https://tox.wiki/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The point of tox is to combine virtual environment setup with testing in
that virtual environment. You can -- without too much pain -- define
multiple virtual environments. You can then test the various releases of
the various packages your project depends on in various combinations.
This is how to manage a clean upgrade.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Figure out the new versions.&lt;/li&gt;
&lt;li&gt;Setup tox to test existing and new.&lt;/li&gt;
&lt;li&gt;Run tox.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I often set the tox commands to run black first, then unit testing, then
static analysis, ending with mypy --strict.&lt;/p&gt;
&lt;p&gt;When the code is reformatted by black, it's technically a build failure.
(You should have run &lt;strong&gt;black&lt;/strong&gt; manually before running &lt;strong&gt;tox&lt;/strong&gt;.)
When &lt;strong&gt;tox&lt;/strong&gt; works cleanly, you're ready to commit and push and pull
request and merge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Not an after-thought.&lt;/p&gt;
&lt;p&gt;For human documents, use Sphinx. &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;https://www.sphinx-doc.org/en/master/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Put docstrings in every package, every module, every class, every
method, and every function. Summarize *what* and *why*. (Don't
explain *how*: people can read your code.)&lt;/p&gt;
&lt;p&gt;Use the autodoc feature to create the API reference documentation from
the code. Start with this.&lt;/p&gt;
&lt;p&gt;Later, you can write a README, and some explanations, and installation
instructions, and all the things other people expect to see.&lt;/p&gt;
&lt;p&gt;For a RESTful API, be sure to write an OpenAPI specification and be sure
to test against that spec. &lt;a class="reference external" href="https://www.openapis.org"&gt;https://www.openapis.org&lt;/a&gt;. While a lot of the
examples are complicated, you can easily use a small subset to describe
your documents, the validation rules, and the transactions. You can add
the security details later. They're part of your web server, but they
don't need an extensive OpenAPI documentation at the beginning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flask-deployments"&gt;
&lt;h2&gt;Flask Deployments&lt;/h2&gt;
&lt;p&gt;Some folks like to define a flask application that can be installed in
the Python virtual environment. This means the components are on the
default &lt;tt class="docutils literal"&gt;sys.path&lt;/tt&gt; without any &amp;quot;extra&amp;quot; effort. (It's a fair amount of
effort to begin with. I'm not sure it's worth it.)&lt;/p&gt;
&lt;p&gt;When you run a flask app, you'll be using some kind of engine. NGINX,
uWSGI, GUnicorn, etc. (GUnicorn is very nice. &lt;a class="reference external" href="https://gunicorn.org"&gt;https://gunicorn.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://flask.palletsprojects.com/en/2.0.x/deploying/wsgi-standalone/"&gt;https://flask.palletsprojects.com/en/2.0.x/deploying/wsgi-standalone/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In all cases, these engines will &amp;quot;wrap&amp;quot; your Flask application. You'll
want to make your application visible by setting the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;
environment variable, naming your &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; directory. Do not run from
your project's directory.&lt;/p&gt;
&lt;p&gt;You will have the engine running in some distinct &lt;tt class="docutils literal"&gt;/opt/the_app&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;/Users/the_app&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;/usr/home/the_app&lt;/tt&gt; or some such directory,
unrelated to where the code lives. You'll use GUnicorns command-line
options to locate your app, wherever it lives on the filesystem.
GUnicorn will use &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; to find your app. Since web servers
often run as nobody, you'll need to make sure your code base is
readable. But. Not. Writable.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="enterprise"></category><category term="#python"></category></entry><entry><title>The Enterprise COBOL Conundrum</title><link href="https://slott56.github.io/2022_07_12-the_enterprise_cobol_conundrum.html" rel="alternate"></link><published>2022-07-12T08:00:00-04:00</published><updated>2022-07-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-12:/2022_07_12-the_enterprise_cobol_conundrum.html</id><summary type="html">&lt;p&gt;Enterprise COBOL is both a liability and an asset. There's tangible
value hidden in the code.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/looking-at-cobol"&gt;https://github.com/slott56/looking-at-cobol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've tweaked the presentation a little.&lt;/p&gt;
&lt;p&gt;The essential ingredients in coping with COBOL are these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use something like &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt; to parse COBOL
DDE's and process the data …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Enterprise COBOL is both a liability and an asset. There's tangible
value hidden in the code.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/looking-at-cobol"&gt;https://github.com/slott56/looking-at-cobol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've tweaked the presentation a little.&lt;/p&gt;
&lt;p&gt;The essential ingredients in coping with COBOL are these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use something like &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt; to parse COBOL
DDE's and process the data in the native format.&lt;/li&gt;
&lt;li&gt;Analyze the Job Control Language (JCL) to work out the directed
acyclic graph (DAG) that leads to file and database updates. These
&amp;quot;master&amp;quot; files and databases are the data artifacts that matter most.
This is the value-creating processing. There aren't many of these
files.&lt;/li&gt;
&lt;li&gt;Create a process to clone those files, and write Python data access
modules to process the data. This is a two-way process. You'll be
shipping files from your Z/OS world to another server running Python.
In some cases, files will need to come back to Z/OS to permit legacy
processing to continue.&lt;/li&gt;
&lt;li&gt;Work backwards through the DAG to understand the COBOL apps that
update the master files. These can be rewritten as Python apps that
consume transactions and update master files/databases. Transfer
transaction files out of Z/OS to a server doing the Python
processing. Either update a shared database or send updated master
files back to Z/OS if there's further processing that needs an
updated master.&lt;/li&gt;
&lt;li&gt;Continue working backwards through the DAG, replacing COBOL with
Python until you've found source files for the transactions. Expect
to find transaction validation programs as well as transaction
analytics or reporting. The validations are useful; the analytics and
reporting can be replaced with simpler, more modern tools.&lt;/li&gt;
&lt;li&gt;When there's no more legacy processing that depends on a given master
file or database, then the Z/OS can be formally decommissioned. Have
a party.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is relatively low risk work. It's high value. The COBOL code
encodes enterprise knowledge. Preserving this knowledge in a more modern
language is a value-maintaining exercise. Indeed, the improved clarity
may be a value-creating exercise.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="COBOL"></category></entry><entry><title>Revised Understanding --&gt; Revised Data Structures --&gt; Revised Type Hints</title><link href="https://slott56.github.io/2022_07_05-revised_understanding_revised_data_structures_revised_type_hints.html" rel="alternate"></link><published>2022-07-05T08:00:00-04:00</published><updated>2022-07-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-05:/2022_07_05-revised_understanding_revised_data_structures_revised_type_hints.html</id><summary type="html">&lt;p&gt;My literate programming tool, pyWeb, has moved to version 3.1 --
supporting modern Python.&lt;/p&gt;
&lt;p&gt;Next up, version 3.2. This is a massive reworking of the data structures
involved. The rework lets me use Jinja2 for templates. There's a lot of
fiddliness to getting the end-of-line spacing right. Jinja has …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My literate programming tool, pyWeb, has moved to version 3.1 --
supporting modern Python.&lt;/p&gt;
&lt;p&gt;Next up, version 3.2. This is a massive reworking of the data structures
involved. The rework lets me use Jinja2 for templates. There's a lot of
fiddliness to getting the end-of-line spacing right. Jinja has the
following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for construct in container -%}
{{construct}}
{%- endfor %}
&lt;/pre&gt;
&lt;p&gt;The easy-to-overlook hyphens suppress spacing, allowing the construct to
be spread onto multiple lines without introducing extra newlines into
the output. This makes it a little easier to debug the templates.&lt;/p&gt;
&lt;p&gt;It now works. But. Until I get past strict type checks, there's no
reason for calling it done.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Found 94 errors in 1 file (checked 3 source files)
&lt;/pre&gt;
&lt;p&gt;The bulk of the remaining problems seem to be new methods where I forgot
to include a type hint. The more pernicious problems are places where I
have inconsistent hints and Liskov substitution problems. The worst a
places where I had a last-minute change change and switched from &lt;tt class="docutils literal"&gt;str&lt;/tt&gt;
to &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; and did not actually follow-through and make required
changes.&lt;/p&gt;
&lt;p&gt;The biggest issue?&lt;/p&gt;
&lt;p&gt;When building an AST, it's common to have a union of a wide variety of
types. This union often has a discriminator value to separate
&lt;tt class="docutils literal"&gt;NamedChunk&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;OutputChunk&lt;/tt&gt;. This is &amp;quot;type narrowing&amp;quot; and there
are a variety of approaches. I think my best choice is a &lt;tt class="docutils literal"&gt;TypeGuard&lt;/tt&gt;
declaration. This is new to me, so I've got to do some learning before I
can properly define the required type guard function(s).
(See &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/type_narrowing.html#user-defined-type-guards"&gt;https://mypy.readthedocs.io/en/stable/type_narrowing.html#user-defined-type-guards&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I'm looking forward (eagerly) to finishing the cleanup.&lt;/p&gt;
&lt;p&gt;The problem is that I'm -- also -- working on the updates to &lt;a class="reference external" href="https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=packt+functional+python+programming+2e&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8"&gt;Functional
Python
Programming&lt;/a&gt;.
The PyWeb project is a way to relax my brain from editing the book.&lt;/p&gt;
&lt;p&gt;Which means the pyWeb updates have to wait for Chapter 4 and 5 edits.
(Sigh.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>Massive Rework of Data Structures</title><link href="https://slott56.github.io/2022_06_28-massive_rework_of_data_structures.html" rel="alternate"></link><published>2022-06-28T08:00:00-04:00</published><updated>2022-06-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-28:/2022_06_28-massive_rework_of_data_structures.html</id><summary type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html"&gt;My Shifting Understanding and A Terrible Design
Mistake&lt;/a&gt;,
I had a design that focused on serialization instead of proper modeling
of the objects in question.&lt;/p&gt;
&lt;p&gt;Specifically, I didn't start with a suitable abstract syntax tree (AST)
structure. I started with an algorithmic view of &amp;quot;weaving&amp;quot; and
&amp;quot;tangling …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html"&gt;My Shifting Understanding and A Terrible Design
Mistake&lt;/a&gt;,
I had a design that focused on serialization instead of proper modeling
of the objects in question.&lt;/p&gt;
&lt;p&gt;Specifically, I didn't start with a suitable abstract syntax tree (AST)
structure. I started with an algorithmic view of &amp;quot;weaving&amp;quot; and
&amp;quot;tangling&amp;quot; to transform a WEB of definitions into documentation and
code. The weaving and tangling are two of the three distinct
serializations of a common AST.&lt;/p&gt;
&lt;p&gt;The third serialization is the common source format that underpins the
WEB of definitions. Here's an example that contains a number of
definitions and a tangled output file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Fast Exponentiation
===================

A classic divide-and-conquer algorithm.

&amp;#64;d fast exp &amp;#64;{
def fast_exp(n: int, p: int) -&amp;gt; int:
    match p:
        case 0:
            return 1
        case _ if p % 2 == 0:
            t = fast_exp(n, p // 2)
            return t * t
        case _ if p % 1 == 0:
            return n * fast_exp(n, p - 1)
&amp;#64;| fast_exp
&amp;#64;}

With a test case.

&amp;#64;d test case &amp;#64;{
&amp;gt;&amp;gt;&amp;gt; fast_exp(2, 30)
1073741824
&amp;#64;}

&amp;#64;o example.py &amp;#64;{
&amp;#64;&amp;lt; fast exp &amp;#64;&amp;gt;

__test__ = {
    &amp;quot;test 1&amp;quot;: '''
&amp;#64;&amp;lt; test case &amp;#64;&amp;gt;
    '''
}
&amp;#64;| __test__
&amp;#64;}

Use ``python -m doctest`` to test.

Macros
------

&amp;#64;m

Names
-----

&amp;#64;u
&lt;/pre&gt;
&lt;p&gt;This example uses RST as the markup language for the woven document. A
tool can turn this simplified document into complete RST with
appropriate wrappers around the code blocks. The tool can also weave the
&lt;tt class="docutils literal"&gt;example.py&lt;/tt&gt; file from the source document.&lt;/p&gt;
&lt;p&gt;The author can focus on exposition, explaining the algorithm. The reader
gets the key points without the clutter of programming language
overheads and complications.&lt;/p&gt;
&lt;p&gt;The compiler gets a tangled source.&lt;/p&gt;
&lt;p&gt;The key point is to have a tool that's (mostly) agnostic with respect to
programming language and markup language. Being fully agnostic isn't
possible, of course. The &lt;tt class="docutils literal"&gt;&amp;#64;d name &amp;#64;{code&amp;#64;}&lt;/tt&gt; constructs are transformed
into markup blocks of some sophistication. The &lt;tt class="docutils literal"&gt;&amp;#64;&amp;lt;name&amp;#64;&amp;gt;&lt;/tt&gt; becomes a
hyperlink, with suitable markup. Similarly, the cross
reference-generating commands, &lt;tt class="docutils literal"&gt;&amp;#64;m&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;#64;u&lt;/tt&gt;, generate a fair amount
of markup content.&lt;/p&gt;
&lt;p&gt;I now have Jinja templates to do this in RST. I'll also have to provide
LaTeX and HTML. Further, I need to provide generic LaTeX along with
LaTeX I can use with PacktPub's LaTeX publishing pipeline. But let's not
look too far down the road. First things first.&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Here's today's progress measurement.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==================== 67 failed, 13 passed, 1 error in 1.53s ====================
&lt;/pre&gt;
&lt;p&gt;This comforts me a great deal. Some elements of the original structure
still work. There are two kinds of failures: new test fixtures that
require &lt;tt class="docutils literal"&gt;TestCase.setUp()&lt;/tt&gt; methods, and tests for features that are no
longer part of the design.&lt;/p&gt;
&lt;p&gt;In order to get the refactoring to a place where it would even run, I
had to incorporate some legacy methods that -- it appears -- will
&lt;em&gt;eventually&lt;/em&gt; become dead code. It's not totally dead, yet, because I'm
still mid-way through the refactoring.&lt;/p&gt;
&lt;p&gt;But. I'm no longer beating back and forth trying to see if I've got a
better design. I'm now on the downwind broad reach of finding and fixing
the 67 test cases that are broken.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Test-Driven Development"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>My Shifting Understanding and A Terrible Design Mistake</title><link href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html" rel="alternate"></link><published>2022-06-21T08:00:00-04:00</published><updated>2022-06-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-21:/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html</id><summary type="html">&lt;p&gt;I've been fascinated by Literate Programming forever.&lt;/p&gt;
&lt;p&gt;I have two utterly divergent takes on this.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt; for one.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for another.&lt;/p&gt;
&lt;p&gt;And yet, I've still done a really bad design job. Before we get to the
design, a little bit …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been fascinated by Literate Programming forever.&lt;/p&gt;
&lt;p&gt;I have two utterly divergent takes on this.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt; for one.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for another.&lt;/p&gt;
&lt;p&gt;And yet, I've still done a really bad design job. Before we get to the
design, a little bit of back story.&lt;/p&gt;
&lt;div class="section" id="back-story"&gt;
&lt;h2&gt;Back Story&lt;/h2&gt;
&lt;p&gt;Why two separate literate programming projects? Because it's not
&lt;strong&gt;clear&lt;/strong&gt; what's best. It's a field without too many boundaries and a
lot of questions about the value produced.&lt;/p&gt;
&lt;p&gt;PyLit I found, forked, and upgraded to Python 3. I didn't design it.
It's far more clever than something I'd design.&lt;/p&gt;
&lt;p&gt;Py-Web-Tool is something I wrote based on using a whole bunch of tools
that follow along behind the original WEB tools. Nothing to do with web
servers or web.py.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem-domain"&gt;
&lt;h2&gt;The Problem Domain&lt;/h2&gt;
&lt;p&gt;The design problem is, in retrospect, pretty obvious. I set it out here
as a cautionary tale.&lt;/p&gt;
&lt;p&gt;I'm looking at the markup languages for doing literate programming. The
idea is to have named blocks of code in your document, presented in an
order that makes sense to your reader. A tool will &amp;quot;weave&amp;quot; a document
from your source. It will also &amp;quot;tangle&amp;quot; source code by rearranging the
code snippets from presentation order into compiler-friendly order.&lt;/p&gt;
&lt;p&gt;This means you can present your core algorithm first, even though it's
buried in the middle of some module in the middle of your package.&lt;/p&gt;
&lt;p&gt;The presentation order is *not* tied to the order needed by your
language's toolchain.&lt;/p&gt;
&lt;p&gt;For languages like C this is huge freedom. For Python, it's not such a
gigantic win.&lt;/p&gt;
&lt;p&gt;The source material is a &amp;quot;web&amp;quot; of code and information about the code. A
web file may look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Important insight.

&amp;#64;d core feature you need to know about first &amp;#64;{
    def somecode() -&amp;gt; None:
        pass
&amp;#64;}

And see how this fits into a larger context?

&amp;#64;d something more expansive &amp;#64;{
def this() -&amp;gt; None:
    pass

def that() -&amp;gt; None:
    pass

&amp;#64;&amp;lt;core feature you need to know about first&amp;#64;&amp;gt;
&amp;#64;}

See how that works?
&lt;/pre&gt;
&lt;p&gt;This is easy to write and (relatively) easy to read. The
&lt;tt class="docutils literal"&gt;&amp;#64;&amp;lt;core feature you need to know about first&amp;#64;&amp;gt;&lt;/tt&gt; becomes a hyperlink in
the published documentation. So you can flip between the sections. It's
physically expanded inline to tangle the code, but you don't often need
to look at the tangled code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-design-question"&gt;
&lt;h2&gt;The Design Question&lt;/h2&gt;
&lt;p&gt;The essential Literate Programming tool is a compiler with two outputs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;woven&amp;quot; document with markup and such&lt;/li&gt;
&lt;li&gt;The &amp;quot;tangled&amp;quot; code files which are code, largely untouched, but
reordered.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've got four related problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Parsing the input&lt;/li&gt;
&lt;li&gt;An AST we can process&lt;/li&gt;
&lt;li&gt;Emitting tangled output from the AST&lt;/li&gt;
&lt;li&gt;Emitting woven output form the AST&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or, we can look at it as three classic problems: deserialization, AST
representation, and serialization. Additionally, we have two distinct
serialization alternatives.&lt;/p&gt;
&lt;p&gt;What did I do?&lt;/p&gt;
&lt;p&gt;I tackled serialization first. Came up with a cool bunch of classes and
methods to serialize the two kinds of documents.&lt;/p&gt;
&lt;p&gt;Then I wrote the deserialization (or parsing) of the source WEB file.
This is pretty easy, since the markup is designed to be as trivial as
possible.&lt;/p&gt;
&lt;p&gt;The representation is little more than glue between the two.&lt;/p&gt;
&lt;p&gt;What a mistake.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-wrong-answer"&gt;
&lt;h2&gt;A Wrong Answer&lt;/h2&gt;
&lt;p&gt;Focusing on serialization was an epic mistake.&lt;/p&gt;
&lt;p&gt;I want to try using
&lt;a class="reference external" href="https://jinja.palletsprojects.com/en/3.1.x/"&gt;Jinja2&lt;/a&gt; for the markup
templates instead of
&lt;a class="reference external" href="https://docs.python.org/3/library/string.html#template-strings"&gt;string.Template&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;My AST was such a bad hack job it was essentially impossible to use it.
It was a quagmire of inconsistent ad-hoc methods to solve a specific
serialization issue.&lt;/p&gt;
&lt;p&gt;As I start down the Jinja road, I found a need to be able to build an
AST without the overhead of parsing.&lt;/p&gt;
&lt;p&gt;Which caused me to realize that the AST was -- while structurally
sensible -- far from the simple ideal.&lt;/p&gt;
&lt;p&gt;What's the ideal?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-right-answer"&gt;
&lt;h2&gt;The Right Answer&lt;/h2&gt;
&lt;p&gt;This ideal AST is something that lets me build test fixtures like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
example = Web(
   chunks=[
       TextChunk(&amp;quot;\n&amp;quot;),
       NamedCodeChunk(name=&amp;quot;core feature you need to know about first&amp;quot;, lines=[&amp;quot;def someconme() -&amp;gt; None: ...&amp;quot;, &amp;quot;pass&amp;quot;])),
       TextChunk(&amp;quot;\nAnd see how this fits into a larger context?\n&amp;quot;),
       NamedCodeChunk(name=&amp;quot;something more expansive&amp;quot;, lines=[etc. etc.])
   ]
)
&lt;/pre&gt;
&lt;p&gt;Here's my test for usability: I can build the AST &amp;quot;manually&amp;quot; without a
parser.&lt;/p&gt;
&lt;p&gt;The parser can build one, also, but I can build it as a sensible,
readable, first-class Python object.&lt;/p&gt;
&lt;p&gt;This has pointed me to a better design for the overall constructs of the
WEB source document. Bonus. It's helping me define Jinja templates that
can render this as a sensible woven document.&lt;/p&gt;
&lt;p&gt;Tangling does not need Jinja. It's simpler. And -- by convention -- the
tangled code does not have anything injected into it. The woven code is
in a markup language (Markdown, RST, HTML, LaTeX, ASCII DOC, whatever)
and some markup is required to create hyperlinks and code sections.
Jinja is super helpful here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The essence of the problem is rarely serialization or deserialization.&lt;/dt&gt;
&lt;dd&gt;It's the internal representation.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="when-learning-how-to-use-a-word-processor-it-turn"&gt;
&lt;h2&gt;When learning how to use a word processor, it turn...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2022-07-16 13:24:35.832000-04:00&lt;/p&gt;
&lt;p&gt;When learning how to use a word processor, it turns out the second word
processor you learn takes longer than the first. As you explore the
second one, the core ideas get contemplated and refined. The third one
on is just &amp;quot;where's the quick reference&amp;quot;. We do the same with rewriting
code, as you are discovering. One point of literate programming is to
explain the insights we gain.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="literate programming"></category><category term="jinja"></category><category term="pyWeb"></category><category term="PyLit3"></category></entry><entry><title>A LaTeX Thing I Did -- And A ToDo:</title><link href="https://slott56.github.io/2022_06_14-a_latex_thing_i_did_and_a_todo.html" rel="alternate"></link><published>2022-06-14T08:00:00-04:00</published><updated>2022-06-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-14:/2022_06_14-a_latex_thing_i_did_and_a_todo.html</id><summary type="html">&lt;p&gt;When writing about code in LaTeX, the essential strategy is to use an
environment to format the code so it stands out from surrounding text.
There are a few of these environments available as LaTeX add-on
packages. The three popular ones are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;verbatim&lt;/strong&gt;. I think this is built-in to LaTeX …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;When writing about code in LaTeX, the essential strategy is to use an
environment to format the code so it stands out from surrounding text.
There are a few of these environments available as LaTeX add-on
packages. The three popular ones are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;verbatim&lt;/strong&gt;. I think this is built-in to LaTeX. It's not very
clever, but it is simple to use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listings&lt;/strong&gt;. See &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Code_listing"&gt;https://www.overleaf.com/learn/latex/Code_listing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minted&lt;/strong&gt;.
See &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted"&gt;https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are nice for making code readable and distinct from the
surrounding text.&lt;/p&gt;
&lt;p&gt;A common way to talk about the code is to use inline verbatim
&lt;tt class="docutils literal"&gt;\verb|code|&lt;/tt&gt; sections. I prefer inline &lt;tt class="docutils literal"&gt;\lstinline|code|&lt;/tt&gt;, but, my
editor prefers &lt;tt class="docutils literal"&gt;\verb&lt;/tt&gt;. (I have trouble getting all the moving parts
of minted installed properly, so I use &lt;strong&gt;listings&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;Also. And more important.&lt;/p&gt;
&lt;p&gt;There's the
&lt;tt class="docutils literal"&gt;\lstinputlisting[language=Python, firstline=2, &lt;span class="pre"&gt;lastline=12]{some_module.py}&lt;/span&gt;&lt;/tt&gt;
command. This lets an author incorporate examples from working, tested
modules. Minted doesn't seem to have this, but it might work with an
&lt;tt class="docutils literal"&gt;\input&lt;/tt&gt; command. Don't know. Haven't tried.&lt;/p&gt;
&lt;p&gt;Let's talk about workflow.&lt;/p&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;The idea behind these tools is you have code and after that, you write
about the code. I call this &lt;strong&gt;code first&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Doing this means you can include code snippets from a file.&lt;/p&gt;
&lt;p&gt;Which is okay, but, there's another point of view: you have a document
that contains the code. This is closer to the Literate Programming POV.
I call this &lt;strong&gt;document first&lt;/strong&gt;. I've got all the code in the document
you're reading, I've just broken it up and spread it around in an order
to serve my purpose as a writer, not serve the limitations of a parser
or compiler.&lt;/p&gt;
&lt;p&gt;There is a development environment --
&lt;a class="reference external" href="https://texfaq.org/FAQ-webpkgs"&gt;WEB&lt;/a&gt; -- to create code that can be
run through the Weave and Tangle tools to create working code and usable
documentation. This is appealing in many ways.&lt;/p&gt;
&lt;p&gt;For now, I'm settling for the following workflow:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write the document with code samples. Use &lt;tt class="docutils literal"&gt;\lstlisting&lt;/tt&gt; environment
with explicit unique labels for each snippet. The idea is to focus on
the documentation with explanations.&lt;/li&gt;
&lt;li&gt;Write a Jinja template that references the code samples. This is a
lot of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{extract['lst:listing_1']}}&lt;/span&gt;&lt;/tt&gt; kind of references. There's a
bit more that can go in here, we'll return to the templates in a
moment.&lt;/li&gt;
&lt;li&gt;Run a tool to extract all the &lt;tt class="docutils literal"&gt;\lstlisting&lt;/tt&gt; environments to a
dictionary with the label as the key and the block of text as the
value. This serializes nicely as a JSON (or TOML or YAML) file. It
can even be pickled, but I prefer to be able to look at the file to
see what's in it.&lt;/li&gt;
&lt;li&gt;The tool to populate the template is a kind of trivial thing to build
a Jinja environment, load up the template, fill in the code samples,
and write the result.&lt;/li&gt;
&lt;li&gt;I can then use &lt;strong&gt;tox&lt;/strong&gt; (and &lt;strong&gt;doctest&lt;/strong&gt; and &lt;strong&gt;pytest&lt;/strong&gt; and &lt;strong&gt;mypy&lt;/strong&gt;)
to test the resulting module to be sure it works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This tangles code from a source document. There's no weave step, since
the source is already designed for publication. This does require me to
make changes to the LaTeX document I'm writing and run a &lt;tt class="docutils literal"&gt;make test&lt;/tt&gt;
command to extract, tangle, and test. This is not a huge burden. Indeed,
it's easy to implement in PyCharm, because the latest release of PyCharm
understands Makefiles and tox. Since each chapter is a distinct
environment, I can use &lt;tt class="docutils literal"&gt;tox &lt;span class="pre"&gt;-e&lt;/span&gt; ch01&lt;/tt&gt; to limit the testing to only the
chapter I'm working on.&lt;/p&gt;
&lt;p&gt;I like this because it lets me focus on explanation, not implementation
details. It helps me make sure that all the code in the book is fully
tested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-templates"&gt;
&lt;h2&gt;The Templates&lt;/h2&gt;
&lt;p&gt;The template files for an example module have these three kinds of code
blocks:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ordinary Listings. These fall into two subclasses.&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;Complete function or class definitions.&lt;/li&gt;
&lt;li&gt;Lines of code taken out of context.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;REPL Examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These have three different testing requirements. We'll start with the
&amp;quot;complete function or class definitions.&amp;quot;  For these, the template might
look like the following&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{extract['lst:listing_1']}}

def test_listing_1() -&amp;gt; None:
    assert listing_1(42)
    assert not listing_1(None)
&lt;/pre&gt;
&lt;p&gt;This has both the reference to the code in the text of the book and a
test case for the code.&lt;/p&gt;
&lt;p&gt;For lines of code out of context, we have to be more careful. We might
have this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def some_example(arg: int) -&amp;gt; bool:
    {{extract['lst:listing_2']}}

def test_listing_2() -&amp;gt; None:
    assert listing_2(42)
    assert not listing_2(None)
&lt;/pre&gt;
&lt;p&gt;This is similar to a complete definition, but it has a fiddly
indentation that needs to be properly managed, also. Jinja's generally
good about not inserting spaces. The template, however, is full of what
&lt;em&gt;could&lt;/em&gt; appear to be syntax errors, so the code editor &lt;strong&gt;could&lt;/strong&gt; have a
conniption with all those &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; blocks of code. They happen to be valid
Python set literals, so, they're tolerated. PyCharm's type checking
hates them.&lt;/p&gt;
&lt;p&gt;The REPL examples, look like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
REPL_listing_3 = &amp;quot;&amp;quot;&amp;quot;
{{extract['lst:listing_3']}}
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;I collect these into a &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; variable to make them easy for
doctest to find. The extra fussiness of  a &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; variable isn't
needed, but it provides a handy audit for me to make sure everything has
a home.&lt;/p&gt;
&lt;p&gt;The following line of code is in most (not all) templates.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
__test__ = {
    name: value
    for name, value in globals().items()
    if name.startswith(&amp;quot;REPL&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;This will locate all of the global variables with names starting with
REPL and put them in the &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; mapping. The REPL names then
become the test case names, making any test failures easier to spot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-goal"&gt;
&lt;h2&gt;My Goal&lt;/h2&gt;
&lt;p&gt;I do have some Literate Programming tools that I might be able to
leverage to make myself a Weaver that produces useful LaTeX my publisher
can work with. I should do this because it would be slightly simpler.
The problem is my Web/Weave/Tangle tooling has a bunch of dumb
assumptions about the weave and tangle outputs; a problem I really need
to fix.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;py-web-tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea here is to mimic other WEB-based tooling. These are the two
primary applications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Weave&lt;/strong&gt;. This makes documentation in a fairly transparent way from
the source. There are a bunch of substitutions required to fill in
HTML or LaTeX or Markdown or RST around the generic source. Right
now, this is pretty inept and almost impossible to configure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tangle&lt;/strong&gt;. This makes code from the source. The point here is the
final source file is not necessarily built in any &lt;em&gt;obvious&lt;/em&gt; order.
It's a tangle of things from the documentation, put into the order
required by parser or compiler or build system or whatever.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The weaving requires a better way to provide the various templates that
fill in missing bits. Markdown, for example, works well with fenced
blocks. RST uses a code directive that leads to an extra level of
indentation that needs to be carefully excised. Futher, most markup
languages have a mountain of cruft that goes around the content. This is
unpleasantly complex, and very much subject to odd little changes that
don't track against the content, but are part of the evolution of the
markup language.&lt;/p&gt;
&lt;p&gt;My going-in assumption on tangling was the document contained &lt;strong&gt;all&lt;/strong&gt;
the code. All of it. Without question or exception. For C/C++ this means
all the fiddly little pre-processor directives that add no semantic
clarity yet must be in the code file. This means the preprocessor
nonsense had to be relegated to an appendix of &amp;quot;yet more code that just
has to be there.&amp;quot;&lt;/p&gt;
&lt;p&gt;After writing a tangler to pull code from a book into a variety of
contexts, I'm thinking I need to have a tangler that works with a
template engine. I think there would be the following two use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;No-Template Case&lt;/strong&gt;. The WEB source is complete. This works well for
a lot of languages that don't have the kind of cruft that C/C++ has.
It generally means a WEB source document will contain definition(s)
for the final code file(s) as a bunch of references to the
previously-explained bits. For C/C++, this final presentation can
include the fiddly bits of preprocessor cruft.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template Case&lt;/strong&gt;. A template is used to with the source to create
the tangled output. This is what I have now for pulling book content
into a context where it is testable. For the most part, the template
files are quite small because the book includes test cases in the
form of REPL blocks. This presents a bit of a problem because it
breaks the &amp;quot;all in one place&amp;quot; principle of a WEB project. I have a
WEB source file with the visible content plus one or more templates
with invisible content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I like about this is an attempt to reduce some of the cruftiness of
the various tools.&lt;/p&gt;
&lt;p&gt;I think my py-web-tool might be expanded to handle my expanded
understanding of literate programming.&lt;/p&gt;
&lt;p&gt;I have a book to finish, first, though. Then I can look at improving my
workflow. (And yes, this is backwards from a properly Agile approach.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="literate programming"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Code so bad it causes me physical pain</title><link href="https://slott56.github.io/2022_05_23-code_so_bad_it_causes_me_physical_pain.html" rel="alternate"></link><published>2022-05-23T20:38:00-04:00</published><updated>2022-05-23T20:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-05-23:/2022_05_23-code_so_bad_it_causes_me_physical_pain.html</id><summary type="html">&lt;p&gt;Here's the code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def get_categories(file):
    &amp;quot;&amp;quot;&amp;quot;
    Get categories.
    &amp;quot;&amp;quot;&amp;quot;
    verify_file(file)

    categories = set()

    with open(file, &amp;quot;r&amp;quot;) as cat_file:
        while line := cat_file.readline().rstrip():
            categories.add(line)

    return categories
&lt;/pre&gt;
&lt;p&gt;To me this was terrible. truly and deeply horrifying. Let me count the
ways.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The docstring repeats the name of the function …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's the code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def get_categories(file):
    &amp;quot;&amp;quot;&amp;quot;
    Get categories.
    &amp;quot;&amp;quot;&amp;quot;
    verify_file(file)

    categories = set()

    with open(file, &amp;quot;r&amp;quot;) as cat_file:
        while line := cat_file.readline().rstrip():
            categories.add(line)

    return categories
&lt;/pre&gt;
&lt;p&gt;To me this was terrible. truly and deeply horrifying. Let me count the
ways.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The docstring repeats the name of the function providing no
additional information.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;verify_file()&lt;/tt&gt; function checks are pure, useless LBYL code. It
seemed designed to map a lot of detailed exceptions to a
&lt;tt class="docutils literal"&gt;RuntimeError&lt;/tt&gt;. Which is misleading.&lt;/li&gt;
&lt;li&gt;The use &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;readline()&lt;/tt&gt; to iterate through the lines of
a file is -- I guess -- reasonable if we're working Pascal or
Modula-2. But we're not. Use of the walrus operator isn't really
getting any bonus points because -- well -- this is terrible.&lt;/li&gt;
&lt;li&gt;While pathlib is used elsewhere in this module, it's not used here.
This function works with a filename string, assigned to the &lt;tt class="docutils literal"&gt;file&lt;/tt&gt;
parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Actually, taking a step back, it's not that the author is being
malicious. They just missed all the features of files and sets. And --
somehow -- were able to learn about the walrus operator while never
figuring out how files work.&lt;/p&gt;
&lt;p&gt;This is something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source = Path(&amp;quot;some_file.txt&amp;quot;)
with source.open() as source_file:
    categories = set(source_file)
&lt;/pre&gt;
&lt;p&gt;And that's it.&lt;/p&gt;
&lt;div class="section" id="it-gets-worse"&gt;
&lt;h2&gt;It Gets Worse&lt;/h2&gt;
&lt;p&gt;This was part of some category mapping application.&lt;/p&gt;
&lt;p&gt;They've got a CSV file with some string values. And they want to map
those string values to summary category values.&lt;/p&gt;
&lt;p&gt;Most folks think of a dictionary for a mapping from one string to
another string.&lt;/p&gt;
&lt;p&gt;The code I was sent -- I kid you not -- used a list of two-tuples. I'll
repeat that for those who are skimming. It use &lt;strong&gt;A LIST OF TWO-TUPLES
INSTEAD OF A DICTIONARY&lt;/strong&gt;.  It used a colossally bad search through an
unsorted list of tuples to find matches. (The only search that would
have been worse was random probes instead of iteration.)&lt;/p&gt;
&lt;p&gt;It really did.&lt;/p&gt;
&lt;p&gt;It can't even show you that code, it's such a horrifyingly bad design.&lt;/p&gt;
&lt;p&gt;They had a question. Was the looping over a list of two-tuples
ineffective? That's why they asked for help.&lt;/p&gt;
&lt;p&gt;It was like they had never heard of a dictionary. Nor seen a tutorial
with a dictionary. Nor read a book that mentioned dictionaries. They had
managed to learn enough Python to see the walrus operator without
hearing of dictionaries.&lt;/p&gt;
&lt;p&gt;A list of two-tuples, when provided to the &lt;tt class="docutils literal"&gt;dict()&lt;/tt&gt; function, will
make a dictionary. They were ignorant of this.&lt;/p&gt;
&lt;p&gt;A dictionary that does &lt;strong&gt;O&lt;/strong&gt;(1) lookups and avoids looping over a list
of two-tuples. This was a mystery to them..&lt;/p&gt;
&lt;p&gt;When someone doesn't know the Python dictionary exists, what is the
appropriate response?&lt;/p&gt;
&lt;p&gt;How can you politely say &amp;quot;Find another tutorial and do the ENTIRE thing
all of it!&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="that-s-not-all"&gt;
&lt;h2&gt;That's Not All&lt;/h2&gt;
&lt;p&gt;There's this nugget of &amp;quot;You can't be serious.&amp;quot;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
category_counts = {element: 0 for element in categories}
&lt;/pre&gt;
&lt;p&gt;And&lt;/p&gt;
&lt;pre class="literal-block"&gt;
category_counts[category] += 1
&lt;/pre&gt;
&lt;p&gt;Yes. They used a dictionary to count instances of the categories. They
did not understand &lt;tt class="docutils literal"&gt;collections.defaultdict&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;collections.Counter&lt;/tt&gt;. But they understood a dictionary well enough to
use it here. But not use it elsewhere for the central functionality of
the app.&lt;/p&gt;
&lt;p&gt;So. They couldn't use a dictionary, but could use a dictionary.&lt;/p&gt;
&lt;p&gt;They couldn't use the csv module, so they wrote their own (bad) CSV
parser.&lt;/p&gt;
&lt;p&gt;It's almost impossible to write a polite code review.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hopefully-you-have-tests-on-it-and-can-refactor-or"&gt;
&lt;h2&gt;Hopefully you have tests on it and can refactor or...&lt;/h2&gt;
&lt;p&gt;McSee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-10-19 13:03:56.467000-04:00&lt;/p&gt;
&lt;p&gt;Hopefully you have tests on it and can refactor or write it again from
scratch&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data structure"></category><category term="#python"></category></entry><entry><title>Python is a Bad Programming Language. Wait, wut?</title><link href="https://slott56.github.io/2022_05_23-python_is_a_bad_programming_language_wait_wut.html" rel="alternate"></link><published>2022-05-23T20:35:00-04:00</published><updated>2022-05-23T20:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-05-23:/2022_05_23-python_is_a_bad_programming_language_wait_wut.html</id><summary type="html">&lt;p&gt;It may help to read &lt;a class="reference external" href="https://medium.com/nerd-for-tech/python-is-a-bad-programming-language-2ab73b0bda5"&gt;Python is a Bad Programming
Language&lt;/a&gt;,
but it's not very useful.&lt;/p&gt;
&lt;p&gt;I shouldn't be tempted by click-bait headlines. But.  I am drawn in by
bad articles on Python.&lt;/p&gt;
&lt;p&gt;In particular, any post claiming Python is deficient causes me to look
for the concrete PEP's that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It may help to read &lt;a class="reference external" href="https://medium.com/nerd-for-tech/python-is-a-bad-programming-language-2ab73b0bda5"&gt;Python is a Bad Programming
Language&lt;/a&gt;,
but it's not very useful.&lt;/p&gt;
&lt;p&gt;I shouldn't be tempted by click-bait headlines. But.  I am drawn in by
bad articles on Python.&lt;/p&gt;
&lt;p&gt;In particular, any post claiming Python is deficient causes me to look
for the concrete PEP's that fix the problems.&lt;/p&gt;
&lt;p&gt;Interestingly, there never seem to be any PEP's in any article that
bashes Python. This post is yet another example of complaining without
offering any practical solutions.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;The article has a complaining tone, but, I can't figure out some of the
complaints. It lifts up a confusing collection of features from other
languages as if these features are somehow universally desirable. No
justification is provided. The author seems to rely exclusively on Stack
Overflow answers for information about Python. There are no PEP's
proposed to fix Python. There aren't even any examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="point-by-point"&gt;
&lt;h2&gt;Point-by-Point&lt;/h2&gt;
&lt;p&gt;I will try to address each point. It's difficult, because some of the
points are hard to discern. There's a lot of &amp;quot;Who thought that was a
good idea?&amp;quot; which isn't really a specific point that can be refuted.
It's a kind of rhetorical flourish that seems to work best with folks
that already agree.&lt;/p&gt;
&lt;p&gt;Let's start.&lt;/p&gt;
&lt;div class="section" id="a-fragmented-language"&gt;
&lt;h3&gt;A Fragmented Language&lt;/h3&gt;
&lt;p&gt;This is the result of profound confusion. It's hard to find anyone
recommending Python 2 anywhere. The supplied link is 9 years old, making
this comment extremely misleading.  (I'm being charitable. A nine-year
old link on Stack Overflow requires some curation. This is not a Python
problem.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ugly-object-orientation"&gt;
&lt;h3&gt;Ugly Object-Orientation&lt;/h3&gt;
&lt;p&gt;The inconsistent use of &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; in C++ and Java is lifted up as somehow
good. The consistent use of the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; instance variable in Python is
somehow less good; perhaps because it's consistent.&lt;/p&gt;
&lt;p&gt;&amp;quot;See how I have to both declare and initialize them in the constructor?
Another example of Python stupidity.&amp;quot; Um. No, I don't actually see you
&lt;em&gt;declare&lt;/em&gt; them anywhere. I guess you're unaware of what &lt;em&gt;declare&lt;/em&gt; means
in languages like C++ and why &lt;em&gt;declare&lt;/em&gt; isn't a thing in Python.&lt;/p&gt;
&lt;p&gt;Somehow using the &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword is better than &lt;tt class="docutils literal"&gt;__&lt;/tt&gt; name
mangling. I'm unclear on why it's better, it's simply stated in a way
that makes it sound like a long keyword used once is better because it's
better. No additional reason or justification is offered. The idea of
using __ to emphasize the privacy is somehow inconceivable.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; keywords are in C++, C#, and Java to
optimize recompilation. To an extent, this also permits distribution of
libraries in the form of &amp;quot;headers&amp;quot; and obfuscated binaries. None of this
makes sense in a Python context.  A single example of how the
&lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword would be helpful in Python is missing from the
original post. There are huge complications of the &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt;
keyword, also; these make the keywords more trouble than they are worth,
and any example needs to cover these issues, also.&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, when you point out any flaws in their language, Python
developers will act hostile and condescending.&amp;quot; Sorry, this complaint in
the original post sounds hostile and condescending. I'll try to ignore
the tone and stick to what content I can find.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whitespace"&gt;
&lt;h3&gt;Whitespace&lt;/h3&gt;
&lt;p&gt;&amp;quot;...how is using whitespace any better than curly braces?&amp;quot; has an
answer. But. Somehow it can't be chased down and included in the
original post. Whitespace (like name mangling) is described as wrong
because it's wrong, with no further justification provided.&lt;/p&gt;
&lt;p&gt;An example where braces seem to be essential for sorting out syntax
would be nice. The entire Python community is waiting for any example
where braces were &lt;strong&gt;necessary&lt;/strong&gt; and the indentation wasn't already
clear.&lt;/p&gt;
&lt;p&gt;&amp;quot;And only in Python will the difference between tabs and spaces cause
the interpreter to have a heart attack.&amp;quot; Um. A syntax error is a heart
attack? I wish I was able to type code without syntax errors. I am
humbled thinking about the idea of seeing syntax errors so rarely. I
have my editor set up to use spaces instead of tabs, and haven't had a
problem in 20 years of using Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-typing"&gt;
&lt;h3&gt;Dynamic Typing&lt;/h3&gt;
&lt;p&gt;The opening quote, &amp;quot;Dynamic typing is bad,&amp;quot; is stated as if it's
axiomatic. The rest of the paragraph seems like vitriol rather than
justification. &amp;quot;Some Python programmers have realized that dynamic
typing is bad&amp;quot; requires some justification; a link to some documentation
to support the claim would be helpful. An example would be good.&lt;/p&gt;
&lt;p&gt;I can only assume that code like this is important and needs to be
flagged by the compiler or something.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for data in some_list:
    if data == 42:
        print(&amp;quot;data is int&amp;quot;)
for data in some_other_list:
    if data == &amp;quot;wait&amp;quot;:
        print(&amp;quot;see the type of data changed.&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This seems like poor programming to begin with. Expecting the compiler
to reject this seems weak. It seems better to not reuse variable names
in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constants"&gt;
&lt;h3&gt;Constants&lt;/h3&gt;
&lt;p&gt;Not sure what the point is here. There's no justification for demanding
the inconsistent behavior of a one-time-only assignment statement.
There's no reference how how folks can use enums to define constant-like
names and values.&lt;/p&gt;
&lt;p&gt;The concluding paragraph &amp;quot;The Emperor Has Not Clothes&amp;quot; is some kind of
summary. It says &amp;quot;Python will only grow in popularity as more and more
software is written in it,&amp;quot; which does seem to be true. I think that
might be the single most useful sentence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-have-we-learned"&gt;
&lt;h2&gt;What Have We Learned?&lt;/h2&gt;
&lt;p&gt;First, reading a few Stack Overflow posts can be misleading. Python now
is not Python from nine years ago.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Everyone says to use Python3. Really. If you have found a Python2
tutorial, stop now. Don't follow it.&lt;/li&gt;
&lt;li&gt;The consistent use of the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; variable seems simpler than trying
to understand the rules for the &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; variable.&lt;/li&gt;
&lt;li&gt;Variables aren't &lt;em&gt;declared&lt;/em&gt;, they're assigned values. It's as simple
as it can be and avoids the clutter of variable declarations.&lt;/li&gt;
&lt;li&gt;We can read the source; the complexities of private (or protected)
instance variables doesn't really help.&lt;/li&gt;
&lt;li&gt;Python's use of whitespace is very simple; most people can indent
their code correctly. Anyone who's tried to debug C++ code that's
correctly indented but missing a (nearly invisible) } will agree that
the indentation is easier to get right.&lt;/li&gt;
&lt;li&gt;AFAICT, the reason dynamic typing might be bad is when a function or
class reuses the same variable name for multiple different types of
data. This seems wrong to reuse a variable name for multiple types. A
small effort at inspecting the code can prevent this.&lt;/li&gt;
&lt;li&gt;Constants are easily implemented via enum. But. They appear to be
useless in a dynamic language where the source is trivially available
to be changed. I'm not sure why they seem important to people. And
this article provides no help there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bottom line: Without concrete PEPs to fix things, or examples of what
better might look like, this is click-bait whining.&lt;/p&gt;
&lt;p&gt;Starting from C# or Java to locate deficiencies is just as wrong as
starting from Dartmouth Basic or FORTH as the standard against which
Python is measured.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="click-bait"></category></entry><entry><title>Pelican and Static Web Content</title><link href="https://slott56.github.io/2022_04_12-pelican_and_static_web_content.html" rel="alternate"></link><published>2022-04-12T08:00:00-04:00</published><updated>2022-04-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-04-12:/2022_04_12-pelican_and_static_web_content.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2022_03_01-static_site_blues.html"&gt;Static Site
Blues&lt;/a&gt;
I was wringing my hands over ways to convert a &lt;strong&gt;ton&lt;/strong&gt; of content from a
two different proprietary tools (the very old iWeb, and the merely old
Sandvox) into something I could work with.&lt;/p&gt;
&lt;p&gt;After a bit of fiddling around, I'm delighted with
&lt;a class="reference external" href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2022_03_01-static_site_blues.html"&gt;Static Site
Blues&lt;/a&gt;
I was wringing my hands over ways to convert a &lt;strong&gt;ton&lt;/strong&gt; of content from a
two different proprietary tools (the very old iWeb, and the merely old
Sandvox) into something I could work with.&lt;/p&gt;
&lt;p&gt;After a bit of fiddling around, I'm delighted with
&lt;a class="reference external" href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, of course, I had to extract all the iWeb and Sandvox content.
This was emphatically not fun. While both used XML, they used it in
subtly different ways. Apple's frameworks serialize internal state as
XML in a way that preserves a lot of semantic details. It also preserves
endless irrelevant details.&lt;/p&gt;
&lt;p&gt;I wound up with a Markdown data structure definition, plus a
higher-level &amp;quot;content model&amp;quot; with sites, pages, blogs, blog entries and
images. Plus the iWeb extractor and the Sandvox extractor. It's a lot of
code, much of which lacks solid unit test cases. It worked -- once --
and I was tolerant of the results.&lt;/p&gt;
&lt;p&gt;I also wound up writing tools to walk the resulting tree of Markdown
files doing some post-extraction cleanup. There's a lot of cleanup that
should be done.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;I can now add to the blog with the state of my voyaging. I've been able
to keep &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/"&gt;Team Red
Cruising&lt;/a&gt; up to date.&lt;/p&gt;
&lt;p&gt;Eventually (i.e., when the boat is laid up for Hurricane Season) I may
make an effort to clean up the older content and make it more
consistent. In particular, I need to add some annotations around
anchorages to make it possible to locate all of the legs of all of the
journeys. Since the HTML is what most people can see, that means a class
identifier for lat-lon pairs.&lt;/p&gt;
&lt;p&gt;As it is, the blog entries are *mostly* markdown. Getting images and
blockquotes even close to readable requires dropping to HTML to make
direct use of the bootstrap CSS. This also requires some comprehensive
cleanup to properly use the Bootstrap classes. (I think I've may have
introduced some misspelled CSS classes into the HTML that aren't doing
anything.)&lt;/p&gt;
&lt;p&gt;For now, however, it works. I'm still tweaking small things that require
republishing *all* the HTML.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="blogging"></category><category term="markdown"></category><category term="static site generator"></category></entry><entry><title>Static Site Blues</title><link href="https://slott56.github.io/2022_03_01-static_site_blues.html" rel="alternate"></link><published>2022-03-01T08:00:00-05:00</published><updated>2022-03-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-03-01:/2022_03_01-static_site_blues.html</id><summary type="html">&lt;p&gt;I have a very large, static site with 10+ years of stuff about my boat.
Most of it is pretty
boring. &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;http://www.itmaybeahack.com/TeamRedCruising/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started with iWeb. It was very -- well -- 2000-ish look and feel. Too
many pastels and lines and borders.&lt;/p&gt;
&lt;p&gt;In 2012, I switched to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a very large, static site with 10+ years of stuff about my boat.
Most of it is pretty
boring. &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;http://www.itmaybeahack.com/TeamRedCruising/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started with iWeb. It was very -- well -- 2000-ish look and feel. Too
many pastels and lines and borders.&lt;/p&gt;
&lt;p&gt;In 2012, I switched to Sandvox. I lived on a boat back then. I don't
have reliable internet. Using blogger.com, for example, required a
sincere commitment to bandwidth. I moved ashore in 2014 and returned to
the boat in 2020.&lt;/p&gt;
&lt;p&gt;Sandvox's creator seems to be out-of-business.&lt;/p&gt;
&lt;p&gt;What's next?&lt;/p&gt;
&lt;p&gt;Give up on these fancy editors and switch to a static site generator.
Write markdown. Run the tool. Upload when in a coffee shop with Wi-Fi.&lt;/p&gt;
&lt;p&gt;What site generator?&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.fullstackpython.com/static-site-generator.html"&gt;https://www.fullstackpython.com/static-site-generator.html&lt;/a&gt; for some
suggestions.&lt;/p&gt;
&lt;p&gt;There are three parts to this effort.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Extract the goodness from iWeb and Sandvox. I knew this would be real
work. iWeb's site has too much javascript to be easy-to-parse. I have
to navigate the underlying XML database. Sandvox is much easier to
deal with: their published site is clean, static HTML with useful
classes and ids in their tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reformat the source material into Markdown. I've grudgingly grown to
accept Markdown, even through RST is clearly superior. Some tools
work with RST and I may pandoc the entire thing over to RST from
Markdown. For now, though, the content seems to be captured.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fixup internal links and cross references. This is a godawful
problem. Media links -- in particular -- seem to be a nightmare.
Since iWeb resolves things via Javascript, the HTML is opaque.&lt;/p&gt;
&lt;p&gt;Fortunately, the database's internal cross-references aren't
horrible. Maybe this was exacerbated a poor choice of generators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Convert to HTML for a local server. Validate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Convert to HTML for the target server. Upload to a staging server and
validate again. This requires a coffee shop. Not doing this with my
phone's data plan.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Steps 1 and 2 aren't too bad. I've extracted serviceable markdown from
the iWeb database and the published Sandvox site. The material parallels
the Site/Blog/Page structure of the originals. The markdown seems to be
mostly error-free. (Some images have the caption in the wrong place,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;![caption](link)&lt;/span&gt;&lt;/tt&gt; isn't as memorable as I'd like.)&lt;/p&gt;
&lt;p&gt;Step 3, the internal links and cross-references, has been a difficult
problem, it turns out. I can, mostly, associate media with postings. I
can also find all the cross-references among postings and fix those up.
The question that arises is how to reference media from a blog post?&lt;/p&gt;
&lt;div class="section" id="mynt"&gt;
&lt;h2&gt;Mynt&lt;/h2&gt;
&lt;p&gt;I started with &lt;a class="reference external" href="https://mynt.uhnomoli.com"&gt;mynt&lt;/a&gt;. And had to bail.
It's clever and very simple. Too simple for blog posts that have a lot
of associated media assets.&lt;/p&gt;
&lt;p&gt;The issue is what to write in the markdown to refer to the images that
go with a specific blog post. I resorted to a master &lt;tt class="docutils literal"&gt;_Media&lt;/tt&gt;
directory. Which means each posting has
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;![caption][../../../../_Media/image.png)&lt;/span&gt;&lt;/tt&gt; in it.  This is
semi-manageable. But exasperating in bulk.&lt;/p&gt;
&lt;p&gt;What scrambled my brain is the way a mynt posting becomes a directory,
with an index.html. Clearly, the media could be adjacent to the
index.html. But. I can't figure out how to get mynt's generator to put
the media into each post's published directory. It seems like each post
should not be a markdown file.&lt;/p&gt;
&lt;p&gt;Also, I can trivially change the base URL when generating, but I can't
change the domain. When I publish, I want to swap domains *only*,
leaving the base URL alone. I tried. It's too much fooling around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;Pelican&lt;/h2&gt;
&lt;p&gt;Next up. &lt;a class="reference external" href="https://www.fullstackpython.com/pelican.html"&gt;Pelican&lt;/a&gt;.
We'll see if I can get my media and blog posts neatly organized.
This &lt;a class="reference external" href="http://chdoig.github.io/create-pelican-blog.html"&gt;http://chdoig.github.io/create-pelican-blog.html&lt;/a&gt; seems encouraging.
I think I should have started here first. Lektor is another possibility.&lt;/p&gt;
&lt;p&gt;Since my legacy sites have RSS feeds, it may be sensible to turn Pelican
loose on the RSS and (perhaps) skip steps 1, 2, and 3, entirely.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="#python"></category><category term="blogging"></category><category term="markdown"></category><category term="static site generator"></category></entry><entry><title>LaTeX Mysteries and an algorithmicx thing I learned.</title><link href="https://slott56.github.io/2022_02_15-latex_mysteries_and_an_algorithmicx_thing_i_learned.html" rel="alternate"></link><published>2022-02-15T08:00:00-05:00</published><updated>2022-02-15T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-15:/2022_02_15-latex_mysteries_and_an_algorithmicx_thing_i_learned.html</id><summary type="html">&lt;p&gt;I've been an on-and-off user of LaTeX since the very, very beginning.
Back in the dark days when the one laser printer that could render the
images was in a closely-guarded secret location to prevent everyone from
using it and exhausting the (expensive) toner cartridges.&lt;/p&gt;
&lt;p&gt;A consequence of this is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been an on-and-off user of LaTeX since the very, very beginning.
Back in the dark days when the one laser printer that could render the
images was in a closely-guarded secret location to prevent everyone from
using it and exhausting the (expensive) toner cartridges.&lt;/p&gt;
&lt;p&gt;A consequence of this is I think the various algorithm environments are
a ton of fun. Pseudo-code with math embedded in it. It's marvelous. It's
a pain in the neck with this clunky blogging package, so I can't easily
show off the coolness. But. You can go
to &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Algorithms"&gt;https://www.overleaf.com/learn/latex/Algorithms&lt;/a&gt; to see some examples.&lt;/p&gt;
&lt;p&gt;None of which have try/except blocks. Not a thing.&lt;/p&gt;
&lt;p&gt;Why not? I suspect it's because &amp;quot;algorithmic&amp;quot; meant &amp;quot;Algol-60&amp;quot; for
years. The language didn't have exceptions and so, the presentation of
algorithms continues to this day without exceptions.&lt;/p&gt;
&lt;p&gt;What can one do?&lt;/p&gt;
&lt;p&gt;This.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
\algblock{Try}{EndTry}
\algcblock[Try]{Try}{Except}{EndTry}
\algcblockdefx{Try}{Except}{EndTry}
   [1][Exception]{\textbf{except} \texttt{#1}}

\algrenewtext{Try}{\textbf{try}}
&lt;/pre&gt;
&lt;p&gt;This will extend the notation to add &lt;tt class="docutils literal"&gt;\Try&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;\Except&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;\EndTry&lt;/tt&gt; commands. I think I've done it all more-or-less correctly.
I'm vague on where the &lt;tt class="docutils literal"&gt;\algnotext{EndTry}&lt;/tt&gt; goes, but it seems to be
needed in each &lt;tt class="docutils literal"&gt;\Try&lt;/tt&gt; block to silence the &lt;tt class="docutils literal"&gt;\EndTry&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;As far as I know, I'm the only person who seems to care. There seems to
be little about this anywhere online. I'm guessing it's because the
basics work perfectly, and no one wants this kind of weird add-on.&lt;/p&gt;
</content><category term="Technologies"></category><category term="writing"></category><category term="latex"></category><category term="markup"></category></entry><entry><title>Desktop Notifications and EPIC DESIGN FAIL</title><link href="https://slott56.github.io/2022_02_08-desktop_notifications_and_epic_design_fail.html" rel="alternate"></link><published>2022-02-08T08:00:00-05:00</published><updated>2022-02-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-08:/2022_02_08-desktop_notifications_and_epic_design_fail.html</id><summary type="html">&lt;p&gt;I was asked to review code that -- well -- was evil.&lt;/p&gt;
&lt;p&gt;Not like &amp;quot;shabby&amp;quot; or &amp;quot;non-pythonic&amp;quot;. Nothing so simple as that.&lt;/p&gt;
&lt;p&gt;We'll get to the evil in a moment. First, we have to suffer two horrible
indignities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Busy Waiting&lt;/li&gt;
&lt;li&gt;Undefined Post-Conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll beat all three issues to death separately, starting with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was asked to review code that -- well -- was evil.&lt;/p&gt;
&lt;p&gt;Not like &amp;quot;shabby&amp;quot; or &amp;quot;non-pythonic&amp;quot;. Nothing so simple as that.&lt;/p&gt;
&lt;p&gt;We'll get to the evil in a moment. First, we have to suffer two horrible
indignities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Busy Waiting&lt;/li&gt;
&lt;li&gt;Undefined Post-Conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll beat all three issues to death separately, starting with busy
waiting.&lt;/p&gt;
&lt;div class="section" id="busy-waiting"&gt;
&lt;h2&gt;Busy Waiting&lt;/h2&gt;
&lt;p&gt;The Busy Waiting is a sleep-loop. If you're not familiar, it's this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
while something has not happened yet AND we haven't timed out:
    time.sleep(2)
&lt;/pre&gt;
&lt;p&gt;Which is often a dumb design. Busy waiting is polling. It's a lot of
pointless doing something while waiting for something else.&lt;/p&gt;
&lt;p&gt;There are dozens of message-passing and event-passing frameworks. Any of
those is better than this.&lt;/p&gt;
&lt;p&gt;Folks complain &amp;quot;Why install ZMQ when I could instead write a
busy-waiting loop?&amp;quot;&lt;/p&gt;
&lt;p&gt;Why indeed?&lt;/p&gt;
&lt;p&gt;For me, the primary reason is to avoid polling at fixed intervals, and
instead wait for the notification.&lt;/p&gt;
&lt;p&gt;The asyncio module, confusing as it is, is better than polling. Because
it dispatches events properly.&lt;/p&gt;
&lt;p&gt;This is minor compared with the undefined post-conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="undefined-post-conditions"&gt;
&lt;h2&gt;Undefined Post-Conditions&lt;/h2&gt;
&lt;p&gt;With this crap design, there are two events. There's a race between
them. One will win. The other will be silently lost forever.&lt;/p&gt;
&lt;p&gt;If &amp;quot;something has not happened&amp;quot; is false, the thing has happened. Yay.
The while statement ends.&lt;/p&gt;
&lt;p&gt;If &amp;quot;something has not happened&amp;quot; is true and the timeout occurs, then
Boo. The while statement ends.&lt;/p&gt;
&lt;p&gt;Note the there are two, unrelated post-conditions: the thing has
happened OR the timeout occurred. Is it possible for both to happen?
(hint: yes.)&lt;/p&gt;
&lt;p&gt;Ideally, the timeout and the thing happening are well-separated in time.&lt;/p&gt;
&lt;p&gt;Heh.&lt;/p&gt;
&lt;p&gt;Otherwise, they're coincident, and it's a coin-toss as to which one will
lead to completion of the while statement.&lt;/p&gt;
&lt;p&gt;The code I was asked to review made no provision for this unhappy
coincidence.&lt;/p&gt;
&lt;p&gt;Which leads us to the pure evil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pure-evil"&gt;
&lt;h2&gt;Pure Evil&lt;/h2&gt;
&lt;p&gt;What's pure evil about this is the very clear statement that there are
not enough desktop notification apps, and there's a need for another.&lt;/p&gt;
&lt;p&gt;I asked for justification. Got a stony silence.&lt;/p&gt;
&lt;p&gt;They might claim &amp;quot;It's only a little script that runs in the Terminal
Window,&amp;quot; which is garbage. There are already lots and lots of desktop
apps looking for asynchronous notification of events.&lt;/p&gt;
&lt;p&gt;Email is one of them.&lt;/p&gt;
&lt;p&gt;Do we really need another email-like message queue?&lt;/p&gt;
&lt;p&gt;(Hint: &amp;quot;My email is a lot of junk I ignore&amp;quot; is a personal problem, not a
software product description. Consider learning how to create filters
before writing yet another desktop app.)&lt;/p&gt;
&lt;p&gt;Some enterprises use Slack for notifications.&lt;/p&gt;
&lt;p&gt;What makes it even worse (I said it was pure evil) was a hint about the
context. They were doing batch data prep for some kind of
analytics/Machine Learning thing.&lt;/p&gt;
&lt;p&gt;They were writing this as if Luigi and related Workflow managers didn't
exist.&lt;/p&gt;
&lt;p&gt;Did they not know? If they were going to invent their own, they were off
to a really bad start. Really bad.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="notification"></category><category term="workflow"></category><category term="#python"></category></entry><entry><title>No one wins at Code Golf vs. This is more noise than signal</title><link href="https://slott56.github.io/2022_02_03-no_one_wins_at_code_golf_vs_this_is_more_noise_than_signal.html" rel="alternate"></link><published>2022-02-03T20:14:00-05:00</published><updated>2022-02-03T20:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-03:/2022_02_03-no_one_wins_at_code_golf_vs_this_is_more_noise_than_signal.html</id><summary type="html">&lt;p&gt;Looking at code. Came to a 20-line block of code that did exactly this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sorted(Path.cwd().glob(&amp;quot;some_pattern[1-9]*.*&amp;quot;), reverse=True)
&lt;/pre&gt;
&lt;p&gt;Twenty lines. Seriously.&lt;/p&gt;
&lt;p&gt;To be fair, 8 of the 20 lines were comments. 3 were blank. Which leaves
9 lines of code to perform the task of a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Looking at code. Came to a 20-line block of code that did exactly this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sorted(Path.cwd().glob(&amp;quot;some_pattern[1-9]*.*&amp;quot;), reverse=True)
&lt;/pre&gt;
&lt;p&gt;Twenty lines. Seriously.&lt;/p&gt;
&lt;p&gt;To be fair, 8 of the 20 lines were comments. 3 were blank. Which leaves
9 lines of code to perform the task of a one-liner.&lt;/p&gt;
&lt;p&gt;I often say &amp;quot;no one wins at code golf&amp;quot; as a way to talk people out of
trying to minimize Python code into vanishingly small black holes where
no information about the code's design escapes.&lt;/p&gt;
&lt;p&gt;However. Blowing a line of code into 9 lines seems to be just as bad.&lt;/p&gt;
&lt;p&gt;I'll spare you the 9 lines. I will say this, though, the author was
blissfully ignorant that &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects are comparable. So. There were
needless conversions. And. Even after commenting on this, they seemed to
somehow feel (without evidence of any kind) that &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects were
incomparable.&lt;/p&gt;
&lt;p&gt;This is not the first time I've seen folks who like assembler-style
code. There is at most one state-change or attribute reference on each
line of code. The code has a very voluble verticality (VVV™).&lt;/p&gt;
&lt;p&gt;This seems as wrong as code golf.  Neither style provides meaningful
code.&lt;/p&gt;
&lt;p&gt;How can we measure &amp;quot;meaningful&amp;quot;?&lt;/p&gt;
&lt;p&gt;Of the 8 lines of comments, the English summary, the &amp;quot;reverse alphabetic
order&amp;quot; phrase is only a few words. Therefore, the matching code can be
an equally terse few symbols. I think code can parallel natural
language.&lt;/p&gt;
</content><category term="Technologies"></category><category term="code golf"></category><category term="#python"></category></entry><entry><title>How to Test a Random Number Generator</title><link href="https://slott56.github.io/2022_01_18-how_to_test_a_random_number_generator.html" rel="alternate"></link><published>2022-01-18T08:00:00-05:00</published><updated>2022-01-18T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-18:/2022_01_18-how_to_test_a_random_number_generator.html</id><summary type="html">&lt;p&gt;Nowadays, we don't have the same compelling reasons to test a random
number generator. The intervening decades have seen a lot of fruitful
research. Good algorithms.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, however, I still feel a need to work out
the solution to an old problem. See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nowadays, we don't have the same compelling reasons to test a random
number generator. The intervening decades have seen a lot of fruitful
research. Good algorithms.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, however, I still feel a need to work out
the solution to an old problem. See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca.
1968&lt;/a&gt;
for some background on this.&lt;/p&gt;
&lt;p&gt;What could I have done on that ancient NCE Fortran -- with four digit
integers -- to create random numbers? Step 1 was to stop using the
middle-squared generator. It doesn't work.&lt;/p&gt;
&lt;p&gt;Step 2 is to find a Linear Congruential Generator that works. LCG's have
a (relatively) simple form:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt; + 1&lt;/sub&gt; = (&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;×&lt;i&gt;a&lt;/i&gt; + &lt;i&gt;c&lt;/i&gt;)&lt;span class="unknown"&gt;\bmod&lt;/span&gt;&lt;i&gt;m&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;In this case, the modulo value, &lt;em&gt;m&lt;/em&gt;, is 10,000. What's left is step 3:
find &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; parameters.&lt;/p&gt;
&lt;p&gt;To find suitable parameters, we need battery of empirical tests. Most of
them are extensions to the following class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections import Counter
from typing import Hashable
from functools import cache

class Chi2Test:
    &amp;quot;&amp;quot;&amp;quot;The base class for empirical PRNG tests based on the Chi-2 testing.&amp;quot;&amp;quot;&amp;quot;

    #: The actual distribution, created by ``test()``.
    actual_fq : dict[Hashable, int]

    #: The expected distribution, created by ``__init__()``.
    expected_fq: dict[Hashable, int]

    #: The lower and upper bound on acceptable chi-squared values.
    expected_chi_2_range: tuple[float, float]

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;
        A subclass will override this to call ``super().__init__()`` and then
        create the expected distribution.
        &amp;quot;&amp;quot;&amp;quot;
        self._chi2 = None

    def test(self):
        &amp;quot;&amp;quot;&amp;quot;
        A subclass will override this to call ``super().test()`` and then
        create an actual distribution, usually with a distinct seed value.
        &amp;quot;&amp;quot;&amp;quot;
        self._chi2 = None

    &amp;#64;property
    def chi2(self) -&amp;gt; float:
        &amp;quot;&amp;quot;&amp;quot;Return chi-squared metric between actual and expected observations.&amp;quot;&amp;quot;&amp;quot;
        if self._chi2 is None:
            a_e = (
                (self.actual_fq[k], self.expected_fq[k])
                for k in self.expected_fq
                if self.expected_fq[k] &amp;gt; 0
            )
            v = sum((a-e)**2/e for a, e in a_e)
            self._chi2 = v
        return self._chi2

    &amp;#64;property
    def pass_test(self) -&amp;gt; bool:
        return self.expected_chi_2_range[0] &amp;lt;= self.chi2 &amp;lt;= self.expected_chi_2_range[1]
&lt;/pre&gt;
&lt;p&gt;This defines the essence of a chi-squared test. There's another test
that isn't based on chi-squared. The serial correlation where a
correlation coefficient is computed between adjacent pairs of samples.
We'll ignore this special case for now. Instead, we'll focus on the
battery of chi-squared tests.&lt;/p&gt;
&lt;div class="section" id="linear-congruential-pseudo-random-number-generator"&gt;
&lt;h2&gt;Linear Congruential Pseudo-Random Number Generator&lt;/h2&gt;
&lt;p&gt;We'll also need an LC PRNG that's constrained to 4 decimal digits.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class LCM4:
    &amp;quot;&amp;quot;&amp;quot;Constrained by the NCE Fortran 4-digit integer type.&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, a: int, c: int) -&amp;gt; None:
        self.a = a
        self.c = c
    def seed(self, v: int) -&amp;gt; None:
        self.v = v
    def random(self) -&amp;gt; int:
        self.v = (self.a*self.v % 10_000 + self.c) % 10_000
        return self.v
&lt;/pre&gt;
&lt;p&gt;This mirrors the old NCE Fortran on the IBM 1620 computer. 4 decimal
digits. No more.&lt;/p&gt;
&lt;p&gt;We can use this to generate a pile of samples that can be evaluated. I'm
a fan of using generators because they're so efficient. The use of a set
to create a list seems weird, but it's very fast.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def lcg_samples(rng: LCM4, seed: int, n_samples: int = N_SAMPLES) -&amp;gt; list[int]:
    &amp;quot;&amp;quot;&amp;quot;
    Generate a bunch of sample values. A repeat implies a cycle, and we'll stop early.

    &amp;gt;&amp;gt;&amp;gt; lcg_samples(LCM4(1621, 3), 1234)[:12]
    [317, 3860, 7063, 9126, 3249, 6632, 475, 9978, 4341, 6764, 4447, 8590]

    &amp;quot;&amp;quot;&amp;quot;
    rng.seed(seed)
    def until_dup(f: Callable[..., Hashable], n_samples: int) -&amp;gt; Iterator[Hashable]:
        seen: set[Hashable] = set()
        while (v := f()) not in seen and len(seen) &amp;lt; n_samples:
            seen.add(v)
            yield v
    return list(until_dup(rng.random, n_samples))
&lt;/pre&gt;
&lt;p&gt;This function builds a list of values for us. We can then subject the
set of samples to a battery of tests. We'll look at one test as an
example for the others. They're each devilishy clever, and require a
little bit of coding smarts to get them to work correctly and quickly.&lt;/p&gt;
&lt;div class="section" id="frequency-test"&gt;
&lt;h3&gt;Frequency Test&lt;/h3&gt;
&lt;p&gt;Here's one of the tests in the battery of chi-squared tests. This is the
frequency test that examines values to see if they have the right number
of occurrences. We pick a domain, &lt;em&gt;d&lt;/em&gt;, and parcel numbers out into this
domain. We use &lt;span class="formula"&gt;&lt;br/&gt;&lt;i&gt;frac&lt;/i&gt;&lt;i&gt;d&lt;/i&gt;&lt;br/&gt;&lt;i&gt;times&lt;/i&gt;&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;10, 000&lt;/span&gt; because this tends
to leverage the left-most digits which are somewhat more random than the
right-most digits.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class FQTest(Chi2Test):
    expected_chi_2_range = (7.261, 25.00)

    def __init__(self, d: int = 16, size_samples: int = 6_400) -&amp;gt; None:
        super().__init__()
        #: Size of the domain
        self.d = d
        #: Number of samples expected
        self.size_samples = size_samples
        #: Frequency for Chi-squared comparison
        self.expected_fq = {e: int(self.size_samples/self.d) for e in range(self.d)}

    def test(self, sequence: list[int]) -&amp;gt; None:
        super().test()
        self.actual_fq = Counter(int(self.d*s/10_000) for s in sequence)
&lt;/pre&gt;
&lt;p&gt;We can apply this test to some samples, compare with the expectation,
and save the chi-squared value. This lets us look at LCM parameters to
see if the generator creates suitably random values.&lt;/p&gt;
&lt;p&gt;The essential test protocol is this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
samples = lcg_samples(LCM4(1621, 3), seed=1234)
fqt = FQTest()
fqt.test(samples)
fqt.chi2
&lt;/pre&gt;
&lt;p&gt;The test creates some samples, applies the frequency test. The next step
is to examine the chi-squared value to see if it's in the allowable
range, &lt;span class="formula"&gt;7.261&lt;br/&gt;&lt;i&gt;leq&lt;/i&gt;&lt;br/&gt;&lt;i&gt;chi&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt; &amp;lt; 25&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-search-space"&gt;
&lt;h3&gt;The search space&lt;/h3&gt;
&lt;p&gt;Superficially, it seems like there could be 10,000 choices of &lt;em&gt;a&lt;/em&gt; and
10,000 choices of &lt;em&gt;c&lt;/em&gt; parameter values for this PRNG. That's 100 million
combinations. It takes a bit of processing to look at all of those.&lt;/p&gt;
&lt;p&gt;Looking more deeply, the values of &lt;em&gt;c&lt;/em&gt; are often small prime numbers. 1
or 11 or some such. That really cuts down on the search. The values of
&lt;em&gt;a&lt;/em&gt; have a number of other constraints with respect to the modulo value.
Because 10,000 has factors of 4 and 5, this suggests values like &lt;span class="formula"&gt;20&lt;i&gt;k&lt;/i&gt; + 1&lt;/span&gt; will work. Sensible combinations are defined by the following
domain:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
combinations = [
    (a, c)
    for c in (1, 3, 7, 11,)
    for a in range(21, 10_000, 20)
]
&lt;/pre&gt;
&lt;p&gt;This is 2,000 distinct combinations, something we can compute on our
laptop.&lt;/p&gt;
&lt;p&gt;The problem we have trying to evaluate these is each combination's
testing is compute-intensive. This means we want to use as many cores of
our machine as we have available. We don't want this to process each
combination serially on a single core. A thread pool isn't going to help
much because the OS doesn't scatter threads among all the cores.&lt;/p&gt;
&lt;p&gt;Because the OS likes to scatter processes among all the cores, we need a
process pool.&lt;/p&gt;
&lt;p&gt;Here's how to spread the work among the cores:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from concurrent.futures import ProcessPoolExecutor, as_completed

combinations = [
    (a, c)
    for c in (1, 3, 7, 11)
    for a in range(21, 10_000, 20)
]

with Progress() as progress:
    setup_task = progress.add_task(&amp;quot;setup ...&amp;quot;, total=len(combinations))
    finish_task = progress.add_task(&amp;quot;finish...&amp;quot;, total=len(combinations))

    with ProcessPoolExecutor(max_workers=8) as pool:
        futures = [
            pool.submit(evaluate, (a, c))
            for a, c in progress.track(combinations, task_id=setup_task, total=len(combinations))
        ]
        results = [
            f.result()
            for f in progress.track(as_completed(futures), task_id=finish_task, total=len(combinations))
        ]
&lt;/pre&gt;
&lt;p&gt;This will occupy *all* the cores of the computer executing the
`evaluate()` function. This function applies the battery of tests to
each combination of a and c. We can then check the results for
combinations where the chi-squared results for each test are in the
acceptable ranges for the test.&lt;/p&gt;
&lt;p&gt;It's fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Use &lt;strong&gt;a=1621&lt;/strong&gt; and &lt;strong&gt;c=3&lt;/strong&gt; can generate acceptable random numbers using
4 decimal digits.&lt;/p&gt;
&lt;p&gt;Here's some output using only a subset of the tests.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(rngtest2) % python lcmfinder.py
setup ... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
finish... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
2361  1  11.46  14.22  46.64  63.76   2.30  11.33   2.16   2.16
 981  3  10.28  15.24  52.56  66.32   2.28  11.08  10.47  10.47
1221  3  10.19  14.12  48.72  62.08   3.03  10.08   2.59   2.59
1621  3  11.70  14.91  47.12  69.52   2.23   9.69   0.86   0.86
&lt;/pre&gt;
&lt;p&gt;The output shows the &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; values followed by the minimum and
maximum chi-squared values for each test. The chi-squared values are in
pairs for the frequency test, serial pairs test, gap test, and poker
test.&lt;/p&gt;
&lt;p&gt;Each test uses about two dozen seed values to generate piles of 3,200
samples and subject each pile of samples to a battery of tests. The seed
values, BTW, are &lt;tt class="docutils literal"&gt;range(1, 256, 11)&lt;/tt&gt;; kind of arbitrary. Once I find
the short list of candidates, I can test with more seeds. There are only
10,000 seed values, so, this can be done in finite time.&lt;/p&gt;
&lt;p&gt;For example, a=1621, c=3, had chi-squared values between 11.70 and 14.91
for the frequency test. Well within the 7.261 to 25.0 range required.
The remaining numbers show that it passed the other tests, also.&lt;/p&gt;
&lt;p&gt;For completeness, I intend to implement the remaining half-dozen or so
tests. Then I need to make sure the sphinx-produced documentation looks
good. I've done this
before. &lt;a class="reference external" href="http://slott.itmaybeahack.com/_static/rngtest/rngdoc.html"&gt;http://slott.itmaybeahack.com/_static/rngtest/rngdoc.html&lt;/a&gt; It's
kind of an obsession, I think.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, this would have been better than the
middle-squared nonsense that caused me to struggle with bad games that
behaved badly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="random numbers"></category><category term="multiprocessing"></category></entry><entry><title>The Old Days -- ca. 2000 -- Empirical Tests of Random Numbers (Python and Chi-Square Testing)</title><link href="https://slott56.github.io/2022_01_11-the_old_days_ca_2000_empirical_tests_of_random_numbers_python_and_chi_square_testing.html" rel="alternate"></link><published>2022-01-11T08:00:00-05:00</published><updated>2022-01-11T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-11:/2022_01_11-the_old_days_ca_2000_empirical_tests_of_random_numbers_python_and_chi_square_testing.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca. 1974 Random Numbers Before
Python&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;We'll get to Python after reminiscing about the olden days. I want to
provide some back story on why
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; has had a huge
impact on ordinary hacks like myself.&lt;/p&gt;
&lt;p&gt;What we're talking about is how we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca. 1974 Random Numbers Before
Python&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;We'll get to Python after reminiscing about the olden days. I want to
provide some back story on why
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; has had a huge
impact on ordinary hacks like myself.&lt;/p&gt;
&lt;p&gt;What we're talking about is how we struggled with randomness before&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/dev/random&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;The Mersenne Twister Pseudo-Random Number Generator (PRNG)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pre-1997, we performed empirical tests of PRNG's to find one that was
random enough for our application. Maybe we were doing random samples of
data to compare statistical measures. Maybe we were writing a game. What
was important was a way to create a sequence of values that passed a
battery of statistical tests.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://link.springer.com/chapter/10.1007%2F978-1-4612-1690-2_7"&gt;https://link.springer.com/chapter/10.1007%2F978-1-4612-1690-2_7&lt;/a&gt; for
the kind of material we salivated over.&lt;/p&gt;
&lt;p&gt;While there are an infinite number of bad algorithms, some math reveals
that the Linear Congruential Generator (LCG) is simple and effective.
Each new number is based on the previous number:
&lt;span class="formula"&gt;&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt; + 1&lt;/sub&gt; = (&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;×&lt;i&gt;a&lt;/i&gt; + &lt;i&gt;c&lt;/i&gt;)&lt;span class="unknown"&gt;\bmod&lt;/span&gt;&lt;i&gt;m&lt;/i&gt;&lt;/span&gt;. There's a multiply and an add, modulo some
big number. The actual samples are often a subset of the bits in
&lt;span class="formula"&gt;&lt;i&gt;X&lt;/i&gt;&lt;sub&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;After the Mersenne Twister became widely used, we essentially stopped
looking at alternative random number algorithms. Before then -- well --
things weren't so good.&lt;/p&gt;
&lt;p&gt;Here are some classics that I tested.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ACM Collected Algorithms (CALGO) number 294 is a random-number
generator. This is so obsolete, I have trouble finding links to it.
It was a 28-bit generator.&lt;/li&gt;
&lt;li&gt;The ACM Collected Algorithms (CALGO) number 266 has code still
available. See &lt;a class="reference external" href="http://www.netlib.no/netlib/toms/266"&gt;toms/266&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Cheney-Kincaid generator is available. See &lt;a class="reference external" href="https://www.netlib.org/cgi-bin/netlibfiles.pl?filename=/cheney-kincaid/random.f"&gt;random.f plus
dependencies&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These formed a kind of benchmark I used when looking at Python's
built-in Mersenne Twister.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Nowadays, you can find a great list of LCM PRNG's at&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linear_congruential_generator"&gt;https://en.wikipedia.org/wiki/Linear_congruential_generator&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="section" id="python-empirical-testing"&gt;
&lt;h2&gt;Python Empirical Testing&lt;/h2&gt;
&lt;p&gt;One of the early questions I had was whether or not the &lt;tt class="docutils literal"&gt;random&lt;/tt&gt;
module in Python stacked up against these older RNG's that I was a
little more familiar with.&lt;/p&gt;
&lt;p&gt;So, I wrote a big, fancy random number testing tool in Python.&lt;/p&gt;
&lt;p&gt;When? Around 2000. I started this in the Python 1.6 and 2.1 era. I have
files showing results from Python 2.3 (#2, Jul 30 2003). This is about
when I stopped fooling around with this and moved on to trusting that
Python really did work and was -- perhaps -- the best approach to
working with randomly-sampled data for statistical work.&lt;/p&gt;
&lt;p&gt;The OO design for the test classes was Lavish Over The Top (LOTT™) OO:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Too Many Methods&lt;/li&gt;
&lt;li&gt;Too Many Superclasses&lt;/li&gt;
&lt;li&gt;No Duck Typing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We won't look at that code. It's regrettable and stems from trying to
make Python into C++.&lt;/p&gt;
&lt;p&gt;What I do want to look at is the essential Chi-Squared test methodology.
This is some cool stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comparing-expected-and-actual"&gt;
&lt;h2&gt;Comparing Expected and Actual&lt;/h2&gt;
&lt;p&gt;The chi-squared metric is a way to compare actual and expected
distributions. You can read about it on your own time. It's a way to
establish if data is random or there's something else going on that's
not random. i.e., a trend or a bias.&lt;/p&gt;
&lt;p&gt;The empirical tests for PRNG's that Knuth defines all come with
chi-squared values that bracket acceptable levels of randomness. For the
purposes of writing a working set of tests the magic chi-squared values
supplied by Knuth are fine. Magical. But fine. Really. Trust them.&lt;/p&gt;
&lt;p&gt;If you make modifications, you'd use your statistics text-book. You'd
open to the back where it had a Chi-Squared table. That table gave you
chi-squared values for a given degree of freedom and a given probability
of being random.&lt;/p&gt;
&lt;p&gt;Or, You could look for the NIST handbook online. It has a section on
chi-squared testing.
See &lt;a class="reference external" href="https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm"&gt;https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm&lt;/a&gt;.
Same drill. Degrees of freedom and probability map to a chi-squared
threshold.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Were do these magical Chi-Squared values come from? This gets
interesting in a useless-sidebar kind of way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chi-squared-values"&gt;
&lt;h2&gt;Chi-Squared Values&lt;/h2&gt;
&lt;p&gt;There's a really, really terse summary of chi-squared numbers
here: &lt;a class="reference external" href="https://www.danielsoper.com/statcalc/formulas.aspx?id=11"&gt;https://www.danielsoper.com/statcalc/formulas.aspx?id=11&lt;/a&gt;. This is
all you need to know. It may be too terse to help you learn about it,
but it's a handy reference.&lt;/p&gt;
&lt;p&gt;We need to evaluate two functions: partial gamma and gamma. These are
defined as integrals. And they're nasty levels of complexity. Nasty.&lt;/p&gt;
&lt;p&gt;This kind of nasty:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;γ&lt;/i&gt;(&lt;i&gt;s&lt;/i&gt;, &lt;i&gt;z&lt;/i&gt;) = &lt;span class="limits"&gt;&lt;sup class="limit"&gt;&lt;i&gt;z&lt;/i&gt;&lt;/sup&gt;&lt;span class="limit"&gt;&lt;span class="bigoperator integral"&gt;∫&lt;/span&gt;&lt;/span&gt;&lt;sub class="limit"&gt;0&lt;/sub&gt;&lt;/span&gt;&lt;i&gt;t&lt;/i&gt;&lt;sup&gt;&lt;i&gt;s&lt;/i&gt; − 1&lt;/sup&gt;&lt;i&gt;e&lt;/i&gt;&lt;sup&gt; − &lt;i&gt;t&lt;/i&gt;&lt;/sup&gt;&lt;i&gt;dt&lt;/i&gt;
&lt;/div&gt;
&lt;div class="formula"&gt;
Γ(&lt;i&gt;z&lt;/i&gt;) = &lt;span class="limits"&gt;&lt;sup class="limit"&gt;∞&lt;/sup&gt;&lt;span class="limit"&gt;&lt;span class="bigoperator integral"&gt;∫&lt;/span&gt;&lt;/span&gt;&lt;sub class="limit"&gt;0&lt;/sub&gt;&lt;/span&gt;&lt;i&gt;t&lt;/i&gt;&lt;sup&gt;&lt;i&gt;z&lt;/i&gt; − 1&lt;/sup&gt;&lt;i&gt;e&lt;/i&gt;&lt;sup&gt; − &lt;i&gt;t&lt;/i&gt;&lt;/sup&gt;&lt;i&gt;dt&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;These are not easy things to evaluate. Back to the ACM Collected
Algorithms (CALGO) to find ways to evaluate these integrals. There are
algorithms in CALGO 435 and 654 that are expressed as Fortran for
evaluating these. This ain't all, of course, we need Stirling Numbers
and Bernoulli Numbers. So there's a lot going on here.&lt;/p&gt;
&lt;p&gt;A lot of this can be transliterated from Fortran. The resulting code is
frankly quite ugly, and requires extensive test cases. Fortran with
GOTO's requires some cleverness to unwind the conceptual for/while/if
constructs.&lt;/p&gt;
&lt;p&gt;OR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-sympy"&gt;
&lt;h2&gt;Enter Sympy&lt;/h2&gt;
&lt;p&gt;In the 20+ years since I implemented my empirical PRNG tests &amp;quot;the hard
way,&amp;quot; &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; has come of age.&lt;/p&gt;
&lt;p&gt;Check this out&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from sympy import Sum, rf
from sympy.abc import k, s, z
from sympy.functions import exp
from sympy import oo
Sum(z**s * exp(-z) * z**k / rf(s, k+1), (k, 0, oo)).simplify()
&lt;/pre&gt;
&lt;p&gt;I could use this in Jupyter Lab to display a computation for the partial
gamma function.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;z&lt;/i&gt;&lt;sup&gt;&lt;i&gt;s&lt;/i&gt;&lt;/sup&gt;&lt;i&gt;e&lt;/i&gt;&lt;sup&gt; − &lt;i&gt;z&lt;/i&gt;&lt;/sup&gt;&lt;span class="limits"&gt;&lt;sup class="limit"&gt;∞&lt;/sup&gt;&lt;span class="limit"&gt;&lt;span class="bigoperator"&gt;∑&lt;/span&gt;&lt;/span&gt;&lt;sub class="limit"&gt;&lt;i&gt;k&lt;/i&gt; = 0&lt;/sub&gt;&lt;/span&gt;&lt;span class="fullfraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;z&lt;/i&gt;&lt;sup&gt;&lt;i&gt;k&lt;/i&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sup&gt;&lt;span class="overline"&gt;&lt;i&gt;k&lt;/i&gt; + 1&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;This requires a fancy Rising Factorial computation,
the &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sup&gt;&lt;span class="overline"&gt;&lt;i&gt;k&lt;/i&gt; + 1&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt; term. This is available in &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; as the &lt;tt class="docutils literal"&gt;rf(s, k+1)&lt;/tt&gt;
expression.&lt;/p&gt;
&lt;p&gt;It turns out that sympy offers lowergamma() and gamm() as first-class
functions. I don't even need to work through the closed-form
simplifications.&lt;/p&gt;
&lt;p&gt;I could do this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def gammap(s: float, z: float) -&amp;gt; float:
    return (z**s * exp(-z) * Sum(z**k / rf(s, k+1), (k, 0, oo))).evalf()

def gamma(z: float) -&amp;gt; float:
    return integrate(t**(z-1) * exp(-t), (t, 0, oo)).doit()
&lt;/pre&gt;
&lt;p&gt;It works well. And it provides elegant documentation. But I don't need
to. I can write this, instead,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def chi2P(chi2: float, degF: int) -&amp;gt; float:
   return lowergamma(degF/2, chi2/2) / gamma(degF/2)
&lt;/pre&gt;
&lt;p&gt;This is used to compute the probability of seeing a chi-squared value.&lt;/p&gt;
&lt;p&gt;For the frequency test, as an example. We partition the random numbers
into 16 bins. These gives us 15 degrees of freedom. We want chi-squared
values between 7.2578125 and 25.0.&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;Given a chi-squared value of 6.0, we can say the probability of 0.02 is
suspiciously low, less than 0.05 level that we've decided signifies
mostly random. The data is &amp;quot;too random&amp;quot;; that is to say it's too close
to the ideal distribution to be trusted.&lt;/p&gt;
&lt;p&gt;The established practice was to lookup a chi-squared value because you
couldn't easily compute the probability of that value. With sympy, we
can compute the probability. It's slow, so we have to optimize this
carefully and not compute probabilities more frequently than necessary.&lt;/p&gt;
&lt;p&gt;We can, for example, compute chi-squared values for a number of seeds,
take the max and min of these and compute the probability of those two
boundary values. This will bracket the probability that the pseudo
random number generator is producing suitably random numbers.&lt;/p&gt;
&lt;p&gt;This also applies to any process we're measuring with results that might
vary randomly or might indicate a consistent problem that requires
evaluation.&lt;/p&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; eliminates the complexity of understanding these
beautifully hand-crafted antique algorithms. It acts as a kind of
super-compiler. From Math to an intermediate AST to a concrete
implementation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="fortran"></category><category term="random numbers"></category></entry><entry><title>The Old Days -- ca. 1974 -- Random Numbers before Python</title><link href="https://slott56.github.io/2022_01_04-the_old_days_ca_1974_random_numbers_before_python.html" rel="alternate"></link><published>2022-01-04T20:52:00-05:00</published><updated>2022-01-04T20:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-04:/2022_01_04-the_old_days_ca_1974_random_numbers_before_python.html</id><summary type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Old Days -- ca.
1968&lt;/a&gt;&amp;quot;
for my first exposure to an actual computer. Nothing about Python there.
But. It's what motivated me to get started learning to code -- I was
fascinated by games that involved randomization. Games with cards or
dice.&lt;/p&gt;
&lt;p&gt;After filling in a little background, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Old Days -- ca.
1968&lt;/a&gt;&amp;quot;
for my first exposure to an actual computer. Nothing about Python there.
But. It's what motivated me to get started learning to code -- I was
fascinated by games that involved randomization. Games with cards or
dice.&lt;/p&gt;
&lt;p&gt;After filling in a little background, I will get to the Python part of
this. First, however, I want to compare the olden days with what we have
now.&lt;/p&gt;
&lt;p&gt;From 1969 to 1974 I had access to the high school's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/IBM_1620"&gt;IBM
1620&lt;/a&gt;. This means programming
in &lt;a class="reference external" href="https://www.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP1620.html"&gt;IBM's SPS
assembler&lt;/a&gt;,
or using the NCE Load-and-Go Fortran compiler.
See &lt;a class="reference external" href="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD00xx/EWD37.html"&gt;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD00xx/EWD37.html&lt;/a&gt;
for a scathing review of the problems with this machine.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.bitsavers.org/pdf/ibm/1620/GC20-1603-10_1620_Catalog_of_Programs_Jan71.pdf"&gt;http://www.bitsavers.org/pdf/ibm/1620/GC20-1603-10_1620_Catalog_of_Programs_Jan71.pdf&lt;/a&gt;
Page 36 has this:&lt;/p&gt;
&lt;img alt="Load-and-Go Fortran Manual Cover Page" src="https://slott56.github.io/media/39D362EE-AF0A-4E0E-B4A2-056A99E94BE8.jpeg" style="width: 238px; height: 320px;" /&gt;
&lt;p&gt;That's a quick overview of my earliest programming language. What's
essential here is the NCE Fortran used 4-digit integers.&lt;/p&gt;
&lt;p&gt;I'll repeat that for those skimming, and wondering what the Python
connection is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Four. Digit. Integers.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;That's four decimal digits. Decimal digits required at least 4
hardware bits. IBM 1620 digits also had flags and signs, so, there
were maybe 6 bits per digit. 24 bits of hardware used to represent
just under 14 bits of useful information.&lt;/p&gt;
&lt;p&gt;My interest is in simulation and randomness. So. I have this question
of how to create random sequences of numbers limited to 4-digit
integers.&lt;/p&gt;
&lt;div class="section" id="prng-algorithms"&gt;
&lt;h2&gt;PRNG Algorithms&lt;/h2&gt;
&lt;p&gt;There are a number of classic Pseudo-Random Number Generator (PRNG)
algorithms from the early days before Mersenne Twister took over in
1997.&lt;/p&gt;
&lt;p&gt;We used to be super-careful to emphasize the letter &lt;strong&gt;P&lt;/strong&gt; in
&lt;strong&gt;P&lt;/strong&gt;RNG because the numbers we're really random. They just behaved
randomish. This is contrasted with real randomness, also known as
&lt;em&gt;entropy&lt;/em&gt;. For example, &lt;tt class="docutils literal"&gt;/dev/random&lt;/tt&gt; device driver has a fair
amount of entropy. I think it's comparable to a person throwing dice
across a table. I think it's as random as a noise-generating diode
with a sample-and-hold circuit to pluck out random values from the
noise.&lt;/p&gt;
&lt;p&gt;Pre-Mersenne-Twister -- pre-1997 -- we worried a lot about random
number generation. See Knuth, Donald E. &lt;em&gt;The Art of Computer
Programming, Volume 2, Seminumerical Algorithms&lt;/em&gt;, Addison-Wesley,
1969. Section 3.3.2. covers empirical testing of random number
generators. Section 3.3.1. covers the Chi-squared test for fit
between actual and expected frequency distributions.&lt;/p&gt;
&lt;p&gt;Back in the olden days, it was stylish to perform an empirical test
(or ten) to confirm we really had &amp;quot;good&amp;quot; random numbers. The built-in
libraries that came with your compiler or OS could not be trusted
without evidence.&lt;/p&gt;
&lt;p&gt;One of the classic (bad) PRNG's is the &amp;quot;Middle-Squared&amp;quot; method.
See &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Middle-square_method"&gt;https://en.wikipedia.org/wiki/Middle-square_method&lt;/a&gt;. I learned
about this in the 70's. And used it in the old NCE Fortran.&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;Four. Digit. Integers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Did I mention that the Fortran compiler used &lt;strong&gt;four&lt;/strong&gt; decimal digits
for integers? That means plucking the middle two digits out of a
four-digit number. How random can that be?&lt;/p&gt;
&lt;p&gt;Not very. The longest possible sequence is 100 numbers. If, by some
miracle, you found a seed number with the right properties and only
two digits.&lt;/p&gt;
&lt;p&gt;Nowadays I can, in Python, do a quick middle-squared analysis for all
100 seed values.&lt;/p&gt;
&lt;p&gt;This kind of thing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def csqr4(value: int) -&amp;gt; list[int]:
    &amp;quot;&amp;quot;&amp;quot;The 4 decimal digit center-squared PRNG.&amp;quot;&amp;quot;&amp;quot;
    sequence = []
    while value not in sequence:
        sequence.append(value)
        value = (((value**2) // 10) % 100)
    return sequence
&lt;/pre&gt;
&lt;p&gt;Which you can run and see that &lt;strong&gt;all&lt;/strong&gt; of my early attempts at games
and simulations were doomed. The seed values of 76, 42, and 69
provided kind of long sequences of almost random-seeming numbers.
Otherwise, pfft, this was junk computer science. 50% of the seeds
provide 5 or fewer numbers before repeating.&lt;/p&gt;
&lt;p&gt;For blackjack, a few random numbers for shuffling &lt;em&gt;might&lt;/em&gt; be enough.
For other games, the lack of randomness made the outcomes trivially
predictable.&lt;/p&gt;
&lt;p&gt;What's funny is how far the state of the art has moved since then.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Hardware now has more than 20,000 decimal digits (about 10K bytes) of storage.&lt;/li&gt;
&lt;li&gt;Software with algorithms that are really, really clever.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's hard to understate these two advances, particularly, the second
one. I'll return to the algorithm thing a lot in the next few posts.&lt;/p&gt;
&lt;p&gt;My focus was on games and randomization. Ideally, simple stuff.
But... under the hood, it's not simple. I've spent some time (not
much, and not in much depth) looking at the tip of this iceberg.&lt;/p&gt;
&lt;p&gt;It served me as an incentive to dive just a little more deeply into a
topic, like math or a programming language or a statistical tool.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="fortran"></category><category term="random numbers"></category></entry><entry><title>The Old Old Days -- ca. 1968</title><link href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html" rel="alternate"></link><published>2021-12-28T08:00:00-05:00</published><updated>2021-12-28T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-12-28:/2021_12_28-the_old_old_days_ca_1968.html</id><summary type="html">&lt;p&gt;As the olds do, I reminisce sometimes. Not often. Let me rewind the
memory tapes a back to 1967 or '68.&lt;/p&gt;
&lt;p&gt;(What a dumb metaphor for folks who have never used serial storage.)&lt;/p&gt;
&lt;p&gt;This isn't -- directly -- about Python. But it may help folks who live
at the edge of programming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As the olds do, I reminisce sometimes. Not often. Let me rewind the
memory tapes a back to 1967 or '68.&lt;/p&gt;
&lt;p&gt;(What a dumb metaphor for folks who have never used serial storage.)&lt;/p&gt;
&lt;p&gt;This isn't -- directly -- about Python. But it may help folks who live
at the edge of programming find a project that motivates them to learn
to code.&lt;/p&gt;
&lt;p&gt;This was my first exposure to an actual computer. I think it was an old
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/IBM_650"&gt;IBM 650&lt;/a&gt; that our high-school
had. I wasn't in high school yet, but there was an open house, and they
fired this thing up.&lt;/p&gt;
&lt;p&gt;What was the demo program?&lt;/p&gt;
&lt;p&gt;The thing was running a version of blackjack.&lt;/p&gt;
&lt;p&gt;It would clatter and type something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 J S
 9 C  7 D
&amp;gt;
&lt;/pre&gt;
&lt;p&gt;And wait for your input. The first line was the dealer's card and your
two cards. You could then enter your plan -- hit, stand, split, or
double. Subsequent lines would play out your hand.&lt;/p&gt;
&lt;p&gt;And yes, I recall much of the interaction to this day. (Not all the
details. It was a long time ago.)&lt;/p&gt;
&lt;p&gt;This shaped my understanding of &amp;quot;computing as simulation.&amp;quot;&lt;/p&gt;
&lt;p&gt;It also caused me to become interested in random numbers and the idea of
generating pseudo-random numbers with digital computers. I'll be posting
some more thoughts on random numbers and -- I promise -- there will be
Python code.&lt;/p&gt;
</content><category term="Technologies"></category><category term="history"></category><category term="learning"></category><category term="simulation"></category><category term="random numbers"></category></entry><entry><title>Some Harsh Criticism for Python Object-Oriented Programming 4th ed.</title><link href="https://slott56.github.io/2021_12_26-some_harsh_criticism_for_python_object_oriented_programming_4th_ed.html" rel="alternate"></link><published>2021-12-26T11:11:00-05:00</published><updated>2021-12-26T11:11:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-12-26:/2021_12_26-some_harsh_criticism_for_python_object_oriented_programming_4th_ed.html</id><summary type="html">&lt;p&gt;Here are some links to
reviews: &lt;a class="reference external" href="https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar"&gt;https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar"&gt;https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are reviews of &lt;a class="reference external" href="https://subscription.packtpub.com/book/programming/9781801077262/2"&gt;Python Object-Oriented Programming: Build robust
and maintainable object-oriented …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some links to
reviews: &lt;a class="reference external" href="https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar"&gt;https://www.amazon.com/product-reviews/1801077266/ref=cm_cr_unknown?ie=UTF8&amp;amp;filterByStar=one_star&amp;amp;reviewerType=all_reviews&amp;amp;pageNumber=1#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar"&gt;https://www.amazon.ca/product-reviews/1801077266/ref=acr_dp_hist_3?ie=UTF8&amp;amp;filterByStar=three_star&amp;amp;reviewerType=all_reviews#reviews-filter-bar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These are reviews of &lt;a class="reference external" href="https://subscription.packtpub.com/book/programming/9781801077262/2"&gt;Python Object-Oriented Programming: Build robust
and maintainable object-oriented Python applications and libraries, 4th
Edition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All reviews are helpful, even ones that are critical. We're constantly
striving to improve this content. Also, we're aware we can't please
everyone. I like reviews with clearly-stated points. The one-star review
had three important points.&lt;/p&gt;
&lt;p&gt;First. &amp;quot;There are enough typed and strongly typed languages in the
world&amp;quot;. I don't think this is something I can address in a book about
Python. &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt; dates
from 2014. Back then, this opinion may have been more influential. As it
is, the comment is perhaps too late to be useful. The annotations are a
feature of the language, and it seems important to include them in a
book about the language.&lt;/p&gt;
&lt;p&gt;Perhaps, the criticism isn't about the Python language. Perhaps this is
really a criticism of presenting type annotations as a central part of
the book. The comment seems to be about the language more than the
book.&lt;/p&gt;
&lt;p&gt;Second. &amp;quot;...the k-NN example seems too incongruous...&amp;quot; and &amp;quot;... it was
more of an hindrance...&amp;quot; This is interesting. The book covers the k-NN
algorithm from a variety of perspectives. The intent was to provide
multiple partial solutions, each illustrating only techniques shown in a
given chapter. I can see how this might be confusing, and perhaps the
examples need to be refactored to reduce overlap between them.&lt;/p&gt;
&lt;p&gt;Or. Perhaps k-NN is too simple. Or. It might be that k-NN is already
solved in a number of packages like scikit learn. It seemed like a
algorithm with a moderate level of complexity and direct application to
analytics and data science.&lt;/p&gt;
&lt;p&gt;Third, &amp;quot;The English is not always good ... the book could have done with
a bit more proofreading.&amp;quot; I'd love some concrete examples. I suspect the
problem is my Americanisms have caused problems for non-American
readers. Perhaps I didn't try hard enough to match Dusty's
conversational tone in the 3rd edition. Examples would help to point out
where language problems were introduced.&lt;/p&gt;
&lt;p&gt;The three-star review had a misleading statement, &amp;quot;This edition also
uses non-standard python syntax on definitions functions etc&amp;quot;. The type
hints have been part of the language since PEP 484, and it seems
inappropriate to describe them as non-standard.&lt;/p&gt;
</content><category term="Technologies"></category><category term="python"></category><category term="writing"></category></entry><entry><title>Processing Apple Numbers Files</title><link href="https://slott56.github.io/2021_12_01-processing_apple_numbers_files.html" rel="alternate"></link><published>2021-12-01T07:00:00-05:00</published><updated>2021-12-01T07:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-12-01:/2021_12_01-processing_apple_numbers_files.html</id><summary type="html">&lt;p&gt;Apple's freebie tools -- Pages, Numbers, Keynote, Garage Band, etc. --
are wonderful things. I really like Numbers. I'm tolerant of Pages. I've
used Pages to write books and publish them to the Apple Bookstore.
(Shameless Plug: &lt;a class="reference external" href="https://books.apple.com/us/book/id1586977675"&gt;Pivot to
Python&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;These tools have a significant problem. Protobuf.&lt;/p&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some History&lt;/h2&gt;
&lt;p&gt;Once upon a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Apple's freebie tools -- Pages, Numbers, Keynote, Garage Band, etc. --
are wonderful things. I really like Numbers. I'm tolerant of Pages. I've
used Pages to write books and publish them to the Apple Bookstore.
(Shameless Plug: &lt;a class="reference external" href="https://books.apple.com/us/book/id1586977675"&gt;Pivot to
Python&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;These tools have a significant problem. Protobuf.&lt;/p&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some History&lt;/h2&gt;
&lt;p&gt;Once upon a time, Numbers used an XML-based format. This was back in
'09, I think. At some point, version 10 of Numbers (2013?) switched to
Protobuf.&lt;/p&gt;
&lt;p&gt;I had already unwound XLSX and ODS files, which are XML. I had also
unwound Numbers '09 in XML. I had a sense of what a spreadsheet needed
to look like.&lt;/p&gt;
&lt;p&gt;The switch to Protobuf also meant using Snappy compression. Back in
2014? I worked out my own version of the Snappy decompression algorithm
in pure Python. I think I knew about
&lt;a class="reference external" href="https://github.com/andrix/python-snappy"&gt;python-snappy&lt;/a&gt; but didn't
want the complex binary dependency. I wrote my own instead.&lt;/p&gt;
&lt;p&gt;I found the
&lt;a class="reference external" href="https://github.com/obriensp/iWorkFileFormat"&gt;iWorkFileFormat&lt;/a&gt;
project. From this, and a lot of prior knowledge about the XML formats,
I worked out a way to unpack the protobuf bytes into Python objects. I
didn't leverage the formal protobuf definitions; instead I lazily mapped
the objects to a dictionary of keys and bytes. If a field had a complex
internal structure, I parsed the subset of bytes.&lt;/p&gt;
&lt;p&gt;(I vaguely recall the Protobuf definitions are in XCode somewhere. But.
I didn't want to write a protobuf compiler to make a pure-Python
implementation. See the
&lt;a class="reference external" href="https://github.com/eigenein/protobuf"&gt;protobuf&lt;/a&gt; project for what I
was looking for, but didn't have at the time.)&lt;/p&gt;
&lt;p&gt;Which brings us to today's discovery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="state-of-the-art"&gt;
&lt;h2&gt;State of the Art&lt;/h2&gt;
&lt;p&gt;Someone has taken the steps necessary to properly unpack Numbers files.
See &lt;a class="reference external" href="https://github.com/masaccio/numbers-parser"&gt;numbers-parser&lt;/a&gt;.
This has first-class snappy and protobuf processing. It installs
cleanly. It has an issue, and I may try to work on it.&lt;/p&gt;
&lt;p&gt;I'm rewriting my own Stingray Reader with intent to dispose of my own
XLSX, ODS, and Numbers processing. These can (and should) be imported
separately. It's a huge simplification to stand on the shoulders of
giants and write a dumb &lt;strong&gt;Facade&lt;/strong&gt; over their work.&lt;/p&gt;
&lt;p&gt;Ideally, all the various spreadsheet parsing folks would adopt some kind
of standard API. This could be analogous to the database API used by SQL
processing in Python. The folks with &lt;a class="reference external" href="https://www.excelpython.org"&gt;https://www.excelpython.org&lt;/a&gt;
or &lt;a class="reference external" href="http://www.python-excel.org"&gt;http://www.python-excel.org&lt;/a&gt; might be a place to start, since they
list a number of packages.&lt;/p&gt;
&lt;p&gt;The bonus part? Seeing my name in the &lt;a class="reference external" href="https://github.com/masaccio/numbers-parser#credits"&gt;Credits for
numbers-parser&lt;/a&gt;.
That was delightful.&lt;/p&gt;
&lt;p&gt;At some point, I need to make a coherent pitch for a common API with
permits external JSON Schema as part of extracting data from
spreadsheets.&lt;/p&gt;
&lt;p&gt;First. I need to get Stingray Reader into a more final form.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="#python"></category><category term="workbook"></category><category term="spreadsheet"></category><category term="jsonschema"></category></entry><entry><title>Reading Spreadsheets with Stingray Reader and Type Hinting</title><link href="https://slott56.github.io/2021_11_16-reading_spreadsheets_with_stingray_reader_and_type_hinting.html" rel="alternate"></link><published>2021-11-16T08:00:00-05:00</published><updated>2021-11-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-11-16:/2021_11_16-reading_spreadsheets_with_stingray_reader_and_type_hinting.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html"&gt;Spreadsheets, COBOL, and schema-driven file
processing&lt;/a&gt;,
etc. for some history on this project.&lt;/p&gt;
&lt;p&gt;Also, see
&lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray-Reader&lt;/a&gt; for the
current state of this effort.&lt;/p&gt;
&lt;p&gt;(This started almost 20 years ago, I've been refining and revising a
lot.)&lt;/p&gt;
&lt;div class="section" id="big-lesson-up-front"&gt;
&lt;h2&gt;Big Lesson Up Front&lt;/h2&gt;
&lt;p&gt;Python is very purely driven by the idea that …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html"&gt;Spreadsheets, COBOL, and schema-driven file
processing&lt;/a&gt;,
etc. for some history on this project.&lt;/p&gt;
&lt;p&gt;Also, see
&lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray-Reader&lt;/a&gt; for the
current state of this effort.&lt;/p&gt;
&lt;p&gt;(This started almost 20 years ago, I've been refining and revising a
lot.)&lt;/p&gt;
&lt;div class="section" id="big-lesson-up-front"&gt;
&lt;h2&gt;Big Lesson Up Front&lt;/h2&gt;
&lt;p&gt;Python is very purely driven by the idea that everything you write is
generic with respect to type. Adding type hints narrows the type domain,
removing the concept of &amp;quot;generic&amp;quot;.&lt;/p&gt;
&lt;p&gt;Generally, this is good.&lt;/p&gt;
&lt;p&gt;But not universally.&lt;/p&gt;
&lt;p&gt;Duck Typing -- and Python's generic approach to types -- is made visible
via Protocols and Generics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-ugly-type-hinting-problem"&gt;
&lt;h2&gt;An Ugly Type Hinting Problem&lt;/h2&gt;
&lt;p&gt;One type hint complication arises when writing code that really is
generic. Decorators are a canonical example of functions that are
generic with respect to the function being decorated. This, then, leads
to kind of complicated-looking type hints.&lt;/p&gt;
&lt;p&gt;See the mypy page on &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/generics.html?highlight=typevar#declaring-decorators"&gt;declaring
decorators&lt;/a&gt;.
The use of a &lt;tt class="docutils literal"&gt;TypeVar&lt;/tt&gt; to show that how a decorator's argument type
matches the the return type is big help. Not all decorators follow the
simple pattern, but many do.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import TypeVar
F = TypeVar('F', bound=Callable[..., Any])
def myDecorator(function: F) -&amp;gt; F:
    etc.
&lt;/pre&gt;
&lt;p&gt;The Stingray Reader problem is that a number of abstractions are generic
with respect to an underlying instance object.&lt;/p&gt;
&lt;p&gt;If we're working with CSV files, the instance is a &lt;tt class="docutils literal"&gt;tuple[str]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If we're working with ND JSON objects, the instance is some JSON type.&lt;/p&gt;
&lt;p&gt;If we're working with some Workbook (e.g., via xlrd, openpyxl, or
pyexcel) then, the instance is defined by one of these external
libraries.&lt;/p&gt;
&lt;p&gt;If we're working with COBOL files, then the instances may be str or may
be bytes. The &lt;tt class="docutils literal"&gt;typing.AnyStr&lt;/tt&gt; type provides a useful generic
definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="traditional-oo-design-is-the-problem"&gt;
&lt;h2&gt;Traditional OO Design Is The Problem&lt;/h2&gt;
&lt;p&gt;Once upon a time, in the dark days, we had exactly one design choice:
inheritance.&lt;/p&gt;
&lt;p&gt;Actually, we had two, but so many writers get focused on &amp;quot;explaining&amp;quot; OO
programming, that they tend to gloss over composition. The focus on the
sort-of novel concept of inheritance.&lt;/p&gt;
&lt;p&gt;And this leads to folks arguing that inheritance shouldn't be thought of
as central. Which is a kind of moot argument over what we're doing when
we're writing about OO design. We have to cover both. Inheritance has
more drama, so it becomes a bit more visible than composition. Indeed,
inheritance creates a number of design constraints, and that's where the
drama surfaces.&lt;/p&gt;
&lt;p&gt;Any discussion of design patterns tends to be more balanced. Many
patterns -- like &lt;strong&gt;Strategy&lt;/strong&gt; and &lt;strong&gt;State&lt;/strong&gt; -- are compositional
patterns. Inheritance actually plays a relatively minor role until you
reach interesting boundary cases.&lt;/p&gt;
&lt;p&gt;Specifically.&lt;/p&gt;
&lt;p&gt;What do you do when you have a &lt;strong&gt;Strategy&lt;/strong&gt; class hierarchy and ONE of
those strategies has an unique type hint for a parameter? Most of the
classes use one type. One unique subclass needs a distinct type. For
example, this outlier among the &lt;strong&gt;Strategy&lt;/strong&gt; alternatives uses a str
parameter instead of float.&lt;/p&gt;
&lt;p&gt;Do you push that type distinction up to the top of the hierarchy? Maybe
define it as &lt;tt class="docutils literal"&gt;edge_case: Optional[Union[str, float]] = None&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;You can't simply change the parameter's value in one subclass with
impunity. mypy will catch you at this, and tell you you have Liskov
Substitution problems.&lt;/p&gt;
&lt;p&gt;Traditionally, we would often take this to mean that we have a larger
problem here. We have a leaky abstraction. Some implementation details
are surfacing in a bad way and we need more abstract classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-a-protocol-duck-typing"&gt;
&lt;h2&gt;It's A Protocol (&amp;quot;Duck Typing&amp;quot;)&lt;/h2&gt;
&lt;p&gt;When I started rewriting Stingray Reader, I started with a fair number
of abstract classes. These classes were supposed to have widely varying
implementations, but common semantics.&lt;/p&gt;
&lt;p&gt;Applying a schema definition to a CSV file means that data values can be
converted from strings to something more useful,&lt;/p&gt;
&lt;p&gt;Applying a schema to a JSON file means doing a validation pass to be
sure the loaded object meets the schema's expectations.&lt;/p&gt;
&lt;p&gt;Applying a schema to a Workbook file is a kind of hybrid between CSV
processing and JSON processing. The workbook's values will have been
unpacked by the interface module. Each row will look like a
&lt;tt class="docutils literal"&gt;list[Any]&lt;/tt&gt; that can be subject to JSON schema validation.&lt;/p&gt;
&lt;p&gt;Apply a schema to COBOL means using the schema details to figure out how
to unpack the bytes. This is suddenly a lot more complex than the other
cases.&lt;/p&gt;
&lt;p&gt;The concepts of inheritance and composition aren't really applicable.&lt;/p&gt;
&lt;p&gt;This is something even more open-ended. It's a protocol.&lt;/p&gt;
&lt;p&gt;We want a common interface and common semantics. But. We're not really
going to leverage any common code.&lt;/p&gt;
&lt;p&gt;This unwinds a lot abstract superclasses, replacing them with
&lt;tt class="docutils literal"&gt;Protocol&lt;/tt&gt; class definitions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Workbook(abc.ABC):
    &amp;#64;abc.abstractmethod
    def sheet(self, name: str, schema: Schema) -&amp;gt; Sheet:
        ...
    def row_iter(self) -&amp;gt; Iterator[list[Union[str, bytes, int, float, etc.]]]:
        ...
&lt;/pre&gt;
&lt;p&gt;The above is not universally useful. Liskov Substitution has to apply.
In some cases, we don't have a tidy set of relationships. Here's the
alternative&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Workbook(Protocol):
    def sheet(self, name: str, schema: Schema) -&amp;gt; Sheet:
        ...
    def row_iter(self) -&amp;gt; Iterator[list[Any]]:
        ...
&lt;/pre&gt;
&lt;p&gt;This gives us the ability to define classes that adhere to the Workbook
Protocol but don't have a simple, strict subclass-superclass-Liskov
substitution relationship.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-a-generic-protocol"&gt;
&lt;h2&gt;It's A Generic Protocol&lt;/h2&gt;
&lt;p&gt;It turns out, this isn't quite right. What's really required is a
&lt;tt class="docutils literal"&gt;Generic[Type]&lt;/tt&gt;, not the simple &lt;tt class="docutils literal"&gt;Protocol&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Workbook(Generic[Instance]):
    def sheet(self, name: str, schema: Schema) -&amp;gt; Sheet:
        ...
    def row_iter(self) -&amp;gt; Iterator[list[Instance]]:
        ...
&lt;/pre&gt;
&lt;p&gt;This lets us create Workbook variants that are highly type-specific, but
not narrowly constrained by inheritance rules.&lt;/p&gt;
&lt;p&gt;This type hinting technique describes Python code that really is generic
with respect to implementation type details. It allows a single Facade
to contain a number of implementations.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="protocols"></category><category term="annotations"></category><category term="type hints"></category></entry><entry><title>Welcome to Python: Some hints for ways to explain how truly bad the language is</title><link href="https://slott56.github.io/2021_11_02-welcome_to_python_some_hints_for_ways_to_explain_how_truly_bad_the_language_is.html" rel="alternate"></link><published>2021-11-02T14:55:00-04:00</published><updated>2021-11-02T14:55:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-11-02:/2021_11_02-welcome_to_python_some_hints_for_ways_to_explain_how_truly_bad_the_language_is.html</id><summary type="html">&lt;p&gt;As an author with many books on Python, I'm captivated by people's hot
takes on why Python is so epically bad. Really Bad. Uselessly Bad.
Profoundly Broken. etc.&lt;/p&gt;
&lt;p&gt;I'll provide some hints on topics that get repeated a lot. If you really
need to write a blog post about how …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As an author with many books on Python, I'm captivated by people's hot
takes on why Python is so epically bad. Really Bad. Uselessly Bad.
Profoundly Broken. etc.&lt;/p&gt;
&lt;p&gt;I'll provide some hints on topics that get repeated a lot. If you really
need to write a blog post about how bad Python is, please try to take a
unique approach on any of these common complaints.  If you have a blog
post half-written, skip to the &lt;strong&gt;tl;dr&lt;/strong&gt; section to see if your ideas
are truly unique.&lt;/p&gt;
&lt;div class="section" id="whitespace"&gt;
&lt;h2&gt;Whitespace&lt;/h2&gt;
&lt;p&gt;Please don't waste time complaining about having to use whitespace in
your code. I'm sure it's a burden on your soul to configure your editor
to indent in groups of four spaces. I'm sorry it's so painful. But.
Python isn't the only language with whitespace.&lt;/p&gt;
&lt;p&gt;The shell scripting language has semantic whitespace. (It's not used for
indentation, but please try &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;cat$HOME/.bashrc&lt;/span&gt;&lt;/tt&gt; (without any spaces)
and tell me what happens. Spaces matter in a lot of languages.&lt;/p&gt;
&lt;p&gt;Even in C, some whitespace is semantic. The rest of the whitespace is
for humans to read your code.&lt;/p&gt;
&lt;p&gt;If you're *sure* that indentation is a fatal problem, please provide
an example in the language of your choice where the &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;'s or the&lt;/p&gt;
&lt;p&gt;case/esac&lt;/p&gt;
&lt;p&gt;was *required* because ordinary, readable indentation didn't --
somehow -- express the nesting.&lt;/p&gt;
&lt;p&gt;The example can be the basis for a Python Enhancement Proposal (PEP) to
fix the whitespace problem you've identified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-self-instance-variable"&gt;
&lt;h2&gt;The &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; Instance Variable&lt;/h2&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; everywhere is simpler than using &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; in those
obscure special cases where it's ambiguous. Python developers are sure
that being uniformly explicit is a terrible burden on your soul. If you
really feel that obscure special cases are required, consider writing a
pre-processor to sort out the special cases for us.&lt;/p&gt;
&lt;p&gt;I'm sure there's a way to inject another level of name resolution into
the local v. global choices. Maybe local-self-global or
self-local-global could be introduced.&lt;/p&gt;
&lt;p&gt;Please include examples. From this a Python Enhancement Proposal can be
drafted to clarify what the improvement is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-formal-constants"&gt;
&lt;h2&gt;No Formal Constants&lt;/h2&gt;
&lt;p&gt;Python doesn't waste too much time on keywords, like &lt;tt class="docutils literal"&gt;const&lt;/tt&gt;, to alter
the behavior of assignment. Instead, we tend to rely on tools to check
our code.&lt;/p&gt;
&lt;p&gt;Other languages have compilers to look for assignment to consts. Python
has tools like flake8, pyflakes, pylint, and others, to look for this
kind of thing. Conventionally, variables at the module level with
ALL_CAPS names are likely to be constants. Multiple assignment
statements would be a problem. Got it.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why can't the language check?&amp;quot; you ask. Python doesn't normally have a
separate compile pass to pre-check the code. But. As I said above, you
can use tools to create a pre-checking pass. That's what most of us do.&lt;/p&gt;
&lt;p&gt;&amp;quot;But what if someone accidentally overwrites a constant?&amp;quot; you insist.
Many folks would suggest some better documentation to explain the
consequences an clarify how unit tests will fail when this happens.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why should I write unit tests to be sure a constant wasn't changed?&amp;quot;
you demand. I'm not really insisting on it. But you said you had
developers who would &amp;quot;accidentally&amp;quot; overwrite a constant in an
assignment statement, and you couldn't use tools like pylint to check
for it. So. I suggested another choice. If you don't like that, use
enums. Or write documentation and explain which global items can be
changed and which can't be changed.&lt;/p&gt;
&lt;p&gt;BTW. If you have global variables that are NOT constants, consider this
a code smell.&lt;/p&gt;
&lt;p&gt;If you really need a mixture of constants and variables as module
globals, you can use the &lt;tt class="docutils literal"&gt;enum&lt;/tt&gt; module to create named attribute
values of a class definition. You get constants and a namespace. It's
pretty sweet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lack-of-privacy"&gt;
&lt;h2&gt;Lack of Privacy&lt;/h2&gt;
&lt;p&gt;It appears to be an article of faith that a &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword is
&lt;em&gt;unconditionally&lt;/em&gt; required.&lt;/p&gt;
&lt;p&gt;Looking at the history of OO languages, it looks like &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; seems
to have been introduced with C++. Not every OO language has the same
notion of private the C++ has. CLU has no concept of private. Smalltalk
considers instance variables equivalent to C++ &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt;, not
&lt;tt class="docutils literal"&gt;private&lt;/tt&gt;. Eiffel has a particularly sophisticated feature exportation
that doesn't involve a trivial private/public distinction.&lt;/p&gt;
&lt;p&gt;Since many languages that aren't C++ or Java have a variety of
approaches, it appears private isn't required. The next question, then,
is it necessary?&lt;/p&gt;
&lt;p&gt;It really helps to have a concrete example of a place where a private
method or attribute was absolutely essential. And it helps to do this in
a way that a leading _ on the variable name -- every time it's used --
is &lt;strong&gt;more&lt;/strong&gt; confusing than a keyword like private somewhere else in the
code.&lt;/p&gt;
&lt;p&gt;It also helps when the example does not involve a hypothetical Idiot
Developer who (a) doesn't read the documentation and (b) doesn't
understand the &lt;tt class="docutils literal"&gt;_leading_underscore&lt;/tt&gt; variable, and can still manage to
use the class. It's not that this developer doesn't exist; it's
questionable whether or not a complex language feature is better than a
little time spent on a code review.&lt;/p&gt;
&lt;p&gt;It helps when the example does not include the mysterious Evil Genius
Developer who (a) reads the documentation, and (b) leverages
the &lt;tt class="docutils literal"&gt;_leading_underscore&lt;/tt&gt; variable to format one of the OS disks or
something. This is far-fetched because the Evil Genius Developer had
access to the Python source, and didn't need a sophisticated subclassing
subterfuge. They could simply edit the code to remove the magical
privacy features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-declarations"&gt;
&lt;h2&gt;No Declarations&lt;/h2&gt;
&lt;p&gt;Python is not the only language where variables don't have type
declarations. In some languages, there are implied types associated with
certain kinds of names. In other languages, there are naming conventions
to help a reader understand what's going on.&lt;/p&gt;
&lt;p&gt;It's an article of faith that variable declarations are essential. C
programmers will insist that a &lt;tt class="docutils literal"&gt;void *&lt;/tt&gt; pointer is still helpful even
though the thing to which it points is left specifically undeclared.&lt;/p&gt;
&lt;p&gt;C (and C++) let you cast a pointer to -- well -- anything. With
resulting spectacular run-time crashes. Java has some limitations on
casting. Python doesn't have casting. An object is a member of a class
and that's the end of that. There's no wiggle-room to push it up or down
the class hierarchy.&lt;/p&gt;
&lt;p&gt;Since Python isn't the only language without variable declarations, it
raises the question: are they necessary?&lt;/p&gt;
&lt;p&gt;It really helps to have a concrete example of a place where a variable
declaration was absolutely essential for preventing some kind of
behavior that could not be prevented with a pylint check or a unit test.
While I think it's impossible to find a situation that's untestable and
can only be detected by careful scrutiny of the source, I welcome the
counter-example that proves me wrong.&lt;/p&gt;
&lt;p&gt;And. Please avoid this example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for data in some_list_of_int:
    if data == 42:
        print(&amp;quot;data is int&amp;quot;)
for data in some_list_of_str:
    if data == &amp;quot;bletch&amp;quot;:
        print(&amp;quot;data is str&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This requires reusing a variable name. Not really a good look for code.
If you have an example where there's a problem that's not fixed by
better variable names, I'm looking forward to it.&lt;/p&gt;
&lt;p&gt;This will change the world of Python type annotations. It will become an
epic PEP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="murky-call-by-value-semantics"&gt;
&lt;h2&gt;Murky Call-By-Value Semantics&lt;/h2&gt;
&lt;p&gt;Python doesn't have primitive types. There are no call-by-value
semantics. It's not that the semantics are confusing: they don't exist.
Everything is a reference. It seems simpler to avoid the special case of
a few classes of objects that don't have classes.&lt;/p&gt;
&lt;p&gt;The complex special cases surrounding unique semantics for bytes or ints
or strings or something requires an example. Since this likely involves
a lot of hand-waving about performance (e.g., primitive types are faster
for certain things) then benchmarking is also required. Sorry to make
you do all that work, but the layer of complexity requires some
justification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-compiler-or-all-errors-are-runtime-errors"&gt;
&lt;h2&gt;No Compiler (or All Errors are Runtime Errors)&lt;/h2&gt;
&lt;p&gt;This isn't completely true. Even without a &amp;quot;compiler&amp;quot; there are a lot of
ways to check for errors prior to runtime. Tools like flake8, pyflakes,
pylint, and mypy can check code for a number of common problems. Unit
tests are another common way to look for problems.&lt;/p&gt;
&lt;p&gt;Code that passes a unit test suite and crashes at runtime doesn't seem
to be a language problem. It seems to be a unit testing problem.&lt;/p&gt;
&lt;p&gt;&amp;quot;I prefer the compiler/IDE/something else find my errors,&amp;quot; you say.
Think of pylint as the compiler. Many Python IDE's actually do some
static analysis. If you think unit tests aren't appropriate for finding
and preventing problems, perhaps programming isn't your calling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;You may have some unique insight. If you do, please share that.&lt;/p&gt;
&lt;p&gt;If on the other hand, you're writing about these topics, please realize
that Python has been around for over 30 years. These topics are not new.
For the following, please try to provide something unique:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Whitespace&lt;/li&gt;
&lt;li&gt;The self Instance Variable&lt;/li&gt;
&lt;li&gt;No Formal Constants&lt;/li&gt;
&lt;li&gt;Lack of Privacy&lt;/li&gt;
&lt;li&gt;No Declarations&lt;/li&gt;
&lt;li&gt;Murky Call-By-Value Semantics&lt;/li&gt;
&lt;li&gt;No Compiler (or All Errors Are Run-Time Errors)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It helps to provide a distinctive spin on these problems. It helps even
more when you provide a concrete example. It really helps to write up a
Python Enhancement Proposal. Otherwise, we can seem dismissive of Yet
Another Repetitive Rant On Whitespace (YARROW).&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-used-to-whine-about-the-lack-of-case-switch-stat"&gt;
&lt;h2&gt;I used to whine about the lack of case/switch stat...&lt;/h2&gt;
&lt;p&gt;Jim Collins&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-11-17 13:22:29.382000-05:00&lt;/p&gt;
&lt;p&gt;I used to whine about the lack of case/switch statements until a) people
showed me how to work around it and b) it got fixed in 3.10.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="PEP"></category></entry><entry><title>Legacy Software is a Sticky Mess</title><link href="https://slott56.github.io/2021_10_12-legacy_software_is_a_sticky_mess.html" rel="alternate"></link><published>2021-10-12T08:00:00-04:00</published><updated>2021-10-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-10-12:/2021_10_12-legacy_software_is_a_sticky_mess.html</id><summary type="html">&lt;p&gt;I'll get to legacy software. First, however, some backstory on
observability.&lt;/p&gt;
&lt;p&gt;Sailors will sometimes create &amp;quot;Float Plans&amp;quot;. Like aircraft flight plans,
they have an itinerary to make it slightly easier to find us when
something goes wrong. Unlike airspace, which is tightly controlled by
the FAA, the seas are more-or-less …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'll get to legacy software. First, however, some backstory on
observability.&lt;/p&gt;
&lt;p&gt;Sailors will sometimes create &amp;quot;Float Plans&amp;quot;. Like aircraft flight plans,
they have an itinerary to make it slightly easier to find us when
something goes wrong. Unlike airspace, which is tightly controlled by
the FAA, the seas are more-or-less chaos.&lt;/p&gt;
&lt;p&gt;The practice then, is to create float plan and give it to a trusted
shore-side party, go out sailing, check in periodically, and cancel the
whole thing when you're done sailing. If you miss a check-in, they can
call an appropriate Search-And-Rescue agency like the US Coast Guard or
BASRA or local cops with jurisdiction over a lake or river.&lt;/p&gt;
&lt;p&gt;How much detail should be in this plan? For a long or complex trip, it
doesn't seem sensible to say &amp;quot;Going to the Bahamas&amp;quot; as your float plan.
That's a little thin on details. The bare minimum is to provide an
Estimated Time of Arrival (ETA). But. When you summarize 36 hours of
sailing to a single ETA, you invite observability problems. It's a
sailboat, and you could be becalmed. Things are fine, you're just going
to be late.&lt;/p&gt;
&lt;p&gt;Late, of course is relative. Simply late means you missed your ETA. If
you're becalmed to the point where you're running low on supplies, then,
this can become a bit of a problem.&lt;/p&gt;
&lt;p&gt;The general policy followed by SAR is to allow several hours past the
ETA before activating SAR resources. (The US Coast announces overdue
mariners on the VHF radio so others can keep a lookout for them and
render assistance.)&lt;/p&gt;
&lt;p&gt;If you have a one-checkin-plan that summarizes 36 hours of sailing with
a single ETA, you're going to be waiting for many hours after the ETA
for help. So. Total systems failure after the first hour means 35 hours
of drifting before someone will even alert SAR folks. And then the SAR
folks will wait several hours after the ETA in case you're only slow.&lt;/p&gt;
&lt;p&gt;What seems better is to have a sequence of waypoints with ETA's at each
waypoint. That way you have incremental evidence of success or failure,
and you're not waiting a LOOOONG time for your one-and-only ETA to pass
without a check-in.&lt;/p&gt;
&lt;p&gt;This leads us to software. And legacy software.&lt;/p&gt;
&lt;div class="section" id="creating-the-plan"&gt;
&lt;h2&gt;Creating the Plan&lt;/h2&gt;
&lt;p&gt;To create a sensible plan, you have waypoints as Latitude, Longitude
pairs. These are angles on a sphere, not distances on a plane, so
computing the length of a leg isn't a simple hypotenuse.&lt;/p&gt;
&lt;p&gt;It is a lot like a hypotenuse. For short distances, we can assume the
earth is more-or-less flat. We can then use a relatively simple
conversion (cosine of the latitude) to compress the longitudes toward
the poles. We can convert lat and lon to distances and use a hypotenuse
and get a really close answer.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def range_bearing(p1: LatLon, p2: LatLon, R: float = NM) -&amp;gt; tuple[float, Angle]:
    &amp;quot;&amp;quot;&amp;quot;Rhumb-line course from :py:data:`p1` to :py:data:`p2`.

    See :ref:`calc.range_bearing`.
    This is the equirectangular approximation.
    Without even the minimal corrections for non-spherical Earth.

    :param p1: a :py:class:`LatLon` starting point
    :param p2: a :py:class:`LatLon` ending point
    :param R: radius of the earth in appropriate units;
        default is nautical miles.
        Values include :py:data:`KM` for kilometers,
        :py:data:`MI` for statute miles and :py:data:`NM` for nautical miles.
    :returns: 2-tuple of range and bearing from p1 to p2.

    &amp;quot;&amp;quot;&amp;quot;
    d_NS = R * (p2.lat.radians - p1.lat.radians)
    d_EW = (
        R
        * math.cos((p2.lat.radians + p1.lat.radians) / 2)
        * (p2.lon.radians - p1.lon.radians)
    )
    d = math.hypot(d_NS, d_EW)
    tc = math.atan2(d_EW, d_NS) % (2 * math.pi)
    theta = Angle(tc)
    return d, theta
&lt;/pre&gt;
&lt;p&gt;This means we can't trivially write down a list of waypoints. We need to
do some fancy math to compute distances.&lt;/p&gt;
&lt;p&gt;For years and years. (Since our first &amp;quot;big&amp;quot; trip in 2007.) I've used
spreadsheets in various forms to work out the waypoints, distances,
estimated time enroute (ETE) and ETA.&lt;/p&gt;
&lt;p&gt;The math isn't too far beyond what a spreadsheet can do. But. There's a
complication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="complications"&gt;
&lt;h2&gt;Complications&lt;/h2&gt;
&lt;p&gt;File formats are a complication.&lt;/p&gt;
&lt;p&gt;There are KML files, GPX files, and CSV files that are used by various
pieces of software. This is only the tip of the iceberg, because some of
Navionics devices have an even more interesting USR file that contains
everything in your chartplotter. It's cool. But complicated.&lt;/p&gt;
&lt;p&gt;The file formats are -- clearly -- way outside the box for a
spreadsheet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-to-the-rescue"&gt;
&lt;h2&gt;Python to the rescue.&lt;/h2&gt;
&lt;p&gt;Since I'm a Python hack (and have been since well before 2007) I've got
all kinds of file conversion tools.
See &lt;a class="reference external" href="https://github.com/slott56/navtools"&gt;https://github.com/slott56/navtools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;And here's where legacy enters the picture. (Music Cue.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Fear that rattles in men's ears&lt;/div&gt;
&lt;div class="line"&gt;And rears its hideous head&lt;/div&gt;
&lt;div class="line"&gt;Dread ... Death ... in the wind ...&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spreadsheets.&lt;/p&gt;
&lt;p&gt;Up until yesterday, the final planning tool was a spreadsheet with
waypoints and times. Mac OS X Numbers is GREAT for this. I can pile in
boat information, crew information, safety information, the itinerary,
and SAR contact details in one spreadsheet, save it as a PDF, and email
it to my shore-side contacts.&lt;/p&gt;
&lt;p&gt;The BEST part of this was tinkering with the departure time while we
waited for weather. We could plug in the day we're leaving, get revised
ETA's for the waypoints, push the document, and take off.&lt;/p&gt;
&lt;p&gt;(We use an old &lt;a class="reference external" href="https://www.findmespot.com/en-us/"&gt;Spot Navigator&lt;/a&gt; to
provide notifications at midnight to show progress. We're going to
upgrade to a SpotX so we can send messages a little more flexibly.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-legacy-spreadsheet"&gt;
&lt;h2&gt;The Legacy Spreadsheet&lt;/h2&gt;
&lt;p&gt;The legacy spreadsheet has a lot of good UX features. It's really
adequate for some user stories. Save as PDF rocks.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;For the more advanced route planning, it isn't ideal. Specifically,
spreadsheets can be weak on multiple &amp;quot;what-if&amp;quot; scenarios.&lt;/p&gt;
&lt;p&gt;The genesis of spreadsheets (I'm old, I was there, I remember VisiCalc)
was &amp;quot;what-if&amp;quot; analysis. Change an assumption and follow the consequences
through the lattice of dependent cells. These are hard to save. You can
&amp;quot;Save As&amp;quot; to make a copy of the spreadsheet. You can save pages within a
single spreadsheet. These are terrible because you can't really make a
more fundamental change very easily. You have to make the same change to
all the copies in your pile of &amp;quot;what-if&amp;quot; alternatives.&lt;/p&gt;
&lt;p&gt;To be very specific. I often need to plan for different boat speeds. We
have a sailboat; wind and water matter a lot. Slow is about 5 knots.
Fast is about 6 knots. Our theoretical top speed is 8 knots, but we've
rarely seen that without a river flowing along with us. Sailing at that
speed means a lot of sail wrestling, something we'd rather not do.&lt;/p&gt;
&lt;p&gt;Fine. That's 3 scenarios, one for each speed: 5, 5.5, and 6. No big
deal.&lt;/p&gt;
&lt;p&gt;Until we add a waypoint. Or move a waypoint. Now we have to reset all
three spreadsheets with a different itinerary. Since it's a different
number of rows, we have the usual copy-and-paste problems in
spreadsheets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-better"&gt;
&lt;h2&gt;What's Better?&lt;/h2&gt;
&lt;p&gt;Jupyter notebooks crush the life out of spreadsheets.&lt;/p&gt;
&lt;p&gt;Here's the revised workflow.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create the route. Use tools like OpenCPN so the route can be exported
as a GPX or CSV file.&lt;/li&gt;
&lt;li&gt;Use a notebook to parse the route file, creating an internal Route
object.&lt;/li&gt;
&lt;li&gt;Manipulate the Route object, providing different ETA's and speed
assumptions. These assumptions lead to multiple cells in the
notebook. They can all share details so that one fundamental change
leads to lots and lots of recomputation of itineraries. We can
include all kinds of headings and markdown notes and thoughts and
considerations.&lt;/li&gt;
&lt;li&gt;Finalize a route that's part of the plan. Still working in the
confines of a longish notebook.&lt;/li&gt;
&lt;li&gt;Emit a Markdown file with Vessel Identification, Itinerary, Notes,
and SAR Contact sections. Run &lt;a class="reference external" href="https://pandoc.org"&gt;pandoc&lt;/a&gt; to make
a PDF. (This is the foundation for the nbconvert utility.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This workflow creates two categories results:&lt;/p&gt;
&lt;p&gt;One result is a Notebook with all of the planning details and thoughts
and contingencies and considerations.&lt;/p&gt;
&lt;p&gt;The other result(s) are float plan documents as PDF's that can be shared
widely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-did-this-take-so-long"&gt;
&lt;h2&gt;Why did this take so long?&lt;/h2&gt;
&lt;p&gt;I used spreadsheets from 2007 to 2021. Why switch now? Some reasons.&lt;/p&gt;
&lt;p&gt;Legacy solutions are sticky. This has a lot of consequences. I built up
&amp;quot;expertise&amp;quot; in making the legacy work. I had become an &amp;quot;expert&amp;quot; in
working around the hinky little problems with multiple what-if scenarios
and propagating changes from the route into the what-ifs. For example, I
limited the number of what-if scenarios I would consider because more
than two got confusing.&lt;/p&gt;
&lt;p&gt;New solutions are sometimes invisible. I only learned about Jupyter
Notebooks about three years ago. I did not realize how powerful they
were. I've since rearranged my thinking.&lt;/p&gt;
&lt;p&gt;I've known about RST and Markdown and Pandoc for years. But. Getting
from spreadsheet-like flexibility to a Markdown document was never a
clear step. Without something like Jupyter Lab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pulling-it-all-together"&gt;
&lt;h2&gt;Pulling it all together&lt;/h2&gt;
&lt;p&gt;Does it require some kind of catalyst to force change?&lt;/p&gt;
&lt;p&gt;Is it a slow accretion of evidence that the legacy software isn't
working?&lt;/p&gt;
&lt;p&gt;I'm pretty sure I had a long, slow Aha! moment as I realized that the
Numbers spreadsheet was a large pain in the ass and a notebook would be
simpler. It took a few days of fiddling to become really, really sure
Numbers was not working out.&lt;/p&gt;
&lt;p&gt;I think one of the biggest issues was a third &amp;quot;what-if&amp;quot; scenario. It was
helpful to visualize arrival times. But. It was a huge pain in the neck
to fiddle with the spreadsheets to get the right waypoints in there and
summarize the alternatives.&lt;/p&gt;
&lt;p&gt;I think the lesson here is to avoid automating anything unless you
actually are the user.&lt;/p&gt;
&lt;p&gt;If an organization wants software, a developer needs to do the job
manually to *really* understand what the pain points are. Users
develop expertise in the wrong things. And they want automation where
the benefits are minor. Automating the spreadsheet-to-PDF is wrong.
Replacing the spreadsheet is right.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="navtools"></category><category term="navigation"></category><category term="object-oriented design"></category><category term="#python"></category></entry><entry><title>New to Python -- How to manage architecture choices</title><link href="https://slott56.github.io/2021_10_05-new_to_python_how_to_manage_architecture_choices.html" rel="alternate"></link><published>2021-10-05T10:00:00-04:00</published><updated>2021-10-05T10:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-10-05:/2021_10_05-new_to_python_how_to_manage_architecture_choices.html</id><summary type="html">&lt;p&gt;This is a problem folks new to Python have, and sometimes can't
articulate that they have it.&lt;/p&gt;
&lt;p&gt;They don't know which package is the &amp;quot;right&amp;quot; one to use. Tox vs. Nox.
Click vs. Argparse vs. getopts? What's the &amp;quot;best&amp;quot; choice?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Response 1&lt;/strong&gt;. The whole Python ecosystem is chaos and the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This is a problem folks new to Python have, and sometimes can't
articulate that they have it.&lt;/p&gt;
&lt;p&gt;They don't know which package is the &amp;quot;right&amp;quot; one to use. Tox vs. Nox.
Click vs. Argparse vs. getopts? What's the &amp;quot;best&amp;quot; choice?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Response 1&lt;/strong&gt;. The whole Python ecosystem is chaos and the language
is just a &amp;quot;toy&amp;quot;. You don't have this many choices with (pick your
language: e.g., Go or Rust or Scala).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response 2&lt;/strong&gt;. We need a way to make architectural choices that the
team understands and can use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Response 1 is remarkably common. It's hard to argue against. If someone
thinks innovation is chaos, they -- perhaps -- shouldn't be in
technology to begin with. &lt;strong&gt;Innovation IS chaos&lt;/strong&gt;. That's the essential
definition!&lt;/p&gt;
&lt;p&gt;However, they may be a project owner (or the manager of an old-school
waterfall-style project) or -- worse -- someone responsible for
architecture, and complain about chaos. If so, they're not really cut
out for managing rapid technological change, and they need to be
bypassed.&lt;/p&gt;
&lt;p&gt;Yes. Bypassed. Ignore them. Go to their meetings. Nod politely when they
rant about chaos. Then build working software. Eventually, they'll grow
to understand that a large ecosystem is NOT chaos. Rapid innovation is
not chaos. They may come to understand that filters are required to
reject some of the noise that comes from innovation.&lt;/p&gt;
&lt;div class="section" id="response-2-how-do-we-make-choices"&gt;
&lt;h2&gt;Response 2 -- How do we make choices?&lt;/h2&gt;
&lt;p&gt;Glad you asked.&lt;/p&gt;
&lt;p&gt;I have seen four common approaches.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;HiPPO&lt;/strong&gt;: The Highest-Paid Person's Opinion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tech Oracle&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HashTAG&lt;/strong&gt;: Hyperconnected And Socially Helpful Tech Advisory Group.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Peer Pressure&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's look at each of these.&lt;/p&gt;
&lt;div class="section" id="hippo"&gt;
&lt;h3&gt;HiPPO&lt;/h3&gt;
&lt;p&gt;The Highest-Paid Person's Opinion isn't easy to dismiss. They're an
executive or the product owner and they think their position in the
company gives them a magical ability to somehow predict the technical
shortcomings of a component or a framework or a language.&lt;/p&gt;
&lt;p&gt;Once upon a time, when all components were licensed, someone negotiated
contracts for support and training. The contracts (and negotiations)
were a Big Sweaty Deal (BSD™). The HiPPO needed to justify all the time
and money spent with the vendor. Okay. Sure. Then their opinion on
continuing to invest in a losing proposition makes a lot of sense. Since
they've already spent money with the vendor, they'd like us to continue
to spend money with the vendor, even if the vendor's product isn't
really very good.&lt;/p&gt;
&lt;p&gt;Those times are past. Most everything is open source nowadays, and we
pay for support reluctantly. We often have POC's to chose among
alternatives. We can fire a vendor quickly. We don't invest heavily in
inking a deal. (In the olden days, I got lots of plane rides and hotels
from vendors. Getting to a deal was fun back then.)&lt;/p&gt;
&lt;p&gt;The HiPPO needs to be informed that their opinion isn't helpful unless
they can back it up with a POC. If they can't supply the POC, then the
technical folks will keep arguing until they have competing POC's to
help make a technical choice.&lt;/p&gt;
&lt;p&gt;With good languages (like Python) and large ecosystems, POC's are cheap
insurance to back up an opinion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tech-oracle"&gt;
&lt;h3&gt;Tech Oracle&lt;/h3&gt;
&lt;p&gt;The Tech Oracle is expected to provide an opinion on everything. In many
cases, this can work.&lt;/p&gt;
&lt;p&gt;If the architecture is reasonably well known to the Oracle, then picking
open-source projects to help build a solution isn't too difficult.
Filters like &amp;quot;date of last update&amp;quot; and &amp;quot;volume of changes on GitHub&amp;quot; can
be useful ways for the Oracle to locate better components and
frameworks.&lt;/p&gt;
&lt;p&gt;The Oracle should be producing POC's. This makes it hard for them also
to produce production code. Not impossible, but hard. Their role isn't
quite the same as other devs, since they have to provide up-front
justification before too much real work is invested.&lt;/p&gt;
&lt;p&gt;If the Oracle can't provide POC's, that's a bit of a problem. I've met
architects who don't code. I couldn't find a way to trust them. Yes,
they may know a lot. They're wonderfully articulate. Great slide decks.
Good choices of lunch places where they try to influence you. But... I
don't trust architects who don't code. Sorry. Personal weakness.&lt;/p&gt;
&lt;p&gt;Architecture diagrams are an essential work product in addition to
POC's. Usually, they're focused on a specific project, rather than
providing general-purpose guidance. Generally, the overall ecosystem
moves so quickly that the idea of a general-purpose, one-size-fits-all
architecture isn't a good idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hashtag"&gt;
&lt;h3&gt;HashTAG&lt;/h3&gt;
&lt;p&gt;The Hyperconnected And Socially Helpful Tech Advisory Group is often a
really good thing. It's best when there are multiple teams who need to
coordinate. It can be slow-ish, however, and time needs to be invested
in this. TAG meetings deserve stories on the storyboard. TAG time needs
to be prioritized above individual team needs.&lt;/p&gt;
&lt;p&gt;A TAG needs to look at choices, and publish recommendations. That often
means reviewing POC's. And that means folks have to take POC's to the
TAG for them to weigh in on the difficult-to-quantify &amp;quot;better solution&amp;quot;.&lt;/p&gt;
&lt;p&gt;These are interesting demos. The TAG should be looking at the same (or
similar) functionality from competing POC's to render a final, binding
judgement. There needs to be an agenda, strict time-lines for the
presentation, and a final -- almost objective -- score-card to show the
elements of the final decision.&lt;/p&gt;
&lt;p&gt;Decisions are an essential work product. Published. Socialized.
Well-known. Easy-to-find. A whole GitHub repo with decisions is
essential.&lt;/p&gt;
&lt;p&gt;Architecture diagrams are also an essential work product. These should
provide general-purpose guidance. A team should be able to start with
one of these, eliminate the parts they don't need, plug in their product
name, and move forward quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="peer-pressure"&gt;
&lt;h3&gt;Peer Pressure&lt;/h3&gt;
&lt;p&gt;This is the HashTAG reduced to a single team. Given a choice, the
members of the team need to look at filters the way the Tech Oracle
should. They need to weigh things like More stars in GitHub? Fewer bug
reports? Documentation? And they need to capture the decision in
something more than a conversation.&lt;/p&gt;
&lt;p&gt;If it's hard to reach consensus, this means the team has to commit to
dueling POC's. This needs to be time-boxed work. It's enough of a POC to
show how competing libraries or frameworks *could* be used in the
implementation. It's important not to run down the road to a candidate
implementation. The POC should point the implementers in the right
direction.&lt;/p&gt;
&lt;p&gt;(A candidate implementation becomes a kind of &lt;em&gt;fait accompli&lt;/em&gt;: &amp;quot;I've
already built it, we might as well use it. This dilutes consensus in
favor of fast coding.)&lt;/p&gt;
&lt;p&gt;Ideally, the POC shows what code could look like. It might include
benchmarks. Test cases. Concrete things that can be compared -- line by
line if necessary -- to show some measurable aspect of &amp;quot;better.&amp;quot;&lt;/p&gt;
&lt;p&gt;The decision and the diagram are part of the team's legacy. It has to
live with the code. The number of decisions that get redebated after a
few sprints needs to be minimal. It's never zero, but the team needs to
put stories on the board for finalizing tech documentation with
architectural decisions, reasons, and links to the POC that backs up the
decision.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-what-about-python"&gt;
&lt;h2&gt;Wait. What about Python?&lt;/h2&gt;
&lt;p&gt;This, clearly, has nothing to do with Python.&lt;/p&gt;
&lt;p&gt;The vastness and rapidity of change in the Python ecosystem surfaces a
need for some kind of formal decision-making process.&lt;/p&gt;
&lt;p&gt;But Python isn't the cause of the problem. All open source software
moves quickly. A popular language like Python has more potential sources
of confusion than a more specialized language/framework like R.&lt;/p&gt;
&lt;p&gt;Embrace the community nature of decision-making. Python is about
community building and collective solutions to difficult problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-all-those-proofs-of-concept"&gt;
&lt;h2&gt;But. All those Proofs of Concept...&lt;/h2&gt;
&lt;p&gt;Yes, there will be POC's. In the case of a HashTAG or TechOracle, these
need to be preserved and maintained and upgraded all the time. It's real
work. It's a lot of real work.&lt;/p&gt;
&lt;p&gt;Remember, the Python ecosystem moves rapidly. There's a lot of
innovation, and it needs to be actively tracked. (Unlike the olden days
where a C compiler update was an annual affair buried in an annual OS
upgrade.)&lt;/p&gt;
&lt;p&gt;This leads to defining projects via project templates.
See &lt;a class="reference external" href="https://cookiecutter.readthedocs.io/en/1.7.2/"&gt;https://cookiecutter.readthedocs.io/en/1.7.2/&lt;/a&gt; for a good approach to
this. You want to create cookie cutters that include enough skeleton
code that you can run a complete 100% code coverage unit test.&lt;/p&gt;
&lt;p&gt;You can then use &lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt; (or
&lt;a class="reference external" href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt;) to define your component
and framework versions as variant virtual environments. As components
evolve, you update the versions and rerun your test suite. You can
publish internal update trackers for project teams to make sure they're
testing with the latest-and-greatest environments.&lt;/p&gt;
&lt;p&gt;You'll also have to watch Python version changes. These can creep up on
organizations. The PEP's and the schedules need to be central to folks
using Python. See &lt;a class="reference external" href="https://endoflife.date/python"&gt;https://endoflife.date/python&lt;/a&gt; for a handy
visualization.&lt;/p&gt;
&lt;div class="section" id="the-billboard"&gt;
&lt;h3&gt;The Billboard&lt;/h3&gt;
&lt;p&gt;Enterprise developers all discover that there's no way to share code
&lt;strong&gt;easily&lt;/strong&gt; within an enterprise. Everyone is isolated in their teams,
and each team winds up reinventing some wheel or other. It's been an
ongoing problem since IT organizations grew beyond a single team.&lt;/p&gt;
&lt;p&gt;Python is no different. Teams solving related problems don't talk
enough. If you have lots of meetings to share things, no real work gets
done.&lt;/p&gt;
&lt;p&gt;Python uses a Package Index to track popular useful packages. Visit
&lt;a class="reference external" href="https://pypi.org"&gt;https://pypi.org&lt;/a&gt; if you haven't seen it yet. You have two paths forward
in an enterprise.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Your own PyPI. This is easy and fun. You can have the internal PyPI
shadow the global PyPI.&lt;/li&gt;
&lt;li&gt;Use JFrog Artifactory. &lt;a class="reference external" href="https://jfrog.com/artifact-management/"&gt;https://jfrog.com/artifact-management/&lt;/a&gt; This
involves spending money to track in-house artifacts as well as global
PyPI artifacts.&lt;/li&gt;
&lt;li&gt;A GitHub Billboard organization. This is an organization that serves
as a place to post links to other repos. It needs a little bit of
curation. As an implementation, the organization's repositories are a
lot of small project advertisements. The degenerate case is a README.md.
A better case is the POC repo showing how to use the real project. In
the middle is a cookie cutter. This is your in-house advertising. It's
relatively easy to search because you're looking at one organization's
list of repositories. Each is a pithy, focused summary of another
project. Choose names that reflect why someone wants to look more deeply
at the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The point here is to embrace the chaos that stems from innovation and
make it visible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="community"></category><category term="management"></category></entry><entry><title>Pivot to Python -- 150 pages of things you might need to know</title><link href="https://slott56.github.io/2021_09_28-pivot_to_python_150_pages_of_things_you_might_need_to_know.html" rel="alternate"></link><published>2021-09-28T08:00:00-04:00</published><updated>2021-09-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-28:/2021_09_28-pivot_to_python_150_pages_of_things_you_might_need_to_know.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://books.apple.com/us/book/id1586977675"&gt;http://books.apple.com/us/book/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Python Programming language is a deep topic. This book provides
focused guidance on installing Python, creating virtual enivironments
and using Jupyter Lab to build foundational skills in using Python. The
book covers many built-in data types. There are two small case …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://books.apple.com/us/book/id1586977675"&gt;http://books.apple.com/us/book/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Python Programming language is a deep topic. This book provides
focused guidance on installing Python, creating virtual enivironments
and using Jupyter Lab to build foundational skills in using Python. The
book covers many built-in data types. There are two small case studies
and one larger case study to provide examples of how Python can be used
to tackle real-world problems. There are over 100 code samples.&lt;/p&gt;
&lt;p&gt;The companion GitHub repository,
&lt;a class="reference external" href="https://github.com/slott56/pivot-to-python"&gt;https://github.com/slott56/pivot-to-python&lt;/a&gt;, contains all of the example
code.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills"></category></entry><entry><title>Python and the "Syntactic Whitespace Problem"</title><link href="https://slott56.github.io/2021_09_27-python_and_the_syntactic_whitespace_problem.html" rel="alternate"></link><published>2021-09-27T16:04:00-04:00</published><updated>2021-09-27T16:04:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-27:/2021_09_27-python_and_the_syntactic_whitespace_problem.html</id><summary type="html">&lt;p&gt;Check out this list of questions on Stack Overflow:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax"&gt;http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About 10% of these are really just complaints about Python's syntax.
Almost every Stack Overflow question on Python's use of syntactic
whitespace is really just a complaint.&lt;/p&gt;
&lt;p&gt;Here's today's example: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3994765/python-without-whitespace-requirements"&gt;Python without …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this list of questions on Stack Overflow:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax"&gt;http://stackoverflow.com/search?q=%5Bpython%5D+whitespace+syntax&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About 10% of these are really just complaints about Python's syntax.
Almost every Stack Overflow question on Python's use of syntactic
whitespace is really just a complaint.&lt;/p&gt;
&lt;p&gt;Here's today's example: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3994765/python-without-whitespace-requirements"&gt;Python without whitespace requirements&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's the money quote: &amp;quot;I could potentially be interested in
learning Python but the whitespace restrictions are an absolute no-go
for me.&amp;quot;&lt;/p&gt;
&lt;p&gt;Here's the reality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Everyone Indents Correctly All The Time In All Languages.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Everyone. All the time. Always.&lt;/p&gt;
&lt;p&gt;It's amazing how well, and how carefully people indent code. Not
Python code.&lt;/p&gt;
&lt;p&gt;All Code. XML. HTML. CSS. Java. C++. SQL. All Code.&lt;/p&gt;
&lt;p&gt;Everyone indents. And they always indent &lt;strong&gt;correctly&lt;/strong&gt;. It's truly
amazing how well people indent. In particular, when the syntax
doesn't require any indentation, they still indent beautifully.&lt;/p&gt;
&lt;p&gt;Consider this snippet of C code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if( a == 0 )
   printf( &amp;quot;a is zero&amp;quot; );
   r = 1;
else
   printf( &amp;quot;a is non-zero&amp;quot; );
   r = a % 2;
&lt;/pre&gt;
&lt;p&gt;Over the last few decades, I've probably spent a complete man-year
reading code like that and trying to figure out why it doesn't work.
It's not easy to debug.&lt;/p&gt;
&lt;p&gt;The indentation completely and accurately reflects the programmer's
intention. Everyone gets the indentation right. All the time. In
every language.&lt;/p&gt;
&lt;p&gt;And people still complain about Python, even when they indent
beautifully in other languages.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="when-first-learning-python-i-found-the-use-of-whit"&gt;
&lt;h2&gt;When first learning python I found the use of whit...&lt;/h2&gt;
&lt;p&gt;Mark&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 08:53:12.128000-04:00&lt;/p&gt;
&lt;p&gt;When first learning python I found the use of whitespace for defining
blocks odd too. What was especially troublesome was the notion of tabs
vs. spaces for the whitespace. Once you get a decent python aware editor
that problem is no longer a problem and you are left with a language
that helps enforce readability. Maybe &amp;quot;get a good python aware editor&amp;quot;
should be the first step to every tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="every-one-indents-correctly-all-the-time-in"&gt;
&lt;h2&gt;&amp;quot;Every[one] Indents Correctly All The Time In...&lt;/h2&gt;
&lt;p&gt;Robin Norwood&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 11:45:18.435000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Every[one] Indents Correctly All The Time In All Languages.&amp;quot;
Oh, if only that were true. Look at pretty much any Javascript code that
isn't part of a framework. For some reason, JS coders seem to treat
mis-indentation as an obfuscation technique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempting-to-do-templating-with-django-templating"&gt;
&lt;h2&gt;Attempting to do templating with django templating...&lt;/h2&gt;
&lt;p&gt;Travis&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 13:00:24.648000-04:00&lt;/p&gt;
&lt;p&gt;Attempting to do templating with django templating language can be ugly
and horrifying, but jinja2 fixes most of those problems.&lt;/p&gt;
&lt;p&gt;What I find fascinating is that HAML, a syntax for HTML and XML that
represents structure using indentation and a syntax similar to CSS, is
written in ruby. It's also an extremely popular ruby library. There's no
popular alternative for python.&lt;/p&gt;
&lt;p&gt;The same is true for its' whitespace significant CSS syntax, SASS, but
that's understandable... since it's a product that has no barrier to
using it standalone other than a zealotry for having everything in your
language of choice.&lt;/p&gt;
&lt;p&gt;I miss HAML working with python. :/&lt;/p&gt;
&lt;p&gt;s/not and error free/not as error free/
sorry
----------------------------------------------&lt;/p&gt;
&lt;p&gt;matt harrison&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 12:04:22.431000-04:00&lt;/p&gt;
&lt;p&gt;s/not and error free/not as error free/
sorry&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whenever-you-respond-to-complaints-you-should-ask"&gt;
&lt;h2&gt;Whenever you respond to complaints, you should ask...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 19:33:59.273000-04:00&lt;/p&gt;
&lt;p&gt;Whenever you respond to complaints, you should ask yourself whether the
complaint is worth answering.&lt;/p&gt;
&lt;p&gt;I think people who make a reflexive judgement based on whitespace (or
even any syntax, so long as the syntax is internally reflective) are
likely to either be zealots for some other technology, irrational, or -
most likely - very inexperienced with real-world development. In other
words, they are people whose acceptance the Python community (or any
community) does not need.&lt;/p&gt;
&lt;p&gt;Python's whitespace requirement is a trade-off like any other. I find it
easy to work with and aesthetically pleasing. It does have some pitfalls
(tabs vs. spaces when working with poorly configured editors; pasting a
block at a different level of statement nesting than the level it was
copied from), but those are just different trade-offs to other languages
where e.g. you may have more superfluous syntax or less consistency in
code layout (which makes debugging other people's code and co-operation
harder).
Martin&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-are-a-couple-of-times-the-whitespace-bites-y"&gt;
&lt;h2&gt;There are a couple of times the whitespace bites y...&lt;/h2&gt;
&lt;p&gt;matt harrison&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 12:02:40.573000-04:00&lt;/p&gt;
&lt;p&gt;There are a couple of times the whitespace bites you in Python (and not
in non-whitespace aware languages).&lt;/p&gt;
&lt;p&gt;One is pasting code. If you are at different levels of the block or the
pasted code contains tabs instead of spaces it's annoying. Other
languages don't have this.&lt;/p&gt;
&lt;p&gt;Automatic re-indent is not and error free as in other languages.
This also makes Python a bad language for (html) templating. Python
based template languages end up looking like ruby (with end statements).
But ... people don't mention these, they only say that it's hard to use
whitespace. Well the rule is easy (replace { with : and indent
consistently), not sure what the holdup is since no one seems to mention
what I've just said.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ok-having-a-look-at-your-post-once-more-i-now-d"&gt;
&lt;h2&gt;Ok, having a look at your post once more, I now d...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-27 06:24:54.731000-04:00&lt;/p&gt;
&lt;p&gt;Ok, having a look at your post once more, I now *do* think that was
exactly your point (people getting indentation right when not getting
the braces right)...&lt;/p&gt;
&lt;p&gt;Sorry about that stupid comment :-)&lt;/p&gt;
&lt;p&gt;Is there a Python auto-formatter?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-i-don"&gt;
&lt;h2&gt;Because I don&amp;amp;#...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 12:50:22.324000-04:00&lt;/p&gt;
&lt;p&gt;Is there a Python auto-formatter?
Because I don't format my code any more. I let tools format it. And I
don't fool with it. I used to spend a lot of time on indentation, but I
ended up letting it go and I'm a lot more productive now. (C#, SQL)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-loved-the-significant-whitespace-in-python-from"&gt;
&lt;h2&gt;I loved the significant whitespace in Python from ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 13:23:48.083000-04:00&lt;/p&gt;
&lt;p&gt;I loved the significant whitespace in Python from the first time I saw
it.&lt;/p&gt;
&lt;p&gt;&amp;#64;matt harrison:
Cut and paste will mess up a program more ways than whitespace. I very
often regret doing it. If the same code is repeated often it should be
refactored into a function.&lt;/p&gt;
&lt;p&gt;&amp;#64;cade:
Many editors/IDEs have Python formatters. emacs comes to mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-m-not-100-whether-this-actually-might-be-yo"&gt;
&lt;h2&gt;I&amp;amp;#39;m not 100% whether this actually might be yo...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-27 06:19:52.348000-04:00&lt;/p&gt;
&lt;p&gt;I'm not 100% whether this actually might be your point about the C
example, but: This C code will not compile.&lt;/p&gt;
&lt;p&gt;The indentation hides the fact that the &amp;quot;if&amp;quot; only refers to the next
statement. The &amp;quot;else&amp;quot; therefore has no matching &amp;quot;if&amp;quot; and the compiler
will throw an error. In those archaic languages you need braces {...}
:-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-are-people-who-don-39-t-indent-correctly-w"&gt;
&lt;h2&gt;There are people who don&amp;amp;#39;t indent correctly. W...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-28 15:25:07.925000-04:00&lt;/p&gt;
&lt;p&gt;There are people who don't indent correctly. When I was a TA for
Programming 101, there was a student in the class that indented Every.
Single. Line. Differently. I had to reformat his code to see what the
heck he was up to.&lt;/p&gt;
&lt;p&gt;He was the only one who did this, though.&lt;/p&gt;
&lt;p&gt;&amp;amp;quot;Everyone Indents&amp;amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oh-man-you-don-39"&gt;
&lt;h2&gt;Oh man, you don&amp;amp;#39;...&lt;/h2&gt;
&lt;p&gt;Herberth Amaral&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-27 10:38:01.125000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Everyone Indents&amp;quot;&lt;/p&gt;
&lt;p&gt;Oh man, you don't know non-experienced programmers. In the beginning,
make them indent their code is like make an turtle climb a mountain:
they don't do.&lt;/p&gt;
&lt;p&gt;Python solves this problem in a very elegant way, by throwing syntax
errors when indentation aren't done right.&lt;/p&gt;
&lt;p&gt;For me, at least, whitespace is a Python's killer feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-believe-you-meant-quot-everyone-indents-quo"&gt;
&lt;h2&gt;I believe you meant &amp;amp;quot;Everyone indents ...&amp;amp;quo...&lt;/h2&gt;
&lt;p&gt;André Roberge&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-26 21:45:30.073000-04:00&lt;/p&gt;
&lt;p&gt;I believe you meant &amp;quot;Everyone indents ...&amp;quot; when you wrote &amp;quot;Every indents
...&amp;quot;. Also, for the commenter who mentions missing HAML, lookup shpaml
...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sorry-but-you-have-no-idea-what-youre-talking-ab"&gt;
&lt;h2&gt;Sorry, but you have no idea what you’re talking ab...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-05 06:00:12.819000-04:00&lt;/p&gt;
&lt;p&gt;Sorry, but you have no idea what you’re talking about. When writing in
C#, I don’t indent correctly. I don’t bother, because I don’t have to.
Visual Studio fixes all indentation for me. If I did what you said, I
would end up with wrong programs, as demonstrated in your own example.
Instead I rely on Visual Studio’s formatting to tell me what I
*actually* wrote. Your example demonstrates how to end up with a wrong
program that doesn’t mean what you think it does. I get the feedback
that tells me that my code structure is *actually* what I mean it to
be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-good-topic-really-i-like-any-post-talking-about"&gt;
&lt;h2&gt;So good topic really i like any post talking about...&lt;/h2&gt;
&lt;p&gt;Smart Spanish Blogs&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-05-05 06:13:16.655000-04:00&lt;/p&gt;
&lt;p&gt;So good topic really i like any post talking about &lt;a class="reference external" href="javascript:void(0);"&gt;STD symptoms
pictures&lt;/a&gt; and more , you shall search in Google
and Wikipedia about that .... thanks a gain ,,,&lt;/p&gt;
&lt;p&gt;&amp;amp;quot;Consider this snippet of C code.&amp;amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-do"&gt;
&lt;h2&gt;I do...&lt;/h2&gt;
&lt;p&gt;Earth&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-03-26 08:12:00.003000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Consider this snippet of C code.&amp;quot;
I don't understand your example. Is it correctly indented or badly
indented? What does it do and what should it do?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="indeed-no-one-in-their-right-mind-would-write-c"&gt;
&lt;h2&gt;Indeed.  No one in their right mind would write C ...&lt;/h2&gt;
&lt;p&gt;drichardson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-07-09 18:04:35.162000-04:00&lt;/p&gt;
&lt;p&gt;Indeed. No one in their right mind would write C code (or code in any
language with C-like syntax) that looks like that.&lt;/p&gt;
&lt;p&gt;This same example is repeated over and over on the web. It seems
Python's goofy syntactic whitespace solves only a single problem -- a
problem that no one has ever actually had.&lt;/p&gt;
&lt;p&gt;The problems Python's syntactic whitespace causes, however, are varied
and numerous. The astonishing number of apologetic articles like this
are a testament to that.&lt;/p&gt;
&lt;p&gt;I'm sure replies will follow with all the usual &amp;quot;rules&amp;quot; (PEP 8, only use
spaces, use a special editor) to solve the problems that Python
apologists refuse to acknowledge actually exist!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Found an ancient CGI script -- part IV -- OpenAPI specification</title><link href="https://slott56.github.io/2021_09_21-found_an_ancient_cgi_script_part_iv_openapi_specification.html" rel="alternate"></link><published>2021-09-21T11:00:00-04:00</published><updated>2021-09-21T11:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-21:/2021_09_21-found_an_ancient_cgi_script_part_iv_openapi_specification.html</id><summary type="html">&lt;p&gt;See the previous sections, starting with the first on finding an
&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;ancient CGI
script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We don't &lt;strong&gt;need&lt;/strong&gt; an OpenAPI specification. But, it is so helpful to
formalize the behavior of a web site that it's hard for me to imagine
working without it.&lt;/p&gt;
&lt;p&gt;In this case, the legacy script only …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See the previous sections, starting with the first on finding an
&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;ancient CGI
script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We don't &lt;strong&gt;need&lt;/strong&gt; an OpenAPI specification. But, it is so helpful to
formalize the behavior of a web site that it's hard for me to imagine
working without it.&lt;/p&gt;
&lt;p&gt;In this case, the legacy script only have a few paths, so the OpenAPI
specification is relatively small.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
openapi: 3.0.1
info:
  title: CGI Conversion
  version: 1.0.0
paths:
  /resources/{type}/:
    get:
      summary: Query Form
      operationId: form
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Form
          content: {}
    post:
      summary: Add a document
      operationId: update
      requestBody:
        description: document
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: Created
          content:
            text/html:
              {}
        405:
          description: Invalid input
          content:
            text/html:
              {}
  /resources/{type}/{guid}:
    get:
      summary: Find documents
      operationId: find
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: guid
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            text/html:
              {}
        404:
          description: Not Found
          content:
            text/html:
              {}

components:
  schemas:
    Document:
      type: object
      properties:
        fname:
          type: string
        lname:
          type: string
&lt;/pre&gt;
&lt;p&gt;This shows the rudiments of the paths and the responses. There are three
&amp;quot;successful&amp;quot; kinds of responses, plus two additional error responses
that are formally defined.&lt;/p&gt;
&lt;p&gt;There is a lot of space in this document for additional documentation
and details. Every opportunity should be taken to capture details about
the application, what it does now, and what it should do when it's
rewritten.&lt;/p&gt;
&lt;p&gt;In our example, the form (and resulting data structure) is a degenerate
class with a pair of fields. We simply write the &lt;tt class="docutils literal"&gt;repr()&lt;/tt&gt; string to a
file. In a practical application, this will often be a bit more complex.
There may be validation rules, some of which are obscure, hidden in odd
places in the application code.&lt;/p&gt;
&lt;p&gt;What's essential here is continuing the refactoring process to more
fully understand the underlying data model and state processing. These
features need to be disentangled from HTML output and CGI input.&lt;/p&gt;
&lt;p&gt;The OpenAPI spec serves as an important part of the definition of done.
It supplements the context diagram with implementation details. In a
very real and practical way, this drives the integration test suite. We
can transform OpenAPI to Gherkin and use this to test the overall web
site.
See &lt;a class="reference external" href="https://medium.com/capital-one-tech/spec-to-gherkin-to-code-902e346bb9aa"&gt;https://medium.com/capital-one-tech/spec-to-gherkin-to-code-902e346bb9aa&lt;/a&gt;
for more on this topic.&lt;/p&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>Found an ancient cgi script -- part III -- refactoring</title><link href="https://slott56.github.io/2021_09_17-found_an_ancient_cgi_script_part_iii_refactoring.html" rel="alternate"></link><published>2021-09-17T14:27:00-04:00</published><updated>2021-09-17T14:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-17:/2021_09_17-found_an_ancient_cgi_script_part_iii_refactoring.html</id><summary type="html">&lt;p&gt;Be sure to see the &lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;original script&lt;/a&gt;
and the test cases in the prior posts.&lt;/p&gt;
&lt;p&gt;We need to understand a little about what a web request is. This can
help us do the refactoring.&lt;/p&gt;
&lt;p&gt;It can help to think of a web server a function that maps a request to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Be sure to see the &lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;original script&lt;/a&gt;
and the test cases in the prior posts.&lt;/p&gt;
&lt;p&gt;We need to understand a little about what a web request is. This can
help us do the refactoring.&lt;/p&gt;
&lt;p&gt;It can help to think of a web server a function that maps a request to a
response. The request is really a composite object with headers,
&lt;span class="formula"&gt;&lt;i&gt;h&lt;/i&gt;&lt;/span&gt;, method verb, &lt;span class="formula"&gt;&lt;i&gt;v&lt;/i&gt;&lt;/span&gt;, and URL, &lt;span class="formula"&gt;&lt;i&gt;u&lt;/i&gt;&lt;/span&gt;. Similarly, the response
is a composite with headers, &lt;span class="formula"&gt;&lt;i&gt;h&lt;/i&gt;&lt;/span&gt;, and content, &lt;span class="formula"&gt;&lt;i&gt;c&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;c&lt;/i&gt; = &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;)
&lt;/div&gt;
&lt;p&gt;The above is true for idempotent requests; usually, the method verb is
GET.&lt;/p&gt;
&lt;p&gt;Some requests make a state change, however, and use method verbs like
POST, PUT, PATCH, or DELETE.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;c&lt;/i&gt;;&lt;i&gt;Ŝ&lt;/i&gt; = &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)
&lt;/div&gt;
&lt;p&gt;There's a state,  &lt;span class="formula"&gt;&lt;i&gt;S&lt;/i&gt;&lt;/span&gt;, which is transformed to a new state, &lt;span class="formula"&gt;&lt;i&gt;Ŝ&lt;/i&gt;&lt;/span&gt;, as part of making the request.&lt;/p&gt;
&lt;p&gt;For the most part, CGI scripts are limited to GET and POST methods. The
GET method is (ideally) for idempotent, no-state-change requests. The
POST should be limited to making state changes. In some cases, there
will be an explicit GET-after-POST sequence of operations using an
intermediate redirection so the browser's &amp;quot;back&amp;quot; button works properly.&lt;/p&gt;
&lt;p&gt;In too many cases, the rules aren't followed well and their will be
state transitions on GET and idempotent POST operations. Sigh.&lt;/p&gt;
&lt;div class="section" id="multiple-resources"&gt;
&lt;h2&gt;Multiple Resources&lt;/h2&gt;
&lt;p&gt;Most web servers will provide content for a number of resource
instances. Often they will work with a number of instances of a variety
of resource types. The degenerate case is a server providing content for
a single instance of a single type.&lt;/p&gt;
&lt;p&gt;Each resource comes from the servers's universe of resources, &lt;span class="formula"&gt;&lt;i&gt;R&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;r&lt;/i&gt; ∈ &lt;i&gt;R&lt;/i&gt;
&lt;/div&gt;
&lt;p&gt;Each resource type, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;, is part of some overall collection of
types that describe the various resources. In some cases we'll identify
resources with a path that includes the type of the resource,
&lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;, and an identifier within that type, &lt;span class="formula"&gt;&lt;i&gt;i&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;,
&lt;span class="formula"&gt;⟨&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;), &lt;i&gt;i&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)⟩&lt;/span&gt;. This often maps to a character string &amp;quot;type/name&amp;quot;
that's part of a URL's path.&lt;/p&gt;
&lt;p&gt;We can think of a response's content as the HTML markup, &lt;span class="formula"&gt;&lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt;,
around a resource, &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt;&lt;/span&gt;, managed by the web server.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;c&lt;/i&gt; = &lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;r&lt;/i&gt;)
&lt;/div&gt;
&lt;p&gt;This is a representation of the resource's state. The HTML
representation can have both semantic and style components. We might,
for example, have a number of HTML structure elements like &lt;tt class="docutils literal"&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;, as
well as CSS styles. Ideally, the styles don't convey semantic
information, but the HTML tags do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-services"&gt;
&lt;h2&gt;Multiple Services&lt;/h2&gt;
&lt;p&gt;There are often multiple, closely-related services within a web server.
A common design pattern is to have services that vary based on a path
item, &lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/span&gt;, within the url.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;r&lt;/i&gt;);&lt;i&gt;Ŝ&lt;/i&gt; = &lt;i&gt;s&lt;/i&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;) = &lt;span class="array"&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎧&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎪&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎨&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎪&lt;/span&gt;&lt;/span&gt;&lt;span class="arrayrow"&gt;&lt;span class="bracket align-l"&gt;⎩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="bracketcases"&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;x&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)&lt;span class="textbf"&gt; if $p(u) = x$ &lt;/span&gt; 
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
  
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;y&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)&lt;span class="textbf"&gt; if $p(u) = y$ &lt;/span&gt; 
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
  
&lt;/span&gt;

&lt;/span&gt;
&lt;span class="arrayrow"&gt;
&lt;span class="case align-l"&gt;
 
&lt;/span&gt;

&lt;/span&gt;

&lt;/span&gt;

&lt;/div&gt;
&lt;p&gt;There isn't, of course, any formal requirement for a tidy mapping from
some element of the path, &lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/span&gt;, to a type, &lt;span class="formula"&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt;, that
characterizes a resource, &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt;&lt;/span&gt;. Utter chaos is allowed. Thankfully,
it's not common.&lt;/p&gt;
&lt;p&gt;While there may not be a tidy type-based mapping, there must be a
mapping from a triple and a state, &lt;span class="formula"&gt;⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;⟩&lt;/span&gt;
to a resource, &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt;&lt;/span&gt;. This mapping can be considered a database or
filesystem query, &lt;span class="formula"&gt;&lt;i&gt;q&lt;/i&gt;(⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;⟩)&lt;/span&gt;. The request may
also involve state change.  It can help to think of the state as a
function that can emit a new state for a request. This implies two
low-level processing concepts:&lt;/p&gt;
&lt;div class="formula"&gt;
{&lt;i&gt;r&lt;/i&gt; ∈ &lt;i&gt;R&lt;/i&gt;|&lt;i&gt;q&lt;/i&gt;(⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;⟩, &lt;i&gt;r&lt;/i&gt;)}
&lt;/div&gt;
&lt;p&gt;And&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;Ŝ&lt;/i&gt; = &lt;i&gt;S&lt;/i&gt;(⟨&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;⟩)
&lt;/div&gt;
&lt;p&gt;The query processing to locate resources is one aspect of the underlying
model. The state change for the universe of resources is another aspect
of the underlying model. Each request must return a resource; it may
also make a state change.&lt;/p&gt;
&lt;p&gt;What's essential, then, is to see how these various &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;x&lt;/i&gt;&lt;/sub&gt;&lt;/span&gt; functions
are related to the original code. The &lt;span class="formula"&gt;&lt;i&gt;m&lt;/i&gt;&lt;sub&gt;&lt;i&gt;h&lt;/i&gt;&lt;/sub&gt;(&lt;i&gt;r&lt;/i&gt;)&lt;/span&gt; function,
the &lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/span&gt; mappings, and the &lt;span class="formula"&gt;&lt;i&gt;s&lt;/i&gt;&lt;sub&gt;&lt;i&gt;t&lt;/i&gt;(&lt;i&gt;u&lt;/i&gt;)&lt;/sub&gt;(&lt;i&gt;h&lt;/i&gt;, &lt;i&gt;v&lt;/i&gt;, &lt;i&gt;u&lt;/i&gt;;&lt;i&gt;S&lt;/i&gt;)&lt;/span&gt; functions are all
separate features that can be disentangled from each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-all-the-math"&gt;
&lt;h2&gt;Why All The Math?&lt;/h2&gt;
&lt;p&gt;We need to be utterly ruthless about separating several things that are
often jumbled together.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A web server works with a universe of resources. These can be
filesystem objects, database rows, external web services, anything.&lt;/li&gt;
&lt;li&gt;Resources have an internal state. Resources may also have internal
types (or classes) to define common features.&lt;/li&gt;
&lt;li&gt;There's at least one function to create an HTML representation of
state. This may be partial or ambiguous. It may also be complete and
unambiguous.&lt;/li&gt;
&lt;li&gt;There is at least one function to map a URL to zero or more
resources. This can (and often does) result in 404 errors because a
resource cannot be found.&lt;/li&gt;
&lt;li&gt;There may be a function to create a server state from the existing
server state and a request. This can result in 403 errors because an
operation is forbidden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, there can be user authentication and authorization rules.
The users are simply resources. Authentication is simply a query to
locate a user. It may involve using the password as part of the user
lookup. Users can have roles. Authorization is a property of a user's
role required by a specific query or state change (or both.)&lt;/p&gt;
&lt;p&gt;As we noted in the overview, the HTML representation of state is handled
(entirely) by Jinja. HTML templates are used. Any non-Jinja HTML
processing in legacy CGI code can be deleted.&lt;/p&gt;
&lt;p&gt;The mapping from URL to resource may involve several steps. In Flask,
some of these steps are handled by the mapping from a URL to a view
function. This is often used to partition resources by type. Within a
view function, individual resources will be located based on URL
mapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-we-do"&gt;
&lt;h2&gt;What do we do?&lt;/h2&gt;
&lt;p&gt;In our example code, we have a great deal of redundant HTML processing.
One sensible option is to separate all of the HTML printing into one or
more functions that emit the various kinds of pages.&lt;/p&gt;
&lt;p&gt;In our example, the parsing of the path is a single, long nested bunch
of if-elif processing. This should be refactored into individual
functions. A single, top-level function can decide what the URL pattern
and verb mean, and then delegate the processing to a view function. The
view function can then use an HTML rendering function to build the
resulting page.&lt;/p&gt;
&lt;p&gt;One family of URL's result in presentation of a form. Another family of
URL's processes the form input. The form data leads to a resource with
internal state. The form content should be used to define a Python
class. A separate class should read and write files with these Python
objects. The forms should be defined at a high level using a module like
&lt;a class="reference external" href="https://wtforms.readthedocs.io/en/2.3.x/"&gt;WTForms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When rewriting, I find it helps to keep several things separated:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A class for the individual resource objects.&lt;/li&gt;
&lt;li&gt;A  form that is one kind of serialization of the resource objects.&lt;/li&gt;
&lt;li&gt;An HTML page that is another kind of serialization of the resource
objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While these things are related very closely, they are not isomorphic to
each other. Objects may have implementation details or derived values
that should not be trivially shown on a form or HTML page.&lt;/p&gt;
&lt;p&gt;In our example, the form only has two fields. These should be properly
described in a class. The field objects have different types. The types
should also be modeled more strictly, not treated casually as a piece of
a file path. (What happens if we use a type name of &amp;quot;this/that&amp;quot;?)&lt;/p&gt;
&lt;p&gt;Persistent state change is handled with filesystem updates. These, too,
are treated informally, without a class to encapsulate the valid
operations, and reject invalid operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-examples"&gt;
&lt;h2&gt;Some Examples&lt;/h2&gt;
&lt;p&gt;Here is one the HTML output functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def html_post_response(type_name, name, data):
    print &amp;quot;Status: 201 CREATED&amp;quot;
    print &amp;quot;Content-Type: text/html&amp;quot;
    print
    print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Created New %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % type_name
    print &amp;quot;&amp;lt;body&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;h1&amp;gt;Created New %s&amp;lt;/h1&amp;gt;&amp;quot; % type_name
    print &amp;quot;&amp;lt;p&amp;gt;Path: %s/%s&amp;lt;/p&amp;gt;&amp;quot; % (type_name, name)
    print &amp;quot;&amp;lt;p&amp;gt;Content: &amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;
    print data
    print &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;
    # cgi.print_environ()
    print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;There are several functions like this. We aren't wasting any time
optimizing all these functions. We're simply segregating them from the
rest of the processing. There's a huge amount of redundancy; we'll fix
this when we starting using jinja templates.&lt;/p&gt;
&lt;p&gt;Here's the revised &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def main():
    try:
        os.mkdir(&amp;quot;data&amp;quot;)
    except OSError:
        pass

    path_elements = os.environ[&amp;quot;PATH_INFO&amp;quot;].split(&amp;quot;/&amp;quot;)
    if path_elements[0] == &amp;quot;&amp;quot; and path_elements[1] == &amp;quot;resources&amp;quot;:
        if os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;POST&amp;quot;:
            type_name = path_elements[2]
            base = os.path.join(&amp;quot;data&amp;quot;, type_name)
            try:
                os.mkdir(base)
            except OSError:
                pass
            name = str(uuid.uuid4())
            full_name = os.path.join(base, name)
            data = cgi.parse(sys.stdin)
            output_file = open(full_name, 'w')
            output_file.write(repr(data))
            output_file.write('\n')
            output_file.close()
            html_post_response(type_name, name, data)

        elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 3:
            type_name = path_elements[2]
            html_get_form_response(type_name)

        elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 4:
            type_name = path_elements[2]
            resource_name = path_elements[3]
            full_name = os.path.join(&amp;quot;data&amp;quot;, type_name, resource_name)
            input_file = open(full_name, 'r')
            content = input_file.read()
            input_file.close()
            html_get_response(type_name, resource_name, content)

        else:
            html_error_403_response(path_elements)
    else:
        html_error_404_response(path_elements)
&lt;/pre&gt;
&lt;p&gt;This has the HTML output fully segregated from the rest of the
processing. We can now see the request parsing and the model processing
more clearly. This lets us move further and refactor into yet smaller
and more focused functions. We can see file system updates and file path
creation as part of the underlying model.&lt;/p&gt;
&lt;p&gt;Since these examples are contrived. The processing is essentially a
&lt;tt class="docutils literal"&gt;repr()&lt;/tt&gt; function call. Not too interesting, but the point is to
identify this clearly by refactoring the application to expose it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;When we start to define the classes to properly model the persistent
objects and their state, we'll see that there are zero lines of legacy
code that we can keep.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Zero lines of legacy code have enduring value.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This is not unusual. Indeed, I think it's remarkably common.&lt;/p&gt;
&lt;p&gt;Reworking a CGI application should not be called a &amp;quot;migration.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There is no &amp;quot;migration&amp;quot; of code from Python 2 to Python 3. The Python
2 code is (almost) entirely useless except to explain the use cases.&lt;/li&gt;
&lt;li&gt;There is no &amp;quot;migration&amp;quot; of code from CGI to some better framework.
Flask (and any of the other web frameworks) are nothing like CGI
scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The functionality should be completely rewritten into Python 3 and
Flask. The processing concept is preserved. The data is preserved. The
code is not preserved.&lt;/p&gt;
&lt;p&gt;In some projects, where there are proper classes defined, there may be
some code that can be preserved. However, a Python dataclass may do
everything a more complex Python2 class definition does with a lot less
code. &lt;strong&gt;The Python2 code is not sacred&lt;/strong&gt;. Code should not be preserved
because someone thinks it might reduce cost or risk.&lt;/p&gt;
&lt;p&gt;The old code is useful for three things.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define the unit test cases.&lt;/li&gt;
&lt;li&gt;Define the integration test cases.&lt;/li&gt;
&lt;li&gt;Answer questions about edge cases when writing new code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means we won't be using the &lt;strong&gt;2to3&lt;/strong&gt; tool to convert any of the
code.&lt;/p&gt;
&lt;p&gt;It also means the unit test cases are the new definition of the project.
These are the single most valuable part of the work. Given test cases
that describe the old application, writing the new app using Flask is
relatively easy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>Found an ancient cgi script -- part II -- testing</title><link href="https://slott56.github.io/2021_09_07-found_an_ancient_cgi_script_part_ii_testing.html" rel="alternate"></link><published>2021-09-07T11:00:00-04:00</published><updated>2021-09-07T11:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-09-07:/2021_09_07-found_an_ancient_cgi_script_part_ii_testing.html</id><summary type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;We have an ancient Python2 CGI script -- what do we
do?&lt;/a&gt;&amp;quot;
The previous post in this series provides an overview of the process of
getting rid of legacy code.&lt;/p&gt;
&lt;p&gt;Here's some code. I know it's painfully long; the point is to provide a
super-specific, very concrete example of what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html"&gt;We have an ancient Python2 CGI script -- what do we
do?&lt;/a&gt;&amp;quot;
The previous post in this series provides an overview of the process of
getting rid of legacy code.&lt;/p&gt;
&lt;p&gt;Here's some code. I know it's painfully long; the point is to provide a
super-specific, very concrete example of what to keep and what to
discard. (I've omitted the module docstring and the imports.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
try:
    os.mkdir(&amp;quot;data&amp;quot;)
except OSError:
    pass

path_elements = os.environ[&amp;quot;PATH_INFO&amp;quot;].split(&amp;quot;/&amp;quot;)
if path_elements[0] == &amp;quot;&amp;quot; and path_elements[1] == &amp;quot;resources&amp;quot;:
    if os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;POST&amp;quot;:
        type_name = path_elements[2]
        base = os.path.join(&amp;quot;data&amp;quot;, type_name)
        try:
            os.mkdir(base)
        except OSError:
            pass
        name = str(uuid.uuid4())
        full_name = os.path.join(base, name)
        data = cgi.parse(sys.stdin)
        output_file = open(full_name, 'w')
        output_file.write(repr(data))
        output_file.write('\n')
        output_file.close()

        print &amp;quot;Status: 201 CREATED&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Created New %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % type_name
        print &amp;quot;&amp;lt;body&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;h1&amp;gt;Created New %s&amp;lt;/h1&amp;gt;&amp;quot; % type_name
        print &amp;quot;&amp;lt;p&amp;gt;Path: %s/%s&amp;lt;/p&amp;gt;&amp;quot; % (type_name, name)
        print &amp;quot;&amp;lt;p&amp;gt;Content: &amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;
        print data
        print &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
        # cgi.print_environ()
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
    elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 3:
        type_name = path_elements[2]
        print &amp;quot;Status: 200 OK&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Query %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % (type_name,)
        print &amp;quot;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Create new instance of &amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt;&amp;lt;/h1&amp;gt;&amp;quot; % type_name
        print '&amp;lt;form action=&amp;quot;/cgi-bin/example.py/resources/%s&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;' % (type_name,)
        print &amp;quot;&amp;quot;&amp;quot;
          &amp;lt;label for=&amp;quot;fname&amp;quot;&amp;gt;First name:&amp;lt;/label&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;fname&amp;quot; name=&amp;quot;fname&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
          &amp;lt;label for=&amp;quot;lname&amp;quot;&amp;gt;Last name:&amp;lt;/label&amp;gt;
          &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;lname&amp;quot; name=&amp;quot;lname&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
          &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;
        &amp;quot;&amp;quot;&amp;quot;
        print &amp;quot;&amp;lt;/form&amp;gt;&amp;quot;
        # cgi.print_environ()
        print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
    elif os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] == &amp;quot;GET&amp;quot; and len(path_elements) == 4:
        type_name = path_elements[2]
        resource_name = path_elements[3]
        full_name = os.path.join(&amp;quot;data&amp;quot;, type_name, resource_name)
        input_file = open(full_name, 'r')
        content = input_file.read()
        input_file.close()

        print &amp;quot;Status: 200 OK&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Document %s -- %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % (type_name, resource_name)
        print &amp;quot;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Instance of &amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt;&amp;lt;/h1&amp;gt;&amp;quot; % type_name
        print &amp;quot;&amp;lt;p&amp;gt;Path: %s/%s&amp;lt;/p&amp;gt;&amp;quot; % (type_name, resource_name)
        print &amp;quot;&amp;lt;p&amp;gt;Content: &amp;lt;/p&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;
        print content
        print &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;/body&amp;gt;&amp;quot;
        # cgi.print_environ()
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
    else:
        print &amp;quot;Status: 403 Forbidden&amp;quot;
        print &amp;quot;Content-Type: text/html&amp;quot;
        print
        print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
        print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Forbidden: %s to %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot;  % (os.environ[&amp;quot;REQUEST_METHOD&amp;quot;], path_elements)
        cgi.print_environ()
        print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
else:
    print &amp;quot;Status: 404 Not Found&amp;quot;
    print &amp;quot;Content-Type: text/html&amp;quot;
    print                               # blank line, end of headers
    print &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;html&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Not Found: %s&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; % (os.environ[&amp;quot;PATH_INFO&amp;quot;], )
    print &amp;quot;&amp;lt;h1&amp;gt;Error&amp;lt;/h1&amp;gt;&amp;quot;
    print &amp;quot;&amp;lt;b&amp;gt;Resource &amp;lt;tt&amp;gt;%s&amp;lt;/tt&amp;gt; not found&amp;lt;/b&amp;gt;&amp;quot; % (os.environ[&amp;quot;PATH_INFO&amp;quot;], )
    cgi.print_environ()
    print &amp;quot;&amp;lt;/html&amp;gt;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;At first glance you might notice (1) there are several resource types
located on the URL path, and (2) there are several HTTP methods, also.
These features aren't always obvious in a CGI script, and it's one of
the reasons why CGI is simply horrible.&lt;/p&gt;
&lt;p&gt;It's not clear from this what -- exactly -- the underlying data model is
and what processing is done and what parts are merely CGI and HTML
overheads.&lt;/p&gt;
&lt;p&gt;This is why refactoring this code is absolutely essential to replacing
it.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;We can't refactor without test cases.&lt;/p&gt;
&lt;p&gt;And (bonus).&lt;/p&gt;
&lt;p&gt;We can't have test cases without some vague idea of what this thing
purports to do.&lt;/p&gt;
&lt;p&gt;Let's tackle this in order. Starting with test cases.&lt;/p&gt;
&lt;div class="section" id="unit-test-cases"&gt;
&lt;h2&gt;Unit Test Cases&lt;/h2&gt;
&lt;p&gt;We can't unit test this.&lt;/p&gt;
&lt;p&gt;As written, it's a top-level script without so much as as single def or
class. This style of programming -- while legitimate Python -- is an
epic fail when it comes to testing.&lt;/p&gt;
&lt;p&gt;Step 1, then, is to refactor a script file into a module with
function(s) or class(es) that can be tested.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def main():
    ... the original script ...

if __name__ == &amp;quot;__main__&amp;quot;:  # pragma: no cover
    main()
&lt;/pre&gt;
&lt;p&gt;For proper testability, there can be at most these two lines of code
that are not easily tested. These two (and only these two) are marked
with a special comment (&lt;tt class="docutils literal"&gt;# pragma: no cover&lt;/tt&gt;) so the coverage tool can
politely ignore the fact that we won't try to test these two lines.&lt;/p&gt;
&lt;p&gt;We can now provide a os.environ values that look like a CGI requests,
and exercise this script with concrete unit test cases.&lt;/p&gt;
&lt;p&gt;How many things does it do?&lt;/p&gt;
&lt;p&gt;Reading the code is headache-inducing, so, a fall-back plan is to count
the number of logic paths. Look at if/elif blocks and count those
without thinking too deeply about why the code looks the way it looks.&lt;/p&gt;
&lt;p&gt;There appear to be five distinct behaviors. Since there are
possibilities of unhandled exceptions, there may be as many as 10 things
this will do in production.&lt;/p&gt;
&lt;p&gt;This leads to a unit test that looks like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import unittest
import urllib
import example_2
import os
import io
import sys

class MyTestCase(unittest.TestCase):
    def setUp(self):
        self.cwd = os.getcwd()
        try:
            os.mkdir(&amp;quot;test_path&amp;quot;)
        except OSError:
            pass
        os.chdir(&amp;quot;test_path&amp;quot;)
        self.output = io.BytesIO()
        sys.stdout = self.output
    def tearDown(self):
        sys.stdout = sys.__stdout__
        sys.stdin = sys.__stdin__
        os.chdir(self.cwd)
    def test_path_1(self):
        &amp;quot;&amp;quot;&amp;quot;No /resources in path&amp;quot;&amp;quot;&amp;quot;
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/not/valid&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;invalid&amp;quot;
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 404 Not Found&amp;quot;)
    def test_path_2(self):
        &amp;quot;&amp;quot;&amp;quot;Path /resources but bad method&amp;quot;&amp;quot;&amp;quot;
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/resources/example&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;invalid&amp;quot;
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 403 Forbidden&amp;quot;)
    def test_path_3(self):
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/resources/example&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;GET&amp;quot;
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 200 OK&amp;quot;)
        self.assertIn(&amp;quot;&amp;lt;form &amp;quot;, out)
    def test_path_5(self):
        os.environ[&amp;quot;PATH_INFO&amp;quot;] = &amp;quot;/resources/example&amp;quot;
        os.environ[&amp;quot;REQUEST_METHOD&amp;quot;] = &amp;quot;POST&amp;quot;
        os.environ[&amp;quot;CONTENT_TYPE&amp;quot;] = &amp;quot;application/x-www-form-urlencoded&amp;quot;
        content = urllib.urlencode({&amp;quot;field1&amp;quot;: &amp;quot;value1&amp;quot;, &amp;quot;field2&amp;quot;: &amp;quot;value2&amp;quot;})
        form_data = io.BytesIO(content)
        os.environ[&amp;quot;CONTENT_LENGTH&amp;quot;] = str(len(content))
        sys.stdin = form_data
        example_2.main()
        out = self.output.getvalue()
        first_line = out.splitlines()[0]
        self.assertEqual(first_line, &amp;quot;Status: 201 CREATED&amp;quot;)
        self.assertIn(&amp;quot;'field2': ['value2']&amp;quot;, out)
        self.assertIn(&amp;quot;'field1': ['value1']&amp;quot;, out)


if __name__ == '__main__':
    unittest.main()
&lt;/pre&gt;
&lt;p&gt;Does this have 100% code coverage? I'll leave it to the reader to
copy-and-paste, add the &lt;tt class="docutils literal"&gt;coverage run&lt;/tt&gt; command and look at the output.
What else is required?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-test-case"&gt;
&lt;h2&gt;Integration Test Case&lt;/h2&gt;
&lt;p&gt;We can (barely) do an integration test on this. It's tricky because we
don't want to run Apache httpd (or some other server.) We want to run a
small Python script to be sure this works.&lt;/p&gt;
&lt;p&gt;This means we need to (1) start a server as a separate process, and (2)
use urllib to send requests to that separate process. This isn't too
difficult. Right now, it's not &lt;em&gt;obviously&lt;/em&gt; required. The test cases
above run the entire script from end to end, providing what we think are
appropriate mock values. Emphasis on &amp;quot;what we think.&amp;quot; To be sure, we'll
need to actually fire up a separate process.&lt;/p&gt;
&lt;p&gt;As with the unit tests, we need to enumerate &lt;strong&gt;all&lt;/strong&gt; of the expected
behaviors.&lt;/p&gt;
&lt;p&gt;Unlike the unit tests, there are (generally) fewer edge cases.&lt;/p&gt;
&lt;p&gt;It looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import unittest
import subprocess
import time
import urllib2

class TestExample_2(unittest.TestCase):
    def setUp(self):
        self.proc = subprocess.Popen(
            [&amp;quot;python2.7&amp;quot;, &amp;quot;mock_httpd.py&amp;quot;],
            cwd=&amp;quot;previous&amp;quot;
        )
        time.sleep(0.25)
    def tearDown(self):
        self.proc.kill()
        time.sleep(0.1)
    def test(self):
        req = urllib2.Request(&amp;quot;http://localhost:8000/cgi-bin/example.py/resources/example&amp;quot;)
        result = urllib2.urlopen(req)
        self.assertEqual(result.getcode(), 200)
        self.assertEqual(set(result.info().keys()), set(['date', 'status', 'content-type', 'server']))
        content = result.read()
        self.assertEqual(content.splitlines()[0], &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot;)
        self.assertIn(&amp;quot;&amp;lt;form &amp;quot;, content)

if __name__ == '__main__':
    unittest.main()
&lt;/pre&gt;
&lt;p&gt;This will start a separate process and then make a request from that
process. After the request, it kills the subprocess.&lt;/p&gt;
&lt;p&gt;We've only covered one of the behaviors. A bunch more test cases are
required. They're all going to be reasonably similar to the &lt;tt class="docutils literal"&gt;test()&lt;/tt&gt;
method.&lt;/p&gt;
&lt;p&gt;Note the &lt;tt class="docutils literal"&gt;mock_httpd.py&lt;/tt&gt; script. It's a tiny thing that invokes CGI's.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import CGIHTTPServer
import BaseHTTPServer

server_class = BaseHTTPServer.HTTPServer
handler_class = CGIHTTPServer.CGIHTTPRequestHandler

server_address = ('', 8000)
httpd = server_class(server_address, handler_class)
httpd.serve_forever()
&lt;/pre&gt;
&lt;p&gt;This will run any script file in the cgi-bin directory, acting as a kind
of mock for Apache httpd or other CGI servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tests-pass-now-what"&gt;
&lt;h2&gt;Tests Pass, Now What?&lt;/h2&gt;
&lt;p&gt;We need to formalize our knowledge with a some diagrams. This is a
Context diagram in PlantUML. It draws a picture that we can use to
discuss what this app does and who actually uses it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;startuml
actor user
usecase post
usecase query
usecase retrieve
user --&amp;gt; post
user --&amp;gt; query
user --&amp;gt; retrieve

usecase 404_not_found
usecase 403_not_permitted
user --&amp;gt; 404_not_found
user --&amp;gt; 403_not_permitted

retrieve &amp;lt;|-- 404_not_found
&amp;#64;enduml
&lt;/pre&gt;
&lt;p&gt;We can also update the Container diagram. There's an &amp;quot;as-is&amp;quot; version and
a &amp;quot;to-be&amp;quot; version.&lt;/p&gt;
&lt;p&gt;Here's the as-is diagram of any CGI.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;startuml
interface HTTP

node &amp;quot;web server&amp;quot; {
    component httpd as  &amp;quot;Apache httpd&amp;quot;
    interface cgi
    component app
    component python
    python --&amp;gt; app
    folder data
    app --&amp;gt; data
}

HTTP --&amp;gt; httpd
httpd -&amp;gt; cgi
cgi -&amp;gt; python
&amp;#64;enduml
&lt;/pre&gt;
&lt;p&gt;Here's a to-be diagram of a typical (small) Flask application.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;startuml
interface HTTP

node &amp;quot;web server&amp;quot; {
    component httpd as  &amp;quot;nginx&amp;quot;
    component uwsgi
    interface wsgi
    component python
    component app
    component model
    component flask
    component jinja
    folder data
    folder static
    httpd --&amp;gt; static
    python --&amp;gt; wsgi
    wsgi --&amp;gt; app
    app --&amp;gt; flask
    app --&amp;gt; jinja
    app -&amp;gt; model
    model --&amp;gt; data
}

HTTP --&amp;gt; httpd
httpd -&amp;gt; uwsgi
uwsgi -&amp;gt; python
&amp;#64;enduml
&lt;/pre&gt;
&lt;p&gt;These diagrams can help to clarify how the CGI will be restructured. A
complex CGI might have a database or external web services involved.
These should be correctly depicted.&lt;/p&gt;
&lt;p&gt;The previous post on this subject said we can now refactor this code.
The unit tests are required before making any real changes. (Yes, we
made one change to promote testability by repackaging a script to be a
function.)&lt;/p&gt;
&lt;p&gt;We're aimed to start disentangling the HTML and CGI overheads from the
application and narrowing our focus onto the useful things it does.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>We have an ancient Python2 CGI script -- what do we do?</title><link href="https://slott56.github.io/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html" rel="alternate"></link><published>2021-08-31T11:00:00-04:00</published><updated>2021-08-31T11:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-31:/2021_08_31-we_have_an_ancient_python2_cgi_script_what_do_we_do.html</id><summary type="html">&lt;p&gt;This was a shocking email: the people have a Python 2 CGI script. They
needed advice on Python 2 to 3 migration.&lt;/p&gt;
&lt;p&gt;Here's my advice on a Python 2 CGI script: &lt;strong&gt;Throw It Away&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A great deal of the CGI processing is part of the wsgi module, as well
as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was a shocking email: the people have a Python 2 CGI script. They
needed advice on Python 2 to 3 migration.&lt;/p&gt;
&lt;p&gt;Here's my advice on a Python 2 CGI script: &lt;strong&gt;Throw It Away&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A great deal of the CGI processing is part of the wsgi module, as well
as tools like jinja and flask. This means that the ancient Python 2 CGI
script has to be disentangled into two parts.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All the stuff that deals with CGI and HTML. This isn't valuable and
must be deleted.&lt;/li&gt;
&lt;li&gt;Whatever additional, useful, interesting processing it does for the
various user communities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second part -- the useful work -- needs to be preserved. The rest is
junk.&lt;/p&gt;
&lt;p&gt;With web services there are often at least three communities: the
&amp;quot;interactive users&amp;quot;, &amp;quot;analysts&amp;quot;, and the administrators who keep it
running. The names vary a lot with the problem domain. The interactive
users may further decompose into anonymous visitors, people with
privileges to make changes, and administrators to manage the privileges.
There may be multiple flavors of analytical work based on the web
transactions that are logged. A lot can go on, and each of these
communities has a feature set they require.&lt;/p&gt;
&lt;p&gt;The idea here is to look at the project as a rewrite where &lt;strong&gt;some&lt;/strong&gt; of
the legacy code may be preserved. It's better to proceed as though this
is new development with the legacy code providing examples and test
cases. If we look at this as new, we'll start with some diagrams to
provide a definition of done.&lt;/p&gt;
&lt;div class="section" id="step-one"&gt;
&lt;h2&gt;Step One&lt;/h2&gt;
&lt;p&gt;Understand the user communities. Create a &lt;a class="reference external" href="https://c4model.com"&gt;4C&lt;/a&gt;
Context Diagram to show who the users are and what the expect. Ideally,
it's small with &amp;quot;users&amp;quot; and &amp;quot;administrators.&amp;quot; It may turn out to be big
with complex privilege rules to segregate users.&lt;/p&gt;
&lt;p&gt;It's hard to get this right. Everyone wants the code &amp;quot;converted&amp;quot;. But no
one really knows all the things the code does. There's a lot of pressure
to ignore this step.&lt;/p&gt;
&lt;p&gt;This step creates the definition of done. Without this, there's no way
to do anything with the CGI code and make sure that the original
features still work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-two"&gt;
&lt;h2&gt;Step Two&lt;/h2&gt;
&lt;p&gt;Create a &lt;a class="reference external" href="https://c4model.com"&gt;4C&lt;/a&gt; Container Diagram showing the
Apache HTTPD (or whatever server you're using) that fires the CGI.
Document all other ancillary things are going on. Ideally, there's
nothing. Ideally, this is a minor, stand-alone server that no one
noticed until today. Label this picture &amp;quot;As Is.&amp;quot; It will change, but you
need a checklist of what's running right now.&lt;/p&gt;
&lt;p&gt;(This should be very quick to produce. If it's not, go back to step one
and make sure you really understand the context.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-three"&gt;
&lt;h2&gt;Step Three&lt;/h2&gt;
&lt;p&gt;Create a &lt;a class="reference external" href="https://c4model.com"&gt;4C&lt;/a&gt; Component Diagram, and label it
&amp;quot;As Is&amp;quot;. This has all the parts of your code base. Be sure you locate
all the things in the local site-packages directory that were added onto
Python. Ideally, there isn't much, but -- of course -- there could be
dozens of add-on libraries.&lt;/p&gt;
&lt;p&gt;You will have several lists. One list has all the things in
site-packages. If the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; environment variable is used, all
the things in the directories named in this environment variable. Plus.
All the things named in &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; statements.&lt;/p&gt;
&lt;p&gt;These lists should overlap. Of course someone can install a package
that's not used, so the site-packages list should be a superset of the
import list.&lt;/p&gt;
&lt;p&gt;This is a checklist of things that must be read (and possibly converted)
to build the new features.&lt;/p&gt;
&lt;p&gt;Step Four?&lt;/p&gt;
&lt;p&gt;You'll need two suites of fully automated tests.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit tests for the Python code. This must have 100% code coverage and
will not be easy.&lt;/li&gt;
&lt;li&gt;Integration tests for the CGI. You will be using the WSGI module
instead of Apache HTTPD (or whatever the server was) for this
testing. You will NOT integrate with the original web server,
because, that interface is no longer supported and is a security
nightmare.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's break this into two steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-four"&gt;
&lt;h2&gt;Step Four&lt;/h2&gt;
&lt;p&gt;You need automated unit tests. You need to reach at last 100% code
coverage for the unit tests. This is going to be difficult for two
reasons. First, the legacy code may not be easy to read or test. Second,
Python 2 testing tools are no longer well supported. Many of them still
work, but if you encounter problems, the tool will never be fixed.&lt;/p&gt;
&lt;p&gt;If you can find a Python 2 version of &lt;strong&gt;coverage&lt;/strong&gt;, and a Python 2
version of &lt;strong&gt;pytest&lt;/strong&gt;, I suggest using this combination to write a test
suite, and make sure you have 100% code coverage.&lt;/p&gt;
&lt;p&gt;This is a lot of work, and there's no way around it. Without automated
testing, there's no way to prove that you're done and the software can
be trusted in production.&lt;/p&gt;
&lt;p&gt;You will find bugs. Don't fix them now. Log them by marking the test
case with the proper answer different from the answer you're getting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-five"&gt;
&lt;h2&gt;Step Five&lt;/h2&gt;
&lt;p&gt;Python has a built-in CGI server you can use.
See &lt;a class="reference external" href="https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler"&gt;https://docs.python.org/3/library/http.server.html#http.server.CGIHTTPRequestHandler&lt;/a&gt;
for a handler that will provide core CGI features from a Python script
allowing you to test without the overhead of Apache httpd or some other
server.&lt;/p&gt;
&lt;p&gt;You need an integration test suite for each user stories in the context
you created in Step One. No exceptions. Each User. Each Story. A test to
show that it works.&lt;/p&gt;
&lt;p&gt;You'll likely want to use the CGIHTTPRequestHandler class in the
http.server module to create a test server. You'll then create a pytest
fixture that starts the web server before a test and then kills the
process after the test. It's very important to use subprocess.Popen() to
start and stop the target server to be sure the CGI interface works
correctly.&lt;/p&gt;
&lt;p&gt;It is common to find bugs. Don't fix them now. Log them by marking the
test case with the proper answer different from the answer you're
getting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-six"&gt;
&lt;h2&gt;Step Six&lt;/h2&gt;
&lt;p&gt;Refactor. Now that you have automated tests to prove the legacy CGI
script really works, you need to disentangle the Python code into three
distinct components.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A Component to parse the request: the methods, cookies, headers, and
URL.&lt;/li&gt;
&lt;li&gt;A Component that does useful work. This corresponds to the &amp;quot;model&amp;quot;
and &amp;quot;control&amp;quot; part of the MVC design pattern.&lt;/li&gt;
&lt;li&gt;A Component that builds the response: the status, headers, and
content.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In many CGI scripts, there is often a hopeless jumble of bad code.
Because you have tests in Step Four and Step Five, you can refactor and
confirm the tests still pass.&lt;/p&gt;
&lt;p&gt;If the code is already nicely structured, this step is easy. Don't plan
on it being easy.&lt;/p&gt;
&lt;p&gt;One goal is to eventually replace HTML page output creation with jinja.
Similarly, another goal is to eventually replace parsing the request
with flask. All of the remaining CGI-related features get pushed into a
wsgi-compatible plug-in to a web server.&lt;/p&gt;
&lt;p&gt;The component that does the useful work will have some underlying data
model (resources, files, downloads, computations, something) and some
control (post, get, different paths, queries.) We'd like to clean this
up, too. For now, it can be one module.&lt;/p&gt;
&lt;p&gt;After refactoring, you'll have a new working application. You'll have a
new top-level CGI script that uses the built-in wsgi module to do
request and response processing. This is temporary, but is required to
pass the integration test suite.&lt;/p&gt;
&lt;p&gt;You may want to create an intermediate Component diagram to describe the
new structure of the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-seven"&gt;
&lt;h2&gt;Step Seven&lt;/h2&gt;
&lt;p&gt;Write an OpenAPI specification for the revised application.
See &lt;a class="reference external" href="https://swagger.io/specification/"&gt;https://swagger.io/specification/&lt;/a&gt; for more information. Add the path
processing so openapi.json (or openapi.yaml) will produce the
specification. This means updating unit and integration tests to add
this feature.&lt;/p&gt;
&lt;p&gt;While this is new development, it is absolutely essential for building
any kind of web service. It will implement the Context diagram, and most
of the Container diagram. It will describe significant portions of the
Component diagram, also. It is not optional. It's very likely this was
not part of the legacy application.&lt;/p&gt;
&lt;p&gt;Some of the document structures described in the OpenAPI specification
will be based on the data model and control components factored out of
the legacy code. It's essential to get these details write in the
OpenAPI specification and the unit tests.&lt;/p&gt;
&lt;p&gt;This may expose problems in the CGI's legacy behavior. Don't fix it now.
Instead document the features that don't fit with modern API's. Don't be
afraid to use # TODO comments to show what should be fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-eight"&gt;
&lt;h2&gt;Step Eight&lt;/h2&gt;
&lt;p&gt;Use the 2to3 tool to convert ONLY the model and control components. Do
not convert request parsing and response processing components; they
will be discarded. This may involve additional redesign and rewrites
depending on how bad the old code was.&lt;/p&gt;
&lt;p&gt;Convert the unit tests for ONLY the model and control
components components.&lt;/p&gt;
&lt;p&gt;Get the unit tests for the model and control to work in Python 3. This
is the foundation for the new web site. Update the C4 container,
component, and code diagrams. Since there's no request handling or HTML
processing, don't worry about code coverage for the project as a whole.
Only get the model and control to have 100% coverage.&lt;/p&gt;
&lt;p&gt;Do not start writing view functions or HTML templates until underlying
model and control module works. This is the foundation of the
application. It is not tied to HTTP, but must exist and be tested
independently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-nine"&gt;
&lt;h2&gt;Step Nine&lt;/h2&gt;
&lt;p&gt;Using Flask as a framework and the OpenAPI specification for the web
application, build the view functions to exercise all the features of
the application. Build Jinja templates for the HTML output. Use proper
cookie management from Flask, discarding any legacy cookie management
from the CGI. Use proper header parsing rules in Flask, discarding any
legacy header processing.&lt;/p&gt;
&lt;p&gt;Rewrite the remaining unit tests manually. These unit tests will now use
the Flask test client. The goal is to get back to 100% code coverage.&lt;/p&gt;
&lt;p&gt;Update the C4 container, component, and code diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-ten"&gt;
&lt;h2&gt;Step Ten&lt;/h2&gt;
&lt;p&gt;There are untold number of ways to deploy a Flask application. Pick
something simple and secure. Do some test deployments to be sure you
understand how this works. As one example, you can continue to use
Apache httpd. As another example, some people prefer GUnicorn, others
prefer to use NGINX. There's lots of advice in the Flask project on ways
to deploy Flask applications.&lt;/p&gt;
&lt;p&gt;Do not reuse the Apache httpd and CGI interface. This was terrible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-eleven"&gt;
&lt;h2&gt;Step Eleven&lt;/h2&gt;
&lt;p&gt;Create a pyproject.toml file that includes a tox section so that you
have a fully-automated integration capability. You can automate the
CI/CD pipeline. Once the new app is in production, you can archive the
old code and never use it again for anything. Ever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-twelve"&gt;
&lt;h2&gt;Step Twelve&lt;/h2&gt;
&lt;p&gt;Fix the bugs you found in Steps Four, Five, and Seven. You will be
creating a new release with new, improved features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;This is a lot of work. There's no real alternative. CGI scripts need a
lot of rework.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Apache"></category><category term="wsgi"></category><category term="CGI"></category><category term="#python"></category></entry><entry><title>Spreadsheets, COBOL, and Schema-Driven File Processing</title><link href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html" rel="alternate"></link><published>2021-08-24T09:00:00-04:00</published><updated>2021-08-24T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-24:/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html</id><summary type="html">&lt;p&gt;I need to rewrite &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt;. This project
handles a certain amount of file processing using a schema to assure the
Logical Layout is understood.  It handles several common Physical
Formats:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSV files where the format is extended by the various dialects
options.&lt;/li&gt;
&lt;li&gt;COBOL files in ASCII or EBCDIC.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I need to rewrite &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt;. This project
handles a certain amount of file processing using a schema to assure the
Logical Layout is understood.  It handles several common Physical
Formats:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSV files where the format is extended by the various dialects
options.&lt;/li&gt;
&lt;li&gt;COBOL files in ASCII or EBCDIC.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project's code can be applied to text files where a regular
expression can yield a row-level dictionary object. Web server log
files, for example, are in first normal form, but have irregular
punctuation that CSV can't handle.&lt;/p&gt;
&lt;p&gt;It can also be applied to NDJSON files (see &lt;a class="reference external" href="http://ndjson.org"&gt;http://ndjson.org&lt;/a&gt;
or &lt;a class="reference external" href="https://jsonlines.org"&gt;https://jsonlines.org&lt;/a&gt;) without too much work. This also means it can
be applied to YAML files. I suspect it can also be applied to TOML files
as a distinct physical format.&lt;/p&gt;
&lt;p&gt;The complication in the Singran Reader is that COBOL files aren't really
in first normal form. They can have repeating groups of fields that CSV
files don't (generally) have. And the initial data model in the project
wasn't really up to handling this cleanly. The repeating group logic was
patched in.&lt;/p&gt;
&lt;p&gt;Further complicating this particular project was the history of its
evolution. It started as a way to grub through hellishly complex CSV
files. You know, the files where there are no headings, or the headings
are 8 lines long, or the files where there are a lot of lines before the
proper headings for the data. It handled all of those
not-first-normal-form issues that arise in CSV world.&lt;/p&gt;
&lt;p&gt;I didn't (initially) understand JSON Schema (&lt;a class="reference external" href="https://json-schema.org"&gt;https://json-schema.org&lt;/a&gt;)
and did not leverage it properly as an intermediate representation for
CSV as well as COBOL layouts. It arose as a kind of after-thought. There
are a lot of todo's related to applying JSON Schema to the problem.&lt;/p&gt;
&lt;p&gt;Recently, I learned about Lowrance USR files.
See &lt;a class="reference external" href="https://github.com/slott56/navtools"&gt;https://github.com/slott56/navtools&lt;/a&gt; in general
and &lt;a class="reference external" href="https://github.com/slott56/navtools/blob/master/navtools/lowrance_usr.py"&gt;https://github.com/slott56/navtools/blob/master/navtools/lowrance_usr.py&lt;/a&gt;
for details.&lt;/p&gt;
&lt;p&gt;It turns out that the USR file &lt;strong&gt;could&lt;/strong&gt; be described, reasonably well,
with a Stingray schema. More to the point, it &lt;strong&gt;should&lt;/strong&gt; be describable
by a Stingray schema, and the application to extract waypoints or routes
should look a lot like a CSV reader.&lt;/p&gt;
&lt;div class="section" id="consequences"&gt;
&lt;h2&gt;Consequences&lt;/h2&gt;
&lt;p&gt;There are a bunch of things I need to do.&lt;/p&gt;
&lt;p&gt;First, and foremost, I need to unwind some of the COBOL field extraction
logic. It's a right awful mess because of the way I hacked in
&lt;tt class="docutils literal"&gt;OCCURS DEPENDING ON&lt;/tt&gt;. The USR files also have numerous instances of
arrays with a boundary defined by other content of the file. This is a
JSON Schema Extension (not a weird COBOL special case) and I need to use
proper JSON schema extensions and attribute cross-references.&lt;/p&gt;
&lt;p&gt;Of course, the &lt;tt class="docutils literal"&gt;OCCURS DEPENDING ON&lt;/tt&gt; clauses can nest, leading to
quite complex navigation through a dynamically-sized collection of
bytes. This is not done terribly well in the current version, and
involves leaving little state reminders around to &amp;quot;simplify&amp;quot; some of the
coding.&lt;/p&gt;
&lt;p&gt;The field extractions for COBOL apply to binary files and should be able
to leverage the Python &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt; module to decode individual fields. We
should be able to also extract data from USR files. The schema can be in
pure JSON or it can be in Python as an internal data structure. This is
a new feature and (in principle) can be applied to a variety of binary
files that are in (approximately) first normal form.&lt;/p&gt;
&lt;p&gt;(It may also be sensible to extend the &lt;tt class="docutils literal"&gt;struct&lt;/tt&gt; module to handle some
EBCDIC conversions: int, float, packed-decimal, numeric string, and
alphanumeric string.)&lt;/p&gt;
&lt;p&gt;Once we can handle COBOL and USR file occurs-depending-on with some JSON
Schema extensions, we can then work on ways to convert source material
(including JSON Schema) to the internal representation of a schema.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;CSV headers -&amp;gt; JSON Schema has an API that has worked in the past.
The trivial case of first-line-is-degenerate-schema and
schema-in-a-separate-file are pleasant. The more complex cases of
skip-a-bunch-of-prefix-lines is a bit more complex, but isn't much of
a rewrite. This recovers the original feature of handling CSV files
in all their various incarnations and dialects with more formally
defined schema. It means that CSV with type conversions can be
handled.&lt;/li&gt;
&lt;li&gt;Parse COBOL DDE  -&amp;gt; JSON Schema. The COBOL parser is a bit of a hacky
mess. A better lexical scanner would simplify things slightly.
Because the field extraction logic will be rebuilt, we'll also have
the original feature of being able to directly decode Z/OS EBCDIC
files in Python.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This feels ambitious because the original design was so weak.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="stingray reader"></category><category term="EBCDIC"></category><category term="COBOL"></category></entry><entry><title>I Have Code That Didn't Work. What Now?</title><link href="https://slott56.github.io/2021_08_17-i_have_code_that_didnt_work_what_now.html" rel="alternate"></link><published>2021-08-17T09:00:00-04:00</published><updated>2021-08-17T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-17:/2021_08_17-i_have_code_that_didnt_work_what_now.html</id><summary type="html">&lt;p&gt;I don't get many of these &amp;quot;I have code that doesn't work&amp;quot; requests. But
I do see them once in a great while.&lt;/p&gt;
&lt;p&gt;It might be something like the following two-part explanation with a
following question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have this code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from base64 import b64encode
def some_func(message):
    msg = b64encode(message …&lt;/pre&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I don't get many of these &amp;quot;I have code that doesn't work&amp;quot; requests. But
I do see them once in a great while.&lt;/p&gt;
&lt;p&gt;It might be something like the following two-part explanation with a
following question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have this code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from base64 import b64encode
def some_func(message):
    msg = b64encode(message)

msg = some_func(b'hello world')
print(f&amp;quot;padding = {msg.count(b'=')}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;I'm getting this error.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Traceback (most recent call last):
  File &amp;quot;/Users/slott/miniconda3/envs/CaseStudy39/lib/python3.9/site-packages/IPython/core/interactiveshell.py&amp;quot;, line 3437, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File &amp;quot;&amp;lt;ipython-input-18-d54347890e97&amp;gt;&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    print(f&amp;quot;padding = {msg.count(b'=')}&amp;quot;)
AttributeError: 'NoneType' object has no attribute 'count'
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;What can I do?&lt;/p&gt;
&lt;p&gt;&amp;lt;rant&amp;gt;As a personal note, I'm extremely grumpy when I get this in the
form of a screen picture. I cannot work with images of code. It's really
important to present code as text. Not a picture of text. &amp;lt;/rant&amp;gt;&lt;/p&gt;
&lt;p&gt;There are two kinds of answers to this question.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's obvious (to me) what's wrong. While I can say what the problem
is likely to be, that doesn't help the questioner.&lt;/li&gt;
&lt;li&gt;The questioner needs a strategy for getting to working software.
This, of course, can piss off some people because they insist all
questions have simple answers and I'm just being unhelpful by giving
them a bunch of steps they're supposed to follow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm going to stick to answers of the second kind. I don't provide
answers of the first kind.&lt;/p&gt;
&lt;div class="section" id="the-two-general-answers"&gt;
&lt;h2&gt;The Two General Answers&lt;/h2&gt;
&lt;p&gt;There are two general answers of the second kind.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Use the debugger.&lt;/li&gt;
&lt;li&gt;Add &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm told the debugger can be fun to use. I'm not skilled in using it, so
I don't generally recommend it. I find it difficult to uncover state
change using the debugger. It's great for exploring a data structure.&lt;/p&gt;
&lt;p&gt;Adding &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; is something I find easier and more useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-print"&gt;
&lt;h2&gt;Add print()&lt;/h2&gt;
&lt;p&gt;Here's what folks can do to uncover a problem. This is all we ever need
to do. There are no weird other cases or complex situations where this
doesn't work.&lt;/p&gt;
&lt;p&gt;The procedure for adding &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; works like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Find the line with the error. In the example, it's the final
&lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Look at all the variables. In this case, there's only one, &lt;tt class="docutils literal"&gt;msg&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Put a &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; in front to show the values of all the variables.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;print(f&amp;quot;{msg=}&amp;quot;)&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will reveal that &lt;tt class="docutils literal"&gt;msg is None&lt;/tt&gt; after the assignment statement.&lt;/p&gt;
&lt;p&gt;Now we have to look at the function, &lt;tt class="docutils literal"&gt;some_func()&lt;/tt&gt;, that creates the
value for &lt;tt class="docutils literal"&gt;msg&lt;/tt&gt;. We'll start from the end of this function and work
forward, following the above three-step procedure faithfully. And
recursively.&lt;/p&gt;
&lt;p&gt;Eventually, we'll uncover the problem. It may not be blazingly obvious,
but we will, without fail, find a missing state change or an unexpected
state change. (In this case, it's missing.)&lt;/p&gt;
&lt;p&gt;I can't emphasize enough that this is done as simply and directly as
possible. If the code is hellishly complex, perhaps it should be
refactored until this can be done. If the test case involves
hyper-complex conditions before it fails, then perhaps the code needs to
be refactored until this can be done.&lt;/p&gt;
&lt;p&gt;This is the only answer I can ever give to &amp;quot;why doesn't my code work?&amp;quot;
question: Add &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="debugging"></category></entry><entry><title>Why Python Is Weird For C++ Developers -- Some Thoughts</title><link href="https://slott56.github.io/2021_08_10-why_python_is_weird_for_c_developers_some_thoughts.html" rel="alternate"></link><published>2021-08-10T09:00:00-04:00</published><updated>2021-08-10T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-10:/2021_08_10-why_python_is_weird_for_c_developers_some_thoughts.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://betterprogramming.pub/9-reasons-why-python-is-weird-for-c-developers-b37e650471d6"&gt;9 Reasons Why Python Is Weird For C++
Developers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm often bothered by inter-language comparisons. Mostly because
programming languages -- except in the most abstract way -- aren't
really very comparable. At the Turing Machine level the finite state
automata are comparable, but that reductionist view (intentionally)
eliminates all the expressive …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://betterprogramming.pub/9-reasons-why-python-is-weird-for-c-developers-b37e650471d6"&gt;9 Reasons Why Python Is Weird For C++
Developers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm often bothered by inter-language comparisons. Mostly because
programming languages -- except in the most abstract way -- aren't
really very comparable. At the Turing Machine level the finite state
automata are comparable, but that reductionist view (intentionally)
eliminates all the expressive power from a given language.&lt;/p&gt;
&lt;p&gt;Let's look at the reasons in some detail. A few of them actually are
interesting.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Whitespace&lt;/strong&gt;. I'm dismissive of this as an interesting difference.
When I read code in EVERY other programming language, I'm immediately
aware that programmers can indent. Indeed, I've seen C and C++ code
were {}'s were omitted, but the code was indented properly, making it
devilishly hard to debug. My experience is that folks get the
indentation right BEFORE the get the {}'s right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Syntax&lt;/strong&gt;. In this article, it's the lack of {}'s. Again, I'm
dismissive because I've actually helped folks learning C++ who had
the indentation right and the {}'s wrong. This is ony &amp;quot;weird&amp;quot; if
you're absolutely and completely convinced that {}'s are somehow a
divine requirement that transcends all human attempts at
interpretation. With Unicode, we're in a position to separate set
membership from block-of-code and start using multiple variants on
{}'s.  I'd vote for &lt;tt class="docutils literal"&gt;if a &amp;gt; b 【m = a】else 【m = b】&lt;/tt&gt; using
【】for code blocks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class Variables&lt;/strong&gt;. This points out an inherent ambiguity of C++.
Most of the time, most things are not &amp;quot;static&amp;quot;. They're &amp;quot;automatic&amp;quot;
that is, associated with the instance. The auto keyword, however, is
rarely used, and is mostly assumed. Python (outside &lt;strong&gt;dataclasses&lt;/strong&gt;)
is more consistent. All things inside the class statement are
&amp;quot;static&amp;quot;: part of the class. In the case of &lt;strong&gt;dataclasses&lt;/strong&gt;, this
simple rule is broken, which can be confusing. But. This wasn't
mentioned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pointer and Reference Transparency&lt;/strong&gt;. This is simple confusion. All
Python is handled by reference all the time. C++ is an absolute mess
of &amp;quot;primitive&amp;quot; types that don't use references and objects that do
use references. Java is just as bad. And I want to emphasize bad.
Python is perfectly consistent, and -- I would suggest -- the
opposite of weird. But. The article is describing things from a C++
perspective, as if C++ were somehow not weird. I suggest this isn't a
great approach.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private Class Members&lt;/strong&gt;. This is summarized as &amp;quot;better
encapsulation and control&amp;quot; without a concrete example. It's hard to
provide a concrete example because the Pythonic approach works so
well. The only use case for &amp;quot;private&amp;quot; that I've been able to
understand is when you're concealing the entire implementation from
all scrutiny. That is, you have a proprietary implementation with an
encrypted JAR file and you want to avoid revealing it to protect some
intellectual property. Since Python is source, this can't happen, and
we say &amp;quot;We're all adults here.&amp;quot; Flag it with a leading _ and we'll
recognize it as part of an implementation detail that might change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self vs. this&lt;/strong&gt;. Not sure what this is but the phrase &amp;quot;only major
programming language&amp;quot; is something that relies on Java and C++ being
near the top of the TIOBE index. I suspect we can find a lot of
languages that use neither &amp;quot;self&amp;quot; nor &amp;quot;this&amp;quot;. I'm not sure exactly
how this is weird, but, I get that it's different.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Return Values&lt;/strong&gt;. This seems like an intentional refusal to
understand how tuples and tuple unpacking work. Again, this seems to
make C++ the yardstick when C++ is clearly kind of weird here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Strong Data Types&lt;/strong&gt;. This seems like another refusal to
understand Python. In this case, it feels like it's a refusal
understand that objects are strongly typed in Python and variables
are transient labels attached to objects. The mypy tool will try to
associate a type with a variable and will warn you about
&lt;tt class="docutils literal"&gt;a = &amp;quot;string&amp;quot;&lt;/tt&gt; followed by &lt;tt class="docutils literal"&gt;a = 42&lt;/tt&gt;. Perhaps I'm not
understanding, but the portrayal of C++ rules as &amp;quot;not weird&amp;quot; seems
like it's being taken too far.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Constants&lt;/strong&gt;. This isn't completely true. Some folks use enums to
provide enumerated numeric constant values in the rare cases where
this might matter. Using global variables as constants actually works
out fine in practice. Most tools will look for ALL_CAPS names on the
left of an = sign; and if this occurs more than once will raise a
warning. If you have really stupid fellow programmers who can't
understand how some variables shouldn't be reused, you can easily
write a script to walk the AST looking for references to global
variables and warn your colleagues that there are rules and they're
not following them. This is part and parcel of the &amp;quot;We're all adults
here&amp;quot; approach. If folks can't figure out how constants work, you
need to collaborate more fully with other developers to help them
understand this.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm unhappy with lifting up C++ quirks as if they're somehow really
important. I don't think C++ is a terribly helpful language. The need
for explicit memory management, for example, is a terrible problem. The
explicit distinction between primitives and objects is also terrible.&lt;/p&gt;
&lt;p&gt;While compare-and-contrast with Python might be helpful for C++
expatriates, I think this article has it exactly backwards. I think the
following list couuld be more useful.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python frees you from counting {}'s. Just indent. It's easier.&lt;/li&gt;
&lt;li&gt;Python has simple rules for class/instance variables (except in the
case of dataclasses and named tuples.) Also: if it starts with
&lt;tt class="docutils literal"&gt;self.&lt;/tt&gt; it's an instance variable.&lt;/li&gt;
&lt;li&gt;Python is all references without the horrifying complexity of
primitive types.&lt;/li&gt;
&lt;li&gt;We're all adults here. Don't stress yourself out over privacy or
constants. Document your code, instead. Write a unit test case or
two. Use mypy. Use black.&lt;/li&gt;
&lt;li&gt;Tuple unpacking and the fact that tuples are often implied works out
very nicely to create very clean code.&lt;/li&gt;
&lt;li&gt;Data types are part of the object. There's no magical &amp;quot;cast&amp;quot;
capability to process a block of bytes as if they're some other
type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are advantages of Python. And disadvantages of C++. I think
it's better to talk about what Python has than what Python lacks when
measured against a terribly complex language like C++.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="C++"></category><category term="Programming Languages"></category></entry><entry><title>Writing Interactive Compute-Intensive Programs for Web Browsers</title><link href="https://slott56.github.io/2021_08_03-writing_interactive_compute_intensive_programs_for_web_browsers.html" rel="alternate"></link><published>2021-08-03T09:00:00-04:00</published><updated>2021-08-03T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-08-03:/2021_08_03-writing_interactive_compute_intensive_programs_for_web_browsers.html</id><summary type="html">&lt;p&gt;Fascinating. The reference to the classic Mac OS with non-preemptive
multi-tasking is quite cool. The concept fits nicely with Python's
async/await coroutines that need to collaborate with a periodic OS
request to permit interaction with streams of events from another
source (i.e., a foreground window.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://link.medium.com/5KY6wClGAhb"&gt;Writing Interactive Compute-Intensive …&lt;/a&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Fascinating. The reference to the classic Mac OS with non-preemptive
multi-tasking is quite cool. The concept fits nicely with Python's
async/await coroutines that need to collaborate with a periodic OS
request to permit interaction with streams of events from another
source (i.e., a foreground window.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://link.medium.com/5KY6wClGAhb"&gt;Writing Interactive Compute-Intensive Programs for Web
Browsers&lt;/a&gt; by Henry Kautz
Download Medium on the &lt;a class="reference external" href="https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&amp;amp;mt=8&amp;amp;ct=app_email_share"&gt;App
Store&lt;/a&gt;
or &lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.medium.reader&amp;amp;referrer=utm_source%3Dios_app%26utm_medium%3Demail%26utm_campaign%3Dios_app_email_share"&gt;Play
Store&lt;/a&gt;&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="parallel processing"></category></entry><entry><title>How can people find inspiration at work? #CreateMeaning</title><link href="https://slott56.github.io/2021_07_20-how_can_people_find_inspiration_at_work_createmeaning.html" rel="alternate"></link><published>2021-07-20T09:00:00-04:00</published><updated>2021-07-20T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-20:/2021_07_20-how_can_people_find_inspiration_at_work_createmeaning.html</id><summary type="html">&lt;p&gt;What do I know about &amp;quot;inspiration&amp;quot; at work? I'm not sure I know much,
but I think I may have some advice that could be useful.&lt;/p&gt;
&lt;p&gt;I was in the high-tech write-software-every-day workplace since about
1976 or so. (The first two years were part-time while in college.) I use
past …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What do I know about &amp;quot;inspiration&amp;quot; at work? I'm not sure I know much,
but I think I may have some advice that could be useful.&lt;/p&gt;
&lt;p&gt;I was in the high-tech write-software-every-day workplace since about
1976 or so. (The first two years were part-time while in college.) I use
past perfect &amp;quot;was&amp;quot; because I'm old enough (and lucky enough) to be able
to retire from daily work. I've switched from writing code to writing
books about writing code.&lt;/p&gt;
&lt;p&gt;For the math-impaired, my software career spanned 45 years.&lt;/p&gt;
&lt;p&gt;Early in this career, the question of finding inspiration at work wasn't
asked in the same stark way people discuss it nowadays. When I was
younger, the idea of maintaining a work/life balance wasn't something we
were asked or encouraged to consider. We did the best we could and tried
to avoid getting replaced by someone who could do it better.&lt;/p&gt;
&lt;p&gt;Which -- with the advantages of hind-sight -- was a terrible way to live
and work. Simply awful. I was lucky enough to see hundreds of projects
in my working career. I worked with scores of different organizations.
There was a spectrum of bad behavior.&lt;/p&gt;
&lt;p&gt;I did learn this: &lt;strong&gt;Fear is not Inspiring&lt;/strong&gt;. I learned a few other
things, but let's start with fear.&lt;/p&gt;
&lt;div class="section" id="the-fear-factor"&gt;
&lt;h2&gt;The Fear Factor&lt;/h2&gt;
&lt;p&gt;I want to dwell a bit on the fear factor in the workplace. I'm firmly
convinced that some manager types suffer with a nagging background of
essential fear for their own jobs. And they can project this fear onto
folks around them.&lt;/p&gt;
&lt;p&gt;Try these shoes on for a moment. The technology has moved on and you
haven't kept up. You're trying to manage people, but you have a nagging
suspicion your core managerial skills are weak enough that you could be
replaced. Motivated by fear, you encourage &amp;quot;casual overtime&amp;quot; and
&amp;quot;working weekends&amp;quot; and &amp;quot;meeting the committed schedule&amp;quot;. Perhaps you
feel it necessary to go so far as to demand these things.&lt;/p&gt;
&lt;p&gt;Fear of getting fired creates an uninspiring place to work. It will be
an incubator for burnout.&lt;/p&gt;
&lt;p&gt;Further, I suspect it can lead to worse situations than people quitting.
I think the &amp;quot;work a little harder&amp;quot; folks plant seeds for various kinds
of workplace abuses.&lt;/p&gt;
&lt;p&gt;I think there are a variety of fears. The fear of getting fired is at
the bottom of Maslow's hierarchy of needs: we could get fired, and be
unable to get another job. We're in the Physiological and Safety realm
of the needs pyramid.&lt;/p&gt;
&lt;p&gt;A fear of a project not working out means we'll tumble in the eyes of
more senior management. This is somewhere in the higher level of Social
Belonging and Esteem needs. The problem is that projects have a variety
of metrics, and simply making the schedule is an easy metric and can
seem to lead to immediate esteem.&lt;/p&gt;
&lt;p&gt;What about higher level cognitive needs like Self-actualization and
Transcendence? I strongly suspect fears related to these needs can color
someone's workplace. I think these often show up as &amp;quot;Am I really going
to be doing this for the Rest of My Life?&amp;quot; questions. This becomes an
undercurrent of negativity stemming from fear of being trapped in
unfulfilling work.&lt;/p&gt;
&lt;p&gt;We might see these fears in several places. We each harbor our own
private fears. In any organization with a hierarchy, we'll have to deal
with fears that trickle down to us from supervisors. In non-hierarchical
organizations, we'll have to deal with fears of our peers and
colleagues. We're surrounded by fears, and I think this can sap our
inspiration.&lt;/p&gt;
&lt;p&gt;What can we do to find inspiration in a work environment?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-experience"&gt;
&lt;h2&gt;My Experience&lt;/h2&gt;
&lt;p&gt;I've worked on hundreds of projects. That means hundreds of jobs that
came to an end. And when the project ended, I was no longer needed.&lt;/p&gt;
&lt;p&gt;In effect, I was fired hundreds of times.&lt;/p&gt;
&lt;p&gt;This isn't a helpful thing. If Maslow's base physiological needs are
met, then having a project end isn't too horrible. I was a contract
programmer in the olden days when we were salaried, and the company
would carry us from assignment to assignment. Being let go by a customer
can be harsh, but getting paid in spite of being let go softens the
blow.&lt;/p&gt;
&lt;p&gt;I emphatically do not recommend this way of working as a source of
inspiration. Some people like the constant changing gears and changing
directions. Other people might find it terrifying: each project is a
whole new group of people in a new organization. Potentially very
unsettling.&lt;/p&gt;
&lt;p&gt;I don't think the &amp;quot;get tougher&amp;quot; or &amp;quot;grow thicker skin&amp;quot; advice is good.
I'm don't think it worked out for me. I think this kind of transience
left me feeling isolated. I think it lead me to carry around a sense of
superiority. So. Let's set aside any dumb-sounding advice based on a
literal review of my experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-did-i-cope"&gt;
&lt;h2&gt;How Did I Cope?&lt;/h2&gt;
&lt;p&gt;Finding ways to cope, I think, is important, but it is also potentially
misleading. The idea of &lt;strong&gt;coping&lt;/strong&gt; with new projects, new organizations,
travel, and getting fired all the time isn't inspiring. It's merely
coping with an endless stream of loss and separation.&lt;/p&gt;
&lt;p&gt;Underpinning the idea of coping is a more foundational question. Where
did I find the inspiration to keep on doing this contract programming
thing for so many years? And the other question is how well my search
for inspiration might apply to folks who aren't commuting computer
programmers?&lt;/p&gt;
&lt;p&gt;I think there's a first step that many people can take. It's this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We can disentangle our self-worth from the work-place imposed sense of worth.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This may be overly glib. But. I think the things rewarded in the
workplace aren't a good reflection of who we are and what we're capable
of. While it's important to be confident in one's self, our confidence
can be undermined by a toxic workplace. Having confidence can let us
take our skills and abilities in a variety of directions. We might, for
example, decide to find another workplace; one where our value is
recognized. Or, we might decide to change our circumstances in the
workplace we're currently inhabiting. In both cases, we're asserting our
value. We're making a further claim about our value: we may not match
the workplace's expectations of us. The workplace can change, or we can
find another workplace.&lt;/p&gt;
&lt;p&gt;We might see a mismatch in lousy performance reviews. These can can stem
from many causes. Perhaps we're not suited for a job and need to find
something else. Or, perhaps the person reviewing our work doesn't see
what we could (or should) be doing. (They have their own fears, and they
may not be willing to try to make the changes we'd like them to make.)&lt;/p&gt;
&lt;p&gt;Looking back, I may have been doing this all along, without being clear
or intentional about it. Perhaps I excelled at places that valued me,
and failed to meet expectations at places that treated me poorly.
Perhaps my job shifting was (in an indirect way) a search for a
workplace that valued me, my unique experiences, and my distinctive
voice.&lt;/p&gt;
&lt;p&gt;I was not intentional about it. I stumbled from job to job, knowing the
sales folks would find me a next assignment when the current assignment
had run its course. I think a vague sense of self-worth is what lead me
to locating inspiration in spite of a lot of change and disruption.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finding-inspiration"&gt;
&lt;h2&gt;Finding Inspiration&lt;/h2&gt;
&lt;p&gt;When we think of inspiration, we think of a spiritual drive to do the
work. This doesn't often parallel with working for pay to cover rent and
expenses.&lt;/p&gt;
&lt;p&gt;A good manager, however, can create a cohesive team from a group of
people. A group of peers can welcome a new colleague. This creates
belonging and esteem: the middle levels of Maslow's hierarchy of needs.
We may find that a team or a team's goal may be inspiring. This means
that our own self-worth is recognized and valued by our co-workers. This
can be a marvelous experience.&lt;/p&gt;
&lt;p&gt;What about the bad manager or unhelpful group of colleagues? In this
cases, we're forced to make the best of an awkward situation. I think we
can do this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We can search for inspiration at the margins of our work life.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Can we find some side-bar aspect of the work that leads to some helpful
insights? Perhaps there is a chronic problem we can take notes on and --
eventually -- fix. Perhaps someone is less helpful that others, and we
can try to understand what would make them less toxic. Perhaps cleaning
the break-room fridge is better than complaining about month-old food.
(Yuck. But. If things are better, it may be worth it.)&lt;/p&gt;
&lt;p&gt;For years, I had an aspiration to write about software development. To
further this dream, I started taking more and more careful notes of
projects I was on. In the era before the World Wide Web, publication was
difficult, but not impossible. I wrote small articles for technical
magazines; this effort was something that inspired me to work with
customers who were inept and had horrible, horrible problems. I liked
the awful customers because it provided me good examples of things that
should not be done.&lt;/p&gt;
&lt;p&gt;At the end of a horrible project, I'd have a good anecdote for what not
to do.&lt;/p&gt;
&lt;p&gt;I acknowledge my two ideas of self worth and inspiration isn't a
dramatic, life-changing epiphany. I'm pretty sure the scales won't fall
from anyone's eyes as they think about looking at sidebar topics as a
source of inspiration.&lt;/p&gt;
&lt;p&gt;Looking at the margins, edges, and corners of a job can help to reveal
the whole job. The whole team. The whole goal. Finding this broader view
might inspire us to look for a better team with better goals. In other
cases, it might help us find the missing skills in the team we're on. In
other cases, a better perspective might help us steer our supervisor
toward doing something that's better than what they're doing right now.&lt;/p&gt;
&lt;p&gt;There are very fine lines between toxic, poorly organized, poorly
managed, confusing work places, and workplaces that are still trying to
find a workable organization. Most places have a combination of good and
bad, inept and well-done, confusing and sensible features. Indeed, these
may all be different axes and an organization is really a
multi-dimensional object with different kinds of overlaps and gaps.&lt;/p&gt;
&lt;p&gt;I believe the foundation for inspiration is a clear sense of self-worth.
I think we create meaning in our workplace by knowing what we can
contribute, what we want to contribute, and what the organization needs.
Our unique contribution and what the organization needs may not overlap
at all, or the organization may have always been searching for someone
like us. Either way, our awareness of our skills, our experience, and
our authentic voice is what lets us find inspiration.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="great-article-steve-i-have-had-similar-thoughts-o"&gt;
&lt;h2&gt;Great article Steve. I have had similar thoughts o...&lt;/h2&gt;
&lt;p&gt;Dunn Family&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-07-29 09:18:19.089000-04:00&lt;/p&gt;
&lt;p&gt;Great article Steve. I have had similar thoughts over the years as I saw
how various organizations / departments valued or didn't value the
people that worked in them.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="career"></category><category term="#CreateMeaning"></category><category term="work-life"></category></entry><entry><title>What Books Should I Read? In What Order?</title><link href="https://slott56.github.io/2021_07_13-what_books_should_i_read_in_what_order.html" rel="alternate"></link><published>2021-07-13T09:00:00-04:00</published><updated>2021-07-13T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-13:/2021_07_13-what_books_should_i_read_in_what_order.html</id><summary type="html">&lt;p&gt;A fascinating question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I'm baffled by the amount of books you've published over the
course of time. Currently Reddit suggests that I use Building
Skills in Python under Beginner's section, but it looks quite
outdated. So back and forth, I found your Building Skills in OO on
GitHub Page and …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A fascinating question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;... I'm baffled by the amount of books you've published over the
course of time. Currently Reddit suggests that I use Building
Skills in Python under Beginner's section, but it looks quite
outdated. So back and forth, I found your Building Skills in OO on
GitHub Page and was quite happy with the read on the first 100
pages.&lt;/p&gt;
&lt;p&gt;I searched for more info on the books you've published and wanted
to know if you could sort them in ascending order of difficulty
for me as I intend to purchase them slowly.&lt;/p&gt;
&lt;p&gt;My main concern to learn Python is just to cross technical
interviews and building applications that help with my workflow
(they are in bash with around 200 functions, so I'm hoping to
migrate them to something which is more robust).&lt;/p&gt;
&lt;p&gt;Currently the focus I intend to develop is on:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Strong Foundations of the Python Language.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2) Strong Foundations on the Basic Libraries for Data Structures
and Algorithms (For example, bisect gives me insort(), calendar
gives me isleap(), iter_tools gives me permutation(), etc).&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Strong Foundations on the Design Patterns.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So could you please help me out and suggest your books?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is challenging for a few reasons.&lt;/p&gt;
&lt;p&gt;First, the &amp;quot;Building Skills&amp;quot; books have been reduced to only the
&lt;em&gt;Building Skills in OO Design&lt;/em&gt;. This can be found in GitHub.
&lt;a class="reference external" href="https://github.com/slott56/building-skills-oo-design-book"&gt;https://github.com/slott56/building-skills-oo-design-book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That book is not really targeted to beginners, though. It presumes some
core OO skills, and provides a (very) long series of exercises to build
on those skills.&lt;/p&gt;
&lt;p&gt;Second, I never really conceived of a beginner-to-expert sequence of
books. From your letter, I see that I need to look at filling in some
gaps in my sequence of books. I'll alert my editors at Packt, and we can
consider this in the future.&lt;/p&gt;
&lt;div class="section" id="specific-needs"&gt;
&lt;h2&gt;Specific Needs&lt;/h2&gt;
&lt;p&gt;Let's look at your needs.&lt;/p&gt;
&lt;div class="section" id="foundations-in-the-python-language"&gt;
&lt;h3&gt;1. Foundations in the Python language.&lt;/h3&gt;
&lt;p&gt;This might be something you can learn from my &lt;a class="reference external" href="https://bookshop.org/books/python-essentials/9781784390341"&gt;Python
Essentials&lt;/a&gt;.
This isn't focused on complete n00bs. All of my books expect some
programming background. Since you're an Android engineer and write code
in C++ and Java, this may be helpful. This title is getting old,
however, and needs a second edition.&lt;/p&gt;
&lt;p&gt;For someone with core programming skills, I suspect that &lt;a class="reference external" href="https://www.oreilly.com/library/view/mastering-object-oriented-python/9781789531367/"&gt;Mastering OO
Python&lt;/a&gt; will
be suitable. My &lt;a class="reference external" href="https://www.packtpub.com/product/python-object-oriented-programming-fourth-edition/9781801077262"&gt;Python 3 OO
Programming&lt;/a&gt; (4th
ed.) is similarly aimed at folks who can program and can learn a new
language quickly.&lt;/p&gt;
&lt;p&gt;A book like Martelli's &lt;a class="reference external" href="https://www.amazon.com/Python-Nutshell-Second-Alex-Martelli/dp/0596100469"&gt;Python in a
Nutshell&lt;/a&gt; may
provide a better foundation the way the language works than any of mine.
Also Lutz's &lt;a class="reference external" href="https://www.amazon.com/Learning-Python-5th-Mark-Lutz/dp/1449355730/ref=pd_lpo_14_t_2/145-5116566-3930956"&gt;Learning
Python&lt;/a&gt;
is extremely popular.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="foundations-in-the-standard-library"&gt;
&lt;h3&gt;2. Foundations in the Standard Library.&lt;/h3&gt;
&lt;p&gt;This is tricky. I touch on some of these topics in &lt;a class="reference external" href="https://www.abebooks.com/Functional-Python-Programming-Second-Edition-Lott/30276798601/bd"&gt;Functional Python
Programming&lt;/a&gt;
(2nd ed.) I also touch on some of these topics in the &lt;a class="reference external" href="https://www.ebooks.com/en-us/book/210095364/modern-python-cookbook/steven-f-lott/"&gt;Modern Python
Cookbook&lt;/a&gt;
(2nd ed.)&lt;/p&gt;
&lt;p&gt;I don't, however, cover very much of the library. I touch on a few
really important modules. The library is vast. A book like
Hellmann's &lt;a class="reference external" href="https://www.amazon.com/Python-Standard-Library-Example/dp/0321767349"&gt;The Python Standard Library by
Example&lt;/a&gt; might
be more suitable than one of mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns"&gt;
&lt;h3&gt;3. Design Patterns.&lt;/h3&gt;
&lt;p&gt;This is central to &lt;a class="reference external" href="https://www.packtpub.com/product/python-object-oriented-programming-fourth-edition/9781801077262"&gt;Python 3 OO
Programming&lt;/a&gt; (4th
ed.) Dusty Phillips and I cover a number of popular design patterns in
detail.&lt;/p&gt;
&lt;p&gt;There are -- of course -- a lot of very, very good books on Python. I'm
honored you reached out to me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="other-random-advice"&gt;
&lt;h2&gt;Other Random Advice&lt;/h2&gt;
&lt;p&gt;Because Python is a relatively simple language (with a vast library) I
have always suspected that language foundations don't really require a
ton of explanation. Many languages (i.e., C++) are filled with odd
details and weird features that are really unpleasantly complex. Many
Java programmers get used to the distinction between the primitive
&lt;tt class="docutils literal"&gt;int&lt;/tt&gt; type and the &lt;tt class="docutils literal"&gt;Integer&lt;/tt&gt; class type. While the Java and C++
approach can seem simple (after a while) it really isn't simple at all.&lt;/p&gt;
&lt;p&gt;The standard library is vast, and it takes time to get used to how much
is there. I would suggest having a browser tab open
to &lt;a class="reference external" href="https://docs.python.org/3/library/"&gt;https://docs.python.org/3/library/&lt;/a&gt; at all times.&lt;/p&gt;
&lt;p&gt;Design patterns, similarly, require some care. There are complex details
around implementing the &lt;strong&gt;Singleton&lt;/strong&gt; pattern in C++ and Java. Python
class definitions and Python module definitions are Singletons, and
using a class definition as a &lt;strong&gt;Singleton&lt;/strong&gt; object is often far simpler
than the commonly-used techniques for C++ and Java.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>A Python Roadmap</title><link href="https://slott56.github.io/2021_07_06-a_python_roadmap.html" rel="alternate"></link><published>2021-07-06T08:00:00-04:00</published><updated>2021-07-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-06:/2021_07_06-a_python_roadmap.html</id><summary type="html">&lt;p&gt;An interesting tweet. The  roadmap has three sections. I'm not sure this
is actually complete, or even grouped correctly. It is a very good list
of topics.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/prasoonpratham/status/1408435475426254849?s=11"&gt;https://twitter.com/prasoonpratham/status/1408435475426254849?s=11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Here's a complete roadmap of topics to master Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;The thread, however, seems no longer …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An interesting tweet. The  roadmap has three sections. I'm not sure this
is actually complete, or even grouped correctly. It is a very good list
of topics.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/prasoonpratham/status/1408435475426254849?s=11"&gt;https://twitter.com/prasoonpratham/status/1408435475426254849?s=11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Here's a complete roadmap of topics to master Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;The thread, however, seems no longer to exist.&lt;/p&gt;
&lt;div class="section" id="foundations"&gt;
&lt;h2&gt;Foundations&lt;/h2&gt;
&lt;p&gt;I want start by quibbling about variables being first. I'm not sold on
this.&lt;/p&gt;
&lt;p&gt;I think that operators, expressions, and the built-in immutable types
are foundational. int, float, str, and tuple are hugely important as
core concepts in computing and Python.&lt;/p&gt;
&lt;p&gt;I also think that &amp;quot;loops&amp;quot; is a sketchy notion and I kind of wish we
wouldn't describe for and while statements as &amp;quot;loops&amp;quot;. I think we should
call them iterations. They implement two kinds of logical quantifiers
&amp;quot;for all&amp;quot; and &amp;quot;there exists.&amp;quot; I think we should talk about the final
result of a for statement: all of the values in a range are processed.
Similarly a for-if-break construct establishes a &amp;quot;for exists&amp;quot; that
defines the first value in a range for which a condition is met. And
yes, range objects will be central.&lt;/p&gt;
&lt;p&gt;I think that a huge amount of programming can be covered with these
topics. I'm not sure &amp;quot;basic&amp;quot; is the right term; &lt;strong&gt;foundations&lt;/strong&gt; might be
a better idea.&lt;/p&gt;
&lt;p&gt;The use of variables to manage state is part of this. But. Variables,
assignment, and state change are a bit more advanced and maybe shouldn't
be first.&lt;/p&gt;
&lt;p&gt;I also think function definitions are foundational. Mathematics has been
defining functions based on other functions. It's a way of providing a
mental short-hand for complex concepts. I don't need to know all the
details of how to compute a square root to make use of square root as a
concept.&lt;/p&gt;
&lt;p&gt;The wide varieties of assignment statements, including assignment to
decompose collections aren't mentioned in the original post. This may be
an important omission, causing me to quibble on &amp;quot;complete.&amp;quot;&lt;/p&gt;
&lt;p&gt;I agree that files and elements of File IO are part of this foundation.
If we limit ourselves to reading and writing files, then they're
essentially immutable structures. I think we can safely avoid
update-in-place files because this is an application topic more than a
language topic. Python offers the minimal level of support via seek and
tell, but little more. And most modern application relies on a database
for updatable files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-structures"&gt;
&lt;h2&gt;Data Structures&lt;/h2&gt;
&lt;p&gt;Moving from basic to intermediate. I prefer the term &amp;quot;data structures&amp;quot;
which are built on the language foundations. I think that the mutable
built-in data structures come next in the roadmap. My preference is to
omit terms like Object-Oriented or Functional, and focus on list, dict,
and set, and how the iteration works. This means comprehensions and
generators are part of this essential data structure section.&lt;/p&gt;
&lt;p&gt;No, comprehensions aren't and shouldn't be called &amp;quot;advanced.&amp;quot; They're
very much a core concept. Thinking about statements to implement a
map/filter/reduce over a collection is the essence of a great deal of
programming. We don't always learn it that way, but it needs to be
presented in that framework even to beginners. A pile of for and if
statements and a bunch of variables is a programmer's first step toward
a simpler comprehension. In both cases, they're doing a mapping and it
needs to be described as mapping one collection to another collection.&lt;/p&gt;
&lt;p&gt;This is where the standard library collections module is introduced.&lt;/p&gt;
&lt;p&gt;Yes it's part of the library. I think it's too central to be ignored. I
think dataclasses belong here, too.&lt;/p&gt;
&lt;p&gt;Talking about the mutable data structures means revisiting the for
statement and using it on a variety of iterables. The way Python's
concepts apply to a variety of data types is an important feature of the
language. (In the olden days, they used to talk about &amp;quot;orthogonality&amp;quot; of
data and processing; we don't need to dwell on it, but I think it helps
to acknowledge it.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;It appears to me that the functional programming topics can come next.
The idea of functional composition via higher-order functions and
decorators builds on the existing foundation. This is where map() and
filter() belong. Because of the way sorted(), max(), and min() work on
collections with a key= function, these are part of the functional
programming roadmap. The inconsistency between map() and functions like
max() is an important thing to note.&lt;/p&gt;
&lt;p&gt;I also think itertools belongs here. We can make the case that it's in
the standard library, but then, so is io. I think itertools and
functools are as central to practical Python as the math module and
collections.&lt;/p&gt;
&lt;p&gt;I think typing.NamedTuple and dataclasses belong here, also. A frozen
dataclass is stateless, and can be helpful when creating list
comprehensions to perform a mapping from one collection to another
collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="object-oriented-programming"&gt;
&lt;h2&gt;Object-Oriented Programming&lt;/h2&gt;
&lt;p&gt;I think OO programming and related concepts build on the previous
material. Class definitions and state management aren't simple, even
though they're essential parts of Python.&lt;/p&gt;
&lt;p&gt;To an extent, OO programming can be decomposed into two layers. While I
hate to overuse &amp;quot;foundation&amp;quot;, there seem to be two parts:&lt;/p&gt;
&lt;p&gt;OO Foundations -- inheritance, composition, and different kinds of
delegation. This tends to expose a number of common design patterns like
Strategy, Decorator, and Facade.&lt;/p&gt;
&lt;p&gt;OO Features -- this includes metaprogramming, decorators, ABC's, mixins,
and the like. These topics are all designed to avoid copy-and-paste in
sophisticated edge cases that cross class boundaries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="concurrency"&gt;
&lt;h2&gt;Concurrency&lt;/h2&gt;
&lt;p&gt;I'm not sure why concurrency and parallelism are separate topics in the
original list. I've had folks try to split this hair a number of ways.
The idea is to find a place where async lives that's &amp;quot;concurrency lite&amp;quot;
or something.&lt;/p&gt;
&lt;p&gt;The concepts here become blurry because threads and processes are OS
features, not language features. The async/await language features,
however, are clearly part of Python. It becomes particularly awful when
working on something practical where asyncio doesn't provide the feature
you need. Specifically, blocking file system I/O isn't part of asyncio
and requires an explicit appeal to the underlying thread pool for the
blocking operation.&lt;/p&gt;
&lt;p&gt;To an extent, async/await needs to be on the roadmap. It's tricky,
though, to cover this without also digressing into threads as a way to
deal with blocking operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-integration-and-deployment"&gt;
&lt;h2&gt;Test, Integration, and Deployment&lt;/h2&gt;
&lt;p&gt;This is where tools show up. This is where pip, unittest, pytest,
tox/nox, coverage, etc. live. Are these part of the language? Or are the
part of the broader ecosystem?&lt;/p&gt;
&lt;p&gt;I submit they're explicitly not part of the language. The roadmap ends
just before this topic. The idea is that we should have a Python roadmap
that uses the language and the standard library.&lt;/p&gt;
&lt;p&gt;Once we've talked about the language (and some of the library) we can
move on to pip and packaging. I don't think pip is and &amp;quot;intermediate&amp;quot;
topic. I find that premature introduction of pip is a sign of trying to
create useful interesting examples. Examples that don't use pip wind up
being kind of boring. Everyone wants to play with pygame and pillow and
other kinds of projects, but, those aren't foundational to the language.
They're interesting and appealing and -- frankly -- a lot of fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;I'm not a fan of the roadmap. I like some of it. I don't like some of
it.&lt;/p&gt;
&lt;p&gt;I am a fan of presenting the idea for discussion.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="object-oriented programming"></category><category term="functional python programming"></category><category term="#python"></category></entry><entry><title>Letter to Mom -- What Is This "Computer Programming" Thing?</title><link href="https://slott56.github.io/2021_07_04-letter_to_mom_what_is_this_computer_programming_thing.html" rel="alternate"></link><published>2021-07-04T14:31:00-04:00</published><updated>2021-07-04T14:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-07-04:/2021_07_04-letter_to_mom_what_is_this_computer_programming_thing.html</id><summary type="html">&lt;p&gt;Happy birthday, mom. Glad to see you're still doing well, avoiding the
complications of COVID-19.&lt;/p&gt;
&lt;p&gt;You asked what it was I did for a living. Emphasis on the past tense,
now that we're both fully retired old people.&lt;/p&gt;
&lt;p&gt;I have to confess that it's not easy describing high-tech work. There's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Happy birthday, mom. Glad to see you're still doing well, avoiding the
complications of COVID-19.&lt;/p&gt;
&lt;p&gt;You asked what it was I did for a living. Emphasis on the past tense,
now that we're both fully retired old people.&lt;/p&gt;
&lt;p&gt;I have to confess that it's not easy describing high-tech work. There's
a lot of jargon. Your varied range of careers included many things, one
of which was being a school librarian. The world has had libraries and
librarians for millennia. The job title is pretty well understood. The
world hasn't had electronic computers for very long, making the job of
programming them a relative novelty.&lt;/p&gt;
&lt;p&gt;Aids to computation include slide rules and other mechanical devices.
The idea of a mechanical computer dates from the 1830's. You can read
about the first computer programmer, Ada Lovelace, here:
&lt;a class="reference external" href="https://www.computerhistory.org/babbage/adalovelace/"&gt;https://www.computerhistory.org/babbage/adalovelace/&lt;/a&gt;. Proper electronic
digital computes didn't arise until the 40's, when you were a child.
ENIAC, for example dates from 1945.&lt;/p&gt;
&lt;p&gt;While a lot has changed since the ENIAC, there are a few universal
truths. I'm going to beat one of those truths like a dead horse because
it's both essential and obscured by layers of technology.&lt;/p&gt;
&lt;p&gt;This first and most fundamental truth is that a computer -- even
something as sophisticated as a laptop with a dozen open browser tabs,
zoom, and two different solitaire games -- is really a small device that
is patiently waiting for you to type or click; the software works out
some response and this is displayed on the screen or burbles out the
speakers (or both.)&lt;/p&gt;
&lt;p&gt;We can say that a general-purpose computer is &amp;quot;applied&amp;quot; to a specific
problem. We shorthand this into creating &amp;quot;Application Software;&amp;quot; the
software that applies the computer's hardware to a problem. And we
shorthand this into &amp;quot;Apps&amp;quot; or &amp;quot;Applications&amp;quot; that do useful things on a
general-purpose device.&lt;/p&gt;
&lt;p&gt;The distinction between software (things you download and change) and
hardware (the box on your desk) has become pretty common-place. The
details of the software are what we need to put under the magnifying
glass to look at closely.&lt;/p&gt;
&lt;p&gt;To make your computer more useful, clever engineers have worked out a
way to interleave activities from a variety of applications, all of
which are using your computer concurrently. There's a set of rules to
determine which application is in the &amp;quot;foreground&amp;quot;; this is the
application software that has access to keyboard, mouse, display, and
speakers. When you click on another window, you bring another
application to the foreground. Access to the hardware switches and the
display updates. It's very slick. They provide a number of visual cues
to show you which application's &amp;quot;window&amp;quot; is in the foreground; all the
others have different cues to show you they're in the background.&lt;/p&gt;
&lt;p&gt;What's important about this foreground/background concept is that each
application is -- from one point of view -- free to behave as if it is
in total control of the entire computer. In reality, an application
emphatically does not have unfettered control over the computing
resources; there are a large number of gates and fences forcing
applications into an orderly, and disciplined sharing and cooperation.&lt;/p&gt;
&lt;p&gt;You taught at a nursery school. You know how important an orderly set of
rules is. Applications are no different than unruly three- and four-year
olds: they try to grab snacks out of order. They forget how pants work
when they try to use the toilet. They need lessons in how to put their
coats on to go outside in the winter.&lt;/p&gt;
&lt;p&gt;These rules -- the set of policies and procedures that constrain
applications -- is collectively called the &amp;quot;Operating System.&amp;quot; (Don't
ask why, the computer folks borrow terms from other disciplines and
imbue them with new meanings. There's rarely a sensible etymology, just
conventional usage.) The idea of a &amp;quot;system&amp;quot; of components is essential.
There are a lot of layers of engineering in the OS.&lt;/p&gt;
&lt;p&gt;The presence of an operating system lets multiple apps cooperate. But,
it doesn't change the fundamental truth that originated with Babbage and
Lovelace and continued on through Turing and Von Neumann and others and
was handed down to me.&lt;/p&gt;
&lt;p&gt;The general-purpose computer is applied (&amp;quot;programmed&amp;quot;) to a problem;
it's set up to respond to inputs by displaying outputs.&lt;/p&gt;
&lt;div class="section" id="so-that-was-boring-what-did-you-do"&gt;
&lt;h2&gt;So that was boring. What did you do?&lt;/h2&gt;
&lt;p&gt;Good point. That was boring. But necessary, I think, to bracket the
nuanced difference between &amp;quot;computer&amp;quot; as a collection and an individual
application. The computer-as-collection includes a lot of software: an
OS plus applications. This is distinct from each individual application
that's part of the collection. It's all software, but the context shifts
from everything the computer is doing to one specific solitaire game.&lt;/p&gt;
&lt;p&gt;Above, I mentioned that the OS has layers. In a way it's like a quilt,
there's a backing, batting in the middle, and a complex quilt top made
from pieces. Most important is the quilting that holds the layers
together.&lt;/p&gt;
&lt;p&gt;In a way, it's also like a library. There's the foundational problem of
storing and loaning books. But there's a secondary problem of finding
the damn things; leading to Dewey or LC codes for topics so we can keep
related books together. And there's a third layer problem of having an
accurate index or catalog of all the books. Using small cards (the card
catalog) gives the library flexibility to make sure the catalog matches
the stacks. And there are related problems of loaning them out with some
reasonable promise to return them.&lt;/p&gt;
&lt;p&gt;I might even be able to work out an analogy with the Apple Orchard or
the Arboretum or the Summer Camp. But, I think you get my drift here,
that there are foundational elements that we can't really change, and we
build on those foundations to make the whole slightly easier for people
to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-get-it-you-built-application-software-what-did-you-do"&gt;
&lt;h2&gt;I get it, you built application software. What did you do?&lt;/h2&gt;
&lt;p&gt;What's important about concept of layers is how pervasive the layering
idea is in all of computing.&lt;/p&gt;
&lt;p&gt;Because of the potential complexity of a solution to a problem, we take
the &amp;quot;layering&amp;quot; idea one step further than simply decreeing there should
be layers.&lt;/p&gt;
&lt;p&gt;What we found, starting in the 70's, was that the operating system
tended to conceal many details of the underlying hardware. A modern
programming language also divorced us from details of the hardware.
Admiral Grace Murray Hopper's idea was to have an application that would
transform a program written in some neutral language into the language
of whatever hardware we had on hand. She pioneered the COBOL programming
language; the language was utterly unlike any specific piece of
hardware, and required a &amp;quot;compiler&amp;quot; application to translate COBOL
statements into a form that the OS could run as an application.&lt;/p&gt;
&lt;p&gt;We liked this idea: the underlying hardware became a kind of hazy
abstraction. We knew it was there, but between our languages, libraries
of pre-written software, our compilers, and the OS, we didn't really see
the underlying hardware. This lets us decompose a complex problem into a
number of smaller problems; giving us a lot of leverage.&lt;/p&gt;
&lt;p&gt;The core idea of &amp;quot;abstraction&amp;quot; leads to the idea of layers of
abstraction. Within our application software we can can also use this
idea of layers to decompose our solution to a problem. An application
layer can be quilted to a library layer that we bought or downloaded.
The library is -- independently -- quilted to an OS layer. And the whole
stack of layers is carefully stitched down to the underlying silicon
chip. Maybe it was a Motorola chip, or an Intel chip, or an AMD chip. We
didn't much know or care.&lt;/p&gt;
&lt;p&gt;Well. We cared a little. Some of the AMD chips were faster than some of
the Intel chips. So we would prefer to have our OS and our language
focused on those chips because things were faster. Until Intel jumped
ahead of AMD. The concept was to remain divorced from gritty details of
how the little fleck of silicon with its millions of transistors
actually worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recap"&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;Application software configures the general-purpose computer to a
specific task. Applications coexist via an operating system and reusable
libraries.&lt;/p&gt;
&lt;p&gt;Software (application, operating system, libraries) is created in layers
and provide abstractions to hide the details of underlying layers.&lt;/p&gt;
&lt;p&gt;My job?&lt;/p&gt;
&lt;p&gt;Design the layers. Get other programmers to understand the design for
the layers. Help them to create statements (&amp;quot;code&amp;quot;) using the language
of choice. (I'm a big fan of Python, but I've used many, many other
languages.)&lt;/p&gt;
&lt;p&gt;Note that I didn't (generally) design the visible quilt top in any
detail. My job was to help the visual designers and the user experience
(UX) designers create a top that delighted people using the software. I
made sure that the top and the layers underneath it all fit together
reasonably well for a sensible budget. Cutting and stitching all the
blocks was a specialized skill that I tried to avoid.&lt;/p&gt;
&lt;p&gt;I did more than design, however. When I say design of the structure, you
can imagine an architect or civil engineer looking over drawings of
girders and beams and making sure the floor would hold the weight of all
those books in the new wing of the library.&lt;/p&gt;
&lt;p&gt;While many software designers and architects do pour over drawings, I --
personally -- didn't like to leave it at the drawing stage. This was
probably a career-limiting choice, but I liked to get my hands dirty
actually digging holes and standing up cinderblocks in the foundation.
The idea of swinging a hammer to build components told me -- directly --
how good (or bad) my design was.&lt;/p&gt;
&lt;p&gt;There's a fork in the career path for programmers. Some software
architects work best with Keynote presentations to developers and
executives. They build understanding and consensus. They're trusted with
larger projects and larger budgets. If things didn't work out, they
could deflect blame to the folks writing the software. This distinction
between design and realization can be used to avoid culpability. It
worried me.&lt;/p&gt;
&lt;p&gt;Other architects (me, specifically) work best with code. I still needed
to build understanding and consensus. But I also built software so I
could be *sure* things worked. I liked to provide concrete, tangible,
&amp;quot;do it like this&amp;quot; code.&lt;/p&gt;
&lt;p&gt;To higher-level executives -- people with budget authority -- I was only
a low-level programmer.&lt;/p&gt;
&lt;p&gt;For decades, this meant a project would wind down after completion, and
I would leave the customer's location, and move on to a new project.
That's why I traveled a LOT.&lt;/p&gt;
&lt;p&gt;A few clients would come to realize that I did offer significant value
by being able to design the layers and abstractions while also helping
folks actually build the software. This recognition was a rarity, which
is why I call it a career-limiting choice. It happened a few times.
There's a particularly memorable offer from a client in the 90's that --
in retrospect -- I should have taken. But, generally, I moved from work
site to work site, designing, and building the application software for
very, very large computers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-you-went-to-meetings-a-lot"&gt;
&lt;h2&gt;So, you went to meetings a lot?&lt;/h2&gt;
&lt;p&gt;Precisely.&lt;/p&gt;
&lt;p&gt;At first, I needed to talk about the problem. What they want software to
do. Why do they think new, custom-built, unique software will solve the
problem they have? This means meeting with people to understand the
problem in the first place. &amp;quot;What can't you do?&amp;quot; &amp;quot;Why can't you do it?&amp;quot;
There's a lot of &amp;quot;Why?&amp;quot; questions that need to be asked to locate the
obstacle that's easiest to remove. (Or the lowest-hanging fruit we can
pick.)&lt;/p&gt;
&lt;p&gt;Then, we need to talk about the solution. How will we solve the problem
with computers and software? In some cases, they have departments that
aren't talking. Or they have legal obstacles. Or they have a half-wit
vice president in charge of being the owner's brother. Eventually, we
wind up at &amp;quot;aha. They have software that acts as a kind of 'custodian'
for their cloud-based resources, but the language of the rules for that
custodian are opaque.&amp;quot;&lt;/p&gt;
&lt;p&gt;(Seriously. A real problem. Very, very removed from reality: governance
of rented &amp;quot;cloud&amp;quot; resources. Enterprise policies for use of cloud
resources. Concrete rules for cleaning up the computers rented from a
cloud vendor. Mathematical foundations for those rules. Very. Abstract.
&lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Once we've got the preferred solution, we need to decompose it into
things we can download, and things we have to build. Ideally, we can
download most (or all) of it and move on. Realistically, the problem
domain is unique or something about the overall context and organization
is unique, and means leads to customized software to reflect the unique
situation.&lt;/p&gt;
&lt;p&gt;Before too long, we have meetings to review some pictures: some
contexts, some containers for application software, some components (or
I've called them &amp;quot;layers&amp;quot; above). This will lead to people writing some
code. (The 4 C's: Context, Container, Component, Code.)&lt;/p&gt;
&lt;p&gt;(Side-bar. The &amp;quot;container&amp;quot; is a generalization of the idea of a
computer. The OS lets multiple applications cooperate; what if we have
multiple OS's cooperating? This idea of layers of abstraction is so
compelling, we can apply it in a variety of places. This lets us to talk
about abstract containers instead of concrete computers.)&lt;/p&gt;
&lt;p&gt;We'll have daily meetings while we're building the code that populates
the components that gets installed into the containers that fills out
the context. These last 10 minutes. What we've done. What we're doing.&lt;/p&gt;
&lt;p&gt;We'll have meetings every two weeks to look at components and containers
and be sure they work. People will demo what they've done. It will be
fun. We'll have donuts.&lt;/p&gt;
&lt;p&gt;We'll have impromptu meetings to talk about how to write tests and do
quality assurance on our code and components. The testing and quality
checking became my obsession during the last five years of my career.
Answering the question &amp;quot;Did you test &lt;strong&gt;everything&lt;/strong&gt;?&amp;quot;&lt;/p&gt;
&lt;p&gt;We'll have meetings to talk about managing the containers to be sure
they're working. And how to integrate and deploy the components into the
containers.&lt;/p&gt;
&lt;p&gt;In and among the meetings, I wrote code. For the last ten years, it was
always in Python. Before that it was in other languages.&lt;/p&gt;
&lt;p&gt;So, that's what I did for a living. I went to meetings. I wrote code.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="C4model"></category><category term="Programming Languages"></category><category term="API Design"></category><category term="os"></category></entry><entry><title>SQL linting — this sounds cool</title><link href="https://slott56.github.io/2021_06_17-sql_linting_this_sounds_cool.html" rel="alternate"></link><published>2021-06-17T21:16:00-04:00</published><updated>2021-06-17T21:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-06-17:/2021_06_17-sql_linting_this_sounds_cool.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.pythonpodcast.com/sqlfluff-sql-linter-episode-318/"&gt;https://www.pythonpodcast.com/sqlfluff-sql-linter-episode-318/&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Real Math (symbolic math, like mathematicians do) and a spreadsheet-like feedback loop</title><link href="https://slott56.github.io/2021_06_01-real_math_symbolic_math_like_mathematicians_do_and_a_spreadsheet_like_feedback_loop.html" rel="alternate"></link><published>2021-06-01T08:00:00-04:00</published><updated>2021-06-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-06-01:/2021_06_01-real_math_symbolic_math_like_mathematicians_do_and_a_spreadsheet_like_feedback_loop.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/replacing-a-spreadsheet/"&gt;https://slott56.github.io/replacing-a-spreadsheet/&lt;/a&gt;. This document is
really exciting (to me).&lt;/p&gt;
&lt;p&gt;This is still shaky -- I'm still learning -- but it's a very cool
combination of Python components
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; and &lt;a class="reference external" href="https://jupyterlab.readthedocs.io/en/stable/"&gt;Jupyter
Lab&lt;/a&gt;. As a bonus,
&lt;a class="reference external" href="https://jupyterbook.org/intro.html"&gt;Jupyter{Book}&lt;/a&gt; appeals to me as
a writer. There's an aspect of literate programing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/replacing-a-spreadsheet/"&gt;https://slott56.github.io/replacing-a-spreadsheet/&lt;/a&gt;. This document is
really exciting (to me).&lt;/p&gt;
&lt;p&gt;This is still shaky -- I'm still learning -- but it's a very cool
combination of Python components
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; and &lt;a class="reference external" href="https://jupyterlab.readthedocs.io/en/stable/"&gt;Jupyter
Lab&lt;/a&gt;. As a bonus,
&lt;a class="reference external" href="https://jupyterbook.org/intro.html"&gt;Jupyter{Book}&lt;/a&gt; appeals to me as
a writer. There's an aspect of literate programing in this that is also
very appealing.&lt;/p&gt;
&lt;p&gt;The core is this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I have a problem that involves complex math. Well, it's complex to
me. It involves integrals, so there's a lot of space for confusion.&lt;/li&gt;
&lt;li&gt;This is applied math, and I want to plug in numbers and get answers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In effect, I want a spreadsheet.&lt;/p&gt;
&lt;p&gt;I don't want rows-and-columns. I do want cells, though, that's a nice
organizing principle.&lt;/p&gt;
&lt;p&gt;I don't want the goofy little formulas in a spreadsheet. I want real
Python code.&lt;/p&gt;
&lt;p&gt;I want the spreadsheet-like feature of computations that depend on
inputs and are re-run when the inputs change. This has been the core
value proposition for spreadsheets since the days of VisiCalc. It's a
great UX in general. We just need to get past the rows-and-columns.&lt;/p&gt;
&lt;p&gt;The problem with most spreadsheet apps is the limited capability for
more serious math.&lt;/p&gt;
&lt;p&gt;Which is why the sympy + Jupyter Lab was a blinding revelation to me.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="jupyter lab"></category><category term="spreadsheet"></category><category term="sympy"></category></entry><entry><title>Python's Protocol Annotation vs. Duck Typing</title><link href="https://slott56.github.io/2021_05_25-pythons_protocol_annotation_vs_duck_typing.html" rel="alternate"></link><published>2021-05-25T08:00:00-04:00</published><updated>2021-05-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-05-25:/2021_05_25-pythons_protocol_annotation_vs_duck_typing.html</id><summary type="html">&lt;p&gt;Let's talk about profound confusion.&lt;/p&gt;
&lt;p&gt;I got an email with a subject of this, &amp;quot;Python's Protocol Reduces
Reliance on Duck Typing&amp;quot;. The resulting conversation led to this nugget:
&amp;quot;... my current project could use protocols in Python, and thus I didn't
need to rely on duck typing and instead could use …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's talk about profound confusion.&lt;/p&gt;
&lt;p&gt;I got an email with a subject of this, &amp;quot;Python's Protocol Reduces
Reliance on Duck Typing&amp;quot;. The resulting conversation led to this nugget:
&amp;quot;... my current project could use protocols in Python, and thus I didn't
need to rely on duck typing and instead could use that as my type.&amp;quot;&lt;/p&gt;
&lt;p&gt;I'm unclear on what &amp;quot;reliance&amp;quot; really meant here.&lt;/p&gt;
&lt;p&gt;Python depends (heavily) on duck typing. Because type annotations are
optional, this cannot change. It's unlikely to ever change.&lt;/p&gt;
&lt;p&gt;Here's the bottom line: Duck Typing Won't Go Away.&lt;/p&gt;
&lt;p&gt;Indeed, there's more: Duck Typing Isn't Bad.&lt;/p&gt;
&lt;p&gt;Python doesn't &amp;quot;rely&amp;quot; on the type annotations. They're a bonus feature
to make sure you aren't lying about the types and how they're used.&lt;/p&gt;
&lt;p&gt;Protocols are how duck typing works. When we leverage duck typing among
classes, we're implicitly relying on the classes all supporting a common
protocol. Numbers, for example, implement a ton of methods; this
collection of common methods (e.g., &lt;tt class="docutils literal"&gt;__add__()&lt;/tt&gt;, etc.) define a
protocol.&lt;/p&gt;
&lt;p&gt;With mypy, we can create our own distinct protocols as named types.&lt;/p&gt;
&lt;p&gt;I don't get the &amp;quot;reducing reliance&amp;quot; business when protocols make duck
typing work. And. Sadly. I couldn't figure out where the confusion
arose.&lt;/p&gt;
&lt;div class="section" id="follow-up"&gt;
&lt;h2&gt;Follow-up&lt;/h2&gt;
&lt;p&gt;I asked for clarification and got nothing useful in response. The person
sending the email seemed to be working from a summary of another
conversation, or something. I couldn't figure it out.&lt;/p&gt;
&lt;p&gt;I can try to assume they used to have this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Something:
    def useful_method(self, x: str) -&amp;gt; int:
        # whatever

class CloselyRelated:
    def useful_method(self, x: str) -&amp;gt; int:
        # another polymorphic thing

Polymorphic = Union[Something, CloselyRelated]

# many classes and functions relying on Polymorphic
&lt;/pre&gt;
&lt;p&gt;And they've realized that there may be a better way.&lt;/p&gt;
&lt;p&gt;But. I haven't really got much to go on.&lt;/p&gt;
&lt;p&gt;The better approach often involves something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Polymorphic(Protocol):
    def useful_method(self, x: str) -&amp;gt; int:
        ...
&lt;/pre&gt;
&lt;p&gt;We can define a protocol to help locate the essential features of a
parameter or a result type.&lt;/p&gt;
&lt;p&gt;But. I don't really know what was going on.&lt;/p&gt;
&lt;p&gt;And I couldn't figure out why the word &amp;quot;Reliance&amp;quot; was used.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="duck typing"></category><category term="protocols"></category><category term="annotations"></category><category term="type hints"></category></entry><entry><title>OpenMarine and Signal-K</title><link href="https://slott56.github.io/2021_04_20-openmarine_and_signal_k.html" rel="alternate"></link><published>2021-04-20T08:00:00-04:00</published><updated>2021-04-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-04-20:/2021_04_20-openmarine_and_signal_k.html</id><summary type="html">&lt;p&gt;I heard about these less than a week ago.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openmarine.net/openplotter"&gt;https://openmarine.net/openplotter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openplotter/pypilot"&gt;https://github.com/openplotter/pypilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://signalk.org/installation.html"&gt;https://signalk.org/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is very interesting. Very interesting.&lt;/p&gt;
&lt;p&gt;I have a partially complete IoT anchor alarm.&lt;/p&gt;
&lt;p&gt;The idea of leveraging the boat's other devices through a Signal-K
interface is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I heard about these less than a week ago.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openmarine.net/openplotter"&gt;https://openmarine.net/openplotter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openplotter/pypilot"&gt;https://github.com/openplotter/pypilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://signalk.org/installation.html"&gt;https://signalk.org/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is very interesting. Very interesting.&lt;/p&gt;
&lt;p&gt;I have a partially complete IoT anchor alarm.&lt;/p&gt;
&lt;p&gt;The idea of leveraging the boat's other devices through a Signal-K
interface is appealing.&lt;/p&gt;
&lt;p&gt;The problem is, I don't want the power draw.&lt;/p&gt;
&lt;p&gt;I think I want to continue on the path of a small, thrifty, stand-alone
device that can be used when the rest of the boat's systems are mostly
shut down.&lt;/p&gt;
&lt;p&gt;However. Seeing these projects causes me to rethink my use of Arduino
and C++. While the Arduino is the thriftiest possible device -- the
power consumption is negligible -- I think that a small upgrade to a
Python-based device might make the software a tiny bit simpler.&lt;/p&gt;
&lt;p&gt;An Arduino Uno, specifically, is just barely capable of the UX I was
hoping to build. The two-line LCD with a &amp;quot;mark&amp;quot; push-button, an &amp;quot;anchor
circle&amp;quot; knob, and a &amp;quot;display page&amp;quot; button is right at the limit; I'm
using analog inputs instead of digital for the buttons.&lt;/p&gt;
&lt;p&gt;A Raspberry Pi can support more sophisticated displays, at some cost in
power consumption. An e-ink display might be a better choice than the
two-line LCD because -- well -- anchoring details change slowly.  Once
you've drifted too far (or have a consistent COG away from the marked
point with a steadily growing distance) then the alarm sounds and the
display is more-or-less irrelevant. You're going to get up, and eyeball
the situation to see what's going on. Wether or not the display updates
doesn't matter much.&lt;/p&gt;
&lt;p&gt;We haven't drifted very often, so I don't have too much data.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Once we slid to a new position. It was a stormy, blowy day. We eased
out more scope. And we never moved again. We stood on deck, taking
visual bearings. An e-ink display of the details wasn't what we
depended on.&lt;/li&gt;
&lt;li&gt;We used to rely on an iPhone app to monitor our position. (We've
switched to using SafeAnchor, we used to use an older app, no longer
available.) We were moving slowly, but steadily. It was during a
hurricane, we weren't surprised. We started the engine, raised the
anchor and motored to a new place to reset. Again, we weren't using
the display on the phone, we were looking at Pungo creek.&lt;/li&gt;
&lt;li&gt;And once we were not on the boat when she moved. That would have been
awkward for our neighbors. So. We'd need to have a &amp;quot;reset the anchor
alarm&amp;quot; switch in the cockpit. This would mark a new position. Fatty
Goodlander's advice is to leave a big sign with a string showing them
where it is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A full 1.0 knot of speed is 1.7 feet per second. We often have 50 feet
of line, meaning any movement under 100' is likely ordinary boat motion.
That means 30 seconds until we're suspicious of a problem, and a full
minute before we must sound the alarm. (In the middle, a constant COG
and increasing distance is a leading indicator of trouble; alarm chirps
might be helpful.)&lt;/p&gt;
&lt;p&gt;As intermediate data gathering format, the Signal-K data stream is
appealing. It steps away from the NMEA GPS talker messages. It's
heavy-going for an Arduino Uno. But. Might work out well on something a
little bigger.&lt;/p&gt;
</content><category term="Technologies"></category><category term="arduino"></category><category term="#python"></category><category term="CircuitPlayground"></category><category term="boat"></category><category term="IoT"></category><category term="RaspberryPi"></category></entry><entry><title>A 5-point framework for Python performance management</title><link href="https://slott56.github.io/2021_04_06-a_5_point_framework_for_python_performance_management.html" rel="alternate"></link><published>2021-04-06T08:00:00-04:00</published><updated>2021-04-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-04-06:/2021_04_06-a_5_point_framework_for_python_performance_management.html</id><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/capital-one-tech/a-5-point-framework-for-python-performance-management-5af2be5739d9"&gt;A 5-Point Framework For Python Performance
Management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems straight-forward to me. Have goals. Measure your ability to
meet them.&lt;/p&gt;
&lt;p&gt;I don't see too many teams doing this, though.&lt;/p&gt;
&lt;p&gt;I could be wrong, but, I think performance is left to arguments and
complaints, not solid engineering.&lt;/p&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="#python"></category></entry><entry><title>Recommended Books</title><link href="https://slott56.github.io/2021_03_19-recommended_books.html" rel="alternate"></link><published>2021-03-19T07:33:00-04:00</published><updated>2021-03-19T07:33:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-03-19:/2021_03_19-recommended_books.html</id><summary type="html">&lt;p&gt;I get asked about good books for beginners. Here's an example:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;What Python books do you recommend for novices so they can learn
from beginner to advanced?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;For me, this is nearly impossible to answer.&lt;/p&gt;
&lt;p&gt;&amp;quot;Beginner&amp;quot; is often undefined. I have to turn this around and ask what
you already …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I get asked about good books for beginners. Here's an example:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;What Python books do you recommend for novices so they can learn
from beginner to advanced?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;For me, this is nearly impossible to answer.&lt;/p&gt;
&lt;p&gt;&amp;quot;Beginner&amp;quot; is often undefined. I have to turn this around and ask what
you already know about -- well-- everything. Computing. Programming.
Languages. etc. etc.&lt;/p&gt;
&lt;p&gt;&amp;quot;Advanced&amp;quot; similarly is undefined. Most folks have areas they're
interested in. Machine Learning. IoT. Security. Cloud Engineering.
Graphics. Games. Sound. etc. et yet even more ceteras.&lt;/p&gt;
&lt;p&gt;And -- even more fascinating to me -- where are you on that journey?
What have you done so far?&lt;/p&gt;
&lt;p&gt;I'm am (overly) sensitive to being a Personal Search Concierge, PSC™.&lt;/p&gt;
&lt;p&gt;I know people who (actually) cannot make Google work. Seriously. Utterly
unable to use it. I believe that they are incapable of reframing their
question with synonyms, but instead insist on typing a single thing into
the search bar, and if the first promoted response in the list of
advertisements doesn't literally answer their question, they email me.&lt;/p&gt;
&lt;p&gt;This leads me to a stammering stupidity when asked about Python books.&lt;/p&gt;
&lt;p&gt;Yes, I'm an author. Yes, I read other books. But no, I don't think I can
answer your question.&lt;/p&gt;
&lt;p&gt;One possible non-answer: &lt;a class="reference external" href="https://realpython.com/best-python-books/"&gt;https://realpython.com/best-python-books/&lt;/a&gt;.
Start here.&lt;/p&gt;
&lt;div class="section" id="what-does-advanced-mean"&gt;
&lt;h2&gt;What does &amp;quot;advanced&amp;quot; mean?&lt;/h2&gt;
&lt;p&gt;Most of the Python experts I know are experts at applying Python to a
problem domain. In rare cases, the problem domain is Python itself, but
even then, the focus often narrows to a specific package in the standard
library, or an aspect of the run-time.&lt;/p&gt;
&lt;p&gt;In the process of solving problems with Python, most people tend to
learn a fair amount of the language. I work with folks who are fabulous
problem-solvers but who'll sometimes be surprised by a Python feature
that's outside their already broad experience.&lt;/p&gt;
&lt;p&gt;What's central here is that they're apply Python &lt;strong&gt;to&lt;/strong&gt; something. The
thing that seems to distinguish novices from experts is the pursuit of a
solution to a problem, and learning Python as part of solving the
problem.&lt;/p&gt;
&lt;p&gt;It's essential, then, to have a problem about which one is passionate.
Given a problem, and passion to solve that problem, expertise will grow.&lt;/p&gt;
&lt;p&gt;So that's my other possible non-answer: find a problem you're passionate
about and apply Python to solving it.&lt;/p&gt;
&lt;p&gt;And yes, that's not a book. Books can help with understanding the
problem or working out a solution in Python. Rarely does one book do
both.&lt;/p&gt;
&lt;p&gt;A good friend of mine's Python expertise comes from arranging the
metadata in thousands of photographs on his computer. Apple's photos app
has gone through numerous changes, and his photo library had become a
jumble of obsolete folders, no longer supported by the current app. So
they mastered Python and Apple's scripting tools, and Photos, and Mac OS
X to arrange their photos.&lt;/p&gt;
&lt;p&gt;There are many Civic Tech organizations like the &lt;a class="reference external" href="https://www.codeforamerica.org/events/brigade-congress-2020"&gt;Code for
America&lt;/a&gt;
where you can confront large, complex problems, and build tech skills
while helping solve a real-world problem.&lt;/p&gt;
&lt;p&gt;Another possible
non-answer: &lt;a class="reference external" href="https://www.govwebworks.com/2018/12/03/investigating-the-civic-tech-movement/"&gt;https://www.govwebworks.com/2018/12/03/investigating-the-civic-tech-movement/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everyone's journey is unique.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="tutorial"></category></entry><entry><title>The "The reader won't know what that means" Comment</title><link href="https://slott56.github.io/2021_02_16-the_the_reader_wont_know_what_that_means_comment.html" rel="alternate"></link><published>2021-02-16T08:00:00-05:00</published><updated>2021-02-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-02-16:/2021_02_16-the_the_reader_wont_know_what_that_means_comment.html</id><summary type="html">&lt;p&gt;I have to admit, it's very difficult to respond to this comment. I have
to fight down the urge to say things like &amp;quot;The Reader is not an idiot,&amp;quot;
or &amp;quot;At some point, we have to assume they've seen a computer before.&amp;quot;&lt;/p&gt;
&lt;p&gt;AFAIK there's little or no useful data data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have to admit, it's very difficult to respond to this comment. I have
to fight down the urge to say things like &amp;quot;The Reader is not an idiot,&amp;quot;
or &amp;quot;At some point, we have to assume they've seen a computer before.&amp;quot;&lt;/p&gt;
&lt;p&gt;AFAIK there's little or no useful data data on how much background
people buying technical books have.&lt;/p&gt;
&lt;p&gt;Subjectively, it seems like folks who leave the most comments -- the
noisy few -- seem to balk at chapter 1 things, write a bad review or
blog post and move on.&lt;/p&gt;
&lt;p&gt;It appears they expect to see chapter 1 reinforce their impressions of
their own skills and present the things they -- individually -- don't
yet know but tend to suspect. It needs to involve minimal surprises, and
no forward references to later chapters.&lt;/p&gt;
&lt;p&gt;I wish I could write like that.&lt;/p&gt;
&lt;p&gt;But I can't write like that. I feel the need to assume that some readers
actually do know some things and want the forward references so they can
skip around.&lt;/p&gt;
&lt;p&gt;I feel the need to assume readers have seen another programming language
and have worked through a tutorial or two.&lt;/p&gt;
&lt;p&gt;I may be wrong. It may be true that most readers buy exactly one book
and expect this to be an introduction to computers, languages, and
computer science. If so, I need to learn how to cater to their needs.&lt;/p&gt;
&lt;p&gt;I may be right. People may have background in at least one language and
buy multiple books. If so, I don't think &amp;quot;the reader won't know what
that means&amp;quot; is really a helpful comment.&lt;/p&gt;
&lt;p&gt;For some technical concepts, I like to rely on inductive definitions.
Rather than fussy formalisms, I think it's helpful to use concrete
examples. If there are weird edge cases or seeming contradictions, a
fussy definition may be helpful, but not as a starting point. The
comment &amp;quot;the reader won't know what that means&amp;quot; prior to the first
example is a teeth-grinding thing. Yes. They won't know. That's why the
rest of the paragraph is an example so the reader will know what it
means.&lt;/p&gt;
&lt;p&gt;The good news is the reviewers are reading very closely and splitting
each hair. I am eternally grateful for the opportunity to grind my teeth
in exasperation.&lt;/p&gt;
</content><category term="Technologies"></category><category term="writing"></category></entry><entry><title>The Awkwardness of Fundamental Definitions</title><link href="https://slott56.github.io/2021_02_13-the_awkwardness_of_fundamental_definitions.html" rel="alternate"></link><published>2021-02-13T13:45:00-05:00</published><updated>2021-02-13T13:45:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-02-13:/2021_02_13-the_awkwardness_of_fundamental_definitions.html</id><summary type="html">&lt;p&gt;A pragmatic description of a language (like Python) from axiomatic -- or
really axiom-like -- foundations is exasperatingly hard. I don't think I
have any answers, but I sure do have a lot of challenges. I think
there's a path that involves a lot of &amp;quot;don't look down -- just edge
along the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A pragmatic description of a language (like Python) from axiomatic -- or
really axiom-like -- foundations is exasperatingly hard. I don't think I
have any answers, but I sure do have a lot of challenges. I think
there's a path that involves a lot of &amp;quot;don't look down -- just edge
along the face of this cliff a few more feet and it's going to be okay.&amp;quot;&lt;/p&gt;
&lt;p&gt;The actual language foundations, and a more useful conceptual foundation
don't always match up.&lt;/p&gt;
&lt;p&gt;My specific example is trying to use a subset of Python to get started
with.&lt;/p&gt;
&lt;p&gt;One of the reasons we write software is to see useful results. So you
need output, i.e., the &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; function. On the other end of this,
you might want to accept inputs. But. But... You could finesse that by
simply assigning literal values instead of reading something.&lt;/p&gt;
&lt;p&gt;This leads to the print() function and expressions as a kind of minimal
language to see the essence of programming. (I know this isn't an
original thought. I'm setting up the conflict.)&lt;/p&gt;
&lt;p&gt;Do we explain functions in general when we're explaining this subset of
Python? Or do we stick with arithmetic?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print(&amp;quot;Hello, world!&amp;quot;)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
print(&amp;quot;355/113=&amp;quot;, 355/113)
&lt;/pre&gt;
&lt;p&gt;Maybe the F-string?  Assignment? Or do we really need assignment?
(Spoiler alert, no.)&lt;/p&gt;
&lt;p&gt;What about other functions? Python has a bunch of built-ins. The math
and random modules let us build small games without much intellectual
overhead.&lt;/p&gt;
&lt;p&gt;And how much can we explain about functions? The whole mathematical
notion of function as mapping from domain to range: does that count? Or
nah? What about Python's flexible argument and parameter handling?&lt;/p&gt;
&lt;p&gt;Exceptions? Do we have to explain them? Or do we shrug at division by
zero and kind of ignore it? If we talk about exceptions, do we have to
talk about stack frames and tracebacks?&lt;/p&gt;
&lt;p&gt;At the foundation, a language is variable bindings and function
evaluation. But. Do you explain any of that? And if so, how?&lt;/p&gt;
&lt;p&gt;The additional complication is multiple authors, technical reviews,
editors, and everyone else involved. There's a complex web of varying
opinions on what's foundational and how much explanation is required.
It's new to one person, so it should be up font. But, a lot of up-front
material is boring. Everything in programming involves a tricky nuance
somewhere; how much of that nuance is relevant now and how much is later
and how much is digressive?&lt;/p&gt;
&lt;div class="section" id="trust"&gt;
&lt;h2&gt;Trust&lt;/h2&gt;
&lt;p&gt;To an extent, there's a trust relationship between writer and reader. It
may help to build this if the writer can provide a &amp;quot;trust me on this,&amp;quot;
scenario that (eventually) results in a more complete explanation. The
logical conclusion here is that there's no place in the book for &amp;quot;too
advanced, buy my next book.&amp;quot; Instead, every difficult and nuanced thing
would need to (eventually) be explained. That seems impossible, though.&lt;/p&gt;
&lt;p&gt;With editors, co-authors, and reviewers, the trust relationship is
exactly wrong. Everything needs to be challenged and clarified.&lt;/p&gt;
&lt;p&gt;tl;dr Writing is sometimes hard. And that's the expectation. It's a
narrow fairway surrounded by shoals.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="writing"></category></entry><entry><title>Diagrams and UML notation</title><link href="https://slott56.github.io/2021_01_05-diagrams_and_uml_notation.html" rel="alternate"></link><published>2021-01-05T08:00:00-05:00</published><updated>2021-01-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2021-01-05:/2021_01_05-diagrams_and_uml_notation.html</id><summary type="html">&lt;p&gt;When I started in this business I was given a flowcharting template.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://americanhistory.si.edu/collections/object-groups/flowcharting-templates"&gt;https://americanhistory.si.edu/collections/object-groups/flowcharting-templates&lt;/a&gt;.
I'm pretty sure I had one of
these: &lt;a class="reference external" href="https://americanhistory.si.edu/collections/search/object/nmah_690078"&gt;https://americanhistory.si.edu/collections/search/object/nmah_690078&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since then, things have changed a little.&lt;/p&gt;
&lt;p&gt;I fondly recall using the Rational Rose …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I started in this business I was given a flowcharting template.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://americanhistory.si.edu/collections/object-groups/flowcharting-templates"&gt;https://americanhistory.si.edu/collections/object-groups/flowcharting-templates&lt;/a&gt;.
I'm pretty sure I had one of
these: &lt;a class="reference external" href="https://americanhistory.si.edu/collections/search/object/nmah_690078"&gt;https://americanhistory.si.edu/collections/search/object/nmah_690078&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since then, things have changed a little.&lt;/p&gt;
&lt;p&gt;I fondly recall using the Rational Rose (and an earlier tool that did
Rumbaugh OMT diagrams) to create object models.&lt;/p&gt;
&lt;p&gt;But these were expensive.&lt;/p&gt;
&lt;p&gt;After much searching, I found &lt;strong&gt;ArgoUML&lt;/strong&gt;. This was my go-to-diagrammer
of choice for many years. It's available
here: &lt;a class="reference external" href="https://argouml-tigris-org.github.io"&gt;https://argouml-tigris-org.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, I wound up using &lt;strong&gt;yuml&lt;/strong&gt;
at &lt;a class="reference external" href="https://yuml.me/diagram/scruffy/class/draw"&gt;https://yuml.me/diagram/scruffy/class/draw&lt;/a&gt;. This was very nice
because there was a source text version of the diagram. It was a
high-level code-like description that would lead to a handy picture you
could include in documentation.&lt;/p&gt;
&lt;p&gt;Heavenly.&lt;/p&gt;
&lt;p&gt;Recently, I spent time using &lt;strong&gt;draw.io&lt;/strong&gt;. Start here &lt;a class="reference external" href="https://draw.io"&gt;https://draw.io&lt;/a&gt;.
You have plain-text source version of the diagram that's Git-friendly. I
liked that. It has a lot of UML features, which is very nice, also.&lt;/p&gt;
&lt;p&gt;But now.&lt;/p&gt;
&lt;p&gt;I'm using &lt;strong&gt;plantUML&lt;/strong&gt;, and I think it's pretty
handy. &lt;a class="reference external" href="https://plantuml.com"&gt;https://plantuml.com&lt;/a&gt;. It's a big-old JAR file that converts text
to a diagram. There's no GUI component to this. You describe the image
in a source-code like way. Run it through the tool, and you get a
picture you can paste into documentation. Like yuml, it has an
easy-to-understand high-level text description. I strongly suspect I
could walk a Python AST and emit plantUML source as an intermediate
language from which pictures can be created.&lt;/p&gt;
&lt;p&gt;The Python-Markup tool (&lt;a class="reference external" href="https://python-markdown.github.io/extensions/"&gt;https://python-markdown.github.io/extensions/&lt;/a&gt;)
has a third-party PlantUML plug-in. PyCharm can leverage this to draw
while you're editing in the markdown window.&lt;/p&gt;
&lt;div class="section" id="the-fiddly-bits"&gt;
&lt;h2&gt;The Fiddly Bits&lt;/h2&gt;
&lt;p&gt;It's a little fiddly to get all the parts organized properly, but, it
really, really does work. You can write technical documentation, with
pictures.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add the Markdown tool to PyCharm.&lt;/li&gt;
&lt;li&gt;In the preferences for the PyCharm Markdown tool, install and enable
PlantUML.&lt;/li&gt;
&lt;li&gt;You can usually use &lt;strong&gt;conda&lt;/strong&gt; to install &lt;strong&gt;graphviz&lt;/strong&gt; as well as
installing the &lt;strong&gt;plantuml-markdown&lt;/strong&gt; tools. You can manually run the
&lt;strong&gt;markdown_py&lt;/strong&gt; application to create the HTML copies of the .md
files.&lt;/li&gt;
&lt;li&gt;Update your OS environment settings to set the
&lt;strong&gt;GRAPHVIZ_DOT&lt;/strong&gt; environment variable to name the conda virtual
environment where &lt;strong&gt;graphviz&lt;/strong&gt; was installed. For macOS and Linux
users update the &lt;strong&gt;~/.zshrc&lt;/strong&gt; (or &lt;strong&gt;~/.bashrc&lt;/strong&gt;) file, depending on
which shell is in use. Windows users have my heartfelt sympathy;
maybe set the system environment variables.&lt;/li&gt;
&lt;li&gt;You may also need to create a &lt;strong&gt;plantuml&lt;/strong&gt; shell script that's on
your &lt;strong&gt;PATH&lt;/strong&gt;. I put it in &lt;strong&gt;/usr/local/bin&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/mikitex70/plantuml-markdown"&gt;https://github.com/mikitex70/plantuml-markdown&lt;/a&gt; for details on
installation.&lt;/p&gt;
&lt;p&gt;After all this fussing around, it worked delightfully. I'm a convert to
PlantUML.&lt;/p&gt;
&lt;p&gt;I suggest the following in each diagram.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
skinparam monochrome true
skinparam handwritten false
skinparam shadowing false
hide class circle
&lt;/pre&gt;
&lt;p&gt;You may want to set a more global configuration, but I sometimes want to
change the handwritten parameter to true for &amp;quot;draft&amp;quot; diagrams, separate
from final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;You can integrate plantUML with PyCharm to draw pictures while you're
editing in the markdown window.&lt;/p&gt;
&lt;p&gt;You do have to trust plantUML to draw more-or-less what you want. There
are limits, and if you don't like what plantUML is doing, switch to
draw.io. If you are flexible, however, it's really, really good.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="plantuml"></category><category term="UML"></category></entry><entry><title>Inelegant Python</title><link href="https://slott56.github.io/2020_12_16-inelegant_python.html" rel="alternate"></link><published>2020-12-16T08:54:00-05:00</published><updated>2020-12-16T08:54:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-12-16:/2020_12_16-inelegant_python.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/"&gt;https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/&lt;/a&gt;
This seems to be a popular coding interview problem.&lt;/p&gt;
&lt;p&gt;The Python code shown on the site seems almost maliciously misleading.&lt;/p&gt;
&lt;p&gt;The full problem is this:&lt;/p&gt;
&lt;blockquote&gt;
You are given an unsorted array with both positive and negative
elements. You have to find the smallest positive …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/"&gt;https://www.geeksforgeeks.org/find-the-smallest-positive-number-missing-from-an-unsorted-array/&lt;/a&gt;
This seems to be a popular coding interview problem.&lt;/p&gt;
&lt;p&gt;The Python code shown on the site seems almost maliciously misleading.&lt;/p&gt;
&lt;p&gt;The full problem is this:&lt;/p&gt;
&lt;blockquote&gt;
You are given an unsorted array with both positive and negative
elements. You have to find the smallest positive number missing from
the array in O(n) time using constant extra space. You can modify the
original array.&lt;/blockquote&gt;
&lt;p&gt;Here's a common-enough Python solution.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def smallest_missing_1(x):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_1([2, 3, 7, 6, 8, -1, -10, 15])
    1
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_1([2, 3, -7, 6, 8, 1, -10, 15])
    4
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_1([1, 1, 0, -1, -2])
    2
    &amp;quot;&amp;quot;&amp;quot;
    try:
        return min(set(range(1, max(x)+2))-set(x))
    except ValueError as ex:
        # min() arg is an empty sequence
        return 1
&lt;/pre&gt;
&lt;p&gt;Some folks don't like the try/except to detect the edge case of all
negative values. If  max(x) &amp;lt;= 0, then the exception will be raised, and
we could use an if statement for a LBYL solution.&lt;/p&gt;
&lt;p&gt;What's more important is this solution violates the constant extra space
constraint. It builds two sets, which isn't a simple constant size
object; it depends on the size of the input object.&lt;/p&gt;
&lt;p&gt;To avoid the sets, we'll use a generator.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def smallest_missing_2(x):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_2([2, 3, 7, 6, 8, -1, -10, 15])
    1
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_2([2, 3, -7, 6, 8, 1, -10, 15])
    4
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_2([1, 1, 0, -1, -2])
    2
    &amp;quot;&amp;quot;&amp;quot;
    try:
        return next(n for n in range(1, max(x)+2) if n not in x)
    except StopIteration as ex:
        # next() found an empty sequence
        return 1
&lt;/pre&gt;
&lt;p&gt;This violates the &lt;strong&gt;O&lt;/strong&gt;(&lt;em&gt;n&lt;/em&gt;) constraint with the repeated use of the
&lt;strong&gt;in&lt;/strong&gt; operator.&lt;/p&gt;
&lt;p&gt;To get to &lt;strong&gt;O&lt;/strong&gt;(&lt;em&gt;n&lt;/em&gt;) and no extra storage, we're forced to (a) demand
the input is a mutable list, so we can (b) reuse the input list object
to track which numbers are present and which are absent. This reuse of a
mutable list is atypical for Python programming. Indeed, it seems like a
bad idea.&lt;/p&gt;
&lt;p&gt;Consistent with the spirit of the problem, we're constrained to making
arithmetic changes to the values in the original list, x, to track the
state of the computation. The idea is that the value x[i] will have
*both* an original input value, and the presence (or absence) of some
value, p+i, in the sequence.&lt;/p&gt;
&lt;p&gt;One traditional approach is to use the sign as a way to carry this extra
bit of information. That's why negative numbers are thrown in to the
input data. They make the sign business super confusing. Also. That's
why zero is excluded. Conventional integer math doesn't have a negative
zero, confounding the problem with array slots that have numbers that
make sign processing icky.&lt;/p&gt;
&lt;p&gt;I'm not a fan of using the sign for this. I'd prefer to use Least
Significant Bits (LSB's) because we have a fairly large number of
available LSB's. And. We can trivially ignore zero values and their
habit of not having useful signs. Unless the list has 2**62 elements, a
little shifting won't hurt any.&lt;/p&gt;
&lt;p&gt;Here's a solution that would *rarely* be used in normal Python work.
Maybe on a Circuit Playground Express MicroPython. But not anywhere
else.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import List

def smallest_missing_3(x: List[int]) -&amp;gt; int:
    &amp;quot;&amp;quot;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_3([2, 3, 7, 6, 8, -1, -10, 15])
    1
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_3([2, 3, -7, 6, 8, 1, -10, 15])
    4
    &amp;gt;&amp;gt;&amp;gt; smallest_missing_3([1, 1, 0, -1, -2])
    2
    &amp;quot;&amp;quot;&amp;quot;
    # Purge negative numbers. Scale the other numbers.
    for i in range(len(x)):
        if x[i] &amp;lt; 0:
            x[i] = 0
        else:
            x[i] = x[i] &amp;lt;&amp;lt; 1
    # Set LSB on positions which are filled; ignoring None values.
    # This can raise an index out-of-bounds exception, which we silence.
    for v in filter(None, (scaled &amp;gt;&amp;gt; 1 for scaled in x)):
        try:
            x[v-1] = x[v-1] | 1
        except IndexError:
            pass
    # Find first value with LSB not set.
    for i in range(len(x)):
        if x[i] &amp;amp; 1 == 0:
            return i+1
&lt;/pre&gt;
&lt;p&gt;This is pretty atypical Python code. I'm kind of shocked folks would use
something like this as an interview question. It's rather complex and
requires some very old-school programming tricks to make the whole thing
remotely palatable.&lt;/p&gt;
&lt;p&gt;The index out-of-bounds is particularly nasty. It means there's a
number, n, that's greater than len(x). This is worrisome, but, it also
means any gap MUST be less than this large number n. For this reason, we
can silence array index errors.&lt;/p&gt;
&lt;p&gt;I would not be able to simply stand up in a conference room and solve
this without some additional direction. The &amp;quot;making arithmetic changes
to the values in the original list&amp;quot; secret is something I knew about and
did -- when I was younger -- but I haven't done that kind of thing in
decades.&lt;/p&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="#python"></category></entry><entry><title>Mind the Gap -- mypy's slight lag behind Python 3.9</title><link href="https://slott56.github.io/2020_11_10-mind_the_gap_mypys_slight_lag_behind_python_39.html" rel="alternate"></link><published>2020-11-10T08:00:00-05:00</published><updated>2020-11-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-11-10:/2020_11_10-mind_the_gap_mypys_slight_lag_behind_python_39.html</id><summary type="html">&lt;p&gt;Working on a new book. Fun stuff. It's going to cover Python 3.9.&lt;/p&gt;
&lt;p&gt;I'm adding the type hints material. And that means &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585/#forward-compatibility"&gt;PEP
585&lt;/a&gt;.
Which means type hints for generics can use the generic types. We can
use list[int] instead of List[int] and avoid from typing import …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working on a new book. Fun stuff. It's going to cover Python 3.9.&lt;/p&gt;
&lt;p&gt;I'm adding the type hints material. And that means &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585/#forward-compatibility"&gt;PEP
585&lt;/a&gt;.
Which means type hints for generics can use the generic types. We can
use list[int] instead of List[int] and avoid from typing import List.&lt;/p&gt;
&lt;p&gt;It's all fun.&lt;/p&gt;
&lt;p&gt;Until...&lt;/p&gt;
&lt;p&gt;Wait... What?&lt;/p&gt;
&lt;p&gt;When I run &lt;strong&gt;mypy&lt;/strong&gt;, it doesn't like the PEP 585 changes.&lt;/p&gt;
&lt;p&gt;I make sure I'm running Python 3.9.0 everywhere. I make sure I have mypy
0.790. I'm baffled.&lt;/p&gt;
&lt;p&gt;Then. I find this.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/python/mypy/issues/7907"&gt;https://github.com/python/mypy/issues/7907&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ah. It appears that &lt;strong&gt;mypy&lt;/strong&gt; is not completely up-to-speed with Python.&lt;/p&gt;
&lt;p&gt;And this makes perfect sense.&lt;/p&gt;
&lt;p&gt;What I think it means is that I'll have to tweak all of the examples
when &lt;strong&gt;mypy&lt;/strong&gt; also supports PEP 585.&lt;/p&gt;
&lt;p&gt;For now, I'm sticking with strict checks and the 0.790 release of
&lt;strong&gt;mypy&lt;/strong&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="mypy"></category><category term="PEP"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>"Python doesn’t do tail recursion" -- wait, what?</title><link href="https://slott56.github.io/2020_11_07-python_doesnt_do_tail_recursion_wait_what.html" rel="alternate"></link><published>2020-11-07T15:36:00-05:00</published><updated>2020-11-07T15:36:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-11-07:/2020_11_07-python_doesnt_do_tail_recursion_wait_what.html</id><summary type="html">&lt;p&gt;Yes, that's what the email said.&lt;/p&gt;
&lt;p&gt;I was -- well -- shocked. Too shocked to be polite. Content Warning:
much snark follows.&lt;/p&gt;
&lt;div class="section" id="bluf-tail-recursion-is-not-tail-recursion-optimization"&gt;
&lt;h2&gt;BLUF: Tail Recursion is not Tail Recursion Optimization.&lt;/h2&gt;
&lt;p&gt;Eventually, it became clear they were worried about tail recursion
&lt;strong&gt;optimization&lt;/strong&gt;. Maybe I'm too focused on words, but I think words
matter …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Yes, that's what the email said.&lt;/p&gt;
&lt;p&gt;I was -- well -- shocked. Too shocked to be polite. Content Warning:
much snark follows.&lt;/p&gt;
&lt;div class="section" id="bluf-tail-recursion-is-not-tail-recursion-optimization"&gt;
&lt;h2&gt;BLUF: Tail Recursion is not Tail Recursion Optimization.&lt;/h2&gt;
&lt;p&gt;Eventually, it became clear they were worried about tail recursion
&lt;strong&gt;optimization&lt;/strong&gt;. Maybe I'm too focused on words, but I think words
matter. The initial claim was so clearly wrong, I had to challenge it.
It took three *more* emails to get to the optimization point.&lt;/p&gt;
&lt;p&gt;Hence my overload of snark. Three emails to discover they didn't see the
word &amp;quot;optimization.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tail-recursion"&gt;
&lt;h2&gt;Tail Recursion&lt;/h2&gt;
&lt;p&gt;Here's an example. (I wish questions included example code instead of
weird assertions that are clearly false.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def f(x: int) -&amp;gt; int:
    if x == 0: return 1
    return x*f(x-1)
&lt;/pre&gt;
&lt;p&gt;This function demonstrates tail recursion. The &amp;quot;tail&amp;quot; of the function
involves a recursive reference to the function. An optimizing compiler
can optimize the recursion to make it not recursive.&lt;/p&gt;
&lt;p&gt;If Python doesn't do tail recursion, this function would not work.&lt;/p&gt;
&lt;p&gt;Since it works, Python does tail recursion.&lt;/p&gt;
&lt;p&gt;Python limits recursion so that you crash cleanly before you're out of
memory.&lt;/p&gt;
&lt;p&gt;This is important. Older languages would run out of memory for stack
frames. Instead of reporting a recursion problem, they'd just crash.
Out-of-memory. Sorry. No drop to `pdb`. Nothing. This is bad.&lt;/p&gt;
&lt;p&gt;In the old Mac OS (≤9) the stack and heap memory grew from opposite ends
of the available RAM. If they collided, it was a stack overflow, and the
running app was crashed.&lt;/p&gt;
&lt;p&gt;Here's how the stack limitation plays out in practice:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Python 3.9.0 | packaged by conda-forge | (default, Oct 10 2020, 20:36:05)
[Clang 10.0.1 ] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; def f(x: int) -&amp;gt; int:
...     if x == 0: return 1
...     return x*f(x-1)
...
&amp;gt;&amp;gt;&amp;gt; f(999)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 3, in f
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 3, in f
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 3, in f
  [Previous line repeated 995 more times]
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in f
RecursionError: maximum recursion depth exceeded in comparison
&amp;gt;&amp;gt;&amp;gt; f(997)
403597244616453902342926527652907402110903352461393891430307973735196631901068423726375883385358710213700663198466197719394411318126551961682447808198924968051643330792790545975658652366984953410102994729193397927862707860663312211428139657339199210288839829245965893084586772188847949801354437616450752245066665598898009417557796737695167521343249479413631414534202184726421479392615730781173164526393982880263279118925406206180689438683308644696334133955184235540077242451165903811018277198321800315958279899941381566151490917379981054549852483223292752438981198080270888254399197574536460570473430371595872403169486757166154294941258045311241382930836862005052391967478429035362983199050663230586866257612402804942403442331663944341683350732204123565349869446216232111598995678724462182568501131746383857706790400107507266739002631612931124112227909672935742104968533278074796000335855930432060517447195226436187301231195091058916141500005034486568847599649004940677693185232218378659444854645703908824934015144550035704605317977378620311855095356769488892217130200011250491151641531090120083765159221969755314437880209281708574493693840125338722070514029362985801732618715060934298236579096167095859504053310608725711198457200226544350445941157734863407428532431126485686678788466148681975019174010453297639004006819520704463840773528691224455265229985489764356909675383800245969276679872407757924211918488179598530382266647547907226165479802976547896939656888813256826539067915695278878516257396920983511389029563101112325372395464739783143361362879872578550147571168136083391354242735142803988735616917749898060073075542403509536490539404444972668319521415425667918323473675966566332390993259591959049424070380861864682206986463729281557338747466546627859206287571996491606797979064142819469589200812679026561288124087136359830959867034513441434850212864818601504529520195828528045600869420646442863720485414968365312690523835026508545772659712105161137693595262919371358840019473383802028344531181679417716563013501242477291139042422814166369601152223293596957527530934652046662174154235850073391729650007182794396630407081318880947107940245036774649857429379220776637356890211596540009349092255988047909417594778375705723841918167663026277009033939654785671715045122185315730249393616044737902170116980736000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This shows how a large number of operations (around 1,000) exceeds an
internal limit. The exception is not out-of-memory, it's too much
recursion.&lt;/p&gt;
&lt;p&gt;A slightly smaller number (997 in this example) worked.  999 didn't work
because it exceeded the threshold.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manual-tail-recursion-optimization"&gt;
&lt;h2&gt;Manual Tail Recursion Optimization&lt;/h2&gt;
&lt;p&gt;New word: Optimization. New concept.&lt;/p&gt;
&lt;p&gt;If the tail recursion were optimized into a loop, we'd see code that
behaves as if we wrote this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from math import prod
&amp;gt;&amp;gt;&amp;gt; def f1(x: int) -&amp;gt; int:
...     return prod(range(1, x+1))
&lt;/pre&gt;
&lt;p&gt;This unwinds the tail recursion into a loop. A generator,
&lt;tt class="docutils literal"&gt;range(1, x+1)&lt;/tt&gt;, creates a sequence of values, which are reduced into
a product. This doesn't involve recursion or stack frames. Indeed,
because it's a generator, it involves very little memory.&lt;/p&gt;
&lt;p&gt;And it works for  numbers well over 1,000. Evidence (if any were needed)
that tail recursion optimization is *not* being done in Python.&lt;/p&gt;
&lt;p&gt;We'll repeat this for those who feel the need to send me crazy-sounding
emails.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automatic-tail-recursion-optimization"&gt;
&lt;h2&gt;Automatic Tail Recursion Optimization&lt;/h2&gt;
&lt;p&gt;There is no automatic transformation from tail recursion to loop in
Python.&lt;/p&gt;
&lt;p&gt;I'll repeat that for the folks who send me emails claiming tail
recursion isn't supported. (Everyone else probably has a pretty good
grip on this.)&lt;/p&gt;
&lt;p&gt;There is no &lt;strong&gt;automatic&lt;/strong&gt; transformation from tail recursion to loop.&lt;/p&gt;
&lt;p&gt;Tail recursion works. It has a limit.&lt;/p&gt;
&lt;p&gt;Manually optimized tail recursion (to create a loop) also works. It
doesn't have the same limit.&lt;/p&gt;
&lt;p&gt;Stated yet another way: unlike some languages, Python does &lt;strong&gt;not&lt;/strong&gt;
optimize for you. You must do the rewrite yourself.&lt;/p&gt;
&lt;p&gt;While I would have thought these ideas (tail recursion and tail
recursion &lt;strong&gt;optimization&lt;/strong&gt;) were different. I was wrong. Hopefully, this
blog post will help folks read *all* the words.&lt;/p&gt;
&lt;p&gt;I'm also pretty sure it's covered in
here: &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-second-edition/9781788627061"&gt;https://www.packtpub.com/product/functional-python-programming-second-edition/9781788627061&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category></entry><entry><title>Python 3.9 Rearranging typing and collections.abc</title><link href="https://slott56.github.io/2020_10_27-python_39_rearranging_typing_and_collectionsabc.html" rel="alternate"></link><published>2020-10-27T08:54:00-04:00</published><updated>2020-10-27T08:54:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-10-27:/2020_10_27-python_39_rearranging_typing_and_collectionsabc.html</id><summary type="html">&lt;p&gt;This is glorious.&lt;/p&gt;
&lt;p&gt;There was this sort of awkward shoving match between &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;collections.abc&lt;/tt&gt;. Both had generic type definitions and it was --
often -- unclear how to use them.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585"&gt;PEP 585&lt;/a&gt;. Now they are
all unified into a much happier family.&lt;/p&gt;
&lt;p&gt;And. We wind up writing things like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is glorious.&lt;/p&gt;
&lt;p&gt;There was this sort of awkward shoving match between &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;collections.abc&lt;/tt&gt;. Both had generic type definitions and it was --
often -- unclear how to use them.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0585"&gt;PEP 585&lt;/a&gt;. Now they are
all unified into a much happier family.&lt;/p&gt;
&lt;p&gt;And. We wind up writing things like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import collections.abc
import typing
import sys

if sys.version_info &amp;gt;= (3, 9):
    BucketCollection = collections.abc.Collection[Sample]
else:
    BucketCollection = typing.Collection[Sample]
&lt;/pre&gt;
&lt;p&gt;Now we can have code that passes tests for 3.8 and 3.9. And at some
point we can cut off the 3.8 support and delete the ancient alternative
definition.&lt;/p&gt;
&lt;p&gt;I'm delighted to be able to move forward with a much simpler future in
which collections are in the &lt;tt class="docutils literal"&gt;collections.abc&lt;/tt&gt; and other, more
foundational stuff is in &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>Type Hints to extend built-in structures</title><link href="https://slott56.github.io/2020_10_20-type_hints_to_extend_built_in_structures.html" rel="alternate"></link><published>2020-10-20T08:00:00-04:00</published><updated>2020-10-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-10-20:/2020_10_20-type_hints_to_extend_built_in_structures.html</id><summary type="html">&lt;p&gt;Working on revisions to a book. Fun stuff.
See &lt;a class="reference external" href="https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261"&gt;https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261&lt;/a&gt;
I may have the privilege of working with Dusty.&lt;/p&gt;
&lt;p&gt;I've been using &lt;strong&gt;mypy&lt;/strong&gt; for all my 2nd edition changes, but not in
--strict mode.&lt;/p&gt;
&lt;p&gt;I've decided to ramp things up, and switch to strict …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working on revisions to a book. Fun stuff.
See &lt;a class="reference external" href="https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261"&gt;https://www.packtpub.com/product/python-3-object-oriented-programming/9781849511261&lt;/a&gt;
I may have the privilege of working with Dusty.&lt;/p&gt;
&lt;p&gt;I've been using &lt;strong&gt;mypy&lt;/strong&gt; for all my 2nd edition changes, but not in
--strict mode.&lt;/p&gt;
&lt;p&gt;I've decided to ramp things up, and switch to strict type checking for
all of the examples and case studies.&lt;/p&gt;
&lt;p&gt;This lead me to stumble over&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyThing(dict):
    def some_extra_method(self):
        pass
&lt;/pre&gt;
&lt;p&gt;I absolutely could not get this to work for hours and hours.&lt;/p&gt;
&lt;p&gt;I more-or-less gave up on it, until I started a similar example for a
later chapter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ListWithFeatures(list):
    def feature(self):
        pass
&lt;/pre&gt;
&lt;p&gt;This is almost the same, but, somehow, I understood it better.  As
written, it is rejected by mypy. What I meant was this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ListWithFeatures(List[MyThing]):
    &amp;#64;overload
    def __init__(self) -&amp;gt; None: ...
    &amp;#64;overload
    def __init__(self, source: Iterable[MyThing]) -&amp;gt; None: ...
    def __init__(self, source: Optional[Iterable[MyThing]]) -&amp;gt; None:
        if source:
        super().__init__(source)
        else:
            super().__init__()
    def feature(self) -&amp;gt; float:
        return sum(thing.some_extra_method())/len(self)
&lt;/pre&gt;
&lt;p&gt;I don't know why, but this was easier for me to visualize the problem..
It clarified my understanding profoundly.&lt;/p&gt;
&lt;p&gt;We don't simply extend list or dict.  We should extend them because list
is an alias for List[Any], and when being strict, we need to avoid Any.
Aha.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>Sources of Confusion: a "mea culpa" [Updated]</title><link href="https://slott56.github.io/2020_10_14-sources_of_confusion_a_mea_culpa_updated.html" rel="alternate"></link><published>2020-10-14T08:45:00-04:00</published><updated>2020-10-14T08:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-10-14:/2020_10_14-sources_of_confusion_a_mea_culpa_updated.html</id><summary type="html">&lt;p&gt;I am not patient. I have been dismissed as one who does not suffer
fools gladly.&lt;/p&gt;
&lt;p&gt;This is a bad attitude, and I absolutely suffer from it. No denials
here. I'm aware it limits my ability to help the deeply confused.&lt;/p&gt;
&lt;p&gt;My personal failing is not being patient enough to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am not patient. I have been dismissed as one who does not suffer
fools gladly.&lt;/p&gt;
&lt;p&gt;This is a bad attitude, and I absolutely suffer from it. No denials
here. I'm aware it limits my ability to help the deeply confused.&lt;/p&gt;
&lt;p&gt;My personal failing is not being patient enough to discover the root
cause of their confusion.&lt;/p&gt;
&lt;p&gt;It's not that I don't care -- I would truly like to help them. It's that
I can't keep my mouth shut while they explain their ridiculous chain of
invalid assumptions as if things they invented have some tangible
reality.&lt;/p&gt;
&lt;p&gt;I'm old, and I'm not planning on becoming more empathetic. Instead, I've
become less curious about wrong ideas. I find silence is helpful because
I don't yell at them as much as I could.&lt;/p&gt;
&lt;p&gt;Recently someone tried to tell me that a Python tuple wasn't
&lt;strong&gt;really&lt;/strong&gt; immutable.&lt;/p&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;p&gt;That's what they said.&lt;/p&gt;
&lt;p&gt;A tuple of lists has lists that &lt;strong&gt;can&lt;/strong&gt; be modified. (They did not have
the courtesy to provide examples, I've had to add examples based I what
I &lt;strong&gt;assume&lt;/strong&gt; they're talking about.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; t = ([], [], [])
&amp;gt;&amp;gt;&amp;gt; t[0].append(42)
&amp;gt;&amp;gt;&amp;gt; t
([42]. [], [])
&lt;/pre&gt;
&lt;p&gt;&amp;quot;See,&amp;quot; they said. &amp;quot;Mutable.&amp;quot;&lt;/p&gt;
&lt;p&gt;Implicit follow-up: Python is a web of lies and there's no reason for it
to be better than a spreadsheet.&lt;/p&gt;
&lt;p&gt;I did not ask how the immutability of a tuple was magically transferred
to the lists contained within the tuple.&lt;/p&gt;
&lt;p&gt;I did not ask about their infections disease theory of protocol
transformation of types. Somehow, when associated with a tuple, the list
became tuple-like, and lost a bunch of methods.&lt;/p&gt;
&lt;p&gt;I did not ask if they thought there was some some method-shedding
feature where an immutable structure forces other data structures to
shed methods.&lt;/p&gt;
&lt;p&gt;I did not ask what was supposed to happen to a dictionary, where there's
no built-in frozen dictionary.&lt;/p&gt;
&lt;p&gt;I did not ask what would happen with a &amp;quot;custom&amp;quot; class (one created in
the app, not a built-in collection.)&lt;/p&gt;
&lt;p&gt;I did not ask what fantasy land they come from where a tuple of mutable
objects would lead to immutability of the contained objects.&lt;/p&gt;
&lt;p&gt;I did not ask if it worked the other way, too: was a list of tuples also
supposed to freeze up?&lt;/p&gt;
&lt;p&gt;I did not ask if it transferred more than one level deep into the lists
inside the tuple.&lt;/p&gt;
&lt;p&gt;I should have.&lt;/p&gt;
&lt;p&gt;It was an epic failing on my part to not dig into the bizzaro world
where the question could arise.&lt;/p&gt;
&lt;p&gt;BTW. They had the same complaint about frozen data classes. (Again. They
did not have the courtesy to provide code. I'm guessing this is what
they meant. My failure for not asking.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from typing import List
&amp;gt;&amp;gt;&amp;gt; from dataclasses import dataclass
&amp;gt;&amp;gt;&amp;gt; &amp;#64;dataclass(frozen=True)
... class Kidding_Right:
...     one_thing: List[int]
...     another_thing: List[int]
...
&amp;gt;&amp;gt;&amp;gt; kr = Kidding_Right([], [])
&amp;gt;&amp;gt;&amp;gt; kr.one_thing.append(42)
&amp;gt;&amp;gt;&amp;gt; kr
Kidding_Right(one_thing=[42], another_thing=[])
&lt;/pre&gt;
&lt;p&gt;Triumphant Sneer: &amp;quot;See, frozen is little more than a suggestion. The
lists within the data class are *not* frozen.&amp;quot;&lt;/p&gt;
&lt;p&gt;Yes. They appeared to be claiming frozen was supposed to apply
transitively to the objects within the dataclass.  Appeared. My mistake
was failing to ask what they hell they were talking about.&lt;/p&gt;
&lt;p&gt;I really couldn't bear to know what caused someone to think this was in
any way &amp;quot;confusing&amp;quot; or required &amp;quot;clarification.&amp;quot; I didn't want to hear
about transitivity and how the data class properties were supposed to
infect the underlying objects.&lt;/p&gt;
&lt;p&gt;Their notion was essentially wrong, and wickedly so. I could have asked,
but I'm not sure I could have waited patiently through their answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;quot;little more than a suggestion&amp;quot;.&lt;/p&gt;
&lt;p&gt;Ah.&lt;/p&gt;
&lt;p&gt;This is an strange confusion.&lt;/p&gt;
&lt;p&gt;A dynamic language (like Python) resolves everything at run-time. It
turns out that there are ways to override __getattr__() and
__setattr__() to break the frozen setting. Indeed, you can reach into
the internal __dict__ object and do real damage to the object.&lt;/p&gt;
&lt;p&gt;I guess the consequences of a dynamic language can be confusing if you
aren't expecting a dynamic language to actually be dynamic.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="quot-i-guess-the-consequences-of-a-dynamic-langua"&gt;
&lt;h2&gt;&amp;amp;quot;I guess the consequences of a dynamic langua...&lt;/h2&gt;
&lt;p&gt;McSee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-10-20 21:55:24.002000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;I guess the consequences of a dynamic language can be confusing if you
aren't expecting a dynamic language to actually be dynamic.&amp;quot;
Exactly. You were TOO patient&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-might-help-people-if-they-read-the-following-py"&gt;
&lt;h2&gt;It might help people if they read the following Py...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-10-16 16:05:57.573000-04:00&lt;/p&gt;
&lt;p&gt;It might help people if they read the following Python documentation
&lt;a class="reference external" href="https://docs.python.org/3/reference/executionmodel.html#interaction-with-dynamic-features"&gt;https://docs.python.org/3/reference/executionmodel.html#interaction-with-dynamic-features&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Open Source Support Ideas</title><link href="https://slott56.github.io/2020_09_09-open_source_support_ideas.html" rel="alternate"></link><published>2020-09-09T19:02:00-04:00</published><updated>2020-09-09T19:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-09-09:/2020_09_09-open_source_support_ideas.html</id><summary type="html">&lt;p&gt;&amp;quot;... [I] am thinking of building an in house conda forge, or buying a
solution, or paying someone to set something up.&amp;quot;&lt;/p&gt;
&lt;p&gt;The build v. Buy decision. This is always hard. Really hard.&lt;/p&gt;
&lt;p&gt;We used to ask &amp;quot;What's your business? Is it building software or making
widgets?&amp;quot;&lt;/p&gt;
&lt;p&gt;And (for some) the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;... [I] am thinking of building an in house conda forge, or buying a
solution, or paying someone to set something up.&amp;quot;&lt;/p&gt;
&lt;p&gt;The build v. Buy decision. This is always hard. Really hard.&lt;/p&gt;
&lt;p&gt;We used to ask &amp;quot;What's your business? Is it building software or making
widgets?&amp;quot;&lt;/p&gt;
&lt;p&gt;And (for some) the business is making widgets.&lt;/p&gt;
&lt;p&gt;This is short-sighted.&lt;/p&gt;
&lt;p&gt;But. A lot of folks in senior positions were given this as a model back
in the olden days. So, you need to address the &amp;quot;how much non-widget
stuff are we going to take on?&amp;quot; question.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Our Business is Widgets&amp;quot; is short-sighted because it fails to
recognize where the money is made. It's the ancillary things *around*
the widgets. Things only software can do. Customer satisfaction.
Supply-chain management.&lt;/p&gt;
&lt;p&gt;So. Business development == Software development. They're inextricably
bound.&lt;/p&gt;
&lt;p&gt;With that background, lets' look at what you want to do.&lt;/p&gt;
&lt;p&gt;Open Source software is not actually &amp;quot;free&amp;quot; in any sense. Someone has to
support it. If you embrace open source, then, you have to support it
in-house. Somehow. And that in-house work isn't small.&lt;/p&gt;
&lt;p&gt;The in-house open-source support comes in degrees, starting with a
distant &amp;quot;throw money at a maintainer&amp;quot; kind of action. You know. Support
NumFocus and Anaconda and hope it trickles down appropriately (it
sometimes does) to the real maintainers.&lt;/p&gt;
&lt;p&gt;The next step is to build the tooling (and expertise) in-house. Conda
forge (or maybe JFrog or something else) and have someone on staff who
can grow to really understand how it fits together. They may not be up
to external contributions, but they can do the installs, make sure
things are running, handle updates, manage certificates, rotate keys,
all the things that lead to smooth experience for users.&lt;/p&gt;
&lt;p&gt;The top step is to hire one of the principles and let them do their open
source thing but give them office space and a salary.&lt;/p&gt;
&lt;p&gt;I'm big on the middle step. Do it in-house. It's *not* your core
business (in a very narrow, legal and finance sense) but it *is* the
backbone fo the information-centric value-add where the real money is
made.&lt;/p&gt;
&lt;p&gt;Folks in management (usually accouting) get frustrated with this
approach. It seems like it should take a month or two and you're up and
running. (The GAAP requires we plan like this. Make up a random date.
Make up a random budget.)&lt;/p&gt;
&lt;p&gt;But. Then. 13 weeks into the 8-week project, you still don't have a
reliable, high-performance server.  Accounting gets grumpy because the
plan you have them months ago turns out to have been riddled with
invalid assumptions and half-truths. (They get revenge by cancelling the
project at the worst moment to be sure it's a huge loss in everyone's
eyes.)&lt;/p&gt;
&lt;p&gt;I think the mistake is failing to enumerate the lessons learned. A lot
will be learned. A real lot. And some of it is small, but it still takes
all day to figure it out. Other things are big and take failed roll-outs
and screwed up backup-restore activities. It's essential to make a
strong parallel between open source and open learning.&lt;/p&gt;
&lt;p&gt;You don't know everything. (Indeed, you can't, much to the consternation
of the accountants.) But. You are learning at a steady rate. The money
is creating significant value.&lt;/p&gt;
&lt;p&gt;And after 26 weeks, when things *really* seem to be working, there
needs to be a very splashy list of &amp;quot;things we can do now that we
couldn't do before.&amp;quot;  A demo of starting a new project. `conda create
demo python=3.8.6 --file demo_env.yml` and watch it run, baby. A little
dask. Maybe analyze some taxicab data.&lt;/p&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="conda"></category></entry><entry><title>Another shiny new MacBook pro</title><link href="https://slott56.github.io/2020_08_27-another_shiny_new_macbook_pro.html" rel="alternate"></link><published>2020-08-27T07:19:00-04:00</published><updated>2020-08-27T07:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-08-27:/2020_08_27-another_shiny_new_macbook_pro.html</id><summary type="html">&lt;p&gt;See {filename}/blog/2014/03/2014_03_20-shiny_new_macbook_pro.rst&lt;/p&gt;
&lt;p&gt;At the time (2014), the 8Gb machine was way more than adequate for all
my needs as a writer.&lt;/p&gt;
&lt;p&gt;Enter bloat.&lt;/p&gt;
&lt;p&gt;Mac OS Catalina has essentially filled this machine to the breaking
point. Six short years is the lifespan. Things (generally) work, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See {filename}/blog/2014/03/2014_03_20-shiny_new_macbook_pro.rst&lt;/p&gt;
&lt;p&gt;At the time (2014), the 8Gb machine was way more than adequate for all
my needs as a writer.&lt;/p&gt;
&lt;p&gt;Enter bloat.&lt;/p&gt;
&lt;p&gt;Mac OS Catalina has essentially filled this machine to the breaking
point. Six short years is the lifespan. Things (generally) work, but
it now crashes frequently. Sometimes, streaming TV won't play
properly. I've tried a large number of remedies (reboot WiFi, reboot
computer, reset Bluetooth) and it glitches too offten to be
comfortable.&lt;/p&gt;
&lt;p&gt;(Rumors suggest the crashes seem to be associated with going to
sleep. The machine crashes when it's idle. I come back to it and find
it has restarted, and needs to restart my apps. It's not horrible.
But it's an indication of a deeper problem. And it's time.)&lt;/p&gt;
&lt;p&gt;It works. But. I've spent too many years waiting for slow computers
and slow networks. An hour a day (cumulative) for 300 days a year for
40 years means I've spent 1.3 years of my life waiting for a computer
to do something.&lt;/p&gt;
&lt;p&gt;I’m reluctantly replacing my kind-of-working &amp;quot;Late 2013&amp;quot; vintage
machine with a new 13” MacBook Pro. At least 16Gb RAM. At least a
terabyte of storage. Hopefully, things will not be &amp;quot;glitchy&amp;quot; and I
won't have constant crashes.&lt;/p&gt;
&lt;p&gt;I’ve gotten used to having an 27&amp;quot; Thunderbolt Display, and a USB
Querkywriter keyboard, and two USB disks doing backups. That's a lot
of stuff plugged in all the time. Also. I really &lt;strong&gt;need&lt;/strong&gt; a slot for
SD cards (the boat uses micro SD cards, as does the old GoPro
camera.). So. A fancy USB-C hub will be essential, I think.&lt;/p&gt;
&lt;p&gt;The question is 2 ports (power and hub) or 4 ports (power, hub, and
two other things)?  I suspect I can live with 2 ports.  4 ports ships
immediately.&lt;/p&gt;
&lt;p&gt;I have several use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Writing Python books (e.g. Modern Python Cookbook 2e, &lt;a class="reference external" href="https://www.packtpub.com/product/modern-python-cookbook-second-edition/9781800207455"&gt;https://www.packtpub.com/product/modern-python-cookbook-second-edition/9781800207455&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Writing fiction. (Still editing second drafts, don’t hold your breath)&lt;/li&gt;
&lt;li&gt;Creating a MicroPython (or Arduino) device to track my boat’s position and act as an alarm if the anchor drags&lt;/li&gt;
&lt;li&gt;Boating (in a vague, general way)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing books actually requires some computing power. But. Not
*too* much power. The general reader doesn’t always have a huge
computer. If my examples require more computing power than my
readers have access to, that’s a problem. The advantage of having
a smallish computer is I’m not overstepping what’s available to my
readers. This is a handy way to take a tax deduction to pay for
this extravagance.&lt;/p&gt;
&lt;p&gt;Writing fiction requires a small machine. Scrivener works on an iPad
Pro. I’m good with almost anything. Even an iPhone can be used for
writing and editing fiction. It’s hard, of course, with a tiny
screen. But not impossible. And. I'm trying to learn the craft, so
tools aren't as important as understanding character arc.&lt;/p&gt;
&lt;p&gt;Creating MicroPython-based devices is a bit confusing right now. A
lot of the development environments depend on a reliable USB
connectivity to the Arduino or Circuit Playground Express board. I
worry about the (potential) complexity of introducing a USB hub into
the mix.  I suspect I only need to replace some of my USB cables; the
Arduino boards all seem to use a bulky USB type B. The CPX use USB
type Micro B. (I thinks one can be replaced with a USB C to USB B
“printer cable”, the other is a USB microB to C adapter. Or, maybe a
USB C to USB A adapter can be used with my vast collection of legacy
cables. Don't know.)&lt;/p&gt;
&lt;p&gt;Boating involves connecting external devices like the GPS antenna to
the laptop and tracking position or planning routes. This is a
Bluetooth thing, generally.&lt;/p&gt;
&lt;p&gt;It does require considerable power for the laptop; the 60W power
brick becomes a constraint. The boat have an inverter and can handle
the load gracefully. A computer is a dedicated 5A draw, though; twice
what the fridge pulls (and the fridge runs infrequently.) We have
225Ah available. The computer could be as bad as 120Ah if it was left
on for 24 hours during an overnight passage.&lt;/p&gt;
&lt;p&gt;The good news is that the use cases are more-or-less exclusive. The
boating use case is rare. We have more thrifty navigation systems
permanently installed on the boat. Many folks are using CPX and
Arduino’s with MacBook Pro’s, so I shouldn’t worry too much, just buy
new cables.&lt;/p&gt;
&lt;p&gt;The best part?&lt;/p&gt;
&lt;p&gt;Since I use Time Machine, the new machine recovers from the Time
Machine backups. It has to be left to run overnight, but. Boom. Done.&lt;/p&gt;
&lt;p&gt;(On the to-do list -- encrypt the backup volumes. Ugh. But.
Necessary.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="arduino"></category><category term="macosx"></category><category term="CircuitPlayground"></category><category term="macintosh"></category><category term="hardware"></category></entry><entry><title>Why Python is not the programming language of the future -- a response</title><link href="https://slott56.github.io/2020_08_01-why_python_is_not_the_programming_language_of_the_future_a_response.html" rel="alternate"></link><published>2020-08-01T08:22:00-04:00</published><updated>2020-08-01T08:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-08-01:/2020_08_01-why_python_is_not_the_programming_language_of_the_future_a_response.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66"&gt;https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an interesting article with some important points. And. It has
some points that I disagree with.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Speed. This is a narrow perspective. numpy and pandas are fast, dask
is fast. A great many Python ecosystem packages are fast. This
complaint seems to be …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66"&gt;https://towardsdatascience.com/why-python-is-not-the-programming-language-of-the-future-30ddc5339b66&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an interesting article with some important points. And. It has
some points that I disagree with.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Speed. This is a narrow perspective. numpy and pandas are fast, dask
is fast. A great many Python ecosystem packages are fast. This
complaint seems to be unsupported by evidence.&lt;/li&gt;
&lt;li&gt;Dynamic Scoping Rules. This actually isn't the problem. The problem
is something about not being able to change containing scopes. First,
I'm not sure changing nesting scopes is of any value at all. Second,
the complaint ignores the global and nonlocal statements. The vague
&amp;quot;leads to a lot of confusion&amp;quot; seems unsupported by any evidence.&lt;/li&gt;
&lt;li&gt;Lambdas. The distinction between expressions and statements isn't
really a distinction in Python in general, only in  the bodies of
lambdas. I'm not sure what the real problem is, since a lambda with
statements seems like a syntactic nightmare better solved with an
ordinary, named function.&lt;/li&gt;
&lt;li&gt;Whitespace. Sigh. I've worked with many people who get the whitespace
right but the {}'s wrong in C++. The code looks great but doesn't
work. Python gets it right. The code looks great and works.&lt;/li&gt;
&lt;li&gt;Mobile App Platform.
See &lt;a class="reference external" href="https://beeware.org/"&gt;https://beeware.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Runtime Errors. &amp;quot;coding error manifests itself at runtime&amp;quot; seems to
be the problem. I'm not sure what this means, because lots of
programming languages have run-time problems. Here's the quote: &amp;quot;This
leads to poor performance, time consumption, and the need for a lot
of tests. Like, a &lt;em&gt;lot&lt;/em&gt; of tests.&amp;quot; Performance? See above. Use numpy.
Or Cuda. Time consumption? Not sure what this means. A lot of tests?
Yes. Software requires tests. I'm not sure that a compiled language
like Rust, Go, or Julia require fewer tests. Indeed, I think the
testing is essentially equivalent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm interested in ways Python could be better.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-ways-to-improve-python-check-out-the-comments"&gt;
&lt;h2&gt;For ways to improve Python, check out the comments...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-24 00:54:46.523000-04:00&lt;/p&gt;
&lt;p&gt;For ways to improve Python, check out the comments by Jerry Howard at
the following YouTube video
Jeremy Howard: fast.ai Deep Learning Courses and Research Artificial
Intelligence (AI) Podcast
Aug 27, 2019 - Lex Fridman
&lt;a class="reference external" href="https://www.youtube.com/watch?v=J6XcP4JOHmk"&gt;https://www.youtube.com/watch?v=J6XcP4JOHmk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wow-people-are-still-writing-articles-like-that"&gt;
&lt;h2&gt;Wow, people are still writing articles like that? ...&lt;/h2&gt;
&lt;p&gt;Wingware&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-22 11:46:00.243000-04:00&lt;/p&gt;
&lt;p&gt;Wow, people are still writing articles like that? It belies a
fundamental lack of understanding what Python is and how it works. For
one, it's not intended for writing CPU intensive code. Instead, it's the
user-friendly glue that puts things together. In most Python code, very
little time is spent actually spinning the interpreter's wheels; the
work is done in the packages written in C or whatever. That's why
numpy/etc are so fast. Also the idea that compilation can find anything
but a tiny subset of runtime errors is absurd. You need just as many
tests if not more with other languages. Oh well... thanks for posting
this link, though!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Modern Python Cookbook 2nd ed -- Advance Copies -- DM me</title><link href="https://slott56.github.io/2020_07_28-modern_python_cookbook_2nd_ed_advance_copies_dm_me.html" rel="alternate"></link><published>2020-07-28T08:02:00-04:00</published><updated>2020-07-28T08:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-07-28:/2020_07_28-modern_python_cookbook_2nd_ed_advance_copies_dm_me.html</id><summary type="html">&lt;p&gt;This is your &amp;quot;why wait&amp;quot; invitation.&lt;/p&gt;
&lt;p&gt;Advanced copies will be available.&lt;/p&gt;
&lt;p&gt;IF.&lt;/p&gt;
&lt;p&gt;And this is a big &amp;quot;if&amp;quot;.&lt;/p&gt;
&lt;p&gt;You have to write a blurb.&lt;/p&gt;
&lt;p&gt;I'll be putting you in contact with Packt marketing folks who will
get you your advanced copy so you can write blurbs and reviews and --
well …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is your &amp;quot;why wait&amp;quot; invitation.&lt;/p&gt;
&lt;p&gt;Advanced copies will be available.&lt;/p&gt;
&lt;p&gt;IF.&lt;/p&gt;
&lt;p&gt;And this is a big &amp;quot;if&amp;quot;.&lt;/p&gt;
&lt;p&gt;You have to write a blurb.&lt;/p&gt;
&lt;p&gt;I'll be putting you in contact with Packt marketing folks who will
get you your advanced copy so you can write blurbs and reviews and --
well -- actually use the content.&lt;/p&gt;
&lt;p&gt;It's all updated to Python 3.8. Type hints almost everywhere.
F-strings and the walrus operator. Bunches of devops and data science
examples. Plus a few personal examples involving sailboat navigation
and management.&lt;/p&gt;
&lt;p&gt;See me at LinkedIn &lt;a class="reference external" href="https://www.linkedin.com/in/steven-lott-029835/"&gt;https://www.linkedin.com/in/steven-lott-029835/&lt;/a&gt;
and I'll hook you up with Packt marketing folks.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.amazon.com/Modern-Python-Cookbook-Updated-programmer/dp/180020745X"&gt;https://www.amazon.com/Modern-Python-Cookbook-Updated-programmer/dp/180020745X&lt;/a&gt;
for the official Amazon Book Link. This is for ordinary &amp;quot;no
obligation to write a review&amp;quot; orders.&lt;/p&gt;
&lt;p&gt;DM me directly slott56 at gmail to be put into the marketing
spreadsheet.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="modern python cookbook"></category></entry><entry><title>Overcoming Incuriosity -- Sailing Over The Horizon</title><link href="https://slott56.github.io/2020_06_02-overcoming_incuriosity_sailing_over_the_horizon.html" rel="alternate"></link><published>2020-06-02T08:00:00-04:00</published><updated>2020-06-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-06-02:/2020_06_02-overcoming_incuriosity_sailing_over_the_horizon.html</id><summary type="html">&lt;p&gt;I'm in regular contact with a few folks who seem remarkably incurious.
Seem.
Perhaps they're curious about something other than software. I don't
know.
But I do know they're remarkably incurious about software. And are
trying to write Python applications.
I know some people don't sail out of sight of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm in regular contact with a few folks who seem remarkably incurious.
Seem.
Perhaps they're curious about something other than software. I don't
know.
But I do know they're remarkably incurious about software. And are
trying to write Python applications.
I know some people don't sail out of sight of their home port. I've
sailed over a few horizons. It's not courage. It's curiosity. And
patience. And preparation.
I find this frustrating. I refuse to write their code for them.
But any advice I give them devolves to &amp;quot;Do you have an example?&amp;quot; With
the implicit &amp;quot;Which I can copy and paste?&amp;quot;
Even the few who claim they don't want examples, suffer from a
paralyzing level of incuriosity. They can't seem to make search work
because they never read beyond the first few results on their first
attempt. A lot of people seem to be able to make search work; and the
incurious folks seem uniquely paralyzed by search.
And it's an attribute I don't understand.
Specific example.
They read through the multiprocessing module until they got to examples
with apply_async() and appear to have stopped reading.  They've asked
for code reviews on two separate module. Both based on apply_async().
One module was so hopelessly broken it was difficult to make the case
that it could never be made to work. There's a way the results of
apply_async() have to be consumed, and the code not only did not reflect
this, it seemed like they had decided specifically never to consider an
alternative. (Spoiler alert, it requires an explicit wait().)
The results were sometimes consumed -- by luck -- and the rest of the
time, the app was quirky. It wasn't quirky. It was deplorably wrong. And
&amp;quot;reread the apply_async()&amp;quot; advice fell on deaf ears. They couldn't have
failed to read the page in the standard library documentation, no, it
had to be Python or Windows or me or something.
The other module was a trivial map() application. But. Since
apply_async() has an incumbency, there was an amazingly elaborate
implementation that amounted to rebuilding &lt;tt class="docutils literal"&gt;apply()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt; with
globals and callbacks. This was wrapped by queue processing of Byzantine
complexity. The whole mess appeared to stem from an unwillingness to
read the documentation past the first example.
What to do?
My current suggestion is to exhaustively enumerate each of the methods
for putting work into the processing pool. Write an example of each and
every one.
In effect: &amp;quot;Learn the methods by building throw-away code.&amp;quot;
I anticipate a series of objections. &amp;quot;Why write throw-away code?&amp;quot; and
this one: &amp;quot;That's not realistic, what do you do?&amp;quot;
What do I do?
I write throw-away code.
But that's no substitute for a lack of curiosity.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Hi&lt;/p&gt;
&lt;div class="section" id="have-you-tried-tdd-with-them-maybe-they-want"&gt;
&lt;h2&gt;Have you tried TDD with them. Maybe they want ...&lt;/h2&gt;
&lt;p&gt;McSee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-06-03 23:02:18.227000-04:00&lt;/p&gt;
&lt;p&gt;Hi
Have you tried TDD with them. Maybe they want to start with a functional
approach instead of an implementative one.
With good guidance this might lead to a simpler implementation&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category></entry><entry><title>Modern Python Cookbook 2nd ed -- big milestone</title><link href="https://slott56.github.io/2020_05_26-modern_python_cookbook_2nd_ed_big_milestone.html" rel="alternate"></link><published>2020-05-26T08:00:00-04:00</published><updated>2020-05-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-05-26:/2020_05_26-modern_python_cookbook_2nd_ed_big_milestone.html</id><content type="html">&lt;p&gt;Whew.
Chapter rewrites finished.
Technical reviews in process.
Things are going pretty well. Look for Packt to publish this in the next
few months. Details will be posted.
Now. For LinkedIn Learning course recordings.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>The COBOL-to-SomeBetterLang Translator</title><link href="https://slott56.github.io/2020_04_14-the_cobol_to_somebetterlang_translator.html" rel="alternate"></link><published>2020-04-14T08:00:00-04:00</published><updated>2020-04-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-04-14:/2020_04_14-the_cobol_to_somebetterlang_translator.html</id><summary type="html">&lt;p&gt;Here's a popular idea.&lt;/p&gt;
&lt;blockquote&gt;
... a COBOL-to-X translator, where X is a more-modern programming
language ...&lt;/blockquote&gt;
&lt;p&gt;This is a noble aspiration.&lt;/p&gt;
&lt;p&gt;In principle -- down deep -- all programming can be reduced to an
idealized Turing Machine.&lt;/p&gt;
&lt;p&gt;This means that we *should* be able to locate all the state changes
in a given spaghetti-bowl …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a popular idea.&lt;/p&gt;
&lt;blockquote&gt;
... a COBOL-to-X translator, where X is a more-modern programming
language ...&lt;/blockquote&gt;
&lt;p&gt;This is a noble aspiration.&lt;/p&gt;
&lt;p&gt;In principle -- down deep -- all programming can be reduced to an
idealized Turing Machine.&lt;/p&gt;
&lt;p&gt;This means that we *should* be able to locate all the state changes
in a given spaghetti-bowl of COBOL. Given the abstract state
transitions, we can emit a version of that machine in any language.&lt;/p&gt;
&lt;p&gt;Emphasis on the *should*.&lt;/p&gt;
&lt;p&gt;There are road-blocks.&lt;/p&gt;
&lt;p&gt;The first two are rarities. But. When confronted with these, we'll
have significant problems.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;ALTER&lt;/tt&gt; statement means the code can be changed at run-time. There
are constraints, but still... When the code is not static, the
possible domain of state changes moves outside working storage and
into the procedure division itself.&lt;/li&gt;
&lt;li&gt;A data structure with a &lt;tt class="docutils literal"&gt;RENAMES&lt;/tt&gt; clause. This adds a layer of
alternative naming, making the data states quite a bit more complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next one is a huge complication: the &lt;tt class="docutils literal"&gt;GOTO&lt;/tt&gt; statement. This makes
state transitions extremely difficult to analyze. It's possible to
untangle any GOTO of arbitrary complexity into properly tested IF and
WHILE statements.&lt;/p&gt;
&lt;p&gt;However. The tangle of GOTO's may have been actually meaningful. It
may have carried some suggestion of a business owner's intent. A
COBOL elimination algorithm may turn tangled code into opaque code.
(It's also possible that it clarifies age-old bad programming.)&lt;/p&gt;
&lt;p&gt;The ordinary &lt;tt class="docutils literal"&gt;REDEFINES&lt;/tt&gt; clause. This was heavily used as a storage
optimization for the tiny, slow file systems we had back in the olden
days. It's a union of distinct types. And. It's a &amp;quot;free&amp;quot; union. We do
not know how to distinguish the various types that are being
redefined. It's intimately tied to processing logic in the procedure
division.&lt;/p&gt;
&lt;p&gt;Just to make it even more horrifying...&lt;/p&gt;
&lt;p&gt;File layouts evolve over time. It's entirely possible for a
*working*, *valid*, *in-production* file to have content that
does not match any working program's DDE. The data has flags or
indicators or something that lets the app glide past the bad data.
But the data is bad. It used to be good. Then something changed, and
now it's almost uninterpretable. But the apps work because there are
enough paths through the logic to make the row &amp;quot;work&amp;quot; without it
matching any file layout in any obvious way.&lt;/p&gt;
&lt;p&gt;I'm not sure an automated translation from COBOL is of any value.&lt;/p&gt;
&lt;p&gt;I think it's far better to start with file layouts, review the code,
and then write new code from scratch in a modern language. This
manual rewrite leads directly to small programs that -- in a modern
language -- are little more than class definitions. In some cases,
each legacy COBOL app would like becomes a Python module.&lt;/p&gt;
&lt;p&gt;Given snapshots of legacy files, the Python can be tested to be sure
it does the same things. The processing is not nuanced, or tricky, or
even particularly opaque.&lt;/p&gt;
&lt;p&gt;The biggest problem is the knowledge captured in COBOL code tends to
be disorganized. The real work is disentangling it. A language that
supports ruthless refactoring will be helpful.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="COBOL"></category></entry><entry><title>Why Isn't COBOL Dead? Or Why Didn't It Evolve?</title><link href="https://slott56.github.io/2020_04_07-why_isnt_cobol_dead_or_why_didnt_it_evolve.html" rel="alternate"></link><published>2020-04-07T21:07:00-04:00</published><updated>2020-04-07T21:07:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-04-07:/2020_04_07-why_isnt_cobol_dead_or_why_didnt_it_evolve.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's part of the question:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
Why didn't COBOL evolve more successfully?&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
FORTRAN, OTOH, has survived precisely because it--and more
importantly, related tools, esp compilers--has evolved to
solve/overcome many (certainly not all!) of the sorts of pain-points
you describe, while retaining the significant performance edge that
(IMHO, ICBW) prevents challengers …&lt;/blockquote&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's part of the question:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
Why didn't COBOL evolve more successfully?&lt;/blockquote&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
FORTRAN, OTOH, has survived precisely because it--and more
importantly, related tools, esp compilers--has evolved to
solve/overcome many (certainly not all!) of the sorts of pain-points
you describe, while retaining the significant performance edge that
(IMHO, ICBW) prevents challengers (e.g., Python) from dislodging it
for tasks like (e.g.) running dynamical models (esp weather
forecasting).&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In short, why is FORTRAN still OK? Why is COBOL not still OK?&lt;/div&gt;
&lt;div class="line"&gt;Actually, I'd venture to say the stories of these languages are
essentially identical. They're both used because they have significant
legacy implementations.&lt;/div&gt;
&lt;div class="line"&gt;There's a distinction, that I think might be relevant to the
&amp;quot;revulsion factor.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Folks don't find Fortran quite so revolting because it's sequestered
into libraries where we don't really have to look at it. It's often
wrapped into SciPy. The GCC compiler system handles it and we're
happy.&lt;/div&gt;
&lt;div class="line"&gt;COBOL, however, isn't sequestered into libraries with tidy Python
wrappers and Conda installers. COBOL is the engine of enterprise
applications.&lt;/div&gt;
&lt;div class="line"&gt;Also. COBOL is used by organizations that suffer from high amounts of
technical inertia, which makes the language a kind of bellwether for
the rest of the organization. The organization changes slowly (or not
at all) and the language changes at an even more tectonic pace.&lt;/div&gt;
&lt;div class="line"&gt;This is a consequence of very large organizations with regulatory
advantages. Governments, for example, regulate themselves into
permanence. Other highly-regulated industries like banks and insurance
companies can move slowly and tolerate the stickiness of COBOL.&lt;/div&gt;
&lt;div class="line"&gt;Also.&lt;/div&gt;
&lt;div class="line"&gt;For a FORTRAN library function that does something useful, it's not
utterly mysterious. There's often a crisp mathematical definition, and
a way to test the implementation. There are no quirks.&lt;/div&gt;
&lt;div class="line"&gt;For a COBOL program that does something required by law, there can
still be absolutely opaque mysteries and combinations of features
without acceptable unit test cases. This isn't for lack of trying.
It's the nature of &amp;quot;application&amp;quot; vs. &amp;quot;subroutine.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The special case and exceptions have to live somewhere. They live in
the application.&lt;/div&gt;
&lt;div class="line"&gt;For FORTRAN, the exceptions are in the Python wrapper using numpy
using FORTRAN.&lt;/div&gt;
&lt;div class="line"&gt;For COBOL, the exceptions are in the COBOL  Somewhere.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="gt-cobol-is-used-by-organizations-that-suffer-fr"&gt;
&lt;h2&gt;&amp;amp;gt; COBOL is used by organizations that suffer fr...&lt;/h2&gt;
&lt;p&gt;Tom Roche&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-08 00:15:25.622000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt; COBOL is used by organizations that suffer from high amounts of
technical inertia, which makes the language a kind of bellwether for the
rest of the organization. [...] This is a consequence of very large
organizations with regulatory advantages.&lt;/p&gt;
&lt;p&gt;I misspent the mid-noughties at a Giant Acronym for which banks are a
major [host](&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Host_(biology"&gt;https://en.wikipedia.org/wiki/Host_(biology&lt;/a&gt;)) genus. While
there, I'm fairly sure I heard at least 3 different versions of [this
post's predecessor]({filename}/blog/2020/04/2020_04_07-the_cobol_problem.rst),
all given by quasi-academic manager/mandarins sufficiently
up-the-food-chain that junior/grunt software engineers (like me) were
paid to Sit and Listen (and eat snacks :-) My group built IDEs designed
to make big bucks [^Hx14] help bankers wrap, refactor, and ultimately
replace their COBOL.&lt;/p&gt;
&lt;p&gt;(I also once heard it said there--I have no idea if it's true, or who
has ever studied this sort of thing--that CICS is the single most
profitable piece of software ever written. And still earning.)&lt;/p&gt;
&lt;p&gt;My impression (from a long spatiotemporal distance, and which again is
open to your empirical correction) is, banks *did* lotsa
better-engineered wraps and extensions. But when it came to getting
dirty with the COBOL base, banks just maintained, because offshoring
was--and, IIUC, remains--sooo much cheaper. Not just because Indians (et
al) cost less, but also because they were/are the only folks getting
trained in not just COBOL but the whole 370-390-Z ecosystem.&lt;/p&gt;
&lt;p&gt;So my guess (YMMV) is, no change until boolean-OR (1) cheap labor gets
lots less cheap (2) governments/quangos (e.g., standards organizations)
with teeth start regulating software the way they currently do other
economically-significant products. But I'd be interested to read your
2030 followup on this topic ... presuming we all get there :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="just-noting-that-this-opinion-piece-was-especially"&gt;
&lt;h2&gt;Just noting that this opinion piece was especially...&lt;/h2&gt;
&lt;p&gt;crsevern&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-10 14:08:16.605000-04:00&lt;/p&gt;
&lt;p&gt;Just noting that this opinion piece was especially topical for me as I
embark on trying to wrap a Medicare COBOL program in Python. No way I'm
touching the COBOL source.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="COBOL"></category><category term="#python"></category><category term="fortran"></category></entry><entry><title>The COBOL Problem</title><link href="https://slott56.github.io/2020_04_07-the_cobol_problem.html" rel="alternate"></link><published>2020-04-07T08:00:00-04:00</published><updated>2020-04-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-04-07:/2020_04_07-the_cobol_problem.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/audreywatters/status/1246609613203505152"&gt;https://twitter.com/audreywatters/status/1246609613203505152&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tweet has since been deleted. Here's the old text&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Pet peeve: technologists who sneer at the longevity of programming languages like COBOL. Ain't nobody made it to the moon on react.js. And nobody is willing to replace critical aging software with your …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/audreywatters/status/1246609613203505152"&gt;https://twitter.com/audreywatters/status/1246609613203505152&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tweet has since been deleted. Here's the old text&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Pet peeve: technologists who sneer at the longevity of programming languages like COBOL. Ain't nobody made it to the moon on react.js. And nobody is willing to replace critical aging software with your new tangled, untested, VC funded framework&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It's a tweet, so I know there's no room for depth here.&lt;/p&gt;
&lt;p&gt;As it is, it's absolutely correct. Allow me to add to it.&lt;/p&gt;
&lt;p&gt;First. Replacing COBOL with something shiny and new is more-or-less
impossible. Replacing COBOL is a two-step job.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Replace the COBOL with something that's nearly identical but
written in a new language. Python. Java. Scala. Whatevs. Language
doesn't matter. What matters is the hugeness of this leap.&lt;/li&gt;
&lt;li&gt;Once the COBOL is gone and the mainframe powered off, then you can
rebuild things yet again to create RESTful API's and put many shiny
things around it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Second. Replacing COBOL is essential. Software is a form of knowledge
capture. If the language (and tools) have become opaque, then the job
of knowledge capture has failed. Languages drift. &lt;strong&gt;The audience is in
a constant state of flux&lt;/strong&gt;. New translations are required.&lt;/p&gt;
&lt;p&gt;Let's talk about the &amp;quot;Nearly Identical But In A New Language.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="nearly-identical"&gt;
&lt;h2&gt;Nearly Identical&lt;/h2&gt;
&lt;p&gt;COBOL code has two large issues in general&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data. The file layouts are very hard to work with. I know a lot
about this.&lt;/li&gt;
&lt;li&gt;Processing. The code has crap implementations of common data
structures. I know. I wrote some. There's more, we'll get to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have -- for the most part -- two kinds of COBOL code in common
use.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Batch processing. Once upon a time, we called it &amp;quot;Programming in
the Large.&amp;quot; The Z/OS Job Control Language (JCL) was a kind of
shell script or AWS Step Function state transition map among
applications. This isn't easy to deal with because the overall
data flow is not a simple Directed Acyclic Graph (DAG.) It has
cycles and state changes.&lt;/li&gt;
&lt;li&gt;Interactive (once called &amp;quot;on-line&amp;quot;) processing. We called it OLTP:
On-Line Transaction Processing. There are two common frameworks,
CICS and IMS, and both are complicated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay. Big Breath. What do we *DO*?&lt;/p&gt;
&lt;p&gt;Here's the free consulting part.&lt;/p&gt;
&lt;p&gt;You have to run the new and old side-by-side until you're sick of the
errors and poor performance of the old machine.&lt;/p&gt;
&lt;p&gt;You have to migrate incrementally, one app at a time.&lt;/p&gt;
&lt;p&gt;It's hellishly expensive to positively determine what the COBOL
really did. You can't easily do a &amp;quot;clean-room&amp;quot; conversion by writing
intermediate specifications. You must read the COBOL and rewrite it
into Python (or Java or Scala or whatever.)&lt;/p&gt;
&lt;p&gt;You cannot unit test your way to success here, because you never
really knew what the COBOL does/did. All you can do is extract
example records and use those to build Gherkin-language acceptance
tests using a template like this. GIVEN a source document WHEN the
app runs THEN the output document matches the example.&lt;/p&gt;
&lt;p&gt;In effect, you're going to do TDD on the COBOL, replacing COBOL with
Python essentially 1-for-1 until you have a test suite that passes.&lt;/p&gt;
&lt;p&gt;Don't do this alphabetically, BTW.&lt;/p&gt;
&lt;p&gt;The processing graph for COBOL will include three essential design
patterns for programs. &amp;quot;Edit&amp;quot; programs validate and possibly merge
input files. &amp;quot;Update&amp;quot; programs will apply changes to master files or
databases. &amp;quot;Report&amp;quot; programs will produce useful reports and feeds
for reporting systems that involve yet more data derivation and
merging.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Find the updates. Convert them first. They will involve the most
knowledge capture, A/K/A &amp;quot;Business Logic.&amp;quot;  There will be a lot of
special cases and exceptions. You will find latent bugs that have
always been there.&lt;/li&gt;
&lt;li&gt;Convert the programs that produce files for the updates, working
forward in the graph.&lt;/li&gt;
&lt;li&gt;The &amp;quot;reporting&amp;quot; is generally a proper DAG, and should be easier to
deal with than the updates and edits. You never know, but the
reporting apps are filled with redundancy. Tons of reporting
programs are minor variations on each other, often built as
copy-pasta from some original text and then patched haphazardly.
Most of them can be replaced with a tool to emit CSV files as an
interim step.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each converted application requires two new steps injected into the
COBOL batch jobs.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Before an update runs, the files are pushed to some place where
they can be downloaded.&lt;/li&gt;
&lt;li&gt;The app runs as it always had. For now.&lt;/li&gt;
&lt;li&gt;After the update, the results are pushed, also.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This changes merely slow things down with file transfers. It provides
fodder for parallel testing.&lt;/p&gt;
&lt;p&gt;Then.&lt;/p&gt;
&lt;p&gt;Two changes are made so the job now looks like this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Before an update runs, the files are pushed to some place where
they can be downloaded. (No change here.)&lt;/li&gt;
&lt;li&gt;Kill time polling the file location, waiting for the file to be
created externally. (The old app is still around. We could run it
if we wanted to.)&lt;/li&gt;
&lt;li&gt;After the update, download the results from the external location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This file-copy-and-parallel-run dance can, of course, be optimized if
you take whole streams of edit-update processing and convert them as
a whole.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="yes-but-the-cobol-is-complicated"&gt;
&lt;h2&gt;Yes, But, The COBOL Is Complicated&lt;/h2&gt;
&lt;p&gt;No. It's not.&lt;/p&gt;
&lt;p&gt;It's a lot of code working around language limitations. There aren't
many design patterns, and they're easy to find.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Read, Validate, Write. The validation is quirky, but generally
pretty easy to understand. In the long run, the whole thing is a
JSONSchema document. But for now, there may be some data cleansing
or transformation steps buried in here.&lt;/li&gt;
&lt;li&gt;Merged Reading. Execute the Transaction. Write. The transaction
execution updates are super important. These are the state changes
in object classes. They're often entangled among bad
representations of data.&lt;/li&gt;
&lt;li&gt;Cached Data. A common performance tweak is to read reference data
(&amp;quot;Lookups&amp;quot;) into an array. This was often hellishly complex
because... well... COBOL. It was a Python dict, for the love of
God, there's nothing to it. Now. Then. Well. It was tricky.&lt;/li&gt;
&lt;li&gt;Accumulators. Running totals and counts were essential for audit
purposes. The updates could be hidden anywhere. Anywhere. Not part
of the overall purpose, but necessary anyway.&lt;/li&gt;
&lt;li&gt;Parameter Processing. This can be quirky. Some applications had a
standard dataset with parameters like the as-of-date for the
processing. Some applications prompted an operator. Some had other
quirky ways of handling the parameters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The bulk of the code isn't very complex. It's quirky. But not
complicated.&lt;/p&gt;
&lt;p&gt;The absolute worst applications were summary reports with a
hierarchy. We called these &amp;quot;control break&amp;quot; reports. I don't know why.
Each level of the hierarchy had its own accumulators. The data had to
be properly sorted. It was complicated.&lt;/p&gt;
&lt;p&gt;Do Not Convert these. Find any data cleansing or transformation and
simply pour the data into a CSV file and let the users put it into a
spreadsheet.&lt;/p&gt;
&lt;p&gt;Right now. We have to keep the lights on. COBOL apps have to be kept
operational to manage unemployment benefits through the pandemic.&lt;/p&gt;
&lt;p&gt;But once we're out of this. We need to get rid of the COBOL.&lt;/p&gt;
&lt;p&gt;And we need to recognize that all code expires and we need to plan
for expiration.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="good-response-https-slott-softwarearchitect-bl"&gt;
&lt;h2&gt;[Good response](&lt;a class="reference external" href="https://slott-softwarearchitect.bl"&gt;https://slott-softwarearchitect.bl&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Tom Roche&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-07 23:13:45.372000-04:00&lt;/p&gt;
&lt;p&gt;[Good response]({filename}/blog/2020/04/2020_04_07-why_isnt_cobol_dead_or_why_didnt_it_evolve.rst),
thanks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="great-post-or-great-sounding-anyway-as-i"&gt;
&lt;h2&gt;Great post ... or great-sounding anyway, as I'...&lt;/h2&gt;
&lt;p&gt;Tom Roche&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-07 15:36:42.299000-04:00&lt;/p&gt;
&lt;p&gt;Great post ... or great-sounding anyway, as I'll admit to having minimal
exposure to COBOL. But since you seem to have had lots, perhaps you can
answer this question: Why didn't COBOL evolve more successfully?
I'm asking because I have had significant exposure to FORTRAN, the other
surviving-at-scale 1st-generation language. By which I mean, there is
still a lot of it &amp;quot;in production&amp;quot; in engineering and science, as opposed
to&lt;/p&gt;
&lt;p&gt;* Lisp: while it continues to be popular in some non-academic niches
(e.g., Emacs), there is (IIRC, ICBW) no economically-significant
long-lived software coded in any Lisp dialect.&lt;/p&gt;
&lt;p&gt;* Algol: which is all-the-way dead.
FORTRAN, OTOH, has survived precisely because it--and more importantly,
related tools, esp compilers--has evolved to solve/overcome many
(certainly not all!) of the sorts of pain-points you describe, while
retaining the significant performance edge that (IMHO, ICBW) prevents
challengers (e.g., Python) from dislodging it for tasks like (e.g.)
running dynamical models (esp weather forecasting).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="context-i-spent-several-years-early-in-my-career"&gt;
&lt;h2&gt;(Context: I spent several years early in my career...&lt;/h2&gt;
&lt;p&gt;Justin du Coeur&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-04-12 18:03:13.064000-04:00&lt;/p&gt;
&lt;p&gt;(Context: I spent several years early in my career building a system in
COBOL. I've since been through about forty languages, and am now a Scala
geek.)&lt;/p&gt;
&lt;p&gt;Huh. The interesting corollary of this approach (which, I agree, is
likely the only practical way to go in many cases) is that step one can
probably be done *automatically*. That is, I would do this as:&lt;/p&gt;
&lt;p&gt;1. Write a COBOL-to-X translator, where X is a more-modern programming
language that -- very important -- provides good refactoring tools. (I
would of course use Scala; given that Scala is actually fairly popular
in the finance world, that might actually be right in some cases.) Along
with this, you'd need to write the necessary libraries and adapters for
the data and environment.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Test the hell out of it, the way you describe.&lt;/li&gt;
&lt;li&gt;Start refactoring the resulting monstrosity.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The heart of the current problem isn't just that COBOL is obsolete, it's
that it predates the notion that refactoring *matters*; the result is
that making incremental improvements is unreasonably hard. If you did a
literal translation to a better language, the resulting code would still
be horrible, but you would have a path forward.&lt;/p&gt;
&lt;p&gt;And yes, I would bet that writing an automatic translator isn't all that
hard, in the grand scheme of things. Trying to *analyze* COBOL code
properly is likely impossible, but simply translating it, warts and all,
is simply a routine cross-compiler -- a substantial project, but not a
huge one.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="COBOL"></category><category term="#python"></category><category term="data migration"></category></entry><entry><title>70% of Modern Python Cookbook 2e...</title><link href="https://slott56.github.io/2020_03_17-70_of_modern_python_cookbook_2e.html" rel="alternate"></link><published>2020-03-17T08:00:00-04:00</published><updated>2020-03-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-03-17:/2020_03_17-70_of_modern_python_cookbook_2e.html</id><summary type="html">&lt;p&gt;At this point, we're closing in on 9/13 (70%) of the way through the
2nd edition rewrite.&lt;/p&gt;
&lt;p&gt;Important changes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;/ol&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;First.&lt;/dt&gt;
&lt;dd&gt;Every single class, method, or function has to be changed to
add hints. Every. Single. One. This is kind of huge. The book …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;p&gt;At this point, we're closing in on 9/13 (70%) of the way through the
2nd edition rewrite.&lt;/p&gt;
&lt;p&gt;Important changes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;/ol&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;First.&lt;/dt&gt;
&lt;dd&gt;Every single class, method, or function has to be changed to
add hints. Every. Single. One. This is kind of huge. The book is
based on over 13,000 lines of example code in 157 files. A big bunch
of rewrites.&lt;/dd&gt;
&lt;dt&gt;Second.&lt;/dt&gt;
&lt;dd&gt;Some things were either wrong or at least sketchy. These
rewrites are important consequences of using type hints in the first
place. If you can't make &lt;strong&gt;mypy&lt;/strong&gt; see things your way, then perhaps
your way needs rework.&lt;/dd&gt;
&lt;dt&gt;Third.&lt;/dt&gt;
&lt;dd&gt;Dataclasses, frozen dataclasses, and NamedTuples have some
nuanced overlapping use cases. Frequently, they differ only by small
type hint changes.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I hate to provide useless non-advice like &amp;quot;try them and see which
works for you.&amp;quot; However, there's only so much room to try and beat
out a detailed list of consequences of each alternative. Not every
decision has a clear, prescriptive, &amp;quot;do this and you'll be happy.&amp;quot;
Further, I doubt any reader needs detailed explanations of
*potential* performance consequences of mutable vs. immutable
objects.&lt;/p&gt;
&lt;p&gt;Also. I'm very happy cutting back on the overwrought, detailed
explanations. This is (a) not the only book on Python, and (b) not my
only book. When I started the first drafts 20 years ago, I wrote as
though this was my &lt;em&gt;magnum opus&lt;/em&gt;, a lifetime achievement.  A Very Bad
Idea (VBI™).&lt;/p&gt;
&lt;p&gt;This is a resource for people who want more depth. At work, I spend
time coaching people who call themselves advanced beginners. The time
spent with them has helped me understand my audience a lot better,
and stuck to useful exposition of the language features.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category><category term="modern python cookbook"></category></entry><entry><title>Stingray Reader Pervasively Bad Decision</title><link href="https://slott56.github.io/2020_02_25-stingray_reader_pervasively_bad_decision.html" rel="alternate"></link><published>2020-02-25T08:00:00-05:00</published><updated>2020-02-25T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-02-25:/2020_02_25-stingray_reader_pervasively_bad_decision.html</id><summary type="html">&lt;p&gt;I made some bad decisions when I wrote this a few years
ago: &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;. Really bad. And.
Recently, I've burdened myself with conflicting goals. Ugh.&lt;/p&gt;
&lt;p&gt;I need to upgrade to Python 3.8, and add type hints. This exposed
somes badness.&lt;/p&gt;
&lt;p&gt;See {filename/blog/2020/01 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I made some bad decisions when I wrote this a few years
ago: &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;. Really bad. And.
Recently, I've burdened myself with conflicting goals. Ugh.&lt;/p&gt;
&lt;p&gt;I need to upgrade to Python 3.8, and add type hints. This exposed
somes badness.&lt;/p&gt;
&lt;p&gt;See {filename/blog/2020/01/2020_01_31-stingray_reader_rewrite.rst for some status.&lt;/p&gt;
&lt;p&gt;The very first version(s) of this were expeditious solutions to some
separate-but-related problems. Spreadsheet processing was an important
thing for me f. Fixed-format file versions of spreadsheets showed up
once in a while mixed with XLS and CSV files. Separately, COBOL code
analysis was a thing I'd been involved in going back to the turn of
the century.&lt;/p&gt;
&lt;p&gt;The two overlap. A lot.&lt;/p&gt;
&lt;p&gt;The first working versions of apps to process COBOL data in Python
relied on a somewhat-stateful representation of the COBOL DDE (Data
Definition Element.) The structure had to be visited more than once to
figure out size, offset, and dimensionality. We'll talk about this
some more.&lt;/p&gt;
&lt;p&gt;A slightly more clever algorithm would leverage the essential parsing
as a kind of tree walk, pushing details down into children and
summarizing up into the parent when the level number changed. It
didn't seem necessary at the time.&lt;/p&gt;
&lt;div class="section" id="today"&gt;
&lt;h2&gt;Today&lt;/h2&gt;
&lt;p&gt;I've been working for almost three weeks on trying to disentangle the
original DDE's from the newer schema. I've been trying to invert the
relationships so a DDE exists independently of a schema attribute.
This means some copy-and-paste of data between the DDE source and the
more desirable and general schema definition.&lt;/p&gt;
&lt;p&gt;It turns out that some design decisions can be pervasively bad. Really
bad-foundation-wrecks-the-whole-house kind of bad.&lt;/p&gt;
&lt;p&gt;At this point, I &lt;strong&gt;think&lt;/strong&gt; I've teased apart the root cause problem.
(Of course, you never know until you have things fixed.)&lt;/p&gt;
&lt;p&gt;For the most part, this is a hierarchical schema. It's modeled nicely
by JSONSchema or XSD. However. There are two additional, huge problems
to solve.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REDEFINES&lt;/strong&gt;. The first huge problem is a COBOL definition can
redefine another field. I'm not sure about the directionality of the
reference. I know many languages require things be presented in
dependency order: a base definition is provided  lexically first and
all redefinitions are subsequent to it. Rather than depend on order of
presentation, it seems a little easier to make a &amp;quot;reference
resolution&amp;quot; pass. This plugs in useful references from items to the
things they redefine, irrespective of any lexical ordering of the
definitions.&lt;/p&gt;
&lt;p&gt;This means we data can only be processed strictly lazily. A given
block of bytes may have multiple, conflicting interpretations. It is,
in a way, a free union of types. In some cases, it's a discriminated
union, but the discriminating value is not a formal part of the
specification. It's part of the legacy COBOL code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OCCURS DEPENDING ON&lt;/strong&gt;. The second huge problem is the number of
elements in an array can depend on another field in the current
record. In the common happy-path cases, occurrences are fixed. Having
fixed occurrences means sizes and offsets can be computed as soon as
the REDEFINES are sorted out.&lt;/p&gt;
&lt;p&gt;Having occurrences depending on data means sizes and offsets cannot be
computed until some data is present. The most general case, then,
means settings sizes and offsets uniquely for each row of data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="current-release"&gt;
&lt;h2&gt;Current Release&lt;/h2&gt;
&lt;p&gt;The current release (4.5) handles the ODO, size, and offset
computation via a stateful DDE object.&lt;/p&gt;
&lt;p&gt;Yes. You read that right. There are stateful values in the DDE. The
values are adjusted on a row-by-row basis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tomorrow"&gt;
&lt;h2&gt;Tomorrow&lt;/h2&gt;
&lt;p&gt;There's got to be a better way.&lt;/p&gt;
&lt;p&gt;Part of the problem has been conflicting goals.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Minimal tweaks required to introduce type hints.&lt;/li&gt;
&lt;li&gt;Minimal tweaks to break the way a generic schema depended on the DDE
implementation. This had to be inverted to make the DDE and generic
schema independent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;minimal tweaks&lt;/strong&gt; idea is really bad. Really bad.&lt;/p&gt;
&lt;p&gt;The intent was to absolutely prevent breaking the demo programs. I
may still be able to achieve this, but... There needs to be a clean
line between the exposed work-book like functionality, and some
behind the scenes COBOL DDE processing.&lt;/p&gt;
&lt;p&gt;I now think it's essential to gut two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Building a schema from the DDE. This is a (relatively) simple
transformation from the COBOL-friendly source model to a generic,
internal model that's compatible with JSONSchema or XSD. The
simple attributes useful for workbooks require some additional
details for dimensionality introduced by COBOL.&lt;/li&gt;
&lt;li&gt;Navigating to the input file bytes and creating Workbook Cell
objects in a way that fits with the rest of the Workbook
abstraction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The happy path for Cell processing is more-or-less by attribute
name: row.get('attribute').  This changes in the presence of COBOL
OCCURS clause items. We have to add an index.
row.get('ARRAY-ITEM', index=2) is the Python version of COBOL's
ARRAY-ITEM(3).&lt;/p&gt;
&lt;p&gt;The COBOL variable names *could* be mapped to Python names, and we
*could* overload __getitem__() so that row.array_item[3] could be
valid Python to fetch a value.&lt;/p&gt;
&lt;p&gt;But nope. COBOL has 1-based indexing, and I'm not going to hide that.
COBOL has a global current instance of the row, and I'm not going to
work with globals.&lt;/p&gt;
&lt;p&gt;So. Where do I stand?&lt;/p&gt;
&lt;p&gt;I'm about to start gutting. Some of the DDE size-and-offset (for a
static occurrences)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="Design Principles"></category><category term="object-oriented design"></category><category term="type hints"></category></entry><entry><title>Interesting Data Restructuring Problem</title><link href="https://slott56.github.io/2020_02_18-interesting_data_restructuring_problem.html" rel="alternate"></link><published>2020-02-18T20:35:00-05:00</published><updated>2020-02-18T20:35:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-02-18:/2020_02_18-interesting_data_restructuring_problem.html</id><summary type="html">&lt;p&gt;This seemed like an interesting problem. I hope this isn't someone's
take-home homework or an interview question. It seemed organic enough
when I found out about it.&lt;/p&gt;
&lt;p&gt;Given a document like this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
doc = {
    &amp;quot;key&amp;quot;: &amp;quot;the key&amp;quot;,
    &amp;quot;tag1&amp;quot;: [&amp;quot;list&amp;quot;, &amp;quot;of&amp;quot;, &amp;quot;values&amp;quot;],
    &amp;quot;tag2&amp;quot;: [&amp;quot;another&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;here&amp;quot;],
    &amp;quot;tag3&amp;quot;: [&amp;quot;lorem&amp;quot;, &amp;quot;ipsum&amp;quot;, &amp;quot;dolor&amp;quot;],
}
&lt;/pre&gt;
&lt;p&gt;We want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This seemed like an interesting problem. I hope this isn't someone's
take-home homework or an interview question. It seemed organic enough
when I found out about it.&lt;/p&gt;
&lt;p&gt;Given a document like this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
doc = {
    &amp;quot;key&amp;quot;: &amp;quot;the key&amp;quot;,
    &amp;quot;tag1&amp;quot;: [&amp;quot;list&amp;quot;, &amp;quot;of&amp;quot;, &amp;quot;values&amp;quot;],
    &amp;quot;tag2&amp;quot;: [&amp;quot;another&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;here&amp;quot;],
    &amp;quot;tag3&amp;quot;: [&amp;quot;lorem&amp;quot;, &amp;quot;ipsum&amp;quot;, &amp;quot;dolor&amp;quot;],
}
&lt;/pre&gt;
&lt;p&gt;We want a document like this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
doc = {
    &amp;quot;key&amp;quot;: &amp;quot;the key&amp;quot;,
    &amp;quot;values&amp;quot;: [
        {&amp;quot;tag1&amp;quot;: &amp;quot;list&amp;quot;, &amp;quot;tag2&amp;quot;: &amp;quot;another&amp;quot;, &amp;quot;tag3&amp;quot;: &amp;quot;lorem&amp;quot;},
        {&amp;quot;tag1&amp;quot;: &amp;quot;of&amp;quot;, &amp;quot;tag2&amp;quot;: &amp;quot;list&amp;quot;, &amp;quot;tag3&amp;quot;: &amp;quot;ipsum&amp;quot;},
        {&amp;quot;tag1&amp;quot;: &amp;quot;values&amp;quot;, &amp;quot;tag2&amp;quot;: &amp;quot;here&amp;quot;, &amp;quot;tag3&amp;quot;: &amp;quot;dolor&amp;quot;},
    ]
}
&lt;/pre&gt;
&lt;p&gt;In effect, rotating the structure from &lt;tt class="docutils literal"&gt;Dict[str, List[Any]]&lt;/tt&gt; to
&lt;tt class="docutils literal"&gt;List[Dict[str, Any]]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Bonus, we need to limiting the rotation to those keys with a value of
&lt;tt class="docutils literal"&gt;List[Any]&lt;/tt&gt;, ignoring keys with atomic values (int, str, etc.).&lt;/p&gt;
&lt;div class="section" id="step-1-key-partitioning"&gt;
&lt;h2&gt;Step 1. Key Partitioning&lt;/h2&gt;
&lt;p&gt;We need to distinguish the keys to be rotated from the other keys in
the dict.&lt;/p&gt;
&lt;p&gt;We start with &lt;tt class="docutils literal"&gt;Dict[str, Union[List[Any], Any]]&lt;/tt&gt;. We need to
distinguish the two subtypes in the union.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from itertools import filterfalse
list_of_values = lambda x: isinstance(doc[x], list)
lov_keys = list(filter(list_of_values, doc.keys()))
non_lov_keys = list(filterfalse(list_of_values, doc.keys()))
&lt;/pre&gt;
&lt;p&gt;This gets two disjoint subsets of keys: those which have a list and
all the others. The others, presumably, are strings or integers or
something irrelevant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="list-lengths"&gt;
&lt;h2&gt;List lengths&lt;/h2&gt;
&lt;p&gt;There's no requirement for the lists to be the same lengths. We have
three choices here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;insist on uniformity,&lt;/li&gt;
&lt;li&gt;truncate the long ones,&lt;/li&gt;
&lt;li&gt;pad the short ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll opt for uniformity in this example. Truncating is what
&lt;tt class="docutils literal"&gt;zip()&lt;/tt&gt; normally does. Padding is what &lt;tt class="docutils literal"&gt;itertools.zip_longest()&lt;/tt&gt;
does.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
lengths = (len(doc[k]) for k in lov_keys)
sample = next(lengths)
assert all(l == sample for l in lengths), &amp;quot;Inconsistent lengths&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Some folks don't like using &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; for this. This can be a more
elaborate &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;if-raise&lt;/span&gt; ValueError()&lt;/tt&gt; if that's necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-zip-to-merge-data-values"&gt;
&lt;h2&gt;Use zip() to merge data values&lt;/h2&gt;
&lt;p&gt;We have several &lt;tt class="docutils literal"&gt;List[Any]&lt;/tt&gt; instances in the document. The
intermediate goal is a &lt;tt class="docutils literal"&gt;List[Tuple[Any, &lt;span class="pre"&gt;...]]&lt;/span&gt;&lt;/tt&gt; structure where the
items from each tuple are chosen from the source lists. This gets us
a sequence of tuples that have parallel selections of items from each
of the source lists.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;zip(list, list)&lt;/tt&gt; function produces pairs from each of the two
lists. In our case, we have n lists in the original document. A
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zip(*lists)&lt;/span&gt;&lt;/tt&gt; will produce a sequence of items selected from each
list.&lt;/p&gt;
&lt;p&gt;Here's what it looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
list(zip(*(doc[k] for k in lov_keys)))
&lt;/pre&gt;
&lt;p&gt;We can also use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;zip(key-list,&lt;/span&gt; &lt;span class="pre"&gt;value-list)&lt;/span&gt;&lt;/tt&gt; to make a list of
key-value pairs from a tuple of the keys and a tuple of values.
&lt;tt class="docutils literal"&gt;zip(Tuple[Any, &lt;span class="pre"&gt;...],&lt;/span&gt; Typle[Any, &lt;span class="pre"&gt;...]])&lt;/span&gt;&lt;/tt&gt; gives us a
&lt;tt class="docutils literal"&gt;List[Tuple[Any, Any]]&lt;/tt&gt; structure. These objects can be turned into
dictionaries with the &lt;tt class="docutils literal"&gt;dict()&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
list(dict(zip(lov_keys, row)) for row in zip(*(doc[k] for k in lov_keys)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="assemble-the-parts"&gt;
&lt;h2&gt;Assemble the parts&lt;/h2&gt;
&lt;p&gt;The final document, then, is built from untouched keys and touched
keys.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
d1 = {
    k: doc[k] for k in non_lov_keys
}
d2 = {
    &amp;quot;values&amp;quot;: list(dict(zip(lov_keys, row)) for row in zip(*(doc[k] for k in lov_keys)))
}
d1.update(d2)
&lt;/pre&gt;
&lt;p&gt;It might be slightly easier to &amp;quot;somehow&amp;quot; build this as s single
dictionary, but the two subsets of keys make it seem more sensible to
build the resulting document in two parts.&lt;/p&gt;
&lt;p&gt;The code I was asked to comment on was quite complex. It built a
large number of intermediate structures rather than building a
&lt;tt class="docutils literal"&gt;List[Dict]&lt;/tt&gt; using a list comprehension.&lt;/p&gt;
&lt;p&gt;What's important about this problem is the complexity of the list
comprehension. In particular, the keys are used twice in the
comprehension. One use extracts the source lists from the original
document. The second use attaches the key to each value from the
original list.&lt;/p&gt;
&lt;p&gt;It almost seems like the Python 3.8 &amp;quot;Walrus&amp;quot; operator might be a
handy way to shrink this code down from about 14 lines. I'm not sure
it's helpful to make this any shorter. Indeed, I'm not 100% sure this
compact form is really optimal. The fact that I had to expand things
as part of an explanation suggests that separate lines of code are as
important as separate subsections of this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="minor-typo-ziplongest-should-be-zip-longest"&gt;
&lt;h2&gt;Minor typo: ziplongest should be zip_longest&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-02-14 09:15:44.588000-05:00&lt;/p&gt;
&lt;p&gt;Minor typo: ziplongest should be zip_longest
&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest"&gt;https://docs.python.org/3/library/itertools.html#itertools.zip_longest&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="#python"></category></entry><entry><title>Dictionary clear() as a code smell</title><link href="https://slott56.github.io/2020_02_06-dictionary_clear_as_a_code_smell.html" rel="alternate"></link><published>2020-02-06T16:50:00-05:00</published><updated>2020-02-06T16:50:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-02-06:/2020_02_06-dictionary_clear_as_a_code_smell.html</id><summary type="html">&lt;p&gt;Using the clear() method of a dict isn't *wrong*. But. The reasons
have to be investigated. I got a question about this code not working
&amp;quot;properly.&amp;quot; (&amp;quot;Properly&amp;quot;? Seems too vague to be useful.)&lt;/p&gt;
&lt;p&gt;Here's a summary of the example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
final_list = []
temp_dict = {}
for obj in some_source:
    cool_function(obj, temp_dict)
    final_list.append …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Using the clear() method of a dict isn't *wrong*. But. The reasons
have to be investigated. I got a question about this code not working
&amp;quot;properly.&amp;quot; (&amp;quot;Properly&amp;quot;? Seems too vague to be useful.)&lt;/p&gt;
&lt;p&gt;Here's a summary of the example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
final_list = []
temp_dict = {}
for obj in some_source:
    cool_function(obj, temp_dict)
    final_list.append(temp_dict)
    temp_dict.clear()  # Ready for reuse, right?
&lt;/pre&gt;
&lt;p&gt;This can't work.&lt;/p&gt;
&lt;p&gt;(Bonus points if you suspect that list.append() is a smell, too. There
may be a list comprehension solution that's tidier than this.)&lt;/p&gt;
&lt;p&gt;It's not always easy to get to a succinct statement of what doesn't
work &amp;quot;properly,&amp;quot; or what's confusing about the Python list structure.
Getting useful information can be hard. Why?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some programmers are &amp;quot;Assumptions First&amp;quot; kind of people, and their
complaint is often &amp;quot;doesn't match my assumption&amp;quot; not &amp;quot;doesn't
actually work.&amp;quot;&lt;/li&gt;
&lt;li&gt;Some people live in &amp;quot;All Details Matter&amp;quot; world. Rather than create
the smallest example of code that's confusing, they send the
*entire* project. The problem is buried in a log, wrapped with &amp;quot;Why
is the list of dictionaries not being properly updated?&amp;quot; In an email
that provides background details. For a Trello story that links to
background details. Details. None of which point to the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;Properly?&amp;quot; What does that even mean?&lt;/p&gt;
&lt;p&gt;Confronted with hundreds of lines of impenetrable code, I asked for a
definition of &amp;quot;properly&amp;quot; and got these exact seven words: &amp;quot;Properly is
defined as correctly or satisfactorily.&amp;quot;&lt;/p&gt;
&lt;p&gt;So...&lt;/p&gt;
&lt;p&gt;They have no idea what's wrong, can't summarize the code that's
broken, and it's my fault because I'm the Python guru.&lt;/p&gt;
&lt;div class="section" id="why-won-t-my-code-work"&gt;
&lt;h2&gt;Why Won't My Code Work?&lt;/h2&gt;
&lt;p&gt;The short answer is &amp;quot;Because You're Making an Assumption.&amp;quot;&lt;/p&gt;
&lt;p&gt;Of course, anyone who puts their assumptions first is as blind to
their assumptions as we are to the air that surrounds us. Assumptions
are just there. All around them. They breathe their assumptions in and
out without seeing them.&lt;/p&gt;
&lt;p&gt;The long answer is Python uses references.&lt;/p&gt;
&lt;p&gt;If you apply the id() function to the items in the resulting
final_list, you'll see that it's reference after reference of one
object, temp_dict.  Not copies of individually populated dictionaries,
but multiple references to the same dictionary. The same dictionary
which was cleared and reloaded over and over again.&lt;/p&gt;
&lt;p&gt;The very first log, crammed with useless details, had output from
print() functions. It showed multiple copies of the same dict.&lt;/p&gt;
&lt;p&gt;Because they assumed Python is making copies, there was no explanation
for why the list of dictionaries was broken. Clearly, it couldn't be
in their code. They assume their code is correct. The only choice has
to be an undocumented mystery in Python. And I'm the Python guru, so
it's my problem.&lt;/p&gt;
&lt;p&gt;The presence of duplicates in the output meant &amp;quot;something&amp;quot; to them.
They could point it out as somehow wrong. But the idea that their
assumptions might be wrong? That was a nope.&lt;/p&gt;
&lt;p&gt;They wanted it to be the list object, final_list, which didn't append
dictionaries the way they assumed it would. They needed it to be a
Python internals problem. They needed it to be a bad documentation
problem. (Seriously. These convos have spun out of control in the
past.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;Using the clear() method of a dict may indicate the developer is
hoping Python shares copies, not references. Either add an explicit
copy() (or deepcopy.copy()) or fix things to create new, fresh
dictionaries each time. Objects are cheap. Why reuse them?&lt;/p&gt;
&lt;p&gt;(Indeed, an interesting side-bar question I did not ask is &amp;quot;In what
god-forsaken programming language does this 'clear-and-reuse' a data
structure even make sense? FORTRAN?)&lt;/p&gt;
&lt;p&gt;The list comprehension solution to this problem will have to wait.
Stay tuned. I want to disentangle the algorithmic design problem from
the &amp;quot;why aren't my assumptions correct?&amp;quot; problem..&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="data structure"></category><category term="algorithm"></category></entry><entry><title>Stingray Reader Rewrite</title><link href="https://slott56.github.io/2020_01_31-stingray_reader_rewrite.html" rel="alternate"></link><published>2020-01-31T10:39:00-05:00</published><updated>2020-01-31T10:39:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-01-31:/2020_01_31-stingray_reader_rewrite.html</id><summary type="html">&lt;p&gt;See {filename}/blog/2020/01/2020_01_26-stingrayreader_upgrade.rst&lt;/p&gt;
&lt;p&gt;This drifted into some serious rethinking of bad design decisions.
(If someone else did this, I'd call it weak, and suggest
improvements. It was me. It was bad. I'm a bad programmer and I feel
bad about it.)&lt;/p&gt;
&lt;p&gt;An an example, there's this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See {filename}/blog/2020/01/2020_01_26-stingrayreader_upgrade.rst&lt;/p&gt;
&lt;p&gt;This drifted into some serious rethinking of bad design decisions.
(If someone else did this, I'd call it weak, and suggest
improvements. It was me. It was bad. I'm a bad programmer and I feel
bad about it.)&lt;/p&gt;
&lt;p&gt;An an example, there's this sketchy construct:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
some_data = {name: source[name] for name in the_names}
the_object = SomeClass(**some_data)
&lt;/pre&gt;
&lt;p&gt;The some_data dictionary could be called Dict[str, Any], but that's
unhelpful for letting &lt;strong&gt;mypy&lt;/strong&gt; check the consistency of data
structures. This is what was required:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FullAttr = TypedDict(&amp;quot;FullAttr&amp;quot;,
    {
        &amp;quot;name&amp;quot;: str,
        &amp;quot;offset&amp;quot;: int,
        &amp;quot;size&amp;quot;: int,
        &amp;quot;type&amp;quot;: str,
        &amp;quot;create&amp;quot;: Cell,
    },
    total=False
)
&lt;/pre&gt;
&lt;p&gt;This dictionary changes -- profoundly -- the relationship between
classes. The FullAttr type gives us an intermediary representation.
The SomeClass hierarchy has a flexible collection of attributes. We
can use this to uncouple some parsing operations from object factory
operations, using this minimal subset of definitions as a kind of
bridge between modules, both of which can be fully type-checked, but
still permit Python's duck-type flexibility.&lt;/p&gt;
&lt;div class="section" id="it-got-worse"&gt;
&lt;h2&gt;It Got Worse&lt;/h2&gt;
&lt;p&gt;Adding type hints to Stingray Reader required navigating some shoal
water created by a poor set of dependency decisions.&lt;/p&gt;
&lt;p&gt;The original, vague, concept was to have a Schema and Attribute
definition that could be shared by all the various readers. A schema
contains a number of attributes. Ideally, an attribute can be defined
by a sub-schema. This is how JSONSchema and XSD work.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;The Stingray Reader reads Workbooks with an extension to read COBOL.&lt;/p&gt;
&lt;p&gt;There are a bunch of extensions required.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The schema is loaded by a COBOL parser.&lt;/li&gt;
&lt;li&gt;The physical file formats require the possibility of EBCDIC -&amp;gt; Unicode conversion.&lt;/li&gt;
&lt;li&gt;Unlike ordinary workbooks, the record layouts have to be built
lazily. An ordinary workbook row is complete. Some physical
formats elide empty cells, but they're easy to replace with an
explicit empty cell. COBOL has a REDEFINES clause that means we
can't even attempt to parse the bytes for a row until they're
required by the app. There's no way -- from the data definition
alone -- to discern which of the redefines options will have valid
data. There's more, but you get the idea: COBOL is kind of
complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Versions 1 to 4 had a dumb-as-a-bag-of-hammers problem.&lt;/p&gt;
&lt;p&gt;The Schema and Attribute definitions where extended to depend on
COBOL implementation details.&lt;/p&gt;
&lt;p&gt;It works nicely because of duck typing and late binding of types.
Python's type hinting exposes the grotesque consequences of this
dependency.&lt;/p&gt;
&lt;p&gt;We tried several ways of reordering a bunch of definitions to remove
forward type references. It took almost an hour to realize the
circularity could not be removed trivially because of a circularity.
Two Attribute subclasses depended on COBOL features. And the COBOL
features had weakref references back to their Attributes.&lt;/p&gt;
&lt;p&gt;Crushing everything into a single, large module, worked to ease the
complications or circularity. But the essential interdependence needs
to be expunged.&lt;/p&gt;
&lt;p&gt;What has to happen next is to invert the relationship between
Attributes and COBOL details. This means two changes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Extending the Attribute class hierarchy to contain just enough
information to cover the COBOL complications.&lt;/li&gt;
&lt;li&gt;Changing the function that builds an Attribute definition from the
COBOL source so it copies details into the Attribute. The COBOL
detail needs to be little more than the description of the
property.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This isn't easy. But. 187 test cases and a TOX setup makes it a
reasonable effort.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;I can finally look seriously at converting between JSON Schema and
COBOL.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>StingrayReader Upgrade</title><link href="https://slott56.github.io/2020_01_26-stingrayreader_upgrade.html" rel="alternate"></link><published>2020-01-26T12:27:00-05:00</published><updated>2020-01-26T12:27:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-01-26:/2020_01_26-stingrayreader_upgrade.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's time to add type hints.&lt;/div&gt;
&lt;div class="line"&gt;And.&lt;/div&gt;
&lt;div class="line"&gt;Learn some interesting lessons.&lt;/div&gt;
&lt;div class="line"&gt;Here's the interesting problem:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
some_data = {name: source[name] for name in the_names}
the_object = SomeClass(**some_data)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;While valid, this concerns &lt;strong&gt;mypy&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;The point here is to have a flexible source of data, source. Perhaps …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;https://github.com/slott56/Stingray-Reader&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's time to add type hints.&lt;/div&gt;
&lt;div class="line"&gt;And.&lt;/div&gt;
&lt;div class="line"&gt;Learn some interesting lessons.&lt;/div&gt;
&lt;div class="line"&gt;Here's the interesting problem:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
some_data = {name: source[name] for name in the_names}
the_object = SomeClass(**some_data)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;While valid, this concerns &lt;strong&gt;mypy&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;The point here is to have a flexible source of data, source. Perhaps
this is a spreadsheet row, or a complex JSON/YAML-formatted document
with optional or irrelevant fields. The short list of relevant names
is in the_names.  Ideally, this list of names matches the keyword args
of SomeClass.&lt;/div&gt;
&lt;div class="line"&gt;This gives &lt;strong&gt;mypy&lt;/strong&gt; fits because there's no way to match the
dictionary with the object's parameters.&lt;/div&gt;
&lt;div class="line"&gt;We have two paths forward.&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Eliminate the intermediate dictionary. Use SomeClass(x=source['x'],
y=source['y'], ... etc.)&lt;/li&gt;
&lt;li&gt;Consider using a TypedDict for the intermediate dictionary. But. Then
the dictionary's types must be kept in sync with the SomeClass
definition, which may be a little crazy.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Item 2 isn't as crazy as it sounds, though. The SomeClass definition
has a **kwargs option, allowing extra attributes to be set. This is,
perhaps also crazy. But, the framework needs to drag around extra
attributes for the application's benefit.&lt;/div&gt;
&lt;div class="line"&gt;A possibility is to do away with **kwargs, and replace it with other:
Dict[Any, Any]. This cuts down on the expressivity of the framework.
Now we support SomeClass.app_name. This change would mean we'd have
SomeClass.other['app_name']. While possibly better for &lt;strong&gt;mypy&lt;/strong&gt;, I
don't think it's ideal for users.&lt;/div&gt;
&lt;div class="line"&gt;I can also rework SomeClass to use __getattribute__() to look into
self.other for extra attribute names.&lt;/div&gt;
&lt;div class="line"&gt;I'm very happy to have the rigorous static check. The rethinking is
helpful.&lt;/div&gt;
&lt;div class="line"&gt;(&amp;quot;Wait,&amp;quot; you say. &amp;quot;You didn't provide the recommended path forward.&amp;quot;
Correct.  I'll update.)&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>The Wrong Abstraction Problem</title><link href="https://slott56.github.io/2020_01_14-the_wrong_abstraction_problem.html" rel="alternate"></link><published>2020-01-14T08:00:00-05:00</published><updated>2020-01-14T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-01-14:/2020_01_14-the_wrong_abstraction_problem.html</id><summary type="html">&lt;p&gt;For the last week I've been working with some legacy code that reveals
a kind of problem I hadn't really seen before.&lt;/p&gt;
&lt;p&gt;I'm calling it the &lt;strong&gt;Wrong Abstraction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I want to contrast this with the &lt;strong&gt;Leaky Abstraction&lt;/strong&gt;, where
implementation details are revealed and raise havoc.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Wrong Abstraction&lt;/strong&gt; problem seems …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the last week I've been working with some legacy code that reveals
a kind of problem I hadn't really seen before.&lt;/p&gt;
&lt;p&gt;I'm calling it the &lt;strong&gt;Wrong Abstraction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I want to contrast this with the &lt;strong&gt;Leaky Abstraction&lt;/strong&gt;, where
implementation details are revealed and raise havoc.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Wrong Abstraction&lt;/strong&gt; problem seems to arise when a specification
is too technical. A detailed, code-like tangle of if-then-else becomes
its own problem. I'm guessing someone worked to detail &lt;strong&gt;all&lt;/strong&gt; the
technical considerations. The chosen format as code-like text was not
a great idea. The cyclomatic complexity of the specification is
through the roof. And the code reflects this failure to actually
capture anyone's underlying intent.&lt;/p&gt;
&lt;p&gt;Cue the gif from the office. &lt;a class="reference external" href="https://gph.is/1m89uqR"&gt;https://gph.is/1m89uqR&lt;/a&gt; Someone with
&amp;quot;people skills&amp;quot; tried to recast the business intent into technical
if-then-else.&lt;/p&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;p&gt;The context doesn't matter very much, but it can help people visualize
the problem.&lt;/p&gt;
&lt;p&gt;We're talking about validation rules. A document arrives, perhaps it's
source code, or perhaps it's a shopping cart, or perhaps it's a schema
definition. The document is validated according to some fairly
sophisticated rules.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There's the obvious syntax check: is it valid JSON or Python or
whatever the language is.&lt;/li&gt;
&lt;li&gt;There are isolated validity checks. Individual elements (statements,
items in the cart, subschemas) have to be valid.&lt;/li&gt;
&lt;li&gt;There are aggregate validity checks. Groups of items -- the cart
overall -- must satisfy some additional criteria. In our case, nine
additional rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the rules are complex. I think they original intent was
drafted by a committee. It's visible, and involves large piles of
money and potential lawsuits. Serious rules.&lt;/p&gt;
&lt;p&gt;There are at least two separate implementations, mostly in JavaScript.
(I'm not here to curse out JavaScript. The language has a lot of wat
-- &lt;a class="reference external" href="https://github.com/denysdovhan/wtfjs"&gt;https://github.com/denysdovhan/wtfjs&lt;/a&gt; -- but that's not the point.)&lt;/p&gt;
&lt;p&gt;So, you ask, where's the Wrongness?&lt;/p&gt;
&lt;p&gt;It's a vast gap between intent and implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mind-the-gap"&gt;
&lt;h2&gt;Mind the Gap&lt;/h2&gt;
&lt;p&gt;The source documents decompose the validation into 9 steps. There's an
explicit &amp;quot;all or nothing&amp;quot; disclaimer. That's nice.&lt;/p&gt;
&lt;p&gt;The code looks more-or-less like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
valid = True
for item in cart:
    for r in (Rule1, Rule2, Rule3, Rule4, ..., Rule9):
        if applies(r, item):
            valid = valid and r(item)
&lt;/pre&gt;
&lt;p&gt;It turns out, though, we don't really apply all 9 rules like this.
This is &lt;strong&gt;The Gap&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We actually have three types of items in the cart (or code or schema
or whatever.) One type item has a default, a hidden feature of rule 1.
It breaks down like this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rule 1 applies to an item of Type A. If the Type A item is omitted,
the default value will pass the Rule 1 check.&lt;/li&gt;
&lt;li&gt;Rule 2 applies to all the items of Type B. Only.&lt;/li&gt;
&lt;li&gt;Rules 3 to 8 apply to the items of Type C. Only. And they work in
pairs, 3-4, 5-6, 7-8.&lt;/li&gt;
&lt;li&gt;Rule 9 applies to a subset of items of Type C. The C9 subset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code with a nested &amp;quot;for all items&amp;quot; and &amp;quot;for all rules&amp;quot; is -- well --
wrong. It's flat-out lying about the validation rules and the objects
(and collections) being validated. It's lying to a level that seems
unconscionable to me. But. Maybe there's a reason.&lt;/p&gt;
&lt;p&gt;The validation is really something more like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
valid = Rule1(filter(lambda item: item.is_a, cart))
    and Rule2(filter(lambda item: item.is_b, cart))
    and all(
        r(x)
        for r in (Rule3, Rule4, Rule5, ..., Rule8)
        for x in filter(lambda item: item.is_c, cart)
    )
    and Rule9(filter(lambda item: item.is_c9, cart))
&lt;/pre&gt;
&lt;p&gt;This reflects the actual structure of item types and rule types
without wrapping them in a wrong abstraction.&lt;/p&gt;
&lt;p&gt;(It's actually *more* complex than this, but, this is enough to
expose the core issue.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-the-gap"&gt;
&lt;h2&gt;Why The Gap?&lt;/h2&gt;
&lt;p&gt;There are a number of causes. In part, the gap seems to reflect a
disconnect between &lt;strong&gt;intention&lt;/strong&gt; and &lt;strong&gt;implementation&lt;/strong&gt;. Indeed, this
seems to be an example of &lt;a class="reference external" href="http://www.melconway.com/Home/Conways_Law.html"&gt;Conway's
Law&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Any organization that designs a system (defined broadly) will
produce a design whose structure is a copy of the organization's
communication structure.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;I think the for item in cart: for rule in (Rule1, ..., Rule9):
structure reflects some intermediate design work between the
original intent and the developer who implemented the code.&lt;/p&gt;
&lt;p&gt;The extra layer of design work was a failed attempt to &amp;quot;simplify&amp;quot;
things for the developer. I can imagine the conversation.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;It's simple. There are 12 rules. Each rule applies
to each item.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Developer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;Rule one only seems to apply to Type A. So maybe
it's not simple.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;It's simple. Don't make it complex. Write an
'applicability' test. Evaluate the rule if it applies to the
item.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Developer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;So it's not trivially all rules against all items?
Could we associate subsets of rules with the separate item types?&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;No. You're making it complex; It's simply
evaluating all 12 rules against each item. If the rule applies to
the item type. Other than that, it's simple.&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Developer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;Instead of the 'applicability test,' could we
group the rules?&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Designer&lt;/strong&gt;:&lt;/dt&gt;
&lt;dd&gt;&amp;quot;No. You're making it complex.&amp;quot;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I also think the gap also reflects an inability (or a lack of
permission) to hack incrementally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="incremental-development"&gt;
&lt;h2&gt;Incremental Development&lt;/h2&gt;
&lt;p&gt;One of Python's strong suits is the ability to run code at the &amp;gt;&amp;gt;&amp;gt;
prompt. Confronted with a complex data structure and complex rules,
some of us will try different designs on for size as quickly as we
can. We hack out the essence of the code and see if it would make
sense in a tutorial explanation.&lt;/p&gt;
&lt;p&gt;I've darted down any number of dead-ends trying to get a sensible
abstraction that I can understand and explain. The idea is to write a
bit of code, mess around, and then decide to backtrack or push
forward. (For a lot of people, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Rubber_duck_debugging"&gt;rubber
ducking&lt;/a&gt; or
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pair_programming"&gt;pair programming&lt;/a&gt;
helps with this.)&lt;/p&gt;
&lt;p&gt;When you're only a few lines of code into the problem, it's easy and
fun to delete it all and start again. Or. It *should* be easy and
fun. Some folks worry about deleting bad code and starting over.&lt;/p&gt;
&lt;p&gt;I think the overall context didn't facilitate hacking around. The
documentation talks about creating mock documents (or carts or
collections) of items for testing purposes. I don't think anyone
tried that. I'm not sure they knew the feature was available. I think
they put the validation code into the framework, ran it in the
development environment, looked at the debugging logs, changed the
code, deployed, and ran things again until it worked. A long, painful
slog, where backtracking would be considered a horrible set-back.&lt;/p&gt;
&lt;p&gt;The complex &amp;quot;applies()&amp;quot; test has a surprising bunch of if statements
that don't seem to reflect the actual properties of the three types
of items. It seems to reflect an evolving series of guesses about
attributes that were present or absent.&lt;/p&gt;
&lt;p&gt;When I was younger, writing COBOL, PL/I, Fortran and the like, that's
how we worked. Run it. Look at logs. Run it again later in the day.
The long, slow development cycle meant that as soon as something
looked like it was working, we called the project 90% complete.&lt;/p&gt;
&lt;p&gt;This lead inexorably to the
&lt;a class="reference external" href="http://catb.org/jargon/html/N/Ninety-Ninety-Rule.html"&gt;ninety-ninety&lt;/a&gt;
rule.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The first 90% of the code accounts for the first 90% of the
development time. The remaining 10% of the code accounts for the
other 90% of the development time.”&lt;/blockquote&gt;
&lt;p&gt;Even if the abstraction is wrong. We've take 90% of the time to get
something that works. There's no fixing it, now. We have to ship
something, so we spend the next 90% of the time working around the
wrongness and filling in gaps that shouldn't have existed.&lt;/p&gt;
&lt;p&gt;A horrid development environment tends to prohibit refactoring. You
can't simply run the test suite with refactored code because the test
suite is neither fast nor fully automated. In this case, I don't
think it runs in a handy form on the desktop, but requires a
dedicated server. Without a Docker container for each developer, I
think the project gets paralyzed and stuck with icky code and me
doing a very expensive rewrite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;An utterly wrong abstraction seems have two root causes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Too many designers&lt;/li&gt;
&lt;li&gt;No ability to delete the garbage abstraction and start over with
something better&lt;/li&gt;
&lt;li&gt;No simple unit test environment to support refactoring&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="architecture"></category></entry><entry><title>Patreon Book Idea</title><link href="https://slott56.github.io/2020_01_07-patreon_book_idea.html" rel="alternate"></link><published>2020-01-07T08:00:00-05:00</published><updated>2020-01-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-01-07:/2020_01_07-patreon_book_idea.html</id><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://www.patreon.com/posts/32521611"&gt;Additional, Related
Content&lt;/a&gt;&amp;quot;. It's one of the
posts here: &lt;a class="reference external" href="https://www.patreon.com/slott"&gt;https://www.patreon.com/slott&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think there's space for a &lt;em&gt;Building Skills in Functional Python&lt;/em&gt;
title next to the &lt;em&gt;Building Skills in OO Design&lt;/em&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="functional python programming"></category><category term="#python"></category></entry><entry><title>Christmas Ornament</title><link href="https://slott56.github.io/2019_12_31-christmas_ornament.html" rel="alternate"></link><published>2019-12-31T08:00:00-05:00</published><updated>2019-12-31T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-12-31:/2019_12_31-christmas_ornament.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/cpx-xmas-ornament"&gt;https://github.com/slott56/cpx-xmas-ornament&lt;/a&gt;
You'll need a Circuit Playground Express
&lt;a class="reference external" href="https://www.adafruit.com/product/3333"&gt;https://www.adafruit.com/product/3333&lt;/a&gt;
Install the code. Enjoy the noise and blinky lights.
The MML translation isn't as complete as you might like. The upper/lower
case for the various commands isn't handled quite as cleanly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/cpx-xmas-ornament"&gt;https://github.com/slott56/cpx-xmas-ornament&lt;/a&gt;
You'll need a Circuit Playground Express
&lt;a class="reference external" href="https://www.adafruit.com/product/3333"&gt;https://www.adafruit.com/product/3333&lt;/a&gt;
Install the code. Enjoy the noise and blinky lights.
The MML translation isn't as complete as you might like. The upper/lower
case for the various commands isn't handled quite as cleanly as it could
be. AFAIK, case shouldn't matter, but I omitted any lower() functions,
making the  MML parser case sensitive. It only mattered for one of the
four songs, and it was easier to edit the song.
The processing leaves a great deal of &amp;quot;clickiness&amp;quot; in the start_tone()
processing. I think I know how to address it.
There are barely 96 or so different tones available in MML compositions.
It might be possible to generate the wave shapes in advance to have a
smoother music experience.
One could image having an off-line translator to transform the MML text
into a sequence of bytes with note number and duration. This would
slightly compress the song, but would speed up processing by eliminating
the overhead of parsing.
Additionally, having 96 wave tables could speed up tone production. The
tiny bit of time to recompute the sine wave at a given frequency would
be eliminated. But. Memory is limited.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="CircuitPlayground"></category></entry><entry><title>Walrusing Around</title><link href="https://slott56.github.io/2019_12_26-walrusing_around.html" rel="alternate"></link><published>2019-12-26T12:00:00-05:00</published><updated>2019-12-26T12:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-12-26:/2019_12_26-walrusing_around.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This is -- well -- it is what it is. I don't have to like it.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; t_s = (8063599, 0)
&amp;gt;&amp;gt;&amp;gt; fields = [(t_s := divmod(t_s[0], b))[1] for b in (60, 60, 24, 7)]
&amp;gt;&amp;gt;&amp;gt; list(reversed(fields + [t_s[0]]))
[13, 2, 7, 53, 19]
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;It works and shows how the assignment operator works …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This is -- well -- it is what it is. I don't have to like it.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; t_s = (8063599, 0)
&amp;gt;&amp;gt;&amp;gt; fields = [(t_s := divmod(t_s[0], b))[1] for b in (60, 60, 24, 7)]
&amp;gt;&amp;gt;&amp;gt; list(reversed(fields + [t_s[0]]))
[13, 2, 7, 53, 19]
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;It works and shows how the assignment operator works.&lt;/div&gt;
&lt;div class="line"&gt;The point here is to convert a timestamp into ISO week, day, hour,
minute, second. 13th week, 2nd day, 7h, 53m, 19s.&lt;/div&gt;
&lt;div class="line"&gt;The divmod() function returns a two-tuple, which the assignment
operator can't decompose. Instead, we decompose it by wrapping the
whole thing in ()[1].&lt;/div&gt;
&lt;div class="line"&gt;Works.&lt;/div&gt;
&lt;div class="line"&gt;Do Not Recommend.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="black-fails-to-format-over-length-line-containing"&gt;
&lt;h2&gt;Black fails to format over-length line containing ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-12-27 14:45:40.359000-05:00&lt;/p&gt;
&lt;p&gt;Black fails to format over-length line containing walrus operator
&lt;a class="reference external" href="https://github.com/psf/black/issues/1194"&gt;https://github.com/psf/black/issues/1194&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="walrus"></category><category term="#python"></category></entry><entry><title>Plannng a Linked-in Learning Course (and using the := walrus operator)</title><link href="https://slott56.github.io/2019_12_17-plannng_a_linked_in_learning_course_and_using_the_walrus_operator.html" rel="alternate"></link><published>2019-12-17T08:00:00-05:00</published><updated>2019-12-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-12-17:/2019_12_17-plannng_a_linked_in_learning_course_and_using_the_walrus_operator.html</id><summary type="html">&lt;p&gt;I've recorded two courses for LinkedIn
Learning &lt;a class="reference external" href="https://www.linkedin.com/learning/me"&gt;https://www.linkedin.com/learning/me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let me emphasize that their production values take a lot of work.
While I think I'm a pretty good live presenter, a few days in the
recording booth with a producer, reveals all my weaknesses. so. um …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recorded two courses for LinkedIn
Learning &lt;a class="reference external" href="https://www.linkedin.com/learning/me"&gt;https://www.linkedin.com/learning/me&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let me emphasize that their production values take a lot of work.
While I think I'm a pretty good live presenter, a few days in the
recording booth with a producer, reveals all my weaknesses. so. um.
you know?&lt;/p&gt;
&lt;p&gt;I'm starting down the road to at least one more, maybe another one or
two after that.&lt;/p&gt;
&lt;p&gt;Which leads to code. Of course. And the code uses the assignment
expression (&amp;quot;walrus&amp;quot;) operator.&lt;/p&gt;
&lt;p&gt;Here's what's going on. I've got a directory full of CSV files with
the slide-by-slide scripts. Each file has a bunch of tabs, and the
relevant tables have a fixed heading that the production folks use.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
target_headings = ['Part', 'Voice', 'Visual Description', 'Storyboard / Description']
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;Voice&amp;quot; column in these tables is the script. Each row is a slide
or other visual. The overall management of the resources with all of
these spreadsheets doesn't seem ideal to me. However, it's the way
skilled professionals prefer to manage these multi-media assets.&lt;/p&gt;
&lt;p&gt;The question is: &amp;quot;which sections are too long?&amp;quot;&lt;/p&gt;
&lt;p&gt;Generally, we speak at a consistent rate. During rehearsals, I can
use my stopwatch to get timing for a particular script. This gives me
a seconds/word or words/second rate metric. Given an average rate,
and a script, I can predict a likely duration given the text of the
script.&lt;/p&gt;
&lt;p&gt;The data is in spreadsheets -- generally the root cause of many
complications. There's no word-count in Numbers. So. Time to apply
Python. (I'm sure someone has a bunch of Excel macros that can do
word-counts. Good for you. I don't own a copy of Excel.)&lt;/p&gt;
&lt;p&gt;Here's how this shakes out. There are three parts to the analysis,
modeling, and applying the model. The first is a functional flattener
to turn all of the files and tabs and tables into a single stream of
useful rows.&lt;/p&gt;
&lt;div class="section" id="the-data-gathering"&gt;
&lt;h2&gt;The Data Gathering&lt;/h2&gt;
&lt;p&gt;The essential data gathering has to flatten the relatively complex
file/sheet/table structure into something we can extract features
from. A sequence of the final text of the scripts is what we want.
Each script can be a mapping from the slide label to the voice
content. It's this content -- the script text -- where we'll find the
interesting features.&lt;/p&gt;
&lt;p&gt;Here's how this starts.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from pathlib import Path
from fractions import Fraction
import csv
import re
from typing import Tuple, Dict, Iterator, List

sheet_table_pattern = re.compile(f&amp;quot;^(\w+): (.+)$&amp;quot;)
target_headings = ['Part', 'Voice', 'Visual Description', 'Storyboard / Description']

def script_iter(source: Path) -&amp;gt; Iterator[Tuple[str, Dict[str, str]]]:
    for script_path in sorted(source.glob(&amp;quot;*.csv&amp;quot;)):
        # print(script_path)
        with script_path.open() as script_file:
            reader = csv.reader(script_file)
            row_iter = iter(reader)
            for row in row_iter:
                if len(row) == 1 and (match := sheet_table_pattern.match(row[0])):
                    if match and match.group(2).startswith('Table '):
                        headings = next(row_iter)
                        if headings == target_headings:
                            section = match.group(1)
                            text = {}
                            # print(f&amp;quot;Analyzing {section}&amp;quot;)
                            for sub_row in row_iter:
                                if len(sub_row) == 0:
                                    break
                                dict_sub_row = dict(zip(headings, sub_row))
                                text[dict_sub_row['Part']] = dict_sub_row['Voice']
                            yield section, text
&lt;/pre&gt;
&lt;p&gt;The outermost &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; statement locates all &lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt; files. All the rows
within a file will belong to a number of sheets and tables within
each sheet. The separator is a line with a Sheet: Table string,
described by the sheet_table_pattern. The second for statement picks
all the rows from a given sheet, looking for the separators.&lt;/p&gt;
&lt;p&gt;There are a bunch of irrelevant tables. Hence the tall stack of
if-statements. The useful parts of the script all have names that
start with &lt;tt class="docutils literal"&gt;'Table '&lt;/tt&gt;. Weird, but true.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;match.group(2).startswith('Table&lt;/span&gt; ')&lt;/tt&gt; check feels like some casual
ad-hoc test and should probably be made more visible and
configurable.&lt;/p&gt;
&lt;p&gt;Once we've found a table with the right headings, we can iterate over
the following rows until we get to a blank line at end-of-table. We
accumulate a dictionary, named text, which has the 'Part' and 'Voice'
column values as a handy &lt;tt class="docutils literal"&gt;Dict[str, str]&lt;/tt&gt; mapping.&lt;/p&gt;
&lt;p&gt;Note that we're sharing an iterator, the row_iter variable, among two
for statements. This is a very handy trick when doing this kind of
partitioning. The outermost use of the iterator is rejecting
irrelevant rows. The inner use of the iterator is assembling
composite objects from a subset of rows, effectively partitioning the
raw data.&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;can&lt;/em&gt; be decomposed into separate functions. Further
refactoring is left as an exercise for the reader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-benchmark-data"&gt;
&lt;h2&gt;The Benchmark Data&lt;/h2&gt;
&lt;p&gt;The result of benchmarking is a &lt;tt class="docutils literal"&gt;Fraction&lt;/tt&gt; object with my unique
reading pace. And yes, a Fraction makes more sense than a float
value. We're working in int space, and introducing float seems wrong.&lt;/p&gt;
&lt;p&gt;Here's the benchmarking to create a model.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def rate() -&amp;gt; Fraction:
    Benchmarks = [
        {'time': 3*60 + 29, 'words': 568},  # 01_01
        {'time': 5*60 + 32, 'words': 732},  # 01_04
        {'time': 5*60 + 54, 'words': 985},  # 02_04
        {'time': 4*60 + 58, 'words': 663},  # 02_05
        {'time': 8*60 + 48, 'words': 1192},  # 03_02 (draft)
    ]
    time_bm = sum(b['time'] for b in Benchmarks)
    words_bm = sum(b['words'] for b in Benchmarks)
    time_per_word = Fraction(time_bm/words_bm)
    return time_per_word
&lt;/pre&gt;
&lt;p&gt;For some sample sections, I read through the material in my best NPR
professional broadcasting voice. The sums of words and times give us
a time-per-word Fraction object. The resulting value is near 31
seconds for 75 words.&lt;/p&gt;
&lt;p&gt;I really like using Fraction instead of float for this kind of
thing. The data doesn't support even one decimal place of supposed
accuracy.&lt;/p&gt;
&lt;p&gt;Note that I didn't factor in any slide count. I &lt;strong&gt;assumed&lt;/strong&gt; this is a
linear model from words to time. If I was a real scientist I might
have tried a bunch of models.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="applying-the-model"&gt;
&lt;h2&gt;Applying the Model&lt;/h2&gt;
&lt;p&gt;The model is linear. It's a scaling factor applied to a specific
feature, the number of words. Here's one version of the code. I'm not
sure I like it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def main() -&amp;gt; None:
    time_per_word = rate()
    source = Path.cwd()
    print(f&amp;quot;script, slides, words, time&amp;quot;)
    for script, body in script_iter(source):
        word_count = sum(len(text.split()) for text in body.values())
        slide_count = sum(1 for text in body.values() if len(text) &amp;gt; 0)
        m, s = divmod(int(word_count*time_per_word), 60)
        print(f&amp;quot;{script}, {slide_count}, {word_count}, {m}:{s:02d}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;There are three mappings going on here. This makes it a little tricky
to create a simple function to map from raw data to something the
model can use, then applying the model.&lt;/p&gt;
&lt;p&gt;The 'word_count' is a mapping from raw data to one feature. The
'slide_count' is another mapping from raw data to a secondary
feature. The 'm' and 's' values represent another mapping from the
word_count to the estimated time.&lt;/p&gt;
&lt;p&gt;We can hack this around to find another use for the assignment
operator.  But the following seems insane:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
divmod(int(word_count:=sum(len(text.split()) for text in body.values())*time_per_word), 60)
&lt;/pre&gt;
&lt;p&gt;Let's not consider this assignment expression example as particularly
helpful. The above turns two simple statements into a mess.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-implementation"&gt;
&lt;h2&gt;Alternative Implementation&lt;/h2&gt;
&lt;p&gt;The relationships among the mappings can be built a pure functional
programming, but seems flirt with needless complexity. We can have a
pair of functions to map the body.values() to some named tuple with
feature values. We can use a third function to apply the model.&lt;/p&gt;
&lt;p&gt;Something like this is an alternative that's slightly more
functional.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Features(NamedTuple):
    body: Dict[str, str]
    &amp;#64;property
    def word_count(self) -&amp;gt; int:
        return sum(len(text.split()) for text in self.body.values())
    &amp;#64;property
    def slide_count(self) -&amp;gt; int:
        return sum(1 for text in self.body.values() if len(text) &amp;gt; 0)
    def duration(self, time_per_word: Fraction) -&amp;gt; int:
        return int(self.word_count*time_per_word)

def main_2() -&amp;gt; None:
    time_per_word = rate()
    source = Path.cwd()
    print(f&amp;quot;script, slides, words, time&amp;quot;)
    for script, body in script_iter(source):
        details = Features(body)
        m, s = divmod(details.duration(time_per_word), 60)
        print(f&amp;quot;{script}, {details.slide_count}, {details.word_count}, {m}:{s:02d}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;I'm not sure this is dramatically &amp;quot;better&amp;quot;. It isolates some aspects
of feature collection and model application. It also harbors a secret
inefficiency. The two feature values should be cached to avoid
recomputing them.&lt;/p&gt;
&lt;p&gt;I'll leave the refactoring for the interested reader.
The durations over &amp;gt; 5:00 (300 seconds) need some rework. That's the
actual useful output: the list of scripts with excessive time becomes
the queue of content that needs rework.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="Data Science"></category></entry><entry><title>Functional programming design pattern: Nested Iterators == Flattening</title><link href="https://slott56.github.io/2019_12_15-functional_programming_design_pattern_nested_iterators_flattening.html" rel="alternate"></link><published>2019-12-15T10:29:00-05:00</published><updated>2019-12-15T10:29:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-12-15:/2019_12_15-functional_programming_design_pattern_nested_iterators_flattening.html</id><summary type="html">&lt;p&gt;Here's a functional programming design pattern I uncovered. This may
not be news to you, but it was a surprise to me. It cropped up when
looking at something that needs parallelization to reduced the
elapsed run time.&lt;/p&gt;
&lt;p&gt;Consider this data collection process.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for h in some_high_level_collection(arg1):
    for l …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Here's a functional programming design pattern I uncovered. This may
not be news to you, but it was a surprise to me. It cropped up when
looking at something that needs parallelization to reduced the
elapsed run time.&lt;/p&gt;
&lt;p&gt;Consider this data collection process.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for h in some_high_level_collection(arg1):
    for l in h.some_low_level_collection(arg2):
        if some_filter(l):
            logger.info(&amp;quot;Processing %s %s&amp;quot;, h, l)
            some_function(h, l)
&lt;/pre&gt;
&lt;p&gt;This is pretty common in devops world. You might be looking at
all repositories in all github organizations. You might be
looking at all keys in all AWS S3 buckets under a specific
account. You might be looking at all tables owned by all
schemas in a database.&lt;/p&gt;
&lt;p&gt;It's helpful -- for the moment -- to stay away from taller tree
structures like the file system. Traversing the file system
involves recursion, and the pattern is slightly different
there. We'll get to it, but what made this clear to me was a
&amp;quot;simpler&amp;quot; walk through a two-layer hierarchy.&lt;/p&gt;
&lt;p&gt;The nested for-statements aren't really ideal. We can't apply
any itertools techniques here. We can't trivially change this
to a multiprocessing.map().&lt;/p&gt;
&lt;p&gt;In fact, the more we look at this, the worse it is.
Here's something that's a little easier to work with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def h_l_iter(arg1, arg2):
    for h in some_high_level_collection(arg1):
        for l in h.some_low_level_collection(arg2):
            if some_filter(l):
                logger.info(&amp;quot;Processing %s %s&amp;quot;, h, l)
                yield h, l
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
itertools.starmap(some_function, h_l_iter(arg1, arg2))
&lt;/pre&gt;
&lt;p&gt;The data gathering has expanded to a few more lines of code. It
gained a lot of flexibility. Once we have something that can be used
with starmap, it can also be used with other itertools functions to
do additional processing steps without breaking the loops into
horrible pieces.&lt;/p&gt;
&lt;p&gt;I think the pattern here is a kind of &amp;quot;Flattened Map&amp;quot; transformation.
The initial design, with nested loops wrapping a process wasn't a
good plan. A better plan is to think of the nested loops as a way to
flatten the two tiers of the hierarchy into a single iterator. Then a
mapping can be applied to process each item from that flat iterator.&lt;/p&gt;
&lt;div class="section" id="extracting-the-filter"&gt;
&lt;h2&gt;Extracting the Filter&lt;/h2&gt;
&lt;p&gt;We can now tease apart the nested loops to expose the filter. In the
version above, the body of the h_l_iter() function binds log-writing
with the yield. If we take those two apart, we gain the flexibility
of being able to change the filter (or the logging) without an
awfully complex rewrite.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
T = TypeVar('T')
def logging_iter(source: Iterable[T]) -&amp;gt; Iterator[T]:
    for item in source:
        logger.info(&amp;quot;Processing %s&amp;quot;, item)
        yield item

def h_l_iter(arg1, arg2):
    for h in some_high_level_collection(arg1):
        for l in h.some_low_level_collection(arg2):
            yield h, l

raw_data = h_l_iter(arg1, arg2)
filtered_subset = logging_iter(filter(some_filter, raw_data))
itertools.starmap(some_function, filtered_subset)
&lt;/pre&gt;
&lt;p&gt;Yes, this is still longer, but all of the details are now exposed
in a way that lets me change filters without further breakage.
Now, I can introduce various forms of multiprocessing to improve
concurrency.&lt;/p&gt;
&lt;p&gt;This transformed a hard-wired set of nest loops, if, and function
evaluation into a &amp;quot;Flattener&amp;quot; that can be combined with off-the
shelf filtering and mapping functions.&lt;/p&gt;
&lt;p&gt;I've snuck in a kind of &amp;quot;tee&amp;quot; operation that writes an iterable
sequence to a log. This can be injected at any point in the
processing.&lt;/p&gt;
&lt;p&gt;Logging the entire &amp;quot;item&amp;quot; value isn't really a great idea. Another
mapping is required to create sensible log messages from each
item. I've left that out to keep this exposition more focused.&lt;/p&gt;
&lt;p&gt;I'm sure others have seen this pattern, but it was eye-opening to
me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="full-flattening"&gt;
&lt;h2&gt;Full Flattening&lt;/h2&gt;
&lt;p&gt;The h_l_iter() function is actually a generator expression. A
function isn't needed.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
h_l_iter = (
    (h, l)
    for h in some_high_level_collection(arg1)
        for l in h.some_low_level_collection(arg2)
)
&lt;/pre&gt;
&lt;p&gt;This simplification doesn't add much value, but it seems to be
general truth. In Python, it's a small change in syntax and
therefore, an easy optimization to make.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-the-file-system"&gt;
&lt;h2&gt;What About The File System?&lt;/h2&gt;
&lt;p&gt;When we're working with some a more deeply-nested structure, like
the File System, we'll make a small change. We'll replace the
h_l_iter() function with a recursive_walk() function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def recursive_walk(path: Path) -&amp;gt; Iterator[Path]:
    for item in path.glob():
        if item.is_file():
            yield item
        elif item.is_dir():
            yield from recursive_walk(item)
&lt;/pre&gt;
&lt;p&gt;This function has, effectively the same signature as h_l_iter().
It walks a complex structure yielding a flat sequence of items.
The other functions used for filtering, logging, and processing
don't change, allowing us to build new features from various
combinations of these functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;The too-long version of this is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Replace&lt;/strong&gt; &lt;tt class="docutils literal"&gt;for item in iter: process(item)&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;with&lt;/strong&gt; &lt;tt class="docutils literal"&gt;map(process, iter)&lt;/tt&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This pattern works for simple, flat items, nested structures, and
even recursively-defined trees. It introduces flexibility with no
real cost.&lt;/p&gt;
&lt;p&gt;The other pattern in play is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Any&lt;/strong&gt; &lt;tt class="docutils literal"&gt;for item in iter: for &lt;span class="pre"&gt;sub-item&lt;/span&gt; in item:&lt;/tt&gt;
&lt;strong&gt;processing is &amp;quot;flattening&amp;quot; a hierarchy into a sequence.&lt;/strong&gt;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Replace it with&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(sub-item&lt;/span&gt; for item in iter for &lt;span class="pre"&gt;sub-item&lt;/span&gt; in item)&lt;/tt&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;p&gt;These felt like blinding revelations to me.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="having-just-been-exposed-to-fp-and-wanting-to-impl"&gt;
&lt;h2&gt;Having just been exposed to FP and wanting to impl...&lt;/h2&gt;
&lt;p&gt;Fanchen Bao&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-12-06 17:53:21.676000-05:00&lt;/p&gt;
&lt;p&gt;Having just been exposed to FP and wanting to implement FP in Python,
this post definitely resonates with me. Will definitely check out your
Functional Python Programming book. Thanks.&lt;/p&gt;
&lt;p&gt;Nice breakdown :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-small-typo-under-extractin"&gt;
&lt;h2&gt;One small typo under Extractin...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-12-11 12:50:58.834000-05:00&lt;/p&gt;
&lt;p&gt;Nice breakdown :-)
One small typo under Extracting the Filter:
`Iteratble[T]` should be `Iterable[T]`&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="great-examples-thanks-a-lot"&gt;
&lt;h2&gt;Great examples, thanks a lot&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-12-11 12:52:39.138000-05:00&lt;/p&gt;
&lt;p&gt;Great examples, thanks a lot&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>Creating Palindromes -- if possible -- from a string of letters.</title><link href="https://slott56.github.io/2019_12_04-creating_palindromes_if_possible_from_a_string_of_letters.html" rel="alternate"></link><published>2019-12-04T19:07:00-05:00</published><updated>2019-12-04T19:07:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-12-04:/2019_12_04-creating_palindromes_if_possible_from_a_string_of_letters.html</id><summary type="html">&lt;p&gt;This can be an interesting exercise. I think it is something that can
help people learn to code well. I found this in the LinkedIn Python
community:  &lt;a class="reference external" href="https://www.linkedin.com/groups/25827/"&gt;https://www.linkedin.com/groups/25827/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Palindrome Problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make a function that makes a palindrome out of the letters in a
string …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This can be an interesting exercise. I think it is something that can
help people learn to code well. I found this in the LinkedIn Python
community:  &lt;a class="reference external" href="https://www.linkedin.com/groups/25827/"&gt;https://www.linkedin.com/groups/25827/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Palindrome Problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make a function that makes a palindrome out of the letters in a
string and
returns -1 if this is not possible.
Convert a list of strings with the function.&lt;/p&gt;
&lt;p&gt;Some test cases:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; palify('eedd')
'edde' (or 'deed')
&amp;gt;&amp;gt;&amp;gt; palify('wgerar')
&amp;gt;&amp;gt;&amp;gt; palify('uiuiqii')
'uiiqiiu' or several similar variants.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's not get too carried away. I like *some* of this problem.&lt;/p&gt;
&lt;p&gt;I don't like the idea of Union[str, int] as a return type from this
function. Yes, it's valid Python, but it seems like a code smell.
Since the intent is to build lists, a None would be more sensible than
a number; we'd have Optional[str] which seems better overall.&lt;/p&gt;
&lt;p&gt;The solution that was posted was interesting. It did way too much
work, but it was acceptable-looking Python. (It started with a big
block comment with &amp;quot;#&amp;quot; on each line instead of a docstring, so...
there were minor style problems, but otherwise, it was not bad.)&lt;/p&gt;
&lt;p&gt;Here's what popped into my head, to act as a concrete response to the
request for comments.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;
Make a function that makes a palindrome out of the letters in a string and
returns -1 if this is not possible.
Convert a list of strings with the function.
Some test cases:

&amp;gt;&amp;gt;&amp;gt; palify('eedd')
'edde'
&amp;gt;&amp;gt;&amp;gt; palify('wgerar')
&amp;gt;&amp;gt;&amp;gt; palify('uiuiqii')
'uiiqiiu'
&amp;quot;&amp;quot;&amp;quot;
from typing import Optional, Set


def palify(source: str) -&amp;gt; Optional[str]:
    &amp;quot;&amp;quot;&amp;quot;Core palindromic conversion.&amp;quot;&amp;quot;&amp;quot;
    singletons: Set[str] = set()
    pairs = list()
    for c in source:
        if c in singletons:
            pairs.append(c)
            singletons.remove(c)
        else:
            singletons.add(c)

    if pairs and len(singletons) &amp;lt;= 1:
        # presuming a single letter can't be palindromic.
        return ''.join(pairs+list(singletons)+pairs[::-1])
    return None

if __name__ == &amp;quot;__main__&amp;quot;:
    s =  ['eedd', 'wgerar', 'uiuiqii']
    p = list(map(palify, s))
    print(f&amp;quot;from {s=}, we get {p=}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;The core problem statement is interesting. And the ancillary
requirement is almost as interesting as the problem.&lt;/p&gt;
&lt;p&gt;The simple-seeming &amp;quot;Make a palindrome out of the letters of the
string&amp;quot; has two parts. First, there's the question of &amp;quot;can it even
become a palindrome&amp;quot;? Which implies validating the source data against
some set of rules. After that, we have to emit one of the many
possible palindromes from the source material.&lt;/p&gt;
&lt;p&gt;The original post had a complicated survey of the data. This was
followed by an elegant way of creating a palindrome from the survey
data. Since we're looking for a bunch of pairs and a singleton, I
elided the more complex survey and opted to collect pairs and
singletons into two separate collections.&lt;/p&gt;
&lt;p&gt;When we've consumed the input, we will have partitioned the characters
into their two pools and we can decide if the pools have the right
sizes to proceed. The emission of the palindrome is a lazy assembly of
the resulting data, first as a list, and then transformed to a single
string.&lt;/p&gt;
&lt;p&gt;The ancillary requirement is interesting in its own right. When a
bundle of letters can't form a palindrome, that seems like a
ValueError exception to me. Doing bulk transformations in the presence
of ValueErrors seems wrong-ish. I already griefed about the -1
response above: it seems very bad. A None is less bad than -1. An
Exception, however, seems like a more right thing to do.&lt;/p&gt;
&lt;div class="section" id="code-review-response"&gt;
&lt;h2&gt;Code Review Response&lt;/h2&gt;
&lt;p&gt;I think my response to the original code should be follow-up questions
on why a defaultdict(int) was used to survey the data in the first
place. A Counter() is a better idea, and requires less code.&lt;/p&gt;
&lt;p&gt;The survey involved trying to locate singletons -- a laudable goal.
There may have been a better approach to looking for the presence of a
singleton letter in the Counter values.&lt;/p&gt;
&lt;p&gt;More fundamentally, there are few states for each letter. There are
two stark algorithmic choices: a structure keyed by letter or
collections of letters. I've shown the collections, and hinted at the
collection. The student response used a collection.&lt;/p&gt;
&lt;p&gt;I think this problem serves as a good discussion for algorithmic
alternatives. The core problem of detecting the possibility of
palindromicity for a bunch of letters is cool. There are two choices.
The handling of the exceptional case (-1, None or ValueError) is
another bundle of choices.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Refactoring</title><link href="https://slott56.github.io/2019_11_26-refactoring.html" rel="alternate"></link><published>2019-11-26T08:00:00-05:00</published><updated>2019-11-26T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-11-26:/2019_11_26-refactoring.html</id><content type="html">&lt;p&gt;Follow my Patreon: &lt;a class="reference external" href="https://www.patreon.com/bePatron?u=26087626"&gt;Become a
Patron!&lt;/a&gt;
I'll try to focus on my Building Skills in OO Design book there. I'm
thinking of adding some more code examples. Is that a good idea?
Maybe that should be the higher-level Patreon benefit?&lt;/p&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="patreon"></category></entry><entry><title>Python 3.8 features</title><link href="https://slott56.github.io/2019_11_19-python_38_features.html" rel="alternate"></link><published>2019-11-19T08:00:00-05:00</published><updated>2019-11-19T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-11-19:/2019_11_19-python_38_features.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avatar" src="https://pbs.twimg.com/profile_images/952818577719091200/rBCQPkA9_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Real Python(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/realpython?s=11"&gt;&amp;#64;realpython&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/realpython/status/1191720517910376449?s=11"&gt;11/5/19, 6:14AM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📺🐍 Cool New Features in Python 3.8 &lt;a class="reference external" href="https://t.co/1sv8l2Vgyr"&gt;realpython.com/courses/cool-n…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://realpython.com/courses/cool-new-features-python-38/"&gt;Cool New Features in Python
3.8&lt;/a&gt; lists
some of the things that could become part of The Modern Python
Cookbook 2e. I'm working with Packt on a plan …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avatar" src="https://pbs.twimg.com/profile_images/952818577719091200/rBCQPkA9_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Real Python(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/realpython?s=11"&gt;&amp;#64;realpython&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/realpython/status/1191720517910376449?s=11"&gt;11/5/19, 6:14AM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📺🐍 Cool New Features in Python 3.8 &lt;a class="reference external" href="https://t.co/1sv8l2Vgyr"&gt;realpython.com/courses/cool-n…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://realpython.com/courses/cool-new-features-python-38/"&gt;Cool New Features in Python
3.8&lt;/a&gt; lists
some of the things that could become part of The Modern Python
Cookbook 2e. I'm working with Packt on a plan for creating a new
edition focused on Python 3.8 features, and using &lt;strong&gt;mypy&lt;/strong&gt; to
validate the type hints.&lt;/p&gt;
&lt;p&gt;I'm learning a lot about my previously sketchy designs and potential
problems with some of them. There are a number of things in Python
which &amp;quot;work&amp;quot; in a vague hand-wavey way. But they don't work in a &amp;quot;I
can convince mypy this will work&amp;quot; way.&lt;/p&gt;
&lt;p&gt;The additional &amp;quot;convince mypy&amp;quot; rigor can separate potentially sketchy
design from an unassailable design.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Python 2 Remediation</title><link href="https://slott56.github.io/2019_11_12-python_2_remediation.html" rel="alternate"></link><published>2019-11-12T08:00:00-05:00</published><updated>2019-11-12T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-11-12:/2019_11_12-python_2_remediation.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://medium.com/capital-one-tech/python-2-remediation-and-problems-at-sea-a58e805d6468"&gt;https://medium.com/capital-one-tech/python-2-remediation-and-problems-at-sea-a58e805d6468&lt;/a&gt;
We're about out of time for this effort.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Building Skills in OO Design</title><link href="https://slott56.github.io/2019_11_03-building_skills_in_oo_design.html" rel="alternate"></link><published>2019-11-03T17:06:00-05:00</published><updated>2019-11-03T17:06:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-11-03:/2019_11_03-building_skills_in_oo_design.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.patreon.com/posts/30995708"&gt;https://www.patreon.com/posts/30995708&lt;/a&gt;
I've (finally) gotten the book content upgraded to Python 3.7.
I've also deleted all the previous versions of the book. I had been
keeping them on my web server because -- well -- because I don't know
why. They go back to at least …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.patreon.com/posts/30995708"&gt;https://www.patreon.com/posts/30995708&lt;/a&gt;
I've (finally) gotten the book content upgraded to Python 3.7.
I've also deleted all the previous versions of the book. I had been
keeping them on my web server because -- well -- because I don't know
why. They go back to at least 2011, some of the content may be even
older than that.
I've also deleted some previous self-published content.
(I started writing about Python almost 20 years ago. Some of the content
could have been that old. It deserves to be deleted.)&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="long-path-tool-can-solve-your-problem-easily-it-c"&gt;
&lt;h2&gt;Long path tool can solve your problem easily. It c...&lt;/h2&gt;
&lt;p&gt;Liam Carter&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-11-17 14:34:12.887000-05:00&lt;/p&gt;
&lt;p&gt;Long path tool can solve your problem easily. It can delete, copy, move
and bulk rename long path files or locked file easily. Try it, It is
very useful, amazing toole.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category><category term="OO design"></category></entry><entry><title>State Change and NoSQL Databases</title><link href="https://slott56.github.io/2019_10_22-state_change_and_nosql_databases.html" rel="alternate"></link><published>2019-10-22T08:00:00-04:00</published><updated>2019-10-22T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-10-22:/2019_10_22-state_change_and_nosql_databases.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Let's take another look at F. L. Stevens spreadsheet with agencies and
agents. It's -- of course -- an unholy mess. Why? It's difficult to
handle state change and deduplication.&lt;/div&gt;
&lt;div class="line"&gt;Let's look at state changes.&lt;/div&gt;
&lt;div class="line"&gt;The author needs URL's and names and a list of genres the agent is
interested in. This …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Let's take another look at F. L. Stevens spreadsheet with agencies and
agents. It's -- of course -- an unholy mess. Why? It's difficult to
handle state change and deduplication.&lt;/div&gt;
&lt;div class="line"&gt;Let's look at state changes.&lt;/div&gt;
&lt;div class="line"&gt;The author needs URL's and names and a list of genres the agent is
interested in. This is more-or-less static data. It changes rarely.
What changes more often is an agent being closed or open to queries.&lt;/div&gt;
&lt;div class="line"&gt;Another state change is the query itself. Once the email has been
sent, the agent (and their agency) should not be bothered again for at
least sixty days. After an explicit rejection, there's little point in
making any contact with the agent; they're effectively out of the
market for a given manuscript.&lt;/div&gt;
&lt;div class="line"&gt;There are some other stateful rules, we don't need all the details to
see the potential complexities here.&lt;/div&gt;
&lt;div class="line"&gt;A spreadsheet presents a particularly odious non-solution to the
problem of state and state change. There's a good and a bad. Mostly
bad.&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On the good side, you can edit a single cell, changing the state. You
can define a drop-down list of states, or radio buttons with
alternative states.&lt;/li&gt;
&lt;li&gt;The be bad side, you're often limited to editing a single cell when
you want to change the state. You want to have dates filled in
automatically on state change. You want history of state changes.
Excel hackers try to write macros to automate filling in the date.
History, however... History is a problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;We can try to spread history across the row. This rapidly becomes
horrifying -- the rows are uneven in length, breaking a First Normal
Form rule for spreadsheets.&lt;/div&gt;
&lt;div class="line"&gt;We can try to spread history down the rows of a column. Wow this is
bad. We can try to use the hierarchy features to make history a bunch
of folded-up details underneath a heading row. This is microscopically
better, but still difficult to manage with all the unfolding and
folding required to change state after a rejection.&lt;/div&gt;
&lt;div class="line"&gt;We can blow up a single cell to have non-atomic data -- all of the
history with events and dates in a long, &amp;quot;;&amp;quot; delimited list.&lt;/div&gt;
&lt;div class="line"&gt;There's no good way to represent this in a spreadsheet.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to do?&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The relational database people love the master-detail relationship.
Agency has Agent. Agent has History. The history is a bunch of rows in
the history table, with a foreign key relationship with the agent.&lt;/div&gt;
&lt;div class="line"&gt;The rigidity of the SQL schema is a barrier here. We're dealing with
some sloppy data handling practices in the legacy spreadsheet. We
don't want to have to tweak the SQL each time we find some new
subtlety that's poorly represented in the spreadsheet data.&lt;/div&gt;
&lt;div class="line"&gt;We're also handling a number of data sources, each with a unique
schema. We need a way to unify these flexibly, so we can fold in
additional data sources, once the broken spreadsheet is behind us.&lt;/div&gt;
&lt;div class="line"&gt;(There are a yet more problems with the relational model in general,
those are material for a separate blog post. For now, the rigidity and
complexity are a big enough pair of problems.)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sql-is-out-what-else"&gt;
&lt;h2&gt;SQL is Out. What Else?&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;A document store is pretty nice for this.  The rest of this section is
an indictment of SQL. Feel free to skip it. It's widely known, and
well supported elsewhere.&lt;/div&gt;
&lt;div class="line"&gt;We have an Agency as the primary document., Within an Agency, there
are a number of individual Agents. Within each agent is a series of
Events. Some Agents aren't even interested in the genre F. L. Stevens
writes, so they're closed. Some Agents are temporarily closed. The
rest are open.&lt;/div&gt;
&lt;div class="line"&gt;The author can get a list of open agents, following a number of rules,
including waiting after the last contact, and avoiding working with
multiple agents within a single agency. After sending query letters,
the event history gets an entry, and those agents are in another
state, query pending.&lt;/div&gt;
&lt;div class="line"&gt;One common complaint I hear about a document store is the &amp;quot;cost&amp;quot; of
updating a large-ish document. The implicit assumption seems to be
that an update operation can't locate the relevant sub-document, and
can't make incremental changes. Having worked with both SQL and NoSQL,
this &amp;quot;cost of document update&amp;quot; seems to be unmeasurably small.&lt;/div&gt;
&lt;div class="line"&gt;Another cluster command question hovers around locking and
concurrency. Most of them nonsensical because they come from the world
of fragmented data in a SQL database. When the relevant object (i.e.
Agency) is spread over a lot of rows of several tables, locking is
essential. When the relevant object is a single document, locks aren't
as important. If two people are updating the same document at the same
time, that's a document design issue, or a control issue in the
application.&lt;/div&gt;
&lt;div class="line"&gt;Finally, there are questions about &amp;quot;update anomalies.&amp;quot; This is a
sensible question. In the relational world, we often have shared
&amp;quot;lookup&amp;quot; data. A single change to a lookup row will have a ripple
effect to all rows using the lookup row's foreign key.&lt;/div&gt;
&lt;div class="line"&gt;Think of changing zip code 12345 from Schenectady, NY to Scotia, NY.
Everyone sharing the foreign key reference via the zip code has been
moved with a single update. Except, of course, nothing is visible
until a query reconstructs the desired document from the fragmented
pieces.&lt;/div&gt;
&lt;div class="line"&gt;We've traded a rare sweeping updated across many documents for a
sweeping, complex join operating to build the relevant document from
the normalized pieces. Queries are expensive, complex, and often
wrong. They're so painful, we use ORM's to mask the queries and give
us the documents we wanted all along.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-it-look-like"&gt;
&lt;h2&gt;What's It Look Like?&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;dataclass
class Agency:
    &amp;quot;&amp;quot;&amp;quot;A collection of individual agents.&amp;quot;&amp;quot;&amp;quot;
    name : str
    url : Optional[str] = field(default=None)
    agents : Dict[str, 'Agent'] = field(init=False, default_factory=dict)

&amp;#64;dataclass
class Agent:
    &amp;quot;&amp;quot;&amp;quot;An Agent with a sequence of events: actions and state changes.&amp;quot;&amp;quot;&amp;quot;
    name : str
    url : str
    email : str
    fiction_genres : List[str]
    query_details : str = field(default_factory=str)
    events : List['Event'] = field(init=False, default_factory=list)

&amp;#64;dataclass
class Event:
    &amp;quot;&amp;quot;&amp;quot;An action or state change.
    status = 'open', 'closed', 'query sent', 'query outcome', 'closed until', etc.

    Depending on the status, there may be additional details.
    For 'query sent', there's 'date'.
    For 'query outcome', there's 'outcome' and an optional 'date'.
    for 'closed until', there's 'reason' and an optional 'date'.
    &amp;quot;&amp;quot;&amp;quot;
    status : str
    date : Optional[datetime.date] = field(default=None)
    outcome : Optional[str] = field(default=None)
    reason : Optional[str] = field(default=None)

    def __repr__(self):
        return f&amp;quot;{self.status} {self.date} {self.outcome} {self.reason}&amp;quot;
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;We have three classes here. Agency is the parent document. Each Agency
contains one or more Agent instances. Each Agent contains one or more
Events.&lt;/div&gt;
&lt;div class="line"&gt;When we fetch an agent's data, we fetch the entire agency, since the
&amp;quot;business&amp;quot; rules preclude querying more than one agent in an agency.
The queries involve a nuanced state change: a rejection by one agent,
opens another in the same agency.  Rather than do some additional SQL
queries to locate the parent and other children of the parent, just
read the whole thing at once.&lt;/div&gt;
&lt;div class="line"&gt;In later posts, we'll look at deduplication and some other processing.
But this seems to be all the schema we'll ever need.  The type hints
provided &lt;strong&gt;mypy&lt;/strong&gt; some evidence of what we intend to do with these
documents.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="noSQL"></category></entry><entry><title>Apple's Numbers and the All-in-One CSV export</title><link href="https://slott56.github.io/2019_10_15-apples_numbers_and_the_all_in_one_csv_export.html" rel="alternate"></link><published>2019-10-15T08:00:00-04:00</published><updated>2019-10-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-10-15:/2019_10_15-apples_numbers_and_the_all_in_one_csv_export.html</id><summary type="html">&lt;p&gt;Author F. L. Stevens has a hellishly complex (and irregular)
spreadsheet with agents, agencies, and query status. (This is how
fiction gets marketed: querying agents.) The spreadsheet has become
unmanageably complex, with multiple pages. Each page has multiple
tables. Buried in this are three &amp;quot;interesting&amp;quot; tables with agent query
information …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Author F. L. Stevens has a hellishly complex (and irregular)
spreadsheet with agents, agencies, and query status. (This is how
fiction gets marketed: querying agents.) The spreadsheet has become
unmanageably complex, with multiple pages. Each page has multiple
tables. Buried in this are three &amp;quot;interesting&amp;quot; tables with agent query
information.&lt;/p&gt;
&lt;p&gt;Can we talk about drama? There is the dark night of the soul for
anyone interested in regular, normalized data.&lt;/p&gt;
&lt;p&gt;We have some fundamental choices for working with this mess:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Export each relevant table to separate files. Lots of manual
pointy-clicky and opportunities for making mistakes.&lt;/li&gt;
&lt;li&gt;Export the whole thing to separate files. Less pointy-clicky.&lt;/li&gt;
&lt;li&gt;Export the whole thing to one file. About the same pointy-clicky and
error vulnerability as #2. But. Simpler still because there's one
file to take care of. Something a fiction author should be able to
handle.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The all-in-one CSV export is (initially) exasperating. Each table is
wrapped in a prefix and suffix.&lt;/p&gt;
&lt;p&gt;The prefix is a line with &amp;quot;Sheet: Table&amp;quot; Yes. There's a &amp;quot;: &amp;quot; (colon
space) separator. The suffix is a simple blank line, essentially
indistinguishable from a blank line within a table.&lt;/p&gt;
&lt;p&gt;If the table was originally in strict first normal form (1NF) each row
would have the same number of commas. If cells are merged, however,
the number of commas can be fewer. This makes it potentially difficult
to distinguish blank rows in a table from blank lines between tables.&lt;/p&gt;
&lt;p&gt;It's generally easiest to ignore the blank lines entirely. We can
distinguish table headers because they're a single cell with a sheet:
table format. We are left hoping there aren't any tables that have
values that have this format.&lt;/p&gt;
&lt;p&gt;We have two ways to walk through the values:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Preserving the Sheet, Table, Row hierarchy. We can think of this as
the &lt;em&gt;for s in sheet: for t in table: for r in rows&lt;/em&gt; structure. The
sheet iterator is Iterator[Tuple[str, Table_Iterator]].
The Table_Iterator is similar: Iterator[Tuple[str, Row_Iterator]].
The Row_Iterator, is the most granular Iterator[Dict[str, Any]].&lt;/li&gt;
&lt;li&gt;Flattening this into a sequence of &amp;quot;(Sheet name, Table Name, Row)&amp;quot;
triples. Since a sheet and table have no other attributes beyond a
name, this seems advantageous to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The hierarchical form requires a number of generator functions for
Sheet-from-CSV, Table-from-CSV, and Row-from-CSV. Each of these works
with a single underlying iterator over the source file and a fairly
complex hand-off of state. If we only use the sheet iterator, the
tables and rows are skipped. If we use the table within a sheet, the
first table name comes from the header that started a sheet; the
table names come from distinct headers until the sheet name changes.&lt;/p&gt;
&lt;p&gt;The table-within-sheet iteration is very tricky. The first table is a
simple yield of information gathered by the sheet iterator. Any
subsequent tables, however, may be based one one of two conditions:
either no rows have been consumed, in which case the table iterator
consumes (and ignores) rows; or, all the rows of the table have been
consumed and the current row is another &amp;quot;sheet: table&amp;quot; header.&lt;/p&gt;
&lt;p&gt;The code sample below involves a fair amount of repetition. It's not
appealing to refactor this because it's ungainly in its complexity,
and doesn't create any tangible value. (I haven't even tried to get
the type hints right.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class SheetTable:
    def __init__(self, source_path: Path) -&amp;gt; None:
        self.path: Path = source_path
        self.csv_source = None
        self.rdr = None
        self.header = None
        self.row = None

    def __enter__(self) -&amp;gt; None:
        self.csv_source = self.path.open()
        self.rdr = csv.reader(self.csv_source)
        self.header = None
        self.row = next(self.rdr)
        return self

    def __exit__(self, *args) -&amp;gt; None:
        self.csv_source.close()

    def _sheet_header(self) -&amp;gt; bool:
        return len(self.row) == 1 and ': ' in self.row[0]

    def sheet_iter(self):
        while True:
            while not (self._sheet_header()):
                try:
                    self.row = next(self.rdr)
                except StopIteration:
                    return
            self.sheet, _, self.table = self.row[0].partition(&amp;quot;: &amp;quot;)
            self.header = next(self.rdr)
            self.row = next(self.rdr)
            yield self.sheet, self.table_iter()

    def table_iter(self):
        yield self.table, self.row_iter()
        while not (self._sheet_header()):
            try:
                self.row = next(self.rdr)
            except StopIteration:
                return
        next_sheet, _, next_table = self.row[0].partition(&amp;quot;: &amp;quot;)
        while next_sheet == self.sheet:
            self.table = next_table
            self.header = next(self.rdr)
            self.row = next(self.rdr)
            yield self.table, self.row_iter()
            while not (self._sheet_header()):
                try:
                    self.row = next(self.rdr)
                except StopIteration:
                    return
            next_sheet, _, next_table = self.row[0].partition(&amp;quot;: &amp;quot;)

    def row_iter(self):
        while not self._sheet_header():
            yield dict(zip(self.header, self.row))
            try:
                self.row = next(self.rdr)
            except StopIteration:
                return
&lt;/pre&gt;
&lt;p&gt;Clearly, this is craziness.&lt;/p&gt;
&lt;p&gt;Flattening is much nicer.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def sheet_table_iter(source_path: Path) -&amp;gt; Iterator[Tuple[str, str, Dict[str, Any]]]:
    with source_path.open() as csv_source:
        rdr = csv.reader(csv_source)
        header = None
        for row in rdr:
            if len(row) == 0:
                continue
            elif len(row) == 1 and &amp;quot;: &amp;quot; in row[0]:
                sheet, table = row[0].split(&amp;quot;: &amp;quot;, maxsplit=1)
                header = next(rdr)
                continue
            else:
                # Inject headers to create dict from row
                yield sheet, table, dict(zip(header, row))
&lt;/pre&gt;
&lt;p&gt;This provides a relatively simple way to find the relevant tables and
sheets. We can use something as simple as the following to locate the
relevant data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for sheet, table, row in sheet_table_iter(source_path):
    if sheet == 'AgentQuery' and table == 'agent_query':
        agent = agent_query_row(database, row)
    elif sheet == 'AAR-2019-03' and table == 'Table 1':
        agent = aar_2019_row(database, row)
&lt;/pre&gt;
&lt;p&gt;This lets us write pleasant functions that handle exactly one row from
the source table. We'll have one of these for each target table. In
the above example, we've only shown two, you get the idea. Each new
source table, with its unique headers can be accommodated.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="spreadsheet"></category></entry><entry><title>Spreadsheet Regrets</title><link href="https://slott56.github.io/2019_10_08-spreadsheet_regrets.html" rel="alternate"></link><published>2019-10-08T08:00:00-04:00</published><updated>2019-10-08T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-10-08:/2019_10_08-spreadsheet_regrets.html</id><summary type="html">&lt;p&gt;I can't emphasize this enough.&lt;/p&gt;
&lt;p&gt;Some people, when confronted with a problem, think&lt;/p&gt;
&lt;p&gt;“I know, I'll use a spreadsheet.”   Now they have two problems.&lt;/p&gt;
&lt;p&gt;(This was originally about regular expressions. And AWK.
See &lt;a class="reference external" href="http://regex.info/blog/2006-09-15/247"&gt;http://regex.info/blog/2006-09-15/247&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Fiction writer F. L. Stevens got a list of literary agents …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I can't emphasize this enough.&lt;/p&gt;
&lt;p&gt;Some people, when confronted with a problem, think&lt;/p&gt;
&lt;p&gt;“I know, I'll use a spreadsheet.”   Now they have two problems.&lt;/p&gt;
&lt;p&gt;(This was originally about regular expressions. And AWK.
See &lt;a class="reference external" href="http://regex.info/blog/2006-09-15/247"&gt;http://regex.info/blog/2006-09-15/247&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Fiction writer F. L. Stevens got a list of literary agents from AAR
Online. This became a spreadsheet driving queries for representation.
After a bunch of rejections, another query against AAR Online provided
a second list of agents.&lt;/p&gt;
&lt;p&gt;Apple's Numbers product will readily translate the AAR Online HTML
table into a usable spreadsheet table. But after initial success the
spreadsheet as tool of choice collapses into a pile of rubble. The
spreadsheet data model is hopelessly ineffective for the problem
domain.&lt;/p&gt;
&lt;p&gt;What is the problem domain?&lt;/p&gt;
&lt;p&gt;There are two user stories:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Author needs to deduplicate agents and agencies. It's considered poor
form to badger agents with repeated queries for the same title. It's
also bad form to query two agents at the same agency. You have to get
rejected by one before contacting the other.&lt;/li&gt;
&lt;li&gt;Author needs to track activities at the Agent and Agency level to
optimize querying. This mostly involves sending queries and tracking
rejections. Ideally, an agent acceptance should lead to notification
to other agents that the manuscript is being withdrawn. This is so
rare as to not require much automation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Agents come and go. Periodically, an agent will be closed to queries
for some period of time, and then reopen. Their interests vary with
the whims of the marketplace they're trying to serve. Traditional
fiction publishing is quite complex; agents are the gatekeepers.&lt;/p&gt;
&lt;p&gt;To an extent, we can decompose the processing like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sourcing. There are several sources: AAR Online and Agent Query
are two big sources. These sites have usable query engines and the
HTML can be scraped to get a list of currently active agents with a
uniform representation. This is elegant Python and Beautiful Soup.&lt;/li&gt;
&lt;li&gt;Deduplication. Agency and Agent deduplication is central. Query
results may involve state changes to an agent (open to queries,
interested in new genres.) Query results may involve simple
duplicates, which have to be discarded to avoid repeated queries.
It's a huge pain when attempted with a spreadsheet. The simplistic
string equality test for name matching is defeated by whitespace
variations, for example. This is elegant Python, however.&lt;/li&gt;
&lt;li&gt;Agent web site checks. These have to be done manually. Agency web
pages are often art projects, larded up with javascript that produces
elegant rolling animations of books, authors, agents, background art,
and text. These sites aren't really set up to help authors. It's
impossible to automate a check to confirm the source query results.
This has to be done manually: F. L. is required to click and update
status.&lt;/li&gt;
&lt;li&gt;State Changes. Queries and Rejections are the important state
changes. Open and Closed to queries is also part of the state that
needs to be tracked. Additionally, there's a multiple agent per
agency check that makes this more complex. The state changes are
painful to track in a simple spreadsheet-like data structure: a
rejection by one agent can free up another agent at the same agency.
This multi-row state change is simply horrible to deal with.
Bonus confusion! Time-to-Live rules: a query over 60 days old is
more-or-less a &lt;em&gt;de facto&lt;/em&gt; rejection. This means that periodic scans
of the data are required to close a query to one agent in an agency,
freeing up subsequent agents in the same agency.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Manuscript Wish Lists (MSWLs) are a source for agents actively
searching for manuscripts. This is more-or-less a Twitter query.
Using the various aggregating web sites seems slightly easier than
using Twitter directly. However, additional Twitter lookups are
required to locate agent details, so this is interesting
web-scraping.&lt;/p&gt;
&lt;p&gt;Of course F. L. Stevens has a legacy spreadsheet with at least four
&amp;quot;similar&amp;quot; (but not really identical) tabs filled with agencies,
agents, and query status.&lt;/p&gt;
&lt;p&gt;I don't have an implementation to share -- yet. I'm working on it
slowly.&lt;/p&gt;
&lt;p&gt;I think it will be an interesting tutorial in cleaning up
semi-structured data.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="data conversion"></category><category term="beautiful soup"></category><category term="spreadsheet"></category></entry><entry><title>Packt Data Unlocked Promotion</title><link href="https://slott56.github.io/2019_09_10-packt_data_unlocked_promotion.html" rel="alternate"></link><published>2019-09-10T08:00:00-04:00</published><updated>2019-09-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-09-10:/2019_09_10-packt_data_unlocked_promotion.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://bit.ly/DataUnlockedTwitter"&gt;http://bit.ly/DataUnlockedTwitter&lt;/a&gt;
You can't go wrong with these kinds of discounts.
#DataUnlocked&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="your-blog-was-excellent-your-blog-is-very-much-to"&gt;
&lt;h2&gt;Your blog was excellent. Your blog is very much to...&lt;/h2&gt;
&lt;p&gt;Navinika&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-11-22 12:20:27.350000-05:00&lt;/p&gt;
&lt;p&gt;Your blog was excellent. Your blog is very much to useful for me, Thanks
for …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://bit.ly/DataUnlockedTwitter"&gt;http://bit.ly/DataUnlockedTwitter&lt;/a&gt;
You can't go wrong with these kinds of discounts.
#DataUnlocked&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="your-blog-was-excellent-your-blog-is-very-much-to"&gt;
&lt;h2&gt;Your blog was excellent. Your blog is very much to...&lt;/h2&gt;
&lt;p&gt;Navinika&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-11-22 12:20:27.350000-05:00&lt;/p&gt;
&lt;p&gt;Your blog was excellent. Your blog is very much to useful for me, Thanks
for shareing that information. Keep blogging
&lt;a class="reference external" href="https://www.emexotechnologies.com/courses/other-technology-trainings/python-training/"&gt;Python Training in Electronic
City&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="packtpub"></category></entry><entry><title>Finally Planning the Rewrite of Building Skills in Object-Oriented Design</title><link href="https://slott56.github.io/2019_09_03-finally_planning_the_rewrite_of_building_skills_in_object_oriented_design.html" rel="alternate"></link><published>2019-09-03T08:00:00-04:00</published><updated>2019-09-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-09-03:/2019_09_03-finally_planning_the_rewrite_of_building_skills_in_object_oriented_design.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.itmaybeahack.com/buildingskills/oodesign.html#book-oodesign"&gt;Building Skills in Object-Oriented
Design&lt;/a&gt;
for the old content, which has a number of features that hold up well
over time.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A graduated series of exercises to build up large, complete
applications is important.&lt;/li&gt;
&lt;li&gt;It covers a lot of skills essential to building real applications --
unit testing, integration, code …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.itmaybeahack.com/buildingskills/oodesign.html#book-oodesign"&gt;Building Skills in Object-Oriented
Design&lt;/a&gt;
for the old content, which has a number of features that hold up well
over time.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A graduated series of exercises to build up large, complete
applications is important.&lt;/li&gt;
&lt;li&gt;It covers a lot of skills essential to building real applications --
unit testing, integration, code reuse. I want to expand on this to
include more testing strategies, and final documentation.&lt;/li&gt;
&lt;li&gt;It's so popular, I've got enough donations to move forward on a
rewrite.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Previously, it was hosted out of my ancient web site as HTML and PDF
download. That hasn't aged well.&lt;/p&gt;
&lt;p&gt;Also, it was originally Python 2, and that ship sailed years ago.&lt;/p&gt;
&lt;p&gt;I'm leaning toward hosting the content on GitHub.&lt;/p&gt;
&lt;p&gt;One idea is to have a complex project with the following top-level
folders:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; folder that has the HTML as well as PDF (and maybe an ebook
format, too.)&lt;/li&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; folder with seed files for the various packages and modules.&lt;/li&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;tests&lt;/tt&gt; folder with seed tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Someone could fork and then build on the framework.&lt;/p&gt;
&lt;p&gt;It's possible to put the exposition into the wiki pages associated
with the repo. This has the advantage of keeping the meta-level
documentation and individual project requirements separate from the
project itself.&lt;/p&gt;
&lt;p&gt;Before I go too far, I'll need to experiment a bit to see what the
editing process is like. The Github wiki pages are their own git
branch, and are easy to edit off-line and push to the repo. Some of
the fancy Sphinx markup features vanish, replaced with basic RST.
This may not be all bad, since the baseline content is not *very*
complex.&lt;/p&gt;
&lt;p&gt;Stand by for more.&lt;/p&gt;
</content><category term="Technologies"></category><category term="building skills books"></category></entry><entry><title>Coping with Windows via AWS</title><link href="https://slott56.github.io/2019_08_13-coping_with_windows_via_aws.html" rel="alternate"></link><published>2019-08-13T08:00:00-04:00</published><updated>2019-08-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-08-13:/2019_08_13-coping_with_windows_via_aws.html</id><summary type="html">&lt;p&gt;For a training class, I needed to address The Windows Problem™. TWP is
the my summary of all the non-standard features of Windows in its
various inconsistent incarnations.&lt;/p&gt;
&lt;p&gt;Any training class that involves &amp;quot;install Python&amp;quot; inevitably involves at
least one Windows user who can't get their PATH set correctly. It's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a training class, I needed to address The Windows Problem™. TWP is
the my summary of all the non-standard features of Windows in its
various inconsistent incarnations.&lt;/p&gt;
&lt;p&gt;Any training class that involves &amp;quot;install Python&amp;quot; inevitably involves at
least one Windows user who can't get their PATH set correctly. It's an
eternal mystery to me, since the installers all seem to take care of
this, but, some people are able to click the wrong thing somewhere in a
simple installation.&lt;/p&gt;
&lt;p&gt;The uninstall and start again sometimes helps. Having a Windows expert
in the room sometimes helps.&lt;/p&gt;
&lt;p&gt;(The hapless flailing I sometimes observe is my personal problem to deal
with. I should not let myself get short-tempered with people who try
things exactly once and then stop, unable to discern a single branch in
the path they chose. It's as if the sequence of dialog boxes with
different choices never existed for them, and I need to respect the fact
that they did not read the messages and did not think of themselves as
actively making choices.)&lt;/p&gt;
&lt;p&gt;I have to say that being able to get a Windows machine in free tier of
AWS is a wonderful resource.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;I can screen capture the installation on Windows.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I can narrate the sequence of choices I made. I'm hoping this prevents
TWP from side-tracking a person who's struggling with Windows.
I haven't used the movies yet. But it's so handy to be able to spin up a
Windows machine in the cloud and run the Conda install. It's a whole lot
nicer than buying a throw-away Windows machine to do screen shots on.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="howdy-just-wanted-to-give-you-a-quick-heads-up-th"&gt;
&lt;h2&gt;Howdy just wanted to give you a quick heads up. Th...&lt;/h2&gt;
&lt;p&gt;Sienna Popies&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-20 00:52:48.461000-04:00&lt;/p&gt;
&lt;p&gt;Howdy just wanted to give you a quick heads up. The words in your post
seem to be running off the screen in Opera. I'm not sure if this is a
formatting issue or something to do with internet browser compatibility
but I figured I'd post to let you know. The design look great though!
Hope you get the problem solved soon. Kudos
&lt;a class="reference external" href="https://www.blockweb.com.au/web-design/"&gt;web maintenance services&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you-for-address-the-windows-problem-and-shar"&gt;
&lt;h2&gt;Thank you for address The Windows Problem and shar...&lt;/h2&gt;
&lt;p&gt;Millan Ta&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-22 02:43:41.340000-04:00&lt;/p&gt;
&lt;p&gt;Thank you for address The Windows Problem and share with us AWS is very
popular nowaday and many people taking a classes from it. Your
experience will help the &lt;a class="reference external" href="http://iphtechnologies.com"&gt;software &amp;amp; mobile app
developer&lt;/a&gt;.
Keep writing..!!!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="windows"></category><category term="#python"></category><category term="conda"></category></entry><entry><title>Mastering Object-Oriented Python 2nd ed</title><link href="https://slott56.github.io/2019_07_05-mastering_object_oriented_python_2nd_ed.html" rel="alternate"></link><published>2019-07-05T17:29:00-04:00</published><updated>2019-07-05T17:29:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-07-05:/2019_07_05-mastering_object_oriented_python_2nd_ed.html</id><content type="html">&lt;p&gt;The
book &lt;a class="reference external" href="https://www.packtpub.com/programming/mastering-object-oriented-python-second-edition"&gt;https://www.packtpub.com/programming/mastering-object-oriented-python-second-edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some new chapters.&lt;/p&gt;
&lt;p&gt;Type hints almost everywhere.&lt;/p&gt;
&lt;p&gt;The
examples &lt;a class="reference external" href="https://github.com/PacktPublishing/Mastering-Object-Oriented-Python-Second-Edition"&gt;https://github.com/PacktPublishing/Mastering-Object-Oriented-Python-Second-Edition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to write a review, DM me on twitter
&lt;a class="reference external" href="https://twitter.com/s_lott"&gt;&amp;#64;s_lott&lt;/a&gt; I can add you to the list
for freebies in exchange for a review.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Python Podcasts</title><link href="https://slott56.github.io/2019_07_01-python_podcasts.html" rel="alternate"></link><published>2019-07-01T18:06:00-04:00</published><updated>2019-07-01T18:06:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-07-01:/2019_07_01-python_podcasts.html</id><summary type="html">&lt;p&gt;The list: &lt;a class="reference external" href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;https://dbader.org/blog/ultimate-list-of-python-podcasts&lt;/a&gt;.
For the last 3 years, I've been doing a weekly webinar on Python -- at
work. I've done about a 100 of them, and they've had a pretty good
response.
Each one was live and I didn't try to record them. There's enough going …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The list: &lt;a class="reference external" href="https://dbader.org/blog/ultimate-list-of-python-podcasts"&gt;https://dbader.org/blog/ultimate-list-of-python-podcasts&lt;/a&gt;.
For the last 3 years, I've been doing a weekly webinar on Python -- at
work. I've done about a 100 of them, and they've had a pretty good
response.
Each one was live and I didn't try to record them. There's enough going
on without fooling around with Zoom meeting recordings and saving them
somewhere. The first few were pretty haphazard affairs.
Someone who's a regular consumer of podcasts told me mine were actually
good.
Not &amp;quot;you're a friend, so I'll say it's not horrible,&amp;quot; but &amp;quot;really good.&amp;quot;
And &amp;quot;better than most.&amp;quot; And &amp;quot;engaging, considering the boringness of
your topic.&amp;quot;
At first, I found this surprising, but I was benchmarking myself against
NPR journalists -- people who are the best in the world. Compared
against stuff readily available online, however, it appears I may be OK.
Sometime in the next few months or so, I may start trying my hand at
recording some things and posting them.
I'll have to get my tech stack together, produce a few, and then figure
out how others are distributing them. Much to learn.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="podcast"></category></entry><entry><title>HumbleBundle -- Functional Python Programming -- Through July 1</title><link href="https://slott56.github.io/2019_06_20-humblebundle_functional_python_programming_through_july_1.html" rel="alternate"></link><published>2019-06-20T13:42:00-04:00</published><updated>2019-06-20T13:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-06-20:/2019_06_20-humblebundle_functional_python_programming_through_july_1.html</id><summary type="html">&lt;p&gt;See this &lt;a class="reference external" href="https://www.humblebundle.com/"&gt;https://www.humblebundle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is amazing to me.&lt;/p&gt;
&lt;blockquote&gt;
Humble Bundle sells games, ebooks, software, and other digital
content. Our mission is to support charity while providing awesome
content to customers at great prices. We launched in 2010 with a
single two-week Humble Indie Bundle, but we have …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;See this &lt;a class="reference external" href="https://www.humblebundle.com/"&gt;https://www.humblebundle.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is amazing to me.&lt;/p&gt;
&lt;blockquote&gt;
Humble Bundle sells games, ebooks, software, and other digital
content. Our mission is to support charity while providing awesome
content to customers at great prices. We launched in 2010 with a
single two-week Humble Indie Bundle, but we have humbly grown into
a store full of games and bundles, a subscription service, a game
publisher, and more.&lt;/blockquote&gt;
&lt;p&gt;Currently, Packt is offering some of my books.&lt;/p&gt;
&lt;p&gt;Want a *ton* of technical books and donate to charity?&lt;/p&gt;
&lt;p&gt;Click Now. Thank me later.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="humblebundle"></category><category term="packtpub"></category><category term="functional python programming"></category></entry><entry><title>The Pythonista app for iPad</title><link href="https://slott56.github.io/2019_06_18-the_pythonista_app_for_ipad.html" rel="alternate"></link><published>2019-06-18T08:00:00-04:00</published><updated>2019-06-18T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-06-18:/2019_06_18-the_pythonista_app_for_ipad.html</id><summary type="html">&lt;p&gt;Let me start my review with &amp;quot;wow!&amp;quot;&lt;/p&gt;
&lt;p&gt;Python 3.6 on the iPad. Works. Nicely. Easy to use. Reliable.
Rock-Solid.&lt;/p&gt;
&lt;p&gt;I'm not switching to iPad as my primary platform any time in the near
future.  But. For certain kinds of small and tightly focused hackery,
this is really nice.&lt;/p&gt;
&lt;p&gt;I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let me start my review with &amp;quot;wow!&amp;quot;&lt;/p&gt;
&lt;p&gt;Python 3.6 on the iPad. Works. Nicely. Easy to use. Reliable.
Rock-Solid.&lt;/p&gt;
&lt;p&gt;I'm not switching to iPad as my primary platform any time in the near
future.  But. For certain kinds of small and tightly focused hackery,
this is really nice.&lt;/p&gt;
&lt;p&gt;I use a bracket to hold the iPad up and an external keyboard. I can be
used with the on-screen keyboard, but, that's slow-going for me.&lt;/p&gt;
&lt;p&gt;Here's the thing that was exquisitely simple in Pythonista:&lt;/p&gt;
&lt;a class="reference external image-reference" href="&amp;quot;{static}/media/FileMay31,14124PM.png&amp;quot;"&gt;&lt;img alt="UML diagram" src="&amp;quot;{static}/media/FileMay31,14124PM.png&amp;quot;" style="width: 320px; height: 240px;" /&gt;&lt;/a&gt;
&lt;p&gt;I'm able to draw a hex grid (&amp;quot;Flat Top&amp;quot;, &amp;quot;Double Height&amp;quot;) in a few
dozen lines of code. This includes a bunch of geometry rules like
adjacency and directional movement.&lt;/p&gt;
&lt;p&gt;The Pythonista package includes a super-easy-to-use &lt;tt class="docutils literal"&gt;canvas&lt;/tt&gt; module
that's a tiny bit simpler than turtle graphics. It takes a bit of
getting used to, but it has enough graphics primitives to make it
easy to create hexagons and tile the surface.&lt;/p&gt;
&lt;p&gt;Given a HexGrid instance, I can then create &amp;quot;cities&amp;quot; and their
surrounding territories in an &amp;quot;empire&amp;quot;. I've tried a few organic
growth algorithms, and I like the look of these maps. They provide a
lot of avenues for conflict for writing fiction or playing
role-playing games.&lt;/p&gt;
&lt;p&gt;Some of the algorithmic
foundations: &lt;a class="reference external" href="https://www.redblobgames.com/grids/hexagons/"&gt;https://www.redblobgames.com/grids/hexagons/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="fun-hackery"&gt;
&lt;h2&gt;Fun Hackery&lt;/h2&gt;
&lt;p&gt;This is fun hackery because I can change the code, click the run
icon, and watch the consequence of the changes. A traceback is
highlighted in the original file. Easy. Fun.&lt;/p&gt;
&lt;p&gt;It's pretty slow. No surprise there. It's running on an iPad.&lt;/p&gt;
&lt;p&gt;It's pretty easy to work on. Whip out the iPad and start coding.
The super-easy, built-in &lt;tt class="docutils literal"&gt;canvas&lt;/tt&gt; module means feedback is instant
and gratifying.&lt;/p&gt;
&lt;p&gt;I can see having an intro to programming class where the fee includes
an extra $800 for the iPad you take home along with your new-found
skills in basic coding. (This is still a *lot* of money, but it's
less than a full laptop.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filling-in-the-holes"&gt;
&lt;h2&gt;Filling in the Holes&lt;/h2&gt;
&lt;p&gt;Looking at the output, you can see the growth algorithm left some
unfilled holes. A later version examines all unfilled spaces to see
if they're entirely surrounded by one color and fills them. This is a
fun algorithm because it works in a simple way with the adjacency
iterator and the set of locations covered by a city. Locations 12L
and 17K are these &amp;quot;Simply Surrounded Single Holes.&amp;quot;&lt;/p&gt;
&lt;p&gt;However, there are still some &amp;quot;Edge&amp;quot; cases that are challenging.&lt;/p&gt;
&lt;p&gt;Location 12D reflects a hole on a border. These are interesting, and
could be the seed for epic wargaming, role-playing game,
novel-writing drama. A simple algorithm can find these and assign a
random owner... But... They really need a special &amp;quot;On Fire&amp;quot; color
scheme to show the potential for drama.&lt;/p&gt;
&lt;p&gt;There's a subtlety in the upper-left corner (5W and 6V) between Blue
and Green. While these seem like simple border holes, each hole as
only five of six required neighbors.&lt;/p&gt;
&lt;p&gt;Compare these with 16P in the upper-right corner. This also has five
of six neighbors. However, this space looks like it could be a bay
leading up to a river and the river is a natural border between
nations.&lt;/p&gt;
&lt;p&gt;The head of the bay at 16P has 5 neighbors of two colors, similar to
5W and 6V. The difference can be detected by a recursive walk to see
if a hole is connected to other holes and the composite is actually
surrounded. There are lots of *edge* cases, but the (5W, 6V) pair
seems to embody the next stage of surround detection.&lt;/p&gt;
&lt;p&gt;This more nuanced algorithm design doesn't work out well in the
Pythonista environment. This algorithm design requires careful unit
tests, not the code-and-run cycle of hackery. For this kind of
careful design, we'd need to leverage &lt;tt class="docutils literal"&gt;doctest&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt;)
for testing. While I'd like &lt;strong&gt;pytest&lt;/strong&gt;, that's a lot to ask for. For
these kinds of apps, doctest is more than adequate, and a simple
&lt;tt class="docutils literal"&gt;import doctest; doctest.testmod()&lt;/tt&gt; in a scrip can help be sure
things work as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;If you're an iPad user, consider adding Pythonista. You can really
write real Python. It's a useful environment. It's fun for teaching.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="education"></category><category term="#python"></category></entry><entry><title>Circuit Python on the Gemma M0 -- The Red Ranger Beacon</title><link href="https://slott56.github.io/2019_06_11-circuit_python_on_the_gemma_m0_the_red_ranger_beacon.html" rel="alternate"></link><published>2019-06-11T08:00:00-04:00</published><updated>2019-06-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-06-11:/2019_06_11-circuit_python_on_the_gemma_m0_the_red_ranger_beacon.html</id><summary type="html">&lt;p&gt;PyCon 2018 Swag included a Gemma m0.
(&lt;a class="reference external" href="https://www.adafruit.com/product/3501"&gt;https://www.adafruit.com/product/3501&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;PyCon 2019 Swag included a Circuit Playground Express.
See &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart"&gt;https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both of these are (to me) amazing. They mount as USB devices; there’s
a code.py file that’s automatically run …&lt;/p&gt;</summary><content type="html">&lt;p&gt;PyCon 2018 Swag included a Gemma m0.
(&lt;a class="reference external" href="https://www.adafruit.com/product/3501"&gt;https://www.adafruit.com/product/3501&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;PyCon 2019 Swag included a Circuit Playground Express.
See &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart"&gt;https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-quickstart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both of these are (to me) amazing. They mount as USB devices; there’s
a code.py file that’s automatically run when the board restarts.&lt;/p&gt;
&lt;p&gt;The Gemma has fairly few pins and does some real simple things.  The
CPX has a bunch of pins and ton of hardware on the board. Buttons,
Switches, LED’s, motion sensor, temperature, brightness... I’ve lost
count.&lt;/p&gt;
&lt;div class="section" id="step-1-get-organized"&gt;
&lt;h2&gt;Step 1 -- Get Organized&lt;/h2&gt;
&lt;p&gt;Create a proper project directory on your local machine. Yes, you can
hack the &lt;tt class="docutils literal"&gt;code.py&lt;/tt&gt; file immediately, but you should consider making
a backup before you start making changes.&lt;/p&gt;
&lt;p&gt;Few things are more frustrating than making a mistake and being unable
to restore the original functionality as a check to be sure things are
still working.&lt;/p&gt;
&lt;p&gt;Also. At some point, you'll want to upgrade the OS on the chip. This
will require you to have a bootable image. The process isn't complex,
but it does require some care.
See &lt;a class="reference external" href="https://learn.adafruit.com/welcome-to-circuitpython/installing-circuitpython#download-the-latest-version-3-4"&gt;https://learn.adafruit.com/welcome-to-circuitpython/installing-circuitpython#download-the-latest-version-3-4&lt;/a&gt;
for downloading a new OS.&lt;/p&gt;
&lt;p&gt;So. Step 1a. Create a local folder for your projects. Within that
folder, create a folder for each project. Put the relevant code.py
into the sub-folder. Like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gemma
 ┣━━ baseline
 ┃   ┗━━ code.py
 ┣━━ my-first-project
 ┃   ┗━━ code.py
 ┣━━ another-project
 ┃   ┗━━ code.py
 ┗━━ os-upgrade
     ┗━━ other files...
&lt;/pre&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://learn.adafruit.com/adafruit-gemma-m0/troubleshooting"&gt;https://learn.adafruit.com/adafruit-gemma-m0/troubleshooting&lt;/a&gt; for
additional help if you have a Windows PC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-start-small"&gt;
&lt;h2&gt;Step 2 -- Start Small&lt;/h2&gt;
&lt;p&gt;Tweak a few things in the supplied &lt;tt class="docutils literal"&gt;code.py&lt;/tt&gt; if you're new to IoT
stuff.&lt;/p&gt;
&lt;p&gt;A lot of folks like the Mu editor for
this. &lt;a class="reference external" href="https://codewith.mu/"&gt;https://codewith.mu&lt;/a&gt;.
I like using BBEdit. &lt;a class="reference external" href="https://www.barebones.com/products/bbedit/"&gt;https://www.barebones.com/products/bbedit/&lt;/a&gt;.  To
make this work I *also* need to have&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a terminal window open so I can use the Mac OS &lt;strong&gt;screen&lt;/strong&gt;
application, and&lt;/li&gt;
&lt;li&gt;a finder window open to copy the code.py from my PC to the Gemma
M0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a lot of busy screen real-estate with three separate apps
open. It's not for everyone. I like it because there's little
hand-holding. You may prefer Mu.&lt;/p&gt;
&lt;p&gt;It's important to go through the edit/download/play cycle many times
to be sure you're clear on what code's on your PC and what code's on
your board.&lt;/p&gt;
&lt;p&gt;It's even more important to see how you're forced to debug syntax
errors using the &lt;strong&gt;screen&lt;/strong&gt; app until you invent a suitable mock
library for off-line unit testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-plan-carefully"&gt;
&lt;h2&gt;Step 3 -- Plan Carefully&lt;/h2&gt;
&lt;p&gt;The version of Python is remarkably complete.
However.&lt;/p&gt;
&lt;p&gt;It's also a very small processor, with very few pins, so you can't do
anything super elaborate.  You can, however, do quite a bit.
See &lt;a class="reference external" href="https://www.youtube.com/watch?v=35mXD40SvXM"&gt;Nina Zakharenko - Keynote - PyCon
2019&lt;/a&gt; for some
inspiration&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-check-this-out"&gt;
&lt;h2&gt;Step 4 -- Check This Out&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/slott56/gemma-boat-beacon"&gt;https://github.com/slott56/gemma-boat-beacon&lt;/a&gt;
Many thanks to &amp;#64;nnja for showing us some elegant, inspirational
ideas.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Gemma"></category><category term="#python"></category><category term="CircuitPlayground"></category><category term="IoT"></category></entry><entry><title>Probabilistic Data Structures</title><link href="https://slott56.github.io/2019_06_04-probabilistic_data_structures.html" rel="alternate"></link><published>2019-06-04T08:00:00-04:00</published><updated>2019-06-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-06-04:/2019_06_04-probabilistic_data_structures.html</id><content type="html">&lt;p&gt;Interesting data structures with &lt;strong&gt;O&lt;/strong&gt;(&lt;em&gt;n&lt;/em&gt;) performance. This can help
to unscramble &lt;strong&gt;O&lt;/strong&gt;(&lt;em&gt;n&lt;/em&gt;²) problems allowing progress.
&lt;a class="reference external" href="https://pdsa.readthedocs.io/en/latest/index.html"&gt;https://pdsa.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="data structure"></category><category term="algorithm"></category><category term="#python"></category></entry><entry><title>Rules for Debugging</title><link href="https://slott56.github.io/2019_05_28-rules_for_debugging.html" rel="alternate"></link><published>2019-05-28T14:34:00-04:00</published><updated>2019-05-28T14:34:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-05-28:/2019_05_28-rules_for_debugging.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's the situation.&lt;/div&gt;
&lt;div class="line"&gt;Someone wrote code. It didn't do what they assumed it would do.&lt;/div&gt;
&lt;div class="line"&gt;They come to me for help.&lt;/div&gt;
&lt;div class="line"&gt;Here are my rules for debugging. All of them.&lt;/div&gt;
&lt;div class="line"&gt;1. Try something else.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I don't have any other or more clever advice. When I look at someone's
broken code …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's the situation.&lt;/div&gt;
&lt;div class="line"&gt;Someone wrote code. It didn't do what they assumed it would do.&lt;/div&gt;
&lt;div class="line"&gt;They come to me for help.&lt;/div&gt;
&lt;div class="line"&gt;Here are my rules for debugging. All of them.&lt;/div&gt;
&lt;div class="line"&gt;1. Try something else.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I don't have any other or more clever advice. When I look at someone's
broken code, I'm going to suggest the only thing I know. Try something
else.&lt;/div&gt;
&lt;div class="line"&gt;I can't magically make broken code work. Code's not like that. If it
doesn't work, it's wrong, usually in a foundational way. Usually, the
author made an assumption, followed through on that assumption, and
was astonished it didn't work.&lt;/div&gt;
&lt;div class="line"&gt;A consequence of this will be &lt;strong&gt;massive&lt;/strong&gt; changes to the broken code.
Foundational changes.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
When you make an assumption, you make an &amp;quot;ass&amp;quot; out of &amp;quot;u&amp;quot; and
&amp;quot;mption&amp;quot;.&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Debugging is a matter of finding and discarding assumptions. This can
be hard. Some people think their assumptions are solid gold and write
long angry blog posts about how a language or platform or library is
&amp;quot;broken.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The rest of us try something different.&lt;/div&gt;
&lt;div class="line"&gt;My personal technique is to cite evidence for everything I think I'm
observing. Sometimes, I actually write it down -- on paper -- next to
the computer. (Sometimes I use the Mac OS Notes app.) Which lines of
code. Which library links. Sometimes, i'll include in the code as
references to documentation pages.&lt;/div&gt;
&lt;div class="line"&gt;Evidence is required to destroy assumptions. Destroying assumptions is
the essence of debugging.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sources-of-assumptions"&gt;
&lt;h2&gt;Sources of Assumptions&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I'm often amazed at how many people don't read the &amp;quot;But on Windows...&amp;quot;
parts of the Python documentation. Somehow, they're willing to assume
-- without evidence -- that Windows is POSIX-compliant and behaves
like Linux. When things don't follow their assumed behavior, and
they're using Windows, it often seems like they've compounded a bunch
of personal assumptions. I don't have too much patience at this point:
the debugging is going to be hard.&lt;/div&gt;
&lt;div class="line"&gt;I'm often amazed that someone can try to use
multiprocessing.apply_async() without reading any of the &lt;a class="reference external" href="https://docs.python.org/3.7/library/multiprocessing.html#using-a-pool-of-workers"&gt;example
code&lt;/a&gt;.
What I'm guessing is that assumptions trump research, making them
solid gold, and not subject to questioning or locating evidence. In
the case of multiprocessing, it's important to look at code which
appears broken and compare it, line-by-line with example code that
works.&lt;/div&gt;
&lt;div class="line"&gt;Comparing broken code with relevant examples is -- in effect -- trying
something else. The original didn't work. So... Go to something that
does work and compare the two to identify the differences.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="thanks-for-sharing-for-more-a-href-https-kazaf"&gt;
&lt;h2&gt;Thanks for sharing for more &amp;lt;a href=&amp;quot;&lt;a class="reference external" href="https://kazaf"&gt;https://kazaf&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;best android cell&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-07-31 07:14:23.474000-04:00&lt;/p&gt;
&lt;p&gt;Thanks for sharing for more &lt;a class="reference external" href="https://kazafi.com/django-python-tutorial/%22"&gt;Django Python
Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thank you for this informative post.
&amp;lt;a href=&amp;quot;htt...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Rajani&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-21 03:43:14.682000-04:00&lt;/p&gt;
&lt;p&gt;Thank you for this informative post.
&lt;a class="reference external" href="https://www.visualpath.in/amazon-web-services-aws-training.html"&gt;AWS
Training&lt;/a&gt;
&lt;a class="reference external" href="https://www.visualpath.in/amazon-web-services-aws-training.html"&gt;AWS Online
Training&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="passive-aggressive programmer"></category><category term="Programming Languages"></category></entry><entry><title>Hacker Laws</title><link href="https://slott56.github.io/2019_05_21-hacker_laws.html" rel="alternate"></link><published>2019-05-21T08:00:00-04:00</published><updated>2019-05-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-05-21:/2019_05_21-hacker_laws.html</id><content type="html">&lt;p&gt;Pretty funny: &lt;a class="reference external" href="https://github.com/dwmkerr/hacker-laws"&gt;https://github.com/dwmkerr/hacker-laws&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category></entry><entry><title>PyCon 2019</title><link href="https://slott56.github.io/2019_05_14-pycon_2019.html" rel="alternate"></link><published>2019-05-14T08:00:00-04:00</published><updated>2019-05-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-05-14:/2019_05_14-pycon_2019.html</id><summary type="html">&lt;p&gt;There are some things I could say.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;You can come to understand it yourself, also.&lt;/p&gt;
&lt;p&gt;Go here: &lt;a class="reference external" href="https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ"&gt;https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start with the keynotes. &lt;a class="reference external" href="https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ/search?query=keynote"&gt;https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ/search?query=keynote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For me, one of the top presentations was this &lt;a class="reference external" href="https://www.youtube.com/watch?v=9G2s1TN9QQY"&gt;https://www.youtube.com …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are some things I could say.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;You can come to understand it yourself, also.&lt;/p&gt;
&lt;p&gt;Go here: &lt;a class="reference external" href="https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ"&gt;https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Start with the keynotes. &lt;a class="reference external" href="https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ/search?query=keynote"&gt;https://www.youtube.com/channel/UCxs2IIVXaEHHA4BtTiWZ2mQ/search?query=keynote&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For me, one of the top presentations was this &lt;a class="reference external" href="https://www.youtube.com/watch?v=9G2s1TN9QQY"&gt;https://www.youtube.com/watch?v=9G2s1TN9QQY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are several closely related, but I found this very helpful.&lt;/p&gt;
</content><category term="Technologies"></category><category term="pycon"></category><category term="#python"></category></entry><entry><title>Fiction Writers and Query Letters</title><link href="https://slott56.github.io/2019_05_07-fiction_writers_and_query_letters.html" rel="alternate"></link><published>2019-05-07T08:00:00-04:00</published><updated>2019-05-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-05-07:/2019_05_07-fiction_writers_and_query_letters.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://flstevens.itmaybeahack.com/writing-world-building-and/"&gt;http://flstevens.itmaybeahack.com/writing-world-building-and/&lt;/a&gt; for
some back-story on F. L. Stevens and the need to write a *lot* of
query letters to agents for fiction. (The non-fiction industry is
entirely different; there are acquisition editors who look for
technical contributors.)&lt;/p&gt;
&lt;p&gt;There's a tiny possibility of a Query Manager …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://flstevens.itmaybeahack.com/writing-world-building-and/"&gt;http://flstevens.itmaybeahack.com/writing-world-building-and/&lt;/a&gt; for
some back-story on F. L. Stevens and the need to write a *lot* of
query letters to agents for fiction. (The non-fiction industry is
entirely different; there are acquisition editors who look for
technical contributors.)&lt;/p&gt;
&lt;p&gt;There's a tiny possibility of a Query Manager Tool (of some kind) on a
writer's desktop.&lt;/p&gt;
&lt;p&gt;Inputs include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Template letter.&lt;/li&gt;
&lt;li&gt;A table of customizations per Agent. The intent is to allow more than
simple name and pronoun changes. This includes Agent-specific content
requirements. These vary, and can include the synopsis, first
chapter, first 10 pages, first 50 pages. They're not email
attachments; they have to be part of the main body of the email, so
they're easy to prepare.&lt;/li&gt;
&lt;li&gt;Another table of variant pitches to plug into the template. There are
a lot of common variations on this theme. Sizes vary from as few as
50 words to almost 300 words. Summaries of published works seem to
have a median size of 140 words. A writer may have several (or
several dozen) variants to try out.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can't become a spam engine (agents don't like the idea of an
impersonal letter.)&lt;/p&gt;
&lt;p&gt;Also. A stateful list of agents, queries, and responses is important.
Some Agents don't necessarily respond to each query; they often offer
a blanket apology along the lines of &amp;quot;if you haven't heard back in
sixty days, consider it a rejection.&amp;quot; So. You want to try again.
Eventually. Without being rude. And if you requery, you have to send
a different variant on the basic pitch.&lt;/p&gt;
&lt;p&gt;Some Agents give a crisp &amp;quot;nope&amp;quot; and you can update your list to avoid
requerying.&lt;/p&gt;
&lt;p&gt;For new authors (like F. L. Stevens,) there's a kind of manual query
tracking mess. It's not really horrible. But it is annoying. Keeping
the database up-to-date with responses is about as hard as a tracking
spreadsheet, so, there's little value to a lot of fancy Python
software.&lt;/p&gt;
&lt;p&gt;The csv, string.Template, email and smtplib components of Python make
this really easy to do.  While I think it would be fun to write,
creating this would be work avoidance.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>PyLit-3 Maintenance, Love and Care</title><link href="https://slott56.github.io/2019_04_09-pylit_3_maintenance_love_and_care.html" rel="alternate"></link><published>2019-04-09T08:00:00-04:00</published><updated>2019-04-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-04-09:/2019_04_09-pylit_3_maintenance_love_and_care.html</id><summary type="html">&lt;p&gt;The PyLit tool dates from 2009. Here's a historical
reference: &lt;a class="reference external" href="http://wiki.c2.com/?PyLit"&gt;http://wiki.c2.com/?PyLit&lt;/a&gt;
It was Python 2. It had some minor problems. I forked it and cleaned it
up for Python 3.
Then I set it aside for a few years (six or so.)
Dusting it off. Rearranging …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The PyLit tool dates from 2009. Here's a historical
reference: &lt;a class="reference external" href="http://wiki.c2.com/?PyLit"&gt;http://wiki.c2.com/?PyLit&lt;/a&gt;
It was Python 2. It had some minor problems. I forked it and cleaned it
up for Python 3.
Then I set it aside for a few years (six or so.)
Dusting it off. Rearranging things. The legacy Python 2 version -- it
appears -- is gone forever.
The current thing available in PyPI doesn't even download and install on
a modern Python because the metadata makes it look like it won't be
compatible with a Python 3.7 world. So. That needs to be fixed. And
while I'm at it...
- Add tox support for Python 3.5, 3.6, and 3.7 properly.
- Restructure the docs to use Github Pages from master/docs.
- Get the download squared away so pip install will work.
- Use pathlib.
- Start down the road toward type hinting. Which will likely exclude
py35 support.
I may, as part of type hinting, be forced to make some more changes to
the essential structure of the app(s).
For now, I simply need to get it to be pip installable.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hey-steven-is-there-any-public-repo-to-see-your-a"&gt;
&lt;h2&gt;Hey Steven! Is there any public repo to see your a...&lt;/h2&gt;
&lt;p&gt;David&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-05-08 03:14:39.349000-04:00&lt;/p&gt;
&lt;p&gt;Hey Steven! Is there any public repo to see your advances? Congrats for
your blog/books/initiatives!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-for-this-relevant-information-i-will-also"&gt;
&lt;h2&gt;Thanks for this relevant information. I will also ...&lt;/h2&gt;
&lt;p&gt;John Martin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-05-10 07:36:48.884000-04:00&lt;/p&gt;
&lt;p&gt;Thanks for this relevant information. I will also share information
where you can find good info about &lt;a class="reference external" href="https://jiwebtech.com"&gt;online software solutions
company&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-economic-landscape-of-today-is-not-only-demand"&gt;
&lt;h2&gt;The economic landscape of today is not only demand...&lt;/h2&gt;
&lt;p&gt;Asset Finance And Leasing&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-05-29 23:33:57.483000-04:00&lt;/p&gt;
&lt;p&gt;The economic landscape of today is not only demanding but it also comes
with a lot of pressure.
Businesses are starting to see that they need to do something different
and unique if they want to make an impact and grow.
&lt;a class="reference external" href="https://netsoltech.com/"&gt;Asset Finance And Leasing&lt;/a&gt; is a great way
for any company to grow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="crystal-water-is-georgia-pools-builders-company-wi"&gt;
&lt;h2&gt;Crystal water is Georgia pools builders company wi...&lt;/h2&gt;
&lt;p&gt;Swimming Pool Contractors&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-09-02 06:39:09.289000-04:00&lt;/p&gt;
&lt;p&gt;Crystal water is Georgia pools builders company with budget friendly
customs solutions based in atlanta swimming
&lt;a class="reference external" href="https://www.crystalwaterpools.com/"&gt;pool contractors near me&lt;/a&gt;
creative design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-steven-is-there-any-public-repo-to-see-your"&gt;
&lt;h2&gt;Hello Steven! Is there any public repo to see your...&lt;/h2&gt;
&lt;p&gt;contentrist.blog&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-07-27 13:16:11.239000-04:00&lt;/p&gt;
&lt;p&gt;Hello Steven! Is there any public repo to see your advances? Congrats
for your blog/books/initiatives!!
Also visit my Blog &lt;a class="reference external" href="https://contenterist.com/what-is-the-most-important-thing-to-remember-about-steering-a-pwc/"&gt;What is the Most Important thing to Remember about
Steering a
PWC?&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="literate programming"></category><category term="PyLit"></category><category term="#python"></category></entry><entry><title>Python and pathlib and Windows -- this problem has been solved -- and yet...</title><link href="https://slott56.github.io/2019_03_26-python_and_pathlib_and_windows_this_problem_has_been_solved_and_yet.html" rel="alternate"></link><published>2019-03-26T08:00:00-04:00</published><updated>2019-03-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-03-26:/2019_03_26-python_and_pathlib_and_windows_this_problem_has_been_solved_and_yet.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The Passive-Aggressive Programmer strikes again. A sad story of
sadness.&lt;/div&gt;
&lt;div class="line"&gt;I tell everyone to stop using os.path and use pathlib. Everyone.
Here's the link: &lt;a class="reference external" href="https://docs.python.org/3/library/pathlib.html"&gt;https://docs.python.org/3/library/pathlib.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's essential to realize the semantic richness of OS filesystem
paths. They're not simply strings. They have …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The Passive-Aggressive Programmer strikes again. A sad story of
sadness.&lt;/div&gt;
&lt;div class="line"&gt;I tell everyone to stop using os.path and use pathlib. Everyone.
Here's the link: &lt;a class="reference external" href="https://docs.python.org/3/library/pathlib.html"&gt;https://docs.python.org/3/library/pathlib.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's essential to realize the semantic richness of OS filesystem
paths. They're not simply strings. They have a string representation,
but there's quite a bit going on there that is not captured trivially
by strings and string parsing.  &amp;quot;path/basename.extension&amp;quot; is more than
just slashes and dots.&lt;/div&gt;
&lt;div class="line"&gt;Windows users, of course, have a nightmarish problem. Actually many
nightmarish problems, one of which is pathnames.&lt;/div&gt;
&lt;div class="line"&gt;I tell Windows developers to use pathlib, it will make their life
somewhat more bearable.&lt;/div&gt;
&lt;div class="line"&gt;And Yet. The Passive-Aggressive Programmer insists on using Windows as
if it doesn't have a problem with \ in path strings.&lt;/div&gt;
&lt;div class="line"&gt;Line 110 has a literal r&amp;quot;C:\windows\is\xtreme\evil&amp;quot; Note the \x
in the path. Without the r&amp;quot;&amp;quot; string, this literal raises a
SyntaxError.&lt;/div&gt;
&lt;div class="line"&gt;Line 50 had subprocess.run(r&amp;quot;C:\path\to\xectuable -option&amp;quot; + &amp;quot; &amp;quot; +
options + &amp;quot; &amp;quot; + filename). Note the r&amp;quot;&amp;quot; string. Note the Linux-style
-option, too. They're wrapping an open source app in a Python shell.&lt;/div&gt;
&lt;div class="line"&gt;You're with me so far? They're Windows devs. They've managed to use
raw strings in two places. Right?&lt;/div&gt;
&lt;div class="line"&gt;But. They're Passive-Aggressive. They don't like PR comments of any
kind. They'll &amp;quot;agree&amp;quot; to a change, but then... This...&lt;/div&gt;
&lt;div class="line"&gt;Line 50 should change. It's needs to use a list.&lt;/div&gt;
&lt;div class="line"&gt;The Passive Aggressive Programmer can't make a list work.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
list_of_arguments = [&amp;quot;C:\path\to\xectuable -option&amp;quot;] + options_list + [&amp;quot;C:\windows\is\xtreme\evil&amp;quot;]
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;See what they did there? They didn't want to change from string to
list. (We had to go over it more than once.) They wanted to leave it
alone. Grudgingly, they agreed to change from string to list.&lt;/div&gt;
&lt;div class="line"&gt;But.&lt;/div&gt;
&lt;div class="line"&gt;SyntaxError. See? The list just doesn't work. Python is weird. It's an
undocumented WAT.&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;[Yes, some of us know the r's vanished. They author couldn't figure
that out, though.]&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;And the pathlib suggestion?&lt;/div&gt;
&lt;div class="line"&gt;Since the strings are now a SyntaxError, they need me to fix that for
them. I made them change to a list, therefore, I caused the
SyntaxError. It would be a distraction to spend tome researching
pathlib. &amp;quot;I need to Google and think about how to handle the Unicode
error&amp;quot; was the response.&lt;/div&gt;
&lt;div class="line"&gt;Using Path(&amp;quot;C:/path/to/xecutable&amp;quot;) to avoid any Window-ism of any kind
is an impossible burden. Impossible. It requires them to Google.
Instead, the SyntxError is all my fault.&lt;/div&gt;
&lt;div class="line"&gt;The previous examples of the use of raw strings?  Don't know why
they're not helpful, but I'm not the one who's struggling to implement
a change.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="if-you-39-re-having-hard-times-looking-for-a-team"&gt;
&lt;h2&gt;If you&amp;amp;#39;re having hard times looking for a team...&lt;/h2&gt;
&lt;p&gt;PoL&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-26 19:21:22.087000-04:00&lt;/p&gt;
&lt;p&gt;If you're having hard times looking for a team overseas, this article
will help you &lt;a class="reference external" href="https://youteam.io/blog/how-to-build-an-offshore-development-team-in-ukraine/"&gt;find offshore dev
team&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-advice-that-i-would-give-to-people-is-to-just"&gt;
&lt;h2&gt;The advice that I would give to people is to just ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-27 14:50:38.770000-04:00&lt;/p&gt;
&lt;p&gt;The advice that I would give to people is to just always use the forward
slash &amp;quot;/&amp;quot; and let Python handle the rest.
I would then give them the following example to think about and analyze
&amp;gt;&amp;gt;&amp;gt; p = Path('C:/Program Files/7-Zip')
&amp;gt;&amp;gt;&amp;gt; p.parts
('C:\\', 'Program Files', '7-Zip')&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-windowsisxtremeevil-quot-hilarious"&gt;
&lt;h2&gt;&amp;amp;quot;windowsisxtremeevil&amp;amp;quot; - hilarious&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-27 14:38:40.857000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;\windows\is\xtreme\evil&amp;quot; - hilarious&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-a-href-https-gtm-plus-com-rel-nofollow"&gt;
&lt;h2&gt;In &amp;lt;a href=&amp;quot;&lt;a class="reference external" href="https://gtm-plus.com/"&gt;https://gtm-plus.com/&lt;/a&gt;&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-29 08:32:14.012000-04:00&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://gtm-plus.com/"&gt;GTMplus&lt;/a&gt; best architectors in Ukraine&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="windows"></category><category term="#python"></category></entry><entry><title>Don't Solve My Problem.</title><link href="https://slott56.github.io/2019_03_19-dont_solve_my_problem.html" rel="alternate"></link><published>2019-03-19T08:00:00-04:00</published><updated>2019-03-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-03-19:/2019_03_19-dont_solve_my_problem.html</id><summary type="html">&lt;p&gt;Two and a half examples of &amp;quot;Don't solve the problem I described.
Provide the implementation I dream about.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="can-t-use-enums-for-constants"&gt;
&lt;h2&gt;Can't Use Enums for Constants&lt;/h2&gt;
&lt;p&gt;I was asked to see this because sometimes there's just too much
abstraction
&lt;a class="reference external" href="https://stackoverflow.com/questions/2668355/how-much-abstraction-is-too-much"&gt;https://stackoverflow.com/questions/2668355/how-much-abstraction-is-too-much&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The accepted answer links to some useful design …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Two and a half examples of &amp;quot;Don't solve the problem I described.
Provide the implementation I dream about.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="can-t-use-enums-for-constants"&gt;
&lt;h2&gt;Can't Use Enums for Constants&lt;/h2&gt;
&lt;p&gt;I was asked to see this because sometimes there's just too much
abstraction
&lt;a class="reference external" href="https://stackoverflow.com/questions/2668355/how-much-abstraction-is-too-much"&gt;https://stackoverflow.com/questions/2668355/how-much-abstraction-is-too-much&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The accepted answer links to some useful design principles. Read the
answer. It's useful.&lt;/p&gt;
&lt;p&gt;The question objects to abstract superclasses without much (or any)
actual implementation.  I've seen folks toy around with frameworks
where there are classes that introduce a name, but little else. So I
understand the complaint. I once tried to use Python classes as
surrogates for Java interfaces. It was a bad idea. And irrelevant to
solving the underlying problem.&lt;/p&gt;
&lt;p&gt;The problem that lead to the &amp;quot;yet another abstraction&amp;quot; complaint,
however, was &lt;strong&gt;not&lt;/strong&gt; related to a design with empty layers of
framework abstractions. It was &lt;strong&gt;not&lt;/strong&gt; related to classes used to
define an interface-like feature in Python. It wasn't related to
*anything* in the Stack Overflow question or answer.&lt;/p&gt;
&lt;p&gt;The &amp;quot;yet another abstraction&amp;quot; complaint was based on Python not having
constants. Seriously. How did we get here? Right. They don't want a
solution. They want to complain.&lt;/p&gt;
&lt;p&gt;I lift this situation up to folks who are trapped in conversations
where things devolve into bizarro-world like &amp;quot;Yet Another Abstraction
is bad&amp;quot; when we're not talking about abstractions. The solution is
simple, but, it's not what they wanted so, it's labeled as bad in some
way.&lt;/p&gt;
&lt;p&gt;The solution is bad because it's unexpected. Consequently peripheral,
tangential, weird-ass nonsense will show up in trying to avoid an
unexpected solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-t-assign-numbers"&gt;
&lt;h2&gt;Can't Assign Numbers&lt;/h2&gt;
&lt;p&gt;There's an API to load some data.  They have 100's of clients happily
loading data. In some cases, the clients must assign numbers in
addition to names; it's a disambiguation thing. Most of the time, the
name is good. In a few cases, (name, number) is a two-part key because
they have multiple instances with the same name.&lt;/p&gt;
&lt;p&gt;We're good here. The data structure's key can be (name, number) and
the default number is zero. Works for almost everyone.&lt;/p&gt;
&lt;p&gt;Almost everyone. Exception they have one client who cannot count or
enumerate their data.&lt;/p&gt;
&lt;p&gt;Really.&lt;/p&gt;
&lt;p&gt;The client can't even pre-process the data to add numbers because
reasons.&lt;/p&gt;
&lt;p&gt;The stated reason is &amp;quot;the data originates off-line and the numbers
might be inconsistent.&amp;quot; The key needs a number. It doesn't need to
consistent. The point is asking the client to own the identity -- a
name and a number.&lt;/p&gt;
&lt;p&gt;The solution seemed easy. Assign a number. If your data comes from a
spread-sheet, use the row number. The =row() function works. Use that.
If your data doesn't come from a spread-sheet write a tiny utility to
laminate a number into the data. This doesn't seem hard. And then the
client owns the object identity.&lt;/p&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;Can't do it. The web service will have to assign the number for them.&lt;/p&gt;
&lt;p&gt;It's not a &lt;strong&gt;difficult&lt;/strong&gt; feature to add. It's a complicated, stateful
default value. This will turn into trouble tickets in the future when
the numbers are unacceptable because they change with each load or
something even more obscure than that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-t-fork-a-repo"&gt;
&lt;h2&gt;Can't Fork a Repo&lt;/h2&gt;
&lt;p&gt;This isn't recent, and I may not have the details right. But.&lt;/p&gt;
&lt;p&gt;The team had evolved an approach where they had several different
pieces of software spread among multiple branches in a single Git
repository.&lt;/p&gt;
&lt;p&gt;This was weird. And they were -- of course -- about to start having
CI/CD problems as they moved away from manual builds into a world of
git commit hooks and relatively fixed CI/CD pipelines.&lt;/p&gt;
&lt;p&gt;And they were really unhappy. They liked having multiple branches in
a single repo. The idea of forking this into separate repos was
unacceptable. Unworkable. Breaks everything. (Breaks &lt;strong&gt;everything&lt;/strong&gt;
they had. &lt;strong&gt;Everything&lt;/strong&gt; they needed to replace. Or so they claimed.)&lt;/p&gt;
&lt;p&gt;They had some vision of having the CI/CD jobs all reworked to move
beyond the common dev/master world into their uniquely odd world of
lots of parallel branches, each it's own private &amp;quot;master&amp;quot;. But all in
one repo.&lt;/p&gt;
&lt;p&gt;They seemed to have locked into a strange world view, and weren't
happy discarding it. The circular discussions of how multiple repos
would break something something in their something was more examples
of tangential, irrelevant discussion to cloak empty whining.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;I think there are people who don't really want a &amp;quot;solution.&amp;quot; They want
something else.&lt;/p&gt;
&lt;p&gt;There are people who have a vision: How Things Should Be (HTSB™,) They
seem to be utterly unwilling to consider something that is not
literally their (narrow) vision of HTSB.&lt;/p&gt;
&lt;p&gt;It's very much as &amp;quot;Don't confuse me with facts, my mind is made up&amp;quot;
situation. It's exasperating to me because of the irrelevant
side-channel discussions they use to avoid confronting (or even
stating) the actual problem.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="a-href-https-galido-net-blog-best-tech-blogs"&gt;
&lt;h2&gt;&amp;lt;a href=&amp;quot;&lt;a class="reference external" href="https://galido.net/blog/best-tech-blogs/"&gt;https://galido.net/blog/best-tech-blogs/&lt;/a&gt;&amp;quot;...&lt;/h2&gt;
&lt;p&gt;Star moon&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-25 14:15:06.714000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://galido.net/blog/best-tech-blogs/"&gt;Technology&lt;/a&gt;Technology is
constantly changing. It is an industry that moves so fast, things can
become obsolete within weeks. Thus it is essential to always stay on top
of &lt;a class="reference external" href="https://galido.net/blog/best-tech-blogs/"&gt;news and information&lt;/a&gt;,
whether it be by newsletter, following RSS feeds and blogs, tutorials or
going back to school.
Click here to know more information &lt;a class="reference external" href="https://galido.net/blog/best-tech-blogs/"&gt;Tech
Blogs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-t-we-paint-the-bikeshed-blue-and-by-it-le"&gt;
&lt;h2&gt;Can't we paint the bikeshed blue, And by it le...&lt;/h2&gt;
&lt;p&gt;smitty1e&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-19 08:30:55.041000-04:00&lt;/p&gt;
&lt;p&gt;Can't we paint the bikeshed blue,
And by it let my pony chew,
Eternally, cow-like, its cud,
While we wallow in our FUD?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category></entry><entry><title>Python's multi-threading and the GIL</title><link href="https://slott56.github.io/2019_03_18-pythons_multi_threading_and_the_gil.html" rel="alternate"></link><published>2019-03-18T07:36:00-04:00</published><updated>2019-03-18T07:36:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-03-18:/2019_03_18-pythons_multi_threading_and_the_gil.html</id><summary type="html">&lt;p&gt;Got this in an email.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Python's multi-threading module seems not efficient because of the
global interpreter lock?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Yep.&lt;/p&gt;
&lt;blockquote&gt;
Is the trick is to use &amp;quot;&lt;a class="reference external" href="https://docs.python.org/3/library/threading.html#thread-local-data"&gt;Thread-Local
Data&lt;/a&gt;&amp;quot;?&lt;/blockquote&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;div class="section" id="it-gets-worse"&gt;
&lt;h2&gt;It Gets Worse&lt;/h2&gt;
&lt;p&gt;Interestingly, there was no further ask. The questioner had decided on
thread-local data because the questioner had decided to focus …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Got this in an email.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Python's multi-threading module seems not efficient because of the
global interpreter lock?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Yep.&lt;/p&gt;
&lt;blockquote&gt;
Is the trick is to use &amp;quot;&lt;a class="reference external" href="https://docs.python.org/3/library/threading.html#thread-local-data"&gt;Thread-Local
Data&lt;/a&gt;&amp;quot;?&lt;/blockquote&gt;
&lt;p&gt;Nope.&lt;/p&gt;
&lt;div class="section" id="it-gets-worse"&gt;
&lt;h2&gt;It Gets Worse&lt;/h2&gt;
&lt;p&gt;Interestingly, there was no further ask. The questioner had decided on
thread-local data because the questioner had decided to focus on
threads. And they were done making choices at that point.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;No question on &amp;quot;What was recommended?&amp;quot; or &amp;quot;What's a common solution?&amp;quot;
or &amp;quot;What is &lt;a class="reference external" href="http://docs.dask.org/en/latest/why.html"&gt;Dask&lt;/a&gt;?&amp;quot;
Nothing other than &amp;quot;confirm my assumptions.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is swirling around a bunch of emails on trying to determine the
&lt;strong&gt;maximum&lt;/strong&gt; number of concurrent threads or processes based on the
number of cores or CPU's or something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maximum&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I'll repeat that for those who skim.&lt;/p&gt;
&lt;p&gt;They think there's a &lt;strong&gt;maximum&lt;/strong&gt; number of concurrent threads or
processes.&lt;/p&gt;
&lt;p&gt;If you have some computation which (1) makes zero OS requests and (2)
is never interrupted, I can imagine you'd like to have all of the
cores fully committed to executing that theoretical stream of
instructions. You might even be able to split that theoretical
workload up based on the number of cores.&lt;/p&gt;
&lt;p&gt;Practically, however, that stream of &lt;strong&gt;uninterrupted&lt;/strong&gt; computing
rarely exists.&lt;/p&gt;
&lt;p&gt;Maybe. Maybe you've got some basin-hopping or gradient-following or
random forest ML algorithm which is going to do a burst of computation
on an in-memory data structure. In that (rare) case,
&lt;a class="reference external" href="http://docs.dask.org/en/latest/why.html"&gt;Dask&lt;/a&gt; is still ideal for
exploiting all of the cores on your processor.&lt;/p&gt;
&lt;p&gt;The upper-bound idea bugs me a lot.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Any OS request leads to a context switch. Any context switch leads to
waiting. Any waiting means you can have more threads than you have
cores.&lt;/li&gt;
&lt;li&gt;AFAIK, any memory write outside the local cache will lead to a stall
in the pipeline. Another thread can (and should) leap in to the
core's processing stream. The only way you can create the
&amp;quot;all-computing&amp;quot; sequence of instructions bounded by the number of
cores is to *also* be sure the entire thing fits in cache.
Hahahaha.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's the maximum number of threads or processes? It depends on the
wait times. It depends on memory writes. It depends on the size of the
data structure, the size of cache, and the size of the instruction
stream.&lt;/p&gt;
&lt;p&gt;Because it depends on a lot of things, it's rather difficult to
predict. And that makes it rather difficult to determine a maximum.&lt;/p&gt;
&lt;p&gt;Replying about the uselessness of trying to establish a &lt;strong&gt;maximum&lt;/strong&gt;,
of course, does nothing. AFAIK, they're still assiduously trying to
use os.cpu_count() and os.sched_getaffinity() to put an upper bound on
the size of a thread pool.&lt;/p&gt;
&lt;p&gt;Acting as if &lt;a class="reference external" href="https://docs.dask.org/en/latest/"&gt;Dask&lt;/a&gt; doesn't
exist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Use &lt;a class="reference external" href="https://docs.dask.org/en/latest/"&gt;Dask&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;p&gt;Use a &lt;a class="reference external" href="https://docs.python.org/2/library/multiprocessing.html#using-a-pool-of-workers"&gt;multiprocessing
pool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are simple things. They don't require a lot of hand-wringing
over the GIL and Thread Local Data. They're built. They work. They're
simple and effective solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="side-bar-nonsense"&gt;
&lt;h2&gt;Side-bar Nonsense&lt;/h2&gt;
&lt;blockquote&gt;
From &amp;quot;a really smart guy. He got his PhD in quantum mechanics and he
got major money to actually go build … . He initially worked for ...
and now he is working for .... So, when he says something or asks a
question, I listen very carefully.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;The laudatory blah-blah-blah doesn't really change the argument. It
can be omitted. It is an &amp;quot;Appeal to Authority&amp;quot; fallacy, and the
Highest Paid Person's Opinion (HIPPO) organizational pattern. Spare
me.&lt;/p&gt;
&lt;p&gt;Indeed. Asking for my confirmation of using Thread-Local Data to avoid
the GIL is -- effectively -- yet another Appeal to Authority. Don't
ask me if you have a good idea. An appeal to me as an authority is
exactly as bad as appeal to some other authority to convince me you've
found a corner case that no one has ever seen before.&lt;/p&gt;
&lt;p&gt;Worse is to ask me and then blah-blah-blah Steve Lott says
blah-blah-blah. Please don't.&lt;/p&gt;
&lt;p&gt;I can be (and often am) wrong.&lt;/p&gt;
&lt;p&gt;Write your code. Measure your code's performance. Tell me your
results. Explore *all* the alternatives while you're at it.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="perhaps-the-individual-was-struggling-to-formulate"&gt;
&lt;h2&gt;Perhaps the individual was struggling to formulate...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-13 08:34:39.085000-04:00&lt;/p&gt;
&lt;p&gt;Perhaps the individual was struggling to formulate and clearly
articulate his problem?&lt;/p&gt;
&lt;p&gt;Perhaps the individual was trying to figure out how to throttle an
application so computations are available for other things?&lt;/p&gt;
&lt;p&gt;Something like use x cores for batch processing and use the other y for
interactive day to day activities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-link-provided-for-using-a-pool-of-worker"&gt;
&lt;h2&gt;The link provided for &amp;quot;Using a pool of worker...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-13 08:21:44.461000-04:00&lt;/p&gt;
&lt;p&gt;The link provided for &amp;quot;Using a pool of workers&amp;quot; refers to Python 2.
The link for Python 3 is below
&lt;a class="reference external" href="https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers"&gt;https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="dask"></category><category term="#python"></category><category term="multiprocessing"></category><category term="threads"></category></entry><entry><title>Python exceptions considered an anti-pattern</title><link href="https://slott56.github.io/2019_03_05-python_exceptions_considered_an_anti_pattern.html" rel="alternate"></link><published>2019-03-05T08:00:00-05:00</published><updated>2019-03-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-03-05:/2019_03_05-python_exceptions_considered_an_anti_pattern.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern"&gt;https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern&lt;/a&gt;
While eloquent and thorough, I remain unconvinced that this is a
significant improvement over try/except.
It's common enough in some functional languages to have strong support
and a long, successful history.
I think it replaces one problem with another. It's not a &amp;quot;solution …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern"&gt;https://sobolevn.me/2019/02/python-exceptions-considered-an-antipattern&lt;/a&gt;
While eloquent and thorough, I remain unconvinced that this is a
significant improvement over try/except.
It's common enough in some functional languages to have strong support
and a long, successful history.
I think it replaces one problem with another. It's not a &amp;quot;solution&amp;quot;.
It's an alternative. Instead of exceptions being raised, they're
returned. Cool.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>On the uselessness of Enum -- wait, what?</title><link href="https://slott56.github.io/2019_02_12-on_the_uselessness_of_enum_wait_what.html" rel="alternate"></link><published>2019-02-12T08:00:00-05:00</published><updated>2019-02-12T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-02-12:/2019_02_12-on_the_uselessness_of_enum_wait_what.html</id><summary type="html">&lt;p&gt;Had a question about an enumerated set of constant values.
&amp;quot;Where do I put these constants?&amp;quot; they asked. It was clear what they
wanted. This is another variation on their personal quest which can be
called &amp;quot;I want Python to have CONST or Final.&amp;quot; It's kind of tedious when
a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Had a question about an enumerated set of constant values.
&amp;quot;Where do I put these constants?&amp;quot; they asked. It was clear what they
wanted. This is another variation on their personal quest which can be
called &amp;quot;I want Python to have CONST or Final.&amp;quot; It's kind of tedious when
a person asks -- repeatedly -- for a feature that's not present in the
form they want it.
&amp;quot;Use Enum,&amp;quot; I said.
&amp;quot;Nah,&amp;quot; they replied. &amp;quot;It's Yet Another Abstraction.&amp;quot;
Wait, what?
This is what I learned from rest of their nonsensical response: There's
an absolute upper bound on abstractions, and Enum is one abstraction too
many. Go ahead count them. This is too many.
Or.
They simply rejected the entire idea of learning something new. They
wanted CONST or Final or some such. And until I provide it, Python is
garbage because it doesn't have constants. (They're the kind of person
that needs to see CONST minutes_per_hour = 60 in every program. When I
ask why they don't also insist on seeing CONST one = 1 they seem shocked
I would be so flippant.)
YAA. Seriously. Too many layers.
As if all of computing wasn't a stack of abstractions on top of stateful
electronic circuits.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="no-one-can-argue-w-all-of-computing-is-a-stack-of"&gt;
&lt;h2&gt;No one can argue w/ all of computing is a stack of...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-02-13 10:21:59.471000-05:00&lt;/p&gt;
&lt;p&gt;No one can argue w/ all of computing is a stack of abstractions.
The question is, for a particular use case; what is the appropriate
level of abstraction?
People can examine articles like &amp;quot;How much abstraction is too much?&amp;quot; at
StackOverFlow to obtain guidance on the appropriate level of
abstraction.
&lt;a class="reference external" href="https://stackoverflow.com/questions/2668355/how-much-abstraction-is-too-much"&gt;https://stackoverflow.com/questions/2668355/how-much-abstraction-is-too-much&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="architecture"></category></entry><entry><title>Eager and Lazy Properties</title><link href="https://slott56.github.io/2019_01_29-eager_and_lazy_properties.html" rel="alternate"></link><published>2019-01-29T21:30:00-05:00</published><updated>2019-01-29T21:30:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-01-29:/2019_01_29-eager_and_lazy_properties.html</id><summary type="html">&lt;p&gt;See this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Pythonista lazyweb: If I have a property spam and the
attribute that backs it is _spam, what do we call that? The
&amp;quot;backing attribute&amp;quot;? The &amp;quot;original property&amp;quot;? Something else? Is
there an official term for this?&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Al Sweigart (&amp;#64;AlSweigart) &lt;a class="reference external" href="https://twitter.com/AlSweigart/status/1090348010041528321?ref_src=twsrc%5Etfw"&gt;January 29,
2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My answer was -- frankly -- vague …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Pythonista lazyweb: If I have a property spam and the
attribute that backs it is _spam, what do we call that? The
&amp;quot;backing attribute&amp;quot;? The &amp;quot;original property&amp;quot;? Something else? Is
there an official term for this?&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Al Sweigart (&amp;#64;AlSweigart) &lt;a class="reference external" href="https://twitter.com/AlSweigart/status/1090348010041528321?ref_src=twsrc%5Etfw"&gt;January 29,
2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My answer was -- frankly -- vague. Twitter being what it is, I should
have written the blog post first and linked to it.&lt;/p&gt;
&lt;p&gt;The use case is this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class X:
    def __init__(self, x):
        self._value = f(x)
    &amp;#64;property
    def value(self):
        return self._value
&lt;/pre&gt;
&lt;p&gt;We've got a property where the returned value is already an instance
variable.&lt;/p&gt;
&lt;p&gt;I'm not a fan.&lt;/p&gt;
&lt;p&gt;This reflects an eager computation strategy. f(x) was computed eagerly
and the value made available via a property. One can justify the use
of a property to make the value read-only, but... still nope.&lt;/p&gt;
&lt;p&gt;There are a lot of alternatives that make more sense to me.&lt;/p&gt;
&lt;div class="section" id="option-1-we-re-all-adults-here"&gt;
&lt;h2&gt;Option 1. We're All Adults Here.&lt;/h2&gt;
&lt;p&gt;Here's an approach I think is better.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class X:
    def __init__(self, x):
        self.value = f(x)
&lt;/pre&gt;
&lt;p&gt;It's read-only because -- really -- if you change it, you break the
class. So don't change it.&lt;/p&gt;
&lt;p&gt;This is my favorite. Read-onlyness is sometimes described has a way
protect utter idiots from breaking a library they don't seem to
understand. Or. It's described as a way to prevent some Evil Genius
Programmer (EGP) from doing something intentionally malicious and
breaking things.&lt;/p&gt;
&lt;p&gt;Bah.&lt;/p&gt;
&lt;p&gt;It's Python. They have access to the source. Why mess around breaking
things this way?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="option-2-lazyiness"&gt;
&lt;h2&gt;Option 2. Lazyiness&lt;/h2&gt;
&lt;p&gt;Here's an approach that hits at the essential feature.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class X:
    def __init__(self, x):
        self.x = x
    &amp;#64;property
    &amp;#64;lru_cache(None)
    def value(self):
        return f(self.x)
&lt;/pre&gt;
&lt;p&gt;This seems to hit at the original intent without an explicit cached
variable. Instead the caching is pushed off into another space. (I'm
writing a chapter on decorators, so this may be a bit much.)&lt;/p&gt;
&lt;p&gt;The idea, though, is to make properties lazy. If they're expensive,
then the result should be cached.&lt;/p&gt;
&lt;p&gt;There may be other choices, but I think lazy and eager cover the
bases. I don't think eager is wrong, but I don't see the need for a
property to hide the attribute created by an eager computation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category></entry><entry><title>Things that start badly</title><link href="https://slott56.github.io/2019_01_29-things_that_start_badly.html" rel="alternate"></link><published>2019-01-29T08:00:00-05:00</published><updated>2019-01-29T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-01-29:/2019_01_29-things_that_start_badly.html</id><summary type="html">&lt;p&gt;Today's Example of Starting Badly: Building HTML.&lt;/p&gt;
&lt;p&gt;The code has a super-simple email message with
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;stuff&lt;/span&gt; &lt;span class="pre"&gt;{data}&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;/tt&gt;. It was jammed
into an email object along with the text version. All very nice.
For a moment, I considered suggesting that f-string substitution
wasn't a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today's Example of Starting Badly: Building HTML.&lt;/p&gt;
&lt;p&gt;The code has a super-simple email message with
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;stuff&lt;/span&gt; &lt;span class="pre"&gt;{data}&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;/tt&gt;. It was jammed
into an email object along with the text version. All very nice.
For a moment, I considered suggesting that f-string substitution
wasn't a good long-term solution, since it doesn't cover anything
more than the most trivial case.&lt;/p&gt;
&lt;p&gt;Two things stopped me from complaining:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The case really was trivial.&lt;/li&gt;
&lt;li&gt;It's administrative code: it sends naggy reminder emails
periodically. Why over-engineer it?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What an idiot I was.&lt;/p&gt;
&lt;p&gt;Today, the &lt;tt class="docutils literal"&gt;{data}&lt;/tt&gt; has been replaced with a complex table
instead of a summary. (Why? The user story evolved. And we needed
to replace the summary with details.)&lt;/p&gt;
&lt;p&gt;The engineer was pretty sure they could use &lt;tt class="docutils literal"&gt;htmlify(data)&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;data.htmlify()&lt;/tt&gt; to transform the data into an HTML structure
without seriously breaking the f-string nature of the app.
I &lt;strong&gt;should have&lt;/strong&gt; commented &amp;quot;Don't build HTML that way, it's a bad
way to start&amp;quot; on the previous release.&lt;/p&gt;
&lt;p&gt;The f-string solution turns rapidly into complexities layered on
complexities dusted over the top with sprinkles of NOPE.&lt;/p&gt;
&lt;p&gt;This is a job for &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt; or
&lt;a class="reference external" href="https://www.makotemplates.org/"&gt;Mako&lt;/a&gt; or something similar.&lt;/p&gt;
&lt;p&gt;There's a step function change in the app's perceived
&amp;quot;complexity&amp;quot;. Instead of a simple f-string, we now have to
populate a template. It goes from one line of code to more than
one (three seems typical.) And. The file-system loader for
templates seems more appropriate rather than hard-coding the
template in the body of the code. So there are now more files in
the app with the HTML templates in them.&lt;/p&gt;
&lt;p&gt;However. The Jinja &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{variable|round(2)}}&lt;/span&gt;&lt;/tt&gt; was an immediate
victory. The use of &lt;tt class="docutils literal"&gt;{%for%}&lt;/tt&gt; to build the HTML table was the
goal, and that simplification was worth the price of entry. Now
we're arguing over CSS nuances to get the columns to look &amp;quot;right.&amp;quot;
Lessons learned.&lt;/p&gt;
&lt;p&gt;Don't let the currently superficial trivial case slide past
without at least a warning. Make the suggestion that functions
like &amp;quot;get template&amp;quot; and &amp;quot;populate template&amp;quot; will be necessary even
for trivial f-string or string.Template processing.&lt;/p&gt;
&lt;p&gt;HTML isn't a first-class part of anything. It's external
serialization.  Yes, it's for people, but it's only serialization.
Serialization has to be separated from the other aspects of the
data gathering, map-reduce summarization, and email distribution.&lt;/p&gt;
&lt;p&gt;There's a pipeline of steps there and the final app should reflect
the complete separation of these concerns. Even if it is admin
overhead.&lt;/p&gt;
</content><category term="Technologies"></category><category term="mako"></category><category term="#python"></category><category term="jinja"></category></entry><entry><title>Code Review</title><link href="https://slott56.github.io/2019_01_24-code_review.html" rel="alternate"></link><published>2019-01-24T07:55:00-05:00</published><updated>2019-01-24T07:55:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-01-24:/2019_01_24-code_review.html</id><summary type="html">&lt;p&gt;I can't actually share all the code. So this feels incomplete. But I
can share what I said about the code. Then you can look at your code
and decide if you've got similar problems to fix.&lt;/p&gt;
&lt;p&gt;My responses were these. I'll expand on them below.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;This appears to be …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I can't actually share all the code. So this feels incomplete. But I
can share what I said about the code. Then you can look at your code
and decide if you've got similar problems to fix.&lt;/p&gt;
&lt;p&gt;My responses were these. I'll expand on them below.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;This appears to be a single cell in a Jupyter notebook? Why isn’t it
a script?&lt;/li&gt;
&lt;li&gt;The code doesn’t look like any effort was made to follow any
conventions. Use black. Or pylint. Make the code look conventional.&lt;/li&gt;
&lt;li&gt;There don’t appear to be any docstring comments. That’s really a very
bad practice.&lt;/li&gt;
&lt;li&gt;The design appears untestable. That’s a very bad practice.&lt;/li&gt;
&lt;li&gt;If this is an example of “production” code, I would suggest it needs
a lot of rework.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's review these in a little more detail.&lt;/p&gt;
&lt;p&gt;Number 1 was based on the file name being &lt;tt class="docutils literal"&gt;something_p36.ipynb.txt&lt;/tt&gt;.
The Jupyter notebookiness of the name is a problem. The &lt;tt class="docutils literal"&gt;_p36&lt;/tt&gt; is
extra creepy, and indicates either a severe problem understanding
how bash &amp;quot;shebang&amp;quot; comments work, or a blatant refusal to simply
use Python3. It's hard to say what's going on, and I didn't even
try to ask because... well... too many other things weren't clear.
Don't make up complex, weird naming rules. Use something.py.
Simple. Flat. Pythonic.&lt;/p&gt;
&lt;p&gt;Number 2 was based on things like this: def PrintParameters(pca): I
hate to get super-pure PEP-8, but this kind of thing is simply hard
to read. There were a LOT of other troubling aspects to the code.
Once this is corrected, some of the other problems will go away, and
we could move forward to more substantial issues.&lt;/p&gt;
&lt;p&gt;Follow existing code styles. Find Python code. The standard library
has a LOT of examples already part of your installation. Read it.&lt;/p&gt;
&lt;p&gt;Enjoy it. Mimic it.&lt;/p&gt;
&lt;p&gt;Use pylint. Always.&lt;/p&gt;
&lt;p&gt;Number 3 and Number 4 are consequences of the bulk of the code being
a flat script with few class or function definitions. Actually, there
were one of each. One class. One function. 240 or so lines of code.
There was no separate &lt;tt class="docutils literal"&gt;__name__ == &amp;quot;__main__&amp;quot;&lt;/tt&gt; section, so I was
generally unhappy with the overall design.&lt;/p&gt;
&lt;p&gt;Also. There's code like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if True:
&lt;/pre&gt;
&lt;p&gt;Yes.  That's a real line of code. Sigh.&lt;/p&gt;
&lt;p&gt;Here's an ancillary problem. If you need to write something like
this, you're doing it wrong.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
##########################
 -- init Stuff
##########################
&lt;/pre&gt;
&lt;p&gt;The code that follows one of these &amp;quot;big billboard comment&amp;quot; sections
&lt;strong&gt;must&lt;/strong&gt; be part of a function or class. It can't be left
floating around with a billboard for demarcation. It should be
refactored into a function (or method of a class), documented, and
tested.&lt;/p&gt;
&lt;p&gt;Did I mention tested?&lt;/p&gt;
&lt;p&gt;It's untestable as written. Sigh.&lt;/p&gt;
&lt;p&gt;Number 5 may be a misunderstanding on my part. The email had this:
&amp;quot;They have produced production code that mathematically optimizes
stuff for [redacted]. So, they are heads up type of people.&amp;quot;&lt;/p&gt;
&lt;p&gt;I'm guessing this is relevant because the team has some &amp;quot;production&amp;quot;
code in Python and consider themselves knowledgeable. Otherwise, this
is noise, and I should have ignored it.&lt;/p&gt;
&lt;p&gt;I'm hopeful they'll use &lt;a class="reference external" href="https://github.com/ambv/black"&gt;black&lt;/a&gt;,
make the code minimally readable, and we can move on to substantial
issues regarding design for testability and overall possible
correctness issues.&lt;/p&gt;
&lt;p&gt;It wasn't the worst code I've seen. But. It shows a lot of room for
growth and improvement.&lt;/p&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="#python"></category></entry><entry><title>Read this: 10 Reasons to Learn Python in 2019</title><link href="https://slott56.github.io/2019_01_22-read_this_10_reasons_to_learn_python_in_2019.html" rel="alternate"></link><published>2019-01-22T08:00:00-05:00</published><updated>2019-01-22T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-01-22:/2019_01_22-read_this_10_reasons_to_learn_python_in_2019.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://dzone.com/articles/why-every-programmer-should-learn-python"&gt;10 Reasons to Learn Python in 2019&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I want to dwell on #4 for a moment.&lt;/p&gt;
&lt;p&gt;The Python community actually has a &lt;a class="reference external" href="https://www.python.org/psf/codeofconduct/"&gt;Code of Conduct&lt;/a&gt;. We try to
stick by it and conferences will have reporting mechanisms in place so
we can educate folks who are being inconsiderate or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://dzone.com/articles/why-every-programmer-should-learn-python"&gt;10 Reasons to Learn Python in 2019&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I want to dwell on #4 for a moment.&lt;/p&gt;
&lt;p&gt;The Python community actually has a &lt;a class="reference external" href="https://www.python.org/psf/codeofconduct/"&gt;Code of Conduct&lt;/a&gt;. We try to
stick by it and conferences will have reporting mechanisms in place so
we can educate folks who are being inconsiderate or disrespectful.&lt;/p&gt;
&lt;p&gt;The consequence of this is a welcoming and intentionally helpful
community. It's hard to emphasize the &amp;quot;intentionally helpful&amp;quot; enough.
We don't have much patience for snark. And we're willing to call each
other out on being unhelpful.&lt;/p&gt;
&lt;p&gt;In my Day Job, we have an in-house Slack channel with well over 1,000
Python folks. The single most common class of questions is a variation
on &amp;quot;My Corporate Firewall Setup Doesn't Let Me Use PIP.&amp;quot; This is
ubiquitous. And confusing. And frustrating for folks who are surprised
there is a corporate firewall.&lt;/p&gt;
&lt;p&gt;We have a number of pinned answers in Slack for this. And -- perhaps
once a week -- someone will patiently repeated the pinned answers for
someone who's truly and deeply in over their head trying to get pip to
work. (We have an in-house PyPI, also, but it requires doing something
in addition to typing &lt;cite&gt;pip install whatever&lt;/cite&gt; at the command line,
and that can require hand-holding.)&lt;/p&gt;
&lt;p&gt;As &lt;a class="reference external" href="https://pythonclock.org/"&gt;Python2 winds to a close&lt;/a&gt;, and we
uncover folks working with Python 2, we have to issue guidance. I've
switched tone from &amp;quot;please consider rewriting your app/tool/framework&amp;quot;
to &amp;quot;we strongly recommend you start using Python 3.&amp;quot; In June, I'm plan
to switch to &amp;quot;You have only six months to convert whatever you're
working on.&amp;quot;&lt;/p&gt;
&lt;p&gt;We've had some sidebar conversations on making sure I'm being properly
positive, supportive, considerate, and respectful of the folks who
think Python2 might be useful.&lt;/p&gt;
&lt;p&gt;The point of the Python community is to help each other. We're
actively and intentionally trying to be helpful and inclusive.&lt;/p&gt;
&lt;div class="section" id="technical-sidebar-conda-and-virtual-environments"&gt;
&lt;h2&gt;Technical Sidebar -- Conda and Virtual Environments&lt;/h2&gt;
&lt;p&gt;What about the trickle of people trying to make use of the built-in
Python2 in Mac OS X or the Python2 that comes with Linux on a
cloud-based server?&lt;/p&gt;
&lt;p&gt;Some important coaching: &lt;strong&gt;Don't Use The OS Default Python&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is kind of negative. It helps to state this positively. &lt;strong&gt;Always
Use A Virtual Environment&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Because we have a *large* community of data scientists, this
becomes: Always Use A Conda Environment.&lt;/p&gt;
&lt;p&gt;And yes, there are some packages that also require a pip install. And
yes, &lt;a class="reference external" href="https://xkcd.com/1987/"&gt;XKCD 1987&lt;/a&gt; describes the consequence
of the rapid growth of Python and the variety of ways it can be made
to work. (While all the strands of spaghetti look like a negative,
they reflect the variety of clever solutions, all of which work
without any problems.)&lt;/p&gt;
&lt;p&gt;Therefore. This.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;cite&gt;conda create --name=working python=3.7 --file conda_install.txt&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;conda activate working&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;python3 -m pip install -r requirements.txt&lt;/cite&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The absolute worst case is a project with two lists of requirements,
one in a conda conda_install.txt and some extra stuff in a
pip conda_install.txt. We're able to use &lt;cite&gt;python3 -m pip install
requirements.txt&lt;/cite&gt; for almost everything.&lt;/p&gt;
&lt;p&gt;If you're just starting out, you can use
&lt;a class="reference external" href="https://conda.io/miniconda.html"&gt;miniconda&lt;/a&gt; to bootstrap
everything else you might need.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="community"></category><category term="virtual-environments"></category><category term="conda"></category></entry><entry><title>Super-picky Writing Advice</title><link href="https://slott56.github.io/2019_01_15-super_picky_writing_advice.html" rel="alternate"></link><published>2019-01-15T08:00:00-05:00</published><updated>2019-01-15T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-01-15:/2019_01_15-super_picky_writing_advice.html</id><summary type="html">&lt;p&gt;There are patterns to bad writing. I'll give some examples based on a
blog post I was sent. It's also based -- indirectly -- on some of
proposals I saw for PyCon and PyDataDC.&lt;/p&gt;
&lt;p&gt;For the conference calls for papers, I can ask a few questions of the
author, but that's about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are patterns to bad writing. I'll give some examples based on a
blog post I was sent. It's also based -- indirectly -- on some of
proposals I saw for PyCon and PyDataDC.&lt;/p&gt;
&lt;p&gt;For the conference calls for papers, I can ask a few questions of the
author, but that's about it.&lt;/p&gt;
&lt;p&gt;For the blog post, I suggested a bunch of changes.&lt;/p&gt;
&lt;p&gt;They balked.&lt;/p&gt;
&lt;p&gt;Why ask for advice and then refuse to do anything?  (We can conjecture
they wanted a &amp;quot;good job&amp;quot; pat on the head. They didn't want to actually
have me give them a list of errors to fix.)&lt;/p&gt;
&lt;p&gt;One of the points of contention was &amp;quot;Not everyone has your depth of
expertise.&amp;quot;&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;The blog post was on Ubuntu admin: something I know approximately
nothing about. Let me step away from being an expert, while sticking
closely with being able to write. I work with editors who -- similarly
-- can write without being deep technology experts. I'm trying to
learn what and how they do it.&lt;/p&gt;
&lt;p&gt;In this case, my editing was based on general patterns of weak
writing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Contradictions&lt;/li&gt;
&lt;li&gt;Redundancy.&lt;/li&gt;
&lt;li&gt;Waffling.&lt;/li&gt;
&lt;li&gt;Special-Casing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Any blog post on Ubuntu admin that starts with &amp;quot;This is not just
another blog post...&amp;quot; has started off with a flat-out contradiction.
It emphatically &lt;strong&gt;is&lt;/strong&gt; another blog post. You can't rise above the
background noise of blog posts by writing a blog post that claims it's
not a blog post. Sheesh. Find a better hook.&lt;/p&gt;
&lt;p&gt;Any blog post on Ubuntu admin that includes &amp;quot;This blog post assumes
the reader is familiar with linux sys administration.&amp;quot; As if --
somehow -- a reader interested in Ubuntu admin could be confused by
the required skills. It's clearly redundant. Cut it.&lt;/p&gt;
&lt;p&gt;(This led to an immense back-and-forth with repeated insistence that
*somehow* someone once got confused and *something* bad happened
to someone. Once. My response was adamant. &amp;quot;It's redundant. The title
says Ubuntu. That covered it. More repetition is an insult to the
reader.&amp;quot;)&lt;/p&gt;
&lt;p&gt;Anything that has &amp;quot;this may nor may not work depending on your
filesystem&amp;quot; is flat-out confusing: it covers both bases. Does it work
or does it not work? Which is it? Clearly, there's some kind of
precondition -- &amp;quot;must be this file system&amp;quot; or &amp;quot;most not be this file
system&amp;quot; -- buried under &amp;quot;may or may not work.&amp;quot; It's not that I know
anything about Ubuntu file systems. But I can spot waffling.&lt;/p&gt;
&lt;p&gt;Indeed, when you look at it, this is a &amp;quot;hook&amp;quot; to make the blog post
useful and interesting. Some advice doesn't work. This advice always
works. Simple statements of fact are better than contradictions and
waffling.&lt;/p&gt;
&lt;p&gt;Finally, there was a cautionary note that replacing &amp;quot;/swapfile&amp;quot; with
&amp;quot;/ swapfile&amp;quot; would brick your OS. Which. Was. Crazy. It's really
difficult to arbitrarily introduce spaces into shell commands and
still have proper syntax. Sometimes a shell command with rando spaces
may have proper syntax and may work. Most commands won't work at all
with a rando space added. Try some and see.&lt;/p&gt;
&lt;p&gt;What's more important is only one random punctuation error was listed.
The special-case nature of this was a tip-off that something was not
right with this advice.&lt;/p&gt;
&lt;p&gt;What about a random &amp;quot;&amp;gt;&amp;quot; in the command? Or a random &amp;quot;|&amp;quot;? Not covered.
A single space was considered worthy of mention. The rest. Meh.&lt;/p&gt;
&lt;p&gt;(If you want details, it's was `dd -of=/swapfile ...`. If asked, I'd
guess `dd -of=/ swapfile` is a syntax error because `swapfile`
isn't a valid operand to `dd`. Not an expert. I didn't check. AFAIK,
the author didn't actually check, either.)&lt;/p&gt;
&lt;p&gt;None of this editing was based on any vast expertise. It was simple
editorial work looking for some common problems with hasty writing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Avoid clear contradictions.&lt;/li&gt;
&lt;li&gt;Avoid redundancy.&lt;/li&gt;
&lt;li&gt;Don't waffle.&lt;/li&gt;
&lt;li&gt;Special cases are instances of a more general pattern. The pattern is
more important than the case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the contentious back-and-forth issues was &amp;quot;I'm not writing a
book, it's only a blog post.&amp;quot;&lt;/p&gt;
&lt;p&gt;Wait. What? Blog posts are often &lt;strong&gt;more&lt;/strong&gt; widely-read than books. Look
at Stack Overflow. If one of my books had the kind of readership my
Stack Overflow answers have, I'd be living on royalty payments alone.&lt;/p&gt;
&lt;p&gt;A blog post requires the same depth of care as a book.&lt;/p&gt;
&lt;p&gt;This applies to proposed talks at conferences, also. The proposal
needs to be carefully edited to reflect the final presentation's care
and quality.&lt;/p&gt;
&lt;p&gt;Thank goodness, most of the 100's of proposals I've looked at rarely
have the four obvious problems listed above.&lt;/p&gt;
&lt;p&gt;The problems I see in conference proposals are minor.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Incompleteness. A 45 minute talk boiled down to 4 bullet points
doesn't give us any confidence. It's hard to imagine filling the
whole time with useful content when looking at a four-sentence
outline. Will it be rambling digressions? Or will we have disgruntled
attendees who had hoped for more?&lt;/li&gt;
&lt;li&gt;Weirdly cute style. Things like &amp;quot;This is where I jokingly outline
something something and the real fun begins.&amp;quot; We assume everyone is
witty and charming, you don't need to tell us. We assume all talks
will be fun. Can we move on to the Python (or PyData) topics you'll
cover?&lt;/li&gt;
&lt;li&gt;Sales Pitches. &amp;quot;[Speaker's name] is a respected industry expert who
delivers exciting and transformative keynote addresses and will
dynamically cover the state-of-the-art blah blah blah...&amp;quot; Please.
What Python topic is this? We like to review the outlines without
speaker information; we need to focus on the content. Subverting this
by including the speaker's name in the description or outline is
irritating.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm really pleased we see very few &lt;a class="reference external" href="https://github.com/python/pycon-code-of-conduct"&gt;PyCon
Code-of-Conduct&lt;/a&gt;
problems in the calls for proposals. That is a delight.
Editing is hard work. I'm sorry to report that editing means making
changes. If you ask for editorial advice, it helps to listen.&lt;/p&gt;
</content><category term="Technologies"></category><category term="writing"></category><category term="pycon"></category><category term="#python"></category></entry><entry><title>NumFocus and PyData</title><link href="https://slott56.github.io/2019_01_08-numfocus_and_pydata.html" rel="alternate"></link><published>2019-01-08T08:00:00-05:00</published><updated>2019-01-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-01-08:/2019_01_08-numfocus_and_pydata.html</id><content type="html">&lt;p&gt;Videos are up from PyDataDC 2018.  See all the PyData talks at &lt;a class="reference external" href="https://www.youtube.com/user/PyDataTV"&gt;PyDataTV
on YouTube&lt;/a&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="pydata"></category><category term="#python"></category></entry><entry><title>PyCon Call for Proposals</title><link href="https://slott56.github.io/2019_01_01-pycon_call_for_proposals.html" rel="alternate"></link><published>2019-01-01T08:00:00-05:00</published><updated>2019-01-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2019-01-01:/2019_01_01-pycon_call_for_proposals.html</id><summary type="html">&lt;p&gt;PyCon CFP closes in a day or so.
See &lt;a class="reference external" href="https://us.pycon.org/2019/speaking/"&gt;https://us.pycon.org/2019/speaking/&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;After looking at 100's of proposals there are several broad
categories.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some cool stuff I wrote (or helped write, or contributed to)&lt;/li&gt;
&lt;li&gt;Some cool aspect of Python the language&lt;/li&gt;
&lt;li&gt;Some cool thing happening …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;PyCon CFP closes in a day or so.
See &lt;a class="reference external" href="https://us.pycon.org/2019/speaking/"&gt;https://us.pycon.org/2019/speaking/&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;After looking at 100's of proposals there are several broad
categories.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some cool stuff I wrote (or helped write, or contributed to)&lt;/li&gt;
&lt;li&gt;Some cool aspect of Python the language&lt;/li&gt;
&lt;li&gt;Some cool thing happening in the community&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are -- of course -- refined into separate tracks by the program
committee. But as a reader of outlines, there are a few BIG buckets I
tend to throw things into.&lt;/p&gt;
&lt;p&gt;There are some tangentially Python things.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using k8s (or some other tool or framework) with Python. The focus is
often the tool, not Python.&lt;/li&gt;
&lt;li&gt;Doing some machine learning with Python. The focus is often on the ML
application domain or the cool model that got produced. Again, Python
sometimes feels secondary.&lt;/li&gt;
&lt;li&gt;Optimizing a personal (or enterprise) workflow or CI/CD pipeline.
This can be helpful. But it can sometimes skip past Python and focus
on IDE or something not solidly Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the most challenging are the personal journeys. These are
often interesting stories. We like to see how others have succeeded.
But. (And this is important.) Some of these cool personal journeys
are only tangentially Pythonic, which can be disappointing. Some
people can make good things happen in spite of big obstacles.&lt;/p&gt;
&lt;p&gt;A personal journey can happen with a lot of technologies. When the
proposal doesn't seem to show how Python was a unique enabler of the
journey, then it's a cool talk for SXSW or OSCON, but might not be
ideal for PyCon.&lt;/p&gt;
&lt;p&gt;It's an honor to see everyone's ideas streaming through my in-box.&lt;/p&gt;
</content><category term="Technologies"></category><category term="pycon"></category><category term="#python"></category></entry><entry><title>Using Python instead of bash</title><link href="https://slott56.github.io/2018_11_13-using_python_instead_of_bash.html" rel="alternate"></link><published>2018-11-13T08:00:00-05:00</published><updated>2018-11-13T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-11-13:/2018_11_13-using_python_instead_of_bash.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/capital-one-tech/bashing-the-bash-replacing-shell-scripts-with-python-d8d201bc0989"&gt;Bashing the Bash — Replacing Shell Scripts with
Python&lt;/a&gt;
for some concrete examples of stuff you can do in Python or the shell.&lt;/p&gt;
&lt;p&gt;And yes, it's a good, workable idea.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's unit testable.&lt;/li&gt;
&lt;li&gt;It's easier to read.&lt;/li&gt;
&lt;li&gt;It may be faster. Not that you'd notice unless you've really made
a …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/capital-one-tech/bashing-the-bash-replacing-shell-scripts-with-python-d8d201bc0989"&gt;Bashing the Bash — Replacing Shell Scripts with
Python&lt;/a&gt;
for some concrete examples of stuff you can do in Python or the shell.&lt;/p&gt;
&lt;p&gt;And yes, it's a good, workable idea.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's unit testable.&lt;/li&gt;
&lt;li&gt;It's easier to read.&lt;/li&gt;
&lt;li&gt;It may be faster. Not that you'd notice unless you've really made
a terrible mistake and written some gigantic application as a shell
script.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While you're at it, check out the overall
blog: &lt;a class="reference external" href="https://medium.com/capital-one-tech"&gt;https://medium.com/capital-one-tech&lt;/a&gt;. There's a lot going on.&lt;/p&gt;
</content><category term="Technologies"></category><category term="bash"></category><category term="#python"></category></entry><entry><title>PyData 2018 Washington, DC</title><link href="https://slott56.github.io/2018_11_06-pydata_2018_washington_dc.html" rel="alternate"></link><published>2018-11-06T08:00:00-05:00</published><updated>2018-11-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-11-06:/2018_11_06-pydata_2018_washington_dc.html</id><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://pydata.org/dc2018/"&gt;https://pydata.org/dc2018/&lt;/a&gt;
You do need to get your tickets ASAP. The
&lt;a class="reference external" href="https://pydata.org/dc2018/schedule/"&gt;schedule&lt;/a&gt; is fabulous.
Hotel rooms are still available, so don't waste any time getting
connected.&lt;/p&gt;
</content><category term="Technologies"></category><category term="pydata"></category><category term="numfocus"></category><category term="#python"></category></entry><entry><title>The SourceForge vs. GitHub Conundrum</title><link href="https://slott56.github.io/2018_10_30-the_sourceforge_vs_github_conundrum.html" rel="alternate"></link><published>2018-10-30T08:00:00-04:00</published><updated>2018-10-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-10-30:/2018_10_30-the_sourceforge_vs_github_conundrum.html</id><summary type="html">&lt;p&gt;Or &amp;quot;When is it time to move?&amp;quot;&lt;/p&gt;
&lt;p&gt;I've got &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;https://sourceforge.net/projects/stingrayreader/&lt;/a&gt; which has
been on SourceForge since forever.&lt;/p&gt;
&lt;p&gt;Really since about 2014. Not that long. But. Maybe long enough?&lt;/p&gt;
&lt;p&gt;The velocity of change is relatively slow.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;(And this is a big however.) SourceForge seems kind of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Or &amp;quot;When is it time to move?&amp;quot;&lt;/p&gt;
&lt;p&gt;I've got &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;https://sourceforge.net/projects/stingrayreader/&lt;/a&gt; which has
been on SourceForge since forever.&lt;/p&gt;
&lt;p&gt;Really since about 2014. Not that long. But. Maybe long enough?&lt;/p&gt;
&lt;p&gt;The velocity of change is relatively slow.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;(And this is a big however.) SourceForge seems kind of complicated
when compared with Github.&lt;/p&gt;
&lt;p&gt;It's not a completely fair comparison. SourceForge has a *lot* of
features. I don't use very many of those features.&lt;/p&gt;
&lt;p&gt;The troubling issues are these.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Documentation.
SourceForge -- while it has a Git interface --
doesn't handle my documentation very well. Instead of a docs
directory, I do a separate upload of the HTML. It's inelegant.
SourceForge may handle this more smoothly nowadays. Or maybe I should
switch to readthedocs?&lt;/li&gt;
&lt;li&gt;The Literate Programming Workflow.
There's an extra step (or two)
in LP workflows. The PyLit3 synchronization to create the working
Python from the RST source. This is followed by the ubiquitous steps
creation of a release, creation of a distribution, and the upload to
PyPI. I don't have an elegant handle on this because my velocity of
change is so low. SourceForge imposed a &amp;quot;make your own ZIP file&amp;quot;
mentality that could be replaced by a nicer &amp;quot;use PyPI&amp;quot; approach.&lt;/li&gt;
&lt;li&gt;Clunky Design Issue.
I've uncovered a clunky, stateful design
problem in the StingrayReader. I really really really need to fix it.
And while fixing it, why not move to Github?&lt;/li&gt;
&lt;li&gt;Compatibility Testing.
The StingrayReader seems to work with
Python 3.5 and up. I don't have a formal Tox suite. I think it works
with a number of versions of XLRD. And it *should* be amenable to
other tools for Excel processing. Not sure. And (until I start using
tox) can't tell.&lt;/li&gt;
&lt;li&gt;Type Hints.
See #3. The stateful design problem can be finessed
into a much more elegant use of NamedTuples. And then mypy can be
used.&lt;/li&gt;
&lt;li&gt;Unit Tests.
Currently, the testing is all unittest.TestCase. I
really want to convert to pytest and simplify all of it.&lt;/li&gt;
&lt;li&gt;Lack of a proper workflow in the first place.
See #2. It's a
more-or-less sitting in the master branch of a git repo that's part
of SourceForge. That's kind of shabby.&lt;/li&gt;
&lt;li&gt;Version Numbering Vagueness.
When I was building my own Zip
archives from the code manually (because that's the way SourceForge
worked.) I wasn't super careful about semantic versioning, and I've
been release patch-number versions for a while. Which is wrong. A few
of those versions included new features. Minor, but features.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But. One tiny new feature. So. It will be release 4.5.
See &lt;a class="reference external" href="https://sourceforge.net/p/stingrayreader/blog/2018/10/moving-to-github/"&gt;https://sourceforge.net/p/stingrayreader/blog/2018/10/moving-to-github/&lt;/a&gt;
for status, also&lt;/p&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="stingray reader"></category><category term="github"></category><category term="source forge"></category></entry><entry><title>The Edge of the Envelope</title><link href="https://slott56.github.io/2018_10_16-the_edge_of_the_envelope.html" rel="alternate"></link><published>2018-10-16T08:00:00-04:00</published><updated>2018-10-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-10-16:/2018_10_16-the_edge_of_the_envelope.html</id><summary type="html">&lt;p&gt;I don't -- generally -- think of myself as an edge-of-the-envelope
developer. I'm a tried-and-proven kind of engineer. I want stuff that's
been around for years, with a long history of changes.
Except.
Today.
Currently, I'm revising &lt;a class="reference external" href="https://www.packtpub.com/application-development/mastering-object-oriented-python"&gt;Mastering Object-Oriented
Python&lt;/a&gt;.
Second Edition.
That means upgrading everything to Python 3.7 with full …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don't -- generally -- think of myself as an edge-of-the-envelope
developer. I'm a tried-and-proven kind of engineer. I want stuff that's
been around for years, with a long history of changes.
Except.
Today.
Currently, I'm revising &lt;a class="reference external" href="https://www.packtpub.com/application-development/mastering-object-oriented-python"&gt;Mastering Object-Oriented
Python&lt;/a&gt;.
Second Edition.
That means upgrading everything to Python 3.7 with full type hints
throughout almost all of the 18 chapters. (SQLAlchemy presents some
problems, so we're not going deep there.)
The chapter on foundational WSGI applications is *&lt;strong&gt;totally&lt;/strong&gt;*
broken. I can't get anything to work with mypy. (The unit tests run, but
mypy complains. Loudly.) Of course, I tried every wrong thing for three
solid days. Then I pulled the stub file from typeshed and realized how
dumb I was.
Okay. I finally got the correct type hints. Yay!
But.
Something in &lt;strong&gt;mypy&lt;/strong&gt; is balking at the start_response() function calls.
Too many arguments.
Read the issues. Hm. Stack Overflow. Hm.
Just to be &lt;strong&gt;sure&lt;/strong&gt;, I updated to the new 0.630 release in September,
2018.
Problem solved. So. I've arrived at the edge of the envelope. I now
require the absolutely latest and greatest mypy release. By the time I'm
done with the rewrites, this release will be ancient history. But today,
it was wonderful to get past the examples.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="mypy"></category><category term="mastering object-oriented python"></category></entry><entry><title>Data Modeling Nightmare -- XML, HTML, and Markdown</title><link href="https://slott56.github.io/2018_09_18-data_modeling_nightmare_xml_html_and_markdown.html" rel="alternate"></link><published>2018-09-18T08:00:00-04:00</published><updated>2018-09-18T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-09-18:/2018_09_18-data_modeling_nightmare_xml_html_and_markdown.html</id><summary type="html">&lt;p&gt;Here's a particularly tangled and difficult problem. It arises because
I have another blog. Specifically this: &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;Team Red
Cruising&lt;/a&gt;. And it's
an unholy mess.&lt;/p&gt;
&lt;p&gt;There are two important features of the &lt;em&gt;Team Red Cruising&lt;/em&gt; blog.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's managed with off-line editor(s) so I can write posts from the
boat and …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's a particularly tangled and difficult problem. It arises because
I have another blog. Specifically this: &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;Team Red
Cruising&lt;/a&gt;. And it's
an unholy mess.&lt;/p&gt;
&lt;p&gt;There are two important features of the &lt;em&gt;Team Red Cruising&lt;/em&gt; blog.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's managed with off-line editor(s) so I can write posts from the
boat and then upload them when I get connectivity. Welcome to being a
technomad -- I don't always have a web-based blog editor available.&lt;/li&gt;
&lt;li&gt;It was actually created with two different off-line editors over a
period of years: &lt;a class="reference external" href="https://support.apple.com/downloads/iweb"&gt;iWeb&lt;/a&gt;
and &lt;a class="reference external" href="http://www.karelia.com/products/sandvox/"&gt;Sandvox&lt;/a&gt;. iWeb is
long dead. Sandvox hasn't seen many updates recently, and I think I'd
like to move on to something newer and &amp;quot;better&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(In this case, &amp;quot;better&amp;quot; means iOS-friendly. e.g.,
&lt;a class="reference external" href="https://www.getblogo.com/"&gt;Blogo&lt;/a&gt; or &lt;a class="reference external" href="https://blogpadpro.com/"&gt;BlogPad
Pro&lt;/a&gt;. &lt;strong&gt;Also&lt;/strong&gt;. Blogo's support site seems
to be a right mess. Not a good look. They're working on it.)&lt;/p&gt;
&lt;p&gt;The blog isn't the unholy mess. We'll get to the mess below. First,
however some background on the overall strategy. I want to move my
content. What's involved? There are several things in play: the
hosting, the target, and the source. So. Essentially. Everything.&lt;/p&gt;
&lt;div class="section" id="changing-the-hosting-platform"&gt;
&lt;h2&gt;Changing the Hosting Platform&lt;/h2&gt;
&lt;p&gt;Both of my legacy tools would export and upload the changes to my
hosting service directly, avoiding the overheads of having any complex
hosting software. The site was static and served simply from the
filesystem via Apache httpd. Publishing was an SFTP transfer to the
server. Nothing more. The &amp;quot;platform&amp;quot; was almost nothing.&lt;/p&gt;
&lt;p&gt;(I could switch to using an Amazon S3 bucket and a DNS entry and it
would work nicely.)&lt;/p&gt;
&lt;p&gt;Both of these offline editing tools have a tiny bias toward working
with hosting services like WordPress. Blogo claims it can also work
with Medium, and Blogger, as well.&lt;/p&gt;
&lt;p&gt;This means running Wordpress on top of my default SFTP/Apache
configuration. I use A2 Hosting, so this is really easy to do.&lt;/p&gt;
&lt;p&gt;So. The hosting is more-or-less settled. I'll do very little. (Dealing
with breaking links is a separate hand-wringing exercise.)&lt;/p&gt;
&lt;p&gt;In order to move from iWeb and Sandvox to another tool, and start
using WordPress, I have two strategies for converting the content.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ignore my legacy content. Leave it where it is, more-or-less
uneditable. The tool(s) are gone, all that's left is the static HTML
output from the tool.&lt;/li&gt;
&lt;li&gt;Gather the legacy content and migrate it to WordPress and then pick
an offline tool that works with WordPress.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've already done strategy #1, when I converted from iWeb to Sandvox.
I left the old iWeb stuff out there, and moved to a new URL path with
new content. While a clever menu structure can make it look like it's
all one multi-year blog, the pages themselves are vastly different in
the way they look. There's no comprehensive search. And, of course, I
can't easily maintain the old iWeb stuff.&lt;/p&gt;
&lt;p&gt;Having one #1, I'm now sure that's a bad idea.&lt;/p&gt;
&lt;p&gt;An advantage of moving to WordPress is the ability to have all of the
content in one, uniform database. WordPress has export functionality,
so the next tool is a distinct possibility.&lt;/p&gt;
&lt;p&gt;Note that SandVox seems to have a distinct problem trying to import
iWeb's published content. They have a cool HTML scraper, but iWeb
relies on JavaScript, and scraper doesn't do well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-to-wordpress"&gt;
&lt;h2&gt;Getting to WordPress&lt;/h2&gt;
&lt;p&gt;What we're looking at is a fairly complex data structure. While I'd
like to look at this from a vast and reserved distance (i.e., in the
abstract) I have a very concrete problem. So, we're forced to consider
this from the WordPress POV.&lt;/p&gt;
&lt;p&gt;We have a WordPress &amp;quot;Site&amp;quot; with a long series of posts and some pages.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://yuml.me/0eee4623.png"&gt;&lt;img alt="UML diagram" src="http://yuml.me/0eee4623.png" style="width: 186px; height: 320px;" /&gt;&lt;/a&gt;
&lt;p&gt;The essence here is that the content can -- to an extent -- be
converted to Markdown. The titles and dates are easy to preserve. The
body? Not so much.&lt;/p&gt;
&lt;p&gt;We can, as an alternative to Markdown, use some kind of skinny HTML
that WordPress supports. I think WP can handle a structure free of
class names, and using a most of the available HTML tags.&lt;/p&gt;
&lt;p&gt;Most of the blog content is relatively flat. The block structure is
generally limited to images, block quotes, paragraphs, ordered and
unordered lists. The inline tags in use seem to be a, img, strong, em,
and a few span tags for font changes.&lt;/p&gt;
&lt;p&gt;The complexity, then, is building a useful content model from the
source. There are a few AST's for Markdown.
&lt;a class="reference external" href="https://github.com/rtfd/CommonMark-py"&gt;commonmark.py&lt;/a&gt; might have a
useful AST.  It's not complex, so it may be simpler to define my own.&lt;/p&gt;
&lt;p&gt;It's hard to understand the inline blocks in mistletoe. The
python-markdown project uses ElementTree objects to build the AST. I'm
not a fan of this because I'm not parsing Markdown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-from-well-it-s-complicated"&gt;
&lt;h2&gt;Starting From -- Well, it's Complicated&lt;/h2&gt;
&lt;p&gt;There are -- as noted above -- two sources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sandvox.&lt;/li&gt;
&lt;li&gt;iWeb.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Sandvox desktop &amp;quot;database&amp;quot; structure is opaque. The media is easy
to find. The content is some kind of binary-encoded data with headers
that tell me a little about the XCode environment, but nothing else.&lt;/p&gt;
&lt;p&gt;To read this, I have to scrape the HTML using Beautiful Soup. It
involves processing like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
content = soup.html.body.find(&amp;quot;div&amp;quot;, id=&amp;quot;main-content&amp;quot;)
article = content.find(class_=&amp;quot;article-content&amp;quot;).find(class_=&amp;quot;RichTextElement&amp;quot;).div
&lt;/pre&gt;
&lt;p&gt;Find a nested &lt;tt class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/tt&gt; with a target ID. Inside that &amp;lt;div&amp;gt; is where the
article can be found.&lt;/p&gt;
&lt;p&gt;This seems to work out pretty well. Almost everything I want to
preserve can be -- sort of -- mushed into Markdown.&lt;/p&gt;
&lt;p&gt;The iWeb desktop &amp;quot;database&amp;quot; is XML. The published HTML depends on
Javascript and is hard to work with. The XML is -- of course --
densely wordy and convoluted as can be. But the words and markup are
there.  I can use ElementTree to walk down through XML to locate the
right tags.&lt;/p&gt;
&lt;p&gt;There's a lot of code like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
main_layer = child_root.find('ns0:site-page/ns0:drawables/ns0:main-layer', ns)
&lt;/pre&gt;
&lt;p&gt;This example digs into site pages, and nested drawables, and main
layers of content.  Eventually, we wind up looking at &amp;lt;p&amp;gt;, &amp;lt;span&amp;gt;,
&amp;lt;attachment-ref&amp;gt;, and &amp;lt;link&amp;gt; tags in the XML to build the relevant
content.&lt;/p&gt;
&lt;p&gt;The nuance is style. They're not part of the inline markup. They're
stored separately, and included by reference. Each of the four tags
that seem to be in use have a style attribute that references styles
defined within the posting. Once these references are resolved, I
think Mardown can be generated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-unholy-mess"&gt;
&lt;h2&gt;The Unholy Mess&lt;/h2&gt;
&lt;p&gt;The hateful part of this is the disconnect between HTML (and XML) and
Markdown. The source data permits indefinite nesting of tags.
Semantically meaningless &amp;lt;p&amp;gt;&amp;lt;p&amp;gt;words&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt; are legal. The
&amp;quot;flattening&amp;quot; from HTML/XML to Markdown is worrisome: what if I trash
an entry by missing something important?&lt;/p&gt;
&lt;p&gt;Ideally, it's this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://yuml.me/41ba6176.png"&gt;&lt;img alt="UML diagram" src="http://yuml.me/41ba6176.png" style="width: 272px; height: 320px;" /&gt;&lt;/a&gt;
&lt;p&gt;Pragmatically, HTML/XML can be more complex. This diagram assumes we
won't have paragraphs inside list items. HTML permits it. It's
redundant in Markdown.&lt;/p&gt;
&lt;p&gt;Worse, of course, are the inline tags. HTML has a kabillion of them.
The software I've been using seems to limit me to &amp;lt;img&amp;gt;, &amp;lt;strong&amp;gt;,
&amp;lt;em&amp;gt;, and &amp;lt;a&amp;gt;. HTML/XML allows nesting. Markdown doesn't.&lt;/p&gt;
&lt;p&gt;Ideally, I can reframe the inline tags to create a flat sequence of
styled-text objects within any of the tags.&lt;/p&gt;
&lt;p&gt;Right now. Headaches.&lt;/p&gt;
&lt;p&gt;Working on the code. It's not a general solution to anyone else's
problem. But. I'm hoping -- as I beat the problem into submission --
to find a way to make some useful tutorial materials on mapping
between complex, and different, data structures.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="xml"></category><category term="content management"></category><category term="blogging"></category><category term="HTML"></category><category term="markdown"></category></entry><entry><title>Handy Flask Configuration -- Bookmark the original article</title><link href="https://slott56.github.io/2018_09_04-handy_flask_configuration_bookmark_the_original_article.html" rel="alternate"></link><published>2018-09-04T08:00:00-04:00</published><updated>2018-09-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-09-04:/2018_09_04-handy_flask_configuration_bookmark_the_original_article.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/429285908953579520/InZKng9-_normal.jpeg" /&gt;
&lt;p&gt;&lt;strong&gt;Pycoders Weekly(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/pycoders?s=11"&gt;&amp;#64;pycoders&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/pycoders/status/1030123521983348736?s=11"&gt;8/16/18, 12:06 PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Configure Python 3, Flask andGunicorn on Ubuntu 18.04 LTS –&lt;a class="reference external" href="https://t.co/1oB0nJXeeG"&gt;bit.ly/2vRZYQR&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We worked through this about a year ago, &lt;strong&gt;without&lt;/strong&gt; the help of this
post. Having the article would have saved us some time and effort. You
should …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/429285908953579520/InZKng9-_normal.jpeg" /&gt;
&lt;p&gt;&lt;strong&gt;Pycoders Weekly(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/pycoders?s=11"&gt;&amp;#64;pycoders&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/pycoders/status/1030123521983348736?s=11"&gt;8/16/18, 12:06 PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Configure Python 3, Flask andGunicorn on Ubuntu 18.04 LTS –&lt;a class="reference external" href="https://t.co/1oB0nJXeeG"&gt;bit.ly/2vRZYQR&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We worked through this about a year ago, &lt;strong&gt;without&lt;/strong&gt; the help of this
post. Having the article would have saved us some time and effort. You
should bookmark it.&lt;/p&gt;
&lt;p&gt;We liked this tech stack because it was simple and effective.
The team I'm on now is using NGINX and uWSGI as well as Python3 and
Flask. It's also effective and it's also pretty simple. It has a few
more moving parts, but works reliably.&lt;/p&gt;
</content><category term="Technologies"></category><category term="gunicorn"></category><category term="flask"></category><category term="#python"></category></entry><entry><title>Cool success story of Cython</title><link href="https://slott56.github.io/2018_08_28-cool_success_story_of_cython.html" rel="alternate"></link><published>2018-08-28T08:00:00-04:00</published><updated>2018-08-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-08-28:/2018_08_28-cool_success_story_of_cython.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/952818577719091200/rBCQPkA9_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Real Python(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/realpython?s=11"&gt;&amp;#64;realpython&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/realpython/status/1024472543237992449?s=11"&gt;7/31/18, 9:51PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A multi-core Python HTTPserver (much) faster than Go(spoiler: Cython)`nexedi.com/NXD-Blog.Multi… &amp;lt;&lt;a class="reference external" href="https://t.co/mlRqTMwmxu"&gt;https://t.co/mlRqTMwmxu&lt;/a&gt;&amp;gt;`__&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.nexedi.com/NXD-Blog.Multicore.Python.HTTP.Server"&gt;https://www.nexedi.com/NXD-Blog.Multicore.Python.HTTP.Server&lt;/a&gt;
This is handy. It makes perfect sense that Python -- with a little
help …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/952818577719091200/rBCQPkA9_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Real Python(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/realpython?s=11"&gt;&amp;#64;realpython&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/realpython/status/1024472543237992449?s=11"&gt;7/31/18, 9:51PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A multi-core Python HTTPserver (much) faster than Go(spoiler: Cython)`nexedi.com/NXD-Blog.Multi… &amp;lt;&lt;a class="reference external" href="https://t.co/mlRqTMwmxu"&gt;https://t.co/mlRqTMwmxu&lt;/a&gt;&amp;gt;`__&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.nexedi.com/NXD-Blog.Multicore.Python.HTTP.Server"&gt;https://www.nexedi.com/NXD-Blog.Multicore.Python.HTTP.Server&lt;/a&gt;
This is handy. It makes perfect sense that Python -- with a little
help -- can be compiled down to super-fast code. Hopefully, the
Cython world will continue to evolve toward using native Python type
hints.&lt;/p&gt;
&lt;p&gt;When Cython uses fully-native type hints, it becomes a
super-convenient and &lt;strong&gt;transparent&lt;/strong&gt; performance booster.
Without full-native type hints it becomes a place where bugs are
injected as part of trying to improve performance.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>Python Dependency Management</title><link href="https://slott56.github.io/2018_08_21-python_dependency_management.html" rel="alternate"></link><published>2018-08-21T08:00:00-04:00</published><updated>2018-08-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-08-21:/2018_08_21-python_dependency_management.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://tech.instacart.com/freezing-pythons-dependency-hell-in-2018-f1076d625241"&gt;Freezing Python’s Dependency Hell in
2018&lt;/a&gt;
Excellent advice.
Excepot for the &amp;quot;Don't use Anaconda.&amp;quot; Yes. It's a big download. Odds are
good you'll need most of it. So. Just do it now.
The (miniconda + environment.yml) as an entry point is really good. The
&amp;quot;rely on people to actually …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://tech.instacart.com/freezing-pythons-dependency-hell-in-2018-f1076d625241"&gt;Freezing Python’s Dependency Hell in
2018&lt;/a&gt;
Excellent advice.
Excepot for the &amp;quot;Don't use Anaconda.&amp;quot; Yes. It's a big download. Odds are
good you'll need most of it. So. Just do it now.
The (miniconda + environment.yml) as an entry point is really good. The
&amp;quot;rely on people to actually know and consistently use their best
practices&amp;quot; doesn't seem like a problem, it seems like a consequence of
an evolving software ecosystem.&lt;/p&gt;
</content><category term="Technologies"></category><category term="Anaconda"></category><category term="#python"></category></entry><entry><title>Why is Python so slow?</title><link href="https://slott56.github.io/2018_08_14-why_is_python_so_slow.html" rel="alternate"></link><published>2018-08-14T08:00:00-04:00</published><updated>2018-08-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-08-14:/2018_08_14-why_is_python_so_slow.html</id><summary type="html">&lt;p&gt;This is brilliant.
&lt;a class="reference external" href="https://hackernoon.com/why-is-python-so-slow-e5074b6fe55b?source=emailShare-f2cdc4351994-1532050239"&gt;Why is Python so
slow?&lt;/a&gt;
by Anthony Shaw
It covers three aspects of the implementation in a respectable level of
detail. Helpful information. Bookmark it to help stop pointless
bickering with people who don't understand the value of getting
something to run right now vs. getting something …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is brilliant.
&lt;a class="reference external" href="https://hackernoon.com/why-is-python-so-slow-e5074b6fe55b?source=emailShare-f2cdc4351994-1532050239"&gt;Why is Python so
slow?&lt;/a&gt;
by Anthony Shaw
It covers three aspects of the implementation in a respectable level of
detail. Helpful information. Bookmark it to help stop pointless
bickering with people who don't understand the value of getting
something to run right now vs. getting something that will eventually
run and be fast.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Patient Crawling and Possible Phishing</title><link href="https://slott56.github.io/2018_07_17-patient_crawling_and_possible_phishing.html" rel="alternate"></link><published>2018-07-17T08:00:00-04:00</published><updated>2018-07-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-07-17:/2018_07_17-patient_crawling_and_possible_phishing.html</id><summary type="html">&lt;p&gt;Once every few months I get an email like this. What is it? Phishing?&lt;/p&gt;
&lt;p&gt;I've finally looked into it, and learned two important lessons.&lt;/p&gt;
&lt;p&gt;Here's the body of the email.&lt;/p&gt;
&lt;blockquote&gt;
Hello there,
Your page
&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C364310209/E20080407095503.html"&gt;http://www.itmaybeahack.com/homepage/iblog/C364310209/E20080407095503.html&lt;/a&gt;
has some good references to cyber security …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Once every few months I get an email like this. What is it? Phishing?&lt;/p&gt;
&lt;p&gt;I've finally looked into it, and learned two important lessons.&lt;/p&gt;
&lt;p&gt;Here's the body of the email.&lt;/p&gt;
&lt;blockquote&gt;
Hello there,
Your page
&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C364310209/E20080407095503.html"&gt;http://www.itmaybeahack.com/homepage/iblog/C364310209/E20080407095503.html&lt;/a&gt;
has some good references to cyber security so I wanted to get in
touch with you. I've recently written an article &lt;strong&gt;The 6 Types Of
Cyber Attacks To Protect Against In 2018&lt;/strong&gt; and was wondering if
you thought my article could be a good addition to your page.
You can read my article right here:
&lt;a class="reference external" href="https://pagely.com/blog/cyber-attacks-in-2018/"&gt;https://pagely.com/blog/cyber-attacks-in-2018/&lt;/a&gt;
I would like to hear your opinion on this article. Also, if you
find it useful, please consider linking to it from your page I
mentioned earlier. If you prefer you may republish the article.
Let me know what you think.
Thank you very much,&lt;/blockquote&gt;
&lt;p&gt;Really?&lt;/p&gt;
&lt;p&gt;The page they cited has three (3) external links. One is to actual
cyber security content. Another now gets redirected to generic
advertising, and the third (like the original blog post) is a decade
old.&lt;/p&gt;
&lt;p&gt;What does this mean?&lt;/p&gt;
&lt;p&gt;Clearly, it means some bot found my page. One of the links was to
something they're trying to SEO boost. (How do I know it's SEO? I
don't. The email address is similar to an SEO boosting company, so it
seems like that's what's going on here.)&lt;/p&gt;
&lt;p&gt;I've been haphazard about responding to these because I'm a
fundamentally charitable person.&lt;/p&gt;
&lt;p&gt;Or I'm a total pushover to certain kinds of social engineering. You
choose.&lt;/p&gt;
&lt;p&gt;You see the appeal to my vanity in the email? They read my ancient
content! Swoon!&lt;/p&gt;
&lt;p&gt;The email looks personal. There's a name. Spelled consistently. With
no digits in it. Someone read my content and reached out to me! I'm in
love! Ah! Sweet Mystery of Life at last, I've found you!&lt;/p&gt;
&lt;p&gt;The email makes me think -- somehow -- it's not a bot and there's a
person involved. A person trying to make a buck selling content and
advertising. I should help them, right? Amplify their signal and all?&lt;/p&gt;
&lt;p&gt;What a chump I am! I &lt;strong&gt;should&lt;/strong&gt; simply ignore these.&lt;/p&gt;
&lt;p&gt;In the past, I have responded with a &amp;quot;Nope. That content is too old to
do anything with. I should delete it but I'm too lazy.&amp;quot; Once a bot
found a link on live content, and I dutifully updated it. I now know
any response is a mistake.&lt;/p&gt;
&lt;p&gt;I checked out the page.ly site. It's a nice summary of cyber attacks.
It seems to be a not-to-dangerous link to not-bad content. Except for
the Unicode errors throughout the document. Like someone copied and
pasted the original bytes -- intended for CP-1252 -- to a site
explicitly using UTF-8.&lt;/p&gt;
&lt;p&gt;That's not all.&lt;/p&gt;
&lt;p&gt;The name on the email, and the author of the article don't match.  The
email says &amp;quot;my article&amp;quot; but the article has a different author.&lt;/p&gt;
&lt;p&gt;Red Flag.&lt;/p&gt;
&lt;p&gt;After (finally) spending five minutes on this, I learned two things.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First: this is nonsense. It's some kind of phishing attack. Or some
kind of SEO-boosting bot that doesn't check dates very well.&lt;/li&gt;
&lt;li&gt;Second: I'm an easy mark when people appeal to my vanity. I need to
stop responding, no matter how effusive the (inferred) praise I think
I'm hearing.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Technologies"></category><category term="scam"></category><category term="security"></category></entry><entry><title>Type Hinting Edge Case</title><link href="https://slott56.github.io/2018_07_10-type_hinting_edge_case.html" rel="alternate"></link><published>2018-07-10T08:22:00-04:00</published><updated>2018-07-10T08:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-07-10:/2018_07_10-type_hinting_edge_case.html</id><summary type="html">&lt;p&gt;Warning. I'm new to this. Yes, my book Functional Python Programming
-- 2nd ed -- is full of type hints. But my examples are all
(intentionally) &lt;em&gt;relatively&lt;/em&gt; simple. There are edge cases that I do
not pretend to understand.&lt;/p&gt;
&lt;p&gt;Here's a fun one. Start here&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lazy PyTwitter: Is there some way with …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Warning. I'm new to this. Yes, my book Functional Python Programming
-- 2nd ed -- is full of type hints. But my examples are all
(intentionally) &lt;em&gt;relatively&lt;/em&gt; simple. There are edge cases that I do
not pretend to understand.&lt;/p&gt;
&lt;p&gt;Here's a fun one. Start here&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lazy PyTwitter: Is there some way with typing/mypy to express that
a type must be a 3-element numpy array of reals?&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;David Beazley (&amp;#64;dabeaz) &lt;a class="reference external" href="https://twitter.com/dabeaz/status/1009772982741266432?ref_src=twsrc%5Etfw"&gt;June 21,
2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a cool question.&lt;/p&gt;
&lt;p&gt;Here's an essential clarification on what this structure is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry, but I'm not letting go of this. Suppose I write a function:
def vec3(x:float, y:float, z:float):
return numpy.array((x,y,z))
I now use this to make &amp;quot;instances&amp;quot; of 3D vectors, which get passed
around and used throughout my code.
How would I type hint all of that?&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;David Beazley (&amp;#64;dabeaz) &lt;a class="reference external" href="https://twitter.com/dabeaz/status/1010112644819439616?ref_src=twsrc%5Etfw"&gt;June 22,
2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is tricky and I think there are two reasons why it's hard.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We want to specify some details internal to instances of the
np.array class.&lt;/li&gt;
&lt;li&gt;We want to provide a size constraint, something that I don't think
typing can do.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The size constraint may be handled by using Tuple, but it doesn't
really fit in a general way. This three-tuple is Tuple[float, float,
float]. You can see how that rapidly gets hideous for higher-dimension
objects. You'd want Tuple[float*3], right?&lt;/p&gt;
&lt;p&gt;The internal constraint, similarly, is challenging. However. An
np.array() -- for the most part -- is a Sequence with extra features.&lt;/p&gt;
&lt;p&gt;I have a suggestion.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;A stubs/numpy.py file with this. I think this characterizes the
array structure.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import TypeVar, Sequence

_Base = TypeVar(&amp;quot;_Base&amp;quot;)

def array(*args: Sequence[_Base]) -&amp;gt; Sequence[_Base]: ...
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Here's the target function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import numpy as np
from typing import Sequence

Vector3 = Sequence[float]

def vec3(x: float, y: float, z: float) -&amp;gt; Vector3:
    return np.array((x, y, z))
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This seems to capture part of the type definition. It doesn't capture
the 3-ness of the vector.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="type hints"></category></entry><entry><title>10 common security gotchas in Python and how to avoid them</title><link href="https://slott56.github.io/2018_07_10-10_common_security_gotchas_in_python_and_how_to_avoid_them.html" rel="alternate"></link><published>2018-07-10T08:00:00-04:00</published><updated>2018-07-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-07-10:/2018_07_10-10_common_security_gotchas_in_python_and_how_to_avoid_them.html</id><summary type="html">&lt;p&gt;First, read this: &lt;a class="reference external" href="https://hackernoon.com/10-common-security-gotchas-in-python-and-how-to-avoid-them-e19fbe265e03?source=emailShare-879bf4230309-1531218424"&gt;10 common security gotchas in Python and how to avoid
them&lt;/a&gt;
by Anthony Shaw&lt;/p&gt;
&lt;p&gt;Of these, most are important, but not specific to Python at all. Only
items 3, 4, 7, and 8 are pretty specific to Python. They talk about the
assert statement, some timing vulnerabilities …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, read this: &lt;a class="reference external" href="https://hackernoon.com/10-common-security-gotchas-in-python-and-how-to-avoid-them-e19fbe265e03?source=emailShare-879bf4230309-1531218424"&gt;10 common security gotchas in Python and how to avoid
them&lt;/a&gt;
by Anthony Shaw&lt;/p&gt;
&lt;p&gt;Of these, most are important, but not specific to Python at all. Only
items 3, 4, 7, and 8 are pretty specific to Python. They talk about the
assert statement, some timing vulnerabilities, and the bad idea of
transmitting pickle files.&lt;/p&gt;
&lt;p&gt;Item 5 is also specific to Python, but I quibble about it's relevance.
It is at the very edge of &amp;quot;security.&amp;quot; The PYTHONPATH environment
variable is most definitely not &amp;quot;...one of the biggest security holes in
Python.&amp;quot; If the path is a security hole, then any code is a security
hole. If we view code as a security hole, then the only truly secure
system has no software.&lt;/p&gt;
&lt;p&gt;(As someone who lived on a sailboat. I happen to subscribe the position
that the only &lt;strong&gt;truly&lt;/strong&gt; secure system has no software. Use line,
shackles, and well-known knots if you want to stake your life on it. Use
fancy electronics with software to make it simple and fun.)&lt;/p&gt;
&lt;p&gt;Bad programming is the &lt;strong&gt;biggest&lt;/strong&gt; security hole. Failure to prevent SQL
injection. Failure to use CSRF tokens. Failure to properly handle
credentials. These are security holes of epic proportions.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; cannot be changed through any kind of request
handling. Even colossally dumb software that blindly uploads XML or
JPEG files without vetting them won't change the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;.  You'd
have to write code that changed sys.path. Or you'd have to write code
that reset the os.environ and then started applications in the new
environment. This is seriously bad code, and has nothing to do with
Python.&lt;/p&gt;
&lt;p&gt;Otherwise, the only way to change &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; requires an Evil Super
Genius who has your compromised credentials. Once your credentials
are compromised anything is possible, including the setting the &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt;
environment variable, or deleting all the accounts, or &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; /&lt;/tt&gt;. None
of which is specific to Python.&lt;/p&gt;
&lt;p&gt;Item 9 -- patching the system Python -- may be important, All OS's
should have patches applied early and often. However. We strongly
discourage our developers from using the system Python for anything.
We always build environments. We always install our own Python 3 with
our own packages. We generally ignore the system Python to the extent
possible.&lt;/p&gt;
&lt;p&gt;Item 7, though, is a huge deal. We use OAS (formerly known as
swagger.) The old swagger.json end-point was -- clearly -- json. The
new OAS 3, however, suggests the specifications be provided at
openapi.yaml. This week we're rolling out a cluster of microservices
using our shiny new OAS 3 specifications. And we're using default
&lt;tt class="docutils literal"&gt;yaml.load()&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;yaml.safe_load()&lt;/tt&gt; as part of the contract
hand-shake among the services. All internally-facing handshakes, but
still unsafe with respect to a man-in-the-middle hacking our
specifications.&lt;/p&gt;
&lt;p&gt;While I can quibble about two of the ten items, the other eight are
rock solid, and should be part of periodic in-house code reviews.&lt;/p&gt;
&lt;p&gt;And number 7 is killer.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="security"></category></entry><entry><title>Coping with a Spreadsheet Database</title><link href="https://slott56.github.io/2018_07_02-coping_with_a_spreadsheet_database.html" rel="alternate"></link><published>2018-07-02T19:18:00-04:00</published><updated>2018-07-02T19:18:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-07-02:/2018_07_02-coping_with_a_spreadsheet_database.html</id><summary type="html">&lt;p&gt;A common way to save persistent, important data is a spreadsheet. It
provides a handy, potentially normalized store that's readily
accessible with minimal tooling. It has a UI usable by people with a
spectrum of skills.&lt;/p&gt;
&lt;p&gt;Sadly.&lt;/p&gt;
&lt;p&gt;There's a core conflict:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The advantages of spreadsheets-as-database are numerous.&lt;/li&gt;
&lt;li&gt;The disadvantage is …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;A common way to save persistent, important data is a spreadsheet. It
provides a handy, potentially normalized store that's readily
accessible with minimal tooling. It has a UI usable by people with a
spectrum of skills.&lt;/p&gt;
&lt;p&gt;Sadly.&lt;/p&gt;
&lt;p&gt;There's a core conflict:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The advantages of spreadsheets-as-database are numerous.&lt;/li&gt;
&lt;li&gt;The disadvantage is the lack of any strict, formal control over the
schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the very best, the steward of the data has some discipline and they
include column headers and assure they're used throughout the rows of
data.&lt;/p&gt;
&lt;p&gt;It goes downhill rapidly from that ideal.&lt;/p&gt;
&lt;p&gt;Let's look at some scenarios. And. How to cope. And. &lt;em&gt;Python to the Rescue&lt;/em&gt;.&lt;/p&gt;
&lt;div class="section" id="outliers-special-cases-anomalies-and-other-irregularities"&gt;
&lt;h2&gt;Outliers, Special Cases, Anomalies, and other Irregularities&lt;/h2&gt;
&lt;p&gt;The whole point of a &amp;quot;normalized&amp;quot; view of the data is to identify a
pattern, assign the lofty title of &amp;quot;Schema&amp;quot; to the pattern, and assure
all of the data fits the schema. In rare cases, all of the data fits a
simple schema. These cases are so rare they only exist in examples of
SQL code in tutorials.&lt;/p&gt;
&lt;p&gt;A far more common case is to have several subtypes which are so
similar that optional attributes (or &amp;quot;nullable columns&amp;quot; in SQL
parlance) allow one schema description to encompass all of the cases.
If you're a JSON Schema person, this is the &amp;quot;OneOf&amp;quot; or &amp;quot;AnyOf&amp;quot; type
definition.&lt;/p&gt;
&lt;p&gt;Some folks will try argue that optional attributes don't always mean
that there are several subtypes. They'll ramble on for a while and
eventually land on &amp;quot;state change&amp;quot; as a reason for optional attributes.
The distinct states &lt;strong&gt;are&lt;/strong&gt; distinct subtypes. Read up on the
&lt;strong&gt;State&lt;/strong&gt; design pattern for OO programming. Optional attributes is
the definition of subtype.&lt;/p&gt;
&lt;p&gt;The hoped-for simple case is a superclass extended by subclasses used
to add new attributes. In this case, they're all polymorphic with
respect to the superclass. In a spreadsheet page, the column names
reflect the union of all of the various attributes. There are two
minor variants in the way people use this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An attribute value is a discriminator among the subtypes. We like
this in SQL processing because it's fast. It also allows for some
validation of the discriminator value and the pattern of attributes
present vs. attributes omitted. Of course, the pattern of empty cells
may disagree with the discriminator value provided.&lt;/li&gt;
&lt;li&gt;The pattern of attributes provided versus omitted is used to identify
the subtype. This is a more reliable way to detect subtypes. There
can, of course, be problems here with values provided accidentally,
or omitted accidentally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The less desirable case is disjoint classes with few common
attributes. Worse, the common attributes are not part of the problem
domain, but are things that feel databasey, like made-up surrogate
keys. There's an &amp;quot;ID&amp;quot; in column A or some other such implementation
detail. Some of the rows use column A and columns B to G. The other
rows use column A and columns H to L. The &lt;strong&gt;only&lt;/strong&gt; common attributes
are the surrogate keys, perhaps mixed with foreign key references to
rows in other spreadsheet tables or pages.)&lt;/p&gt;
&lt;p&gt;This is a collection of disjoint types, slapped together for no good
reason. SQL folks like to call it &amp;quot;multiple master-detail
relationships&amp;quot;. The master record has children of multiple types. In
some cases, the only thing the children have in common is the foreign
key relationship with the parent. If you want a concrete example,
think of customer contact information: multiple email addresses,
multiple phone numbers. The two contacts have nothing in common
except belonging to one customer.&lt;/p&gt;
&lt;p&gt;These don't belong in a single spreadsheet table. But. There they
are. Our code must disentangle the subtypes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arrays"&gt;
&lt;h2&gt;Arrays&lt;/h2&gt;
&lt;p&gt;A lot of spreadsheet data is a two-dimensional grid. Budgets, for
example, might have categories down the page and months across the
page.&lt;/p&gt;
&lt;p&gt;This is handy for visualization. But. It's not the right way to
process the data at all.&lt;/p&gt;
&lt;p&gt;This extends, of course, to higher orders. Each tab of a spreadsheet
may be a dimension of visualization. There may be groups of tabs with
a complex naming convention to include multiple dimensions into tab
names. Rows may have multiple-part names, or use bullets and
indentation to show a hierarchy.&lt;/p&gt;
&lt;p&gt;All of these techniques are ways to provide a number of dimensions
around a fact that's crammed into a cell. The budget amount is the
fact. The category and the month information are the two dimensions
of that cell. In many cases, Star-Schema techniques are helpful for
understanding the underlying data, separate from the visualization as
a spreadsheet.&lt;/p&gt;
&lt;p&gt;Our code must disentangle the dimensions of the meaningful facts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="normalization"&gt;
&lt;h2&gt;Normalization&lt;/h2&gt;
&lt;p&gt;There are tiers of normalization. The normalization described above is
part of First Normal Form (1NF): all rows are the same and all data
items are atomic. Pragmatically, it's rare that all spreadsheet rows
are the same, because it's common to bundle multiple subtypes into a
single table.&lt;/p&gt;
&lt;blockquote&gt;
Sidebar Rant. Yes, the presence of nullable columns in a SQL table
*is* a normalization error. There, I said it. Error. We can always
partition the rows of table into a number of separate tables; in each
of those tables, all columns are required. We can rebuild the
original table (with optional fields) via a union of the various
decompositions (none of which have optional fields). The SQL folks
prefer nullable columns and 1NF violations over unions and 1NF
absolutism. I'm a fan of 1NF absolutism to understand each and every
nullable attribute because casual abuse of nulls is a common design
error.&lt;/blockquote&gt;
&lt;p&gt;The other part of 1NF is each value is atomic: there's no internal
structure to the value. In manually-prepared spreadsheet data, this is
difficult to insist on.  Stuff gets combined into a single cell
because -- well -- it seemed helpful to the people entering it. They
put all the lines of an address into a single cell because they like
to see it that way.&lt;/p&gt;
&lt;p&gt;Third Normal Form (3NF) forbids derived data (and transitive
dependencies). In a spreadsheet, we might have a row-level
computation. It helps the person confirm the data is correct. It's not
&amp;quot;essential&amp;quot;. It breaks the 3NF rule because the computed attribute
depends on other field values; a change to one attribute will also
change the derived attribute.&lt;/p&gt;
&lt;p&gt;When we first encounter spreadsheet data, this isn't always obvious.
In some cases, the derived data is computed &amp;quot;off-line&amp;quot; -- i.e.,
manually -- and entered into the spreadsheet. Really. People pull up a
calculator app (or whip out their phone), compute a value, and type it
in. In other cases, they look something up manually and enter it.&lt;/p&gt;
&lt;p&gt;These kinds of data entry weirdnesses require code to normalize the
manually-prepared data. We'll have to decompose non-atomic fields. And
we'll have to handle derived data gracefully. (Reject it? Fix it? Warn
them about it? Handle it as an exception?)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="relationships"&gt;
&lt;h2&gt;Relationships&lt;/h2&gt;
&lt;p&gt;Let's talk about Second Normal Form (2NF). We really want to have a
row in a table represent a single thing. The SQL folks require all of
the attributes to be dependent on the row's key. In spreadsheet world,
we may have a jumble of attributes with a jumble of dependencies. We
may have multiple relationships in a single row.  Look at the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Second_normal_form"&gt;Second
Normal Form&lt;/a&gt; page
on Wikipedia for examples of multiple relationships mashed together
into a single row.&lt;/p&gt;
&lt;p&gt;When a spreadsheet has 2NF problems, there will be situations were
some collection of attributes is repeated -- verbatim -- in multiple
places. The most common example in US-based data is City-State-ZIP
Code. These three *always* form a consistent triple of data, and
should be repeated as part of an address. In SQL terms, City and State
have a functional dependency on the ZIP Code. In an Object-Oriented
database, we might have a separate City-State-Zip class definition. In
a document datastore, we might combine these items into a
sub-document.&lt;/p&gt;
&lt;p&gt;In any 2NF problem area, we're forced to write code which normalizes
this internal relationship.&lt;/p&gt;
&lt;p&gt;And. When we do that we'll find the kinds of problems we find with
derived data: The ZIP code 22102 might be McLean or Tysons Corner. One
of them is &amp;quot;right&amp;quot; and the other is &amp;quot;wrong&amp;quot;, Or perhaps there needs to
be an exception to handle this. Or perhaps a correction applied to
coerce the wrong values to be right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-association-table"&gt;
&lt;h2&gt;The &amp;quot;Association&amp;quot; Table&lt;/h2&gt;
&lt;p&gt;There's a SQL design pattern called an association table. This is
used to handle a many-to-many relationship between two entities.
Consider Boats and Owners. A boat will have multiple owners. An owner
may have multiple boats. In SQL world, this requires a special table
with two foreign keys. In the degenerate case, there are no other
attributes. In the boat-owner relationship case, however, there's
often a range of dates that specifies when an owner was associated
with a boat. The range of dates applies to the relationship itself,
not to boat nor to owner.&lt;/p&gt;
&lt;p&gt;In a spreadsheet there are numerous ways to represent this. Numerous.
A list of boat rows after each owner.  A list of owner rows after
each boat. A number of owner columns for each boat.  A block of text
with a list of owner names in a single cell. Creative people will
create many creative solutions to this data representation problem.&lt;/p&gt;
&lt;p&gt;Note that the association table is a SQL hack. It's an implementation
detail, not an essential feature of the problem domain. In Python,
for example, we'll need to use weakref objects to handle this
cleanly.&lt;/p&gt;
&lt;p&gt;When Owner O1 refers to Vessel V1 it's easy to have a list of vessel
references under the owner. When the Owner O1 object is no longer
needed, it can be removed from memory. This decrements the references
count for Vessel V1 to zero, and it will also be removed from memory,
too.&lt;/p&gt;
&lt;p&gt;When we have mutual references, we have a problem, solved by
weakrefs.&lt;/p&gt;
&lt;p&gt;If Owner O1 refers to Vessel V1 &lt;strong&gt;and&lt;/strong&gt; we also have Vessel V1
referring to Owner O1, we have mutual references. O1 has a list that
includes V1.  V1 also has a list that includes O1. This means there
are two strong references to O1: some variable, owner, and Vessel V1
&lt;strong&gt;also&lt;/strong&gt; refers to O1. When the variable owner is no longer needed,
then the reference count to O1 is decremented from two to one. And
the object can't be deleted yet.&lt;/p&gt;
&lt;p&gt;If V1 has a &lt;em&gt;weak&lt;/em&gt; reference to O1, then the strong reference count
-- based on the variable owner -- is only one. The weak reference
from V1 doesn't count for memory management purposes. O1 can be
removed from memory, references to V1 will be decremented, and it,
too, can be removed.&lt;/p&gt;
&lt;p&gt;Our code will have to parse and populate the relationships. And we'll
need to use weakref to be sure we can cleanly remove objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coping-strategies"&gt;
&lt;h2&gt;Coping Strategies&lt;/h2&gt;
&lt;p&gt;As noted above, we have to cope with manually-prepared spreadsheet
data. It looks like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Figure out what the likely data structure is. This isn't simple.
We'll look at Pythonic techniques below. When starting, it helps to
draw UML class diagrams (or ER diagrams) over and over again to try
and depict the data. I'm a fan of
using &lt;a class="reference external" href="https://yuml.me/"&gt;https://yuml.me&lt;/a&gt; to draw the pictures
because they have a super-handy text notation for the relationships
and attributes.&lt;/li&gt;
&lt;li&gt;Leverage the &lt;strong&gt;Extract-Transform-Load&lt;/strong&gt; design pattern.&lt;ul&gt;
&lt;li&gt;The &amp;quot;extract&amp;quot; reads the source spreadsheet data. A first version
will be trivial use of xlrd or csv module. Or any of the modules
listed
here: &lt;a class="reference external" href="http://www.python-excel.org/"&gt;http://www.python-excel.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &amp;quot;transform&amp;quot; should be implemented as a function to transform
source to the target model. Pragmatically, this single function
will leverage a number of other functions to validate, cleanse,
convert, and normalize the data.&lt;/li&gt;
&lt;li&gt;The &amp;quot;load&amp;quot; may not be anything more than creating instances of the
underlying model classes. In some cases, the instances of the
model classes may wind up in an in-memory dictionary. In other
cases, the &amp;quot;load&amp;quot; might be a simple use of pickle or shelve to
persist the useful data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Separate Model, ETL, and &amp;quot;Real Work&amp;quot; from each other. The model
should evolve very slowly. It's the essential problem we're solving.
The ETL may vary with each major revision to the spreadsheet
database. Users add columns, they change meanings, their
understanding evolves. The final work is based on the model -- and
only the model -- ignoring the vagaries of ETL.&lt;/li&gt;
&lt;li&gt;Plan for change. Each manually-prepared spreadsheet is a unique
snowflake, precious and distinct. This leads to an important lesson
based on the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;Open/Closed
Principle&lt;/a&gt;:** Code
Must Be Closed To Modification and Open To Extension**. Each version
of the source data means adding new functions or classes to cope with
each bizarre new spreadsheet issue. When the source data changes,
don't modify any old code; &lt;strong&gt;Always Be Adding&lt;/strong&gt;. This means planning
for multiple versions of functions: validate_1(), validate_2(),
validate_3().  It's essential to be able process *all* old versions
of the data and get meaningful, useful results for regression
testing.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="python-to-the-rescue"&gt;
&lt;h2&gt;Python To The Rescue&lt;/h2&gt;
&lt;p&gt;Data modeling must be done slowly and reluctantly. Don't overfit the
model to the first spreadsheet.&lt;/p&gt;
&lt;p&gt;Here's the place to start&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import SimpleNamespace
class Model(SimpleNamespace ):
    pass
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;This is *enough* modeling to get started. Don't over-engineer the&lt;/dt&gt;
&lt;dd&gt;model. We can then do things like this.&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre class="literal-block"&gt;
class Owner(Model):
    pass
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;This defines the class Owner as an instance of some abstract Model&lt;/dt&gt;
&lt;dd&gt;class. The SimpleNamespace allows us to have &lt;strong&gt;any&lt;/strong&gt; attributes we
think we need.&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre class="literal-block"&gt;
owner = Owner(vessel=some_id, name=row['name'])
&lt;/pre&gt;
&lt;p&gt;We can leverage the SimpleNamespace to build useful objects with
minimal code. This can be replaced with a typing.NamedTuple or a
&amp;#64;dataclass class definition when the definition is more mature.&lt;/p&gt;
&lt;p&gt;The &amp;quot;extract&amp;quot; code needs to gather row-like objects. Ideally, this is
a generator function. Because normalization and dereferencing may
require multiple passes through the data, a list can be slightly
easier to deal with. We'll come back to normalization and
dereferencing below.&lt;/p&gt;
&lt;p&gt;For some background in the classes used here,
see &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;https://sourceforge.net/projects/stingrayreader/&lt;/a&gt;. (Yes, this is
old; I'm thinking of moving it to GitHub and updating it to Python
3.7.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def load_live_rows(workbook, sheet_name):
    sheet1 = sheet.EmbeddedSchemaSheet(workbook, sheet_name, schema.loader.HeadingRowSchemaLoader)
    dict_rows = sheet1.schema.rows_as_dict_iter(sheet1)
    clean_data = filter(lambda row:not row['Hull No.'].is_empty(), dict_rows)
    initial_data = take_until(lambda row:row['Hull No.'].to_str() == 'Definitely WB Owners:', clean_data)
    return list(initial_data)
&lt;/pre&gt;
&lt;p&gt;Step-by-step.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We're working with a sheet that has the schema embedded in it. That
means using the heading rows as column information. The
HeadingRowSchemaLoader will be grabbing the first few rows from the
EmbeddedSchemaSheet. Sometimes we need more complex loaders to read
multiple rows. If the schema is separate from the sheet, then the
loader doesn't interact with the source of data.&lt;/li&gt;
&lt;li&gt;Each row is modeled as a simple dictionary in this example code.&lt;/li&gt;
&lt;li&gt;A filter locates rows that have hull numbers. Other rows are quietly
discarded.&lt;/li&gt;
&lt;li&gt;The take_until() function reads rows until the matching row is found,
then stops. This chops off the bottom of the spreadsheet where manual
notes were kept.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resulting list of rows can be validated, cleansed, and normalized
to create the useful instances of the various Model subclasses.&lt;/p&gt;
&lt;p&gt;Here's the &amp;quot;transform&amp;quot; portion.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def make_owner_1(row: Dict[str, Cell]) -&amp;gt; Owner:
    return Owner(
        last_name=null_strip(row[&amp;quot;Owner's Last Name&amp;quot;].to_str()),
        first_name=null_strip(row[&amp;quot;Owner's First Name&amp;quot;].to_str()),
        display_name=null_strip(row[&amp;quot;Display Name&amp;quot;].to_str()),
        website=null_strip(row[&amp;quot;Website&amp;quot;].to_str()),
        owner_vessel=[],
    )
&lt;/pre&gt;
&lt;p&gt;We've built an instance of the Owner subclass of Model by extracting
a number of attributes from the row. There are other columns not
extracted; they are part of various normalizations and dereferencing.
The owner_vessel attribute is a parent-child relationship that can't
be trivially populated from the row. The SQL folks would include a
foreign key in each child that refers to the parent. The vessel page
of the spreadsheet has this information, and it's used to populate
the owner's details. This is one of the dereferencing activities that
needs to be done as part of &amp;quot;loading&amp;quot;.&lt;/p&gt;
&lt;p&gt;The to_str() method is feature of the Stingray Reader's cell
definitions. Conversion methods like this are not typical of
idiomatic Python code. If we were only creating built-in str, float,
or int, the bunch of conversion methods would be A Bad Idea. To be
useful, we also need to create Decimal objects, and that leads us to
embracing a grid of conversion methods for each cell source to
desired resulting objects. We could use decimal(str(cell)), but it
seems cleaner to use cell.to_decimal().&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-passes"&gt;
&lt;h2&gt;Multiple Passes&lt;/h2&gt;
&lt;p&gt;We often touch the source more than once.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There's a &amp;quot;validate and load&amp;quot; pass to get rows that are sensible
to process. A generator might make sense here.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;There may be a &amp;quot;cleanse and convert&amp;quot; pass to reformat the source&lt;/dt&gt;
&lt;dd&gt;data, perhaps parsing complex cells into components or combining
multiple source rows into a single entity description. This, too,
might involve a generator to restructure the spreadsheet rows into
something sensible.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;There will be multiple &amp;quot;normalization&amp;quot; passes. Any 2NF
relationships need to be extracted to create model objects. Any
restructuring of complex dimensions should be handled via
restructuring source data from grid to rows, or from multiple
sheets to a single, long, sequence of rows with the various
dimensions as explicit attributes of each row.&lt;/li&gt;
&lt;li&gt;There may be multiple &amp;quot;load&amp;quot; passes to build final objects from
the source rows. This will often lead to including the built
objects as part of the source data.&lt;/li&gt;
&lt;li&gt;There will be some final &amp;quot;dereferencing&amp;quot; passes where foreign key
relationships are turned into proper references among the objects.
These should be weakref references to permit proper garbage
collection.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the application will have tidy collections of
Python objects that can be used for the real work.&lt;/p&gt;
&lt;p&gt;What's essential is finding a balance between end-user
visualization of the data in a spreadsheet and schema validation
in Python. It's often helpful to be flexible when trying to
automate processing of complex, irregular, manually gathered data.
Letting candidate users work with spreadsheets lowers the barrier
to automation.&lt;/p&gt;
&lt;p&gt;Coping with irregularity gets the process started.&lt;/p&gt;
&lt;p&gt;As the work matures, some schema controls will tend to evolve.
People tend to recognize the cost and complexity of irregular
data. They will try to identify the patterns and impose some order
on those patterns. As they uncover patterns in the data, the
&amp;quot;schema&amp;quot; will evolve. This is a good thing, and Python lets this
proceed at a human pace.&lt;/p&gt;
&lt;p&gt;We can -- easily-- create flexible tools that let people
understand and organize their data.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="spreadsheet"></category><category term="software design"></category><category term="stingray reader"></category></entry><entry><title>PyCon 2018 Highlights</title><link href="https://slott56.github.io/2018_05_16-pycon_2018_highlights.html" rel="alternate"></link><published>2018-05-16T20:57:00-04:00</published><updated>2018-05-16T20:57:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-05-16:/2018_05_16-pycon_2018_highlights.html</id><summary type="html">&lt;p&gt;And yes, this is truncated because I left early, and missed some
important things. I'm going to have to catch on
YouTube &lt;a class="reference external" href="https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ/videos"&gt;https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ/videos&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=lpWvYxEW09k"&gt;Stacy Morse - Code Reviews Using Art Critique Principles - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=zQeYx87mfyw"&gt;Jake VanderPlas - Performance Python: Seven Strategies for
Optimizing Your Numerical
Code …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;And yes, this is truncated because I left early, and missed some
important things. I'm going to have to catch on
YouTube &lt;a class="reference external" href="https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ/videos"&gt;https://www.youtube.com/channel/UCsX05-2sVSH7Nx3zuk3NYuQ/videos&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=lpWvYxEW09k"&gt;Stacy Morse - Code Reviews Using Art Critique Principles - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=zQeYx87mfyw"&gt;Jake VanderPlas - Performance Python: Seven Strategies for
Optimizing Your Numerical
Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fRUCAt9WFpc"&gt;Jiaqi Liu - Building a Data Pipeline with Testing in Mind - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=FjojZxDZscQ"&gt;Brian Okken, Paul Everitt - Visual Testing with PyCharm and pytest -
PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=0ROZRNZkPS8"&gt;Carol Willing - Practical Sphinx - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=xEE4X-9RROM"&gt;Dmitry Filippov, Ewa Jodlowska - By the Numbers: Python Community
Trends in 2017/2018 - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=zJ9z6Ge-vXs"&gt;David Beazley - Reinventing the Parser Generator - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=3m555yWTaNI"&gt;Shannon Turner - You're an expert. Here's how to teach like one. -
PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=yrRqNzJTBjk"&gt;Matt Davis - Python Performance Investigation by Example - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=ZsGFU2qh73E"&gt;Barry Warsaw - Get your resources faster, with importlib.resources -
PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, you'll also need to see the keynotes.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=q-x7jK72E6E"&gt;Jason Huggins - Keynote - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=ITksU31c1WY"&gt;Dan Callahan - Keynote - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=VJ0vibC_Hl0"&gt;Saturday Morning Lightning Talks + Keynotes - PyCon
2018&lt;/a&gt; * Q's talk
about using Python to teach kids to code is not to be missed. It's
part of the Saturday Morning line-up.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=tzFWz5fiVKU"&gt;Sunday Morning Lightning Talks + Keynote - PyCon
2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=3kta4GB3PAw"&gt;PSF Community Service Awards - Catherine Devlin Keynote - Final
Remarks - PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there's a HUGE number of talks I didn't get to.&lt;/p&gt;
</content><category term="Technologies"></category><category term="pycon"></category><category term="#python"></category></entry><entry><title>Functional Python Programming 2e -- Type Hints!</title><link href="https://slott56.github.io/2018_05_07-functional_python_programming_2e_type_hints.html" rel="alternate"></link><published>2018-05-07T09:28:00-04:00</published><updated>2018-05-07T09:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-05-07:/2018_05_07-functional_python_programming_2e_type_hints.html</id><summary type="html">&lt;p&gt;You might want to look into this: &lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming-second-edition"&gt;Functional Python Programming -
Second
Edition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's talk about the type hints, shall we?&lt;/p&gt;
&lt;p&gt;Most of the examples have had type hints added. This means running
everything through mypy. And it also means running everything through
doctest, as well.&lt;/p&gt;
&lt;p&gt;More important than the technical …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You might want to look into this: &lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming-second-edition"&gt;Functional Python Programming -
Second
Edition&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's talk about the type hints, shall we?&lt;/p&gt;
&lt;p&gt;Most of the examples have had type hints added. This means running
everything through mypy. And it also means running everything through
doctest, as well.&lt;/p&gt;
&lt;p&gt;More important than the technical steps, there's a change in viewpoint
that comes with type hints.&lt;/p&gt;
&lt;p&gt;If you follow a variety of Pythonistas on Twitter, you can see some
debates on the merits of type-hinting. Some key points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's hard.&lt;/li&gt;
&lt;li&gt;It's so hard, only do it if you absolutely need it.&lt;/li&gt;
&lt;li&gt;It's too verbose&lt;/li&gt;
&lt;li&gt;It's hard, but it can help.&lt;/li&gt;
&lt;li&gt;It's really helpful.&lt;/li&gt;
&lt;li&gt;It represents a &amp;quot;gap&amp;quot; in the language and without run-time type
checking, the whole thing is worthless.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point a weird view. I work in a shop that's heavily
Pythonic. But. You still hear nonsense. Python a very popular
language and it's popularity is growing. The popularity of Python
isn't like the popularity of a movie where you're not planning on
making a living off of it (I know
&lt;a class="reference external" href="https://www.imdb.com/name/nm3399447/?ref_=nmvi_tt"&gt;someone&lt;/a&gt; who
makes their living off the popularity of movies.) The popularity of
Python is like the popularity of automobiles or air travel or
electricity.&lt;/p&gt;
&lt;p&gt;I hear the &amp;quot;a real language would have prevented that with
type-checking.&amp;quot; And I respond, &amp;quot;Then why do you unit test?&amp;quot; And they
don't really have much of an answer. Python has the same workflow as
statically type-checked languages, so the &amp;quot;prevention&amp;quot; thing seems to
be nonsense.&lt;/p&gt;
&lt;p&gt;Moving on.&lt;/p&gt;
&lt;p&gt;&amp;quot;It's hard.&amp;quot; Anything new is hard. The complaint is vague, so it's
*hard* to respond. (Heh.)&lt;/p&gt;
&lt;p&gt;Anything like &amp;quot;only do it if you absolutely need it&amp;quot; bothers me
because it seems like a passive-aggressive barricade around things.
Also. It's vague.&lt;/p&gt;
&lt;div class="section" id="verbosity"&gt;
&lt;h2&gt;Verbosity&lt;/h2&gt;
&lt;p&gt;Verbosity in type hints is a real problem. When creating complex
objects from built-in types, we often forget to give names to the
intermediate object classes.&lt;/p&gt;
&lt;p&gt;Consider Dict[Tuple[Tuple[int, int], Tuple[int, int]], float]&lt;/p&gt;
&lt;p&gt;It's long. It describes a structure like this {((12, 13), (14, 15)):
2.8284271247461903, ...}&lt;/p&gt;
&lt;p&gt;Writing something like the following d_map() function without hints
is easy. Adding hints seems hard.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def d_map(points):
    return {(p1, p2): hypot(p1[0]-p2[0], p1[1]-p2[1]) for p1, p2 in points}
&lt;/pre&gt;
&lt;p&gt;The declaration became L.. O... N... G... because we ignored the
intermediate types.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def d_map(points: List[Tuple[Tuple[int, int], Tuple[int, int]]]) -&amp;gt; Dict[Tuple[Tuple[int, int], Tuple[int, int]], float]:
    return {(p1, p2): hypot(p1[0]-p2[0], p1[1]-p2[1]) for p1, p2 in points}
&lt;/pre&gt;
&lt;p&gt;These hints, however, doesn't really describe what's happening. The
hints elide important details. The hints don't reflect the underlying
semantics of the data structure.&lt;/p&gt;
&lt;p&gt;One of Python's strengths is the rich collection of first-class data
structures with built-in syntax. We can abbreviate some complex
concepts into succinct, expressive code.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;We shouldn't lose sight of what the succinct code represents. And in
this case, it represents some rather complex concepts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;rant&amp;gt;&lt;/p&gt;
&lt;p&gt;Let me sit in my lawn chair and shake my fist in helpless fury at
you kids. When I was your age, we sent half a semester of
undergraduate work trying to get linked lists, and simple hash
mapping to work. Months of work. Later on, as a professional --
years of actual experience -- it took forever to build a binary
tree-based &lt;tt class="docutils literal"&gt;collections.Counter&lt;/tt&gt; definition to gather simple numbers
from a flat file. Nowadays, you just slap a &lt;tt class="docutils literal"&gt;Counter&lt;/tt&gt; down into your
code like it's a nothing. It's not a nothing. It's serious,
sophisticated software engineering. It's more than &lt;tt class="docutils literal"&gt;Dict[Any, int]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&amp;lt;/rant&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="what-can-we-do"&gt;
&lt;h2&gt;What can we do?&lt;/h2&gt;
&lt;p&gt;When in doubt, &lt;strong&gt;Expose the Intermediate Types&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Point = Tuple[int, int]
Leg = Tuple[Point, Point]
Distances = Dict[Leg, float]
def d_map(points: Iterable[Leg]) -&amp;gt; Distances:
    return {(p1, p2): hypot(p1[0]-p2[0], p1[1]-p2[1]) for p1, p2 in points}
&lt;/pre&gt;
&lt;p&gt;This exposes the details. In some cases, it causes us to rethink
using a two-tuple to represent a point. The p1[0] syntax starts to
chafe a little.&lt;/p&gt;
&lt;p&gt;Perhaps this should have been&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Point(NamedTuple):
    x: int
    y: int
&lt;/pre&gt;
&lt;p&gt;That leads to tiny (almost-but-not-quite trivial) simplifications.
Instead of building simple tuples for each point, we can now build
named Point tuples and use p1.x and p1.y to make the code more
civilized.&lt;/p&gt;
&lt;p&gt;One consequence of this is actually avoiding &lt;tt class="docutils literal"&gt;()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; to build
tuples and lists. Yes. This is heresy. I seriously recommend using
&lt;tt class="docutils literal"&gt;tuple()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;list()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;dict()&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;set()&lt;/tt&gt; because we can replace them with
equivalent types. And yes, I text my mother with the same fingers
that wrote that.&lt;/p&gt;
&lt;p&gt;&amp;quot;But,&amp;quot; you object, &amp;quot;It's objectively LONGER! You didn't save me
anything! You're a fraud!&amp;quot;&lt;/p&gt;
&lt;p&gt;My first response is, &amp;quot;Correct.&amp;quot; It is objectively longer. And
&amp;quot;Correct,&amp;quot; I didn't really &amp;quot;save&amp;quot; you anything; I'm not sure what
you're saving. Lines of code do have a cost, but I think clarity has
value. And finally, &amp;quot;Correct,&amp;quot; I've often been wrong, and I may be
wrong here, too.&lt;/p&gt;
&lt;p&gt;I like this because the type definitions are &lt;strong&gt;reusable&lt;/strong&gt;, I think
this can add clarity throughout the application.&lt;/p&gt;
&lt;p&gt;When this kind of declaration is part of a reusable module, the
goodness spreads like smiles and hugs throughout the application.
Before long, other functions have been tweaked and everyone is
sending each other little teddy-bear hug gifts with rainbow cupcakes.&lt;/p&gt;
&lt;p&gt;(Please don't exchange mylar balloons. They're
&lt;a class="reference external" href="https://www.chesapeakebaymagazine.com/features/2017/9/15/a-ballooning-problem"&gt;evil&lt;/a&gt;.
Also, see
&lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/travel-2015-2016/cape-charles.html"&gt;this&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;When your type hints seem ungainly and large, consider &lt;strong&gt;Exposing the
Intermediate Types&lt;/strong&gt;. Break down a big structural type hint into the
constituent pieces.&lt;/p&gt;
&lt;p&gt;If you had to create a class definition for EVERY variation on list,
dict, set, and tuple, what would your new class be named?&lt;/p&gt;
&lt;p&gt;If you had to describe the underlying meaning of a class -- separate
from it's structure -- what name would you give it?&lt;/p&gt;
&lt;p&gt;Picking names is one of the two hardest problems in computing. It
isn't easy. (The other hardest problem? Cache invalidation and
off-by-one errors.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="@PacktAuthors"></category><category term="functional python programming"></category><category term="type hints"></category></entry><entry><title>Misunderstanding OO Programming</title><link href="https://slott56.github.io/2018_05_01-misunderstanding_oo_programming.html" rel="alternate"></link><published>2018-05-01T08:00:00-04:00</published><updated>2018-05-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-05-01:/2018_05_01-misunderstanding_oo_programming.html</id><summary type="html">&lt;p&gt;Read this. &lt;a class="reference external" href="https://medium.com/&amp;#64;cscalfani/goodbye-object-oriented-programming-a59cda4c0e53?source=linkShare-879bf4230309-1524537370"&gt;Goodbye, Object Oriented Programming&lt;/a&gt;
I like this because parts of it are wrong, and parts are based on
peculiarities of specific languages which aren’t problems in other languages.&lt;/p&gt;
&lt;p&gt;The “wrong” things are on a spectrum. At one end are things almost
right. The other end is hoped-for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this. &lt;a class="reference external" href="https://medium.com/&amp;#64;cscalfani/goodbye-object-oriented-programming-a59cda4c0e53?source=linkShare-879bf4230309-1524537370"&gt;Goodbye, Object Oriented Programming&lt;/a&gt;
I like this because parts of it are wrong, and parts are based on
peculiarities of specific languages which aren’t problems in other languages.&lt;/p&gt;
&lt;p&gt;The “wrong” things are on a spectrum. At one end are things almost
right. The other end is hoped-for things which — frankly — were never
true.&lt;/p&gt;
&lt;p&gt;The most important piece of nonsense is class-level reuse across
projects. Class-level reuse in a new project was not a thing in OO
programming. The monkey-banana-jungle “problem” only exists in a
strange world were someone made up the idea of single classes being
reused in isolation. The rest of us knew the scope of reuse was within
a project or a narrow family of projects aimed at a single problem
domain.&lt;/p&gt;
&lt;p&gt;&amp;quot;Utility&amp;quot; classes that could be reused and generic data structures
were always available as frameworks and libraries. Things built to
solve a specific problem were going to be tailored to the problem.
Most OO designers knew this and knew that making something generic
would be hard. Making something reusable and installable by others was
even harder. (Especially in compiled languages where you wanted to
hide intellectual property by keeping the source secret.)&lt;/p&gt;
&lt;p&gt;The &amp;quot;OO promised me reuse and lied&amp;quot; is a misstatement. Please rephrase&lt;/p&gt;
&lt;p&gt;Multiple inheritance does work in a number of languages, so I’ll skip
the complaints centered on single inheritance.&lt;/p&gt;
&lt;p&gt;I don't fully understand the complaints about encapsulation. There are
lots of books on separating interface from implementation to more
fully isolate implementation details. If references need to be treated
more opaquely, there are lots of techniques for this. It’s not broken.
Indeed, it’s really well understood. (&amp;quot;But I won't want to introduce
wrapper classes to insulate the references.&amp;quot; Sigh. That's how it's
done.)&lt;/p&gt;
&lt;p&gt;I think the &amp;quot;references leak details about encapsulation&amp;quot; requires
rephrasing as &amp;quot;I imagined some kind of perfectly isolated programming
where references were not usable in spite of me making them usable.&amp;quot;
Or perhaps &amp;quot;I wish references had special treatment to make them not
work as references except in a limited context which I get to
imagine.&amp;quot;&lt;/p&gt;
&lt;p&gt;The polymorphism complaint appears to be “okay, this actually works.”
I guess. Or. “There are other ways to do this in other languages.”
I'm sure it's an important point, but I can't quite discern what OO
principle is allegedly broken here.&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;No one was lied to. If someone was &amp;quot;burned&amp;quot; by some OO hype, I’d like
to see the actual quote of the actual hype. The “I was told there
would be X”, requires some substantiation.&lt;/p&gt;
&lt;p&gt;And. Stop griping about encapsulation. When the source is available
(as it is in many languages) there's no enforcement other than public
shaming.&lt;/p&gt;
&lt;p&gt;Also. Use Python. Most of the original post seems to be complaints
about C++ weirdness.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="object-oriented design"></category><category term="#python"></category><category term="object-oriented language"></category></entry><entry><title>Should I use x.__len__() or len(x)?</title><link href="https://slott56.github.io/2018_04_21-should_i_use_x__len___or_lenx.html" rel="alternate"></link><published>2018-04-21T09:37:00-04:00</published><updated>2018-04-21T09:37:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-04-21:/2018_04_21-should_i_use_x__len___or_lenx.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In the context of providing type hints, someone had a function like
this.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def f(x: Sized) -&amp;gt; Whatever: ...
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;And, since sized objects have a __len__() method it seemed sensible
to use x.__len__(). It was a good question about the use of special
methods.&lt;/div&gt;
&lt;div class="line"&gt;My advice is to avoid using …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In the context of providing type hints, someone had a function like
this.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def f(x: Sized) -&amp;gt; Whatever: ...
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;And, since sized objects have a __len__() method it seemed sensible
to use x.__len__(). It was a good question about the use of special
methods.&lt;/div&gt;
&lt;div class="line"&gt;My advice is to avoid using the special methods in general. Use them
only when defining classes that need to behave like Python objects.&lt;/div&gt;
&lt;div class="line"&gt;(I'll make an exception for using x.__dict__, to avoid having to
introduce an explicit dictionary object when there's one built-in to
most objects.)&lt;/div&gt;
&lt;div class="line"&gt;Use len(x) and be happy.  The function wrapper around a special method
is a common Python feature; it occurs in many places; use it.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>RESTful Web Services Design</title><link href="https://slott56.github.io/2018_04_03-restful_web_services_design.html" rel="alternate"></link><published>2018-04-03T08:00:00-04:00</published><updated>2018-04-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-04-03:/2018_04_03-restful_web_services_design.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This -- &lt;a class="reference external" href="https://medium.freecodecamp.org/rest-is-the-new-soap-97ff6c09896d"&gt;REST is the new
SOAP&lt;/a&gt;
-- has so many demolished strawman arguments that it feels like
looking at a van Gogh painting of people harvesting wheat.&lt;/div&gt;
&lt;div class="line"&gt;I won't dive into listing all the strawmen. Most of my responses are
approximately &amp;quot;How is that an actual problem?&amp;quot; or &amp;quot;Yes, it was …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This -- &lt;a class="reference external" href="https://medium.freecodecamp.org/rest-is-the-new-soap-97ff6c09896d"&gt;REST is the new
SOAP&lt;/a&gt;
-- has so many demolished strawman arguments that it feels like
looking at a van Gogh painting of people harvesting wheat.&lt;/div&gt;
&lt;div class="line"&gt;I won't dive into listing all the strawmen. Most of my responses are
approximately &amp;quot;How is that an actual problem?&amp;quot; or &amp;quot;Yes, it was new to
you, so?&amp;quot; or &amp;quot;Yes, people disagreed with each other over an
implementation choice.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Some of the observations about &amp;quot;proper REST&amp;quot; vs. &amp;quot;bah, that's not
really RESTful&amp;quot; point out the differences between expedient REST-like
design and really good REST design. Some of these considerations can
be helpful.&lt;/div&gt;
&lt;div class="line"&gt;The one point worthy of deeper thought is the nature of verb-heavy
highly-stateful RPC design and RESTful noun-heavy design. The question
here is the definition of state and the nature of state change. Some
people appear to be enthralled with many nuanced state changes. I've
been doing too much data warehouse and functional design where the
data is essentially stateless and CRUD rules are refined down to CRD
with a rare U under limited circumstances.&lt;/div&gt;
&lt;div class="line"&gt;And, yes, that means using relatively &amp;quot;stateless&amp;quot; OO design where an
object is wrapped inside a new object that includes derived data or a
compositions of stateless objects. The following example leverages
duck typing to create immutable objects where the class reflects the
state of the object.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
class Thing:
    def __init__(self, a, b):
        self.a, self.b = a, b
    def set_c(self, c):
        return DerivedThing(self, c)

class DerivedThing:
    def __init__(self, thing: Thing, c):
        self.thing, self.c = thing, c
    &amp;#64;property
    def a(self):
        return self.thing.a
    &amp;#64;property
    def b(self):
        return self.thing.b
    &amp;#64;property
    def value(self):
        return self.a * self.c + self.b
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;And, yes, I'm not building things which are absolutely stateless
because Python has stateful lists and mappings, and web services rely
on stateful persistence. And, yes, I reject functional purism because
I'm stupid. Can we move on, now?&lt;/div&gt;
&lt;div class="line"&gt;Something that seemed essential to me (but appears to be confusing
from reading complaints about REST) is understanding the notion of
&amp;quot;state.&amp;quot; One view of state is an aggregation of details. The final
state of an object is a reduction over the changes -- akin to a sum(),
max(), or min(), or perhaps something more involved like last(). The
paucity of REST verbs is &lt;strong&gt;not&lt;/strong&gt; a problem when you understand
&lt;em&gt;current&lt;/em&gt; state as the end product of applying a journal of &lt;em&gt;previous&lt;/em&gt;
state change mementos. Each &amp;quot;change&amp;quot;, then, isn't a complex Update
(REST Put or Patch) where there aren't enough verbs to describe each
nuanced change. It's a Create (REST Post) of the next change memento.
The RESTful service can eagerly apply the change to compute the
current state. Or it can lazily apply the changes to compute the
current state.&lt;/div&gt;
&lt;div class="line"&gt;Some of the blog post cited above sounds like &amp;quot;it was new and I didn't
like it.&amp;quot; Therefore, read the article, locate the strawmen, and know
there will always be someone who will complain. Some of the complaints
will have merit, some will be whining about the novelty.&lt;/div&gt;
&lt;div class="line"&gt;In a RESTful context, I'm a fan of this kind of pattern.&lt;/div&gt;
&lt;div class="line"&gt;/things&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;post:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;summary: Creates a new thing with a and b&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;responses:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;201:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;description: thing was created&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;/things/{id}/c&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;post:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;summary: Sets a value of c for an existing thing, previous
value is discarded.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;responses:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;201:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;description: c property of thing {id} was set&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;For more useful advice, start here, for example: &lt;a class="reference external" href="https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9"&gt;RESTful API
Designing guidelines — The best
practices&lt;/a&gt;.
Articles like this are useful, too: &lt;a class="reference external" href="https://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/"&gt;10 Best Practices for Better
RESTful
API&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="REST"></category></entry><entry><title>Functional Python Programming 2e -- Now With Type Hints</title><link href="https://slott56.github.io/2018_03_27-functional_python_programming_2e_now_with_type_hints.html" rel="alternate"></link><published>2018-03-27T08:00:00-04:00</published><updated>2018-03-27T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-03-27:/2018_03_27-functional_python_programming_2e_now_with_type_hints.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming-second-edition"&gt;Functional Python Programming, 2nd
ed.&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;This has been fun to cleanup some rambling, reset the math to be sure
it's actually right.&lt;/div&gt;
&lt;div class="line"&gt;And.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Type Hints&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Almost every example has had type hints added.&lt;/div&gt;
&lt;div class="line"&gt;(And I raised the pylint scores be rearranging some spacing and
what-not.)&lt;/div&gt;
&lt;div class="line"&gt;Bonus. We will be moving …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming-second-edition"&gt;Functional Python Programming, 2nd
ed.&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;This has been fun to cleanup some rambling, reset the math to be sure
it's actually right.&lt;/div&gt;
&lt;div class="line"&gt;And.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Type Hints&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Almost every example has had type hints added.&lt;/div&gt;
&lt;div class="line"&gt;(And I raised the pylint scores be rearranging some spacing and
what-not.)&lt;/div&gt;
&lt;div class="line"&gt;Bonus. We will be moving the publication date up from June to possibly
April. We're still doing technical reviews and what-not, so things
aren't *done*.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;What was hardest?&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;Generics, specifically, decorators can have quite complex type hints.
Indeed, type hinting raises important questions about trying to write
super-generic functions that can handle too wide a spectrum of types.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def some_function(arg):
    if isinstance(arg, dict):
        do_something(arg)
    elif isinstance(arg, list):
        do_something({i: v for i, v in enumerate(arg)})
    else:
        do_something(dict(arg=arg))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This kind of thing turns out to be ill-advised. It's probably a bad
design. More importantly, it's difficult to annotate, making it
difficult to discern if it behaves correctly.&lt;/div&gt;
&lt;div class="line"&gt;In this case, the argument is Union[Dict, Sequence, Any]. I've got a
few examples of Union types, but they're rare because I'm not a fan in
the first place. And the few places I used them, the complexity of
getting past &lt;strong&gt;mypy&lt;/strong&gt; type checks showed that they add risk and cost
without a dramatic reduction in complexity.&lt;/div&gt;
&lt;div class="line"&gt;In this specific case, the some_function() function is merely a
type-converting wrapper around the do_something() function. It's
probably better to refactor the type conversion responsibility into
the clients of some_function().&lt;/div&gt;
&lt;div class="line"&gt;The arguments about &amp;quot;encapsulation&amp;quot; or &amp;quot;the client shouldn't know that
detail&amp;quot; are generally kind of silly. We're all adults here, we
generally have to know what's going on with respect to the conversions
in order to use the function correctly and write unit tests.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;emakaren435&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-03-26 17:58:38.174000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by a blog administrator.&lt;/p&gt;
</content><category term="Technologies"></category><category term="@PacktAuthors"></category><category term="#python"></category></entry><entry><title>HATEOAS is useless? Or not used enough?</title><link href="https://slott56.github.io/2018_03_20-hateoas_is_useless_or_not_used_enough.html" rel="alternate"></link><published>2018-03-20T08:00:00-04:00</published><updated>2018-03-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-03-20:/2018_03_20-hateoas_is_useless_or_not_used_enough.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/&amp;#64;andreasreiser94/why-hateoas-is-useless-and-what-that-means-for-rest-a65194471bc8"&gt;Why HATEOAS is useless and what that means for
REST&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The article provides a background leading up to these observations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are very few good tools to create a REST API using this style&lt;/li&gt;
&lt;li&gt;There are no clients widely used to consume these types of APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;quot;useless&amp;quot; in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/&amp;#64;andreasreiser94/why-hateoas-is-useless-and-what-that-means-for-rest-a65194471bc8"&gt;Why HATEOAS is useless and what that means for
REST&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The article provides a background leading up to these observations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are very few good tools to create a REST API using this style&lt;/li&gt;
&lt;li&gt;There are no clients widely used to consume these types of APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;quot;useless&amp;quot; in the title is more like &amp;quot;not used enough.&amp;quot;&lt;/p&gt;
&lt;p&gt;There's a multi-part conclusion that may be more helpful if it's
fleshed out further. For now, however, it appears that the big
problems center around:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You still need to write Open Api Specifications (OAS, f/k/a
Swagger). I don't think this is bad. The blog post makes it sound
like a problem. I think it's essential.&lt;/li&gt;
&lt;li&gt;You need to put versioning somewhere. The path is less than idea.
I'm big on the Accept header containing application-specific MIME
types. For example,
application/vnd.com.your-name-here.app.json+v1. This doesn't
strike me as a problem, either.&lt;/li&gt;
&lt;li&gt;The whole approach is &amp;quot;closer to RPC than some REST lovers like to
admit.&amp;quot; I think this point revolves around the way JSON-RPC or
SOAP involves some overheads above basic HTTP that are unhelpful.
I don't think the &amp;quot;closer to RPC&amp;quot; follows logically from the lack
of tooling for HATEOS, but it certainly could be true that a
badly-done API might involve too many of the wrong kinds of
overheads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think there's a hidden strawman here. The &amp;quot;automatic discovery&amp;quot;
idea. I don't think this idea makes a lick of sense. Some people
think it's implied (or required) by REST, and any failure to
provide for fully-automated semantically rich discovery of an API
is some kind of failure.&lt;/p&gt;
&lt;p&gt;I don't think full semantic discovery is possible or even desirable.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's not possible because of the problem of assigning names and
meanings to resources and verbs in an end-point. The necessary
details can only be exposed with a semantically complete ontology
and complex SPARQL queries into the ontology to find resources and
end-points.&lt;/li&gt;
&lt;li&gt;It's not desirable because we replace a human-focused OAS with a
complete ontology that has to be rigorously defined, and tested to
be sure that all kinds of automated discovery algorithms can
understand the provided details. And none of this addresses the
actual application, it's all rich, detailed meta-description of
the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't see why we're trying to replace people. API discovery is
actually kind of hard. The resources, their relationships, and the
verbs for getting or updating those resources involves an
essentially difficult knowledge capture and dissemination
problem.&lt;/p&gt;
</content><category term="Technologies"></category><category term="REST"></category><category term="API Design"></category></entry><entry><title>Python Interviews</title><link href="https://slott56.github.io/2018_03_09-python_interviews.html" rel="alternate"></link><published>2018-03-09T08:00:00-05:00</published><updated>2018-03-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-03-09:/2018_03_09-python_interviews.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The #Python Interviews book is out. Mike Driscoll interviewed a bunch
of Python experts. And me, too. get 30% off the Amazon paperback
version of the book using the code 30PYTHON: &lt;a class="reference external" href="https://goo.gl/5A3uhq"&gt;https://goo.gl/5A3uhq&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Here's a flavor of how this went:&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;strong&gt;Driscoll&lt;/strong&gt;: So how did you end up becoming …&lt;/blockquote&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The #Python Interviews book is out. Mike Driscoll interviewed a bunch
of Python experts. And me, too. get 30% off the Amazon paperback
version of the book using the code 30PYTHON: &lt;a class="reference external" href="https://goo.gl/5A3uhq"&gt;https://goo.gl/5A3uhq&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Here's a flavor of how this went:&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;strong&gt;Driscoll&lt;/strong&gt;: So how did you end up becoming an author of Python
books?
&lt;strong&gt;Lott&lt;/strong&gt;: Most roles in my career more or less just happened to me,
but becoming a writer was a conscious decision.
In this case, I had decided that there could be value in teaching the
Python language and the associated software engineering skills. I
started to collect notes for a book in 2002. By 2010, I had tried
self-publishing several books on Python.
When Stack Overflow started, I was an early participant. There were
many interesting Python questions. The questions showed gaps where
more information was needed about Python specifically and software
engineering in general. Over a few years, I answered thousands of
questions about Python and somehow built up a large reputation.&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="@PacktAuthors"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Python Interviews -- Coming Soon from Packt</title><link href="https://slott56.github.io/2018_03_05-python_interviews_coming_soon_from_packt.html" rel="alternate"></link><published>2018-03-05T08:00:00-05:00</published><updated>2018-03-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-03-05:/2018_03_05-python_interviews_coming_soon_from_packt.html</id><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/web-development/python-interviews"&gt;https://www.packtpub.com/web-development/python-interviews&lt;/a&gt;
I'm honored.
I'll be studying what the other folks have to say in here. Being in the
Python community means respecting other's views. And that means
understanding them.
This looks like fun because it isn't *deeply* technical, it's about
people and technology.&lt;/p&gt;
</content><category term="Technologies"></category><category term="@PacktAuthors"></category><category term="#python"></category></entry><entry><title>The SQL-based relational database isn't perfection? Whoa if true</title><link href="https://slott56.github.io/2018_02_08-the_sql_based_relational_database_isnt_perfection_whoa_if_true.html" rel="alternate"></link><published>2018-02-08T19:00:00-05:00</published><updated>2018-02-08T19:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-02-08:/2018_02_08-the_sql_based_relational_database_isnt_perfection_whoa_if_true.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yes, there are people for whom document databases (and the file
system) are confusing and weird.&lt;/div&gt;
&lt;div class="line"&gt;I was sent this: &lt;a class="reference external" href="https://www.datasciencecentral.com/profiles/blogs/relational-algebra-is-the-root-of-sql-problems"&gt;Relational Algebra Is the Root of SQL
Problems&lt;/a&gt;
which is really brilliant and provides some helpful concrete examples
of stuff SQL is really bad at.&lt;/div&gt;
&lt;div class="line"&gt;The accompanying email was filled …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Yes, there are people for whom document databases (and the file
system) are confusing and weird.&lt;/div&gt;
&lt;div class="line"&gt;I was sent this: &lt;a class="reference external" href="https://www.datasciencecentral.com/profiles/blogs/relational-algebra-is-the-root-of-sql-problems"&gt;Relational Algebra Is the Root of SQL
Problems&lt;/a&gt;
which is really brilliant and provides some helpful concrete examples
of stuff SQL is really bad at.&lt;/div&gt;
&lt;div class="line"&gt;The accompanying email was filled with nonsense about how important
and world-changing SQL was.&lt;/div&gt;
&lt;div class="line"&gt;I can't disagree. Back when disk was very expensive and very small,
the SQL-based join strategies where essential for micro-managing every
bit of data. Literally. Every Bit.&lt;/div&gt;
&lt;div class="line"&gt;And then we would denormalize the structure for performance reasons.
Because we always knew the SQL was terrible at a fairly large number
of things.&lt;/div&gt;
&lt;div class="line"&gt;Those days are behind us. We can now chose to use a document database,
and make our lives simpler. Storage is relatively inexpensive, and the
labor to normalize and denormalize data doesn't create significant
value. The need to write stored procedures to turn a single conceptual
operation into a bunch of inserts and updates was a symptom that this
wasn't the best approach.&lt;/div&gt;
&lt;div class="line"&gt;I've had many &amp;quot;But what about...&amp;quot; conversations regarding document
databases.&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;What about ad-hoc queries in SQL?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;- Do you really do these without writing a Python script or creating a
Pandas dataframe? I doubt it. But. If you really think you'll do this,
most document stores either support a modified SQL or Javascript. And
yes, you hate Javascript, duly noted. I hate SQL, so we're even there.&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;What about joins?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;- It's a space-saving technique. We don't need the overheads to save
the space. The &amp;quot;update anomalies&amp;quot; still require careful design, and
may lead to some decomposition of data into multiple documents. But
the ruthless normalization shouldn't be seen as a requirement.&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;What about the schema?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;- It's brittle and schema migration creates a lot of low-value labor.
We can use Python JSONSchema to validate documents. See &lt;a class="reference external" href="https://medium.com/capital-one-developers/nosql-database-doesnt-mean-no-schema-a824d591034e"&gt;NoSQL
Database doesn't Mean No
Schema&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="transactional-v-analytical"&gt;
&lt;h2&gt;Transactional v. Analytical&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It requires some care to understand the distinction between
&amp;quot;transactional&amp;quot; and &amp;quot;analytical&amp;quot; uses for data. While folks try to
leverage this distinction, it's a spectrum not a distinction.&lt;/div&gt;
&lt;div class="line"&gt;A lot of data collection is a simple sequence of event documents.
These have no sensible state change, so they're not really
transactional. They are often created by concurrent processes where
locking prevents corruption, so transactions *seem* helpful. Except,
of course, the file system writes can be trivially sharded by process
ID and then unified later. And all document databases serialize
document writes from multiple client processes, so there's no value to
writing a relational database.&lt;/div&gt;
&lt;div class="line"&gt;Some data operations are properly stateful. By normalizing our tables,
moving from consistent state to consistent state is made complex.
Which requires a defined transaction as a work-around. And don't get
me started on replication and two-phase commit as yet another layer of
complexity on top of transactions.&lt;/div&gt;
&lt;div class="line"&gt;A document database allows us to skip over 1NF. We can think of a
document as being a row in a table where the data types are complex
data structures involving mappings, sequences, strings, numbers,
booleans, and nulls. (See &lt;a class="reference external" href="http://json-schema.org/"&gt;JSON Schema&lt;/a&gt;.)
A lot of multi-step SQL transactions are operations on several
children of a common parent. If the parent was persisted as a single
document, there wouldn't be multiple operations, an atomic MongoDB
update operation can make complex rewrites to a complex document.&lt;/div&gt;
&lt;div class="line"&gt;We can contrive a design where state changes must be coordinated and
the data cannot be colocated in a single document. It's not difficult
to stipulate enough requirements to make single documents difficult.
The presence of these contrived requirement, however, doesn't suddenly
invalidate document datastores for transactional data. In the SQL
world, the idea of long-running and reversible long-running
transactions has always been a horrible problem. Allowing stacked
&amp;quot;undo&amp;quot; for the user means either creating a chain of &lt;strong&gt;Memento&lt;/strong&gt;
objects that can recover previous state, or having numerous flags and
indicators on each record, allowing the state to be reversed. Some
design problems are really hard. And the SQL model seems to make them
harder.&lt;/div&gt;
&lt;div class="line"&gt;The core ACID concepts of always consistent is -- in practice --
nonsense. As soon as we have to consider &amp;quot;isolation levels&amp;quot; and &amp;quot;read
consistency&amp;quot; it becomes clear that there is no consistent state unless
all transactions and queries are serialized via exclusive &amp;quot;whole
database&amp;quot; locking. Competent DBA's know that long-running analytic
queries performed concurrently with transactional updates can't use
locking, and must tolerate inconsistencies in the database.&lt;/div&gt;
&lt;div class="line"&gt;It's common practice to do data extracts so that analytic queries
aren't working against the (inconsistent) transactional data. In this
case, the frequency of extracts is the timing of &amp;quot;eventual
consistency&amp;quot; promised by the BASE concept.&lt;/div&gt;
&lt;div class="line"&gt;Bottom Line: Relational ACID rules are almost always broken in
practice by read consistency rules and extracts to analytic databases.
Analytical data is always based on eventual consistency expectations.
The batch extracts means &amp;quot;eventually&amp;quot; is measured in hours. A document
data store can often create consistency in milliseconds. (MongoDB
primary failure, voting, and secondary promotion to primary relies on
a 10-second heartbeat, so it takes time to discover and repair.)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="also"&gt;
&lt;h2&gt;Also&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;A second email detailed their amazement (Amazing! Wow! Unbelievable!
You Must Inform The World Of This!) that analytic processing of data
is actually faster and simpler using the file system. The very idea of
HDFS was so amazing that they were amazed.&lt;/div&gt;
&lt;div class="line"&gt;Somehow, the idea of the raw filesystem as being really, really fast
was the source of much amazement.&lt;/div&gt;
&lt;div class="line"&gt;I'm glad they're making an effort to catch up. I'm glad they're seeing
the relational model as a bad choice that has a limited number of use
cases. Mostly, relational databases are useful for an organization
can't write API's to handle the integrity issues.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=2&amp;amp;ved=0ahUKEwj_p_Suie7YAhUBUKwKHY_zA3UQFggxMAE&amp;amp;url=https%3A%2F%2Farstechnica.com%2Finformation-technology%2F2016%2F03%2Fto-sql-or-nosql-thats-the-database-question%2F&amp;amp;usg=AOvVaw1ifu0XcvWq5iNhPKb7XZhj"&gt;To SQL or NoSQL? That's the database question | Ars
Technica&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="noSQL"></category></entry><entry><title>Spec to Gherkin to Code: A Relay Play based on Swagger and OAS</title><link href="https://slott56.github.io/2018_02_06-spec_to_gherkin_to_code_a_relay_play_based_on_swagger_and_oas.html" rel="alternate"></link><published>2018-02-06T08:00:00-05:00</published><updated>2018-02-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-02-06:/2018_02_06-spec_to_gherkin_to_code_a_relay_play_based_on_swagger_and_oas.html</id><content type="html">&lt;p&gt;Recent publications elsewhere: &lt;a class="reference external" href="https://medium.com/capital-one-developers/spec-to-gherkin-to-code-902e346bb9aa"&gt;Spec to Gherkin to
Code&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="gherkin"></category><category term="#python"></category><category term="swagger"></category></entry><entry><title>PyCon 2018 Program Committee</title><link href="https://slott56.github.io/2018_01_23-pycon_2018_program_committee.html" rel="alternate"></link><published>2018-01-23T08:00:00-05:00</published><updated>2018-01-23T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-01-23:/2018_01_23-pycon_2018_program_committee.html</id><summary type="html">&lt;p&gt;I was &amp;quot;volunteered&amp;quot; by a colleague to help the program committee for
&lt;a class="reference external" href="https://us.pycon.org/2018/about/"&gt;PyCon 2018&lt;/a&gt;. I rarely think of
myself as qualified for this kind of thing. Yes. I have six books on
Python (with a seventh on the way) but the PSF folks are brilliant and
dedicated and hard-working, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was &amp;quot;volunteered&amp;quot; by a colleague to help the program committee for
&lt;a class="reference external" href="https://us.pycon.org/2018/about/"&gt;PyCon 2018&lt;/a&gt;. I rarely think of
myself as qualified for this kind of thing. Yes. I have six books on
Python (with a seventh on the way) but the PSF folks are brilliant and
dedicated and hard-working, and I'm just a slob.&lt;/p&gt;
&lt;p&gt;Yes, I do get to help the community by reviewing almost 700
individual proposals. Some good. Some really good. Some which we
&lt;em&gt;must&lt;/em&gt; hear.&lt;/p&gt;
&lt;p&gt;The collateral benefit?&lt;/p&gt;
&lt;p&gt;Side reading.&lt;/p&gt;
&lt;p&gt;My browser history is filled with things I hadn't known existed.&lt;/p&gt;
&lt;p&gt;Next time, I need to get started *before* the deadline so I can
have a little more interaction with the authors. There were a few
outlines where we could only discuss the possibility of making a
change if the proposal was accepted.&lt;/p&gt;
&lt;p&gt;In particular, there seemed to be a &lt;em&gt;lot&lt;/em&gt; of Machine
Learning-Bayesian-Deep Learning-Recommender-Data Science pitches that
had abbreviated outlines. They tend to all look alike to someone
who's not an expert. Five bullet points: the author's background, the
problem domain, ML (or modeling or whatever), a Jupyter notebook
showing the results, and a conclusion.  Providing some distinct angle
to the pitch (other than the problem domain) might help &lt;strong&gt;me&lt;/strong&gt;
understand them more fully. It seemed best to defer to the consensus
on these.&lt;/p&gt;
&lt;p&gt;I've been learning to live with my personal bias against meta-talks
about building community. A presentation on community building at a
community event seems redundant to me. But that doesn't mean they're
not thorough, articulate talks that will be useful to others. Since I
have a seat at the table, I'm biased. The Python tie-in feels weak,
but our code of conduct (Open, Considerate, Respectful) means PyCon
really &lt;strong&gt;is&lt;/strong&gt; the place for more of this. Most importantly, they're
objectively solid talks. (And -- as a member of the the
over-represented old male nerd class, I do need to listen more.)
It's been enlightening. And the conference will rock.&lt;/p&gt;
</content><category term="Technologies"></category><category term="pycon"></category></entry><entry><title>I've decided on Windows -- Please help justify my choice</title><link href="https://slott56.github.io/2018_01_16-ive_decided_on_windows_please_help_justify_my_choice.html" rel="alternate"></link><published>2018-01-16T08:00:00-05:00</published><updated>2018-01-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-01-16:/2018_01_16-ive_decided_on_windows_please_help_justify_my_choice.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;After many words, the email chain I received netted out to this:&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I can't teach myself data science on my crappy old Windows machine.&lt;/li&gt;
&lt;li&gt;I've decided to get a new Windows machine. Here are the specs.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;My response was a mixture of incredulity and bafflement.&lt;/div&gt;
&lt;div class="line"&gt;It appears that two things …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;After many words, the email chain I received netted out to this:&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I can't teach myself data science on my crappy old Windows machine.&lt;/li&gt;
&lt;li&gt;I've decided to get a new Windows machine. Here are the specs.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;My response was a mixture of incredulity and bafflement.&lt;/div&gt;
&lt;div class="line"&gt;It appears that two things happened while I wasn't paying attention.&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Apple ceased to exist.&lt;/li&gt;
&lt;li&gt;The cloud ceased to exist.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I'm aware that many people think the Apple alternative is a
non-starter. They are sure that after 40+ years selling computes,
Apple is doomed, and we'll only have Windows on the desktop.
Seriously.&lt;/div&gt;
&lt;div class="line"&gt;Some people have farcical explanations for why Apple &lt;strong&gt;Cannot be Taken
Seriously&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;In this specific instance, there was a large investment in Python and
Java that somehow couldn't be rebuild in Mac OS X. Details were
explicitly not provided. Which is a way of saying there were no
tangible &amp;quot;requirements&amp;quot; for this upgrade. Just specification numbers.&lt;/div&gt;
&lt;div class="line"&gt;Import note. None of this involved &amp;quot;data&amp;quot; or &amp;quot;science.&amp;quot; That was the
baffling part. No objective measurement of anything. No list of
software titles. No projects. No dataset sizes. Nothing.&lt;/div&gt;
&lt;div class="line"&gt;The anti-cloud argument was even stranger than the anti-Mac argument.&lt;/div&gt;
&lt;div class="line"&gt;Somehow, a super-large AWS server -- let's say it was a x1.16xlarge --
being used an hour a day (365 day*1 hr/day*$1.82/hr = $664) was deemed
*more* expensive that a 64Gb 6-core home-based machine that would
sit idle 23 hours each day.&lt;/div&gt;
&lt;div class="line"&gt;The best part of $664/yr being *more* expensive?&lt;/div&gt;
&lt;div class="line"&gt;Expert Judgement.&lt;/div&gt;
&lt;div class="line"&gt;No &amp;quot;data&amp;quot;. No &amp;quot;science&amp;quot;. No measurement. No supporting details.&lt;/div&gt;
&lt;div class="line"&gt;I wish I'd kept the email describing how someone who knew something
said something about pricing.  It was marvelous &lt;strong&gt;Highest Paid
Person's Opinion&lt;/strong&gt; nonsense.&lt;/div&gt;
&lt;div class="line"&gt;AFAIK, they were using 8,766 hours per year to compare AWS computing
vs. at-home computing. This meant that an m5.4xlarge should be
considered as costing $1,939 each year. Presumably because they'd
never shut it off.&lt;/div&gt;
&lt;div class="line"&gt;It included terms like &amp;quot;half-way decent performance.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;There's a depth of wrongness to this that's hard to characterize
beyond no &amp;quot;data&amp;quot; and no &amp;quot;science&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="architecture"></category></entry><entry><title>Code Rewrites and How They Create Value -- Stop Fighting Against It</title><link href="https://slott56.github.io/2018_01_09-code_rewrites_and_how_they_create_value_stop_fighting_against_it.html" rel="alternate"></link><published>2018-01-09T08:00:00-05:00</published><updated>2018-01-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-01-09:/2018_01_09-code_rewrites_and_how_they_create_value_stop_fighting_against_it.html</id><summary type="html">&lt;p&gt;TL;DR -- To remove doubts and questions, rewrite it.&lt;/p&gt;
&lt;p&gt;Many, many people are confronted with the request to maintain someone
else's code.&lt;/p&gt;
&lt;p&gt;Either it's open source, and you have to make formal PR's visible to
the world.&lt;/p&gt;
&lt;p&gt;Or it's &amp;quot;enterprise&amp;quot; in-house software, and you have to make PR's
visible to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR -- To remove doubts and questions, rewrite it.&lt;/p&gt;
&lt;p&gt;Many, many people are confronted with the request to maintain someone
else's code.&lt;/p&gt;
&lt;p&gt;Either it's open source, and you have to make formal PR's visible to
the world.&lt;/p&gt;
&lt;p&gt;Or it's &amp;quot;enterprise&amp;quot; in-house software, and you have to make PR's
visible to a work team.&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;It's &amp;quot;work group&amp;quot; in-house software, and you have source that may not
be under proper source-code control installed on a server where you're
taking over someone else's carefully built structure of porcelain
components.&lt;/p&gt;
&lt;p&gt;In the first case -- public code -- a rewrite is a challenge. People
depend on it having a well-known interface. A small change here could
alienate large swaths of the user community. On the other hand. A
small change here could make the project *more* useful to *more*
people. This is challenging. My advice here is limited.&lt;/p&gt;
&lt;p&gt;When we look at enterprise software, however, a rewrite won't have
quite the same &amp;quot;blast radius.&amp;quot;&lt;/p&gt;
&lt;p&gt;When we look at work-group software, there is no blast radius.&lt;/p&gt;
&lt;div class="section" id="benefits-of-a-rewrite"&gt;
&lt;h2&gt;Benefits of a Rewrite&lt;/h2&gt;
&lt;p&gt;Why rewrite? Three reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You can understand it. (This is HUGE.)&lt;/li&gt;
&lt;li&gt;You can make it objectively better (i.e., higher PyLint scores,
better documentation coverage.)&lt;/li&gt;
&lt;li&gt;You can add or expand the test cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The first and foremost reason -- &lt;strong&gt;understanding&lt;/strong&gt; -- can't be&lt;/dt&gt;
&lt;dd&gt;understated.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;It's a HUGE fight every time. The standard argument is &amp;quot;If It Ain't
Broke, Don't Fix It.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is, of course, based on misunderstanding the level of &amp;quot;broke.&amp;quot; A
delicately-balanced tower of porcelain components that worked once
last month is -- in effect -- already pre-broken if any change will
disturb the structure and ruin everything.&lt;/p&gt;
&lt;p&gt;There are lots of examples.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The app only works with Pandas 0.12.0 and will not work with 0.13.x
or the 0.22.0 you have in your default Conda environment.&lt;/li&gt;
&lt;li&gt;The app only works when you provide --someoption=False, and no one
can figure out why.&lt;/li&gt;
&lt;li&gt;Some test cases have &amp;#64;skip because they don't work. But should.&lt;/li&gt;
&lt;li&gt;The setup.py doesn't work and you can only run it using PYTHONPATH.&lt;/li&gt;
&lt;li&gt;The default logging initialization is &amp;quot;somehow&amp;quot; not right and
requires a manual override in the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know. I've created all of these problems.&lt;/p&gt;
&lt;p&gt;On one hand, we have management: &amp;quot;It ain't broke.&amp;quot;&lt;/p&gt;
&lt;p&gt;On the other hand, we have everyone else: &amp;quot;It's a fragile nightmare of
pre-broken components that cannot be touched.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-script"&gt;
&lt;h2&gt;The Script&lt;/h2&gt;
&lt;p&gt;Here's how it plays out. In the Real World.&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;It ain't broke. Don't fix it.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;I can't make it work.&amp;quot;&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;It ran last month.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;I made one small change and it doesn't run this month.&amp;quot;&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;Back out the change.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;The results are then useless.&amp;quot;&lt;/p&gt;
&lt;p&gt;After much Grrr and Gnashing...&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;Identify the problems and we'll prioritize.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;Here are a dozen things.&amp;quot;&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;These are too vague. Be more specific.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;Here are a score of things.&amp;quot;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Management: &amp;quot;You're in the weeds. Bring it up a level to where&lt;/dt&gt;
&lt;dd&gt;business people can understand it.&amp;quot;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;After more Grrr and Gnashing...&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;What's the smallest change we can get away with?&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;The one I made that broke everything.&amp;quot;&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;Let's have lots of peer review and design walkthroughs.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;Cool, then you'll see how broken it is.&amp;quot;&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;Okay. Let's not. Instead, make the smallest change you can.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;I made one small change and it doesn't run this month.&amp;quot;&lt;/p&gt;
&lt;p&gt;Management: &amp;quot;Back out the change.&amp;quot;&lt;/p&gt;
&lt;p&gt;You: &amp;quot;The results are then useless.&amp;quot;&lt;/p&gt;
&lt;p&gt;Can we break the cycle of uselessness?&lt;/p&gt;
&lt;p&gt;Depends.&lt;/p&gt;
&lt;p&gt;We may be struggling with management folks who are set against fixing
what's obviously broken. They're living a rich fantasy life that you
can't really change.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;The Grrr and Gnashing part of the dialog represents time in which
useful stuff can be done. Specifically. Rewrites.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rewriting-strategy"&gt;
&lt;h2&gt;Rewriting Strategy&lt;/h2&gt;
&lt;p&gt;There are three important parts of rewriting.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Understand what it's doing and why.&lt;/li&gt;
&lt;li&gt;Describe it with test cases.&lt;/li&gt;
&lt;li&gt;Make it objectively clear (i.e., high PyLint scores, complete documentation, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The effort often involves multiple passes. I like to describe it as
&lt;strong&gt;Test-Driven Reverse Engineering&lt;/strong&gt; (TDRE).&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create (or expand) the test cases.&lt;/li&gt;
&lt;li&gt;Rewrite the code.&lt;/li&gt;
&lt;li&gt;Repeat until it's better.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's essential to do these in order. Without test cases, rewrites are
only more breakage. With test cases, rewrites are guaranteed to
produce the same results as the previous mess of horrible code.
Sometimes the test cases are really a kind of &amp;quot;system test&amp;quot; where the
whole application is run against some known inputs to produce some
expected outputs. This is better than nothing. It supports building
fine-grained unit test cases that conform to the system test case.
Other times, the test cases may be proper unit tests and the rewrites
can be at a finer level of granularity. In this case, test coverage
may have to be expanded to include the fragile bits. In some cases,
the rewrites may be necessary to make the code testable in the first
place.&lt;/p&gt;
&lt;p&gt;Adding test cases is objectively valuable work.&lt;/p&gt;
&lt;p&gt;Even the dumbest of &amp;quot;It ain't broke&amp;quot; managers can recognize this
value. The rewrites are a beneficial consequence of adding test
cases. You may be able to achieve a goal of fixing something without
ever being seen as &amp;quot;fixing&amp;quot; it. All you did was improve test case
coverage and improve the &amp;quot;design for testability.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="costs-and-benefits"&gt;
&lt;h2&gt;Costs and Benefits&lt;/h2&gt;
&lt;p&gt;Consider the cost of struggling vs. the cost of rewriting.&lt;/p&gt;
&lt;p&gt;It's the same 80 hours of effort.&lt;/p&gt;
&lt;p&gt;In one case, you struggled with something management insisted wasn't
broken. Eventually, you found ways to make it work.&lt;/p&gt;
&lt;p&gt;In the other case, you rewrite something management insisted wasn't
broken. In the end, you actually understood it and created objective
improvements in the code.&lt;/p&gt;
&lt;p&gt;Which is better value for the investment?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="test-driven reverse engineering"></category></entry><entry><title>The TLA Problem -- Over-Engineering Three-Letter Acronyms</title><link href="https://slott56.github.io/2017_12_19-the_tla_problem_over_engineering_three_letter_acronyms.html" rel="alternate"></link><published>2017-12-19T08:00:00-05:00</published><updated>2017-12-19T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-12-19:/2017_12_19-the_tla_problem_over_engineering_three_letter_acronyms.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's something we can gleefully over-engineer. Because anything
worth doing is worth over-engineering until it morphs into a different
kind of problem.&lt;/div&gt;
&lt;div class="line"&gt;I'm unclear on the backstory, so try not to ask &amp;quot;why are we doing
this?&amp;quot; I think it has something to do with code camp and there are …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's something we can gleefully over-engineer. Because anything
worth doing is worth over-engineering until it morphs into a different
kind of problem.&lt;/div&gt;
&lt;div class="line"&gt;I'm unclear on the backstory, so try not to ask &amp;quot;why are we doing
this?&amp;quot; I think it has something to do with code camp and there are
teenagers involved.&lt;/div&gt;
&lt;div class="line"&gt;What we want to do is generate a pool of 200 TLA's. Seems simple,
right?&lt;/div&gt;
&lt;div class="line"&gt;The first pass may not be obvious, but this works well.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
import string
import random
from typing import Iterator

DOMAIN = string.ascii_lowercase
def tlagen() -&amp;gt; Iterator[str]:
    while True:
        yield &amp;quot;&amp;quot;.join(random.choice(DOMAIN) for _ in range(3))

tla_iter = tlagen()
for i in range(200):
    print(next(tla_iter))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This makes 200 TLA's. It's configurable, if that's important. We could
change tlagen() to take an argument in case we wanted four-letter
acronyms or something else.&lt;/div&gt;
&lt;div class="line"&gt;However. This will generate words like &amp;quot;cum&amp;quot; and &amp;quot;ass&amp;quot;. We need a
forbidden word list and want to filter out some words. Also, there's
no uniqueness guarantee.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-forbidden-word-filter"&gt;
&lt;h2&gt;The Forbidden Word Filter&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Here's a simple forbidden word filter. Configure FORBIDDEN with a set
of words you'd like to exclude. Maybe exclude &amp;quot;sex&amp;quot; and &amp;quot;die&amp;quot;, too.
Depends on what age the teenagers are.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def acceptable(word: str) -&amp;gt; bool:
    return word not in FORBIDDEN
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Here's another handy thing. Rather than repeat the &amp;quot;loop until&amp;quot; logic,
we can encapsulate it into a function.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
from typing import TypeVar, Iterator
T_ = TypeVar(&amp;quot;T_&amp;quot;)
def until(limit: int, source: Iterator[T_]) -&amp;gt; Iterator[T_]:
    source_iter = iter(source)
    for _ in range(limit):
        item = next(source_iter)
        yield item
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Okay. That's workable. This lets us use the following:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
list(until(200, filter(acceptable, tlagen())))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Read this from inside to outside. First, generate a sequence of TLA's.
Apply a filter to that generator. Apply the &amp;quot;until&amp;quot; counter to that
filtered sequence of TLA's. Create a list with 200 items. Nice.&lt;/div&gt;
&lt;div class="line"&gt;The TypeVar gives us a flexible binding. The input is an iterator over
things and the output will be an iterator over the same kinds of
things. This formalizes a common understanding of how iterators work.
The &lt;strong&gt;mypy&lt;/strong&gt; tool can confirm that the code meets the claims in the
type hint.&lt;/div&gt;
&lt;div class="line"&gt;There are two sketchy parts about this. First the remote possibility
of duplicates. Nothing precludes duplicates. And we're doing a bunch
of string hash computations. To avoid duplicates, we need a growing
cache of already-provided words. Or perhaps we need to build a set
until it's the right size. Rather than compute hashes of strings, can
we work with the numeric representation directly?&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="numeric-tla-s"&gt;
&lt;h2&gt;Numeric TLA's&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;There are only a few TLA's.&lt;/div&gt;
&lt;div class="line"&gt;$$26^{3} = 17576 $$&lt;/div&gt;
&lt;div class="line"&gt;Of these, perhaps four are forbidden. We can easily convert a number
back to a word and work with a finite domain of integers. Here's a
function to turn an integer into a TLA.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def intword(number: int) -&amp;gt; str:
    def digit_iter(number: int) -&amp;gt; Iterator[int]:
        for i in range(3):
            number, digit = divmod(number, 26)
            yield digit
    return &amp;quot;&amp;quot;.join(DOMAIN[d] for d in digit_iter(number))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This will iterate over the three digits using a simple
divide-and-remainder process to extract the digits from an integer.
The digits are turned into letters and we can build the TLA from the
number.&lt;/div&gt;
&lt;div class="line"&gt;What are the numeric identities of the forbidden words?&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def polynomial(base: int, coefficients: Sequence[int]) -&amp;gt; int:
    return sum(c*base**i for i, c in enumerate(coefficients))

def charnum(char: str) -&amp;gt; int:
    return DOMAIN.index(char)

def wordint(word: str) -&amp;gt; int:
    return polynomial(26, map(charnum, word))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;We convert a word to a number by mapping individual characters to
numbers, then computing a polynomial in base 26. And yes, the
implementation of polynomial() is inefficient because it uses the **
operator instead of folding in a multiply-and-add operation among the
terms of the polynomial.&lt;/div&gt;
&lt;div class="line"&gt;Here's another way to handle the creation of TLA's.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
FORBIDDEN_I = set(map(wordint, FORBIDDEN))
subset = list(set(range(0, 26**3)) - FORBIDDEN_I)
random.shuffle(subset)
return list(map(intword, subset[:200]))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This is cool. We create a set of numeric codes for all TLA's, then
remove the few numbers from the set of TLA's. What's left is the
entire domain of permissible TLA's. All of them. Shuffle and pick the
first 200.&lt;/div&gt;
&lt;div class="line"&gt;It &lt;strong&gt;guarantees&lt;/strong&gt; no duplicates. This has a lot of advantages because
it's simple code.&lt;/div&gt;
&lt;div class="line"&gt;This, however, takes a surprisingly long time: almost 17 milliseconds
on my laptop.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="numeric-filtering"&gt;
&lt;h2&gt;Numeric Filtering&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Let's combine the numeric approach with the original ideal of
generating as few items as we can get away with, but also checking for
duplicates.&lt;/div&gt;
&lt;div class="line"&gt;First, we need to generate the TLA numbers instead of strings. Here's
a sequence of random numbers that is confined to the TLA domain.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def tlaigen() -&amp;gt; Iterator[int]:
    while True:
        yield random.randrange(26**3)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Now, we need to pass unique items, and reject duplicate items. This
requires a cache that grows. We can use a simple set. Although, a
bit-mask with 17,576 bits might be more useful.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def unique(source: Iterator[T_]) -&amp;gt; Iterator[T_]:
    cache = set()
    for item in source:
        if item in cache:
            continue
        cache.add(item)
        yield item
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This uses an ever-growing cache to locate unique items. This will tend
to slow slightly based on memory management for the set. My vague
understanding is the implementation will double the size when hash
collisions start occurring, leading a kind of log&lt;sub&gt;2&lt;/sub&gt; slowdown
factor as the set grows.&lt;/div&gt;
&lt;div class="line"&gt;The final generator looks like this:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
list(until(200, unique(filter(lambda w: w not in FORBIDDEN_I, tlaigen()))))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Reading from inner to outer, we have a generator which will produce
numbers in the TLA range. The few forbidden numbers are excluded. The
cache is checked for uniqueness. Finally, the generator stops after
yielding 200 items.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Of course, we're using timeit to determine the overall impact of all
of this engineering. We're only doing 1,000 iterations, not the
default of 1,000,000 iterations.&lt;/div&gt;
&lt;div class="line"&gt;The original version: 0.94 seconds.&lt;/div&gt;
&lt;div class="line"&gt;The improved number-based version: 0.38 seconds.&lt;/div&gt;
&lt;div class="line"&gt;So there.  Want to generate values from a limited domain of strings?
Encode things as numbers and work with the numeric representation.
Much faster.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category></entry><entry><title>Ordered Keys in Dictionaries</title><link href="https://slott56.github.io/2017_12_16-ordered_keys_in_dictionaries.html" rel="alternate"></link><published>2017-12-16T08:42:00-05:00</published><updated>2017-12-16T08:42:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-12-16:/2017_12_16-ordered_keys_in_dictionaries.html</id><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/73450913/IMG_0202_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Raymond Hettinger(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/raymondh?refsrc=email&amp;amp;s=11"&gt;&amp;#64;raymondh&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;12/15/17, 11:40 AM &lt;a class="reference external" href="https://twitter.com/raymondh/status/941709626545864704?refsrc=email&amp;amp;s=11"&gt;https://twitter.com/raymondh/status/941709626545864704?refsrc=email&amp;amp;s=11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/search?q=%23python&amp;amp;src=hash"&gt;#python&lt;/a&gt; news: 😀&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/gvanrossum"&gt;&amp;#64;gvanrossum&lt;/a&gt; just pronounced that dicts are now guaranteed to retain insertion order. This is the end of a long journey.&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>The Business of Book Promotions</title><link href="https://slott56.github.io/2017_12_12-the_business_of_book_promotions.html" rel="alternate"></link><published>2017-12-12T08:00:00-05:00</published><updated>2017-12-12T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-12-12:/2017_12_12-the_business_of_book_promotions.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It is hard (for me) to promote my books. It seems like empty vanity. I
realize that it's not -- promotion is essential -- but it's difficult.&lt;/div&gt;
&lt;div class="line"&gt;Packt just send a raft of detailed information for authors. Some
things they suggest I do.&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;✅Referrals. Want a &amp;quot;free&amp;quot; Python book? The &amp;quot;free&amp;quot; is …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It is hard (for me) to promote my books. It seems like empty vanity. I
realize that it's not -- promotion is essential -- but it's difficult.&lt;/div&gt;
&lt;div class="line"&gt;Packt just send a raft of detailed information for authors. Some
things they suggest I do.&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;✅Referrals. Want a &amp;quot;free&amp;quot; Python book? The &amp;quot;free&amp;quot; is in scare quotes
because you'll have to write a review. Otherwise, the book is yours.
DM me &amp;#64;s_lott and I'll put you on the list.&lt;/li&gt;
&lt;li&gt;✅Amazon Author
Profile: &lt;a class="reference external" href="https://www.amazon.com/Steven-Lott/e/B00HNRSLEK"&gt;https://www.amazon.com/Steven-Lott/e/B00HNRSLEK&lt;/a&gt; Check.&lt;/li&gt;
&lt;li&gt;Packt Blog Posts. Interesting. I'll have to look into that. I think
they can follow the RSS feed from here. If they can, check, this is
done.&lt;/li&gt;
&lt;li&gt;➡️Other on-line PR. Cool. I give them the blogs I follow. Nice. I can
do that.&lt;/li&gt;
&lt;li&gt;✅Social Media. I (sort-of) link these blog posts to my Twitter feed
through &lt;a class="reference external" href="https://dlvrit.com/"&gt;https://dlvrit.com&lt;/a&gt;. But I'm
half-hearted about it. Packt suggests in including &amp;#64;PacktAuthors so
that there's a proper Twitter tie-in. That seems like there's no work
to that. Also, there's a &lt;a class="reference external" href="https://www.facebook.com/groups/457541617915438/#_=_"&gt;Packt Experts Author Community on
Facebook&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;✅Blog. Got it. You're reading this. And, also,
here: &lt;a class="reference external" href="https://medium.com/&amp;#64;s_lott"&gt;https://medium.com/&amp;#64;s_lott&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;➡️Author Newsletter. This seems like next-level blogging with more
serious editorial planning. Interesting.&lt;/li&gt;
&lt;li&gt;🆒Packt Promotions. I like this: they do the marketing. I just have
to cooperate by sharing the information.&lt;/li&gt;
&lt;li&gt;🆒Virtual Book Release Party. Wait. This could be cool. &lt;em&gt;Functional
Python Programming 2e&lt;/em&gt; is coming next summer. Hmmm. This could be
fun. Banners and raffles for freebies or discounts.&lt;/li&gt;
&lt;li&gt;🚻Author Street Team. Mutual Support. Advanced Copies. I would need
to keep it organized, right? That's (potentially) a chunk of work.
I'll need to contemplate that&lt;/li&gt;
&lt;li&gt;✅Conferences. This is fun. For one of my PyCon trips, I got a promo
code from Packt for free content during the conference. That was
handy to give out. I went to Vistaprint and had a box of cards
printed with contact info and the promotion code.&lt;/li&gt;
&lt;li&gt;➡️Packt Live on-line conferences. I've done a few webinars. They're
difficult. Writing is easier because it unfolds more slowly. I'll
have to look into doing a few more of these.&lt;/li&gt;
&lt;li&gt;✅LinkedIn Profile. &lt;a class="reference external" href="https://www.linkedin.com/in/steven-lott-029835/"&gt;https://www.linkedin.com/in/steven-lott-029835/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I've hit a few. A few more to do.&lt;/div&gt;
&lt;div class="line"&gt;This is a pretty comprehensive list. It's good to see this kind of
author support.&lt;/div&gt;
&lt;div class="line"&gt;Also. They've done some serious re-engineering on their Author
toolchain. MS-Word documents seem to be a thing of the past.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="@PacktAuthors"></category><category term="#python"></category><category term="marketing promotion"></category></entry><entry><title>DC API User Group - December Edition</title><link href="https://slott56.github.io/2017_11_28-dc_api_user_group_december_edition.html" rel="alternate"></link><published>2017-11-28T08:00:00-05:00</published><updated>2017-11-28T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-11-28:/2017_11_28-dc_api_user_group_december_edition.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.meetup.com/DC-Web-API-User-Group"&gt;https://www.meetup.com/DC-Web-API-User-Group&lt;/a&gt;
&lt;a class="reference external" href="https://www.meetup.com/DC-Web-API-User-Group/events/245014240/"&gt;https://www.meetup.com/DC-Web-API-User-Group/events/245014240/&lt;/a&gt;
Nice bunch of people. Nice facility. Good discussions.&lt;/p&gt;
</content><category term="Technologies"></category><category term="API Design"></category><category term="meetup"></category></entry><entry><title>CI/CD DevOps and Python</title><link href="https://slott56.github.io/2017_11_14-cicd_devops_and_python.html" rel="alternate"></link><published>2017-11-14T08:00:00-05:00</published><updated>2017-11-14T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-11-14:/2017_11_14-cicd_devops_and_python.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.slideshare.net/ITRevolution/does-sfo-2016-topo-pal-devops-at-capital-one"&gt;https://www.slideshare.net/ITRevolution/does-sfo-2016-topo-pal-devops-at-capital-one&lt;/a&gt; for
the 16 gates that separate a good idea from secure, productive use of
software. While a lot of DevOps folks like the idea, when it comes to
implementing it for Python apps, they get confused.&lt;/p&gt;
&lt;p&gt;The confusion seems to stem from Python's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.slideshare.net/ITRevolution/does-sfo-2016-topo-pal-devops-at-capital-one"&gt;https://www.slideshare.net/ITRevolution/does-sfo-2016-topo-pal-devops-at-capital-one&lt;/a&gt; for
the 16 gates that separate a good idea from secure, productive use of
software. While a lot of DevOps folks like the idea, when it comes to
implementing it for Python apps, they get confused.&lt;/p&gt;
&lt;p&gt;The confusion seems to stem from Python's lack of a proper &amp;quot;build&amp;quot;
step in the CI/CD pipeline. I've had the &amp;quot;everything involves a build&amp;quot;
argument and the &amp;quot;well setup.py is analogous to a build&amp;quot; arguments. I
have to acquiesce to these positions as part of making progress. In
this case, reasoning by analogy can be misleading.&lt;/p&gt;
&lt;p&gt;I want to focus on the two gates that are part of the code itself,
separate from the rest of the pipeline.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Static Analysis&lt;/li&gt;
&lt;li&gt;&amp;gt;80% Code Coverage (which implies Unit Tests)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="unit-testing"&gt;
&lt;h2&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;My preference is to run the unit test suite first and get that out of
the way. If the unit test suite fails, or fails to cover 80% of the
code, any other considerations are moot.&lt;/p&gt;
&lt;p&gt;I like Git triggers based on Pull Requests (PR's) and Merge to Master
for checking these two conditions. I like the idea that a PR can't be
discussed until unit tests pass. They can also be part of whatever
other pipeline is going on, but I like them to be done early and
often.&lt;/p&gt;
&lt;p&gt;(I worked on a sprint team where the PR unit test wasn't trusted by
one of the devs: he'd carefully check out the branch and rerun the
unit tests. His comments were good, so the extra effort paid off. I
guess.)&lt;/p&gt;
&lt;p&gt;After flirting with a lot of frameworks, I'm happiest with
&lt;a class="reference external" href="https://docs.pytest.org/en/latest/"&gt;py.test&lt;/a&gt;. I like the
&lt;a class="reference external" href="http://pytest-cov.readthedocs.io/en/latest/"&gt;py.test-coverage&lt;/a&gt;
plug-in and the
&lt;a class="reference external" href="https://github.com/pytest-dev/pytest-bdd"&gt;py.test-BDD&lt;/a&gt; plug-in.&lt;/p&gt;
&lt;p&gt;Yes. We have acceptance tests for our features written in Gherkin. And
we have pytest fixtures that are used by pytest-bdd to process the
scenarios in the Gherkin feature files. It actually works out nicely
because we have a cucumber.json file that makes everyone happy that
we've run an acceptance test suite along with our unit test suite.&lt;/p&gt;
&lt;p&gt;What's important is the coverage report is painless and automatic.&lt;/p&gt;
&lt;p&gt;And it's compatible with the Ruby-based cucumber tool without
involving any actual ruby.&lt;/p&gt;
&lt;p&gt;For integration testing, we use
&lt;a class="reference external" href="http://pythonhosted.org/behave/"&gt;Behave&lt;/a&gt;. This is a bit more
cumbersome than pytest-bdd, but it's appropriate for the
bigger-picture testing where we have a docker cluster and have to see
a number of &amp;quot;Then&amp;quot; steps to confirm operations spread across a suite
of microservices.&lt;/p&gt;
&lt;p&gt;The goofy question that often leads to endless confusion is the
relationship between unit testing and &amp;quot;build.&amp;quot; The setup.py setup
definition includes a `tests_require` parameter. This *should be*
all that's needed to do `python setup.py test`, which *should be*
all that's involved in testing.&lt;/p&gt;
&lt;p&gt;Is it a &amp;quot;build&amp;quot;? No. But. You can tell the DevOps folks it's a build
if it makes them happy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-analysis"&gt;
&lt;h2&gt;Static Analysis&lt;/h2&gt;
&lt;p&gt;There are several kinds of static analysis. Folks who work in Java are
used to having Sonar analysis performed. This is above and beyond the
static analysis already performed by the compiler. It seems excessive
to me, but folks deploying Java seem to like it.&lt;/p&gt;
&lt;p&gt;For Python, there are two important static analysis tools. And this is
another source of profound confusion for DevOps folks new to Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pylint (I prefer this over pyflakes and pep8. See &lt;a class="reference external" href="https://blog.sideci.com/about-style-guide-of-python-and-linter-tool-pep8-pyflakes-flake8-haking-pyling-7fdbe163079d"&gt;About style guide
of python and linter
tool&lt;/a&gt;
for a long list of tools.)&lt;/li&gt;
&lt;li&gt;mypy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to extract the last line of the pylint output and use that
numeric score as the &amp;quot;bottom line&amp;quot; on static analysis part 1. While
the default setting is 9.5, that can be a challenge, and we prefer
9.0 as well as some local pylintrc modifications to modify some
checkers (e.g., set line length to 120.)&lt;/p&gt;
&lt;p&gt;For mypy, it's a little bit more complex. We're still fumbling around
here.&lt;/p&gt;
&lt;p&gt;Ideally, the type hints are all clean and mypy has nothing to say. We
can, of course, fix any errors by claiming everything uses Any and
returns Any and every assignment statement sets an Any value. But
that's so wrong.&lt;/p&gt;
&lt;p&gt;There are (still) modules which require typeshed stub definitions.
Ideally, we'd provide these. This would be better than using Any as a
hack-around. While good, it's a lot of work.&lt;/p&gt;
&lt;p&gt;For now, I think it's sensible to have two &amp;quot;pass&amp;quot; rules for mypy:
clean or typeshed error. If mypy is silent, that's perfect. If mypy
can't find stubs in typeshed, we can let this go for now and log an
issue from the CI/CD pipeline to note the presence of technical debt.&lt;/p&gt;
&lt;p&gt;In the best of all worlds, we'd fork the package, fix the type hints,
and put in a PR. That's a lot better than using typeshed to work
around the lack of hints.&lt;/p&gt;
&lt;p&gt;And, of course, there's the &amp;quot;build&amp;quot; question. For mypy to work, the
dependencies (or their typeshed stubs) must be present. We wind up
doing a &lt;tt class="docutils literal"&gt;python setup.py install&lt;/tt&gt; to build out the requirements. Is
this a &amp;quot;build&amp;quot;? Maybe. You can tell the DevOps folks it's a build if
it makes them happy.&lt;/p&gt;
&lt;p&gt;If you want idempotent server (or container) builds, you'll need to
be sure that you pin specific versions. It can help to break this
into two parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a requirements.txt with specific versions&lt;/li&gt;
&lt;li&gt;a generic version-free high-level list in setup.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason for this separation is to make it easy to do
a &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;conda create&lt;/tt&gt; from the detailed requirements. Once
that's out of the way, the &lt;tt class="docutils literal"&gt;python setup.py&lt;/tt&gt; will run very
quickly. If you're working with Docker containers,
the &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;conda create&lt;/tt&gt;) can be part of the Dockerfile, and
then tests or static analysis can be run separately, after the
initial wave of installations.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="DevOps"></category><category term="#python"></category><category term="continuous integration"></category><category term="continuous deployment"></category></entry><entry><title>Python Type Hinting -- generally easy until you find your design flaws</title><link href="https://slott56.github.io/2017_11_07-python_type_hinting_generally_easy_until_you_find_your_design_flaws.html" rel="alternate"></link><published>2017-11-07T08:00:00-05:00</published><updated>2017-11-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-11-07:/2017_11_07-python_type_hinting_generally_easy_until_you_find_your_design_flaws.html</id><summary type="html">&lt;p&gt;Adding type hints is easy and fun. Seriously. It's not a lot of work.&lt;/p&gt;
&lt;p&gt;Until.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Until you find a piece of code that does more than what you sort-of&lt;/dt&gt;
&lt;dd&gt;thought it kind-of did.&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre class="literal-block"&gt;
def null_aware_func(x):
    if x is None:
         return x
    return 2.2*x**1.05
&lt;/pre&gt;
&lt;p&gt;This is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Adding type hints is easy and fun. Seriously. It's not a lot of work.&lt;/p&gt;
&lt;p&gt;Until.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Until you find a piece of code that does more than what you sort-of&lt;/dt&gt;
&lt;dd&gt;thought it kind-of did.&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre class="literal-block"&gt;
def null_aware_func(x):
    if x is None:
         return x
    return 2.2*x**1.05
&lt;/pre&gt;
&lt;p&gt;This is a stab at a none-aware computation.
Let's add type hints, shall we?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def null_aware_func(x: float) -&amp;gt; float:
    if x is None:
        return None
    return 2.2*x**1.05
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;This won't fool mypy. Sigh. It passes unit tests, but it's flagged as&lt;/dt&gt;
&lt;dd&gt;a problem.&lt;/dd&gt;
&lt;dt&gt;We have a variety of ways of define this function. And that means we&lt;/dt&gt;
&lt;dd&gt;need to think carefully about our None-aware design.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Is this really an &lt;tt class="docutils literal"&gt;&amp;#64;overload&lt;/tt&gt;?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import overload
&amp;#64;overload
def null_aware_func(x: None) -&amp;gt; None:
    ...
def null_aware_func(x: float) -&amp;gt; float:
    if x is None:
        return None
    return 2.2*x**1.05
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;And yes, the &lt;tt class="docutils literal"&gt;...&lt;/tt&gt; is legit Python syntax. (It's a rarely used token&lt;/dt&gt;
&lt;dd&gt;that forms the body of the function.)&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Or is this a more advanced type?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import Optional
OptFloat = Optional[float]

def null_aware_func(x: OptFloat) -&amp;gt; OptFloat:
    if x is None:
        return None
    return 2.2*x**1.05
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;I'd argue that &lt;tt class="docutils literal"&gt;OptFloat&lt;/tt&gt; is a more sensible definition. However, if&lt;/dt&gt;
&lt;dd&gt;this is the only function that's none-aware, perhaps it's an overload.&lt;/dd&gt;
&lt;dt&gt;The deeper question is one of underlying meaning. Why are we doing&lt;/dt&gt;
&lt;dd&gt;this? What does it mean?&lt;/dd&gt;
&lt;dt&gt;And. Bonus. Will this be working in a SQLAlchemy environment, where&lt;/dt&gt;
&lt;dd&gt;they have their own wrappers for database objects, meaning that &lt;tt class="docutils literal"&gt;is None&lt;/tt&gt; doesn't work and &lt;tt class="docutils literal"&gt;== None&lt;/tt&gt; is required?&lt;/dd&gt;
&lt;dt&gt;What's important is that adding type hints forced us to think about&lt;/dt&gt;
&lt;dd&gt;what we were doing. Unlike Java we did this without stopping progress
for an extended period of &amp;quot;wrestling with the compiler&amp;quot;. We can use
Any temporarily because the unit tests all pass. Then, we can pay down
the technical debt by fixing the type declaration.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Total. Victory.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Some Reading</title><link href="https://slott56.github.io/2017_10_31-some_reading.html" rel="alternate"></link><published>2017-10-31T08:00:00-04:00</published><updated>2017-10-31T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-10-31:/2017_10_31-some_reading.html</id><summary type="html">&lt;p&gt;Higher-Order Functions. A really cool idea. Javascript isn't my favorite
language.
&lt;a class="reference external" href="https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528"&gt;https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528&lt;/a&gt;
This, on the other hand, is huge: trunk-based development.
&lt;a class="reference external" href="https://codeburst.io/trunk-based-development-vs-git-flow-a0212a6cae64"&gt;https://codeburst.io/trunk-based-development-vs-git-flow-a0212a6cae64&lt;/a&gt;
I'm really tired of having a dev branch with periodic commits to master
so we can deploy from master. It's so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Higher-Order Functions. A really cool idea. Javascript isn't my favorite
language.
&lt;a class="reference external" href="https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528"&gt;https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528&lt;/a&gt;
This, on the other hand, is huge: trunk-based development.
&lt;a class="reference external" href="https://codeburst.io/trunk-based-development-vs-git-flow-a0212a6cae64"&gt;https://codeburst.io/trunk-based-development-vs-git-flow-a0212a6cae64&lt;/a&gt;
I'm really tired of having a dev branch with periodic commits to master
so we can deploy from master. It's so much nicer to tag a release and
deploy that.
Here's the top 10 Python list for September 2017.
&lt;a class="reference external" href="https://medium.mybridge.co/python-top-10-articles-for-the-past-month-v-sep-2017-e42c26816ab9?source=email-f2cdc4351994-1507375544705-digest.reader------0-37&amp;amp;sectionName=top&amp;amp;gi=9a6dd40e3790"&gt;https://medium.mybridge.co/python-top-10-articles-for-the-past-month-v-sep-2017-e42c26816ab9?source=email-f2cdc4351994-1507375544705-digest.reader------0-37&amp;amp;sectionName=top&amp;amp;gi=9a6dd40e3790&lt;/a&gt;
Learning Python: Zero to
Hero: &lt;a class="reference external" href="https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567"&gt;https://medium.freecodecamp.org/learning-python-from-zero-to-hero-120ea540b567&lt;/a&gt;
Why we switched from Python to
Go: &lt;a class="reference external" href="https://codeburst.io/why-we-switched-from-python-to-go-60c8fd2cb9a9"&gt;https://codeburst.io/why-we-switched-from-python-to-go-60c8fd2cb9a9&lt;/a&gt;.
We distribute a CLI for our API in Go because it's slightly simpler to
provide executables in Go. However, our user community has Python
already... We need to provide similar functionality in Python.
Technical
Debt: &lt;a class="reference external" href="https://medium.freecodecamp.org/what-is-technical-debt-and-why-do-most-startups-have-it-9a54458daabf"&gt;https://medium.freecodecamp.org/what-is-technical-debt-and-why-do-most-startups-have-it-9a54458daabf&lt;/a&gt;
Software Engineering v.
Programming. &lt;a class="reference external" href="https://medium.com/&amp;#64;samerbuna/software-engineering-is-different-from-programming-b108c135af26"&gt;https://medium.com/&amp;#64;samerbuna/software-engineering-is-different-from-programming-b108c135af26&lt;/a&gt;
Annotations in Java? Ugh. The level of complexity seems to have gotten
out of
control. &lt;a class="reference external" href="https://blog.softwaremill.com/the-case-against-annotations-4b2fb170ed67"&gt;https://blog.softwaremill.com/the-case-against-annotations-4b2fb170ed67&lt;/a&gt;
Programming vs. the text of the code
itself. &lt;a class="reference external" href="https://medium.com/&amp;#64;karolismasiulis/programming-is-not-about-text-c205ba6aa3ba"&gt;https://medium.com/&amp;#64;karolismasiulis/programming-is-not-about-text-c205ba6aa3ba&lt;/a&gt; I'm
don't by the reductionist 1-dimensional view of text. Yes -- in a
narrow, technical sense, it's one-dimensional. If you want to be really
reductionist, it's a stream of bytes, which are really just a base-256
number. I don't think the reductionist argument is helpful. However, I
am sure that the declarative/imperative distinction is worthy of a lot
of thought, and this is a nice comparison. (In spite of the javascript.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="architecture"></category></entry><entry><title>Programming by Search, Copy, and Paste Leads to Epic Fail</title><link href="https://slott56.github.io/2017_10_27-programming_by_search_copy_and_paste_leads_to_epic_fail.html" rel="alternate"></link><published>2017-10-27T18:08:00-04:00</published><updated>2017-10-27T18:08:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-10-27:/2017_10_27-programming_by_search_copy_and_paste_leads_to_epic_fail.html</id><summary type="html">&lt;p&gt;In a way, this is about an epic fail attempting copy-and-paste coding.
But really, this is about thinking outside the box. The issue -- to me
-- comes from failing to see the box. Here's the body of the email,
edited slightly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;...how determine when a file has completed downloading. It would …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;In a way, this is about an epic fail attempting copy-and-paste coding.
But really, this is about thinking outside the box. The issue -- to me
-- comes from failing to see the box. Here's the body of the email,
edited slightly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;...how determine when a file has completed downloading. It would be
helpful if code snippets in a unix shell and Python.&lt;/p&gt;
&lt;p&gt;&amp;quot;I did Google but none seemed to address the fundamental race
conditions. They all involve a variant of try, sleep and try again.
This is problematic for my particular case because the file sizes
very significantly.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'll ignore the grammar problems and focus on the intent of the &amp;quot;I did
Google...&amp;quot; part. Based on some personal knowledge, I doubt there was
more than a single search string tried. And I doubt that more than a
single page of the response was looked at. Those are not important
concerns.&lt;/p&gt;
&lt;p&gt;The important concern is the shocking vagueness of the problem
statement. These words are almost entirely meaningless:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;a file has completed downloading&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Imagine the variety of possible file transfer protocols that could be
involved, and how many of them can be properly scripted. Take all the
time you want. It can help to make a list of all the protocols that
make this is a non-problem.&lt;/p&gt;
&lt;p&gt;No protocol was named. Therefore, a protocol was assumed. And the
presence of this kind of tacit assumption forms an implicit box
restricting what they're doing. The restriction is so unyielding to
them than they don't even need to mention it. It's as essential to
them as air. They need it, but cannot see it, and refused to
acknowledge it.&lt;/p&gt;
&lt;p&gt;At this point, all we can do is make random guesses.&lt;/p&gt;
&lt;blockquote&gt;
(&amp;quot;Why didn't you ask them for clarification?&amp;quot; you ask.  Good point.
It's a personal failure in this case. The back-and-forth would take
days. Eventually, they would send me useless explanations of deep
ineptitude or a need to engage in corporate politics. Or both. I'll
admit that I'm a jerk about requiring folks to take a first step and
make a stab at code. Without code, I find it largely impossible to
determine what they're &lt;strong&gt;really&lt;/strong&gt; talking about. The above question is
a prime example of a disconnection from reality that's too
exasperating to deal with except superficially.)&lt;/blockquote&gt;
&lt;div class="section" id="identifying-the-box"&gt;
&lt;h2&gt;Identifying the Box&lt;/h2&gt;
&lt;p&gt;Guess #1. This may be about FTP (or SFTP) file transfers. Further, it
may involve FTP file uploads to a server, where the client doesn't
disclose a size. Yes, the word &amp;quot;downloading&amp;quot; seems to preclude this
guess, but almost all other choices aren't even possible.&lt;/p&gt;
&lt;p&gt;If it really was a client side &lt;strong&gt;download&lt;/strong&gt;, this is trivially
automated using any of the available FTP client programs, include
wget, curl, sftp, etc. The Python ftplib seems to be a fully automated
client for FTP. The documentation is packed with examples. It seems
unlikely that the question is actually client-side.&lt;/p&gt;
&lt;p&gt;It's also possible that a single search failed to reveal all these
automatable FTP clients.&lt;/p&gt;
&lt;p&gt;Guess #2. &amp;quot;determine when&amp;quot;? Who actually cares when the upload
finishes? An upload matters to the next client doing a download, or --
perhaps -- to a process that's supposed to consume the uploaded file.
Is that what this is about?&lt;/p&gt;
&lt;p&gt;Is the real question &amp;quot;how to trigger processing of an uploaded file
when using FTP?&amp;quot;&lt;/p&gt;
&lt;p&gt;In this case, we're left with stacks of follow-up questions.
Primarily: &amp;quot;Why are you using FTP?&amp;quot;&lt;/p&gt;
&lt;p&gt;If they replace their silly FTP (or SFTP) server with a RESTful API,
they won't have these problems. It takes a few days to write a secure
file-upload Flask container. With a swagger spec. And unit tests. And
Gherkin feature definitions, and a behave test suite to be sure it
*really* works.  It doesn't need very many routes. On completion of
upload, it can fork off subprocesses to process the uploaded files.
This is not hard. Really. Flask + Celery will do this.&lt;/p&gt;
&lt;p&gt;Understanding the problem seems to require stepping outside of some
box. It appears this is a struggle because of a poorly-defined box: a
box assumed without being stated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-with-the-box"&gt;
&lt;h2&gt;Working With the Box&lt;/h2&gt;
&lt;p&gt;At this point, we can only pretend the problem is about triggering
processing after an upload. Let's further pretend the FTP is a legal
requirement. Or we can pretend that SFTP is imposed by an inept IT
department who also loves living inside some poorly-defined box. We're
stuck with FTP for inexplicable reasons.&lt;/p&gt;
&lt;p&gt;What can we do to game an FTP server to trigger processing of files of
unknown sizes?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Write our own FTP server. This isn't very hard. It is, however, far
simpler to write a RESTful Flask service that handles the file upload
as a POST request via curl or wget. Writing an FTP server's a pain in
the ass because the FTP protocol is surprisingly complex. Even
writing an FTP subset that serves very specific client needs can be
painful.&lt;/li&gt;
&lt;li&gt;Poll the upload directory. This implies a race condition. Polling
(and the race condition) have no practical consequences. If you want
&amp;quot;real-time&amp;quot;, write a RESTful API and don't use FTP. Since you're
insisting on FTP, a delay is going to be part of the solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm more than a little shocked that search was considered as a viable
design strategy to solving this problem. It doesn't seem like
searching for solutions is required at all. I'm probably overstating
this, but it seems sort of trivial and obvious that either a second
file is required or a better file protocol is required. This seems to
be simple &amp;quot;thinking&amp;quot; not &amp;quot;googling.&amp;quot;&lt;/p&gt;
&lt;p&gt;There are bunches of ways to approach this. Here are a few ways to use
a second file and some kind of naming convention to show that two
files are part of one transfer.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Send a file with the size of the target file *before* the target
file. When the target file matches the stated size, initiate
processing.&lt;/li&gt;
&lt;li&gt;Send a file with the size and MD5 checksum of the target file. etc.&lt;/li&gt;
&lt;li&gt;Send a file *after* the target file with the size and checksum.
When this file shows up, simply confirm that the first file is all
there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, polling is required. However, there's no race condition: there
are two separate conditions which must both be met. The files are
provided serially, the conditions are met serially.&lt;/p&gt;
&lt;p&gt;Here are a two approaches that use a file format that properly
handles completeness.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Gzip the file. The file receipt polling loop repeatedly tries to
unzip it. If the unzip fails, the file is incomplete.&lt;/p&gt;
&lt;p&gt;Don't want to spend too much CPU time? Wait until the size has
been stable for two polling intervals and then try to unzip
then.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Tar the file. Yes. A tar archive of a single file can be checked
for integrity. When the archive can be checked and shown to be
valid, the target element can be extracted and processed.&lt;/p&gt;
&lt;p&gt;Don't want to spend CPU time validating? Again. Wait for a
stable size for a few polling intervals.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, of course, it's possible to invent an entirely home-brewed
file-wrapping protocol. Here's an approach.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Wrap the content in MIME-style headers. These can provide a
size or a terminator string to help identify the end of the
transfer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The point here is that googling for code isn't part of solving
this problem. Indeed, it can't solve this problem. Merely
thinking about the nature of the problem (&amp;quot;triggering
processing&amp;quot;, &amp;quot;knowing the size&amp;quot;) seemed necessary and
sufficient to frame a solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-essential"&gt;
&lt;h2&gt;What's Essential&lt;/h2&gt;
&lt;p&gt;Here's what didn't happen:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;State the actual problem.&lt;/li&gt;
&lt;li&gt;Identify the boxes constraining the solution. Write them down. In words. There may be more
than one.&lt;/li&gt;
&lt;li&gt;Locate code to work with the boxes. Find the libraries or
packages. Install them. Write a hello world. example to be sure
that the code is understood.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then -- and only then -- can we start to imagine solutions and ask
questions about the boxes or the code that might manage the boxes.&lt;/p&gt;
&lt;blockquote&gt;
It's impossible to state this strongly enough: We can't think outside
the box if we refuse to acknowledge the box.&lt;/blockquote&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="#python"></category><category term="architecture"></category></entry><entry><title>Why I like Functional Composition</title><link href="https://slott56.github.io/2017_10_17-why_i_like_functional_composition.html" rel="alternate"></link><published>2017-10-17T08:00:00-04:00</published><updated>2017-10-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-10-17:/2017_10_17-why_i_like_functional_composition.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;After spending years developing a level of mastery over Object
Oriented Design Patterns, I'm having a lot of fun understanding
Functional Design Patterns.&lt;/div&gt;
&lt;div class="line"&gt;The OO Design Patterns are helpful because they're concrete
expressions of the S. O. L. I. D. design principles. Much of the &amp;quot;Gang
of Four&amp;quot; book demonstrates …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;After spending years developing a level of mastery over Object
Oriented Design Patterns, I'm having a lot of fun understanding
Functional Design Patterns.&lt;/div&gt;
&lt;div class="line"&gt;The OO Design Patterns are helpful because they're concrete
expressions of the S. O. L. I. D. design principles. Much of the &amp;quot;Gang
of Four&amp;quot; book demonstrates the Interface Segregation, Dependency
Injection, and Liskov Substitution Principles nicely. They point the
way for implementing the Open/Closed and the Single Responsibility
Principles.&lt;/div&gt;
&lt;div class="line"&gt;For Functional Programming, there are some equivalent ideas, with
distinct implementation techniques. The basic I, D, L, and S
principles apply, but have a different look in a functional
programming context. The Open/Closed principle takes on a radically
different look, because it turns into an exercise in Functional
Composition.&lt;/div&gt;
&lt;div class="line"&gt;I'm building an Arduino device that collects GPS data. (The context
for this device is the subject of many posts coming in the future.)&lt;/div&gt;
&lt;div class="line"&gt;GPS devices generally follow the NMEA 0183 protocol, and transmit
their data as sentences with various kinds of formats. In particular,
the GPRMC and GPVTG sentences contain speed over ground   (SOG) data.&lt;/div&gt;
&lt;div class="line"&gt;I've been collecting data in my apartment. And it's odd-looking. I've
also collected data on my boat, and it doesn't seem to look quite so
odd. Here's the analysis I used to make a more concrete conclusion.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def sog_study(source_path = Path(&amp;quot;gps_data_gsa.csv&amp;quot;)):
    with source_path.open() as source_file:
        rdr = csv.DictReader(source_file)
        sog_seq = list(map(float, filter(None, (row['SOG'] for row in rdr))))
        print(&amp;quot;max {}\tMean {}\tStdev {}&amp;quot;.format(
            max(sog_seq), statistics.mean(sog_seq), statistics.stdev(sog_seq)))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This is a small example of functional composition to build a sequence
of SOG reports for analysis.&lt;/div&gt;
&lt;div class="line"&gt;This code opens a CSV file with data extracted from the Arduino. There
was some reformatting and normalizing done in a separate process: this
resulted in a file in a format suitable for the processing shown
above.&lt;/div&gt;
&lt;div class="line"&gt;The compositional part of this is the &lt;em&gt;list(map(float, filter(None,
generator)))&lt;/em&gt; processing.&lt;/div&gt;
&lt;div class="line"&gt;The (row['SOG'] for row in rdr) generator can iterate over all values
from the SOG column. The filter(None, generator) will drop all None
objects from the results, assuring that irrelevant sentences are
ignored.&lt;/div&gt;
&lt;div class="line"&gt;Given an iterable that can produce SOG values, the map(float,
iterable) will convert the input strings into useful numbers. The
surrounding list() creates a concrete list object to support summary
statistics computations.&lt;/div&gt;
&lt;div class="line"&gt;I'm really delighted with this kind of short, focused functional
programming.&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;But wait,&amp;quot; you say. &amp;quot;How is that anything like the SOLID OO design?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Remember to drop the OO notions. This is functional composition, not
object composition.&lt;/div&gt;
&lt;div class="line"&gt;ISP: The built-in functions all have well-segregated interfaces. Each
one does a small, isolated job.&lt;/div&gt;
&lt;div class="line"&gt;LSP: The concept of an iterable supports the Liskov Substitution
Principle: it's easy to insert additional or different processing as
long as we define functions that accept iterables as an argument and
yield their values or return an iterable result.&lt;/div&gt;
&lt;div class="line"&gt;For example.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def sog_gen(csv_reader):
    for row in csv_reader:
        yield row['SOG']
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;We've expanded the generator expression, (row['SOG'] for row in rdr),
into a function. We can now use sog_gen(rdr) instead of the generator
expression. The interfaces are the same, and the two expressions enjoy
Liskov Substitution.&lt;/div&gt;
&lt;div class="line"&gt;To be really precise, annotation with type hints can clarify this.
 Something like sog_gen(rdr: Iterable[Dict[str, str]]) -&amp;gt;
Iterable[str] would clarify this.&lt;/div&gt;
&lt;div class="line"&gt;DIP: If we want to break this down into separate assignment
statements, we can see how a different function can easily be injected
into the processing pipeline. We could define a higher-order function
that accepted functions like sog_gen, float, statistics.mean, etc.,
and then created the composite expression.&lt;/div&gt;
&lt;div class="line"&gt;OCP: Each of the component functions is closed to modification but
open to extension. We might want to do something like this: map_float
= lambda source: map(float, source). The map_float() function extends
map() to include a float operation. We might even want to write
something like this.  map_float = lambda xform, source: map(xform,
map(float, source)). This would look more like map(), with a float
operation provided automatically.&lt;/div&gt;
&lt;div class="line"&gt;SRP: Each of the built-in functions does one thing. The overall
composition builds a complex operation from simple pieces.&lt;/div&gt;
&lt;div class="line"&gt;The composite operation has two features which are likely to change:
the column name and the transformation function. Perhaps we might
rename the column from 'SOG' to 'sog'; perhaps we might use decimal()
instead of float(). There are a number of less-likely changes. There
might be a more complex filter rule, or perhaps a more complex
transformation before computing the statistical summary.  These
changes would lead to a different composition of the similar
underlying pieces.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="functional python programming"></category><category term="functional programming"></category><category term="#python"></category></entry><entry><title>Python Exercises</title><link href="https://slott56.github.io/2017_10_10-python_exercises.html" rel="alternate"></link><published>2017-10-10T08:00:00-04:00</published><updated>2017-10-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-10-10:/2017_10_10-python_exercises.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.ynonperek.com/2017/09/21/python-exercises/amp/"&gt;https://www.ynonperek.com/2017/09/21/python-exercises/amp/&lt;/a&gt;
This seems very cool. These look like some pretty cool problems. It
includes debugging and unit testing, so there's a lot of core skills
covered by these exercises.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Learning to Code</title><link href="https://slott56.github.io/2017_09_28-learning_to_code.html" rel="alternate"></link><published>2017-09-28T08:00:00-04:00</published><updated>2017-09-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-09-28:/2017_09_28-learning_to_code.html</id><summary type="html">&lt;p&gt;I know folks who struggle with the core concepts of writing software.
Some of them are IT professionals. With jobs. They can't really code. It
seems like they don't understand it.
Maybe &lt;a class="reference external" href="https://medium.freecodecamp.org/a-gentler-introduction-to-programming-707453a79ee8"&gt;a gentler introduction to
programming&lt;/a&gt;
will help?
I have my doubts. The folks who seem to struggle the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I know folks who struggle with the core concepts of writing software.
Some of them are IT professionals. With jobs. They can't really code. It
seems like they don't understand it.
Maybe &lt;a class="reference external" href="https://medium.freecodecamp.org/a-gentler-introduction-to-programming-707453a79ee8"&gt;a gentler introduction to
programming&lt;/a&gt;
will help?
I have my doubts. The folks who seem to struggle the hardest are really
fighting against their own assumptions. They seem to make stuff up and
then seek confirmation in everything they do. The idea of a falsifiable
experiment seems to be utterly unknown to them. Also, because they're
driven by their assumptions, the idea of exhaustively enumerating
alternatives isn't something they do well, either.
For example, if you try to explain python's use of &amp;quot; or ' for string
literals -- a syntax not used by a language like SQL -- they will argue
that Python is &amp;quot;wrong&amp;quot; based on their knowledge of SQL. Somehow they
wind up with a laser-like focus on mapping Python to SQL. They'll argue
that apostrophe's are standard, and they'll always use those. Problem
solved, right?
Or is it problem ignored? Or problem refused?
And. Why the laser-like focus on mapping among programming languages? It
seems that they're missing the core concept of abstract semantics mapped
to specific syntax.&lt;/p&gt;
</content><category term="Technologies"></category><category term="learning"></category><category term="Programming Languages"></category></entry><entry><title>Three Unsolvable Problems in Computing</title><link href="https://slott56.github.io/2017_09_19-three_unsolvable_problems_in_computing.html" rel="alternate"></link><published>2017-09-19T08:07:00-04:00</published><updated>2017-09-19T08:07:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-09-19:/2017_09_19-three_unsolvable_problems_in_computing.html</id><summary type="html">&lt;p&gt;The three unsolvable problems in computing:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Naming&lt;/li&gt;
&lt;li&gt;Distributed Cache Coherence&lt;/li&gt;
&lt;li&gt;Off-By-One Errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's talk about naming.&lt;/p&gt;
&lt;p&gt;The project team decided to call the server component &amp;quot;FlaskAPI&amp;quot;.&lt;/p&gt;
&lt;p&gt;Seriously.&lt;/p&gt;
&lt;p&gt;It serves information about two kinds of resources: images and running
instances of images. (Yes, it's a kind of kubernetes/dockyard lite
that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The three unsolvable problems in computing:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Naming&lt;/li&gt;
&lt;li&gt;Distributed Cache Coherence&lt;/li&gt;
&lt;li&gt;Off-By-One Errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's talk about naming.&lt;/p&gt;
&lt;p&gt;The project team decided to call the server component &amp;quot;FlaskAPI&amp;quot;.&lt;/p&gt;
&lt;p&gt;Seriously.&lt;/p&gt;
&lt;p&gt;It serves information about two kinds of resources: images and running
instances of images. (Yes, it's a kind of kubernetes/dockyard lite
that gives us a lot of control over servers with multiple containers.)&lt;/p&gt;
&lt;p&gt;The feature set is growing rapidly. The legacy name needs to change.
As we move forward, we'll be adding more microservices. Unless they
have a name that reflects the resource(s) being managed, this is
rapidly going to become utterly untenable.&lt;/p&gt;
&lt;p&gt;Indeed, the name chosen may already be untenable: the name doesn't
reflect the resource, it reflects an implementation choice that is
true of all the microservices. (It's a wonder they didn't call it
&amp;quot;PythonFlaskAPI&amp;quot;.)&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://blogs.mulesoft.com/dev/api-dev/best-practices-for-building-apis/"&gt;https://blogs.mulesoft.com/dev/api-dev/best-practices-for-building-apis/&lt;/a&gt;
for some general guidelines on API design.&lt;/p&gt;
&lt;p&gt;These guidelines don't seem to address naming in any depth. There are
a few blog posts on this, but there seem to be two extremes.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Details/details/details. Long paths:
class-of-service/service/version-of-service/resources/resource-id
kind of paths. Yes. I get it. The initial portion of the path can
then route the request for us. But it requires a front-end request
broker or orchestration layer to farm out the work. I'm not enamored
of the version information in the path because the path isn't an
ontology of the entities; it becomes something more and reveals
implementation details. The orchestration is pushed down the client.
Yuck.&lt;/li&gt;
&lt;li&gt;Resources/resource. I kind of like this. The versioning information
can be in the Content-Type header:
application/json+vnd.yournamehere.vx+json.  I like this because
the paths don't change. Only the v&lt;em&gt;x&lt;/em&gt; in the header. But how does
the client select the latest version of the service if it doesn't go
in the path? Ugh. Problem not solved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not a fan of an orchestration layer. But there's
this: &lt;a class="reference external" href="https://medium.com/capital-one-developers/microservices-when-to-react-vs-orchestrate-c6b18308a14c"&gt;https://medium.com/capital-one-developers/microservices-when-to-react-vs-orchestrate-c6b18308a14c&lt;/a&gt;
tl;dr: Orchestration is essentially unavoidable.&lt;/p&gt;
&lt;p&gt;There are articles on
choreography. &lt;a class="reference external" href="https://specify.io/concepts/microservices"&gt;https://specify.io/concepts/microservices&lt;/a&gt; the idea is
that an event queue is used to choreograph among microservices. This
flips orchestration around a little bit by having a more peer-to-peer
relationship among services. It replaces complex orchestration with a
message queue, reducing the complexity of the code.&lt;/p&gt;
&lt;p&gt;On the one hand, orchestration is simple. The orchestrator uses the
resource class and content-type version information to find the right
server. It's not a lot of code.&lt;/p&gt;
&lt;p&gt;On the other hand, orchestration is overhead. Each request passes
through two services to get something done. The pace of change is
slow. HATEOAS suggests that a &amp;quot;configuration&amp;quot; or &amp;quot;service discovery&amp;quot;
service (with etags to support caching and warning of out-of-date
cache) might be a better choice. Clients can make a configuration
request, and if cache is still valid, it can then make the real
working request.&lt;/p&gt;
&lt;p&gt;The client-side overhead is a burden that is -- perhaps -- a bad
idea. It has the potential to make  the clients very complex. It can
work if we're going to provide a sophisticated client library. It
can't work if we're expecting developers to make RESTful API requests
to get useful results. Who wants to make the extra meta-request all
the time?&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="flask"></category><category term="architecture"></category><category term="microservices"></category></entry><entry><title>The No Code Approach to Software and Why It Might Be Bad</title><link href="https://slott56.github.io/2017_09_12-the_no_code_approach_to_software_and_why_it_might_be_bad.html" rel="alternate"></link><published>2017-09-12T08:00:00-04:00</published><updated>2017-09-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-09-12:/2017_09_12-the_no_code_approach_to_software_and_why_it_might_be_bad.html</id><summary type="html">&lt;p&gt;Start
here: &lt;a class="reference external" href="https://www.forbes.com/sites/jasonbloomberg/2017/07/20/the-low-codeno-code-movement-more-disruptive-than-you-realize/#98cfc4a722a3"&gt;https://www.forbes.com/sites/jasonbloomberg/2017/07/20/the-low-codeno-code-movement-more-disruptive-than-you-realize/#98cfc4a722a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm not impressed. I have been not impressed for 40 years and many
previous incarnations of this idea of replacing code with UX.&lt;/p&gt;
&lt;p&gt;Of course, I'm biased. I create code. Tools that remove the need to
create …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Start
here: &lt;a class="reference external" href="https://www.forbes.com/sites/jasonbloomberg/2017/07/20/the-low-codeno-code-movement-more-disruptive-than-you-realize/#98cfc4a722a3"&gt;https://www.forbes.com/sites/jasonbloomberg/2017/07/20/the-low-codeno-code-movement-more-disruptive-than-you-realize/#98cfc4a722a3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm not impressed. I have been not impressed for 40 years and many
previous incarnations of this idea of replacing code with UX.&lt;/p&gt;
&lt;p&gt;Of course, I'm biased. I create code. Tools that remove the need to
create code reflect a threat.&lt;/p&gt;
&lt;p&gt;Not really, but my comments can be seen that way.&lt;/p&gt;
&lt;p&gt;Here's why no code is bad.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Software Captures Knowledge&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;If we're going to represent knowledge in the form of software, then,
we need to have some transparency so that we can see the entire stack
of abstractions. Yes, it's turtles all the way down, but some of
those abstractions are important, and other abstractions can be taken
as &amp;quot;well known&amp;quot; and &amp;quot;details don't matter.&amp;quot;&lt;/p&gt;
&lt;p&gt;The C libraries that support the CPython implementation, for example,
is where the turtles cease to matter (for many people.) Many of us
have built a degree of trust and don't need to know how the libraries
are implemented or how the hardware works, or what a transistor is,
or what electricity is, or why electrons even have a mass or how mass
is imparted by the Higgs boson.&lt;/p&gt;
&lt;p&gt;A clever UI that removes (or reduces) code makes the abstractions
opaque. We can't see past the UI. The software is no longer capturing
useful knowledge. Instead, the software is some kind of interpreter,
working on a data structure that represents the state of the UI
buttons.&lt;/p&gt;
&lt;p&gt;Instead of software describing the problem and the problem's state
changes, the software is describing a user experience and those state
changes.&lt;/p&gt;
&lt;p&gt;I need the data structure, the current values as selected by the
user, and the software to understand the captured knowledge.&lt;/p&gt;
&lt;p&gt;Perhaps the depiction of the UI will help.&lt;/p&gt;
&lt;p&gt;Perhaps it won't.&lt;/p&gt;
&lt;p&gt;In general, a picture of the UI is useless. It can't answer the
question &amp;quot;Why click that?&amp;quot; We can't (and aren't expected) to provide
essay answers on a UI. We're expected to click and move on.&lt;/p&gt;
&lt;p&gt;If we are forced to provide a essay answers, then the UI could come
closer to capturing knowledge. Imagine having a &amp;quot;Reason:&amp;quot; text box
next to every clickable button.&lt;/p&gt;
&lt;p&gt;We all know what the essay answers will look like. They'll look like
bad comments in code. And bad commit comments in Git. And bad
documentation.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Some Option:&lt;/td&gt;
&lt;td&gt;☑️&lt;/td&gt;
&lt;td&gt;Reason:&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Required&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Other Option:&lt;/td&gt;
&lt;td&gt;☐&lt;/td&gt;
&lt;td&gt;Reason:&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Not sure if its needed&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The problem with fancy UI's and low-code/no-code software is
low-information/no-information software. Maintenance becomes
difficult, perhaps impossible, because it's difficult understand
what's going on.&lt;/p&gt;
</content><category term="Technologies"></category><category term="knowledge capture"></category><category term="Design Principles"></category></entry><entry><title>Seven Performance Tips</title><link href="https://slott56.github.io/2017_09_05-seven_performance_tips.html" rel="alternate"></link><published>2017-09-05T08:00:00-04:00</published><updated>2017-09-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-09-05:/2017_09_05-seven_performance_tips.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/896029760576512001/-aQIRO0R_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Packt(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/packtpub?refsrc=email&amp;amp;s=11"&gt;&amp;#64;PacktPub&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/packtpub/status/904645223942422528?refsrc=email&amp;amp;s=11"&gt;9/4/17, 6:00 AM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Want to improve your &lt;a class="reference external" href="https://twitter.com/search?q=%23Python&amp;amp;src=hash"&gt;#Python&lt;/a&gt;
performance? We've got 7 great tips for you: &lt;a class="reference external" href="https://t.co/I0dwFX5jmV"&gt;bit.ly/28YiGeE&lt;/a&gt;
via &lt;a class="reference external" href="https://twitter.com/ggzes"&gt;&amp;#64;ggzes&lt;/a&gt; &lt;a class="reference external" href="https://twitter.com/search?q=%23CodingTips&amp;amp;src=hash"&gt;#CodingTips&lt;/a&gt;
&lt;a class="reference external" href="https://t.co/cGhoGyTSS9"&gt;pic.twitter.com/cGhoGyTSS9&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
I have one thing to add: Learn to use the profiler and timeit. They
will eliminate and hand-wringing …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/896029760576512001/-aQIRO0R_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Packt(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/packtpub?refsrc=email&amp;amp;s=11"&gt;&amp;#64;PacktPub&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/packtpub/status/904645223942422528?refsrc=email&amp;amp;s=11"&gt;9/4/17, 6:00 AM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Want to improve your &lt;a class="reference external" href="https://twitter.com/search?q=%23Python&amp;amp;src=hash"&gt;#Python&lt;/a&gt;
performance? We've got 7 great tips for you: &lt;a class="reference external" href="https://t.co/I0dwFX5jmV"&gt;bit.ly/28YiGeE&lt;/a&gt;
via &lt;a class="reference external" href="https://twitter.com/ggzes"&gt;&amp;#64;ggzes&lt;/a&gt; &lt;a class="reference external" href="https://twitter.com/search?q=%23CodingTips&amp;amp;src=hash"&gt;#CodingTips&lt;/a&gt;
&lt;a class="reference external" href="https://t.co/cGhoGyTSS9"&gt;pic.twitter.com/cGhoGyTSS9&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
I have one thing to add: Learn to use the profiler and timeit. They
will eliminate and hand-wringing over what might be better or worse.
The policy is this: &lt;strong&gt;Code, Measure, and Choose&lt;/strong&gt;.&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="#python"></category></entry><entry><title>The Pipeline Question when Bashing the Bash</title><link href="https://slott56.github.io/2017_08_29-the_pipeline_question_when_bashing_the_bash.html" rel="alternate"></link><published>2017-08-29T08:00:00-04:00</published><updated>2017-08-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-08-29:/2017_08_29-the_pipeline_question_when_bashing_the_bash.html</id><summary type="html">&lt;p&gt;Background: &lt;a class="reference external" href="https://medium.com/capital-one-developers/bashing-the-bash-replacing-shell-scripts-with-python-d8d201bc0989"&gt;https://medium.com/capital-one-developers/bashing-the-bash-replacing-shell-scripts-with-python-d8d201bc0989&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wonder how/why python did not pick up some sort/form of pipe
operator. 🤨
(although coroutine does have .send method 🤔)&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Ivan Pejić (&amp;#64;nadrimajstor) &lt;a class="reference external" href="https://twitter.com/nadrimajstor/status/901235806714679296"&gt;August 26,
2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The answer to this is interesting because there are two kinds of
parallelism. I like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Background: &lt;a class="reference external" href="https://medium.com/capital-one-developers/bashing-the-bash-replacing-shell-scripts-with-python-d8d201bc0989"&gt;https://medium.com/capital-one-developers/bashing-the-bash-replacing-shell-scripts-with-python-d8d201bc0989&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wonder how/why python did not pick up some sort/form of pipe
operator. 🤨
(although coroutine does have .send method 🤔)&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Ivan Pejić (&amp;#64;nadrimajstor) &lt;a class="reference external" href="https://twitter.com/nadrimajstor/status/901235806714679296"&gt;August 26,
2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The answer to this is interesting because there are two kinds of
parallelism. I like to call them architectural and incidental (or
casual).  I'll look at architectural parallelism first, because it's
what we often think about. Then the incidental parallelism, which I'm
convinced is a blight.&lt;/p&gt;
&lt;div class="section" id="architectural-parallelism"&gt;
&lt;h2&gt;Architectural Parallelism&lt;/h2&gt;
&lt;p&gt;The OS provides big-picture, architectural parallelism. This isn't --
necessarily -- a thing we want to push down into Python applications.
There are some tradeoffs here.&lt;/p&gt;
&lt;p&gt;One example of big architectural parallelism are big map-reduce
processes where the mapping and reducing can (and should) proceed in
parallel. There are some constraints around this, and we'll touch on
them below.&lt;/p&gt;
&lt;p&gt;Another common example is a cluster of microservices that are deployed
on the same server. In many cases, each microservice decomposes into a
cluster of processes that work in parallel and have a very, very long
life. We might have an NGINX front-end for static content and a
Python-based Flask back-end for dynamic content.  We might want the OS
init process to start these, and we define them in init.d. In other
cases, we allocate them to web-based servers where load-balancing
handles the details of restarting.&lt;/p&gt;
&lt;p&gt;In the map-reduce example, the shell's pipe makes sense. We can define
it with a shell script like this: &lt;tt class="docutils literal"&gt;source | map | reduce&lt;/tt&gt;.
It's hard to beat this for succinct clarity.&lt;/p&gt;
&lt;p&gt;In the Ngnix + Flask case, they may talk using a named pipe that
outlives the two processes. &lt;em&gt;Conceptually&lt;/em&gt;, they work as &lt;tt class="docutils literal"&gt;nginx | flask run&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, we have log analysis and alerting that are part of
microservices management. We can pile this into the processing stream
with a conceptual pipeline of &lt;tt class="docutils literal"&gt;nginx | flask run | log reduce | alert&lt;/tt&gt;. The log reduce filters and reduces the log to find those events
that require an alert. If any data makes it into the alert process, it
sends the text for human intervention.&lt;/p&gt;
&lt;p&gt;There are some distinguishing features.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They tend to be resource hogs. Either it's a big map-reduce
processing request that uses a lot of CPU and memory resources. Or
it's a log-running server.&lt;/li&gt;
&lt;li&gt;The data being transported is bytes with a very inexpensive (almost
free) serialization. When we think of map-reduce, these processes
often work with text as input and output. There may be more complex
data structures involved in the reduce, but the cost of serialization
is an important concern. When we think of web requests, the request,
response, and log pipeline is bytes more-or-less by definition.&lt;/li&gt;
&lt;li&gt;The parallelism is at the process level because each element does a
lot of work and the isolation is beneficial.&lt;/li&gt;
&lt;li&gt;They compute high-value results for actual users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The OS does this. The complexity is that each OS does this
differently. The Python subprocess module (and related projects
outside the standard library) provide an elegant mapping into
Python.&lt;/p&gt;
&lt;p&gt;It's not built-in to the language. I think that it's because details
vary so widely by OS. I think trying to build this into the language
leads to a bulky featyre that's not widely-enough used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="incidental-parallelism"&gt;
&lt;h2&gt;Incidental Parallelism&lt;/h2&gt;
&lt;p&gt;This is -- to me -- a blight. Here's a typical kind of thing we see
in the middle of a longer, more complex shell script.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
data=`grep pattern file | cut args | sort | head`
# the interesting processing on $data
&lt;/pre&gt;
&lt;p&gt;Computing a value that's assigned to data is a high-cost, low-value
step. It creates an intermediate result that's only part of the shell
script, and not really the final result. The parallelism feature of
the shell's &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; operator isn't of any profound value since only a tiny
bit of data is passed from step to step.&lt;/p&gt;
&lt;p&gt;This can be rewritten into Python, but the resulting code won't be a
one-liner. It will be longer. It will also be much, much faster.
However, the speed difference is rarely relevant if this kind of
processing step inside a larger, iterative process.&lt;/p&gt;
&lt;p&gt;A trivial rewrite of just one line of code misses the point. The goal
is to refactor the script so that this line of code because a simple
part of the processing and uses first-class Python data structures.
The reason for doing cut and sort operations is generally because the
data structure wasn't optimized for the job. A priority queue might
have been a better choice, and would have amortized sorting properly
and eliminated the need for separate cut and head operations.&lt;/p&gt;
&lt;p&gt;This kind of computation can (and should) be done in a single
process. The shell pipeline legacy implementation is little more than
a short-hand for passing arguments and results among (simple)
functions.&lt;/p&gt;
&lt;p&gt;We can rewrite this as nested functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with Path(file).open() as source:
    head(sorted(cut_mapping(args, grep_filter(pattern, file))))
&lt;/pre&gt;
&lt;p&gt;This will do the same thing. The gigantic benefits of this kind of
rewrite involves eliminating two kinds of overheads.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The fork/exec to spawn subprocesses. A single process will be
faster.&lt;/li&gt;
&lt;li&gt;The serialization and deserialization of intermediate results.
Avoiding serialization will be faster.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we rewrite bash to Python, we are able to leverage Python's
data structures to write processing that expressive, succinct, and
efficient.&lt;/p&gt;
&lt;p&gt;This kind of rewriting will also lead to refactoring the adjacent
lines of the script -- the interesting processing -- into Python
code also. This refactoring can lead to further simplifications
and speedups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-two-cases"&gt;
&lt;h2&gt;The Two Cases&lt;/h2&gt;
&lt;p&gt;There seem to be two cases of parallelism:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Big and Architectural. There are many Python packages that
provides these features. Look at plumbum, pipes, and joblib for
examples. Since the OS implementation details vary so much,
it's hard to imagine making this part of the language.&lt;/li&gt;
&lt;li&gt;Small and Incidental.  The incidental parallelism is clever,
but inefficient. In many cases, it doesn't seem to create
significant value. It seems to be a kind of handy little
workaround. It has costs that I find to outstrip the value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When replacing the bash with Python, some of the parallelism is
architectural, and needs to be preserved. Careful engineering
choices will be required. The rest is incidental and needs to
be discarded.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="bash"></category><category term="software design"></category></entry><entry><title>Refusing to Code. Or. How to help the incurious?</title><link href="https://slott56.github.io/2017_08_08-refusing_to_code_or_how_to_help_the_incurious.html" rel="alternate"></link><published>2017-08-08T08:28:00-04:00</published><updated>2017-08-08T08:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-08-08:/2017_08_08-refusing_to_code_or_how_to_help_the_incurious.html</id><summary type="html">&lt;p&gt;The emphasis on code is important. Code defines the behavior of systems
-- for the most part Once upon a time, we used clever mechanical
designs, or discrete electronic components. The InternetofThings idea
exists because high-powered general-purposes CPU's are ubiquitous.&lt;/p&gt;
&lt;p&gt;A DevOps mantra is &amp;quot;infrastructure as code&amp;quot;. The entire deployment is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The emphasis on code is important. Code defines the behavior of systems
-- for the most part Once upon a time, we used clever mechanical
designs, or discrete electronic components. The InternetofThings idea
exists because high-powered general-purposes CPU's are ubiquitous.&lt;/p&gt;
&lt;p&gt;A DevOps mantra is &amp;quot;infrastructure as code&amp;quot;. The entire deployment is
automated, from the allocation of processors and storage down to
pining the health-check endpoint to be sure it's live. Blue-Green
deployments, traffic switching, etc., and etc. These all require lots
of code and as little manual intervention as possible.&lt;/p&gt;
&lt;p&gt;The gold standard is to use tools to visualize state, make a
decision, and use tools to take action. Lots of code.&lt;/p&gt;
&lt;p&gt;When I meet the anti-code people, it's confusing.&lt;/p&gt;
&lt;p&gt;Outside my narrow realm of tech, anti-code is fine. I have a
sailboat, I meet lots of non-tech people who can't code, won't code,
and aren't sure what code is.&lt;/p&gt;
&lt;p&gt;But when I meet people who claim they want to be data science folks
but refuse to code, I'm baffled.&lt;/p&gt;
&lt;p&gt;Step 1 was to &amp;quot;learn more&amp;quot; about data science or something like that.
I suggested some of the ML tutorials available for Python. Why? It
appears that Scikit Learn is the gold standard for ML
applications. &lt;a class="reference external" href="http://scikit-learn.org/stable/tutorial/index.html"&gt;http://scikit-learn.org/stable/tutorial/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because they didn't want to code, they insisted on doing things in
Excel. Really.&lt;/p&gt;
&lt;p&gt;Step 2 was to figure out some simulated annealing process -- in
Excel. They had one of the central textbooks on ML algorithms. And
they had a spreadsheet. They had some question that can only arise
from avoiding open-source code. I suggested they use the open source
code available to everyone. Or perhaps find a more modern tutorial
like this: &lt;a class="reference external" href="http://katrinaeg.com/simulated-annealing.html"&gt;http://katrinaeg.com/simulated-annealing.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because they don't want to code, they used the fact
that &lt;strong&gt;scipy.optimize.anneal()&lt;/strong&gt; was deprecated to indict Python. I
almost wish I'd saved all the emails over why basin hopping was
unacceptable. The reasoning involved having an old textbook that
covered annealing in depth, and not wanting to actually read the code
for basin hopping. Or something.&lt;/p&gt;
&lt;p&gt;Step 3 was to grab a Kaggle problem and start working on it. This is
too large for a spreadsheet. Indeed, the data sets push the envelope
on what can be done on a Windows laptop because the dataframes tend
to be quite large. It requires installing Scikit learn, which means
installing &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda from
Continuum&lt;/a&gt;. There's no
reasonable alternative.
The Kaggle exercise may also involve buying a new laptop or renting
time on a cloud-based server that's big enough to handle the data
set. ML processing takes time, and GPU acceleration can be a huge
help. All of this, however, presumes that there's code to run.&lt;/p&gt;
&lt;p&gt;Because they don't want to code, this bled into an amazing number of
unproductive directions.  There's some kind of classic &amp;quot;do everything
except what you need to do&amp;quot; behavior. I'm sure it has a name. It's
more than &amp;quot;work avoidance.&amp;quot; It's a kind of active negation of the
goals. It was impossible to discern what was actually going on or how
I was supposed to help.&lt;/p&gt;
&lt;p&gt;I suggested a Trello board.&lt;/p&gt;
&lt;p&gt;The Trello board devolved into dozens of individual lists, each list
had one card. Seriously. The card/list thing became a way of avoiding
progress. There were cards for considering the implications of
installing Anaconda. The cards turned into hand-wringing discussions
and weird status updates and memo-to-self notes, instead of actual
actions.&lt;/p&gt;
&lt;p&gt;Bottom line?&lt;/p&gt;
&lt;p&gt;No code.&lt;/p&gt;
&lt;p&gt;In the middle of the Kaggle something-or-other board, a card appeared
asking for comments on some code. :yay2: Something I can actually
help with.&lt;/p&gt;
&lt;p&gt;The code was bad. And precious. I blogged about this phenomenon
earlier. The code can't be changed because it was so hard to create.
It was really bad, and riddled with bizarre things that make it look
like they'd never seen code before.&lt;/p&gt;
&lt;p&gt;Use pylint? This got a grudging kind of reluctant cleanup. But
&lt;tt class="docutils literal"&gt;huge_variable_names_with_lots_of_useless_clauses&lt;/tt&gt; aren't flagged
by Pylint. They're still bad, and reading other code would show how
atypical these names are. Unless, of course, you hate code; then
reading code is not going to happen.&lt;/p&gt;
&lt;p&gt;My new model for their behavior? They &lt;strong&gt;hate&lt;/strong&gt; code. So when they do
it, they do it badly. Intentionally badly. And because it was so
painful, it's precious. (I'm probably wrong, and there's probably a
lot more to this, but it seems to fit the observed behavior.)
It gets worse (or better, depending on your attitude.)&lt;/p&gt;
&lt;p&gt;Another Trello card appears wondering what &lt;tt class="docutils literal"&gt;[a, b] * 2&lt;/tt&gt; or some
such Pythonic thing might mean. Um. What?&lt;/p&gt;
&lt;p&gt;It appears that they can't find the Standard Library description of
the built-in data types and their operators. As if chapter four was
deleted from their copy, or something.&lt;/p&gt;
&lt;p&gt;The &amp;quot;can't find&amp;quot; seems unlikely. It's pretty prominent. I would think
that anyone aspiring to learn Python would see the &amp;quot;keep this under
your pillow&amp;quot; admonition on the standard library docs and perhaps
glance through the first five sections to see what the fuss was
about. Unless they hate code.&lt;/p&gt;
&lt;p&gt;I'm left with &amp;quot;won't find.&amp;quot;  Perhaps they're refusing to use the
documentation? Are they also refusing to use Python's internal help?
It's not great, but you can try a bunch of things and get steered
around from topic to topic, eventually, you have to find something
useful.&lt;/p&gt;
&lt;p&gt;Apply my new model: they hate code and Python &lt;strong&gt;help()&lt;/strong&gt; is code.
Do they really hate code that much? I now think they do. I think they
truly and deeply hate losing manual, personal. hands-on control over
things. If it's not a spreadsheet -- where they typed each cell
personally -- it's reviled. (Or feared? Let's not go too far here.)
Test the hypothesis. Ask if they used &lt;strong&gt;help()&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Answer: Yes. They had tried three things (exactly three) and none of
those three had a satisfactory explanation. The &lt;strong&gt;help()&lt;/strong&gt; function
did not work. Indeed, two of the things they tried had the same
result, and the third reported a syntax error. So they stopped.
They tried three things and stopped.&lt;/p&gt;
&lt;p&gt;Okay, then. They hate code. And -- Bonus! -- They refuse to explore.
Somehow they're also able to insist they must learn to code. Will the
self-beatings continue until the attitude improves?&lt;/p&gt;
&lt;p&gt;It's difficult to offer meaningful help under these circumstances. I
don't see the value in being someone's personal Google, since that
only reinforces the two core refusals to use code or explore by
typing code to see what happened.&lt;/p&gt;
&lt;p&gt;I like to think that coding is a core life skill. Like cooking. You
don't have to become a chef, but you have to know how to handle food.
You don't have to create elaborate, scalable meshes of microservices.
But you have to be able to find the data types and operators on your
own.&lt;/p&gt;
&lt;p&gt;And I don't know how to coach someone who is so incurious that three
attempts with &lt;strong&gt;help()&lt;/strong&gt; is the limit. Done at three. Count it as a
failure and stop trying. &amp;quot;Try something different&amp;quot; seems vague, but
it's all I've got. Anything more feels isomorphic to &amp;quot;Here's the
link, attached is an audio file of me reading the words out loud for
you.&amp;quot;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>Other Entries Other Blogs</title><link href="https://slott56.github.io/2017_08_08-other_entries_other_blogs.html" rel="alternate"></link><published>2017-08-08T08:00:00-04:00</published><updated>2017-08-08T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-08-08:/2017_08_08-other_entries_other_blogs.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;s_lott"&gt;https://medium.com/&amp;#64;s_lott&lt;/a&gt;
Plus, of course, lots of other stuff from lots of other folks. Enjoy.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="noSQL"></category></entry><entry><title>JSON vs. XML: The battle for format supremacy may be wasted energy - SD Times</title><link href="https://slott56.github.io/2017_08_01-json_vs_xml_the_battle_for_format_supremacy_may_be_wasted_energy_sd_times.html" rel="alternate"></link><published>2017-08-01T08:00:00-04:00</published><updated>2017-08-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-08-01:/2017_08_01-json_vs_xml_the_battle_for_format_supremacy_may_be_wasted_energy_sd_times.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://sdtimes.com/json-vs-xml-battle-format-supremacy-may-wasted-energy/"&gt;http://sdtimes.com/json-vs-xml-battle-format-supremacy-may-wasted-energy/&lt;/a&gt;
This article seems silly. Perhaps I missed something important.
I'm not sure who's still litigating the JSON vs. XML, but it seems like
it's more-or-less done.
XHTML/XML for HTML things.
JSON for everything else.
Maybe there are people still wringing their hands over this. AFAIK …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://sdtimes.com/json-vs-xml-battle-format-supremacy-may-wasted-energy/"&gt;http://sdtimes.com/json-vs-xml-battle-format-supremacy-may-wasted-energy/&lt;/a&gt;
This article seems silly. Perhaps I missed something important.
I'm not sure who's still litigating the JSON vs. XML, but it seems like
it's more-or-less done.
XHTML/XML for HTML things.
JSON for everything else.
Maybe there are people still wringing their hands over this. AFAIK, the
last folks using SOAP/XML services are commercial and governmental
agencies where change tends to happen very slowly.
I remember when Sun Microsystems was a company and had the Java
Composite Applications Suite. Very XML. That was -- perhaps -- ten years
ago. Since then, I think the problem has been solved. I'm not sure who's
battling for supremacy or why.&lt;/p&gt;
</content><category term="Technologies"></category><category term="json"></category><category term="xml"></category></entry><entry><title>The "My Code Is Precious To Me" Conundrum</title><link href="https://slott56.github.io/2017_07_25-the_my_code_is_precious_to_me_conundrum.html" rel="alternate"></link><published>2017-07-25T08:00:00-04:00</published><updated>2017-07-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-07-25:/2017_07_25-the_my_code_is_precious_to_me_conundrum.html</id><summary type="html">&lt;p&gt;I suspect some people sweat so hard over each line of code that it
becomes precious. Valuable. An investment wrung from their very soul. Or
something.
When they ask for comments, it becomes difficult.
The Pull Request context can be challenging. There the code is, beaten
into submission after Herculean …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I suspect some people sweat so hard over each line of code that it
becomes precious. Valuable. An investment wrung from their very soul. Or
something.
When they ask for comments, it becomes difficult.
The Pull Request context can be challenging. There the code is, beaten
into submission after Herculean toils, and -- well -- it's not really
very good. The review isn't a pleasant validation with some suggested
rewrites of the docstrings to remove dangling participles (up with which
I will not put.) Perhaps the code makes a fundamentally flawed
assumption and proceeds from there to create larger and larger problems
until it's really too awful to save.
How do you break the news?
I get non-PR requests for code reviews once in a while. The sincere
effort at self-improvement is worthy of praise. It's outside any formal
PR process; outside formal project efforts. It's good to ask for help
like that.
The code, on the other hand, has to go.
I'm lucky that the people I work with daily can create -- and discard --
a half-dozen working examples in the space of an hour.
I'm unlucky that people who ask for code review advice can't even think
rationally about starting again with different assumptions. They'd
rather argue about their assumptions than simply create new code based
on different (often fewer) assumptions.
I've seen some simple unit conversion problems turned into horrible
messes. The first such terrifying thing was a data query filter based on
year-month with a rolling 13-month window. Somehow, this turned into
dozens and dozens of lines of ineffective code, filled with wrong edge
cases.
Similar things happen with hour-minute windows. Lots of wrong code.
Muddled confusion. Herculean efforts doing the wrong thing. Herculean.
Both year-month and hour-minute problems are units conversion.
Year-month is months in base 12. Hour-minute is minutes in base 60.
Technically, they're mixed bases, simple polynomials in two terms. It's
a multiply and an add. 12&lt;em&gt;y&lt;/em&gt;+&lt;em&gt;m&lt;/em&gt;, where 0 ≤ &lt;em&gt;m&lt;/em&gt; &amp;lt; 12. Maybe an
extra subtract 1 is involved.
The entire algorithm is a multiply and an add. There shouldn't very many
lines of code involved. In some cases, there's an additional conversion
from integer minutes to float hours. Which is a multiply by a constant
(1/720.) Or integer months to float years after an epochal year (another
add with a negative number and multiply by 1/12.)
I think it's common that ineffective code need to be replaced. Maybe
it's sad that it has to get replaced *after* being written? I don't
think so. All code gets rewritten. Some just gets written sooner.
I think that some people may need some life-coaching as well as code
reviews.
Perhaps they should be encouraged to participate in a design
walk-through before sweating their precious life's blood into code that
doesn't solve the problem at hand.&lt;/p&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category></entry><entry><title>Yet Another Python Problem List</title><link href="https://slott56.github.io/2017_07_18-yet_another_python_problem_list.html" rel="alternate"></link><published>2017-07-18T08:00:00-04:00</published><updated>2017-07-18T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-07-18:/2017_07_18-yet_another_python_problem_list.html</id><summary type="html">&lt;p&gt;This was a cool thing to see in my Twitter feed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/779041781413507072/TaqJsdzS_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Dan Bader(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org?refsrc=email&amp;amp;s=11"&gt;&amp;#64;dbader_org&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org/status/876994766227075072?refsrc=email&amp;amp;s=11"&gt;6/19/17, 10:47PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Why Python Is Not My FavoriteLanguage&amp;quot;&lt;a class="reference external" href="https://t.co/Nq4p3zZr6s"&gt;zenhack.net/2016/12/25/why…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More Problems with Python. Here's the short list.
1. Encapsulation (Inheritance, really.)
2. With Statement
3. Decorators
4. Duck …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was a cool thing to see in my Twitter feed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/779041781413507072/TaqJsdzS_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Dan Bader(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org?refsrc=email&amp;amp;s=11"&gt;&amp;#64;dbader_org&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org/status/876994766227075072?refsrc=email&amp;amp;s=11"&gt;6/19/17, 10:47PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Why Python Is Not My FavoriteLanguage&amp;quot;&lt;a class="reference external" href="https://t.co/Nq4p3zZr6s"&gt;zenhack.net/2016/12/25/why…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More Problems with Python. Here's the short list.
1. Encapsulation (Inheritance, really.)
2. With Statement
3. Decorators
4. Duck Typing (and Documentation)
5. Types&lt;/p&gt;
&lt;p&gt;I like these kinds of posts because they surface problems that are way,
way out at the fringes of Python. What's important to me is that most of
the language is fine, but the syntaxes for a few things are sometimes
irksome. Also important to me is that it's almost never the deeper
semantics; it seems to be entirely a matter of syntax.&lt;/p&gt;
&lt;p&gt;The really big problem is people who take the presence of a list like
this as a reason dismiss Python in its entirety because they found a few
blog posts identifying specific enhancements. That &amp;quot;Python must be bad
because people are proposing improvements&amp;quot; is madding. And dismayingly
common.&lt;/p&gt;
&lt;p&gt;Even in a Python-heavy workplace, there are Java and Node.js people who
have opinions shaped by little lists like these. The &amp;quot;semantic
whitespace&amp;quot; argument coming from JavaScript people is ludicrous, but
there they are: JavaScript has a murky relationship with semi-colons and
they're complaining about whitespace. Minifying isn't a virtue. It's a
hack. Really.&lt;/p&gt;
&lt;p&gt;My point in general is not to say this list is &lt;strong&gt;wrong&lt;/strong&gt;. It's to say
that these points are minor. In many cases, I don't disagree that these
can be seen as problems. But I don't think they're toweringly important.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The body of first point seems to be more about inheritance and
accidentally overiding something that shouldn't have been overridden.
Java (and C++) folks like to use &lt;strong&gt;private&lt;/strong&gt; for this. Python lets you
read the source. I vote for reading the source.&lt;/li&gt;
&lt;li&gt;Yep. There are other ways to do this. Clever approach. I still prefer
&lt;strong&gt;with&lt;/strong&gt; statements.&lt;/li&gt;
&lt;li&gt;I'm not sold on the syntax change being super helpful.&lt;/li&gt;
&lt;li&gt;People write bad documentation about their duck types. Good point.
People need to be more clear.&lt;/li&gt;
&lt;li&gt;Agree. A lot of projects need to implement type hints to make it more
useful.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Extracting Data Subsets and Design By Composition</title><link href="https://slott56.github.io/2017_07_11-extracting_data_subsets_and_design_by_composition.html" rel="alternate"></link><published>2017-07-11T08:00:00-04:00</published><updated>2017-07-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-07-11:/2017_07_11-extracting_data_subsets_and_design_by_composition.html</id><summary type="html">&lt;p&gt;The request was murky. It evolved over time to this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create a function file_record_selection(train.csv, 2, 100,
train_2_100.csv)&lt;/p&gt;
&lt;p&gt;First parameter: input file name (train.csv)&lt;/p&gt;
&lt;p&gt;Second parameter: first record to include (2)&lt;/p&gt;
&lt;p&gt;Third parameter: last record to include (100)&lt;/p&gt;
&lt;p&gt;Fourth parameter: output file name (train_2_100.csv)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fundamentally, this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The request was murky. It evolved over time to this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create a function file_record_selection(train.csv, 2, 100,
train_2_100.csv)&lt;/p&gt;
&lt;p&gt;First parameter: input file name (train.csv)&lt;/p&gt;
&lt;p&gt;Second parameter: first record to include (2)&lt;/p&gt;
&lt;p&gt;Third parameter: last record to include (100)&lt;/p&gt;
&lt;p&gt;Fourth parameter: output file name (train_2_100.csv)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fundamentally, this is a bad way to think about things. I want to
cover some superficial problems first, though.&lt;/p&gt;
&lt;p&gt;First superficial dig. It &lt;em&gt;evolved&lt;/em&gt; to this. In fairness to people
without a technical background, getting to tight, implementable
requirements are is difficult. Sadly the first hand-waving garbage
was from a DBA. It &lt;em&gt;evolved&lt;/em&gt; to this. The early drafts made no sense.&lt;/p&gt;
&lt;p&gt;Second superficial whining. The specification -- as written -- is
extraordinarily shabby. This seems to be written by someone who's
never read a function definition in the Python documentation before.
Something I know is &lt;strong&gt;not&lt;/strong&gt; the case. How can someone who is
marginally able to code also unable to write a description of a
function? In this case, the &amp;quot;marginally able to code&amp;quot; may be a hint
that some folks struggle with abstraction: the world is a lot of
unique details; patterns don't emerge from related details.&lt;/p&gt;
&lt;p&gt;Third. Starting from record 2, seems to show that they don't get the
idea that indexes start with zero. They've seen Python. They've
written code. They've posted code to the web for comments. And they
are still baffled by the start value of indices.&lt;/p&gt;
&lt;p&gt;Let's move on to the more interesting topic, functional composition.&lt;/p&gt;
&lt;div class="section" id="functional-composition"&gt;
&lt;h2&gt;Functional Composition&lt;/h2&gt;
&lt;p&gt;The actual data file is a .GZ archive. So there's a tiny problem with
looking at .CSV extracts from the gzip. Specifically, we're exploding
a file all over the hard drive for no &lt;strong&gt;real&lt;/strong&gt; benefit. It's often
faster to read the zipped file: it may involve fewer physical I/O
operations. The .GZ is small; the computation overhead to decompress
may be less than the time waiting for I/O.&lt;/p&gt;
&lt;p&gt;To get to functional composition we have to start by decomposing the
problem. Then we can build the solution from the pieces. To do this,
we'll borrow the interface segregation (ISP) design principle from OO
programming.&lt;/p&gt;
&lt;p&gt;Here's an application of ISP: Avoid Persistence. &lt;strong&gt;It's easier to add
persistence than to remove it&lt;/strong&gt;. This leads peeling off three further
tiers of file processing: Physical Format, Logical Layout, and
Essential Entities.&lt;/p&gt;
&lt;p&gt;We shouldn't write a .CSV file unless it's somehow required. For
example, if there are multiple clients for a subset. In this case,
the problem domain is exploratory data analysis (EDA) and saving .CSV
subsets is unlikely to be helpful. The principle still applies: don't
start with &lt;strong&gt;persistence&lt;/strong&gt; in mind. What are the Essential Entities?
This leads away from trying to work with filenames, also. It's better
to work with files. And we shouldn't work with file names as strings,
we should use pathlib.Path. All consequences of peeling off layers
from the interfaces.&lt;/p&gt;
&lt;p&gt;Replacing names with files means the overall function is really this.
A composition.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
file_record_selection = (lambda source, start, stop, target:
    file_write(target, file_read_selection(source, start, stop))
)
&lt;/pre&gt;
&lt;p&gt;We applied the ISP again, to avoid opening a named .CSV file. We can
work with an open file-like objects, instead of a file names. This
doesn't change the overall form of the functions, but it changes the
types. Here are the two functions that are part of the composition:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import typing
Record = typing.Any
def file_write(target: typing.TextIO, records: Iterable[Record]):
    pass
def file_read_selection(source: csv.DictReader, start: int, stop: int) -&amp;gt; Iterable[Record]:
    pass
&lt;/pre&gt;
&lt;p&gt;We've left the record type unspecified, mostly because we don't
know what it just yet. The definition of Record reflects the
Essential Entities, and we'll defer that decision until later. CSV
readers can produce either dictionaries or lists, so it's not a
complex decision; but we can defer it.&lt;/p&gt;
&lt;p&gt;The .GZ processing defines the physical format. The content which
was zipped was a .CSV file, which defines the logical layout.
Separating physical format, logical layout, and essential entity,
gets us code like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with gzip.open('file.gz') as source:
    reader = csv.DictReader(source)  # Iterator[Record]
    for line in file_read_selection(reader, start, stop):
        print(line)
&lt;/pre&gt;
&lt;p&gt;We've opened the .GZ for reading. Wrapped a CSV parser around
that. Wrapped our selection filter around that. We didn't write
the CSV output because -- actually -- that's not required. The
core requirement was to examine the input.&lt;/p&gt;
&lt;p&gt;We can, if we want, provide two variations of the file_write()
function and use a composition like the file_record_selection()
function with the write-to-a-file and print-to-the-console
variants. Pragmatically, the print-to-the-console is all we really
need.&lt;/p&gt;
&lt;p&gt;In the above example, the Record type can be formalized
as  List[Text].  If we want to use csv.DictReader instead, then
the Record type becomes Dict[Text, Text].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-decomposition"&gt;
&lt;h2&gt;Further Decomposition&lt;/h2&gt;
&lt;p&gt;There's a further level of decomposition: the essential design
pattern is &lt;strong&gt;Pagination&lt;/strong&gt;. In Python parlance, it's a slice
operation. We could use itertools to replace the entirety of
file_read_selection() with itertools.takewhile() and
itertools.dropwhile(). The problem with these methods is they
don't short-circuit: they read the entire file.&lt;/p&gt;
&lt;p&gt;In this instance, it's helpful to have something like this for
paginating an iterable with a start and stop value.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for n, r in enumerate(reader):
    if n &amp;lt; start: continue
    if n = stop: break
    yield r
&lt;/pre&gt;
&lt;p&gt;This covers the bases with a short-circuit design that saves a
little bit of time when looking at the first few records of a
file. It's not great for looking at the last few records, however.&lt;/p&gt;
&lt;p&gt;Currently, the &amp;quot;tail&amp;quot; use case doesn't seem to be relevant. If it
was, we might want to create an index of the line offsets to allow
arbitrary access. Or use a simple buffer of the required size.&lt;/p&gt;
&lt;p&gt;If we were really ambitious, we'd use the Slice class definition
to make it easy to specify start, stop, and step values. This
would allow us to pick every 8th item from the file without too
much trouble.&lt;/p&gt;
&lt;p&gt;The Slice class doesn't, however support selection of a randomized
subset. What we really want is a paginator like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def paginator(iterable, start: int, stop: int, selection: Callable[[int], bool]):
    for n, r in enumerate(iterable):
        if n &amp;lt; start: continue
        if n == stop: break
        if selection(n): yield r

file_read_selection = lambda source, start, stop: paginator(source, start, stop, lambda n: True)

file_read_slice = lambda source, start, stop, step: paginator(source, start, stop, lambda n: n%step == 0)
&lt;/pre&gt;
&lt;p&gt;The required file_read_selection() is built from smaller pieces.
This function, in turn, is used to build file_record_selection()
via functional composition. We can use this for randomized
selection, also.&lt;/p&gt;
&lt;p&gt;Here are functions with type hints instead of lambdas.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def file_read_selection(source: csv.DictReader, start: int, stop: int) -&amp;gt; Iterable[Record]:
    return paginator(source, start, stop, lambda n: True)

def file_read_slice(source: csv.DictReader, start: int, stop: int, step: int)  -&amp;gt; Iterable[Record]:
    return paginator(source, start, stop, lambda n: n%step == 0)
&lt;/pre&gt;
&lt;p&gt;Specifying type for a generic iterable and the matching result
iterable seems to require a type variable like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
T = TypeVar('T')
def paginator(iterable: Iterable[T], ...) -&amp;gt; Iterable[T]:
&lt;/pre&gt;
&lt;p&gt;This type hint suggests we can make wide reuse of this function.
That's a pleasant side-effect of functional composition. Reuse can
stem from stripping away the various interface details to
decompose the problem to essential elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;What's essential here is Design By Composition. And decomposition
to make that possible.&lt;/p&gt;
&lt;p&gt;We got there by stepping away from file names to file objects. We
segregated Physical Format and Logical Layout, also. Each
application of the &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt; leads to
further decomposition. We unbundled the pagination from the file
I/O. We have a number of smaller functions. The original feature
is built from a composition of functions.&lt;/p&gt;
&lt;p&gt;Each function can be comfortably tested as a separate unit. Each
function can be reused.&lt;/p&gt;
&lt;p&gt;Changing the features is a matter of changing the combination of
functions. This can mean adding new functions and creating new
combinations.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category></entry><entry><title>Python and Performance</title><link href="https://slott56.github.io/2017_07_05-python_and_performance.html" rel="alternate"></link><published>2017-07-05T09:48:00-04:00</published><updated>2017-07-05T09:48:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-07-05:/2017_07_05-python_and_performance.html</id><summary type="html">&lt;p&gt;Real Question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the standard problems that keeps coming up over and over is
the parsing of url's. A sub-problem is the parsing of domain and
sub-domains and getting a count.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.theatlantic.com/video/index/374880/living-alone-on-a-sailboat/"&gt;https://www.theatlantic.com/video/index/374880/living-alone-on-a-sailboat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It would be nice to parse the received …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Real Question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the standard problems that keeps coming up over and over is
the parsing of url's. A sub-problem is the parsing of domain and
sub-domains and getting a count.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.theatlantic.com/video/index/374880/living-alone-on-a-sailboat/"&gt;https://www.theatlantic.com/video/index/374880/living-alone-on-a-sailboat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It would be nice to parse the received file and get counts like&lt;/p&gt;
&lt;p&gt;.com had 15,323 count&lt;/p&gt;
&lt;p&gt;.google.com had 62 count&lt;/p&gt;
&lt;p&gt;.theatlantic.com had 33 count&lt;/p&gt;
&lt;p&gt;The first code snippet would be in Python and the other code snippet
would be in C/C++ to optimize for performance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes. They did not even try to look in the standard library for
urllib.parse. The general problem has already been solved; it can be
exploited in a single line of code.&lt;/p&gt;
&lt;p&gt;The line can be long-ish, so it can help to use a lambda to make it a
little easier to read. The code is below.&lt;/p&gt;
&lt;p&gt;The C/C++ point about &amp;quot;optimize for performance&amp;quot; bothers me to no end.
Python isn't very slow. Optimization isn't &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I made 16,000 URL's. These were not utterly random strings, they were
random URL's using a pool of 100 distinct names. This provides some
lumpiness to the data. Not real lumpiness where there's a long tail of
1-time-only names. But enough to exercise collections.Counter and
urllib.parse.urlparse().&lt;/p&gt;
&lt;p&gt;Here's what I found. Time to parse 16,000 URLs and pluck out the last
two levels of the name?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CPU times: user 154 ms, sys: 2.18 ms, total: 156 ms

Wall time: 157 ms
&lt;/pre&gt;
&lt;p&gt;32,000?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CPU times: user 295 ms, sys: 6.87 ms, total: 302 ms

Wall time: 318 ms
&lt;/pre&gt;
&lt;p&gt;At that pace, why use C?&lt;/p&gt;
&lt;p&gt;I suppose one could demand more speed just to demand more speed.&lt;/p&gt;
&lt;p&gt;Here's some code that can be further optimized.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
top = lambda netloc: '.'.join(netloc.split('.')[-2:])
random_counts = Counter(top(urllib.parse.urlparse(x).netloc) for x in random_urls_32k)
&lt;/pre&gt;
&lt;p&gt;The slow part of this is the top() function. Using rsplit('.',
maxsplit=2) might be better than split('.'). A smarter approach might
be find all the &amp;quot;.&amp;quot; and slice the substring from the next-to-last one.
Something like this, netloc[findall('.', netloc)[-2]:], assuming a
findall() function that returns the locations of all '.' in a string.&lt;/p&gt;
&lt;p&gt;Of course, if there is a problem, using a numpy structure might speed
things up. Or use &lt;a class="reference external" href="http://dask.pydata.org/en/latest/"&gt;dask&lt;/a&gt; to farm
the work out to multiple threads.&lt;/p&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="#python"></category></entry><entry><title>OOP and FP -- Objects vs. Functional -- Avoiding reductionist thinking</title><link href="https://slott56.github.io/2017_06_27-oop_and_fp_objects_vs_functional_avoiding_reductionist_thinking.html" rel="alternate"></link><published>2017-06-27T08:00:00-04:00</published><updated>2017-06-27T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-06-27:/2017_06_27-oop_and_fp_objects_vs_functional_avoiding_reductionist_thinking.html</id><summary type="html">&lt;p&gt;Real Quote (lightly edited to remove tangential nonsense.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently, I watched a video and it stated that OO is about nouns and
Functional programming is about the verbs. Also, ... Aspect-Oriented
Programming with the e Verification Language  by David Robinson&lt;/p&gt;
&lt;p&gt;It would be nice to have a blog post which summarized …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Real Quote (lightly edited to remove tangential nonsense.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recently, I watched a video and it stated that OO is about nouns and
Functional programming is about the verbs. Also, ... Aspect-Oriented
Programming with the e Verification Language  by David Robinson&lt;/p&gt;
&lt;p&gt;It would be nice to have a blog post which summarized the various
mindset associated w/ the various paradigms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;I find the word &amp;quot;mindset&amp;quot; to be challenging.&lt;/p&gt;
&lt;p&gt;Yes. All Turing Complete programming languages do have a kind of
fundamental equivalence at the level of computing stuff represented
as numbers. This, however, seems reductionist.&lt;/p&gt;
&lt;p&gt;[&amp;quot;All languages were one language to him. All languages were
'woddly'.&amp;quot; Paraphrased from James Thurber's &amp;quot;The Great Quillow&amp;quot;, a
must-read.]&lt;/p&gt;
&lt;p&gt;So. Beyond the core Turing Completeness features of a language, the
rest is reduced to a difference in &amp;quot;mindset&amp;quot;? The only difference is
how we pronounce &amp;quot;Woddly?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Mindset&amp;quot; feels reductionist. It replaces a useful summary of
language features with a dismissive &amp;quot;mindset&amp;quot; categorization of
languages. In a way, this seems to result from bracketing technology
choices as &amp;quot;religious wars,&amp;quot; where the passion for a particular
choice outweighs the actual relevance; i.e., &amp;quot;All languages have
problems, so use Java.&amp;quot;&lt;/p&gt;
&lt;p&gt;In my day job, I work with three kinds of Python problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;API Services&lt;/li&gt;
&lt;li&gt;DevOps/TechOps Automation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In many cases, one person can have all three problems. These aren't
groups of people. These are problem domains.&lt;/p&gt;
&lt;p&gt;I think the first step is to replace &amp;quot;mindset&amp;quot; with &amp;quot;problem domain&amp;quot;.
It's a start, but I'm not sure it's that simple.&lt;/p&gt;
&lt;p&gt;When someone has a data science problem, they often solve it with
purely function features of Python. Generally they do this via numpy,
but I've been providing examples of generator expressions and
comprehensions in my Code Dojo webinars. Generator expressions are an
elegant, functional approach to working with stateless data objects.&lt;/p&gt;
&lt;p&gt;In Python 3, the following kind of code doesn't create gigantic
intermediate data structures. The functional transformations are
applied to each item generated by the &amp;quot;source&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x = map(transform, source)
y = filter(selector_rule, x)
z = Counter(y)
&lt;/pre&gt;
&lt;p&gt;I prefer to suggest that a fair amount of data analysis involves
little or no mutation of state. Functional features of a language
seem to work well with immutable data.&lt;/p&gt;
&lt;p&gt;There is state change, but it's at a macro level. For example, the
persistence of capturing data is a large-scale state change that's
often implemented at the OS level, not the language level.&lt;/p&gt;
&lt;p&gt;When someone's building an API, on the other hand, they're often
working with objects that have a mutating state. Some elements of an
API will involve state change, and objects model state change
elegantly. RESTful API's can deserialize objects from storage, make
changes, and serialize the modified object again.&lt;/p&gt;
&lt;p&gt;[This summary of RESTful services is also reductionist, and
therefore, possibly unhelpful.]&lt;/p&gt;
&lt;p&gt;When there's mutability, then objects might be more appropriate than
functions.&lt;/p&gt;
&lt;p&gt;I'm reluctant to call this &amp;quot;mindset.&amp;quot; It may not be &amp;quot;problem domain.&amp;quot;
It seems to be a model that involves mutable or immutable state.&lt;/p&gt;
&lt;p&gt;When someone's automating their processing, they're wrestling with OS
features, and OS management of state change. They might be installing
stuff, or building Docker images, or gluing together items in a CI/CD
pipeline, setting the SSL keys, or figuring out how to capture Behave
output as part of Gherkin acceptance testing. Lots of interesting
stuff that isn't the &lt;em&gt;essential&lt;/em&gt; problem at hand, but is part of
building a useful, automated solution to the problem.&lt;/p&gt;
&lt;p&gt;The state in these problems is maintained by the OS. Application code
may -- or may not -- try to model that state.&lt;/p&gt;
&lt;p&gt;When doing Blue/Green deployments, for example, the blueness and
greenness isn't part of the server farm, it's part of an internal
model of how the servers are being used. This seems to be stateful;
object-oriented programming might be helpful. When the information
can be gleaned from asset management tools, then perhaps a functional
processing stream is more important for gathering, deciding, and
taking action.&lt;/p&gt;
&lt;p&gt;I'm leaning toward the second view-point, and suggesting that some of
the OO DevOps programming might be better looked at as functional
map-filter-reduce processing. Something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
action_to_take = some_decision_pipeline(current state, new_deployment)
&lt;/pre&gt;
&lt;p&gt;This reflects the questions of state change. It may not be the right
abstraction though, because carrying out the action is, itself, a
difficult problem that involves determining the state of the server
farm, and then applying some change to one or more servers.&lt;/p&gt;
&lt;p&gt;We often think of server state change as imperative in nature. It
feels like object-oriented programming. There are steps, the object
models those steps. I'm not sure that's right. I think there's a
repeated &amp;quot;determine next action&amp;quot; cycle here. Sometimes it involves
waiting for an action to finish. Yes, it sounds like polling the
server farm. I'm not sure that's wrong. How else do you know a server
is crashed except by polling it?&lt;/p&gt;
&lt;p&gt;I think we've moved a long way from &amp;quot;mindset.&amp;quot;&lt;/p&gt;
&lt;p&gt;I think it's about fitting language features to a problem in a way
that creates the right abstraction to capture (and eventually) solve
the problem.&lt;/p&gt;
&lt;p&gt;I haven't mentioned Aspect-Oriented Programming because it seems to
cut across the functional/object state management boundary. It's a
distinctive approach to organizing reusable functionality. I don't
mean to dismiss it as uninteresting. I mean to set it aside as
orthogonal to the &amp;quot;mutable state&amp;quot; consideration that seems to to be
one of the central differences between OOP and FP.&lt;/p&gt;
&lt;p&gt;In response to the request: &amp;quot;No. I won't map mindset to paradigm.&amp;quot;&lt;/p&gt;
</content><category term="Technologies"></category><category term="object-oriented programming"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>NMEA Data Acquisition -- An IoT Exercise with Python</title><link href="https://slott56.github.io/2017_06_20-nmea_data_acquisition_an_iot_exercise_with_python.html" rel="alternate"></link><published>2017-06-20T08:00:00-04:00</published><updated>2017-06-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-06-20:/2017_06_20-nmea_data_acquisition_an_iot_exercise_with_python.html</id><summary type="html">&lt;p&gt;Here's the code: &lt;a class="reference external" href="https://github.com/slott56/NMEA-Tools"&gt;https://github.com/slott56/NMEA-Tools&lt;/a&gt;. This is Python
code to do some Internet of Things (IoT) stuff. Oddly, even when
things connected by a point-to-point serial interface, it's still
often called IoT. Even though there's no &amp;quot;Internetworking.&amp;quot;&lt;/p&gt;
&lt;p&gt;Some IoT projects have a common arc: exploration, modeling, filtering …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's the code: &lt;a class="reference external" href="https://github.com/slott56/NMEA-Tools"&gt;https://github.com/slott56/NMEA-Tools&lt;/a&gt;. This is Python
code to do some Internet of Things (IoT) stuff. Oddly, even when
things connected by a point-to-point serial interface, it's still
often called IoT. Even though there's no &amp;quot;Internetworking.&amp;quot;&lt;/p&gt;
&lt;p&gt;Some IoT projects have a common arc: exploration, modeling, filtering,
and persistence. This is followed by the rework to revise the data
models and expand the user stories. And then there's the rework
conundrum. Stick with me to see just how hard rework can be.&lt;/p&gt;
&lt;p&gt;What's this about? First some background. Then I'll show some code.&lt;/p&gt;
&lt;p&gt;Part of the back story is here:
&lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/travel-2017-2018/that-leaky-hatch--chartplot.html"&gt;http://www.itmaybeahack.com/TeamRedCruising/travel-2017-2018/that-leaky-hatch--chartplot.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the Internet of Things Boaty (IoT-B) there are devices called
chart-plotters. They include GPS receivers, displays, and controls.
And algorithms. Most important is the merging of GPS coordinates and
an active display. You see where your boat is.&lt;/p&gt;
&lt;p&gt;Folks with GPS units in cars and on their phones have an idea core
feature set of a chart plotter. But the value of a chart plotter on a
boat is orders of magnitude above the value in a car.&lt;/p&gt;
&lt;p&gt;At sea, the hugeness and importance of the chartplotter is magnified.
The surface of the a large body of water is (almost) trackless. Unless
you're really familiar with it, it's just water, generally opaque. The
depths can vary dramatically. A shoal too shallow for your boat can be
more-or-less invisible and just ahead. Bang. You're aground (or worse,
holed.)&lt;/p&gt;
&lt;p&gt;A chart -- and knowledge of your position on that chart -- is a
&lt;strong&gt;very&lt;/strong&gt; big deal. Once you sail out of sight of land, the chart
plotter becomes a life-or-death necessity. While I can find the North
American continent using only a compass, I'm not sure I could find the
entrance to Chesapeake Bay without knowing my latitude. (Yes, I have a
sextant. Would I trust my life to my sextant skills?)&lt;/p&gt;
&lt;p&gt;Modern equipment uses modern hardware and protocols. &lt;a class="reference external" href="http://www.boat-project.com/tutorials/nmea2000.htm"&gt;N2K (NMEA
2000)&lt;/a&gt;, for
example, is powered Ethernet connectivity that uses a simplified
backbone with drops for the various devices. Because it's Ethernet,
they're peers, and interconnection is simplified.
See &lt;a class="reference external" href="http://www.digitalboater.com/"&gt;http://www.digitalboater.com&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;div class="section" id="the-interface-issue"&gt;
&lt;h2&gt;The Interface Issue&lt;/h2&gt;
&lt;p&gt;The particularly gnarly problem with chart plotters is the lack of an
easy-to-live-with interface.&lt;/p&gt;
&lt;p&gt;They're designed to be really super robust, turn-it-on-and-it-works
products. Similar to a toaster, in many respects. Plug and play. No
configuration required.&lt;/p&gt;
&lt;p&gt;This is a two-edged sword. No configuration required bleeds into no
configuration possible.&lt;/p&gt;
&lt;p&gt;The Standard Horizon CP300i uses &lt;a class="reference external" href="https://en.wikipedia.org/wiki/NT_Card"&gt;NT
cards&lt;/a&gt;. Here's a reader
&lt;a class="reference external" href="http://www.landfallnavigation.com/ee86002.html"&gt;device&lt;/a&gt;. Note the
&amp;quot;No Longer Available&amp;quot; admonition. All of my important data is saved to
the NT card. But. The card is useless except for removable media
backup in case the unit dies.&lt;/p&gt;
&lt;p&gt;What's left? The NMEA-0183 interface wiring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nmea-serial-eia-422"&gt;
&lt;h2&gt;NMEA Serial EIA-422&lt;/h2&gt;
&lt;p&gt;The good news is that the NMEA wiring is carefully documented in the
CP300i owner's manual. There are products like this &lt;a class="reference external" href="http://www.digitalyachtamerica.com/index.php/en/products/interfacing/nmeausb/product/67-usb-to-nmea-adaptor"&gt;NMEA-USB
Adaptor&lt;/a&gt;.
A few wire interconnections and we can -- at least in principle --
listen to this device.&lt;/p&gt;
&lt;p&gt;The NMEA standard was defined to allow numerous kinds of devices to
work together. When it was adopted (in 1983), the idea was that a
device would be a &amp;quot;talker&amp;quot; and other devices would be &amp;quot;listeners.&amp;quot; The
intent was to have a lot of point-to-point conversations: one talker
many listeners.&lt;/p&gt;
&lt;p&gt;A digital depth meter or wind meter, for example, could talk all day,
pushing out message traffic with depth or wind information. A display
would be a listener and display the current depth or wind state.&lt;/p&gt;
&lt;p&gt;A centralized multiplexer could collect from multiple listeners and
then stream the interleaved messages as a talker. Here's &lt;a class="reference external" href="https://www.navstore.com/noland-engineering-am43-nmea-0183-hi-speed-multiplexer-usb.html"&gt;an
example&lt;/a&gt;.
This would allow many sensors to be combined onto a single wire. A
number of display devices could listen to traffic on the wire, pick
out messages that made sense to them, and display the details.&lt;/p&gt;
&lt;p&gt;Ideally, if every talker was polite about their time budget, hardly
anything would get lost.&lt;/p&gt;
&lt;p&gt;In the concrete case of the CP300i, there are five ports. usable in
various combinations. There are some restrictions that seem to
indicate some hardware sharing among the ports. The product literature
describes a number of use cases for different kinds of
interconnections including a computer connection.&lt;/p&gt;
&lt;p&gt;Since NMEA is EIA-422 is RS-232, some old computer serial ports could
be wired up directly. My boat originally had an ancient Garmin GPS and
an ancient windows laptop using an ancient DB-9 serial connector. I
saved the data by copying files off the hard drive and threw the
hardware away.&lt;/p&gt;
&lt;p&gt;A modern Macintosh, however, only handles USB. Not direct EAI-422
serial connections. An adaptor is required.&lt;/p&gt;
&lt;p&gt;What we will have, then, is a CP300i in talker mode, and a MacBook Pro
(Retina, 13-inch, Late 2013) as listener.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="drivers-and-infrastructure"&gt;
&lt;h2&gt;Drivers and Infrastructure&lt;/h2&gt;
&lt;p&gt;This is not my first foray in the IoT-B world. I have a
&lt;a class="reference external" href="http://usglobalsat.com/s-122-bu-353-support.aspx"&gt;BU-353&lt;/a&gt; GPS
antenna. This can be used directly by the GPSNavX application on the
Macintosh. On the right-ish side of the BU-353 page are &lt;strong&gt;Downloads&lt;/strong&gt;.
There's a USB driver listed here. And a GPS Utility to show position
and satellites and the NMEA data stream.&lt;/p&gt;
&lt;p&gt;Step 1. Install this USB driver.&lt;/p&gt;
&lt;p&gt;Step 2. Install the MAC OS X GPS Utility. I know the USB interface
works because I can see the BU-353 device using this utility.&lt;/p&gt;
&lt;p&gt;Step 3. Confirm with GPSNavX. Yes. The chart shows the little boat
triangle about where I expect to be.&lt;/p&gt;
&lt;p&gt;Yay! Phase I of the IoT-B is complete. We have a USB interface. And we
can see an NMEA-0183 GPS antenna. It's transmitting in standard 4800
BAUD mode. This is the biggest hurdle in many projects: getting stuff
to talk.&lt;/p&gt;
&lt;p&gt;In the project Background section on Git Hub, there's a &lt;a class="reference external" href="https://slott56.github.io/NMEA-Tools/background.html#nmea-hardware-interface"&gt;wiring
diagram&lt;/a&gt;
for the USB to NMEA interface.&lt;/p&gt;
&lt;p&gt;Also, the
&lt;a class="reference external" href="https://slott56.github.io/NMEA-Tools/installation.html"&gt;Installation&lt;/a&gt;
section says install pyserial. &lt;a class="reference external" href="https://pypi.python.org/pypi/pyserial"&gt;https://pypi.python.org/pypi/pyserial&lt;/a&gt;.
This is essential to let Python apps interact with the USB driver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-exploration"&gt;
&lt;h2&gt;Data Exploration&lt;/h2&gt;
&lt;p&gt;Start here: &lt;a class="reference external" href="https://www.sparkfun.com/datasheets/GPS/NMEA%20Reference%20Manual-Rev2.1-Dec07.pdf"&gt;NMEA Reference
Manual&lt;/a&gt;.
This covers the bases for the essential message traffic nicely. The
full NMEA standard has lots of message types. We only care about a few
of them. We can safely ignore the others.&lt;/p&gt;
&lt;p&gt;As noted in the project
&lt;a class="reference external" href="https://slott56.github.io/NMEA-Tools/background.html"&gt;documentation&lt;/a&gt;,
there's a relatively simple message structure. The messages arrive
more-or-less constantly. This leads to an elegant Pythonic design: an
Iterator.&lt;/p&gt;
&lt;p&gt;We can define a class which implements the iterator protocol
(__iter__() and __next__()) that will consume lines from the serial
interface and emit the messages which are complete and have a proper
checksum. Since the fields of a message are comma-delimited, might as
well split into fields, also.&lt;/p&gt;
&lt;p&gt;It's handy to combine this with the context manager protocol
(__enter__() and __exit__()) to create a class that can be used like
this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with Scanner(device) as GPS:
    for sentence_fields in GPS:
        print(sentence_fields)
&lt;/pre&gt;
&lt;p&gt;This is handy for watching the messages fly past. The fields are kind
of compressed. It's a light-weight compression, more like a lack of
useful punctuation than proper compression.&lt;/p&gt;
&lt;p&gt;Consequently, we'll need to derive fields from the raw sequences of
bytes. This initial exploration leads straight to the next phase of
the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modeling"&gt;
&lt;h2&gt;Modeling&lt;/h2&gt;
&lt;p&gt;We can define a data model for these sentences using a Sentence class
hierarchy. We can use a simple Factory function to emit Sentence
objects of the appropriate subclass given a sequence of fields in
bytes. Each subclass can derive data from the message.&lt;/p&gt;
&lt;p&gt;The atomic fields seem to be of seven different types.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Text. This is a simple decode using ASCII encoding.&lt;/li&gt;
&lt;li&gt;Latitude. The values are in degrees and float minutes.&lt;/li&gt;
&lt;li&gt;Longitude. Similar to latitude.&lt;/li&gt;
&lt;li&gt;UTC date. Year, month, and day as a triple.&lt;/li&gt;
&lt;li&gt;UTC time. Hour, minute, float seconds as a triple.&lt;/li&gt;
&lt;li&gt;float.&lt;/li&gt;
&lt;li&gt;int.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because fields are optional, we can't naively use the built-in float()
and int() functions to convert bytes to numbers. We'll have to have a
version that works politely with zero-length strings and creates None
objects.&lt;/p&gt;
&lt;p&gt;We can define a simple field definition tuple, Field =
namedtuple('Field', ['title', 'name', 'conversion']). This slightly
simplifies definition of a class.&lt;/p&gt;
&lt;p&gt;We can define a class with a simple list of field conversion rules.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class GPWPL(Sentence):
    fields = [
        Field('Latitude', 'lat_src', lat),
        Field('N/S Indicator', 'lat_h', text),
        Field('Longitude', 'lon_src', lon),
        Field('E/W Indicator', 'lon_h', text),
        Field(&amp;quot;Name&amp;quot;, &amp;quot;name&amp;quot;, text),
    ]
&lt;/pre&gt;
&lt;p&gt;The superclass __init__() uses the sequence of field definitions to
apply conversion functions (lat(), lon(), text()) to the bytes,
populating a bunch of attributes. We can then use s.lat_src to see the
original latitude 2-tuple from the message. A property can deduce the
actual latitude from the s.lat_src and s.lat_h fields.&lt;/p&gt;
&lt;p&gt;For each field, apply the function to the value, and set this as an
attribute.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for field, arg in zip(self.fields, args[1:]):
    try:
        setattr(self, field.name, field.conversion(arg))
    except ValueError as e:
        self.log.error(f&amp;quot;{e} {field.title} {field.name} {field.conversion} {arg}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This sets attributes with useful values derived from the bytes
provided in the arguments.&lt;/p&gt;
&lt;p&gt;The factory leverages a cool name-to-class mapping built by
introspection.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sentence_class_map = {
    class_.__name__.encode('ascii'): class_
    for class_ in Sentence.__subclasses__()
}
class_= self.sentence_class_map.get(args[0])
&lt;/pre&gt;
&lt;p&gt;This lets us map a sentence header (b&amp;quot;GPRTE&amp;quot;) to a class (GPRTE)
simply. The get() method can use an UnknownSentence subclass as a
default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modeling-alternatives"&gt;
&lt;h2&gt;Modeling Alternatives&lt;/h2&gt;
&lt;p&gt;As we move forward, we'll want to change this model. We could use a
cooler class definition style, something like this. We could then
iterate of the keys in the class __dict__ to set the attribute
values.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class GPXXX(Sentence):
    lat_src = Latitude(1)
    lat_h = Text(2)
    lon_src = Longitude(3)
    lon_h = Text(4)
    name = Text(5)
&lt;/pre&gt;
&lt;p&gt;The field numbers are provided to be sure the right bunch of bytes are
decoded.&lt;/p&gt;
&lt;p&gt;Or maybe even something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class GPXXX(Sentence):
    latitude = Latitude(1, 2)
    longitude = Longitude(3, 4)
    name = Text(5)
&lt;/pre&gt;
&lt;p&gt;This would combine source fields to create the useful value. It would
be pretty slick. But it requires being *sure* of what a sentence'
content is. When exploring, this isn't the way to start. The
simplistic list of field definitions comes right off web sites without
too much intermediate translation that can lead to confusion.&lt;/p&gt;
&lt;p&gt;The idea is to borrow the format from the &lt;a class="reference external" href="https://www.sparkfun.com/datasheets/GPS/NMEA%20Reference%20Manual-Rev2.1-Dec07.pdf"&gt;SiRF
reference&lt;/a&gt; and
start with Name, Example, Unit, and Description in each Field
definition. That can help provide super-clear documentation when
exploring. The &lt;a class="reference external" href="http://aprs.gids.nl/nmea/"&gt;http://aprs.gids.nl/nmea/&lt;/a&gt; information has similar
tables with examples. Some of the &lt;a class="reference external" href="http://freenmea.net/docs"&gt;http://freenmea.net/docs&lt;/a&gt; examples
only have names.&lt;/p&gt;
&lt;p&gt;The most exhaustive seems to be &lt;a class="reference external" href="http://www.catb.org/gpsd/NMEA.html"&gt;http://www.catb.org/gpsd/NMEA.html&lt;/a&gt;.
This, also, only has field names and position numbers. The conversions
are usually pretty obvious.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filtering"&gt;
&lt;h2&gt;Filtering&lt;/h2&gt;
&lt;p&gt;A talker -- well -- talks. More or less constantly. There are delays
to allow time to listen and time for multiplexers to merge in other
talker streams.&lt;/p&gt;
&lt;p&gt;There's a cycle of messages that a device will emit. Once you've
started decoding the sentences, the loop is obvious.&lt;/p&gt;
&lt;p&gt;For an application where you're gathering real-time track or
performance data, of course, you'll want to capture the background
loop. It's a lot of data. At about 80 bytes times 8 background
messages on a 2-second cycle, you'll see 320 bytes per second, 19K per
minute, 1.1M per hour, 27.6M per day. You can record &lt;strong&gt;everything&lt;/strong&gt;
for 38 days to and be under a Gb.&lt;/p&gt;
&lt;p&gt;The upper bound for 4800 BAUD is 480 bytes per second. 41M per day. 25
days to record a Gb of raw data.&lt;/p&gt;
&lt;p&gt;For my application, however, I want to capture the data &lt;strong&gt;not&lt;/strong&gt; in the
background loop.&lt;/p&gt;
&lt;p&gt;It works like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I start the laptop collecting data.&lt;/li&gt;
&lt;li&gt;I reach over to the chartplotter and push a bunch of buttons to get
to a waypoint transfer or a route transfer.&lt;/li&gt;
&lt;li&gt;The laptop shows the data arriving. The chartplotter claims it's done
sending.&lt;/li&gt;
&lt;li&gt;I stop collecting data. In the stream of data are my waypoints or
routes. Yay!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A reject filter is an easy thing: Essentially it's filter(lambda s:
s._name not in reject_set, source). A simple set of names to reject is
the required configuration for this filter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="persistence"&gt;
&lt;h2&gt;Persistence&lt;/h2&gt;
&lt;p&gt;How do we save these messages?&lt;/p&gt;
&lt;p&gt;We have several choices.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Stream of Bytes. The protocol uses \r\n as line endings. We could
(in principle) cat /dev/cu.usbserial-A6009TFG &amp;gt;capture.nmea.
Pragmatically, that doesn't always work because the 4800 BAUD setting
is hard to implement. But the core idea of &amp;quot;simply save the bytes&amp;quot;
works.&lt;/li&gt;
&lt;li&gt;Stream of Serialized Objects.&lt;ol class="arabic"&gt;
&lt;li&gt;We can use YAML to cough out the objects. If the derived
attributes were all properties, it would have worked out really
well. If, however, we leverage __init__() to set attributes, this
becomes awkward.&lt;/li&gt;
&lt;li&gt;We can work around the derived value problems by using JSON with
our own Encoder to exclude the derived fields. This is a bit more
complex, than it needs to be. It permits exploration though.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;GPX, KML, or CSV. Possible, but. These seems to be a separate
problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When transforming data, it's essential to avoid &amp;quot;point-to-point&amp;quot;
transformation among formats. It's crucial to have a canonical
representation and individual converters. In this case, we have NMEA
to canonical, persist the canonical, and canonical to GPX (or KML, or
CSV.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rework"&gt;
&lt;h2&gt;Rework&lt;/h2&gt;
&lt;p&gt;Yes. There's a problem here.  Actually there are several problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I got the data I wanted. So, fixing the design flaws isn't
essential anymore. I may, but... I should have used descriptors.&lt;/li&gt;
&lt;li&gt;In the long run, I really need a three-way synchronization process
between computer, new chart plotter and legacy chart plotter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's start with the first design issue: lazy data processing.&lt;/p&gt;
&lt;p&gt;The core Field/Sentence design &lt;em&gt;should&lt;/em&gt; have looked like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Field:
    def __init__(self, position, function, description):
        self.position = position
        self.function = function
        self.description = description
    def __get__(self, object, class_):
        print(f&amp;quot;get {object} {class_}&amp;quot;)
        transform = self.function
        return transform(object.args[self.position])

class Sentence:
    f0 = Field(0, int, &amp;quot;Item Zero&amp;quot;)
    f1 = Field(1, float, &amp;quot;Item One&amp;quot;)
    def __init__(self, *args):
        self.args = args
&lt;/pre&gt;
&lt;p&gt;This makes all of the properties into lazy computations. It
simplifies persistence because the only real attribute value is the
tuple of arguments captured from the device.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; s = Sentence(b'1', b'2.3')
&amp;gt;&amp;gt;&amp;gt; s.f1
1
&amp;gt;&amp;gt;&amp;gt; s.f2
2.3
&lt;/pre&gt;
&lt;p&gt;That would have been a nicer design because serialization would have
been trivial. Repeated access to the fields might have become costly.
We have a tradeoff issue here that depends on the ultimate use case.
For early IoT efforts, flexibility is central, and the computation
costs don't matter. At some point, there may be a focus on
performance, where extra code to save time has merit.&lt;/p&gt;
&lt;p&gt;Synchronization is much more difficult. I need to pick a canonical
representation. Everything gets converted to a canonical form.
Differences are identified. Then updates are created: either GPX files
for the devices that handle that, or NMEA traffic for the device which
updated over the wire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This IoT project followed a common arc: Explore the data, define a
model, figure out how to filter out noise, figure out how to persist
the data. Once we have some data, we realize the errors we made in
our model.&lt;/p&gt;
&lt;p&gt;A huge problem is the pressure to ship an MVP (Minimally Viable
Product.) It takes a few days to build this. It's shippable.&lt;/p&gt;
&lt;p&gt;Now, we need to rework it. In this case, throw most of the first
release away. Who has the stomach for this? It's essential, but it's
also very difficult.&lt;/p&gt;
&lt;p&gt;A lot of good ideas from this blog post are not in the code. And this
is the way a lot of commercial software happens: MVP and move forward
with no time for rework.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="great-article"&gt;
&lt;h2&gt;Great Article&lt;/h2&gt;
&lt;p&gt;Jackie Co Kad&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-05-28 06:08:55.448000-04:00&lt;/p&gt;
&lt;p&gt;Great Article
&lt;a class="reference external" href="http://projectcentersinchennai.co.in/Final-Year-Projects-for-CSE/Final-Year-Projects-for-CSE-IOT-Domain"&gt;Internet of Things Final Year
Project&lt;/a&gt;
&lt;a class="reference external" href="http://projectcentersinchennai.co.in"&gt;Final Year Project Centers in
Chennai&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="IoT"></category><category term="internet of things"></category><category term="nmea"></category></entry><entry><title>Python Resources</title><link href="https://slott56.github.io/2017_06_16-python_resources.html" rel="alternate"></link><published>2017-06-16T08:00:00-04:00</published><updated>2017-06-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-06-16:/2017_06_16-python_resources.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://opensource.com/tags/python"&gt;https://opensource.com/tags/python&lt;/a&gt;
Red Hat was an early adopter, putting Python-based tools into their
distros.
Sadly, they've also lagged behind. They haven't gotten much beyond
Python 2.6 or maybe 2.7.
RHEL is really good. Except for the Python problem.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="linux"></category></entry><entry><title>Another "Problems With Python" List</title><link href="https://slott56.github.io/2017_06_13-another_problems_with_python_list.html" rel="alternate"></link><published>2017-06-13T08:00:00-04:00</published><updated>2017-06-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-06-13:/2017_06_13-another_problems_with_python_list.html</id><summary type="html">&lt;p&gt;This: &lt;a class="reference external" href="https://darkf.github.io/posts/problems-i-have-with-python.html"&gt;https://darkf.github.io/posts/problems-i-have-with-python.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Summary.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Slow.&lt;/li&gt;
&lt;li&gt;Threads.&lt;/li&gt;
&lt;li&gt;Legacy Python 2 Code.&lt;/li&gt;
&lt;li&gt;Some Inconsistencies.&lt;/li&gt;
&lt;li&gt;Functional Programming.&lt;/li&gt;
&lt;li&gt;Class Definitions Don't Have Enough Features.&lt;/li&gt;
&lt;li&gt;Switch Statement.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Responses.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Find the 20% that needs a speedup and write that in C. Most of the
time that's already available in numpy. The …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This: &lt;a class="reference external" href="https://darkf.github.io/posts/problems-i-have-with-python.html"&gt;https://darkf.github.io/posts/problems-i-have-with-python.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Summary.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Slow.&lt;/li&gt;
&lt;li&gt;Threads.&lt;/li&gt;
&lt;li&gt;Legacy Python 2 Code.&lt;/li&gt;
&lt;li&gt;Some Inconsistencies.&lt;/li&gt;
&lt;li&gt;Functional Programming.&lt;/li&gt;
&lt;li&gt;Class Definitions Don't Have Enough Features.&lt;/li&gt;
&lt;li&gt;Switch Statement.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Responses.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Find the 20% that needs a speedup and write that in C. Most of the
time that's already available in numpy. The rest of the time you may
have found something useful.&lt;/li&gt;
&lt;li&gt;Generally, most folks make a hash of threaded programming. A focus on
process-level parallelism is simpler and essentially guarantees
success by avoiding shared data structures.&lt;/li&gt;
&lt;li&gt;Maybe stop using the legacy projects?&lt;/li&gt;
&lt;li&gt;Yup.&lt;/li&gt;
&lt;li&gt;Proper functional programming would requires an optimizer, something
that doesn't fit well with easy-to-debug Python. It would also
require adding some features to cope the optimization of functional
code (e.g., monads.) It seems to be a net loss.
And &lt;a class="reference external" href="http://coconut-lang.org/"&gt;http://coconut-lang.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Consider a metaclass that provides the missing features?&lt;/li&gt;
&lt;li&gt;I can't figure out why 'elif' is considered hard to use. The more
complex matching rules are pretty easy to implement, but I guess this
falls into the &amp;quot;awful hacks&amp;quot; category.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What causes me to write this is the lack of concrete &amp;quot;do this instead&amp;quot;
for most of the points. It sounds too much like empty complaining.&lt;/p&gt;
&lt;p&gt;I hope for some follow-on from
&lt;a class="reference external" href="https://twitter.com/dbader_org/status/864311190599720960"&gt;this&lt;/a&gt; on
Twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Problems I Have With Python&amp;quot; (from a long-time Python user)
&lt;a class="reference external" href="https://t.co/CWYTdsge70"&gt;https://t.co/CWYTdsge70&lt;/a&gt;&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Dan Bader (&amp;#64;dbader_org) &lt;a class="reference external" href="https://twitter.com/dbader_org/status/864311190599720960"&gt;May 16,
2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But I'm not optimistic. It's too easy to complain and too hard to solve.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Some Important Reading</title><link href="https://slott56.github.io/2017_06_09-some_important_reading.html" rel="alternate"></link><published>2017-06-09T08:13:00-04:00</published><updated>2017-06-09T08:13:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-06-09:/2017_06_09-some_important_reading.html</id><content type="html">&lt;p&gt;Several things:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;robertgrosse/generating-64-bit-hash-collisions-to-dos-python-5b21404a5306?source=emailShare-f2cdc4351994-1495320567"&gt;Generating 64 bit hash collisions to DOS
Python&lt;/a&gt;
by Robert Grosse&lt;/p&gt;
&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/779041781413507072/TaqJsdzS_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Dan Bader (&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org?refsrc=email&amp;amp;s=11"&gt;&amp;#64;dbader_org&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org/status/872260319447580672?refsrc=email&amp;amp;s=11"&gt;6/6/17, 9:14 PM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python job scheduling made simple: &lt;a class="reference external" href="https://t.co/f28YzUHuab"&gt;schedule.readthedocs.io&lt;/a&gt; |                                   |&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>An Epic Fail Example</title><link href="https://slott56.github.io/2017_06_06-an_epic_fail_example.html" rel="alternate"></link><published>2017-06-06T08:00:00-04:00</published><updated>2017-06-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-06-06:/2017_06_06-an_epic_fail_example.html</id><summary type="html">&lt;p&gt;What's the most Epic Fail I've ever seen?&lt;/p&gt;
&lt;p&gt;I was a traveling consulting for almost 35 years. I saw a lot. I did
learn from epic fail scenarios. But. I haven't really spent a lot of
time thinking about the lessons learned there. I never have a glib
answer to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What's the most Epic Fail I've ever seen?&lt;/p&gt;
&lt;p&gt;I was a traveling consulting for almost 35 years. I saw a lot. I did
learn from epic fail scenarios. But. I haven't really spent a lot of
time thinking about the lessons learned there. I never have a glib
answer to this question. Mostly because the stories are incomplete: I
came in during a awful mess and left and it was still an awful mess. No
arc. No third act. No punchline.&lt;/p&gt;
&lt;p&gt;These aren't really stories as much as they're vignettes -- just sad
fragments of some larger tragedy. Consequently, they don't leap to front
of mind quickly.&lt;/p&gt;
&lt;p&gt;One example is a smallish company that had built some pretty cool
software in MS-Access. They had created something that was narrowly
focused on a business problem and they were clever, so it worked. And
worked well.&lt;/p&gt;
&lt;p&gt;They leveraged this success, solving another major business problem. In
MS-Access. Clever. Focused on real user's real needs. It doesn't get any
better than that.&lt;/p&gt;
&lt;p&gt;Well, of course, it does get better than that.&lt;/p&gt;
&lt;p&gt;They replicated their success seven times. Seven interlocking MS-Access
databases. They had subsumed essentially all of the company's
information and data processing. Really. It's not that hard to do.
Companies buy General Ledger software that doesn't really do very much.
You can write a perfectly serviceable ledger application yourself. (Many
people ask &amp;quot;why bother?&amp;quot;)&lt;/p&gt;
&lt;p&gt;When I talked with them they had finally been swamped by the inevitable
scalability problem. They had done all the hackarounds they could do.
Their network of MS-Access servers and interlocked cluster of databases
had reached it's limit of growth.&lt;/p&gt;
&lt;p&gt;Unsurprisingly.&lt;/p&gt;
&lt;p&gt;Questions I did not ask at the time: Who let this happen? Who closed
their eyes to the scalability problem and let this go forward? Who
avoided the idea of contingency planning? How do you back this up and
restore it to a consistent state?&lt;/p&gt;
&lt;p&gt;They were in a world of trouble. I told them what they had to do and
never saw them again. End of vignette.&lt;/p&gt;
&lt;p&gt;(In case you want to know... I told them to get a real server, install
SQL-Server, and migrate each individual MS-Access table to that central
SQL-Server database, replacing the Access table with an ODBC connection
to the central DB. This would take months. Once every single database
was expunged from MS-Access, they could start to look at a web-based
front-end to replace the Access front-end.)&lt;/p&gt;
&lt;p&gt;There are others. I'll have to ransack my brain to see if I've got other
examples.&lt;/p&gt;
</content><category term="Technologies"></category><category term="epic fail"></category><category term="database design"></category></entry><entry><title>Ancient Software and A Small Value of "Works"</title><link href="https://slott56.github.io/2017_05_30-ancient_software_and_a_small_value_of_works.html" rel="alternate"></link><published>2017-05-30T08:00:00-04:00</published><updated>2017-05-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-05-30:/2017_05_30-ancient_software_and_a_small_value_of_works.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blaming people for using ancient software is really weird.
There’s no other context where we demand constant replacement
of things that work&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Pinboard (&amp;#64;Pinboard) &lt;a class="reference external" href="https://twitter.com/Pinboard/status/863127228531519489"&gt;May 12, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm not sold about this argument at all.&lt;/p&gt;
&lt;p&gt;The &amp;quot;constant replacement&amp;quot; issue has two sides to it. If you follow
the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blaming people for using ancient software is really weird.
There’s no other context where we demand constant replacement
of things that work&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Pinboard (&amp;#64;Pinboard) &lt;a class="reference external" href="https://twitter.com/Pinboard/status/863127228531519489"&gt;May 12, 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I'm not sold about this argument at all.&lt;/p&gt;
&lt;p&gt;The &amp;quot;constant replacement&amp;quot; issue has two sides to it. If you follow
the thread, there's a certain amount of (appropriate) bashing of the
acquisitiveness that -- when exploited ruthlessly -- is a damning
indictment of capitalism. There's a lot of value in recognizing the
core capitalistic &amp;quot;buy more stuff&amp;quot; part of this.&lt;/p&gt;
&lt;p&gt;But there's more.&lt;/p&gt;
&lt;p&gt;One problem with this tweet is the threshold for &amp;quot;things that work.&amp;quot;
Consumer software tends to be rather complex. It's often fat with
features. If the feature you use aren't obviously broken, then you
can say the software &amp;quot;works.&amp;quot; But it's heavily qualified. Your
interesting feature set may be rather small when compared to the
whole.&lt;/p&gt;
&lt;p&gt;Also, the technology stack tends to be quite tall. Your consumer
software sits on top of a consumer OS and consumer-friendly
libraries. All of which have to &amp;quot;work&amp;quot; to claim that your software
&amp;quot;works.&amp;quot;&lt;/p&gt;
&lt;p&gt;As with the app, you're only using a subset of OS and runtime library
features. This wraps the threshold for &amp;quot;works&amp;quot; in more and more
layers of qualification. Smaller and smaller percentages of the code
are involved in &amp;quot;works.&amp;quot;&lt;/p&gt;
&lt;p&gt;I'd suggest there's no other context where things are quite so
complex and interdependent as software. The narrow feature set that
appears to &amp;quot;work&amp;quot; may be adjacent to numerous security flaws and bugs
and unintended consequences. The constant replacement may be
necessary bug fixes.&lt;/p&gt;
&lt;p&gt;There's more.&lt;/p&gt;
&lt;p&gt;Part of the &amp;quot;constant replacement&amp;quot; situation stems from the cost and
complexity of innovation. I think that some companies have a
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Rentier_capitalism"&gt;rentier&lt;/a&gt;
mind-set. Once the software is written, they hope to derive ongoing
revenue from the software. This doesn't happen because other
companies innovate, the product becomes obsolete. So they scramble
around trying to make money without doing too much real work.&lt;/p&gt;
&lt;p&gt;There are three scenarios where ancient software gets replaced:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A new version include bug fixes. See above; the previous version
didn't really &amp;quot;work&amp;quot; for large values of work. Blame for using
ancient software is deserved. Keeping the old security flaws is
not a virtue.&lt;/li&gt;
&lt;li&gt;A new version is incremental feature creep. This is (potentially)
rampant capitalism. Add a little something and sell the product as
&amp;quot;new and improved.&amp;quot; Keeping the old software because the new
features aren't helpful makes sense.&lt;/li&gt;
&lt;li&gt;Some businesses have a rentier mind-set. They want an ongoing
revenue stream. There aren't any material improvements. Keep the
old software. Make these people do real work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Traditional manufacturing business models rely on things wearing out.
In the world of atoms, things need to be replaced. A good product has
a long future because of parts. And Service. Possibly even
customization. I lived on a sailboat made in 1982. I've been
carefully rebuilding and replacing pieces all over the boat.&lt;/p&gt;
&lt;p&gt;A software &amp;quot;platform&amp;quot; (e.g. OS, database, etc.) can have good
long-term value. A software product, however, lives in a
hyper-competitive marketplace where improvements appear constantly.
The lazy route of non-innovative upgrades is tempting.&lt;/p&gt;
&lt;p&gt;I think that there is a place to blame people for having too low a
threshold for &amp;quot;works.&amp;quot;&lt;/p&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="architecture"></category></entry><entry><title>Python under XCode?!? Cool. Sort of.</title><link href="https://slott56.github.io/2017_05_23-python_under_xcode_cool_sort_of.html" rel="alternate"></link><published>2017-05-23T08:00:00-04:00</published><updated>2017-05-23T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-05-23:/2017_05_23-python_under_xcode_cool_sort_of.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/779041781413507072/TaqJsdzS_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Dan Bader (&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org?refsrc=email&amp;amp;s=11"&gt;&amp;#64;dbader_org&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org/status/860687313352970240?refsrc=email&amp;amp;s=11"&gt;5/5/17, 10:47 PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Running Python in Xcode: Step by Step&amp;quot;
&lt;a class="reference external" href="https://t.co/xukNX2yyu3"&gt;ericasadun.com/2016/12/04/run…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks for the link. There's a fair amount of &amp;quot;this doesn't seem to
be what Xcode was designed to do.&amp;quot; But it does seem to work.
I'll …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/779041781413507072/TaqJsdzS_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Dan Bader (&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org?refsrc=email&amp;amp;s=11"&gt;&amp;#64;dbader_org&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org/status/860687313352970240?refsrc=email&amp;amp;s=11"&gt;5/5/17, 10:47 PM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Running Python in Xcode: Step by Step&amp;quot;
&lt;a class="reference external" href="https://t.co/xukNX2yyu3"&gt;ericasadun.com/2016/12/04/run…&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks for the link. There's a fair amount of &amp;quot;this doesn't seem to
be what Xcode was designed to do.&amp;quot; But it does seem to work.
I'll stick with Komodo Edit.&lt;/p&gt;
</content><category term="Technologies"></category><category term="macosx"></category><category term="#python"></category></entry><entry><title>Needless Complexity -- Creating Havoc Leads to Mistakes</title><link href="https://slott56.github.io/2017_05_16-needless_complexity_creating_havoc_leads_to_mistakes.html" rel="alternate"></link><published>2017-05-16T08:00:00-04:00</published><updated>2017-05-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-05-16:/2017_05_16-needless_complexity_creating_havoc_leads_to_mistakes.html</id><summary type="html">&lt;p&gt;I received the worst code example ever. The. Worst.&lt;/p&gt;
&lt;p&gt;Here's the email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have hurriedly created a blog post titled [omitted] at the url
below
[also omitted]
...
Unfortunately, I am neither an algorithm expert or a Python expert.
However, I am willing to jump in.&lt;/p&gt;
&lt;p&gt;Please review the Python code …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I received the worst code example ever. The. Worst.&lt;/p&gt;
&lt;p&gt;Here's the email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have hurriedly created a blog post titled [omitted] at the url
below
[also omitted]
...
Unfortunately, I am neither an algorithm expert or a Python expert.
However, I am willing to jump in.&lt;/p&gt;
&lt;p&gt;Please review the Python code snippets. I know that they work because
I ran them using Python 2.7.6. It was the environment available on my
work PC. Speed to get something to the group so that it does not
disband outweighs spending time on environments. The goal is not to
be Pythonic but to have anyone that has written any code follow the
logic.&lt;/p&gt;
&lt;p&gt;Also, please review the logic. Somehow, I managed to get the wrong
answer. The entire blog post is a build to provide a solution to CLRS
exercise 2.3-7. My analysis gave me the answer of O( {n [log n]}**2 )
and the CLRS answer is O(n [log n] ). Where did I screw up my logic?&lt;/p&gt;
&lt;blockquote&gt;
CLRS is &lt;a class="reference external" href="https://mitpress.mit.edu/books/introduction-algorithms"&gt;https://mitpress.mit.edu/books/introduction-algorithms&lt;/a&gt;.&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;The referenced blog post is shocking. The &amp;quot;neither an algorithm
expert or a Python expert&amp;quot; is an understatement. The &amp;quot;willing to jump
in&amp;quot; is perhaps a bad thing. I sent several comments. They were all
ignored. I asked for changes a second time. That was also ignored.
Eventually, changes were made reluctantly and only after a
distressing amount of back-and-forth.&lt;/p&gt;
&lt;p&gt;Havoc was created through a process of casually misstating just about
everything that can possibly be  misstated. It transcended mere
&amp;quot;wrong&amp;quot; and enters that space where the whole thing can't even be
falsified. It was beyond simply wrong.&lt;/p&gt;
&lt;p&gt;My point here is (partially) to heap ridicule on the author. More
importantly, want to isolate a number of issues to show how simple
things can become needlessly complex and create havoc.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The definition of the problem 2.3-7 seems so straightforward.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Describe a &lt;span class="formula"&gt;Θ(&lt;i&gt;n&lt;/i&gt;log&lt;i&gt;n&lt;/i&gt;)&lt;/span&gt;-time algorithm that, given a set
&lt;span class="formula"&gt;&lt;i&gt;S&lt;/i&gt;&lt;/span&gt; of &lt;span class="formula"&gt;&lt;i&gt;n&lt;/i&gt;&lt;/span&gt; integers and another integer &lt;span class="formula"&gt;&lt;i&gt;x&lt;/i&gt;&lt;/span&gt;, determines whether or
not there exist two elements in &lt;span class="formula"&gt;&lt;i&gt;S&lt;/i&gt;&lt;/span&gt; whose sum is exactly &lt;span class="formula"&gt;&lt;i&gt;x&lt;/i&gt;&lt;/span&gt;.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This brings us to problem #1. The blog post is unable to actually
repeat the problem. Here's the quote:&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
x + y = x0
where
x ∈ N and y ∈ N for some finite set of integer values N
x0: the integer to which x and y sum
x != y&lt;/blockquote&gt;
&lt;p&gt;It's not at all clear what's going on here. What's x0? What's N? Why is x!=y even introduced?&lt;/p&gt;
&lt;p&gt;This is how havoc starts. The requirements have been restated in a way
that makes them more confusing. The original terminology was dropped
in favor of random new terminology. There's no reason for restating
the problem. The consequence of the bad restatement is to introduce
needless features and create confusion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-python-nonsense"&gt;
&lt;h2&gt;The Python Nonsense&lt;/h2&gt;
&lt;p&gt;A quote:&lt;/p&gt;
&lt;blockquote&gt;
Concepts are demonstrated via code snippets. They code snippets were
executed using Python 2.7.6. They were written in such a way that
anyone with basic coding skills could read the code. In other words,
the goal was not to be Pythonic.&lt;/blockquote&gt;
&lt;p&gt;Python 2.7.6 has been obsolete since May of 2014. At the very least,
use a current release.&lt;/p&gt;
&lt;p&gt;The goal of using Python without being Pythonic seems to be -- well
-- schizophrenic. Or it's intentional troll-bait. Hard to say.&lt;/p&gt;
&lt;p&gt;Another paragraph says this.&lt;/p&gt;
&lt;blockquote&gt;
The Python community will be annoyed because I am using Python 2
and not 3. Their annoyance is appropriate. Unfortunately, I only
have Windows machines and can't afford to screw them up at this
point in time.&lt;/blockquote&gt;
&lt;p&gt;What? That makes no sense at all. It's trivial to install Python 3.6
side-by-side with Python 2. Everyone should. Right now. I'll wait.
See &lt;a class="reference external" href="https://conda.io/docs/"&gt;https://conda.io/docs/&lt;/a&gt;. Start here: &lt;a class="reference external" href="https://conda.io/miniconda.html"&gt;https://conda.io/miniconda.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're going to insist on using the quirky and slow Python 2, you
absolutely &lt;strong&gt;must&lt;/strong&gt; use this in all of your code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from __future__ import print_function, division, absolute_import, unicode_literals
&lt;/pre&gt;
&lt;p&gt;Python 2 code without this is wrong. If you're still using Python 2,
add this to all your code, right now. Please. You'll have to fix
stuff that breaks; but we'll all thank you for it. pylint --py3k will
help you locate and fix this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code-with-a-2-10-pylint-score"&gt;
&lt;h2&gt;The code with a -2/10 pylint score&lt;/h2&gt;
&lt;p&gt;I'm trying to reproduce this faithfully. It's hard, because the
original blog post has issues with layout.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SomeIntegerList = [1, 2, 3, 4, 5, 6]
DesiredSumOfIntegers = 11
for SomeIntegerA in SomeIntegerList:
 for SomeIntegerB in SomeIntegerList:
  if SomeIntegerA == SomeIntegerB: continue
        SumOfIntegers = SomeIntegerA + SomeIntegerB
        print &amp;quot;SomeInteger A = &amp;quot;, SomeIntegerA, &amp;quot;, SomeInteger B = &amp;quot;, SomeIntegerB, &amp;quot;, Sum of Integers = &amp;quot;, SumOfIntegers
  if DesiredSumOfIntegers == SumOfIntegers:
      print &amp;quot;DesiredSumOfIntegers = &amp;quot;, DesiredSumOfIntegers, &amp;quot; was found&amp;quot;
&lt;/pre&gt;
&lt;p&gt;(The original really could not be copied and pasted to create code
that could even be parsed. I may have accidentally fixed that. I hope
not.)&lt;/p&gt;
&lt;p&gt;Almost every line of code has a problem. It gets worse, of course.
There's output in the original blog post that provides a hint as to
what's supposed to be happening here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="addition-is-commutative"&gt;
&lt;h2&gt;Addition is Commutative&lt;/h2&gt;
&lt;p&gt;Yes. There is an entire paragraph plus a spreadsheet which proves
that addition is commutative. An. Entire. Paragraph. Plus. A.
Spreadsheet.&lt;/p&gt;
&lt;p&gt;Meanwhile, factorial, multiplication, and division aren't mentioned.
Why do we need a spreadsheet to show that addition is commutative,
yet, all other operators are ignored? No clue. Moving on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="permutations"&gt;
&lt;h2&gt;Permutations&lt;/h2&gt;
&lt;p&gt;A quote:&lt;/p&gt;
&lt;blockquote&gt;
Now, let's talk about the number of computations involved in using
nested for loops to examine all the possible addition
permutations. Here I am using the term permutation as it is
strictly defined in mathematics.&lt;/blockquote&gt;
&lt;p&gt;First. The algorithm uses all combinations. &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Second. &amp;quot;as it is strictly defined in mathematics&amp;quot; should go without
saying. If you feel the need to say this, it calls the entire blog
post into question.&lt;/p&gt;
&lt;p&gt;It's like &amp;quot;honestly.&amp;quot; Anyone who has to establish their honesty with
&amp;quot;can I be honest with you?&amp;quot; is still lying.&lt;/p&gt;
&lt;p&gt;If we're being strict here, are we not being strict elsewhere? If
we're not being strict, why not?&lt;/p&gt;
&lt;p&gt;The algorithm enumerates all &lt;strong&gt;combinations&lt;/strong&gt; of n things taken 2 at
a time without replacement. For reasons that aren't clear. The
original problem statement permits replacement. The restatement of
the problem doesn't permit replacement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-n-things-taken-r-or-2-at-a-time-problem"&gt;
&lt;h2&gt;The n things taken r or 2 at a time problem&lt;/h2&gt;
&lt;p&gt;There's a table with values for &lt;span class="formula"&gt;&lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;n&lt;/i&gt;!&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;(&lt;i&gt;n&lt;/i&gt; − &lt;i&gt;r&lt;/i&gt;)!&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
No hint is given as to what this table is or why it's here.  I think
it's supposed to be because of this:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;n&lt;/i&gt;!&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;&lt;i&gt;r&lt;/i&gt;!(&lt;i&gt;n&lt;/i&gt; − &lt;i&gt;r&lt;/i&gt;)!&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="text"&gt; with &lt;/span&gt;&lt;i&gt;r&lt;/i&gt; = 2 ≡ &lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;n&lt;/i&gt;!&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;2(&lt;i&gt;n&lt;/i&gt; − 2)!&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt; ≡ &lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;n&lt;/i&gt;×(&lt;i&gt;n&lt;/i&gt; − 1)&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;2&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;It's hard to say why commutativity of addition gets a paragraph,
but this gets no explanation at all. To me, it shows a disregard
for the reader: the reader doesn't understand addition, but they
totally get factorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="another-perspective"&gt;
&lt;h2&gt;Another Perspective&lt;/h2&gt;
&lt;p&gt;A quote&lt;/p&gt;
&lt;blockquote&gt;
Another perspective is to note that the nested for loops result
in O(n^2). Clearly, the above approach is not scalable.&lt;/blockquote&gt;
&lt;p&gt;That's not &amp;quot;another perspective.&amp;quot; That's. The. Point. The entire
point of the exercise is that the brute force algorithm isn't
optimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-worst-code-snippet-ever"&gt;
&lt;h2&gt;The Worst Code Snippet Ever&lt;/h2&gt;
&lt;p&gt;This is truly and deeply shocking.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SomeIntegerList = [1, 2, 3, 4, 5, 6]
DesiredSumOfIntegers = 11
i = 0
for SomeIntegerA in SomeIntegerList:
    i = i + 1
    j = 0
 for SomeIntegerB in SomeIntegerList:
        j = j + 1
        if j &amp;gt; i:
            print &amp;quot;i = &amp;quot;, i, &amp;quot;, j = &amp;quot;, j
            SumOfIntegers = SomeIntegerA + SomeIntegerB
            print &amp;quot;SomeInteger A = &amp;quot;, SomeIntegerA, &amp;quot;, SomeInteger B = &amp;quot;, SomeIntegerB, &amp;quot;, Sum of Integers = &amp;quot;, SumOfIntegers
      if DesiredSumOfIntegers == SumOfIntegers:
          print &amp;quot;DesiredSumOfIntegers = &amp;quot;, DesiredSumOfIntegers, &amp;quot; was found&amp;quot;
&lt;/pre&gt;
&lt;p&gt;This is what drove me over the edge. This is unconscionably evil
programming. It transcends mere &amp;quot;non-Pythonic&amp;quot; and reaches a realm of
hellish havoc that can barely be understood as rational. Seriously.
This is evil incarnate.&lt;/p&gt;
&lt;p&gt;This is the most baffling complex version of a half-matrix iteration
that I think I've ever seen. I can only guess that this is written by
someone uncomfortable with thinking. They copied and pasted a block
of assembler code changing the syntax to Python. I can't discern any
way to arrive at this code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-big-o-problem"&gt;
&lt;h2&gt;The Big-O Problem&lt;/h2&gt;
&lt;p&gt;This quote:&lt;/p&gt;
&lt;blockquote&gt;
Even though the number of computations is cut in half&lt;/blockquote&gt;
&lt;p&gt;The rules for Big-O are in the cited CLRS book.&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;2&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;) = &lt;span class="textbf"&gt; O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
&lt;/div&gt;
&lt;p&gt;The &amp;quot;cut in half&amp;quot; doesn't count when describing the overall
worst-case complexity. It needs to be emphasized that &amp;quot;cut in half&amp;quot;
doesn't matter. Over and over again.&lt;/p&gt;
&lt;p&gt;This code doesn't solve the problem. It doesn't advance toward
solving the problem. And it's unreadable. Maybe it's a
counter-example? An elaborate &amp;quot;don't do this&amp;quot;?&lt;/p&gt;
&lt;p&gt;The idea of &lt;tt class="docutils literal"&gt;for i in &lt;span class="pre"&gt;range(len(S)):&lt;/span&gt; for j in range(i): ...&lt;/tt&gt; seems to
be an inescapable approach to processing the upper half of a matrix,
and it seems to be obviously &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-binary-search"&gt;
&lt;h2&gt;The Binary Search&lt;/h2&gt;
&lt;p&gt;This quote is perhaps the only thing in the entire blog post that's
not utterly wrong.&lt;/p&gt;
&lt;blockquote&gt;
we can compute the integer value that we need to find. We can than
do a search over an ordered list for the integer that we need to
find.&lt;/blockquote&gt;
&lt;p&gt;Finally. Something sensible. Followed by more really bad code.
The code starts with this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def binarySearch(alist, item):
&lt;/pre&gt;
&lt;p&gt;instead of this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from bisect import bisect
&lt;/pre&gt;
&lt;p&gt;Why does anyone try to write code when Python already provides it?
There's more code, but it's just badly formatted and has a net pylint
score that's below zero. We've seen enough.&lt;/p&gt;
&lt;p&gt;There's some further analysis that doesn't make any sense at all:&lt;/p&gt;
&lt;blockquote&gt;
Since the integers that sum must be distinct, the diagnol on the
matrix have values of N/A&lt;/blockquote&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;blockquote&gt;
Secondly, we should remove the integer that we are on from the
binary search&lt;/blockquote&gt;
&lt;p&gt;This is a consequence of the initial confusion that decided that
&lt;span class="formula"&gt;&lt;i&gt;x&lt;/i&gt; ≠ &lt;i&gt;y&lt;/i&gt;&lt;/span&gt; was somehow part of the problem. When it wasn't. These two
sentences indicate a level of profound confusion about the essential
requirements. Which leads to havoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="added-complication"&gt;
&lt;h2&gt;Added Complication&lt;/h2&gt;
&lt;p&gt;The whole story is pretty badly confused. Then this arrives.&lt;/p&gt;
&lt;blockquote&gt;
Complicate Problem by Having Integer List Not Sorted&lt;/blockquote&gt;
&lt;p&gt;It's not clear what this is or why it's here. But there it is.&lt;/p&gt;
&lt;p&gt;It leads eventually to this, which also happens to be true.&lt;/p&gt;
&lt;blockquote&gt;
The total computation complexity is O(2 * n [log n] ) = O(n [log
n] )&lt;/blockquote&gt;
&lt;p&gt;That's not bad. However. The email that asked for help claimed
&lt;tt class="docutils literal"&gt;O( {n [log &lt;span class="pre"&gt;n]}**2&lt;/span&gt; )&lt;/tt&gt;. I have no idea what the email is talking about.
Nor could I find out what any of this meant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-kicker"&gt;
&lt;h2&gt;The Kicker&lt;/h2&gt;
&lt;p&gt;The kicker is some code that solves the problem in
&lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;)&lt;/span&gt; time. Without using a set, which is interesting.&lt;/p&gt;
&lt;p&gt;This was not part of the CLRS exercise 2.3-7. I suppose it's just
there to point out something about something. Maybe it's a &amp;quot;other
people are smarter than CLRS&amp;quot;? Or maybe it's a &amp;quot;just google for
the right answer without too much thinking&amp;quot;? Hard to say.
A sentence or two of introduction might be all that's required to
see why the other result is there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned"&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;Some people like to add complexity to the problem. The &lt;span class="formula"&gt;&lt;i&gt;x&lt;/i&gt;&lt;br/&gt;&lt;i&gt;neq&lt;/i&gt;&lt;i&gt;y&lt;/i&gt;&lt;/span&gt;
business is fabricated from thin air. It adds to the code complexity,
but is clearly not part of the problem space.
This creates havoc. Simple havoc.&lt;/p&gt;
&lt;p&gt;Some people appear to act like they're asking for help. But they're
not. They may only want affirmation. A nice pat on the head. &amp;quot;Yes,
you've written a blog post.&amp;quot; Actual criticism isn't expected or
desired. This is easy to detect by the volume and vehemence of the
replies.&lt;/p&gt;
&lt;p&gt;Given a list of numbers, S, and a target, x, determine of two values
exist in the set that sum to x.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; S = [1,2,3,4,5,6]
&amp;gt;&amp;gt;&amp;gt; x=11
&amp;gt;&amp;gt;&amp;gt; [(n, x-n) for n in S if (x-n) in S]
[(5, 6), (6, 5)]
&amp;gt;&amp;gt;&amp;gt; bool([(n, x-n) for n in S if (x-n) in S])
True
&lt;/pre&gt;
&lt;p&gt;This follows directly from the analysis. It doesn't add anything new
or different. It just uses Python code rather than indented
assembler.&lt;/p&gt;
&lt;p&gt;This first example is &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)&lt;/span&gt; because the in operator is
applied to a list. We can, however, use &lt;tt class="docutils literal"&gt;bisect()&lt;/tt&gt; instead of the &lt;tt class="docutils literal"&gt;in&lt;/tt&gt;
operator.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; [(n, x-n) for n in S if S[bisect(S, (x-n))-1] == x-n]
[(5, 6), (6, 5)]
&amp;gt;&amp;gt;&amp;gt; x=13
&amp;gt;&amp;gt;&amp;gt; [(n, x-n) for n in S if S[bisect(S, (x-n))-1] == x-n]
[]
&lt;/pre&gt;
&lt;p&gt;This achieves the goal -- following the parts of the analysis that
aren't riddled with errors -- without so much nonsensical code.
This does require some explanation for what bisect(S, i) does. It's
important to note that the bisect() function returns the position at
which we should insert a new value to maintain order. It doesn't
return the location of a found item. Indeed, if the item isn't found,
it will still return a position into which a new item should be
inserted.&lt;/p&gt;
&lt;p&gt;If we want this to be &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;)&lt;/span&gt;, we can use this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; S = [1,2,3,4,5,6]
&amp;gt;&amp;gt;&amp;gt; S_set = set(S)
&amp;gt;&amp;gt;&amp;gt; x=11
&amp;gt;&amp;gt;&amp;gt; bool([(n, x-n) for n in S_set if (x-n) in S_set])
True
&lt;/pre&gt;
&lt;p&gt;This replaces the linear list with a set, &lt;tt class="docutils literal"&gt;S_set&lt;/tt&gt;.
The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(x-n)&lt;/span&gt; in S_set&lt;/tt&gt; operation is &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(1)&lt;/span&gt;, leading to the overall operation
being &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If you want to shave a little time, you can use &lt;tt class="docutils literal"&gt;any()&lt;/tt&gt; instead of
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bool([])&lt;/span&gt;&lt;/tt&gt;. If you're not returning the pairs, you can reduce it to
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;any(x-n&lt;/span&gt; in S_set for n in S_set)&lt;/tt&gt;. Try it with timeit to see what the
impact is. It's surprisingly small.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="#python"></category><category term="analysis"></category></entry><entry><title>Literate Programming Life Cycle</title><link href="https://slott56.github.io/2017_05_13-literate_programming_life_cycle.html" rel="alternate"></link><published>2017-05-13T10:11:00-04:00</published><updated>2017-05-13T10:11:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-05-13:/2017_05_13-literate_programming_life_cycle.html</id><summary type="html">&lt;p&gt;The question is a deep one. What is the Literate Programming Life
Cycle? Why is it so difficult? What are the three barriers and how do
we cross them?&lt;/p&gt;
&lt;p&gt;Here's most of the original question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Last week I threw together an F# script to parse markdown-style
text into one or …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The question is a deep one. What is the Literate Programming Life
Cycle? Why is it so difficult? What are the three barriers and how do
we cross them?&lt;/p&gt;
&lt;p&gt;Here's most of the original question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Last week I threw together an F# script to parse markdown-style
text into one or more F# files.&lt;/p&gt;
&lt;p&gt;&amp;quot;The thing is, nearly all the references I can find online talk
about the finished article, but not the design process. Obviously
for my first attempt, I necessarily had to start out by writing
the F#, then writing the document with embedded code afterwards.
But now I’ve got that working, I have difficulty working out how
the ongoing development process actually works. Currently only
having a text editor with no colour coding, then having to
‘compile’ my markdown to code, then compile my code to test it,
all seems like too much hard work, and the temptation is just hack
the code directly.&lt;/p&gt;
&lt;p&gt;&amp;quot;Given that I imagine the python development process is similar to
F#, I wondered what your experience is with the hack/test/finalise
development cycle.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="some-background"&gt;
&lt;h2&gt;Some Background&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.tug.org/TUGboat/Articles/tb13-3/childs.pdf"&gt;http://www.tug.org/TUGboat/Articles/tb13-3/childs.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, this quote from the discussion on &lt;a class="reference external" href="http://lambda-the-ultimate.org/node/3663#comment-51878"&gt;Lambda the
Ulimate&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The issue of literate programming is an issue of writing a
program
that LIVES rather than writing a program that WORKS. In a
commercial
setting you pay to train new people on programs but in an open
source setting there is no training. ...&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;... But if your program needs to live forever then you
really need literate code.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recently, I did some major overhauls of two literate programming
exercises. I revised the &lt;a class="reference external" href="http://pywebtool.sourceforge.net/"&gt;pyWeb
tool&lt;/a&gt; to better handle LaTeX
output, as well as add unit tests and -- consequently -- fix some
long-standing problems. Also, I revised the &lt;a class="reference external" href="http://cobol-dde.sourceforge.net/"&gt;COBOL
DDE&lt;/a&gt; parser to better handle
numeric data, replace the old FixedPoint module with Decimal, add
unit tests and -- of course -- fix other bugs that showed up.&lt;/p&gt;
&lt;p&gt;Based on my recent experience, I have some advice on &amp;quot;Full
Life-Cycle Literate Programming&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-life-cycle"&gt;
&lt;h2&gt;A Life Cycle&lt;/h2&gt;
&lt;p&gt;In order to identify the barriers, we need to look at the
deliverables and the software development life cycle that produces
those deliverables. Let's break the software development
life-cycle down as follows.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New Development&lt;/li&gt;
&lt;li&gt;Maintenance&lt;/li&gt;
&lt;li&gt;Adaptation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll presume that each of these efforts includes some elaboration
of requirements, some design, and some transition to operational
use. We only care about the coding part of the job, so we're not
going to dwell on all of the other activities that are part of
Application Life Cycle Management.&lt;/p&gt;
&lt;p&gt;The question is about that transition from New Development to
Maintenance or Adaptation. Doing new development seems somehow
easier than maintenance or adaptation. How do we work with an
established Literate Program?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="new-development"&gt;
&lt;h2&gt;New Development&lt;/h2&gt;
&lt;p&gt;New Development of a program is always a delicate subject. We have
an explicit goal of creating some deliverable. We'll look at the
deliverables next. First, we'll look at the conflicting forces
that must be balanced.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It must satisfy the need. There are requirements for the
program's behavior, interfaces and implementation. Above all it
must work.&lt;/li&gt;
&lt;li&gt;It must use appropriate resources. The data structures and
algorithms must reflect sensible engineering choices. There's
no call for &amp;quot;micro-optimization&amp;quot; of each silly piece of syntax.
However, the algorithm's (and data structures) should be
minimized.&lt;/li&gt;
&lt;li&gt;It must be adaptable.&lt;/li&gt;
&lt;li&gt;It must be maintainable.&lt;/li&gt;
&lt;li&gt;It must meet other organizational needs like cost,
time-to-develop, language and toolset, infrastructure
requirements, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One can maximize one at the expense of others. For instance, one
can reduce development costs to the minimum by creating a mess
that's neither adaptable nor maintainable. Indeed, one can create
software very cheaply if one starts relaxing functional
requirements. Software that doesn't work well can be very cheap to
create.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="forward-vs-reverse-literate-programming"&gt;
&lt;h2&gt;Forward vs. Reverse Literate Programming&lt;/h2&gt;
&lt;p&gt;As a digression, we'll note that some folks recognize two broad
approaches to literate programming (LP). This isn't the whole
story, however. Ordinary LP encourages the author to create a
document that contains and explains working software. A simple
tool extracts a nice final publication-ready document and working
code from the author's original source document.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.ssw.uni-linz.ac.at/Research/Projects/RevLitProg/"&gt;Reverse LP&lt;/a&gt;
is the technique used by tools like JavaDoc, Sphinx, Epydoc,
DOxygen. This usually takes the form of detailed API
documentation, but it can be richer than simply the API's. In this
case, comments in the source code are extracted to create the
final publication-ready document. In Sphinx the author uses a
mixture of source code plus external text to create final
documentation. This isn't as interesting, since the resulting
document can't easily contain the entire source.&lt;/p&gt;
&lt;p&gt;We can assign the retronym &amp;quot;Forward Literate Programming&amp;quot; to
ordinary LP to distinguish it from Reverse LP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-first-literate-programming"&gt;
&lt;h2&gt;Code-First Literate Programming&lt;/h2&gt;
&lt;p&gt;There's an apparent distinction between two variations on the
Forward LP theme: Document-First and Code-First LP. In
Document-First, we aspire to a noble ideal of writing the document
and the code from first principles, from scratch, &amp;quot;&lt;em&gt;de novo&lt;/em&gt;&amp;quot;,
starting with a blank page. The code-first approach, on the other
hand, refactors working code is into a literate programming
document.&lt;/p&gt;
&lt;p&gt;One can argue that code-first refactoring is A Bad Thing™ and
subverts the intent of literate programming. The argument is that
one should think the program through carefully, and the resulting
document should be a tidy explanation of the development of the
ideas leading to the working software.&lt;/p&gt;
&lt;p&gt;However, Knuth's analysis of &amp;quot;The original Crowther/Woods
Adventure game, Version 1.0, translated into CWEB form&amp;quot; (at
&lt;a class="reference external" href="http://www-cs-faculty.stanford.edu/~uno/programs/advent.w.gz"&gt;ADVENT&lt;/a&gt;)
shows that even ancient Fortran code can be carefully analyzed and
retro-actively transformed into a piece of literature.&lt;/p&gt;
&lt;p&gt;Working forward -- starting with a blank sheet of paper -- isn't
always the best approach. The bad ideas and dead-ends don't belong
in that explanation. All of the erasing and rewriting should be
left out of the LP document. This means that the document should
really focus on the final, working, completed code. Not the
process of arriving at the code. Why start with a blank page? Why
not start with the code?&lt;/p&gt;
&lt;p&gt;In short, code-first LP isn't &lt;em&gt;wrong&lt;/em&gt;. Indeed, it isn't even a
useful distinction. If the resulting document (a) contains the
entire source and (b) stands as piece of well-written description,
then the literate programming mandate has been satisfied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="center-of-balance"&gt;
&lt;h2&gt;Center of Balance&lt;/h2&gt;
&lt;p&gt;Literate Programming strikes a balance among the various
development forces. It emphasizes working software with abundant
documentation. It does not emphasize the short-term cost to
develop. It does, however, emphasize the long-term value that's
created.&lt;/p&gt;
&lt;p&gt;Interestingly, the idea is to minimize the labor involved in
creating and maintaining this documentation. To some folks, it
seems odd that all that writing would somehow be &amp;quot;minimal&amp;quot;.
Consider the alternative, however.&lt;/p&gt;
&lt;p&gt;We can try to create software and documentation &lt;em&gt;separately&lt;/em&gt;,
claiming it's somehow easier. First, we write the software, since
that's the only deliverable that matters. Second, we slap on some
extra documentation, since only the software really matters. While
satisfying in some respects, most folks find -- in the long run --
that this is unworkable. They often diverge.&lt;/p&gt;
&lt;p&gt;When the code and the comments disagree, probably both are
wrong.
-----------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;The goal of LP is to prevent this.&lt;/p&gt;
&lt;p&gt;Literate Programming seems like a lot of work. But it's work we
have to do anyway. And a non-literate approach is simply &lt;em&gt;more&lt;/em&gt;
work. Almost any approach that seems to create software &amp;quot;quickly&amp;quot;
doesn't create any enduring value. Why not?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-deliverables"&gt;
&lt;h2&gt;The Deliverables&lt;/h2&gt;
&lt;p&gt;The point of &lt;strong&gt;all&lt;/strong&gt; software development is to create a two-part
deliverable.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The working software&lt;/li&gt;
&lt;li&gt;Some supporting justification or reason for trusting the software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The justification can take several forms: test results, formal
proof, API Documentation (&amp;quot;Reverse Literate Programming&amp;quot;), an
explanation (separate from the code) or a Literate Programming
document.&lt;/p&gt;
&lt;p&gt;In many cases, our customers want most of the above. Folks
don't expect a formal proof, but they often demand everything
else.&lt;/p&gt;
&lt;p&gt;Claiming that the software can exist &lt;em&gt;without the supporting
justification&lt;/em&gt; is to reduce software development to a hobby.
The worst-run of amateur software development organizations do
tolerate a piece of software without a single test or scrap of
documentation. That only proves the point: if your organization
tolerates junk software without supporting documentation, it's
one of the worst-run of organizations; feel free to quit.&lt;/p&gt;
&lt;p&gt;The point of LP is to create the software (and supporting
documents) from a single LP source document. LP seeks to
&lt;em&gt;minimize&lt;/em&gt; the effort required to create software with
supporting documentation that actually matches the software.&lt;/p&gt;
&lt;p&gt;I'll emphasize that.&lt;/p&gt;
&lt;p&gt;Literate Programming seeks to minimize the effort required to
create software with supporting documentation
-----------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;If we have to produce software, tests and explanations, clearly
it is simpler to have a single source file which emits all of
that stuff in a coherent, easy-to-follow format. While it's
clearly simpler, there are some barriers to be overcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-it-s-so-much-easier"&gt;
&lt;h2&gt;If It's So Much Easier... ?&lt;/h2&gt;
&lt;p&gt;The Jon Bentley issue with LP is that it doesn't feel easier to
write a coherent document because we aren't all good writers.
Bentley notes that there are good writers and good programmers
and that some folks are not members of both sets. I think this
misses the point. We're going to produce documentation, no
matter how good a writer we are.&lt;/p&gt;
&lt;p&gt;Most people do not see LP as simpler. They see it as a lot of
work. Weirdly, it's work they already do, but they choose to
keep the program and the explanation separate from each other,
making it &lt;em&gt;more&lt;/em&gt; work to keep them in synch. I can see why they
claim it's more work.&lt;/p&gt;
&lt;p&gt;If it's easier to do this in one document, why doesn't everyone
simply create a literate program?&lt;/p&gt;
&lt;p&gt;Generally, we've got three kinds of barriers that make Literate
Programming hard. First, the tools at our disposal don't really
support an LP kind of development effort. We get very used to
intelligent syntax coloring and code folding. We find tools
which lack these features to be harder to use. Second, we're
working in multiple languages in a single document. Finally, it
takes some experience to get settled into an LP mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-tool-barrier"&gt;
&lt;h2&gt;The Tool Barrier&lt;/h2&gt;
&lt;p&gt;The first of the barriers to effective literate programming is
the tool pipeline. The complaint is that &amp;quot;having to ‘compile’
my markdown to code, then compile my code to test it, all seems
like too much hard work&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is interesting, but specious. The multi-step process is
what &lt;a class="reference external" href="http://www.scons.org/"&gt;scons&lt;/a&gt;, make,
&lt;a class="reference external" href="http://ant.apache.org/"&gt;ant&lt;/a&gt; and
&lt;a class="reference external" href="http://maven.apache.org/"&gt;maven&lt;/a&gt; are for. A simple
SConstruct file will handle web, weave, publication,
compilation and unit test in a single smooth motion.&lt;/p&gt;
&lt;p&gt;There are a lot of tools involved in literate programming.
We've introduced an additional markup language into the mix,
creating additional steps. This isn't any more complex than
working with any compiled language. We often forget that the C
compiler is really a multi-stage pipeline. Our LP tools --
similarly -- are multi-stage pipelines.&lt;/p&gt;
&lt;p&gt;Also, for Python and F# programmers, there's something else
that Seems Very Important™. It isn't. F# and Python have
console interfaces (sometimes called the Read Evaluate Print
Loop, REPL); this clutters up the problem with an irrelevant
detail. Console hacking is helpful, but it isn't literate and
it's barely programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-language-barrier"&gt;
&lt;h2&gt;The Language Barrier&lt;/h2&gt;
&lt;p&gt;In addition the tool barrier, we also have a language barrier.
When we're doing literate programming we're working in at least
three different languages concurrently. This makes our life
seem difficult.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Literate Programming Markup&lt;/strong&gt;. This might be CWEB, pyWeb
or any of a number of LP markup systems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target Document Markup&lt;/strong&gt;. This might be LaTeX, RST,
Markdown, DocBook XML or some other markup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target Programming Languages&lt;/strong&gt;. For classic, Knuth-style
projects, there's only a single language. However, for many
projects this will not be a single language. For example, in
a web environment, we'll have program source, SQL, HTML,
CSS, and possibly other languages thrown in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's difficult to sort this out from an IDE's perspective. How
to handle syntax highlighting and code coloring? How to handle
code folding and indexing the document as presented?&lt;/p&gt;
&lt;p&gt;The old-school techniques of decomposing a big document into
small sections still applies to literate programming. The
document sections do not in any way correspond with the final
program source, making the LP document tree far, far easier to
work with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-mental-barrier"&gt;
&lt;h2&gt;The Mental Barrier&lt;/h2&gt;
&lt;p&gt;The final barrier is entirely mental. This is really one of
experience and expectation.&lt;/p&gt;
&lt;p&gt;It's hard -- really hard -- to step back from the code and ask
&amp;quot;What's this &lt;em&gt;mean&lt;/em&gt;?&amp;quot; and &amp;quot;How would I explain it?&amp;quot;&lt;/p&gt;
&lt;p&gt;Too often, we see a problem, we know the code, and we
understand the fix -- as code. This is a skill as well as a
habit we build up. It's not the best habit because the meaning
and explanatory power can be ignored or misplaced.&lt;/p&gt;
&lt;p&gt;Stepping back from the code seems slow. &amp;quot;It's a one-line change
with a 10-paragraph explanation!&amp;quot; developers gripe. &amp;quot;I could
make the change now or spend hours explaining the change to
you. The value is in making the change and putting it into
production.&amp;quot;&lt;/p&gt;
&lt;p&gt;And that's potentially wrong.&lt;/p&gt;
&lt;p&gt;Only a very small part of the a developer's value is the code
change itself. If code will be in production for decades (my
personal best is 17 years in production) then the 10-paragraph
explanation will -- over the life of the software -- be worth
it's weight in gold. A one line fix may actually be a
liability, not an asset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solid-approach"&gt;
&lt;h2&gt;Solid Approach&lt;/h2&gt;
&lt;p&gt;I think the approach has to be the following.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a Spike Solution. Something that works, is
incomplete, but shows the core approach, algorithms and data
structures.&lt;/li&gt;
&lt;li&gt;Outline the next more complete solution using LP tools. The
component structure, the logical model, the basics of the
first sprint.&lt;/li&gt;
&lt;li&gt;Create a &lt;strong&gt;publication pipeline&lt;/strong&gt; to process the LP source
into document, code and tests, and run the test suite. A
kind of the Continuous Integration daily build. This is
easily a double-clickable script, or &amp;quot;tool&amp;quot; in an IDE.&lt;/li&gt;
&lt;li&gt;Fill in the code, the unit tests, and the necessary
packaging and release stuff. Follow TDD practices, writing
unit tests and code in that order. What's cool is being able
to write about them side-by-side, even though the unit tests
are kept separate from the deliverable code in the build
area.&lt;/li&gt;
&lt;li&gt;Review the final document for it's explanatory power.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Consider a number of things we do in comments that are
better done outside the comments.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;TODO lists. We often write special TODO comments. These
can go in the proper Literate Programming text, not in
the code.&lt;/li&gt;
&lt;li&gt;Code samples. In JavaDocs, particularly, sample code
isn't fun because of the volume of markup required. LP
code samples are just more code; you can make them part
of small &amp;quot;demo&amp;quot; or &amp;quot;test&amp;quot; structures that actually
compile and are actually tested. Why not?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider a number of things we don't often do well.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Background on an algorithm or data structure.
Footnotes, links, etc., are often slightly easier to
write in word-processing markup than comments in the
code.&lt;/li&gt;
&lt;li&gt;Performance information on the choice of a data
structure. Merely claiming that a HashMap is faster
isn't quite as compelling as running timeit and
including the results.&lt;/li&gt;
&lt;li&gt;Binding unit tests and code side-by-side. Current
practice keeps the unit tests well separated from
code. (Django framework models are a pleasant
exception.) What could be nicer than a method followed
by unit tests that show hot it works? You may write
the tests first, but the code-first explanation is
sometimes nicer than the test-first development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think that LP isn't all that hard, but we have three
barriers to overcome. We don't have exceptional tools.
We have a complex welter of languages. And we have bad
habits to break and transform into new habits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-links"&gt;
&lt;h2&gt;Some Links&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www-cs-faculty.stanford.edu/~uno/programs.html"&gt;http://www-cs-faculty.stanford.edu/~uno/programs.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://tex.loria.fr/english/litte.html"&gt;http://tex.loria.fr/english/litte.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://lambda-the-ultimate.org/node/3663"&gt;http://lambda-the-ultimate.org/node/3663&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://c2.com/cgi/wiki?LiterateProgramming"&gt;http://c2.com/cgi/wiki?LiterateProgramming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://vasc.ri.cmu.edu/old_help/Programming/Literate/literate.html"&gt;http://vasc.ri.cmu.edu/old_help/Programming/Literate/literate.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.desy.de/user/projects/LitProg.html"&gt;http://www.desy.de/user/projects/LitProg.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://infohost.nmt.edu/~shipman/soft/litprog/"&gt;http://infohost.nmt.edu/~shipman/soft/litprog/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.vivtek.com/litprog.html"&gt;http://www.vivtek.com/litprog.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.literateprogramming.com/"&gt;http://www.literateprogramming.com/&lt;/a&gt; - Good stuff, but not
a real wiki or forum site.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.squidoo.com/literateprogramming"&gt;http://www.squidoo.com/literateprogramming&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-tools"&gt;
&lt;h2&gt;Some Tools&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.literateprograms.org/LiteratePrograms:Welcome"&gt;http://en.literateprograms.org/LiteratePrograms:Welcome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nuweb.sourceforge.net/"&gt;http://nuweb.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pylit.berlios.de/literate-programming.html"&gt;http://pylit.berlios.de/literate-programming.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://webpages.charter.net/edreamleo/design.html"&gt;http://webpages.charter.net/edreamleo/design.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pywebtool.sourceforge.net/"&gt;http://pywebtool.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="nice-simple-blog-layout-i-will-click-through-on-y"&gt;
&lt;h2&gt;Nice simple blog layout. I will click through on y...&lt;/h2&gt;
&lt;p&gt;Maintenance Man&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-29 18:12:17.998000-04:00&lt;/p&gt;
&lt;p&gt;Nice simple blog layout. I will click through on your AdSense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-might-want-to-have-a-look-at-the-leo-programme"&gt;
&lt;h2&gt;You might want to have a look at the LEO programme...&lt;/h2&gt;
&lt;p&gt;Michael&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-29 18:10:26.404000-04:00&lt;/p&gt;
&lt;p&gt;You might want to have a look at the LEO programmer's editor
&lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;http://webpages.charter.net/edreamleo/front.html&lt;/a&gt; which is written in
Python and supports literate programming. It can be used to import
existing code in order to either document it, or to continue development
in a literate manner. The author has also written a bit about how he
uses LEO features in a very practical exposition of literate
programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nice-outline-of-a-lp-lifecycle-i-ll-try-to-us"&gt;
&lt;h2&gt;Nice outline of a LP lifecycle. I'll try to us...&lt;/h2&gt;
&lt;p&gt;Ryan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-12 18:43:40.819000-04:00&lt;/p&gt;
&lt;p&gt;Nice outline of a LP lifecycle. I'll try to use that on my next LP
project (a procedurally generated text adventure).
I was personally planning on using Sphinx with it's ability to include
external *.py files.&lt;/p&gt;
&lt;p&gt;The *.py files and *.rst files would have cross references that could
be moved between with a vim macro (that's the hope, at least).
I guess the approach I'm trying to take is a bit closer to Elucidative
Programming
[&lt;a class="reference external" href="http://www.cs.aau.dk/~normark/elucidative-programming/index.html"&gt;http://www.cs.aau.dk/~normark/elucidative-programming/index.html&lt;/a&gt;]
rather than pure Literate Programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="very-detailed-and-serious-article-i-m-absolut"&gt;
&lt;h2&gt;Very detailed and serious article, I'm absolut...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-02-14 11:22:38.368000-05:00&lt;/p&gt;
&lt;p&gt;Very detailed and serious article, I'm absolutely agree with author with
his thesises (please, exuse my English). Itried different tools (PyWeb
too), wrote 3, and now I'm developing NanoLP tool, for me it's syntax
and approach is the best (no language barrier, supports many formats
(Asciidoc, reStructuredText, TeX, HTML, XML and other) includes
OpenOffice/LibreOffice, so it can be use in WYSIWYG manner,&lt;/p&gt;
&lt;p&gt;collaborative usage - with LP libraries support, publishing on Web), and
as main for me - very light syntax, so LP program is very readable, no
weird syntax as it's usual for CWEB or other tools. It's project page
is: &lt;a class="reference external" href="http://code.google.com/p/nano-lp/"&gt;http://code.google.com/p/nano-lp/&lt;/a&gt; (me is author).&lt;/p&gt;
&lt;p&gt;What LP missed? We can compare LP tools with the best but opposite tool&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Doxygen. Doxygen is good due to its 'smart'&lt;/li&gt;
&lt;li&gt;Doxygen creates structured, classified &amp;quot;guide&amp;quot; of input sources, something like &amp;quot;map&amp;quot;
for navigation of code. So, LP can not help us to navigate (like in IDE,
or Source Navigator) in code, it looks like 2 different dimensions of
one, the same cube :) And attempts to summarize both in one text will be
terrible (for user).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="F#"></category><category term="literate programming"></category></entry><entry><title>Fizz Buzz Overthought, Project Euler #1, and Unit Tests</title><link href="https://slott56.github.io/2017_05_09-fizz_buzz_overthought_project_euler_1_and_unit_tests.html" rel="alternate"></link><published>2017-05-09T08:00:00-04:00</published><updated>2017-05-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-05-09:/2017_05_09-fizz_buzz_overthought_project_euler_1_and_unit_tests.html</id><summary type="html">&lt;p&gt;This. &lt;a class="reference external" href="http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/"&gt;http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And many other thoughts on overthinking fizz buzz. I'm going to
overthink it, also. Why not?&lt;/p&gt;
&lt;p&gt;This is a problem where the obvious unit test may not cover the cases
properly. See &lt;a class="reference external" href="https://projecteuler.net/problem=1"&gt;https://projecteuler.net/problem=1&lt;/a&gt; for a unit test case …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This. &lt;a class="reference external" href="http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/"&gt;http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And many other thoughts on overthinking fizz buzz. I'm going to
overthink it, also. Why not?&lt;/p&gt;
&lt;p&gt;This is a problem where the obvious unit test may not cover the cases
properly. See &lt;a class="reference external" href="https://projecteuler.net/problem=1"&gt;https://projecteuler.net/problem=1&lt;/a&gt; for a unit test case
with a subtle misdirection built in. I love this problem statement
deeply because the happy path is incomplete.&lt;/p&gt;
&lt;p&gt;Part of my overthinking is overthinking this as a &amp;quot;classification&amp;quot;
exercise, where we have simple classifiers that we can apply as
functions of an input value. A higher-level function (i.e., map or a
generator expression) applies all of these functions to the input.
Some match. Some don't.&lt;/p&gt;
&lt;p&gt;It shakes out like this.&lt;/p&gt;
&lt;p&gt;The core classifier is a function that requires flexible parameter
binding.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
query = lambda n, t: lambda x: t if x%n == 0 else None
&lt;/pre&gt;
&lt;p&gt;This is a two-step function definition. The outer function binds in
two parameters, n, and t. The result of this binding is the inner
function. If an argument value is a multiplier of n, return the text,
t. We can think of the result of the outer lambda as a partial
function, also, with some parameters defined, but not all.&lt;/p&gt;
&lt;p&gt;We have two concrete results of this query() function:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
fizz = query(3, 'fizz')
buzz = query(5, 'buzz')
&lt;/pre&gt;
&lt;p&gt;We've bound in a number and some text. Here's how the resulting
functions work.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; fizz(3)
'fizz'
&amp;gt;&amp;gt;&amp;gt; fizz(2)
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;trick&amp;quot; in the fizz buzz problem space is recognizing that
we're working with the power set of these two rules. There are
actually four separate conditions. This is remarkably easy to get
wrong even though the sample code may pass a unit test like the
Project Euler #1 sample data.&lt;/p&gt;
&lt;p&gt;Here's the power set that contains the complete set of all subsets
of the rules.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rule_groups = set(powerset([fizz, buzz]))
&lt;/pre&gt;
&lt;p&gt;&amp;quot;Um,&amp;quot; you say, &amp;quot;Is that necessary? And powerset() isn't built-in.&amp;quot;&lt;/p&gt;
&lt;p&gt;Try to add a third or fourth rule and the &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(2&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;)&lt;/span&gt;
growth in complexity of checking all combinations of the rules
will become readily apparent. For two rules,
&lt;span class="formula"&gt;4 = |&lt;span class="scriptfont"&gt; P&lt;/span&gt;({&lt;i&gt;q&lt;/i&gt;(3), &lt;i&gt;q&lt;/i&gt;(5)})|&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For a general set
of rules, &lt;span class="formula"&gt;&lt;i&gt;r&lt;/i&gt;&lt;/span&gt;, it's &lt;span class="formula"&gt;2&lt;sup&gt;|&lt;i&gt;r&lt;/i&gt;|&lt;/sup&gt; = |&lt;span class="scriptfont"&gt;P&lt;/span&gt;(&lt;i&gt;r&lt;/i&gt;)|&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Four rules? sixteen outcomes. It sure
seems like the power set is absolutely necessary; it describes the
domain of possible outcomes. How could it not be necessary?
Also. There's a nice definition of powerset in the &lt;tt class="docutils literal"&gt;itertools&lt;/tt&gt;
recipes section of the standard library. It's *almost*
built-in.&lt;/p&gt;
&lt;p&gt;The domain of possible responses form a power set. However, it's
also clear that we aren't &lt;strong&gt;obligated&lt;/strong&gt; to actually enumerate that
set for each value we're testing. We do need to be aware that the
complexity of the classification output is &lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(2&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt;)&lt;/span&gt;
where &lt;span class="formula"&gt;&lt;i&gt;n&lt;/i&gt;&lt;/span&gt; is the number of rules.
The processing to build each set of classifications, however, is
&lt;span class="formula"&gt;&lt;span class="textbf"&gt;O&lt;/span&gt;(&lt;i&gt;n&lt;/i&gt;)&lt;/span&gt;. Here's how it looks.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for n in range(20):
    m = set(filter(None, (r(n) for r in [fizz, buzz])))
    print(m if m else n)
&lt;/pre&gt;
&lt;p&gt;This locates the set of all matches, m. We apply the rules, fizz()
and buzz(), to the given value. The result of applying the rules
is filtered to remove falsy values. The resulting set, m, has the
values from all rules which matched. This will be one of the sets
from the power set of applying the rules to each value. The match,
&lt;span class="formula"&gt;&lt;i&gt;m&lt;/i&gt;&lt;/span&gt;, is an element of &lt;span class="formula"&gt;&lt;span class="scriptfont"&gt;P&lt;/span&gt;({&lt;i&gt;q&lt;/i&gt;(3), &lt;i&gt;q&lt;/i&gt;(5)})&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I'm delighted that Python has some support for creating partial
functions in a variety of ways. When things are complex, we can
use the &lt;strong&gt;def&lt;/strong&gt; statement. We can use functools &lt;tt class="docutils literal"&gt;partial()&lt;/tt&gt;. When
things are simple, we can even use lambdas.&lt;/p&gt;
</content><category term="Technologies"></category><category term="functional python programming"></category><category term="#python"></category></entry><entry><title>Functional Python, Literate Programming &amp; Trello Board Analysis</title><link href="https://slott56.github.io/2017_05_02-functional_python_literate_programming_trello_board_analysis.html" rel="alternate"></link><published>2017-05-02T08:00:00-04:00</published><updated>2017-05-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-05-02:/2017_05_02-functional_python_literate_programming_trello_board_analysis.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The general advice to people using Kanban/Agile Project boards of
various kinds is this:&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Stop Starting -- Start Finishing&lt;/strong&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.agilebuddha.com/agile/agile-thinking-stop-starting-start-finishing/"&gt;http://www.agilebuddha.com/agile/agile-thinking-stop-starting-start-finishing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.allaboutagile.com/stop-starting-start-finishing-unfinished-work-is-debt/"&gt;http://www.allaboutagile.com/stop-starting-start-finishing-unfinished-work-is-debt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.leanagiletraining.com/key-problems/stop-starting-start-finishing/"&gt;http://www.leanagiletraining.com/key-problems/stop-starting-start-finishing/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;etc&lt;/em&gt;.&lt;/div&gt;
&lt;div class="line"&gt;There's a lot of this advice. Some of it is helpful.&lt;/div&gt;
&lt;div class="line"&gt;Many tools …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The general advice to people using Kanban/Agile Project boards of
various kinds is this:&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Stop Starting -- Start Finishing&lt;/strong&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.agilebuddha.com/agile/agile-thinking-stop-starting-start-finishing/"&gt;http://www.agilebuddha.com/agile/agile-thinking-stop-starting-start-finishing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.allaboutagile.com/stop-starting-start-finishing-unfinished-work-is-debt/"&gt;http://www.allaboutagile.com/stop-starting-start-finishing-unfinished-work-is-debt/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.leanagiletraining.com/key-problems/stop-starting-start-finishing/"&gt;http://www.leanagiletraining.com/key-problems/stop-starting-start-finishing/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;etc&lt;/em&gt;.&lt;/div&gt;
&lt;div class="line"&gt;There's a lot of this advice. Some of it is helpful.&lt;/div&gt;
&lt;div class="line"&gt;Many tools have various dashboards and metrics computations.&lt;/div&gt;
&lt;div class="line"&gt;However.&lt;/div&gt;
&lt;div class="line"&gt;The basic velocity calculations -- starts v. finishes -- is pretty
straight-forward. The rules to classify a Trello action as &amp;quot;start&amp;quot; or
&amp;quot;finish&amp;quot; are actually nice examples of simple functions or lambdas.
Which also means that the basic pipeline required to gather the data
can be written as a lazy, functional process.&lt;/div&gt;
&lt;div class="line"&gt;Which leads to writing a Literate Programming version of a small
program that gathers data from a Trello board.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://github.com/slott56/Trello-Action-Counts"&gt;https://github.com/slott56/Trello-Action-Counts&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's a kind of deep-dive into some aspects of Python functional-style
programming. It's also a dive into Literate Programming via a longish
example. And it has a fair number of type hints. It's not perfectly
clean from MyPy-'s analysis. So there's some more to do on that front.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="literate programming"></category><category term="functional python programming"></category></entry><entry><title>Modules vs. Monoliths vs. Microservices:</title><link href="https://slott56.github.io/2017_04_25-modules_vs_monoliths_vs_microservices.html" rel="alternate"></link><published>2017-04-25T08:00:00-04:00</published><updated>2017-04-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-04-25:/2017_04_25-modules_vs_monoliths_vs_microservices.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/779041781413507072/TaqJsdzS_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Dan Bader(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org?refsrc=email&amp;amp;s=11"&gt;&amp;#64;dbader_org&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org/status/855565565485887488?refsrc=email&amp;amp;s=11"&gt;4/21/17, 7:35 PM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Worth a read: &amp;quot;Modules vs. Microservices&amp;quot; (and how to find a middle ground)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://t.co/5qrDhkSl7R"&gt;oreilly.com/ideas/modules-…&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;don't trick yourself into a microservices-only mindset&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Thanks for sharing.&lt;/p&gt;
&lt;p&gt;The referenced post gives you the freedom to have a &amp;quot;big-ish&amp;quot;
microservice. My …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/779041781413507072/TaqJsdzS_normal.jpg" /&gt;
&lt;p&gt;&lt;strong&gt;Dan Bader(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org?refsrc=email&amp;amp;s=11"&gt;&amp;#64;dbader_org&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/dbader_org/status/855565565485887488?refsrc=email&amp;amp;s=11"&gt;4/21/17, 7:35 PM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Worth a read: &amp;quot;Modules vs. Microservices&amp;quot; (and how to find a middle ground)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://t.co/5qrDhkSl7R"&gt;oreilly.com/ideas/modules-…&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;don't trick yourself into a microservices-only mindset&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Thanks for sharing.&lt;/p&gt;
&lt;p&gt;The referenced post gives you the freedom to have a &amp;quot;big-ish&amp;quot;
microservice. My current example has four very closely-related
resources. There's agony in decomposing these into separate services. So
we have several distinct Python modules bound into a single Flask
container.&lt;/p&gt;
&lt;p&gt;Yes. We lack the advertised static type checking for module boundaries.
The kind of static type checking that doesn't actually solve any actual
problems, since the issues are always semantic and can only be found
with unit tests and integration tests and Gherkin-based acceptance
testing (see Python BDD: &lt;a class="reference external" href="https://pypi.python.org/pypi/pytest-bdd"&gt;https://pypi.python.org/pypi/pytest-bdd&lt;/a&gt;
and &lt;a class="reference external" href="https://pypi.python.org/pypi/behave/1.2.5"&gt;https://pypi.python.org/pypi/behave/1.2.5&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We walk a fine line. How tightly coupled are these resources? Can they
actually be used in isolation? What do the possible future changes look
like? Where is the swagger.json going to change?&lt;/p&gt;
&lt;p&gt;It's helpful to have both options on the table.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="great"&gt;
&lt;h2&gt;great&lt;/h2&gt;
&lt;p&gt;Mary Brown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-10-09 09:50:54.913000-04:00&lt;/p&gt;
&lt;p&gt;great&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="gherkin"></category><category term="#python"></category><category term="tdd"></category></entry><entry><title>The JavaScript phenomenon is a mass psychosis</title><link href="https://slott56.github.io/2017_04_20-the_javascript_phenomenon_is_a_mass_psychosis.html" rel="alternate"></link><published>2017-04-20T08:00:00-04:00</published><updated>2017-04-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-04-20:/2017_04_20-the_javascript_phenomenon_is_a_mass_psychosis.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;richardeng/the-javascript-phenomenon-is-a-mass-psychosis-57adebb09359?source=emailShare-f2cdc4351994-1491088025"&gt;The JavaScript phenomenon is a mass
psychosis&lt;/a&gt;
by Richard Kenneth Eng&lt;/p&gt;
&lt;p&gt;Interesting read.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="javascript"></category></entry><entry><title>AWS "Serverless" Architecture Update -- Python 3.6 News</title><link href="https://slott56.github.io/2017_04_19-aws_serverless_architecture_update_python_36_news.html" rel="alternate"></link><published>2017-04-19T09:30:00-04:00</published><updated>2017-04-19T09:30:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-04-19:/2017_04_19-aws_serverless_architecture_update_python_36_news.html</id><summary type="html">&lt;p&gt;This:
&lt;a class="reference external" href="https://aws.amazon.com/about-aws/whats-new/2017/04/aws-lambda-supports-python-3-6/"&gt;https://aws.amazon.com/about-aws/whats-new/2017/04/aws-lambda-supports-python-3-6/&lt;/a&gt;
You can now use Python 3.6 Lambdas. This changes things dramatically. We
can now write faster, simpler, less quirky code using the
latest-and-greatest Python.&lt;/p&gt;
&lt;p&gt;If you want to configure a server in the cloud, consider
this: &lt;a class="reference external" href="https://wiki.ubuntu.com/Python"&gt;https://wiki.ubuntu …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This:
&lt;a class="reference external" href="https://aws.amazon.com/about-aws/whats-new/2017/04/aws-lambda-supports-python-3-6/"&gt;https://aws.amazon.com/about-aws/whats-new/2017/04/aws-lambda-supports-python-3-6/&lt;/a&gt;
You can now use Python 3.6 Lambdas. This changes things dramatically. We
can now write faster, simpler, less quirky code using the
latest-and-greatest Python.&lt;/p&gt;
&lt;p&gt;If you want to configure a server in the cloud, consider
this: &lt;a class="reference external" href="https://wiki.ubuntu.com/Python"&gt;https://wiki.ubuntu.com/Python&lt;/a&gt;. Use Ubuntu as the base image.
Faster. Cleaner. Less Quirky.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="aws"></category><category term="lambda"></category><category term="cloud"></category></entry><entry><title>Top Ten Articles from 2016</title><link href="https://slott56.github.io/2017_04_18-top_ten_articles_from_2016.html" rel="alternate"></link><published>2017-04-18T08:00:00-04:00</published><updated>2017-04-18T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-04-18:/2017_04_18-top_ten_articles_from_2016.html</id><content type="html">&lt;p&gt;This: &lt;a class="reference external" href="https://medium.mybridge.co/python-top-10-articles-for-the-past-year-v-2017-6033ae8c65c9"&gt;Python Top 10 Articles for the Past
Year (v.2017)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In particular, this: &lt;a class="reference external" href="https://eev.ee/blog/2016/07/31/python-faq-why-should-i-use-python-3/"&gt;Python FAQ: Why should I use
Python 3?&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Cool Work Environment</title><link href="https://slott56.github.io/2017_04_11-cool_work_environment.html" rel="alternate"></link><published>2017-04-11T08:00:00-04:00</published><updated>2017-04-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-04-11:/2017_04_11-cool_work_environment.html</id><content type="html">&lt;p&gt;Parts of this were shot on my floor of my building.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://apple.co/business-capital-one"&gt;http://apple.co/business-capital-one&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To find out more,
visit &lt;a class="reference external" href="https://developer.capitalone.com/community/?io=true"&gt;https://developer.capitalone.com/community/?io=true&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="apple"></category><category term="#python"></category><category term="tools"></category></entry><entry><title>Coding and "Inspiration"</title><link href="https://slott56.github.io/2017_04_04-coding_and_inspiration.html" rel="alternate"></link><published>2017-04-04T08:00:00-04:00</published><updated>2017-04-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-04-04:/2017_04_04-coding_and_inspiration.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/437332968768425984/hy1HDtPo_normal.jpeg" /&gt;
&lt;p&gt;&lt;strong&gt;Data Science Renee(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/becomingdatasci?refsrc=email&amp;amp;s=11"&gt;&amp;#64;BecomingDataSci&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/becomingdatasci/status/848262128050073601?refsrc=email&amp;amp;s=11"&gt;4/1/17, 3:53 PM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thread. Coding is inherently  frustrating. Expect that. But
with puzzle-solving healthy  attitude, keep going. Don't give up on yourself!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://t.co/8tXSQBXH7L"&gt;twitter.com/IsabellaGhemen…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This thread includes some interesting topics. What hit me was the
idea of &amp;quot;inspiration-driven coding.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Do you …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;img alt="Twitter Avater" src="https://pbs.twimg.com/profile_images/437332968768425984/hy1HDtPo_normal.jpeg" /&gt;
&lt;p&gt;&lt;strong&gt;Data Science Renee(&lt;/strong&gt;&lt;a class="reference external" href="https://twitter.com/becomingdatasci?refsrc=email&amp;amp;s=11"&gt;&amp;#64;BecomingDataSci&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/becomingdatasci/status/848262128050073601?refsrc=email&amp;amp;s=11"&gt;4/1/17, 3:53 PM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thread. Coding is inherently  frustrating. Expect that. But
with puzzle-solving healthy  attitude, keep going. Don't give up on yourself!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://t.co/8tXSQBXH7L"&gt;twitter.com/IsabellaGhemen…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This thread includes some interesting topics. What hit me was the
idea of &amp;quot;inspiration-driven coding.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Do you ever get frustrated when coding? Or is it all
inspirational?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;go into obsessive mode until I fix the problem&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is fascinating. I've been coding for -- well -- a looooong time.
I no longer recall a time when I struggled. These quotes provide some
insight into the barrier that some people find between them and a
finished project.&lt;/p&gt;
&lt;p&gt;I think that &amp;quot;hard-part-do-later&amp;quot; is bad advice. I'm a big fan of
tackling the hard part first.&lt;/p&gt;
&lt;p&gt;I find that I have to do several things to get software to work. And
I do these so often that I rarely think about doing them, so I might
be misstating what I'm &lt;strong&gt;really&lt;/strong&gt; doing. But I think this is right:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Understand the problem&lt;/strong&gt;. It helps to understand the problem
being solved. It's not essential to understand &lt;strong&gt;all&lt;/strong&gt; of the
problem. In a lot of cases, the problem is a larger-scale
&amp;quot;business&amp;quot; issue which stems from a regulatory or competitive
climate that has a very huge context including human aspirations
and the very nature of what it means to be human. In these cases,
narrowing the focus of the problem helps. Stating the problem
clearly really helps. Clarifying the context can help; but it may
involve erecting random-seeming boundaries to keep the problem
from involving too many imponderables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understand the solution&lt;/strong&gt;. This is easy to turn into glib
useless advice. But I think that one thing that really helps is to
really carefully detail what &amp;quot;success&amp;quot; means. For small things
(like functions or classes) it should be a dry, formal assertion
about the state of the variables. Without a mathematical
formalism, it's easy to get confused and write a function that
doesn't do the right thing. For larger-scale features, the
solutions pieces need pretty complete, formal descriptions of how
we know that they worked. File formats. Messages. Swagger
specifications for an API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understand the technology&lt;/strong&gt;. This can be hard. For simple
programming, the technology is the set of language constructs. For
more sophisticated programming, the technologies are the libraries
and packages available. When it comes to big data, these can be
very large and complex packages (like pandas and numpy) with lots
and lots of features. It's very easy to overlook features when
searching through documentation. For integration of components,
it's an understanding of what the various tools really do.
(Example: I'm trying to get a grip on Docker, and there are a lot
of commands that do a lot of things, and I have to be careful to
understand the difference between &amp;quot;run&amp;quot; and &amp;quot;start&amp;quot;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But how? How do we &amp;quot;understand&amp;quot; these things?&lt;/p&gt;
&lt;p&gt;I'm a big fan of writing down everything. I really like the idea
of &amp;quot;literate programming:&amp;quot; write down the problem. Write down the
overview of the solution. Write down the technologies that will be
used. Detail the coding assertions and outcomes. Detail the
components being used. Write. Write. Write.&lt;/p&gt;
&lt;p&gt;The first drafts will be all natural language. Summaries.
Overviews. Hand-wringing over alternatives and tradeoffs and
possibilities. That's okay. Writing helps. Write. Write. Write.&lt;/p&gt;
&lt;p&gt;Describe how simple it &amp;quot;should&amp;quot; be. Describe how the inputs get
transmogrified to the outputs. Fantasize.&lt;/p&gt;
&lt;p&gt;Then elaborate on the details of &amp;quot;how&amp;quot; this will get done. Confirm
the fantasy statements of how the various bits and pieces fit
together. Revise. Revise. Revise.&lt;/p&gt;
&lt;p&gt;At some point, parts will start to map to code in obvious ways.
and there will be a break from natural language to more formal
code. This may happen gradually. Or it may happen all at once.&lt;/p&gt;
&lt;p&gt;One of the best pieces of coding advice was something I saw many
years go.&lt;/p&gt;
&lt;p&gt;&amp;quot;Write all the comments first.&amp;quot;&lt;/p&gt;
&lt;p&gt;The example that followed showed a &amp;quot;wire frame&amp;quot; program that had
some declarations, but was mostly blocks of comments describing --
in vague, general ways -- what would go here eventually. I like
this approach because it allows space to think at a high level
about how things fit together as well as space to think about
details of how each individual little thing works.&lt;/p&gt;
&lt;p&gt;There's a kind of progressive filling-in-the-blanks as code
evolves into the frame.&lt;/p&gt;
&lt;div class="section" id="then-a-miracle-occurs"&gt;
&lt;h2&gt;Then A Miracle Occurs&lt;/h2&gt;
&lt;p&gt;Perhaps most important is this. Starting with wire-frame comments
and natural language narratives can lead to identification of gaps
in understanding the problem, the solution, or the technology. I
think that these conceptual gaps are where the frustration grows.&lt;/p&gt;
&lt;p&gt;This is why I think that the big problem is caused by
&amp;quot;hard-part-do-later&amp;quot; thinking. It can turn out that the &amp;quot;hard
part&amp;quot; required a miracle.&lt;/p&gt;
&lt;blockquote&gt;
There's a famous S. Harris cartoon
(visit &lt;a class="reference external" href="http://www.sciencecartoonsplus.com/pages/gallery.php"&gt;http://www.sciencecartoonsplus.com/pages/gallery.php&lt;/a&gt;)
which has the &amp;quot;then a miracle occurs&amp;quot; step in the middle of a
process.&lt;/blockquote&gt;
&lt;p&gt;A wire frame for code is a low-cost, low-investment,
low-emotional-content product. As code fills in, it may become
clear that the wire frame wasn't right. It's easier to discard a
hundred lines of comments once we realize that they're not quite
right. There's less emotional investment. It's easy to throw it
away and start again.&lt;/p&gt;
&lt;p&gt;Indeed, we may have to go through a few wireframes to be really
clear on where we think the miracle will occur. This gives us a
chance to identify the hard part of the problem.&lt;/p&gt;
&lt;p&gt;Once we've got the hard part identified, we can tackle that. It
may involve one of three kinds of deeper understanding:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Understanding the problem better,&lt;/li&gt;
&lt;li&gt;Understanding the solution in more detail, or&lt;/li&gt;
&lt;li&gt;Understanding the technology more completely.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any combination of these may be the reason why some part is
hard. We'll have to fix our understanding before we can finish.
We may as well tackle it first, since we're going to have to do
it anyway.&lt;/p&gt;
&lt;p&gt;It's best to look for alternatives before we've written too much
code. There's an emotional commitment to code, even if it doesn't
work right. It's hard to throw code away. Therefore, stall as long
as possible. Solve the hard parts. Commit to code last.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="architecture"></category></entry><entry><title>Linked-in Learning: Migrating from Python 2.7 to Python 3</title><link href="https://slott56.github.io/2017_03_28-linked_in_learning_migrating_from_python_27_to_python_3.html" rel="alternate"></link><published>2017-03-28T08:00:00-04:00</published><updated>2017-03-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-03-28:/2017_03_28-linked_in_learning_migrating_from_python_27_to_python_3.html</id><summary type="html">&lt;p&gt;Migrating from Python 2.7 to Python 3
with: Steven Lott
...is now available on LinkedIn Learning:
&lt;a class="reference external" href="https://www.linkedin.com/learning/migrating-from-python-2-7-to-python-3"&gt;https://www.linkedin.com/learning/migrating-from-python-2-7-to-python-3&lt;/a&gt;
and on Lynda.com:
&lt;a class="reference external" href="https://www.lynda.com/Python-tutorials/Migrating-from-Python-2-7-Python-3/560887-2.html"&gt;https://www.lynda.com/Python-tutorials/Migrating-from-Python-2-7-Python-3/560887-2.html&lt;/a&gt;
Course Description:
Are you still using Python 2.7? If you've been meaning to make …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Migrating from Python 2.7 to Python 3
with: Steven Lott
...is now available on LinkedIn Learning:
&lt;a class="reference external" href="https://www.linkedin.com/learning/migrating-from-python-2-7-to-python-3"&gt;https://www.linkedin.com/learning/migrating-from-python-2-7-to-python-3&lt;/a&gt;
and on Lynda.com:
&lt;a class="reference external" href="https://www.lynda.com/Python-tutorials/Migrating-from-Python-2-7-Python-3/560887-2.html"&gt;https://www.lynda.com/Python-tutorials/Migrating-from-Python-2-7-Python-3/560887-2.html&lt;/a&gt;
Course Description:
Are you still using Python 2.7? If you've been meaning to make the jump
to Python 3, but aren't entirely sure what's different in the latest
version of this popular language—or how to migrate your code—then this
course is for you. Instructor Steven Lott illuminates the differences
between the two Python versions, going over elements such as changes to
built-in Python functions and the Python standard library. He also walks
through a number of ways to convert your Python 2.7 applications to
Python 3, showing how to use packages like six, future, and 2to3. Along
the way, Steven shares his own experiences with this transition, and
offers helpful suggestions for enhancing the overall quality and
performance of your code.
Topics Include:
Reviewing the differences between the two versions
Reviewing the syntax changes introduced with Python 3
Understanding the changes to built-in functions
Reviewing the most important changes to the Python standard library
Understanding which tools are required to migrate from Python 2.7 to
Python 3
Using six to handle class definitions
Using six with standard library changes
Using future
Making syntax changes and class changes with futurize
Using 2to3 or modernize
Duration:
2h 40m&lt;/p&gt;
</content><category term="Technologies"></category><category term="continuous migration"></category><category term="#python"></category></entry><entry><title>Simple CSV Transformations</title><link href="https://slott56.github.io/2017_03_19-simple_csv_transformations.html" rel="alternate"></link><published>2017-03-19T07:07:00-04:00</published><updated>2017-03-19T07:07:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-03-19:/2017_03_19-simple_csv_transformations.html</id><summary type="html">&lt;p&gt;Here's an interesting question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I came across your blog post &amp;quot;&lt;a class="reference external" href="https://github.com/slott56/introduction-python-csv"&gt;Introduction to using Python to
process CSV
files&lt;/a&gt;&amp;quot; as I'm
looking to do something I'd &lt;em&gt;think&lt;/em&gt; is easy in Python but I don't
know how to do it.&lt;/p&gt;
&lt;p&gt;I simply want to examine a column then create a new column …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Here's an interesting question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I came across your blog post &amp;quot;&lt;a class="reference external" href="https://github.com/slott56/introduction-python-csv"&gt;Introduction to using Python to
process CSV
files&lt;/a&gt;&amp;quot; as I'm
looking to do something I'd &lt;em&gt;think&lt;/em&gt; is easy in Python but I don't
know how to do it.&lt;/p&gt;
&lt;p&gt;I simply want to examine a column then create a new column based on
an if-then on the original column. So if my CSV has a &amp;quot;gender&amp;quot; field
I'd like to do the Python equivalent of this SQL statement:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
case when gender = 'M' then 1 else 0 end as gender_m, case when
gender = 'F' then 1 else 0 end as gender_f,...
&lt;/pre&gt;
&lt;p&gt;I can do it in Pandas but my CSVs are too big and I run into memory
issues.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a number of ways to tackle this.&lt;/p&gt;
&lt;p&gt;First -- and foremost -- this is almost always just one step in a much
longer and more complex set of operations. It's a little misleading to
read-and-write a CSV file to do this.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;little&lt;/strong&gt; misleading.&lt;/p&gt;
&lt;p&gt;It's not wrong to write a file with expanded data. But the
&amp;quot;incrementally write new files&amp;quot; process can become rather complex. If
we have a large number of transformations, we can wind up with many
individual file-expansion steps. These things often grow organically
and can get out of control. A complex set of steps should probably be
collapsed into a single program that handles all of the expansions at
once.&lt;/p&gt;
&lt;p&gt;This kind of file-expansion is simple and fast. It can open a door
previously closed by the in-memory problem  of trying to do the entire
thing in pandas.&lt;/p&gt;
&lt;p&gt;The general outline looks like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from pathlib import Path
import csv
source_path = Path(&amp;quot;some_file.csv&amp;quot;)
target_path = Path(source_path.stem + &amp;quot;_1&amp;quot;).with_suffix('.csv')

def transform(row):
    return row

with source_path.open() as source_file:
    with target_path.open('w', newline='') as target_file:
        reader = csv.DictReader(source_file)
        columns =  reader.fieldnames + ['gender_m', 'gender_f']
        writer = csv.DictWriter(target_file, columns)
        writer.writeheader()
        for row in reader:
            new_row = transform(row)
            writer.writerow(new_row)
&lt;/pre&gt;
&lt;p&gt;The goal is to be able put some meaningful transformation processing
in place of the build new_row comment.&lt;/p&gt;
&lt;p&gt;The overall approach is this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects to refer to the relevant files.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;with&lt;/tt&gt;-statement context managers to handle the open files. This
assures that the files are always properly closed no matter what kinds
of exceptions are raised.&lt;/li&gt;
&lt;li&gt;Create a dictionary-based reader for the input.  Add the additional
columns and create a dictionary-based writer for the output. This
allows the processing to work with each row of data as a dictionary.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This presumes that the data file actually has a single row of heading
information with column names.&lt;/p&gt;
&lt;p&gt;If column names are missing, then a fieldnames attribute can be
provided when creating the DictReader(), like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
csv.DictReader(source_file, ['field', 'field', ...]).
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;for&lt;/strong&gt; statement works because a csv Reader is an iterator over
each row of data.&lt;/p&gt;
&lt;p&gt;I've omitted any definition of the transformational function. Right
now, it just returns each row unmodified. We'd really like it to do
some useful work.&lt;/p&gt;
&lt;div class="section" id="building-the-new-row"&gt;
&lt;h2&gt;Building The New Row&lt;/h2&gt;
&lt;p&gt;The transformation function needs to build a new row from an existing
row.&lt;/p&gt;
&lt;p&gt;Each row will be a Python dictionary. A dictionary is a mutable
object. We aren't &lt;strong&gt;really&lt;/strong&gt; building a completely new object --
that's a waste of memory. We'll modify the row object, and return it
anyway. It will involve a microscopic redundancy of creating two
references to the same dictionary object, one known by the variable
name row and the other know by new_row.&lt;/p&gt;
&lt;p&gt;Here's an example body for transform()&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def transform(row):
    row['gender_m'] = 1 if row['gender'] == 'M' else 0
    row['gender_f'] = 1 if row['gender'] == 'F' else 0
    return row
&lt;/pre&gt;
&lt;p&gt;This will build two new keys in the row dictionary. The exact two keys
added to the fieldnames to write a new file.&lt;/p&gt;
&lt;p&gt;Each key be associated with a value computed by a simple expression.
In this case, the logical if-else operator is used to map a boolean
value, row['gender'] == 'M', to one of two integer values, 1 or 0.&lt;/p&gt;
&lt;p&gt;If this is confusing -- and it can be -- this can also be done with if
statements instead of expressions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def transform(row):
    if row['gender'] == 'M':
        row['gender_m'] = 1
    else:
        row['gender_m'] = 0
    row['gender_f'] = 1 if row['gender'] == 'F' else 0
    return row
&lt;/pre&gt;
&lt;p&gt;I only rewrite the 'M' case. I'll leave the rewrite of the 'F' case to
the reader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="faster-processing-with-a-generator"&gt;
&lt;h2&gt;Faster Processing with a Generator&lt;/h2&gt;
&lt;p&gt;We can simplify the body of the script slightly. This will make it
work a hair faster. The following statements involve a little bit of
needless overhead.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for row in reader:
    new_row = transform(row)
    writer.writerow(new_row)
&lt;/pre&gt;
&lt;p&gt;We can change this as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
writer.writerows(transform(row) for row in reader)
&lt;/pre&gt;
&lt;p&gt;This uses a generator expression, transform(row) for row in reader, to
build individually transformed rows from a source of data. This
doesn't involve executing two statements for each row of data.
Therefore, it's faster.&lt;/p&gt;
&lt;p&gt;We can also reframe it like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
writer.writerows(map(transform, reader))
&lt;/pre&gt;
&lt;p&gt;In this example, we've replaced the generator expression with the
map() function. This applies the transform() function to each row
available in the reader.&lt;/p&gt;
&lt;p&gt;In both cases, the writer.writerows() consumes the data produced by
the generator expression or the map() function to create the output
file.&lt;/p&gt;
&lt;p&gt;The idea is that we can make the transform() function as complex as we
need. We just have to be sure that all the new field names are handled
properly when creating the writer object.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="your-article-on-data-science-is-very-interesting-t"&gt;
&lt;h2&gt;your article on data science is very interesting t...&lt;/h2&gt;
&lt;p&gt;Komal&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-30 01:18:55.687000-04:00&lt;/p&gt;
&lt;p&gt;your article on data science is very interesting thank you so much.
&lt;a class="reference external" href="https://aditidigitalsolutions.com/data-science-training-hyderabad?ref=gmb/"&gt;Data Science Training in
Hyderabad&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you-for-the-valuable-information-giving-on-d"&gt;
&lt;h2&gt;thank you for the valuable information giving on d...&lt;/h2&gt;
&lt;p&gt;Aditi Digital Solutions&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-30 01:17:36.825000-04:00&lt;/p&gt;
&lt;p&gt;thank you for the valuable information giving on data science it is very
helpful.
&lt;a class="reference external" href="https://aditidigitalsolutions.com/data-science-training-hyderabad?ref=gmb/"&gt;Data Science Training in
Hyderabad&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="csv"></category><category term="#python"></category></entry><entry><title>Strange "I Hate Python" Concerns. Mostly nonsensical.</title><link href="https://slott56.github.io/2017_03_14-strange_i_hate_python_concerns_mostly_nonsensical.html" rel="alternate"></link><published>2017-03-14T08:00:00-04:00</published><updated>2017-03-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-03-14:/2017_03_14-strange_i_hate_python_concerns_mostly_nonsensical.html</id><summary type="html">&lt;p&gt;rom a troll-bait thread asking the argumentative question &amp;quot;why do
people use Python&amp;quot;? The answers were, oddly, a long list of strange,
nonsensical complaints. And a few logical fallacies. Here are all the
ones I could parse:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&amp;quot;It's the FORTRAN of our times.&amp;quot;&lt;/li&gt;
&lt;li&gt;It's the COBOL of our times.&lt;/li&gt;
&lt;li&gt;&amp;quot;deep …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;rom a troll-bait thread asking the argumentative question &amp;quot;why do
people use Python&amp;quot;? The answers were, oddly, a long list of strange,
nonsensical complaints. And a few logical fallacies. Here are all the
ones I could parse:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&amp;quot;It's the FORTRAN of our times.&amp;quot;&lt;/li&gt;
&lt;li&gt;It's the COBOL of our times.&lt;/li&gt;
&lt;li&gt;&amp;quot;deep seated aversion to languages where whitespace has fundamental
syntactic significance&amp;quot;.&lt;/li&gt;
&lt;li&gt;&amp;quot;And also where the simplest &amp;quot;Hello world!&amp;quot; program is busted between
v2 and v3 (true story)&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;My stomach turns in a knot at the introduction of EVERY trendy language&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;I am almost always focused on productization qualities such as
maintainability, performance, and any number of other &amp;quot;-ilities&amp;quot;.&amp;quot;&lt;/li&gt;
&lt;li&gt;Nobody [cares] about Your language unless You can produce executable&lt;/li&gt;
&lt;li&gt;&amp;quot;It's ghastly. The Python Tools for Visual Studio eases the pain with
a full symbolic/visual debugger but still...&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;the socialist theme of universities leads to preference for open
source and &amp;quot;free&amp;quot; over professionally developed and maintained
tools... Meanwhile I really like JavaScript as a free wheeling
scripting language.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Python ... is an inferior language. I can trust a well-engineered
JavaScript system.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;it's worse than fortran because it has a dedicated following&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;my indictment is maintainability once productized. I always have a
fear of building legacy packages that, once a mountain is built and
is difficult to move, that people of the future will curse my name&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;rationally, the continuing investment in the Node/TypeScript
infrastructure places JavaScript in an entirely different
infrastructure realm than Python&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Python doesn't have its equivalent of Node.js&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;as a LANGUAGE JavaScript has great infrastructure across device
types, OS brands, and across every level of scale now imaginable&amp;quot;&lt;/li&gt;
&lt;li&gt;Four separate reasoning-by-analogy: Lisp, FoxPro, PHP, and Perl.
(e.g., &amp;quot;Amazon did amazing things with perl.&amp;quot;) Somehow a failure
involving these languages (or ecosystems or whatever) indicts Python
because they're all &amp;quot;trendy&amp;quot; (I think.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yes. There were others that made less sense. I've omitted them.
TL;DR: These people don't seem to know what they're talking about.
The posts are universally fact-free, so we're just listening to folks
rambling randomly about Python.&lt;/p&gt;
&lt;p&gt;Some responses. Feel free to use these when someone asks you why
you're still using Python.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;That makes no sense&lt;/li&gt;
&lt;li&gt;That makes no sense&lt;/li&gt;
&lt;li&gt;The languages which are totally free of whitespace appear to be C and maybe C++. This principle rules out JavaScript, since the ASI rules involve wrangling &amp;quot;;&amp;quot; in place of the evil whitespace.&lt;/li&gt;
&lt;li&gt;This is a weird complaint. Stuff changed. How is that a problem?
Are you saying change is a problem? What's this then?
&lt;a class="reference external" href="https://kangax.github.io/compat-table/es5/"&gt;https://kangax.github.io/compat-table/es5/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Trendy is a problem? Really?&lt;/li&gt;
&lt;li&gt;Who isn't focused on quality attributes?&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.python-guide.org/en/latest/shipping/freezing/"&gt;http://docs.python-guide.org/en/latest/shipping/freezing/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;What does &amp;quot;ghastly&amp;quot; mean?&lt;/li&gt;
&lt;li&gt;What's a &amp;quot;socialist theme&amp;quot;? How is JavaScript &amp;quot;free-wheeling&amp;quot;? What does that even mean?&lt;/li&gt;
&lt;li&gt;What is &amp;quot;inferior&amp;quot; being measured? Alphabetically? (Python comes
after Javascript, so it's in an inferior position alphabetically?)&lt;/li&gt;
&lt;li&gt;How is a dedicated following a problem?&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypl.github.io/PYPL.html"&gt;http://pypl.github.io/PYPL.html&lt;/a&gt; Python is second to Java.&lt;/li&gt;
&lt;li&gt;&amp;quot;continuing investment&amp;quot;? By whom? And how does this &amp;quot;investment&amp;quot;
compare with Python?&lt;/li&gt;
&lt;li&gt;What's wrong with &lt;a class="reference external" href="https://twistedmatrix.com/trac/"&gt;twisted&lt;/a&gt;,
&lt;a class="reference external" href="http://www.tornadoweb.org/en/stable/"&gt;tornado&lt;/a&gt;,
&lt;a class="reference external" href="http://gunicorn.org/"&gt;Gunicorn&lt;/a&gt;, and
&lt;a class="reference external" href="https://www.fullstackpython.com/nginx.html"&gt;Nginx&lt;/a&gt;? Don't they count?&lt;/li&gt;
&lt;li&gt;Python is available more-or-less everywhere. Without a specific
coverage gap, this makes no sense.&lt;/li&gt;
&lt;li&gt;Also known as the False Equivalence fallacy. Without details of
the failure mode, equivalence with Python isn't established.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Omitted is a random discussion on how Ruby is &amp;quot;rigorously
defined&amp;quot;. The implication seems to be that Python somehow might
not be rigorously defined or something. It's not clear what the
sub-thread was about, so I ignored it.&lt;/p&gt;
&lt;p&gt;This thread seemed to involve two kinds of complaints:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Utter nonsense.&lt;/li&gt;
&lt;li&gt;Lies that are pretty east to refute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there's
this: &lt;a class="reference external" href="https://medium.freecodecamp.com/million-requests-per-second-with-python-95c137af319"&gt;https://medium.freecodecamp.com/million-requests-per-second-with-python-95c137af319&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Chain of Command Example</title><link href="https://slott56.github.io/2017_03_07-chain_of_command_example.html" rel="alternate"></link><published>2017-03-07T08:00:00-05:00</published><updated>2017-03-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-03-07:/2017_03_07-chain_of_command_example.html</id><summary type="html">&lt;p&gt;One objective of the &lt;strong&gt;Chain of Command&lt;/strong&gt; design pattern is to be
able to write a bunch of functions that link together. The form a
chain of alternative implementations. The idea is the have
alternatives that vary in their ability to compute a correct answer.
If algorithm 1 doesn’t …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One objective of the &lt;strong&gt;Chain of Command&lt;/strong&gt; design pattern is to be
able to write a bunch of functions that link together. The form a
chain of alternative implementations. The idea is the have
alternatives that vary in their ability to compute a correct answer.
If algorithm 1 doesn’t work, try algorithm 2. If that doesn’t work,
fall back to algorithm 3, etc.&lt;/p&gt;
&lt;p&gt;Perhaps algorithm 1 has a number of constrains: it's fast, but only
for a limited kind of input. Algorithm 2 may have a different set of
constraints. And Algorithm 3 involves the &amp;quot;British Museum&amp;quot; algorithm.
Algorithm zero, at the head of the chain, can be a dynamic cache,
perhaps with LRU features. Maybe it can be shared among servers.
There are lots of choices here. The idea is that a cache is often
first because it's so fast.&lt;/p&gt;
&lt;p&gt;We can, of course, write a giant master function with other
functions. Maybe they're all linked with a lot of clever
if-statements. We know how that turns out, don't we?&lt;/p&gt;
&lt;p&gt;Instead, we can make each function a distinct object. The alternative
algorithm functions have a relationship with other functions, so a
simple non-stateful class definition is appropriate. The cache
alternative may involve state changes, so it’s a little different
than the others.&lt;/p&gt;
&lt;p&gt;We'll imagine a simple doTheThing() function with a few arguments
that returns a value. We have several alternatives. The goal to be
able to wrap each doTheThing() function in a very small class like
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class AlgorithmOne(DoAThing):
    &amp;quot;&amp;quot;&amp;quot;One way to do it.&amp;quot;&amp;quot;&amp;quot;
    def doTheThing(self, arg1, arg2):
        # Check some constraints, maybe...
        if arg1 &amp;lt; arg2:
            return Fraction(arg1, arg2)
        else:
            raise DoAThingError(&amp;quot;Outside AlgorithmOne Constraints&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Either this algorithm produces a good answer, or it raises an
exception that it can’t really do the thing. Any other exceptions are
ordinary bad code crashing at run time.&lt;/p&gt;
&lt;p&gt;The core feature of the abstract superclass is the
all-important try:/except: block that tries doTheThing(). If the
DoAThingError exception is raised, it moves down the chain of
command. If it succeeds, then, we're done.&lt;/p&gt;
&lt;p&gt;This has a consequence of wrapping the doTheThing() implementation
with a function named theThing(). The wrapper function, theThing(),
contains the try:/except: block, a call to a concrete doTheThing()
implementation, plus the fall-back processing.&lt;/p&gt;
&lt;p&gt;The cache version doesn't really have a meaningful implementation of
the theThing() function. Instead it always tries the fallback chain
and caches the result.&lt;/p&gt;
&lt;p&gt;A cool way to build the chain is omitted from this design. We're
creating a linked list like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
a2 = AlgorithmTwo()
a1 = AlgorithmOne(a2)
coc = UseCache(a1)
&lt;/pre&gt;
&lt;p&gt;Some people object to the &amp;quot;backwardness&amp;quot; of this. In which case, they
can write a simple constructor function which emits the chain of
command by linking the things together in the proper order.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def builder(*classes):
    previous = None
    for class_ in classes:
        next = class_(previous)
        previous = next
    return previous
&lt;/pre&gt;
&lt;p&gt;I'm not sure it's essential. But it's simple.
Here's the whole show.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;Chain of command.&amp;quot;&amp;quot;&amp;quot;
from fractions import Fraction
import pickle

class DoAThingError(Exception):
    pass

class DoAThing:
    &amp;quot;&amp;quot;&amp;quot;Abstract superclass.&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, fall_back=None):
        self.fall_back = fall_back

    def theThing(self, arg1, arg2):
        try:
            return self.doTheThing(arg1, arg2)
        except DoAThingError:
            if self.fall_back:
                return self.fall_back.theThing(arg1, arg2)

    def doTheThing(self, arg1, arg2):
        raise DoAThingError(&amp;quot;Not Implemented&amp;quot;)

class UseCache(DoAThing):
    &amp;quot;&amp;quot;&amp;quot;Is the answer in cache? Cache is dynamic and grows quickly.
    There's no LRU.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.cache = {}

    def load(self, openFile):
        self.cache = pickle.load(openFile)

    def dump(self, openFile):
        pickle.dump(self.cache, openFile)

    def theThing(self, arg1, arg2):
        if (arg1, arg2) not in self.cache:
            self.cache[arg1, arg2] = self.fall_back.theThing(arg1, arg2)
        return self.cache[arg1, arg2]

class AlgorithmOne(DoAThing):
    &amp;quot;&amp;quot;&amp;quot;One way to do it.&amp;quot;&amp;quot;&amp;quot;
    def doTheThing(self, arg1, arg2):
        # Check some constraints, maybe...
        if arg1 &amp;lt; arg2:
            return Fraction(arg1, arg2)
        else:
            raise DoAThingError(&amp;quot;Outside AlgorithmOne Constraints&amp;quot;)

class AlgorithmTwo(DoAThing):
    &amp;quot;&amp;quot;&amp;quot;Another way to do it.&amp;quot;&amp;quot;&amp;quot;
    def doTheThing(self, arg1, arg2):
        return arg1/arg2


a2 = AlgorithmTwo()
a1 = AlgorithmOne(a2)
coc = UseCache(a1)

print(coc.theThing(1,2))
print(coc.theThing(2,1))
print(coc.cache)
&lt;/pre&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category></entry><entry><title>Open roles. Want to do more Python? Call us.</title><link href="https://slott56.github.io/2017_03_02-open_roles_want_to_do_more_python_call_us.html" rel="alternate"></link><published>2017-03-02T20:35:00-05:00</published><updated>2017-03-02T20:35:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-03-02:/2017_03_02-open_roles_want_to_do_more_python_call_us.html</id><content type="html">&lt;p&gt;Cloud/DevOps Engineer&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://capitalone.wd1.myworkdayjobs.com/Capital_One/job/Vienna-VA/Senior-Software-Engineer-DevOps_R19760-1"&gt;https://capitalone.wd1.myworkdayjobs.com/Capital_One/job/Vienna-VA/Senior-Software-Engineer-DevOps_R19760-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Polyglot Software Engineer&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://capitalone.wd1.myworkdayjobs.com/Capital_One/job/Vienna-VA/Senior-Software-Engineer-Polyglot_R19761-1"&gt;https://capitalone.wd1.myworkdayjobs.com/Capital_One/job/Vienna-VA/Senior-Software-Engineer-Polyglot_R19761-1&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="python"></category><category term="CapitalOne Jobs"></category></entry><entry><title>Intro to Python CSV Processing for Actual Beginners</title><link href="https://slott56.github.io/2017_02_21-intro_to_python_csv_processing_for_actual_beginners.html" rel="alternate"></link><published>2017-02-21T07:37:00-05:00</published><updated>2017-02-21T07:37:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-02-21:/2017_02_21-intro_to_python_csv_processing_for_actual_beginners.html</id><summary type="html">&lt;p&gt;I've written a lot about CSV processing. Here are some
examples {tag}csv.&lt;/p&gt;
&lt;p&gt;It crops up in my books. A lot.&lt;/p&gt;
&lt;p&gt;In all cases, though, I make the implicit assumption that my readers
already know a lot of Python. This is a disservice to anyone who's
getting started.&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting Started …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I've written a lot about CSV processing. Here are some
examples {tag}csv.&lt;/p&gt;
&lt;p&gt;It crops up in my books. A lot.&lt;/p&gt;
&lt;p&gt;In all cases, though, I make the implicit assumption that my readers
already know a lot of Python. This is a disservice to anyone who's
getting started.&lt;/p&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;You'll need Python 3.6. Nothing else will do if you're starting out.&lt;/p&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;https://www.continuum.io/downloads&lt;/a&gt; and get Python 3.6. You can
get the small &amp;quot;miniconda&amp;quot; version to start with. It has some of what
you'll need to hack around with CSV files. The full Anaconda version
contains a mountain of cool stuff, but it's a big download.&lt;/p&gt;
&lt;p&gt;Once you have Python installed, what next? To be sure things are
running do this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Find a command line prompt (terminal window, cmd.exe, whatever it's
called on your OS.)&lt;/li&gt;
&lt;li&gt;Enter python3.6 (or just &lt;strong&gt;python&lt;/strong&gt; in Windows.)&lt;/li&gt;
&lt;li&gt;If Anaconda installed everything properly, you'll have an interaction
that looks like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
MacBookPro-SLott:Python2v3 slott$ python3.5
Python 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;More-or-less. (Yes, the example shows 3.5.1 even though I said you
should get 3.6. As soon as the Lynda.com course drops, I'll upgrade.
The differences between 3.5 and 3.6 are almost invisible.)&lt;/p&gt;
&lt;p&gt;Here's your first interaction.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; 355/113
3.1415929203539825
&lt;/pre&gt;
&lt;p&gt;Yep. Python did math. Stuff is happening.&lt;/p&gt;
&lt;p&gt;Here's some more.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; exit
Use exit() or Ctrl-D (i.e. EOF) to exit
&amp;gt;&amp;gt;&amp;gt; exit()
&lt;/pre&gt;
&lt;p&gt;Okay. That was fun. But it's not data wrangling. When do we get to
the good stuff?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-script-or-not-to-script"&gt;
&lt;h2&gt;To Script or Not To Script&lt;/h2&gt;
&lt;p&gt;We have two paths when it comes to scripting. You can write script
files and run them. This is pretty normal application development
stuff. It works well.&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;You can use a Jupyter Notebook. This isn't exactly a script. But. You
can use it like a script. It's a good place to start building some
code that's useful. You can rerun some (or all) of the notebook to
make it script-like.&lt;/p&gt;
&lt;p&gt;If you downloaded Anaconda, you have Jupyter. Done. Skip over the
next part on installing Jupyter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-jupyter"&gt;
&lt;h2&gt;Installing Jupyter&lt;/h2&gt;
&lt;p&gt;If you did not download the full Anaconda -- perhaps because you used
the miniconda -- you'll need to add Jupyter.  You can use the command
conda install jupyter for this.&lt;/p&gt;
&lt;p&gt;Another choice is to use the PIP program to install jupyter. The net
effect is the same. It starts like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
MacBookPro-SLott:Python2v3 slott$ pip3 install jupyter
Collecting jupyter
  Downloading jupyter-1.0.0-py2.py3-none-any.whl

Collecting ipykernel (from jupyter)
  Downloading ipykernel-4.5.2-py2.py3-none-any.whl (98kB)
    100% \|████████████████████████████████\| 102kB 1.3MB/s
&lt;/pre&gt;
&lt;p&gt;It ends like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Downloading pyparsing-2.1.10-py2.py3-none-any.whl (56kB)
    100% \|████████████████████████████████\| 61kB 2.1MB/s

Installing collected packages: ipython-genutils, decorator,
traitlets, appnope, appdirs, pyparsing, packaging, setuptools,
ptyprocess, pexpect, simplegeneric, wcwidth, prompt-toolkit,
pickleshare, ipython, jupyter-core, pyzmq, jupyter-client,
tornado, ipykernel, qtconsole, terminado, nbformat, entrypoints,
mistune, pandocfilters, testpath, bleach, nbconvert, notebook,
widgetsnbextension, ipywidgets, jupyter-console, jupyter

  Found existing installation: setuptools 18.2
    Uninstalling setuptools-18.2:
      Successfully uninstalled setuptools-18.2
  Running setup.py install for simplegeneric ... done
  Running setup.py install for tornado ... done
  Running setup.py install for terminado ... done
  Running setup.py install for pandocfilters ... done
Successfully installed appdirs-1.4.0 appnope-0.1.0 bleach-1.5.0
decorator-4.0.11 entrypoints-0.2.2 ipykernel-4.5.2 ipython-5.2.2
ipython-genutils-0.1.0 ipywidgets-5.2.2 jupyter-1.0.0
jupyter-client-4.4.0 jupyter-console-5.1.0 jupyter-core-4.2.1
mistune-0.7.3 nbconvert-5.1.1 nbformat-4.2.0 notebook-4.4.1
packaging-16.8 pandocfilters-1.4.1 pexpect-4.2.1 pickleshare-0.7.4
prompt-toolkit-1.0.13 ptyprocess-0.5.1 pyparsing-2.1.10
pyzmq-16.0.2 qtconsole-4.2.1 setuptools-34.1.1 simplegeneric-0.8.1
terminado-0.6 testpath-0.3 tornado-4.4.2 traitlets-4.3.1
wcwidth-0.1.7 widgetsnbextension-1.2.6
&lt;/pre&gt;
&lt;p&gt;Now you have Jupyter.&lt;/p&gt;
&lt;p&gt;What just happened? You installed a large number of Python
packages. All of those packages were required to run Jupyter. You
can see jupyter-1.0.0 hidden in the list of packages that were
installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-jupyter"&gt;
&lt;h2&gt;Starting Jupyter&lt;/h2&gt;
&lt;p&gt;The Jupyter tool does a number of things. We're going to use the
notebook feature to save some code that we can rerun. We can also
save notes and do other things in the notebook. When you start the
notebook, two things will happen.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The terminal window will start displaying the Jupyter console log.&lt;/li&gt;
&lt;li&gt;A browser will pop open showing the local Jupyter notebook home page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's what the console log looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
MacBookPro-SLott:Python2v3 slott$ jupyter notebook
[I 08:51:56.746 NotebookApp] Writing notebook server cookie secret to
/Users/slott/Library/Jupyter/runtime/notebook_cookie_secret
[I 08:51:56.778 NotebookApp] Serving notebooks from local
directory: /Users/slott/Documents/Writing/Python/Python2v3
[I 08:51:56.778 NotebookApp] 0 active kernels
[I 08:51:56.778 NotebookApp] The Jupyter Notebook is running at:
http://localhost:8888/?token=2eb40fbb96d7788dd05a49600b1fca4e07cd9c8fe931f9af
[I 08:51:56.778 NotebookApp] Use Control-C to stop this server
and shut down all kernels (twice to skip confirmation).
&lt;/pre&gt;
&lt;p&gt;You can glance at it to see that things are still working. The
&amp;quot;Use Control-C to stop this server&amp;quot; is a reminder of how to stop
things when you're done.&lt;/p&gt;
&lt;p&gt;Your Jupyter home page will have this logo in the corner. Things
are working.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/jupyter-1.png"&gt;&lt;img alt="Jupyter Notebook" src="https://slott56.github.io/media/jupyter-1.png" style="width: 320px; height: 166px;" /&gt;&lt;/a&gt;
&lt;p&gt;You can pick files from this list and edit them. And -- important
for what we're going to do -- you can create new notebooks.&lt;/p&gt;
&lt;p&gt;On the right side of the web page, you'll see this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/jupyter-2.png"&gt;&lt;img alt="Jupyter Notebook" src="https://slott56.github.io/media/jupyter-2.png" style="width: 305px; height: 320px;" /&gt;&lt;/a&gt;
&lt;p&gt;You can create files and folders. That's cool. You can create an
interactive terminal session. That's also cool. More important,
though, is that you can create a new Python 3 notebook. That's were
we'll wrangle with CSV files.&lt;/p&gt;
&lt;p&gt;&amp;quot;But Wait,&amp;quot; you say. &amp;quot;What directory is it using for this?&amp;quot;
The jupyter server is using the current working directory when you
started it.&lt;/p&gt;
&lt;p&gt;If you don't like this choice, you have two alternatives.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stop Jupyter. Change directory to your preferred place to keep files. Restart Jupyter.&lt;/li&gt;
&lt;li&gt;Stop Jupyter. Include the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--notebook-dir=your_working_directory&lt;/span&gt;&lt;/tt&gt; option.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
The second choice looks like this:&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;
MacBookPro-SLott:Python2v3 slott$ jupyter notebook --notebook-dir=~/Documents/Writing/Python
[I 11:15:42.964 NotebookApp] Serving notebooks from local directory: /Users/slott/Documents/Writing/Python
&lt;/pre&gt;
&lt;p&gt;Now you know where your files are going to be. You can make sure
that your .CSV files are here. You will have your &amp;quot;.ipynb&amp;quot; files
here also. Lots of goodness in the right place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-jupyter"&gt;
&lt;h2&gt;Using Jupyter&lt;/h2&gt;
&lt;p&gt;Here's what a notebook looks like. Here's a screen shot.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/Jupyter-3.png"&gt;&lt;img alt="Jupyter Notebook" src="https://slott56.github.io/media/Jupyter-3.png" style="width: 640px; height: 208px;" /&gt;&lt;/a&gt;
&lt;p&gt;First. The notebook was originally called &amp;quot;&lt;strong&gt;untitled&lt;/strong&gt;&amp;quot; which
seemed less than ideal. So I clicked on the name and changed it
to &amp;quot;&lt;strong&gt;csv_wrestling&lt;/strong&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Second. There was a box labeled &lt;strong&gt;In [ ]:&lt;/strong&gt;. I entered some
Python code to the right of this label. Then I clicked the run
cell icon. (It's similar to this emoji --  ⏯ -- but not
exactly.)&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;In [ ]:&lt;/strong&gt; changed to &lt;strong&gt;In [1]:&lt;/strong&gt;. A second box appeared
labeled &lt;strong&gt;Out [1]:&lt;/strong&gt;. This annotates our dialog with Python:
each input and Python's response is tracked. It's pretty nice.
We can change our input and rerun the cell. We can add new
cells with different things to run. We can run all of the
cells. Lots of things are possible based on this idea of a cell
with our command. When we run a cell, Python processes the
command and we see the output.&lt;/p&gt;
&lt;p&gt;For many expressions, a value is displayed.  For some
expressions, however, nothing is displayed. For complete
statements, nothing is displayed. This means we'll often have
to throw the name of a variable in to see the value of that
variable.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/Jupyter-4.png"&gt;&lt;img alt="Jupyter Notebook" src="https://slott56.github.io/media/Jupyter-4.png" style="width: 640px; height: 174px;" /&gt;&lt;/a&gt;
&lt;p&gt;The rest of the notebook is published separately. It's awkward
to work in Blogger when describing a Jupyter notebook. It's
much easier to simply post the notebook in GitHub.&lt;/p&gt;
&lt;p&gt;The notebook is published here:
&lt;a class="reference external" href="https://github.com/slott56/introduction-python-csv"&gt;slott56/introduction-python-csv&lt;/a&gt;.
You can follow the notebook to build your own copy which reads
and writes CSV files.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="tutorial"></category><category term="jupyter notebook"></category><category term="csv"></category></entry><entry><title>Coding Camp vs. Computer Science</title><link href="https://slott56.github.io/2017_02_11-coding_camp_vs_computer_science.html" rel="alternate"></link><published>2017-02-11T09:54:00-05:00</published><updated>2017-02-11T09:54:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-02-11:/2017_02_11-coding_camp_vs_computer_science.html</id><summary type="html">&lt;p&gt;Step 1, read this: &amp;quot;&lt;a class="reference external" href="http://www.geekwire.com/2015/dear-geekwire-a-coding-bootcamp-is-not-a-replacement-for-a-computer-science-degree/?fb_action_ids=10206556712931323&amp;amp;fb_action_types=og.likes"&gt;Dear GeekWire: A coding bootcamp is not a
replacement for a computer science
degree&lt;/a&gt;&amp;quot;.
It's short, it won't hurt.&lt;/p&gt;
&lt;p&gt;I got this comment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The world runs in legacy code and the cs degrees focus on leading
edge&lt;/p&gt;
&lt;p&gt;Most of what is learned in cs [is] never …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Step 1, read this: &amp;quot;&lt;a class="reference external" href="http://www.geekwire.com/2015/dear-geekwire-a-coding-bootcamp-is-not-a-replacement-for-a-computer-science-degree/?fb_action_ids=10206556712931323&amp;amp;fb_action_types=og.likes"&gt;Dear GeekWire: A coding bootcamp is not a
replacement for a computer science
degree&lt;/a&gt;&amp;quot;.
It's short, it won't hurt.&lt;/p&gt;
&lt;p&gt;I got this comment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The world runs in legacy code and the cs degrees focus on leading
edge&lt;/p&gt;
&lt;p&gt;Most of what is learned in cs [is] never used in the mainstream of
business&lt;/p&gt;
&lt;p&gt;Much of computer work is repetitive and uninviting to upwardly mobile
people who generally are moving up not improving the breed&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I disagree.  A lot.&lt;/p&gt;
&lt;p&gt;&amp;quot;The world runs in legacy code.&amp;quot; First, this is reductionist:
everything that's been pushed to GitHub is now a &amp;quot;legacy&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Does &amp;quot;legacy&amp;quot; mean &amp;quot;old, bad code?&amp;quot; If so, only CS grads will be
equipped to make that judgement.&lt;/li&gt;
&lt;li&gt;Does &amp;quot;legacy&amp;quot; mean &amp;quot;COBOL?&amp;quot; If so, only CS grads will be able to
articulate the problems with COBOL and make a rational plan to
replace it with Microservices.&lt;/li&gt;
&lt;li&gt;Does &amp;quot;legacy&amp;quot; mean &amp;quot;not very interesting?&amp;quot; We'll return to this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;CS degrees focus on leading edge.&amp;quot; Not really true at all. The
foundations of CS: data structures and algorithms, logic, and
computability, haven't changed much since the days of Alan Turing
and John von Neumann. They're highly relevant and form the core of
a sensible curriculum.&lt;/p&gt;
&lt;p&gt;The &amp;quot;leading edge&amp;quot; would be some Java 1.8 nonsense or some Angular JS
hokum. The kind of thing that comes and goes. The point of CS
education is to make languages and language features just another
thing, not something special and unique. A little CS background
allows a programmer to lump all SQL databases into a broad category
and deal with them sensibly. A Code Camp grad who only knows SQLite
may have trouble seeing that Oracle is superficially different but
fundamentally similar.&lt;/p&gt;
&lt;p&gt;&amp;quot;cs is never used in the mainstream of business.&amp;quot; True for some
businesses. This is completely true for those businesses where
&amp;quot;legacy&amp;quot; means &amp;quot;not very interesting.&amp;quot;&lt;/p&gt;
&lt;p&gt;There is a great deal of not very interesting legacy code that fails
to leverage a data structure more advanced than the flat file. This
code is a liability, not an asset. The managers that let this happen
probably didn't have a strong CS background and hired Code Camp
graduates (because they're inexpensive) and created a huge pile of
very bad code.&lt;/p&gt;
&lt;p&gt;I've met these people and worked at these companies. It's a bad
thing. The &amp;quot;leadership&amp;quot; that created such a huge pile of wasteful
code needs to be fired. The &amp;quot;all that bad coded evolved during the
70's and 80's&amp;quot; isn't a very good excuse. A large amount of not
interesting code can be replaced with a small amount of interesting
code quickly and with almost zero risk.&lt;/p&gt;
&lt;p&gt;Any company that's unable to pursue new lines of business because --
you know -- we've always done X and it's expensive to pivot to Y is
deranged. They're merely holding onto their niche because they're
paralyzed by fear of innovation=failure.&lt;/p&gt;
&lt;p&gt;&amp;quot;Much of computer work is repetitive&amp;quot;.  False. It's made repetitive
by unimaginative management types who like to manage repetitive work.
If you've done it twice, you need to be prepared to distinguish
coincidence from pattern. When you've done it three times, that's a
pattern, and you need to automate it. If you do it a fourth time,
you're missing the opportunity to automate, wasting money instead of
investing it.&lt;/p&gt;
&lt;p&gt;&amp;quot;Much of computer work is ... uninviting to upwardly mobile people&amp;quot;
Only in places where repetitive is permitted to exist.  If repetitive
is not permitted, upward mobility will be the norm for the
innovators.&lt;/p&gt;
&lt;p&gt;&amp;quot;people who generally are moving up not improving the breed&amp;quot;. I get
this. The smart people move on. All we have left in this company are
Code Camp graduates and their managers who value repetitive work and
large volumes of not interesting code.&lt;/p&gt;
&lt;p&gt;Improving the Breed means what?&lt;/p&gt;
&lt;p&gt;Hiring CS graduates instead of Code Camp kiddies.&lt;/p&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="education"></category></entry><entry><title>NoSQL Database Doesn’t Mean No Schema</title><link href="https://slott56.github.io/2017_02_08-nosql_database_doesnt_mean_no_schema.html" rel="alternate"></link><published>2017-02-08T08:00:00-05:00</published><updated>2017-02-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-02-08:/2017_02_08-nosql_database_doesnt_mean_no_schema.html</id><content type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="https://medium.com/capital-one-developers/nosql-database-doesnt-mean-no-schema-a824d591034e"&gt;NoSQL Database Doesn’t Mean No
Schema&lt;/a&gt;
It was fun to write. And the code works really nicely.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="noSQL"></category><category term="jsonschema"></category><category term="swagger"></category><category term="json"></category><category term="schema migration"></category></entry><entry><title>Writing Tools</title><link href="https://slott56.github.io/2017_02_07-writing_tools.html" rel="alternate"></link><published>2017-02-07T08:00:00-05:00</published><updated>2017-02-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-02-07:/2017_02_07-writing_tools.html</id><summary type="html">&lt;p&gt;Read
this: &lt;a class="reference external" href="http://thesweetsetup.com/apps/our-favorite-pro-writing-app-for-mac/"&gt;http://thesweetsetup.com/apps/our-favorite-pro-writing-app-for-mac/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What I have been doing instead of using these sophisticated,
integrated writing tools?&lt;/p&gt;
&lt;p&gt;I use OmniOutliner. &lt;a class="reference external" href="https://www.omnigroup.com/omnioutliner"&gt;https://www.omnigroup.com/omnioutliner&lt;/a&gt; I've used
it for years. It does a lot of things. Most notably, I can create
multiple columns so that I can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read
this: &lt;a class="reference external" href="http://thesweetsetup.com/apps/our-favorite-pro-writing-app-for-mac/"&gt;http://thesweetsetup.com/apps/our-favorite-pro-writing-app-for-mac/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What I have been doing instead of using these sophisticated,
integrated writing tools?&lt;/p&gt;
&lt;p&gt;I use OmniOutliner. &lt;a class="reference external" href="https://www.omnigroup.com/omnioutliner"&gt;https://www.omnigroup.com/omnioutliner&lt;/a&gt; I've used
it for years. It does a lot of things. Most notably, I can create
multiple columns so that I can create page budgets for outlines.&lt;/p&gt;
&lt;p&gt;Acquisition Editors like this. Except, of course, they like it as an
DOCX file, which requires a bit of manual juggling to produce.
I use BBEdit and KomodoEdit for a the bulk of my
writing. &lt;a class="reference external" href="ttp://www.barebones.com/products/bbedit/index.html"&gt;http://www.barebones.com/products/bbedit/index.html&lt;/a&gt;
&lt;a class="reference external" href="https://www.activestate.com/komodo-ide/downloads/edit"&gt;https://www.activestate.com/komodo-ide/downloads/edit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;But wait,&amp;quot; you say, &amp;quot;those are text editors.&amp;quot;
(Or, more dismissively, &amp;quot;there are merely text editors.&amp;quot;)&lt;/p&gt;
&lt;p&gt;Correct.  I use RST markup and write in Unicode text.  I use tools to
convert the RST text to a variety of other binary formats.
See &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/tools.html"&gt;http://docutils.sourceforge.net/docs/user/tools.html&lt;/a&gt; for a list
of tools. This is what I often use:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;rst2odt creates ODT files which can be then converted to DOCX.&lt;/li&gt;
&lt;li&gt;rst2html creates web pages.&lt;/li&gt;
&lt;li&gt;rst2epub creates ePub files. From there, Kindlegen can convert to
Kindle-unique format. &lt;a class="reference external" href="https://www.amazon.com/gp/feature.html?docId=1000765211"&gt;https://www.amazon.com/gp/feature.html?docId=1000765211&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How is this better than a tool like Scrivener? It depends -- as
always -- on what you're trying to optimize. My pipeline has the
(dubious) advantage of being very inexpensive. Except for
OmniOutliner and BBEdit, it's all community-edition, free software.
If cheap is your goal, I've got cheap.&lt;/p&gt;
&lt;p&gt;The cool part is this.&lt;/p&gt;
&lt;p&gt;The Mac OS X desktop is an integrated writing environment. I have
browser, outliner, writing tool, publishing tool, etc., etc., all
readily and immediately available. The &amp;quot;look and feel&amp;quot; isn't
consistent, but I'm not sure that's a show-stopper.&lt;/p&gt;
&lt;p&gt;The biggest difficulty?&lt;/p&gt;
&lt;p&gt;BBEdit doesn't enable the Mac OS X grammar checker. Really. It's
switched off. The grammar checker is sometimes handy for preventing a
large number of common, dumb writing mistakes. BBEdit shows the word
count, which is very helpful for some kinds of writing. I wind up
using a second app (i.e. the built-in Mac OS X TextEdit) to make a
grammar check pass.&lt;/p&gt;
&lt;p&gt;I think, however, the hacker-friendly free-and-open-source tool chain
may have reached the end of its service life.&lt;/p&gt;
&lt;div class="section" id="why-not-use-word"&gt;
&lt;h2&gt;Why Not Use Word?&lt;/h2&gt;
&lt;p&gt;&amp;quot;After all,&amp;quot; you say, &amp;quot;MS-Word does everything.&amp;quot;&lt;/p&gt;
&lt;p&gt;Agreed. It does everything badly and confusingly. (1) The outliner is
hard to use and is firmly tied to the text in a way that breaks
outlines all the time. (&lt;em&gt;What's that paragraph doing there? Why is it
the wrong outline level?&lt;/em&gt;) (2) There are too many useless features.
The presence of &amp;quot;advanced&amp;quot; mode is a UX nightmare come true. (3) The
character-mode and paragraph-mode formatting rules are baffling (and
break the outlining.) (4) The styles are essentially invisible: you
have to click on the text and check the style side-bar to be sure
that the (invisible) markup is actually right.&lt;/p&gt;
&lt;p&gt;The worst thing is that publishers have house style sheets for
MS-Word that drive the publishing pipeline. This means that writing
involves a weird step where I have to apply the publishers styles to
things that are **very** clearly annotated with RST markup. You
have to review each word. The words may look right, but have the
wrong style applied. This is extremely tiresome to get right.&lt;/p&gt;
&lt;p&gt;I intend to stick with plain-text markup. Scrivener supports
&lt;a class="reference external" href="https://rawgit.com/fletcher/human-markdown-reference/master/index.html"&gt;MultiMarkdown&lt;/a&gt;.
It's not
&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/rst/quickref.html"&gt;RST&lt;/a&gt;,
but it seems to be as rich with built-in semantic categories.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="his-article-is-good-interesting-and-easily-underst"&gt;
&lt;h2&gt;his article is good interesting and easily underst...&lt;/h2&gt;
&lt;p&gt;olive&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-04-05 02:48:45.147000-04:00&lt;/p&gt;
&lt;p&gt;his article is good interesting and easily understand to everyone.And
every person can known how to How to Identify and Fix Theme to read this
article its very help full for everyone. check my site and &lt;a class="reference external" href="https://www.pocketnewsalert.com/2018/11/make-your-documents-free-of-errors-with-grammar-checker.html"&gt;Make your
documents free of errors with Grammer
Checker&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-think-that-every-writer-either-amateur-and-profe"&gt;
&lt;h2&gt;I think that every writer either amateur and profe...&lt;/h2&gt;
&lt;p&gt;Oliver Maurice&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-12-05 09:25:45.058000-05:00&lt;/p&gt;
&lt;p&gt;I think that every writer either amateur and professional should use
wiring tools, proofreading tools or even &lt;a class="reference external" href="https://essaytoolbox.com/"&gt;essay
tools&lt;/a&gt;, basically everything they could to
improve their work. Not only that this could save them some nerves but
also help them improve their writing skill&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-so-much-for-sharing-this-awesome-info-i-am"&gt;
&lt;h2&gt;Thanks so much for sharing this awesome info! I am...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-09-12 11:34:30.052000-04:00&lt;/p&gt;
&lt;p&gt;Thanks so much for sharing this awesome info! I am looking forward to
see more postsby you! &lt;a class="reference external" href="https://josematos.work/"&gt;Frontend developer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="docutils"></category><category term="writing"></category><category term="epub"></category><category term="tools"></category></entry><entry><title>Improving the epub format -- hacking your ebooks</title><link href="https://slott56.github.io/2017_01_31-improving_the_epub_format_hacking_your_ebooks.html" rel="alternate"></link><published>2017-01-31T08:00:00-05:00</published><updated>2017-01-31T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-01-31:/2017_01_31-improving_the_epub_format_hacking_your_ebooks.html</id><summary type="html">&lt;p&gt;From a reader.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I recently purchased a copy of 'Modern Python Cookbook' but I found
that the code listings in the epub file were indented which caused a
problem when reading on my tablet. (I reverted to epub as the PDF
version froze in the Bookari ereader software.)&lt;/p&gt;
&lt;p&gt;I unzipped …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;From a reader.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I recently purchased a copy of 'Modern Python Cookbook' but I found
that the code listings in the epub file were indented which caused a
problem when reading on my tablet. (I reverted to epub as the PDF
version froze in the Bookari ereader software.)&lt;/p&gt;
&lt;p&gt;I unzipped the epub file, created and ran the following script to
'unindent' the code listings then rezipped. (I also tweaked the
epub.css file slightly.)
Script:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;
import os
import codecs
from textwrap import dedent
from bs4 import BeautifulSoup

ENCODING = 'utf8'

def dedent_page(filepath):
    soup = load_soup(filepath)
    code = soup.findAll('pre')
    for c in code:
        # Dedent twice to cater for 'blank' lines with spaces.
        c.string = dedent(dedent(c.text))
    save_soup(filepath, unicode(soup))

def load_soup(filepath):
    with codecs.open(filepath, encoding = ENCODING) as f:
        return BeautifulSoup(f)

def save_soup(filepath, soup):
    with codecs.open(filepath, mode = 'w', encoding = ENCODING) as f:
        f.write(unicode(soup))

if __name__ == &amp;quot;__main__&amp;quot;:

    FOLDER = r'ebook\OEBPS'

    html_files = [fn for fn in os.listdir(FOLDER) if fn.endswith('.html')]
    total_files = len(html_files)
    for i, file_name in enumerate(html_files):
        print 'Processing file %s (%s/%s)' % (file_name, i + 1, total_files)
        dedent_page(os.path.join(FOLDER, file_name))
&lt;/pre&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="epub"></category></entry><entry><title>Irrelevant Feature Comparison</title><link href="https://slott56.github.io/2017_01_17-irrelevant_feature_comparison.html" rel="alternate"></link><published>2017-01-17T08:00:00-05:00</published><updated>2017-01-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-01-17:/2017_01_17-irrelevant_feature_comparison.html</id><summary type="html">&lt;p&gt;A Real Email.&lt;/p&gt;
&lt;blockquote&gt;
So, please consider creating a blog post w/ a title something like
&amp;quot;Solving the Fred Flintstone Problem using Monads in Python and
Haskell&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;First. There's this: &lt;a class="reference external" href="https://pypi.python.org/pypi/PyMonad/"&gt;https://pypi.python.org/pypi/PyMonad/&lt;/a&gt; and
this: &lt;a class="reference external" href="http://www.valuedlessons.com/2008/01/monads-in-python-with-nice-syntax.html"&gt;http://www.valuedlessons.com/2008/01/monads-in-python-with-nice-syntax.html&lt;/a&gt;.
Also, see &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Type_class"&gt;https://en.wikipedia …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A Real Email.&lt;/p&gt;
&lt;blockquote&gt;
So, please consider creating a blog post w/ a title something like
&amp;quot;Solving the Fred Flintstone Problem using Monads in Python and
Haskell&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;First. There's this: &lt;a class="reference external" href="https://pypi.python.org/pypi/PyMonad/"&gt;https://pypi.python.org/pypi/PyMonad/&lt;/a&gt; and
this: &lt;a class="reference external" href="http://www.valuedlessons.com/2008/01/monads-in-python-with-nice-syntax.html"&gt;http://www.valuedlessons.com/2008/01/monads-in-python-with-nice-syntax.html&lt;/a&gt;.
Also, see &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Type_class"&gt;https://en.wikipedia.org/wiki/Type_class&lt;/a&gt;. I think this has
been covered nicely.&lt;/p&gt;
&lt;p&gt;I can't improve on what's been presented.&lt;/p&gt;
&lt;p&gt;Second. I don't see any problems that are solved &lt;em&gt;well&lt;/em&gt; by monads in
Python. In a lazy, optimized, functional language, monads can be used
bind operations into ordered sequences. This is why file parsing and
file writing examples of monads abound. They can also be used to bind
a number of types so that operator overloading in the presence of
strict type checking can be implemented. None of this seems helpful
in Python.&lt;/p&gt;
&lt;p&gt;Perhaps monads will be helpful with Python type hints. I'll wait and
see if a monad definition shows up in the typing module. There, it
may be a useful tool for handling dynamic type bindings.&lt;/p&gt;
&lt;p&gt;Third. This request is perilously close to a &amp;quot;head-to-head&amp;quot;
comparison between languages. The question says &amp;quot;problem&amp;quot;, but it is
similar to asking to see the exact same algorithm implemented in two
different languages. It makes as much sense as comparing Python's
built-in complex type with Java's built-in complex type (which Java
doesn't have.)&lt;/p&gt;
&lt;p&gt;Here's the issue. I replace &lt;em&gt;Fred Flintstone&lt;/em&gt; with &amp;quot;Parse JSON
Notation&amp;quot;.  This is a cool application of monads to recognize the
various sub-classes of JSON syntax and emit the correctly-structured
document.  See &lt;a class="reference external" href="http://fssnip.net/bq/title/JSON-parsing-with-monads"&gt;http://fssnip.net/bq/title/JSON-parsing-with-monads&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Python, this is import json. This isn't informative about the
language. If we look at the Python code, we see some operations that
might be considered as eligible for a rewrite using monads. But
Python isn't compiled and doesn't have the same type-checking issues.
The point is that Python has alternatives to monads.&lt;/p&gt;
&lt;p&gt;Fourth. It's just asking about a not-required feature to a language.
In the spirit of showing the not-required-in-Python features, I'll
show the not-required-in-Python GOTO.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def goto(destination):
    global next
    next = destination

def min_none(sequence):
    try:
        return min(sequence)
    except ValueError:
        return None

def execute(program, debug=False, stmt=None):
    global next, context
    if stmt is None:
        stmt = min(program.keys())
        context = {'goto': goto}
    while stmt is not None:
        next = min_none(list(filter(lambda x: x&amp;gt;stmt, program.keys())))
        if debug:
            print(&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;quot;, program[stmt])
        exec(program[stmt], globals(), context)
        stmt = next

example = {
100: &amp;quot;a = 10&amp;quot;,
200: &amp;quot;if a == 0: goto(500)&amp;quot;,
250: &amp;quot;print(a)&amp;quot;,
300: &amp;quot;a = a - 1&amp;quot;,
400: &amp;quot;goto(200)&amp;quot;,
500: &amp;quot;print('done'()&amp;quot;,
}

execute(example)
&lt;/pre&gt;
&lt;p&gt;This shows how we can concoct an additional feature that isn't really
needed in Python.
Given this, we can now compare the GOTO between Python, BASIC, and
Haskell. Or maybe we can look at Monads in BASIC vs. Haskell.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="GW-Basic"></category><category term="haskell"></category></entry><entry><title>The Depths of Degradation or How to Reduce</title><link href="https://slott56.github.io/2017_01_09-the_depths_of_degradation_or_how_to_reduce.html" rel="alternate"></link><published>2017-01-09T11:42:00-05:00</published><updated>2017-01-09T11:42:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-01-09:/2017_01_09-the_depths_of_degradation_or_how_to_reduce.html</id><summary type="html">&lt;p&gt;Let's talk real-world functional programming. Disclosure: I'm a fan of
functional programming in Python.
(This: &lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming"&gt;https://www.packtpub.com/application-development/functional-python-programming&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The usual culprits for functional programming are map(), filter(),
generator functions, and the various comprehensions. This is very
pleasant and can lead to succinct, expressive code.&lt;/p&gt;
&lt;p&gt;The reduce operation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's talk real-world functional programming. Disclosure: I'm a fan of
functional programming in Python.
(This: &lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming"&gt;https://www.packtpub.com/application-development/functional-python-programming&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The usual culprits for functional programming are map(), filter(),
generator functions, and the various comprehensions. This is very
pleasant and can lead to succinct, expressive code.&lt;/p&gt;
&lt;p&gt;The reduce operation, however, is sometimes slippery.  The obvious
reductions are sum() and prod().  Some slightly less obvious
reductions are these three:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sum0 = lambda s: sum(1 for _ in s)

sum1 = lambda s: sum(s)

sum2 = lambda s: sum(n**2 for n in s)
&lt;/pre&gt;
&lt;p&gt;The first is essentially len(s), but stated more formally. It shows
how we can add in filter or transformations. If we're working with a
collections.Counter object, we can rewrite these three to work with
the values() of a counter. This allows us to have a statistics library
that works with a sequence of simple items or a Counter of binned
items.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;(I've left it as an exercise for the reader to create the summaries of&lt;/dt&gt;
&lt;dd&gt;Counters.)&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="section" id="the-health-check-question"&gt;
&lt;h2&gt;The Health Check Question&lt;/h2&gt;
&lt;p&gt;The context is an RESTful application's /health end-point. When a
client does a GET to /health, we want to provide status of the
components on which the app depends as well as a summary.&lt;/p&gt;
&lt;p&gt;The details are created like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
components = (component() for component in COMPONENT_LIST)

init_components = [thing.init_app(app) for thing in components]

details = [component.health() for component in init_components]
&lt;/pre&gt;
&lt;p&gt;We have a list of class definitions for each component. We can create
instances of each class. We can initialize these by providing the
RESTful app. Finally, we can create a list of the various health
end-point status codes.&lt;/p&gt;
&lt;p&gt;There's a class definition for other RESTful API's. The health check
does a transitive GET to a /health end-point. These are all
more-or-less identical.&lt;/p&gt;
&lt;p&gt;There are also class definitions for the database and the cache and
other non-RESTful components. It's all very pretty and very
functional.&lt;/p&gt;
&lt;p&gt;Note that the three statements aren't adjacent. They're scattered
around to fit better with the way Flask works. The component list is
in one place. The initialization happens before the first request. The
details are computed as requested.&lt;/p&gt;
&lt;p&gt;Also. We don't really use a simple list for the details. It's actually
a mapping from which we will derive a vector. I've left that detail
out because it's a relatively simple complication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="representation-of-health"&gt;
&lt;h2&gt;Representation of Health&lt;/h2&gt;
&lt;p&gt;We represent health with a simple enumeration of values:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from enum import Enum
class Status(Enum):
    OK = &amp;quot;OK&amp;quot;
    DEGRADED = &amp;quot;DEGRADED&amp;quot;
    DOWN = &amp;quot;DOWN&amp;quot;
&lt;/pre&gt;
&lt;p&gt;This provides the essential definition of health for our purposes. We
don't drag around details of the degradation; that's something that we
have to determine by looking at our consoles and logs and stuff.&lt;/p&gt;
&lt;p&gt;Degradation is (a) rare, and (b) nuanced. Some degradations are mere
annoyances: one of the servers is being restarted. Other degradations
are hints that something else might be going on that needs
investigation: database primary server is down and we're running on a
secondary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summarizing-health"&gt;
&lt;h2&gt;Summarizing Health&lt;/h2&gt;
&lt;p&gt;A subset of the details vector, then, looks like this: [Status.OK,
Status.OK, Status.DEGRADED].&lt;/p&gt;
&lt;p&gt;How can we summarize this?&lt;/p&gt;
&lt;p&gt;First, we need some rules.  Like these:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Status(Enum):
    OK = &amp;quot;OK&amp;quot;
    DEGRADED = &amp;quot;DEGRADED&amp;quot;
    DOWN = &amp;quot;DOWN&amp;quot;

    def depth(self, other):
        if self == self.OK:
            return {self.OK: self.OK,
                    self.DEGRADED: self.DEGRADED,
                    self.DOWN: self.DEGRADED}[other]
        elif self == self.DEGRADED:
            return {self.OK: self.DEGRADED,
                    self.DEGRADED: self.DEGRADED,
                    self.DOWN: self.DEGRADED}[other]
        elif self == self.DOWN:
            return {self.OK: self.DEGRADED,
                    self.DEGRADED: self.DEGRADED,
                    self.DOWN: self.DOWN}[other]
&lt;/pre&gt;
&lt;p&gt;The depth() method implements a comparison operator that defines the
relationships. This can be visualized as a table.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;depth&lt;/th&gt;
&lt;th class="head"&gt;OK&lt;/th&gt;
&lt;th class="head"&gt;DEGRADED&lt;/th&gt;
&lt;th class="head"&gt;DOWN&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;DEGRADED&lt;/td&gt;
&lt;td&gt;DOWN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DEGRADED&lt;/td&gt;
&lt;td&gt;DEGRADED&lt;/td&gt;
&lt;td&gt;DEGRADED&lt;/td&gt;
&lt;td&gt;DEGRADED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DOWN&lt;/td&gt;
&lt;td&gt;DOWN&lt;/td&gt;
&lt;td&gt;DEGRADED&lt;/td&gt;
&lt;td&gt;DOWN&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This allows us to define a function that uses reduce to summarize the
vector of status values.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from functools import reduce
def summary(sequence):
    return reduce(lambda a, b: a.depth(b), sequence)
&lt;/pre&gt;
&lt;p&gt;The reduce() function applies a binary operator between items in a
vector. We've used lambda a, b: a.depth(b) to turn the the depth()
method into a binary operator so it can be used with reduce.&lt;/p&gt;
&lt;p&gt;The summary() function is a &amp;quot;depth-reduction&amp;quot; of a vector of status
objects. It's defined independently of the actual status objects. The
relationships among the status levels are embedded in the class
definition where they belong. The actual details of status are
pleasantly opaque.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;We have an example of map-reduce outside the sphere of big data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-integer-alternative"&gt;
&lt;h2&gt;The Integer Alternative&lt;/h2&gt;
&lt;p&gt;The health rules as shown above are kind of complex. Could they be
simplified? The answer is no.&lt;/p&gt;
&lt;p&gt;Here's an alternative -- which does &lt;strong&gt;not&lt;/strong&gt; do what we want.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Status2(IntEnum):
    OK = 1
    DEGRADED = 2
    DOWN = 3

summary2 = lambda sequence: max(sequence)
&lt;/pre&gt;
&lt;p&gt;This works in some cases, but it doesn't work in others. Another
alternative is to change the order to be OK=1, DOWN=2, DEGRADED=3.
This doesn't work, either. I'll leave it as an exercise to write out
some of the various combinations of values and see how these differ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="json-representation"&gt;
&lt;h2&gt;JSON Representation&lt;/h2&gt;
&lt;p&gt;The final detail is JSONification of the status vector and the
summary.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
json.dumps({&amp;quot;status&amp;quot;: summary(vector).name, &amp;quot;details&amp;quot;: [s.name for s in vector]})
&lt;/pre&gt;
&lt;p&gt;This converts the various Status objects to text items that fit the
Swagger specification for our /health end-points. The .name attribute
reference is required to get the string labels from the enum. An
alternative is to customize the JSON encoder to recognize the Enum
objects and extract their names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Map-Reduce is easy. It surfaces in a number of places. The idea helps
encapsulate summarization rules.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="map-reduce"></category><category term="functional python programming"></category><category term="#python"></category></entry><entry><title>The "Build Script" Idea</title><link href="https://slott56.github.io/2017_01_03-the_build_script_idea.html" rel="alternate"></link><published>2017-01-03T08:00:00-05:00</published><updated>2017-01-03T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-01-03:/2017_01_03-the_build_script_idea.html</id><summary type="html">&lt;p&gt;In compiled languages, the build script or makefile is pretty
important. Java has maven (and gradle and ant) for this job.&lt;/p&gt;
&lt;p&gt;Python doesn't really have much for this. Mostly because it's
needless.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;Some folks like the idea of a build script. I've been asked for
suggestions.&lt;/p&gt;
&lt;p&gt;First and foremost …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In compiled languages, the build script or makefile is pretty
important. Java has maven (and gradle and ant) for this job.&lt;/p&gt;
&lt;p&gt;Python doesn't really have much for this. Mostly because it's
needless.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;Some folks like the idea of a build script. I've been asked for
suggestions.&lt;/p&gt;
&lt;p&gt;First and foremost: &lt;strong&gt;Go Slow&lt;/strong&gt;. A build script is &lt;strong&gt;not&lt;/strong&gt; essential.
It's barely even helpful. Python isn't Java. There's no
maven/gradle/ant nonsense because it isn't necessary. Make is a poor
choice of tools for reasons we'll see below.&lt;/p&gt;
&lt;p&gt;For folks new to Python, here's the step that's sometimes important.&lt;/p&gt;
&lt;p&gt;python setup.py sdist bdist_wheel upload&lt;/p&gt;
&lt;p&gt;This uses the source distribution tools (sdist) to build a &amp;quot;wheel&amp;quot; out
of the source code. That's the only thing that's important, and even
that's optional. The source is all that really exists, and a Git Pull
is the only thing that's truly &lt;strong&gt;required&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Really. There's no compilation, and there's no reason to do any
processing prior to uploading source.&lt;/p&gt;
&lt;p&gt;For folks experienced with Python, this may be obvious. For folks not
so experienced, it's difficult to emphasize enough that Python is just
source. No &amp;quot;class&amp;quot; files. No &amp;quot;jar&amp;quot; files. No &amp;quot;war&amp;quot; files. No &amp;quot;ear&amp;quot;
files. None of that. A wheel is a Zip archive that follows some simple
conventions.&lt;/p&gt;
&lt;div class="section" id="some-preliminary-steps"&gt;
&lt;h2&gt;Some Preliminary Steps&lt;/h2&gt;
&lt;p&gt;A modicum of care is a good idea before simply uploading something.
There are a few steps that make some sense.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Run pylint to check for obvious code problems. A low pylint score
indicates that the code needs to be cleaned up. There's no magically
ideal number, but with a few judicious &amp;quot;disable&amp;quot; comments, it's easy
to get to 10.00.&lt;/li&gt;
&lt;li&gt;Run mypy to check the type hints. If mypy complains, you've got
potentially serious problems.&lt;/li&gt;
&lt;li&gt;Run py.test and get a coverage report. There's no magically perfect
test coverage number: more is better. Even 100% line-of-code coverage
doesn't necessarily mean that all of the potential combinations of
logic paths have been covered.&lt;/li&gt;
&lt;li&gt;Run sphinx to create documentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Only py.test has a simple pass-fail aspect. If the unit tests don't
pass: that's a clear problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-script"&gt;
&lt;h2&gt;The Script&lt;/h2&gt;
&lt;p&gt;Using &lt;strong&gt;make&lt;/strong&gt; doesn't work out terribly well. It can be used, but it
seems to me to be too confusing to set up properly.&lt;/p&gt;
&lt;p&gt;Why? Because we don't have the kind of simple file relationships with
which make works out so nicely. If we had simple *.c -&amp;gt; *.o -&amp;gt;
*.ar kinds of relationships, make would be perfect. We don't have
that, and this seems to make &lt;strong&gt;make&lt;/strong&gt; more trouble than it's worth.
Both pylint and py.test keep history as well as produce reports.
Sphinx is make-like already, which is why I'm leery of layering on
the complexity.&lt;/p&gt;
&lt;p&gt;My preference is something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import pytest
from pylint import epylint as lint
import sphinx
from mypy.api import api

(pylint_stdout, pylint_stderr) = lint.py_run('*.py', return_std=True)
print(pylint_stdout.getvalue())

result = mypy.api.run('*.py')

pytest.main([&amp;quot;futurize_both/tests&amp;quot;])

sphinx.main(['source', 'build/html', '-b', 'singlehtml'])
&lt;/pre&gt;
&lt;p&gt;The point here is to simply run the four tools and then look at the
output to see what needs to be fixed. Circumstances will dictate
changes to the parameters being used. New features will need
different reports than bug fixes. Some parts of a project will have
different focus than other parts. Conversion from Python 2 to Python
3 will indicate a shift in focus, also.&lt;/p&gt;
&lt;p&gt;The idea of a one-size-fits-all script seems inappropriate. These
tools are sophisticated. Each has a distinctive feature set. Tweaking
the parameters by editing the build script seems like a simple,
flexible solution. I'm not comfortable defining parameter-parsing
options for this, since each project I work on seems to be unique.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;. Right now, mypy-lang in the PyPI repository and mypy
in GitHub differ. The GitHub version includes an &lt;strong&gt;api&lt;/strong&gt; module; the
PyPI release does not include this. This script may not work for you,
depending on which mypy release you're using. This will change in the
future, making things nicer. Until then, you may want to run mypy
&amp;quot;the hard way&amp;quot; using &lt;strong&gt;subprocess.check_call()&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In enterprise software development environments, it can make sense to
set some thresholds for pylint and pytest coverage. It is very
helpful to include type hints everywhere, also. In this context, it
might make sense to parse the output from lint, mypy, and py.test to
stop processing if some quality thresholds are met.&lt;/p&gt;
&lt;p&gt;As noted above: &lt;strong&gt;Go Slow&lt;/strong&gt;. This kind of tool automation isn't
required and might actually be harmful if done badly. Arguing over
pylint metrics isn't as helpful as writing unit test cases. I worry
about teams developing an inappropriate focus on pylint or coverage
reports -- and the associated numerology -- to the exclusion of
sensible automated testing.&lt;/p&gt;
&lt;p&gt;I think tools like &lt;a class="reference external" href="https://pypi.python.org/pypi/pytest-bdd"&gt;https://pypi.python.org/pypi/pytest-bdd&lt;/a&gt; might be
of more value than a simplistic &amp;quot;automated&amp;quot; tool chain. Automation
doesn't seem as helpful as clarity in test design. I like the BDD
idea with Gherkin test specifications because the Given-When-Then
story outline seems to be very helpful for test design.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="sphinx"></category><category term="#python"></category><category term="pylint"></category><category term="pytest"></category><category term="tools"></category><category term="mypy"></category></entry><entry><title>The Royal Road</title><link href="https://slott56.github.io/2016_12_20-the_royal_road.html" rel="alternate"></link><published>2016-12-20T08:00:00-05:00</published><updated>2016-12-20T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-12-20:/2016_12_20-the_royal_road.html</id><summary type="html">&lt;p&gt;Warning: Long Boring Anecdote: Conclusions will be drawn from a single example.&lt;/p&gt;
&lt;p&gt;First, this quote:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;All your suggestions were great if I had wanted to do a systematic
study and truly understand. The goal is to understand and learn as
little as possible to be able to undertake the code …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Warning: Long Boring Anecdote: Conclusions will be drawn from a single example.&lt;/p&gt;
&lt;p&gt;First, this quote:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;All your suggestions were great if I had wanted to do a systematic
study and truly understand. The goal is to understand and learn as
little as possible to be able to undertake the code challenge for [a
specific job opportunity].&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;The subject of systematic study is Python. The focus of learn as
little as possible is Pandas.&lt;/p&gt;
&lt;p&gt;The goal is more-or-less impossible. Focus on a specific code
challenge will devolve into other aspects of the language. Or. It will
lead nowhere.&lt;/p&gt;
&lt;p&gt;Also. I'm not &lt;strong&gt;sure&lt;/strong&gt; what a &amp;quot;systematic study&amp;quot; is. From the omitted
back-story, I'm seems clear to me that the advice to &amp;quot;read a tutorial&amp;quot;
is restated here as &amp;quot;systematic study.&amp;quot; And is unacceptable. I guess
because of time constraints.&lt;/p&gt;
&lt;p&gt;It gets better.&lt;/p&gt;
&lt;p&gt;There's this:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;For now, I am just going to follow the pattern and get stuff to
work.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This is the ideal way to be defeated by technology. The &amp;quot;pattern&amp;quot; is
defined to a large degree by the programming language. The two are
inextricably linked. Trying to identify a pattern in programming
that's magically not part of the implementation language seems
deranged.&lt;/p&gt;
&lt;p&gt;Learning Pandas isn't simple. There's no royal road.&lt;/p&gt;
&lt;p&gt;The real crux are several questions that are difficult to reproduce,
so I'm forced to summarize.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What does name.name().name().name() mean? How can you call multiple
methods &amp;quot;simultaneously&amp;quot;?&lt;/li&gt;
&lt;li&gt;What is the range of values for some parameter?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the capper.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I understand object.method().method().  I cannot understand
object.name -- how can a method have no ()'s?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm sorry, but, the advice still stands. These are not questions that
can be answered in a vacuum. This is serious -- and foundational --
object-oriented programming. Each of these small things was a total
show-stopper, leading to four emails merely to clarify the question.
Then more when the answer was rejected as not consistent with
something, or astonishing, or&lt;/p&gt;
&lt;p&gt;For the name.name().name(), the answer &amp;quot;Google Fluent Interface&amp;quot; was
too complex. Code examples were requested to show how it was possible
for an object to return another object that had methods.&lt;/p&gt;
&lt;p&gt;Advice to use Python's &amp;gt;&amp;gt;&amp;gt; prompt and the dir() function were
apparently part of &amp;quot;systematic study&amp;quot; and not part of &amp;quot;learn as
little as possible.&amp;quot;&lt;/p&gt;
&lt;p&gt;For the range of values of a parameter, the answer &amp;quot;read the source&amp;quot;
was a non-starter. Reading the source was flat-out rejected as not
making any sense. I finally had to actually provide the link to the
source repo for Pandas before it became clear what &amp;quot;open source&amp;quot; even
meant. This was found to be nothing short of astonishing. The
side-bar conversation on &amp;quot;how is this even possible?&amp;quot; was confusing
to me because -- sadly -- I assumed people knew that the words &amp;quot;open&amp;quot;
and &amp;quot;source&amp;quot; together meant that the source was open for inspection.
My assumption was wrong. At least one person did not know this. That
means there are others.&lt;/p&gt;
&lt;p&gt;Finally. For the &amp;quot;capper&amp;quot; question. The exchange really did include
this: &amp;quot;The dot notation I thought was Object.Method.Method.&amp;quot;&lt;/p&gt;
&lt;p&gt;A great deal of the back-and-forth amounted to &amp;quot;I reject anything
other than fluent methods because that's the only thing I've decided
to understand.&amp;quot; Words like &amp;quot;property&amp;quot; and &amp;quot;attribute&amp;quot; were ignored as
noise, AFAIK.&lt;/p&gt;
&lt;p&gt;I say &amp;quot;amounted to&amp;quot; because a lot of the back-and-forth was restating
the question. Other parts were exchanging links to the Pandas
documentation in an effort to follow the &amp;quot;learn as little as
possible&amp;quot; strategy. Any link to a tutorial would be &amp;quot;systematic
study&amp;quot;. Any link to Pandas, however, was acceptable. But (of course)
confusing because the Pandas documentation assumes a modicum of
language knowledge.&lt;/p&gt;
&lt;p&gt;Here's what appears to be the problem: it's impossible to learn a
complex tool like Pandas without starting with a basic understanding
of Python.&lt;/p&gt;
&lt;p&gt;I don't think I've ever seen it suggested that one can leap into a
package without knowing the language. I'm not sure how one can
develop the idea of learning as little as possible in the first
place. But, there it is.&lt;/p&gt;
&lt;p&gt;There's at least one person who thinks they can learn as little as
possible and still get Pandas code to work. That likely means there
are others.&lt;/p&gt;
&lt;p&gt;It appears there's a market for books like&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Learn as little Python as possible to be able to use Pandas&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Learn the least Java necessary to make Spark work&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The Royal Road to Data Science&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not sure I'm capable of writing books like these, but for someone
who does, it might be a really lucrative line of books.&lt;/p&gt;
</content><category term="Technologies"></category><category term="pandas"></category><category term="learning"></category><category term="#python"></category></entry><entry><title>Amazing how Windows is “special.”</title><link href="https://slott56.github.io/2016_12_13-amazing_how_windows_is_special.html" rel="alternate"></link><published>2016-12-13T08:00:00-05:00</published><updated>2016-12-13T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-12-13:/2016_12_13-amazing_how_windows_is_special.html</id><summary type="html">&lt;p&gt;Here's the quote:&lt;/p&gt;
&lt;blockquote&gt;
...it is amazing how Windows is “special.” Back when ..., special
things had to be done for Windows. Python continues the tradition w/
an entire section in its doco titled “3. Using Python on Windows”&lt;/blockquote&gt;
&lt;p&gt;I wasn't sure what to make of this.&lt;/p&gt;
&lt;p&gt;It appeared that they want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's the quote:&lt;/p&gt;
&lt;blockquote&gt;
...it is amazing how Windows is “special.” Back when ..., special
things had to be done for Windows. Python continues the tradition w/
an entire section in its doco titled “3. Using Python on Windows”&lt;/blockquote&gt;
&lt;p&gt;I wasn't sure what to make of this.&lt;/p&gt;
&lt;p&gt;It appeared that they want Windows to be the norm and Linux/Mac
OS/POSIX to be treated as an exception.&lt;/p&gt;
&lt;p&gt;I find that baffling. POSIX is a standard. Mac OS X is
POSIX-compliant. Linux distros are generally POSIX-compliant. There's
a nice list: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/POSIX"&gt;https://en.wikipedia.org/wiki/POSIX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows is not POSIX-compliant. It seems to me that non-standard ==
special shouldn't be &amp;quot;amazing.&amp;quot; It should be &amp;quot;tiresome&amp;quot; or &amp;quot;annoying.&amp;quot;&lt;/p&gt;
&lt;p&gt;Windows tools are uniquely awful. Or, perhaps, &amp;quot;special&amp;quot;. Windows is
so &amp;quot;special&amp;quot; that the IDE concept appears to have evolved as a
solution to the awfulness. Using a Windows IDE (like Visual Studio)
insulated one from the vagaries of Windows. It appears this is
particularly important when trying to create a binary that will work
in multiple incarnations of Windows.&lt;/p&gt;
&lt;p&gt;In Linux (and POSIX-compliant OS's in general) the OS &lt;strong&gt;is&lt;/strong&gt; the IDE.
Start
here: &lt;a class="reference external" href="https://sanctum.geek.nz/arabesque/unix-as-ide-introduction/"&gt;https://sanctum.geek.nz/arabesque/unix-as-ide-introduction/&lt;/a&gt;.
This seems so much simpler and more rational. Perhaps I'm just biased
because I've used so many OS's that aren't Windows.&lt;/p&gt;
&lt;p&gt;Worth considering: &lt;a class="reference external" href="http://www.psychocats.net/ubuntu/virtualbox"&gt;http://www.psychocats.net/ubuntu/virtualbox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When asked about IDE's for Python, I tell people that I've used a
number of text editors to write Python code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;vi&lt;/li&gt;
&lt;li&gt;BBEdit&lt;/li&gt;
&lt;li&gt;Atom&lt;/li&gt;
&lt;li&gt;Komodo Edit&lt;/li&gt;
&lt;li&gt;Notepad++&lt;/li&gt;
&lt;li&gt;PyCharm&lt;/li&gt;
&lt;li&gt;IDLE&lt;/li&gt;
&lt;li&gt;Jupyter Notebook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They all work nicely. It's difficult to recommend one because they
all have distinct features. I always wind up with a lot of
command-line interaction. The &amp;quot;run-a-command-from-the-IDE&amp;quot; has
complex dialog boxes and sometimes confusing limitations. It's easier
to simply write a script than discern the nuances of the IDE
configuration rules.&lt;/p&gt;
&lt;p&gt;These are (mostly) platform-independent. They can minimize a few of
the Windows &amp;quot;features.&amp;quot; They don't eliminate all of the Windows
issues.&lt;/p&gt;
&lt;p&gt;In all cases -- except using IDLE -- I also have a Python &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/tt&gt;
prompt open in a terminal window.&lt;/p&gt;
&lt;p&gt;I strongly encourage everyone to work this way. The terminal window
interaction can be copied and pasted into doctest strings. You've
written a unit test without really trying. It's extremely productive.
It gets away from IDE wrappers. It does expose some Windows-isms, but
as long as you can limit the number of times you find Windows
&amp;quot;amazing,&amp;quot; that's not a problem.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="windows"></category><category term="POSIX"></category><category term="linux"></category></entry><entry><title>A Reason for Avoiding Programming</title><link href="https://slott56.github.io/2016_11_29-a_reason_for_avoiding_programming.html" rel="alternate"></link><published>2016-11-29T08:00:00-05:00</published><updated>2016-11-29T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-11-29:/2016_11_29-a_reason_for_avoiding_programming.html</id><summary type="html">&lt;p&gt;From someone in the process of becoming a data scientist. They had a
question on regular expressions, which made almost no sense. It appears
that the core concepts of ETL -- Extracting source data, Transforming it
into a useful form and the Loading into some persistent storage for
long-term analysis -- had …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From someone in the process of becoming a data scientist. They had a
question on regular expressions, which made almost no sense. It appears
that the core concepts of ETL -- Extracting source data, Transforming it
into a useful form and the Loading into some persistent storage for
long-term analysis -- had not been embraced. It appears the design
pattern was unknown. All I could gather from the sketchy email chain was
that something involving regular expressions had become difficult.
I wrote this in response: &lt;a class="reference external" href="https://slott56.github.io/2016_11_28-handling_irregular_file_formats.html"&gt;Handling Irregular File
Formats&lt;/a&gt;.
Here's part of the follow-up.
&amp;quot;I have been focusing on the math associated w/ math optimization. I
have been using spreadsheets to perform the computations.&amp;quot;
Really.
Spreadsheets.
The ETL pipeline question/rant/complaint was part of loading a
spreadsheet?
That seems somehow wrong. There are real tools available that really do
real data science work. The word &amp;quot;optimization&amp;quot; hints that
&lt;a class="reference external" href="https://docs.scipy.org/doc/scipy-0.18.1/reference/optimize.html"&gt;scipy.optimize&lt;/a&gt;
might be a more useful exercise than hacking around with spreadsheets.
Perhaps some advice from a real data scientist might
help: &lt;a class="reference external" href="http://www.becomingadatascientist.com/"&gt;http://www.becomingadatascientist.com&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="spreadsheet"></category><category term="Data Science"></category><category term="scipy"></category></entry><entry><title>Handling Irregular File Formats</title><link href="https://slott56.github.io/2016_11_28-handling_irregular_file_formats.html" rel="alternate"></link><published>2016-11-28T08:05:00-05:00</published><updated>2016-11-28T08:05:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-11-28:/2016_11_28-handling_irregular_file_formats.html</id><summary type="html">&lt;p&gt;This is a common issue. We have a file which was printed for human
consumption. Consequently, it has many different kinds of lines.&lt;/p&gt;
&lt;p&gt;These are the two kinds of lines of interest:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;900296268 4/9/16 Mobility, Data Mining and Privacy Expired&lt;/p&gt;
&lt;p&gt;900295204 4/1/16 Pro .NET Best Practices …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This is a common issue. We have a file which was printed for human
consumption. Consequently, it has many different kinds of lines.&lt;/p&gt;
&lt;p&gt;These are the two kinds of lines of interest:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;900296268 4/9/16 Mobility, Data Mining and Privacy Expired&lt;/p&gt;
&lt;p&gt;900295204 4/1/16 Pro .NET Best Practices
Expired&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first is a single physical line.  It has four data elements. The
second is two physical lines. The first has three data elements.&lt;/p&gt;
&lt;p&gt;There are a number of other noise lines in the file which must be
filtered out.&lt;/p&gt;
&lt;p&gt;The first &amp;quot;solution&amp;quot; pitched to me could be summarized with this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Move &amp;quot;Expired&amp;quot; on a line by itself to the previous line&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;That was part of the email subject line. The body of the email was
some whining about regular expressions. Which I mostly ignored.
Multiline regular expressions are their own kind of challenge.&lt;/p&gt;
&lt;p&gt;We (should) all know
this: &lt;a class="reference external" href="https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/"&gt;https://blog.codinghorror.com/regular-expressions-now-you-have-two-problems/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let's do this without regular expressions. There are two things we
need to know. One is buffering, and the other is the best way to split
each line. It turns out that there are spaces as well as tabs, and can
can, by splitting on tabs, make a lot of progress.&lt;/p&gt;
&lt;p&gt;Instead of the good approach, I'll pick the other approach that
doesn't involve splitting on tabs.&lt;/p&gt;
&lt;p&gt;Here's the simulated file, with data lightly redacted.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sample_text = '''
&amp;quot;Your eBooks&amp;quot;

Show 200


Page: 1


Order # Date Title Formats Status Download
-------
xxx315605 9/30/16 R for Cloud Computing Available


xxx304790 6/21/16 Java XML and JSON Available
xxx304790 6/21/16 Accelerated DOM Scripting with Ajax, APIs, and Libraries Available

xxx291633 2/28/16 Practical Google Analytics and Google Tag Manager for Developers
Expired
'''
&lt;/pre&gt;
&lt;p&gt;It's not perfectly obvious (because of line wrapping) but there are
three examples of the &amp;quot;all-complete-in-one-line&amp;quot; records. There's one
example of the &amp;quot;two-lines&amp;quot; record.&lt;/p&gt;
&lt;p&gt;Rather than mess with the file, we'll build a file-like object with
our sample data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import io

file_like_object = io.StringIO(sample_text)
&lt;/pre&gt;
&lt;p&gt;I like this because it lets me write proper unit test cases.&lt;/p&gt;
&lt;p&gt;The file has four kinds of lines:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Complete Records&lt;/li&gt;
&lt;li&gt;Record Headers (without Available/Expired)&lt;/li&gt;
&lt;li&gt;Record Trailers (only Available/Expired)&lt;/li&gt;
&lt;li&gt;Noise&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll create some decision rules for the two obvious kinds of file
lines: complete records and trailers. We can deduce the headers based
on a simple adjacency rule: they precede a trailer. The fourth kind of
lines are those which are possible headers but are not immediately
prior to a trailer.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def complete(words):
    return len(words) &amp;gt; 3 and words[-1] in ('Available', 'Expired')

def trailer(words):
    return len(words) == 1 and words[0] in ('Available', 'Expired')
&lt;/pre&gt;
&lt;p&gt;We can spot these two kinds of lines easily. The other kinds require a
Buffered Generator.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def emit_clean(source):
    header = None
    for line in (line.strip() for line in source):
        words = [w.strip() for w in line.split()]
        if len(words) == 0: continue
        if complete(words):
            yield(line)
            header = None
        elif trailer(words) and header:
            yield(header + '\\t\\t' + line)
            header = None
        else:
            # Possible header
            # print('??', line)
            header = line
&lt;/pre&gt;
&lt;p&gt;The Buffered Generator is a way to implement a &amp;quot;look ahead one item&amp;quot;
(LA1) algorithm. We do this by buffering rows. When we get to the next
row we can use the buffered row and the current row to implement the
look-ahead logic.&lt;/p&gt;
&lt;p&gt;The actual implementation uses a look-behind buffer, header.&lt;/p&gt;
&lt;p&gt;The (line.strip() for line in source) generator expression strips away
leading and trailing spaces. This gets rid of the newline characters
at the end of each input line.&lt;/p&gt;
&lt;p&gt;The default behavior of split() is to split on whitespace. In this
case, it will create a number of words for complete records or header
records, and a single word for a trailer record. If we had split on
tab characters, some of this logic would be simplified.&lt;/p&gt;
&lt;p&gt;That's left as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;If the len(words) is zero, the line is blank.&lt;/p&gt;
&lt;p&gt;If the line matches the complete() function, we can yield it as one of
the iterable results of the generator function. We also clear out the
look-behind buffer, header.&lt;/p&gt;
&lt;p&gt;If the line is a trailer and we have a buffered look-behind line, this
is the two-physical-line case. We can assemble a complete record and
emit it.&lt;/p&gt;
&lt;p&gt;Otherwise, we don't know what the line is. It's a possible header
line, so we'll save it for later examination.&lt;/p&gt;
&lt;p&gt;This algorithm involves no regular expressions.&lt;/p&gt;
&lt;div class="section" id="with-regular-expressions"&gt;
&lt;h2&gt;With Regular Expressions&lt;/h2&gt;
&lt;p&gt;An alternative would use three regular expressions to match the three
kinds of lines.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re

all_one_pat =
  re.compile(&amp;quot;(.*)\\t(.*)\\t(.*)\\t\\t((?:Available)|(?:Expired))&amp;quot;)
header_pat = re.compile(&amp;quot;(.*)\\t(.*)\\t(.*)&amp;quot;)
trailer_pat = re.compile(&amp;quot;((?:Available)|(?:Expired))&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This has the advantage that we can then use the groups() method of
each successful match to emit useful data instead of text which needs
subsequent parsing. This leads to a slightly more robust process.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def emit_clean2(source):
    header = None
    for line in (line.strip() for line in source):
        if len(line) == 0: continue
        all_one_match = all_one_pat.match(line)
        header_match = header_pat.match(line)
        trailer_match = trailer_pat.match(line)
        if all_one_match:
            yield(all_one_match.groups())
            header = None
        elif header_match and not header:
            header = header_match.groups()
        elif trailer_match and header:
            yield header + trailer_match.groups()
            header = None
        else:
            pass # noise
&lt;/pre&gt;
&lt;p&gt;The essential processing involves seeing which of the regular
expressions match the line at hand. If it's all-in-one, this is good.
We can yield the groups of meaningful data. If it's a header, we can
save the groups. If it's a trailer, we can combine header and trailer
groups and yield the composite.&lt;/p&gt;
&lt;p&gt;This has the advantage of explicitly rejecting noise lines instead of
treating each noise line as a possible header.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="regular expressions"></category><category term="physical format"></category><category term="logical layout"></category></entry><entry><title>The Modern Python Cookbook</title><link href="https://slott56.github.io/2016_11_22-the_modern_python_cookbook.html" rel="alternate"></link><published>2016-11-22T08:00:00-05:00</published><updated>2016-11-22T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-11-22:/2016_11_22-the_modern_python_cookbook.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/application-development/modern-python-cookbook"&gt;https://www.packtpub.com/application-development/modern-python-cookbook&lt;/a&gt;
This is a large (!) collection of recipes, focused on Python 3,
exclusively.
It's much easier to write about the version of Python I actually use
each day, and leave the old, quirky, slow Python 2 behind. This book
doesn't have any &amp;quot;this will …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/application-development/modern-python-cookbook"&gt;https://www.packtpub.com/application-development/modern-python-cookbook&lt;/a&gt;
This is a large (!) collection of recipes, focused on Python 3,
exclusively.
It's much easier to write about the version of Python I actually use
each day, and leave the old, quirky, slow Python 2 behind. This book
doesn't have any &amp;quot;this will be different in Python 2&amp;quot; warnings. Those
days seem to have passed. Finally.
The clock is counting
down. &lt;a class="reference external" href="https://pythonclock.org/"&gt;https://pythonclock.org&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Lynda.com Discounts, including SOLID Programming Principles</title><link href="https://slott56.github.io/2016_11_16-lyndacom_discounts_including_solid_programming_principles.html" rel="alternate"></link><published>2016-11-16T08:00:00-05:00</published><updated>2016-11-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-11-16:/2016_11_16-lyndacom_discounts_including_solid_programming_principles.html</id><content type="html">&lt;p&gt;For Python Programmers: &lt;a class="reference external" href="https://www.lynda.com/Programming-Languages-tutorials/SOLID-Programming-Principles/471978-2.html?lpk35=9090&amp;amp;utm_medium=ldc-partner&amp;amp;utm_source=CMPRC&amp;amp;utm_content=524&amp;amp;utm_campaign=CD20442&amp;amp;bid=524&amp;amp;aid=CD20442"&gt;SOLID Programming
Principles&lt;/a&gt;
&lt;a class="reference external" href="https://www.lynda.com/trial/StevenLott"&gt;https://www.lynda.com/trial/StevenLott&lt;/a&gt; should get your a discount on
&lt;strong&gt;all&lt;/strong&gt; Lynda.com courses.
Feel free to share the links.&lt;/p&gt;
</content><category term="Technologies"></category><category term="Design Principles"></category><category term="#python"></category><category term="SOLID"></category></entry><entry><title>PyData DC 2016 -- YouTube Channel</title><link href="https://slott56.github.io/2016_11_08-pydata_dc_2016_youtube_channel.html" rel="alternate"></link><published>2016-11-08T08:00:00-05:00</published><updated>2016-11-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-11-08:/2016_11_08-pydata_dc_2016_youtube_channel.html</id><content type="html">&lt;p&gt;All The
Talks: &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLGVZCDnMOq0qLoYpkeySVtfdbQg1A_GiB"&gt;https://www.youtube.com/playlist?list=PLGVZCDnMOq0qLoYpkeySVtfdbQg1A_GiB&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You will learn a lot.&lt;/p&gt;
&lt;p&gt;Me: &lt;a class="reference external" href="https://www.youtube.com/watch?v=Zx3t7g2KU2Q&amp;amp;index=38&amp;amp;list=PLGVZCDnMOq0qLoYpkeySVtfdbQg1A_GiB"&gt;Steven Lott | NoSQL doesn't mean No
Schema&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pK8NCdfYq-M&amp;amp;index=45&amp;amp;list=PLGVZCDnMOq0qLoYpkeySVtfdbQg1A_GiB"&gt;Steven Lott | The Five Kinds of Python
Functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may learn something from my presentations.&lt;/p&gt;
</content><category term="Technologies"></category><category term="video"></category><category term="#python"></category><category term="pydata"></category></entry><entry><title>PyData DC 2016 -- The Five Kinds of Python Functions [Updated]</title><link href="https://slott56.github.io/2016_10_26-pydata_dc_2016_the_five_kinds_of_python_functions_updated.html" rel="alternate"></link><published>2016-10-26T07:58:00-04:00</published><updated>2016-10-26T07:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-10-26:/2016_10_26-pydata_dc_2016_the_five_kinds_of_python_functions_updated.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://slott56.github.io/five-kinds-of-python-functions"&gt;https://slott56.github.io/five-kinds-of-python-functions&lt;/a&gt;
Update: &lt;a class="reference external" href="https://www.youtube.com/watch?v=pK8NCdfYq-M&amp;amp;index=45&amp;amp;list=PLGVZCDnMOq0qLoYpkeySVtfdbQg1A_GiB"&gt;Steven Lott | The Five Kinds of Python
Functions&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="pydata"></category><category term="#python"></category><category term="functional python programming"></category></entry><entry><title>Speakers advice</title><link href="https://slott56.github.io/2016_10_25-speakers_advice.html" rel="alternate"></link><published>2016-10-25T08:00:00-04:00</published><updated>2016-10-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-10-25:/2016_10_25-speakers_advice.html</id><summary type="html">&lt;p&gt;First. Read this: &lt;a class="reference external" href="http://webapplog.com/10-conf-donts/"&gt;http://webapplog.com/10-conf-donts/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some additional thoughts on the don't list.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; reading to your audience unless you are a poet, journalist,
judge or politician. Poets and journalists are paid to write well and
read there words well. Judges and politicians are paid to be ultra
precise …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;First. Read this: &lt;a class="reference external" href="http://webapplog.com/10-conf-donts/"&gt;http://webapplog.com/10-conf-donts/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some additional thoughts on the don't list.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; reading to your audience unless you are a poet, journalist,
judge or politician. Poets and journalists are paid to write well and
read there words well. Judges and politicians are paid to be ultra
precise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; Type and Talk unless it is a Code Dojo presentation where
the typing is essential. I've seen too many bad type-and-talk where
the lack of organization made it nearly impossible to figure out what
was going on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; GIFs and clever graphics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; insulting people. Don't alienate your audience. If you
can't be completely 100% inclusive of every single human being in the
room, don't speak in public.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; sitting if you are able to stand. If you must sit, please
try to sit where folks can see you. This can't &lt;strong&gt;always&lt;/strong&gt; work.
Someone able to stand who chooses to sit is doing themselves a
disservice. A singer or vocal coach will tell you that your standing
posture helps you breathe properly and project properly. If you are
able to stand, please stand.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; nervous behaviors. &lt;strong&gt;Avoid&lt;/strong&gt; drawing attention to yourself,
and draw attention to your material  Fear (or nervousness) is hard to
avoid. It's important to focus on the audience and their curiosity
about your talk. They were intrigued by the title. They want to hear
you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; apologies. Apologize if you offend someone, of course. But
don't &amp;quot;pre-apologize&amp;quot; for some irrelevant aspect of your
presentation. Your audience came for the content, not for apologies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; too much sales pitch. I've sat through too many product
demos that had a half-hour sales pitch that left only a half-hour for
the actual useful information. This has happened even when I told
vendors -- explicitly -- not to provide any sales information during
the product demo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; too much personal background. A complete recitation of your
CV isn't interesting and brushes up against an Argument from
Authority fallacy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avoid&lt;/strong&gt; dressing badly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A list of things to &lt;strong&gt;do&lt;/strong&gt;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Speak with passion about your topic. Your slides are your road-map
through the agenda. A few key points and reminders are all you
should have.&lt;/li&gt;
&lt;li&gt;Speak to the people listening. Canned code examples are good, if
they emphasize your point. Copy and paste into an IDE if you are
demonstrating the IDE.&lt;/li&gt;
&lt;li&gt;Focus on the material, not other irrelevant cleverness.&lt;/li&gt;
&lt;li&gt;Focus on the audience as people interested in your topic.&lt;/li&gt;
&lt;li&gt;To project your voice -- and your presence -- you need to be
visible. Stand if you can. Try to be as visible as possible.&lt;/li&gt;
&lt;li&gt;Focus on your audience's need to hear your material. It's not
about you, it's about your content.&lt;/li&gt;
&lt;li&gt;Focus on the good, useful, informative information you're
providing.&lt;/li&gt;
&lt;li&gt;Present outstanding content first. Sales are merely a hoped-for
consequence of a good presentation.&lt;/li&gt;
&lt;li&gt;Your content should stand on it's own. You only need a brief
summary of your qualifications.&lt;/li&gt;
&lt;li&gt;Project your presence. Dress so that you can be seen without being
distracting.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="presentation"></category></entry><entry><title>Optimizing complex generator expressions [Updated]</title><link href="https://slott56.github.io/2016_10_20-optimizing_complex_generator_expressions_updated.html" rel="alternate"></link><published>2016-10-20T19:39:00-04:00</published><updated>2016-10-20T19:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-10-20:/2016_10_20-optimizing_complex_generator_expressions_updated.html</id><summary type="html">&lt;p&gt;See this: &lt;a class="reference external" href="https://twitter.com/jakevdp/status/786920174595158018"&gt;https://twitter.com/jakevdp/status/786920174595158018&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The core expression is similar to this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
y = (f(x) for x in L if f(x) is not None)
&lt;/pre&gt;
&lt;p&gt;There are a lot of variations on the filter. The point is that the
function appears twice in the above expression.&lt;/p&gt;
&lt;p&gt;We …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this: &lt;a class="reference external" href="https://twitter.com/jakevdp/status/786920174595158018"&gt;https://twitter.com/jakevdp/status/786920174595158018&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The core expression is similar to this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
y = (f(x) for x in L if f(x) is not None)
&lt;/pre&gt;
&lt;p&gt;There are a lot of variations on the filter. The point is that the
function appears twice in the above expression.&lt;/p&gt;
&lt;p&gt;We have a number of alternatives.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;y = filter(None, f(x) for x in L)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;y = filter(None, map(f, L))&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;y = (x for x in map(f, L) if x)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;y = (x for x in (f(y) for y in L) if x is not None)&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;y = (val for x in L for val in &lt;span class="pre"&gt;(f(x),)&lt;/span&gt; if val is not None)&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My preference is two steps, even though I don't really have a good
reason for this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
y1 = (f(x) for x in L)
y2 = (f for f in y1 if f)
&lt;/pre&gt;
&lt;p&gt;The thread leads to this
path: &lt;a class="reference external" href="https://twitter.com/TomAugspurger/status/786922167522828289"&gt;https://twitter.com/TomAugspurger/status/786922167522828289&lt;/a&gt;  and
the idea of &amp;quot;Let Bindings.&amp;quot; We could extend the language slightly to
bind a variable within the confines of the generator expression.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
y = (f(x) as val for x in L if val is not None)
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;as&lt;/strong&gt; clause binds the &lt;strong&gt;f(x)&lt;/strong&gt; to &lt;strong&gt;val&lt;/strong&gt; so that it can be
used in the &lt;strong&gt;if&lt;/strong&gt; clause.&lt;/p&gt;
&lt;p&gt;Summary: Interesting.&lt;/p&gt;
</content><category term="Technologies"></category><category term="generator expressions"></category><category term="functional python programming"></category><category term="#python"></category></entry><entry><title>Alternatives to PowerPoint (or Keynote) for Presentations</title><link href="https://slott56.github.io/2016_10_04-alternatives_to_powerpoint_or_keynote_for_presentations.html" rel="alternate"></link><published>2016-10-04T08:00:00-04:00</published><updated>2016-10-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-10-04:/2016_10_04-alternatives_to_powerpoint_or_keynote_for_presentations.html</id><summary type="html">&lt;p&gt;This: &lt;a class="reference external" href="https://opensource.com/business/16/9/alternatives-powerpoint"&gt;https://opensource.com/business/16/9/alternatives-powerpoint&lt;/a&gt;
Missing from the list? The S5-based &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/slide-shows.html"&gt;slide-show
tools&lt;/a&gt;
that are part of docutils.
The only issue with S5 is that you need to carefully review each and
every page to be sure you material fits. There's no autosizing of the
fonts, or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This: &lt;a class="reference external" href="https://opensource.com/business/16/9/alternatives-powerpoint"&gt;https://opensource.com/business/16/9/alternatives-powerpoint&lt;/a&gt;
Missing from the list? The S5-based &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/slide-shows.html"&gt;slide-show
tools&lt;/a&gt;
that are part of docutils.
The only issue with S5 is that you need to carefully review each and
every page to be sure you material fits. There's no autosizing of the
fonts, or other trickery to pack too much trash onto a slide.
TIL that Lync/Skype doesn't politely handle Keynote on a Mac. You must
mirror displays because Lync can only share one of your displays, and
it's not the one Keynote chooses to display on.
I often use Keynote because it's expedient. I sometimes use S5 to show
off an entirely open-source toolchain.&lt;/p&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="presentation"></category></entry><entry><title>Database Schema Migration</title><link href="https://slott56.github.io/2016_09_27-database_schema_migration.html" rel="alternate"></link><published>2016-09-27T08:00:00-04:00</published><updated>2016-09-27T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-09-27:/2016_09_27-database_schema_migration.html</id><summary type="html">&lt;p&gt;Some
thoughts: &lt;a class="reference external" href="http://workingwithdevs.com/delivering-databases-migrations-vs-state/"&gt;http://workingwithdevs.com/delivering-databases-migrations-vs-state/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This covers a lot of ground on the &lt;strong&gt;Declarative vs. Procedural&lt;/strong&gt;
question. It explains a lot of the considerations that lead to
choosing a procedural schema evolution vs. a declarative schema with
an implied change sequence to migrate to each new declared state.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some
thoughts: &lt;a class="reference external" href="http://workingwithdevs.com/delivering-databases-migrations-vs-state/"&gt;http://workingwithdevs.com/delivering-databases-migrations-vs-state/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This covers a lot of ground on the &lt;strong&gt;Declarative vs. Procedural&lt;/strong&gt;
question. It explains a lot of the considerations that lead to
choosing a procedural schema evolution vs. a declarative schema with
an implied change sequence to migrate to each new declared state.&lt;/p&gt;
&lt;p&gt;The article calls the declarative &amp;quot;state-based&amp;quot; and procedural
approach &amp;quot;migration-based&amp;quot;.&lt;/p&gt;
&lt;p&gt;My 2¢ are focused on this point:&lt;/p&gt;
&lt;blockquote&gt;
When using a state-based solution you will most often be using a
diff tool like those provided by Redgate or Visual Studio to
examine the differences and generate an upgrade script. While this
is a very efficient solution for most changes, with table renames
and a few other types of table refactoring they can do bad things,
...&lt;/blockquote&gt;
&lt;p&gt;This point about table refactoring is, for me, the show-stopper.
Relational theory tells me that I can map any schema to any other
schema using selection, projection, and join. I can denormalize
data and I can normalize again via group-by clauses. I can reduce
the original schema to a sequence of object-attribute-value
triples, and restructure this into any desired new schema.&lt;/p&gt;
&lt;p&gt;Given enough time, a change tracking tool should be able to find a
minimal-cost transformation from schema to schema. This might
involve a complex search over a large state space, and it
certainly involves creating costs for each alternative query
plan.&lt;/p&gt;
&lt;p&gt;Pragmatically, I'm not sold on this being a good idea. And I'm rarely
sure I even want to get involved in a fully automated solution. While
a tool might be able to detect and automate a variety of simple
changes, I think that developers must &lt;strong&gt;always&lt;/strong&gt; vet those change
scripts.&lt;/p&gt;
&lt;p&gt;In particular, the search space is emphatically &lt;strong&gt;not&lt;/strong&gt; limited to
select, project, and join. There are also database unload-reload,
index create and drop. There are even more complex operations like
creating intermediate results which aren't part of the final database
structure. With proper indices, these might actually be beneficial.&lt;/p&gt;
&lt;p&gt;In some cases, the continuous operation requirements are such that we
might have two copies of a database: one being used and the other
being transformed. A logger tracks transactions in the older copy and
a synchronizer replicates those transactions in the new copy. After
the data is moved, the customer access is moved via a feature toggle
from the old database to the new database.&lt;/p&gt;
&lt;div class="section" id="semantic-drift"&gt;
&lt;h2&gt;Semantic Drift&lt;/h2&gt;
&lt;p&gt;Also important is the issue of semantic drift. When we're making
structural changes where the &amp;quot;before&amp;quot; column names match the &amp;quot;after&amp;quot;
column names, then there's little chance for semantic drift. There's
still some possibility, though. We can (and sometimes do) repurpose
columns, preserving the original name. In some cases, we might change
a database constraint without renaming the column.&lt;/p&gt;
&lt;p&gt;In the larger case, of course, it doesn't require &amp;quot;‘hot-fix’ changes
to QA or even production databases&amp;quot; to create profound semantic
changes. All it takes is an app developer deciding that a column
should be repurposed. There's may be no structural change on the
schema overall.&lt;/p&gt;
&lt;p&gt;A non-structural change in some past release could have implications
for structural change in a future release. Imagine three columns in
three tables with the same names. Two started out life as simple
foreign keys to the third. But one became optional, and now the
semantics don't match but the names do. Automated tools are unlikely
to discern the intent here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion?&lt;/h2&gt;
&lt;p&gt;It's all procedural migration. I'm not declarative (&amp;quot;state&amp;quot;) tools
can be trusted beyond discerning the changes and suggesting a
possible migration.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data migration"></category><category term="database design"></category><category term="database administration"></category><category term="schema migration"></category></entry><entry><title>Bad Trends and Sloppy Velocity</title><link href="https://slott56.github.io/2016_09_21-bad_trends_and_sloppy_velocity.html" rel="alternate"></link><published>2016-09-21T18:58:00-04:00</published><updated>2016-09-21T18:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-09-21:/2016_09_21-bad_trends_and_sloppy_velocity.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read
this: &lt;a class="reference external" href="https://www.linkedin.com/pulse/story-points-evil-brad-black-in-the-market"&gt;https://www.linkedin.com/pulse/story-points-evil-brad-black-in-the-market&lt;/a&gt;-&lt;/div&gt;
&lt;div class="line"&gt;There are good quotes from Ron Jeffries on the worthlessness of story
points. (I've heard this from other Agile Consultants, also.) Story
Points are a political hack to make management stop measuring the
future.&lt;/div&gt;
&lt;div class="line"&gt;The future is very hard to measure. The …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read
this: &lt;a class="reference external" href="https://www.linkedin.com/pulse/story-points-evil-brad-black-in-the-market"&gt;https://www.linkedin.com/pulse/story-points-evil-brad-black-in-the-market&lt;/a&gt;-&lt;/div&gt;
&lt;div class="line"&gt;There are good quotes from Ron Jeffries on the worthlessness of story
points. (I've heard this from other Agile Consultants, also.) Story
Points are a political hack to make management stop measuring the
future.&lt;/div&gt;
&lt;div class="line"&gt;The future is very hard to measure. The difficulty in making
predictions is one of the things which distinguishes the future from
the past. There's entropy, and laws of thermodynamics, and random
quantum events that make it hard to determine exactly what might
happen next.&lt;/div&gt;
&lt;div class="line"&gt;If Schrödinger's cat is alive, we'll deliver this feature in this
sprint. If the cat is dead, the feature will be delayed. The unit test
result is entangled with the photon that may (or may not) have killed
the cat. If you check the unit tests, then the future is determined.
If you don't check the unit test, the future can be in any state.&lt;/div&gt;
&lt;div class="line"&gt;When project management becomes Velocity Dashboard Centered (VDC™),
that's a hint that something may be wrong.&lt;/div&gt;
&lt;div class="line"&gt;My suspicion on the cause of VDC?&lt;/div&gt;
&lt;div class="line"&gt;Product Owners (&amp;quot;Management&amp;quot;) may have given up on Agility, and want
to make &lt;strong&gt;commitments&lt;/strong&gt; to a a schedule they made up on a whiteboard
at an off-site meeting. Serious &lt;strong&gt;Commitments&lt;/strong&gt;. The &lt;strong&gt;commitment&lt;/strong&gt;
has taken on a life of its own, and deliverable features aren't really
being prioritized. The cadence or tempo has overtaken the actual
deliverable.&lt;/div&gt;
&lt;div class="line"&gt;It feels like the planning has slipped away from story-by-story
details.&lt;/div&gt;
&lt;div class="line"&gt;What can cause VDC?&lt;/div&gt;
&lt;div class="line"&gt;I think it might be too many layers of management. The PO's boss (or
boss's boss) has started dictating some kind of delivery schedule that
is uncoupled from reality. The various bosses up in the stratosphere
are making writing checks their teams can't cash.&lt;/div&gt;
&lt;div class="line"&gt;What can we do?&lt;/div&gt;
&lt;div class="line"&gt;I don't know. It's hard to provide schooling up the food chain to the
boss of the boss of the product owner. It's hard to explain to the
scrum master that the story points don't much matter, since the
stories exist independent of any numbering scheme.&lt;/div&gt;
&lt;div class="line"&gt;The link above says that there's some value in ordering the stories;
assigning random-ish point numbers somehow helps order them.&lt;/div&gt;
&lt;div class="line"&gt;I reject the last part of this. The stories can be ordered without any
numbers. The Agile manifesto is pretty clear on this point: talk about
it. The points don't enhance the conversation. Push the story cards
around on the board until you have something meaningful. Assigning
numbers is silliness.&lt;/div&gt;
&lt;div class="line"&gt;Actually. I think its harmful.&lt;/div&gt;
&lt;div class="line"&gt;Rolling numbers up to &amp;quot;senior&amp;quot; management isn't facilitating a
conversation. It's summarizing things with empty numerosity.
(&amp;quot;Numerosity&amp;quot;? Yes. Empty numerosity: applying numeric methods
inappropriately. For example, averaging the day of the week on which
it rains, for example, to discover something about Wednesday.)&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-best-part-tbp"&gt;
&lt;h2&gt;The Best Part (TBP™)&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Irreproducibility.&lt;/div&gt;
&lt;div class="line"&gt;On Project X, we had a velocity of 50 Story Points per Sprint. On
Project U, the &amp;quot;same&amp;quot; team -- someone quit and two new people were
hired -- had a velocity of 100 Story Points per Sprint. Wow! Right?&lt;/div&gt;
&lt;div class="line"&gt;Except. Of course, the numbers were inflated because the existing
folks figured the new folks would take longer to get things done. But
the new folks didn't take longer. And now the team is stuck calling a
3-point story a 5-point story because the new guys are calibrated to
that new range of random numbers.&lt;/div&gt;
&lt;div class="line"&gt;So what's comparable between the &amp;quot;same&amp;quot; team on two projects? It's not
actually the same people. That's out.&lt;/div&gt;
&lt;div class="line"&gt;We can try to pretend that the projects have the &amp;quot;same&amp;quot; technology
(Java 1.6 v. Java 1.8) or the same CI/CD pipeline (Ant v. Maven,
Hudson v. Jenkins) or even the same overall enterprise. But
practically, there's nothing repeatable about any of it. It's just
empty numerosity.&lt;/div&gt;
&lt;div class="line"&gt;Sorry. I'm not sold, yet, on the value of Story Points.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="agile"></category><category term="project management"></category></entry><entry><title>What was I thinking?</title><link href="https://slott56.github.io/2016_09_20-what_was_i_thinking.html" rel="alternate"></link><published>2016-09-20T08:00:00-04:00</published><updated>2016-09-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-09-20:/2016_09_20-what_was_i_thinking.html</id><summary type="html">&lt;p&gt;Check out this idiocy: &lt;a class="reference external" href="https://github.com/slott56/py-false"&gt;https://github.com/slott56/py-false&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What is the point? Seriously. What. The. Actual. Heck?&lt;/p&gt;
&lt;p&gt;I think of it this way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Languages are a cool thing. Especially programming languages where
there's an absolute test -- the Turing machine -- for completeness.&lt;/li&gt;
&lt;li&gt;The Forth-like stack language is a cool thing …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Check out this idiocy: &lt;a class="reference external" href="https://github.com/slott56/py-false"&gt;https://github.com/slott56/py-false&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What is the point? Seriously. What. The. Actual. Heck?&lt;/p&gt;
&lt;p&gt;I think of it this way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Languages are a cool thing. Especially programming languages where
there's an absolute test -- the Turing machine -- for completeness.&lt;/li&gt;
&lt;li&gt;The Forth-like stack language is a cool thing. I've always liked
Forth because if it's elegant simplicity.&lt;/li&gt;
&lt;li&gt;The use of a first-class lambda construct to implement if and while
is particularly elegant.&lt;/li&gt;
&lt;li&gt;Small languages are fun because they can be understood completely.
There are no tricky edge cases in the semantics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have ½ of a working GW-Basic implementation in Python, too. It
runs. It runs some programs like HamCalc sort of okay-ish. I use it
to validate assumptions about the legacy code
in &lt;a class="reference external" href="https://github.com/slott56/HamCalc-2.1"&gt;https://github.com/slott56/HamCalc-2.1&lt;/a&gt;.  Some day, I may make a
sincere effort to get it working.&lt;/p&gt;
&lt;p&gt;Even languages like the one that supports the classic Adventure game
are part of this small language fascination.
See &lt;a class="reference external" href="http://www.literateprogramming.com/adventure.pdf"&gt;adventure.pdf&lt;/a&gt; for
a detailed analysis of this game; this includes the little language
you use to interact with the game.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="py-false"></category><category term="interpreted"></category><category term="Programming Languages"></category><category term="forth"></category></entry><entry><title>On One Aspect of Design Patterns -- Flexibility</title><link href="https://slott56.github.io/2016_09_13-on_one_aspect_of_design_patterns_flexibility.html" rel="alternate"></link><published>2016-09-13T08:00:00-04:00</published><updated>2016-09-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-09-13:/2016_09_13-on_one_aspect_of_design_patterns_flexibility.html</id><summary type="html">&lt;p&gt;Something I forget to think about is the degree of detail or
granularity of design patterns.  I have my own viewpoint and I often
assume that others share it.&lt;/p&gt;
&lt;p&gt;Here's a quote from an email describing the PLoP (Pattern Languages of
Programs) patterns as quite distinct from the Gang of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Something I forget to think about is the degree of detail or
granularity of design patterns.  I have my own viewpoint and I often
assume that others share it.&lt;/p&gt;
&lt;p&gt;Here's a quote from an email describing the PLoP (Pattern Languages of
Programs) patterns as quite distinct from the Gang of Four (&lt;em&gt;Design
Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt;) patterns.&lt;/p&gt;
&lt;blockquote&gt;
In the main, the PLoP patterns are less granular than the persnickety
GoF
&amp;quot;Design Patterns.&amp;quot; (Classic GoF, in part, static type binding
work-arounds. And
you need to talk about a &amp;quot;facade&amp;quot; pattern? Really? Although see
Fowler's at it
again, coining a ™ term - &amp;quot;fluent API&amp;quot; - for Some Not Egregiously
Stupid
Practice, to feed to the credulous who have never reflected on what
they are doing.)&lt;/blockquote&gt;
&lt;p&gt;Cutting through the editorializing, the author is describing two
families.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GoF patterns that are essentially ways to cope with static type checking in Java and C++.&lt;/li&gt;
&lt;li&gt;PLoP patterns which are a little more generic and more widely applicable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More...&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Plug-in Pattern&amp;quot; is a nice example. Enumerates the stuff you kinda
know, with
qualities / attributes of its proposal, plus application samples /
outcomes of
applying the pattern. The claims to relevance throughout are
reminiscent of the
investigation behind Parnas' &amp;quot;Criteria for Decomposing Systems into
Modules.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;My habit is to assume this is pretty widely known. I assume everyone
has wrestled with design patterns large and small and found that some
of the GoF apply to Python, but the implementation details will
differ. Dramatically.&lt;/p&gt;
&lt;p&gt;Look at the &lt;strong&gt;Singleton&lt;/strong&gt; design pattern, for example. The concept is
profound. There are times when we want stateful, global,
&lt;strong&gt;Singleton&lt;/strong&gt; instances. The Java or C++ technique of a small factory
method which returns the one-and-only instance (or creates the
one-and-only instance in the rare edge case) is extremely strange in
Python. We can implement it. But why?&lt;/p&gt;
&lt;p&gt;Module objects in Python are stateful singletons. Rather than invent
a &lt;strong&gt;Singleton&lt;/strong&gt; class, we can -- trivially -- just use a module. And
we're done. Problem solved. No Code Written.&lt;/p&gt;
&lt;p&gt;The email served as a reminder that sometimes people aren't quite so
flexible in their understanding of design patterns. I need to cut
them some slack and guide them to seeing that there's wiggle room
there. The email reminds me that some people feel compelled to either
follow the GoF prescription or discard the GoF entirely. The reminder
about PLoP and other pattern languages is a helpful reminder to be
more flexible.&lt;/p&gt;
&lt;p&gt;The point here is that patterns are a concept. Not a law.&lt;/p&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="mastering object-oriented python"></category></entry><entry><title>Programming language correlates with salary?</title><link href="https://slott56.github.io/2016_09_06-programming_language_correlates_with_salary.html" rel="alternate"></link><published>2016-09-06T08:00:00-04:00</published><updated>2016-09-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-09-06:/2016_09_06-programming_language_correlates_with_salary.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.bignerdranch.com/blog/which-programming-language-will-earn-you-the-highest-salary/"&gt;https://www.bignerdranch.com/blog/which-programming-language-will-earn-you-the-highest-salary/&lt;/a&gt;
Okay. I like that.
I wonder what the r&lt;sup&gt;2&lt;/sup&gt; value is.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Obscure Standards, Packaged Products, Latent Bugs</title><link href="https://slott56.github.io/2016_08_30-obscure_standards_packaged_products_latent_bugs.html" rel="alternate"></link><published>2016-08-30T08:00:00-04:00</published><updated>2016-08-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-08-30:/2016_08_30-obscure_standards_packaged_products_latent_bugs.html</id><summary type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://jeffq.com/blog/the-ethernet-pause-frame/"&gt;http://jeffq.com/blog/the-ethernet-pause-frame/&lt;/a&gt;
Fascinating.
A world of interconnected devices in which we place a kind of implicit
trust. There's little visibility for ordinary consumers. It takes a
skilled specialist to determine that there are flaws in a product.
It's not that the system is &amp;quot;flaky.&amp;quot;
It's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://jeffq.com/blog/the-ethernet-pause-frame/"&gt;http://jeffq.com/blog/the-ethernet-pause-frame/&lt;/a&gt;
Fascinating.
A world of interconnected devices in which we place a kind of implicit
trust. There's little visibility for ordinary consumers. It takes a
skilled specialist to determine that there are flaws in a product.
It's not that the system is &amp;quot;flaky.&amp;quot;
It's that this combination of components each with unexpected edge-case
behavior is actually broken.&lt;/p&gt;
</content><category term="Technologies"></category><category term="internet of things"></category><category term="architecture"></category></entry><entry><title>On Generator Functions, Yield and Return</title><link href="https://slott56.github.io/2016_08_26-on_generator_functions_yield_and_return.html" rel="alternate"></link><published>2016-08-26T07:22:00-04:00</published><updated>2016-08-26T07:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-08-26:/2016_08_26-on_generator_functions_yield_and_return.html</id><summary type="html">&lt;p&gt;Here's the question, lightly edited to remove the garbage. (Sometimes
I'm charitable and call it &amp;quot;rambling&amp;quot;. Today, I'm not feeling
charitable about the garbage writing style filled with strange
assumptions instead of questions.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;someone asked if you could have both a yield and a return in the same
... function/iterator …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Here's the question, lightly edited to remove the garbage. (Sometimes
I'm charitable and call it &amp;quot;rambling&amp;quot;. Today, I'm not feeling
charitable about the garbage writing style filled with strange
assumptions instead of questions.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;someone asked if you could have both a yield and a return in the same
... function/iterator. There was debate and the senior people said,
let's actually write code. They wrote code and proved that couldn't
have both a yield and a return in the same ... function/iterator.
....&lt;/p&gt;
&lt;p&gt;The meeting moved on w/out anyone asking the why question. Why
doesn't it make sense to have both a yield and a return. ...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The impact of the &lt;strong&gt;yield&lt;/strong&gt; statement can be confusing. Writing code
to mess around with it was somehow unhelpful. And the shocking
&amp;quot;proved that couldn't have both a yield and a return in the same ...
function&amp;quot; is a serious problem.&lt;/p&gt;
&lt;p&gt;(Or a seriously incorrect summary of the conversation; a very real
possibility considering the garbage-encrusted email. Or a sign that
Python 3 isn't widely-enough used and the emil omitted this essential
fact. And yes, I'm being overly sensitive to the garbage. But there's
a better way to come to grips with reality and it involves asking
questions and parsing details instead of repeating assumptions and
writing garbage.)&lt;/p&gt;
&lt;div class="section" id="an-example"&gt;
&lt;h2&gt;An example&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; def silly(n, stop=None):
...     for i in range(n):
...         if i == stop: return
...         yield i

&amp;gt;&amp;gt;&amp;gt; list(silly(5))
[0, 1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; list(silly(5, stop=3))
[0, 1, 2]
&lt;/pre&gt;
&lt;p&gt;This works in both Python 3.5.1 and 2.7.10.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-discussion"&gt;
&lt;h2&gt;Some Discussion&lt;/h2&gt;
&lt;p&gt;A definition with no &lt;strong&gt;yield&lt;/strong&gt; is a conventional function: the
parameters from some domain are mapped to a return value in some
range. Each mapping is a single evaluation of the function with
concrete argument values.&lt;/p&gt;
&lt;p&gt;A definition with a &lt;strong&gt;yield&lt;/strong&gt; statement becomes an iterable generator
of (potentially) multiple values. The &lt;strong&gt;return&lt;/strong&gt; statement changes
its behavior slightly. It no longer defines the one (and only) return
value. In a generator function (one that has a &lt;strong&gt;yield&lt;/strong&gt;) the
&lt;strong&gt;return&lt;/strong&gt; statement can be thought of as if it raised the
&lt;strong&gt;StopIteration&lt;/strong&gt; exception as a way to exit from the generator.&lt;/p&gt;
&lt;p&gt;As can be seen in the example above, both statements are in one
function. They both work to provide expected semantics.&lt;/p&gt;
&lt;p&gt;The code which gets an error is this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; def silly(n, stop=3):
...     for i in range(n):
...         if i == step: return &amp;quot;boom!&amp;quot;
...         yield i
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;why?&amp;quot; question is should -- perhaps -- be obvious at this point.
The &lt;strong&gt;return&lt;/strong&gt; raises an exception; it doesn't provide a value.&lt;/p&gt;
&lt;p&gt;The topic, however, remains troubling. The phrase &amp;quot;have both a yield
and a return&amp;quot; is bothersome because it fails to recognize that the
&lt;strong&gt;yield&lt;/strong&gt; statement has a special role. The &lt;strong&gt;yield&lt;/strong&gt; statement
transforms the semantics of the function to make it into a different
object with similar syntax.&lt;/p&gt;
&lt;p&gt;It's not a matter of having them &amp;quot;both&amp;quot;. It's matter of having a
&lt;strong&gt;return&lt;/strong&gt; in a generator. This is an entirely separate and
trivial-to-answer question.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-long-useless-rant"&gt;
&lt;h2&gt;A Long Useless Rant&lt;/h2&gt;
&lt;p&gt;The email seems to contain an implicit assumption. It's the notion
that programming language semantics are subtle and slippery things.
And even &amp;quot;senior people&amp;quot; can't get it right. Because all programming
languages (other then the email sender's personal favorite) are
inherently confusing. The confusion cannot be avoided.&lt;/p&gt;
&lt;p&gt;There are times when programming language semantics &lt;strong&gt;are&lt;/strong&gt;
confusing.  For example, the ++ operator in C is confusing. Nothing
can be done about that. The original definition was tied to the
PDP-11 machine instructions. Since then... Well.... Aspects of the
generated code are formally undefined.  Many languages have one or
more places where the semantics are &amp;quot;undefined&amp;quot; or only defined by
example.&lt;/p&gt;
&lt;p&gt;This is not one of those times.&lt;/p&gt;
&lt;p&gt;Here's the real problem I have with the garbage aspect of the email.
If you bring personal baggage to the conversation -- i.e.,
assumptions based on a comparison between some other language and
Python -- confusion will erupt all over the place. Languages are
different. Concepts don't map from language to language very well.&lt;/p&gt;
&lt;p&gt;Yes, there are simple abstract principles which have different
concrete realizations in different languages. But among the various
concrete realizations, there may not be a simple mapping.&lt;/p&gt;
&lt;p&gt;It's essential to discard all knowledge of all previous favorite
programming languages when learning a new language.
I'll repeat that for the author of the email.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Don't Go To The Well With A Full Bucket.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;You won't get anything.&lt;/p&gt;
&lt;p&gt;In this specific case, the notion of &amp;quot;function&amp;quot; in Python is expanded
to include two superficially similar things. The syntax is nearly
identical. But the behaviors are remarkably different. It's essential
to grasp the idea that the two things are different, and can't be
casually lumped together as &amp;quot;function/iterator&amp;quot;.&lt;/p&gt;
&lt;p&gt;The crux of the email appears to be a failure to get the Python
language rules in a profound way.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="generator functions"></category></entry><entry><title>Twelve Important Design Patterns</title><link href="https://slott56.github.io/2016_08_16-twelve_important_design_patterns.html" rel="alternate"></link><published>2016-08-16T08:00:00-04:00</published><updated>2016-08-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-08-16:/2016_08_16-twelve_important_design_patterns.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read this: &lt;a class="reference external" href="http://12factor.net/"&gt;http://12factor.net/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Then. After reading it. Read it again to be sure you've got it. It's
dense with best practices.&lt;/div&gt;
&lt;div class="line"&gt;Now that you've read it, make yourself a Quality Engineering
checklist.&lt;/div&gt;
&lt;div class="line"&gt;I. Codebase: One codebase tracked in revision control, many deploys&lt;/div&gt;
&lt;div class="line"&gt;II. Dependencies: Explicitly declare and isolate …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read this: &lt;a class="reference external" href="http://12factor.net/"&gt;http://12factor.net/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Then. After reading it. Read it again to be sure you've got it. It's
dense with best practices.&lt;/div&gt;
&lt;div class="line"&gt;Now that you've read it, make yourself a Quality Engineering
checklist.&lt;/div&gt;
&lt;div class="line"&gt;I. Codebase: One codebase tracked in revision control, many deploys&lt;/div&gt;
&lt;div class="line"&gt;II. Dependencies: Explicitly declare and isolate dependencies&lt;/div&gt;
&lt;div class="line"&gt;III. Config: Store config in the environment&lt;/div&gt;
&lt;div class="line"&gt;IV. Backing services: Treat backing services as attached resources&lt;/div&gt;
&lt;div class="line"&gt;V. Build, release, run: Strictly separate build and run stages&lt;/div&gt;
&lt;div class="line"&gt;VI. Processes: Execute the app as one or more stateless processes&lt;/div&gt;
&lt;div class="line"&gt;VII. Port binding: Export services via port binding&lt;/div&gt;
&lt;div class="line"&gt;VIII. Concurrency: Scale out via the process model&lt;/div&gt;
&lt;div class="line"&gt;IX. Disposability: Maximize robustness with fast startup and graceful
shutdown&lt;/div&gt;
&lt;div class="line"&gt;X. Dev/prod parity: Keep development, staging, and production as
similar as possible&lt;/div&gt;
&lt;div class="line"&gt;XI. Logs: Treat logs as event streams&lt;/div&gt;
&lt;div class="line"&gt;XII. Admin processes: Run admin/management tasks as one-off processes&lt;/div&gt;
&lt;div class="line"&gt;If your app doesn't follow all of these patterns, you've got technical
debt to work off. Start by posting the debt remediation stories in
Jira (or whatever you're using.)&lt;/div&gt;
&lt;div class="line"&gt;I've got config issues left, right, and center. Numerous assumptions
include the URL's for RESTful services on which my RESTful services
rely: this is not good.&lt;/div&gt;
&lt;div class="line"&gt;Some of these things, however, are a done deed in the Python/Flask
world with no real thinking required.&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Build, release, run - done&lt;/li&gt;
&lt;li&gt;Processes - done&lt;/li&gt;
&lt;li&gt;Port binding - done&lt;/li&gt;
&lt;li&gt;Disposability - done&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Other things require some care. And the config is something that I've
really got to fix.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="flask"></category><category term="WebServices"></category><category term="REST"></category></entry><entry><title>That Feeling When... You're reading your own documentation because it's useful and (mostly) correct</title><link href="https://slott56.github.io/2016_08_09-that_feeling_when_youre_reading_your_own_documentation_because_its_useful_and_mostly_correct.html" rel="alternate"></link><published>2016-08-09T08:00:00-04:00</published><updated>2016-08-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-08-09:/2016_08_09-that_feeling_when_youre_reading_your_own_documentation_because_its_useful_and_mostly_correct.html</id><summary type="html">&lt;p&gt;I'm looking at code (as a man does) and I can't remember if there's a
class that does X. There's a lot of code. I wrote almost all of it. And
-- maybe it's the gin -- but I just can't recall if there's an X. It
seems like there should be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm looking at code (as a man does) and I can't remember if there's a
class that does X. There's a lot of code. I wrote almost all of it. And
-- maybe it's the gin -- but I just can't recall if there's an X. It
seems like there should be.
Scan. Scan. Scroll. Scroll.
Read. Read.
Wait!
I have a pretty good gh-pages branch for this. Sphinx-based. Mostly
up-to-date. Let's look there.
Ahhh. So much nicer than scrolling through code. Indexes work.
This whole &amp;quot;documentation&amp;quot; thing is pretty cool. Now I'm actually happy
that other people guilted me into doing it.&lt;/p&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="sphinx"></category><category term="docutils"></category></entry><entry><title>Lamenting the Death of Object-Oriented Programming. (Sigh) Again?</title><link href="https://slott56.github.io/2016_08_02-lamenting_the_death_of_object_oriented_programming_sigh_again.html" rel="alternate"></link><published>2016-08-02T08:00:00-04:00</published><updated>2016-08-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-08-02:/2016_08_02-lamenting_the_death_of_object_oriented_programming_sigh_again.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/&amp;#64;cscalfani/goodbye-object-oriented-programming-a59cda4c0e53#.oe5r8bgir"&gt;Goodbye, Object Oriented
Programming&lt;/a&gt;.
I don't want to say that the entire article is bunk. It's not. It raises
a few good points. Points which I thought were pretty well known.
What's aggravating is that this lamentation is overly broad.  It treats
all languages as if they're Java or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://medium.com/&amp;#64;cscalfani/goodbye-object-oriented-programming-a59cda4c0e53#.oe5r8bgir"&gt;Goodbye, Object Oriented
Programming&lt;/a&gt;.
I don't want to say that the entire article is bunk. It's not. It raises
a few good points. Points which I thought were pretty well known.
What's aggravating is that this lamentation is overly broad.  It treats
all languages as if they're Java or C++. That's not true, and as a
consequence, the article is less useful than it could be.
&lt;strong&gt;Banana Monkey Jungle Problem&lt;/strong&gt;. Only true if you are sadly mistaken
about the unit of reuse. The class as unit of reuse -- across projects
-- is false, has been false, and will always be false. The idea of class
inheritance for reuse makes perfect sense. Sharing individual classes
between projects has never (as far as I know) been a promise of OO
programming. Maybe I read the wrong books and missed that promise.
&lt;strong&gt;The Triangle Problem&lt;/strong&gt;. Isn't actually a problem. Python has a defined
method resolution order.
&lt;strong&gt;The Fragile Base Class Problem&lt;/strong&gt;. This points out the well known issue
with having concrete classes depend on other concrete classes. The SOLID
design principles suggest concrete classes should depend on
abstractions. Abstractions do not suffer (as much) from the fragile base
class problem.
&lt;strong&gt;The Hierarchy Problem&lt;/strong&gt;. I guess the idea that the real world is
multi-dimensional can be confusing. If everything has to be force-fit
into single inheritance, this would create the hierarchy problem. If we
allow multiple inheritance, this problem evaporates.
&lt;strong&gt;The Reference Problem&lt;/strong&gt;. Even C++ has &amp;quot;smart&amp;quot; pointer packages. Java
has garbage collection. Python does reference counting. This is only a
problem if you go out of your way to deal with pointers in a primitive
way.
The part on Polymorphism didn't make any sense. There didn't seem to be
a tidy problem. Just a confusingly vague statement that &amp;quot;Interfaces will
give you [polymorphism?]. And without all of the baggage of OO&amp;quot;. I don't
get how interfaces are necessary without the baggage of OO. So, I can't
really try to refute this.
In the long run, I guess this was a way to introduce some of the
benefits of a functional approach. I'm not sure that this kind of
criticism of object-oriented programming is very helpful. It doesn't
apply to all OO languages, so it's misleading at best. (At worst, it's
simply wrong.)
I think these problems are interesting and can be used to show the
benefits of functional programming. But without the actual functional
programming examples, this isn't very useful.&lt;/p&gt;
</content><category term="Technologies"></category><category term="functional programming"></category><category term="object-oriented design"></category><category term="object-oriented language"></category></entry><entry><title>Another Python to the Rescue Story -- Creating a DSL from Python Class Definitions</title><link href="https://slott56.github.io/2016_07_26-another_python_to_the_rescue_story_creating_a_dsl_from_python_class_definitions.html" rel="alternate"></link><published>2016-07-26T08:00:00-04:00</published><updated>2016-07-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-07-26:/2016_07_26-another_python_to_the_rescue_story_creating_a_dsl_from_python_class_definitions.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://medium.com/capital-one-developers/automating-nosql-database-builds-a-python-to-the-rescue-story-that-never-gets-old-1d9adbcf6792#.8xp69yxqj"&gt;https://medium.com/capital-one-developers/automating-nosql-database-builds-a-python-to-the-rescue-story-that-never-gets-old-1d9adbcf6792#.8xp69yxqj&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Getting Rid of the Gang-of-Four Design Patterns is Nonsense</title><link href="https://slott56.github.io/2016_07_12-getting_rid_of_the_gang_of_four_design_patterns_is_nonsense.html" rel="alternate"></link><published>2016-07-12T08:00:00-04:00</published><updated>2016-07-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-07-12:/2016_07_12-getting_rid_of_the_gang_of_four_design_patterns_is_nonsense.html</id><summary type="html">&lt;p&gt;Someone found Yet Another Post (YAP™) insisting that the Gang of Four
(GOF™) patterns were on their last legs. The email was misleading,
because this is not precisely what the article said. The bottom-line
was that Design Patterns in general are merely a response to gaps in
the underlying programming …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Someone found Yet Another Post (YAP™) insisting that the Gang of Four
(GOF™) patterns were on their last legs. The email was misleading,
because this is not precisely what the article said. The bottom-line
was that Design Patterns in general are merely a response to gaps in
the underlying programming language. A position that's nonsense at its
very foundation.&lt;/p&gt;
&lt;p&gt;The lexicon of design patterns varies from language to language. GoF
patterns aren't &amp;quot;going away.&amp;quot; They're part of the Java/C++ world. They
don't apply quite the same way to Python or functional languages.&lt;/p&gt;
&lt;p&gt;There's a more serious issue, though: Language Mapping. First some
background.&lt;/p&gt;
&lt;div class="section" id="design-patterns"&gt;
&lt;h2&gt;Design Patterns&lt;/h2&gt;
&lt;p&gt;Design Patterns will always exist. They're an artifact of how we
process the world. We tend to classify individual objects so that we
don't have to deal with each object as a separate wonder of nature.&lt;/p&gt;
&lt;p&gt;It's Just Another Brick In The Wall.&lt;/p&gt;
&lt;p&gt;We don't have to examine each rectangular solid of ceramic and
understand the wonderfulness of it. We can group and summarize.
Classify. Brick is a design pattern. So is masonry. So is
wall. They're all patterns. It's how we think.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns-and-language-gaps"&gt;
&lt;h2&gt;Design Patterns and Language Gaps&lt;/h2&gt;
&lt;p&gt;There's a claim that moving toward functional languages will kill
design patterns. This presumes (partly) that non-OO languages
magically don't have design patterns. This is (see above) kind of
insane. Languages have design patterns. We recognize these patterns
all the time.&lt;/p&gt;
&lt;p&gt;A functional language has a common technique (or pattern) for visiting
nodes in a hierarchy. We don't dwell on the wonderfulness of the code
as if we'd never seen it before. Instead, we classify it based on the
design pattern, and leverage this higher-level understanding to figure
out why we're walking a hierarchy.&lt;/p&gt;
&lt;p&gt;Sounding the death knell for design patterns also presumes (partly)
that functional languages are magically more complete that OO
languages. In this newer better language, we don't need patterns
because there are no gaps. This is pretty much nutso, too. The
Patterns Fill Language Gaps school of thought ignores the fact that
there are many ways to implement these &amp;quot;gaps&amp;quot;. We can use GoF design
patterns, or we can use other software designs that don't fit the GoF
design patterns. Both work.&lt;/p&gt;
&lt;p&gt;The patterns aren't filling a &amp;quot;gap.&amp;quot; They're providing guidance on how
to implement something. That's all. Nothing more. Guidance.&lt;/p&gt;
&lt;p&gt;&amp;quot;But wait,&amp;quot; you say, &amp;quot;since I needed to write code, that's evidence
that there's a gap.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;What?&amp;quot; I ask, incredulous. &amp;quot;Are you claiming that &lt;strong&gt;any&lt;/strong&gt; code is
evidence of a language gap? Does that mean &lt;strong&gt;all&lt;/strong&gt; application
software is just a language gap?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Let's not be silly,&amp;quot; you say. &amp;quot;I can split a hair and create a tiny
distinction between software I shouldn't have to write and software I
should have to write.&amp;quot;&lt;/p&gt;
&lt;p&gt;I remain incredulous.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns-as-damage"&gt;
&lt;h2&gt;Design Patterns as Damage&lt;/h2&gt;
&lt;p&gt;The idea that somehow the GoF design patterns are a problem is also
goofy. The GoF design patterns are pretty slick. They solve a fairly
broad suite of problems in an elegant and consistent manner.&lt;/p&gt;
&lt;p&gt;They're just good design.&lt;/p&gt;
&lt;p&gt;Yes, they can be complex. Sorry about that. Software can be complex if
you want really excellent flexibility and extensibility.&lt;/p&gt;
&lt;p&gt;AND.&lt;/p&gt;
&lt;p&gt;Bonus.&lt;/p&gt;
&lt;p&gt;Software can be complex when you have to work around the problems of
&amp;quot;compiler&amp;quot; and &amp;quot;locked libraries&amp;quot; and &amp;quot;no source.&amp;quot; That is, the GoF
patterns apply in full force for C++ and Java where you're trying to
protect your intellectual property by disclosing only headers and
obfuscated implementation details. Indeed, there are few alternatives
to the GoF patterns if you're going to distribute a framework that has
no visible source and needs to leave extension points for users.&lt;/p&gt;
&lt;p&gt;If you don't have Locked-NoSource-Compiled code as a backdrop, the GoF
patterns can be simplified a little. But some of the patterns are
essential. And remain essential. There are some really great ideas
there.&lt;/p&gt;
&lt;p&gt;In Python world, we rely on a modified subset of the GoF patterns.
They work extremely well.&lt;/p&gt;
&lt;p&gt;When writing functional-style Python using immutable data structures
(to the extent possible), we use a different set of design patterns.
Not so many GoF patterns when we're trying to avoid stateful objects.
But some patterns (like the Abstract Factory) are really very helpful
even in a largely functional context. It morphs from an abstract
factory &lt;strong&gt;class&lt;/strong&gt; to a factory &lt;strong&gt;function&lt;/strong&gt;, and it loses the
&amp;quot;abstract&amp;quot; concept that's part of C++ and Java, but the core
&lt;strong&gt;Factory&lt;/strong&gt; design pattern remains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-serious-issue"&gt;
&lt;h2&gt;The Serious Issue&lt;/h2&gt;
&lt;p&gt;The serious issue that is surfaced by the email is Language Mapping.
We cannot (and must not) try to map languages to each other. What is
true for Java design is emphatically not true for Python design. And
it doesn't apply to assembly languages, FORTRAN, FORTH, or COBOL.&lt;/p&gt;
&lt;p&gt;Languages are different.&lt;/p&gt;
&lt;p&gt;There. I said it.&lt;/p&gt;
&lt;p&gt;If there was an underlying &amp;quot;universal deep structure&amp;quot; behind all
programming languages, the surface features would be merely syntax,
and we'd have automated translation among languages. The universal
deep structure (the underlying Turing Machine that does computations)
appears to be too abstract to map well among programming languages.
Hence the lack of translators.&lt;/p&gt;
&lt;p&gt;When switching among languages, it's important to leave all baggage
behind.&lt;/p&gt;
&lt;p&gt;When moving from Java &amp;lt; 8 to Java &amp;gt;= 8&amp;lt;8 java=&amp;quot;&amp;quot; to=&amp;quot;&amp;quot;&amp;gt; (i.e.,
non-functional Java to more functional Java) we can't &lt;strong&gt;trivially&lt;/strong&gt;
map all design patterns among the language features. It's a new
language with new features that happens to be compatible with the old
language.&lt;/p&gt;
&lt;p&gt;Attempting to trivially map concepts between non-functional (or
strictly-OO Java) and more functional Java leads to dumb conclusions.
Like the GoF patterns are dying. Or the GoF patterns represent damage
or something else equally goofy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;The language changes lead to design pattern changes.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Language change doesn't deserve an gleeful/anguished blog post
celebrating/lamenting the differences. It's a consequence of learning
a new language, or new features of an existing language.&lt;/p&gt;
&lt;p&gt;Please avoid mapping languages to each other.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="great-info-thanks-for-sharing-information-with"&gt;
&lt;h2&gt;Great Info!!! Thanks for sharing information with ...&lt;/h2&gt;
&lt;p&gt;Sathya&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-30 06:38:50.550000-04:00&lt;/p&gt;
&lt;p&gt;Great Info!!! Thanks for sharing information with us. If someone wants
to know about &lt;a class="reference external" href="https://neoehs.com"&gt;Safety Software&lt;/a&gt; and &lt;a class="reference external" href="https://neoehs.com/"&gt;Health and
Safety Software&lt;/a&gt; I think this is the right place
for you.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="C"></category><category term="#python"></category><category term="functional programming"></category><category term="object-oriented design"></category><category term="java"></category></entry><entry><title>Why Python? (Sad Follow-up)</title><link href="https://slott56.github.io/2016_06_21-why_python_sad_follow_up.html" rel="alternate"></link><published>2016-06-21T08:00:00-04:00</published><updated>2016-06-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-06-21:/2016_06_21-why_python_sad_follow_up.html</id><summary type="html">&lt;p&gt;In &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2016_06_07-why_python_whats_it_good_for_how_is_it_special.html"&gt;Why Python?&lt;/a&gt;&amp;quot;
I linked to a deep and sophisticated analysis of programming
languages. Anyway, I thought it was a deep and sophisticated analysis.&lt;/p&gt;
&lt;p&gt;I got a reply that shows how wrong I was. Here's the quote:&lt;/p&gt;
&lt;p&gt;The point is that the Python ecosystem has a lot to offer. We …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2016_06_07-why_python_whats_it_good_for_how_is_it_special.html"&gt;Why Python?&lt;/a&gt;&amp;quot;
I linked to a deep and sophisticated analysis of programming
languages. Anyway, I thought it was a deep and sophisticated analysis.&lt;/p&gt;
&lt;p&gt;I got a reply that shows how wrong I was. Here's the quote:&lt;/p&gt;
&lt;p&gt;The point is that the Python ecosystem has a lot to offer. We could
argue about the language design choices. However, why bother? Why not
just take advantage of what the ecosystem has to offer.&lt;/p&gt;
&lt;p&gt;Ah. Discussing the language is just &amp;quot;arguing&amp;quot;. I guess the points are
all debatable and my comparison of Python to any benchmark is just
the seed for an argument. A religious war, perhaps. I guess this
wasn't compelling. It was a &amp;quot;why bother?&amp;quot;&lt;/p&gt;
&lt;p&gt;Why bother pointing out the strong points of the language?
The email emphasized the &amp;quot;ecosystem&amp;quot; with a cool, but short example
of how &lt;a class="reference external" href="http://scipiy.spatial.kdtree/"&gt;scipiy.spatial.KDTree&lt;/a&gt;
works.&lt;/p&gt;
&lt;p&gt;It appears that -- for some people -- &amp;quot;Python code actually works&amp;quot; is
a useful response to &amp;quot;why python?&amp;quot;&lt;/p&gt;
&lt;p&gt;I would have thought that &amp;quot;Python code actually works&amp;quot; was a
precondition to even discussing the value proposition behind Python.&lt;/p&gt;
&lt;p&gt;But -- clearly -- I was wrong.  The mere fact of a working example is
a &lt;strong&gt;Very Important Thing&lt;/strong&gt;™.&lt;/p&gt;
&lt;p&gt;What does this mean?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There are people who use software that doesn't actually work. When
they see software that works, it's important. Very important.&lt;/li&gt;
&lt;li&gt;When software actually works, these people find this simple fact
to be a compelling and substantial argument for placing a high
value on the software.&lt;/li&gt;
&lt;li&gt;Other considerations like clarity and simplicity aren't relevant.
If these poor souls are suffering software that doesn't actually
work, then broken and obscure is still broken. Other parts of the
long discussion from Wirth are just arguing points.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The email included &amp;quot;&lt;em&gt;consider amending the why python? blog w/ the
other big pro: ecosystem&lt;/em&gt;&amp;quot; I'm not sure I actually understand the
request. When code that works is a &amp;quot;big pro&amp;quot;, this comes from a
world I can't pretend to understand.&lt;/p&gt;
&lt;p&gt;Also. The example code used &lt;tt class="docutils literal"&gt;xrange()&lt;/tt&gt;. Which is a Python 2 smell.
&lt;a class="reference external" href="http://pythonclock.org/"&gt;Those days are passed&lt;/a&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="scipy"></category></entry><entry><title>Continuous Data Migration</title><link href="https://slott56.github.io/2016_06_14-continuous_data_migration.html" rel="alternate"></link><published>2016-06-14T08:00:00-04:00</published><updated>2016-06-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-06-14:/2016_06_14-continuous_data_migration.html</id><summary type="html">&lt;p&gt;See {filename}/blog/2016/06/2016_06_10-database_conversion_or_schema_migration.rst&lt;/p&gt;
&lt;p&gt;People talk about CI/CD (Continuous Integration/Continuous
Deployment).&lt;/p&gt;
&lt;p&gt;They also need to talk about CM (Continuous Migration).&lt;/p&gt;
&lt;p&gt;&amp;quot;Wait, what?&amp;quot; you ask.&lt;/p&gt;
&lt;p&gt;When we roll out a new version of the software (CD) there are three
common situations.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The new software uses the …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;See {filename}/blog/2016/06/2016_06_10-database_conversion_or_schema_migration.rst&lt;/p&gt;
&lt;p&gt;People talk about CI/CD (Continuous Integration/Continuous
Deployment).&lt;/p&gt;
&lt;p&gt;They also need to talk about CM (Continuous Migration).&lt;/p&gt;
&lt;p&gt;&amp;quot;Wait, what?&amp;quot; you ask.&lt;/p&gt;
&lt;p&gt;When we roll out a new version of the software (CD) there are three
common situations.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The new software uses the existing data model with no changes. This
is a &amp;quot;minor version change&amp;quot;: from v3.2 to v3.3.&lt;/li&gt;
&lt;li&gt;The new software requires a tweak to the schema, but it's backward
compatible. This, too, is a minor version change. In a SQL context,
we might have used an ALTER TABLE to add a nullable column. If there
are no SELECT * statements in the code, this change is essentially
transparent to legacy code.&lt;/li&gt;
&lt;li&gt;The new software involves a new schema that's not backwards
compatible. This is a major version change. From v3.2 to v4.0. This
is difficult. Really difficult.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clearly, the first two can be done with the data in place. New
software is installed, the servers are restarted, and away we go. In a
big environment, there may be a rolling deployment. There may be a
&lt;a class="reference external" href="http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/"&gt;canary release&lt;/a&gt;
that will get converted first, then others will be brought online.&lt;/p&gt;
&lt;p&gt;A change of the Second Kind does involve the one-time database
transformation script. This may lead to some down-time. Or it may lead
to a feature toggle so that the new software can work with the old
database until the script is run.&lt;/p&gt;
&lt;p&gt;In a NoSQL context, a change of the Second Kind doesn't require the
one-time script. The new documents have new fields that old documents
don't have. NoSQL apps -- in general -- must be able to cope with data
model variations.&lt;/p&gt;
&lt;p&gt;A change of the Third Kind is trouble.&lt;/p&gt;
&lt;p&gt;Big trouble.&lt;/p&gt;
&lt;p&gt;We have two schema: the v3 schema and the v4 schema. We have two sets
of software: the v3.2 release and the v4.0 release. We'd like to have
just one valid set of data. How do we deal with this?&lt;/p&gt;
&lt;div class="section" id="how-can-we-do-schema-migration-badly"&gt;
&lt;h2&gt;How can we do schema migration badly?&lt;/h2&gt;
&lt;p&gt;We can't &lt;strong&gt;easily&lt;/strong&gt; have a single software release that includes one
set of data in both schema. It's &lt;strong&gt;technically&lt;/strong&gt; possible Anything
that doesn't involve time travel, anti-gravity or perpetual motion is
&lt;strong&gt;technically&lt;/strong&gt; possible. But it rapidly becomes so complex that we
have to set this uber-version idea aside.&lt;/p&gt;
&lt;p&gt;We have to do more deployment work to have both v3.2 and v4.0
installed in parallel. v3.2 will use data in the v3 schema, v4.0 will
use data in the new schema.&lt;/p&gt;
&lt;p&gt;How do we migrate the data from the old schema to the new schema?&lt;/p&gt;
&lt;p&gt;This can be tricky. There are proven bad ideas out there. Really
epically bad ideas.&lt;/p&gt;
&lt;p&gt;One Very Bad Idea (VBI™) is the one-time-only data migration. Back in
the olden days, we couldn't afford enough storage to have two copies
of the database. Seriously. When a company owned exactly one computer
(before PC's -- a Very Long Time Ago) the conversion had to be done by
making special backups and restoring the backups into the new schema.&lt;/p&gt;
&lt;p&gt;This VBI is still with us today.  Lots of places want to do
one-time-only data migrations because it's the traditional approach.
If they can't done a one-time conversion (over a long weekend) they
complain. Loudly.&lt;/p&gt;
&lt;p&gt;BTW. This &lt;strong&gt;never&lt;/strong&gt; worked well. The one-time-only conversion software
was never tested carefully, and therefore rarely worked the one time
it was needed. Also, data profiling was never done, so edge and corner
cases were found during conversion. These often called the new
software's features into question, leading to larger and larger
problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="continuous-migration"&gt;
&lt;h2&gt;Continuous Migration&lt;/h2&gt;
&lt;p&gt;The ideas behind continuous migration are these.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We're always going to be migrating the data. Always.&lt;/li&gt;
&lt;li&gt;Storage is cheaper than labor. When in doubt, buy more storage.&lt;/li&gt;
&lt;li&gt;Data outside the database (in CSV files or YAML documents) is smaller
than data inside the database. Don't be afraid to export.&lt;/li&gt;
&lt;li&gt;Data outside the database is inaccessible. Be cautious of the implied
down-time during exports and imports.&lt;/li&gt;
&lt;li&gt;ABP. Always Be Profiling. If you don't have a data profiler in place
right now, that's the first thing to build. There are schema
definition tools and schema checking tools. Look at
&lt;a class="reference external" href="http://json-schema.org/"&gt;JSON-Schema.org&lt;/a&gt;. Write schema
definitions and use a data profiler to examine all rows and check all
rules. &lt;strong&gt;All&lt;/strong&gt;. Seriously. All. In a SQL DB, actually check the
foreign keys to be sure the referenced row exists; you'll be
surprised.&lt;/li&gt;
&lt;li&gt;We're moving forward. We're not milling around; we're not supporting
the old version except for the purposes of a parallel test or a
fall-back in the event the next version doesn't work. There's no
long-term coexistence strategy. Preserve the data; upgrade the
software.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the central data migration requirement:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Be able to migrate to the new schema as many times as needed.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I'll repeat that. As. Many. Times. As. Needed.&lt;/p&gt;
&lt;p&gt;Migration is &lt;strong&gt;not&lt;/strong&gt; a one-time thing. You do it all the time.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Migrating (and possibly sanitizing or subsetting) production data into the development environment.&lt;/li&gt;
&lt;li&gt;Migrating production data for QA testing.&lt;/li&gt;
&lt;li&gt;Migrating production data for integration testing.&lt;/li&gt;
&lt;li&gt;Migrating production data for performance testing.&lt;/li&gt;
&lt;li&gt;Migration production data for the production upgrade.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are all the same activity.&lt;/p&gt;
&lt;p&gt;I'll repeat that. The. Same. Activity. Sometimes with mappings.
Sometimes with filters.&lt;/p&gt;
&lt;p&gt;Since you'll do many, many migrations, your data migration
programming is as important as your application programming. Perhaps
&lt;strong&gt;more&lt;/strong&gt; important than the application code because it's what
preserves the data, and the data is the &lt;strong&gt;only&lt;/strong&gt; thing of value.
Applications come and go. Data is forever.&lt;/p&gt;
&lt;p&gt;Having real data available permits seamless, silent, and automatic
parallel testing. We can easily do a parallel test with v3.2 and v4.0
release candidates by simply running the migration (or migration with
subset filter) to gather some data for the parallel test. If the
release candidate has problems, we can fix v4.0 to create the next
release candidate, re-migrate the data, and try the parallel test
again.&lt;/p&gt;
&lt;p&gt;At some point the v4.0 release is final, and we need to migrate all
of the data. This (usually) involves some feature toggles to put v3.2
into a special &amp;quot;end-of-life&amp;quot; mode where the keys for records which
change are logged separately. After turning off v3.2 and turning on
v4.0, a second phase of migration will process these end-of-life rows
through the migration mill.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-and-schema-design-consequences"&gt;
&lt;h2&gt;Software and Schema Design Consequences&lt;/h2&gt;
&lt;p&gt;This has an important consequence.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Your software must be explicitly bound to a specific schema by major version number.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Explicitly bound. In a SQL context, you can use the &amp;quot;schema&amp;quot;
construct an include the version number in the schema name.
&amp;quot;myapp_v3&amp;quot; vs. &amp;quot;myapp_v4&amp;quot;. This becomes a ubiquitous qualifier on all
table names. SELECT col FROM myapp_v4.some_table AS st.&lt;/p&gt;
&lt;p&gt;Yes. Do this Everywhere. Do it Now.&lt;/p&gt;
&lt;p&gt;If you're using mybatis or SQLAlchemy to get the SQL out of your
application, then this kind of thing is a trivial change. If you have
SQL in your application code, well, you have two problems to solve.
First, get the SQL out of your application. Then make the schema
version explicit.&lt;/p&gt;
&lt;p&gt;In a NoSQL context, you can include the schema version as part of a
collection name. &amp;quot;collection_v3&amp;quot; or &amp;quot;collection_v4&amp;quot;.&lt;/p&gt;
&lt;p&gt;This should be present everywhere.&lt;/p&gt;
&lt;p&gt;Then, you'll need data validation apps and data migration apps. The
validation apps will use your favorite schema definition and schema
validation framework. Start running this as soon as you think you
might need to make a major version change.&lt;/p&gt;
&lt;p&gt;Finally, you'll need the data migration tool set. This will involve
filter rules and sanitizing rules. These are not sophisticated &amp;quot;rules
engine&amp;quot; kind of things with unbounded complexity. They're usually if
statements and simple computations. But they come and go pretty
freely, so design the software in a way that makes the filter and
sanitizing code obvious.&lt;/p&gt;
&lt;p&gt;Now you can -- trivially -- migrate data between schema versions
inside the same database. You can have v3.2 and v4.0 running
side-by-side. You can migrate the data early and often. You can
profile and validate the data. You have a formal schema for the data
validation.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="thank-you-for-the-informative-post-about-software"&gt;
&lt;h2&gt;Thank you for the informative post about Software ...&lt;/h2&gt;
&lt;p&gt;yuvaraj&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-03-20 03:04:03.310000-04:00&lt;/p&gt;
&lt;p&gt;Thank you for the informative post about Software Architecture on
continuous Data Migration, Found it useful . cloud migration services
have now become secured and with no-risk
&lt;a class="reference external" href="http://liainfraservices.com/database-migration-services"&gt;Database Migration
Services&lt;/a&gt;
&lt;a class="reference external" href="http://liainfraservices.com/vmware-cloud-migration-services"&gt;VMware Cloud Migration
Services&lt;/a&gt;
&lt;a class="reference external" href="http://liainfraservices.com/azure-cloud-migration-services"&gt;Azure Cloud Migration
Services&lt;/a&gt;
&lt;a class="reference external" href="http://liainfraservices.com/aws-cloud-migration-services"&gt;AWS Cloud Migration
Services&lt;/a&gt;
&lt;a class="reference external" href="http://liainfraservices.com/cloud-migration-services"&gt;Cloud Migration
Services&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="very-clear-and-detailed-guide-on-a-href-https"&gt;
&lt;h2&gt;Very clear and detailed guide on &amp;lt;a href=&amp;quot;&lt;a class="reference external" href="https://"&gt;https://&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Jim&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-11-14 09:28:53.507000-05:00&lt;/p&gt;
&lt;p&gt;Very clear and detailed guide on &lt;a class="reference external" href="https://www.nakivo.com/industry/data-center-migration/"&gt;migration of data
center&lt;/a&gt; .
Enjoyed reaing, thanks!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data conversion"></category><category term="data migration"></category><category term="continuous migration"></category><category term="database design"></category><category term="continuous deployment"></category><category term="continuous integration"></category></entry><entry><title>Database Conversion or Schema Migration</title><link href="https://slott56.github.io/2016_06_10-database_conversion_or_schema_migration.html" rel="alternate"></link><published>2016-06-10T07:35:00-04:00</published><updated>2016-06-10T07:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-06-10:/2016_06_10-database_conversion_or_schema_migration.html</id><summary type="html">&lt;p&gt;I was told a horror story about a bad database schema migration. Let's
call the author of the horror story HPL.&lt;/p&gt;
&lt;p&gt;HPL related a tale of woeful conversion problems from a mismanaged
schema migration.&lt;/p&gt;
&lt;p&gt;While I could feel HPL's pain, the reasons given for their pain were
wrong. They didn't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was told a horror story about a bad database schema migration. Let's
call the author of the horror story HPL.&lt;/p&gt;
&lt;p&gt;HPL related a tale of woeful conversion problems from a mismanaged
schema migration.&lt;/p&gt;
&lt;p&gt;While I could feel HPL's pain, the reasons given for their pain were
wrong. They didn't quite get the lessons they had learned.
Consequently, HPL sounded like someone doomed to repeat the mistake,
or—worse—unlearning their lessons.&lt;/p&gt;
&lt;p&gt;Here's HPL's most distressing comment.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;we can't migrate over the weekend and be done w/ it.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Apparently, the horror of a weekend migration was somehow desirable to
HPL. Who wants a lost weekend? And who wants to put all of the eggs in
a single basket?&lt;/p&gt;
&lt;p&gt;Anyone who's done more than one &amp;quot;lost weekend migration&amp;quot;—and who's
also honest—knows that they don't go well. There are always subsets of
data that (a) don't get converted properly and (b) have to get swept
under the carpet in order to claim to meet the schedule.&lt;/p&gt;
&lt;p&gt;It's a standard situation to have less than 100% of the data
successfully converted and still call the effort a success. If 100%
was not required, why lose a weekend over it?&lt;/p&gt;
&lt;div class="section" id="good-plans-and-bad-plans"&gt;
&lt;h2&gt;Good Plans and Bad Plans&lt;/h2&gt;
&lt;p&gt;From far wiser people than me, I learned an important lesson in schema
migration.&lt;/p&gt;
&lt;p&gt;These Wiser Heads ran a &amp;quot;conversion&amp;quot; business. They moved data and
applications from platform to platform. They knew a lot about database
schema migrations. A lot.&lt;/p&gt;
&lt;p&gt;Their standard plan was to build a schema migration script (usually a
sequence of apps) that could be run to convert the database (or files
or whatever) from old to new schema as often as was necessary.&lt;/p&gt;
&lt;p&gt;I'll repeat that.&lt;/p&gt;
&lt;p&gt;As &lt;strong&gt;often as was necessary&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;They debugged the script to get to an acceptable level of conversion.
The data conversion (or schema migration) was perfectly repeatable. Of
course, they longed for 100% conversion; but pragmatically, the legacy
software had bad data. So some fraction would not convert. And once
that fraction was found, the schema migration applications could be
modified to treat the non-convertable data in some intelligent way.&lt;/p&gt;
&lt;p&gt;Their stated goal was to convert data and run parallel testing with
that converted data as often as necessary to create confidence that
the new data was as perfect a conversion as was possible. At some
point, the confidence became certainty and the parallel testing was
deemed complete. Since they were parallel testing with live data, the
decision amounted to a formalized &amp;quot;commissioning&amp;quot; of the new
application. And by then, the new application was already being used.&lt;/p&gt;
&lt;p&gt;There are bad ways to do schema migration, of course. HPL listed many.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="horrible-mistakes"&gt;
&lt;h2&gt;Horrible Mistakes&lt;/h2&gt;
&lt;p&gt;The horror story from HPL included this:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;For the migrated tables, create views in the old system and create
instead of triggers on those views to ship data to the new system.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;It appears that they used views and triggers to create a new system
&amp;quot;facade&amp;quot; over the legacy system. Apparently, they wanted both suites
of application software to coexist. Not a good approach to schema
migration. It appeared that they were trying to share one database
with two application schema.&lt;/p&gt;
&lt;p&gt;This seems like it's doomed. Unless they're all geniuses.&lt;/p&gt;
&lt;p&gt;Wiser Heads would have strongly suggested that the new system use a
&lt;strong&gt;extract&lt;/strong&gt; of the old system's data.&lt;/p&gt;
&lt;p&gt;HPL goes on to complain,&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Sometimes we can take over a column or 2 and sometimes we can only
take over some of the data in the table&amp;quot;.&lt;/blockquote&gt;
&lt;p&gt;HPL emphasizes this point with &amp;quot;This is not that far fetched&amp;quot;. I'm not
sure why the emphasis was needed.&lt;/p&gt;
&lt;p&gt;This is not &amp;quot;far fetched&amp;quot;. It doesn't need emphasis. It's not really
much of a problem, either. It's a standard part of schema migration.
Extracting a copy of the data makes this quite easy. Triggers and
views to create some kind of active SQL-based Facade is what created
the complexity. Not the number of columns involved.&lt;/p&gt;
&lt;p&gt;HPL summarizes,&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;So you end up w/ [many] tables/views triggers all moving data back
and forth and faking stuff out&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Back and forth. A fundamental mistake. A copy can be much easier to
manage. One way data movement: Legacy to New.&lt;/p&gt;
&lt;p&gt;HPL concludes with a litany of errors of various types: performance,
change management, file system issues, error logging and auditing.
Blah blah blah. Yes, it was a nightmare. I feel their pain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-coexistence"&gt;
&lt;h2&gt;What About Coexistence?&lt;/h2&gt;
&lt;p&gt;It appears that HPL was involved in a project where the &lt;strong&gt;entire&lt;/strong&gt; old
and new applications were supposed to somehow coexist during the
conversion.&lt;/p&gt;
&lt;p&gt;It appeared that they failed to do any kind of partitioning.&lt;/p&gt;
&lt;p&gt;Coexistence is not a trivial exercise. Nor is it a monolith where the
&lt;strong&gt;entire&lt;/strong&gt; legacy application suite must coexist with the &lt;strong&gt;entire&lt;/strong&gt;
new schema and the entire new application suite.&lt;/p&gt;
&lt;p&gt;Pragmatically, coexistence usually means that some portion of the
legacy must be kept running while some other portion is modernized.
This means the coexistence requires that the application portfolio be
partitioned.&lt;/p&gt;
&lt;p&gt;Step 1: Some suite of functionality is migrated. That means data from
the legacy database/file system is copied to new. That also means some
data from new is copied back into the legacy database file/system.
Copied.&lt;/p&gt;
&lt;p&gt;Step 2: Some other suite of functionality is migrated. As
functionality is moved, less and less data is copied back to the
legacy.&lt;/p&gt;
&lt;p&gt;At some point, this copying back is of no value and can be
discontinued.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-timing"&gt;
&lt;h2&gt;What About Timing?&lt;/h2&gt;
&lt;p&gt;This copying clearly requires some coordination. It's not done
haphazardly.&lt;/p&gt;
&lt;p&gt;Does it require &amp;quot;real time&amp;quot; data movement? i.e. triggers and views?&lt;/p&gt;
&lt;p&gt;Rarely is real time movement required. This is the point behind
partitioning wisely. Partitioning includes timing considerations as
well as data quality and functionality considerations.&lt;/p&gt;
&lt;p&gt;It's remotely possible that timing and partitioning are so
pathological that data is required in both legacy and new applications
concurrently. This is no reason to throw the baby out with the
bathwater. This is nothing more than an indication that the data is
being copied back to the legacy application close to real time.&lt;/p&gt;
&lt;p&gt;This also means performance must be part of the test plan. As well as
error handling and diagnostic logging. None of this is particularly
difficult. It simply requires care.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned"&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;HPL appeared to make the claim that schema migration is super hard. Or
maybe that coexistence is really hard.&lt;/p&gt;
&lt;p&gt;Worse, HPL's horror story may be designed to indicate that a
horrifying lost weekend is the only way to do schema migration.&lt;/p&gt;
&lt;p&gt;Any or all of these are the wrong lessons to learn.&lt;/p&gt;
&lt;p&gt;I think there are several more valuable lessons here.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Schema migration can and should be done incrementally. It's ideally
tackled as an Agile project using Scrum techniques. It's okay to have
release cycles that are just days apart as each phase of the
conversion is run in parallel and tested to the user's satisfaction.&lt;/li&gt;
&lt;li&gt;Coexistence requires partitioning to &lt;strong&gt;copy&lt;/strong&gt; any data back to
unconverted legacy components. Triggers and views and coexistence of
entire suites of software make a difficult problem harder.&lt;/li&gt;
&lt;li&gt;The conversion script is just another first-class application. The
same quality features apply to the conversion as to every other
component of the app suite.&lt;/li&gt;
&lt;li&gt;The conversion must be trivially repeatable. It must be the kind of
thing that can be run as often as necessary to move legacy data to
the new schema.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data conversion"></category><category term="database administration"></category><category term="software process improvement"></category><category term="agile"></category><category term="schema migration"></category></entry><entry><title>Why Python? What's it good for? How is it special?</title><link href="https://slott56.github.io/2016_06_07-why_python_whats_it_good_for_how_is_it_special.html" rel="alternate"></link><published>2016-06-07T19:00:00-04:00</published><updated>2016-06-07T19:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-06-07:/2016_06_07-why_python_whats_it_good_for_how_is_it_special.html</id><summary type="html">&lt;p&gt;First. The question is moot. It's a programming language. It's good for
programming.
When I push back, folks try to produce languages which exist only in
certain pigeon holes.
&amp;quot;You know. PHP is for web and JavaScript runs in the browser. What's
Python for?&amp;quot;
The PHP and JavaScript examples aren't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First. The question is moot. It's a programming language. It's good for
programming.
When I push back, folks try to produce languages which exist only in
certain pigeon holes.
&amp;quot;You know. PHP is for web and JavaScript runs in the browser. What's
Python for?&amp;quot;
The PHP and JavaScript examples aren't helpful. That doesn't narrow the
domain of problems for which Python is appropriate. It only shows that
some languages have narrow domains.
&amp;quot;You know. Objective-C and Swift are for iOS. What's the predominant
place Python is used?&amp;quot;
Python also runs on iOS. I don't know if it has suitable bindings for
building apps. If it does, that doesn't change my answer. It's good for
programming.
&amp;quot;Java is used mainly for web apps, right? What about Python?&amp;quot;
Okay. At this point, the question has slipped from moot to ignorant.
Can we just set that aside? Can we move on?
If you want some useful insight, start here:
&lt;a class="reference external" href="http://web.eecs.umich.edu/~bchandra/courses/papers/Wirth_Design.pdf"&gt;http://web.eecs.umich.edu/~bchandra/courses/papers/Wirth_Design.pdf&lt;/a&gt;
Yes, it's an essay from 1974.  Parts of it are a little old-fashioned,
but a lot of it is still rock-solid. For example, the idea of
strongly-typed pointers is considered more-or-less standard now. It was
debatable then. And Wirth's opinion continues to drive language design.
Page 28 has the key points: features of a programming language.
Enumerated by the inventor of Pascal, Modula, Oberon, and other
languages too numerous to recall.
Some of the list is a little dated. &amp;quot;...different character sets...,&amp;quot;
for example, has been superseded by Unicode.
Also, the list is focused on compiled languages. Python is a dynamic
language. It's interpreted. Yes, there's a compiler, but that's mostly
an optimization of the source code. If you replace &amp;quot;compiler&amp;quot; with
&amp;quot;run-time&amp;quot;, the list stands up as a description of good languages.
I like this list because it helps characterize why Python works out so
well. And why many other languages are also pretty good. It points up
the reason why quirky languages like JavaScript (or even Ruby) are
suspicious. Some of the points about efficiency are important topics for
further discussion.
I often have to remind folks who work with Big Data that most of our
processing is I/O bound. Python waits for the database somewhat more
efficiently than Java. Why does Python wait more efficiently? Because it
uses less memory. Sometimes this is a win.
Let's not ask silly questions about a general-purpose language. Instead,
let's benchmark solutions, and compare tangible performance numbers
using real code.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="thank-you-for-sharing-your-thoughts-and-knowledge"&gt;
&lt;h2&gt;Thank you for sharing your thoughts and knowledge ...&lt;/h2&gt;
&lt;p&gt;Nina Athena&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-05-29 00:23:12.207000-04:00&lt;/p&gt;
&lt;p&gt;Thank you for sharing your thoughts and knowledge on this topic. This is
really helpful and informative, as this gave me more insight to create
more ideas and solutions for my plan. I would love to see more updates
from you.
&lt;a class="reference external" href="https://yourwebsitefirst.com/features-4-tips-avoid-scope-creep-web-development-project/"&gt;Web Development
Services&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Why rewrite a shell script in Python?</title><link href="https://slott56.github.io/2016_06_07-why_rewrite_a_shell_script_in_python.html" rel="alternate"></link><published>2016-06-07T08:00:00-04:00</published><updated>2016-06-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-06-07:/2016_06_07-why_rewrite_a_shell_script_in_python.html</id><summary type="html">&lt;p&gt;Here's the actual quote:&lt;/p&gt;
&lt;blockquote&gt;
Why would you need to rewrite a working script in python ? Was there
any business direction towards this ?&lt;/blockquote&gt;
&lt;p&gt;This was an unexpected response. And unwelcome. I guess I called their
baby ugly.&lt;/p&gt;
&lt;p&gt;The short answer is that the shell script language is perhaps one of
the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's the actual quote:&lt;/p&gt;
&lt;blockquote&gt;
Why would you need to rewrite a working script in python ? Was there
any business direction towards this ?&lt;/blockquote&gt;
&lt;p&gt;This was an unexpected response. And unwelcome. I guess I called their
baby ugly.&lt;/p&gt;
&lt;p&gt;The short answer is that the shell script language is perhaps one of
the worst programming languages ever invented. Okay. I suppose it's
better than
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Whitespace_(programming_language)"&gt;whitespace&lt;/a&gt;.
Okay it's better than many others.
See &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Esoteric_programming_language"&gt;https://en.wikipedia.org/wiki/Esoteric_programming_language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The longer answer is this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are (at least) three ksh scripts involved, two of which are
over 1,000 lines long. It's not perfectly clear precisely what's
involved. It's ksh. Code could come from a variety of places through
very obscure paths; e.g. the source command and it's synonym, ..&lt;/li&gt;
&lt;li&gt;There are no comments other than #!/usr/bin/ksh and a few places
where code is commented out.  Without explanation.&lt;/li&gt;
&lt;li&gt;There is no other documentation. The author had sent a email
describing the github repo. The repo lacked a README. It took two
tries to get them to understand that any email describing a repo
should have been the README &lt;strong&gt;in&lt;/strong&gt; the repo. There is barely even a
command-line synopsis. (Eventually, I found it in the parser for
command-line options.)&lt;/li&gt;
&lt;li&gt;No tests of any kind.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point is the one that I find shocking. And I find it shocking
on a regular basis.&lt;/p&gt;
&lt;p&gt;Folks are able and willing to write 1,000's of lines of shell script
without a single unit test, integration test, system test,
performance test, anything test. How do they know if this works? Why
am I supposed to trust it?&lt;/p&gt;
&lt;p&gt;More importantly, how can I meaningfully wrap this into a RESTful API
if I'm not even sure what the command-line interface &lt;strong&gt;really&lt;/strong&gt; is?
It's the shell. It could use environment variables that are otherwise
undocumented. They would be discovered when they cause a crash at run
time. Crashes that become an HTTP 500 status code and a traceback
error message in the web log.&lt;/p&gt;
&lt;p&gt;The &amp;quot;business direction&amp;quot; sounds like an attempt to trump the
technical discussion with a business consideration like &amp;quot;cost&amp;quot; or
&amp;quot;benefit&amp;quot;. It should be pretty self-evident that 1,000's of lines of
shell script code is technical debt.&lt;/p&gt;
&lt;p&gt;The minimally viable replacement will probably be a similarly-sized
of Python script that mindlessly mirrors the original shell script.
It's sometimes quite hard to tell what purpose a shell function
really serves. The endless use (and re-use) of global variables can
make state change hard to follow. Also, the use of temporary files
which are parsed (and reparsed) as a way to set state is a serious
problem.&lt;/p&gt;
&lt;p&gt;What's important is that the various OS services used by the shell
script are mockable. Which means that each of the 100 or so
individual functions within the script can be tested in isolation.
Once that's out of the way, refactoring becomes plausible.&lt;/p&gt;
&lt;p&gt;Let's savor those words for a moment: Tested. In. Isolation.&lt;/p&gt;
&lt;p&gt;Ahhh.&lt;/p&gt;
&lt;p&gt;The better replacement is (I think) about 250 lines of Python --
perhaps less -- that perform the real 8-step process that we're
automating.  Getting rid of bash language cruft is challenging, but
essential.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="bash"></category><category term="ksh"></category><category term="shell"></category></entry><entry><title>The Lynda.com Experience</title><link href="https://slott56.github.io/2016_05_03-the_lyndacom_experience.html" rel="alternate"></link><published>2016-05-03T08:00:00-04:00</published><updated>2016-05-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-05-03:/2016_05_03-the_lyndacom_experience.html</id><summary type="html">&lt;p&gt;One word: &amp;quot;wow&amp;quot;
More words: &amp;quot;Helping shy people get up and do what needs to be done.&amp;quot;
Yes, that's Garrison Keillor's tag line for one of the &amp;quot;sponsors&amp;quot; of &amp;quot;A
Prairie Home Companion&amp;quot;: the Powdermilk Biscuits company.  (&lt;em&gt;Heavens.
they're tasty and expeditious&lt;/em&gt;.)
The folks at Lynda are truly great at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One word: &amp;quot;wow&amp;quot;
More words: &amp;quot;Helping shy people get up and do what needs to be done.&amp;quot;
Yes, that's Garrison Keillor's tag line for one of the &amp;quot;sponsors&amp;quot; of &amp;quot;A
Prairie Home Companion&amp;quot;: the Powdermilk Biscuits company.  (&lt;em&gt;Heavens.
they're tasty and expeditious&lt;/em&gt;.)
The folks at Lynda are truly great at shepherding folks through the
process of preparing and recording their material.
Recording is hard. The point is to say each thing perfectly. But, the
things have to fit into a larger narrative of a section that fits into
the larger sequence of chapters that makes up the course.'
Giving essentially the same content in a presentation at a conference is
almost unrelated. Talking at a conference has a live audience. It's
one-time-only, and you can ad-lib.
Doing this takes patience. And skilled editing both at a content level
and at a technical level. Lynda has it all.
The thing that made me the most comfortable was having my presentation
material ready. Each section is a 5-minute lightning talk. I was had all
of my slides ready. I'd been through them enough times to be sure that I
could handle the 5-minute format. And when there are editorial changes,
they tended to be relatively minor.
I may try it again. It's a lot of work. Certainly more work than writing
a chapter in a book. A chapter can go deep. A presentation has to stick
to the high points: this means that the supporting depth &lt;strong&gt;must&lt;/strong&gt; be
there, but you're not going to wallow around in it. Essentially, you're
making the &amp;quot;elevator pitch&amp;quot; for each one of your points.
The recording and live action studio space were fun. I've never been
recorded or taped like that before. They eased me into it, coached me
through it, and made sure all of the content was there in a way that
could be edited into a high quality final product.&lt;/p&gt;
</content><category term="Technologies"></category><category term="writing"></category><category term="video"></category><category term="lynda"></category></entry><entry><title>A NoSQL Conversation</title><link href="https://slott56.github.io/2016_04_19-a_nosql_conversation.html" rel="alternate"></link><published>2016-04-19T18:20:00-04:00</published><updated>2016-04-19T18:20:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-04-19:/2016_04_19-a_nosql_conversation.html</id><summary type="html">&lt;p&gt;This cropped up recently. It's part of a &amp;quot;replace Mongo with
Relational DB&amp;quot; conversation.&lt;/p&gt;
&lt;p&gt;I'm going to elide the conversation down to five key points. The
three post-hoc nonsensical ideas, and the two real points.&lt;/p&gt;
&lt;p&gt;What's (to me) very telling is that someone else published the five
reasons in this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This cropped up recently. It's part of a &amp;quot;replace Mongo with
Relational DB&amp;quot; conversation.&lt;/p&gt;
&lt;p&gt;I'm going to elide the conversation down to five key points. The
three post-hoc nonsensical ideas, and the two real points.&lt;/p&gt;
&lt;p&gt;What's (to me) very telling is that someone else published the five
reasons in this order. As if they larded three on the front. Or
included the two at the end out of guilt because they were avoiding
the real issues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Relational Queries are Desired&lt;/strong&gt;. &amp;quot;the only way to find [the
documents] would be to write a query that literally trolls through
the entire database in order to find the most recent values&amp;quot;.&lt;/p&gt;
&lt;p&gt;I beg to differ. &amp;quot;Only way&amp;quot; is a strong statement. Mongo has indexes.
To suggest that they don't exist or don't work is misleading. The
details of the use case involved searching by date. It's possible to
contrive a database that does bad searches by date; the implication
being that Mongo couldn't do date matching or something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To Enforce Constraints and Schema&lt;/strong&gt;. &amp;quot;It is still possible for the
application layer to ensure the constraint, but that relies on every
single point in the application code enforcing it – a single error
can lead to inconsistent data&amp;quot;.&lt;/p&gt;
&lt;p&gt;This runs perilously close to the &amp;quot;what if some bonehead bypasses the
API and hacks into the database directly?&amp;quot; question. Which is
isomorphic to &amp;quot;what if all corporate governance disappeared
tomorrow?&amp;quot; and &amp;quot;what if an evil genius hacks all our database
drivers?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lack of Document-Oriented Access Patterns&lt;/strong&gt;.  &amp;quot;If there are more
complex access patterns (like reading certain fields from many
records, or frequently updating single fields within a record) then a
document-oriented database is not a good fit&amp;quot;&lt;/p&gt;
&lt;p&gt;That's nonsense. Mongo has field-level updates. There was one example
of a long-running transaction that appeared to be mis-designed. I
suggested that an improved design might be less complex and expensive
than rewriting the API's and moving the data.&lt;/p&gt;
&lt;div class="section" id="desire-to-utilize-relational-db"&gt;
&lt;h2&gt;Desire to Utilize [Relational DB]&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;More Support Available for [Relational DB]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Clearly, these last two are the real reasons. Everything above looks
like post-hoc justification for the real issue.&lt;/p&gt;
&lt;blockquote&gt;
We're not sure we like Mongo.&lt;/blockquote&gt;
&lt;p&gt;My point in the conversation was not to talk them out of making a
switch. The last two reasons included the kind of compelling
rationalization that can't be disputed.  The best I could do was to
challenge the errors in the first three reasons so that everyone
could be honest about the change. It's not technical. It's
organizational.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="mongodb"></category><category term="SQL"></category><category term="noSQL"></category></entry><entry><title>The GUI Problem</title><link href="https://slott56.github.io/2016_04_05-the_gui_problem.html" rel="alternate"></link><published>2016-04-05T08:00:00-04:00</published><updated>2016-04-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-04-05:/2016_04_05-the_gui_problem.html</id><summary type="html">&lt;p&gt;I write Microservices. And not-so-micro Services. API's.&lt;/p&gt;
&lt;p&gt;I got this email recently.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Goal: get you to consider adding Gooey to your Python tool set&amp;quot;
&amp;quot;Gooey
What it's for: Turn a console-based Python program into one that sports
a platform-native GUI.
Why it's great: Presenting people, especially rank-and-file users, with
a …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I write Microservices. And not-so-micro Services. API's.&lt;/p&gt;
&lt;p&gt;I got this email recently.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Goal: get you to consider adding Gooey to your Python tool set&amp;quot;
&amp;quot;Gooey
What it's for: Turn a console-based Python program into one that sports
a platform-native GUI.
Why it's great: Presenting people, especially rank-and-file users, with
a command-line application is among the fastest ways to reduce its use.
Few beyond the hardcore like figuring out what options to pass, or in
what order. &lt;a class="reference external" href="https://github.com/chriskiehl/Gooey"&gt;Gooey&lt;/a&gt; takes
arguments expected by the argparse library and presents them users as a
GUI form, with all options labeled and presented with appropriate
controls (such as a drop-down for a multi-option argument, and so on).
Very little additional coding -- a single include and a single decorator
-- is needed to make it work, assuming you're already using argparse.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;The examples and the GitHub documentation make it look delightful.
However.  It's utterly useless for me.  Interesting but useless.
From my perspective, API's and microservices are vastly more important
than desktop GUI's.&lt;/p&gt;
&lt;p&gt;I'll repeat that in order to start a food-fight:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;API's and microservices are more important than desktop GUI's&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I almost forgot the important qualifiers: &lt;strong&gt;When working with Big
Data&lt;/strong&gt;. Or &lt;strong&gt;When working with DevOps Automation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I realize that some people like to cling to the desktop GUI as a Very
Important Thing™. Which could be why they send me emails touting the
advantages of some kind of GUI tool or framework. The Desktop GUI is
important, but, from my perspective, it's a niche.&lt;/p&gt;
&lt;p&gt;Actually two niches.&lt;/p&gt;
&lt;p&gt;Niche 1. The word processor and spreadsheet and a few other generic
tools for putting text into a computer. While desktop versions are
better than server-side emacs and vi, they fill a similar purpose. An
IDE is (from this perspective) is little more than a glorified text
editor. In places that use Jenkins and Hudson and uDeploy and all of
those server-based tools, the desktop IDE is a place to stage code for
Jenkins jobs to do the &amp;quot;real&amp;quot; build.&lt;/p&gt;
&lt;p&gt;Niche 2. All the other tools that turn a small-ish computer into a
dedicated workstation for specific kinds of media production. Video.
Audio. Image. Typesetting. These are not &amp;quot;generic&amp;quot; applications like
word processors or spreadsheets; they're very specific and
narrowly-focused applications. They rely on effectively transforming the
general-purpose computer into a very special-purpose computer.&lt;/p&gt;
&lt;p&gt;Super-fancy desktop-based tools for analytics or Big Data processing are
not actually too useful. Anyone trying to use a desktop as an enterprise
systems of record is asking for trouble.  I work with folks trying to
process terabyte datasets on their laptops and wondering why it takes so
long. My company has servers. We pay for MongoDB and Hadoop. We have
API's to access big databases with big piles of data. I'm automating the
toolsets as fast as I can so they can work with giant datasets.&lt;/p&gt;
&lt;p&gt;Gooey looks like fun. But not for me.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="API Design"></category><category term="microservices"></category></entry><entry><title>The Composite Builder Pattern, an Example of Declarative Programming [Update]</title><link href="https://slott56.github.io/2016_03_17-the_composite_builder_pattern_an_example_of_declarative_programming_update.html" rel="alternate"></link><published>2016-03-17T08:04:00-04:00</published><updated>2016-03-17T08:04:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-03-17:/2016_03_17-the_composite_builder_pattern_an_example_of_declarative_programming_update.html</id><summary type="html">&lt;p&gt;I'm calling this the &lt;strong&gt;Composite Builder&lt;/strong&gt; pattern. This may have
other names, but I haven't seen them. It could simply be lack of
research into prior art. I suspect this isn't very new. But I thought
it was cool way to do some declarative Python programming.&lt;/p&gt;
&lt;p&gt;Here's the concept.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;I'm calling this the &lt;strong&gt;Composite Builder&lt;/strong&gt; pattern. This may have
other names, but I haven't seen them. It could simply be lack of
research into prior art. I suspect this isn't very new. But I thought
it was cool way to do some declarative Python programming.&lt;/p&gt;
&lt;p&gt;Here's the concept.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class TheCompositeThing(Builder):
   attribute1 = SomeItem(&amp;quot;arg0&amp;quot;)
   attribute2 = AnotherItem(&amp;quot;arg1&amp;quot;)
   more_attributes = MoreItems(&amp;quot;more args&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;The idea is that when we create an instance of TheCompositeThing, we
get a complex object, built from various data sources.  We want to use
this in the following kind of context:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with some_config_path.open() as config:
   the_thing = TheCompositeThing().substitute(config)
print(json.dumps(the_thing))
&lt;/pre&gt;
&lt;p&gt;We want to open some configuration file -- something that's unique to
an environment -- and populate the complex object in one smooth
motion. Once we have the complex object, it can then be used in some
way, perhaps serialized as a JSON or YAML document.&lt;/p&gt;
&lt;p&gt;Each Item has a get() method that accepts the configuration as input.
These do some computation to return a useful result. In some cases,
the computation is kind of degenerate case:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class LiteralItem(Item):
   def __init__(self, value):
       self.value = value
   def get(self, config):
       return self.value
&lt;/pre&gt;
&lt;p&gt;This shows how we jam a literal value into the output. Other values
might involve elaborate computations, or lookups in the configuration,
or a combination of the two.&lt;/p&gt;
&lt;div class="section" id="why-use-a-declarative-style"&gt;
&lt;h2&gt;Why Use a Declarative Style?&lt;/h2&gt;
&lt;p&gt;This declarative style can be handy when each of the Items in
TheCompositeThing involves rather complex, but completely independent
computations. There's no dependency here, so the substitute() method
can fill in the attributes in any order. Or -- perhaps -- not fill the
attributes until they're actually requested. This pattern allows eager
or lazy calculation of the attributes.&lt;/p&gt;
&lt;p&gt;This pattern applies to building complex &lt;a class="reference external" href="https://aws.amazon.com/cloudformation/aws-cloudformation-templates/"&gt;AWS Cloud Formation
Templates&lt;/a&gt;
as an example. We often need to make a global tweak to a large number
of templates so that we can rebuild a server farm. There's little or
no dependency among the Item values being filled in. There's no
strange &amp;quot;ripple effect&amp;quot; of a change in one place also showing up in
another place because of an obscure dependency between items.&lt;/p&gt;
&lt;p&gt;We can extend this to have a kind of pipeline with each stage created
in a declarative style. In this more complex situation, we'll have
several tiers of Items that fill in the composite object. The
first-stage Items depend on one source. The second stage Items depend
on the first-stage Items.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Stage1(Builder):
   item_1 = Stage_1_Item(&amp;quot;arg&amp;quot;)
   item_2 = Stage_1_More(&amp;quot;another&amp;quot;)

class Stage2(Builder):
   item_a = Stage_2_Item(&amp;quot;some_arg&amp;quot;)
   item_b = Stage_2_Another(355, 113)
&lt;/pre&gt;
&lt;p&gt;We can then create a Stage1 object from external configuration or
inputs. We can create the derived Stage2 object from the Stage1
object.&lt;/p&gt;
&lt;p&gt;And yes. This seems like useless metaprogramming.  We could -- more
simply -- do something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
::
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;class Stage2:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;def __init__(self, stage_1, config):&lt;/dt&gt;
&lt;dd&gt;self.item_a = Stage_2_Item(&amp;quot;some_arg&amp;quot;, stage_1, config)
self.item_b = Stage_2_Another(355, 113, stage_1, config)&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;p&gt;We've eagerly computed the attributes during &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt;
processing.&lt;/p&gt;
&lt;p&gt;Or perhaps this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Stage2:
   def __init__(self, stage_1, config):
       self.stage_1= stage_1
       self.config= config
   &amp;#64;property
   def item_a(self):
       return Stage_2_Item(&amp;quot;some_arg&amp;quot;, self.stage_1, self.config)
   &amp;#64;property
   def item_b(self):
       return Stage_2_Another(355, 113, self.stage_1, self.config)
&lt;/pre&gt;
&lt;p&gt;Here we've been lazy and only computed attribute values as they are
requested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits"&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;p&gt;We've looked at three ways to build composite objects:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;As independent attributes with an flexible but terse implementation.&lt;/li&gt;
&lt;li&gt;As attributes during &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; using sequential code that doesn't assure independence.&lt;/li&gt;
&lt;li&gt;As properties using wordy code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What's the value proposition? Why is this declarative technique
interesting?&lt;/p&gt;
&lt;p&gt;I find that the the &lt;strong&gt;Declarative Builder&lt;/strong&gt; pattern is handy because
it gives me the following benefits.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The attributes &lt;strong&gt;must&lt;/strong&gt; be built independently. We can -- without a
second thought -- rearrange the attributes and not worry about one
calculation interfering with another attribute.&lt;/li&gt;
&lt;li&gt;The attributes can be built eagerly or lazily. Details don't matter.
We don't expose the implementation details via __init__
or &amp;#64;property.&lt;/li&gt;
&lt;li&gt;The class definition becomes a configuration item. A support
technician without deep Python knowledge can edit the definition of
TheCompositeThing successfully.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think this kind of lazy, declarative programming is useful for some
applications. It's ideal in those cases where we need to isolate a
number of computations from each other to allow the software to
evolve without breaking.&lt;/p&gt;
&lt;p&gt;It may be a stretch, but I think this shows the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dependency_inversion_principle"&gt;Depedency Inversion
Principle&lt;/a&gt;.
To an extent, we've moved all of the dependencies to the visible list
of attributes within these classes. The items classes do not depend
on each other; they depend on configuration or perhaps previous stage
composite objects. Since there are no methods involved in the class
defintion, we can change the class freely. Each subclass of Builder
is more like a configuration item than it is like code. In Python,
particularly, we can change the class freely without the agony of a
rebuild.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-build-implementation"&gt;
&lt;h2&gt;A Build Implementation&lt;/h2&gt;
&lt;p&gt;We're reluctant to provide a concrete implementation for the above
examples because it could go anywhere. It could be done eagerly or
lazily. One choice for a lazy implementation is to use a substitute()
method. Another choice is to use the __init__() method.
We might do something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def substitute(self, config):
    class_dict= self.__class__.__dict__
    for name in class_dict:
        if name.startswith('__') and name.endswith('__'): continue
        setattr(self, name, class_dict[name].get(config))
&lt;/pre&gt;
&lt;p&gt;This allows us to lazily build the composite object by stepping
through the dictionary defined at the class level and filling in
values for each item. This could be done via &lt;tt class="docutils literal"&gt;__getattr__()&lt;/tt&gt; also.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category></entry><entry><title>PacktPub Looking For Python Projects</title><link href="https://slott56.github.io/2016_03_15-packtpub_looking_for_python_projects.html" rel="alternate"></link><published>2016-03-15T08:00:00-04:00</published><updated>2016-03-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-03-15:/2016_03_15-packtpub_looking_for_python_projects.html</id><summary type="html">&lt;p&gt;Do you have a good project? Do you want to write?
The acquisition folks at Packt are looking for this:
&amp;quot;... demonstrate 4-5 projects over the course of the chapters in order
to demonstrate how to build scalable Python projects from scratch. These
projects cover some of the most important concepts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Do you have a good project? Do you want to write?
The acquisition folks at Packt are looking for this:
&amp;quot;... demonstrate 4-5 projects over the course of the chapters in order
to demonstrate how to build scalable Python projects from scratch. These
projects cover some of the most important concepts in Python and the
common problems that a Python programmer faces on a day-to-day basis...&amp;quot;
I'm busy already. And most of my examples are owned by my employer. I'm
not sure the exceptions are interesting enough.
You get to work with a really good publication team. I've been thrilled.
See &lt;a class="reference external" href="https://www.packtpub.com/books/info/packt/contact-us"&gt;https://www.packtpub.com/books/info/packt/contact-us&lt;/a&gt; Drop Shaon
Basu's name.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Dexy and word-processing toolchains</title><link href="https://slott56.github.io/2016_03_01-dexy_and_word_processing_toolchains.html" rel="alternate"></link><published>2016-03-01T08:00:00-05:00</published><updated>2016-03-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-03-01:/2016_03_01-dexy_and_word_processing_toolchains.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.dexy.it/"&gt;http://www.dexy.it&lt;/a&gt;
Wow. That seems cool.
I write. A lot.
I've tried a lot of tool chains. A lot. And I mean non-trivial &amp;quot;try&amp;quot;.
Whole books.  Hundreds of pages.
&lt;a class="reference external" href="https://pypi.python.org/pypi/leo/5.1"&gt;LEO&lt;/a&gt; + my own HTML Templates.
A lot of fun at first.  An outliner that generates RST is a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.dexy.it/"&gt;http://www.dexy.it&lt;/a&gt;
Wow. That seems cool.
I write. A lot.
I've tried a lot of tool chains. A lot. And I mean non-trivial &amp;quot;try&amp;quot;.
Whole books.  Hundreds of pages.
&lt;a class="reference external" href="https://pypi.python.org/pypi/leo/5.1"&gt;LEO&lt;/a&gt; + my own HTML Templates.
A lot of fun at first.  An outliner that generates RST is a very, very
handy thing for technical writing.
An XML editor (I forget which one. Maybe
&lt;a class="reference external" href="http://www.xmlmind.com/xmleditor/"&gt;http://www.xmlmind.com/xmleditor/&lt;/a&gt;?) with the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/DocBook"&gt;DocBook&lt;/a&gt; XML and XSLT
tool-chain. This produced HTML from the XML. I think it could also
produce LaTeX. Again, the outlining and structuring were kind of handy.
What was particularly cool was the diverse semantic markup tags
available in DocBook. Getting the tag containment right was a large pain
even with a handy GUI editor.
Plain Text using RST &amp;quot;the hard way;&amp;quot; i.e., without LEO. This isn't too
bad, it turns out. The outlining features of LEO -- while fun -- aren't
essential. A simple RST toolchain is easy to concoct. I used
&lt;a class="reference external" href="http://scons.org/"&gt;SCONS&lt;/a&gt; to rebuild HTML and LaTeX from the RST.
LaTeX. Once I had the base LaTeX from RST, I could then edit that to
produce an even richer document using lots of LaTeX add-on packages. I
use &lt;a class="reference external" href="https://tug.org/mactex/"&gt;MacTex&lt;/a&gt; and it is truly great. The
downside of LaTex -- for me -- was no &lt;em&gt;trivial&lt;/em&gt; way to go back to HTML
from the LaTeX.  There are some complex back-and-forth toolchains, but
it's easier to just produce a PDF. PDF looks great, but wasn't really my
goal.
RST with Sphinx. Wow. This &lt;strong&gt;is&lt;/strong&gt; elegant. I often produce chapter
drafts here, and then copy and paste the HTML into the word processors
preferred by the publishing industry.
[&lt;em&gt;They insist on applying their goofy markup templates to the text. It's
a subset of meaningful semantic markup used by Sphinx, but somehow their
toolchain must start with .DOCX files, and nothing else will do&lt;/em&gt;.]
Dexy was cool right up until I read this: &amp;quot;Dexy is a Python package
(Python 2.6-2.7 only)&amp;quot;.
Ouch. Web.py Utilities include DBUtils which won't install under Python
3.5. So that put the kibosh on Dexy. Sadface.&lt;/p&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="#python"></category><category term="LaTeX"></category><category term="xml"></category></entry><entry><title>SQL Hegemony and Document Databases</title><link href="https://slott56.github.io/2016_02_16-sql_hegemony_and_document_databases.html" rel="alternate"></link><published>2016-02-16T08:00:00-05:00</published><updated>2016-02-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-02-16:/2016_02_16-sql_hegemony_and_document_databases.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;A surpassingly strange question is this: &amp;quot;How do I get the data out of
MongoDB into a spreadsheet?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The variation is &amp;quot;How can we load the MongoDB data into a relational
database?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;I'm always perplexed by this question. It has a subtext that I find
baffling. The subtext is this …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;A surpassingly strange question is this: &amp;quot;How do I get the data out of
MongoDB into a spreadsheet?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The variation is &amp;quot;How can we load the MongoDB data into a relational
database?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;I'm always perplexed by this question. It has a subtext that I find
baffling. The subtext is this &amp;quot;all databases are relational, right?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;In order to ask the question, one has to be laboring under the
assumption that the only difference between MongoDB and a relational
database is the clever sticker on your laptop. Mongo folks have a
little green Mango leaf. Postgres has a blue/gray elephant.&lt;/div&gt;
&lt;div class="line"&gt;This assumption is remarkably hard to overcome.&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;How can we move this mongo data into a spreadsheet?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;What?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;You know. Get a bulk CSV extract.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;Of complex, nested documents?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;Nested documents?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;Mongo database documents include arrays and -- well --
subdocuments. They're not in first normal form. They don't fit the
spreadsheet data model.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;Whatever. Every database has a bulk unload into CSV. How do you
do that in Mongo?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;You can't represent a mongo document in rows and columns.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: (&lt;em&gt;Thumping desk for emphasis&lt;/em&gt;.) &amp;quot;Relational Theory is explicit.
ALL DATA CAN BE REDUCED TO ROWS AND COLUMNS!&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;Right. Through a process of normalization. The Mongo data you're
looking at isn't normalized. You'd have to normalize it into a
relational table model. Then you could write a customized extract
focused on that relational model.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;That's absurd.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;At this point, all we can do is give them the minimal pymongo
MongoClient code block. Hands-on queries seem to be the only way to
make progress.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
from pymongo import MongoClient
from pprint import pprint
with MongoClient(&amp;quot;mongodb://somehost:27017&amp;quot;) as mongo:
    collection = mongo.database.collection
    for document in collection.find():
         pprint(document)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Explanations seem to wind up in a weird circular pattern where they
keep repeating their relational assumptions. Not much seems to work:
diagrams, hand-waving, links to tutorials are all implicitly rejected
because they don't confirm SQL bias.&lt;/div&gt;
&lt;div class="line"&gt;A few days later they call asking how they are supposed to work with a
document that has complex nested fields inside it.&lt;/div&gt;
&lt;div class="line"&gt;This could be the beginning of wisdom. Or it could be the beginning of
a lengthy reiteration of SQL Hegemony talking points and desk
thumping.&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;The document has an array of values.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;Correct.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;What's that mean?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;It means there are multiple occurrences of the child object
within each parent object.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;I can see that. What does it mean?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: (&lt;em&gt;Rising inflection&lt;/em&gt;.) &amp;quot;The parent is associated with multiple
instances of the child.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;Don't patronize me! Stop using mongo mumbo-jumbo. Just a simple
explanation is all I want.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;ME: &amp;quot;One Parent. Many Children.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;THEM: &amp;quot;That's stupid. One-to-many absolutely requires a foreign key.
The children don't even have keys. Mongo must have hidden keys
somewhere. How can I see the keys on the children in this so-called
'array' structure? How can expose the underlying implementation?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The best I can do is show them an approach to normalizing some of the
data in their collection.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
from pymongo import MongoClient
from pprint import pprint
with MongoClient(&amp;quot;mongodb://your_host:27017&amp;quot;) as mongo:
    collection = mongo.your_database.your_collection
    for document in collection.find():
         for child in parent['child_array']:
              print( document['parent_field'], child['child_field'] )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This leads to endless confusion when some documents lack a particular
field. The Python document.get('field') is an elegant way to handle
optional fields. I like to warn them that they should not rely on
this. Sometimes document['field'] is appropriate because the field
really is mandatory. If it's missing, there are serious problems. Of
course, the simple get() method doesn't work for optional nested
documents. For this, we need document.get('field', {}). And for
optional arrays, we can use document.get('field', []).&lt;/div&gt;
&lt;div class="line"&gt;Interestingly we sometimes have confusion over {} for document and []
for array. I chalk that up to folks who are too used to very wordy SQL
and Java. I save the questions for my next book on Python.&lt;/div&gt;
&lt;div class="line"&gt;At some point, the &amp;quot;optional&amp;quot; items may be more significant than this.
Perhaps an &lt;strong&gt;if&lt;/strong&gt; statement is required to handle business rules that
are reflected as different document structures in a single collection.&lt;/div&gt;
&lt;div class="line"&gt;This leads to yet more desk-thumping. It's accompanied with the
laughable claim that a &amp;quot;real&amp;quot; database doesn't rely on &lt;strong&gt;if&lt;/strong&gt;
statements to distinguish variant subentities that are persisted in a
single table. The presence of SQL &lt;strong&gt;ifnull()&lt;/strong&gt; functions, &lt;strong&gt;case&lt;/strong&gt;
expressions, and application code with &lt;strong&gt;if&lt;/strong&gt; statements apparently
doesn't exist. Or -- when it is pointed out -- isn't the same thing as
writing an &lt;strong&gt;if&lt;/strong&gt; statement to handle variant document subentities in
a Mongo database.&lt;/div&gt;
&lt;div class="line"&gt;It appears to take about two weeks to successfully challenge
entrenched relational assumptions. Even then, we have to go over some
of the basics of optional fields and arrays more than once.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="noSQL"></category><category term="SQL"></category><category term="mongodb"></category></entry><entry><title>The Spike Solution</title><link href="https://slott56.github.io/2016_02_09-the_spike_solution.html" rel="alternate"></link><published>2016-02-09T08:00:00-05:00</published><updated>2016-02-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-02-09:/2016_02_09-the_spike_solution.html</id><summary type="html">&lt;p&gt;I've had a lingering question about the &amp;quot;spike solution&amp;quot; phrase.
What's the etymology of this?&lt;/p&gt;
&lt;p&gt;For a long time, I thought of spike as in &amp;quot;nailing down some details.&amp;quot;&lt;/p&gt;
&lt;p&gt;Today, I found this: &lt;a class="reference external" href="http://agiledictionary.com/209/spike/"&gt;http://agiledictionary.com/209/spike/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was wrong. I'm happy to see this explanation.&lt;/p&gt;
&lt;p&gt;The phrase appears …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've had a lingering question about the &amp;quot;spike solution&amp;quot; phrase.
What's the etymology of this?&lt;/p&gt;
&lt;p&gt;For a long time, I thought of spike as in &amp;quot;nailing down some details.&amp;quot;&lt;/p&gt;
&lt;p&gt;Today, I found this: &lt;a class="reference external" href="http://agiledictionary.com/209/spike/"&gt;http://agiledictionary.com/209/spike/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was wrong. I'm happy to see this explanation.&lt;/p&gt;
&lt;p&gt;The phrase appears to come from spike (or piton) used in technical
rock climbing. Strictly speaking, from &amp;quot;traditional&amp;quot; climbing with
removable gear.&lt;/p&gt;
&lt;p&gt;Since I started rock climbing about a year ago, I now have a deeper
sense of what this &amp;quot;spike&amp;quot; thing really means.&lt;/p&gt;
&lt;p&gt;Setting a spike makes safe progress possible. Once the spike is set,
the climber has defined where the route is. A carabiner can be
attached and the belay line placed there.&lt;/p&gt;
&lt;p&gt;For people like me -- old and fat -- rock climbing is an indoor
activity using a fixed &amp;quot;top-rope&amp;quot;. The climbers call this &amp;quot;sport&amp;quot;
climbing. There are tiers to this activity:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sport climbing is the most accessible level of climbing. Indoor sport
climbing involves plastic holds bolted to a concrete wall. It's
pretty easy. It's as much a problem-solving exercise as it is a
physical exertion.&lt;/li&gt;
&lt;li&gt;Outdoor sport climbing involves fixed bolts. I've seen this from the
ground. It looks like it might be fun.&lt;/li&gt;
&lt;li&gt;Traditional climbing involves removable gear like spikes, pitons, and
cams. I've seen people training for this in indoor rock gyms. I've
even belayed for folks doing a kind of hybrid training ascending a
crack on top rope. This means no plastic holds -- just a crack in the
concrete wall.  I'm not sure I'll ever be able to do this.&lt;/li&gt;
&lt;li&gt;Alpine climbing, different from trail-head climbing. This is the kind
of thing that may involve high altitudes, varied terrain, and long
distances.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't have any direct experience with spikes, nor even placing
carabiners on fixed bolts.  I've seen some of this, though. I aspire
to being able to do indoor &amp;quot;lead climbing&amp;quot;. This is a common sport
technique where the belay line is clipped to fixed bolts as the
climber ascends. Someone who does lead climbing isn't relying on a
previously set top rope.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/IMG_4631.jpg"&gt;&lt;img alt="Rock-climbing in Red Rocks" src="https://slott56.github.io/media/IMG_4631.jpg" style="width: 300px; height: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;For more information you'll need to look for the phrase &amp;quot;trad gear
rack&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mojagear.com/learn/2014/05/16/building-a-trad-rack/"&gt;http://mojagear.com/learn/2014/05/16/building-a-trad-rack/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.alpineinstitute.com/articles/expert-tips/how-to-select-an-alpine-rack/"&gt;http://www.alpineinstitute.com/articles/expert-tips/how-to-select-an-alpine-rack/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As with software, there's a lot of jargon in rock climbing.  &amp;quot;Pro&amp;quot; --
for example -- means protection. It's what you place to keep from
getting hurt. A spike or a cam is a piece of pro.&lt;/p&gt;
&lt;p&gt;I'm much happier using the term &amp;quot;spike solution&amp;quot; now that I see that
my wintertime hobby fits with my day job.&lt;/p&gt;
&lt;p&gt;And. Just to be complete, I need to point out that sailors use spikes
all the time. For a sailor a spike is a tool used to untie (and tie)
knots in line. See &lt;a class="reference external" href="http://www.amazon.com/gp/product/B0161WG82O/ref=dp-kindle-redirect?ie=UTF8&amp;amp;btkr=1"&gt;The Marlinspike
Sailor&lt;/a&gt; for
examples of what sailors do with line.&lt;/p&gt;
&lt;p&gt;The problem with trying to find a sailing-related etymology is that
(1) the term doesn't seem to be used, and (2) a sailor's &amp;quot;spike
solution&amp;quot; would be a relatively permanently rigged arrangement of
line. Sailors use the term &amp;quot;jury-rigged&amp;quot; to describe something
temporary or experimental. The best part of marine terminology is that
sailors speak their own language. Often there is no clear etymology to
any other language.&lt;/p&gt;
&lt;p&gt;Software folks, however, are masters of borrowing existing terms.
&amp;quot;Spike&amp;quot; being an example of borrowing from technical rock climbing.&lt;/p&gt;
</content><category term="Technologies"></category><category term="etymology"></category><category term="Programming Languages"></category></entry><entry><title>Why I don't want to share your screen -- OR -- What I learned from stackoverflow</title><link href="https://slott56.github.io/2016_02_02-why_i_dont_want_to_share_your_screen_or_what_i_learned_from_stackoverflow.html" rel="alternate"></link><published>2016-02-02T08:00:00-05:00</published><updated>2016-02-02T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-02-02:/2016_02_02-why_i_dont_want_to_share_your_screen_or_what_i_learned_from_stackoverflow.html</id><summary type="html">&lt;p&gt;I know it sounds arrogant, but I don't want to share your screen to sort
out a Python programming problem. I have two reasons and I think one of
them is a good one.&lt;/p&gt;
&lt;p&gt;It's both pedagogical and personal.&lt;/p&gt;
&lt;p&gt;Personally, I'm often left breathless by demos. Watching the cursor
fly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I know it sounds arrogant, but I don't want to share your screen to sort
out a Python programming problem. I have two reasons and I think one of
them is a good one.&lt;/p&gt;
&lt;p&gt;It's both pedagogical and personal.&lt;/p&gt;
&lt;p&gt;Personally, I'm often left breathless by demos. Watching the cursor
fly around the screen is -- well -- dizzying. What was I supposed to
be watching? Who's IM messages are popping up? What meeting reminders
are you ignoring?&lt;/p&gt;
&lt;p&gt;It may seem helpful to wave the cursor around, and show me your whole
desktop world. And for some people, the discussion may actually be
helpful. Sometimes they have an epiphany while they're explaining
stuff to me. That's good. For me, it's bewildering. Sorry. I'm only
going to read the visible fragments of your emails in the background
window.&lt;/p&gt;
&lt;p&gt;From a pedagogical perspective, there's this point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;I think that it's very important to learn how to focus on the details that matter.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;This breaks down into several related skills:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I think everyone needs to be able to copy and paste text.
Screenshot images are hard to work with. On Stack Overflow, a
4-space indent is mandatory. It's not hard. A surprising number of
programmers struggle with it.&lt;/li&gt;
&lt;li&gt;Articulate the actual problem. &amp;quot;Doesn't work&amp;quot; really is not
sensible. I think it's important to insist on a concrete statement
of the problem. Asking me to deduce it while looking at your
screen isn't building any of your skills.&lt;/li&gt;
&lt;li&gt;Find the relevant portion of the Python traceback. Yes, that's
hard. But it's part of coding. Asking me to read the traceback
doesn't build your skills.&lt;/li&gt;
&lt;li&gt;Find the relevant portions of the code that's broken. Again, when
I pinpoint the line of code from reading the traceback, your
skills haven't grown. I'm well aware that it's confusing when
there's a long traceback from a framework that only seems to
include your module 6 levels in. If you aspire to mastering code,
that has to be part of your aspiration.&lt;/li&gt;
&lt;li&gt;Hypothesize a root cause. This is perhaps the hardest skill. The
confirmation bias problem leads many people to write wrong code
and complain that it's &amp;quot;broken&amp;quot; in a vague way. During screen
sharing they scroll past their assumptions as if they're always
correct. I have sympathy. But, it's essential to understand the
semantics of alanguage. More importantly, it's essential to learn
to judge where our assumptions might deviate from reality.
Overcoming confirmation bias is hard. Maybe a long conversation is
the only way to realize this; I hope not.&lt;/li&gt;
&lt;li&gt;Experiment. Python offers the &amp;gt;&amp;gt;&amp;gt; prompt at which you can
experiment. Use it. This is the best way to explore your
assumptions and see what the actual language semantics are.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe I'm just being hypersensitive, but there's little to really
talk about. If we could focus on the relevant code, perhaps
through copy-and-paste, I can help. Otherwise, I feel like I'm
just watching helplessly while an amusement park ride spins me
around for a while, leaving me dizzy and confused. And not having
offered any concrete help.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="training"></category><category term="building skills"></category></entry><entry><title>SQL Hegemony -- the "Pivot Table" problem</title><link href="https://slott56.github.io/2016_01_19-sql_hegemony_the_pivot_table_problem.html" rel="alternate"></link><published>2016-01-19T08:00:00-05:00</published><updated>2016-01-19T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-01-19:/2016_01_19-sql_hegemony_the_pivot_table_problem.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;As far as I can tell, the &lt;strong&gt;Pivot Table Problem™&lt;/strong&gt; only exists for
people who have actively put on blinders so that they can only see
data one way.&lt;/div&gt;
&lt;div class="line"&gt;This leads to the following.&lt;/div&gt;
&lt;div class="line"&gt;The context appears to be millions of rows of data. Hundreds of
columns.  It appears that …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;As far as I can tell, the &lt;strong&gt;Pivot Table Problem™&lt;/strong&gt; only exists for
people who have actively put on blinders so that they can only see
data one way.&lt;/div&gt;
&lt;div class="line"&gt;This leads to the following.&lt;/div&gt;
&lt;div class="line"&gt;The context appears to be millions of rows of data. Hundreds of
columns.  It appears that someone we'll call DesKtop tried to load a
spreadsheet to &amp;quot;pivot&amp;quot; the data. And the spreadsheet -- of course --
breaks because it's too much data.&lt;/div&gt;
&lt;div class="line"&gt;DesKtop then calls the DBA.&lt;/div&gt;
&lt;div class="line"&gt;DesKtop: &amp;quot;We need to load a table and use the database to create a
spread-sheet like pivot table.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;DBA: &amp;quot;Okay. Cool. It's complex SQL, though. Check this out...&amp;quot; They
look at the Oracle 11g PIVOT and UNPIVOT.&lt;/div&gt;
&lt;div class="line"&gt;DesKtop: &amp;quot;Oh my. That's really complex. Okay, I guess that's the only
choice, right?&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;DBA: &amp;quot;Right, it is our only possible choice.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Wrong.&lt;/div&gt;
&lt;div class="line"&gt;[I heard about this from DBA who sent me a &amp;quot;humble brag&amp;quot; about
something that can only be done with hyper-complex SQL query. DBA had
found a Python tutorial on Pandas that mentioned pivoting. The humble
brag point was this: the Python stuff was just as hyper-complex as the
SQL. Apparently, DBA conflated the entire tutorial with the one line
of code that was the pivot example.]&lt;/div&gt;
&lt;div class="line"&gt;If you restructure the data into (&lt;em&gt;row key, column key, cell value&lt;/em&gt;)
triples, you don't have a &lt;strong&gt;Pivot Table Problem™&lt;/strong&gt; any more. You have
a SELECT reduction() GROUP BY row &lt;em&gt;vs&lt;/em&gt;. SELECT reduction GROUP BY
column kind of query. There's no &amp;quot;pivot&amp;quot;. Maybe it's a conceptual
pivot but there's no hyper-complex SQL.&lt;/div&gt;
&lt;div class="line"&gt;It requires a non-trivial loader to transform data that's in row order
and explode it into triples. This isn't the kind of thing a program
like Oracle's SQL*Loader or other bulk loader does particularly well.
In Python (without using Pandas) we can expand the data into triples
like this:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
for row in reader:
    for column in column_names:
        new_row = row['key'], column, row[column]
        insert...
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The idea here is that we're using something like a csv DictReader. We
have a list of column names we'd like to pivot. In many row-oriented
data sets, there are columns we might like to ignore. For example, the
row key column itself shouldn't be exploded into a (&lt;em&gt;row key, column
key, row key&lt;/em&gt;) triple.&lt;/div&gt;
&lt;div class="line"&gt;This restructuring idea applies in full force to doing Python-based
reduction of the data. Forget loading a database in the first place.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
by_column = defaultdict(list)
for row in reader:
    for column in column_names:
        by_column[column].append(row[column])
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;We've summarized each column's data into a list of values. This is the
&amp;quot;GROUP BY&amp;quot; part of the SQL. Now we can do reductions on the values in
each column-based list.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
from statistics import mean
for column in by_column:
    print(column, sum(by_column[column]), mean(by_column[column]))
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;We've done sum and mean reductions on the values in each column. We
can -- of course -- layer in mapping and filtering if that's required.&lt;/div&gt;
&lt;div class="line"&gt;This works well for millions of individual cells of data. We can
comfortably hold several hundred million individual values in memory
in a 32Gb desktop computer. You may notice the fan kicks on when this
is running.&lt;/div&gt;
&lt;div class="line"&gt;If this turns out to require too much storage, then the reductions can
be computed item-by-item rather than simply accumulating a list of
values. This a hair more complex, but not in an interesting way.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
sum_by_column = defaultdict(int)
count_by_column = defaultdict(int)

for row in reader:
    for column in column_names:
        sum_by_column[column] += row[column]
        count_by_column[column] += 1
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Minima and Maxima are a trifle trickier. We don't want to initialize
them to None and have an if current_min is None statement executed
millions of times. We have to create an iterator and process the first
row specially, using it to initialize all of the values. The remaining
rows can then be processed free of any initialization question.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
row_iter= iter(reader)
first = next(row_iter)
for column in column_names:
    min_by_column[column]= row[column]
    max_by_column[column]= row[column]
for row in row_iter:
    for column in column_names:
        min_by_column[column] = min( min_by_column[column], row[column])
        max_by_column[column] = max(max_by_column[column], row[column])
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I like to call this the &lt;strong&gt;Head-Tail&lt;/strong&gt; design pattern.&lt;/div&gt;
&lt;div class="line"&gt;The DBA and DesKtop appear to be married to SQL. Even when it appears
to be an ineffective solution to their problem.&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="database design"></category><category term="SQL"></category></entry><entry><title>"Learn Python" is growing</title><link href="https://slott56.github.io/2016_01_12-learn_python_is_growing.html" rel="alternate"></link><published>2016-01-12T08:00:00-05:00</published><updated>2016-01-12T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2016-01-12:/2016_01_12-learn_python_is_growing.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://dzone.com/articles/learn-python-overtakes-learn-java"&gt;https://dzone.com/articles/learn-python-overtakes-learn-java&lt;/a&gt;
I've seen companies making sincere enterprise-wide commitments to doing
all data analysis in Python. There's no reason for quants and analysts
to struggle with Java.
I field one or two questions a week from folks pushing the in-house
envelope on data acquisition.
I also field …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://dzone.com/articles/learn-python-overtakes-learn-java"&gt;https://dzone.com/articles/learn-python-overtakes-learn-java&lt;/a&gt;
I've seen companies making sincere enterprise-wide commitments to doing
all data analysis in Python. There's no reason for quants and analysts
to struggle with Java.
I field one or two questions a week from folks pushing the in-house
envelope on data acquisition.
I also field questions on language basics.
It's a very exciting thing.
I'm glad I started down this road 15 years ago.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="java"></category></entry><entry><title>SQL Hegemony -- a sad state of affairs</title><link href="https://slott56.github.io/2015_12_29-sql_hegemony_a_sad_state_of_affairs.html" rel="alternate"></link><published>2015-12-29T08:00:00-05:00</published><updated>2015-12-29T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-12-29:/2015_12_29-sql_hegemony_a_sad_state_of_affairs.html</id><summary type="html">&lt;p&gt;It appears that there are people who don't recognize SQL as a
tradeoff.&lt;/p&gt;
&lt;p&gt;Here's a complex two-part question that can only come from folks who
firmly believe in the magic of SQL.&lt;/p&gt;
&lt;p&gt;The sentence that got my attention was &amp;quot;Python has basically made SQL
obsolete as a language for data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It appears that there are people who don't recognize SQL as a
tradeoff.&lt;/p&gt;
&lt;p&gt;Here's a complex two-part question that can only come from folks who
firmly believe in the magic of SQL.&lt;/p&gt;
&lt;p&gt;The sentence that got my attention was &amp;quot;Python has basically made SQL
obsolete as a language for data structure manipulation&amp;quot;. My question
would be about scaling.  If [&lt;em&gt;we? you?&lt;/em&gt;] have 30 million rows in a
table, would Python still be better than straight up SQL? The other
question would be about the amount of time to come up to speed. It
just seems easier to learn SQL than Python.&lt;/p&gt;
&lt;p&gt;Also, in working with legacy DBA's who are starting to learn
Cassandra, I see similar magical thinking. Somehow, Oracle's behavior
can become a baseline in some people's minds. When Cassandra's column
database shows different behavior, there are DBA's who are
surprisingly quick to portray Cassandra as &amp;quot;wrong&amp;quot; or &amp;quot;confusing.&amp;quot;
Worse, they'll waste a lot of time insisting that Cassandra is
misusing the term &amp;quot;key&amp;quot; because Cassandra's idempotency policy means
multiple INSERTS with the same primary key are handled differently
from Oracle. Labeling Cassandra as &amp;quot;wrong&amp;quot; is a similar problem to the
question.&lt;/p&gt;
&lt;p&gt;Let's unpack the &amp;quot;SQL is better&amp;quot; question and see why this seems so
sad.&lt;/p&gt;
&lt;p&gt;I'm not going to address the quote (&amp;quot;Python has basically made SQL
obsolete...&amp;quot;) since that wasn't part of the question. That's just
background. And everyone seems to agree on this. The question appears
to be related to clinging to SQL in spite of Python's advantages.&lt;/p&gt;
&lt;p&gt;But first, I have to note that the question violates some pretty
serious rules of engagement.&lt;/p&gt;
&lt;div class="section" id="the-rules-for-questions"&gt;
&lt;h2&gt;The Rules for Questions&lt;/h2&gt;
&lt;p&gt;Asking hand-waving hypotheticals is generally a pretty bad practice.
Sometimes, I'm completely intolerant, and refuse to engage. In this
case, I felt compelled to respond, in spite if the vacuousity of the
question.&lt;/p&gt;
&lt;p&gt;First, of course, &amp;quot;better&amp;quot; is undefined in the question. That
essentially ends any conversation.&lt;/p&gt;
&lt;p&gt;Second, there's no code. It's very hard to discuss anything without
code. All the hand-waving is essentially meaningless because when
code finally does show up, it will fit into some edge or corner not
properly covered by hand-waving.&lt;/p&gt;
&lt;p&gt;Third, there's no possibility of code. There's nothing resembling a
tangible use case or scenario that can be turned into code for
comparison purposes.&lt;/p&gt;
&lt;p&gt;Also,  the question seems to be creating a false dichotomy between
SQL and Python. This is a more subtle issue, and we'll look at this,
too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-better-than-sql"&gt;
&lt;h2&gt;Python Better Than SQL&lt;/h2&gt;
&lt;p&gt;We can assign a number of potential meanings to &amp;quot;better&amp;quot;. Some other
phrases -- &amp;quot;30 million rows in a table&amp;quot; and &amp;quot;about scaling&amp;quot; -- could
be dismissed as mere noise. Perhaps they're hints.&lt;/p&gt;
&lt;p&gt;Let's assume it's about size of storage. Can Python deal with 30
million rows of data? Since we don't know the row size, there is no
actual answer. Without transactions or activities of some kind, we're
similarly bereft of the kinds of details that lead to a sensible
answer.&lt;/p&gt;
&lt;p&gt;Let's say we're limited to 32Gb of memory. If the row size is up to
1Kb, we can fit all of the data in memory. We're pretty much done with
size and speed.  Python wins for the canonical CRUD operations.&lt;/p&gt;
&lt;p&gt;Python wins because any code we write will be completely customized
for the data we're given. We're freed from generalized SQL type
conversion complexity, ODBC driver folderol, storage management
overheads, SQL language parsing work. Just the data manipulation. No
lock escalation or read consistency consideration. Done.&lt;/p&gt;
&lt;p&gt;But wait. Not so fast, what about loading 32Gb into memory?&lt;/p&gt;
&lt;p&gt;What about it? The problem is so delightfully vague that we have no
clue what &amp;quot;loading&amp;quot; might mean. Oracle takes a while to mount a
database and do other startup things. Python can open a file and slurp
in the data pretty quickly. If you want to amortize the loading time,
you can have smarter loader that brings in data incrementally.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def load(data, key_col):
   with data.open() as source:
       rdr = csv.reader(source)
       table = { row[key_col]: row for row in rdr }
   return table

def CRUD(table, key_col, update_col):
   row = tuple(random_text() for i in range(10))

   # INSERT INTO table(col,col,...) VALUES(val,val,...)
   table[row[key_col]]= row

   # SELECT * FROM TABLE WHERE key_col = value
   found = table[row[key_col]]
   #print( found )

   # UPDATE TABLE SET update_col = &amp;quot;value&amp;quot; WHERE key_col = value
   table[row[key_col]][update_col] = &amp;quot;special text&amp;quot;

   # DELETE FROM TABLE WHERE key_col = value
   del table[row[key_col]]

   # Is it gone?
   assert row[key_col] not in table
&lt;/pre&gt;
&lt;p&gt;Rather than go for 30 million rows on this little laptop (with only
8Gb RAM), we'll load 30,000 rows each of which is about 150
characters. Small. The point, however, is this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
load 0.133, CRUD 0.176
&lt;/pre&gt;
&lt;p&gt;We can load 30,000 rows of data in 133 ms.  We can do 1,000 sets of
CRUD operations in 176 ms. The load time scales with total number of
bytes, row size × number of rows. The CRUD operation time will barely
move no matter how many rows or how big the rows are.&lt;/p&gt;
&lt;p&gt;The problem with this kind of benchmark is that it plays to SQL's
strengths. It makes SQL look like the benchmark. We're forced to show
how some non-SQL language can also do what SQL does. And that's silly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-bigger"&gt;
&lt;h2&gt;What About Bigger?&lt;/h2&gt;
&lt;p&gt;Let's pretend the number was supposed to be 30 billion rows of data.
Something that clearly can't fit into memory. Wait. Traditional SQL
databases struggle with this, too. Let's press on. 30 billion rows of
data. Each row is at least 1K in size. 3Tb of storage. Can Python do
this?&lt;/p&gt;
&lt;p&gt;Recall that the question gives us no help in reasoning about &amp;quot;better&amp;quot;.&lt;/p&gt;
&lt;p&gt;What's the representation? 3Tb has got to be a implemented as
collection of smaller files. All of the files must have a common
format. Let's posit CSV. We don't really want all of this storage on a
single server. We want to farm this out to several hosts. And we
probably want to layer in some redundancy in case one of those hosts
fails.&lt;/p&gt;
&lt;p&gt;Okay. It might not be obvious, but we're describing the HDFS from
Hadoop. We could -- without too much trouble -- implement an HDFS
surrogate that has very limited functionality in Python. We can use
SFTP to smear two copies of each file among a fixed-size farm of
servers. Very hard-wired, unlike Hadoop.&lt;/p&gt;
&lt;p&gt;Then the reading part of our imagined app will scroll through the
collection of CSV-formatted files on each processor. We'd have to
implement a Hadoop map-reduce in Python. Again. Not very difficult if
we eliminate some features and stick to a very basic version
map-reduce. We can coordinate the reductions by implementing a simple
REST-based master-reducer that accepts the reductions from the other
processors and does the final reduce.&lt;/p&gt;
&lt;p&gt;Now we have a lot of Python language overheads. Have we failed at
&amp;quot;better&amp;quot; because we polluted the solution with a fake Hadoop?&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;The SQL folks had to install, configure, and manage a SQL database
that handled 3Tb of storage. The Python folks installed Python.
Installed their fake Hadoop. Then they used a few clever abstractions
to write delightfully simple map and reduce functions. Python still
handles the extremely large amount of data faster than SQL. Also, it
does this without some RDBMS features.&lt;/p&gt;
&lt;p&gt;Which leads us to the second part of the question. Expressivity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easier-to-learn"&gt;
&lt;h2&gt;Easier to Learn&lt;/h2&gt;
&lt;p&gt;From the Question: &amp;quot;It just seems easier to learn SQL than Python&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is pretty much meaningless noise. Less meaningful than the rest
of the question. Having taught both, I'm confident in saying that SQL
can be pretty confusing.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;More importantly.&lt;/p&gt;
&lt;p&gt;There's no rational basis for comparison.&lt;/p&gt;
&lt;p&gt;SQL DML is a very tiny language with only a few concepts. It's not a
Turing-complete programming language.&lt;/p&gt;
&lt;p&gt;What's important is this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="we-have-to-embed-sql-in-another-language"&gt;
&lt;h2&gt;We have to embed SQL in another language.&lt;/h2&gt;
&lt;p&gt;You can't actually DO anything in SQL by itself. You need another
language.&lt;/p&gt;
&lt;p&gt;In the old days, we actually wrote SQL in the middle of some other
programming language source. A pre-processor replaced SQL with the
other language's code. Now we use ODBC/JDBC or other drivers to
execute SQL from within another language. The embedding isn't quite so
literal as it once was. But it's still embedding.&lt;/p&gt;
&lt;p&gt;The SQL vs. Programming Language is not an &amp;quot;either-or&amp;quot; situation. We
never have a stark choice between SQL or &amp;quot;some other language.&amp;quot; We
always have to learn &amp;quot;some other language.&amp;quot; Always.&lt;/p&gt;
&lt;p&gt;That &amp;quot;other language&amp;quot; might be PL/SQL or TSQL or whatever scripting
tool of choice comes bundled with the database. It isn't SQL, it's
another Turing-complete language that shares SQL syntax.&lt;/p&gt;
&lt;p&gt;Since &amp;quot;some other language&amp;quot; is &lt;strong&gt;required&lt;/strong&gt;, the real question is &amp;quot;is
there value in &lt;strong&gt;also&lt;/strong&gt; learning SQL?&amp;quot; Or -- most importantly --
&amp;quot;What's the value in spreading the knowledge representation around
among multiple languages?&amp;quot;&lt;/p&gt;
&lt;p&gt;In some contexts, SQL can act as a &lt;em&gt;lingua franca&lt;/em&gt;, allowing a kind of
uniform access to data irrespective of the application programming
language.&lt;/p&gt;
&lt;p&gt;In most contexts, however, the SQL -- in isolation -- is incomplete.
There is application processing that has semantic significance. The
&amp;quot;do everything in stored procedures&amp;quot; crowd spend too much time in
raging denial that application logic is still used to wrap their
stored procedures.  No matter how enthusiastic one embraces stored
procedures, application code still exists, and still implements
semantically significant operations.&lt;/p&gt;
&lt;p&gt;SQL is merely a short-hand notation for &lt;em&gt;potentially&lt;/em&gt; complex
algorithms. It's an optimization. SQL elects for universality via
abstraction. It can't cover efficiency or scalability. We have to bind
in a representation and access algorithm to compare SQL performance
with another language's performance. Or scalability.&lt;/p&gt;
&lt;p&gt;By itself, SQL is useless. So there's a false dichotomy implied by the
question.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-head-to-head-problem"&gt;
&lt;h2&gt;The Head-To-Head Problem&lt;/h2&gt;
&lt;p&gt;Above, I provided code that demonstrates SQL CRUD operations in
Python. This is, of course, silly. It presumes that SQL is the
benchmark standard which Python must meet.&lt;/p&gt;
&lt;p&gt;What if we lift up Python as the benchmark that SQL has to meet?&lt;/p&gt;
&lt;p&gt;Ooops.&lt;/p&gt;
&lt;p&gt;We can trivially write things in Python which cannot be expressed in
SQL at all.  E.g., Compute the 1000th Fibonacci Number. For fun, go to
&lt;a class="reference external" href="https://projecteuler.net/archives"&gt;https://projecteuler.net/archives&lt;/a&gt; and pick any problem and try to
solve it in SQL. Try to even frame the problem in a way that the
solution can be expressed in SQL. SQL has profound limitations.&lt;/p&gt;
&lt;p&gt;Okay. That's sort of like cheating.&lt;/p&gt;
&lt;p&gt;Let's not raise the bar quite so high, then. Here's today's problem.&lt;/p&gt;
&lt;p&gt;I got a spreadsheet with 100's of rows of student evaluations. It may
have come from Survey Monkey. Or not. It doesn't matter.&lt;/p&gt;
&lt;p&gt;Most of the columns are some kind of Agree-Disagree scale. Other
columns are comments or usernames, or stuff in an open-ended domain.&lt;/p&gt;
&lt;p&gt;Note that I don't know which columns. And I don't care. And I don't
need to care.&lt;/p&gt;
&lt;p&gt;Here's how we tackle this in Python. It &lt;strong&gt;can&lt;/strong&gt; be done in SQL. That's
the point. It's not impossible. It's just kind of complex. Especially
because the data loading either requires converting the data to a
sequence of INSERT statements or we have to use a &amp;quot;loader&amp;quot; which lives
outside the SQL language.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections import Counter
def summarize(data):
   with data.open() as source:
       rdr = csv.DictReader(source)
       summaries = {name: Counter() for name in rdr.fieldnames}
       for row in rdr:
           for key, value in row.items():
               summaries[key][value] += 1
   for key in sorted(summaries):
       summary= summaries[key]
       if len(summary) == 5:
           print(key, summary)
       else:
           print(key, &amp;quot;More than 5 values&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This is the kind of thing that people do in Python that demonstrates
the limitations of SQL.  We've summarized all columns doing a
count/group-by in one pass through the data. We've build Counter
objects for each column name in the file. Each Counter object will
collect a complete histogram for a given column. We'll do all of the
columns at once.&lt;/p&gt;
&lt;p&gt;This is scalable to millions or billions of rows and runs delightfully
quickly. Doing something similar with SELECT COUNT(*) FROM TABLE GROUP
BY SOMETHING is remarkably slow.  Databases are forced to do a lot of
on-disk sorting and temporary file creation. The Python Counter lives
in memory and works at in-memory speeds. Even for millions of rows of
data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Please define &amp;quot;better&amp;quot;. Be explicit on what your goals are: speed,
ACID, reliability, whatever.&lt;/p&gt;
&lt;p&gt;Please provide code. Or provide use cases that map directly to code.&lt;/p&gt;
&lt;p&gt;Please stop clinging to SQL. Be realistic.&lt;/p&gt;
&lt;p&gt;Please consider the basics: Does it capture knowledge effectively? Is
it expressive?&lt;/p&gt;
&lt;p&gt;Please don't create dichotomies where none exist.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="performance"></category><category term="SQL"></category><category term="scalability"></category></entry><entry><title>Coming Soon: Python for Secret Agents Part II</title><link href="https://slott56.github.io/2015_12_22-coming_soon_python_for_secret_agents_part_ii.html" rel="alternate"></link><published>2015-12-22T08:00:00-05:00</published><updated>2015-12-22T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-12-22:/2015_12_22-coming_soon_python_for_secret_agents_part_ii.html</id><summary type="html">&lt;p&gt;I guess it's like a movie franchise or a series of novels. The first one
was popular. So, write a second story with similar characters.
You can check find part I
here: &lt;a class="reference external" href="http://www.amazon.com/gp/product/B00N2RWMMW/ref=dp-kindle-redirect?ie=UTF8&amp;amp;btkr=1"&gt;http://www.amazon.com/gp/product/B00N2RWMMW/ref=dp-kindle-redirect?ie=UTF8&amp;amp;btkr=1&lt;/a&gt;
and
here: &lt;a class="reference external" href="https://www.packtpub.com/hardware-and-creative/python-secret-agents"&gt;https://www.packtpub …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I guess it's like a movie franchise or a series of novels. The first one
was popular. So, write a second story with similar characters.
You can check find part I
here: &lt;a class="reference external" href="http://www.amazon.com/gp/product/B00N2RWMMW/ref=dp-kindle-redirect?ie=UTF8&amp;amp;btkr=1"&gt;http://www.amazon.com/gp/product/B00N2RWMMW/ref=dp-kindle-redirect?ie=UTF8&amp;amp;btkr=1&lt;/a&gt;
and
here: &lt;a class="reference external" href="https://www.packtpub.com/hardware-and-creative/python-secret-agents"&gt;https://www.packtpub.com/hardware-and-creative/python-secret-agents&lt;/a&gt;
Part II will be available soon. New missions. New ways to gather and
analyze intelligence information assets.
I should probably read some Ian Fleming or Robert Ludlum boos to get
some ideas for more exciting missions.
I'm more a fan of John le Carré stories which are less high-tech and
more about ordinary selling out.
I'm also a fan of the history of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Joan_Pujol_Garcia"&gt;Agent
Garbo&lt;/a&gt; and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Operation_Mincemeat"&gt;Operation
Mincement&lt;/a&gt;. These
are things that are really interesting uses of data, intelligence, and
misdirection.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category><category term="python for secret agents"></category></entry><entry><title>Writing About Code -- Or -- Why I love RST</title><link href="https://slott56.github.io/2015_12_15-writing_about_code_or_why_i_love_rst.html" rel="alternate"></link><published>2015-12-15T08:00:00-05:00</published><updated>2015-12-15T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-12-15:/2015_12_15-writing_about_code_or_why_i_love_rst.html</id><summary type="html">&lt;p&gt;I blog. I write books. I write code. There are profound tool-chain
issues in all three of these. Mostly, I'm tired of shabby &amp;quot;What You
See Is All You Get&amp;quot; editing.&lt;/p&gt;
&lt;p&gt;First. I use this blogger site as well as a
&lt;a class="reference external" href="https://www.jivesoftware.com/"&gt;Jive-based&lt;/a&gt; site at work. They're
handy. But. There are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I blog. I write books. I write code. There are profound tool-chain
issues in all three of these. Mostly, I'm tired of shabby &amp;quot;What You
See Is All You Get&amp;quot; editing.&lt;/p&gt;
&lt;p&gt;First. I use this blogger site as well as a
&lt;a class="reference external" href="https://www.jivesoftware.com/"&gt;Jive-based&lt;/a&gt; site at work. They're
handy. But. There are a lot of issues. A lot. Web-based editing leaves
a lot to be desired.&lt;/p&gt;
&lt;p&gt;Second. Books. &lt;a class="reference external" href="https://www.packtpub.com/"&gt;Packt&lt;/a&gt; requires MS-Word
for drafts. The idea here is that authors, editors, and reviewers
should all use a single tool. I push the boundaries by using &lt;a class="reference external" href="https://www.libreoffice.org/"&gt;Libre
Office&lt;/a&gt; and &lt;a class="reference external" href="https://www.openoffice.org/"&gt;Open
Office&lt;/a&gt;. This works out most of the
time, since these tools will absorb the MS-office style sheet that
Packt uses. It doesn't work out well for typesetting math, but the
technical editors are good about tracking down the formulae when they
get lost in the conversions. These over-wrought do-too-much word
processing nightmares leave a lot to be desired.&lt;/p&gt;
&lt;p&gt;Third. Code. I use &lt;a class="reference external" href="http://komodoide.com/komodo-edit/"&gt;ActiveState Komodo
Edit&lt;/a&gt;.  Both at work and outside
of work. This rocks.&lt;/p&gt;
&lt;div class="section" id="web-based-editing-fail"&gt;
&lt;h2&gt;Web-Based Editing Fail&lt;/h2&gt;
&lt;p&gt;What's wrong with Jive or Blogger? The stark contrast between
JavaScript-based text edit tools and HTML. It's either too little
control or too much detail.&lt;/p&gt;
&lt;p&gt;The JS-based editors are fine for simple, running text. They're
actually kind of nice for that. Simple styles. Maybe a heading here or
there.&lt;/p&gt;
&lt;p&gt;Code? Ugh. Epic Fail.&lt;/p&gt;
&lt;p&gt;It gets worse.&lt;/p&gt;
&lt;p&gt;I've become a real fan of semantic markup.
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/DocBook"&gt;DocBook&lt;/a&gt; has a rich set of
constructs available.
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt;, similarly, has a
short list of text roles that can be expanded to include the same kind
of rich markup as DocBook. &lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;
leverages these roles to allow very sophisticated references to code
from text. &lt;a class="reference external" href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; has a great deal
of &lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=675273"&gt;semantic
markup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Web-based editors lack any of this. We have HTML. We have HTML
&lt;a class="reference external" href="http://microformats.org/"&gt;microformats&lt;/a&gt; available. But. For a
JavaScript web editor, we're really asking for a lot. More than seems
possible for a quick download.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="desktop-tool-fail"&gt;
&lt;h2&gt;Desktop Tool Fail&lt;/h2&gt;
&lt;p&gt;What's wrong with desktop tools? We have very rich style sheets
available. We should be able to define a useful set of styles and
produce a useful document. Right?&lt;/p&gt;
&lt;p&gt;Sadly, it's not easy.&lt;/p&gt;
&lt;p&gt;First, the desktop tools are extremely tolerant of totally messed-up
markup. They're focus is explicitly on making it look acceptable. It
doesn't have to be well-structured. It just has to look good.&lt;/p&gt;
&lt;p&gt;Second, and more important, the file formats are almost utterly
opaque. Yes. There are standards now. Yes. It's all just XML. No. It's
still nearly impossible to process. Try it.&lt;/p&gt;
&lt;p&gt;Most word-processing documents feel like XML serializations of
in-memory data structures. It's possible to locate the relevant
document text in there somewhere. It's not like they're being
intentionally obscure. But they're obscure.&lt;/p&gt;
&lt;p&gt;Third, and most important, is the reliance on either complex GUI
gestures (pointing and clicking and what-not) or complex keyboard
&amp;quot;shortcuts&amp;quot; and stand-ins for GUI gestures. It might be possible to
use that row of F-keys to define some kinds of short-cuts that might
be helpful. But there's a lot of semantic markup and only a dozen
keys, some of which have common interpretations for help, copy, paste,
turn off the keyboard lights, play music, etc.&lt;/p&gt;
&lt;p&gt;The Literate Programming ideal is to have the words and the code
existing cheek by jowls. No big separation. No hyper-complex tooling.
To me, this means sensible pure-text in-line markup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="text-markup"&gt;
&lt;h2&gt;Text Markup&lt;/h2&gt;
&lt;p&gt;I find that I really like RST markup. The more I write, the more I
like it.&lt;/p&gt;
&lt;p&gt;I really like the idea of writing code/documentation in a simple,
uniform code-centric tooling. The pure-text world using RST pure-text
markup is delightfully simple.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write stuff. Words. Code. Whatever. Use RST markup to segregate
the formal language (e.g. Python) from the natural language (e.g.,
English in my case.)&lt;/li&gt;
&lt;li&gt;Click on some icon the right side of the screen (or maybe use an
F-key) to run the test suite.&lt;/li&gt;
&lt;li&gt;Click on some icon (or hit a key) to produce prettified HTML page
from
&lt;tt class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pylit3 doc.py doc.rst; rst2html.py doc.rst doc.html&lt;/tt&gt;.
Having a simple toolchain to emit doc from code (or emit code from
doc) is a delight.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The genesis for this blog post was an at-work blog post (in Jive)
that had a code error in it. Because of Jive's code markup features
(using non-breaking spaces everywhere) there's no easy copy-and-paste
to check syntax. It's nearly impossible to get the code off the web
page in a form that's useful.&lt;/p&gt;
&lt;p&gt;If people can't copy-and-paste the code, the blog posts are
approximately worthless. Sigh.&lt;/p&gt;
&lt;p&gt;If I rewrite the whole thing into RST, I lose the Jive-friendly
markup. Now it looks out-of-place, but is technically correct.&lt;/p&gt;
&lt;p&gt;Either. Or.&lt;/p&gt;
&lt;p&gt;Exclusive Xor.&lt;/p&gt;
&lt;p&gt;Ugh. Does this mean I have to think about gathering the Jive .CSS
files, and create a version of those that's compatible with the
classes and ID's that Docutils uses?  I have some doubts about making
this work, since the classes and ID's might have overlaps that cause
problems.&lt;/p&gt;
&lt;p&gt;Or. Do I have to publish on some small web-server at work, and use
the &lt;tt class="docutils literal"&gt;&amp;lt;iframe&amp;gt;&lt;/tt&gt; tag to include RST-built content on the main
intranet? This probably works the best. But it leads to a multi-step
dance of writing, publishing on a private server, and then using a
iframe on the main intranet site. It seems needlessly complex.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="PyLit"></category><category term="literate programming"></category></entry><entry><title>Lynda and Educational Content</title><link href="https://slott56.github.io/2015_12_08-lynda_and_educational_content.html" rel="alternate"></link><published>2015-12-08T08:00:00-05:00</published><updated>2015-12-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-12-08:/2015_12_08-lynda_and_educational_content.html</id><summary type="html">&lt;p&gt;Just found &lt;a class="reference external" href="http://www.lynda.com/"&gt;http://www.lynda.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unlike random YouTube videos, these are professionally edited.&lt;/p&gt;
&lt;p&gt;Not everything on YouTube is poorly edited. Some are really good.&lt;/p&gt;
&lt;p&gt;Having done a few webcasts for O'Reilly (and I have another scheduled
for January 2016,) I know that my &amp;quot;you knows&amp;quot; -- you know -- and my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just found &lt;a class="reference external" href="http://www.lynda.com/"&gt;http://www.lynda.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unlike random YouTube videos, these are professionally edited.&lt;/p&gt;
&lt;p&gt;Not everything on YouTube is poorly edited. Some are really good.&lt;/p&gt;
&lt;p&gt;Having done a few webcasts for O'Reilly (and I have another scheduled
for January 2016,) I know that my &amp;quot;you knows&amp;quot; -- you know -- and my
&amp;quot;umms&amp;quot; are -- umm -- annoying.&lt;/p&gt;
&lt;p&gt;I know professionals -- actors, pastors, lawyers -- who can extemporize
really well. And it raises the bar a lot.&lt;/p&gt;
&lt;p&gt;But the idea of having an editor clean up the &amp;quot;you knows&amp;quot; is appealing.&lt;/p&gt;
</content><category term="Technologies"></category><category term="webcast"></category><category term="education"></category></entry><entry><title>Python Big Picture -- What's the "roadmap"? [Revised]</title><link href="https://slott56.github.io/2015_12_08-python_big_picture_whats_the_roadmap_revised.html" rel="alternate"></link><published>2015-12-08T07:29:00-05:00</published><updated>2015-12-08T07:29:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-12-08:/2015_12_08-python_big_picture_whats_the_roadmap_revised.html</id><summary type="html">&lt;p&gt;Here's an interesting idea: &lt;a class="reference external" href="http://www.xmind.net/m/WvfC/"&gt;http://www.xmind.net/m/WvfC/&lt;/a&gt;
This is associated with the following question: &amp;quot;I've had a hard time
finding the Big Picture re: Python, and it makes it difficult ... to
proceed and prioritize my efforts without one.&amp;quot;&lt;/p&gt;
&lt;p&gt;An interesting question: what &lt;strong&gt;is&lt;/strong&gt; the overview or strategy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's an interesting idea: &lt;a class="reference external" href="http://www.xmind.net/m/WvfC/"&gt;http://www.xmind.net/m/WvfC/&lt;/a&gt;
This is associated with the following question: &amp;quot;I've had a hard time
finding the Big Picture re: Python, and it makes it difficult ... to
proceed and prioritize my efforts without one.&amp;quot;&lt;/p&gt;
&lt;p&gt;An interesting question: what &lt;strong&gt;is&lt;/strong&gt; the overview or strategy for
mastering Python?
In this case, the focus is on &amp;quot;Big Data&amp;quot;, but I've found that to be
merely a tangential. The application area has a small influence, and
then only around the fringes of the language and libraries.&lt;/p&gt;
&lt;p&gt;I'm going to disagree with several particulars on the mind map. I'll
present an alternative, with a point-by-point commentary on the mind
map. (And I'll eschew the graphics, I don't find them helpful.)&lt;/p&gt;
&lt;div class="section" id="foundation"&gt;
&lt;h2&gt;Foundation&lt;/h2&gt;
&lt;p&gt;The language itself is (duh) the foundation. I find it important to
emphasize this because the Python universe is replete with a
seemingly endless supply of packages and libraries that help solve
nearly every problem a programmer might encounter.
This profusion of packages is -- in a way -- it's own problem.
It's obligatory to run the following interaction in Python. (Any
Python 2.7 or 3.2 will work; older Pythons prior to 2.7 need to be
upgraded.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import antigravity
&lt;/pre&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;p&gt;Everything you can imagine is an add-on package. Everything.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;That's not the starting point for learning how to solve problems with
Python. That's merely one waypoint along the course. And it's not the
most important waypoint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attractive-nuisance"&gt;
&lt;h2&gt;Attractive Nuisance&lt;/h2&gt;
&lt;p&gt;We have to set the external libraries aside as an &amp;quot;attractive
nuisance.&amp;quot; They're a distraction, in fact. Let's focus on the stuff
that comes with the installation kit: language and library.&lt;/p&gt;
&lt;p&gt;When looking at the Language, we actually see two things: Data and
Processing. The &amp;quot;Data&amp;quot; is the built-in data structures: bool, int,
float, complex, exception, context, string, tuple, list, map, set,
lambda, function, class, module and package. The &amp;quot;Processing&amp;quot; is the
imperative programming features: the 21 (or so) statements that
comprise the language.&lt;/p&gt;
&lt;p&gt;Both facets are essential, but they're also (approximately)
orthogonal to each other.&lt;/p&gt;
&lt;p&gt;For years, I was convinced that the way to learn Python was to come
to grips with most of the imperative statements and then apply these
statements to the various data structures. The tidy orthogonality
between many of the statements and some of the data structures makes
this appealing. I wrote two Python tutorials based on this idea.&lt;/p&gt;
&lt;p&gt;My approach was to echo the ancient
&lt;a class="reference external" href="http://www.amazon.com/Structured-Concurrent-Programming-Applications-Addison-Wesley/dp/0201029375"&gt;Structured Concurrent Programming with Operating System Applications&lt;/a&gt;.
They define a nested series of subsets of a hypothetical PL/I-like
(or Pascal-like) programming language. While the details don't apply
&lt;strong&gt;well&lt;/strong&gt; to Python, the approach does make a lot of sense. Start with
constants, expressions and output (i.e., &lt;strong&gt;print&lt;/strong&gt;) as the minimal
language. Then add state change via variables, assignment and input.
Then add &lt;strong&gt;if&lt;/strong&gt;/&lt;strong&gt;elif&lt;/strong&gt;/&lt;strong&gt;else&lt;/strong&gt;. Fold in &lt;strong&gt;for&lt;/strong&gt; and &lt;strong&gt;while&lt;/strong&gt;, and
continue to add features in this careful progression: functions,
exceptions, contexts, generators, etc.&lt;/p&gt;
&lt;p&gt;I'm becoming less and less sure that the imperative, procedural
statements should define the roadmap through the language.&lt;/p&gt;
&lt;p&gt;It's true that computing is defined by number theory. The original
Turing Machine theorem equates all of number theory to an imperative,
procedural notion of computers and programming. While unconditionally
true, it's not necessarily the most helpful strategy. We could, for
example, start programming by covering Boolean Algebra and Set Theory
first. But it would be a long dull slog before we got to anything
that appeared &amp;quot;useful.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-is-central"&gt;
&lt;h2&gt;Data Is Central&lt;/h2&gt;
&lt;p&gt;I'm starting to see that the data structures are more helpful than
imperative statements. This leads to a different approach to studying
this language. Experienced programmers may feel that a list of
fundamental language topics isn't too helpful.&lt;/p&gt;
&lt;p&gt;However. I've noted that many experienced programmers tend to skip
over the unique-to-Python features. This leads them to write clunky
and awkward Python code because they missed something that would lead
to simplicity and clarity.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;int&lt;/strong&gt;. Natural numbers are boring but necessary. The first
explorations of Python can easily be simple expressions, output,
variables and input using integers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bool&lt;/strong&gt;. Comparisons and logic allow introduction of the &lt;strong&gt;if&lt;/strong&gt;,
&lt;strong&gt;elif&lt;/strong&gt; and &lt;strong&gt;else&lt;/strong&gt; statements in a graceful way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;str&lt;/strong&gt;. Strings can be a gentle introduction to objects which are
collections. Strings have methods, unlike integers and booleans.
Strings introduce a number of conversion functions (int, float,
str, hex, oct, etc.) This allows introduction of the
&lt;strong&gt;for&lt;/strong&gt; statement based on this simple collection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;float&lt;/strong&gt; and &lt;strong&gt;complex&lt;/strong&gt;. Floating point numbers are an important
side-bar. They're not central. The notion of &amp;quot;approximation&amp;quot; can't
be stressed enough, and pathological examples of noise bits at the
end of floats is absolutely central. The math library is perhaps
part of this. Also the decimal and rational modules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception&lt;/strong&gt;. For programmers who have a background in languages
like C (without exceptions) the exception seems complex and
mysterious. However, for Python they are absolutely central. And
easy to play with by getting simple Value Errors. This introduces
the &lt;strong&gt;try&lt;/strong&gt;/&lt;strong&gt;except&lt;/strong&gt; statements, also. While it's a little
advanced, the class MyException( Exception ): pass is not a bad
thing at this point. Yes, it's a bit of a &amp;quot;magical incantation.&amp;quot;
But so is len(string).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tuple&lt;/strong&gt; and &lt;strong&gt;list&lt;/strong&gt;. This is an extension to some of the
discussion of string. It's also a time to introduce mutability and
show some of the consequences of a mutable list. This introduces
iterability, also.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dict&lt;/strong&gt; and &lt;strong&gt;defaultdict&lt;/strong&gt;. This introduces more loop constructs
including list comprehensions and various kinds of generator
expressions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;set&lt;/strong&gt; and &lt;strong&gt;frozenset&lt;/strong&gt;. This allows a review of mutability and
the ways list and tuple differ.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;function&lt;/strong&gt; and &lt;strong&gt;lambda&lt;/strong&gt;. The &lt;strong&gt;def&lt;/strong&gt; and &lt;strong&gt;return&lt;/strong&gt;
statements, plus &lt;strong&gt;global&lt;/strong&gt;. Additionally, the sort method of a
list as well as the sorted iterator function can be looked at in
some depth.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file&lt;/strong&gt;, &lt;strong&gt;open&lt;/strong&gt; and &lt;strong&gt;context&lt;/strong&gt;. This includes the
&lt;strong&gt;with&lt;/strong&gt; statement. This is a two-part or three-part exploration.
It has to include some of numerous library packages for dealing
with the file system. Plus data representation in CSV and JSON
files. The way that a file is iterable is essential.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterators&lt;/strong&gt;, &lt;strong&gt;generators&lt;/strong&gt; and the itertools package. This
includes techniques for implementing map-reduce algorithms using
iterators and generators.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;namedtuple&lt;/strong&gt;. This is a small thing, but it can help to
crystalize attribute access and some of the features that are part
of a class.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;class&lt;/strong&gt;. This must include an multi-step excursion into special
method names.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;module&lt;/strong&gt; and &lt;strong&gt;package&lt;/strong&gt;.  Note that these are different things.
Java only offers &amp;quot;package&amp;quot;. A Python module is a very, very
important concept. The module (not the class) is the practical
unit of reuse. Python is emphatically &lt;strong&gt;not&lt;/strong&gt; written in the style
of Java with one class per file.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="class-definitions"&gt;
&lt;h2&gt;Class Definitions&lt;/h2&gt;
&lt;p&gt;The essential goal behind the first 14 topics is to get to the
point where all the language features can be used to create
workable class definitions.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Common object-oriented design patterns. Most of the
&amp;quot;Gang-of-Four&amp;quot; suite of patterns is relevant to Python. A few
changes to the textbook examples are required to remove the C++
and Java biases. Patterns like &lt;strong&gt;State&lt;/strong&gt;, &lt;strong&gt;Strategy&lt;/strong&gt; and
&lt;strong&gt;Factory&lt;/strong&gt; are central to good OO design. The Python version
of Singleton has to be treated carefully; the Python Borg
pattern is rarely useful; on the other hand the concept of
module global variable is important and underpins some of the
standard library.&lt;/li&gt;
&lt;li&gt;Above and beyond the common design patterns, Python has a
number of unique design patterns. These are largely exemplified
by the special method names. &lt;strong&gt;Attribute Access&lt;/strong&gt; (properties
and descriptors). This allows creation of simple collections.&lt;/li&gt;
&lt;li&gt;Callable objects allows a review of functions and lambdas,
also. The Abstract Base Class definitions must be emphasized
for this to work out well in the long run.&lt;/li&gt;
&lt;li&gt;Sequence Types expands simple collections to created ordered
collections.&lt;/li&gt;
&lt;li&gt;Number Types. This allows a complete understanding of decimal
and rational packages, also.&lt;/li&gt;
&lt;li&gt;Some additional design patterns need to be added, also.
Specifically, things like metaclass and classmethod are
features of Python that are absent from Java or C++.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Programmers experienced in other languages might object to this
depth in Python OO design techniques and design patterns.&lt;/p&gt;
&lt;p&gt;What I find is that programmers who don't really &amp;quot;get&amp;quot; the
Python design patterns (especially the ABC's) overwrite their
programs. They needlessly reinvent methods that are already
first-class features of the language, but weren't well
understood. Properties and descriptors, for example, allow for
a simpler and very clear syntax; it's often better than the
endless parade of explicit getter and setter method calls that
characterize Java Beans programming.&lt;/p&gt;
&lt;p&gt;Additionally, bad habits from other languages need to be
unlearned. For example, many Java (and C++) programmers are
taught to overuse the private keyword. When they learn Python,
they think that private is somehow &lt;strong&gt;really important&lt;/strong&gt;.  When
the find out about &lt;tt class="docutils literal"&gt;__&lt;/tt&gt; (double underscore) name mangling, they
go off the deep end, using &lt;tt class="docutils literal"&gt;__&lt;/tt&gt; names everywhere. This is all
bad.&lt;/p&gt;
&lt;p&gt;Encapsulation has little to do with private. In Python, the &lt;tt class="docutils literal"&gt;_&lt;/tt&gt;
(single underscore) prefix on a name is the convention for private. But it's not
like Java's (or C++) compiler-enforced privacy, it's just a
nodding understanding. As the creator of Python says &amp;quot;we're all
adults here.&amp;quot; An overused Java private is more of a problem for
proper extension of a Java class than Python's casual
&amp;quot;nudge-nudge-wink-wink-private&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-standard-library"&gt;
&lt;h2&gt;The Standard Library&lt;/h2&gt;
&lt;p&gt;After looking at class definitions, it's important to look at the
default library, subsection by subsection. There is a &lt;strong&gt;lot&lt;/strong&gt; to
the installed library.&lt;/p&gt;
&lt;p&gt;For most Python programmers, sections 1 to 6 will have been
covered by the previous material. Sections 26 and on to the end,
also, are less important.&lt;/p&gt;
&lt;p&gt;Sections 7 to 25 of the library reference contain the centrally
important modules. A familiarity with the list of topics is
essential before tackling &amp;quot;real&amp;quot; projects. This is so important,
we'll use this set of topics as the basis for our point-by-point
commentary on the mind-map linked above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-components-and-downloads"&gt;
&lt;h2&gt;External Components and Downloads&lt;/h2&gt;
&lt;p&gt;One of the reasons why Python is a well-designed language is the
way the principle of orthogonality is applied.&lt;/p&gt;
&lt;p&gt;Most statements and data structures play well together. For
example, all the built-in collections are sequences, so that they
are iterable; the &lt;strong&gt;for&lt;/strong&gt; statement works directly with
collections.&lt;/p&gt;
&lt;p&gt;Also, the external libraries themselves are all independent of the
language, and the language exists without resorting to any of the
external libraries.&lt;/p&gt;
&lt;p&gt;Looking at the mind map, there are several interesting topics. And
a few mysteries. And some unhelpful labels. Here's a quick
commentary on the mind map.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Basic Stack&lt;/strong&gt;. I supposed these can be called &amp;quot;essential&amp;quot;
external packages. This seems to be a way to emphasize other
packages listed elsewhere on the diagram. I'm not sure why this
topic is here.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Newer Packages&lt;/strong&gt;. This is a completely opaque label. Not
helpful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrated Platforms&lt;/strong&gt;. This isn't too helpful, either. I
suppose one could make a guess based on the list of packages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visualization&lt;/strong&gt;. Ah. Now we're getting somewhere. These are
some helpful visualization packages. PIL isn't listed, perhaps
because it's too primitive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Formats&lt;/strong&gt;. YAML isn't listed. The SQL and NoSQL
categories make precious little sense. Those are all about
persistence, not data formats. Data format and persistence are
separate and unrelated. JSON, for example, is a data format.
CouchDB is persistence.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packages&lt;/strong&gt;. I suppose it's helpful to point out PyPi, but it
doesn't make sense in this context. This is metadata and
relatively unhelpful.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficiency&lt;/strong&gt;. Cython for &amp;quot;efficiency&amp;quot; makes precious little
sense. Proper data structure and algorithm is the secret to
efficiency. See my post on a &lt;a class="reference external" href="https://slott56.github.io/2013_06_27-performance_tuning_running_in_1100th_the_time.html"&gt;100:1 speedup in
Python&lt;/a&gt;.
For efficiency, it's sometimes necessary to drop out of Python
and write the important 20% of the code in C++.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parallel&lt;/strong&gt;. A non-Windows OS handles parallelism gracefully.
Process-level parallelism with pipelines is simple and
efficient. Thread-level parallelism is often more trouble than
benefit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GPU&lt;/strong&gt;. This is an example of where a little C++ code can go a
long way to improving the 20% of the code that's the actual
performance bottleneck.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Glue&lt;/strong&gt;. Interfaces to other applications or packages can be
useful if the other package is actually a first-class part of
the solution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MapReduce&lt;/strong&gt;. This is essentially persistence, and goes with
SQL database and noSQL databases. It's also a fundamental
design pattern that can be exploited trivially in Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On this mind-map, there are a few topics that are &lt;strong&gt;really&lt;/strong&gt;
important. So important that the topics parallel the Python
library.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Data Persistence&lt;/strong&gt;, chapter 11. Databases and Files. This
includes SQL and noSQL databases as well as pickled data
structures. Python comes with SQLite, allows SQL development
without additional downloads. Postgres and MySQL libraries
often popular because the price is right and the
functionality is outstanding.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Archive and Compressed Structures&lt;/strong&gt;, chapter 12. ZIP, BZ2,
etc. Compression is sometimes relevant for big data
projects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Representation and File Formats&lt;/strong&gt;, chapters 13, 18
and 19. CSV, JSON, YAML, XML, HTML, etc. It's important to
note that JSON is more compact (and almost as expressive) as
XML. While XML is popular, it's sometimes overused.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS Features,&lt;/strong&gt; chapter 15 and 16. These are tools needed
to build command-line applications. For Big Data
applications, logging and command-line parameter parsing are
essential.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiprocessing&lt;/strong&gt;. This is it's own design discipline.
What's important here is that the OS process-level design is
central. The queue and multiprocess packages are sufficient
for this. There are some external multiprocessing packages,
also, like &lt;a class="reference external" href="http://www.zeromq.org/bindings:python"&gt;Zero MQ&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internet Protocols,&lt;/strong&gt; chapter 20. This is part of using
RESTful web services, which is essential for making noSQL
database (like CouchDB) work. For creating RESTful servers,
the WSGI approach is essential.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unit Testing and Documentation&lt;/strong&gt;, chapter 25.
&lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt; is extremely important
for creating useful documentation with minimal pain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Visualization&lt;/strong&gt;. &lt;a class="reference external" href="http://matplotlib.org/"&gt;matplotlib&lt;/a&gt;,
&lt;a class="reference external" href="http://www.pythonware.com/products/pil/"&gt;PIL&lt;/a&gt; are
popular. The built-in turtle package is a bit primitive.
However, it's also rather sophisticated, and a great deal
can be done with it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Numeric Processing&lt;/strong&gt;. &lt;a class="reference external" href="http://www.numpy.org/"&gt;numpy&lt;/a&gt; or &lt;a class="reference external" href="http://www.scipy.org/"&gt;scipy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the number of external packages on this list is
rather small. Python comes with batteries included.&lt;/p&gt;
&lt;p&gt;Admittedly, it's hard to make &lt;strong&gt;general&lt;/strong&gt; recommendations
for external packages. But it's misleading to provide a huge
list of external packages when the default suite of packages
will solve a large number of problems gracefully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-python-version"&gt;
&lt;h2&gt;Which Python Version?&lt;/h2&gt;
&lt;p&gt;Generally, everything should be done in Python3.2.
In some cases a crucial package hasn't been upgraded to
Python 3.2. In these exceptions, Python 2.7 can be used.&lt;/p&gt;
&lt;p&gt;For example, &lt;a class="reference external" href="http://nltk.org/"&gt;nltk&lt;/a&gt; is still focused
on Python 2.7.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Every&lt;/strong&gt; Python2.7 program should &lt;strong&gt;always&lt;/strong&gt; begin with
&lt;tt class="docutils literal"&gt;from __future__ import print_function, division&lt;/tt&gt;
That's &lt;strong&gt;every&lt;/strong&gt; and &lt;strong&gt;always&lt;/strong&gt;. All new development should
&lt;strong&gt;always&lt;/strong&gt; be focused on Python3.2. There is no rational
exception to this rule.&lt;/p&gt;
&lt;p&gt;If there's any need to use the &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; function, then the
following line must be included, also.
&lt;tt class="docutils literal"&gt;input= raw_input&lt;/tt&gt;
This will use the Python 3.2 version of the &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt;
function.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-don-t-get-the-question-what-is-being"&gt;
&lt;h2&gt;I don't get the question. What is being &amp;quot;...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-05 15:54:35.502000-04:00&lt;/p&gt;
&lt;p&gt;I don't get the question. What is being &amp;quot;split off&amp;quot; from what? Timelines
mean nothing: making predictions is difficult, especially about the
future. Languages tend to coexist for long, long periods of time.
Witness COBOL. Can you clarify this question?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-fixed-the-scipy-reference-i-misread-their"&gt;
&lt;h2&gt;Thanks. Fixed the scipy reference. I misread their...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-05 09:46:22.037000-04:00&lt;/p&gt;
&lt;p&gt;Thanks. Fixed the scipy reference. I misread their web site. The Cython
version of Python is not a guarantee of efficiency. Preferring Cython
for maintainability or other reasons is fine. But it's not magically
efficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="do-you-think-that-quot-big-data-quot-and-scienti"&gt;
&lt;h2&gt;Do you think that &amp;amp;quot;big data&amp;amp;quot; and scienti...&lt;/h2&gt;
&lt;p&gt;AppMathDoc&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-04 15:23:39.899000-04:00&lt;/p&gt;
&lt;p&gt;Do you think that &amp;quot;big data&amp;quot; and scientific computing will split off
from python altogether, perhaps combining with Julia (I've heard
rumblings to that effect)? And if so, what do you foresee as the
timeline for such a split?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interesting-post-thanks-for-sharing-a-few-minor"&gt;
&lt;h2&gt;Interesting post, thanks for sharing. A few minor ...&lt;/h2&gt;
&lt;p&gt;Ralf Gommers&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-04 15:54:27.636000-04:00&lt;/p&gt;
&lt;p&gt;Interesting post, thanks for sharing. A few minor comments: scipy
doesn't include visualization (--&amp;gt; matplotlib), and Cython does make an
awful lot of sense if you're trying to build **maintainable**
libraries. Scipy and many other prominent scientific Python libraries
strongly prefer Cython over C, Fortran and C++ for a reason.&lt;/p&gt;
&lt;p&gt;arjun&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-21 04:57:32.928000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by the author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="our-very-own-commitment-to-getting-the-message-thr"&gt;
&lt;h2&gt;our very own commitment to getting the message thr...&lt;/h2&gt;
&lt;p&gt;arjun&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-21 04:57:17.771000-04:00&lt;/p&gt;
&lt;p&gt;our very own commitment to getting the message throughout came to be
rather powerful and have consistently enabled employees just like me to
arrive at their desired goals.
&lt;a class="reference external" href="https://twitter.com/surya_infomatic?lang=en"&gt;Surya Informatics&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="good-article"&gt;
&lt;h2&gt;Good Article&lt;/h2&gt;
&lt;p&gt;Henery&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-03-19 07:30:49.842000-04:00&lt;/p&gt;
&lt;p&gt;Good Article&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-this-case-the-emphasis-is-on-big-data-but-i"&gt;
&lt;h2&gt;In this case, the emphasis is on “Big Data”, but I...&lt;/h2&gt;
&lt;p&gt;Henery&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-03-19 07:30:34.114000-04:00&lt;/p&gt;
&lt;p&gt;In this case, the emphasis is on “Big Data”, but I search that to be
silent surprising. I needed &lt;a class="reference external" href="https://mobilunity.com/blog/hire-django-developer/"&gt;python django
developer&lt;/a&gt; for
work. The application area has little effect, and then around the
fringes of language and libraries only. I will agree with many details
on the map in mind. I will bring another option, with a point-by-point
commentary on the map in mind. (And I'll leave out the pictures, I don't
find them useful.) The language itself is (duh) basic. I find it
important to emphasize this because the Python world is filled with a
seemingly endless supply of resources and libraries that help solve
almost every problem a programmer may encounter.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>Navigation: Latitude, Longitude, Haversine, and all that</title><link href="https://slott56.github.io/2015_11_24-navigation_latitude_longitude_haversine_and_all_that.html" rel="alternate"></link><published>2015-11-24T08:00:00-05:00</published><updated>2015-11-24T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-11-24:/2015_11_24-navigation_latitude_longitude_haversine_and_all_that.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;For a few years, I was a tech nomad. See &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;Team Red
Cruising&lt;/a&gt; for some
stories of life on a sailboat. Warning: it's pretty dull.&lt;/div&gt;
&lt;div class="line"&gt;As a tech nomad, I lived and died (literally) by my ability to
navigate. Modern GPS devices make the dying part relatively unlikely.
So, let's …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;For a few years, I was a tech nomad. See &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;Team Red
Cruising&lt;/a&gt; for some
stories of life on a sailboat. Warning: it's pretty dull.&lt;/div&gt;
&lt;div class="line"&gt;As a tech nomad, I lived and died (literally) by my ability to
navigate. Modern GPS devices make the dying part relatively unlikely.
So, let's not oversell the danger aspect of this.&lt;/div&gt;
&lt;div class="line"&gt;The prudent mariner plans a long voyage with a great deal of respect
for the many things which can go wrong. One aspect of this is to
create a &amp;quot;Float Plan&amp;quot;. Read more about it
here: &lt;a class="reference external" href="http://floatplancentral.cgaux.org/"&gt;http://floatplancentral.cgaux.org&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;The idea is to create a summary of the voyage, provide that summary to
trusted shore crew, and then check in periodically so that the shore
crew can confirm that you're making progress safely. Failure to check
in is an indicator of a problem, and action needs to be taken. We use
a &lt;a class="reference external" href="http://findmespot.com/en/"&gt;SPOT Messenger&lt;/a&gt; to check in at noon
(and sometimes at waypoints.)&lt;/div&gt;
&lt;div class="line"&gt;Creating a float plan involved an extract of the waypoints from our
navigation software (&lt;a class="reference external" href="http://www.gpsnavx.com/"&gt;GPS NavX&lt;/a&gt;). I would
enrich the list of waypoints with estimated travel time between the
points.  Folding in a departure time would lead to a schedule that
could be tracked. I also include some navigation hints in the form of
a bearing between waypoints so we know which way to steer to find the
next point.&lt;/div&gt;
&lt;div class="line"&gt;The travel time is the distance (in  nautical miles) coupled with an
assumption about speed (5 knots.) It's a really simple thing. But the
core &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Haversine_formula"&gt;haversine&lt;/a&gt;
calculation is not a first-class part of any spreadsheet app. Because
of the degrees-to-radians conversions required, and the common
practice of annotating degrees with a lot of internal punctuation
(38°54ʹ57″ 077°13ʹ36″), it becomes right awkward to simply implement
this as a spreadsheet.&lt;/div&gt;
&lt;div class="line"&gt;Some clever software has a good planning mode. The chartplotter on the
boat can do a respectable job of estimating time between waypoints.
But. It's not connected to a computer or the internet. So we can't
upload that information in the form of a float plan. The idea of
copying the data from the chart plotter to a spreadsheet is fraught
with errors.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="navtools"&gt;
&lt;h2&gt;Navtools&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Enter &lt;a class="reference external" href="https://github.com/slott56/navtools"&gt;navtools&lt;/a&gt;. This is a
library that I use to transform a route into a .csv with distances and
bearings that I can use to create a useful float plan. I can add an
estimated arrival time calculation so that a change to departure time
creates the entire check-in schedule.&lt;/div&gt;
&lt;div class="line"&gt;This isn't a sophisticated GUI app. It's just enough software to
transform a GPS NavX extract file into a more useful form. The GUI was
a spreadsheet (i.e., Numbers.) From this we created a PDF with the
details.&lt;/div&gt;
&lt;div class="line"&gt;Practically, we don't have good connectivity on the boat.  So we would
create a number of alternative plans (&amp;quot;leave tomorrow&amp;quot;, &amp;quot;leave the day
after&amp;quot;, &amp;quot;leave next Monday&amp;quot;, etc.) we would go ashore, find a coffee
shop, and email the various plans to ourselves. They could sit in our
inbox, waiting for weather and tide to be favorable.&lt;/div&gt;
&lt;div class="line"&gt;Then, when the weather and tides were finally aligned, we could
forward the relevant details to our trusted shore crew. This was a
quick spurt of cell phone connectivity to forward an email. It worked
out well. When the scheduled departure time arrived, we'd coax Mr.
Lehman to life, raise the anchor and away.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="literate-programming"&gt;
&lt;h2&gt;Literate Programming&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This is an exercise in literate programming. The code that's executed
and the HTML documentation are both derived from source ReStructured
Text (RST) documents. The documentation for the &lt;a class="reference external" href="http://slott56.github.io/navtools/navigation.html"&gt;navigation
module&lt;/a&gt; includes
the math along with the code that implements the math.&lt;/div&gt;
&lt;div class="line"&gt;I have to say that I'm enthralled with the intimate connection between
requirements, design, and implementation that literate programming
embodies.&lt;/div&gt;
&lt;div class="line"&gt;I'm excited to (finally) publish the thing to GitHub.
See &lt;a class="reference external" href="https://github.com/slott56/navtools"&gt;https://github.com/slott56/navtools&lt;/a&gt;.  I'm looking at some other
projects that require the navtools module. What I wind up doing is
copying and pasting the navigation calculation module into other
projects. I had something like three separate copies on my laptop. It
was time to fold all of the features together, delete the clones, and
focus on one authoritative copy going forward.&lt;/div&gt;
&lt;div class="line"&gt;I still have to remove some crufty old code. One step at a time.
First, get all the tests to pass. Then expunge the old code. Then make
progress on the other projects that leverage the navtools.navigation
module.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="longitude"></category><category term="#python"></category><category term="literate programming"></category><category term="haversine"></category><category term="latitude"></category><category term="navigation"></category><category term="navtools"></category></entry><entry><title>Events: PyCon 2016, OSCon 2016</title><link href="https://slott56.github.io/2015_11_17-events_pycon_2016_oscon_2016.html" rel="alternate"></link><published>2015-11-17T08:00:00-05:00</published><updated>2015-11-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-11-17:/2015_11_17-events_pycon_2016_oscon_2016.html</id><summary type="html">&lt;p&gt;Many years ago ('07?) I went to my first PyCon. My situation changed and
I didn't get to another PyCon until last year.&lt;/p&gt;
&lt;p&gt;The story is a kind of major dumbosity. In '07 I could expense the
trip as education. In '08, I'd lost that feature of my employment.
After …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many years ago ('07?) I went to my first PyCon. My situation changed and
I didn't get to another PyCon until last year.&lt;/p&gt;
&lt;p&gt;The story is a kind of major dumbosity. In '07 I could expense the
trip as education. In '08, I'd lost that feature of my employment.
After that I was actively figuring out how to be self-employed as a
writer and technomad, and completely took my eye off the various
kinds of tax deductions and sponsorship opportunities that I might
have leveraged. It was too complex, arbitrary, and bewildering for
me.&lt;/p&gt;
&lt;p&gt;PyCon is an energizing event.  I can't say enough good things
about attending session after session on Python and the
Python-related ecosystem. In particular, it's a joy to see
people pitching their solutions to complex problems.&lt;/p&gt;
&lt;p&gt;Here's a reminder: &lt;a class="reference external" href="https://us.pycon.org/2016/"&gt;https://us.pycon.org/2016/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since I do some work for O'Reilly media -- if a pair of
webcasts count as work -- I think I want to see if I can
finagle my way into OSCon, also.&lt;/p&gt;
&lt;p&gt;Here's the reminder: &lt;a class="reference external" href="http://conferences.oreilly.com/oscon/open-source"&gt;http://conferences.oreilly.com/oscon/open-source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think I can leverage some material from &lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming"&gt;Functional Python
Programming&lt;/a&gt;
to create an interesting tutorial.  My webcast on the five kinds of
Python functions can expand into a bunch of hands-on-keyboard
exercises to build examples of each kind of callable thingy.&lt;/p&gt;
&lt;p&gt;Proposals are in. Waiting for comments. Fingers crossed.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="oscon"></category><category term="pycon"></category><category term="education"></category></entry><entry><title>Formatting Strings and the str.format() family of functions -- Python 3.4 Notes</title><link href="https://slott56.github.io/2015_11_10-formatting_strings_and_the_strformat_family_of_functions_python_34_notes.html" rel="alternate"></link><published>2015-11-10T08:00:00-05:00</published><updated>2015-11-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-11-10:/2015_11_10-formatting_strings_and_the_strformat_family_of_functions_python_34_notes.html</id><summary type="html">&lt;p&gt;I have to be clear that I am obsessed with the str.format() family of
functions. I've happily left the string &lt;strong&gt;%&lt;/strong&gt; operator behind. I
recently re-discovered the vars() function.&lt;/p&gt;
&lt;p&gt;My current go-to technique for providing debugging information is
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print( &amp;quot;note: local={local!r}, this={this!r}, that={that!r …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;I have to be clear that I am obsessed with the str.format() family of
functions. I've happily left the string &lt;strong&gt;%&lt;/strong&gt; operator behind. I
recently re-discovered the vars() function.&lt;/p&gt;
&lt;p&gt;My current go-to technique for providing debugging information is
this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print( &amp;quot;note: local={local!r}, this={this!r}, that={that!r}&amp;quot;.format_map(vars)) )
&lt;/pre&gt;
&lt;p&gt;I find this to be handy and expressive. It can be replaced with
logging.debug() without a second thought. I can readily expand what's
being dumped because &lt;strong&gt;all&lt;/strong&gt; locals are provided by vars().&lt;/p&gt;
&lt;p&gt;I also like this as a quick and dirty starting point for a class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def __repr__(self):
   return &amp;quot;{__class__.__name__}(**{state!r})&amp;quot;.format(__class__=self.__class__, state=vars(self))
&lt;/pre&gt;
&lt;p&gt;This captures the name and state. But. There are nicer things we can
do. One of the easiest is to use a helper function to reformat the
current state in keyword parameter syntax, like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def args(obj):
   return &amp;quot;, &amp;quot;.join( &amp;quot;{k}={v!r}&amp;quot;.format(k=k,v=v) for k,v in vars(obj).items())
&lt;/pre&gt;
&lt;p&gt;This allows us to dump an object's state in a slightly nicer format.
We can replace vars(self) with args(self) in our __repr__ method.
We've dumped the state of an object with very little class-specific
code. We can focus on the problem domain without having to wrestle
with Python considerations.&lt;/p&gt;
&lt;div class="section" id="format-specifications"&gt;
&lt;h2&gt;Format Specifications&lt;/h2&gt;
&lt;p&gt;The use of &lt;strong&gt;!r&lt;/strong&gt; for formatting is important. I've (frequently)
messed up and used things like &lt;strong&gt;:s&lt;/strong&gt; where data might be None. I've
discovered that -- starting in Python 3.4 -- the &lt;strong&gt;:s&lt;/strong&gt; format is
unhappy with None objects. Here's the exhaustive enumeration of
cases.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;{0} {1}&amp;quot;.format(&amp;quot;s&amp;quot;,None)
's None'
&amp;gt;&amp;gt;&amp;gt; &amp;quot;{0:s} {1:s}&amp;quot;.format(&amp;quot;s&amp;quot;,None)
Traceback (most recent call last):
 File &amp;quot;&amp;quot;, line 1, in
   &amp;quot;{0:s} {1:s}&amp;quot;.format(&amp;quot;s&amp;quot;,None)
TypeError: non-empty format string passed to object.__format__
&amp;gt;&amp;gt;&amp;gt; &amp;quot;{0!s} {1!s}&amp;quot;.format(&amp;quot;s&amp;quot;,None)
's None'
&amp;gt;&amp;gt;&amp;gt; &amp;quot;{0!r} {1!r}&amp;quot;.format(&amp;quot;s&amp;quot;,None)
&amp;quot;'s' None&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Many things are implicitly converted to strings. This happens in a lot
of places. Python is riddled with str() function evaluations. But they
aren't &lt;strong&gt;everywhere&lt;/strong&gt;. Python 3.3 had one that was removed for Python
3.4 and up.&lt;/p&gt;
&lt;p&gt;Bottom Line: be careful where you use &lt;strong&gt;:s&lt;/strong&gt; formatting.  It may do
less than you think it should do.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="python essentials"></category></entry><entry><title>Needlessly Redundant Overcommunication and DevOps</title><link href="https://slott56.github.io/2015_11_03-needlessly_redundant_overcommunication_and_devops.html" rel="alternate"></link><published>2015-11-03T08:00:00-05:00</published><updated>2015-11-03T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-11-03:/2015_11_03-needlessly_redundant_overcommunication_and_devops.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;At the &amp;quot;day job&amp;quot; I use a Windows laptop. It was essential for a
project I might have started, but didn't. So now I'm stuck with it
until the budgetary gods deem that it's been paid for and I can
request something more useful.  Mostly, however, Windows is fine. It …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;At the &amp;quot;day job&amp;quot; I use a Windows laptop. It was essential for a
project I might have started, but didn't. So now I'm stuck with it
until the budgetary gods deem that it's been paid for and I can
request something more useful.  Mostly, however, Windows is fine. It
doesn't behave too badly and most of the awful &amp;quot;features&amp;quot; are
concealed by Python's libraries.&lt;/div&gt;
&lt;div class="line"&gt;This is context for a strange interaction today. It seems to exemplify
DevOps and the cruddy laptop problem.&lt;/div&gt;
&lt;div class="line"&gt;The goofy Microsoft Office Communicator -- the one that's so often
used instead of a good chat program like Slack or HipChat -- pinged.
 The message went something like this.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;strong&gt;&amp;quot;I sent you an email just now. Can you read it and reply?&amp;quot;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I was stunned. Too stunned to save the text.  This is either someone
being aggressive almost to a point that hints at rudeness, or someone
vague on how email works. Let's assume the second option. I can only
reply, &amp;quot;I agree with you, that is how email works.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The email was a kind of vague question about server provisioning.  It
was something along the lines of&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&amp;quot;Do we provision our own server with Ansible or Chef? Or is there a
team to provision servers for us? ...&amp;quot;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;It went on to describe details of a fantasy world where someone would
write Chef scripts for them.  The rest of the email mostly ignored the
first question entirely.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-real-question"&gt;
&lt;h2&gt;The Real Question&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you're familiar with DevOps as a concept, then server provisioning
is -- like most problems -- something that the developers need to
solve. Technical Support folks may provide tools (Ansible, for
example) to help build the server, but there aren't a room full of
support people waiting for your story (&amp;quot;make me a server&amp;quot;) to appear
on their Kanban board.&lt;/div&gt;
&lt;div class="line"&gt;Indeed, there was &lt;em&gt;never&lt;/em&gt; the kind of support implied in the email,
even in non-DevOps organizations. In a &amp;quot;traditional&amp;quot;  Dev-vs.-Ops
organization, the folks that built servers were (a) overbooked, (b)
uninterested in the details of our particular problem, or (c) only
grudgingly let us use an existing server that doesn't quite fit our
requirements. They rarely built servers for us.&lt;/div&gt;
&lt;div class="line"&gt;Reason A, of course, is business as usual. Unless we're the Hippo
(Highest Paid Person in the Organization,) there's always some other
project that's somehow more important than whatever foolishness we're
engaged in. How many times have we been told that &amp;quot;The STARS Project
is tying up all our resources. It will be 90 days before...&amp;quot;? Gotcha.
The bad part about this situation is when the person paying the bills
says to me &amp;quot;You need to make them respond.&amp;quot; How -- precisely -- do you
propose that I change the internal reward system of the ops people?&lt;/div&gt;
&lt;div class="line"&gt;We could label this as a passive-aggressive approach. They're waiting
for us establish a schedule so that they can shoot it down. Or maybe
that's reading way too much into the situation. Maybe they're really
just overbooked.&lt;/div&gt;
&lt;div class="line"&gt;Regarding reason B. Years ago, I had a hilarious interaction where we
sent a stream of emails explaining our server requirements. The emails
were not exactly &lt;em&gt;ignored&lt;/em&gt;. But. When we asked about the status of our
servers, the person responsible for the team brought a yellow pad and
wrote down the requirements. I read the email to them. Without a trace
of embarrassment, they wrote down what I was reading from an email.
 (It was long enough ago, that we didn't have laptops, and I had a
hard-copy of the email. They refused the hard-copy. I had to read it.
Really.)&lt;/div&gt;
&lt;div class="line"&gt;Were they clueless about how email works? Or. Was this a kind of
passive-aggressive approach to architecture where our input was
discounted to zero because it didn't count until they wrote it on a
their yellow pad? The behavior was bizarre.&lt;/div&gt;
&lt;div class="line"&gt;Something similar happened with another organization. We made server
recommendations. They didn't like the server recommendations. Not
because the recommendations seemed wrong, but because we didn't have a
formal sciency-seeming methodology for fantasizing about servers that
were required to support the fantasy software which hadn't been
written yet. They felt it necessary to complain. And when we talked
with hardware vendors, they felt it necessary to customize the cheap
commodity servers.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
[It got weirder. They were convinced that a server farm needed to be
designed from the bottom up.  I endured a lecture on how a properly
sciency-seeming methodology started by deciding on L1 and L2 cache
sizing, bus timing, and worked through memory allocation and then I
slowly grew to see that they had no clue what they were talking about
when buying commodity servers by the rack-full for software that
doesn't exist yet.]&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;We all know about reason C. The reason for DevOps is to avoid being
stuffed into a kind of random server where there are upgrades that we
all have to agree on. Or -- worse -- a server that can't be upgraded
because no one will agree. A single app team vetos all changes.&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;We can't install Anaconda 3 because we know that Python 3 is
incompatible with Python 2&amp;quot;...&lt;/div&gt;
&lt;div class="line"&gt;What?&lt;/div&gt;
&lt;div class="line"&gt;I stopped understanding at that point. It seemed like the rest of the
answer amounted to &amp;quot;having the second Anaconda on a separate path
could lead to problems. It can't be &lt;strong&gt;proven&lt;/strong&gt; that no problems will
arise, so we'll assume that -- somehow -- PATH settings will get
altered randomly and a Python 2 job will crash because it accidentally
had the wrong PATH and accidentally ran with Python 3.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;It was impossible to explain that this is a non-problem. Their
response was &amp;quot;But we can't be &lt;strong&gt;sure&lt;/strong&gt;.&amp;quot; That's the last resort of
someone who refuses to change. And it's the &lt;em&gt;final&lt;/em&gt; answer. Even if
you do a proof-of-concept, they'll find reasons to doubt the POC's
results because they can't be &lt;strong&gt;sure&lt;/strong&gt; the POC mirrors production.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-real-answer"&gt;
&lt;h2&gt;The Real Answer&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The answer to the original Ping and the Email was &amp;quot;You're going to do
this yourself.&amp;quot;  I included links to four or five corporate missives
on Chef, Ansible, DevOps, and how to fill in the form for a cloud
server.&lt;/div&gt;
&lt;div class="line"&gt;I have my doubts -- though -- that this would be seen as helpful.&lt;/div&gt;
&lt;div class="line"&gt;They may not be happy because they don't get to use Communicator and
Email and someone else's Kanban board to get this done. They don't get
to ask someone else what they're doing and why they're not getting it
done on time. They don't get to second-guess their technical
decisions. They actually have to do it. And that may not work out
well.&lt;/div&gt;
&lt;div class="line"&gt;The truly passive-aggressive don't seem to do things by themselves. It
appears to me that they spend a lot of time looking for reasons to
stall. Either they need to get more information or get organized or
they need to have some kind more official &amp;quot;permission&amp;quot; to proceed.
Lacking any further information, I chalk it up to them only feeling
successful when they've found the flaws in what someone else did.&lt;/div&gt;
&lt;div class="line"&gt;It's challenging sometimes to make it clear that a rambling email
asking for someone else to help is going nowhere. A Communicator ping
followed by an email isn't actually getting anything &lt;strong&gt;done&lt;/strong&gt;. It's
essentially stalling, waiting for more information, getting organized,
or waiting for permission. Overcommunication can become a stalling
tactic or maybe a way to avoid responsibility.&lt;/div&gt;
&lt;div class="line"&gt;I'm stuck with a cruddy laptop because the budget gods have laid down
some laws that don't make a lick of technical sense. I think that the
short-sighted &amp;quot;use it until it physically wears out&amp;quot; might be more
costly than &amp;quot;find the right tool, we'll recycle the old one
appropriately.&amp;quot; In the same way, the shared server world view is
clearly costly.  We shouldn't share a server &amp;quot;because it's there.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The move to DevOps allows us to build a server rather than discuss
building a server.&lt;/div&gt;
&lt;div class="line"&gt;I want a DevOps parallel for my developer workstation. I don't want
permission or authorization. I don't want to overcommunicate with the
budget gods. I want a workstation unencumbered by permission-seeking.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="DevOps"></category></entry><entry><title>Why Computer Science for All is good for all</title><link href="https://slott56.github.io/2015_10_31-why_computer_science_for_all_is_good_for_all.html" rel="alternate"></link><published>2015-10-31T16:14:00-04:00</published><updated>2015-10-31T16:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-10-31:/2015_10_31-why_computer_science_for_all_is_good_for_all.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;nycgov/an-open-letter-from-the-nation-s-tech-and-business-leaders-ca9894a4d125"&gt;An Open Letter from the Nation’s Tech and Business
Leaders&lt;/a&gt;:
Why Computer Science for All is good for all.
&amp;quot;These are the skills and competencies that will power the growth of
every industry...&amp;quot;
Civic leaders and educators need to be in on this. And professionals who
have skills to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;nycgov/an-open-letter-from-the-nation-s-tech-and-business-leaders-ca9894a4d125"&gt;An Open Letter from the Nation’s Tech and Business
Leaders&lt;/a&gt;:
Why Computer Science for All is good for all.
&amp;quot;These are the skills and competencies that will power the growth of
every industry...&amp;quot;
Civic leaders and educators need to be in on this. And professionals who
have skills to share need to be in on this also. It's not limited to New
York City. It's a nationwide (perhaps world-wide) need for skills. There
are a lot of talented people. Some of them haven't had the right
sequence of opportunities to realize their talents.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="useful-article-thank-you-for-sharing-the-article"&gt;
&lt;h2&gt;Useful article, thank you for sharing the article!...&lt;/h2&gt;
&lt;p&gt;Krystal&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-08-21 00:14:38.620000-04:00&lt;/p&gt;
&lt;p&gt;Useful article, thank you for sharing the article!!!
Website
&lt;a class="reference external" href="http://www.google.com.sv/url?q=https://bloggiaidap247.com/"&gt;bloggiaidap247.com&lt;/a&gt;
và website
&lt;a class="reference external" href="http://www.google.com.sv/url?q=https://blogcothebanchuabiet.com/"&gt;blogcothebanchuabiet.com&lt;/a&gt;
giúp bạn giải đáp mọi thắc mắc.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="education"></category><category term="training"></category></entry><entry><title>The Internet of Things</title><link href="https://slott56.github.io/2015_10_27-the_internet_of_things.html" rel="alternate"></link><published>2015-10-27T08:00:00-04:00</published><updated>2015-10-27T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-10-27:/2015_10_27-the_internet_of_things.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.relayr.io/wunderbar/"&gt;Wunderbar&lt;/a&gt;.
A whole bunch of nicely integrated data collection modules.
I prefer to hack around with &lt;a class="reference external" href="https://www.arduino.cc/"&gt;Arduino&lt;/a&gt;.  I'm
not sure why -- perhaps it's the lure of building approximately from
scratch.
But this is very cool. No soldering. Just start gathering data.
I have a half-built Arduino-based device to measure the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.relayr.io/wunderbar/"&gt;Wunderbar&lt;/a&gt;.
A whole bunch of nicely integrated data collection modules.
I prefer to hack around with &lt;a class="reference external" href="https://www.arduino.cc/"&gt;Arduino&lt;/a&gt;.  I'm
not sure why -- perhaps it's the lure of building approximately from
scratch.
But this is very cool. No soldering. Just start gathering data.
I have a half-built Arduino-based device to measure the position of the
steering quadrant on a sailboat. I really need to take the next few
steps and finalize the design so that I can order a few boards from
Fitzring and try it out for real. I've had it in pieces here and there
for about 3 years. The open issue was (and still is) a digital
potentiometer that sets the output voltage level. I think I have the
right chip for this. I think I have the wrong resistors that adjust the
voltage into the proper range. The response curve for the parts I rigged
up (years ago) weren't linear enough.
Then I moved. And moved again. And wrote a bunch of books on Python. And
I'm about to move again. I need to finish this and get it off my desk.
Literally.
The good news is that I took careful notes. Including pictures. So I can
break out the boards and mess around a bit. I have three breadboards
covered with jumpers, LED's, buttons, and stuff all piled up around the
laptop.
The Wunderbar has an light/color/proximity sensor. I've built just the
proximity sensor with an Arduino. Reporting the output as resistance
that can be used on 12V boat systems as the stumbling block for me.
After the &lt;strong&gt;next&lt;/strong&gt; move... (Something I've said before.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="arduino"></category><category term="hardware"></category><category term="internet of things"></category></entry><entry><title>Chapters to Edit: What do I do instead?</title><link href="https://slott56.github.io/2015_10_14-chapters_to_edit_what_do_i_do_instead.html" rel="alternate"></link><published>2015-10-14T08:00:00-04:00</published><updated>2015-10-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-10-14:/2015_10_14-chapters_to_edit_what_do_i_do_instead.html</id><summary type="html">&lt;p&gt;I'm starting to get chapters back from the technical reviewers. This is
an important part of the writing process: correcting my mistakes and
clarifying things that confused the reviewers.&lt;/p&gt;
&lt;p&gt;Packt has had a uniformly excellent cadre of technical reviewers. At
this point, I've worked with something like a dozen people …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm starting to get chapters back from the technical reviewers. This is
an important part of the writing process: correcting my mistakes and
clarifying things that confused the reviewers.&lt;/p&gt;
&lt;p&gt;Packt has had a uniformly excellent cadre of technical reviewers. At
this point, I've worked with something like a dozen people on four
different books. It's been great (for me) to get detailed, specific
feedback point by point.&lt;/p&gt;
&lt;p&gt;Instead of working on my reviewed chapters, however, I'm browsing.
It's Python Week.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.packtpub.com/packt/offers/pythonweek"&gt;https://www.packtpub.com/packt/offers/pythonweek&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'll get to the chapters Thursday, I think.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Wait, there's more Python goodness from Packt</title><link href="https://slott56.github.io/2015_10_13-wait_theres_more_python_goodness_from_packt.html" rel="alternate"></link><published>2015-10-13T08:00:00-04:00</published><updated>2015-10-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-10-13:/2015_10_13-wait_theres_more_python_goodness_from_packt.html</id><summary type="html">&lt;p&gt;This just in...&lt;/p&gt;
&lt;p&gt;Here's a link to the actual Python Week page, with all the deals there
for the week: &lt;a class="reference external" href="https://www.packtpub.com/packt/offers/pythonweek"&gt;https://www.packtpub.com/packt/offers/pythonweek&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They also have a week of free Python books too, which change daily:
&lt;a class="reference external" href="https://www.packtpub.com/packt/offers/free-learning/"&gt;https://www.packtpub.com/packt/offers/free-learning/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feel free to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This just in...&lt;/p&gt;
&lt;p&gt;Here's a link to the actual Python Week page, with all the deals there
for the week: &lt;a class="reference external" href="https://www.packtpub.com/packt/offers/pythonweek"&gt;https://www.packtpub.com/packt/offers/pythonweek&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They also have a week of free Python books too, which change daily:
&lt;a class="reference external" href="https://www.packtpub.com/packt/offers/free-learning/"&gt;https://www.packtpub.com/packt/offers/free-learning/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feel free to ruthlessly export their largess and build your personal
technical library.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Python Week at Packt Publishing</title><link href="https://slott56.github.io/2015_10_12-python_week_at_packt_publishing.html" rel="alternate"></link><published>2015-10-12T06:00:00-04:00</published><updated>2015-10-12T06:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-10-12:/2015_10_12-python_week_at_packt_publishing.html</id><content type="html">&lt;p&gt;Go to &lt;a class="reference external" href="https://www.packtpub.com/"&gt;https://www.packtpub.com&lt;/a&gt;.
Look for the deal of the week.
Get 20% off Python titles.
You're welcome.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Today's Milestone: Refactoring and Django Migrations</title><link href="https://slott56.github.io/2015_10_06-todays_milestone_refactoring_and_django_migrations.html" rel="alternate"></link><published>2015-10-06T08:00:00-04:00</published><updated>2015-10-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-10-06:/2015_10_06-todays_milestone_refactoring_and_django_migrations.html</id><summary type="html">&lt;p&gt;Once upon a time, when today's old folks were young, we'd debate the
two project strategies: Hard Part Do Later (HPDL) vs. Hard Part First
(HPF).&lt;/p&gt;
&lt;p&gt;The HPDL folks argued that you could pick away at the hard part until
-- eventually -- it wasn't hard any more. This doesn't often work …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once upon a time, when today's old folks were young, we'd debate the
two project strategies: Hard Part Do Later (HPDL) vs. Hard Part First
(HPF).&lt;/p&gt;
&lt;p&gt;The HPDL folks argued that you could pick away at the hard part until
-- eventually -- it wasn't hard any more. This doesn't often work out
well in practice, but a lot of people like it. Sometimes the attempt
to avoid the hard part makes it harder.&lt;/p&gt;
&lt;p&gt;The HPF folks, on the other hand, recognized that solving the hard
problem correctly, may make the easy problems even easier. It may not,
but either way, the hard part was done.&lt;/p&gt;
&lt;p&gt;The debate would shift to what -- exactly -- constituted the hard
part. Generally, what one person finds hard, another person has
already done several times before. It's the part that no one has done
before that eventually surfaces as being truly hard.&lt;/p&gt;
&lt;p&gt;Young kids today (get off my lawn!) often try to make the case that an
Agile approach finesses the &amp;quot;hard part&amp;quot; problem. We define a Minimally
Viable Product (MVP) and we (magically) don't have to worry about
doing the hard part first or last.&lt;/p&gt;
&lt;p&gt;They're wrong.&lt;/p&gt;
&lt;p&gt;If the MVP happens to include the hard part, we're back a HPF. If the
MVP tries to avoid the hard part, we're looking at HPDL.&lt;/p&gt;
&lt;div class="section" id="the-novelty-factor"&gt;
&lt;h2&gt;The Novelty Factor&lt;/h2&gt;
&lt;p&gt;Agile methods don't change things. We still have to &lt;strong&gt;Confront the
Novelty&lt;/strong&gt; (CTN™). Either it's new technology or it's a new problem
domain or a new solution to an existing problem domain. Something must
be novel, or we wouldn't be writing software, we'd be downloading it.&lt;/p&gt;
&lt;p&gt;I'm a HPF person. If you set the hard part aside to do later, all the
things you do instead become constraints, limiting your choices for
solving the hard part that comes later. In some rare cases, you can
decompose the hard part and solve it in pieces. The decomposition is
simply &lt;strong&gt;Hard Part First through Decomposition&lt;/strong&gt; (HPFtD™) followed by
&lt;strong&gt;Prioritize the Pieces&lt;/strong&gt; (PtP™) and another round of Hard Part First.&lt;/p&gt;
&lt;p&gt;Today, we're at a big milestone in the HPF journey.&lt;/p&gt;
&lt;p&gt;The application's data model is simple. However.&lt;/p&gt;
&lt;p&gt;The application has a complex pipeline of processing to get from
source data to the useful data model.&lt;/p&gt;
&lt;p&gt;A strict (and dumb) MVP approach would skip building the complex
pipeline and assume that it was magically implemented somehow.&lt;/p&gt;
&lt;p&gt;A slightly smarter MVP approach uses some kind of technical spike
solution to handle the complex pipeline. We do that manually until we
get past MVP and decide to implement the pipeline in something more
final and complete.&lt;/p&gt;
&lt;p&gt;My HPF strategy tackles the complex pipeline because we have to build
it anyway and it's hard. We don't have to build &lt;strong&gt;all&lt;/strong&gt; of it. Just
enough to lay out the happy path.&lt;/p&gt;
&lt;p&gt;The milestone?&lt;/p&gt;
&lt;p&gt;It's time to totally refactor because -- even doing the hard part
first -- we have the wrong things in the wrong places. Django
application boundaries generally follow the &amp;quot;resources&amp;quot;. It's a lot
like designing a RESTful API. Define the resources, cluster them
together in some kind of ontology that provides a meaningful
hierarchy.&lt;/p&gt;
&lt;p&gt;Until -- of course -- you get past the problem domain novelty and
realize that some portion of the hierarchy is going to become really
lopsided. It needs to be restructured so we have a flat group of
applications.&lt;/p&gt;
&lt;p&gt;Wait. What?&lt;/p&gt;
&lt;p&gt;Flatten?&lt;/p&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;p&gt;When we have a Django application model that's got eleventy-kabillion
classes, it's too big. Think the magic number 7±2: there's a limit to
our ability to grasp a complex model.&lt;/p&gt;
&lt;p&gt;Originally, we thought we'd have apps &amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, and &amp;quot;C&amp;quot;. However. &amp;quot;A&amp;quot;
turned out to be more complex than it seemed when we initially
partitioned the apps. Based on the way the classes are named and
clustered in the model file, it's clear that we have an internal
structure is struggling to emerge. There are too many comments and
high-level organizational hints in the docstrings.&lt;/p&gt;
&lt;p&gt;It looks like this might be the model that's emerging:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Former A&lt;ul&gt;
&lt;li&gt;A1&lt;/li&gt;
&lt;li&gt;Conceptual A2&lt;ul&gt;
&lt;li&gt;A2a&lt;/li&gt;
&lt;li&gt;A2b&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that there will be classes in A3 that depend on separate
apps A2a and A2b. Further, A2 is really just a concept that unifies
the design; it doesn't need to be implemented as a proper app. Both
A2a and A2b depend on A1. A3 depends on A2a, A2b, and A1.&lt;/p&gt;
&lt;p&gt;Ugh. Refactoring. And the associated migrations.&lt;/p&gt;
&lt;p&gt;Django allows us to have nested apps. But. Do we really want to go
there? Is a nested collection of packages really all that helpful?&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;Would it be better to flatten the whole thing, and simply annotate
the dependencies among apps?&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Zen Of Python&lt;/em&gt; suggests that Flat is Better than Nested.&lt;/p&gt;
&lt;p&gt;The hidden benefit of Flat is that the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Liskov_substitution_principle"&gt;Liskov Substitution
Principle&lt;/a&gt;
is actually a bit easier to exploit. Yes, we have a tangled web of
dependencies, but we're slightly less constrained when all of the
Django apps are peers. Yes, many things will depend on the A1 app,
but that will be less of a problem than the current pile of classes
is.&lt;/p&gt;
&lt;p&gt;The important part here is to start again. This means I need to
discard the spike database and discard the history of migrations to
date. I always hate disrupting my development databases, since it has
test cases I know and remember.&lt;/p&gt;
&lt;p&gt;That's the disruptive milestone for me: discarding the old database
and starting again.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Django"></category><category term="API Design"></category></entry><entry><title>Python 3.5 and the Upgrade Strategy</title><link href="https://slott56.github.io/2015_09_29-python_35_and_the_upgrade_strategy.html" rel="alternate"></link><published>2015-09-29T08:00:00-04:00</published><updated>2015-09-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-09-29:/2015_09_29-python_35_and_the_upgrade_strategy.html</id><summary type="html">&lt;p&gt;Start here: &lt;a class="reference external" href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-484"&gt;https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-484&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While new syntax is important, remember your audience in pitching the
upgrade from Python 2.7. You may need to pander to people who aren't
programmers or don't really know Python.&lt;/p&gt;
&lt;p&gt;When selling the upgrade, it can help …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Start here: &lt;a class="reference external" href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-484"&gt;https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-484&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While new syntax is important, remember your audience in pitching the
upgrade from Python 2.7. You may need to pander to people who aren't
programmers or don't really know Python.&lt;/p&gt;
&lt;p&gt;When selling the upgrade, it can help to focus on the objective
measures.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;. When anyone asks why we should disturb our precious
Python 2 ecosystem, point out the performance improvements. Begin
with Python 3.2, 3.3, 3.4, and then 3.5 improvements. The union of
these is an impressive list. Faster is better, right?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New Libraries&lt;/strong&gt;. For some folks who don't know Python well, it
helps to give them a concrete list of features you absolutely
require. Seriously. Enumerate &lt;strong&gt;all&lt;/strong&gt; the new libraries from Python
3.2, ..., 3.5. It's a big list. Some of them have been backported, so
this list isn't a a complete win. You may not really need all of
them, but use them to bolster your case.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other Cleanups&lt;/strong&gt;. These are important for folks who use Python
daily, but aren't too impressive to manager types who aren't deeply
into the language details.&lt;ol class="arabic"&gt;
&lt;li&gt;The fact that Python 3 handles class/type better than Python 2
isn't impressive to anyone who hasn't dealt with it.&lt;/li&gt;
&lt;li&gt;The fact that Python 3 handles Unicode better than Python 2 isn't
going to impress too many people, either.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;print&lt;/strong&gt; statement issue will cause some managers to claim
that the upgrade is &amp;quot;risky&amp;quot;.&lt;/li&gt;
&lt;li&gt;The division issue is a complete win. Weirdly, nay-sayers will
claim (a) just use float() a lot, (b) just add +0.0 a lot, or (c)
just add from __future__ import division a lot.  How is this
workaround better? No clue. Be prepared to make the case that the
dumb workarounds are... well... dumb.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can lift up the type definition and
&lt;a class="reference external" href="http://mypy-lang.org/"&gt;http://mypy-lang.org&lt;/a&gt;. If you do, be
prepared for snark from the Java/Scala crowd. These folks will
(wrongly) claim that a partial type proof is useless, and static type
checking is mandatory. This is a difficult discussion to have because
the &amp;quot;type safety is important&amp;quot; crowd don't seem to recognize the
awful gyrations they're forced into so they can write generic code
that's type-agnostic. All Python code is type-agnostic; the type
checking just confirms some design constraints. The presence of
differing strategies -- type-specific code vs. generic type-agnostic
code -- means that neither is right, and the argument is moot.&lt;/p&gt;
&lt;p&gt;Don't focus on async/await. Yes, it's first on the Python web site,
but, it can be a tough sell.&lt;/p&gt;
&lt;p class="rubric" id="performance"&gt;Performance&lt;/p&gt;
&lt;p&gt;The easy sell is this impressive list of optimizations.&lt;/p&gt;
&lt;p&gt;3.2&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Peephole optimizer improvements&lt;/li&gt;
&lt;li&gt;Serializing and unserializing data using the pickle module is now
several times faster.&lt;/li&gt;
&lt;li&gt;The Timsort algorithm used in list.sort() and sorted() now runs
faster and uses less memory when called with a key function.&lt;/li&gt;
&lt;li&gt;JSON decoding performance is improved and memory consumption is
reduced whenever the same string is repeated for multiple keys.&lt;/li&gt;
&lt;li&gt;Recursive locks (created with the threading.RLock() API) now
benefit from a C implementation which makes them as fast as
regular locks, and between 10x and 15x faster than their previous
pure Python implementation.&lt;/li&gt;
&lt;li&gt;The fast-search algorithm in stringlib is now used by the split(),
splitlines() and replace() methods on bytes, bytearray and str
objects. Likewise, the algorithm is also used by rfind(),
rindex(), rsplit() and rpartition().&lt;/li&gt;
&lt;li&gt;Integer to string conversions now work two “digits” at a time,
reducing the number of division and modulo operations.&lt;/li&gt;
&lt;li&gt;Several other minor optimizations.&lt;ul&gt;
&lt;li&gt;Set differencing now runs faster when one operand is much
larger than the other&lt;/li&gt;
&lt;li&gt;The array.repeat() method has a faster implementation&lt;/li&gt;
&lt;li&gt;The BaseHTTPRequestHandler has more efficient buffering&lt;/li&gt;
&lt;li&gt;The operator.attrgetter() function has been sped-up&lt;/li&gt;
&lt;li&gt;ConfigParser loads multi-line arguments a bit faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.3&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some operations on Unicode strings have been optimized&lt;/li&gt;
&lt;li&gt;UTF-8 is now 2x to 4x faster. UTF-16 encoding is now up to 10x
faster.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.4&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The UTF-32 decoder is now 3x to 4x faster.&lt;/li&gt;
&lt;li&gt;The cost of hash collisions for sets is now reduced.&lt;/li&gt;
&lt;li&gt;The interpreter starts about 30% faster.&lt;/li&gt;
&lt;li&gt;bz2.BZ2File is now as fast or faster than the Python2 version
for most cases. lzma.LZMAFile has also been optimized.&lt;/li&gt;
&lt;li&gt;random.getrandbits() is 20%-40% faster for small integers.&lt;/li&gt;
&lt;li&gt;By taking advantage of the new storage format for strings,
pickling of strings is now significantly faster.&lt;/li&gt;
&lt;li&gt;A performance issue in io.FileIO.readall() has been solved.&lt;/li&gt;
&lt;li&gt;html.escape() is now 10x faster.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.5&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The os.walk() function has been sped up by 3 to 5 times on POSIX
systems, and by 7 to 20 times on Windows.&lt;/li&gt;
&lt;li&gt;Construction of bytes(int) (filled by zero bytes) is faster and
uses less memory for large objects.&lt;/li&gt;
&lt;li&gt;Some operations on ipaddress IPv4Network and IPv6Network have been
massively sped up,&lt;/li&gt;
&lt;li&gt;Pickling of ipaddress objects was optimized to produce
significantly smaller output.&lt;/li&gt;
&lt;li&gt;Many operations on io.BytesIO are now 50% to 100% faster.&lt;/li&gt;
&lt;li&gt;The marshal.dumps() function is now faster: 65-85% with versions 3
and 4, 20-25% with versions 0 to 2 on typical data, and up to 5
times in best cases.&lt;/li&gt;
&lt;li&gt;The UTF-32 encoder is now 3 to 7 times faster.&lt;/li&gt;
&lt;li&gt;Regular expressions are now parsed up to 10% faster.&lt;/li&gt;
&lt;li&gt;The json.dumps() function was optimized.&lt;/li&gt;
&lt;li&gt;The PyObject_IsInstance() and PyObject_IsSubclass() functions have
been sped up.&lt;/li&gt;
&lt;li&gt;Method caching was slightly improved, yielding up to 5%
performance improvement in some benchmarks.&lt;/li&gt;
&lt;li&gt;Objects from random module now use two times less memory on 64-bit
builds.&lt;/li&gt;
&lt;li&gt;The property() getter calls are up to 25% faster.&lt;/li&gt;
&lt;li&gt;Instantiation of fractions.Fraction is now up to 30% faster.&lt;/li&gt;
&lt;li&gt;String methods find(), rfind(), split(), partition() and in string
operator are now significantly faster for searching 1-character
substrings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this list can help move an organization away from Python 2
and toward Python 3. This list and a lot of lobbying from folks
who know what the improvements are.&lt;/p&gt;
&lt;p class="rubric" id="library"&gt;Library&lt;/p&gt;
&lt;p&gt;Here's the library upgrade list, FWIW.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;3.2: &lt;a class="reference external" href="https://docs.python.org/3.2/whatsnew/3.2.html#new-improved-and-deprecated-modules"&gt;https://docs.python.org/3.2/whatsnew/3.2.html#new-improved-and-deprecated-modules&lt;/a&gt;.
I count 51 modules.&lt;/li&gt;
&lt;li&gt;3.3:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.3/whatsnew/3.3.html#new-modules"&gt;New
Modules&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.3/whatsnew/3.3.html#faulthandler"&gt;faulthandler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.3/whatsnew/3.3.html#ipaddress"&gt;ipaddress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.3/whatsnew/3.3.html#lzma"&gt;lzma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.3/whatsnew/3.3.html#improved-modules"&gt;https://docs.python.org/3.3/whatsnew/3.3.html#improved-modules&lt;/a&gt;.
60 improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;3.4:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#new-modules"&gt;New
Modules&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#asyncio"&gt;asyncio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#ensurepip"&gt;ensurepip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#enum"&gt;enum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#pathlib"&gt;pathlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#selectors"&gt;selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#statistics"&gt;statistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#tracemalloc"&gt;tracemalloc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html#improved-modules"&gt;https://docs.python.org/3.4/whatsnew/3.4.html#improved-modules&lt;/a&gt;.
62 improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;3.5:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.5/whatsnew/3.5.html#new-modules"&gt;New
Modules&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.5/whatsnew/3.5.html#typing"&gt;typing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.5/whatsnew/3.5.html#zipapp"&gt;zipapp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.5/whatsnew/3.5.html#improved-modules"&gt;https://docs.python.org/3.5/whatsnew/3.5.html#improved-modules&lt;/a&gt;.
2 new. 75 improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The details of the improvements can be overwhelming.
The dozen new modules, however, might help overcome organizational
inertia to make progress on ditching Python2. I've been making heavy
use of statistics. I need to make better use of pathlib in future
projects.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Python Tutor</title><link href="https://slott56.github.io/2015_09_22-python_tutor.html" rel="alternate"></link><published>2015-09-22T08:00:00-04:00</published><updated>2015-09-22T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-09-22:/2015_09_22-python_tutor.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read This:
&lt;a class="reference external" href="http://radar.oreilly.com/2015/08/learning-programming-at-scale.html"&gt;http://radar.oreilly.com/2015/08/learning-programming-at-scale.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;The core visualization tool
(&lt;a class="reference external" href="http://pythontutor.com/"&gt;pythontutor.com&lt;/a&gt;) can be helpful for
many people. The shared environments seem like a cool idea, also, but
I don't have any specific comments on the other tools.&lt;/div&gt;
&lt;div class="line"&gt;While this looks very cool, I'm not a …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read This:
&lt;a class="reference external" href="http://radar.oreilly.com/2015/08/learning-programming-at-scale.html"&gt;http://radar.oreilly.com/2015/08/learning-programming-at-scale.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;The core visualization tool
(&lt;a class="reference external" href="http://pythontutor.com/"&gt;pythontutor.com&lt;/a&gt;) can be helpful for
many people. The shared environments seem like a cool idea, also, but
I don't have any specific comments on the other tools.&lt;/div&gt;
&lt;div class="line"&gt;While this looks very cool, I'm not a huge fan of this kind of
step-by-step visualization. This uses very clear graphics, and looks
very clever, it has some limitations. I think that some aspects of
&amp;quot;visualization&amp;quot; can be misleading. Following an execution path for a
specific initial condition can obscure events and conditions that
aren't on the happy path. It's not clear how a group of statements
establish a more general condition.&lt;/div&gt;
&lt;div class="line"&gt;I'm a fan of formal post-conditions. From these, we can postulate a
statement, and work out the weakest precondition for the statement. As
we work through this exercise, we create a formal proof and a program.
It's very elegant. And it covers the general case, not specific
examples.&lt;/div&gt;
&lt;div class="line"&gt;Most importantly, this effort depends on having formal semantics for
each statement. To write code, we need to have a concise definition of
the general state change is made by each statement in a language.
We're looking at the general case for each statement rather than
following a specific initial condition through a statement.&lt;/div&gt;
&lt;div class="line"&gt;Sidebar.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
In C, what does this do? a[i++] = ++i; There is no formal definition.
The statement has three state changes stated. But how are they
ordered? No matter what initial values for a[] and i we provide, this
is still pretty murky. A debugger only reveals the specific
implementation being debugged.&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Visualization may help some people understand the state change created
by a statement. Some people do learn things by watching this kind of
&amp;quot;debugger&amp;quot; mode. In particular, this may help because it has much
better graphics than the built-in character-mode debugger.&lt;/div&gt;
&lt;div class="line"&gt;This idea works best with programs that already make sense: programs
that are well designed. Programs that make orderly progress from some
initial state to the desired final state.&lt;/div&gt;
&lt;div class="line"&gt;Programs written by learners may not be all that clean. Realistically,
they may be inept. They may even reach the far end of the spectrum and
be downright bad.&lt;/div&gt;
&lt;div class="line"&gt;While this tool is graphically gorgeous, it's still a debugger. It
wallows around in an internal world in which the formal semantics can
get obscured. The general case can't easily be shown.&lt;/div&gt;
&lt;div class="line"&gt;We have a forest and trees problem here. A debugger (or other
statement-by-statement visualization tool) emphasizes each individual
tree. The larger structures of glades, thickets, groves, stands,
brakes, and coppices are lost to view.&lt;/div&gt;
&lt;div class="line"&gt;The humble while statement (especially one with an internal if-break)
can be extremely difficult to understand as a single statement. If we
break down the statement-by-statement execution, the presence of two
termination conditions (one on the while clause and one on the if
clause) can be obscured because a visualization must follow a specific
initial condition.&lt;/div&gt;
&lt;div class="line"&gt;With really well-written tutorials -- and some necessary metadata -- a
super-visualizer might be able to highlight the non-happy-path logic
that exists.  This alternate path viewing could be helpful for showing
how complex logic works (and doesn't work.)&lt;/div&gt;
&lt;div class="line"&gt;With programs written by learners -- programs which are inept and
won't have appropriate metadata -- a super-visualizer would need to
reason very carefully about the code to determine what happy path and
non-happy-path kinds of logic are present. It would have to locate and
highlight&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;contradictory elif clauses,&lt;/li&gt;
&lt;li&gt;gaps among elif clauses,&lt;/li&gt;
&lt;li&gt;missing else clauses,&lt;/li&gt;
&lt;li&gt;hellishly complex else clauses,&lt;/li&gt;
&lt;li&gt;break conditions,&lt;/li&gt;
&lt;li&gt;continue conditions, as well as&lt;/li&gt;
&lt;li&gt;exception handling.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;For truly bad programs, the super-visualizer may be stumped as to what
is intended. Indeed, it may be impossible to determine how it can be
displayed meaningfully to show alternatives and show how the specific
code generalizes into a final outcome.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def this_program_terminates(some_code):
    # details omitted

def demo():
    while this_program_terminates(demo):
        print(&amp;quot;w00t w00t&amp;quot;)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;What does this do? How can any visualizer aid the student to show
problems?&lt;/div&gt;
&lt;div class="line"&gt;To take this one step further, I think this kind of thing might also
be hazardous to learning how the functional programming feature of
Python work.  I think that exposing the underlying mechanics of a
generator expression might be more confusing than simply treating it
as a &amp;quot;lazy list.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;It's very nice. But it isn't perfect. Something that supports
reasoning about the general post-conditions established by a statement
would be more useful than a step-by-step debugger with great graphics.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>Exploratory Data Analysis in Functional-Style Python</title><link href="https://slott56.github.io/2015_09_15-exploratory_data_analysis_in_functional_style_python.html" rel="alternate"></link><published>2015-09-15T08:00:00-04:00</published><updated>2015-09-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-09-15:/2015_09_15-exploratory_data_analysis_in_functional_style_python.html</id><summary type="html">&lt;p&gt;Here are some tricks to working with log file extracts. We're looking
at some Enterprise Splunk extracts. We can fiddle around with Splunk,
trying to explore the data. Or we can get a simple extract and fiddle
around with the data in Python.&lt;/p&gt;
&lt;p&gt;Running different experiments in Python seems to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some tricks to working with log file extracts. We're looking
at some Enterprise Splunk extracts. We can fiddle around with Splunk,
trying to explore the data. Or we can get a simple extract and fiddle
around with the data in Python.&lt;/p&gt;
&lt;p&gt;Running different experiments in Python seems to be more effective
than trying to do this kind of exploratory fiddling in Splunk.
Primarily because there aren't any boundaries on what we can do with
the data. We can create very sophisticated statistical models all in
one place.&lt;/p&gt;
&lt;p&gt;Theoretically, we can do a lot of exploration in Splunk. It has a
variety of reporting and analytical features.&lt;/p&gt;
&lt;p&gt;But...&lt;/p&gt;
&lt;p&gt;Using Splunk presumes we know what we're looking for. In many cases,
we don't know what we're looking for: we're exploring. We may have
some indication that a few RESTful API transactions are slow, but
little more than that. How do we proceed?&lt;/p&gt;
&lt;p&gt;Step one is to get raw data in CSV format. Now what?&lt;/p&gt;
&lt;div class="section" id="reading-raw-data"&gt;
&lt;h2&gt;Reading Raw Data&lt;/h2&gt;
&lt;p&gt;We'll start by wrapping a CSV.DictReader object with some additional
functions.&lt;/p&gt;
&lt;p&gt;Object-Oriented Purists will object to this strategy. &amp;quot;Why not just
extend DictReader?&amp;quot; they ask. I don't have a great answer. I lean
toward functional programming and the resulting orthogonality of
components. With a purely OO approach, we have to use more
complex-seeming mixins to achieve this.&lt;/p&gt;
&lt;p&gt;Our general framework for processing logs is this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;somefile.csv&amp;quot;) as source:
   rdr = csv.DictReader(source)
&lt;/pre&gt;
&lt;p&gt;This allows us to read the CSV-formatted Splunk extract. We can
iterate through rows in the reader. Here's trick #1. It's not
&lt;strong&gt;really&lt;/strong&gt; very tricky, but I like it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;somefile.csv&amp;quot;) as source:
   rdr = csv.DictReader(source)
   for row in rdr:
       print( &amp;quot;{host} {ResponseTime} {source} {Service}&amp;quot;.format_map(row) )
&lt;/pre&gt;
&lt;p&gt;We can -- to a limited extent -- report raw data in a helpful format.
If we want to dress up the output, we can change the format string.
Maybe &amp;quot;{host:30s} {ReponseTime:8s} {source:s}&amp;quot; or something like that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filtering"&gt;
&lt;h2&gt;Filtering&lt;/h2&gt;
&lt;p&gt;A common situation is that we've extracted too much, and only need to
see a subset. We can change the Splunk filter, but, we hate to
overcommit before we've finished our exploration. It's far easier to
filter in Python. Once we've learned what we need, we can finalize in
Splunk.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;somefile.csv&amp;quot;) as source:
   rdr = csv.DictReader(source)
   rdr_perf_log = (row for row in rdr if row['source'] == 'perf_log')
   for row in rdr_perf_log:
       print( &amp;quot;{host} {ResponseTime} {Service}&amp;quot;.format_map(row) )
&lt;/pre&gt;
&lt;p&gt;We've injected a generator expression that will filter the source
rows, allowing us to work with a meaningful subset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="projection"&gt;
&lt;h2&gt;Projection&lt;/h2&gt;
&lt;p&gt;In some cases, we'll have additional columns of source data that we
don't really want to use. We'll eliminate this data by making a
projection of each row.&lt;/p&gt;
&lt;p&gt;In principle, Splunk never produces an empty column. However, RESTful
API logs may lead to data sets with a huge number of unique column
titles based on surrogate keys that are part of request URI's. These
columns will have one row of data from the one request that used that
surrogate key. For every other row, there's nothing useful in that
column. Life is much simpler if we remove the empty columns from each
row.&lt;/p&gt;
&lt;p&gt;We can do this with a generator expression, also, but it gets a bit
long. A generator function is somewhat easier to read.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def project(reader):
   for row in reader:
       yield {k:v for k,v in row.items() if v}
&lt;/pre&gt;
&lt;p&gt;We've built a new row dictionary from a subset of the items in the
original reader. We can use this to wrap the output of our filter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;somefile.csv&amp;quot;) as source:
   rdr = csv.DictReader(source)
   rdr_perf_log = (row for row in rdr if row['source'] == 'perf_log')
   for row in project(rdr_perf_log):
       print( &amp;quot;{host} {ResponseTime} {Service}&amp;quot;.format_map(row) )
&lt;/pre&gt;
&lt;p&gt;This will reduce the unused columns that are visible in the inside of
the for statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notation-change"&gt;
&lt;h2&gt;Notation Change&lt;/h2&gt;
&lt;p&gt;The row['source'] notation will get clunky. It's much nicer to work
with a types.SimpleNamespace than a dictionary. This allows us to use
row.source.&lt;/p&gt;
&lt;p&gt;Here's a cool trick to create something more useful.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rdr_ns = (types.SimpleNamespace(**row) for row in reader)
&lt;/pre&gt;
&lt;p&gt;We can fold this into our sequence of steps like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;somefile.csv&amp;quot;) as source:
    rdr = csv.DictReader(source)
    rdr_perf_log = (row for row in rdr if row['source'] == 'perf_log')
    rdr_proj = project(rdr_perf_log)
    rdr_ns = (types.SimpleNamespace(**row) for row in rdr_proj)
    for row in rdr_ns:
        print( &amp;quot;{host} {ResponseTime} {Service}&amp;quot;.format_map(vars(row)) )
&lt;/pre&gt;
&lt;p&gt;Note the small change to our format_map() method. We've added the
vars() function to extract a dictionary from the attributes of a
SimpleNamespace.&lt;/p&gt;
&lt;p&gt;We could write this as a function to preserve syntactic symmetry with
other functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def ns_reader(reader):
    return (types.SimpleNamespace(**row) for row in reader)
&lt;/pre&gt;
&lt;p&gt;Indeed, we could write this as a lambda construct which is used like
a function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ns_reader = lambda reader: (types.SimpleNamespace(**row) for row in reader)
&lt;/pre&gt;
&lt;p&gt;While the ns_reader() function and ns_reader() lambda are used the
same way, it's slightly harder to write a document string and doctest
unit test for a lambda. For this reason, a lambda should probably be
avoided.&lt;/p&gt;
&lt;p&gt;We can use map(lambda row: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;types.SimpleNamespace(**row),&lt;/span&gt; reader)&lt;/tt&gt;.
Some folks prefer this over the generator expression.
We could use a proper for statement with an internal yield statement,
but there doesn't seem to be any benefit from making a big statement
out of a small thing.&lt;/p&gt;
&lt;p&gt;We have a lot of choices because Python offers so many functional
programming features. We don't often see Python touted as a
functional language. Yet, we have a variety of ways to handle a
simple mapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mappings-conversions-and-derived-data"&gt;
&lt;h2&gt;Mappings: Conversions and Derived Data&lt;/h2&gt;
&lt;p&gt;We'll often have a list of data conversions that are pretty obvious.
Plus, we'll have a growing list of derived data items. The derived
items will be dynamic and are based on different hypotheses we're
testing. Each time we have an experiment or question, we might change
the derived data.&lt;/p&gt;
&lt;p&gt;Each of these steps: filtering, projection, conversions, and
derivation, are stages in the &amp;quot;map&amp;quot; portion of a map-reduce pipeline.
We could create a number of smaller functions and apply them with
map(). Because we're updating a stateful object, we can't use the
general map() function.  If we wanted to achieve a more pure
functional programming style, we'd use an immutable namedtuple
instead of a mutable SimpleNamespace.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def convert(reader):
    for row in reader:
        row._time = datetime.datetime.strptime(row.Time, &amp;quot;%Y-%m-%dT%H:%M:%S.%F%Z&amp;quot;)
        row.response_time = float(row.ResponseTime)
        yield row
&lt;/pre&gt;
&lt;p&gt;As we explore, we'll adjust the body of this conversion function.
Perhaps we'll start with some minimal set of conversions and
derivations. We'll extend this with some &amp;quot;are these right?&amp;quot; kind of
things. We'll take some out when we discover that the don't work.
Our overall processing looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;somefile.csv&amp;quot;) as source:
    rdr = csv.DictReader(source)
    rdr_perf_log = (row for row in rdr if row['source'] == 'perf_log')
    rdr_proj = project(rdr_perf_log)
    rdr_ns = (types.SimpleNamespace(**row) for row in rdr_proj)
    rdr_converted = convert(rdr_ns)
    for row in rdr_converted:
        row.start_time = row._time - datetime.timedelta(seconds=row.response_time)
        row.service = some_mapping(row.Service)
        print( &amp;quot;{host:30s} {start_time:%H:%M:%S} {response_time:6.3f} {service}&amp;quot;.format_map(vars(row)) )
&lt;/pre&gt;
&lt;p&gt;Note that change in the body of our for statement. Our &lt;tt class="docutils literal"&gt;convert()&lt;/tt&gt;
function produces values we're sure of. We've added some additional
variables inside the for loop that we're not 100% sure of. We'll see
if they're helpful (or even correct) before updating the &lt;tt class="docutils literal"&gt;convert()&lt;/tt&gt;
function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reductions"&gt;
&lt;h2&gt;Reductions&lt;/h2&gt;
&lt;p&gt;When it comes to reductions, we can adopt a slightly different style
of processing. We need to refactor our previous example, and turn it
into a generator function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def converted_log(some_file):
    with open(some_file) as source:
        rdr = csv.DictReader(source)
        rdr_perf_log = (row for row in rdr if row['source'] == 'perf_log')
        rdr_proj = project(rdr_perf_log)
        rdr_ns = (types.SimpleNamespace(**row) for row in rdr_proj)
        rdr_converted = convert(rdr_ns)
        for row in rdr_converted:
            row.start_time = row._time - datetime.timedelta(seconds=row.response_time)
            row.service = some_mapping(row.Service)
            yield row
&lt;/pre&gt;
&lt;p&gt;We've replace the &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; with a &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;.
Here's the other part of this refactoring.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for row in converted_log(&amp;quot;somefile.csv&amp;quot;):
    print( &amp;quot;{host:30s} {start_time:%H:%M:%S} {response_time:6.3f} {service}&amp;quot;.format_map(vars(row)) )
&lt;/pre&gt;
&lt;p&gt;Ideally, all of our programming looks like this. We use a generator
function to produce data. The final display of the data is kept
entirely separate. This allows us to refactor and change the
processing much more freely.&lt;/p&gt;
&lt;p&gt;Now we can do things like collect rows into Counter() objects, or
perhaps compute some statistics. We might use a defaultdict(list) to
group rows by service.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
by_service= defaultdict(list)
for row in converted_log(&amp;quot;somefile.csv&amp;quot;):
    by_service[row.service] = row.response_time
for svc in sorted(by_service):
    m = statistics.mean( by_service[svc] )
    print( &amp;quot;{svc:15s} {m:.2f}&amp;quot;.format_map(vars()) )
&lt;/pre&gt;
&lt;p&gt;We've decided to create concrete list objects here. We can use
itertools to group the response times by service. It looks like
proper functional programming, but the implementation points up some
limitations in the Pythonic form of functional programming. Either
we have to sort the data (creating a list object) or we have to
create lists as we group the data. In order to do several different
statistics, it's often easier to group data by creating concrete
lists.&lt;/p&gt;
&lt;p&gt;Rather than simply printing a row object, we're now doing two things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create some local variables, like svc and m. We can easily add
variance or other measures.&lt;/li&gt;
&lt;li&gt;Use the vars() function with no arguments, which creates a
dictionary out of the local variables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This use of &lt;tt class="docutils literal"&gt;vars()&lt;/tt&gt; with no arguments -- which behaves like
&lt;tt class="docutils literal"&gt;locals()&lt;/tt&gt; -- is a handy trick. It allows us to simply create any
local variables we want and include them in the formatted output.
We can hack in as many different kinds of statistical measures as
we think might be relevant.&lt;/p&gt;
&lt;p&gt;Now that our essential processing loop is for row in
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;converted_log(&amp;quot;somefile.csv&amp;quot;)&lt;/span&gt;&lt;/tt&gt;, we can explore a lot of processing
alternatives in a tiny, easy-to-modify script. We can explore a
number of hypotheses to determine why a some RESTful API transactions
are slow and others are fast.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category><category term="Data Science"></category></entry><entry><title>Audio Synth in Python 3.4, Part II</title><link href="https://slott56.github.io/2015_09_01-audio_synth_in_python_34_part_ii.html" rel="alternate"></link><published>2015-09-01T17:59:00-04:00</published><updated>2015-09-01T17:59:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-09-01:/2015_09_01-audio_synth_in_python_34_part_ii.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2015_08_30-audio_synth_updated.html"&gt;Audio Synth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first, I imagined the problem was going to be
&lt;a class="reference external" href="https://people.csail.mit.edu/hubert/pyaudio/"&gt;PyAudio&lt;/a&gt;. This package
has a bunch of installers. But the installers don't recognize Python
3.4, so none of them work for me. The common fallback plan is to install
from source, but, I couldn't find the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2015_08_30-audio_synth_updated.html"&gt;Audio Synth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first, I imagined the problem was going to be
&lt;a class="reference external" href="https://people.csail.mit.edu/hubert/pyaudio/"&gt;PyAudio&lt;/a&gt;. This package
has a bunch of installers. But the installers don't recognize Python
3.4, so none of them work for me. The common fallback plan is to install
from source, but, I couldn't find the source. That looks like a problem.&lt;/p&gt;
&lt;p&gt;Once I spotted this: &amp;quot;% git clone &lt;a class="reference external" href="http://people.csail.mit.edu/hubert/git/pyaudio.git"&gt;http://people.csail.mit.edu/hubert/git/pyaudio.git&lt;/a&gt;&amp;quot;, things were
much better.  I built the PortAudio library. I installed PyAudio for
Python3.4. Things are working. Noises are happening.&lt;/p&gt;
&lt;p&gt;Next step is actual synth.&lt;/p&gt;
&lt;p&gt;In the past, I have played
with &lt;a class="reference external" href="http://mdoege.github.io/PySynth/"&gt;pysynth&lt;/a&gt; because it has some
examples of wave-table additive synth. That's very handy. The examples
are hard to follow because a lot of the synth ideas are conflated into
small functions.&lt;/p&gt;
&lt;p&gt;Complication: The pysynth package is Python2. It lacks even the simple
from __future__ import print_function to make it attempt Python3
compatibility.&lt;/p&gt;
&lt;p&gt;The pysynth.play_wav module could be a handy wrapper around various
audio playback technologies, include pyaudio. It has to be tweaked,
however, to make it work with Python3.4. I really need to clone the
project, make the changes, and put in a pull request.&lt;/p&gt;
&lt;p&gt;The pysynth.pysynth and pysynth.pysynth_beeper modules are helpful for
seeing how wave tables work.  How much rework to make these work with
Python3.4? And how much reverse engineering to understand the math?&lt;/p&gt;
&lt;p&gt;I've since found &lt;a class="reference external" href="https://code.google.com/p/pyo/"&gt;pyo&lt;/a&gt;. Which is also
Python 2. See the &lt;a class="reference external" href="http://ajaxsoundstudio.com/software/pyo/"&gt;AjaxSoundStudio&lt;/a&gt; pages for
details. This may be a better example of wave tables. But it's still
Python2. More investigation to follow.&lt;/p&gt;
&lt;p&gt;The good news is that there's some forward motion.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="pyaudio"></category><category term="pysynth"></category></entry><entry><title>Audio Synth [Updated]</title><link href="https://slott56.github.io/2015_08_30-audio_synth_updated.html" rel="alternate"></link><published>2015-08-30T09:32:00-04:00</published><updated>2015-08-30T09:32:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-08-30:/2015_08_30-audio_synth_updated.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I learned about synthesizers in the '70's using a Moog analog device.
Epic coolness.&lt;/div&gt;
&lt;div class="line"&gt;Nowadays, everything is digital. We use wave tables and (relatively)
simple additive synth techniques.&lt;/div&gt;
&lt;div class="line"&gt;I made the mistake of reading about Arduino wave table synthesis:&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://learning.codasign.com/index.php?title=Wavetable_Synthesis"&gt;http://learning.codasign.com/index.php?title=Wavetable_Synthesis&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://makezine.com/projects/make-35/advanced-arduino-sound-synthesis/"&gt;http://makezine.com …&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I learned about synthesizers in the '70's using a Moog analog device.
Epic coolness.&lt;/div&gt;
&lt;div class="line"&gt;Nowadays, everything is digital. We use wave tables and (relatively)
simple additive synth techniques.&lt;/div&gt;
&lt;div class="line"&gt;I made the mistake of reading about Arduino wave table synthesis:&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://learning.codasign.com/index.php?title=Wavetable_Synthesis"&gt;http://learning.codasign.com/index.php?title=Wavetable_Synthesis&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://makezine.com/projects/make-35/advanced-arduino-sound-synthesis/"&gt;http://makezine.com/projects/make-35/advanced-arduino-sound-synthesis/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://playground.arduino.cc/Main/ArduinoSynth"&gt;http://playground.arduino.cc/Main/ArduinoSynth&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;The idea of an Arduino alarm that uses a chime instead of a harsh buzz
is exciting. The tough part about this is building the wave tables.&lt;/div&gt;
&lt;div class="line"&gt;What a perfect place to use Python: we can build wave tables that can
be pushed down to the Arduino. And test them in the Python world to
adjust the frequency spectrum and the complex envelope issues around
the various partials.&lt;/div&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="http://computermusicresource.com/Simple.bell.tutorial.html"&gt;http://computermusicresource.com/Simple.bell.tutorial.html&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Except.&lt;/div&gt;
&lt;div class="line"&gt;Python3.4 doesn't have
&lt;a class="reference external" href="https://people.csail.mit.edu/hubert/pyaudio/index.html"&gt;PyAudio&lt;/a&gt;
support.&lt;/div&gt;
&lt;div class="line"&gt;Yet.&lt;/div&gt;
&lt;div class="line"&gt;Sigh. Before I can work with Arduino wave tables, I'll have to start
by figuring out how to build PyAudio for Python 3.4 on Mac OS X.&lt;/div&gt;
&lt;div class="line"&gt;Look here: &lt;a class="reference external" href="http://people.csail.mit.edu/hubert/git/pyaudio.git"&gt;http://people.csail.mit.edu/hubert/git/pyaudio.git&lt;/a&gt; for the
code.&lt;/div&gt;
&lt;div class="line"&gt;Look here for the secret to building this on Mac OS X:
&lt;a class="reference external" href="https://stackoverflow.com/questions/2893193/building-portaudio-and-pyaudio-on-mac-running-snow-leopard-arch-issues/2906040#2906040"&gt;https://stackoverflow.com/questions/2893193/building-portaudio-and-pyaudio-on-mac-running-snow-leopard-arch-issues/2906040#2906040&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Summary.&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Get pyaudio source.&lt;/li&gt;
&lt;li&gt;Inside pyaudio create a portaudio-v19. Get the portaudio source and
put it here.&lt;/li&gt;
&lt;li&gt;Inside pyaudio/pyaudio, do ./config; make and sudo make install&lt;/li&gt;
&lt;li&gt;Inside pyaudio, do python3.4 setup.py install --static-link&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="macosx"></category><category term="#python"></category><category term="pyaudio"></category></entry><entry><title>Visual studio and Python</title><link href="https://slott56.github.io/2015_08_25-visual_studio_and_python.html" rel="alternate"></link><published>2015-08-25T08:00:00-04:00</published><updated>2015-08-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-08-25:/2015_08_25-visual_studio_and_python.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://blogs.msdn.com/b/visualstudio/archive/2015/08/03/why-write-python-in-visual-studio.aspx?imm_mid=0d6691&amp;amp;cmp=em-prog-na-na-newsltr_20150808"&gt;Why write Python in Visual
Studio?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That what I want to know, too.&lt;/p&gt;
&lt;p&gt;IntelliSense? &lt;a class="reference external" href="http://komodoide.com/"&gt;ActiveState Komodo&lt;/a&gt; does
this. And it does it very well considering the potential complexity
of trying to determine what identifiers are possibly valid in a
dynamic language.&lt;/p&gt;
&lt;p&gt;Debugger? No thanks. I haven't used it yet. [&lt;em&gt;I …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://blogs.msdn.com/b/visualstudio/archive/2015/08/03/why-write-python-in-visual-studio.aspx?imm_mid=0d6691&amp;amp;cmp=em-prog-na-na-newsltr_20150808"&gt;Why write Python in Visual
Studio?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That what I want to know, too.&lt;/p&gt;
&lt;p&gt;IntelliSense? &lt;a class="reference external" href="http://komodoide.com/"&gt;ActiveState Komodo&lt;/a&gt; does
this. And it does it very well considering the potential complexity
of trying to determine what identifiers are possibly valid in a
dynamic language.&lt;/p&gt;
&lt;p&gt;Debugger? No thanks. I haven't used it yet. [&lt;em&gt;I should probably blog
on the perils of debuggers.&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;Project Management? GitHub seems to be it. Some IDE integration might
be helpful, but the three common command-line operations -- git pull,
git commit, and git push -- seem to cover an awful lot of bases.&lt;/p&gt;
&lt;p&gt;I've been asked about Python IDEs -- more than once -- and my answer
remains the same:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;The IDE Doesn't Matter.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;One of the more shocking tech decisions I've seen is the development
manager who bragged on the benefits of VB. The entire benefit was
this: Visual Studio made the otherwise awful VB language acceptable.
The Visual Studio IDE was great. And it made up for the awful
language.&lt;/p&gt;
&lt;p&gt;Seriously.&lt;/p&gt;
&lt;p&gt;The development manager went to to claim that until Eclipse had all
the features of Visual Studio, they were &lt;strong&gt;sure&lt;/strong&gt; that Java was not
usable. To them, the IDE was the &lt;strong&gt;only&lt;/strong&gt; decision criteria. As
though code somehow doesn't have a long tail of support, analysis,
and reverse engineering.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="VB"></category></entry><entry><title>Mocking and Unit Testing and Test-Driven Development</title><link href="https://slott56.github.io/2015_08_04-mocking_and_unit_testing_and_test_driven_development.html" rel="alternate"></link><published>2015-08-04T08:00:00-04:00</published><updated>2015-08-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-08-04:/2015_08_04-mocking_and_unit_testing_and_test_driven_development.html</id><summary type="html">&lt;p&gt;Mocking is essential to unit testing.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;It's also annoyingly difficult to get right.&lt;/p&gt;
&lt;p&gt;If we aren't 100% perfectly clear on what we're mocking, we will
merely canonize any dumb assumptions into mock objects that don't
&lt;em&gt;really&lt;/em&gt; work. They work in the sense that they don't crash, but they
don't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mocking is essential to unit testing.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;It's also annoyingly difficult to get right.&lt;/p&gt;
&lt;p&gt;If we aren't 100% perfectly clear on what we're mocking, we will
merely canonize any dumb assumptions into mock objects that don't
&lt;em&gt;really&lt;/em&gt; work. They work in the sense that they don't crash, but they
don't properly test the application objects since they repeat some
(bad) assumptions.&lt;/p&gt;
&lt;p&gt;When there are doubts, it seems like we have to proceed cautiously.
And act like we're breaking some of the test-first
test-driven-development rules.&lt;/p&gt;
&lt;p&gt;Note. We're not really breaking the rules. Some folks, however, will
argue that test-driven development means literally every action you
take should be driven by tests. Does this include morning coffee or
rotating your monitor into portrait mode? Clearly not. What about
technical spikes?&lt;/p&gt;
&lt;p&gt;Our position is this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Set a spike early and often.&lt;/li&gt;
&lt;li&gt;Once you have reason to believe that this crazy thing might work, you
can formalize the spike with tests. And mock objects.&lt;/li&gt;
&lt;li&gt;Now you can write the rest of the app by creating tests and fitting
code around those tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The import part here is not to create mocks until you really
understand what you're doing.&lt;/p&gt;
&lt;div class="section" id="book-examples"&gt;
&lt;h2&gt;Book Examples&lt;/h2&gt;
&lt;p&gt;Now comes the tricky part: Writing a book.&lt;/p&gt;
&lt;p&gt;Clearly every example must have a unit test of some kind. I use
doctest heavily for this. Each example is in a doctest test string.&lt;/p&gt;
&lt;p&gt;The code for a chapter might look like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
test_hello_world = '''
&amp;gt;&amp;gt;&amp;gt; print( 'hello world')
'hello world'
'''

__test__ = { n:v for n,v in vars().items()
   if n.startswith('test_') }

if __name__ == '__main__':
   import doctest
   doctest.testmod()
&lt;/pre&gt;
&lt;p&gt;We've used the doctest feature that looks for a dictionary assigned to
a variable named &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt;. The values from this dictionary are tests
that get run as if they were docstrings found inside modules,
functions, or classes.&lt;/p&gt;
&lt;p&gt;This is delightfully simple. Expostulate. Exemplify. Copy and Paste
the example into a script for test purposes and Exhibit in the text.&lt;/p&gt;
&lt;p&gt;Until we get to external services. And RESTful API requests, and the
like. These are right awkward to mock. Mostly because a mocked
unittest is singularly uninformative.&lt;/p&gt;
&lt;p&gt;Let's say we're writing about making a RESTful API request to
&lt;a class="reference external" href="http://www.data.gov/"&gt;http://www.data.gov&lt;/a&gt;. The results of the
request are very interesting. The mechanics of making the request are
an important example of how REST API's work. And how
&lt;a class="reference external" href="http://ckan.org/"&gt;CKAN&lt;/a&gt;-powered web sites work in general.&lt;/p&gt;
&lt;p&gt;But if we replace urrlib.request with a mock urllib, the unit test
amounts to a check that we called urlopen() with the proper
parameters. Important for a lot of practical software development, but
also uniformative for folks who download the code associated with the
book.&lt;/p&gt;
&lt;p&gt;It appears that I have four options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Grin and bear it. Not all examples have to be wonderfully detailed.&lt;/li&gt;
&lt;li&gt;Stick with the spike version. Don't mock things. The results may vary
and some of the tests might fail on the editor's desktop.&lt;/li&gt;
&lt;li&gt;Skip the test.&lt;/li&gt;
&lt;li&gt;Write multiple versions of the test: a &amp;quot;with real internet&amp;quot; version
and a &amp;quot;with corporate firewall proxy blockers in place&amp;quot; version that
uses mocks and works everywhere.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So far, I've leveraged the first three heavily. The fourth is
awkward. We wind up with code like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Test_get_whois(unittest.TestCase):
    def test_should_get_subprocess(self):
        subprocess = MagicMock()
        subprocess.check_output.return_value=b'\nwords\n'
        with patch.dict('sys.modules', subprocess=subprocess):
            import subprocess
            from ch_2_ex_4 import get_whois
            result= get_whois('1.2.3.4')
        self.assertEquals( result, ['', 'words'] )
        subprocess.check_output.assert_called_with(['whois', '1.2.3.4'])
&lt;/pre&gt;
&lt;p&gt;This is not a lot of code for enterprise software development
purposes. It's a bit weak, in fact, since it only tests the Happy
Path.&lt;/p&gt;
&lt;p&gt;But for a book example, it seems to be heavy on the mock module and
light on the subject of interest.&lt;/p&gt;
&lt;p&gt;Indeed, I defy anyone to figure out what the expository value of this
is, since it has only 2 lines of relevant code wrapped in 8 lines of
boilerplate required to mock a module successfully.&lt;/p&gt;
&lt;p&gt;I'm not unhappy with the unitest.mock module in any way. It's great
for mocking modules; I think the boilerplate is acceptable considering
what kind of a wrenching change we're making to the runtime
environment for the unit under test.&lt;/p&gt;
&lt;p&gt;This fails at explication.&lt;/p&gt;
&lt;p&gt;I'm waffling over how to handle some of these more complex test cases.
In the past, I've skipped cases, and used the doctest Ellipsis feature
to work through variant outputs. I think I'll continue to do that,
since the mocking code seems to be less helpful for the readers, and
too focused on purely technical need of proving that all the code is
perfectly correct.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="#python"></category></entry><entry><title>Amazon Reviews</title><link href="https://slott56.github.io/2015_07_28-amazon_reviews.html" rel="alternate"></link><published>2015-07-28T08:00:00-04:00</published><updated>2015-07-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-07-28:/2015_07_28-amazon_reviews.html</id><summary type="html">&lt;p&gt;Step 1. Go to &lt;a class="reference external" href="http://amazon.com/"&gt;amazon.com&lt;/a&gt; and look for one (or
more) of my Python books.&lt;/p&gt;
&lt;p&gt;Step 2. Have you read it?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Yes: Thanks! Consider posting a review.&lt;/li&gt;
&lt;li&gt;No: Hmmm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all. Consider doing this for other authors, also.&lt;/p&gt;
&lt;p&gt;Social media is its own weird economy. The currency seems to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Step 1. Go to &lt;a class="reference external" href="http://amazon.com/"&gt;amazon.com&lt;/a&gt; and look for one (or
more) of my Python books.&lt;/p&gt;
&lt;p&gt;Step 2. Have you read it?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Yes: Thanks! Consider posting a review.&lt;/li&gt;
&lt;li&gt;No: Hmmm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all. Consider doing this for other authors, also.&lt;/p&gt;
&lt;p&gt;Social media is its own weird economy. The currency seems to be
evidence of eyeballs landing on content.&lt;/p&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="packtpub"></category></entry><entry><title>A Surprising Confusion</title><link href="https://slott56.github.io/2015_07_21-a_surprising_confusion.html" rel="alternate"></link><published>2015-07-21T08:00:00-04:00</published><updated>2015-07-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-07-21:/2015_07_21-a_surprising_confusion.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Well, it was surprising to me.&lt;/div&gt;
&lt;div class="line"&gt;And it should not have been a surprise.&lt;/div&gt;
&lt;div class="line"&gt;This is something I need to recognize as a standard confusion. And
rewrite some training material to better address this.&lt;/div&gt;
&lt;div class="line"&gt;The question comes up when SQL hackers move beyond simple queries and
canned desktop tools into …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Well, it was surprising to me.&lt;/div&gt;
&lt;div class="line"&gt;And it should not have been a surprise.&lt;/div&gt;
&lt;div class="line"&gt;This is something I need to recognize as a standard confusion. And
rewrite some training material to better address this.&lt;/div&gt;
&lt;div class="line"&gt;The question comes up when SQL hackers move beyond simple queries and
canned desktop tools into &amp;quot;Big Data&amp;quot; analytics. The pure SQL lifestyle
(using spreadsheets, or Business Objects, or SAS) leads to an
understanding of data that's biased toward working with collections in
an autonomous way.&lt;/div&gt;
&lt;div class="line"&gt;Outside the SELECT clause, everything's a group or a set or some kind
of collection. Even in spreadsheet world, a lot of Big Data folks slap
summary expressions on the top of a column to show a sum or a count
without too much worry or concern.&lt;/div&gt;
&lt;div class="line"&gt;But when they start wrestling with Python &lt;strong&gt;for&lt;/strong&gt; loops, and the
atomic elements which comprise a set (or list or dict), then there's a
bit of confusion that creeps in.&lt;/div&gt;
&lt;div class="line"&gt;An important skill is building a list (or set or dict) from atomic
elements. We'll often have code that looks like this:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
some_list = []
for source_object in some_source_of_objects:
    if some_filter(source_object):
        useful_object = transform(source_object)
        some_list.append(useful_object)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This is, of course, simply a list comprehension. In some case, we
might have a process that breaks one of the rules of using a generator
and doesn't work out perfectly cleanly as a comprehension. This is
somewhat more advanced topic.&lt;/div&gt;
&lt;div class="line"&gt;The transformation step is what seems to causes confusion. Or -- more
properly -- it's the disconnect between the transformation
calculations on atomic items and the group-level processing to
accumulate a collection from individual items.&lt;/div&gt;
&lt;div class="line"&gt;The use of some_list.append() and some_list[index] and some_list is
something that folks can't -- trivially -- articulate. The course
material isn't clarifying this for them. And (worse) leaping into list
comprehensions doesn't seem to help.&lt;/div&gt;
&lt;div class="line"&gt;These are particularly difficult to explain if the long version isn't
clear.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
some_list = [transform(source_object) for source_object in some_source_of_objects if some_filter(source_object)]
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;and&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
some_list = list( map(transform, filter(some_filter, some_source_of_objects)) )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I'm going to have to build some revised course material that zeroes in
on the atomic vs. collection concepts. What we do with an item
(singular) and what we do with a list of items (plural).&lt;/div&gt;
&lt;div class="line"&gt;I've been working with highly experienced programmers too long. I've
lost sight of the n00b questions.&lt;/div&gt;
&lt;div class="line"&gt;The goal is to get to the small data map-reduce. We have some folks
who can make big data work, but the big data Hadoop architecture isn't
ideal for all problems. We have to help people distinguish between big
data and small data, and switch gears when appropriate. Since Python
does both very nicely, we think we can build enough education to
school up business experts to also make a more informed technology
choice.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="map-reduce"></category><category term="functional python programming"></category><category term="python essentials"></category><category term="hadoop"></category></entry><entry><title>Upgrading to Python 3</title><link href="https://slott56.github.io/2015_07_14-upgrading_to_python_3.html" rel="alternate"></link><published>2015-07-14T08:00:00-04:00</published><updated>2015-07-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-07-14:/2015_07_14-upgrading_to_python_3.html</id><summary type="html">&lt;p&gt;Folks who don't use Python regularly -- the folks in TechOps, for
example -- are acutely aware that the Python 3 language is
&amp;quot;different,&amp;quot; and the upgrade should be done carefully. They've done
their homework, but, they're not &lt;em&gt;experts&lt;/em&gt; in everything.&lt;/p&gt;
&lt;p&gt;They feel the need to introduce Python 3 slowly and cautiously …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Folks who don't use Python regularly -- the folks in TechOps, for
example -- are acutely aware that the Python 3 language is
&amp;quot;different,&amp;quot; and the upgrade should be done carefully. They've done
their homework, but, they're not &lt;em&gt;experts&lt;/em&gt; in everything.&lt;/p&gt;
&lt;p&gt;They feel the need to introduce Python 3 slowly and cautiously to
avoid the remote possibility of breakage. Currently, the Python 3
installers are really careful about avoiding any possible conflicts
between Python 2 and 3; tiptoeing isn't really necessary at all.&lt;/p&gt;
&lt;p&gt;I was stopped cold from having Python 3 installed on a shared server
by someone who insisted that I enumerate which &amp;quot;features&amp;quot; of Python 3
I required. By enumerating the features, they could magically decide
if I had a real need for Python 3 or could muddle along with Python 2.&lt;/p&gt;
&lt;p&gt;The question made precious little sense for many reasons: (1) many
things are backported from 3 to 2, so there's almost nothing that's
exclusive to Python 3; (2) both languages are Turing-Complete, so any
feature in language could (eventually) be built in the other; (3) I
didn't even know languages has &amp;quot;features.&amp;quot; The reason they wanted a
feature list was to provide a detailed &amp;quot;no&amp;quot; instead of a generic &amp;quot;no.&amp;quot;&lt;/p&gt;
&lt;p&gt;Either way, the answer was &amp;quot;no.&amp;quot; And there's no reason for that.&lt;/p&gt;
&lt;p&gt;In all cases, we can install Python 3 now. We can start using it now.
Right now.&lt;/p&gt;
&lt;p&gt;Folks who actually use Python regularly -- me, for example -- are well
aware that there's a path to the upgrade. A path that doesn't involve
waiting around and slowly adopting Python 3 eventually (where
eventually ≈ never.)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Go to your enterprise GitHub (and the older enterprise SVN and
wherever else you keep code) and check out every single Python
module. Add this line: &lt;tt class="docutils literal"&gt;from __future__ import print_function&lt;/tt&gt;,
division, unicode_literals. Fix the print statements. Just that.
Touch all the code once. If there's stuff you don't want to touch,
perhaps you should delete it from the enterprise GitHub at this time.&lt;/li&gt;
&lt;li&gt;Rerun all the unit tests. This isn't as easy as it sounds. Some
scripts aren't properly testable and need to be refactored so that
the top-level script is made into a function and a separate doctest
function (or module) is added. Or use &lt;strong&gt;nose&lt;/strong&gt;. Once you have an
essentially testable module, you can add doctests as needed to be
sure that any Python 2 division or byte-fiddling work correctly with
Python 3 semantics for the operators and literals.&lt;/li&gt;
&lt;li&gt;Use your code in this &amp;quot;compatibility&amp;quot; mode for a while to see if
anything else breaks. Some math may be wrong. Some use of bytes and
Unicode may be wrong. Add any needed doctests. Fix things in Python 2
using the &lt;tt class="docutils literal"&gt;from __future__&lt;/tt&gt; as a bridge to Python 3. It's not a
conversion. It's a step toward a conversion.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is the kind of thing that can be started with an enterprise hack
day. Make a list of all the projects with Python code. Create a
central &amp;quot;All the Codes&amp;quot; GitHub project. Name each Python project as
an issue in the &amp;quot;All the Codes&amp;quot; project. Everyone at the hack day can
be assigned a project to check out, tweak for compatibility with some
of the Python 3 features and test.&lt;/p&gt;
&lt;p&gt;You don't even need to know any Python to participate in this kind of
hack day. You're adding a line, and converting print statements to
&lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; functions. You'll see a lot of Python code. You can ask
questions of other hackers. At the end of the day, you'll be
reasonably skilled.&lt;/p&gt;
&lt;p&gt;Once this is done, the introduction of Python3 will not be a shock to
anyone's system. The &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; functions will be a thing. Exact
division will be well understood. Unicode will be slightly more
common.&lt;/p&gt;
&lt;p&gt;And -- bonus -- everything will have unit tests. (Some things will be
rudimentary place-holders, but that's still a considerable
improvement over the prior state.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Python Essentials</title><link href="https://slott56.github.io/2015_07_07-python_essentials.html" rel="alternate"></link><published>2015-07-07T08:00:00-04:00</published><updated>2015-07-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-07-07:/2015_07_07-python_essentials.html</id><summary type="html">&lt;p&gt;Get Packt's &lt;a class="reference external" href="https://www.packtpub.com/application-development/python-essentials"&gt;Python
Essentials&lt;/a&gt;.
I think it covers a large number of important topics. Central to this is
Python 3.4.
The book covers Python 3 with few -- if any -- backward glances. If it
makes any mention of Python 2, the reference is strictly derogatory.
There isn't even a mention …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Get Packt's &lt;a class="reference external" href="https://www.packtpub.com/application-development/python-essentials"&gt;Python
Essentials&lt;/a&gt;.
I think it covers a large number of important topics. Central to this is
Python 3.4.
The book covers Python 3 with few -- if any -- backward glances. If it
makes any mention of Python 2, the reference is strictly derogatory.
There isn't even a mention of the old print statement, that's how
forward-looking this is. The Python3 division operators are covered
without the complexity of explaining the old Python 2 approach; the from
__future__ import division is not mentioned once.
I've used a similar outline for training material at places with a mixed
bag of Python 2 and Python 3. This leads to awkwardness because of the
Python 2 quirks that have to be explained.
I prefer a clean approach. The essentials. Python 3 all the way.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Literate Programming and GitHub</title><link href="https://slott56.github.io/2015_06_23-literate_programming_and_github.html" rel="alternate"></link><published>2015-06-23T08:00:00-04:00</published><updated>2015-06-23T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-06-23:/2015_06_23-literate_programming_and_github.html</id><summary type="html">&lt;p&gt;I remain captivated by the ideals of &lt;a class="reference external" href="http://www.literateprogramming.com/"&gt;Literate
Programming&lt;/a&gt;. My fork of PyLit
(&lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt;) coupled with
&lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt; seems to handle LP programming in
a very elegant way.&lt;/p&gt;
&lt;p&gt;It works like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write RST files describing the problem and the solution. This
includes the actual implementation code …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I remain captivated by the ideals of &lt;a class="reference external" href="http://www.literateprogramming.com/"&gt;Literate
Programming&lt;/a&gt;. My fork of PyLit
(&lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt;) coupled with
&lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt; seems to handle LP programming in
a very elegant way.&lt;/p&gt;
&lt;p&gt;It works like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write RST files describing the problem and the solution. This
includes the actual implementation code. And everything else that's
relevant.&lt;/li&gt;
&lt;li&gt;Run PyLit3 to build final Python code from the RST documentation.
This should include the setup.py so that it can be installed
properly.&lt;/li&gt;
&lt;li&gt;Run Sphinx to build pretty HTML pages (and LaTeX) from the RST
documentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I often include the unit tests along with the sphinx build so that I'm
sure that things are working.&lt;/p&gt;
&lt;p&gt;The challenge is final presentation of the whole package.&lt;/p&gt;
&lt;p&gt;The HTML can be easy to publish, but it can't (trivially) be used to
recover the code. We have to upload two separate and distinct things.
(We could use BeautifulSoup to recover RST from HTML and then PyLit to
rebuild the code. But that sounds crazy.)&lt;/p&gt;
&lt;p&gt;The RST is easy to publish, but hard to read and it requires a pass
with PyLit to emit the code and then another pass with Sphinx to
produce the HTML. A single upload doesn't work well.&lt;/p&gt;
&lt;p&gt;If we publish only the Python code we've defeated the point of
literate programming. Even if we focus on the Python, we need to do a
separate upload of HTML to providing the supporting documentation.&lt;/p&gt;
&lt;p&gt;After working with this for a while, I've found that it's simplest to
have one source and several targets. I use RST ⇒ (.py, .html, .tex).
This encourages me to write documentation first. I often fail, and
have blocks of code with tiny summaries and non-existent explanations.&lt;/p&gt;
&lt;p&gt;PyLit allows one to use .py ⇒ .rst ⇒ .html, .tex. I've messed with
this a bit and don't like it as much. Code first leaves the
documentation as a kind of afterthought.&lt;/p&gt;
&lt;div class="section" id="how-can-we-publish-simply-and-cleanly-without-separate-uploads"&gt;
&lt;h2&gt;How can we publish simply and cleanly: without separate uploads?&lt;/h2&gt;
&lt;p&gt;Enter GitHub and &lt;a class="reference external" href="https://pages.github.com/"&gt;gh-pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the
&amp;quot;&lt;a class="reference external" href="http://daler.github.io/sphinxdoc-test/index.html"&gt;sphinxdoc-test&lt;/a&gt;&amp;quot;
project for an example. Also this
&lt;a class="reference external" href="https://github.com/daler/sphinxdoc-test"&gt;https://github.com/daler/sphinxdoc-test&lt;/a&gt;. The bulk of this is useful
advice on a way to create the gh-pages branch from your RST source via
Sphinx and some GitHub commands.&lt;/p&gt;
&lt;p&gt;Following this line of thinking, we almost have the case for three
branches in a LP project.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &amp;quot;master&amp;quot; branch with the RST source. And nothing more.&lt;/li&gt;
&lt;li&gt;The &amp;quot;code&amp;quot; branch with the generated Python code created by PyLit.&lt;/li&gt;
&lt;li&gt;The &amp;quot;gh-pages&amp;quot; branch with the generated HTML created by Sphinx.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think I like this.&lt;/p&gt;
&lt;p&gt;We need three top-level directories. One has RST source. A build
script would run PyLit to populate the (separate) directory for the
code branch. The build script would also run Sphinx to populate a
third top-level directory for the gh-pages branch.&lt;/p&gt;
&lt;p&gt;The downside of this shows up when you need to create a branch for a
separate effort. You have a &amp;quot;some-major-change&amp;quot; branch to master.
Where's the code? Where's the doco? You don't want to commit either of
those derived work products until you merge the &amp;quot;some-major-change&amp;quot;
back into master.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-literate-programming"&gt;
&lt;h2&gt;GitHub Literate Programming&lt;/h2&gt;
&lt;p&gt;There are many LP projects on GitHub. There are perhaps a dozen which
focus on publishing with the Github-flavored Markdown as the source
language. Because Markdown is about as easy to parse as RST, the
tooling is simple. Because Markdown lacks semantic richness, I'm not
switching.&lt;/p&gt;
&lt;p&gt;I've found that semantically rich markup is essential. This is a key
feature of RST. It's carried forward by Sphinx to create very
sophisticated markup. Think &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:code:`sample`&lt;/span&gt;&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:py:func:`sample`&lt;/span&gt;&lt;/tt&gt; vs.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:py:mod:`sample`&lt;/span&gt;&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:py:exc:`sample`&lt;/span&gt;&lt;/tt&gt;. The final typesetting may be
similar, but they are clearly semantically distinct and create
separate index entries.&lt;/p&gt;
&lt;p&gt;A focus on Markdown seems to be a limitation. It's encouraging to see
folks experiment with literate programming using Markdown and GitHub.
Perhaps other folks will look at more sophisticated markup languages
like RST.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="previous-exercises"&gt;
&lt;h2&gt;Previous Exercises&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;https://sourceforge.net/projects/stingrayreader/&lt;/a&gt; for a seriously
large literate programming effort. The HTML is also hosted at
SourceForge: &lt;a class="reference external" href="http://stingrayreader.sourceforge.net/index.html"&gt;http://stingrayreader.sourceforge.net/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This project is awkward because -- well -- I have to do a separate FTP
upload of the finished pages after a change. It's done with a script,
not a simple &amp;quot;git push.&amp;quot; SourceForge has a GitHub
repository. &lt;a class="reference external" href="https://sourceforge.net/p/stingrayreader/code/ci/master/tree/"&gt;https://sourceforge.net/p/stingrayreader/code/ci/master/tree/&lt;/a&gt;.
But. SourceForge doesn't use  GitHub.com's UI, so it's not clear if it
supports the gh-pages feature. I assume it doesn't, but, maybe it
does. (I can't even login to SourceForge with Safari... I should
really stop using SourceForge and switch to GitHub.)&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/HamCalc-2.1"&gt;https://github.com/slott56/HamCalc-2.1&lt;/a&gt; for another complex, LP
effort. This predates my dim understanding of the gh-pages branch, so
it's got HTML (in doc/build/html), but it doesn't show it elegantly.&lt;/p&gt;
&lt;p&gt;I'm still not sure this three-branch Literate Programming approach is
sensible. My first step should probably be to rearrange the
&lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;PyLit3&lt;/a&gt; project into this
three-branch structure.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="sphinx"></category><category term="#python"></category><category term="literate programming"></category><category term="PyLit"></category><category term="github"></category></entry><entry><title>A plea to avoid sys.exit() [Updated]</title><link href="https://slott56.github.io/2015_06_23-a_plea_to_avoid_sysexit_updated.html" rel="alternate"></link><published>2015-06-23T07:38:00-04:00</published><updated>2015-06-23T07:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-06-23:/2015_06_23-a_plea_to_avoid_sysexit_updated.html</id><summary type="html">&lt;p&gt;Let me gripe about this for a moment.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sys.exit()
&lt;/pre&gt;
&lt;p&gt;The use case for this function is limited. Very, very limited.&lt;/p&gt;
&lt;p&gt;Every place that this appears (except for one) is going to lead to
reusability issues.&lt;/p&gt;
&lt;p&gt;Consider some obscure little function, deep within the app.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def deep_within_the_app(x, y, zed …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Let me gripe about this for a moment.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sys.exit()
&lt;/pre&gt;
&lt;p&gt;The use case for this function is limited. Very, very limited.&lt;/p&gt;
&lt;p&gt;Every place that this appears (except for one) is going to lead to
reusability issues.&lt;/p&gt;
&lt;p&gt;Consider some obscure little function, deep within the app.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def deep_within_the_app(x, y, zed):
    try:
        something -- doesn't matter what
    except SomeException:
        logging.exception( &amp;quot;deep_within_the_app&amp;quot;)
        sys.exit(2)
&lt;/pre&gt;
&lt;p&gt;What's so bad about that?&lt;/p&gt;
&lt;p&gt;The function seizes control of every app that uses it by raising an
unexpected exception.&lt;/p&gt;
&lt;p&gt;We can (partially) undo this mischief by wrapping the function in a
try/except which catches SystemExit.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def reusing_a_feature():
    for i in range(a_bunch):
        try:
            print(deep_within_the_app(x,y,i))
        except SystemExit as e:
            print(&amp;quot;error on {0}&amp;quot;.format(i))
&lt;/pre&gt;
&lt;p&gt;This will defeat the sys.exit(). But the cost is one of clarity. Why
SystemExit? Why not some meaningful exception?&lt;/p&gt;
&lt;p&gt;This is important: &lt;strong&gt;raise the meaningful exception instead of exit&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Bottom Line.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The right place for sys.exit() is inside the
&lt;tt class="docutils literal"&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/tt&gt; section.&lt;/p&gt;
&lt;p&gt;It might look something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if __name__ == &amp;quot;__main__&amp;quot;:
    try:
        main()
    except (KnownException, AnotherException) as ex:
        logging.exception(ex)
        sys.exit(2)




 **Use meaningful exceptions instead of sys.exit().**
&lt;/pre&gt;
&lt;p&gt;This permits reuse of everything without a mysterious SystemExit
causing confusion.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>On "Taste" in Software Design</title><link href="https://slott56.github.io/2015_06_16-on_taste_in_software_design.html" rel="alternate"></link><published>2015-06-16T08:00:00-04:00</published><updated>2015-06-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-06-16:/2015_06_16-on_taste_in_software_design.html</id><summary type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://www.paulgraham.com/taste.html"&gt;http://www.paulgraham.com/taste.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was originally focused on &amp;quot;beauty&amp;quot;. Clearly, good design is
beautiful. Isn't that obvious? Why so many words to explain the
obvious?&lt;/p&gt;
&lt;p&gt;The post seemed useless. Why write it in the first place? Why share
it? Why share it now, 12 years …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://www.paulgraham.com/taste.html"&gt;http://www.paulgraham.com/taste.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was originally focused on &amp;quot;beauty&amp;quot;. Clearly, good design is
beautiful. Isn't that obvious? Why so many words to explain the
obvious?&lt;/p&gt;
&lt;p&gt;The post seemed useless. Why write it in the first place? Why share
it? Why share it now, 12 years after it was written?&lt;/p&gt;
&lt;p&gt;Because beauty can be elusive to some people. A more complete
definition of some attributes of beauty are helpful.&lt;/p&gt;
&lt;p&gt;This is not a throw-away concept. These are fourteen essential
elements that need to be used as part of every software architectural
design review. Indeed, it should be part of every code review.&lt;/p&gt;
&lt;p&gt;Although code perhaps shouldn't be &amp;quot;daring.&amp;quot;&lt;/p&gt;
&lt;p&gt;When we adopt an architecture, it should fit these criteria.
This doesn't replace more pragmatic software quality assurance
considerations.  See &lt;a class="reference external" href="http://www.sei.cmu.edu/reports/95tr021.pdf"&gt;http://www.sei.cmu.edu/reports/95tr021.pdf&lt;/a&gt;.
I'm currently delighted with &amp;quot;Good design is redesign.&amp;quot;&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="software design"></category><category term="architecture"></category></entry><entry><title>On Waiting to Write "Serious Code"</title><link href="https://slott56.github.io/2015_06_10-on_waiting_to_write_serious_code.html" rel="alternate"></link><published>2015-06-10T07:40:00-04:00</published><updated>2015-06-10T07:40:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-06-10:/2015_06_10-on_waiting_to_write_serious_code.html</id><summary type="html">&lt;p&gt;Someone told me they weren't yet ready to write &amp;quot;serious code.&amp;quot; They
needed to spend more time doing something that's not coding.&lt;/p&gt;
&lt;p&gt;I'm unclear on &lt;strong&gt;what&lt;/strong&gt; they were doing. It appears they have some
barriers that I can't see.&lt;/p&gt;
&lt;p&gt;They had sample data. They had a problem statement. They had …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Someone told me they weren't yet ready to write &amp;quot;serious code.&amp;quot; They
needed to spend more time doing something that's not coding.&lt;/p&gt;
&lt;p&gt;I'm unclear on &lt;strong&gt;what&lt;/strong&gt; they were doing. It appears they have some
barriers that I can't see.&lt;/p&gt;
&lt;p&gt;They had sample data. They had a problem statement. They had an
existing solution that was not very good. I couldn't see any reason
for waiting. Indeed, I can't figure out what &amp;quot;serious&amp;quot; code is. Does
that mean there's frivolous code?&lt;/p&gt;
&lt;p&gt;Because there was a previous solution, they had a minimum viable
product already defined: it has to do what the previous version did,
only be better in some way. One could trivially transform the previous
product into unit test cases and an acceptance test case. Few things
could be more amenable to coding than having test cases.&lt;/p&gt;
&lt;p&gt;Since everything necessary seemed to be in place, I had a complete
brain cramp when they mentioned they weren't yet ready to write
&amp;quot;serious&amp;quot; code. &amp;quot;Serious?&amp;quot; Seriously?&lt;/p&gt;
&lt;p&gt;It appears that this developer suffers from a bad case of Fear of
Code™. I know some common sources of this fear.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Waterfall Project Experience (WPE™.) Old people (like me,) who
started in Waterfall World, were told that we had to produce
mountains of design before we produced any code. No one knew why in
any precise way. Indeed, there's ample evidence that too much design
is simply a way to introduce noise into the process. In spite of real
questions, some folks think that you can write a design so detailed
that a coder can just type in the code from the design. (This level
of design is isomorphic to code; to avoid ambiguity it must be
written as code.)&lt;/li&gt;
&lt;li&gt;Relational Database Hegemony (RDH™.) Folks (like me,) who were DBA's,
know that databases require a lot of design and a lot of review
before they can be created. Writing stored procedures requires even
more design and review time. You don't just slap an SP out there. It
might be &amp;quot;bad&amp;quot; or &amp;quot;create problems.&amp;quot; Also, when you insist on DBA's
writing application code, it takes super-detailed, code-level design
details. In effect, you must write the code for the DBA to write your
code back to you.&lt;/li&gt;
&lt;li&gt;One and Done (OAD™.) Some people like to feel that they can write
code once and it can be a thing of beauty and a joy forever. The idea
of a rewrite is anathema to these people. While this is obviously
silly, people still like the conceit that they can produce some
prototype code that will be a proper part of every future release
forever and always. It's not possible to make all of the decisions
the first time regarding adoption and scaling and user preferences.
Your prototype code will get replaced eventually: get over it. Write
the prototype, get funding, move forward. Don't dither trying to make
a bunch of future-oriented decisions based on a future you cannot
actually foresee. You can't &amp;quot;future-proof&amp;quot; your code.&lt;/li&gt;
&lt;li&gt;Learnings are Expensive (LAE™.) You can find people that think that
the sequence of (spike, POC, version 0, version 1) is too expensive.
They are sure that learning is a project drag, since no &amp;quot;tangible&amp;quot;
results are created by learning. This means that they don't value
intellectual property or knowledge work, either; an attitude is
actually destructive to the organization. Knowledge is everything:
software captures knowledge: a spike followed by a POC followed by
version zero will arrive on the scene more quickly than any
alternative strategy. Don't waste time trying to write version 1 from
a position of ignorance.&lt;/li&gt;
&lt;li&gt;Tools are Expensive (TAE™.) Some people feel that -- since tools are
expensive -- they should be used rarely. Back in the olden days, when
a compiler took many minutes to produce an error report, you had to
be sure the code was good. (I'm old enough that I remember when
compiles took hours. Really.) Those days are gone. Most compilers
today work at the &amp;quot;speed of light&amp;quot; -- if they were any faster, you
couldn't tell, because you can't click any faster. For dynamic
languages, like Python, the speed with which code can be emitted
makes all tool considerations quaint and silly.&lt;/li&gt;
&lt;li&gt;Diagram it to Death (DTD™.) Rather than write code, some folks would
rather talk about writing code. To them, email, powerpoint, and
whiteboard are cheaper than coding. This is a false economy. Nothing
is saved by avoiding code. Time is wasted drawing diagrams of things
at a level of detail that mirrors the code. Pictures aren't bad in
general. Detailed pictures are simply a stalling tactic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I find it frustrating when people search for excuses to avoid simply
creating code. While I see a number of sources, there are many
counter-arguments available.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Waterfall is dead. Make something minimal that works for this
sprint. Call it a &amp;quot;spike&amp;quot; if that makes you happier. Clean it up
in the next sprint. Create value early. Expand on the features
later.&lt;/li&gt;
&lt;li&gt;Databases are free now. SQLite and similar products mean that we
can prototype a database without waiting around for DBA's to give
us permission to make progress. Build the database now, get
something that works. Rework the database as your understanding of
the problem matures. Rework the database as the problem itself
matures and morphs. Nothing is static; the universe is expanding;
do something now.&lt;/li&gt;
&lt;li&gt;No code lasts forever. Waiting around to create some kind of
perfect value one time only is perfect silliness. Create value
early and often. Discarding code means you're making progress. If
you think it's important, write &amp;quot;draft&amp;quot; on every electronic
document which might get changed. (Hint: version numbers are
smarter than putting &amp;quot;draft&amp;quot; everywhere.)&lt;/li&gt;
&lt;li&gt;A spike and code happens more quickly than code. It's a matter of
technical risk: unfinished work is an &amp;quot;exposure&amp;quot; -- an unrealized
investment. Failing soon is better than researching extensively in
an effort prevent a failure that could have been found quickly.&lt;/li&gt;
&lt;li&gt;Use a dynamic language and avoid all overheads.&lt;/li&gt;
&lt;li&gt;Keep the diagrams high-level. Code is the only way to meaningfully
capture details. Code endures better than some out-of-date Visio
file that's in Sharepoint completely disconnected from GitHub.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's imperative to break down the roadblocks. All &amp;quot;pre-coding&amp;quot;
activities are little more than emotional props: knock them down
and start coding.&lt;/p&gt;
</content><category term="Technologies"></category><category term="object-oriented design"></category><category term="tools"></category><category term="software process improvement"></category></entry><entry><title>On Pre-built Binaries for Python Packages</title><link href="https://slott56.github.io/2015_06_02-on_pre_built_binaries_for_python_packages.html" rel="alternate"></link><published>2015-06-02T08:00:00-04:00</published><updated>2015-06-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-06-02:/2015_06_02-on_pre_built_binaries_for_python_packages.html</id><summary type="html">&lt;p&gt;Or.
Why I Hate Windows.
For Mac OS X, you download XCode (for free) and you can build anything.
For Linux, you use some kind of yum or rpm installer for the developer
tools, and you can build anything.
For Windows...
Pre-built binaries. 😂
And a hope that the version numbers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Or.
Why I Hate Windows.
For Mac OS X, you download XCode (for free) and you can build anything.
For Linux, you use some kind of yum or rpm installer for the developer
tools, and you can build anything.
For Windows...
Pre-built binaries. 😂
And a hope that the version numbers all match up properly. 😖
In many cases, you can use
&lt;a class="reference external" href="http://www.mingw.org/"&gt;http://www.mingw.org&lt;/a&gt; or
&lt;a class="reference external" href="http://www.cygwin.com/"&gt;http://www.cygwin.com&lt;/a&gt;. Many projects can
work well with one or both of these compilers.
In some cases, however, you have for fork over $$$ for Microsoft Visual
Studio to download and build a Python module with a C extension.
The problem is a show-stopper for many n00bz. They are lead to believe
that pip does everything. And it does -- for Mac OS X and Linux; for
Windows, however, it does &lt;strong&gt;almost&lt;/strong&gt; everything. And it's not obvious to
the n00bz what the problem is when pip barfs because there's no suitable
C compiler.
&amp;quot;Replace that junk Windows PC&amp;quot; is not an appropriate response. Although
I often suggest it as the first solution when things won't install. 😡
Often &lt;a class="reference external" href="http://docs.continuum.io/anaconda/pkg-docs.html"&gt;Anaconda&lt;/a&gt; is
the solution. It includes MinGW and you can (for a fee) buy their bundle
of database drivers. The install for Anaconda is breathtakingly simple,
removing a great deal of the potential complexity of assembling a tech
stack for Python.
In other cases, we have to do some hand-holding to show how to find a
pre-built binary for Windows.&lt;/p&gt;
</content><category term="Technologies"></category><category term="macosx"></category><category term="#python"></category><category term="windows"></category><category term="linux"></category></entry><entry><title>Regular Expression "Hell"</title><link href="https://slott56.github.io/2015_05_26-regular_expression_hell.html" rel="alternate"></link><published>2015-05-26T08:00:00-04:00</published><updated>2015-05-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-05-26:/2015_05_26-regular_expression_hell.html</id><summary type="html">&lt;p&gt;Actual quote:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;they spend a lot of time maintaining regular
expressions. So, what are the alternatives to regular expression
hell?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Regular Expression Hell? It's a thing?&lt;/p&gt;
&lt;p&gt;I have several thoughts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Do you have metrics to support &amp;quot;a lot&amp;quot;?  I doubt it. It's very
difficult to tease RE maintenance away from …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Actual quote:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;they spend a lot of time maintaining regular
expressions. So, what are the alternatives to regular expression
hell?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Regular Expression Hell? It's a thing?&lt;/p&gt;
&lt;p&gt;I have several thoughts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Do you have metrics to support &amp;quot;a lot&amp;quot;?  I doubt it. It's very
difficult to tease RE maintenance away from code maintenance. Unless
you have RE specialists. Maybe there's an RE organization that
parallels the DBA org. DBA's write SQL. RE specialists write RE's. If
that was true, I could see that you would have metrics, and could
justify &amp;quot;a lot.&amp;quot; Otherwise, I suspect this is hyperbole. There's
frustration, true.&lt;/li&gt;
&lt;li&gt;REs are essential to programming.  It's hard to express how
fundamental they are. I would suggest that programmers who have
serious trouble with RE's have serious trouble with other aspects of
the craft, and might need remedial training in RE's (and other
things.) There's no shame in getting some training. There are a lot
of books that can help. Claiming that there's no time for training
(or no budget) is what created RE Hell to begin with. It's a trivial
problem to solve. You can spend 16 hours fumbling around, or stop
fumbling, spend 16 hours learning, and then press forward with a new
skill. The choice is yours.&lt;/li&gt;
&lt;li&gt;REs are simply a variant on conventional set theory. They're not hard
at all. Set theory is essential to programming, so are RE's. It's as
fundamental as boolean algebra. It's as fundamental as getting a loop
to terminate properly. It's as fundamental as copy-and-paste from the
terminal window.&lt;/li&gt;
&lt;li&gt;REs are universal because they solve a number of problems better than
any other technology. Emphasis on better than ANY alternative. RE's
are baked into the syntax of languages like awk and perl. They're
universal because no one has ever built a sensible alternative. If
you want to see even more baked-in regular expression goodness, learn
&lt;a class="reference external" href="http://www.snobol4.org/"&gt;SNOBOL4&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;REs are essential. Failure to master REs suggests failure to learn the
fundamentals.&lt;/p&gt;
&lt;p&gt;RE Hell is like Boolean Algebra Hell. It's like Set Theory Hell. It's
like Math Library Hell. It's like Uninitialized Variables Hell. These
are things you create through a kind of intentional ignorance.&lt;/p&gt;
&lt;p&gt;I'm sorry to sound harsh. But I'm unsympathetic.
The initial regex in question?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
r&amp;quot;[\( \
\$ \
\/ \|]&amp;quot;
&lt;/pre&gt;
&lt;p&gt;This
indicates a certain lack of familiarity with the basics. It looks
like it started as &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r&amp;quot;\(|\$|/&amp;quot;&lt;/span&gt;&lt;/tt&gt; and someone put in spaces (perhaps
they intended to use the verbose option when compiling it) and/or
wrapped the whole in &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt;'s. After trying the &lt;tt class="docutils literal"&gt;[]&lt;/tt&gt;'s, it appeared to work
and they called it done.
The email asked (sort of trivially) if it was true that the last pipe
was extraneous. Um. Yes. But.&lt;/p&gt;
&lt;div class="section" id="follow-up"&gt;
&lt;h2&gt;Follow-up&lt;/h2&gt;
&lt;p&gt;The hard parts are (1) trying to figure out what the question really
is. Why did they remove just the last pipe character? What were they
trying to do? What's the goal? Then (2) trying to figure out how much
tutorial background is required to successfully answer whatever
question is really being asked. A response of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r&amp;quot;[\(\$/]&amp;quot;&lt;/span&gt;&lt;/tt&gt; seems like
it might not actually be &lt;strong&gt;helpful&lt;/strong&gt;. Acting a magic oracle that
emits mysterious answers would only perpetuate the reigning state of
confusion.&lt;/p&gt;
&lt;p&gt;The follow-up requests for clarification resulted in (1) an
exhaustive list of every book that seems to mention regex, (2) a user
story that was far higher level than the context of regex questions.
It's difficult to help when there's no focus. Every Book. Generalized
&amp;quot;matching&amp;quot; of &amp;quot;data.&amp;quot;&lt;/p&gt;
&lt;p&gt;The Python connection? Can't completely parse that out, either, It
appears that this is part of an ETL pipeline. I can't be sure because
the initial user story made so little sense.&lt;/p&gt;
&lt;p&gt;Attempts to discuss the supplied user story about &amp;quot;matching&amp;quot; and
&amp;quot;data&amp;quot; -- predictably -- lead nowhere. It was stopped at &amp;quot;Some of the
problems ... aren’t just typos and misspellings.&amp;quot; Wait. What? What
are they then? If they're not misspellings, what are they? Fraud?
Hacking attempts? Denial of Service attacks by tying up time in some
matching algorithm?&lt;/p&gt;
&lt;p&gt;It's a misspelling. It can't be anything else. Ending the
conversation by claiming otherwise is a strange and self-defeating
approach to redesigning the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-follow-up"&gt;
&lt;h2&gt;More Follow-up&lt;/h2&gt;
&lt;p&gt;At this point, we seem to be narrowing the domain of discussion to&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;As time goes on, we have accumulated a lot of the 'standard
mistakes'. The question that need help w/ [&lt;em&gt;sic&lt;/em&gt;] is how to manage
all the code for these 'common mistakes'?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This question was provided
in lieu of an actual user story. Lack of a story might mean that
we're not interested in actually solving the data matching problem.
Instead we're narrowly focused on sprinkling Faerie Dust all over the
regexes to make them behave better.&lt;/p&gt;
&lt;p&gt;They don't want an &lt;em&gt;alternative&lt;/em&gt; to regexes because the problems
&amp;quot;aren't just typos and misspellings.&amp;quot; They want the regex without the
regex hell.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="regular expressions"></category></entry><entry><title>More Thoughts on the friction of DevOps</title><link href="https://slott56.github.io/2015_05_19-more_thoughts_on_the_friction_of_devops.html" rel="alternate"></link><published>2015-05-19T08:00:00-04:00</published><updated>2015-05-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-05-19:/2015_05_19-more_thoughts_on_the_friction_of_devops.html</id><summary type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://jeffknupp.com/blog/2014/04/15/how-devops-is-killing-the-developer"&gt;How 'DevOps' is Killing the Developer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My pull-out quote:&lt;/p&gt;
&lt;blockquote&gt;
This is why we see so many developers that can't pass FizzBuzz: they
never really had to write any code.&lt;/blockquote&gt;
&lt;p&gt;I agree: &lt;a class="reference external" href="https://slott56.github.io/2015_03_10-it_appears_that_devops_may_be_more_symptom_than_solution.html"&gt;It appears that DevOps may be more symptom than solution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have one tiny objection to any …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://jeffknupp.com/blog/2014/04/15/how-devops-is-killing-the-developer"&gt;How 'DevOps' is Killing the Developer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My pull-out quote:&lt;/p&gt;
&lt;blockquote&gt;
This is why we see so many developers that can't pass FizzBuzz: they
never really had to write any code.&lt;/blockquote&gt;
&lt;p&gt;I agree: &lt;a class="reference external" href="https://slott56.github.io/2015_03_10-it_appears_that_devops_may_be_more_symptom_than_solution.html"&gt;It appears that DevOps may be more symptom than solution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have one tiny objection to any otherwise excellent series of points:
I don't like the totem pole analogy.&lt;/p&gt;
&lt;p&gt;I prefer a supply-chain:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Release Engineers respond to user needs.&lt;/li&gt;
&lt;li&gt;Quality Engineers respond to the Release Engineers' needs for
assurance that something is fit for use.&lt;/li&gt;
&lt;li&gt;Developers respond to Release Engineers by providing software.&lt;/li&gt;
&lt;li&gt;Similarly, procurement folks may purchase or lease or download and
pay royalties for software.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think of it like this:&lt;/p&gt;
&lt;p&gt;Developer ⇒ QE ⇒ RE ⇒ Users&lt;/p&gt;
&lt;p&gt;No top-to-bottom. More a sequence of more-or-less peers.&lt;/p&gt;
&lt;p&gt;I still agree with the central tenet: a developer is able to march the
software from concept to user. We don't really expect QE or RE to
create software. We might expect some skill sharing between QE and RE.&lt;/p&gt;
&lt;p&gt;Many years ago, I posted this: &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C1076854706/E20070218173250.html"&gt;IT’s Drive to Self-Destruction&lt;/a&gt;,
which is random and whiny but related to this point about DevOps. The
idea is that key developers create competitive advantage. Release
Engineers put it in the hands of users. Both are important. Without
creation there's no deployment. Without deployment, creators can be
diverted to deployment, so deployment can still go forward, but it
will be slower.&lt;/p&gt;
&lt;p&gt;The key point is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;If a developer is spending time with DevOps (and TechOps) trying to get stuff deployed, who's developing the Next Big Thing?&lt;/strong&gt;&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="DevOps"></category></entry><entry><title>Class Design Strategies -- analysis vs. synthesis</title><link href="https://slott56.github.io/2015_05_13-class_design_strategies_analysis_vs_synthesis.html" rel="alternate"></link><published>2015-05-13T07:45:00-04:00</published><updated>2015-05-13T07:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-05-13:/2015_05_13-class_design_strategies_analysis_vs_synthesis.html</id><summary type="html">&lt;p&gt;The conventional wisdom on class design is to model real-world things.
This is the Domain-Driven Design Approach. It's what we used to teach as
Rumbaugh's OMT (prior to the Three Amigos creating UML.)&lt;/p&gt;
&lt;p&gt;The idea is simple: Look at the real world objects. Describe them.
Classes will have attributes and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The conventional wisdom on class design is to model real-world things.
This is the Domain-Driven Design Approach. It's what we used to teach as
Rumbaugh's OMT (prior to the Three Amigos creating UML.)&lt;/p&gt;
&lt;p&gt;The idea is simple: Look at the real world objects. Describe them.
Classes will have attributes and behaviors. They will have
relationships. Rumbaugh was very careful about keeping object and class
separate. A class had associations, and object had links. The
association was the abstraction, the link was a concrete implementation.
A class offered an operation, an object provided a method as an
implementation.&lt;/p&gt;
&lt;p&gt;As powerful as this is, I'm not sure it's the final word.&lt;/p&gt;
&lt;p&gt;The only problem it has is that people often get confused by &amp;quot;real world
objects.&amp;quot; I've seen a number of places where folks completely fail to
distinguish Enterprise IT implementation choices from actual things that
reflect actual objects in the actual world.&lt;/p&gt;
&lt;p&gt;Users and Credentials, for example. Users are real human beings. You
find them in the hallways, standing around. They take up space in
conference rooms. Credentials are a peculiar security-focused way to
summarize a person as something public (username) and something private
(password.) You don't find a stack of credentials tying up a room at the
end of the hallway. Indeed, you can't physically stack credentials.&lt;/p&gt;
&lt;p&gt;While something a user knows is important, it isn't the entirety of a
User. The attributes and behaviors of credentials aren't a good model
for a User. But you still have this argument periodically when
developing a class model or a noSQL database document model.&lt;/p&gt;
&lt;p&gt;I'd like to emphasize that this is -- as far as I can tell -- the only
problem with domain driven modeling. Some people don't see the domain
very clearly because they tend to stick to a technology-driven world
view.&lt;/p&gt;
&lt;p&gt;However. That doesn't mean that drawing on the white board is the only
way to discover the domain.&lt;/p&gt;
&lt;div class="section" id="building-classes-from-functions"&gt;
&lt;h2&gt;Building Classes from Functions&lt;/h2&gt;
&lt;p&gt;As a heretical alternative, allow me to suggest an alternative to the
whiteboard.&lt;/p&gt;
&lt;p&gt;Once upon a time, the whiteboard was the only way to do object modeling.
The successor to the whiteboard (I use &lt;a class="reference external" href="http://argouml.tigris.org/"&gt;Argo
UML&lt;/a&gt; as well as Pocketworks
&lt;a class="reference external" href="http://yuml.me/diagram/scruffy/class/samples"&gt;yuml&lt;/a&gt;) is a
diagramming tool that -- ideally -- helps you understand the domain
before committing to the cost and complexity of writing code.&lt;/p&gt;
&lt;p&gt;Wait a second, though.&lt;/p&gt;
&lt;p&gt;The &amp;quot;cost and complexity of writing code&amp;quot;? Java programmers know what I
mean. If you don't have your classes understood, you should &lt;strong&gt;not&lt;/strong&gt;
start slapping code together.&lt;/p&gt;
&lt;p&gt;Python programmers have no idea what &amp;quot;cost and complexity of writing
code&amp;quot; means. They slap classes together faster than I can draw the damn
pictures on Argo.&lt;/p&gt;
&lt;p&gt;Indeed, the pictures can become a kind of burden. The picture shows
&amp;quot;x.X&amp;quot;, therefore, the module must include &amp;quot;x.X&amp;quot;. Even though there might
be a better way using classes in separate modules &amp;quot;a.Y&amp;quot; and &amp;quot;b.Z&amp;quot;. But
changing the cluster of pictures that comprises a fairly complete UML
diagram isn't easy.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;Clearly, this depends on how much you tried to show. If your diagrams
are really spare, refactoring is no problem. If you include parts of the
object model in the component diagram or activity diagram, you're in
trouble.&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;This leads to an alternative to the whiteboard. And the diagramming
tool.&lt;/p&gt;
&lt;p&gt;Code. [&lt;em&gt;Cue Orchestral Hit: Ta-daaa!&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;Yes. Code. [&lt;em&gt;Cue Orchestral Hit: Ta-ta-ta-daaa!&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;When you can slap together a spike solution in Python you have a
sensible alternative to the whiteboard.&lt;/p&gt;
&lt;p&gt;You can build some classes, write some demonstration code to show how
they work together. Don't like it? Start again from another base of
classes. You can do this as a &lt;a class="reference external" href="http://www.agilealliance.org/files/6214/0509/9357/ExperienceReport.2014.Zuill.pdf"&gt;Mob
Programming&lt;/a&gt;
exercise. It fits somewhere between grooming a story and finishing an
MVP release. Indeed, it may be a good way to do specific, concrete
grooming.&lt;/p&gt;
&lt;p&gt;In some cases, though, you can't build classes. You don't really know
(or can't agree) on what the real world things are.&lt;/p&gt;
&lt;p&gt;Rather than debate, shift the focus. Just write functions.&lt;/p&gt;
&lt;p&gt;In Python, this is easy, since functions are first-class inhabitants of
the programming model. In Java, this isn't easy at all. Functions aren't
proper things; they must be part of a class; and you can't agree on what
the classes are; the Java stalemate. [&lt;em&gt;Yes, Java 8 introduces
free-standing functions.&lt;/em&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-this-works-in-practice"&gt;
&lt;h2&gt;How This Works In Practice&lt;/h2&gt;
&lt;p&gt;In many cases, it makes sense to punt on the &amp;quot;big picture.&amp;quot; You're not
really &lt;strong&gt;sure&lt;/strong&gt; what you even have.  Yes, you know you have eight
individual CSV files that reflect events that happened somewhere in
cyberspace. (Let's just say they were the output from stored procedure
triggers; the only record of changes made to crucial data.)&lt;/p&gt;
&lt;p&gt;You can wring your hands over the eight-table join required to
reconstruct the pre-change and post-change views of the objects. You can
wring your hands over the way it's really three (or is it four?)
different navigation paths from I to II to IV to (V to VI to VII) union
I to II to IV to (V to VI to VII) union I to III to IV to oh my god I'm
so confused.&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;You can get the sample data.  You can read it using the CSV module.
DictReader can awkward. It can be fixed, however. If your column titles
are legal Python variables, you can use this to create a namespace
reader from a DictReader. This allows you to say &lt;tt class="docutils literal"&gt;row.ATTRIBUTE&lt;/tt&gt; instead
of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;row['ATTRIBUTE']&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def nsreader(dictreader):
    return (SimpleNamespace(**row) for row in dictreader)
&lt;/pre&gt;
&lt;p&gt;We can then turn to working out the various join algorithms on real
data. Each step builds objects based on types.SimpleNamespace.
You start with simplest possible join algorithm: load everything into
dictionaries based on their keys.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
I_map = { row.KEY: row for row in nsreader(table_I_dict_reader) }
II_map = { row.SOMETHING: row for row in nsreader(table_II_dict_reader)
}
&lt;/pre&gt;
&lt;p&gt;Once you have sample data in memory, you can figure out what the actual,
working relationships are. You can tinker with navigation paths through
the tangled mess of tables. You can explore that data. You can do data
profiling to find out how many misses there are.&lt;/p&gt;
&lt;p&gt;If the tables are smallish (10,000 rows each) it all fits in memory
nicely. No need for fancy database connections and no need to reason out
join algorithms that don't tie up too much memory. You're not writing a
database server. You're writing an application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="look-for-common-features"&gt;
&lt;h2&gt;Look For Common Features&lt;/h2&gt;
&lt;p&gt;The design issue for classes is locating common features: common
attributes or common methods. We often start down the road of common
attributes. Because. Well... it seems logical.&lt;/p&gt;
&lt;p&gt;Focus on attributes is a bias.&lt;/p&gt;
&lt;p&gt;Classification of objects isn't based mostly on attributes. It's not
50-50 objects vs. attributes.&lt;/p&gt;
&lt;p&gt;We tend to focus on attributes -- I think -- out of habit. Data
structures mean &amp;quot;common data&amp;quot;, right? Databases include tables of
commonly-structured data.&lt;/p&gt;
&lt;p&gt;But this isn't a requirement -- nor is it even important. It's just a
habit.&lt;/p&gt;
&lt;p&gt;We can conceive of a class hierarchy based around common behavior, too.
This may require a very flexible collection of attributes. On the other
hand, there's no &lt;em&gt;a priori&lt;/em&gt; reason not to define classes based on their
behavior.&lt;/p&gt;
&lt;p&gt;That's why the idea of building functions first doesn't seem too
far-fetched.&lt;/p&gt;
&lt;p&gt;First, we can build working functions.  We can have test cases and
everything.&lt;/p&gt;
&lt;p&gt;Then we can look for commonality. We can refactor into classes. We can
start with a
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Flyweight_pattern"&gt;Flyweight&lt;/a&gt; design
pattern. As common attribute emerge, we can refactor to store more state
in the class, and less state somewhere else. The API changes while we do
this.&lt;/p&gt;
&lt;p&gt;Then we examine it for the &amp;quot;is this a thing&amp;quot; criteria. Last, not first.
We may need to make a few more tweaks to reflect the thing we discovered
scattered around the functions. The thing may be a checklist or a recipe
or a procedure: something active instead of simply stateful.&lt;/p&gt;
&lt;p&gt;This tends to make RESTful web services a bit of a head scratcher. If we
have an active thing, what is the state that we can represent and
transfer? The state may be very small; the active agency may be quite
sophisticated. This shouldn't be too baffling, but it can be confusing
when the GET request response is either 200 or 403/409: OK or
Forbidden/Conflict. Or there are multiple shades of 200: 200 OK with a
body that indicates success, vs. 200 OK with a body that indicates
something more needs to be done, vs. warnings, vs. exceptions, vs. other
nuanced results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-tl-dr"&gt;
&lt;h2&gt;Summary -- tl;dr&lt;/h2&gt;
&lt;p&gt;I think there's a place for code-first design. Build something to
explore the space and learn about the problem domain. Refactor. Or
Delete and Start Again. In modern languages (i.e., Python) code is
cheap. Whiteboard design may not actually save effort.&lt;/p&gt;
&lt;p&gt;I think there's a place for building functions and refactoring them into
classes. I think the Java pre-8 &amp;quot;All Classes or Burn In Hell&amp;quot; approach
is misleading. Functional programming and languages like Python show
that functions should be a first-class part of programming.&lt;/p&gt;
&lt;p&gt;I think there's too much emphasis on stateful objects. The DDD warnings
about &amp;quot;anemic&amp;quot; classes seems to come from a habitual over-emphasis on
state and an under-emphsis on operations. I think that active classes
(as much as they push the REST envelope) might be a good thing.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="analysis"></category><category term="object-oriented design"></category></entry><entry><title>Software Subscription fee? Or just Vapor-ware?</title><link href="https://slott56.github.io/2015_04_28-software_subscription_fee_or_just_vapor_ware.html" rel="alternate"></link><published>2015-04-28T08:00:00-04:00</published><updated>2015-04-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-04-28:/2015_04_28-software_subscription_fee_or_just_vapor_ware.html</id><summary type="html">&lt;p&gt;From a sound engineer I know:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.avid.com/US/products/pro-tools-software#Features"&gt;https://www.avid.com/US/products/pro-tools-software#Features&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the new Pro Tools, it's now a subscription, for a mere $200 a
year to stay current. However, if you peruse the list of new
features, they all say &amp;quot;coming soon&amp;quot;. You pay a …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;From a sound engineer I know:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.avid.com/US/products/pro-tools-software#Features"&gt;https://www.avid.com/US/products/pro-tools-software#Features&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the new Pro Tools, it's now a subscription, for a mere $200 a
year to stay current. However, if you peruse the list of new
features, they all say &amp;quot;coming soon&amp;quot;. You pay a subscription fee
today for features that aren't even live yet. It's like I'm paying
for an open beta of PT12&lt;/p&gt;
&lt;p&gt;I feel this is becoming a more prevalent and systemic problem in
software development. Am I wrong? What is going on here?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is it right to ask a fee in advance for features to be developed in
the future? Is this a sustainable business model? Or will customers
eventually rebel and switch to another product with better licensing
terms and conditions?&lt;/p&gt;
&lt;p&gt;Further, this clearly isn't a &amp;quot;purchase&amp;quot; in any traditional sense.
Software has always lived in a weird zone where you don't really
purchase the software in any sense, you purchase a right to use the
software under limited terms and conditions spelled out in an end-user
agreement that you probably didn't read. Since you didn't actually
purchase it, you can't reverse engineer it or modify it.&lt;/p&gt;
&lt;p&gt;It's my understanding that Avid's Pro Tools is the gold standard in
the sound engineering industry. It seems unlikely that open source
startups will catch up to the power of Avid's product offerings and
undercut their pricing.&lt;/p&gt;
&lt;p&gt;But -- of course -- who could imagine that MySQL or PostgreSQL would
erode significant marketshare from Oracle or IBM?  Indeed, how much
marketshare has been consumed by SQLite?&lt;/p&gt;
&lt;p&gt;Software prices appear to have plummeted over the decades. In some
cases, the drop is real and the root cause seems to be open source
tools to build software. In other cases, the drop is a spreading of
costs via subscription services like this one.&lt;/p&gt;
&lt;p&gt;What if Avid doesn't deliver on their promises? You've forked over
$200 and didn't get the promised new features. What now?&lt;/p&gt;
</content><category term="Technologies"></category><category term="budgeting"></category><category term="TCO"></category></entry><entry><title>Proverbs and Bumper-Sticker Computer Science</title><link href="https://slott56.github.io/2015_04_21-proverbs_and_bumper_sticker_computer_science.html" rel="alternate"></link><published>2015-04-21T08:00:00-04:00</published><updated>2015-04-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-04-21:/2015_04_21-proverbs_and_bumper_sticker_computer_science.html</id><summary type="html">&lt;p&gt;There's much to learn. The idea of digesting knowledge down to a pithy
little proverb is interesting.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntJanus/programmers-proverbs"&gt;https://github.com/AntJanus/programmers-proverbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://futurice.com/blog/programmer-proverbs"&gt;http://futurice.com/blog/programmer-proverbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://quotes.cat-v.org/programming/bumper-sticker-computer-science"&gt;http://quotes.cat-v.org/programming/bumper-sticker-computer-science&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some of it's new to me. Some of it's timeless.&lt;/p&gt;
&lt;p&gt;Also, this
&lt;a class="reference external" href="http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf"&gt;http://www.bowdoin.edu/~ltoma …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's much to learn. The idea of digesting knowledge down to a pithy
little proverb is interesting.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntJanus/programmers-proverbs"&gt;https://github.com/AntJanus/programmers-proverbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://futurice.com/blog/programmer-proverbs"&gt;http://futurice.com/blog/programmer-proverbs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://quotes.cat-v.org/programming/bumper-sticker-computer-science"&gt;http://quotes.cat-v.org/programming/bumper-sticker-computer-science&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some of it's new to me. Some of it's timeless.&lt;/p&gt;
&lt;p&gt;Also, this
&lt;a class="reference external" href="http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf"&gt;http://www.bowdoin.edu/~ltoma/teaching/cs340/spring05/coursestuff/Bentley_BumperSticker.pdf&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="software design"></category><category term="knowledge capture"></category></entry><entry><title>Java vs Python</title><link href="https://slott56.github.io/2015_04_14-java_vs_python.html" rel="alternate"></link><published>2015-04-14T08:00:00-04:00</published><updated>2015-04-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-04-14:/2015_04_14-java_vs_python.html</id><summary type="html">&lt;p&gt;Seems silly at first.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blogs.perceptionsystem.com/infographic/java-vs-python-programming-language-productive"&gt;http://blogs.perceptionsystem.com/infographic/java-vs-python-programming-language-productive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's mostly true. It's also incomplete.&lt;/p&gt;
&lt;p&gt;For example, &amp;quot;no tuples in Java&amp;quot; ignores
&lt;a class="reference external" href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/package-summary.html"&gt;http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/package-summary.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems like the only interesting takeaway from the infographic is
that Java …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seems silly at first.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blogs.perceptionsystem.com/infographic/java-vs-python-programming-language-productive"&gt;http://blogs.perceptionsystem.com/infographic/java-vs-python-programming-language-productive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's mostly true. It's also incomplete.&lt;/p&gt;
&lt;p&gt;For example, &amp;quot;no tuples in Java&amp;quot; ignores
&lt;a class="reference external" href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/package-summary.html"&gt;http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/package-summary.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems like the only interesting takeaway from the infographic is
that Java syntax is wordy.&lt;/p&gt;
&lt;p&gt;One hesitates at a detail-by-detail comparison. Does it help to match
the 20 or so statements in Python against equivalents in Java?  Does
it help to match the byzantine complexity of Java
public/protected/private against something that doesn't exist in
Python? Does it even make sense to try and compare the complexity of
Java annotations with anything? What about Python meta-programming?&lt;/p&gt;
&lt;p&gt;The fact that we can easily overload Python operators?&lt;/p&gt;
&lt;p&gt;Perhaps it's only because I'm an expert in both languages that I
hesitate to try point-by-point comparison.&lt;/p&gt;
</content><category term="Technologies"></category><category term="java"></category><category term="#python"></category></entry><entry><title>This is awkward</title><link href="https://slott56.github.io/2015_03_31-this_is_awkward.html" rel="alternate"></link><published>2015-03-31T08:00:00-04:00</published><updated>2015-03-31T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-03-31:/2015_03_31-this_is_awkward.html</id><summary type="html">&lt;p&gt;Years ago -- many years ago -- I self-published three books on Python.
I also set up a Google Group, &lt;a class="reference external" href="https://groups.google.com/forum/?hl=en#!forum/building-skills-books"&gt;Building Skills
Books&lt;/a&gt;,
for a discussion area.
For a while, I check my download logs carefully to see how the book was
being received.
Then I became a tech nomad, and commenced …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Years ago -- many years ago -- I self-published three books on Python.
I also set up a Google Group, &lt;a class="reference external" href="https://groups.google.com/forum/?hl=en#!forum/building-skills-books"&gt;Building Skills
Books&lt;/a&gt;,
for a discussion area.
For a while, I check my download logs carefully to see how the book was
being received.
Then I became a tech nomad, and commenced traveling and working from
coffee shops and cellular network hotspots with my phone. The discussion
group went from a luxury to a complexity to a near impossibility.
Now that I have steady connectivity, it's really kind of embarrassingly
awkward that I ignored my readers like that.
For years.
I submit my apology to all of the folks who hoped for a more responsive
author.
What can I do about it?
Nothing to fix the past, obviously. For the moment, while working for
Packt, most of my writing goes to them.
However.
I hope to revisit these Building Skills Books in some depth in the
not-too-distant future. I see three stories on my &amp;quot;As a Reader, I
want...&amp;quot; storyboard.
1) Typos Fixed so the books are readable. Gather all the typos and
corrections from the discussions.
2) Clarifications so the books are more useful. Gather all the
questions, comments, suggestions. Fold those into the rewrites.
3) Python3. The beginner-level Intro to Programming book needs further
revision. (I tried to publish an iBook for the Python3 rewrite and am
not happy with the process or the results.) I think I'll revise it (yet
again) and post it as GitHub pages.
4) Python3. The Intro to Python book needs to be rewritten. It's a HUGE
project, but, I feel that it still has some value because it's
chock-full of exercises and attempts to be really complete. I think I'll
drop the reference material, however. Back in '02 -- when I started the
first draft -- that seemed like it was beneficial. Now it's
approximately worthless.
The OO Design book is a real hand-wringer. The approach of a strict
parallelism between Python and Java can be seen as a disservice to both
languages. On the other hand, I think it's good to focus on
lowest-common denominator features that are common to all OO languages.
I'm undecided on what to do here. I think I'd like to drop Java and add
some additional refactoring exercises.
I need to pick one of these two:
4a) Python Focus for OO Design.
4b) Lowest Common Denominator Focus for OO Design.
There's no precise schedule for this; it's mostly a kind of placeholder
and discussion jumping-off point. Maybe I should start a
proper &lt;a class="reference external" href="https://trello.com/"&gt;https://trello.com&lt;/a&gt; board for this.&lt;/p&gt;
</content><category term="Technologies"></category><category term="building skills books"></category></entry><entry><title>Configuration Files, Environment Variables, and Command-Line Options</title><link href="https://slott56.github.io/2015_03_24-configuration_files_environment_variables_and_command_line_options.html" rel="alternate"></link><published>2015-03-24T08:00:00-04:00</published><updated>2015-03-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-03-24:/2015_03_24-configuration_files_environment_variables_and_command_line_options.html</id><summary type="html">&lt;p&gt;We have three major tiers of configuration for applications. Within
each tier, we have sub-tiers, larding on yet more complexity. The
organization of the layers is a bit fungible, too. Making good choices
can be rather complex because there are so many variations on the
theme of &amp;quot;configuration&amp;quot;. The desktop …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have three major tiers of configuration for applications. Within
each tier, we have sub-tiers, larding on yet more complexity. The
organization of the layers is a bit fungible, too. Making good choices
can be rather complex because there are so many variations on the
theme of &amp;quot;configuration&amp;quot;. The desktop GUI app with a preferences file
has very different requirements from larger, more complex
applications.&lt;/p&gt;
&lt;p&gt;The most dynamic configuration options are the &lt;strong&gt;command-line
arguments&lt;/strong&gt;. Within this tier of configuration, we have two sub-tiers
of default values and user-provided overrides to those defaults. Where
do the defaults come from? They might be wired in, but more often they
come from environment variables or parameter files or both.&lt;/p&gt;
&lt;p&gt;There's some difference of opinion on which tier is next in the tiers
of dynamism. The two choices are configuration files and environment
variables. We can consider environment variables as easier to edit
than configuration files. In some cases, though, configuration files
are easier to change than environment variables. Environment variables
are typically bound to the process just once (like command-line
arguments), where configuration files can be read and re-read as
needed.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;environment variables&lt;/strong&gt; have three sub-tiers. System-level
environment variables tend to be fixed. The variables set by a
.profile or .bashrc tend to be specific to a logged-in user, and are
somewhat more flexible that system variables. The current set of
environment variables associated with the logged-in session can be
modified on the command line, and are as flexible as command-line
arguments.&lt;/p&gt;
&lt;p&gt;Note that we can do this in Linux:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PYTHONPATH=/path/to/project python3 -m some_app -opts
&lt;/pre&gt;
&lt;p&gt;This will set an environment variable as part of running a command.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;configuration files&lt;/strong&gt; may also have tiers. We might have a
global configuration file in /etc/our-app. We might look for a
~/.our-app-rc as a user's generic configuration. We can also look for
our-app.config in the current working directory as the final set of
overrides to be used for the current invocation.&lt;/p&gt;
&lt;p&gt;Some applications can be restarted, leading to re-reading the
configuration files. We can change the configuration more easily than
we can bind in new command-line arguments or environment variables.&lt;/p&gt;
&lt;div class="section" id="representation-issues"&gt;
&lt;h2&gt;Representation Issues&lt;/h2&gt;
&lt;p&gt;When we think about configuration files, we also have to consider the
syntax we want to use to represent configurable parameters. We have
five common choices.&lt;/p&gt;
&lt;p&gt;Some folks are hopelessly in love with Windows-style .ini files. The
configparser module will parse these. I call it hopelessly in love
because the syntax is rather quite limited. Look at the logging.config
module to see how complex the .ini file format is for non-trivial
cases.&lt;/p&gt;
&lt;p&gt;Some folks like Java-style properties files. These have the benefit of
being really easy to parse in Python. Indeed, scanning a properties
file is great exercise in functional-style Python programming.&lt;/p&gt;
&lt;p&gt;I'm not completely sold on these, either, because they don't really
handle the non-trivial cases well.&lt;/p&gt;
&lt;p&gt;Using JSON or YAML for properties has some real advantages. There's a
lot of sophistication available in these two notations. While JSON has
first-class support, YAML requires an add-on module.&lt;/p&gt;
&lt;p&gt;We can also use Python as the language for configuration. For good
examples of this, look at the &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.7/topics/settings/"&gt;Django project
settings&lt;/a&gt;
file. Using Python has numerous advantages. The only possible
disadvantage is the time wasted arguing with folks who call it a
&amp;quot;security vulnerability.&amp;quot;&lt;/p&gt;
&lt;p&gt;Using Python as the configuration language is only considered a
vulnerability by people who fail to realize that the Python source
itself can be hacked. Why waste time injecting a bug into a
configuration file? Why not just hack the source?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-current-fave"&gt;
&lt;h2&gt;My Current Fave&lt;/h2&gt;
&lt;p&gt;My current favorite way to handle configuration is by defining some
kind of configuration class and using the class object throughout the
application. Because of Python's import processing, a single instance
of the class definition is easy to guarantee.&lt;/p&gt;
&lt;p&gt;We might have a module that defines a hierarchy of configuration
classes, each of which layers in additional details.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Defaults:
   mongo_uri = &amp;quot;mongodb://localhost:27017&amp;quot;
   some_param = &amp;quot;xyz&amp;quot;

class Dev(Defaults):
   mongo_uri = &amp;quot;mongodb://sandbox:27017&amp;quot;

class QA(Defaults):
   mongo_uri = &amp;quot;mongodb://username:password&amp;#64;qa02:27017/?authMechanism=PLAIN&amp;amp;authSource=$external&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Yes. The password is visible. If we want to mess around with higher
levels of secrecy in the configuration files, we can use PyCrypto and
a key generator to use an encrypted password that's injected into the
URI. That's a subject for another post. The folks to can edit the
configuration files often know the passwords. Who are we trying to
hide things from?&lt;/p&gt;
&lt;p&gt;How do we choose the active configuration to use from among the
available choices in this file? We have several ways.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add a line to the configuration module. For example, Config=QA
will name the selected environment. We have to change the
configuration file as our code marches through environments from
development to production. We can use from configuration import
Config to get the proper configuration in all other modules of the
application.&lt;/li&gt;
&lt;li&gt;Rely on the environment variable to specify which configuration
use. In enterprise contexts, an environment variable is often
available.We can import os, and use
Config=globals()[os.environ['OURAPP_ENVIRONMENT']] to pick a
configuration based on an environment variable.&lt;/li&gt;
&lt;li&gt;In some places, we can rely on the host name itself to pick a
configuration. We can use os.uname()[1] to get the name of the
server. We can add a mapping from server name to configuration,
and use this: Config=host_map(os.uname()[1],Defaults).&lt;/li&gt;
&lt;li&gt;Use a command-line options like &amp;quot;--env=QA&amp;quot;. This can a little more
complex than the above techniques, but it seems to work out nicely
in the long run.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="command-line-args-to-select-a-specific-configuration"&gt;
&lt;h2&gt;Command-line args to select a specific configuration&lt;/h2&gt;
&lt;p&gt;To select a configuration using command-line arguments, we must
decompose configuration into two parts. The configuration
alternatives shown above are placed in a config_params.py module. The
config.py module that's used directly by the application will import
the config_params.py module, parse the command-line options, and
finally pick a configuration. This module can create the required
module global, Config. Since it will only execute once, we can import
it freely.&lt;/p&gt;
&lt;p&gt;The config module will use argparse to create an object named options
with the command-line options. We can then do this little dance:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import argparse
import sys
import config_params

parser= argparse.ArgumentParser()
parser.add_argument(&amp;quot;--env&amp;quot;, default=&amp;quot;DEV&amp;quot;)
options= parser.parse_args()

Config = getattr(config_params, options.env)
Config.options= options
&lt;/pre&gt;
&lt;p&gt;This seems to work out reasonably well. We can tweak the
config_params.py flexibly. We can pick the configuration with a
simple command-line option.&lt;/p&gt;
&lt;p&gt;If we want to elegantly dump the configuration, we have a bit of a
struggle. Each class in the hierarchy introduces names: it's a bit of
work to walk down the &lt;tt class="docutils literal"&gt;__class__.__mro__&lt;/tt&gt; lattice to discover all of
the available names and values that are inherited and overridden from
the parents.&lt;/p&gt;
&lt;p&gt;We could do something like this to flatten out the resulting values:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Base = getattr(config_params, options.env)
class Config(Base):
    def __repr__(self):
       names= {}
       for cls in reversed(self.__class__.__mro__):
           cls_names= dict((nm, (cls.__name__, val))
               for nm,val in cls.__dict__.items()
                   if nm[0] != &amp;quot;_&amp;quot;)
           names.update( cls_names )
       return &amp;quot;, &amp;quot;.join( &amp;quot;{0}.{1}={2}&amp;quot;.format(class_val[0], nm, class_val[1])
           for nm,class_val in names.items() )
&lt;/pre&gt;
&lt;p&gt;It's not clear this is required. But it's kind of cool for debugging.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="configuration management"></category></entry><entry><title>Building Skills in Object-Oriented Design</title><link href="https://slott56.github.io/2015_03_18-building_skills_in_object_oriented_design.html" rel="alternate"></link><published>2015-03-18T07:25:00-04:00</published><updated>2015-03-18T07:25:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-03-18:/2015_03_18-building_skills_in_object_oriented_design.html</id><summary type="html">&lt;p&gt;New Kindle Edition of &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in Object-Oriented
Design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems to work okay in my Kindle Readers.&lt;/p&gt;
&lt;p&gt;I'm not sure it's really formatted &lt;strong&gt;completely&lt;/strong&gt; appropriately. I'm
not a book designer. But before I fuss around with font sizes, I think
I need to spend some time on several more …&lt;/p&gt;</summary><content type="html">&lt;p&gt;New Kindle Edition of &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in Object-Oriented
Design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems to work okay in my Kindle Readers.&lt;/p&gt;
&lt;p&gt;I'm not sure it's really formatted &lt;strong&gt;completely&lt;/strong&gt; appropriately. I'm
not a book designer. But before I fuss around with font sizes, I think
I need to spend some time on several more valuable aspects of a
rewrite:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Updating the text and revising for Python 3.&lt;/li&gt;
&lt;li&gt;Removing the (complex) parallels between Python and Java. The Java edition can be forked as a separate text.&lt;/li&gt;
&lt;li&gt;Reducing some of the up-front sermonizing and other non-coding nonsense.&lt;/li&gt;
&lt;li&gt;Moving the unit testing and other &amp;quot;fit-and-finish&amp;quot; considerations forward.&lt;/li&gt;
&lt;li&gt;Looking more closely at the Sphinx epub features and how those work
(or don't work) with the KindleGen application which transforms .html
to .mobi. This is the last step of technical production, once the
content is right.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have two other titles to finish for Packt publishing.&lt;/p&gt;
&lt;p&gt;Maybe I should pitch this to Packt, since there seems to be interest
in the topic? A skilled technical editor from Packt and some
reviewers are likely to improve the quality.&lt;/p&gt;
&lt;p&gt;The question, though, will be how to fit this approach to programming
into their product offerings? Since I have two other titles to finish
for them, perhaps I'll just set this aside for now.&lt;/p&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="building skills books"></category><category term="object-oriented design"></category></entry><entry><title>It appears that DevOps may be more symptom than solution</title><link href="https://slott56.github.io/2015_03_10-it_appears_that_devops_may_be_more_symptom_than_solution.html" rel="alternate"></link><published>2015-03-10T08:00:00-04:00</published><updated>2015-03-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-03-10:/2015_03_10-it_appears_that_devops_may_be_more_symptom_than_solution.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It appears that DevOps may be a symptom of a bigger problem. The
bigger problem? Java.&lt;/div&gt;
&lt;div class="line"&gt;Java development -- with a giant framework like Spring -- seems to
accrete layers and layers of stuff. And more stuff.  And bonus stuff
on top the the excess stuff.&lt;/div&gt;
&lt;div class="line"&gt;The in-house framework that's used on …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It appears that DevOps may be a symptom of a bigger problem. The
bigger problem? Java.&lt;/div&gt;
&lt;div class="line"&gt;Java development -- with a giant framework like Spring -- seems to
accrete layers and layers of stuff. And more stuff.  And bonus stuff
on top the the excess stuff.&lt;/div&gt;
&lt;div class="line"&gt;The in-house framework that's used on top of the Spring Framework
that's used to isolate us from WebLogic that used to isolate us from
REST seems -- well -- heavy. Very heavy.&lt;/div&gt;
&lt;div class="line"&gt;And the code cannot be built without a heavy investment in learning
Maven. It can't be practically deployed without Hudson, Nexus, and
Subversion. And Sonar and Hamcrest and mountains of stuff that's
implicitly brought in by the mountain of stuff already listed in the
Maven pom.xml files.&lt;/div&gt;
&lt;div class="line"&gt;The deployment from Nexus artifacts to a WebLogic server also involves
uDeploy. Because the whole thing is AWS-based, this kind of overhead
seems unavoidable.&lt;/div&gt;
&lt;div class="line"&gt;Bunches of web-based tools to manage the bunch of server-based tools
to build and deploy.&lt;/div&gt;
&lt;div class="line"&gt;Let me emphasize this: bunches of tools.&lt;/div&gt;
&lt;div class="line"&gt;Architecturally, we're focused on building &amp;quot;micro services&amp;quot;.
Consequently, an API takes about a sprint to build. Sometimes a single
developer can do the whole CRUD spectrum in a sprint for something
relatively simple. That's five API's by our count: GET one, GET many,
POST, PUT and DELETE: each operation counts as a separate API.&lt;/div&gt;
&lt;div class="line"&gt;Then we're into CI/CD overheads. It's a full sprint of flailing around
with deployment onto a dev servers to get something testable and get
back test results so we can fix problems. A great deal of time spent
making sure that all the right versions of the right artifacts are
properly linked. Doesn't work? Oh. Stuff was updated: fix your pom's.&lt;/div&gt;
&lt;div class="line"&gt;It's another sprint after that flailing around with the CI/CD folks to
get onto official QA servers. Not building in Husdon? Wrong Nexus
setup in Maven: go back to square one. Not deployable to WebLogic?
Spring Beans that aren't relevant when doing unit testing are not
being built by WebLogic on the QA server because the .XML
configuration or the annotations or something is wrong.&lt;/div&gt;
&lt;div class="line"&gt;What's important here is that ⅔ of the duration is related to the
simple complexity of Java.&lt;/div&gt;
&lt;div class="line"&gt;The DevOps folks are trying really hard to mitigate that complexity.
And to an extent, they're sort of successful.&lt;/div&gt;
&lt;div class="line"&gt;But. Let's take a step back.&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have hellish complexity in our gigantic, layered software toolset.&lt;/li&gt;
&lt;li&gt;We've thrown complicated tools at the hellish complexity, creating --
well -- &lt;strong&gt;more&lt;/strong&gt; complexity.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This doesn't seem right. More complexity to solve the problems of
complexity just don't seem right.&lt;/div&gt;
&lt;div class="line"&gt;My summary is this: the fact that DevOps even exists seems like an
indictment of the awful complexity of the toolset. It feels like
DevOps is a symptom and Java is the problem.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="java"></category><category term="DevOps"></category><category term="spring framework"></category></entry><entry><title>Let's all Build a Hat Rack</title><link href="https://slott56.github.io/2015_03_03-lets_all_build_a_hat_rack.html" rel="alternate"></link><published>2015-03-03T08:00:00-05:00</published><updated>2015-03-03T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-03-03:/2015_03_03-lets_all_build_a_hat_rack.html</id><summary type="html">&lt;p&gt;Wound up here: &amp;quot;&lt;a class="reference external" href="http://hawthornlandings.org/2015/02/13/a-place-to-hang-your-hat/"&gt;A Place to Hang Your
Hat&lt;/a&gt;&amp;quot;
and the #LABHR hash tag.&lt;/p&gt;
&lt;p&gt;H/T to this post: &amp;quot;&lt;a class="reference external" href="http://holdenweb.blogspot.com/2015/02/building-hat-rack.html"&gt;Building a Hat
Rack&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a huge idea. I follow some folks from the &lt;a class="reference external" href="http://www.codeforamerica.org/brigade/"&gt;Code For
America&lt;/a&gt; group. The &lt;a class="reference external" href="https://plus.google.com/114627404839878604775"&gt;+Mark
Headd&lt;/a&gt;  Twitter feed
(&amp;#64;mheadd) is particularly helpful for understanding this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wound up here: &amp;quot;&lt;a class="reference external" href="http://hawthornlandings.org/2015/02/13/a-place-to-hang-your-hat/"&gt;A Place to Hang Your
Hat&lt;/a&gt;&amp;quot;
and the #LABHR hash tag.&lt;/p&gt;
&lt;p&gt;H/T to this post: &amp;quot;&lt;a class="reference external" href="http://holdenweb.blogspot.com/2015/02/building-hat-rack.html"&gt;Building a Hat
Rack&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a huge idea. I follow some folks from the &lt;a class="reference external" href="http://www.codeforamerica.org/brigade/"&gt;Code For
America&lt;/a&gt; group. The &lt;a class="reference external" href="https://plus.google.com/114627404839878604775"&gt;+Mark
Headd&lt;/a&gt;  Twitter feed
(&amp;#64;mheadd) is particularly helpful for understanding this movement. Also,
follow &lt;a class="reference external" href="https://plus.google.com/109275156453163840729"&gt;+Kevin
Curry&lt;/a&gt; (&amp;#64;kmcurry) for
more insights.&lt;/p&gt;
&lt;p&gt;Open Source contributions are often anonymous and the rewards are
intangible. A little bit of tangibility is a huge thing.&lt;/p&gt;
&lt;p&gt;My (old) open source Python books have a &amp;quot;donate&amp;quot; button. Once in a
while I'll collect the comments that come in on the donate button.
They're amazingly positive and encouraging. But also private. Since I
have a paying gig writing about Python, I don't need any more
encouragement than I already have. (Indeed, I probably need less
encouragement.)&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;There are unsung heroes at every hackathon and tech meetup who could
benefit from some recognition. Perhaps they're looking for a new job or
a transition in their existing job. Perhaps they're looking to break
through one of the obscure social barriers that seem to appear in a
community where everyone looks alike.&lt;/p&gt;
&lt;p&gt;And. There's a tiny social plus to being the Recognizer in Chief.
There's a lot to be said in praise of the talent spotters and friction
eliminators.&lt;/p&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="#codeforamerica"></category><category term="#LABHR"></category></entry><entry><title>Functional Python Programming</title><link href="https://slott56.github.io/2015_02_24-functional_python_programming.html" rel="alternate"></link><published>2015-02-24T08:00:00-05:00</published><updated>2015-02-24T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-02-24:/2015_02_24-functional_python_programming.html</id><summary type="html">&lt;p&gt;New from Packt Publishing: &lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming"&gt;Functional Python
Programming&lt;/a&gt;.
Also here on
&lt;a class="reference external" href="http://www.amazon.com/Functional-Python-Programming-Steven-Lott/Functional+Python+Programming"&gt;Amazon&lt;/a&gt;.
The fun part is covering generator functions, iterators, and
higher-order functions in some real depth. There's a lot of powerful
programming techniques available.
What's challenging is reconciling Python's approach to FP with languages
that are &lt;strong&gt;purely&lt;/strong&gt; functional like Haskell …&lt;/p&gt;</summary><content type="html">&lt;p&gt;New from Packt Publishing: &lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming"&gt;Functional Python
Programming&lt;/a&gt;.
Also here on
&lt;a class="reference external" href="http://www.amazon.com/Functional-Python-Programming-Steven-Lott/Functional+Python+Programming"&gt;Amazon&lt;/a&gt;.
The fun part is covering generator functions, iterators, and
higher-order functions in some real depth. There's a lot of powerful
programming techniques available.
What's challenging is reconciling Python's approach to FP with languages
that are &lt;strong&gt;purely&lt;/strong&gt; functional like Haskell and OCaml and others. Years
ago, I saw some discussion in Stack Overflow that Python simply wasn't a
proper functional programming language because it lacked some features.
I'm vague on specifics (perhaps there weren't any) but the gaps between
Python and FP are narrow.
As far as I can tell, the single biggest features missing are non-strict
evaluation coupled with an optimizer that can rearrange expressions to
optimize performance. This feature pair also tends to also produce nice
tail-call optimization of recursions.
Languages which are totally non-strict (or fully lazy) need to introduce
&lt;em&gt;monads&lt;/em&gt; so that some ordering can be enforced in the cases where
ordering really does matter.
Since Python is strict (with only minor exceptions) monads aren't
needed. But we also sacrifice some optimization capability because we
can't reorder Python's strict expressions. I'm not sure this is a gap
which is so huge that we can indict Python as being non-functional or
not suitable for a functional approach. I think the lack of an
optimizing compiler is a little more than an interesting factoid.
An interesting problem that compiled functional languages have is
resolving data types properly. It's a problem that all statically-typed
languages share. In order to write a really generic algorithm, we either
have to rely on a huge type hierarchy or sophisticated type
pattern-matching rules. Python eschews this problem by making all code
generic with respect to type. If we've applied a function to an
inappropriate object, we find out through unit testing that we have
TypeError exceptions.
I think we can (and should) borrow functional programming design
patterns and reimplement them in Python. This is quite easy and doesn't
involve too much work or overhead. For example, the yield from statement
allows us to do manual tail-call optimization rather than trusting that
the compiler will recognize the code pattern.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="thanks-for-sharing-very-informative-top-a-href"&gt;
&lt;h2&gt;Thanks for sharing, very informative. Top &amp;lt;a href=...&lt;/h2&gt;
&lt;p&gt;Learn Hacking&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-11-22 12:20:44.141000-05:00&lt;/p&gt;
&lt;p&gt;Thanks for sharing, very informative. Top &lt;a class="reference external" href="https://youtu.be/LCc6kv4H0Dw"&gt;Programming
Languages&lt;/a&gt; in 2020.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>Yet Another Complaint about Python in General, SciPy in Particular</title><link href="https://slott56.github.io/2015_02_17-yet_another_complaint_about_python_in_general_scipy_in_particular.html" rel="alternate"></link><published>2015-02-17T07:59:00-05:00</published><updated>2015-02-17T07:59:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-02-17:/2015_02_17-yet_another_complaint_about_python_in_general_scipy_in_particular.html</id><summary type="html">&lt;p&gt;The context is an ongoing question about optimization -- not my strong
suit -- and the SciPy algorithms for this. See
&lt;a class="reference external" href="https://slott56.github.io/2014_10_09-scipyoptimizationanneal_problems.html"&gt;Scipy.optimization.anneal
Problems&lt;/a&gt; for
some additional confusion over simple things.&lt;/p&gt;
&lt;p&gt;The new quote is this:&lt;/p&gt;
&lt;blockquote&gt;
However, firing up Python, NumPy, SciPy and figuring out which solver
to use is not …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The context is an ongoing question about optimization -- not my strong
suit -- and the SciPy algorithms for this. See
&lt;a class="reference external" href="https://slott56.github.io/2014_10_09-scipyoptimizationanneal_problems.html"&gt;Scipy.optimization.anneal
Problems&lt;/a&gt; for
some additional confusion over simple things.&lt;/p&gt;
&lt;p&gt;The new quote is this:&lt;/p&gt;
&lt;blockquote&gt;
However, firing up Python, NumPy, SciPy and figuring out which solver
to use is not convoluted? Keep on writing code and over engineering
as opposed to using the minimum tech in order to get the job. After
all, we are professionals.&lt;/blockquote&gt;
&lt;p&gt;It appears that using a packaged, proven optimizer is somehow
&amp;quot;convoluted.&amp;quot; Apparently, the
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt; product
never surfaced in a Google search. This seems to indicate that
perhaps (a) Google was never used or (b) the author didn't get to
page 4 of the search results, or (c) the author never tried another
search beyond the single-word &amp;quot;scipy&amp;quot;.&lt;/p&gt;
&lt;p&gt;I'm guessing they did not google &amp;quot;Python simulated annealing&amp;quot; -- the
actual subject -- because there are a fairly large number of existing
solutions to this. Lots and lots of lecture notes and tutorials. It
seems to be a rich area full of tutorials on both optimization and
Python. Reading a few of these would probably have addressed all of
the concerns.&lt;/p&gt;
&lt;p&gt;Anaconda, BTW, appears to be an amazing product. It seems to be the
gold standard for data science. (I know of organizations that have
in-house variations on this theme They bundle Python plus numerous
extra packages and a variety of installers for Mac OS X, Windows and
Linux.)&lt;/p&gt;
&lt;p&gt;The &amp;quot;Keep on writing code&amp;quot; complaint is peculiar. The optimization
examples in SciPy seem to involve less than a half-dozen lines of
code. Reading a CSV file can be digested down to four lines of code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import cvs
with open(&amp;quot;constrains.csv&amp;quot;, newline=&amp;quot;&amp;quot;) as source;
    rdr= DictReader(source)
    data = list(rdr)
&lt;/pre&gt;
&lt;p&gt;I can only guess that the threshold for &amp;quot;over engineering&amp;quot; is a
dozen lines of code. Fewer lines are acceptable; more are bad.
I don't know what &amp;quot;using the minimum tech in order to get the job&amp;quot;
means, but the context included an example spreadsheet that was
somehow a solution to an instance of a problem. I'm guessing from
this that &amp;quot;minimum tech&amp;quot; means &amp;quot;spreadsheet.&amp;quot;&lt;/p&gt;
&lt;p&gt;Read this: &lt;a class="reference external" href="http://decisionmechanics.com/when-spreadsheets-go-bad/"&gt;When spreadsheets go
bad&lt;/a&gt;.
There are a lot of war stories like this. (For information on the
original quote, read '&lt;a class="reference external" href="http://arstechnica.com/information-technology/2014/05/what-is-meant-by-now-you-have-two-problems/"&gt;What is meant by &amp;quot;Now you have two
problems&amp;quot;?&lt;/a&gt;')&lt;/p&gt;
&lt;p&gt;I regret not asking follow-up questions.&lt;/p&gt;
&lt;p&gt;The more complete story is this: rather than actually leverage
SciPy, the author of the quote appears to be fixated on rewriting
a classic Simulated Annealing textbook example into a spreadsheet
because reasons. One of which is that more modern algorithms in
SciPy aren't actually classic simulated annealing. The newer
algorithms may be better, but since they're not literally from the
textbook, this is a problem.&lt;/p&gt;
&lt;p&gt;And my suggestion -- just use SciPy -- was dismissed as
&amp;quot;convoluted&amp;quot;, &amp;quot;over-engineering&amp;quot;, and -- I guess --
unprofessional.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="Data Science"></category><category term="Anaconda"></category><category term="scipy"></category></entry><entry><title>The Most Diabolical Python Antipattern</title><link href="https://slott56.github.io/2015_02_11-the_most_diabolical_python_antipattern.html" rel="alternate"></link><published>2015-02-11T07:03:00-05:00</published><updated>2015-02-11T07:03:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-02-11:/2015_02_11-the_most_diabolical_python_antipattern.html</id><content type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="https://realpython.com/blog/python/the-most-diabolical-python-antipattern/"&gt;The Most Diabolical Python
Antipattern&lt;/a&gt;.
Now you've been told. You no longer have any excuses.
[Link fixed.]&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Idempotence, Hysteresis and Determinism</title><link href="https://slott56.github.io/2015_02_05-idempotence_hysteresis_and_determinism.html" rel="alternate"></link><published>2015-02-05T08:00:00-05:00</published><updated>2015-02-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-02-05:/2015_02_05-idempotence_hysteresis_and_determinism.html</id><summary type="html">&lt;p&gt;Three terms that seem to cause confusion: Idempotence, Hysteresis and
Deterministic. The subject came up during my webcast on the &lt;a class="reference external" href="http://www.oreilly.com/pub/e/3255"&gt;Five Kinds
of Python Functions&lt;/a&gt;. We can use
all three terms to describe a function. Two of them are relevant to
common design questions in software. The third is a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Three terms that seem to cause confusion: Idempotence, Hysteresis and
Deterministic. The subject came up during my webcast on the &lt;a class="reference external" href="http://www.oreilly.com/pub/e/3255"&gt;Five Kinds
of Python Functions&lt;/a&gt;. We can use
all three terms to describe a function. Two of them are relevant to
common design questions in software. The third is a higher-order
architectural consideration, and not really part of writing a function
definition in Python.
&lt;strong&gt;Idempotent&lt;/strong&gt; -- narrowly defined --  means that &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)) =
&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;). In computer science, the meaning is stretched so that we can
distinguish functions like random number generators from other
functions. A random number generator (Python's random.random(), for
example) is &lt;strong&gt;not&lt;/strong&gt; idempotent. It returns a different result each time
it's called. Many other functions are idempotent because they always
return the same result given the same arguments. The functions in
Python's os module are &lt;strong&gt;not&lt;/strong&gt; idempotent. The results change based on
external events.
&lt;strong&gt;Hysteresis&lt;/strong&gt; is memory of previous events. A random number generator
may have some hidden hysteresis so that it can return the next value in
it's random sequence. Note that os.random() is explicitly based on
/dev/random; it involves hysteresis where entropy is accumulated. A
function that has an internal memoization cache has hysteresis; it will
compute subsequent results more quickly after having memorized previous
results.
Most functions are simply idempotent and don't generally involve any
hysteresis. The result value is a  &lt;strong&gt;fixed&lt;/strong&gt; mapping from the argument
values.
A memoization cache preserves idempotence while adding hysteresis. The
functools.lru_cache decorator, for example, adds hysteresis to an
otherwise idempotent function. The result value still reflects a fixed
mapping.
A random number generator cannot have idempotence; it will leverage
hysteresis. We should think of a random number generator as an iterator
through a sequence of numbers. Given a seed, the sequence is entirely
fixed. Between any two numbers, it's very difficult to predict one from
the other without also knowing the hidden seed value.
&lt;strong&gt;Unrelated Concept&lt;/strong&gt;
**
&lt;strong&gt;We use idempotence and hysteresis to describe programming language
features. These features are entirely **deterministic&lt;/strong&gt;.  There's no
room for arbitrary, undefined, unpredictable behavior. Any
non-determinism needs to be very tightly boxed in by otherwise
deterministic programming constructs.
When writing a Python function, we assume that the language is
deterministic. Without this assumption, it's hard to conceive of what
the language would be like. What if statements were executed out of the
order we wrote them?
External events -- interrupts and the like -- are &lt;strong&gt;non-deterministic&lt;/strong&gt;.
They can happen at any time, with no relationship to what's going on
inside the software world. Inside the software world, however, we expect
that everything is deterministic. This means that a server must always
cope with non-deterministic request ordering. Once request processing
starts, however, we generally rely on essential non-deterministic
software to process the results perfectly consistently.
An important example of &lt;strong&gt;bounded non-determinism&lt;/strong&gt; is in Dijksta's
hypothetical programming language described in &lt;a class="reference external" href="http://www.amazon.com/Discipline-Programming-Edsger-W-Dijkstra/dp/013215871X"&gt;A Discipline of
Programming&lt;/a&gt;.
Here there is explicit non-determinism among the &amp;quot;elif&amp;quot; and &amp;quot;eldo&amp;quot;
clauses. The selection among true alternatives was specifically
non-deterministic. Indeed, an evil demon would always strive to select
the worst possible choice. There was no &amp;quot;first one that's true&amp;quot; kind of
silliness that would allow certain kind of logic errors to survive.
A multiprocessing application leverages the OS to keep all processes
separate. Each process can then operate deterministically. Any
non-determistic OS events are concealed from the process by the normal
OS libraries that generally queue up events into buffers.
A multithreaded application, however, has to use some kind of explicit
synchronization to handle the inherent non-determinism of thread
scheduling. Thread libraries make no guarantees about the exact sequence
of operations between threads; the execution is non-deterministic
between threads.
For real fun, read about the non-deterministic memory write orders. The
&lt;a class="reference external" href="https://software.intel.com/sites/products/documentation/doclib/iss/2013/inspector/lin/ug_docs/GUID-7202FDEF-0268-4966-A163-E9A08F734754.htm"&gt;Data
Race&lt;/a&gt;
article from Intel is illuminating. Google &amp;quot;non-deterministic memory
write order&amp;quot; for interesting reading on how processors have gotten --
perhaps -- too complex to be completely trustworthy.
This is different, also, from &amp;quot;arbitrary.&amp;quot; A word that describes how the
C language deals with constructs like a[i]= i++;. There are two
unrelated state changes that happen in this statement. The order of
those two things is best described as &amp;quot;arbitrary.&amp;quot; It's
&lt;strong&gt;deterministic&lt;/strong&gt;. But it's not well defined by the language. Depending
on the compiler and optimization settings, it will be entirely fixed. A
function that uses these constructs could be &lt;strong&gt;idempotent&lt;/strong&gt;. However,
the outcome can vary from compiler to compiler and optimization setting
to optimization setting. This kind of thing is devoutly to be avoided.
It's presence is a less-than-ideal language design choice; writing
software around a bad language feature is simply inexcusable.&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="#python"></category><category term="architecture"></category></entry><entry><title>Bottle vs. Flask vs. Django vs. a dozen others</title><link href="https://slott56.github.io/2015_01_29-bottle_vs_flask_vs_django_vs_a_dozen_others.html" rel="alternate"></link><published>2015-01-29T08:00:00-05:00</published><updated>2015-01-29T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-01-29:/2015_01_29-bottle_vs_flask_vs_django_vs_a_dozen_others.html</id><summary type="html">&lt;p&gt;There are times when a &amp;quot;micro framework&amp;quot; is actually useful. I wasn't
easily convinced that this could be true. Big framework or die trying.
Right?
Maybe not so right.
My primary example of a micro framework's value is a quick demo site to
show how some API's are going to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are times when a &amp;quot;micro framework&amp;quot; is actually useful. I wasn't
easily convinced that this could be true. Big framework or die trying.
Right?
Maybe not so right.
My primary example of a micro framework's value is a quick demo site to
show how some API's are going to be consumed.
I've been avoiding an &lt;a class="reference external" href="https://angularjs.org/"&gt;Angular.js&lt;/a&gt; app. We're
going to be supporting the user experience with a sophisticated
Angular.js app. But, as a back-end developer, I don't want to try to
write demo pages in the proper app framework. There's too many ways to
screw this up because I'll miss some key UX feature. Instead, I want to
write fake pages that show a considerably simplified version of
consuming an API. Sort of &amp;quot;suggestion&amp;quot; pages to clarify how the API's
fit together.
To make it even more complex than necessary, I'm not interested in
learning &lt;a class="reference external" href="https://angularjs.org/"&gt;Angular.js&lt;/a&gt;, and I'm not interested
in figuring out how it works. Running &lt;a class="reference external" href="http://nodejs.org/"&gt;node.js&lt;/a&gt;,
&lt;a class="reference external" href="http://bower.io/"&gt;bower&lt;/a&gt;, &lt;a class="reference external" href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;, etc.,
etc., is too much.
[And Angular.js is just one version of the front-end. There's also
mobile web, mobile native, tablet native, and
God-alone-only-knows-what-all-else, to name a few. Each unique.]
Several sprints back, I slapped together two fake forms
using &lt;a class="reference external" href="http://getbootstrap.com/"&gt;bootstrap&lt;/a&gt; for layout and hosted
them with &lt;a class="reference external" href="http://bottlepy.org/docs/dev/index.html"&gt;Bottle&lt;/a&gt;. The
navigation and framework look were simply copied from a screenshot and
provided as static graphics. Lame, but acceptable. All that matters is
getting the proper logo to show up.
The problem is that the sequence of API requests has grown since then.
The demo grew to where we need a session so that alternative sequences
will provide proper parameters to the APIs. We're beyond &amp;quot;Happy Path&amp;quot;
interactions and into &amp;quot;what-if&amp;quot; demonstrations to show how to get (or
avoid) a 404.
Bottle started with the significant advantage in fitting entirely into a
single .py module. The barrier to entry was very low. But then the forms
got awkwardly complex and &lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt; was
required. Now that sessions are required, the single module benefit
isn't as enticing as it once was.
I've been forced to upgrade from Bottle to
&lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;. This exercise points out that I
should have started with Flask in the first place. Few things are small
enough for Bottle. In some ways, the two are vaguely similar.
The &amp;#64;route() annotation being the biggest similarity. In other ways, of
course, the two are wildly different. There's only a single Flask, but
we can easily combine multiple Bottles into a larger, more comprehensive
site. I like the composability of Bottles, and wish Flask had this.
The Flask Blueprints might be a good stand-in for composing multiple
Bottles. Currently, though, each functional cluster of API's has their
own unique feature set. The bigger issue is updating the configuration
to track the API's through the testing and QA servers as they march
toward completion. Since they don't move in lock-step, the configuration
is complex and dynamic.
The transparent access to session information is a wonderful thing. I
built a quick-and-dirty session management in Bottle. It used
&lt;a class="reference external" href="https://docs.python.org/3.3/library/shelve.html"&gt;shelve&lt;/a&gt; and a
&amp;quot;simple&amp;quot; cookie. But it rapidly devolved to a lot of code to check for
the cookie and persist the cookie. Each superficially simple
Bottle &amp;#64;route() needed a bunch of additional functionality.
The whole point was to quickly show how the API's fit together. Not
reinvent Yet Another Web Framework Based On Jinja2 and Werkzeug.
&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; seems like too much for this
job. We don't have a model; and that's the exact point. Lacking a
database model doesn't completely break Django, but it makes a &lt;strong&gt;large&lt;/strong&gt;
number of Django features moot. We just have some forms that get filled
in for different kinds of events and transactions and searches and
stuff. And we need a simple way to manage stateful sessions.
Omitted from consideration are the other dozen-or-so frameworks listed
here: &lt;a class="reference external" href="http://codecondo.com/14-minimal-web-frameworks-for-python/"&gt;http://codecondo.com/14-minimal-web-frameworks-for-python/&lt;/a&gt;. This
is a great resource for comparing and contrasting the various choices.
Indeed, this was how I found Bottle to begin with.&lt;/p&gt;
</content><category term="Technologies"></category><category term="Django"></category><category term="flask"></category><category term="bottle"></category><category term="WebServices"></category></entry><entry><title>Chapter 12 Alternate Example - Normalization and Decorators</title><link href="https://slott56.github.io/2015_01_15-chapter_12_alternate_example_normalization_and_decorators.html" rel="alternate"></link><published>2015-01-15T08:00:00-05:00</published><updated>2015-01-15T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-01-15:/2015_01_15-chapter_12_alternate_example_normalization_and_decorators.html</id><summary type="html">&lt;p&gt;In the forthcoming &lt;em&gt;Functional Python Programming&lt;/em&gt;
(&lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming"&gt;https://www.packtpub.com/application-development/functional-python-programming&lt;/a&gt;) I
was pressured by one of the technical reviewers to create a better
example of composite function creation with decorators.&lt;/p&gt;
&lt;p&gt;This was a difficult request. First, of course, &amp;quot;better&amp;quot; is poorly
defined. More importantly, the example in the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the forthcoming &lt;em&gt;Functional Python Programming&lt;/em&gt;
(&lt;a class="reference external" href="https://www.packtpub.com/application-development/functional-python-programming"&gt;https://www.packtpub.com/application-development/functional-python-programming&lt;/a&gt;) I
was pressured by one of the technical reviewers to create a better
example of composite function creation with decorators.&lt;/p&gt;
&lt;p&gt;This was a difficult request. First, of course, &amp;quot;better&amp;quot; is poorly
defined. More importantly, the example in the book is extensive and
includes the edge-of-the-envelope &amp;quot;don't do this in real code&amp;quot; parts,
too. It's important to be thorough. Finally, it's real-world data
cleansing code. It's important to be pragmatic, but, it's kind of
boring. I really do beat it into submission showing simple decorators,
parameterized decorators, and crazy obscurely bad decorators.&lt;/p&gt;
&lt;p&gt;In this case, &amp;quot;better&amp;quot; might simply mean &amp;quot;less thorough.&amp;quot;&lt;/p&gt;
&lt;p&gt;But, perhaps &amp;quot;better&amp;quot; means &amp;quot;less focused on cleansing and more
focused on something else.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="on-decoration"&gt;
&lt;h2&gt;On Decoration&lt;/h2&gt;
&lt;p&gt;The essence of the chapter -- and the extensive example -- is that we
can use decorators as higher-order functions to build composite
functions.&lt;/p&gt;
&lt;p&gt;Here's an alternative example. This will combine z-score normalization
with another reduction function. Let's say we're doing calculations
that require us to normalize a set of data points before using them in
some reduction.&lt;/p&gt;
&lt;p&gt;Normalizing is the process of scaling a value by the mean and standard
deviation of the collection. Chapter 4 covers this in some detail.
Reductions like creating a sum are the subject of Chapter 6. I won't
rehash the details of these topics in this blog post.&lt;/p&gt;
&lt;p&gt;Here's another use of decorators to create a composite function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def normalize( mean, stdev ):
   normalize = lambda x: (x-mean)/stdev
   def concrete_decorator( function ):
       &amp;#64;wraps(function)
       def wrapped( data_arg ):
           z = map( normalize, data_arg )
           return function( z )
       return wrapped
   return concrete_decorator
&lt;/pre&gt;
&lt;p&gt;The essential feature of the &amp;#64;normalize(mean, stdev) decorator is to
apply the normalization to the vector of argument values to the
original function. We can use it like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; d = [ 2, 4, 4, 4, 5, 5, 7, 9 ]
&amp;gt;&amp;gt;&amp;gt; from Chapter_4.ch04_ex4 import mean, stdev
&amp;gt;&amp;gt;&amp;gt; m_d, s_d =  mean(d), stdev(d)
&amp;gt;&amp;gt;&amp;gt; &amp;#64;normalize(m_d, s_d)
&amp;gt;&amp;gt;&amp;gt; def norm_list(d):
...     return list(d)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; norm_list(d)
[-1.5, -0.5, -0.5, -0.5, 0.0, 0.0, 1.0, 2.0]
&lt;/pre&gt;
&lt;p&gt;W've create a norm_list() function which applies a normalization to
the given values. This function is a composite of normalization plus
list().&lt;/p&gt;
&lt;p&gt;Clearly, parts of this are deranged. We can't even define the
norm_list() function until we have mean and standard deviation
parameters for the samples. This doesn't seem appropriate.&lt;/p&gt;
&lt;p&gt;Here's a slightly more interesting composite function. This combines
normalization with sum().&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;#64;normalize(m_d, s_d)
&amp;gt;&amp;gt;&amp;gt; def norm_sum(d):
...     return sum(d)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; norm_sum(d)
0.0
&lt;/pre&gt;
&lt;p&gt;We've defined the normalized sum function and applied it to a vector
of values. The normalization has parameters applied. Those parameters
are relatively static compared with the parameters given to the
composite function.&lt;/p&gt;
&lt;p&gt;It's still a bit creepy because we can't define norm_sum() until we
have the mean and standard deviation.&lt;/p&gt;
&lt;p&gt;It's not clear to me that a more mathematical example is going to be
better. Indeed, the limitation on decorators seems to be this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The original (decorated) function can have lots of parameters;&lt;/li&gt;
&lt;li&gt;The functions being composed by the decorator must either have no
parameters, or have very static &amp;quot;configuration&amp;quot; parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we try to compose functions in a more general way -- all of the
functions have parameters -- we're in for problems. That's why the
data cleansing pipeline seems to be the ideal use for decorators.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="packtpub"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>The Python Challenge</title><link href="https://slott56.github.io/2015_01_08-the_python_challenge.html" rel="alternate"></link><published>2015-01-08T08:00:00-05:00</published><updated>2015-01-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-01-08:/2015_01_08-the_python_challenge.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.pythonchallenge.com/"&gt;http://www.pythonchallenge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Addicting. For folks (like me) who like this kind of thing. For
others, perhaps just dumb. Or infuriating.&lt;/p&gt;
&lt;p&gt;Years ago -- many, many years ago -- I vaguely remember a similar game
with a name like &amp;quot;insanity&amp;quot; or something like that. Now there's
&lt;a class="reference external" href="http://www.notpron.com/"&gt;http://www.notpron.com …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.pythonchallenge.com/"&gt;http://www.pythonchallenge.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Addicting. For folks (like me) who like this kind of thing. For
others, perhaps just dumb. Or infuriating.&lt;/p&gt;
&lt;p&gt;Years ago -- many, many years ago -- I vaguely remember a similar game
with a name like &amp;quot;insanity&amp;quot; or something like that. Now there's
&lt;a class="reference external" href="http://www.notpron.com/"&gt;http://www.notpron.com&lt;/a&gt; and
&lt;a class="reference external" href="http://www.weffriddles.com/"&gt;http://www.weffriddles.com&lt;/a&gt;. All of
these are &amp;quot;show the page source&amp;quot; HTML games. These games are a kind of
steganography: the page your browser renders isn't what you need to
see.&lt;/p&gt;
&lt;p&gt;What's important about the Python Challenge is that it's not
specifically about Python. Any programming language would do. Although
I suspect that folks who don't know Python will have a difficult time
with some of the puzzles. I found that having
&lt;a class="reference external" href="https://pypi.python.org/pypi/Pillow/"&gt;Pillow&lt;/a&gt; was essential for
problems 7 and 11. I'm sure there are packages as powerful as
PIL/Pillow for other languages.&lt;/p&gt;
&lt;p&gt;Also, one of the hints included dated Python 2.7 code. The rest of the
problems, however, seem to fit perfectly well with Python 3.4.&lt;/p&gt;
&lt;p&gt;I wasted a morning getting to challenge 11. It was a ton of fun.&lt;/p&gt;
&lt;p&gt;Challenge 12 was the first of the show-stoppers. The hint &amp;quot;evil1.jpg&amp;quot;
is beyond subtle. Let me add this hint: This is the first puzzle where
the pictures have digits. Perhaps there are related pictures.&lt;/p&gt;
&lt;p&gt;I spent hours studying and rearranging and filtering and enhancing
evil1.jpg before I finally broke down and searched for a hint. The
hint -- of course -- included the whole solution, so I had to skim the
code to figure out what I'd missed.&lt;/p&gt;
&lt;p&gt;Challenges 14, 15, and 16 require additional hints, also. 14, for
example, needs a reminder that the pixels need to be spiraled.
Challenge 15 barely requires minimal programming and a lot of Google
searching for famous people's birthdays. Challenge 16's hint is as
opaque as the picture. It involves restructuring the image. But. I had
to resort to reading more of the
&lt;a class="reference external" href="http://intelligentgeek.blogspot.com/2006/03/python-challenge-16-ahh-i-finally.html"&gt;http://intelligentgeek.blogspot.com/2006/03/python-challenge-16-ahh-i-finally.html&lt;/a&gt;
than for other problems.&lt;/p&gt;
&lt;p&gt;I have chapters to review. I really shouldn't be playing around with
silliness like this.&lt;/p&gt;
&lt;p&gt;In spite of that, let me just say, that reading about the
&amp;quot;Look-and-Say&amp;quot; sequence was a bunch of fun.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://oeis.org/A005150"&gt;http://oeis.org/A005150&lt;/a&gt;. Whatever you do, avoid reading
this: &lt;a class="reference external" href="http://archive.lib.msu.edu/crcmath/math/math/c/c671.htm"&gt;http://archive.lib.msu.edu/crcmath/math/math/c/c671.htm&lt;/a&gt;; it
won't help you with the Python Challenge at all. But it's interesting.
And a huge time-waster. This particular challenge was more like
&lt;a class="reference external" href="https://projecteuler.net/"&gt;Project Euler&lt;/a&gt; problems. [&lt;em&gt;Project
Euler is back up and running, BTW&lt;/em&gt;.]&lt;/p&gt;
&lt;p&gt;Here's my variation on the Conway sequence theme:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def say( digits ):

    def run_lengths(digits):
        d_iter= iter(digits)
        c, d0 = 1, next(d_iter)
        for d in d_iter:
            if d0 == d:
                c += 1
            else:
                yield str(c)+d0
                c, d0= 1, d
        yield str(c)+d0

    return &amp;quot;&amp;quot;.join(run_lengths(digits))
&lt;/pre&gt;
&lt;p&gt;I'm a fan of generator functions. A big fan.&lt;/p&gt;
&lt;p&gt;The interesting part is that we can do run-length encoding for the
look-and-say function relatively simply using the &amp;quot;buffered generator&amp;quot;
design pattern.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Seed the buffer with the head of the sequence, next(d_iter)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;For each item in the tail of the sequence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;If it matches, count.&lt;/li&gt;
&lt;li&gt;If it doesn't match, yield the interim reduction and reset the counter.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Yield the tail reduction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This design pattern seems to occur in a number of contexts outside
games and abstract math.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>eLearning eXtravaganza</title><link href="https://slott56.github.io/2015_01_01-elearning_extravaganza.html" rel="alternate"></link><published>2015-01-01T08:00:00-05:00</published><updated>2015-01-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-01-01:/2015_01_01-elearning_extravaganza.html</id><content type="html">&lt;p&gt;Visit Packt Publishing today for the $5 eBook Bonanza.&lt;/p&gt;
&lt;p&gt;What better way to celebrate the new year?&lt;/p&gt;
&lt;p&gt;Read. Learn. Grow.&lt;/p&gt;
&lt;p&gt;Find out more at &lt;a class="reference external" href="http://www.packtpub.com/packt5dollar#packt5dollar"&gt;http://www.packtpub.com/packt5dollar#packt5dollar&lt;/a&gt;&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://bit.ly/1zg0mpA"&gt;&lt;img alt="Packt $5 Promotional Picture" src="https://slott56.github.io/media/5-dollar-promo.jpg" style="width: 320px; height: 253px;" /&gt;&lt;/a&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="packtpub"></category></entry><entry><title>Intro to Python Tutorial</title><link href="https://slott56.github.io/2014_12_25-intro_to_python_tutorial.html" rel="alternate"></link><published>2014-12-25T08:00:00-05:00</published><updated>2014-12-25T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-12-25:/2014_12_25-intro_to_python_tutorial.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://sophieclayton.github.io/2015-01-15-uw/novice/python/index.html"&gt;http://sophieclayton.github.io/2015-01-15-uw/novice/python/index.html&lt;/a&gt;
A very nice tutorial. It's Focused on a specific problem. It covers the
solution technology in some depth. I think the focus and depth features
are important. It's often tempting to cover the technical features
without really &lt;em&gt;solving&lt;/em&gt; a problem.
In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://sophieclayton.github.io/2015-01-15-uw/novice/python/index.html"&gt;http://sophieclayton.github.io/2015-01-15-uw/novice/python/index.html&lt;/a&gt;
A very nice tutorial. It's Focused on a specific problem. It covers the
solution technology in some depth. I think the focus and depth features
are important. It's often tempting to cover the technical features
without really &lt;em&gt;solving&lt;/em&gt; a problem.
In the &amp;quot;real world,&amp;quot; we're often pressured to put the first MVP into
production and move on to the next problem. I put &amp;quot;real world&amp;quot; in &amp;quot;scare
quotes&amp;quot; because this approach is as dumb as a bag of hammers. Managers
who insist on installing or shipping the first Minimally Viable Product
are essentially purchasing technical debt instead of a solution.
I like the tutorial because it includes additional aspects like quality
assurance. It's called &amp;quot;Defensive Programming,&amp;quot; but it's really QA. I
like to call it &amp;quot;fit and finish.&amp;quot; The job's not over until there are
automated tests to demonstrate that its over.
The &lt;a class="reference external" href="http://software-carpentry.org/"&gt;Software Carpentry&lt;/a&gt; site as a
whole looks quite good. It seems to have numerous high-quality
tutorials.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Dev of the Week</title><link href="https://slott56.github.io/2014_12_20-dev_of_the_week.html" rel="alternate"></link><published>2014-12-20T08:38:00-05:00</published><updated>2014-12-20T08:38:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-12-20:/2014_12_20-dev_of_the_week.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://java.dzone.com/articles/dev-week-steven-lott"&gt;http://java.dzone.com/articles/dev-week-steven-lott&lt;/a&gt;
Yes. Everyone is famous for 15 minutes.
And. &amp;quot;On the Web, everyone will be famous to fifteen people.&amp;quot;&lt;/p&gt;
</content><category term="Technologies"></category><category term="dzone"></category></entry><entry><title>Making Learning Accessible</title><link href="https://slott56.github.io/2014_12_20-making_learning_accessible.html" rel="alternate"></link><published>2014-12-20T08:08:00-05:00</published><updated>2014-12-20T08:08:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-12-20:/2014_12_20-making_learning_accessible.html</id><summary type="html">&lt;p&gt;Visit Packt Publishing today for the $5 eBook Bonanza.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.packtpub.com/"&gt;https://www.packtpub.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;eBooks and videos at a discount through something like the 6th of
January.&lt;/p&gt;
&lt;p&gt;We autodidacts are rejoicing.&lt;/p&gt;
&lt;p&gt;Specifically, I can look at some of the Scala and Hadoop titles. I'm
working with folks who have Hadoop but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Visit Packt Publishing today for the $5 eBook Bonanza.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.packtpub.com/"&gt;https://www.packtpub.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;eBooks and videos at a discount through something like the 6th of
January.&lt;/p&gt;
&lt;p&gt;We autodidacts are rejoicing.&lt;/p&gt;
&lt;p&gt;Specifically, I can look at some of the Scala and Hadoop titles. I'm
working with folks who have Hadoop but I've heard rumors that they're
leaning toward Scala, also. Does that mean Apache Spark? Or does it mean
Scalding?&lt;/p&gt;
&lt;p&gt;I'm biased toward using Python with Hadoop; but I appear to be in the
minority on this. Time to do some additional learning.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://bit.ly/1zg0mpA"&gt;&lt;img alt="Packt $5 Promotional Picture" src="https://slott56.github.io/media/5-dollar-promo.jpg" style="width: 320px; height: 253px;" /&gt;&lt;/a&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="learning"></category><category term="packtpub"></category></entry><entry><title>The Getting Started Problem</title><link href="https://slott56.github.io/2014_12_16-the_getting_started_problem.html" rel="alternate"></link><published>2014-12-16T20:03:00-05:00</published><updated>2014-12-16T20:03:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-12-16:/2014_12_16-the_getting_started_problem.html</id><summary type="html">&lt;p&gt;How does one get started developing software? What's the first step?&lt;/p&gt;
&lt;p&gt;When you come to this craft -- or sullen art -- without a background
except as a user, how do you get started writing code?&lt;/p&gt;
&lt;p&gt;It's not easy. Indeed, developing software may be one the hardest
things there is. Really, really …&lt;/p&gt;</summary><content type="html">&lt;p&gt;How does one get started developing software? What's the first step?&lt;/p&gt;
&lt;p&gt;When you come to this craft -- or sullen art -- without a background
except as a user, how do you get started writing code?&lt;/p&gt;
&lt;p&gt;It's not easy. Indeed, developing software may be one the hardest
things there is. Really, really hard.&lt;/p&gt;
&lt;p&gt;Why? Consider the orders of magnitude involved. From sub-microsecond
clock speeds to software that's supposed to continue running for 8,763
hours a year without interruption. That's 31,547,269 seconds. Isn't
that about 15 orders of magnitude?&lt;/p&gt;
&lt;p&gt;Or consider scope of storage. We wrangle over bytes in a dataset that
spans terabytes. That's 12 orders of magnitude.&lt;/p&gt;
&lt;p&gt;When engineers build a 13,000' long bridge, are they looking at it
from scales of 10&lt;sup&gt;±5&lt;/sup&gt;? Do they even care what's 21 miles away?
They might care about things at the scale of 10&lt;sup&gt;-5&lt;/sup&gt;, since
that's about an inch. But 10&lt;sup&gt;-7&lt;/sup&gt;? 100&lt;sup&gt;th&lt;/sup&gt; of an inch? I
could be wrong, but I have doubts.&lt;/p&gt;
&lt;p&gt;I won't go so far as to say bridge building is particularly easy. It's
safety critical work. People die when things go wrong. Consequently,
it's regulated by civil engineering standards. Bridge designs are
limited to proven patterns. You can't spring something new on the
world and expect anyone to pay money for it or trust their life to it.&lt;/p&gt;
&lt;p&gt;If you're with me so far, you see my point: software is different. And
that makes it particularly hard. People do learn elements of it. How
does this happen?&lt;/p&gt;
&lt;div class="section" id="two-paths-diverge"&gt;
&lt;h2&gt;Two Paths Diverge&lt;/h2&gt;
&lt;p&gt;I see two separate paths:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;More formal, and&lt;/li&gt;
&lt;li&gt;Less formal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more formal path includes the kind of curriculum you find at big
CS schools. Formal treatment of algorithms and data structures. Logic
and Computable Functions. The essentials of Turing Completeness.&lt;/p&gt;
&lt;p&gt;Books
like &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs"&gt;http://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The less formal path starts with -- essentially -- random hacking
around, trying to get stuff to work. Some folks argue that a
curriculum of structured exercises isn't &amp;quot;random&amp;quot; hacking around. I
suggest that a curriculum of &lt;em&gt;structured&lt;/em&gt; exercises can be the formal
path concealed under a patina of hackeriness. On the other hand, a
set of exercises can be successful at training programmers; if it
doesn't follow a formalized structure, it's merely a small step from
random.&lt;/p&gt;
&lt;p&gt;[Random doesn't mean &amp;quot;bad;&amp;quot; it means &amp;quot;informal&amp;quot; and &amp;quot;unstructured.&amp;quot;]&lt;/p&gt;
&lt;p&gt;Some folks learn well in a formal, structured approach. They like
axiomatic definitions of computability, and they can get a grip on
how to map the abstractions of computing to specific languages and
problem domains. They read content
at &lt;a class="reference external" href="http://www.algorist.com/"&gt;http://www.algorist.com&lt;/a&gt; and see
applications of principles.&lt;/p&gt;
&lt;p&gt;Other folks can be shown the formal background that makes their
random hacking fit into a larger pattern. When shown how some things
fit a larger pattern, they're often happy work in a new context with
an expanded repertoire of data structures and algorithms. They read
content at &lt;a class="reference external" href="http://www.algorist.com/"&gt;http://www.algorist.com&lt;/a&gt; and
look for solutions to problems; the formal patterns will emerge
eventually.&lt;/p&gt;
&lt;p&gt;Not all folks respond well to having their informal notions
challenged. Some folks have ingrained bad habits and prefer to fight
to the death to avoid change. A sad state of affairs, but remarkably
common. They didn't understand linked lists at some point and
steadfastly refuse to use the java.util.LinkedList class. This is
what software religious wars are about. Some trolls truly and deeply
love an uniformed religious war.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chickens-and-eggs"&gt;
&lt;h2&gt;Chickens and Eggs&lt;/h2&gt;
&lt;p&gt;Is this a chicken-and-egg problem?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can't really appreciate the formal foundations until you have
some hands-on coding experience.&lt;/li&gt;
&lt;li&gt;You shouldn't dirty your hands with implementation details until
you have the proper theoretical foundations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That seems potentially reductionist and uninformative. Or. Perhaps
there is a nugget of truth in this. Perhaps one is actually
foundational.&lt;/p&gt;
&lt;p&gt;Eggs, to be specific, show the fresh mutations. The egg comes first
from a chicken-like precursor that's not properly a chicken.&lt;/p&gt;
&lt;p&gt;What's that precursor to programming in Python? CS Fundamentals?
Hacking around? I suggest that the way we acquire languages is
important here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="language-skills"&gt;
&lt;h2&gt;Language Skills&lt;/h2&gt;
&lt;p&gt;Software languages are a small step from natural languages. As with
learning natural languages, formal grammar may not be as helpful as
engaging in conversations. Indeed, for natural languages, formal
grammars are an afterthought. They're something we discover about a
corpus. We impose the discovered grammar rules on ourselves (and
others) to be understood in a context of other writing (and
speaking.)&lt;/p&gt;
&lt;p&gt;Natural language grammar isn't timeless and immutable. People throw
their hands up in despair at the erosion of grammar and language.
They're -- of course -- just being reactionary. Language evolves. The
loudest complainers are the ones who didn't pay attention for a long
time and suddenly (somehow) realized the don't know what &amp;quot;WTF&amp;quot; means.
LOL.&lt;/p&gt;
&lt;p&gt;With an artificial language, the grammar is formalized. It has a
first-class existence in compilers, interpreters and other tools.&lt;/p&gt;
&lt;p&gt;However, I think the bits of our brain that assimilate grammar work
best from concrete examples. A formal grammar definition -- while
helpful -- isn't the way to start. I think that a less formal, &amp;quot;try
this&amp;quot; suite of exercises is perhaps the best way to learn to program.&lt;/p&gt;
&lt;p&gt;As an author, I'm beholden to my publisher's notions of what sells.
Examples sell. See almost everything from
&lt;a class="reference external" href="https://www.packtpub.com/"&gt;Packt&lt;/a&gt;. Working examples are solid
gold.&lt;/p&gt;
&lt;p&gt;These are not necessarily problems for the reader to tackle and
solve. They're examples to study.&lt;/p&gt;
&lt;p&gt;The conundrum with attempting to solve problems is the &lt;em&gt;attempting&lt;/em&gt;
part. It's hard to set out a list of &amp;quot;solve these problems and master
programming&amp;quot; problems and hope folks get through them. What if they
fail? Clearly, you'd provide answers. In that case, you'd be back at
examples to study. Hmm.&lt;/p&gt;
&lt;p&gt;I have intermittent interest in my older &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in
Python&lt;/a&gt;
book. Partly because it's got extensive exercises in each chapter. I
get donations. I get inquiries. The exercises seem to resonate in a
small way.&lt;/p&gt;
&lt;p&gt;I've done about 22 levels of the Python Challenge (I'll write about
that separately.) It's not a great way to learn from scratch. You
need to know a lot. And you need a lot of hints.&lt;/p&gt;
&lt;p&gt;I've done almost 70 levels of Project Euler. It might be a better way
to learn programming because the easy problems are really easy. No
guesswork. No riddles. No steganography. The answers are totally
cut-and-dried, unambiguous, and absolute. However, there's no easy
guidance for learners. Either you have an answer, and want help on
improving it, or ... well ... you're stuck and frustrated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="structured-sequence-of-exercises"&gt;
&lt;h2&gt;Structured Sequence of Exercises&lt;/h2&gt;
&lt;p&gt;What strikes me as a possibility here is a structured series of
exercises that lay out the foundations of computer science as
realized in a specific programming language.&lt;/p&gt;
&lt;p&gt;Puzzle-style. With extensive hints. Background readings, too. But
with absolutely right answers. And a score-keeping system to show
where you stand.&lt;/p&gt;
&lt;p&gt;No tricky riddles. No quizzes to proceed. You could go on to advanced
material without mastering the foundations, if you wanted.&lt;/p&gt;
&lt;p&gt;I've got a bunch of exercises and examples in my Building Skills
books. Plus some of the examples in my Packt books can be modified
and repurposed. Plus. Projects like
&lt;a class="reference external" href="https://github.com/slott56/HamCalc-2.1"&gt;HamCalc&lt;/a&gt; contain a wealth
of simple applications that can be adjusted to show CS fundamentals.&lt;/p&gt;
&lt;p&gt;Perhaps relevant is
this: &lt;a class="reference external" href="https://www.google.com/edu/programs/exploring-computational-thinking/"&gt;https://www.google.com/edu/programs/exploring-computational-thinking/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm not sure precisely how it fits, since it seems to be more aimed
at providing a general background, rather than teaching programming
language skills. They decompose the skills into four specific
techniques. Here are specific techniques.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decomposition: Breaking a task or problem into steps or parts.&lt;/li&gt;
&lt;li&gt;Pattern Recognition: Make predictions and models to test.&lt;/li&gt;
&lt;li&gt;Pattern Generalization and Abstraction: Discover the laws, or principles that cause these patterns.&lt;/li&gt;
&lt;li&gt;Algorithm Design: Develop the instructions to solve similar problems and repeat the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps this is
relevant: &lt;a class="reference external" href="http://interactivepython.org/courselib/static/pythonds/index.html"&gt;http://interactivepython.org/courselib/static/pythonds/index.html&lt;/a&gt;.
I haven't read this carefully, but it seems to be expository
rather than exploratory.  It's really thorough. It has quizzes and
self-checks.&lt;/p&gt;
&lt;p&gt;I think there's a big space for publishing &lt;strong&gt;lots&lt;/strong&gt; simple
recreational programming exercises as teaching tools.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="learning"></category><category term="packtpub"></category></entry><entry><title>Wow. Two-Word Question. Profound Insight.</title><link href="https://slott56.github.io/2014_12_11-wow_two_word_question_profound_insight.html" rel="alternate"></link><published>2014-12-11T08:00:00-05:00</published><updated>2014-12-11T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-12-11:/2014_12_11-wow_two_word_question_profound_insight.html</id><summary type="html">&lt;p&gt;I'm working on yet another Python book. This one looking at functional
programming in Python. It doesn't really go with with &lt;a class="reference external" href="http://www.amazon.com/Mastering-Object-oriented-Community-Experience-Distilled/dp/1783280972"&gt;Mastering
Object-Oriented
Python&lt;/a&gt;
and &lt;a class="reference external" href="http://www.amazon.com/Python-Secret-Agents-Steven-Lott/dp/1783980427"&gt;Python for Secret
Agents&lt;/a&gt;
because the focus isn't on Python's strong suit.&lt;/p&gt;
&lt;p&gt;In chapter one, a reviewer had this two-word question:
&amp;quot;yield from?&amp;quot;&lt;/p&gt;
&lt;p&gt;What? What …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm working on yet another Python book. This one looking at functional
programming in Python. It doesn't really go with with &lt;a class="reference external" href="http://www.amazon.com/Mastering-Object-oriented-Community-Experience-Distilled/dp/1783280972"&gt;Mastering
Object-Oriented
Python&lt;/a&gt;
and &lt;a class="reference external" href="http://www.amazon.com/Python-Secret-Agents-Steven-Lott/dp/1783980427"&gt;Python for Secret
Agents&lt;/a&gt;
because the focus isn't on Python's strong suit.&lt;/p&gt;
&lt;p&gt;In chapter one, a reviewer had this two-word question:
&amp;quot;yield from?&amp;quot;&lt;/p&gt;
&lt;p&gt;What? What does &amp;quot;yield from&amp;quot; mean?&lt;/p&gt;
&lt;p&gt;Oh.&lt;/p&gt;
&lt;p&gt;Wow.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator"&gt;https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had utterly missed this profound, important feature.&lt;/p&gt;
&lt;p&gt;I guess I have been too blasé in skimming the release notes.&lt;/p&gt;
&lt;p&gt;That's embarrassing.  And it only took two words to reveal my mistake.
I had to then review all 113 &lt;strong&gt;yield&lt;/strong&gt; statements in 72 files of
examples that go with the book.  That means most chapters will get
touched to revise an example to show &lt;strong&gt;yield from iter&lt;/strong&gt; instead of the
older &lt;strong&gt;for x in iter: yield x&lt;/strong&gt; template.&lt;/p&gt;
&lt;p&gt;This also changes the Tail Call Optimization material. The explicit for
was actually kind of nice for showing how TCO is implemented in Python.
The yield from makes it a little less clear.&lt;/p&gt;
&lt;p&gt;Some reviewers consider TCO so fundamental that it belongs in chapter 1.
The omission of detailed analysis of Python's TCO approach was
considered a significant flaw. Other reviewers seemed happy setting
discussion of TCO aside for later.&lt;/p&gt;
&lt;div class="section" id="the-functional-python-conundrum"&gt;
&lt;h2&gt;The Functional Python Conundrum&lt;/h2&gt;
&lt;p&gt;This book is going to be difficult. The ratings from the reviewers were
low. Really low. It looks like I've got a lot of work to do. Finding the
target audience will be difficult.&lt;/p&gt;
&lt;p&gt;One reviewer asked -- in effect -- why would someone who knew functional
LISP ever use Python? I don't think there's a big audience of
disgruntled LISP programmers, so that's not a relevant question.&lt;/p&gt;
&lt;p&gt;Viewed from the other direction, it's hugely import. Why would a Python
programmer adopt functional design patterns? That's the question that
needs to be answered clearly.&lt;/p&gt;
&lt;p&gt;And from the reviews of chapter 1, it wasn't addressed clearly enough.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>Architectural Principles, Spring Framework, and Jersey JAX-RS</title><link href="https://slott56.github.io/2014_12_04-architectural_principles_spring_framework_and_jersey_jax_rs.html" rel="alternate"></link><published>2014-12-04T08:00:00-05:00</published><updated>2014-12-04T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-12-04:/2014_12_04-architectural_principles_spring_framework_and_jersey_jax_rs.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See this: &lt;a class="reference external" href="http://www.moschetti.org/"&gt;http://www.moschetti.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Attended a meeting with Buzz. Not stated in his blog (in an obvious
way) was something he said about not being a fan of big frameworks. I
didn't write down his punchline, but it was a pretty pithy summary of
the framework tradeoff.&lt;/div&gt;
&lt;div class="line"&gt;IIRC …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See this: &lt;a class="reference external" href="http://www.moschetti.org/"&gt;http://www.moschetti.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Attended a meeting with Buzz. Not stated in his blog (in an obvious
way) was something he said about not being a fan of big frameworks. I
didn't write down his punchline, but it was a pretty pithy summary of
the framework tradeoff.&lt;/div&gt;
&lt;div class="line"&gt;IIRC, it was essentially this: you can wrestle with one or both of
these technical problems.&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Boilerplate Code&lt;/li&gt;
&lt;li&gt;A Framework's Conceptual Model&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Either you have to create your own libraries or you have to learn
someone else's. This is in addition to wrestling with the business
problem you're supposed to be solving.&lt;/div&gt;
&lt;div class="line"&gt;Buzz's point seemed to be that you can often manage your own
boilerplate more easily than you can come to grips with a framework.
If one member of your sprint team handles reusable services, you can
just ask them for a feature. You don't have to spend an hour reading
other people's struggles.&lt;/div&gt;
&lt;div class="line"&gt;After spending three months getting my brain wrapped around Spring
Framework, I'm inclined toward partial, qualified agreement.
Frameworks seem to have limited value until you're an expert in using
them.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Layers and Layers&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;When wrestling with a new feature, you are forced to &lt;em&gt;assume&lt;/em&gt; that
you've understood its semantics. When you mock a framework element for
test purposes, you're reduced to hope that your unit tests are
sufficient. A unit tests of a mocked framework element only tests your
assumptions. If you're not using the element's API correctly, your
tests can't show that the framework will break or raise exceptions.&lt;/div&gt;
&lt;div class="line"&gt;For new technology, you need to start with a technical spike to
understand the framework. Then you can write unit tests that test
against known framework behavior. Then you can write the real code
that's based on the unit tests that are based on a spike that shows
how the framework really works.&lt;/div&gt;
&lt;div class="line"&gt;Using a technical spike for discovery and debugging can be
challenging. You don't want to drag around your entire application
just to create a spike. But you don't want to drop back to a trivial
&amp;quot;hello world&amp;quot; spike that doesn't really apply to your context. You
have to balance simplicity against realism.&lt;/div&gt;
&lt;div class="line"&gt;For example, making JAX-RS requests to web services is aggravating to
debug. You can spend many hours looking at boilerplate 401 and 404
errors wondering what's missing. You can't write the unit tests until
you finally get &lt;em&gt;something&lt;/em&gt; to work. Once you have something, you can
replace real objects with mock objects.&lt;/div&gt;
&lt;div class="line"&gt;If you already know JAX-RS features, it's easy. If you already know
the RESTful service, it's not too bad. If you know neither JAX-RS nor
the service, you don't have any clue which direction to turn. Did I
misuse JAX-RS? Is something wrong in the request? Am I missing a
required header? Did I leave something off the Accept header?&lt;/div&gt;
&lt;div class="line"&gt;I finally had to give up creating spikes and debugging RESTful
requests in Java. It turned out to be simpler to write a version of
the REST client in Python. I used this to figure out how the real
service really worked. Given a working Python spike, I could then save
those interactions for WireMock.&lt;/div&gt;
&lt;div class="line"&gt;Once I has a clue how the service worked, I could also write a mock
server for some more sophisticated experiments.  This was useful for
debugging problems based on a failure to understand JAX-RS.&lt;/div&gt;
&lt;div class="line"&gt;Yes. Rather than struggle with the framework, I wrote the client once
in Python and then rewrote the client again in Java. It seemed quicker
than trying to debug it in Java.&lt;/div&gt;
&lt;div class="line"&gt;One contributing factor is the 1m 30s build time in Maven. Compare
that with interactive  Python at the &amp;gt;&amp;gt;&amp;gt; prompt.&lt;/div&gt;
&lt;div class="line"&gt;Perhaps a smaller framework would have been better.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="java"></category><category term="spring framework"></category></entry><entry><title>MongoDB and Schema Validation</title><link href="https://slott56.github.io/2014_11_20-mongodb_and_schema_validation.html" rel="alternate"></link><published>2014-11-20T08:00:00-05:00</published><updated>2014-11-20T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-11-20:/2014_11_20-mongodb_and_schema_validation.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;One part of the MongoDB value proposition is being freed from the
constraints of a database schema.&lt;/div&gt;
&lt;div class="line"&gt;There's a &amp;quot;baby and bathwater&amp;quot; issue here. While a schema can become a
low-value constraint, we have to be careful about throwing out the
baby when we throw out the bathwater. A schema …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;One part of the MongoDB value proposition is being freed from the
constraints of a database schema.&lt;/div&gt;
&lt;div class="line"&gt;There's a &amp;quot;baby and bathwater&amp;quot; issue here. While a schema can become a
low-value constraint, we have to be careful about throwing out the
baby when we throw out the bathwater. A schema isn't inherently evil.
A schema that's hard to modify can become more cost than benefit.&lt;/div&gt;
&lt;div class="line"&gt;When working with document databases like MongoDB or CouchDB, we're
freed from the constraints of a schema.&lt;/div&gt;
&lt;div class="line"&gt;But.&lt;/div&gt;
&lt;div class="line"&gt;Do we really want the kind of freedom that can devolve to anarchy?&lt;/div&gt;
&lt;div class="line"&gt;Or.&lt;/div&gt;
&lt;div class="line"&gt;Do we want some kind of constraint checking capability to provide some
additional run-time assurance that the applications are using the
database properly?&lt;/div&gt;
&lt;div class="line"&gt;Read this &lt;a class="reference external" href="http://realprogrammer.wordpress.com/tag/json-schema/"&gt;http://realprogrammer.wordpress.com/tag/json-schema/&lt;/a&gt; and
this &lt;a class="reference external" href="http://www.litixsoft.de/english/mms-json-schema/"&gt;http://www.litixsoft.de/english/mms-json-schema/&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;My thesis is that some schema validation may have some value.&lt;/div&gt;
&lt;div class="line"&gt;My plan is this.&lt;/div&gt;
&lt;div class="line"&gt;1. Define the essential collections for the various documents using
ordinary document design practices.&lt;/div&gt;
&lt;div class="line"&gt;2. For each document class, we'll have two closely associated
collections:&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The primary collection, call it it &amp;quot;class&amp;quot; because it matches one of
the application classes.&lt;/li&gt;
&lt;li&gt;An additional &amp;quot;class.schema&amp;quot; collection. This collection will contain
JSON-schema documents.
See &lt;a class="reference external" href="http://json-schema.org/"&gt;http://json-schema.org&lt;/a&gt; for more
information.&lt;/li&gt;
&lt;li&gt;For audit, and sequential key generation, we may have some additional
associated collections.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Because JSON schema documents have a &amp;quot;$schema&amp;quot; field, we can replace
the &amp;quot;$&amp;quot; with &amp;quot;\uFF04&amp;quot; the &amp;quot;FULLWIDTH DOLLAR SIGN&amp;quot; character when
saving the JSON-schema document into a MongoDB database. We can do the
inverse operation when finding the schema documents in the database.&lt;/div&gt;
&lt;div class="line"&gt;3. Use a tool like &lt;a class="reference external" href="https://github.com/Julian/jsonschema"&gt;https://github.com/Julian/jsonschema&lt;/a&gt; to validate
the schema. The document-level validation could be embedded in the
application for each transaction. However, it seems better trust the
code and the unit testing of the code to enforce schema rules. We'd
use this validation periodically to check the schema. Significant
events should include a validation pass. For example, before and after
any schema changes. This way we can be sure that things are continuing
to go properly.&lt;/div&gt;
&lt;div class="line"&gt;It would be strictly an additional layer of checking.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="mongodb"></category><category term="schema migration"></category></entry><entry><title>Declarative Programming</title><link href="https://slott56.github.io/2014_11_13-declarative_programming.html" rel="alternate"></link><published>2014-11-13T08:00:00-05:00</published><updated>2014-11-13T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-11-13:/2014_11_13-declarative_programming.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I know that some folks swear by declarative programming. They like the
ideas behind &lt;a class="reference external" href="http://ant.apache.org/"&gt;ant&lt;/a&gt; (and
&lt;a class="reference external" href="http://www.gnu.org/software/make/"&gt;make&lt;/a&gt;) and
&lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt; and related examples.&lt;/div&gt;
&lt;div class="line"&gt;You can google for &amp;quot;ant v. maven v. gradle&amp;quot; where people gripe about
which is more declarative. The point of the whining being that more
declarative == good and …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I know that some folks swear by declarative programming. They like the
ideas behind &lt;a class="reference external" href="http://ant.apache.org/"&gt;ant&lt;/a&gt; (and
&lt;a class="reference external" href="http://www.gnu.org/software/make/"&gt;make&lt;/a&gt;) and
&lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt; and related examples.&lt;/div&gt;
&lt;div class="line"&gt;You can google for &amp;quot;ant v. maven v. gradle&amp;quot; where people gripe about
which is more declarative. The point of the whining being that more
declarative == good and any traces of procedural or imperative
programming == bad.&lt;/div&gt;
&lt;div class="line"&gt;All, of course, without any really good justification of why
declarative is better. It's assumed that declarative simply has
innumerable advantages. And yes, I've started
with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Declarative_programming"&gt;http://en.wikipedia.org/wiki/Declarative_programming&lt;/a&gt;. The issue
isn't simply moot; the justification is weak.&lt;/div&gt;
&lt;div class="line"&gt;Perhaps there's a awful bias toward imperative and functional
programming. After all, the big thinkers in computer science tend to
favor the imperative and functional schools of thought. Maybe
declarative suffers from some bias.&lt;/div&gt;
&lt;div class="line"&gt;Or maybe declarative has limited utility.&lt;/div&gt;
&lt;div class="line"&gt;There. I said it. Limited utility.&lt;/div&gt;
&lt;div class="line"&gt;I think a functional approach might be better, faster and simpler.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Side-bar Ranting&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;The code is below. You can skip down to the &amp;quot;&lt;em&gt;The Functional Build
System&lt;/em&gt;&amp;quot; section and not miss much.&lt;/div&gt;
&lt;div class="line"&gt;Declarative programming seems applicable to the cases where the
ordering of operations can be easily deduced. It seems like the
significant value of declarative programming is to rely on an
optimizing compiler rearrange the declarations into properly-ordered
imperative steps. From this viewpoint, it seems like ant/maven/gradle
are optimizers that look at the dependencies among transformation
functions and then apply the functions in the proper order.&lt;/div&gt;
&lt;div class="line"&gt;It seems like we're writing expressions like these:&lt;/div&gt;
&lt;div class="line"&gt;x.class = java(x.java)&lt;/div&gt;
&lt;div class="line"&gt;xyz.jar = jar(x.class, y.class, z.class, ... )&lt;/div&gt;
&lt;div class="line"&gt;app.war = war(xyz.jar, abc.jar, ... )&lt;/div&gt;
&lt;div class="line"&gt;and then turning them over to a clever compiler (like Haskell) to work
out a total order among the expressions that will build the right
thing for us.&lt;/div&gt;
&lt;div class="line"&gt;There's a &lt;em&gt;potential&lt;/em&gt; difference between manually structuring a script
to get all of the steps in order and allowing the compiler to arrange
things properly based on some formal semantics behind each expression.&lt;/div&gt;
&lt;div class="line"&gt;It's a &lt;em&gt;potential&lt;/em&gt; difference because most folks that deal with
ant/maven/gradle tend to put things in more-or-less the right order so
that others can figure out what the hell is going on. In the trivial
cases where we're building simple web sites, the default rules have
evolved to the point where they work in almost all cases, so we don't
even look at the configuration of the tools. We hit Ctrl+B knowing
that it's all setup properly&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Some Requirements&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;A number of applications have ant-like (or make-like) aspects but
don't really cry out for ant with customized actions. We might be
doing data warehouse loads which involve an ant-like sequence of
processing steps to do transformations, loads, and produce final
summaries and confirmations. We can, of course, write this all in
first-class Java code. The hard way.&lt;/div&gt;
&lt;div class="line"&gt;It's not terribly complex. A class to define a dependency. A suite of
plug-in strategies. Some static definitions of the actual rules. Been
there. Done that.&lt;/div&gt;
&lt;div class="line"&gt;Pragmatically, the declarative style suffers from a limitation of
being rather rigid in applying a fixed set of rules. A more
script-like implementation can be more helpful to support reruns,
debugging, problem-solving and the inevitable special cases and
exceptions. After a storage failure -- and the reruns required to get
the warehouse back up-to-date -- one sees more need for script-like
flexibility and less need for overly simplistic rigidity.&lt;/div&gt;
&lt;div class="line"&gt;Another end of the spectrum is individual steps all manually
coordinated with a tool like BMC's Control-M. This requires endless
manual intervention to make sure all the various tasks are defined
properly in Control-M.&lt;/div&gt;
&lt;div class="line"&gt;Somewhere near the middle is a configurable application with some
processing rules to give it flexibility. But some defined structure to
remove the need for carefully planned manual intervention and deep
expertise.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Functional Build System&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;We can image an ant-like build system defined functionally.&lt;/div&gt;
&lt;div class="line"&gt;The core is a function that implements build-if-needed rules:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def build_if_needed( builder, target_file, *source ):
    if target_ok( target_file, *source ):
        return &amp;quot;ok({0},...)&amp;quot;.format(target_file)
    builder( target_file, *source )
    return &amp;quot;{0}({1},...)&amp;quot;.format(builder.__class__.__name__,target_file)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;We can use this function to define the essential dependency: use a
builder function to create some target if it's out-of-date with
respect to the sources. The return value forms a kind of audit log.&lt;/div&gt;
&lt;div class="line"&gt;This relies on some helper functions: target_ok() checks the
modification times of files. The various builders do the various kinds
of operations required to make one from the sources.&lt;/div&gt;
&lt;div class="line"&gt;Here's the target_ok() function&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def target_ok( target_file, *source_list, logger=logging ):
    try:
        mtime_target= datetime.datetime.fromtimestamp(
            os.path.getmtime( target_file ) )
    except Exception:
        return False
    # If a source doesn't exist, we throw an exception.
    times = (datetime.datetime.fromtimestamp(
            os.path.getmtime( source ) ) for source in source_list)
    return all(mtime_target &amp;gt; mtime_source for mtime_source in times)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I think this function is what started me thinking about a functional
approach. It could be a method of a class. But. It's seems like a very
functional design. It could be reduced to a single (long) expression.&lt;/div&gt;
&lt;div class="line"&gt;The builders are composite functions. They need to combine the
subprocess.check_call() with a function that builds the command. We
can do functional composition several ways in Python: we can combine
functions via decorators. We can also combine functions via Callables.
We could write a higher-order function that combines the check_call()
with a function to create the command.&lt;/div&gt;
&lt;div class="line"&gt;We'll opt for the higher-order function and create partially evaluated
forms using functools.partial().&lt;/div&gt;
&lt;div class="line"&gt;Here's a typical case:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def subprocess_builder( make_command, target_file, *source_list ):
    command= make_command( target_file, *source_list )
    subprocess.check_call( command )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This is a generic function: it requires a function (or lambda) to
build the actual command. We might do something like this to create a
specific builder.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def command_rst2html( output, *input ):
        return [&amp;quot;rst2html.py&amp;quot;, &amp;quot;--syntax-highlight=long&amp;quot;, &amp;quot;--input-encoding=utf-8&amp;quot;, input[0], output]

rst2html= partial( subprocess_builder, command_rst2html )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This rst2html() function can be used to define a dependency rule. We
might have something like this:&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
files_txt = glob.glob( &amp;quot;*.txt&amp;quot; )
for f in files_txt:
    build_if_needed( rst2html, ext_to(f,'.html'), f )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This rule specifies that *.html files depend on *.txt files; when
needed, use the rst2html() function to build the required html file
when the txt file is newer.&lt;/div&gt;
&lt;div class="line"&gt;The ext_to() function is a two-liner that changes the extension on a
filename. This helps us write &amp;quot;template&amp;quot; build rules rather than
exhaustively enumerating a large number of similar files.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def ext_to( filename, new_ext ):
    name, ext = os.path.splitext( filename )
    return name + new_ext
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;What we've done here is define a few generic functions that form the
basis for a functional build system that can compete against ant, make
or scons. The system is not even close to declarative. However, we
only need to assure that our final build_if_needed() functions have a
sensible ordering, something that's rarely a towering intellectual
burden.&lt;/div&gt;
&lt;div class="line"&gt;The individual customizations are the build commands like rst2html()
where we created the command-line list of strings for
subprocess.check_call(). We can just as easily build functions which
run entirely in the process or functions which farm the work out to
separate processes via queues or RESTful web services.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Bottom Lines&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;It appears that declarative programming isn't terribly helpful. There
may be a niche, but it seems to be a small niche to me.&lt;/div&gt;
&lt;div class="line"&gt;I'm sure that an object-oriented approach to this problem isn't any
better. I've written a shabby-make version of this, and it's bigger.
There's just more code and it's not significantly more clear what's
going on. Inheritance can be difficult to suss out.&lt;/div&gt;
&lt;div class="line"&gt;Python seems to be a good functional programming language. It did this
very nicely.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="imperative"></category><category term="declarative"></category><category term="functional programming"></category><category term="#python"></category></entry><entry><title>Currying and Partial Function Evaluation</title><link href="https://slott56.github.io/2014_10_23-currying_and_partial_function_evaluation.html" rel="alternate"></link><published>2014-10-23T08:00:00-04:00</published><updated>2014-10-23T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-10-23:/2014_10_23-currying_and_partial_function_evaluation.html</id><summary type="html">&lt;p&gt;Old. But still interesting.
&lt;a class="reference external" href="http://www.uncarved.com/index.py/blog/not_currying.mrk"&gt;Partial Function Application is not
Currying&lt;/a&gt;
It seems like hair-splitting. However, the distinction between bound
variables and curried functions does have &lt;em&gt;some&lt;/em&gt; practical implications.
I'm looking closely at
&lt;a class="reference external" href="https://pypi.python.org/pypi/PyMonad/"&gt;PyMonad&lt;/a&gt; and the built-in
&lt;a class="reference external" href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt;
library.
I'm finding some benefits in understanding functional programming and
how to apply …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Old. But still interesting.
&lt;a class="reference external" href="http://www.uncarved.com/index.py/blog/not_currying.mrk"&gt;Partial Function Application is not
Currying&lt;/a&gt;
It seems like hair-splitting. However, the distinction between bound
variables and curried functions does have &lt;em&gt;some&lt;/em&gt; practical implications.
I'm looking closely at
&lt;a class="reference external" href="https://pypi.python.org/pypi/PyMonad/"&gt;PyMonad&lt;/a&gt; and the built-in
&lt;a class="reference external" href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt;
library.
I'm finding some benefits in understanding functional programming and
how to apply functional design patterns in Python. I'm also seeing the
important differences between compiled -- and optimized languages -- and
Python's approach. I'm slowly coming to understand how a (simple)
recursive design is flattened into a &lt;strong&gt;for&lt;/strong&gt; loop as part of manual
tail-recursion optimization.
The functional programming goodness is giving me first-class headaches
when trying to apply the lessons learned to Java, however. I suppose I
should look closely
at &lt;a class="reference external" href="http://www.functionaljava.org/"&gt;http://www.functionaljava.org&lt;/a&gt; and &lt;a class="reference external" href="https://code.google.com/p/functionaljava/"&gt;https://code.google.com/p/functionaljava/&lt;/a&gt;.
There are claims that it's dangerously inefficient. Also, the customer
who insists on Java has a (very) limited set of allowed libraries; if
this isn't on the list, then the whole concept is a non-starter.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>Using Bottle as a miniature demo server</title><link href="https://slott56.github.io/2014_10_16-using_bottle_as_a_miniature_demo_server.html" rel="alternate"></link><published>2014-10-16T08:00:00-04:00</published><updated>2014-10-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-10-16:/2014_10_16-using_bottle_as_a_miniature_demo_server.html</id><summary type="html">&lt;p&gt;Let's talk small.
When writing API's, it sometimes helps to have a small demo web site to
show the API in a context that's easy to visualize. API's are sometimes
abstract, and without an application to provide some context, it can be
unclear why the path looks like that or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's talk small.
When writing API's, it sometimes helps to have a small demo web site to
show the API in a context that's easy to visualize. API's are sometimes
abstract, and without an application to provide some context, it can be
unclear why the path looks like that or why the JSON document has those
fields.
I want to emphasize the &amp;quot;small&amp;quot; part of the small demo. A small page or
two with some HTML forms and a submit button. Really small.
The &lt;strong&gt;actual&lt;/strong&gt; customer-facing apps (mobile, mobile web, and full web
site) are being built by lots of other people. Not us. They're big. We
build the API's (there are a lot) that support the data structures that
support the processing that supports the user experience.
Building fake mobile apps is right out. We're not going to lard on
&lt;a class="reference external" href="https://developer.android.com/sdk/index.html?hl=i"&gt;Android SDK&lt;/a&gt; or
&lt;a class="reference external" href="https://developer.apple.com/xcode/"&gt;Xcode&lt;/a&gt; development environments
to our already overburdened laptops. We build backend API's.
Building a fake mobile web or full web site is appealing. What makes it
complex is the UX folks are building everything in
&lt;a class="reference external" href="https://angularjs.org/"&gt;Angular.js&lt;/a&gt;. If we want to properly
implement a form, we would have to master Angular just to do a demo for
the product owner.
No thanks. Still too far afield for API developers. We're focused on
mongo and JSON and performance and scalability. Not Angular.js and the
UX.
What we want to do is build a small web server which runs just a few
pages plucked out of the UX demo code so that we can show how
interactions with a web page put stuff in a database. And vice-versa:
stuff in the database will show up on a web page.
&amp;quot;Really?&amp;quot; we get asked. Some folks look askance at us for wanting to put
a small demo site together.
&amp;quot;Yes,&amp;quot; we answer. &amp;quot;Our product owner has a big vision and we're breaking
that into a bunch of little API's. It's not perfectly clear how we're
building up to that vision.&amp;quot;
It's not &lt;strong&gt;perfectly&lt;/strong&gt; clear how some of this work. Folks outside the
scrum team have distracting questions. We want to have a page or two
where we can fill in a form and click submit and stuff happens. This is
far easier to explain than showing
them &lt;a class="reference external" href="http://www.getpostman.com/"&gt;Postman&lt;/a&gt; or &lt;a class="reference external" href="http://www.soapui.org/"&gt;SoapUI&lt;/a&gt; and
&lt;strong&gt;claiming&lt;/strong&gt; that this will support some user stories.
And as we grow toward the epic, the workflow aspects of this will grow.
The stuff that admin &amp;quot;A&amp;quot; does after user &amp;quot;U&amp;quot; has made an initial
request. Or the stuff that internal user &amp;quot;I&amp;quot; does after external user
&amp;quot;X&amp;quot; has done something. But really, it's just a few small web pages.
Small.
Imagine the demo. On laptop #1, we'll show user &amp;quot;X&amp;quot;. On laptop #2, we're
running a Mongo shell to query what's in the db. On laptop #3 we're
showing user &amp;quot;I&amp;quot;. The focus is really the API's. And how the API's add
up to an epic collection of stories.
&lt;strong&gt;Serving some HTML pages&lt;/strong&gt;
Just to make it painful, we can't simply grab the demo web pages out of
the UX team's SVN repository. Why not? First, it's an Angular app. We
can't just grab some HTML and go. The demo pages are served via
&lt;a class="reference external" href="http://nodejs.org/"&gt;node.js&lt;/a&gt; with &lt;a class="reference external" href="http://bower.io/"&gt;Bower&lt;/a&gt;, so
it's not even clear (to us) what the &lt;strong&gt;complete&lt;/strong&gt; deployment looks like.
So. We cheated. We took a screen shot. We trimmed the edges of the page
as .PNG files. We wrote our own form and cobbled in enough CSS to make
it look close. We're not here to fake out the UX. We just want to enter
some data and have it tickle our API. (Indeed, we have a &amp;quot;Not The Real
Experience&amp;quot; on some pages.)
Initially, some of the team members tried serving these small pages with
&lt;a class="reference external" href="http://www.oracle.com/technetwork/middleware/weblogic/overview/index.html"&gt;WebLogic&lt;/a&gt;.
Then &lt;a class="reference external" href="http://www.eclipse.org/jetty/"&gt;Jetty&lt;/a&gt;. It's not bad. But it's
Java. It takes forever to build and deploy something after a trivial
change. There are a lot of moving parts even with Jetty, and not all of
them are obvious.
Since we're building &amp;quot;enterprise&amp;quot; API's, we're deeply enmeshed with
every feature of the &lt;a class="reference external" href="http://projects.spring.io/spring-framework/"&gt;Spring
Framework&lt;/a&gt;. Our
STS/Eclipse environments are fat with add-ons and features.
While the Spring Framework ideal is to allow a developer to focus on
relevant details and have the irrelevant details handled automagically,
the magic almost gets in the way. These are small applications that are
little more than a few static pages with forms and a submit button.
Spring can do it, of course. But we're often testing our the actual
API's in a Jetty server (or two). If the demo site requires yet another
instance of Jetty with yet another configuration, our ability to cope
diminishes.
How can we get back to small?
&lt;strong&gt;Python and Bottle&lt;/strong&gt;
Python has several web servers built-in. We can use
&lt;a class="reference external" href="https://docs.python.org/3/library/http.server.html"&gt;http.server&lt;/a&gt;. We
can use &lt;a class="reference external" href="https://docs.python.org/3/library/wsgiref.html"&gt;wsgiref&lt;/a&gt;.
Both of these are almost OK for what we want to do.
We can do better with two small downloads:
&lt;a class="reference external" href="http://bottlepy.org/docs/dev/index.html"&gt;Bottle&lt;/a&gt; and
&lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;. With these, we can build simple
HTML pages that show some data. We can build simple servers that collect
form data, use
&lt;a class="reference external" href="https://docs.python.org/3/library/http.client.html"&gt;http.client&lt;/a&gt; to
make API requests, and write copious logging details. We can write
little bottle apps that handle just GETs and POSTs simply.
This is suitably small.
We can share the module with the Bottle object and the HTML mock-up
pages. We can fire up the app in an instant on anyone's laptop, no
matter what else they're running. We can tweak the server to adjust the
logging or the API request or the form.
We actually run the server from within Idle. Make a change and hit F5 to
redeploy after a change. It's small. It's fast. And it doesn't involve
the huge complexities associated with Java.
Bottle doesn't do much. But what little it does do is a pretty tidy fit
with tiny little demonstrations of super-simple HTML interactions.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="bottle"></category><category term="jinja"></category><category term="java"></category></entry><entry><title>Scipy.optimization.anneal Problems</title><link href="https://slott56.github.io/2014_10_09-scipyoptimizationanneal_problems.html" rel="alternate"></link><published>2014-10-09T08:00:00-04:00</published><updated>2014-10-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-10-09:/2014_10_09-scipyoptimizationanneal_problems.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Well, not really &amp;quot;problems&amp;quot; &lt;em&gt;per se&lt;/em&gt;. More of a strange kind of
whining than a solvable problem.&lt;/div&gt;
&lt;div class="line"&gt;Here's the bottom line. Two real quotes. Unedited.&lt;/div&gt;
&lt;div class="line"&gt;Me: &amp;quot;&amp;gt; There's a way to avoid the religious nature of the argument. &amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Them: &amp;quot;Please suggest away.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Really. Confronted with choices between anneal and basin hopping …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Well, not really &amp;quot;problems&amp;quot; &lt;em&gt;per se&lt;/em&gt;. More of a strange kind of
whining than a solvable problem.&lt;/div&gt;
&lt;div class="line"&gt;Here's the bottom line. Two real quotes. Unedited.&lt;/div&gt;
&lt;div class="line"&gt;Me: &amp;quot;&amp;gt; There's a way to avoid the religious nature of the argument. &amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Them: &amp;quot;Please suggest away.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;Really. Confronted with choices between anneal and basin hopping, they
could only resort to hand-waving and random utterances.&lt;/div&gt;
&lt;div class="line"&gt;The tl;dr summary is this:&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;scipy.optimize.anneal only has three hard-wired schedule
variants: ‘fast’, ‘cauchy’ or ‘boltzmann’.&amp;quot;&lt;/li&gt;
&lt;li&gt;My initial response was &amp;quot;And...&amp;quot;?&lt;/li&gt;
&lt;li&gt;&amp;quot;Not being able to specify my own cooling schedule severely limits
the usability of the code&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;A complaint that causes me deep pain: &amp;quot;severely limits&amp;quot; with no actual
evidence. And no plan to get evidence beyond a religious wars style
argument.&lt;/div&gt;
&lt;div class="line"&gt;There may have been a technical question on the class definitions
inside scipy. But that question was overshadowed by the essential
problems with what they were doing. Or, more properly, what they were
whining about.&lt;/div&gt;
&lt;div class="line"&gt;Did they really have a problem with a state of the art solution to
optimization problems? More specifically:&lt;/div&gt;
&lt;div class="line"&gt;1. Did they read the &amp;quot;Deprecated&amp;quot; part of the scipy documentation?
This is a hint that there are better solutions available. Perhaps they
could start there instead of whining.&lt;/div&gt;
&lt;div class="line"&gt;2. Did they actually read the details of the three schedules in the
&amp;quot;Notes&amp;quot; section? Do they seriously think they've got a new approach
that does not fit any of the various parameters of the three installed
algorithms? I don't mean to be too rude, but... Do they really think
they're that scale of genius?&lt;/div&gt;
&lt;div class="line"&gt;3. Do they have any evidence that their problem is so unlike
the typical case handled by basin hopping?&lt;/div&gt;
&lt;div class="line"&gt;4. Do they have any evidence that their solution totally crushes
the already-built code?&lt;/div&gt;
&lt;div class="line"&gt;I think the answers to all four question were &amp;quot;no&amp;quot;.&lt;/div&gt;
&lt;div class="line"&gt;I'm not even certain that I could help them with some of the Python
technology required to extend scipy. But, I'm sure I cannot actually
do anything of value under the circumstances that (a) they have not
really tried the established algorithms and (b) they're already sure
that the established algorithms can't work based on religious-wars
arguments.&lt;/div&gt;
&lt;div class="line"&gt;It was clear that they never read the &amp;quot;Notes&amp;quot; section on this SciPy
page: &lt;a class="reference external" href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.anneal.html#scipy.optimize.anneal"&gt;http://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.anneal.html#scipy.optimize.anneal&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;One of the emails in the exchange had a kind of hand-waving
justification for the problem domain being somehow unique. Lacking any
actual evidence, I'm inclined to believe they were just hoping that
their problem domain was unique, allowing them to dismiss the
available Python solution and do something uniquely bad.&lt;/div&gt;
&lt;div class="line"&gt;(Optimization is not my area of expertise. Perhaps I'm way off base;
perhaps the existing solutions are so problem-domain specific that
everyone has to invent new technology. Maybe established solutions
really don't work.)&lt;/div&gt;
&lt;div class="line"&gt;More importantly: there was no actual evidence that the existing
optimization (either annealing or basin hopping) failed to solve their
problem.&lt;/div&gt;
&lt;div class="line"&gt;But the worst part was this:&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;From, a business perspective, I need to know about SA because our
competitor stole our biggest client using it.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;They don't actually want to innovate. They only want to try and catch
up by making religious war arguments over the deprecated simulated
annealing vs. basin hopping.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="scipy"></category><category term="Data Science"></category></entry><entry><title>Not sure what went wrong, but...</title><link href="https://slott56.github.io/2014_10_02-not_sure_what_went_wrong_but.html" rel="alternate"></link><published>2014-10-02T08:00:00-04:00</published><updated>2014-10-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-10-02:/2014_10_02-not_sure_what_went_wrong_but.html</id><summary type="html">&lt;p&gt;Read
this: &lt;a class="reference external" href="http://quantlabs.net/blog/2014/09/here-is-why-i-gave-up-on-python-aka-dogs-breakfeast-of-a-so-called-programming-language/#sthash.Rp7pXObf.dpuf"&gt;http://quantlabs.net/blog/2014/09/here-is-why-i-gave-up-on-python-aka-dogs-breakfeast-of-a-so-called-programming-language/#sthash.Rp7pXObf.dpuf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not sure what's going on here.&lt;/p&gt;
&lt;p&gt;&amp;quot;Script I want to run&amp;quot; seemed
clear. &lt;a class="reference external" href="http://vispy.org/examples/basics/scene/surface_plot.html#sthash.kIzbd33O.dpuf"&gt;http://vispy.org/examples/basics/scene/surface_plot.html#sthash.kIzbd33O.dpuf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rest seemed like ill-advised trips down numerous ratholes. In
particular, anything that involved …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read
this: &lt;a class="reference external" href="http://quantlabs.net/blog/2014/09/here-is-why-i-gave-up-on-python-aka-dogs-breakfeast-of-a-so-called-programming-language/#sthash.Rp7pXObf.dpuf"&gt;http://quantlabs.net/blog/2014/09/here-is-why-i-gave-up-on-python-aka-dogs-breakfeast-of-a-so-called-programming-language/#sthash.Rp7pXObf.dpuf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not sure what's going on here.&lt;/p&gt;
&lt;p&gt;&amp;quot;Script I want to run&amp;quot; seemed
clear. &lt;a class="reference external" href="http://vispy.org/examples/basics/scene/surface_plot.html#sthash.kIzbd33O.dpuf"&gt;http://vispy.org/examples/basics/scene/surface_plot.html#sthash.kIzbd33O.dpuf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rest seemed like ill-advised trips down numerous ratholes. In
particular, anything that involved Python Tools for Visual Studio seems
like a waste of time and brain calories.&lt;/p&gt;
&lt;p&gt;It's not clear at all what's not working. That's perhaps the most
frustrating thing about this kind of post.&lt;/p&gt;
&lt;p&gt;The final note, &amp;quot;Decisions decisions...&amp;quot; pointed out a simple confusion
that befuddles the technically-minded. Too many details.&lt;/p&gt;
&lt;p&gt;The decision between Python2 and 3 is trivial. There are a lot of
details, but they're irrelevant for making the decision.&lt;/p&gt;
&lt;p&gt;What package are you trying to use? It's hard to tell, but it looks like
it's vispy. If so, that's all that matters. vispy works with Python3.3,
requires numpy, and a &amp;quot;backend.&amp;quot; Install just that and nothing more. In
particular, avoid junk like Visual Studio.&lt;/p&gt;
&lt;p&gt;The Dog's Breakfast seems to be the result of chasing down lots of
details that aren't too relevant. It's hard to tell. But a scatter-shot
post claiming &amp;quot;all this is broken&amp;quot; is a hint that the author wasn't
simply following the vispy installation instructions. It could be that
they turned something simple into a dog's breakfast by chasing
irrelevant technologies all around the garden.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="numpy"></category></entry><entry><title>PyCrypto Experience</title><link href="https://slott56.github.io/2014_09_25-pycrypto_experience.html" rel="alternate"></link><published>2014-09-25T08:00:00-04:00</published><updated>2014-09-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-09-25:/2014_09_25-pycrypto_experience.html</id><summary type="html">&lt;p&gt;Let me start with a wow.
&lt;a class="reference external" href="https://www.dlitz.net/software/pycrypto/"&gt;PyCrypto&lt;/a&gt; is very nice.
Let me emphasize the add-ons that go with PyCrypto. These are as
valuable as the package itself.
Here's the story. I was working with a Java-based AES encrypter that
used the &amp;quot;PBKDF2WithHmacSHA1&amp;quot; key generator algorithm. This was part of
a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let me start with a wow.
&lt;a class="reference external" href="https://www.dlitz.net/software/pycrypto/"&gt;PyCrypto&lt;/a&gt; is very nice.
Let me emphasize the add-ons that go with PyCrypto. These are as
valuable as the package itself.
Here's the story. I was working with a Java-based AES encrypter that
used the &amp;quot;PBKDF2WithHmacSHA1&amp;quot; key generator algorithm. This was part of
a large, sophisticated web application framework that was awkward to
unit test because we didn't have a handy client to encode traffic.
We could run a second web application server with some client-focused
software on it. But that means tying up yet another developer laptop
running a web server just to encode message traffic. Wouldn't it be
nicer to have a little Python app that the testers could use to spew
messages as needed?
Yes. It would be nice. But, that the heck is the PBKDF2WithHmacSHA1
algorithm?
The JDK says this &amp;quot;Constructs secret keys using the Password-Based Key
Derivation Function function found in PKCS #5 v2.0.&amp;quot; One can do a lot of
reading when working with well-designed crypto algorithms.
After some reading, I eventually wound up
here: &lt;a class="reference external" href="https://www.dlitz.net/software/python-pbkdf2/"&gt;https://www.dlitz.net/software/python-pbkdf2/&lt;/a&gt; Perfect. A trustable
implementation of a fairly complex hash to create a proper private key
from a passphrase. An add-on to PyCrypto that saved me from attempting
to implement this algorithm myself.
The final script, then, was one line of code to invoke the pbkdf2 with
the right passphrase, salt, and parameters to generate a key. Then
another line of code to use PyCrypto's AES implementation to encrypt the
actual plaintext using starting values and the generated key.
Yep.  Two lines of working code. Layer in the two imports, a print(),
and a bit more folderol because the the character-set issues and URL
form encoding. We're still not up to anything more than a tiny script
with a command-line interface. &amp;quot;encrypt.py this&amp;quot; solved the problem.
At first we were a little upset that the key generation was so slow.
Then I read some more and learned that slow key generation is a feature.
It makes probing with a dictionary of alternative pass phrases very
expensive.
The best part?
PyCrypto worked the first time. The very first result matched the opaque
Java implementation.
The issue I have with crypto is that it's so difficult to debug. If our
Python-generated messages didn't match the Java-generated messages.
Well. Um. What went wrong? Which of the various values weren't salted or
padded or converted from Unicode to bytes or bytes to Unicode properly?
And how can you tell? The Java web app was a black box because we can't
-- easily -- instrument the code to see intermediate results.
In particular, the various values that go into PBKDF2WithHmacSHA1 were
confusing to someone who's new to crypto. And private key encryption
means that the key doesn't show up anywhere in the application logs:
it's transient data that's computed, used and garbage collected. It
would have been impossible for us to locate a problem with the key
generator.
But PyCrypto and the add-on pbkdf2 did everything we wanted.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="encryption"></category><category term="pycrypto"></category></entry><entry><title>API Testing: Quick, Dirty, and Automated</title><link href="https://slott56.github.io/2014_09_04-api_testing_quick_dirty_and_automated.html" rel="alternate"></link><published>2014-09-04T08:00:00-04:00</published><updated>2014-09-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-09-04:/2014_09_04-api_testing_quick_dirty_and_automated.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;When writing RESTful API's, the process of testing can be simple or
kind of hideous.&lt;/div&gt;
&lt;div class="line"&gt;The &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en"&gt;Postman REST
Client&lt;/a&gt;
is pretty popular for testing an API. There are others, I'm sure, but
I'm working with folks who like Postman.&lt;/div&gt;
&lt;div class="line"&gt;Postman 10 has some automation capabilities. Some.&lt;/div&gt;
&lt;div class="line"&gt;However. (And this is …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;When writing RESTful API's, the process of testing can be simple or
kind of hideous.&lt;/div&gt;
&lt;div class="line"&gt;The &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en"&gt;Postman REST
Client&lt;/a&gt;
is pretty popular for testing an API. There are others, I'm sure, but
I'm working with folks who like Postman.&lt;/div&gt;
&lt;div class="line"&gt;Postman 10 has some automation capabilities. Some.&lt;/div&gt;
&lt;div class="line"&gt;However. (And this is important.)&lt;/div&gt;
&lt;div class="line"&gt;It doesn't provide much help in framing up a valid complex JSON
message.&lt;/div&gt;
&lt;div class="line"&gt;When dealing with larger and more complex API's with larger and more
complex nested and repeating structures, considerably more help is
required to frame up a valid request and do some rational evaluation
of the response.&lt;/div&gt;
&lt;div class="line"&gt;Enter Python, httplib and json. While Python3 is universally better,
these libraries haven't changed much since Python2, so either version
will work.&lt;/div&gt;
&lt;div class="line"&gt;The idea is simple.&lt;/div&gt;
&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create templates for the eventual class definitions in Python. This
can make it easy to build the JSON structures. It can save a lot of
hoping that the JSON content is right. It can save time in
&amp;quot;exploratory&amp;quot; testing when the JSON structures are wrong.&lt;/li&gt;
&lt;li&gt;Build complex messages using the template class definitions.&lt;/li&gt;
&lt;li&gt;Send the message with httplib. Read the response.&lt;/li&gt;
&lt;li&gt;Evaluate the responses with a simple script.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some test scripting is possible in Postman. &lt;em&gt;Some&lt;/em&gt;. In Python, you've
got a complete programming language. The &amp;quot;some&amp;quot; qualifier evaporates.&lt;/div&gt;
&lt;div class="line"&gt;When it comes to things like seeding database data, Python (via
appropriate database drivers) can seed integration test databases,
also.&lt;/div&gt;
&lt;div class="line"&gt;Further, you can use the Python unittest framework to write elegant
automated script libraries and run the entire thing from the command
line in a simple, repeatable way.&lt;/div&gt;
&lt;div class="line"&gt;What's important is that the template class definitions aren't working
code. They won't evolve into working code. They're placeholders so
that we can work out API concepts quickly and develop relatively
complete and accurate pictures of what the RESTful interface will look
like.&lt;/div&gt;
&lt;div class="line"&gt;I had to dig out my copy of
&lt;a class="reference external" href="https://www.packtpub.com/application-development/mastering-object-oriented-python"&gt;https://www.packtpub.com/application-development/mastering-object-oriented-python&lt;/a&gt;
to work out the metaclass trickery required.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Model and Meta-Model Classes&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;The essential ingredient is a model class what we can use to build
objects. The objective is not a complete model of anything. The
objective is just enough model to build a complex object.&lt;/div&gt;
&lt;div class="line"&gt;Our use case looks like this.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; class P(Model):
...    attr1= String()
...    attr2= Array()
...
&amp;gt;&amp;gt;&amp;gt; class Q(Model):
...    attr3= String()
...
&amp;gt;&amp;gt;&amp;gt; example= P( attr1=&amp;quot;this&amp;quot;, attr2=[Q(attr3=&amp;quot;that&amp;quot;)] )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Our goal is to trivially build more complex JSON documents for use in
API testing.  Clearly, the class definitions are too skinny to have
much real meaning. They're handy ways to define a data structure that
provides a minimal level of validation and the possibility of
providing default values.&lt;/div&gt;
&lt;div class="line"&gt;Given this goal, we need a model class and descriptor definitions. In
addition to the model class, we'll also need a metaclass that will
help build the required objects. One feature that we really like is
keeping the class-level attributes in order. Something Python doesn't
to automatically. But something we can finesse through a metaclass and
a class-level sequence number in the descriptors.&lt;/div&gt;
&lt;div class="line"&gt;Here's the metaclass to cleanup the class __dict__. This is the
Python2.7 version because that's what we're using.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
class Meta(type):
    &amp;quot;&amp;quot;&amp;quot;Metaclass to set the ``name`` attribute of each Attr instance and provide
    the ``_attr_order`` sequence that defines the origiunal order.
    &amp;quot;&amp;quot;&amp;quot;
    def __new__( cls, name, bases, dict ):
        attr_list = sorted( (a_name
            for a_name in dict
            if isinstance(dict[a_name], Attr)), key=lambda x:dict[x].seq )
        for a_name in attr_list:
            setattr( dict[a_name], 'name', a_name )
        dict['_attr_order']= attr_list
        return super(Meta, cls).__new__( cls, name, bases, dict )

class Model(object):
    &amp;quot;&amp;quot;&amp;quot;Superclass for all model class definitions;
    includes the metaclass to tweak subclass definitions.
    This also provides a ``to_dict()`` method used for
    JSON encoding of the defined attributes.

    The __init__() method validates each keyword argument to
    assure that they match the defined attributes only.
    &amp;quot;&amp;quot;&amp;quot;
    __metaclass__= Meta
    def __init__( self, **kw ):
        for name, value in kw.items():
            if name not in self._attr_order:
                raise AttributeError( &amp;quot;{0} unknown&amp;quot;.format(name) )
            setattr( self, name, value )
    def to_dict( self ):
        od= OrderedDict()
        for name in self._attr_order:
            od[name]= getattr(self, name)
        return od
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The __new__() method assures that we have an additional _attr_order
attribute added to each class definition. The __init__() method
allows us to build an instance of a class with keyword parameters that
have a minimal sanity check imposed on them. The to_dict() method is
used to convert the object prior to making a JSON representation.&lt;/div&gt;
&lt;div class="line"&gt;Here is the superclass definition of an Attribute. We'll extend this
with other attribute specializations.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
class Attr(object):
    &amp;quot;&amp;quot;&amp;quot;A superclass for Attributes; supports a minimal
    feature set. Attribute ordering is maintained via
    a class-level counter.

    Attribute names are bound later via a metaclass
    process that provides names for each attribute.

    Attributes can have a default value if they are
    omitted.
    &amp;quot;&amp;quot;&amp;quot;
    attr_seq= 0
    default= None
    def __init__( self, *args ):
        self.seq= Attr.attr_seq
        Attr.attr_seq += 1
        self.name= None # Will be assigned by metaclass ``Meta``
    def __get__( self, instance, something ):
        return instance.__dict__.get(self.name, self.default)
    def __set__( self, instance, value ):
        instance.__dict__[self.name]= value
    def __delete__( self, *args ):
        pass
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;We've done the minimum to implement a data descriptor.  We've also
included a class-level sequence number which assures that descriptors
can be put into order inside a class definition.&lt;/div&gt;
&lt;div class="line"&gt;We can then extend this superclass to provide different kinds of
attributes. There are a few types which can help us formulate messages
properly.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
class String(Attr):
    default= &amp;quot;&amp;quot;

class Array(Attr):
    default= []

class Number(Attr):
    default= None
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The final ingredient is a JSON encoder that can handle these class
definitions.  The idea is that we're not asking for much from our
encoder. Just a smooth way to transform these classes into the
required dict objects.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
class ModelEncoder(json.JSONEncoder):
    &amp;quot;&amp;quot;&amp;quot;Extend the JSON Encoder to support our Model/Attr
    structure.
    &amp;quot;&amp;quot;&amp;quot;
    def default( self, obj ):
        if isinstance(obj,Model):
            return obj.to_dict()
        return super(NamespaceEncoder,self).default(obj)

encoder= ModelEncoder(indent=2)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The Test Cases&lt;/div&gt;
&lt;div class="line"&gt;Here is an all-important unit test case. This shows how we can define
very simple classes and create an object from those class definitions.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; class P(Model):
...    attr1= String()
...    attr2= Array()
...
&amp;gt;&amp;gt;&amp;gt; class Q(Model):
...    attr3= String()
...
&amp;gt;&amp;gt;&amp;gt; example= P( attr1=&amp;quot;this&amp;quot;, attr2=[Q(attr3=&amp;quot;that&amp;quot;)] )
&amp;gt;&amp;gt;&amp;gt; print( encoder.encode( example ) )
{
  &amp;quot;attr1&amp;quot;: &amp;quot;this&amp;quot;,
  &amp;quot;attr2&amp;quot;: [
    {
      &amp;quot;attr3&amp;quot;: &amp;quot;that&amp;quot;
    }
  ]
}
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Given two simple class structures, we can get a JSON message which we
can use for unit testing. We can use httplib to send this to the
server and examine the results.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="#python"></category></entry><entry><title>Some Basic Statistics</title><link href="https://slott56.github.io/2014_08_09-some_basic_statistics.html" rel="alternate"></link><published>2014-08-09T11:45:00-04:00</published><updated>2014-08-09T11:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-08-09:/2014_08_09-some_basic_statistics.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I've always been fascinated by the essential statistical algorithms.
While there are numerous statistical libraries, the simple measures of
central tendency (mean, media, mode, standard deviation) have some
interesting features.&lt;/div&gt;
&lt;div class="line"&gt;Well.  Interesting to me.&lt;/div&gt;
&lt;div class="line"&gt;First, some basics.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def s0( samples ):
    return len(samples) # sum(x**0 for x in samples …&lt;/pre&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I've always been fascinated by the essential statistical algorithms.
While there are numerous statistical libraries, the simple measures of
central tendency (mean, media, mode, standard deviation) have some
interesting features.&lt;/div&gt;
&lt;div class="line"&gt;Well.  Interesting to me.&lt;/div&gt;
&lt;div class="line"&gt;First, some basics.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def s0( samples ):
    return len(samples) # sum(x**0 for x in samples)

def s1( samples ):
    return sum(samples) # sum(x**1 for x in samples)

def s2( samples ):
    return sum( x**2 for x in samples )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Why define these three nearly useless functions? It's the cool factor
of how they're so elegantly related.&lt;/div&gt;
&lt;div class="line"&gt;Once we have these, though, the definitions of mean and standard
deviation become simple and kind of cool.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def mean( samples ):
    return s1(samples)/s0(samples)

def stdev( samples ):
    N= s0(samples)
    return math.sqrt((s2(samples)/N)-(s1(samples)/N)**2)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;It's not much, but it seems quite elegant. Ideally, these functions
could work from iterables instead of sequence objects, but that's
impractical in Python. We must work with a materialized sequence even
if we replace len(X) with sum(1 for _ in X).&lt;/div&gt;
&lt;div class="line"&gt;The next stage of coolness is the following version of Pearson
correlation. It involves a little helper function to normalize
samples.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def z( x, μ_x, σ_x ):
    return (x-μ_x)/σ_x
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Yes, we're using Python 3 and Unicode variable names.&lt;/div&gt;
&lt;div class="line"&gt;Here's the correlation function.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def corr( sample1, sample2 ):
    μ_1, σ_1 = mean(sample1), stdev(sample1)
    μ_2, σ_2 = mean(sample2), stdev(sample2)
    z_1 = (z(x, μ_1, σ_1) for x in sample1)
    z_2 = (z(x, μ_2, σ_2) for x in sample2)
    r = sum( zx1*zx2 for zx1, zx2 in zip(z_1, z_2) )/len(sample1)
    return r
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;I was looking for something else when I stumbled on this &amp;quot;sum of
products of normalized samples&amp;quot; version of correlation. How cool is
that? The more text-book versions of this involve lots of sigmas and
are pretty bulky-looking. This, on the other hand, is really tidy.&lt;/div&gt;
&lt;div class="line"&gt;Finally, here's least-squares linear regression.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def linest( x_list, y_list ):
    r_xy= corr( x_list, y_list )
    μ_x, σ_x= mean(x_list), stdev(x_list)
    μ_y, σ_y= mean(y_list), stdev(y_list)
    beta= r_xy * σ_y/σ_x
    alpha= μ_y - beta*μ_x
    return alpha, beta
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This, too, was buried at the end of the Wikipedia article. But it was
such an elegant formulation for least squares based on correlation.
And it leads to a tidy piece of programming. Very tidy.&lt;/div&gt;
&lt;div class="line"&gt;I haven't taken the time to actually measure the performance of these
functions and compare them with more commonly used versions.&lt;/div&gt;
&lt;div class="line"&gt;But I like the way the Python fits well with the underlying math.&lt;/div&gt;
&lt;div class="line"&gt;Not shown: The doctest tests for these functions. You can locate
sample data and insert your own doctests. It's not difficult.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="#python"></category></entry><entry><title>Building Probabilistic Graphical Models with Python</title><link href="https://slott56.github.io/2014_07_24-building_probabilistic_graphical_models_with_python.html" rel="alternate"></link><published>2014-07-24T08:00:00-04:00</published><updated>2014-07-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-07-24:/2014_07_24-building_probabilistic_graphical_models_with_python.html</id><summary type="html">&lt;p&gt;A deep dive into probability and
scipy: &lt;a class="reference external" href="https://www.packtpub.com/building-probabilistic-graphical-models-with-python/book"&gt;https://www.packtpub.com/building-probabilistic-graphical-models-with-python/book&lt;/a&gt;
I have to admit up front that this book is out of my league.
The Python is sensible to me. The subject matter -- graph models,
learning and inference -- is above my pay grade.&lt;/p&gt;
&lt;div class="section" id="asking-about-a-book"&gt;
&lt;h2&gt;Asking About a Book …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A deep dive into probability and
scipy: &lt;a class="reference external" href="https://www.packtpub.com/building-probabilistic-graphical-models-with-python/book"&gt;https://www.packtpub.com/building-probabilistic-graphical-models-with-python/book&lt;/a&gt;
I have to admit up front that this book is out of my league.
The Python is sensible to me. The subject matter -- graph models,
learning and inference -- is above my pay grade.&lt;/p&gt;
&lt;div class="section" id="asking-about-a-book"&gt;
&lt;h2&gt;Asking About a Book&lt;/h2&gt;
&lt;p&gt;Let me summarize before diving into details.&lt;/p&gt;
&lt;p&gt;Asking someone else if a book is useful is really not going to reveal
much. Their background is not my background. They found it
helpful/confusing/incomplete/boring isn't really going to indicate
anything about how I'll find it.&lt;/p&gt;
&lt;p&gt;Asking someone else for a vague, unmeasurable judgement like &amp;quot;useful&amp;quot; or
&amp;quot;appropriate&amp;quot; or &amp;quot;helpful&amp;quot; is silly. Someone else's opinions won't apply
to you.&lt;/p&gt;
&lt;p&gt;Asking if a book is technically correct is more measurable. However. Any
competent publisher has a thorough pipeline of editing. It involves at
least three steps: Acceptance, Technical Review, and a Final Review. At
least three. A good publisher will have multiple technical reviewers.
All of this is detailed in the front matter of the book.&lt;/p&gt;
&lt;p&gt;Asking someone else if the book was technically correct is like asking
if it was reviewed: a silly question. The details of the review process
are part of the book. Just check the front matter online before you buy.
It doesn't make sense to ask judgement questions. It doesn't make sense
to ask questions answered in the front matter. What can you ask that
might be helpful?&lt;/p&gt;
&lt;p&gt;I think you might be able to ask completeness questions. &amp;quot;What's omitted
from the tutorial?&amp;quot; &amp;quot;What advanced math is assumed?&amp;quot; These are things
that can be featured in online reviews.&lt;/p&gt;
&lt;p&gt;Sadly, these are not questions I get asked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="irrational-questions"&gt;
&lt;h2&gt;Irrational Questions&lt;/h2&gt;
&lt;p&gt;A colleague had some questions about the book named above. Some of
which were irrational. I'll try to tackle the rational questions since
emphasis my point on ways &lt;strong&gt;not&lt;/strong&gt; to ask questions about books.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-the-python-code-good-at-solidifying-the-mathematical-concepts"&gt;
&lt;h2&gt;2.  Is the Python code good at solidifying the mathematical concepts?&lt;/h2&gt;
&lt;p&gt;This is a definite maybe situation. The concept of &amp;quot;solidifying&amp;quot; as
expressed here bothers me a lot.&lt;/p&gt;
&lt;p&gt;Solid mathematics -- to me -- means solid mathematics. Outside &lt;strong&gt;any&lt;/strong&gt;
code considerations. I failed a math course in college because I tried
to convert everything to algorithms and did not get the math part. A
kindly professor explained that &amp;quot;F&amp;quot; very, very clearly. A life lesson.
The math exists outside any implementation.&lt;/p&gt;
&lt;p&gt;I don't think code can ever &amp;quot;solidify&amp;quot; the mathematics. It goes the
other way: the code must properly implement the mathematical concepts.
The book depends on scipy, and scipy is a really good implementation of
a great deal of advanced math. The implementation of the math sits
squarely on the rock-solid foundation of scipy. For me, that's a ringing
endorsement of the approach.&lt;/p&gt;
&lt;p&gt;If the book reinvented the algorithms available in scipy, that would be
reason for concern. The book doesn't reinvent that wheel: it uses scipy
to solve problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-the-code-be-used-to-build-prototypes"&gt;
&lt;h2&gt;4. Can the code be used to build prototypes?&lt;/h2&gt;
&lt;p&gt;Um. What? What does the word prototype mean in that question? If we use
the usual sense of software prototype, the answer is a trivial &amp;quot;Yes.&amp;quot;
The examples are prototypes in that sense. That can't be what the
question means.&lt;/p&gt;
&lt;p&gt;In this context the word might mean &amp;quot;model&amp;quot;. Or it might mean &amp;quot;prototype
of a model&amp;quot;. If we reexamine the question with those other senses of
prototype, we might have an answer that's not trivially &amp;quot;yes.&amp;quot; Might.
When they ask about prototype, could they mean &amp;quot;model?&amp;quot; The code in the
book &lt;strong&gt;is&lt;/strong&gt; a series of models of different kinds of learning. The
models are complete, consistent, and work. That can't be what they're
asking.&lt;/p&gt;
&lt;p&gt;Could they mean &amp;quot;prototype of a model?&amp;quot; It's possible that we're talking
about using the book to build a prototype of a model. For example, we
might have a large and complex problem with several more degrees of
freedom than the text book examples. In this case, perhaps we might want
to simplify the complex problem to make it more like one of the text
book problems. Then we could use Python to solve that simplified problem
as a prototype for building a final model which is appropriate for the
larger problem.&lt;/p&gt;
&lt;p&gt;In this sense of prototype, the answer remains &amp;quot;What?&amp;quot;  Clearly, the
book solves a number of simplified problems and provides code samples
that can be expanded and modified to solve larger and more complex
problems.&lt;/p&gt;
&lt;p&gt;To get past the trivial &amp;quot;yes&amp;quot; for this question, we can try to examine
this in a negative sense. What kind of thing is the book &lt;strong&gt;unsuitable&lt;/strong&gt;
for? It's unsuitable as a final implementation of anything but the six
problems it tackles. It can't be that &amp;quot;prototype&amp;quot; means &amp;quot;final
implementation.&amp;quot; The book is unsuitable as a tutorial on Python. It's
not possible this is what &amp;quot;prototype&amp;quot; means.&lt;/p&gt;
&lt;p&gt;Almost any semantics we assign to &amp;quot;prototype&amp;quot; lead to an answer of
&amp;quot;yes&amp;quot;. The book is suitable for helping someone build a lot of things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Those two were the &lt;strong&gt;rational&lt;/strong&gt; questions. The irrational questions made
even less sense.&lt;/p&gt;
&lt;p&gt;Including the other irrational questions, it appears that the real
question might have been this.&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Can I learn Python from this book?&amp;quot;&lt;/p&gt;
&lt;p&gt;A: No.&lt;/p&gt;
&lt;p&gt;It's possible that the real question was this:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Can I learn advanced probabilistic modeling with this book?&amp;quot;&lt;/p&gt;
&lt;p&gt;A: Above my pay grade. I'm not sure I could learn probabilistic modeling
from this book. Maybe I could. But I don't think that I have the depth
required.&lt;/p&gt;
&lt;p&gt;It's possible that the real questions was this:&lt;/p&gt;
&lt;p&gt;Q: Can I learn both Python and advanced probabilistic modeling with this
book?&amp;quot;&lt;/p&gt;
&lt;p&gt;A: Still No.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gaps-in-the-book"&gt;
&lt;h2&gt;Gaps In The Book&lt;/h2&gt;
&lt;p&gt;Here's what I could say about the book.&lt;/p&gt;
&lt;p&gt;You won't learn much Python from this book. It assumes Python; it
doesn't tutor Python. Indeed, it assumes some working scipy knowledge
and a scipy installation. It doesn't include a quick-start tutorial on
scipy or any of that other hand-holding.&lt;/p&gt;
&lt;p&gt;This is not even a quibble with the presentation. It's just an
observation: the examples are all written in Python 2. Small changes are
required for Python 3. Scipy will work with Python 3.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.scipy.org/scipylib/faq.html#do-numpy-and-scipy-support-python-3-x"&gt;http://www.scipy.org/scipylib/faq.html#do-numpy-and-scipy-support-python-3-x&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reworking the examples seems to involve only small changes to replace
print statements. In that respect, the presentation is excellent.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="Data Science"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>New Focus: Data Scientist</title><link href="https://slott56.github.io/2014_07_17-new_focus_data_scientist.html" rel="alternate"></link><published>2014-07-17T08:00:00-04:00</published><updated>2014-07-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-07-17:/2014_07_17-new_focus_data_scientist.html</id><summary type="html">&lt;p&gt;Read
this: &lt;a class="reference external" href="http://www.forbes.com/sites/emc/2014/06/26/the-hottest-jobs-in-it-training-tomorrows-data-scientists/"&gt;http://www.forbes.com/sites/emc/2014/06/26/the-hottest-jobs-in-it-training-tomorrows-data-scientists/&lt;/a&gt;
Interesting subject areas: Statistics, Machine Learning, Algorithms.
I've had questions about data science from folks who (somehow) felt that
calculus and differential equations were important parts of data
science. I couldn't figure out how they decided that diffeq's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read
this: &lt;a class="reference external" href="http://www.forbes.com/sites/emc/2014/06/26/the-hottest-jobs-in-it-training-tomorrows-data-scientists/"&gt;http://www.forbes.com/sites/emc/2014/06/26/the-hottest-jobs-in-it-training-tomorrows-data-scientists/&lt;/a&gt;
Interesting subject areas: Statistics, Machine Learning, Algorithms.
I've had questions about data science from folks who (somehow) felt that
calculus and differential equations were important parts of data
science. I couldn't figure out how they decided that diffeq's were
important. Their weird focus on calculus didn't seem to involve using
any data. Odd: wanting to be a data scientist, but being unable to
collect actual data.
Folks involved in data science seem to think otherwise. Calculus appears
to be a side-issue at best.
I can see that statistics are clearly important for data science.
Correlation and regression-based models appear to be really useful. I
think, perhaps, that these are the lynch-pins of much data science. Use
a sample to develop a model, confirm it over successive samples, then
apply it to the population as a whole.
Algorithms become important because doing dumb statistical processing on
large data sets can often prove to be intractable. Computing the median
of a very large set of data can be essentially impossible if the only
algorithm you know is to sort the data and find the middle-most item.
Machine learning and pattern detection may be relevant for deducing a
model that offers some predictive power. Personally, I've never worked
with this. I've only worked with actuaries and other quants who have a
model they want to confirm (or deny or improve.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="Data Science"></category></entry><entry><title>Project Euler</title><link href="https://slott56.github.io/2014_07_03-project_euler.html" rel="alternate"></link><published>2014-07-03T08:00:00-04:00</published><updated>2014-07-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-07-03:/2014_07_03-project_euler.html</id><summary type="html">&lt;p&gt;This is (was?) an epic web site:
&lt;a class="reference external" href="http://projecteuler.net/about"&gt;http://projecteuler.net/about&lt;/a&gt;
Currently, they're struggling with a security problem.
&lt;a class="reference external" href="http://forum.projecteuler.net/viewtopic.php?f=5&amp;amp;t=3591"&gt;http://forum.projecteuler.net/viewtopic.php?f=5&amp;amp;t=3591&lt;/a&gt;
Years ago, I found the site and quickly reached Level 2 by solving a
flood of easy problems.
Recently, a recruiter strongly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is (was?) an epic web site:
&lt;a class="reference external" href="http://projecteuler.net/about"&gt;http://projecteuler.net/about&lt;/a&gt;
Currently, they're struggling with a security problem.
&lt;a class="reference external" href="http://forum.projecteuler.net/viewtopic.php?f=5&amp;amp;t=3591"&gt;http://forum.projecteuler.net/viewtopic.php?f=5&amp;amp;t=3591&lt;/a&gt;
Years ago, I found the site and quickly reached Level 2 by solving a
flood of easy problems.
Recently, a recruiter strongly suggested reviewing problems on Project
Euler as preparation for a job interview.
It was fun! I restarted my quest for being a higher-level solver.
Then they took the solution checking (and score-keeping) features
off-line.
So now I have to content myself with cleaning up my previous solutions
to make them neat and readable and improve the performance in some
areas.
I -- of course -- cannot share the answers. But, I can (and will) share
some advice on how to organize your thinking as you tackle these kinds
of algorithmically difficult problems.
My personal preference is to rewrite the entire thing in Django. It
would probably take a month or two. Then migrate the data. That way I
could use RST markup for the problems and the MathJax add-on that
docutils uses to format math. But. That's just me.
I should probably take a weekend and brainstorm the functionality that I
can recall and build a prototype. But I'm having too much fun solving
the problems instead of solving the problem of presenting the problems.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="algorithm"></category><category term="project euler"></category></entry><entry><title>The Permissions Issue</title><link href="https://slott56.github.io/2014_06_30-the_permissions_issue.html" rel="alternate"></link><published>2014-06-30T20:39:00-04:00</published><updated>2014-06-30T20:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-06-30:/2014_06_30-the_permissions_issue.html</id><summary type="html">&lt;p&gt;Why?
Why are Enterprise Computers so hard to use? What is it about computers
that terrifies corporate IT?
They're paying lots of money to have me sit around and wait for
mysterious approver folks to decide if I can be given permission to
install development tools. (Of course, the real …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Why?
Why are Enterprise Computers so hard to use? What is it about computers
that terrifies corporate IT?
They're paying lots of money to have me sit around and wait for
mysterious approver folks to decide if I can be given permission to
install development tools. (Of course, the real work is done by
off-shore subcontractors who are (a) overworked and (b) simply reviewing
a decision matrix.)
And they ask, &amp;quot;Are you getting everything you need?&amp;quot;
The answer is universally &amp;quot;No, I'm not getting what I need.&amp;quot;
Universally. But I can't say that.
You want me to develop software. And you simultaneously erect massive,
institutional roadblocks to prevent me from developing software.
I have yet to work somewhere without roadblocks that effectively prevent
development.
And I know that some vague &amp;quot;security considerations&amp;quot; trump any
productive approach to doing software development. I know that there's
really no point in trying to explain that I'm not making progress
because I can't actually do anything. And you're stopping me from doing
anything.
My first two weeks at every client:
The client tried to &amp;quot;expedite&amp;quot; my arrival by requesting the PC early, so
it would be available on day 1. It wasn't. A temporary PC is -- of
course -- useless. But that's the balance of days 1-5: piddling around
with the temporary PC. That was ordered two weeks earlier.
Day 6 begins with the real PC. It's actually too small for serious
development due to an oversight in bringing me on as a developer, but
not ordering a developer's PC for me. I'll deal. Things will be slow.
That's okay. Some day, you'll discover that I'm wasting time waiting for
each build and unit test suite. Right now, I'm doing nothing, so I have
no basis to complain.
Day 7 reveals that I need to fill in a form to have the PC you assigned
me &amp;quot;unlocked.&amp;quot; Without this, I cannot install any development tools.
In order to fill in the form, I need to run an in-house app. Which is
known by several names, none of which appear on the intranet site. Day 8
is lost to searching, making some confused phone calls, and waiting for
someone to get back to me with something.
Oh. And the email you sent on Day 9 had a broken link. That's not the
in-house app anymore. It may have been in the past. But it's not.
Day 10 is looking good. The development request has been rejected
because I -- as an outsider -- can't make the request to unlock a PC
directly. It has to be made by someone who's away visiting customers or
off-shore developers or something.
Remember. This is the two weeks I'm on site. The whole order started 10
business days earlier with the request for the wrong PC without
appropriate developer permissions.&lt;/p&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="software process improvement"></category></entry><entry><title>Package Deal for Learning Python</title><link href="https://slott56.github.io/2014_06_26-package_deal_for_learning_python.html" rel="alternate"></link><published>2014-06-26T08:00:00-04:00</published><updated>2014-06-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-06-26:/2014_06_26-package_deal_for_learning_python.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you're very new to programming in general, Python's a great place
to start.&lt;/div&gt;
&lt;div class="line"&gt;There are many, many tutorials. I won't even try to summarize them.
They're generally good. And the more you read, the more you learn.&lt;/div&gt;
&lt;div class="line"&gt;Moving past the n00bz needs, there are some more advanced books.
Here's …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you're very new to programming in general, Python's a great place
to start.&lt;/div&gt;
&lt;div class="line"&gt;There are many, many tutorials. I won't even try to summarize them.
They're generally good. And the more you read, the more you learn.&lt;/div&gt;
&lt;div class="line"&gt;Moving past the n00bz needs, there are some more advanced books.
Here's a collection for generalists:&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.packtpub.com/python-3-object-oriented-programming/book"&gt;http://www.packtpub.com/python-3-object-oriented-programming/book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.packtpub.com/learning-python-design-patterns/book"&gt;http://www.packtpub.com/learning-python-design-patterns/book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.packtpub.com/mastering-object-oriented-python/book"&gt;http://www.packtpub.com/mastering-object-oriented-python/book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;My suggestion is to master the general features of the language
overall.&lt;/div&gt;
&lt;div class="line"&gt;Focus on specific things (Django, NLTK, SciPy, Maya, Scrapy,
MatPlotLib, etc.) can follow.&lt;/div&gt;
&lt;div class="line"&gt;I worry that early exposure to some of the details of Python-based
packages may obscure the fundamentals of using the language properly.
Perhaps that worry is misplaced. I know that the &lt;a class="reference external" href="http://www.nltk.org/book/"&gt;NLTK
Book&lt;/a&gt; has numerous good examples of
Python which are independent of the NLTK focus.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="mastering object-oriented python"></category></entry><entry><title>The Swift Programming Language</title><link href="https://slott56.github.io/2014_06_19-the_swift_programming_language.html" rel="alternate"></link><published>2014-06-19T08:00:00-04:00</published><updated>2014-06-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-06-19:/2014_06_19-the_swift_programming_language.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://developer.apple.com/swift/"&gt;https://developer.apple.com/swift/&lt;/a&gt;
This lowers the bar for entry to the iOS market.
Does it also lower the bar for Mac OS X?
Can it be used to write command-line command-line applications
(&amp;quot;scripts&amp;quot;)? It has a REPL, which means it can do a kind of
&amp;quot;just-in-time&amp;quot; compile and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://developer.apple.com/swift/"&gt;https://developer.apple.com/swift/&lt;/a&gt;
This lowers the bar for entry to the iOS market.
Does it also lower the bar for Mac OS X?
Can it be used to write command-line command-line applications
(&amp;quot;scripts&amp;quot;)? It has a REPL, which means it can do a kind of
&amp;quot;just-in-time&amp;quot; compile and run. This is how Python works, so perhaps
this is a viable mode for using Swift.
Via the Objective-C and C compatibility, it has full access to the POSIX
libraries, as well as Cocoa, so it can clearly be used to build
command-line apps. It might lack the flexibility of Python, since it's
compiled. But C (C++, Objective-C) with automated memory management is
still a gigantic victory for writing fast and reliable programs.
Can it be plugged into Apache to write backend applications? It's
compiled, and compatible with C and Objective-C. So, one can imagine
that a mod-swift component in Apache might be possible. It might be
better to work through existing FCGI interfaces and write stand-alone
Swift back-ends. This would require a bunch of libraries for database
API's, template rendering, request and response processing, and the
various bits and pieces that make up a rich web development environment.
But this is largely available for C and C++, making it available to
Swift-based backends.
Is one language even a desirable goal?
The idea of having one official version of the class definitions seems
very helpful for capturing knowledge and managing the intellectual
property that is embodied in application logic.&lt;/p&gt;
</content><category term="Technologies"></category><category term="iOS"></category><category term="swift"></category><category term="#python"></category></entry><entry><title>Grace Murray Hopper</title><link href="https://slott56.github.io/2014_06_05-grace_murray_hopper.html" rel="alternate"></link><published>2014-06-05T08:00:00-04:00</published><updated>2014-06-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-06-05:/2014_06_05-grace_murray_hopper.html</id><content type="html">&lt;p&gt;Read
this: &lt;a class="reference external" href="https://www.indiegogo.com/projects/born-with-curiosity-the-grace-hopper-documentary#home"&gt;https://www.indiegogo.com/projects/born-with-curiosity-the-grace-hopper-documentary#home&lt;/a&gt;
Consider donating to preserve history.
Read
this: &lt;a class="reference external" href="http://www.i-programmer.info/news/82-heritage/7368-crowd-fund-film-about-grace-hopper.html"&gt;http://www.i-programmer.info/news/82-heritage/7368-crowd-fund-film-about-grace-hopper.html&lt;/a&gt;
Her legacy is often overshadowed by folks like Bill Gates and Steve
Jobs.&lt;/p&gt;
</content><category term="Technologies"></category><category term="COBOL"></category></entry><entry><title>Stingray 4.4 Update -- the Posix split command applied to COBOL files</title><link href="https://slott56.github.io/2014_05_29-stingray_44_update_the_posix_split_command_applied_to_cobol_files.html" rel="alternate"></link><published>2014-05-29T08:00:00-04:00</published><updated>2014-05-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-05-29:/2014_05_29-stingray_44_update_the_posix_split_command_applied_to_cobol_files.html</id><summary type="html">&lt;p&gt;Here's an interesting problem. Implement the
&lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/split.1.html"&gt;split&lt;/a&gt; command
for mainframe COBOL EBCDIC files with their BDW and RDW headers.&lt;/p&gt;
&lt;p&gt;The conventional &lt;strong&gt;split&lt;/strong&gt; can't handle COBOL EBCDIC files because
they don't have sensible \n line breaks. Translating an EBCDIC file
to ASCII is high-risk because COMP and COMP-3 fields will be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's an interesting problem. Implement the
&lt;a class="reference external" href="http://man7.org/linux/man-pages/man1/split.1.html"&gt;split&lt;/a&gt; command
for mainframe COBOL EBCDIC files with their BDW and RDW headers.&lt;/p&gt;
&lt;p&gt;The conventional &lt;strong&gt;split&lt;/strong&gt; can't handle COBOL EBCDIC files because
they don't have sensible \n line breaks. Translating an EBCDIC file
to ASCII is high-risk because COMP and COMP-3 fields will be trashed
by the translation.&lt;/p&gt;
&lt;p&gt;If the files include Occurs Depending On, then the FTP transfer
&lt;strong&gt;should&lt;/strong&gt; include the RDW/BDW headers. The SITE RDW (or LOCSITE RDW)
are essential. It's much faster to include this overhead. Stingray
can process files without the headers, but it's slower.&lt;/p&gt;
&lt;p&gt;There are two essential Python techniques for building file splitters
than involve parsing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The itertools.groupby() function.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;with&lt;/strong&gt; statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Along with this, we need an iterator over the underlying records.
For example, the stingray.cobol.RECFM subclasses will parse the
various mainframe RECFM options and iterate over records or
records+RDW headers or blocks (BDW headers plus records with RDW
headers.&lt;/p&gt;
&lt;p&gt;The itertools.groupby() function can break a record iterator into
groups based on some group-by criteria. We can use this to break into
sequential batches.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
itertools.groupby( enumerate(reader), lambda x: x[0]//batch_size )
&lt;/pre&gt;
&lt;p&gt;This expression will break the iterable, reader, into groups each of
which has a size of batch_size records. The last group will have
total%batch_size records.&lt;/p&gt;
&lt;p&gt;The with statement allows us to make each individual group into a
separate context. This assures that each file is properly opened and
closed no matter what kinds of exceptions are raised.&lt;/p&gt;
&lt;p&gt;Here's a typical script.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import itertools
import stringray.cobol
import collections
import pprint

batch_size= 1000
counts= collections.defaultdict(int)
with open( &amp;quot;some_file.schema&amp;quot;, &amp;quot;rb&amp;quot; ) as source:
    reader= stringray.cobol.RECFM_VB( source ).bdw_iter()
    batches= itertools.groupby(enumerate(reader), lambda x: x[0]//batch_size):
    for group, group_iter in batches:
        with open( &amp;quot;some_file_{0}.schema&amp;quot;.format(group), &amp;quot;wb&amp;quot; ) as target:
        for id, row in group_iter:
            target.write( row )
            counts['rows'] += 1
            counts[str(group)] += 1
pprint.pprint( dict(counts) )
&lt;/pre&gt;
&lt;p&gt;There are several possible variations on the construction of the
reader object.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cobol.RECFM_F( source ).record_iter() -- result is RECFM_F.&lt;/li&gt;
&lt;li&gt;cobol.RECFM_F( source ).rdw_iter() -- result is RECFM_V; RDW's have been added.&lt;/li&gt;
&lt;li&gt;cobol.RECFM_V( source ).rdw_iter() -- result is RECFM_V; RDW's have been preserved.&lt;/li&gt;
&lt;li&gt;cobol.RECFM_VB( source ).rdw_iter() -- result is RECFM_V; RDW's have been preserved; BDW's have been discarded.&lt;/li&gt;
&lt;li&gt;cobol.RECFM_VB( source ).bdw_iter() -- result is RECFM_VB; BDW's and RDW's have been preserved. The batch size is the number of blocks, not the number of records.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should allow slicing up a massive mainframe file into pieces for
parallel processing.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="RECFM"></category><category term="EBCDIC"></category><category term="COBOL"></category><category term="mastering object-oriented python"></category></entry><entry><title>Python Package Design, Refactoring and the Stingray Reader Project</title><link href="https://slott56.github.io/2014_05_22-python_package_design_refactoring_and_the_stingray_reader_project.html" rel="alternate"></link><published>2014-05-22T08:00:00-04:00</published><updated>2014-05-22T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-05-22:/2014_05_22-python_package_design_refactoring_and_the_stingray_reader_project.html</id><summary type="html">&lt;p&gt;We'll be digging into &lt;a class="reference external" href="http://www.packtpub.com/mastering-object-oriented-python/book"&gt;Mastering Object-Oriented
Python&lt;/a&gt;.
Chapter 17, specifically.&lt;/p&gt;
&lt;p&gt;We'll also be looking at a big refactoring of the &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;Stingray
Schema-Based File
Reader&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can identify three species of packages.&lt;/p&gt;
&lt;p&gt;One common design is a &lt;strong&gt;Simple Package&lt;/strong&gt;. A directory with an empty
&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file. This package name becomes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We'll be digging into &lt;a class="reference external" href="http://www.packtpub.com/mastering-object-oriented-python/book"&gt;Mastering Object-Oriented
Python&lt;/a&gt;.
Chapter 17, specifically.&lt;/p&gt;
&lt;p&gt;We'll also be looking at a big refactoring of the &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;Stingray
Schema-Based File
Reader&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can identify three species of packages.&lt;/p&gt;
&lt;p&gt;One common design is a &lt;strong&gt;Simple Package&lt;/strong&gt;. A directory with an empty
&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file. This package name becomes a qualifier for the
internal module names. The package is simply a namespace for modules.
We’ll use the package with something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import package.module
&lt;/pre&gt;
&lt;p&gt;Another common design is the &lt;strong&gt;Module-Package&lt;/strong&gt;. This is a package
which appears to be a module.  It will have a larger and more
sophisticated &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; that is a effectively, a  module
definition. There are two variations on this theme. Sometimes we'll
use this during the early stages of development because we don't know
if the package will get really big or stay small. If we start out with
a package and all the code is in the &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt;, we can refactor
down to a module.&lt;/p&gt;
&lt;p&gt;The more common use for a module-package is to have the &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt;
import objects or other modules from the package directory. Or, it can
stand as a part of a larger design that includes the top-level module
and the qualified sub-modules. We’ll use the package with something
like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import package
&lt;/pre&gt;
&lt;p&gt;or perhaps&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from package import thing
&lt;/pre&gt;
&lt;p&gt;The third common pattern is a package where the &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; selects
among alternative implementations. The os module is a good example of
this. We’ll use the package with something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import package
&lt;/pre&gt;
&lt;p&gt;Knowing that it did something roughly like the following for us.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import package.implementation as package
&lt;/pre&gt;
&lt;div class="section" id="refactoring-module-to-package"&gt;
&lt;h2&gt;Refactoring Module to Package&lt;/h2&gt;
&lt;p&gt;The Stingray angle on this is the need to add iWork '13 numbers to the
collection of spreadsheets which it can parse. The iWork '13 format is
unique.&lt;/p&gt;
&lt;p&gt;Previously, all of the spreadsheets fell into three families:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSV or CSV-like. Simple text.&lt;/li&gt;
&lt;li&gt;XLS. We relied on &lt;a class="reference external" href="https://pypi.python.org/pypi/xlrd/0.9.3"&gt;https://pypi.python.org/pypi/xlrd/0.9.3&lt;/a&gt; to make sense of .XLS files.&lt;/li&gt;
&lt;li&gt;XML-based. We parsed the XML and located sheets, rows and cells.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iWork '13 uses Snappy compress and Protobuf Serialization. Without
some documentation, the files would be incomprehensible.  Read this:
See &lt;a class="reference external" href="https://github.com/obriensp/iWorkFileFormat"&gt;https://github.com/obriensp/iWorkFileFormat&lt;/a&gt;. Brilliant.&lt;/p&gt;
&lt;p&gt;The previous releases of Stingray had a single, large module to
handle a variety of workbook formats. Folding iWork '13 into this
module would have been lunacy. It was already large to the point of
being painful to understand.&lt;/p&gt;
&lt;p&gt;The original module will be transparently turned into Module-Package.
The API (import stingray.workbook or from stingray.workbook import
SomeClass) will remain the same.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;The implementation will involve a package with each workbook format
as a separate module inside that package. At the top, the
&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; will include code like the following.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from stingray.workbook.csv import CSV_Workbook
from stingray.workbook.xls import XLS_Workbook
from stingray.workbook.xlsx import XLSX_Workbook
from stingray.workbook.ods import ODS_Workbook
from stingray.workbook.numbers_09 import Numbers09_Workbook
from stingray.workbook.numbers_13 import Numbers13_Workbook
from stingray.workbook.fixed import Fixed_Workbook
&lt;/pre&gt;
&lt;p&gt;This has the advantage of allowing us to include additional
parsing cruft in each module that's not part of the exposed API in
the workbook package.
The &lt;a class="reference external" href="http://www.packtpub.com/mastering-object-oriented-python/book"&gt;Mastering Object-Oriented
Python&lt;/a&gt; book
has more details on this kind of design.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category><category term="architecture"></category><category term="stingray reader"></category><category term="refactoring"></category><category term="mastering object-oriented python"></category></entry><entry><title>Want a copy of Mastering Object-Oriented Python? Free?</title><link href="https://slott56.github.io/2014_05_15-want_a_copy_of_mastering_object_oriented_python_free.html" rel="alternate"></link><published>2014-05-15T08:00:00-04:00</published><updated>2014-05-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-05-15:/2014_05_15-want_a_copy_of_mastering_object_oriented_python_free.html</id><summary type="html">&lt;p&gt;Want a copy free? See this
contest: &lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2014/05/12/ebook-contest-win-a-free-copy-of-mastering-object-oriented-python/"&gt;http://www.blog.pythonlibrary.org/2014/05/12/ebook-contest-win-a-free-copy-of-mastering-object-oriented-python/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're really interested, I can sign a copy.  That will double the
shipping cost, so perhaps that's not the best idea.&lt;/p&gt;
&lt;p&gt;The bad news is that the errata have started to trickle in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Want a copy free? See this
contest: &lt;a class="reference external" href="http://www.blog.pythonlibrary.org/2014/05/12/ebook-contest-win-a-free-copy-of-mastering-object-oriented-python/"&gt;http://www.blog.pythonlibrary.org/2014/05/12/ebook-contest-win-a-free-copy-of-mastering-object-oriented-python/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're really interested, I can sign a copy.  That will double the
shipping cost, so perhaps that's not the best idea.&lt;/p&gt;
&lt;p&gt;The bad news is that the errata have started to trickle in. Some of the
default serialization cases in chapter 9 aren't handled properly. The
demonstrations don't exercise the defaults very well, so things happen
to work for me, but don't work when generalized or pulled out of
context.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;What's important -- I guess -- is that we have a critical mass of
readers who are applying the concepts and finding problems.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="mastering object-oriented python"></category></entry><entry><title>Mastering Object-Oriented Python</title><link href="https://slott56.github.io/2014_05_09-mastering_object_oriented_python.html" rel="alternate"></link><published>2014-05-09T08:00:00-04:00</published><updated>2014-05-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-05-09:/2014_05_09-mastering_object_oriented_python.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="http://www.packtpub.com/mastering-object-oriented-python/book"&gt;http://www.packtpub.com/mastering-object-oriented-python/book&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Coming soon.&lt;/div&gt;
&lt;div class="line"&gt;This is relatively deep, under-the-hood stuff for folks who want to
master the Python feature set.&lt;/div&gt;
&lt;div class="line"&gt;Here's the overview of what you get:&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0 &lt;em&gt;Some Preliminaries&lt;/em&gt; 3 examples, 56 lines&lt;/li&gt;
&lt;li&gt;1 &lt;em&gt;The __init__() Method&lt;/em&gt; 55 examples, 351 lines&lt;/li&gt;
&lt;li&gt;2 &lt;em&gt;Integrating Seamlessly …&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="http://www.packtpub.com/mastering-object-oriented-python/book"&gt;http://www.packtpub.com/mastering-object-oriented-python/book&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Coming soon.&lt;/div&gt;
&lt;div class="line"&gt;This is relatively deep, under-the-hood stuff for folks who want to
master the Python feature set.&lt;/div&gt;
&lt;div class="line"&gt;Here's the overview of what you get:&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0 &lt;em&gt;Some Preliminaries&lt;/em&gt; 3 examples, 56 lines&lt;/li&gt;
&lt;li&gt;1 &lt;em&gt;The __init__() Method&lt;/em&gt; 55 examples, 351 lines&lt;/li&gt;
&lt;li&gt;2 &lt;em&gt;Integrating Seamlessly with Python: Basic Special Methods&lt;/em&gt; 92
examples, 558 lines&lt;/li&gt;
&lt;li&gt;3 &lt;em&gt;Attribute Access, Properties, and Descriptors&lt;/em&gt; 33 examples, 310
lines&lt;/li&gt;
&lt;li&gt;4 &lt;em&gt;The ABC's of Consistent Design&lt;/em&gt; 18 examples, 108 lines&lt;/li&gt;
&lt;li&gt;5 &lt;em&gt;Using Callables and Contexts&lt;/em&gt; 17 examples, 214 lines&lt;/li&gt;
&lt;li&gt;6 &lt;em&gt;Creating Containers and Collections&lt;/em&gt; 50 examples, 438 lines&lt;/li&gt;
&lt;li&gt;7 &lt;em&gt;Creating Numbers&lt;/em&gt; 12 examples, 232 lines&lt;/li&gt;
&lt;li&gt;8 &lt;em&gt;Decorators And Mixins – Cross Cutting Aspects&lt;/em&gt; 39 examples, 233
lines&lt;/li&gt;
&lt;li&gt;9 &lt;em&gt;Serializing and Saving: JSON, YAML, Pickle, CSV and XML&lt;/em&gt; 77
examples, 648 lines&lt;/li&gt;
&lt;li&gt;10 &lt;em&gt;Storing and Retrieving Objects via shelve&lt;/em&gt; 34 examples, 272 lines&lt;/li&gt;
&lt;li&gt;11 &lt;em&gt;Storing and Retrieving Objects via SQLite&lt;/em&gt; 45 examples, 410 lines&lt;/li&gt;
&lt;li&gt;12 &lt;em&gt;Transmitting and Sharing Objects&lt;/em&gt; 38 examples, 388 lines&lt;/li&gt;
&lt;li&gt;13 &lt;em&gt;Configuration Files and Persistence&lt;/em&gt;  59 examples, 490 lines&lt;/li&gt;
&lt;li&gt;14 &lt;em&gt;The Logging and Warning Modules&lt;/em&gt; 46 examples, 343 lines&lt;/li&gt;
&lt;li&gt;15 &lt;em&gt;Designing for Testability&lt;/em&gt; 38 examples, 393 lines&lt;/li&gt;
&lt;li&gt;16 &lt;em&gt;Coping With The Command Line&lt;/em&gt;  42 examples, 222 lines&lt;/li&gt;
&lt;li&gt;17 &lt;em&gt;Module and Package Design&lt;/em&gt;  31 examples, 93 lines&lt;/li&gt;
&lt;li&gt;18 &lt;em&gt;Quality and Documentation&lt;/em&gt;  42 examples, 269 lines&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Preface&lt;/em&gt; 3 examples, 12 lines&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bonus Chapter 1 Archives and Directories&lt;/em&gt;  11 examples, 119 lines&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bonus Chapter 2 Case Study: Document Analysis&lt;/em&gt;  39 examples, 308
lines&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;824 examples, 6467 lines&lt;/div&gt;
&lt;div class="line"&gt;Yes. That's a lot of code. It's relentless.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category><category term="mastering object-oriented python"></category></entry><entry><title>Literate Programming with pyWeb 2.3</title><link href="https://slott56.github.io/2014_04_24-literate_programming_with_pyweb_23.html" rel="alternate"></link><published>2014-04-24T08:00:00-04:00</published><updated>2014-04-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-04-24:/2014_04_24-literate_programming_with_pyweb_23.html</id><summary type="html">&lt;p&gt;Updates completed.
See &lt;a class="reference external" href="https://sourceforge.net/projects/pywebtool/"&gt;https://sourceforge.net/projects/pywebtool/&lt;/a&gt; and &lt;a class="reference external" href="http://pywebtool.sourceforge.net/"&gt;http://pywebtool.sourceforge.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The list of changes is extensive.&lt;/p&gt;
&lt;p&gt;However, the essential API and the markup language for creating
literate programs hasn't (significantly) changed. A few experimental
features were replaced with a first-class implementation.&lt;/p&gt;
&lt;p&gt;The interesting (to me) bit is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Updates completed.
See &lt;a class="reference external" href="https://sourceforge.net/projects/pywebtool/"&gt;https://sourceforge.net/projects/pywebtool/&lt;/a&gt; and &lt;a class="reference external" href="http://pywebtool.sourceforge.net/"&gt;http://pywebtool.sourceforge.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The list of changes is extensive.&lt;/p&gt;
&lt;p&gt;However, the essential API and the markup language for creating
literate programs hasn't (significantly) changed. A few experimental
features were replaced with a first-class implementation.&lt;/p&gt;
&lt;p&gt;The interesting (to me) bit is this sequence of events.&lt;/p&gt;
&lt;p&gt;I started out using &lt;a class="reference external" href="https://wiki.python.org/moin/LeoEditor"&gt;Leo&lt;/a&gt;
and &lt;a class="reference external" href="http://interscript.sourceforge.net/"&gt;Interscript&lt;/a&gt; as a
literate programming tools. They worked. But they were larger and
clunky and I wasn't happy.&lt;/p&gt;
&lt;p&gt;I wrote my own too, not &lt;strong&gt;really&lt;/strong&gt; getting the use cases.&lt;/p&gt;
&lt;p&gt;I found &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;pyLit&lt;/a&gt; and liked it a
lot. For a long time, I liked it better than my own
&lt;a class="reference external" href="https://sourceforge.net/projects/pywebtool/"&gt;pyWeb&lt;/a&gt; tool.&lt;/p&gt;
&lt;p&gt;Then I ran across some problem domains for which pyLit didn't work out
well. It's not that I've abandoned pyLit, but I believe I'll focus
more on pyWeb.&lt;/p&gt;
&lt;div class="section" id="the-awkward-problem-domains"&gt;
&lt;h2&gt;The Awkward Problem Domains&lt;/h2&gt;
&lt;p&gt;Here are the two awkward problem domains.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Historical Story Lines&lt;/strong&gt;. In some cases, we want to describe a
module or package based on the path of exploration. Rather than
simply drop the design, we want to show the path followed which lead
to the design. This can be helpful for certain kinds of pedagogical
exercises where we're steering the reader through a process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complex Packages that Don't Follow Python's Presentation Order&lt;/strong&gt;.
In some cases, we need to present things out of order. Python
constrains us to have docstring and imports first. Our class
definitions must proceed in &amp;quot;dependency&amp;quot; order. But this may not be
the best order for explanation. Sometimes, we want to start with the
&amp;quot;def main():&amp;quot; function first to explain &lt;strong&gt;why&lt;/strong&gt; a class looks the way
it does.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyWeb handles these nicely.  One of the handiest things is this for
out-of-order presentation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;d Some Class... &amp;#64;{

class TheClass:
    etc.
&amp;#64;}

This class uses the following imports

&amp;#64;d Imports...&amp;#64;{
import this
import that
&amp;#64;}
&lt;/pre&gt;
&lt;p&gt;We can then scatter imports through the documentation in the relevant
places. And they &lt;strong&gt;follow&lt;/strong&gt; the more interesting material.&lt;/p&gt;
&lt;p&gt;When it comes to final assembly, we have this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;o some_module.py &amp;#64;{
    &amp;#64;&amp;lt;Imports for this module&amp;#64;&amp;gt;
    &amp;#64;&amp;lt;Some Class that does the real work of this module&amp;#64;&amp;gt;
&amp;#64;}
&lt;/pre&gt;
&lt;p&gt;This builds the module, tangling the imports into one cluster up
front, and putting the class definition later.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>Stingray 4.3 Update</title><link href="https://slott56.github.io/2014_04_17-stingray_43_update.html" rel="alternate"></link><published>2014-04-17T08:00:00-04:00</published><updated>2014-04-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-04-17:/2014_04_17-stingray_43_update.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;https://sourceforge.net/projects/stingrayreader/&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some small improvements to the COBOL DDE parsing.&lt;/li&gt;
&lt;li&gt;A sensible demo program that shows how to read COBOL files.&lt;/li&gt;
&lt;li&gt;A complete rewrite to Python3.3.&lt;/li&gt;
&lt;li&gt;Support for more COBOL syntax.&lt;/li&gt;
&lt;li&gt;Support for Occurs Depending On&lt;/li&gt;
&lt;li&gt;Support for RECFM=F, RECFM=V and RECFM=VB …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;https://sourceforge.net/projects/stingrayreader/&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some small improvements to the COBOL DDE parsing.&lt;/li&gt;
&lt;li&gt;A sensible demo program that shows how to read COBOL files.&lt;/li&gt;
&lt;li&gt;A complete rewrite to Python3.3.&lt;/li&gt;
&lt;li&gt;Support for more COBOL syntax.&lt;/li&gt;
&lt;li&gt;Support for Occurs Depending On&lt;/li&gt;
&lt;li&gt;Support for RECFM=F, RECFM=V and RECFM=VB legacy files.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The support for Occurs Depending On is a Big Sweaty Deal (BSD™). It
breaks the essential structure for calculating offset and size of data
items in a fixed file schema. It breaks it badly. We wind up with a
fairly complex recursive calculation in the general case of variably
located items.&lt;/div&gt;
&lt;div class="line"&gt;We'll address ODS and Numbers spreadsheets with a somewhat cleaner
implementation, also. I figured out how ElementTree QNames work. I
regret the ignorant misuse of namespaces in previously posted code.
This will be part of release 4.4 or later.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="COBOL"></category></entry><entry><title>The SortedContainers Package for Python</title><link href="https://slott56.github.io/2014_04_10-the_sortedcontainers_package_for_python.html" rel="alternate"></link><published>2014-04-10T08:00:00-04:00</published><updated>2014-04-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-04-10:/2014_04_10-the_sortedcontainers_package_for_python.html</id><summary type="html">&lt;p&gt;See this: &lt;a class="reference external" href="http://www.grantjenks.com/docs/sortedcontainers/"&gt;SortedContainers — sortedcontainers 0.6.0
documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's some text from the invitation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;You may find the the performance comparison and implementation
details interesting because it doesn't use any sophisticated tree
data structure or balancing algorithms. It's a great example of
taking advantage of what processors are good at …&lt;/em&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;See this: &lt;a class="reference external" href="http://www.grantjenks.com/docs/sortedcontainers/"&gt;SortedContainers — sortedcontainers 0.6.0
documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's some text from the invitation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;em&gt;You may find the the performance comparison and implementation
details interesting because it doesn't use any sophisticated tree
data structure or balancing algorithms. It's a great example of
taking advantage of what processors are good at rather than what
theory says should be fast.&lt;/em&gt;&lt;/blockquote&gt;
&lt;p&gt;The documentation is extensive. The implementation details are
interesting. The claim of faster is supported nicely. I have two
quibbles.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It actually &lt;strong&gt;does&lt;/strong&gt; use a sophisticated tree data structure. A list of lists really is a kind of tree.&lt;/li&gt;
&lt;li&gt;&amp;quot;rather than what theory says should be fast&amp;quot; doesn't make any sense to me at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A claim that Computer Science theory isn't right bothers me. If
theory says some algorithm is fast, there are only two possibilities:
(1) theory is actually right and it really is fast and the
demonstration was incomplete or (2) the theory is incomplete, and the
implementation extends (or replaces) the old theory; the
implementation is &lt;strong&gt;new&lt;/strong&gt; theory.&lt;/p&gt;
&lt;p&gt;It's never the case that theory is &amp;quot;wrong.&amp;quot; That fails to understand
the role of theory.&lt;/p&gt;
&lt;p&gt;It's always the case that an implementation either &lt;strong&gt;confirms&lt;/strong&gt;
theory or &lt;strong&gt;extends&lt;/strong&gt; theory with new results.&lt;/p&gt;
&lt;p&gt;To me, this package demonstrates one of two things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The theory was incomplete and this package is a new theory that replaces the old, wrong theory.&lt;/li&gt;
&lt;li&gt;The theory was right and this package demonstrates that the theory was right by being a good, solid, usable implementation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would suggest the second option here: this package shows the
value of Python's list-of-lists as a high-performance technique
for implementing sorted structures. It's not an example of &amp;quot;taking
advantage of what processors are good at.&amp;quot; This is an example of
using Python &lt;strong&gt;properly&lt;/strong&gt; to squeeze excellent performance out of
the available structures.&lt;/p&gt;
&lt;p&gt;The really important insight is this &amp;quot;The sorted container types are
implemented based on a single observation: bisect.insort is fast,
really fast.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a profound observation.  Read more
here: &lt;a class="reference external" href="http://www.grantjenks.com/docs/sortedcontainers/implementation.html"&gt;http://www.grantjenks.com/docs/sortedcontainers/implementation.html&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="#python"></category><category term="object-oriented design"></category></entry><entry><title>Preconceived Notions, Perceptual Narrowing, The Einstellung Effect</title><link href="https://slott56.github.io/2014_03_27-preconceived_notions_perceptual_narrowing_the_einstellung_effect.html" rel="alternate"></link><published>2014-03-27T08:00:00-04:00</published><updated>2014-03-27T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-03-27:/2014_03_27-preconceived_notions_perceptual_narrowing_the_einstellung_effect.html</id><summary type="html">&lt;p&gt;Read this &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Einstellung_effect"&gt;http://en.wikipedia.org/wiki/Einstellung_effect&lt;/a&gt;
Great
&lt;a class="reference external" href="http://www.scientificamerican.com/article/einstellung-how-psychologists-study-einstellung-effect-chess/"&gt;article&lt;/a&gt;
in Scientific American on this.&lt;/p&gt;
&lt;p&gt;I didn't realize that sometimes I do spend time trying to defeat the
Einstellung effect. Not a lot of time. But some time.&lt;/p&gt;
&lt;p&gt;When confronted with gnarly design problems, I have the same bad habits …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Einstellung_effect"&gt;http://en.wikipedia.org/wiki/Einstellung_effect&lt;/a&gt;
Great
&lt;a class="reference external" href="http://www.scientificamerican.com/article/einstellung-how-psychologists-study-einstellung-effect-chess/"&gt;article&lt;/a&gt;
in Scientific American on this.&lt;/p&gt;
&lt;p&gt;I didn't realize that sometimes I do spend time trying to defeat the
Einstellung effect. Not a lot of time. But some time.&lt;/p&gt;
&lt;p&gt;When confronted with gnarly design problems, I have the same bad habits
as many other programmers. I reach for algorithms or data structures
that I'm familiar with, even if they're not optimal. Sometimes I'll use
algorithms that are not even appropriate to the problem domain.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;In working on a book on Advanced Object-Oriented Python, I realized that
one habit I have is -- perhaps -- actually helpful.  It's this.
I can -- if I'm careful -- enumerate the alternatives. It's challenging
to exhaustively enumerate design choices. It seems to help to have a
list of things that clearly aren't optimal or aren't workable or aren't
elegant. After pruning away the bad ideas, sometimes a good idea
remains.&lt;/p&gt;
&lt;p&gt;I'm not often good at this. Sometimes I dive in early, make choices,
learn from my failures, and am forced to refactor.&lt;/p&gt;
&lt;p&gt;The &amp;quot;enumeration&amp;quot; isn't literally &lt;strong&gt;every&lt;/strong&gt; possibility. Sometimes, it's
the &lt;strong&gt;types&lt;/strong&gt; of possibilities or the strategies involved. Sometimes
it's the patterns that the possibilities fulfill.&lt;/p&gt;
&lt;p&gt;Example 1. When looking at Python data structures, the ABC's of
Sequence, Mapping and Set provide a big-picture way to identify places
to look. Once we've narrowed the field of view, we can look at kinds of
sequences of kinds of mappings. We can also look at the generator
expression alternative to a sequence object.&lt;/p&gt;
&lt;p&gt;Example 2. There are often three design strategies: inheritance,
composition (or wrapping) and invent-from-scratch. It's sometimes
helpful to actually put together a technical spike of a subclass, a
wrapper class and the outline of a &lt;em&gt;de novo&lt;/em&gt; class definition. Bad ideas
usually surface quickly when actual code is involved.&lt;/p&gt;
&lt;p&gt;I thought I was being fussy. Or I was just stalling to avoid starting to
write bad code too early. Or I was wasting time obsessing over
performance issues.&lt;/p&gt;
&lt;p&gt;No. I was preventing Einstellung. Avoiding Perceptual Narrowing.
Avoiding &amp;quot;Calling a problems nails because I'm wielding the hammer.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Relational Database as Hammer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I feel obligated to note that the relational database often becomes the
hammer and all problems are then reduced to RDBMS/SQL nails. No matter
what the problem is.&lt;/p&gt;
&lt;p&gt;One of the most amazing of these problems was an inquiry about &amp;quot;the top
&lt;em&gt;n&lt;/em&gt; rows query&amp;quot;. It was the DBA's sense that getting the &amp;quot;top &lt;em&gt;n&lt;/em&gt; rows&amp;quot;
using some selection and ordering criteria was a really standard problem
that everyone had confronted. The problem was so common there just
&lt;strong&gt;had&lt;/strong&gt; to be a standard, widely-adopted high-performance solution.&lt;/p&gt;
&lt;p&gt;When getting the top 100 rows out of 40,000, there will be performance
issues. The filtering and sorting (and any joins) will take time and DB
resources. My question was &amp;quot;why?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer was appalling. The database was being used as a message
queue. The top 100 rows out of 40,000 was being doing to pick the next
few items out of the queue for processing. The non-top-100 rows were
merely lower priority items in the queue.&lt;/p&gt;
&lt;p&gt;Wouldn't a proper message queue have been cheaper and simpler?'
Apparently not. Einstellung had set in. They had data. They had a
database. What more is there?&lt;/p&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="object-oriented design"></category><category term="Einstellung Effect"></category></entry><entry><title>Wrestling with the Python shelve module</title><link href="https://slott56.github.io/2014_03_21-wrestling_with_the_python_shelve_module.html" rel="alternate"></link><published>2014-03-21T11:53:00-04:00</published><updated>2014-03-21T11:53:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-03-21:/2014_03_21-wrestling_with_the_python_shelve_module.html</id><summary type="html">&lt;p&gt;While wrestling with Python's shelve module, I ran across
&lt;a class="reference external" href="http://acid.readthedocs.org/en/latest/"&gt;ACID&lt;/a&gt;. Interesting thoughts.
Plus what appears to be the related Tumblr blog: &lt;a class="reference external" href="http://pythonsweetness.tumblr.com/?utm_campaign=SharedPost&amp;amp;utm_medium=Email&amp;amp;utm_source=TumblriOS"&gt;python
sweetness&lt;/a&gt;.
Also interesting.
Not sure I can make heavy use of it right now, but it's helpful to see
the thought process.
I find the subject of shelve …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While wrestling with Python's shelve module, I ran across
&lt;a class="reference external" href="http://acid.readthedocs.org/en/latest/"&gt;ACID&lt;/a&gt;. Interesting thoughts.
Plus what appears to be the related Tumblr blog: &lt;a class="reference external" href="http://pythonsweetness.tumblr.com/?utm_campaign=SharedPost&amp;amp;utm_medium=Email&amp;amp;utm_source=TumblriOS"&gt;python
sweetness&lt;/a&gt;.
Also interesting.
Not sure I can make heavy use of it right now, but it's helpful to see
the thought process.
I find the subject of shelve (or pickle) and schema change endlessly
fascinating.  I have no good ideas to contribute, but it helps to read
about ways to track schema evolution against data that's as highly
class-specific as shelve data is.
Versioning class definitions and doing data migration to upgrade a
database is -- right now -- a fascinating problem.&lt;/p&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="schema migration"></category></entry><entry><title>Shiny New MacBook Pro</title><link href="https://slott56.github.io/2014_03_20-shiny_new_macbook_pro.html" rel="alternate"></link><published>2014-03-20T08:00:00-04:00</published><updated>2014-03-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-03-20:/2014_03_20-shiny_new_macbook_pro.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Wow. Just Wow. An almost seamless technology change. Almost.&lt;/div&gt;
&lt;div class="line"&gt;The old MacBook Pro (dual core 4Gb RAM) was struggling to keep up.
Struggling. It had been dropped once, so there was a ding in the
corner. The trackpad &amp;quot;click&amp;quot; wasn't reliably clicking. It was shaky.&lt;/div&gt;
&lt;div class="line"&gt;Nothing that couldn't be cured …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Wow. Just Wow. An almost seamless technology change. Almost.&lt;/div&gt;
&lt;div class="line"&gt;The old MacBook Pro (dual core 4Gb RAM) was struggling to keep up.
Struggling. It had been dropped once, so there was a ding in the
corner. The trackpad &amp;quot;click&amp;quot; wasn't reliably clicking. It was shaky.&lt;/div&gt;
&lt;div class="line"&gt;Nothing that couldn't be cured by a new Bluetooth keyboard and/or
mouse. Awkward, but cheap.&lt;/div&gt;
&lt;div class="line"&gt;Instead, I opted for a new quad-core 8Gb MacBook Pro.&lt;/div&gt;
&lt;div class="line"&gt;Hence the Wow.&lt;/div&gt;
&lt;div class="line"&gt;Here's how the upgrade worked.&lt;/div&gt;
&lt;div class="line"&gt;I logged in once in the Apple Store to create an &amp;quot;Administrator&amp;quot;
account. That's &lt;strong&gt;Not Me&lt;/strong&gt;, but it allowed me to configure and
register the machine.&lt;/div&gt;
&lt;div class="line"&gt;Go Home.&lt;/div&gt;
&lt;div class="line"&gt;1. Finish the last Time Machine backup of the old machine.&lt;/div&gt;
&lt;div class="line"&gt;2. Move the Time Machine device to the new machine.&lt;/div&gt;
&lt;div class="line"&gt;3. Use the Migration Assistant to recover everything from the old
machine. There was 300+ Gb of stuff, so it took a few hours.
Completely hands-off. Completely successful the first time.&lt;/div&gt;
&lt;div class="line"&gt;Turn on WiFi (it's not always on for me, the story is
&lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/travel-2013-2014/"&gt;complicated&lt;/a&gt;;
it involves going to a coffee shop.)&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Almost&lt;/strong&gt; everything is perfectly normal and usable on the new
machine.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://agilebits.com/onepassword"&gt;1Password&lt;/a&gt; wanted me to login
to the App Store to be sure the licenses were all up-to-snuff.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.dropbox.com/"&gt;DropBox&lt;/a&gt; wanted me to login again to
their server.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.gpsnavx.com/"&gt;GPSNavX&lt;/a&gt; needs a license key. Their keys
are delightfully short, but apparently encode a date or something and
can't be reused easily.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.python.org/"&gt;Python3.3&lt;/a&gt; was -- of course -- a
non-starter. Not surprising, really, since it's not an &amp;quot;app&amp;quot; that can
be moved neatly by Mac OS X Migration Assistant.&lt;/div&gt;
&lt;div class="line"&gt;The Python download and install was painless. The &lt;a class="reference external" href="http://www.activestate.com/activetcl"&gt;ActiveState
ActiveTcl&lt;/a&gt; is also important
because I do use tinter and IDLE. The Python page is very explicit
about the &lt;a class="reference external" href="http://www.python.org/download/mac/tcltk/"&gt;correct release of ActiveTcl for Mac OS
X&lt;/a&gt;. And I still did it
wrong the first time.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;em&gt;while the ActiveState web site refers to 8.5.15.0, the installer dmg
link has been updated to download ActiveTcl 8.5.15.1.&lt;/em&gt;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Today's job, then, is to put
&lt;a class="reference external" href="https://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt;
(easy_install) and pip onto this Mac and begin the process of figuring
out what's missing that I really use. I install a fair amount of stuff
experimentally; stuff I don't really want or need.  And I always
install it &amp;quot;for real&amp;quot; in Python's site-packages because I'm too lazy
to simply download the Git repository and update the PYTHONPATH
manually.&lt;/div&gt;
&lt;div class="line"&gt;We're talking about
&lt;a class="reference external" href="https://pypi.python.org/pypi/docutils/0.11"&gt;docutils&lt;/a&gt;,
&lt;a class="reference external" href="https://pypi.python.org/pypi/Sphinx/1.2.2"&gt;Sphinx&lt;/a&gt;,
&lt;a class="reference external" href="https://pypi.python.org/pypi/Django/1.6.2"&gt;Django&lt;/a&gt;,
&lt;a class="reference external" href="https://pypi.python.org/pypi/Jinja2"&gt;Jinja2&lt;/a&gt;, and
&lt;a class="reference external" href="https://pypi.python.org/pypi/SQLAlchemy/0.9.3"&gt;SQLAlchemy&lt;/a&gt;. To get
started. PyYAML and PIL are probably required, but I'll wait until I
need them.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="macosx"></category></entry><entry><title>The Visitor Design Pattern and Python</title><link href="https://slott56.github.io/2014_03_13-the_visitor_design_pattern_and_python.html" rel="alternate"></link><published>2014-03-13T08:00:00-04:00</published><updated>2014-03-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-03-13:/2014_03_13-the_visitor_design_pattern_and_python.html</id><summary type="html">&lt;p&gt;Epiphany.&lt;/p&gt;
&lt;p&gt;In Python, with iterators, the &lt;strong&gt;Visitor&lt;/strong&gt; design pattern is useless.
And a strongly-ingrained habit. Which I'm trying to break.&lt;/p&gt;
&lt;p&gt;Here's a common &lt;strong&gt;Visitor&lt;/strong&gt; approach:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Visitor:
    def __init__( self ): ...
    def visit( self, some_target_thing ): ...
    def all_done( self ): ...

v = Visitor()
for thing in some_iterator():
    v.visit(thing)
v.all_done()
&lt;/pre&gt;
&lt;p&gt;If we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Epiphany.&lt;/p&gt;
&lt;p&gt;In Python, with iterators, the &lt;strong&gt;Visitor&lt;/strong&gt; design pattern is useless.
And a strongly-ingrained habit. Which I'm trying to break.&lt;/p&gt;
&lt;p&gt;Here's a common &lt;strong&gt;Visitor&lt;/strong&gt; approach:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Visitor:
    def __init__( self ): ...
    def visit( self, some_target_thing ): ...
    def all_done( self ): ...

v = Visitor()
for thing in some_iterator():
    v.visit(thing)
v.all_done()
&lt;/pre&gt;
&lt;p&gt;If we refactor the for statement into the &lt;strong&gt;Visitor&lt;/strong&gt;, then it's just
a &lt;strong&gt;Command&lt;/strong&gt; or something.&lt;/p&gt;
&lt;p&gt;Here's the refactored &lt;strong&gt;Iterating Visitor&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Command:
    def __init__( self ): ...
    def process_all( self, iterable ):
        for thing in iterable:
            self.visit( thing )
    def visit( self, thing ): ...
    def all_done( self ): ...

c=Command()
c.process_all( some_iterator() )
c.all_done()
&lt;/pre&gt;
&lt;div class="section" id="possible-objection"&gt;
&lt;h2&gt;Possible Objection&lt;/h2&gt;
&lt;p&gt;The one possible objection is this: &amp;quot;What if our data structure is
so hellishly complex that we can't reduce it to a simple iterator?&amp;quot;&lt;/p&gt;
&lt;p&gt;That's perfectly silly. Any hyper-complex algorithm to walk any
hyper-complex data structure, no matter how hyper complex, can always
be recast into a generator function which uses yield to iterate over
the objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-design"&gt;
&lt;h2&gt;Better Design&lt;/h2&gt;
&lt;p&gt;Once we start down this road, we can generally simplify processing
into a kind of &lt;strong&gt;Command&lt;/strong&gt; that looks something like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Command:
    def __init__( self ): ...
    def run( self ):
        for thing in self.iterable:
            ....

c= Command()
c.iterable= some_iterator()
c.run()
&lt;/pre&gt;
&lt;p&gt;I find that this interface is somewhat easier to deal with when
composing large commands from individual small commands. It follows a
&lt;strong&gt;Create-Configure-Run&lt;/strong&gt; pattern that seems to work out well. I just
wish I would start with this rather than start with a &lt;strong&gt;Visitor&lt;/strong&gt;,
refactor, and end up with this.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category></entry><entry><title>Enterprise JavaScript -- Not the best idea</title><link href="https://slott56.github.io/2014_03_06-enterprise_javascript_not_the_best_idea.html" rel="alternate"></link><published>2014-03-06T08:00:00-05:00</published><updated>2014-03-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-03-06:/2014_03_06-enterprise_javascript_not_the_best_idea.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See this:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
JavaScript is a swampy foundation for your enterprise codebase: My
latest column at SD Times &lt;a class="reference external" href="http://t.co/a82aUquk0d"&gt;http://t.co/a82aUquk0d&lt;/a&gt;
— Larry O'Brien (&amp;#64;lobrien) &lt;a class="reference external" href="https://twitter.com/lobrien/statuses/436534627789180928"&gt;February 20,
2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The article lists reasons why Enterprise JavaScript is a recipe for
disaster. &amp;quot;Finally, there's legacy integration...&amp;quot; This is the point.&lt;/div&gt;
&lt;div class="line"&gt;In particular, JavaScript …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;See this:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
JavaScript is a swampy foundation for your enterprise codebase: My
latest column at SD Times &lt;a class="reference external" href="http://t.co/a82aUquk0d"&gt;http://t.co/a82aUquk0d&lt;/a&gt;
— Larry O'Brien (&amp;#64;lobrien) &lt;a class="reference external" href="https://twitter.com/lobrien/statuses/436534627789180928"&gt;February 20,
2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The article lists reasons why Enterprise JavaScript is a recipe for
disaster. &amp;quot;Finally, there's legacy integration...&amp;quot; This is the point.&lt;/div&gt;
&lt;div class="line"&gt;In particular, JavaScript needs to get the data from somewhere: a
backend process. If we push business knowledge into the front-end,
even if we're assiduous about code libraries and sharing, we still
have to fight with the &amp;quot;Out-Of-Date JS Library&amp;quot; issue. Server-side
business knowledge is inherently consistent and sharable.&lt;/div&gt;
&lt;div class="line"&gt;The big reason JavaScript feels good is because it's seems productive.
Java is complex. C++, C#, and Objective C are Very Complex.&lt;/div&gt;
&lt;div class="line"&gt;And.&lt;/div&gt;
&lt;div class="line"&gt;Backend programming doesn't allow you to see finished-looking stuff
right away. When you're fooling around with JavaScript you &lt;strong&gt;feel&lt;/strong&gt;
like you're doing real work. You're moving data around on the HTML
page, that's productivity, right?&lt;/div&gt;
&lt;div class="line"&gt;A spreadsheet is just as productive as JavaScript presentation.
 Almost exactly as productive. The underlying data and processing
still originates somewhere else. That's where the real value lies. In
the data. In the backend.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="javascript"></category></entry><entry><title>Django and REST -- Tastypie vs. Django REST</title><link href="https://slott56.github.io/2014_02_27-django_and_rest_tastypie_vs_django_rest.html" rel="alternate"></link><published>2014-02-27T08:00:00-05:00</published><updated>2014-02-27T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-02-27:/2014_02_27-django_and_rest_tastypie_vs_django_rest.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Ouch. What a difficult question.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
Lazyweb: Django REST Framework vs. Tastypie. Thoughts?
&lt;a class="reference external" href="https://twitter.com/search?q=%23django&amp;amp;src=hash"&gt;#django&lt;/a&gt;
— Joe Dougherty (&amp;#64;modusjonens) &lt;a class="reference external" href="https://twitter.com/modusjonens/statuses/435518784036540416"&gt;February 17,
2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This isn't easy.&lt;/div&gt;
&lt;div class="line"&gt;Comparing &lt;a class="reference external" href="http://django-tastypie.readthedocs.org/en/latest/"&gt;http://django-tastypie.readthedocs.org/en/latest/&lt;/a&gt;
with &lt;a class="reference external" href="http://www.django-rest-framework.org/"&gt;http://www.django-rest-framework.org&lt;/a&gt;
is hard. They're both outstanding projects with a long history.&lt;/div&gt;
&lt;div class="line"&gt;Trivial Follow-up Question 1: What are …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Ouch. What a difficult question.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
Lazyweb: Django REST Framework vs. Tastypie. Thoughts?
&lt;a class="reference external" href="https://twitter.com/search?q=%23django&amp;amp;src=hash"&gt;#django&lt;/a&gt;
— Joe Dougherty (&amp;#64;modusjonens) &lt;a class="reference external" href="https://twitter.com/modusjonens/statuses/435518784036540416"&gt;February 17,
2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This isn't easy.&lt;/div&gt;
&lt;div class="line"&gt;Comparing &lt;a class="reference external" href="http://django-tastypie.readthedocs.org/en/latest/"&gt;http://django-tastypie.readthedocs.org/en/latest/&lt;/a&gt;
with &lt;a class="reference external" href="http://www.django-rest-framework.org/"&gt;http://www.django-rest-framework.org&lt;/a&gt;
is hard. They're both outstanding projects with a long history.&lt;/div&gt;
&lt;div class="line"&gt;Trivial Follow-up Question 1: What are the requirements?&lt;/div&gt;
&lt;div class="line"&gt;I happen to know, however, a bit about the context, so I suspect that
the requirements center around super-flexible data access and numerous
serialization formats.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;History&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;My initial reaction is &amp;quot;Django-REST&amp;quot; of course. Mostly because I
started with this several years ago and spent some time tweaking and
adjusting my local copy. Our requirements involved adapting Django
(and Django-REST) to use Forge Rock Open AM for authentication.&lt;/div&gt;
&lt;div class="line"&gt;One feature that we didn't need was a sophisticated set of built-in
transactions that covered the full REST spectrum of GET, PUT, POST and
DELETE. 90% of our processing was GET with an occasional POST.&lt;/div&gt;
&lt;div class="line"&gt;The other feature we didn't need was a trivial mapping from the Django
object model. Our GET processing required view functions as mediation
between our database models and the &amp;quot;published&amp;quot; model available
through the RESTful API.&lt;/div&gt;
&lt;div class="line"&gt;Since we needed so little, we hacked out the essential serialization
feature set to support our GET operations.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Serialization&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;Considering the context of the initial question, I think that
serialization is the deciding factor. Comparing the serialization
features seems to indicate that the following summary may be relevant.&lt;/div&gt;
&lt;div class="line"&gt;Tastypie serialization is simpler. The support for XML, YAML, JSON,
etc., is simple.&lt;/div&gt;
&lt;div class="line"&gt;Django-REST serialization+render is quite a bit more sophisticated and
more flexible. The process is explicitly decomposed into serialization
(for breaking down the model objects) and rendering in some external
representation like XML, JSON, YAML, etc.&lt;/div&gt;
&lt;div class="line"&gt;This two-step breakdown in Django-REST seems to make an open data
project work out nicely. The developers should find it easier to
integrate and publish data from a variety of sources.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="REST"></category><category term="Django"></category></entry><entry><title>TCP/IP Mysteries and user support</title><link href="https://slott56.github.io/2014_02_13-tcpip_mysteries_and_user_support.html" rel="alternate"></link><published>2014-02-13T08:00:00-05:00</published><updated>2014-02-13T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-02-13:/2014_02_13-tcpip_mysteries_and_user_support.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It's not clear, actually, if this involves a TCP/IP &amp;quot;Mystery&amp;quot;. What it
may involve is a simple lack of ability to communicate. Or something.&lt;/div&gt;
&lt;div class="line"&gt;I got this question:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&amp;quot;Request help w/ finding a reference or you can post a blog about how
you can you have 2 oracle servers …&lt;/blockquote&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It's not clear, actually, if this involves a TCP/IP &amp;quot;Mystery&amp;quot;. What it
may involve is a simple lack of ability to communicate. Or something.&lt;/div&gt;
&lt;div class="line"&gt;I got this question:&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&amp;quot;Request help w/ finding a reference or you can post a blog about how
you can you have 2 oracle servers or for that matter any 2 servers
listening in on different sockets on the same unix box.&amp;quot;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;And this background. Such as it is.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&amp;quot;They are going to ask, how can this work? My lame explanation is
that on a unix box you can have multiple servers listening in on
different ports. I tried Googling around but couldn’t find anything
good.&amp;quot;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;It appears that the DBA provided a TNSNAMES.ORA. And some desktop tool
user was not happy with the TNSNAMES.ORA that was provided.&lt;/div&gt;
&lt;div class="line"&gt;The saga is long and sad.&lt;/div&gt;
&lt;div class="line"&gt;It amounts to something like this.&lt;/div&gt;
&lt;div class="line"&gt;DBA: Here's the TNSNAMES.ORA.&lt;/div&gt;
&lt;div class="line"&gt;User: That didn't work.&lt;/div&gt;
&lt;div class="line"&gt;DBA: Yes, it did.&lt;/div&gt;
&lt;div class="line"&gt;User: No, it didn't. You're an idiot.&lt;/div&gt;
&lt;div class="line"&gt;DBA: I know you are but what am I?&lt;/div&gt;
&lt;div class="line"&gt;And it devolved from there into a request to help use Google to locate
a tutorial on TCP/IP address and port numbers.&lt;/div&gt;
&lt;div class="line"&gt;I'll repeat that: a request to help use Google.&lt;/div&gt;
&lt;div class="line"&gt;Apparently, the desktop user had done something in database A and
couldn't find the results in database B. And didn't understand what
was going on.&lt;/div&gt;
&lt;div class="line"&gt;And this lead to the DBA asking me to help with Google to prove that
the DBA's TNSNAMES.ORA worked.&lt;/div&gt;
&lt;div class="line"&gt;How does that help the user?&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="user stories"></category></entry><entry><title>Hacker Monthly</title><link href="https://slott56.github.io/2014_02_06-hacker_monthly.html" rel="alternate"></link><published>2014-02-06T08:00:00-05:00</published><updated>2014-02-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-02-06:/2014_02_06-hacker_monthly.html</id><content type="html">&lt;p&gt;Check out this month's &lt;a class="reference external" href="http://hackermonthly.com/"&gt;Hacker Monthly&lt;/a&gt;.
One of my Stackoverflow answers was reswizzled into a short article on
class design.
That was gratifying.&lt;/p&gt;
</content><category term="Technologies"></category><category term="object-oriented design"></category><category term="stackoverflow"></category></entry><entry><title>Manual Testing -- Bad Idea</title><link href="https://slott56.github.io/2014_01_23-manual_testing_bad_idea.html" rel="alternate"></link><published>2014-01-23T08:00:00-05:00</published><updated>2014-01-23T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-01-23:/2014_01_23-manual_testing_bad_idea.html</id><summary type="html">&lt;p&gt;The question of testing came up recently. The description of the process
sounded like manually &amp;quot;testing&amp;quot; some complex web application.
When trying to work out manual &amp;quot;testing&amp;quot;, I find it necessary to use
scare quotes. I'm not sure there's a place for &amp;quot;manual testing&amp;quot; of any
software.&lt;/p&gt;
&lt;p&gt;I know that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The question of testing came up recently. The description of the process
sounded like manually &amp;quot;testing&amp;quot; some complex web application.
When trying to work out manual &amp;quot;testing&amp;quot;, I find it necessary to use
scare quotes. I'm not sure there's a place for &amp;quot;manual testing&amp;quot; of any
software.&lt;/p&gt;
&lt;p&gt;I know that some folks use Selenium to created automated test scripts
for interactive applications. That may be a helpful technology. I prefer
automated test scripts over manual testing. Consequently, I'm not too
interested in helping out with testing -- other than perhaps coaching
developers to write automated test scripts.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.seleniumhq.org"&gt;http://docs.seleniumhq.org&lt;/a&gt; &amp;lt;&lt;a class="reference external" href="http://docs.seleniumhq.org/"&gt;http://docs.seleniumhq.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To continue this rant.&lt;/p&gt;
&lt;p&gt;I've seen the suggestion that having a person do some manual
&amp;quot;testing&amp;quot; will permit them to notice things that are &amp;quot;broken&amp;quot; but not
a formal requirement in a test script. This seems to require some
willing misuse of words. A person who's supposed to be noticing stuff
isn't testing: they're exploring or demonstrating or thinking.&lt;/p&gt;
&lt;p&gt;They're not testing. Tests are -- by definition -- pass-fail. This is
a very narrow definition: if there's no failure mode, it's not a
test, it's something else. Lots of words are available, use any word
except &amp;quot;test.&amp;quot; Please.&lt;/p&gt;
&lt;p&gt;Reading about exploratory &amp;quot;testing&amp;quot; leads to profound questions about
the nature of failing an exploratory &amp;quot;test.&amp;quot; When did the failure
mode become a requirement? During the exploration? Not prior to the
actual development?&lt;/p&gt;
&lt;p&gt;When an explorer finds a use case that was never previously part of a
user story, then it's really an update to a user story. It's a new
requirement; a requirement defined by a test which fails. It's a
really high-quality requirement. More importantly, exploratory
&amp;quot;testing&amp;quot; is clearly design. It's product ownership.&lt;/p&gt;
&lt;p&gt;This kind of exploration/thinking/playing/experiencing is valuable
stuff. It needs to be done. But it's not testing.&lt;/p&gt;
&lt;p&gt;Developers create the test scripts: unit tests of various kinds.
Back-end tests. Front-end tests. Lots of testing. All automated. All.&lt;/p&gt;
&lt;p&gt;Other experienced people -- e.g., a product owner -- can also play
with the released software and create informed, insightful user
stories and user story modifications that may lead to revisions to
test cases. They're not testing. They're exploring. They're writing
new requirements, updating user stories, and putting work into the
backlog.&lt;/p&gt;
&lt;div class="section" id="putting-work-into-the-backlog"&gt;
&lt;h2&gt;Putting work into the backlog&lt;/h2&gt;
&lt;p&gt;An exploratory &amp;quot;test&amp;quot; should not be allowed to gum up a release. To
do that breaks the essential work cycle of picking a story with fixed
boundaries and getting it to work.  Or picking a story with nebulous
boundaries and grooming it to have fixed boundaries. Once you think
you're doing exploratory &amp;quot;testing&amp;quot; on a release that's in progress,
then the user stories no longer have a fixed boundary, and the idea
of a fixed release cycle is damaged. It becomes impossible to make
predictions, since the stories are no longer fixed.&lt;/p&gt;
&lt;p&gt;For a startup development effort, the automated test scripts will
grow in complexity very quickly. In many cases, the test scripts will
grow considerably faster than the product code. This is good.&lt;/p&gt;
&lt;p&gt;It's perfectly normal for a product owner to find behaviors that
aren't being tested properly by the initial set of automated test
scripts. This is good, too. As the product matures, the test scripts
expand. The product owner should have increasing difficulty locating
features which are untested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="management-support"&gt;
&lt;h2&gt;Management Support&lt;/h2&gt;
&lt;p&gt;What I've found is that some developers object to writing test
scripts. One possible reason is because the test scripts don't seem
to be as much &amp;quot;fun&amp;quot; as playing with GUI development tools.&lt;/p&gt;
&lt;p&gt;I think the more important reason is that developers in larger
organizations are not rewarded for software which is complete, but
are rewarded for new features no matter what level of quality they
achieve. This seems to happens when software development is
mismanaged using a faulty schedules and a faulty idea of the rate of
delivery of working software.&lt;/p&gt;
&lt;p&gt;If the schedule -- not working features -- dominates management
thinking, then time spent writing tests to show precisely how well a
feature works is treated as waste. Managers will ask if a developer
is just &amp;quot;gold plating&amp;quot; or &amp;quot;polishing a BB&amp;quot; or some other way of
discrediting automated test case development.&lt;/p&gt;
&lt;p&gt;If the features dominate the discussion, then test development should
be the management focus. A new feature without a sufficiently robust
suite of automated tests is just a technology spike, not something
which can be released.&lt;/p&gt;
&lt;p&gt;Manual &amp;quot;testing&amp;quot; and exploratory &amp;quot;testing&amp;quot; seem to allow managers to
claim that they're testing without actually automating the tests. It
appears that some managers feel that reproducible, automated test
take longer and cost more than having someone play with the release
to see if it appears to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-what-about"&gt;
&lt;h2&gt;But What About...&lt;/h2&gt;
&lt;p&gt;The most common complaint about automated GUI testing isn't a proper
pass-fail test issue at all.&lt;/p&gt;
&lt;p&gt;Folks will insist that somehow font choice, color, position or other
net effects of CSS properties must be &amp;quot;tested.&amp;quot; Generally, they seem
to be conflating two related (but different) things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Design. This is the position/color/font issue. These are design
features of a GUI page or JavaScript window or HTML document. Design.
The design may need to be reviewed by a person. But no testing makes
sense here. The design isn't a &amp;quot;pass-fail&amp;quot; item. Someone may say it's
ugly, but that's a far cry from not working. CSS design (especially
for people like me who don't really understand it) sure feels like
hacking out code. That doesn't mean the design gets tested.&lt;/li&gt;
&lt;li&gt;Implementation. This is the &amp;quot;does every element use the correct
CSS class or id?&amp;quot; question. This is automated testing. And it has
nothing to do with looking at a page. It has everything to do with an
automated test to be sure HTML tags are generated properly. It has
nothing to do with the choice of packing algorithm in a widget, and
everything to do with elements simply making the correct API calls to
assure that they're properly packed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For people like me who don't fully get CSS, lots of pages need to be
reviewed to make sure the CSS &amp;quot;worked&amp;quot;. But that's a design review.
It's not a part of automated testing.&lt;/p&gt;
&lt;p&gt;Here's the rule: Ugly and Not Working have nothing to do with each
other. You can automate tests for &amp;quot;works&amp;quot; -- that's objective. You
can't automated the test for &amp;quot;ugly&amp;quot; -- that's subjective.&lt;/p&gt;
&lt;p&gt;Here's how some developers get confused.  A bug report that amounts
to &amp;quot;ugly&amp;quot; is fixed by making a  change to a GUI element. This is a
valid kind of bug-to-change. But how can the change have an automated
test? You &lt;strong&gt;must&lt;/strong&gt; have a person confirm that the GUI is no longer
ugly. Right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;The confusion stems from conflating design (change to reduce the
ugliness) and implementation (some API change to the offending
element.) The design change isn't subject to automated testing.&lt;/p&gt;
&lt;p&gt;Indeed, it passed the unit tests before and after because it worked.
No design can have automated testing. We don't test algorithm design,
either. We test algorithm implementations.&lt;/p&gt;
&lt;p&gt;Compare it with class design vs. implementation. We don't check every
possible aspect of a class to be sure it follows a design. We check
some external-facing features. We don't retest the entire library,
compiler, OS and toolset, do we? We presume that design is
implemented more-or-less properly, and seek to &lt;strong&gt;confirm&lt;/strong&gt; that the
edges and corners work.&lt;/p&gt;
&lt;p&gt;Compare it with database design vs. implementation. We don't check
every bit on the database. We check that -- across the API -- the
application uses the database properly.&lt;/p&gt;
&lt;p&gt;There's no reason to test every pixel of an implementation if the
design was reviewed and approved and the GUI elements use the design
properly.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="selenium"></category></entry><entry><title>Not in HamCalc -- But perhaps should be</title><link href="https://slott56.github.io/2014_01_21-not_in_hamcalc_but_perhaps_should_be.html" rel="alternate"></link><published>2014-01-21T08:00:00-05:00</published><updated>2014-01-21T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-01-21:/2014_01_21-not_in_hamcalc_but_perhaps_should_be.html</id><summary type="html">&lt;p&gt;This is the kind of little program that would be in HamCalc. But doesn't
appear to be.&lt;/p&gt;
&lt;p&gt;Looking at the Airfoil web page, specifically, this one:
&lt;a class="reference external" href="http://airfoiltools.com/airfoil/details?airfoil=ls013-il"&gt;http://airfoiltools.com/airfoil/details?airfoil=ls013-il&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The measurements are all given in fractions of the depth of the airfoil.
So you have to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the kind of little program that would be in HamCalc. But doesn't
appear to be.&lt;/p&gt;
&lt;p&gt;Looking at the Airfoil web page, specifically, this one:
&lt;a class="reference external" href="http://airfoiltools.com/airfoil/details?airfoil=ls013-il"&gt;http://airfoiltools.com/airfoil/details?airfoil=ls013-il&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The measurements are all given in fractions of the depth of the airfoil.
So you have to scale them. I was working with what may turn out to be a
48&amp;quot; rudder for a boat based on this design. I'm waiting for some details
from the engineer who really knows this stuff.&lt;/p&gt;
&lt;p&gt;How do we turn these fractions into measurements for folks that work in
feet and inches?&lt;/p&gt;
&lt;p&gt;We can use a spreadsheet -- and I suspect many folks would be successful
spreadsheeting this data. For some reason, that's not my first choice. I
worry about accidental copy and paste errors or some other fat-finger
blunder in a spreadsheet. With code, it's easy to reproduce the results
from the source as needed.&lt;/p&gt;
&lt;p&gt;Here's the raw data.
&lt;a class="reference external" href="http://airfoiltools.com/airfoil/seligdatfile?airfoil=ls013-il"&gt;http://airfoiltools.com/airfoil/seligdatfile?airfoil=ls013-il&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Part 1. Fractions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from fractions import Fraction
class Improper(Fraction):
    def __str__( self ):
        whole= int(self)
        fract= self-whole
        if fract == 0: return '{0}'.format(whole)
        if whole == 0: return '{0}'.format(fract)
        return '{0} {1}'.format(whole,fract)
&lt;/pre&gt;
&lt;p&gt;The idea is to be able to produce improper fractions like 47 ½&amp;quot; or
24&amp;quot; or ¾&amp;quot;.  My Macintosh magically rewrites fractions into a
better-looking Unicode sequence. I didn't include that feature in the
above version of Improper. Mostly because in Courier, the generic
fractions look kind of icky.&lt;/p&gt;
&lt;p&gt;The raw data is readable as a kind of CSV file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import csv
def get_data( source ):
    rdr= csv.reader( source, delimiter=' ', skipinitialspace=True)
    heading= next(rdr)
    print( heading )
    for row in rdr:
        yield float(row[0]), float(row[1])
&lt;/pre&gt;
&lt;p&gt;That saves fooling around with parsing -- we get the profile numbers
from the raw data as a pair of floats.&lt;/p&gt;
&lt;p&gt;Finally, the report.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def report( seligdatfile, depth, unit ):
    scale=16 #th of an inch
    for d, t in get_data( source ):
        d_in, t_in = d*depth, t*depth
        d_scale = Improper( int(d_in*scale), scale )
        t_scale = Improper( int(t_in*scale), scale )
        print(
          '{0:6.2f} {unit} {1:6.2f} {unit} \| {2:&amp;gt;8s} {unit} {3:&amp;gt;8s} {unit}'.format(
            d_in, t_in, d_scale, t_scale, unit=unit) )
&lt;/pre&gt;
&lt;p&gt;This gives us a pleasant-enough table of the measurements in decimal
places and fractions.&lt;/p&gt;
&lt;p&gt;We can use this for any of the variant airfoils available.  Here's
the top-level script.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import urllib.request
with urllib.request.urlopen(
  &amp;quot;http://airfoiltools.com/airfoil/seligdatfile?airfoil=ls013-il&amp;quot;
  ) as source:
    seligdatfile= source.read().decode(&amp;quot;ASCII&amp;quot;)

import io
with io.StringIO( seligdatfile ) as source:
    report( source, depth=48, unit=&amp;quot;in.&amp;quot; )
&lt;/pre&gt;
&lt;p&gt;I'm guessing the data files are ASCII encoded, not UTF-8. It doesn't
appear to matter too much, and it's an easy change to make if they
track down an airfoil data file what has a character that's not
ASCII, but UTF-8.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="HamCalc"></category></entry><entry><title>Computers, Power and Space Heaters</title><link href="https://slott56.github.io/2014_01_09-computers_power_and_space_heaters.html" rel="alternate"></link><published>2014-01-09T08:00:00-05:00</published><updated>2014-01-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-01-09:/2014_01_09-computers_power_and_space_heaters.html</id><summary type="html">&lt;p&gt;Just a safety note for folks who use a lot of electricity. In the
winter, you might have computers and space heaters. Or you might (like
me) live &amp;quot;off the grid&amp;quot;. We use an inverter with a transfer relay to
switch between battery power and grid power.
Recently, we had …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just a safety note for folks who use a lot of electricity. In the
winter, you might have computers and space heaters. Or you might (like
me) live &amp;quot;off the grid&amp;quot;. We use an inverter with a transfer relay to
switch between battery power and grid power.
Recently, we had a bad smell. Here's the root cause analysis of the
smell.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external image-reference" href="http://1.bp.blogspot.com/-3u82AlViBeU/Us1gYwAI22I/AAAAAAAAAUw/s35jJxuVomY/s1600/IMG_2135.jpg"&gt;&lt;img alt="image1" src="http://1.bp.blogspot.com/-3u82AlViBeU/Us1gYwAI22I/AAAAAAAAAUw/s35jJxuVomY/s1600/IMG_2135.jpg" style="width: 240px; height: 320px;" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do Not Overload AC Wiring.&lt;/p&gt;
&lt;p&gt;Figure out how many amps your computers, monitors and winter-time
space heater actually use. The numbers are displayed in various
places around plugs and plates on the backs of things. A few devices
will list power in watts -- divide by 120 to get amps. A 1500W heater
is 12.5A.&lt;/p&gt;
&lt;p&gt;Next figure out what your circuit breakers can handle. Many household
circuits are 15A. A power strip may not even handle 10A. Two space
heaters in one room is likely to exceed the wiring's current carrying
capacity.&lt;/p&gt;
&lt;p&gt;The root cause of the melted connector block might be a design flaw
-- the block may have been too small for the rated load of 30A. While
the device overall seems good, this kind of shabby engineering is
alarming.&lt;/p&gt;
</content><category term="Technologies"></category><category term="epic-fail"></category><category term="hardware"></category></entry><entry><title>Apple's Feckless Download Protocol</title><link href="https://slott56.github.io/2013_12_17-apples_feckless_download_protocol.html" rel="alternate"></link><published>2013-12-17T08:00:00-05:00</published><updated>2013-12-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-12-17:/2013_12_17-apples_feckless_download_protocol.html</id><summary type="html">&lt;p&gt;For those of us who live mostly off the grid, with inconsistent WiFi
through hosts that flake out frequently, Apple's AppStore download
protocol is absolutely infuriating. It's the most brittle damn protocol
I've ever seen.
When there's any disruption, it simply discards the data it has and
starts again.
How …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For those of us who live mostly off the grid, with inconsistent WiFi
through hosts that flake out frequently, Apple's AppStore download
protocol is absolutely infuriating. It's the most brittle damn protocol
I've ever seen.
When there's any disruption, it simply discards the data it has and
starts again.
How stupid. How blatantly and infuriatingly stupid.
If I pause a download, it will resume. If it breaks, it will not resume.
WTF?
For some things, I can use BitTorrent, which tolerates noisy links. But
for proper AppStore Apps, their protocol is the pits.
Anyone know anyone at Apple who's able to work on a solution to this?&lt;/p&gt;
</content><category term="Technologies"></category><category term="apple"></category><category term="macosx"></category></entry><entry><title>Secure Salted Password Hashing</title><link href="https://slott56.github.io/2013_12_12-secure_salted_password_hashing.html" rel="alternate"></link><published>2013-12-12T08:00:00-05:00</published><updated>2013-12-12T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-12-12:/2013_12_12-secure_salted_password_hashing.html</id><summary type="html">&lt;p&gt;An excellent exposition of secure salted password hashing.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://crackstation.net/hashing-security.htm"&gt;https://crackstation.net/hashing-security.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was really quite nice. It didn't have a Python version, but the
clarity of the exposition makes the Python easy to write.&lt;/p&gt;
&lt;p&gt;A few months back, I had this mystery
conversation: {filename}/blog/2013/06/2013_06_27-password_encryption_short_answer_dont …&lt;/p&gt;</summary><content type="html">&lt;p&gt;An excellent exposition of secure salted password hashing.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://crackstation.net/hashing-security.htm"&gt;https://crackstation.net/hashing-security.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was really quite nice. It didn't have a Python version, but the
clarity of the exposition makes the Python easy to write.&lt;/p&gt;
&lt;p&gt;A few months back, I had this mystery
conversation: {filename}/blog/2013/06/2013_06_27-password_encryption_short_answer_dont.rst&lt;/p&gt;
&lt;p&gt;While this is not going to produce identical results to the code shown
in the blog post, it seems to fit the requirements.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from hashlib import sha256
import os
class Authentication:
    iterations= 1000
    def __init__( self, username, password ):
        &amp;quot;&amp;quot;&amp;quot;Works with bytes. Not Unicode strings.&amp;quot;&amp;quot;&amp;quot;
        self.username= username
        self.salt= os.urandom(24)
        self.hash= self._iter_hash( self.iterations, self.salt, username, password )
    &amp;#64;staticmethod
    def _iter_hash( iterations, salt, username, password ):
        seed= salt+b&amp;quot;:&amp;quot;+username+b&amp;quot;:&amp;quot;+password
        for i in range(iterations):
            seed= sha256( seed ).digest()
        return seed
    def __eq__( self, other ):
        return self.username == other.username and self.hash == other.hash
    def __hash__( self, other ):
        return hash(self.hash)
    def __repr__( self ):
        salt_x= &amp;quot;&amp;quot;.join( &amp;quot;{0:x}&amp;quot;.format(b) for b in self.salt )
        hash_x= &amp;quot;&amp;quot;.join( &amp;quot;{0:x}&amp;quot;.format(b) for b in self.hash )
        return &amp;quot;{username} {iterations:d}:{salt}:{hash}&amp;quot;.format(
            username=self.username, iterations=self.iterations,
            salt=salt_x, hash=hash_x)
    def match( self, password ):
        test= self._iter_hash( self.iterations, self.salt, self.username, password )
        return self.hash == test # Constant Time is Best
&lt;/pre&gt;
&lt;p&gt;It may be helpful to use &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; with this to reduce the storage
and make the object less mutable.&lt;/p&gt;
&lt;p&gt;Perhaps I didn't google well enough to find a clear explanation that
&lt;strong&gt;also&lt;/strong&gt; included Python code samples.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="security"></category></entry><entry><title>Mac OS X 10.9 and Python 3.3</title><link href="https://slott56.github.io/2013_11_30-mac_os_x_109_and_python_33.html" rel="alternate"></link><published>2013-11-30T07:33:00-05:00</published><updated>2013-11-30T07:33:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-11-30:/2013_11_30-mac_os_x_109_and_python_33.html</id><summary type="html">&lt;p&gt;Finally upgraded to Python 3.3.3. The ordinary maintenance release fixed
the problem with the previous release.&lt;/p&gt;
&lt;p&gt;The previously documented patch
({filename}/blog/2013/10/2013_10_25-mac_os_x_109_mavericks_crashes_python_patch_available.rst)
is no longer required.&lt;/p&gt;
&lt;p&gt;Time to start incrementally installing all the various add-on
components: docutils, PyYaml, Django, Jinja2, SQLAlchemy, etc.&lt;/p&gt;
&lt;p&gt;Also, time …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finally upgraded to Python 3.3.3. The ordinary maintenance release fixed
the problem with the previous release.&lt;/p&gt;
&lt;p&gt;The previously documented patch
({filename}/blog/2013/10/2013_10_25-mac_os_x_109_mavericks_crashes_python_patch_available.rst)
is no longer required.&lt;/p&gt;
&lt;p&gt;Time to start incrementally installing all the various add-on
components: docutils, PyYaml, Django, Jinja2, SQLAlchemy, etc.&lt;/p&gt;
&lt;p&gt;Also, time to put more focus into rewriting various projects to finally
cut the cord with Python2. At this point, there's no longer a reason to
be looking backwards.&lt;/p&gt;
</content><category term="Technologies"></category><category term="patch"></category><category term="#python"></category></entry><entry><title>Python vs. R for Data Science</title><link href="https://slott56.github.io/2013_11_30-python_vs_r_for_data_science.html" rel="alternate"></link><published>2013-11-30T07:33:00-05:00</published><updated>2013-11-30T07:33:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-11-30:/2013_11_30-python_vs_r_for_data_science.html</id><summary type="html">&lt;p&gt;This: &lt;a class="reference external" href="http://readwrite.com/2013/11/25/python-displacing-r-as-the-programming-language-for-data-science#awesm=~ooD70i8bDQn1Dp"&gt;Python Displacing R As The Programming Language For Data Science&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently, I've had a former colleague asking questions about Data
Science. See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
They -- weirdly -- insisted that the only language that made sense to
them was Excel.&lt;/p&gt;
&lt;p&gt;My response was a blunt &amp;quot;What?&amp;quot;&lt;/p&gt;
&lt;p&gt;The Python vs. R post …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This: &lt;a class="reference external" href="http://readwrite.com/2013/11/25/python-displacing-r-as-the-programming-language-for-data-science#awesm=~ooD70i8bDQn1Dp"&gt;Python Displacing R As The Programming Language For Data Science&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently, I've had a former colleague asking questions about Data
Science. See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
They -- weirdly -- insisted that the only language that made sense to
them was Excel.&lt;/p&gt;
&lt;p&gt;My response was a blunt &amp;quot;What?&amp;quot;&lt;/p&gt;
&lt;p&gt;The Python vs. R post cited above clarifies that reasons why a
programming language is a better choice than a &amp;quot;tool&amp;quot; or &amp;quot;platform&amp;quot;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="R"></category><category term="#python"></category><category term="Data Science"></category></entry><entry><title>When to choose Python over Java and vice versa ??: A Very Silly Question</title><link href="https://slott56.github.io/2013_10_29-when_to_choose_python_over_java_and_vice_versa_a_very_silly_question.html" rel="alternate"></link><published>2013-10-29T08:00:00-04:00</published><updated>2013-10-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-10-29:/2013_10_29-when_to_choose_python_over_java_and_vice_versa_a_very_silly_question.html</id><summary type="html">&lt;p&gt;The correct answer is: &lt;strong&gt;It Doesn't Matter&lt;/strong&gt;.
In spite of this.
(A) The question gets asked.
And worse.
(B) It gets answered. And people take their answers seriously. As if
there are &lt;strong&gt;Profound Differences&lt;/strong&gt; among programming languages.
Among Turing Complete programming languages there are few Profound
Differences.
The pragmatic differences …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The correct answer is: &lt;strong&gt;It Doesn't Matter&lt;/strong&gt;.
In spite of this.
(A) The question gets asked.
And worse.
(B) It gets answered. And people take their answers seriously. As if
there are &lt;strong&gt;Profound Differences&lt;/strong&gt; among programming languages.
Among Turing Complete programming languages there are few Profound
Differences.
The pragmatic differences are the relative ease (or pain) of expressing
specific algorithms or data structures.
This means that there's no easy, blanket, one-size-fits-all answer to
such a silly question.
You can have some code (or data) which is painful in Java and less
painful in Python.
But.
You can also find an extension library that makes it much, much less
painful.
This, alone, makes the question largely moot.
When it comes to a specific project, the question of the team's skills,
the existing infrastructure, and any integration requirements are the
driving considerations.
Because of this, an incumbent language has huge advantages.
If you've already got a dozen web sites in Java, there's no good reason
to flip-flop between Java and Python.
If you're going to switch from some Java Framework to Django, however,
you'd do this is part of a strategic commitment to drop Java and convert
to Python.
To read the discussion, see LinkedIn Python Community.
&lt;a class="reference external" href="http://www.linkedin.com/groupItem?view=&amp;amp;gid=25827&amp;amp;type=member&amp;amp;item=5796513808700682243&amp;amp;qid=8612bee7-76e1-4a35-9c80-c163494191b0&amp;amp;trk=groups_most_popular-0-b-ttl&amp;amp;goback=%2Egmp_25827"&gt;http://www.linkedin.com/groupItem?view=&amp;amp;gid=25827&amp;amp;type=member&amp;amp;item=5796513808700682243&amp;amp;qid=8612bee7-76e1-4a35-9c80-c163494191b0&amp;amp;trk=groups_most_popular-0-b-ttl&amp;amp;goback=%2Egmp_25827&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="java"></category></entry><entry><title>Mac OS X 10.9 "Mavericks" Crashes Python -- Patch Available</title><link href="https://slott56.github.io/2013_10_25-mac_os_x_109_mavericks_crashes_python_patch_available.html" rel="alternate"></link><published>2013-10-25T18:08:00-04:00</published><updated>2013-10-25T18:08:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-10-25:/2013_10_25-mac_os_x_109_mavericks_crashes_python_patch_available.html</id><summary type="html">&lt;p&gt;I upgraded to Mac OS X 10.9 &amp;quot;Mavericks&amp;quot; today.&lt;/p&gt;
&lt;p&gt;Python 3.2.4 crashed in odd places. Not all the time. But help()
stopped working to give one example.&lt;/p&gt;
&lt;p&gt;I upgraded to Python 3.3 (it's about time to do that, anyway.)&lt;/p&gt;
&lt;p&gt;It crashed, also. Similar places.&lt;/p&gt;
&lt;p&gt;Here's the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I upgraded to Mac OS X 10.9 &amp;quot;Mavericks&amp;quot; today.&lt;/p&gt;
&lt;p&gt;Python 3.2.4 crashed in odd places. Not all the time. But help()
stopped working to give one example.&lt;/p&gt;
&lt;p&gt;I upgraded to Python 3.3 (it's about time to do that, anyway.)&lt;/p&gt;
&lt;p&gt;It crashed, also. Similar places.&lt;/p&gt;
&lt;p&gt;Here's the workaround: &lt;a class="reference external" href="http://bugs.python.org/issue18458"&gt;http://bugs.python.org/issue18458&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's a script which you can download and run. This will tweak your
installations until the next maintenance release of Python.&lt;/p&gt;
&lt;p&gt;Whew. That was close.&lt;/p&gt;
&lt;p&gt;Now I need to square away setuptools and &amp;quot;easy_install-3.3&amp;quot; all the
missing pieces of my 3.2 environment.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="patch"></category><category term="crash"></category></entry><entry><title>Required Reading for everyone who said "If it ain't broke, don't fix it."</title><link href="https://slott56.github.io/2013_10_24-required_reading_for_everyone_who_said_if_it_aint_broke_dont_fix_it.html" rel="alternate"></link><published>2013-10-24T08:00:00-04:00</published><updated>2013-10-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-10-24:/2013_10_24-required_reading_for_everyone_who_said_if_it_aint_broke_dont_fix_it.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://pythonsweetness.tumblr.com/post/64740079543/how-to-lose-172-222-a-second-for-45-minutes"&gt;http://pythonsweetness.tumblr.com/post/64740079543/how-to-lose-172-222-a-second-for-45-minutes&lt;/a&gt;
Here an important lesson.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Code Rot is Real.  It Leads to Subtle and Expensive Bugs.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Claiming that code cleanup is just pointless &amp;quot;gold plating&amp;quot; is the kind
of thing that can drive a company out of business.&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="legacy code"></category></entry><entry><title>Literate Programming: PyLit3</title><link href="https://slott56.github.io/2013_10_15-literate_programming_pylit3.html" rel="alternate"></link><published>2013-10-15T08:00:00-04:00</published><updated>2013-10-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-10-15:/2013_10_15-literate_programming_pylit3.html</id><summary type="html">&lt;p&gt;I've revised PyLit to work with Python3.
See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt;
The code seems to pass all the unit tests.
The changes include Python3 revisions, plus a small change to handle
trailing spaces in a sightly cleaner fashion. This was necessary because
I have most of my editors …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've revised PyLit to work with Python3.
See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt;
The code seems to pass all the unit tests.
The changes include Python3 revisions, plus a small change to handle
trailing spaces in a sightly cleaner fashion. This was necessary because
I have most of my editors set to remove trailing spaces from the files I
create, and PyLit tended to create trailing spaces. This made the
expected output from the unit tests not precisely match the actual
output.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="PyLit"></category><category term="literate programming"></category></entry><entry><title>Literate Programming and PyLit</title><link href="https://slott56.github.io/2013_10_03-literate_programming_and_pylit.html" rel="alternate"></link><published>2013-10-03T08:00:00-04:00</published><updated>2013-10-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-10-03:/2013_10_03-literate_programming_and_pylit.html</id><summary type="html">&lt;p&gt;Even though I wrote a literate programming tool
(&lt;a class="reference external" href="http://pywebtool.sourceforge.net/"&gt;PyWeb&lt;/a&gt;) I slowly came to
realize that it's not very good.&lt;/p&gt;
&lt;p&gt;Mostly, I followed the Web/Weave world view and cribbed their markup
syntax. It's not bad, but, the PyWeb markup is based on some
presumptions about literate programming that were, perhaps …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Even though I wrote a literate programming tool
(&lt;a class="reference external" href="http://pywebtool.sourceforge.net/"&gt;PyWeb&lt;/a&gt;) I slowly came to
realize that it's not very good.&lt;/p&gt;
&lt;p&gt;Mostly, I followed the Web/Weave world view and cribbed their markup
syntax. It's not bad, but, the PyWeb markup is based on some
presumptions about literate programming that were, perhaps, true with
some languages, but are not true at all when working with Python.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The source presentation order incomprehensible. To fix this, we
create a literate programming document, and from that tangle the
source into an order that's acceptable to the compiler, but perhaps
hard to understand for people. We weave a document that's easy for
people to understand.&lt;/li&gt;
&lt;li&gt;The source syntax may be incomprehensible. To fix this, we have fine
grained substitution. The target source can be built at any level of
syntax (token, line, or higher-level language construct.) We can
assure that the woven document for people is written using elegant
symbols even if the tangled source code uses technical gibberish.&lt;/li&gt;
&lt;li&gt;The woven documentation needs a lot of additional output markup. The
original web/weave toolset create extensive TeX markup. Later tools
reduced the markup to allow HTML or XML, minimizing the added markup
in a woven document.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In Python, there's very little &amp;quot;boilerplate&amp;quot; or overhead in a module
file. Also, because of very late binding, the presentation order of
the source can better match reader expectations. For definitions,
inter-class references mandate an order for the class statements in
an inheritance hierarchy, but almost everything else is remarkably
flexible.&lt;/p&gt;
&lt;p&gt;Python syntax doesn't benefit from fine-grained web/weave techniques.
It's pretty clear as written in it's normal form.&lt;/p&gt;
&lt;p&gt;Finally, the presence of &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST
markup&lt;/a&gt; language means
that a whole new meta-markup for literate programming isn't
&lt;strong&gt;necessary&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/pylit"&gt;PyLit&lt;/a&gt; demonstrates that an
additional markup language is not helpful. RST is sufficient. PyLit
is an elegant parser of RST and Python. It can reshape RST into
Python as well as reshape Python into RST. Do your literate
programming in either language and produce the other easily.&lt;/p&gt;
&lt;div class="section" id="enter-python-3"&gt;
&lt;h2&gt;Enter Python 3&lt;/h2&gt;
&lt;p&gt;The problem with PyLit is that it's oriented to Python 2.4 through
2.7. How can we use PyLit for Python 3?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use six.py to make a single version that covers both Python2 and Python3.&lt;/li&gt;
&lt;li&gt;Rewrite PyLit it for Python3 and move forward.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My preference is to move forward. The backward compatibility is
helpful when there's a vast user base, lots of ongoing
development, and the very real possibility of bug fixes that apply
to Python2 as well as Python3.&lt;/p&gt;
&lt;p&gt;PyLit has a small user base, no real development to speak of, and a
very remote possibility of backward compatible bug fixes.&lt;/p&gt;
&lt;p&gt;The rewrites are small. Here's the summary.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remove print statement and exec statements.&lt;/li&gt;
&lt;li&gt;Replace string formatting % with .format().&lt;/li&gt;
&lt;li&gt;Replace raise statements and except statements with Python3 (and Python2.7) syntax.&lt;/li&gt;
&lt;li&gt;Upgrade for dict method changes in Python3.&lt;/li&gt;
&lt;li&gt;Replace DefaultDict with collections.defaultdict.&lt;/li&gt;
&lt;li&gt;Replace optparse with argparse.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've done this in my Python3.2 installation.&lt;/p&gt;
&lt;p&gt;This doesn't address the Sphinx documentation, however, which should
probably be tweaked to be the latest and greatest Sphinx version,
also. Not much will change, there, however, since the RST remains
compatible.&lt;/p&gt;
&lt;p&gt;Also, it doesn't address the files with names that differ only in
case. There are two graphics files in the /trunk/rstdocs/logo/ path
that differ only in &lt;strong&gt;case&lt;/strong&gt; of letters. Bad, but acceptable for
Linux. Fatal for Mac OS X with the default filesystem.&lt;/p&gt;
&lt;p&gt;The question is, what's the polite way to proceed?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fork the PyLit 0.7.5 to create PyLit3 release 1.0? A whole, new project.&lt;/li&gt;
&lt;li&gt;Try to use six.py to create a 2-3 compatible source file and call this PyLit 0.8?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding six.py to a package that was a single module file seems
like a bit of overkill. One of the elegant features of PyLit was
that it was so simple, it didn't even have a setup.py. However,
there may be a community of staunchly Python2 literate programming
advocates.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="literate programming"></category><category term="PyLit"></category><category term="pyWeb"></category></entry><entry><title>Introduction to Programming: iBook Edition for Python 3.2</title><link href="https://slott56.github.io/2013_09_24-introduction_to_programming_ibook_edition_for_python_32.html" rel="alternate"></link><published>2013-09-24T08:00:00-04:00</published><updated>2013-09-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-09-24:/2013_09_24-introduction_to_programming_ibook_edition_for_python_32.html</id><summary type="html">&lt;p&gt;That was challenging.&lt;/p&gt;
&lt;p&gt;I rewrote almost all of my Introduction to Programming book into an
iBook. Trimmed it down. Refocused it. Changed from Python 2.6 to 3.2.
A complete refactoring from which almost nothing of the original book
survives except the goals.&lt;/p&gt;
&lt;p&gt;Look for it October 1st in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;That was challenging.&lt;/p&gt;
&lt;p&gt;I rewrote almost all of my Introduction to Programming book into an
iBook. Trimmed it down. Refocused it. Changed from Python 2.6 to 3.2.
A complete refactoring from which almost nothing of the original book
survives except the goals.&lt;/p&gt;
&lt;p&gt;Look for it October 1st in the iTunes bookstore. &lt;a class="reference external" href="https://itunes.apple.com/us/book/programming-for-absolute-beginners/id707460405?ls=1"&gt;Programming for
Absolute Beginners: Building Skills in
Programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[My intent is to have several Building Skills titles. We'll see how
far I get.]&lt;/p&gt;
&lt;p&gt;The rewrite involved three substantial changes.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I removed all of the duplicative reference material. The Python
library reference is (now)  utstandingly good. When I started using
Python over ten years ago, it was not very good, and I started
writing a Python reference of my own merely to organize the
documentation. The books grew from there; the reference aspect is now
useless.&lt;/li&gt;
&lt;li&gt;I dropped almost all Python 2 references. There's a little bit of
Python 2 history, but that's it. It's time to move forward, now that
most of the major packages seem to have made the switch.&lt;/li&gt;
&lt;li&gt;I changed the focus from processing to data.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="processing-vs-data"&gt;
&lt;h2&gt;Processing vs. Data&lt;/h2&gt;
&lt;p&gt;When looking at a multi-faceted language like Python, it's difficult
to know what's the most gentle introduction to software development.&lt;/p&gt;
&lt;p&gt;Historically, the procedural, imperative style of programming appears
the most appealing. The roots of Python come from procedural
programming. It reaches back to Pascal (and even Algol 60) by
elegantly restating the core principles of those languages with an
easier-to-read syntax.&lt;/p&gt;
&lt;p&gt;Indeed, if you read classic foundational CACM articles where
essential algorithms were first formally described, they used a
neatly typeset variant on Algol that (for the early years of my
career) was the gold standard in how code should look. Python follows
this tradition nicely.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;That doesn't mean that procedural programming is really the
absolutely best way to introduce the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-first"&gt;
&lt;h2&gt;Data First&lt;/h2&gt;
&lt;p&gt;I think that it may be possible to introduce the language with a
focus on data objects first and the procedural/imperative statements
as a secondary consideration.&lt;/p&gt;
&lt;p&gt;When it comes to anything beyond trivial Rate-Time-Distance
calculations, the data structure matters more than almost any other
aspect of the software. The objects, their relationships, their
operations and their attributes are core to the problem. The
presentation, user actions and persistent representation are
secondary considerations after the structure of the data.&lt;/p&gt;
&lt;p&gt;It seems like the data structures should &amp;quot;drive&amp;quot; the presentation.
The outline of the book should be introductions of each of the
important and visible builtin data structures. Additionally, the
library extensions that are most often used can be introduced, also.&lt;/p&gt;
&lt;p&gt;Definitional features (def, return, yield, class, and the ideas of
module and package) are central, but a step behind the builtin data
structures.&lt;/p&gt;
&lt;p&gt;Procedural features (if, for, while, break, continue, with, etc.) are
clearly second-class; they exist only to support access to the data
structures. A for statement, makes a &amp;quot;for all&amp;quot; assertion about a data
structure. A for with a break (or a while) makes a &amp;quot;there exists&amp;quot;
assertion about a data structure. The data is central. The imperative
statements are secondary.&lt;/p&gt;
&lt;p&gt;Other features (global, nonlocal, del, raise, try, etc.) are
tertiary, and exist to create more elegant programs that don't annoy
the other developers as much.&lt;/p&gt;
&lt;p&gt;This also means that generator expressions and comprehensions are
first-class, front-and-center features of the language. This
parallels the approach in the &lt;a class="reference external" href="http://nltk.org/book/"&gt;NLTK Book&lt;/a&gt;,
which puts the focus on generator expressions as a way to clearly
state the processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-forms"&gt;
&lt;h2&gt;Other Forms&lt;/h2&gt;
&lt;p&gt;Currently, I only have the iBook available.&lt;/p&gt;
&lt;p&gt;The iBook Author application can (and does) produce a PDF. I think I
may offer that separately through
&lt;a class="reference external" href="http://www.lulu.com/"&gt;www.lulu.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="#python"></category><category term="ibooks"></category><category term="building skills books"></category></entry><entry><title>iWeb File Extract and XML Iterators</title><link href="https://slott56.github.io/2013_09_17-iweb_file_extract_and_xml_iterators.html" rel="alternate"></link><published>2013-09-17T08:21:00-04:00</published><updated>2013-09-17T08:21:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-09-17:/2013_09_17-iweb_file_extract_and_xml_iterators.html</id><summary type="html">&lt;p&gt;Once upon a time, Apple offered iBlog. Then they switched to iWeb.
Then they abandoned that market entirely.&lt;/p&gt;
&lt;p&gt;That leaves some of us with content in iBlog as well as iWeb. Content
we'd like to work with without doing extensive cutting and pasting. Or
downloading from a web server. After …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once upon a time, Apple offered iBlog. Then they switched to iWeb.
Then they abandoned that market entirely.&lt;/p&gt;
&lt;p&gt;That leaves some of us with content in iBlog as well as iWeb. Content
we'd like to work with without doing extensive cutting and pasting. Or
downloading from a web server. After all, the files are on our
computer.&lt;/p&gt;
&lt;p&gt;The iWeb files are essentially XML, making them relatively easy to
work with. We can reduce the huge, and hugely complex iWeb XML to a
simple iterator and use a simple &lt;strong&gt;for&lt;/strong&gt; statement to extract the
content.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;Historical note. I wrote a Python script to convert iBlog to RST. It
worked reasonably well, all things considered. This is not the first
time I've tried to preserve old content from obsolete tools. Sigh.&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;Some tools (like SandVox) have a &amp;quot;extract iWeb content&amp;quot; mode. But
that's not what we want. We don't want to convert from iWeb to another
blog. We want to convert from iWeb to CVS or some other more useful
format so we can do some interesting processing, not simple web
presentation.&lt;/p&gt;
&lt;p&gt;This is a note on how to read iWeb files to get at the content. And
further, how to get at XML content in the form of a simple iterator.&lt;/p&gt;
&lt;div class="section" id="opening-the-package"&gt;
&lt;h2&gt;Opening The Package&lt;/h2&gt;
&lt;p&gt;Here's how to overview the package.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
path=&amp;quot;~/Documents/iWeb/Domain&amp;quot;
path_full= os.path.expanduser(path+&amp;quot;.sites2&amp;quot;)
for filename in os.listdir(path_full):
    name, ext = os.path.splitext( filename )
    if ext.lower() in ( &amp;quot;.jpg&amp;quot;, &amp;quot;.png&amp;quot;, &amp;quot;.mov&amp;quot;, &amp;quot;.m4v&amp;quot;, &amp;quot;.tiff&amp;quot;, &amp;quot;.gif&amp;quot;, &amp;quot;.m4a&amp;quot;, &amp;quot;.mpg&amp;quot;, &amp;quot;.pdf&amp;quot; ): continue
    print( filename )
&lt;/pre&gt;
&lt;p&gt;This will reveal the files; we only really care about the
&amp;quot;index.xml.gz&amp;quot; file since that has the bulk of the content.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with closing( gzip.GzipFile( os.path.join(path_full,&amp;quot;index.xml.gz&amp;quot;) ) ) as index:
    index_doc= xml.parse( index )
    index_root= index_doc.getroot()
&lt;/pre&gt;
&lt;p&gt;This gets us the XML version of the blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finding-the-pages"&gt;
&lt;h2&gt;Finding the Pages&lt;/h2&gt;
&lt;p&gt;We can use the following to thread through the XML. We're looking for
a particular &amp;quot;Domain&amp;quot;, a &amp;quot;Site&amp;quot; and a particular blog page within that
site. The rest of the blog is mostly text. This portion of the blog is
more structured.&lt;/p&gt;
&lt;p&gt;For some reason, the domain is &amp;quot;Untitled&amp;quot;. The site is &amp;quot;Cruising&amp;quot;, and
the blog page is &amp;quot;Travel 2012-2013&amp;quot;. We insert these target names into
XPath search strings to locate the relevant content.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
search= '{{http://developer.apple.com/namespaces/bl}}domain[&amp;#64;{{http://developer.apple.com/namespaces/sf}}name=&amp;quot;{0}&amp;quot;]'.format(domain_name)
domain= index_root.find( search )
mdu_uuid_tag= domain.find('{http://developer.apple.com/namespaces/bl}metadata/{http://developer.apple.com/namespaces/bl}MDUUID')
mdu_uuid_value= mdu_uuid_tag.find('{http://developer.apple.com/namespaces/bl}string').get('{http://developer.apple.com/namespaces/sfa}string')
domain_filename= &amp;quot;domain-{0}&amp;quot;.format( mdu_uuid_value )

search= './/{{http://developer.apple.com/namespaces/bl}}site[&amp;#64;{{http://developer.apple.com/namespaces/sf}}name=&amp;quot;{0}&amp;quot;]'.format(site_name)
cruising= domain.find(search)
mdu_uuid_tag= cruising.find('{http://developer.apple.com/namespaces/bl}metadata/{http://developer.apple.com/namespaces/bl}MDUUID')
mdu_uuid_value= mdu_uuid_tag.find('{http://developer.apple.com/namespaces/bl}string').get('{http://developer.apple.com/namespaces/sfa}string')
site_filename= &amp;quot;site-{0}&amp;quot;.format(mdu_uuid_value)

search= '{{http://developer.apple.com/namespaces/bl}}site-blog[&amp;#64;{{http://developer.apple.com/namespaces/sf}}name=&amp;quot;{0}&amp;quot;]'.format(site_blog_name)
site_nodes= cruising.find('{http://developer.apple.com/namespaces/bl}site-nodes')
travel= site_nodes.find(search)
mdu_uuid_tag= travel.find('{http://developer.apple.com/namespaces/bl}metadata/{http://developer.apple.com/namespaces/bl}MDUUID')
mdu_uuid_value= mdu_uuid_tag.find('{http://developer.apple.com/namespaces/bl}string').get('{http://developer.apple.com/namespaces/sfa}string')
site_blog_filename= &amp;quot;site-blog-{0}&amp;quot;.format(mdu_uuid_value)
&lt;/pre&gt;
&lt;p&gt;This will allow us to iterate through the blog entries, called
&amp;quot;pages&amp;quot;. Each page, it turns out, is stored in a separate XML file
with the page details and styles. A lot of styles. We have to assemble
the path from the base path, the domain, site,  site-blog and
site-page names. We'll find an &amp;quot;.xml.gz&amp;quot; file that has the individual
blog post.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for site_page in travel.findall('{http://developer.apple.com/namespaces/bl}series/{http://developer.apple.com/namespaces/bl}site-page'):
    mdu_uuid_tag= site_page.find('{http://developer.apple.com/namespaces/bl}metadata/{http://developer.apple.com/namespaces/bl}MDUUID')
    mdu_uuid_value= mdu_uuid_tag.find('{http://developer.apple.com/namespaces/bl}string').get('{http://developer.apple.com/namespaces/sfa}string')
    site_page_filename= &amp;quot;site-page-{0}&amp;quot;.format(mdu_uuid_value)

    blog_path= os.path.join(path_full, domain_filename, site_filename, site_blog_filename, site_page_filename )
    with closing( gzip.GzipFile( os.path.join(blog_path,site_page_filename+&amp;quot;.xml.gz&amp;quot;) ) ) as child:
        child_doc= xml.parse( child )
        child_root= child_doc.getroot()
    main_layer= child_root.find( '{http://developer.apple.com/namespaces/bl}site-page/{http://developer.apple.com/namespaces/bl}drawables/{http://developer.apple.com/namespaces/bl}main-layer' )
&lt;/pre&gt;
&lt;p&gt;Once we have access to the page XML document, we can extract the
content. At this point, we could define a function which simply
yielded the individual site_page tags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-iterable"&gt;
&lt;h2&gt;Summary Iterable&lt;/h2&gt;
&lt;p&gt;The most useful form for the pages is an iterable that yields the
date, title and content text. In this case, we're not going to
preserve the internal markup, we're just going to extract the text in
bulk.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
content_map = {}
for ds in main_layer.findall( '{http://developer.apple.com/namespaces/sf}drawable-shape' ):
    style_name= ds.get('{http://developer.apple.com/namespaces/sf}name')
    if style_name is None:
        #xml.dump( ds ) # Never has any content.
        continue
    for tb in ds.findall('{http://developer.apple.com/namespaces/sf}text/{http://developer.apple.com/namespaces/sf}text-storage/{http://developer.apple.com/namespaces/sf}text-body' ):
        # Simply extract text. Markup is lost.
        content_map[style_name] = tb.itertext()
yield content_map
&lt;/pre&gt;
&lt;p&gt;This works because the text has no useful semantic markup. It's
essentially HTML formatting full of span and div tags.&lt;/p&gt;
&lt;p&gt;Note that this could be a separate generator function, or it could be
merged into the loop that finds the site-page tags. It's unlikely we'd
ever have another source of site-page tags. But, it's very like that
we'd have another function for extracting the text, date and title
from a site-page tag. Therefore, we &lt;em&gt;should&lt;/em&gt; package this as a
separate generator function.  We didn't, however. It's just a big old
function named postings_iter().&lt;/p&gt;
&lt;p&gt;There are three relevant style names. We're not sure why these are
used, but they're completely consistent indicators of the content.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;generic-datefield-attributes (from archive)&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;generic-title-attributes (from archive)&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;generic-body-attributes (from archive)&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These becomes keys of the content_map mapping. The values are
iterators over the text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="processing-the-text"&gt;
&lt;h2&gt;Processing The Text&lt;/h2&gt;
&lt;p&gt;Here's an iterator that makes use of the postings_iter() function
shown above.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def flatten_posting_iter( postings=postings_iter(path=&amp;quot;~/Documents/iWeb/Domain&amp;quot;) ):
    &amp;quot;&amp;quot;&amp;quot;Minor cleanup to the postings to parse the date and flatten out the title.&amp;quot;&amp;quot;&amp;quot;
    for content_map in postings:
        date_text= &amp;quot; &amp;quot;.join( content_map['generic-datefield-attributes (from archive)'] )
        date= datetime.datetime.strptime( date_text, &amp;quot;%A, %B %d, %Y&amp;quot; ).date()
        title= &amp;quot; &amp;quot;.join( content_map['generic-title-attributes (from archive)'] )
        body= content_map['generic-body-attributes (from archive)']
        yield date, title, body
&lt;/pre&gt;
&lt;p&gt;This will parse the dates, compress the title to remove internal
markup, but otherwise leave the content untouched.&lt;/p&gt;
&lt;p&gt;Now we can use the following kind of loop to examine each posting.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
flat_postings=flatten_posting_iter(postings_iter(path=&amp;quot;~/Documents/iWeb/Domain&amp;quot;))
for date, title, text_iter in sorted(flat_postings):
    for text in text_iter:
       # examine the text for important content.
&lt;/pre&gt;
&lt;p&gt;We've sorted the posting into date order. Now we can process the text
elements to look for the relevant content.&lt;/p&gt;
&lt;p&gt;In this case, we're looking for Lat/Lon coordinates, which have rather
complex (but easy to spot) regular expressions. So the &amp;quot;examine&amp;quot; part
is a series of RE matches to collect the data points we're looking
for.&lt;/p&gt;
&lt;p&gt;We'll leave off those application-specific details. We'll leave it at
the following outline of the processing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def fact_iter( flat_postings=flatten_posting_iter(postings_iter(path=&amp;quot;~/Documents/iWeb/Domain&amp;quot;)) ):
   for date, title, text_iter in sorted(flat_postings):
       fact= Fact()
       for text in text_iter:
          # examine the text for important content, set attributes of fact
          if fact.complete():
              yield fact
              fact= Fact()
&lt;/pre&gt;
&lt;p&gt;This iterates through focused data structures that include the
requested lat/lon points.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-application"&gt;
&lt;h2&gt;Final Application&lt;/h2&gt;
&lt;p&gt;The final application function that uses all of these iterators has
the following kind of structure.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source= flat_postings=flatten_posting_iter(postings_iter(path=&amp;quot;~/Documents/iWeb/Domain&amp;quot;))
with open('target.csv', 'w', newlines='') as target:
   wtr= csv.DictWriter( target, Fact.heading )
   wtr.writeheader()
   for fact in fact_iter( source ):
       wtr.writerow( fact.as_dict() )
&lt;/pre&gt;
&lt;p&gt;We're simply iterating through the facts and writing them to a CSV
file.&lt;/p&gt;
&lt;p&gt;We can also simplify the last bit to this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wtr.writerows( f.as_dict() for f in fact_iter( source ) )
&lt;/pre&gt;
&lt;p&gt;The iWeb XML structure, while bulky and complex, can easily be reduced
to a simple iterator. That's why I love Python.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="xml"></category><category term="#python"></category><category term="iWeb"></category></entry><entry><title>Omni Outliner, XML Processing, and Recursive Generators</title><link href="https://slott56.github.io/2013_09_12-omni_outliner_xml_processing_and_recursive_generators.html" rel="alternate"></link><published>2013-09-12T08:00:00-04:00</published><updated>2013-09-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-09-12:/2013_09_12-omni_outliner_xml_processing_and_recursive_generators.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;First, and most important, &lt;a class="reference external" href="http://www.omnigroup.com/products/omnioutliner/"&gt;Omni
Outliner&lt;/a&gt; is a
super-flexible tool. Crazy levels of flexibility. It's very much a
generic-all-singing-all-dancing information management tool.&lt;/div&gt;
&lt;div class="line"&gt;It has a broad spectrum of file export alternative formats. Most of
which are fine for import into some kind of word processor.&lt;/div&gt;
&lt;div class="line"&gt;But what if the data …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;First, and most important, &lt;a class="reference external" href="http://www.omnigroup.com/products/omnioutliner/"&gt;Omni
Outliner&lt;/a&gt; is a
super-flexible tool. Crazy levels of flexibility. It's very much a
generic-all-singing-all-dancing information management tool.&lt;/div&gt;
&lt;div class="line"&gt;It has a broad spectrum of file export alternative formats. Most of
which are fine for import into some kind of word processor.&lt;/div&gt;
&lt;div class="line"&gt;But what if the data is more suitable for a spreadsheet or some more
structured environment? What if it was a detailed log or a project
outline decorated with a column of budget numbers?&lt;/div&gt;
&lt;div class="line"&gt;We have two approaches, one is workable, but not great, the other has
numerous advantages.&lt;/div&gt;
&lt;div class="line"&gt;In the previous post, &amp;quot;Omni Outliner and Content Conversion&amp;quot;, we read
an export in tab-delimited format. It was workable but icky.&lt;/div&gt;
&lt;div class="line"&gt;Here's the alternative. This uses a recursive generator function to
flatten out the hierarchy. There's a trick to recursion with generator
functions.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Answer 2: Look Under the Hood&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;At the Mac OS X level, an Omni Outline is a &amp;quot;package&amp;quot;. A directory
that appears to be a single file icon to the user. If we open that
directory, however, we can see that there's an XML file inside the
package that has the information we want.&lt;/div&gt;
&lt;div class="line"&gt;Here's how we can process that file.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
import xml.etree.ElementTree as xml
import os
import gzip

packagename= &amp;quot;{0}.oo3&amp;quot;.format(filename)
assert 'contents.xml' in os.listdir(packagename)
with gzip.GzipFile(packagename+&amp;quot;/contents.xml&amp;quot;, 'rb' ) as source:
   self.doc= xml.parse(source)
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This assumes it's compressed on disk. The outlines don't have to be
compressed. It's an easy try/except block to attempt the parsing
without unzipping. We'll leave that as an exercise for the reader.&lt;/div&gt;
&lt;div class="line"&gt;And here's how we can get the column headings: they're easy to find in
the XML structure.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
self.heading = []
for c in self.doc.findall(
        &amp;quot;{http://www.omnigroup.com/namespace/OmniOutliner/v3}columns&amp;quot;
        &amp;quot;/{http://www.omnigroup.com/namespace/OmniOutliner/v3}column&amp;quot;):
    # print( c.tag, c.attrib, c.text )
    if c.attrib.get('is-note-column','no') == &amp;quot;yes&amp;quot;:
        pass
    else:
        # is-outline-column == &amp;quot;yes&amp;quot;? May be named &amp;quot;Topic&amp;quot;.
        # other columns don't have a special role
        title= c.find(&amp;quot;{http://www.omnigroup.com/namespace/OmniOutliner/v3}title&amp;quot;)
        name= &amp;quot;&amp;quot;.join( title.itertext() )
        self.heading.append( name )
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Now that we have the columns titles, we're able to walk the outline
hierarchy, emitting normalized data. The indentation depth number is
provided to distinguish the meaning of the data.&lt;/div&gt;
&lt;div class="line"&gt;This involves a recursive tree-walk. Here's the top-level method
function.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def __iter__( self ):
    &amp;quot;&amp;quot;&amp;quot;Find  for outline itself. Each item has values and children.
    Recursive walk from root of outline down through the structure.
    &amp;quot;&amp;quot;&amp;quot;
    root= self.doc.find(&amp;quot;{http://www.omnigroup.com/namespace/OmniOutliner/v3}root&amp;quot;)
    for item in root.findall(&amp;quot;{http://www.omnigroup.com/namespace/OmniOutliner/v3}item&amp;quot;):
        for row in self._tree_walk(item):
            yield row
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;Here's the internal method function that does the real work.&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="literal-block"&gt;
def _tree_walk( self, node, depth=0 ):
    &amp;quot;&amp;quot;&amp;quot;Iterator through item structure; descends recursively.
    &amp;quot;&amp;quot;&amp;quot;
    note= node.find( '{http://www.omnigroup.com/namespace/OmniOutliner/v3}note' )
    if note is not None:
        note_text= &amp;quot;&amp;quot;.join( note.itertext() )
    else:
        note_text= None
    data= []
    values= node.find( '{http://www.omnigroup.com/namespace/OmniOutliner/v3}values' )
    if values is not None:
        for c in values:
            if c.tag == &amp;quot;{http://www.omnigroup.com/namespace/OmniOutliner/v3}text&amp;quot;:
                text= &amp;quot;&amp;quot;.join( c.itertext() )
                data.append( text )
            elif c.tag == &amp;quot;{http://www.omnigroup.com/namespace/OmniOutliner/v3}null&amp;quot;:
                data.append( None )
            else:
                raise Exception( c.tag )
    yield depth, note_text, data
    children= node.find( '{http://www.omnigroup.com/namespace/OmniOutliner/v3}children' )
    if children is not None:
        for child in children.findall( '{http://www.omnigroup.com/namespace/OmniOutliner/v3}item' ):
            for row in self._tree_walk( child, depth+1 ):
                yield row
&lt;/pre&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;This gets us the data in a form that doesn't require a lot of external
schema information.&lt;/div&gt;
&lt;div class="line"&gt;Each row has the indentation depth number, the note text, and the
various columns of data. The only thing we need to know is which of
the data columns has the indented outline.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Trick&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;Here's the tricky bit.&lt;/div&gt;
&lt;div class="line"&gt;When we recurse using a generator function, we have to explicitly
iterate through the recursive result set. This is different from
recursion in simple (non-generator) functions. In a simple function,
we it looks like this.&lt;/div&gt;
&lt;div class="line"&gt;def function( args ):&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;if base case: return value&lt;/div&gt;
&lt;div class="line"&gt;else:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;return calculation on function( other args )&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;When there's a generator involved, we have to do this instead.&lt;/div&gt;
&lt;div class="line"&gt;def function_iter( args ):&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;if base case: yield value&lt;/div&gt;
&lt;div class="line"&gt;else:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;for x in function_iter( other args )&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;yield x&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Columnizing a Hierarchy&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;The depth number makes our data look like this.&lt;/div&gt;
&lt;div class="line"&gt;0, &amp;quot;2009&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;1, &amp;quot;November&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;2, &amp;quot;Item In Outline&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;3, &amp;quot;Subitem in Outline&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;1, &amp;quot;December&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;2, &amp;quot;Another Item&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;3, &amp;quot;More Details&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;We can normalize this into columns. We can take the depth number as a
column number. When the depth numbers are increasing, we're building a
row. When the depth number decreases, we've finished a row and are
starting the next row.&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;2009&amp;quot;, &amp;quot;November&amp;quot;, &amp;quot;Item in Outline&amp;quot;, &amp;quot;Subitem in Outline&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;&amp;quot;2009&amp;quot;, &amp;quot;December&amp;quot;, &amp;quot;Another Item&amp;quot;, &amp;quot;More Details&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;The algorithm works like this.&lt;/div&gt;
&lt;div class="line"&gt;row, depth_prev = [], -1&lt;/div&gt;
&lt;div class="line"&gt;for depth, text in source:&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;while len(row) &amp;lt;= depth+1: row.append(None)&lt;/div&gt;
&lt;div class="line"&gt;if depth &amp;lt;= depth_prev: yield row&lt;/div&gt;
&lt;div class="line"&gt;row[depth:]= [text]+(len(row)-depth-1)*[None]&lt;/div&gt;
&lt;div class="line"&gt;depth_prev= depth&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;yield row&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The yield will have to also handle the non-outline columns that may
also be part of the Omni Outliner extract.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data conversion"></category><category term="#python"></category><category term="xml"></category><category term="ETL"></category><category term="csv"></category></entry><entry><title>Omni Outliner and Content Conversion</title><link href="https://slott56.github.io/2013_09_10-omni_outliner_and_content_conversion.html" rel="alternate"></link><published>2013-09-10T08:00:00-04:00</published><updated>2013-09-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-09-10:/2013_09_10-omni_outliner_and_content_conversion.html</id><summary type="html">&lt;p&gt;First, and most important, &lt;a class="reference external" href="http://www.omnigroup.com/products/omnioutliner/"&gt;Omni
Outliner&lt;/a&gt; is a
super-flexible tool. Crazy levels of flexibility. It's very much a
generic-all-singing-all-dancing information management tool.&lt;/p&gt;
&lt;p&gt;It has a broad spectrum of file export alternative formats. Most of
which are fine for import into some kind of word processor.&lt;/p&gt;
&lt;p&gt;But what if the data …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, and most important, &lt;a class="reference external" href="http://www.omnigroup.com/products/omnioutliner/"&gt;Omni
Outliner&lt;/a&gt; is a
super-flexible tool. Crazy levels of flexibility. It's very much a
generic-all-singing-all-dancing information management tool.&lt;/p&gt;
&lt;p&gt;It has a broad spectrum of file export alternative formats. Most of
which are fine for import into some kind of word processor.&lt;/p&gt;
&lt;p&gt;But what if the data is more suitable for a spreadsheet or some more
structured environment? What if it was a detailed log or a project
outline decorated with a column of budget numbers?&lt;/p&gt;
&lt;p&gt;We have two approaches, one is workable, but not great, the other has
numerous advantages.&lt;/p&gt;
&lt;div class="section" id="answer-1-workable"&gt;
&lt;h2&gt;Answer 1: Workable&lt;/h2&gt;
&lt;p&gt;Sure, you say, that's easy. Export into a Plain Text with Tabs (or
HTML or OPML) and then parse the resulting tab-delimited file.&lt;/p&gt;
&lt;p&gt;In Python. Piece of cake.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import csv

class Tab_Delim(csv.Dialect):
    delimiter='\t'
    doublequote=False
    escapechar='\\'
    lineterminator='\n'
    quotechar=''
    quoting=csv.QUOTE_NONE
    skipinitialspace=True

rdr= csv.reader( source, dialect=Tab_Delim )
column_names= next(rdr)
for row in rdr:
   # Boom. There it is.
&lt;/pre&gt;
&lt;p&gt;That gets us started. But.&lt;/p&gt;
&lt;p&gt;Each row is variable length. The number of columns varies with the
level of indentation. The good news is that the level of indentation
is consistent. Very consistent. Year, Month, Topic, Details in this
case.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;When an outline is super consistent, one wonders why a spreadsheet
wasn't used.&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;Each outline node in the export is prefaced with &amp;quot;- &amp;quot;.&lt;/p&gt;
&lt;p&gt;It looks pretty when printed. But it doesn't parse cleanly, since the
data moves around.&lt;/p&gt;
&lt;p&gt;Further, it turns out that &amp;quot;notes&amp;quot; (blocks of text attached to an
outline node, but not part of the outline hierarchy) show up in the
last column along with the data items that properly belong in the last
column.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;The good news is that notes seem to appear on a line by themselves,
where the data elements seem to be properly attached to outline nodes.
It's still possible to have a &amp;quot;blank&amp;quot; outline node with data in the
columns, but that's unlikely.&lt;/p&gt;
&lt;p&gt;We have to do some cleanup&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="answer-1a-cleanup-in-column-1"&gt;
&lt;h2&gt;Answer 1A: Cleanup In Column 1&lt;/h2&gt;
&lt;p&gt;We want to transform indented data into proper first-normal form
schema with a consistent number of fixed columns. Step 1 is to know
the deepest indent. Step 2 is to then fill each row with enough empty
columns to normalize the rows.&lt;/p&gt;
&lt;p&gt;Each specific outline has a kind of schema that defines the layout of
the export file. One of the tab-delimimted columns will be the
&amp;quot;outline&amp;quot; column: it will have tabs and leading &amp;quot;-&amp;quot; to show the
outline hierarchy. The other columns will be non-outline columns.
There may be a notes column and there will be the interesting data
columns which are non-notes and non-outline.&lt;/p&gt;
&lt;p&gt;In our tab-delimited export, the outline (&amp;quot;Topic&amp;quot;) is first. Followed
by two data columns. The minimal row size, then will be three columns.
As the topics are indented more and more, then the number of columns
will appear to grow. To normalize, then, we need to pad, pushing the
last two columns of data to the right.&lt;/p&gt;
&lt;p&gt;That leads to a multi-part cleanup pipeline. First, figure out how
many columns there are.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rows= list( rdr )
width_max= max( len(r) for r in rows )+1
&lt;/pre&gt;
&lt;p&gt;This allows us the following two generator functions to fill each row
and strip &amp;quot;-&amp;quot;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def filled( source, width, data_count ):
    &amp;quot;&amp;quot;&amp;quot;Iterable with each row filled to given width.
    Rightmost {data_count} columns are pushed right to preserve
    their position.
    &amp;quot;&amp;quot;&amp;quot;
    for r_in in source:
        yield r_in[:-data_count] + ['']*(width-len(r_in)) + r_in[-data_count:]

def cleaned( source ):
    &amp;quot;&amp;quot;&amp;quot;Iterable with each column cleaned of leading &amp;quot;- &amp;quot;
    &amp;quot;&amp;quot;&amp;quot;
    def strip_dash( c ):
        return c[2:] if c.startswith('- ') else c

    for row in source:
        yield list( strip_dash(c) for c in row )
&lt;/pre&gt;
&lt;p&gt;That gets us to the following main loop in a conversion function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for row in cleaned( filled( rows, width_max, len(columns) ) ):
    # Last column may have either a note or column data.
    # If all previous columns empty, it's probably a note, not numeric value.
    if all( len(c)==0 for c in row[:-1] ):
        row[4]= row[-1]
        row[-1]= ''
    yield row
&lt;/pre&gt;
&lt;p&gt;Now we can do some real work with properly normalized data. With
overheads, we have an 80-line module that lets us process the outline
extract in a simple, civilized CSV-style loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ick-factor"&gt;
&lt;h2&gt;The Ick Factor&lt;/h2&gt;
&lt;p&gt;What's unpleasant about this is that it requires a fair amount of
configuration.&lt;/p&gt;
&lt;p&gt;The conversion from tab-delim outline to normalized data requires some
schema information that's difficult to parameterize.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which column has the outline.&lt;/li&gt;
&lt;li&gt;Are there going to be notes on lines by themselves.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can deduce how many columns of ancillary data are present, but the
order of the columns is a separate piece of logical schema that we
can't deduce from the export itself.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data conversion"></category><category term="#python"></category><category term="ETL"></category><category term="csv"></category></entry><entry><title>Negative Requirements</title><link href="https://slott56.github.io/2013_08_08-negative_requirements.html" rel="alternate"></link><published>2013-08-08T08:00:00-04:00</published><updated>2013-08-08T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-08-08:/2013_08_08-negative_requirements.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Nothing is funnier than requirements which state things that are
&lt;strong&gt;not&lt;/strong&gt; to happen.&lt;/div&gt;
&lt;div class="line"&gt;An actual quote.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
... don't screw up cutting and pasting and the &amp;quot;/&amp;quot; vs &amp;quot;\&amp;quot; depending
on unix / windows.&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Why not list everything that's &lt;strong&gt;not&lt;/strong&gt; supposed to happen?&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No fire in the server room.&lt;/li&gt;
&lt;li&gt;No anthrax outbreak.&lt;/li&gt;
&lt;li&gt;No Zombie apocalypse …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Nothing is funnier than requirements which state things that are
&lt;strong&gt;not&lt;/strong&gt; to happen.&lt;/div&gt;
&lt;div class="line"&gt;An actual quote.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
... don't screw up cutting and pasting and the &amp;quot;/&amp;quot; vs &amp;quot;\&amp;quot; depending
on unix / windows.&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Why not list everything that's &lt;strong&gt;not&lt;/strong&gt; supposed to happen?&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No fire in the server room.&lt;/li&gt;
&lt;li&gt;No anthrax outbreak.&lt;/li&gt;
&lt;li&gt;No Zombie apocalypse.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;The list could go on. I wonder why it doesn't.&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="requirements"></category><category term="user stories"></category></entry><entry><title>How to Manage Risk</title><link href="https://slott56.github.io/2013_08_06-how_to_manage_risk.html" rel="alternate"></link><published>2013-08-06T08:00:00-04:00</published><updated>2013-08-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-08-06:/2013_08_06-how_to_manage_risk.html</id><summary type="html">&lt;p&gt;Also see &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2013_06_27-on_risk_and_estimating_and_agile_methods.html"&gt;On Risk and Estimating and Agile
Methods&lt;/a&gt;&amp;quot;.
This post is yet another angle on a common theme.&lt;/p&gt;
&lt;div class="section" id="orders-of-ignorance-and-risk-management"&gt;
&lt;h2&gt;Orders of Ignorance and Risk Management.&lt;/h2&gt;
&lt;p&gt;Software risk management has two sides.  First, there's the classical
meaning of risk, we'll call that &amp;quot;casino risk&amp;quot; because it's really
random events.  This includes …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Also see &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2013_06_27-on_risk_and_estimating_and_agile_methods.html"&gt;On Risk and Estimating and Agile
Methods&lt;/a&gt;&amp;quot;.
This post is yet another angle on a common theme.&lt;/p&gt;
&lt;div class="section" id="orders-of-ignorance-and-risk-management"&gt;
&lt;h2&gt;Orders of Ignorance and Risk Management.&lt;/h2&gt;
&lt;p&gt;Software risk management has two sides.  First, there's the classical
meaning of risk, we'll call that &amp;quot;casino risk&amp;quot; because it's really
random events.  This includes fire, flood, famine, conquest, war,
pestilence, death, etc.  Actual risks.&lt;/p&gt;
&lt;p&gt;The second meaning of risk is a load of malarkey.  It's a code word
that includes two things: &amp;quot;bad management&amp;quot; and &amp;quot;ignorance&amp;quot;.  Some
things called project risks are just plain old bad
management—generally driven by a nonexistent process for handling
ignorance.  The events aren't random.&lt;/p&gt;
&lt;p&gt;There are five orders of ignorance, and each of them leads to project
management problems.  None of these are &amp;quot;random events&amp;quot;; none of this
is like casino gambling.  There aren't any odds; most of these things
are certainties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="order-ignorance-things-we-know"&gt;
&lt;h2&gt;0 Order Ignorance: Things We Know.&lt;/h2&gt;
&lt;p&gt;There are two sides to the things we think we know about a project.
There are the things we know which are true, and things which are
false.  Falsehoods come from at least two places:  we assumed
something or we were actually lied to.  (Other choices, like
illusions and hallucinations, are too creepy to pursue.)&lt;/p&gt;
&lt;p&gt;Our assumptions aren't facts.  This sounds so obviously stupid, but
projects get into trouble based on assumptions that were never
checked to see if they were true or not.  Managers insist on doing
&amp;quot;risk analysis&amp;quot; and then pad their project estimates with time and
money instead of simply challenging their assumptions.&lt;/p&gt;
&lt;p&gt;Some &amp;quot;assumptions&amp;quot; are explicit placeholders for facts to be found
out later.  These formally documented assumptions are a different
thing, they're 1st order ignorance, something we know we don't know.&lt;/p&gt;
&lt;p&gt;Example.  The customer says they need an app to do [X].  There's 8
people in the department who are likely actors.  We assume the user
population is 8.  With no fact checking.  We don't put it in the plan
as a formal, documented assumption, we just assume it.&lt;/p&gt;
&lt;p&gt;Bottom line.  What are the odds that a plan is based on false
knowledge?  This isn't casino gambling.  There aren't any odds that
we assumed something, or odds that we were lied to.  This is simple
fact-checking, simple bad management. Every unchecked fact is going
to be false.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="st-order-ignorance-things-we-don-t-know"&gt;
&lt;h2&gt;1st Order Ignorance: Things We Don't Know.&lt;/h2&gt;
&lt;p&gt;There are two ways to deal with things we don't know.  Make a guess
and document this, or actually ask a question.&lt;/p&gt;
&lt;p&gt;The formally documented guesses (usually called &amp;quot;assumptions&amp;quot;) are
the hallmark of software project plans.  Documents are often full of
lists of assumptions on which the plan and associated estimates rest.&lt;/p&gt;
&lt;p&gt;Each one of these &amp;quot;assumptions&amp;quot; is a question that—for some
reason—couldn't be asked or couldn't be answered.  Some questions are
&amp;quot;politically sensitive&amp;quot; and can't be asked.  Some questions require
lots of research to develop an answer.&lt;/p&gt;
&lt;p&gt;The answers, of course, change the project.  In most cases they
change the project dramatically.  If they didn't have a big impact,
we wouldn't spend any time documenting them so carefully, would we?&lt;/p&gt;
&lt;p&gt;And all project managers are punished for making any changes.  We
can't expand the scope without a lot of accusatory conversations
where people keep repeating the original price back to us.&lt;/p&gt;
&lt;p&gt;The canonical line is something like &amp;quot;I thought this was only 1.8
million dollars, how can you change it now?&amp;quot; or &amp;quot;I've already
committed to $750K, we can't change the price, something else has to
be changed.  We have to work smarter not harder.&amp;quot;  Bleah.&lt;/p&gt;
&lt;p&gt;This doesn't involve casino-like odds of finding answers that will
change the scope of the project.  We know we have questions.  We know
we made guesses and documented them as &amp;quot;assumptions&amp;quot;.  There were no
odds; it was absolutely certain there would be changes.&lt;/p&gt;
&lt;p&gt;Bottom line.  What are the odds that a plan is based on things we
guessed at?  Typically, this is a fact of life: parts of the estimate
are guesses.&lt;/p&gt;
&lt;p&gt;What are the odds that the real answer will be different from the
guess?  This, too, is absolutely certain. It's merely a question of
magnitude.&lt;/p&gt;
&lt;p&gt;For first-order ignorance problems, we should create a contingency
budget for each answer that will diverge from the guesses.  This
isn't a book-making exercise, it's a list of alternate guesses (or
assumptions).&lt;/p&gt;
&lt;p&gt;It isn't enough to simply detail the assumptions.  We have to provide
alternative answers and the associated costs when the assumptions
turn out to be false.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nd-order-ignorance-things-we-didn-t-know-to-ask"&gt;
&lt;h2&gt;2nd Order Ignorance: Things We Didn't Know to Ask.&lt;/h2&gt;
&lt;p&gt;If we didn't know to ask, what's that?  Is that a risk?  What are the
odds we forgot to ask something?&lt;/p&gt;
&lt;p&gt;Here's the canonical quote: &amp;quot;Are there any other unforeseen
problems?&amp;quot;&lt;/p&gt;
&lt;p&gt;What? If they're unforeseen, then, uhhh, we can't identify them now.&lt;/p&gt;
&lt;p&gt;If we can identify them, then, uhhh, they're not unforeseen.&lt;/p&gt;
&lt;p&gt;There aren't any &amp;quot;odds&amp;quot; of an unforeseen problem.  It's an absolute
certainty that there will be unforeseen problems.&lt;/p&gt;
&lt;p&gt;Remember, these are things we didn't know to ask.  Things that didn't
make the list of &amp;quot;assumptions&amp;quot;.  These are things that completely
escaped our attention.&lt;/p&gt;
&lt;p&gt;What will the impact be?  We have no way of knowing. No. Way. Of.
Knowing.&lt;/p&gt;
&lt;p&gt;We can't even put a contingency in place for these things.  We didn't
know to ask.  So we don't know what it will cost for rework when we
figure out what we should have asked.&lt;/p&gt;
&lt;p&gt;All we can do here is use a good, transparent management process.
Each new piece of information -- each thing that's learned that we
didn't know to ask -- will change scope, schedule, cost,
deliverables, everything.&lt;/p&gt;
&lt;p&gt;This isn't &amp;quot;casino risk&amp;quot;.  There are no odds associated with this.
This is just change management. It's inevitable. Calling it a project
risk is lying about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rd-order-ignorance-no-process-for-managing-ignorance"&gt;
&lt;h2&gt;3rd Order Ignorance: No Process for Managing Ignorance.&lt;/h2&gt;
&lt;p&gt;When we have second-order ignorance (we didn't know to ask) there are
two responses: an organized change-management process, or a leap down
to 3rd order ignorance.  Third order ignorance slips from simply not
knowing into denying that the level of knowledge changes through
time.&lt;/p&gt;
&lt;p&gt;When we learn something unexpected, we can either deny that it is
something new, or we can expose it.  When a business analyst learns
that the &amp;quot;simple&amp;quot; calculation involves a magical MS-Access database
with no known author, magical numbers and no discernible
calculations, this is going to change the scope of the work.  Or make
it impossible to make progress until someone explains the MS-Access
database.&lt;/p&gt;
&lt;p&gt;Denying this kind of unexpected information is common, it's done by
playing the management trump card of &amp;quot;schedule is sacred.  Once the
schedule is sacred, all learning is either trivially denied or
learning turns into ways of shaving scope or quality to make the
schedule.&lt;/p&gt;
&lt;p&gt;3rd Order Ignorance means there's no change process and the &amp;quot;schedule
is sacred&amp;quot;.  If the only thing that matters is schedule, then buggy,
useless software will be delivered on time and on budget.&lt;/p&gt;
&lt;p&gt;What are the odds of 3rd order ignorance?  Either 1.0 or 0.0.  Either
the organization has an effective change management process (in which
case, we don't have 3rd order ignorance) or there will be problems in
delivering software that works on time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line.&lt;/h2&gt;
&lt;p&gt;Here's the summary of ignorance and mitigation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;0th order ignorance&lt;/strong&gt;: do basic fact checking to validate your
assumptions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1st order ignorance&lt;/strong&gt;: do contingency planning. Define specific
contingencies around each specific unknown fact.  Don't just document
an &amp;quot;assumption&amp;quot;, plan for alternatives when the assumption is
invalidated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2nd order ignorance&lt;/strong&gt;: have a change management process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3rd order ignorance&lt;/strong&gt; (i.e., no change management): stop using
waterfall-style methodologies. Switch to Agile methods so that change
and the management of ignorance become essential features of the
overall process.&lt;/p&gt;
&lt;p&gt;4th order ignorance is the state of not being aware that ignorance is
one of the most significant driving forces behind project failure.  A
symptom of 4th-order ignorance is conflating &amp;quot;risk analysis&amp;quot; for a
project with &amp;quot;casino risks&amp;quot; (or &amp;quot;insurance risks.&amp;quot;)  With rare
exceptions, all project risk analysis is just ways of coping with bad
management.&lt;/p&gt;
&lt;p&gt;When there's 4th order ignorance, folks are told that it's helpful or
meaningful to try and assign odds to the veracity of the facts, the
presence of things which were forgotten, and the change management
process itself.&lt;/p&gt;
&lt;p&gt;Avoiding 4th order ignorance means recognizing that software project
management &amp;quot;risks&amp;quot; are just bad management (with minor exceptions for
fire, flood, famine, conquest, war, pestilence, and death.)&lt;/p&gt;
&lt;p&gt;Here's how to manage risk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check the facts,&lt;/li&gt;
&lt;li&gt;Plan &lt;strong&gt;specific&lt;/strong&gt; contingencies,&lt;/li&gt;
&lt;li&gt;Use Agile methods because of their built-in ability to manage change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="risk"></category><category term="software process improvement"></category><category term="project management"></category><category term="estimating"></category></entry><entry><title>Almost a good idea</title><link href="https://slott56.github.io/2013_07_25-almost_a_good_idea.html" rel="alternate"></link><published>2013-07-25T13:44:00-04:00</published><updated>2013-07-25T13:44:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-07-25:/2013_07_25-almost_a_good_idea.html</id><summary type="html">&lt;p&gt;Appleworks (formerly Clarisworks) is software that's been dead meat
since 2007.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://en.wikipedia.org/wiki/AppleWorks#End_of_Appleworks"&gt;http://en.wikipedia.org/wiki/AppleWorks#End_of_Appleworks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which is fine unless you have an old computer with old applications
that still works. For example, a 2002-vintage iMac
G4 &lt;a class="reference external" href="http://www.imachistory.com/2002/"&gt;http://www.imachistory.com/2002/&lt;/a&gt; still works. Slowly.&lt;/p&gt;
&lt;p&gt;When someone …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Appleworks (formerly Clarisworks) is software that's been dead meat
since 2007.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://en.wikipedia.org/wiki/AppleWorks#End_of_Appleworks"&gt;http://en.wikipedia.org/wiki/AppleWorks#End_of_Appleworks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which is fine unless you have an old computer with old applications
that still works. For example, a 2002-vintage iMac
G4 &lt;a class="reference external" href="http://www.imachistory.com/2002/"&gt;http://www.imachistory.com/2002/&lt;/a&gt; still works. Slowly.&lt;/p&gt;
&lt;p&gt;When someone jumps 11 years to a new iMac, they find that their 2002
iMac with 2007 apps has files which are essentially unreadable by
modern applications.&lt;/p&gt;
&lt;p&gt;How can someone jump a decade and preserve their content?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.apple.com/iwork/"&gt;iWork Pages&lt;/a&gt; is cheap. Really.
$19.99.  I could have used it to convert their files to their new iMac
and then told them to ignore the app. Pages can be hard to learn. For
someone jumping from 2007-vintage apps, it's probably too much.
However, they can use
&lt;a class="reference external" href="http://support.apple.com/kb/ht2523"&gt;TextEdit&lt;/a&gt; once the files are
converted to RTF format.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.apple.com/iwork-for-icloud/"&gt;iWork for iCloud&lt;/a&gt; may
be a better idea. But they have to wait a while for it to come out.
And they want their files now.&lt;/li&gt;
&lt;li&gt;Try to write a data extractor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some places to start.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/teacurran/appleworks-parser"&gt;https://github.com/teacurran/appleworks-parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://fossies.org/linux/misc/abiword-2.9.4.tar.gz/dox/ie__imp__ClarisWorks_8cpp_source.html"&gt;http://fossies.org/linux/misc/abiword-2.9.4.tar.gz/dox/ie__imp__ClarisWorks_8cpp_source.html&lt;/a&gt; This
appears to have a known bug in chaining through the ETBL resources.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/joshenders/appleworks_format"&gt;https://github.com/joshenders/appleworks_format&lt;/a&gt; This project is more
notes and examples than useful code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Documentation on the Appleworks file format does not seem to exist.
It's a very weird void, utterly bereft of information.
In the long run $19.99 for a throw-away copy of Pages is probably the
smartest solution.&lt;/p&gt;
&lt;p&gt;However, if you're perhaps deranged, you can track down the content
through a simple brute-force analysis of the file. This is Python3
code to scrape the content out of a .CWK file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import argparse
import struct
import sys
import os
from io import open

class CWK:
    &amp;quot;&amp;quot;&amp;quot;Analyzes a .CWK file; must be given a file opened in &amp;quot;rb&amp;quot; mode.
    &amp;quot;&amp;quot;&amp;quot;
    DSET = b&amp;quot;DSET&amp;quot;
    BOBO = b&amp;quot;BOBO&amp;quot;
    ETBL = b&amp;quot;ETBL&amp;quot;

    def __init__( self, open_file ):
        self.the_file= open_file
        self.data= open_file.read()

    def header( self ):
        self.version= self.data[0:4]
        #print( self.version[:3] )
        bobo= self.data[4:8]
        assert bobo == self.BOBO
        version_prev= self.data[8:12]
        #print( version_prev[:3] )
        return self.version

    def margins( self ):
        self.height_page= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[30:32] )
        self.width_page= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[32:34] )
        self.margin_1= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[34:36] )
        self.margin_2= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[36:38] )
        self.margin_3= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[38:40] )
        self.margin_4= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[40:42] )
        self.margin_5= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[42:44] )
        self.margin_6= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[44:46] )
        self.height_page_inner= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[46:48] )
        self.width_page_inner= struct.unpack( &amp;quot;&amp;gt;h&amp;quot;, self.data[48:50] )

    def dset_iter( self ):
        &amp;quot;&amp;quot;&amp;quot;First DSET appears to have content.

        This DSET parsing may not be completely correct.

        But it finds the first DSET, which includes all
        of the content except for headers and footers.

        It seems wrong to simply search for DSET; some part of the
        resource directory should point to this or provide an offset to it.
        &amp;quot;&amp;quot;&amp;quot;
        for i in range(len(self.data)-4):
            if self.data[i:i+4] == self.DSET:
                    #print( &amp;quot;DSET&amp;quot;, i, hex(i) )
                    pos= i+4
                    for b in range(5): # Really? Always 5?
                        size, count= struct.unpack( &amp;quot;&amp;gt;Ih&amp;quot;, self.data[pos:pos+6] )
                        pos += size+4
                    #print( self.data[i:pos] )
                    yield pos
    def content_iter( self, position ):
        &amp;quot;&amp;quot;&amp;quot;A given DSET may have multiple contiguous blocks of text.&amp;quot;&amp;quot;&amp;quot;
        done= False
        while not done:
            size= struct.unpack( &amp;quot;&amp;gt;I&amp;quot;, self.data[position:position+4] )[0]
            content= self.data[position+4:position+4+size].decode(&amp;quot;MacRoman&amp;quot;)
            #print( &amp;quot;ENDING&amp;quot;, repr(self.data[position+4+size-1]) )
            if self.data[position+4+size-1] == 0:
                yield content[:-1]
                done= True
                break
            else:
                yield content
                position += size+4
&lt;/pre&gt;
&lt;p&gt;The function invoked from the command line is this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def convert( *file_list ):
   for f in file_list:
       base, ext = os.path.splitext( f )
       new_file= base+&amp;quot;.txt&amp;quot;
       print( '&amp;quot;Converting {0} to {1}&amp;quot;'.format(f,new_file) )
       with open(f,'rb') as source:
           cwk= CWK( source )
           cwk.header()
           with open(new_file,'w',encoding=&amp;quot;MacRoman&amp;quot;) as target:
               position = next( cwk.dset_iter() )
               for content in cwk.content_iter(position):
                   # print( content.encode(&amp;quot;ASCII&amp;quot;,errors=&amp;quot;backslashreplace&amp;quot;) )
                   target.write( content )
       atime, mtime = os.path.getatime(f), os.path.getmtime(f)
       os.utime( new_file, (atime,mtime) )
&lt;/pre&gt;
&lt;p&gt;This is brute-force. But. It seemed to work. Buying Pages would have
been less work and probably produced better results.&lt;/p&gt;
&lt;p&gt;This does have the advantage of producing files with the original date
stamps.  Other than that, it seems an exercise in futility because
there's so little documentation.&lt;/p&gt;
&lt;p&gt;What's potentially cool about this is the sane way that Python3
handles bytes as input. Particularly pleasant is the way we can
transform the file-system sequence of bytes into proper Python strings
with a very simple bytes.decode().&lt;/p&gt;
</content><category term="Technologies"></category><category term="data conversion"></category><category term="macosx"></category><category term="#python"></category></entry><entry><title>NoSQL Befuddlement: DML and Persistence</title><link href="https://slott56.github.io/2013_07_18-nosql_befuddlement_dml_and_persistence.html" rel="alternate"></link><published>2013-07-18T08:00:00-04:00</published><updated>2013-07-18T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-07-18:/2013_07_18-nosql_befuddlement_dml_and_persistence.html</id><summary type="html">&lt;p&gt;It may be helpful to look back at '&lt;a class="reference external" href="https://slott56.github.io/2013_07_16-how_managers_say_no_the_rdbms_hegemony_example.html"&gt;How Managers Say
&amp;quot;No&amp;quot;&lt;/a&gt;'
which is about breaking the RDBMS Hegemony.&lt;/p&gt;
&lt;p&gt;I got an email in which the simple concepts of &amp;quot;data manipulation&amp;quot; and
&amp;quot;persistence&amp;quot; had become entangled with SQL DML to a degree that the
conversation failed to make sense to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It may be helpful to look back at '&lt;a class="reference external" href="https://slott56.github.io/2013_07_16-how_managers_say_no_the_rdbms_hegemony_example.html"&gt;How Managers Say
&amp;quot;No&amp;quot;&lt;/a&gt;'
which is about breaking the RDBMS Hegemony.&lt;/p&gt;
&lt;p&gt;I got an email in which the simple concepts of &amp;quot;data manipulation&amp;quot; and
&amp;quot;persistence&amp;quot; had become entangled with SQL DML to a degree that the
conversation failed to make sense to me.&lt;/p&gt;
&lt;p&gt;They had been studying &lt;a class="reference external" href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; and had
started to realize that the RDBMS and SQL were not an essential
feature of all data processing software.&lt;/p&gt;
&lt;p&gt;I'll repeat that with some emphasis to show what I found alarming.&lt;/p&gt;
&lt;p&gt;They had &lt;strong&gt;started&lt;/strong&gt; to realize that the RDBMS and SQL were not an
&lt;strong&gt;essential&lt;/strong&gt; feature of all data processing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Started&lt;/strong&gt; to realize.&lt;/p&gt;
&lt;p&gt;They were so entrenched in RDBMS thinking that the very idea of
persistent data outside the RDBMS was novel to them.&lt;/p&gt;
&lt;p&gt;They asked me about extending their growing realization to encompass
other SQL DML operations: INSERT, UPDATE and DELETE. Clearly, these
four verbs were all the data manipulation they could conceive of.&lt;/p&gt;
&lt;p&gt;This request meant several things, all of which are unnerving.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;They were sure—absolutely sure—that SQL DML was &lt;strong&gt;essential&lt;/strong&gt; for all
persistent data. They couldn't consider read-only data? After all, a
tool like Pandas is clearly focused on read-only processing. What
part of that was confusing to them?&lt;/li&gt;
&lt;li&gt;They couldn't discuss persistence outside the narrow framework of SQL
DML. It appears that they had forgotten about the file system
entirely.&lt;/li&gt;
&lt;li&gt;They conflated data manipulation and persistence, seeing them as one
thing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After some back-and-forth it appeared that they were looking for
something so strange that I was unable to proceed. We'll turn to
this, below.&lt;/p&gt;
&lt;div class="section" id="persistence-and-manipulation"&gt;
&lt;h2&gt;Persistence and Manipulation&lt;/h2&gt;
&lt;p&gt;We have lots of persistent data and lots of manipulation. Lots. So
many that it's hard to understand what they were asking for.&lt;/p&gt;
&lt;p&gt;Here's some places to start looking for hints on persistence.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/3/library/persistence.html"&gt;http://docs.python.org/3/library/persistence.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/3/library/archiving.html"&gt;http://docs.python.org/3/library/archiving.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/3/library/fileformats.html"&gt;http://docs.python.org/3/library/fileformats.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/3/library/netdata.html"&gt;http://docs.python.org/3/library/netdata.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/3/library/markup.html"&gt;http://docs.python.org/3/library/markup.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/3/library/mm.html"&gt;http://docs.python.org/3/library/mm.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This list might provide some utterly random hints as to how persistent
data is processed outside of the narrow confines of the RDBMS.&lt;/p&gt;
&lt;p&gt;For manipulation... Well... Almost the entire Python library is about
data manipulation. Everything except
&lt;a class="reference external" href="http://docs.python.org/3.3/library/itertools.html#module-itertools"&gt;itertools&lt;/a&gt;
is about stateful objects and how to change state (&amp;quot;manipulate the
data.&amp;quot;)&lt;/p&gt;
&lt;p&gt;Since the above lists are random, I asked them for any hint as to what
their proper use cases might be. It's very difficult to provide
generic hand-waving answers to questions about concepts as fundamental
as state and persistence. State and persistence pervade all of data
processing. Failure to grasp the idea of persistence outside the
database almost seems like a failure to grasp persistence in the first
place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-crazy-request"&gt;
&lt;h2&gt;The Crazy Request&lt;/h2&gt;
&lt;p&gt;Their original request was—to me—incomprehensible. As fair as I can
tell, they appeared to want the following.&lt;/p&gt;
&lt;p&gt;I'm guessing they were hoping for some kind of matrix showing how
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Data_manipulation_language"&gt;DML&lt;/a&gt; or
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt;
mapped to other non-RDBMS persistence libraries.&lt;/p&gt;
&lt;p&gt;So, it would be something like this.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;SQL&lt;/td&gt;
&lt;td&gt;OS&lt;/td&gt;
&lt;td&gt;Pandas&lt;/td&gt;
&lt;td&gt;JSON&lt;/td&gt;
&lt;td&gt;CSV&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;CREATE&lt;/td&gt;
&lt;td&gt;file()&lt;/td&gt;
&lt;td&gt;some pandas request&lt;/td&gt;
&lt;td&gt;json.dump()&lt;/td&gt;
&lt;td&gt;csv.writer()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;INSERT&lt;/td&gt;
&lt;td&gt;file.write()&lt;/td&gt;
&lt;td&gt;depends on the requirements&lt;/td&gt;
&lt;td&gt;could be anything&lt;/td&gt;
&lt;td&gt;csv.writerow()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;UPDATE&lt;/td&gt;
&lt;td&gt;file.seek(); file.write()&lt;/td&gt;
&lt;td&gt;doesn't make sense&lt;/td&gt;
&lt;td&gt;not something that generalizes well&lt;/td&gt;
&lt;td&gt;depends on the requirements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;file.seek(); file.write()&lt;/td&gt;
&lt;td&gt;inappropriate for analysis&lt;/td&gt;
&lt;td&gt;depends on the requirements&lt;/td&gt;
&lt;td&gt;hard to make this up without more details&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;APPEND -- not part of DML&lt;/td&gt;
&lt;td&gt;file.write()&lt;/td&gt;
&lt;td&gt;depends on requirements&lt;/td&gt;
&lt;td&gt;could be anything&lt;/td&gt;
&lt;td&gt;csv.writerow()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The point here is that data manipulation, state and persistence is
&lt;strong&gt;intimately&lt;/strong&gt; tied to the application's requirements and processing.&lt;/p&gt;
&lt;p&gt;All of which presumes you are persisting stateful objects. It is
entirely possible that you're persisting immutable objects, and state
change comes from appending new relationships, not changing any
objects.&lt;/p&gt;
&lt;p&gt;The SQL reductionist view isn't really all that helpful. Indeed, it
appears to have been deeply misleading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-log-file"&gt;
&lt;h2&gt;The Log File&lt;/h2&gt;
&lt;p&gt;Here's an example that seems to completely violate the spirit of their
request. This is ordinary processing that doesn't fit the SQL DML mold
very well at all.&lt;/p&gt;
&lt;p&gt;Let's look at log file processing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Logs can be persisted as simple files in simple directories. Compressed archives are even better than simple files.&lt;/li&gt;
&lt;li&gt;For DML, a log file is append-only. There is no insert, update or delete.&lt;/li&gt;
&lt;li&gt;For retrieval, a query-like algorithm can be elegantly simple.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without any brain-cramping, one can create simple map-reduce style
processing for log files. See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2010_01_10-map_reduce_how_cool_is_that.html"&gt;Map Reduce -- How Cool is
that?&lt;/a&gt;&amp;quot;
for a snippet of Python code that turns each row of an Apache log file
into a record-like tuple. It also shows how to scan multiple files and
directories in simple map-reduce style loops.&lt;/p&gt;
&lt;p&gt;Interestingly, we would probably loose considerable performance if we
tried to load a log file into an RDBMS table. Why? The RDBMS file for
a table that represents a given log file is much, much larger than the
original file. Reading a log file directly involves far fewer physical
I/O operations than the table.&lt;/p&gt;
&lt;p&gt;Here's something that I can't answer for them without digging into
their requirements.&lt;/p&gt;
&lt;p&gt;A &amp;quot;filter&amp;quot; could be considered as a DELETE.  Or a DELETE can be used
to implement a filter. Indeed, the SQL DELETE may work by changing a
row's status, meaning the the SQL DELETE operation is actually a
filter that rejects deleted records from future queries.&lt;/p&gt;
&lt;p&gt;Which is it? Filter or Delete? This little conundrum seems to violate
the spirit of their request, also.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-code"&gt;
&lt;h2&gt;Python Code&lt;/h2&gt;
&lt;p&gt;Here's an example of using persistence to filter the &amp;quot;raw&amp;quot; log files.
We keep the relevant events and write these in a more regular,
easier-to-parse format. Or, perhaps, we delete the irrelevant records.
In this case, we'll use CSV file (with quotes and commas) to speed up
future parsing.&lt;/p&gt;
&lt;p&gt;We might have something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
log_row_pat= re.compile(
    r'(\d+\.\d+\.\d+\.\d+) (\S+?) (\S+?) (\[[^\]]+?]) (&amp;quot;[^&amp;quot;]*?&amp;quot;) (\S+?) (\S+?) (&amp;quot;[^&amp;quot;]*?&amp;quot;) (&amp;quot;[^&amp;quot;]*?&amp;quot;)'
)

def log_reader( row_source ):
    for row in row_source:
         m= log_row_pat.match( row )
         if m is not None:
             yield m.groups()

def some_filter( source ):
    for row in source:
        if some_condition(row):
            yield row

with open( subset_file, &amp;quot;w&amp;quot; ) as target:
    with open( source_file ) as source:
        rdr= log_reader( source )
        wtr= csv.writer( target )
        wtr.writerows( some_filter( rdr ) )
&lt;/pre&gt;
&lt;p&gt;This is a amazingly fast and very simple. It uses minimal memory and
results in a subset file that can be used for further analysis.&lt;/p&gt;
&lt;p&gt;Is the filter operation really a DELETE?&lt;/p&gt;
&lt;p&gt;This should not be new; it should not even be interesting.&lt;/p&gt;
&lt;p&gt;As far as I can tell, they were asking me to show them how is data
processing can be done outside a relational database. This seems
obvious beyond repeating. Obvious to the point where it's hard to
imagine what knowledge gap needs to be filled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Persistence is not a thing you haphazardly laminate onto an
application as an afterthought.&lt;/p&gt;
&lt;p&gt;Data Manipulation is not a reductionist thing that has exactly four
verbs and no more.&lt;/p&gt;
&lt;p&gt;Persistence—like security, auditability, testability,
maintainability—and all the quality attributes—is not a checklist item
that you install or decline.&lt;/p&gt;
&lt;p&gt;Without tangible, specific use cases, it's impossible to engage in
general hand-waving about data manipulation and persistence. The
answers don't generalize well and depend in a very specific way on the
nature of the problem and the use cases.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="data persistence"></category><category term="architecture"></category><category term="noSQL"></category><category term="Apache"></category><category term="csv"></category><category term="RDBMS"></category><category term="SQL"></category></entry><entry><title>How Managers Say "No": The RDBMS Hegemony Example</title><link href="https://slott56.github.io/2013_07_16-how_managers_say_no_the_rdbms_hegemony_example.html" rel="alternate"></link><published>2013-07-16T08:00:00-04:00</published><updated>2013-07-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-07-16:/2013_07_16-how_managers_say_no_the_rdbms_hegemony_example.html</id><summary type="html">&lt;p&gt;Got an email looking for help in attempting break through the &lt;strong&gt;RDBMS
Hegemony&lt;/strong&gt;. It's a little confusing, but this is the important part of
how management says &amp;quot;no&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Their response was nice but can you flush [&lt;em&gt;sic&lt;/em&gt;] it out more&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;[&lt;em&gt;First: the word is &amp;quot;flesh&amp;quot;: &amp;quot;flesh it out.&amp;quot; Repeat after …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Got an email looking for help in attempting break through the &lt;strong&gt;RDBMS
Hegemony&lt;/strong&gt;. It's a little confusing, but this is the important part of
how management says &amp;quot;no&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Their response was nice but can you flush [&lt;em&gt;sic&lt;/em&gt;] it out more&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;[&lt;em&gt;First: the word is &amp;quot;flesh&amp;quot;: &amp;quot;flesh it out.&amp;quot; Repeat after me:
&amp;quot;Flesh it out,&amp;quot; &amp;quot;Flesh it out,&amp;quot; &amp;quot;Flesh it out.&amp;quot; Flesh. Put flesh
on the bones. No wonder your presentation went nowhere, either you
or the manager or both need help. English as a second language is
only an excuse if you never read anything in English.&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;There's a specific suggestion for this &amp;quot;more&amp;quot;. But it indicates a
profound failure to grasp the true nature of the problem. It
amounts to a drowning person asking us to throw them a different
colored brick. It's a brick! You want a life preserver! &amp;quot;No,&amp;quot; they
insist, &amp;quot;I want a brick to build steps to climb out.&amp;quot;&lt;/p&gt;
&lt;p&gt;Yes, &lt;strong&gt;RDBMS Hegemony&lt;/strong&gt; is a real problem. I've talked about it
before &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2010_11_11-hadoop_and_sqlrelational_hegemony.html"&gt;Hadoop and SQL/Relational
Hegemony&lt;/a&gt;&amp;quot;.
Others have noted it: &amp;quot;&lt;a class="reference external" href="http://features.techworld.com/applications/3305706/nosql-and-newsql-overturning-the-relational-database-hegemony/"&gt;NoSQL and NewSQL overturning the
relational database
hegemony&lt;/a&gt;&amp;quot;.
You can read more concrete details in articles like this:
&amp;quot;&lt;a class="reference external" href="http://www.deerwalk.com/blog/non-relational-data-storage-using-hbase/"&gt;Introduction to Non-Relational Data Storage using
Hbase&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;RDBMS Hegemony is most visible when every single in-house project
seems to involve the database. And some of those uses of the
database are clearly inappropriate.&lt;/p&gt;
&lt;p&gt;For example, trying to mash relatively free-form &amp;quot;documents&amp;quot; into
an RDBMS is simple craziness. Documents—you know, the stuff
created by word processors—are largely unstructured or at best
semi-structured. For most RDBMS's, they're represented as Binary
Large Objects (BLOBs). To make it possible to process them, you
can decorate each document with &amp;quot;metadata&amp;quot; or tags and populate a
bunch of RDBMS attributes. Which is fine for the first few
queries. Then you realize you need more metadata. Then you need
more flexible metadata. Then you need interrelated metadata to
properly reflect the interrelationships among the documents. Maybe
you flirt with a formal ontology. Then you eventually realize you
really should have started with document storage, not a BLOB in an
RDBMS.&lt;/p&gt;
&lt;p&gt;Yes, some companies offer combo products that do both. The point
is this: avoiding the RDBMS pitfall in the first place would have
been a big time and money saver. Google Exists. The RDBMS is not
the best choice for all problems.&lt;/p&gt;
&lt;p&gt;The problem is this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Getting away from RDBMS Hegemony requires management thinking and action.&lt;/li&gt;
&lt;li&gt;Management thinking is a form of pain.&lt;/li&gt;
&lt;li&gt;Management action is a form of pain.&lt;/li&gt;
&lt;li&gt;Managers hate pain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, the only way to make progress away from the RDBMS is to
create or expose existing pain. Or make it possible for the
manager to avoid pain entirely.&lt;/p&gt;
&lt;p&gt;Let's look at the various approaches.&lt;/p&gt;
&lt;div class="section" id="doing-a-presentation"&gt;
&lt;h2&gt;Doing A &amp;quot;Presentation&amp;quot;&lt;/h2&gt;
&lt;p&gt;The email hinted at a conversation or presentation on the problem
of RDBMS Hegemony.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I finally convinced my current client that RDBMS's are expensive in
terms of adding another layer to the archtiecture [&lt;em&gt;sic&lt;/em&gt;] and then
trying to maintain it.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;It's not clear from the email what the &lt;strong&gt;details&lt;/strong&gt; of this
conversation or presentation were, but it clearly involved the two
key technical points (1) the RDBMS has specific use cases, and (2)
not all applications fit those use cases.&lt;/p&gt;
&lt;p&gt;However. Those two key technical points involve no real management
pain.&lt;/p&gt;
&lt;p&gt;Real pain comes from cost. And since the RDBMS license is usually
site-wide, there's no obvious cost to the technology.&lt;/p&gt;
&lt;p&gt;The labor cost for DBA support, similarly, is side-wide and already
in the budget. So there's no obvious cost to the labor.&lt;/p&gt;
&lt;p&gt;No cost means no pain. No pain means no change.&lt;/p&gt;
&lt;p&gt;Asking a manger to think, however, causes actual pain. Managers want
technical people to do the thinking for them.&lt;/p&gt;
&lt;p&gt;Asking a manager to consider the future means they may have to take
action in the future. That's &lt;strong&gt;potential&lt;/strong&gt; pain.&lt;/p&gt;
&lt;p&gt;Either way, a management &lt;strong&gt;presentation&lt;/strong&gt; on database hegemony is
pure pain. No useful action will ever come from a simple, direct
encapsulation of how the RDBMS is not really the universal data tool.
Management said &amp;quot;no&amp;quot; by asking for more information.&lt;/p&gt;
&lt;p&gt;We'll return to the &amp;quot;more information&amp;quot; part below.&lt;/p&gt;
&lt;p&gt;It was good to start the conversation.&lt;/p&gt;
&lt;p&gt;It's good to continue the conversation. But the specific request was
silliness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exposing-the-existing-pain"&gt;
&lt;h2&gt;Exposing the Existing Pain&lt;/h2&gt;
&lt;p&gt;What's more important than a hypothetical conversation is showing how
the RDBMS is causing pain right now. It's easier to convince managers
of the hidden cost of the RDBMS by exposing existing &lt;strong&gt;actual&lt;/strong&gt; pain
in the &lt;strong&gt;current&lt;/strong&gt; environment. And it has to be a level of pain that
exceeds the pain of thinking and taking action.&lt;/p&gt;
&lt;p&gt;What's most clear is a specific and avoidable labor cost. Ideally,
this specific—and avoidable—labor cost will obviously be associated
with something obviously database-related. It must be obvious or it
won't yield a technology-related management understanding. If it's
not obvious, management will say &amp;quot;no&amp;quot;, by asking for more data;
they'll claim it's people or process or measurement error.&lt;/p&gt;
&lt;p&gt;The best place to look for avoidable labor is break-fix problem
reports, bugs and enhancements. Another good source of avoidable
costs are schema migrations: waiting for the DBA's to add columns to
a table, or add tables to a database.&lt;/p&gt;
&lt;p&gt;If you can point to specific trouble tickets that come from wrong use
of an RDBMS, then you might be able to get a manager to think about
it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-airtight-case"&gt;
&lt;h2&gt;The Airtight Case&lt;/h2&gt;
&lt;p&gt;Your goal on breaking RDBMS Hegemony is to have a case that is
&amp;quot;airtight&amp;quot;. Ideally, so airtight that the manager in question sits
up, takes notice, and demands that a project be created to rip out
the database and save the company all that cost. Ideally, their
action at the end of the presentation is to ask how long it will take
to realize the savings.&lt;/p&gt;
&lt;p&gt;Ideally.&lt;/p&gt;
&lt;p&gt;It is actually pretty easy to make an airtight case. There are often
a lot of trouble tickets and project delays due to overuse and misuse
of the RDBMS.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;Few managers will &lt;strong&gt;actually&lt;/strong&gt; agree to remove the RDBMS from an
application that's limping along. Your case may be airtight, and
compelling, and backed with solid financials, but that's rarely going
to result in actual action.&lt;/p&gt;
&lt;p&gt;&amp;quot;If it ain't broke, don't fix it,&amp;quot; is often applied to projects with
very high thresholds for broken. Very high.&lt;/p&gt;
&lt;p&gt;This is another way management says &amp;quot;no&amp;quot;. By claiming that the costs
are acceptable or the risk of change is unacceptable. Even more
farcical claims will often be made in favor of the status quo. They
may ask for more cost data, but it's just an elaborate &amp;quot;no&amp;quot;.&lt;/p&gt;
&lt;p&gt;It's important to make the airtight case.&lt;/p&gt;
&lt;p&gt;It's important to accept the &amp;quot;no&amp;quot; gracefully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="management-rewards"&gt;
&lt;h2&gt;Management Rewards&lt;/h2&gt;
&lt;p&gt;When you look at the management reward structure, project managers
and their ilk are happiest when they have a backlog of huge,&lt;/p&gt;
&lt;p&gt;long-running projects that involve no thinking and no action. Giant
development efforts with stable requirements, unchallenging users,
mature technology and staff who don't mind multiple-hour status
meetings.&lt;/p&gt;
&lt;p&gt;A manager with a huge long-running project feels valuable. When the
requirements, people and technology are stable, then thinking is
effectively prevented.&lt;/p&gt;
&lt;p&gt;Suggesting that technology choices are not stable introduces
thinking. Thinking is pain. The first response to pain is &amp;quot;no&amp;quot;.
Usually in the form of &amp;quot;get more data.&amp;quot;&lt;/p&gt;
&lt;p&gt;Making a technology choice may require that a manager facilitate a
conversation which selects among competing technology choices. That
involves action. And possible thinking.&lt;/p&gt;
&lt;p&gt;Real Management Pain. The response? Some form of &amp;quot;no&amp;quot;.&lt;/p&gt;
&lt;p&gt;Worse. (And it does get worse.)&lt;/p&gt;
&lt;p&gt;Technology selection often becomes highly political. The out-of-favor
project managers won't get projects approved because of &amp;quot;risky
technology.&amp;quot; More Management Pain.&lt;/p&gt;
&lt;p&gt;War story. Years ago, I watched the Big Strategic Initiative shot
down in flames because it didn't have OS/370 as the platform. The
&amp;quot;HIPPO&amp;quot; (Highest Paid Person's Opinion) was that Unix was &amp;quot;too new&amp;quot;
and that meant risk. Unix predates OS/370 by many years. When it
comes to politics, facts are secondary.&lt;/p&gt;
&lt;p&gt;Since no manager wants to think about potential future pain, no
manager is going to look outside the box. Indeed, they're often
unwilling to look at the edge of the box. The worst are unwilling to
admit there is a box.&lt;/p&gt;
&lt;p&gt;The &amp;quot;risk&amp;quot; claim is usually used to say &amp;quot;no&amp;quot; to new technology. Or.
To say &amp;quot;no&amp;quot; to going back to existing, well-established technology.
Switching from database BLOBs to the underlying OS file system can
turn into a bizzaro-world conversation where management is sure that
the underlying OS file system is somehow less trustworthy than RDBMS
BLOBs. The idea that the RDBMS is using the underlying file system
for persistence isn't a compelling argument.&lt;/p&gt;
&lt;p&gt;It's important to challenge technology choices for every new project
every time.&lt;/p&gt;
&lt;p&gt;It's necessary to accept the &amp;quot;no&amp;quot; gracefully.&lt;/p&gt;
&lt;p&gt;The &amp;quot;stop using the database for everything&amp;quot; idea takes a while to
sink in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proof-of-concept"&gt;
&lt;h2&gt;Proof Of Concept&lt;/h2&gt;
&lt;p&gt;The only way to avoid management pain (and the inaction that comes
from pain avoidance) is to make the technology choice a &lt;a class="reference external" href="http://en.wiktionary.org/wiki/fait_accompli"&gt;fait
accompli&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have to actually build something that actually works and passes
unit tests and everything.&lt;/p&gt;
&lt;p&gt;Once you have something which works, the RDBMS &amp;quot;question&amp;quot; will have
been answered. But—and this is very important—it will involve no
management thought or action. By avoiding pain, you also default into
a kind of management buy-in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="war-story"&gt;
&lt;h2&gt;War Story&lt;/h2&gt;
&lt;p&gt;The vendors send us archives of spreadsheets. (Really.) We could
unpack them and load them into the RDBMS. But. Sadly. The
spreadsheets aren't consistent. We either have a constant schema
migration problem adding yet another column for each spreadsheet, or
we have to get rid of the RDBMS notion of a maximalist schema. We
don't want the schema to be an &amp;quot;at most&amp;quot; definition; we'd need the
schema be an &amp;quot;at least&amp;quot; that tolerates irregularity.&lt;/p&gt;
&lt;p&gt;It turns out that the RDBMS is utterly useless anyway. We're barely
using any SQL features. The vendor data is read-only. We can't
UPDATE, INSERT or DELETE under any circumstances. The delete action
is really a ROLLBACK when we reject their file and a CREATE when they
send us a new one.&lt;/p&gt;
&lt;p&gt;We're not using any RDBMS features, either. We're not using
long-running locks for our transactions; we're using low-level OS
locks when creating and removing files. We're not auditing database
actions; we're doing our own application logging on several levels.
All that's left are backups and restores. File system backups and
restores. It turns out that a simple directory tree handles the
vendor-supplied spreadsheet issue gracefully. No RDBMS used.&lt;/p&gt;
&lt;p&gt;We had—of course—originally designed a lot of fancy RDBMS tables for
loading up the vendor-supplied spreadsheets. Until we were confronted
with reality and the inconsistent data formats.&lt;/p&gt;
&lt;p&gt;We quietly stopped using the RDBMS for the vendor-supplied data. We
wrote some libraries to read the spreadsheets directly. We wrote
application code that had methods with names like &amp;quot;query&amp;quot; and
&amp;quot;select&amp;quot; and &amp;quot;fetch&amp;quot; to give a SQL-like feel to the code.&lt;/p&gt;
&lt;p&gt;Management didn't need to say &amp;quot;no&amp;quot; by asking for more information.
They couldn't say no because (a) it was the right thing to do and (b)
it was already done. It was cheaper to do it than to talk about doing
it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="failure-to-see-the-problem"&gt;
&lt;h2&gt;Failure To See The Problem&lt;/h2&gt;
&lt;p&gt;The original email continued to say this:&lt;/p&gt;
&lt;p&gt;&amp;quot;how you can achieve RDBMS like behavior w/out an actual RDBMS&amp;quot;&lt;/p&gt;
&lt;p&gt;What? Or perhaps: Why?&lt;/p&gt;
&lt;p&gt;If you need RDBMS-like behavior, then you need an RDBMS. That request
makes precious little sense as written. So. Let's dig around in the
email for context clues to see what they &lt;strong&gt;really&lt;/strong&gt; meant.
&amp;quot;consider limting [&lt;em&gt;sic&lt;/em&gt;] it to&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;CREATE TABLE&lt;/li&gt;
&lt;li&gt;INSERT&lt;/li&gt;
&lt;li&gt;UPDATE
An update requires a unique key. Let's limit the key to contain only 1 column.&lt;/li&gt;
&lt;li&gt;DELETE
A delete requires a unique key. Let's limit the key to contain only 1 column.&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Oh. Apparently they really are totally fixated on SQL DML.&lt;/p&gt;
&lt;p&gt;It appears that they're unable to conceive of anything outside the
SQL DML box.&lt;/p&gt;
&lt;p&gt;As noted in the above example, INSERT, UPDATE and DELETE are &lt;strong&gt;not&lt;/strong&gt;
generic, universal, always-present use cases. For a fairly broad
number of &amp;quot;big data&amp;quot; applications, they're not really part of the
problem.&lt;/p&gt;
&lt;p&gt;The idea that SQL DML &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD
processing&lt;/a&gt;
forms a core or foundational set of generic, universal,
always-present use cases is part of their conceptual confusion.
They're deeply inside the SQL box wondering how they can get rid of
SQL.&lt;/p&gt;
&lt;p&gt;Back to the drowning person metaphor.&lt;/p&gt;
&lt;p&gt;It's actually not like a drowning person asking for a different
colored brick because they're building steps to walk out.&lt;/p&gt;
&lt;p&gt;It's like a person who fell face down in a puddle claiming they're
drowning in the first place. The brick vs. life preserver question
isn't relevant. They need to stand up and look around. They're not
drowning. They're not even in very deep water.&lt;/p&gt;
&lt;p&gt;They've been laying face-down in the puddle so long, they think it's
as wide as the ocean and as deep as a well. They've been down so long
it looks like up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outside-the-sql-box"&gt;
&lt;h2&gt;Outside the SQL Box&lt;/h2&gt;
&lt;p&gt;To get outside the SQL box means to actually stop using SQL even for
metaphoric conversations about data manipulation, persistence,
transactions, auditing, security and anything that seems relevant to
data processing.&lt;/p&gt;
&lt;p&gt;To FLESH OUT [&lt;em&gt;&amp;quot;flesh&amp;quot;, the word is &amp;quot;flesh&amp;quot;&lt;/em&gt;] the conversation on
breaking the SQL Hegemony, you can't use hypothetical hand-waving.
You need tangible real-world requirements. You need something
concrete, finite and specific so that you can have a head-to-head
benchmark shootout (in principle) between an RDBMS and something not
an RDBMS.&lt;/p&gt;
&lt;p&gt;You may never actually &lt;strong&gt;build&lt;/strong&gt; the RDBMS version for comparison.
But you need to create good logging and measurement hooks around your
first noSQL application. The kind of logging and measurement you'd
use for a benchmark. The kind of logging and measurement that will
prove it actually works outside the RDBMS. And it works well:
reliably and inexpensively.&lt;/p&gt;
&lt;p&gt;This is entirely about asking for forgiveness instead of asking for
permission.&lt;/p&gt;
&lt;p&gt;Managers can't give permission, it involves too much pain.&lt;/p&gt;
&lt;p&gt;They can offer forgiveness because it requires neither thinking nor
action.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="project management"></category><category term="architecture"></category><category term="RDBMS"></category><category term="noSQL"></category><category term="SQL"></category></entry><entry><title>HamCalc Quirk of the Week</title><link href="https://slott56.github.io/2013_07_09-hamcalc_quirk_of_the_week.html" rel="alternate"></link><published>2013-07-09T08:00:00-04:00</published><updated>2013-07-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-07-09:/2013_07_09-hamcalc_quirk_of_the_week.html</id><summary type="html">&lt;p&gt;The HamCalc program &lt;strong&gt;binhop&lt;/strong&gt; is one of those little nuggets of beauty that
might be helpful or might be useless. Or. Perhaps there's some useful
stuff commingled with quirky stuff.&lt;/p&gt;
&lt;p&gt;For folks in agriculture or manufacturing, I'm hoping that the
calculation could be helpful. Although it's also likely that folks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The HamCalc program &lt;strong&gt;binhop&lt;/strong&gt; is one of those little nuggets of beauty that
might be helpful or might be useless. Or. Perhaps there's some useful
stuff commingled with quirky stuff.&lt;/p&gt;
&lt;p&gt;For folks in agriculture or manufacturing, I'm hoping that the
calculation could be helpful. Although it's also likely that folks don't
spend much time designing hoppered bins; they just buy something out of
a catalog.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;binhop&lt;/strong&gt; program is 151 lines long. Of those lines, 13 lines appear to
be some orphaned code that doesn't belong there. They appear to be part
of a hoppered bin design program that appears to have been split off
into &lt;strong&gt;binvol&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It's easy to grep for all 46 instances
of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(?:GOTO|GOSUB|THEN)\s+\d\d\d0&lt;/span&gt;&lt;/tt&gt; to locate references to line
numbers. We're only interested in line numbers from 1050 to 1170. Of
course, there are none.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;This is GW-Basic. Maybe there's a language or implementation quirk that
makes this code somehow get executed? It seems highly doubtful. After
all, it's only 151 lines of code. It's relatively easy to read and
understand what's there.&lt;/p&gt;
&lt;p&gt;This kind of quirk demonstrates that an &amp;quot;automated&amp;quot; code conversion is
rarely going to be helpful. An automated conversion of orphaned code
means that the good stuff is diluted by the bad stuff.&lt;/p&gt;
&lt;p&gt;I spent the most time with this fumbling through the alternative use
cases to see what the program does. It doesn't do much. But it's
important to be sure that this calculation isn't part of the use cases.
It doesn't get a unit test.&lt;/p&gt;
&lt;div class="section" id="more-oddness"&gt;
&lt;h2&gt;More Oddness&lt;/h2&gt;
&lt;p&gt;This program has another cute quirk that is less brain-scrambling than
orphaned code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1020 :REM'
1030 IF C$=&amp;quot;SIDE&amp;quot; THEN N=ATN(H/(F-D))*180/PI:RETURN
1040 IF C$=&amp;quot;CENTER&amp;quot; THEN N=ATN(2*H/(F-D))*180/PI:RETURN
&lt;/pre&gt;
&lt;p&gt;What if C$ is neither SIDE nor CENTER? There's no &amp;quot;otherwise&amp;quot; case
expressed or implied. It just &amp;quot;falls through&amp;quot; to the next line of
code.&lt;/p&gt;
&lt;p&gt;In this case, the next line of code just happens to be the orphaned
code starting on line 1050. This will do some calculations on
variables which merely have their GW-Basic default values of 0. Since
line 1170 ends with a RETURN, the program will appear to &amp;quot;work&amp;quot;. It
won't crash outright. It just executes a bunch of useless statements.&lt;/p&gt;
&lt;p&gt;In other programs with similar structure, the following line of code
is a RETURN (or a STOP or even an END in one case.)&lt;/p&gt;
&lt;p&gt;Since C$ is only referenced in five lines of code, it's easy to be
certain that it can only have one of the two values. Of the five
references, one is a PRINT statement. Two are the above IF
statements. The other two are assignment statements.&lt;/p&gt;
&lt;p&gt;Here are the two assignment statements:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
650 Y$=INKEY$:IF Y$=&amp;quot;&amp;quot;THEN 650
660 IF Y$=&amp;quot;1&amp;quot;THEN GOSUB 1340:C$=&amp;quot;SIDE&amp;quot;:R=1:RETURN
670 IF Y$=&amp;quot;2&amp;quot;THEN GOSUB 1340:C$=&amp;quot;CENTER&amp;quot;:R=0:RETURN
680 BEEP
690 GOTO 650
&lt;/pre&gt;
&lt;p&gt;It's clear that C$ is restricted to a domain of just two values. The
lack of a formal &amp;quot;otherwise&amp;quot; case in the 1020-1040 block of code is
just a weird little quirk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Here are the relevant calculation
bits: &lt;a class="reference external" href="https://github.com/slott56/HamCalc-2.1/blob/master/python/hamcalc/construction/binhop/__init__.py"&gt;https://github.com/slott56/HamCalc-2.1/blob/master/python/hamcalc/construction/binhop/__init__.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By adding documentation and test cases, we've bloated the good bits
up to 336 lines of code.&lt;/p&gt;
&lt;p&gt;Here are the user interaction
bits: &lt;a class="reference external" href="https://github.com/slott56/HamCalc-2.1/blob/master/python/hamcalc/stdio/binhop.py"&gt;https://github.com/slott56/HamCalc-2.1/blob/master/python/hamcalc/stdio/binhop.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This reflects two decisions. It seemed sensible to (nearly) duplicate
some similar blocks of code rather than try to use a single block of
code peppered with IF-statements. IF-statements raise the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic
complexity&lt;/a&gt;.
Lines of code just make it longer. Also, we've combined all of binvol
into binhop.&lt;/p&gt;
&lt;p&gt;In the long run, I know nothing about the subject matter. Nor did I
even do the minimal amount of online research to confirm the formulae
in the program. I'm secretly hoping that someone who actually
understands this subject area will revise and correct the code to
make it more useful and complete.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="preservation"></category><category term="GW-Basic"></category><category term="modernization"></category></entry><entry><title>How to Estimate a Project</title><link href="https://slott56.github.io/2013_06_27-how_to_estimate_a_project.html" rel="alternate"></link><published>2013-06-27T10:28:00-04:00</published><updated>2013-06-27T10:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-27:/2013_06_27-how_to_estimate_a_project.html</id><summary type="html">&lt;p&gt;A recent question&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;what we might expect, in terms of 1) Time to completion, 2) Cost to
implement according to the mockup, 3) Monthly server/maintenance
costs and 4) approximate team size required&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This question was followed by this acknowledgement:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;it is hard to make the above estimations, given the …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A recent question&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;what we might expect, in terms of 1) Time to completion, 2) Cost to
implement according to the mockup, 3) Monthly server/maintenance
costs and 4) approximate team size required&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This question was followed by this acknowledgement:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;it is hard to make the above estimations, given the lack of clarity
on the architecture which will be employed, and given the nature of
software development itself.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This is an understatement. The statement is generally well written,
but the word &amp;quot;hard&amp;quot; is weak. It's not hard. It's essentially
impossible.&lt;/p&gt;
&lt;div class="section" id="i-the-conundrum"&gt;
&lt;h2&gt;I.  The Conundrum&lt;/h2&gt;
&lt;p&gt;Let's say you decide that the budget for &amp;quot;everything&amp;quot; is two point
five kajillion dollars. Clearly, you don't want to just fork that
money over to a roomful of developers and wait a year for something to
happen.&lt;/p&gt;
&lt;p&gt;An Agile approach is a sensible alternative. Instead of building
everything, you build a first release that does something. Ideally,
something that creates the most value for potential users.&lt;/p&gt;
&lt;p&gt;What's that first release? Presently, you don't have a formal,
testable specification. More work needs to be done to define a first
release. Formal and testable are pretty high barriers.&lt;/p&gt;
&lt;p&gt;More important than details is this: there's a nasty circularity
issue. Until you build something, you don't know where the technical
roadblocks are. Once you build something... well... you've built
something. And you're going to be building something potentially
releasable merely to get to the point of being able to write a budget.&lt;/p&gt;
&lt;p&gt;There's no way to know the budget without having started to build
something.&lt;/p&gt;
&lt;p&gt;Once you start to build something, you did useful work in advance of
having a budget.&lt;/p&gt;
&lt;p&gt;One (false) claim floating around the software development world is
that we can somehow do more research to resolve the unknowns before we
start actually building software. This is simply false. As we do
&amp;quot;research&amp;quot; we're doing high-level design: we're building software. You
may resolve a few unknowns, but there will be more.&lt;/p&gt;
&lt;p&gt;The only way to know &lt;strong&gt;all&lt;/strong&gt; the details about platform and the
application is to build the application using the platform. We don't
know anything until we're done building something that resolves some
unknowns.&lt;/p&gt;
&lt;p&gt;Interestingly, the definition of &amp;quot;done&amp;quot; cannot possibly exist. We'll
return to the farcical nature of &amp;quot;done&amp;quot;, below.&lt;/p&gt;
&lt;p&gt;Worse, there's no way to know the budget without knowing the people
who will be doing the building.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ii-the-productivity-issue"&gt;
&lt;h2&gt;II. The Productivity Issue&lt;/h2&gt;
&lt;p&gt;Until there's a relatively stable team, it's essentially impossible to
know how quickly programmers can build anything. And even then, there
can be unexpected, unforeseeable problems with the team.&lt;/p&gt;
&lt;p&gt;Let me tediously pound this point home with an even more detailed
analysis. The point is to make it very clear that the future is
impossible to predict.&lt;/p&gt;
&lt;p&gt;Let's say the first release is essentially a clone of an existing open
source project.&lt;/p&gt;
&lt;p&gt;This is simple. What's the budget to clone the existing open source
project?&lt;/p&gt;
&lt;p&gt;Choice 1. Find an unpaid intern. (This may no longer be legal, but
it's still popular.) Have them clone the repository, rebrand it, and
you have something running. How quickly can they do this? You don't
know until we meet the intern and watch them work. After they've
cloned the existing open source project you then know how long it will
take them. Until you've seen them work, you know nothing about the
time they'll require.&lt;/p&gt;
&lt;p&gt;Choice 2. Find a kid still in school who knows the technology. Pay
them sub-minimimum wage to clone the package and rebrand it. How much
will you pay? You don't know until you meet the intern and watch them
work. After they've cloned the existing open source project, you'll
know how much it costs.&lt;/p&gt;
&lt;p&gt;Choice 3. Make up a schedule based on what little is known. Put the
&amp;quot;clone the existing open source project&amp;quot;  out to bid on
&lt;a class="reference external" href="http://freelancer.com/"&gt;http://freelancer.com&lt;/a&gt; and hope that
others make bids that fit with your expectations. This is fixed price
so the budget is—in principle—known. In order to be sure you get
something high quality and usable, you'll need to write a lot of test
cases and very detailed specifications. Sadly, that pre-work is of
imponderable complexity. When you get bids that are too big, you learn
that your specifications weren't good enough; and you need to fix your
specifications to narrow the scope of work. Now you're doing much of
the work (spec writing and test case writing) in order to get a
proposal that includes your budget. Note the circularity where you're
doing some of the work to figure out the budget for the work you're
doing.&lt;/p&gt;
&lt;p&gt;Choice 4. Offer someone a share in the company to clone the existing
open source project.  Now you don't have a budget at all. You merely
have a schedule. When will they be done? You're back to option 1, the
unpaid intern, except now with better incentives to be quick. But you
don't know how long they'll take until you've seen them do it once.&lt;/p&gt;
&lt;p&gt;Choice 5. Offer someone an hourly rate plus a share in the company to
clone the existing open source project.  Now you're back to having a
budget, and perhaps it has an upper bound. You can pay up to some
amount, after that the share in the company is their incentive to get
something done.&lt;/p&gt;
&lt;p&gt;I beat this point to death because there actually is no answer.  No
matter what strategy you choose, you still can't predict developer
productivity. It varies by a factor of at least 10 to 1. Some studies
show it varying by 100 to 1.&lt;/p&gt;
&lt;p&gt;The idea of forecasting development costs is shameful lie created by
accountants. Really. The GAAP requires controls and budgets before
spending money and we're supposed to compare plan and actual. This is
all farcical in software world. Software development is like R&amp;amp;D: it's
structured learning and encoding the learning into software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iii-the-done-issue"&gt;
&lt;h2&gt;III. The Done Issue&lt;/h2&gt;
&lt;p&gt;One of the Great Lies is that software has a defined &amp;quot;done&amp;quot; state.
This only true for reductionist classroom exercises. Real software
grows, often without bounds.&lt;/p&gt;
&lt;p&gt;&amp;quot;Wait,&amp;quot; you say, &amp;quot;I have a vision of what I want, that defines a
boundary.&amp;quot;&lt;/p&gt;
&lt;p&gt;Today, that defines a boundary.&lt;/p&gt;
&lt;p&gt;In six weeks, after two releases and some trouble support calls and
requests for new features, your original vision is out the window, and
you're off chasing the things your real users really are asking for.&lt;/p&gt;
&lt;p&gt;Only in-house IT managers for large (dumb) companies stick to the
original plan in spite of all the lessons learned along the way.&lt;/p&gt;
&lt;p&gt;Then you get partnership offers. And you see new platforms and tools,
and you get more user requests. The browser landscape changes. Tablets
become faster. Other changes that are impossible to imagine will
happen.&lt;/p&gt;
&lt;p&gt;The vision will not be stable.&lt;/p&gt;
&lt;p&gt;It won't even be finite.  A good business model grows and adapts and
expands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iv-strategy-1-estimate"&gt;
&lt;h2&gt;IV. Strategy 1: Estimate&lt;/h2&gt;
&lt;p&gt;What can you do?&lt;/p&gt;
&lt;p&gt;Clearly, you want some kind of budget for creating some kind of
software.&lt;/p&gt;
&lt;p&gt;Clearly, there's no way to provide a good answer.&lt;/p&gt;
&lt;p&gt;You can, however, find a farcical answer.&lt;/p&gt;
&lt;p&gt;Step 1: find a developer who's willing to make a sincere commitment to
a cost and schedule.&lt;/p&gt;
&lt;p&gt;Step 2: trust the sincerity of their commitment, even though it's is
absolutely going to be wrong. The Great Lie is that we might only
wrong by a factor of 2. In reality we can often be wrong by a factor
of 10: the $100,000 job turned out to cost over a million. (See above,
10:1 productivity is just one of the unknowns.) The million dollar job
was ill-advised and cancelled after the second release, but the users
were happy, so it was successful in many ways. But it was cancelled.&lt;/p&gt;
&lt;p&gt;A sincere estimate is just a random number. However, many managers
find that the &lt;strong&gt;sincerity&lt;/strong&gt; gives them comfort.&lt;/p&gt;
&lt;p&gt;Since productivity is unknowable and &amp;quot;done&amp;quot; is unknowable, a detailed
estimate and plan means you must now spend a lot of time writing
&amp;quot;change orders&amp;quot; and reallocating the budget every time you learn
something new.&lt;/p&gt;
&lt;p&gt;I'll repeat that.&lt;/p&gt;
&lt;p&gt;When you have an estimate, all you do with it is reallocate the
estimated budget as you learn more about the customers, the
development team and the product. All you do is reallocate; the idea
that there's &amp;quot;plan&amp;quot; which is compared with &amp;quot;actual&amp;quot; is farcical
because the plan changes constantly. So constantly as to be
meaningless.&lt;/p&gt;
&lt;blockquote&gt;
[Accountants will claim that this is analysis wrong because the future
is somehow knowable. I can only stare dumbfounded at them. The future
is knowable? Really? They'll say that a plan is a commitment and
comparing actual to plan somehow makes sense. They'll give all kinds
of weird analogies that don't apply to software. Software development
is not a &amp;quot;production&amp;quot; task like brick laying or making pins from wire.
If the future was knowable, the project ROI would be a fixed 150% or
300% or, well anything. Oh. Right. Somethings &lt;strong&gt;are&lt;/strong&gt; unknowable. Like
the future. Ahem.]&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="v-strategy-2-agile"&gt;
&lt;h2&gt;V. Strategy 2: Agile&lt;/h2&gt;
&lt;p&gt;The very best you can do—indeed, the only rational thing you can do—is
to locate talent who are willing to work for an indefinite period of
time.&lt;/p&gt;
&lt;p&gt;A person or people you trust.&lt;/p&gt;
&lt;p&gt;You establish a release cycle. Two or three weeks are typical sprint
cycle times. two weeks works well for very new development. Three
weeks is better for more established teams.&lt;/p&gt;
&lt;p&gt;You identify the first three or so releases by writing those
high-priority, high-value user stories as carefully as you can.
Testable, finite user stories. Clear boundaries on acceptable vs.
unacceptable behavior. Too few user stories makes it difficult to
foresee the future. Too many user stories can be needless preliminary
work since they're going to change anyway.&lt;/p&gt;
&lt;p&gt;You do Scrum development with a two-week cycle.
&lt;a class="reference external" href="http://www.ambysoft.com/essays/agileLifecycle.html"&gt;http://www.ambysoft.com/essays/agileLifecycle.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Useless,&amp;quot; you say, &amp;quot;because there's no overall budget!&amp;quot;&lt;/p&gt;
&lt;p&gt;Correct. There's no overall budget. You don't (and shouldn't) have a
legally-binding definition of &amp;quot;done&amp;quot;. Done means &amp;quot;business death.&amp;quot; You
have a vision for the first release. From that you'll make enough
money to get to the second release. Which gets you to the third
release. You're not done until you're out of ideas and no one wants
your product anymore.&lt;/p&gt;
&lt;p&gt;Done should always be defined as &amp;quot;planned release [X] is the last
release.&amp;quot; After that, it's donate the intellectual property into the
public domain and move on to something profitable.&lt;/p&gt;
&lt;p&gt;&amp;quot;Then logically,&amp;quot; you say, &amp;quot;There can be a budget for the &lt;strong&gt;first&lt;/strong&gt;
release.&amp;quot;&lt;/p&gt;
&lt;p&gt;Except, as noted above, you don't know how productive the team is. So
there's no useful budget for even the first release. Ideally, 1 sprint
= 1 release. But. Until you know the team, and the user stories, and
the platform, and the application, you can't assume that.&lt;/p&gt;
&lt;p&gt;Which gets us to this:&lt;/p&gt;
&lt;blockquote&gt;
The budget is only enough to get you through the next two-week sprint.
A three-person team for two weeks is 240 hours. $50/hr. $12,000 per
sprint. Perhaps with a larger team, it may be $20,000.&lt;/blockquote&gt;
&lt;p&gt;Each sprint must produce something releasable or everyone is fired.
It's that crisp. The company is out of business—as currently
organized—when the team can't create something releasable. Either the
user stories aren't testable or the sprint planning is too ambitious.
Or someone lacks the skills they were thought to have during the
interview process. Or something is wrong with the team chemistry.&lt;/p&gt;
&lt;p&gt;Sometimes, a sprint's work product is not deployed for marketing
purposes. It's saved up into the next sprint so that the monthly
release is far cooler than the bi-weekly release.&lt;/p&gt;
&lt;p&gt;I'm aware that this is an unsatisfying answer. It's nice to hope that
software development is a finite, linear process with just minor bumps
in the road. Sadly, it's not. It's a completely out-of-control process
that hurtles down the wave fronts making progress in a reasonably
desirable direction in spite of currents, winds and weather. It's (by
definition) a &lt;strong&gt;learning&lt;/strong&gt; process. As knowledge is accumulated, it's
encoded in the form of software. Once all the knowledge is available,
the software happens to be done, also.&lt;/p&gt;
&lt;p&gt;Also: {filename}/blog/2011/11/2011_11_28-justification_of_project_staffing.rst&lt;/p&gt;
&lt;p&gt;And this: {filename}/blog/2010/03/2011_11_28-justification_of_project_staffing.rst&lt;/p&gt;
&lt;p&gt;This, too: {filename}/blog/2013/06/2013_06_27-on_risk_and_estimating_and_agile_methods&lt;/p&gt;
&lt;p&gt;Okay, fine: {filename}/blog/2009/10/2009_10_22-breaking_into_agile.rst&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="wonderful-post-love-it"&gt;
&lt;h2&gt;Wonderful post. Love it.&lt;/h2&gt;
&lt;p&gt;Rick Jones&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-27 08:04:13.514000-04:00&lt;/p&gt;
&lt;p&gt;Wonderful post. Love it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-disagree-with-your-assertion-that-scrum-means-th"&gt;
&lt;h2&gt;I disagree with your assertion that Scrum means th...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-27 17:51:12.435000-04:00&lt;/p&gt;
&lt;p&gt;I disagree with your assertion that Scrum means the &amp;quot;Formal Scrum-fall&amp;quot;
version of waterfall. I don't know how I can make this more clear
without adding absurd statements. Why did you assert that I was talking
about a rigid, formal, useless version of Scrum? What could I have said
differently to alert you?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-re-conflating-a-lack-of-premature-analysis"&gt;
&lt;h2&gt;You're conflating a lack of premature analysis...&lt;/h2&gt;
&lt;p&gt;Michael Barnathan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-27 16:07:28.305000-04:00&lt;/p&gt;
&lt;p&gt;You're conflating a lack of premature analysis (good) with Scrum (not so
good).&lt;/p&gt;
&lt;p&gt;The first thing you do in Scrum is try to estimate how long tasks will
take you and how many you can take in for the next sprint (i.e. the
planning meeting). In my experience in the software industry, which is
extensive, these meetings tend to end in failure and frustration for
precisely the reasons you outlined above - no one can accurately
estimate the sprint beforehand.&lt;/p&gt;
&lt;p&gt;A good Scrum team will move on and say &amp;quot;we don't know yet, let's just
get started and do everything we can in that time period&amp;quot;, and basically
end the first planning meeting right there. Of course, at that point,
they're not using Scrum anymore. A bad one will waste up to 2 hours in
the planning meeting jumping wildly at estimates, then will run into
problems 3/4 of the way into the sprint: either they'll feel depressed
because they can't get all of it done or they'll run out of work and
start twiddling their thumbs. If you're lucky, they'll rush something
with a bunch of &amp;quot;temporary hacks&amp;quot; out the door so they can say they
delivered something, as there is a dire incentive to release. Next
sprint, the product owner will give them more work and those &amp;quot;temporary&amp;quot;
hacks will become permanent. And the whole cycle will repeat again and
again.&lt;/p&gt;
&lt;p&gt;This process killed one of the companies that I worked at, and they had
a very good development team.&lt;/p&gt;
&lt;p&gt;The spirit of getting something done before trying to budget is correct
- I just don't think your vision of using formal &amp;quot;Agile&amp;quot; methods will
get you there. I've seen a lot of places implement Scrum - the most
successful ones were the ones who removed process liberally. Just &amp;quot;ship
early, ship often&amp;quot; and you can make do without tons of bureaucracy.&lt;/p&gt;
&lt;p&gt;In fact, you'll find that a good team functions best with less process
rather than more. Good teams self-organize to a much greater extent, and
bureaucracy just gets in their way of doing that. We used something very
close to waterfall at Google, and the people there were such mature
developers that it worked brilliantly. Scrum would have just slowed us
down.&lt;/p&gt;
&lt;p&gt;If you want the insight without the issues of a synchronous process, use
Kanban. Continuous flow processes are much friendlier to developers and
don't require excessive analysis to get started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="speaking-of-agile-software-development-life-cycle"&gt;
&lt;h2&gt;Speaking of Agile software development life cycle,...&lt;/h2&gt;
&lt;p&gt;Maryna&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2022-02-16 09:10:40.053000-05:00&lt;/p&gt;
&lt;p&gt;Speaking of Agile software development life cycle, here is a really
useful &lt;a class="reference external" href="https://www.cleveroad.com/blog/agile-sdlc"&gt;article&lt;/a&gt; about
this.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="budgeting"></category><category term="software process improvement"></category><category term="estimating"></category></entry><entry><title>On Risk and Estimating and Agile Methods</title><link href="https://slott56.github.io/2013_06_27-on_risk_and_estimating_and_agile_methods.html" rel="alternate"></link><published>2013-06-27T10:25:00-04:00</published><updated>2013-06-27T10:25:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-27:/2013_06_27-on_risk_and_estimating_and_agile_methods.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C1076854706/E20070106101634.html"&gt;The Question of
Risk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, see &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C412398194/E20080902155944.html"&gt;Lean Projects -- Not Deficient
Projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C1076854706/E20080514185337.html"&gt;Keeping the Customer
Satisfied&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are notes for a long, detailed rant on the value of Agile
methods.&lt;/p&gt;
&lt;p&gt;One specious argument against an Agile approach is the &amp;quot;risk
management&amp;quot; question. In this case, however, it becomes a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C1076854706/E20070106101634.html"&gt;The Question of
Risk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, see &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C412398194/E20080902155944.html"&gt;Lean Projects -- Not Deficient
Projects&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/C1076854706/E20080514185337.html"&gt;Keeping the Customer
Satisfied&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are notes for a long, detailed rant on the value of Agile
methods.&lt;/p&gt;
&lt;p&gt;One specious argument against an Agile approach is the &amp;quot;risk
management&amp;quot; question. In this case, however, it becomes a &amp;quot;how much
of a contingency budget should be write into the contract.&amp;quot; Which
isn't really risk management.&lt;/p&gt;
</content><category term="Technologies"></category><category term="risk"></category><category term="project management"></category></entry><entry><title>Amazing Speedup</title><link href="https://slott56.github.io/2013_06_27-amazing_speedup.html" rel="alternate"></link><published>2013-06-27T10:16:00-04:00</published><updated>2013-06-27T10:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-27:/2013_06_27-amazing_speedup.html</id><summary type="html">&lt;p&gt;A library had unit tests that ran for almost 600 seconds. Two small
changes dropped the run time to 26 seconds.&lt;/p&gt;
&lt;p&gt;I was amazed.&lt;/p&gt;
&lt;p&gt;Step 1. I turned on the cProfile. I added two methods to the slowest
unit test module.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def profile():
    import cProfile
    cProfile.run( 'main()', 'the_slow_module.prof' …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;A library had unit tests that ran for almost 600 seconds. Two small
changes dropped the run time to 26 seconds.&lt;/p&gt;
&lt;p&gt;I was amazed.&lt;/p&gt;
&lt;p&gt;Step 1. I turned on the cProfile. I added two methods to the slowest
unit test module.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def profile():
    import cProfile
    cProfile.run( 'main()', 'the_slow_module.prof' )
    report()

def report():
    import pstats
    p = pstats.Stats( 'the_slow_module.prof' )
    p.sort_stats('time').print_callees(24)
&lt;/pre&gt;
&lt;p&gt;Now I can add profiling or simply review the report. Looking at the
&amp;quot;callees&amp;quot; provided some hints as to why a particular method was so
slow.&lt;/p&gt;
&lt;p&gt;Step 2. I replaced ElementTree with cElementTree (duh.) Everyone
&lt;em&gt;should&lt;/em&gt; know this. I didn't realize how much this mattered. The
trick is to note how much time was spent doing XML parsing. In the
case of this unit test suite, it was a LOT of time. In the case of
the overall application that uses this library, that won't be true.&lt;/p&gt;
&lt;p&gt;Step 3. The slowest method was assembling a list. It did a lot of
list.append(), and list.__len__(). It looked approximately like the
following.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def something( self ):
  result= []
  for index, value in some_source:
      while len(result)+1 != index:
          result.append( None )
      result.append( SomeClass( value ) )
  return result
&lt;/pre&gt;
&lt;p&gt;This is easily replaced by a generator. The API changes, so every use
of this method function may need to be modified to use the generator
instead of the list object.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def something_iter( self ):
   counter= 0
   for index, value in some_source:
       while counter+1 != index:
           yield None
           counter += 1
       yield SomeClass( value )
       counter += 1
&lt;/pre&gt;
&lt;p&gt;The generator was significantly faster than list assembly.&lt;/p&gt;
&lt;p&gt;Two minor code changes and a significant speed-up.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="interesting-you-may-consider-just-using-a-list-c"&gt;
&lt;h2&gt;Interesting.  You may consider just using a list c...&lt;/h2&gt;
&lt;p&gt;Kurt Rose&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-29 13:10:57.074000-05:00&lt;/p&gt;
&lt;p&gt;Interesting. You may consider just using a list comprehension or
generator expression as well for that second piece:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[ [None]*index + [SomeClass(value)] for index,value in source ]
itertools.chain.from_iterable( ( itertools.chain( itertools.repeat(None,
index), [SomeClass(value)] ) for index, value in source ) )
&lt;/pre&gt;
&lt;p&gt;This arguably simplifies the code by removing the explicit &amp;quot;counter&amp;quot;
variable, and the nested loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-take-it-index-from-some-source-must-be-increasin"&gt;
&lt;h2&gt;I take it index from some_source must be increasin...&lt;/h2&gt;
&lt;p&gt;Fred&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-29 16:36:17.569000-05:00&lt;/p&gt;
&lt;p&gt;I take it index from some_source must be increasing and start at least
with 1? (The latter because starting at zero, which seems more natural
for a general index, results in an infinite loop: counter + 1 will never
equal 0. Was this an error in simplifying for the blog?)&lt;/p&gt;
&lt;p&gt;&amp;#64;Kurt: You can't eliminate counter as in either of those, as the number
of Nones depends on the difference between successive indexes, not on
index alone. Your code gives a different result.&lt;/p&gt;
&lt;p&gt;And realizing the importance is the difference between successive
indexes leads me to write (how to format code for blogspot?):
def something_iter():&lt;/p&gt;
&lt;pre class="literal-block"&gt;
..cur_index = 1 # instead of 0 for reason above
..for next_index, value in some_source:
....for \_ in xrange(cur_index, next_index):
......yield None
....cur_index = next_index
....yield SomeClass(value)
&lt;/pre&gt;
&lt;p&gt;I don't consider this any significant improvement over the while loop
version, but I think it would help prevent misunderstandings similar to
Kurt's.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-index-is-1-based-it-39-s-the-column-number"&gt;
&lt;h2&gt;The index is 1-based.  It&amp;amp;#39;s the column number ...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-29 17:29:38.903000-05:00&lt;/p&gt;
&lt;p&gt;The index is 1-based. It's the column number from reading Excel
spreadsheets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oh-i-see-the-data-is-the-index-and-value-from-a"&gt;
&lt;h2&gt;Oh, I see. The data is the index and value from a ...&lt;/h2&gt;
&lt;p&gt;Kurt Rose&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-29 18:41:11.579000-05:00&lt;/p&gt;
&lt;p&gt;Oh, I see. The data is the index and value from a column, and the code
is to fill in the &amp;quot;missing&amp;quot; numbers with Nones?&lt;/p&gt;
&lt;p&gt;A defaultdict may be perfect for this. Since source is already in the
form of a series of a list of (index, value) tuples, we can just pass
this straight to the constructor.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; source = [ (1, 'a'), (5, 'b') ]
&amp;gt;&amp;gt;&amp;gt; import collections
&amp;gt;&amp;gt;&amp;gt; data = collections.defaultdict(lambda: None, source)
&lt;/pre&gt;
&lt;p&gt;(add a list comprehension to call SomeClass constructor:
collections.defaultdict(lambda: None, [(k, SomeClass(v)) for k,v in
source])
Then your code can just treat data as if it were a list for indexing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; data[1]
'a'
&amp;gt;&amp;gt;&amp;gt; data[2]
&amp;gt;&amp;gt;&amp;gt; data[3]
&amp;gt;&amp;gt;&amp;gt; data[4]
&amp;gt;&amp;gt;&amp;gt; data[5]
'b'
&lt;/pre&gt;
&lt;p&gt;If you want to make it into a real list (for slicing, etc) you can do
this with a simple comprehension:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; datalist = [data[a] for a in xrange(max(data.keys())+1)]
&amp;gt;&amp;gt;&amp;gt; datalist
[None, 'a', None, None, None, 'b']
&lt;/pre&gt;
&lt;p&gt;You could also replace this with a generator expression if you wanted to
save memory I guess, but you may as well leave it as a defaultdict in
that case.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="algorithm"></category><category term="#python"></category></entry><entry><title>How to Make Technology Choices</title><link href="https://slott56.github.io/2013_06_26-how_to_make_technology_choices.html" rel="alternate"></link><published>2013-06-26T16:58:00-04:00</published><updated>2013-06-26T16:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-26:/2013_06_26-how_to_make_technology_choices.html</id><summary type="html">&lt;p&gt;I get emails looking for help with technology choice. Essentially:
&amp;quot;I've got this idea for game-changing software idea, what technology
should I use?&amp;quot; These questions have disturbing expectations. There's a
Gordian Knot of dependencies that's sometimes baffling.&lt;/p&gt;
&lt;p&gt;Sometimes the questions are about choosing a &amp;quot;tech stack&amp;quot; or an
&amp;quot;architecture&amp;quot;. Sometimes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I get emails looking for help with technology choice. Essentially:
&amp;quot;I've got this idea for game-changing software idea, what technology
should I use?&amp;quot; These questions have disturbing expectations. There's a
Gordian Knot of dependencies that's sometimes baffling.&lt;/p&gt;
&lt;p&gt;Sometimes the questions are about choosing a &amp;quot;tech stack&amp;quot; or an
&amp;quot;architecture&amp;quot;. Sometimes it's the &amp;quot;framework&amp;quot; or the &amp;quot;platform&amp;quot;.&lt;/p&gt;
&lt;p&gt;All the questions, however, are very similar. They amount to either
this&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;&amp;quot;What's the one, perfect and final technology choice we need to make?&amp;quot;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;or this&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;&amp;quot;We're considering [X, Y and Z] can you validate this choice?&amp;quot;&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Notice that the emphasis is on making &lt;strong&gt;One&lt;/strong&gt; &lt;strong&gt;Perfect&lt;/strong&gt; &lt;strong&gt;Final&lt;/strong&gt; &lt;strong&gt;Decision&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;An incidental part of this question is the context: this varies
widely:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There might be a pretty good software idea.&lt;/li&gt;
&lt;li&gt;Sometimes there's a list of user stories or use cases. Other times,
there's a blatant refusal to consider human users, and a bizarre
focus on technologies.&lt;/li&gt;
&lt;li&gt;Less often, there's some sense of the business model; i.e., who will
pay for this. Simply saying &amp;quot;advertisers&amp;quot; is a hint that there's no
business model. Lack of a business model is a hint that technology
choices are premature.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not asked handle questions on business models; I'm not a venture
capitalist; I'm just a tech consultant. But I expect that a business
model is in place. Technology choices support a business; not the
other way around. If there's no income, then there's no point in
making technology choices, is there?&lt;/p&gt;
&lt;div class="section" id="unreasonable-expectations"&gt;
&lt;h2&gt;Unreasonable Expectations&lt;/h2&gt;
&lt;p&gt;What's disturbing are the expectations. We'll start with one
expectation that is disturbing and then look at another.&lt;/p&gt;
&lt;p&gt;The expectation of &lt;strong&gt;finality&lt;/strong&gt; is the most disturbing: the
expectation that someone can
make &lt;strong&gt;One&lt;/strong&gt; &lt;strong&gt;Perfect&lt;/strong&gt; &lt;strong&gt;Final&lt;/strong&gt; &lt;strong&gt;Decision&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No technology choice is ever final. Today's greatest ever
state-of-the-art, kick-ass-and-take-names SDK may evaporate in a
cloud of lawsuits tomorrow. Today's tech giant may collapse. Today's
platform of choice may be tomorrows weird anachronism.
Worse, a super-popular framework or platform may—after deeper
examination—be totally brain-dead regarding some specific API or
standard. Details matter, and details emerge slowly. A vendor (or
open source community) may claim that it's (for example) RESTful, but
you won't know until you try it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Principle 0&lt;/strong&gt;.
Software Development is Knowledge Capture. You do
not already know &lt;strong&gt;everything&lt;/strong&gt; about the business, the technology or
problem being solved. If you already know everything, it means you
learned everything based on already having working software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Principle 1&lt;/strong&gt;.
Change happens. A fixed technology stack is a
mistake. A fixed set of interface specifications is less of a mistake
than a fixed set of technology choices. Software development involves
learning, and while the learning is going on, the marketplace is
changing. Note that learning is a two-way street, also. You learn
about the users, the users learn about your technology. The problem
you're trying to solve can morph as the users learn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Principle 2&lt;/strong&gt;.
Change happens quickly.  As you learn about the
marketplace, the problem, the technology and the business model,
you'll be changing your software. Agility matters more than
perfection. The most adaptable solution wins.&lt;/p&gt;
&lt;p&gt;This next rule is harsh. But it's important.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Principle 3&lt;/strong&gt;.
If you have nothing to demonstrate, you have
nothing. A good idea without a demo is difficult, almost impossible
to work with. Without a demo, it's all just hand-waving. You must
encode your knowledge in working software &lt;strong&gt;before&lt;/strong&gt; you can make a
technology choice.&lt;/p&gt;
&lt;p&gt;Yes. It's circular. Sorry. You can't make a software technology
choice until you have demo software that shows the problem areas. You
can't create the demo without making a (potentially inappropriate)
technology choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="demo-to-product"&gt;
&lt;h2&gt;Demo To Product&lt;/h2&gt;
&lt;p&gt;When I ask about the existence of any demo software, I get into
trouble because some folks don't want to even start building a demo
until they have the &lt;strong&gt;One&lt;/strong&gt; &lt;strong&gt;Perfect&lt;/strong&gt; &lt;strong&gt;Final&lt;/strong&gt; &lt;strong&gt;Decision&lt;/strong&gt; firmly
in hand.&lt;/p&gt;
&lt;p&gt;This leads to a second unreasonable expectation.&lt;/p&gt;
&lt;p&gt;The expectation of &lt;strong&gt;continuous evolution&lt;/strong&gt; from demo to product
is also disturbing: the expectation that even one line of code
from the initial demo will become part of the final product.&lt;/p&gt;
&lt;p&gt;Getting from idea to product will involve many changes. The user
stories, the technology choices, the business model, every aspect
is a candidate for a disruptive change. Success comes from making
these changes. The first developer to abandon a bad idea is the
furthest ahead. The most adaptable solution wins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cutting-the-gordian-knot-making-choices"&gt;
&lt;h2&gt;Cutting the Gordian Knot: Making Choices&lt;/h2&gt;
&lt;p&gt;Making a final, perfect technology choice for building the initial
demo is not even helpful.
So don't.
Cut the Gordian Knot by building something. Build early. Build
often.&lt;/p&gt;
&lt;p&gt;What's essential is to build something which (a) works, (b) has
automated tests, and (c) can be evolved as the user stories evolve
and improve. As you learn, you'll encode your evolving knowledge
into evolving software. This is what software development really
is: learning and encoding.&lt;/p&gt;
&lt;p&gt;The initial demo may have to be discarded because better technology
is located. Usually, however, the initial demo must be discarded
based on experience in the marketplace, experience with the users, or
experience solving the user's problems. It's more often these &amp;quot;other&amp;quot;
non-technology lessons learned that trash the initial demo.&lt;/p&gt;
&lt;p&gt;It's impossible to make a &amp;quot;future proof&amp;quot; technology choice. The
future technology alternatives are difficult to know in advance. We
distinguish between future and past by the lack of certainty in the
future. As experience is gained, the initial round of user stories
will get rewritten or possibly even discarded. A technology choice
based on obsolete user stories is a liability, not an asset.&lt;/p&gt;
&lt;p&gt;Some folks beg for something that will be &amp;quot;scalable&amp;quot; or &amp;quot;responsive&amp;quot;
or &amp;quot;efficient&amp;quot; without having any actual scaling or performance
problem that needs to be solved.&lt;/p&gt;
&lt;p&gt;Using appropriate data structures and algorithms leads to inherently
high-performance software. Beyond this vague platitude nothing much
can be said.&lt;/p&gt;
&lt;p&gt;Until.&lt;/p&gt;
&lt;p&gt;Until there's a demo that has a specific scalability issue or
performance bottleneck. Once a problem has been uncovered, then
there's something to solve, and technology choices begin to matter.
Most of the time, this will be a data structure or algorithm choice.
Less often, this will be a larger architectural choice regarding
parallelism or persistence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hand-wringing"&gt;
&lt;h2&gt;Hand Wringing&lt;/h2&gt;
&lt;p&gt;&amp;quot;But what if,&amp;quot; the professional hand-wringer asks, &amp;quot;What if my user
stories are perfect, my demo is perfect, but I've made some
sub-optimal technology choice and I'm forced to rework &lt;strong&gt;everything&lt;/strong&gt;
for purely technical reasons that—in hindsight—I could have
foreseen?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answers are (A) Are you an absolute genius of flawless user story
creation? (B) Is your code so bad that the rewrite is more than just
a refactoring? (C) When did you plan to fix you code so it could be
refactored? (D) Did you really think you were never going to be
forced to make a core technology change?&lt;/p&gt;
&lt;p&gt;&amp;quot;But what if,&amp;quot; the hand-wringer asks, &amp;quot;What if I can't afford to
write the whole thing twice.&amp;quot;&lt;/p&gt;
&lt;p&gt;The answers are (A) Is your business plan so fragile that a rewrite
invalidates everything? (B) What do you think &amp;quot;user support&amp;quot; entails?
(C) What will you do when users ask for new features?&lt;/p&gt;
&lt;p&gt;If this is about &amp;quot;time-to-market&amp;quot; and you have to rush to be early or
first or something, then technology choice doesn't matter, does it?
Time to market matters. So build something that works and get it to
the market first.&lt;/p&gt;
&lt;p&gt;&amp;quot;But what if,&amp;quot; the hand-wringer asks, &amp;quot;I choose a lousy platform
initially?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answers are (A) Nothing is really wrong, it's just somewhat more
costly or somewhat more complex. (B) So do others. (C) They rewrite,
also.&lt;/p&gt;
&lt;p&gt;&amp;quot;But what if I don't have skills in the best technology choice? What
if I master a lousy technology to build the demo and release 1 and
now I have to learn a whole new technology for release 2?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answers are (A) Did you really think that any technology would
last forever? (B) Why can't you learn something new?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-rules"&gt;
&lt;h2&gt;Basic Rules&lt;/h2&gt;
&lt;p&gt;The essential rules are these.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Build Early. Build Often.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;The first step in making technology choices, then, is to pick a
technology that you can actually make work, and build a demo.&lt;/p&gt;
&lt;p&gt;Once you have a demo, recruit some potential or actual users.&lt;/p&gt;
&lt;p&gt;Learn your lessons from these users: solve their problems: be sure
your software is testable: troubleshoot your software as it is
applied by &lt;strong&gt;real&lt;/strong&gt; users to their &lt;strong&gt;real&lt;/strong&gt; problems.
Plan to rebuild your demo to satisfy your user's demands. You will be
learning from your users.&lt;/p&gt;
&lt;p&gt;In order to maximize the learning, you're going to need to log
carefully. The default logging in something like Apache is useless;
log scraping is useless. You'll need detailed, carefully planned,
application-specific logging to capture enough information that you
really know what's really going on.&lt;/p&gt;
&lt;p&gt;Once you have working software with real users, you're going to
switch into support mode. You'll be using your application-specific
logging to figure out what they're doing.&lt;/p&gt;
&lt;blockquote&gt;
[War Story. For testability purposes, I added a special logger for
a particularly gnarly and visible calculation of actuarial risk.
The logger dumped &lt;strong&gt;everything&lt;/strong&gt; in a giant JSON document. To
simplify debugging, I wrote a little app that loaded the JSON
document and produced a ReStructured Text document so that I could
read it and understand it. When requested, I could trivially pump
the RST through docutils to create PDF's and send them to customer
actuaries who questioned a result. This PDF-of-the-details became
a user story for a link that would show supporting details to an
actuarial user.]&lt;/blockquote&gt;
&lt;p&gt;Once you have working software, and a base of users, you can consider
more refined technology choices. Now the question of PHP vs. Python
vs. Java might become material.&lt;/p&gt;
&lt;blockquote&gt;
[Hint. The right answer was RESTful web services with Python and
mod_wsgi all along. Now you know.]&lt;/blockquote&gt;
&lt;p&gt;When the product is evolving from release 1 to release 2, you may
have to reconsider your choice of database, web server, protocols,
API's, etc. It turns out you're always going to be making technology
choices. There will never be a final decision. Until no one wants
your software.&lt;/p&gt;
&lt;p&gt;If you are really, really lucky, you may get big enough to have
scalability issues. Having a scalability issue is something we all
dream about. Until you actually have a specific scalability issue,
don't try to &amp;quot;pre-solve&amp;quot; a potential problem you don't yet have. If
your software is even moderately well design, adding architectural
layers to increase parallelism is not as painful as supporting
obscure edge cases in user stories.&lt;/p&gt;
&lt;p&gt;When you're still circulating your ideas prior to writing a demo, all
technology choices are equally good. And equally bad. It's more
important to get started than it is to make some
impossibly &lt;strong&gt;Perfect&lt;/strong&gt; &lt;strong&gt;Final&lt;/strong&gt; &lt;strong&gt;Decision.&lt;/strong&gt; Hence the advice to
build early and build often.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I would suggest 2 questions&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-your-produ"&gt;
&lt;h2&gt;1) What is your produ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-26 19:25:38.324000-04:00&lt;/p&gt;
&lt;p&gt;I would suggest 2 questions&lt;/p&gt;
&lt;p&gt;1) What is your product/market fit and how do you plan on verifying it?
I borrowed the above from the lean startup literature.&lt;/p&gt;
&lt;p&gt;2) Are you really building a business or is this a hobby?
There is nothing wrong w/ a hobby but be honest about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="both-of-which-are-answered-by-building-something"&gt;
&lt;h2&gt;Both of which are answered by building something.&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-26 19:39:19.561000-04:00&lt;/p&gt;
&lt;p&gt;Both of which are answered by building something.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="architecture"></category></entry><entry><title>The Small Class Large Class "Question"</title><link href="https://slott56.github.io/2013_06_18-the_small_class_large_class_question.html" rel="alternate"></link><published>2013-06-18T08:00:00-04:00</published><updated>2013-06-18T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-18:/2013_06_18-the_small_class_large_class_question.html</id><summary type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People criticize for making tons of small classes instead of fewer
larger classes.How is well-organized code more difficult to
understand?&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;jim christopher (&amp;#64;beefarino) &lt;a class="reference external" href="https://twitter.com/beefarino/status/340533020815675392"&gt;May 31,
2013&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This isn't really a question. Writing a few &amp;quot;large&amp;quot; omnibus classes is
simply bad design.&lt;/p&gt;
&lt;p&gt;There are several variations on the theme …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;People criticize for making tons of small classes instead of fewer
larger classes.How is well-organized code more difficult to
understand?&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;jim christopher (&amp;#64;beefarino) &lt;a class="reference external" href="https://twitter.com/beefarino/status/340533020815675392"&gt;May 31,
2013&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This isn't really a question. Writing a few &amp;quot;large&amp;quot; omnibus classes is
simply bad design.&lt;/p&gt;
&lt;p&gt;There are several variations on the theme of principles of OO
programming. None of them include &amp;quot;a few large omnibus classes with
nebulous responsibilities.&amp;quot;&lt;/p&gt;
&lt;p&gt;Here's one set of principles: &lt;a class="reference external" href="http://leanagilechange.com/leanagilewiki/index.php?title=Class_Responsibility_Collaboration"&gt;Class Responsibility
Collaboration&lt;/a&gt;.
Here's one summary of responsibility definition: &amp;quot;Ask yourselves what
each class knows and what each class does&amp;quot;.  Here's another: &amp;quot;A
responsibility is anything that a class knows or does.&amp;quot; from &lt;a class="reference external" href="http://www.agilemodeling.com/artifacts/crcModel.htm"&gt;Class
Responsibility Collaborator (CRC)
Models&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This idea of responsibility defined as &amp;quot;Knows or Does&amp;quot; certainly seems
to value focus over sprawling vagueness.&lt;/p&gt;
&lt;p&gt;Here's another set of principles from &lt;a class="reference external" href="http://www.oodesign.com/design-principles.html"&gt;Object-Oriented
Design&lt;/a&gt;; these echo
the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)"&gt;SOLID
Principles&lt;/a&gt;
without the clever acronym.&lt;/p&gt;
&lt;p&gt;Getting down to S: a single reason to change means that the class must
be narrowly-focused. When there are a few large classes, then each
large class has to be touched for more than one reason. By more than
one developer.&lt;/p&gt;
&lt;p&gt;Also, getting to O: open to extension, closed to modification requires
extremely narrow focus. When this is done well, new features are added
via adding subclasses and (possibly) changing an initialization to
switch which &lt;strong&gt;Factory&lt;/strong&gt; subclass is used.&lt;/p&gt;
&lt;div class="section" id="but-why"&gt;
&lt;h2&gt;But Why?&lt;/h2&gt;
&lt;p&gt;Why do people reject &amp;quot;lots of small classes&amp;quot;?&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Reason 1.&lt;/dt&gt;
&lt;dd&gt;It's hard to trivially inspect a complex solution. I've had
an argument similar to the one Beefarino alludes to.  In my case, it
was a manager who simply didn't schedule the time to review the design
in any depth.&lt;/dd&gt;
&lt;dt&gt;Reason 2.&lt;/dt&gt;
&lt;dd&gt;Folks unfamiliar with common design patterns often see them
as &amp;quot;over-engineered&amp;quot;. Indeed, I've had programmers (real live Java
programmers, paid to write Java code) who claimed that the java.util
data structures (specifically Map, TreeMap and HashMap) were needless,
since they could write all of that using only primitive arrays. And
they did, painstakingly write shabby code that had endless loops and
lookups and indexing garbage instead of simply using a Map.&lt;/dd&gt;
&lt;dt&gt;Reason 3.&lt;/dt&gt;
&lt;dd&gt;Some folks with a strong background in simple procedural
programming reject class definitions in a vague, general way. Many
good programmers work out ways to do encapsulation in languages like
C, Fortran or COBOL via naming conventions or other extra-linguistic
tricks.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;They deeply understand procedural code and try to map their ideas of
functions (or subroutines) and their notions of &amp;quot;encapsulation via
naming conventions&amp;quot; onto OO design.&lt;/p&gt;
&lt;p&gt;At one customer site, I knew there would be friction because the
project manager was very interested in &amp;quot;code conventions&amp;quot; and &amp;quot;naming
conventions&amp;quot;. This was a little upsetting at the time. But I grew to
realize that some folks haven't actually seen any open source code.
They don't understand that there are established international,
recognized conventions for most programming languages, and examples
are available on the World Wide Web. Just download a popular package
and read the source.&lt;/p&gt;
&lt;p&gt;The &amp;quot;naming conventions&amp;quot; was particularly telling. The idea that Java
packages (or Python packages and modules) provide distinct namespaces
was not something that this manager understood. The idea that a class
defines a scope was not really making much sense to them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="also-suspicious"&gt;
&lt;h2&gt;Also Suspicious&lt;/h2&gt;
&lt;p&gt;Another suspicious design feature are &amp;quot;utility&amp;quot; packages. It's rare
(not impossible, but rare) for a class to truly be interpackagial in
scope and have no proper home. The &amp;quot;java.util&amp;quot; package, for example,
is a strange amalgamation of the collection data structures, national
and cultural class definitions (calendars, currency, timzones, etc.)
handy pattern abstractions, plus a few algorithms (priority queue,
random).&lt;/p&gt;
&lt;p&gt;Yes, these have &amp;quot;utility&amp;quot; in that they're useful. They apply broadly
to many programming problems. But so does java.lang and java.io. The
use of a vague and overly inclusive term like &amp;quot;util&amp;quot; is an abdication
of design responsibility to focus on what's really being offered.&lt;/p&gt;
&lt;p&gt;These things do not belong together in a sprawling unfocused package.&lt;/p&gt;
&lt;p&gt;Nor does disparate functionality belong in a sprawling, unfocused
class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="education"&gt;
&lt;h2&gt;Education&lt;/h2&gt;
&lt;p&gt;The answer is a lot of eduction. It requires time and patience.&lt;/p&gt;
&lt;p&gt;One of the best methods for education is code walkthroughs. This
permits reviews of design patterns, and how the SOLID principles are
followed (or not followed) by code under development.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="project management"></category><category term="object-oriented design"></category><category term="software process improvement"></category></entry><entry><title>HamCalc and Quirks</title><link href="https://slott56.github.io/2013_06_13-hamcalc_and_quirks.html" rel="alternate"></link><published>2013-06-13T08:00:00-04:00</published><updated>2013-06-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-13:/2013_06_13-hamcalc_and_quirks.html</id><summary type="html">&lt;p&gt;Careful study of the HamCalc shows a number of quirks. Some are funny,
some are just examples of the need for unit test frameworks.
The Wikispaces for the modernization project
is here: &lt;a class="reference external" href="http://hamcalc.wikispaces.com/home"&gt;http://hamcalc.wikispaces.com/home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For example, the following line of code, in GW-Basic, will (usually) set
Y …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Careful study of the HamCalc shows a number of quirks. Some are funny,
some are just examples of the need for unit test frameworks.
The Wikispaces for the modernization project
is here: &lt;a class="reference external" href="http://hamcalc.wikispaces.com/home"&gt;http://hamcalc.wikispaces.com/home&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For example, the following line of code, in GW-Basic, will (usually) set
Y to zero.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Y = O
&lt;/pre&gt;
&lt;p&gt;Yes. That's the variable &amp;quot;O&amp;quot;, not the number 0.&lt;/p&gt;
&lt;p&gt;Why does this work? Why can we use &amp;quot;O&amp;quot; instead of 0?&lt;/p&gt;
&lt;p&gt;Most programmers avoid using the variable &amp;quot;O&amp;quot;, since it's hard to read.&lt;/p&gt;
&lt;p&gt;W-Basic provides default values of 0 for almost all variables.
So,``Y=O`` works as well as &lt;tt class="docutils literal"&gt;Y=0&lt;/tt&gt; most of the time. The only time is doesn't
work is if the program happens to have &amp;quot;O&amp;quot; used as a variable.&lt;/p&gt;
&lt;p&gt;This is one of the examples where people start shouting that a compiled
language is so obviously superior that the rest of us must be
brain-damaged to use a dynamic language like Python.&lt;/p&gt;
&lt;p&gt;This isn't a &lt;strong&gt;very&lt;/strong&gt; compelling argument for the overhead of a
compiler. It's a more compelling argument for avoiding languages with
default values. Python, for example, would throw an exception if the
variable &amp;quot;O&amp;quot; had no value.&lt;/p&gt;
&lt;p&gt;This isn't common (so far, I've only found one example) but it's
amusing.&lt;/p&gt;
&lt;p&gt;Another amusing quirk is the occasional tangle of GOTO/GOSUB logic that
defies analysis. There are several examples of GOSUB/RETURN logic that
is totally circumvented by a GOTO that circumvents the return. This
should (eventually) lead to some kind of stack overflow. But GW-Basic
doesn't really handle recursion well, so it would probably just be
ignored.&lt;/p&gt;
&lt;p&gt;One of my favorites is this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
730 FOR N=A TO T STEP B
750 IF T/N=INT(T/N)THEN X=X+1:PN(X)=N:T=T/N:GOTO 730
760 A=3:B=2
770 NEXT N
&lt;/pre&gt;
&lt;p&gt;What does the GOTO on line 750 &lt;strong&gt;mean&lt;/strong&gt;? Since GW-Basic doesn't use a
stack of any kind, it doesn't create recursion or stack overflow. It
appears to &amp;quot;restart&amp;quot; the loop with a new value of T. I think.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="preservation"></category><category term="GW-Basic"></category><category term="modernization"></category><category term="software process improvement"></category><category term="test-driven reverse engineering"></category></entry><entry><title>Python Roadmap Amplifications and Clarifications</title><link href="https://slott56.github.io/2013_06_11-python_roadmap_amplifications_and_clarifications.html" rel="alternate"></link><published>2013-06-11T08:00:00-04:00</published><updated>2013-06-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-11:/2013_06_11-python_roadmap_amplifications_and_clarifications.html</id><summary type="html">&lt;p&gt;Some additional points on using Python 2.7 in a way that bridges the gap
to Python 3.2. The steps are small and simple. You can start taking them
now.&lt;/p&gt;
&lt;p&gt;Recently I suggested that one should always include &lt;tt class="docutils literal"&gt;from __future__ import division, print_function&lt;/tt&gt; on every module. &lt;strong&gt;Always&lt;/strong&gt;. Every
Module …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some additional points on using Python 2.7 in a way that bridges the gap
to Python 3.2. The steps are small and simple. You can start taking them
now.&lt;/p&gt;
&lt;p&gt;Recently I suggested that one should always include &lt;tt class="docutils literal"&gt;from __future__ import division, print_function&lt;/tt&gt; on every module. &lt;strong&gt;Always&lt;/strong&gt;. Every
Module.&lt;/p&gt;
&lt;p&gt;I also suggested using &lt;tt class="docutils literal"&gt;input=raw_input&lt;/tt&gt; in those few scripts where input
might be expected. This  isn't the best idea, but it forces you to
depend on the semantics of the Python 3 &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;I failed to mention that you must stop using the &lt;strong&gt;%&lt;/strong&gt; operator for
string formatting. This operator will be removed from Python 3.2. Start
using &amp;quot;&amp;quot;.format() string formatting right now. &lt;strong&gt;Always&lt;/strong&gt;. Every Module.&lt;/p&gt;
&lt;p&gt;A follow-up question was &amp;quot;What the heck is &lt;tt class="docutils literal"&gt;from __future__&lt;/tt&gt;?&amp;quot;&lt;/p&gt;
&lt;p&gt;The Python &lt;tt class="docutils literal"&gt;__future__&lt;/tt&gt; package contains proposed language changes.
There are a number of modules. Of those, two are highly relevant to
easing the switch to 3.2.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Division&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The division module changes the semantics of division. The &amp;quot;/&amp;quot; operator
becomes &amp;quot;exact&amp;quot; division instead of &amp;quot;depends on the arguments&amp;quot; division.
In Python2.7, do&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; 22/7
&amp;gt;&amp;gt;&amp;gt; 22/7.0
&lt;/pre&gt;
&lt;p&gt;To see the &amp;quot;depends on the arguments&amp;quot; (or classical) mode.&lt;/p&gt;
&lt;p&gt;Then try&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from \__future_\_ import division
&amp;gt;&amp;gt;&amp;gt; 22/7
&lt;/pre&gt;
&lt;p&gt;This is the exact division operation that's used in Python 3.
For integer division, the &amp;quot;//&amp;quot; operator is used.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; 22//7
&lt;/pre&gt;
&lt;p&gt;Start now. Use them like this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Print Function&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The print_function module actually changes the Python compiler to reject
the &lt;strong&gt;print&lt;/strong&gt; statement as a syntax error. This allows you to use the
(less quirky) print() function.&lt;/p&gt;
&lt;p&gt;In Python 3, the &lt;strong&gt;print&lt;/strong&gt; statement has been removed.  It's easiest to
simply get out of the habit of using the &lt;strong&gt;print&lt;/strong&gt; statement by
switching to the print() function as soon as possible.&lt;/p&gt;
&lt;p&gt;This means that examples from older books will have to be translated.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print &amp;quot;hello world&amp;quot;
&lt;/pre&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print(&amp;quot;hello world&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Not too significant a change, really.&lt;/p&gt;
&lt;p&gt;In some later chapters, they may introduce print &amp;gt;&amp;gt; somefile, data,
data.&lt;/p&gt;
&lt;p&gt;The &amp;quot;chevron print&amp;quot;. This syntax was a HUGE blunder, and is one of the
reasons for eliminating the &lt;strong&gt;print&lt;/strong&gt; statement and replacing it with
the print() function. The print function equivalent is print( data,
data, file=somefile ). Much more regular; much less quirky.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Obstinate Idiocy [Updated]</title><link href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html" rel="alternate"></link><published>2013-06-06T07:00:00-04:00</published><updated>2022-11-22T17:04:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-06:/2022_11_22-obstinate_idiocy_updated.html</id><summary type="html">&lt;p&gt;Once in a great while, you see someone engaging in Obstinate Idiocy.&lt;/p&gt;
&lt;p&gt;Here's my recent example.&lt;/p&gt;
&lt;p&gt;They're solving some kind of differential equation. Not sure why.&lt;/p&gt;
&lt;p&gt;Symptom 1 of Obstinate Idiocy is &lt;strong&gt;No Rational Justification&lt;/strong&gt;. The
explanation is often &amp;quot;that's not relevant, what's relevant is this other
thing I want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once in a great while, you see someone engaging in Obstinate Idiocy.&lt;/p&gt;
&lt;p&gt;Here's my recent example.&lt;/p&gt;
&lt;p&gt;They're solving some kind of differential equation. Not sure why.&lt;/p&gt;
&lt;p&gt;Symptom 1 of Obstinate Idiocy is &lt;strong&gt;No Rational Justification&lt;/strong&gt;. The
explanation is often &amp;quot;that's not relevant, what's relevant is this other
thing I want to focus on&amp;quot; or something equivalent to &amp;quot;never mind about
that.&amp;quot;&lt;/p&gt;
&lt;p&gt;The equation is this:&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;y&lt;/i&gt; + 3ln|&lt;i&gt;y&lt;/i&gt;| = &lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;1&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;3&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;(&lt;i&gt;x&lt;/i&gt; − 1)&lt;sup&gt;3&lt;/sup&gt; − &lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;11&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;3&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;Pretty gnarly.&lt;/p&gt;
&lt;p&gt;Apparently, they were so flummoxed by this that they immediately turned
to Excel.  Really.  Excel.&lt;/p&gt;
&lt;p&gt;Symptom 2 of Obstinate Idiocy is &lt;strong&gt;Random Tool Choice&lt;/strong&gt;. Or perhaps
&lt;strong&gt;Ineffective Tool Choice&lt;/strong&gt;. A kind of weird, unthinking choice of
tools.&lt;/p&gt;
&lt;p&gt;Of course, Excel struggles with this sort of thing, since it appears to
gnarly. I was told that there's an Excel Solver, but there was some
problem with using it. It didn't scale, or it required some
understanding of the shape of the equation or something.&lt;/p&gt;
&lt;p&gt;Symptom 3 of Obstinate Idiocy is &lt;strong&gt;Seemingly Random Whining&lt;/strong&gt;. It's
random because there's no rational justification for what's going on and
the tool was chosen apparently at random.&lt;/p&gt;
&lt;p&gt;Ask a question like &amp;quot;why not use another tool?&amp;quot; and you don't get an
answer. You get an argument about tool choice or the politics of the
situation or &amp;quot;tool choice isn't the point&amp;quot; or some other dismissive
non-answer.&lt;/p&gt;
&lt;p&gt;Ask a question like &amp;quot;what are you really trying to do?&amp;quot; and you get user
stories that make approximately no sense. We had to endure a long
discussion on system-assigned surrogate keys as if that was somehow
relevant to the graphing the equation shown above. See Symptom #1.
There's just no reason for this. It's Very Important, but No One Else
Can Understand The Reason Why.&lt;/p&gt;
&lt;div class="section" id="how-to-begin"&gt;
&lt;h2&gt;How To Begin?&lt;/h2&gt;
&lt;p&gt;So, now we're at this weird impasse.&lt;/p&gt;
&lt;p&gt;We have the obstinate idiot who won't discuss their tool choice. Somehow
I'm supposed to sprinkle around some Faerie Dust and magically make
Excel do something better or different than what it normally does.
Indeed, I'm having trouble understanding any of the whining about Excel.&lt;/p&gt;
&lt;p&gt;Clearly, they've never heard of MatLab or Mathematica or any commercial
product that does this nicely. Apparently, they've never even seen the
graph tool on Mac OS X which simply draws the graph with no effort of
any kind on the part of the user.&lt;/p&gt;
&lt;p&gt;Clearly, they've never seen Google and can't make it work.&lt;/p&gt;
&lt;p&gt;They asked how a Pythonista would approach a problem this gnarly. I
couldn't even properly understand that question, since they hadn't
Googled anything and didn't really have a question that could be
answered. As a Pythonista, I use Google. I wasn't sure how to approach
an answer, since I couldn't really understand what their goal was or
what their knowledge gap was.&lt;/p&gt;
&lt;p&gt;Since their principal complaint was about Excel, asking a Python-related
question didn't make much sense. Were they planning on dropping Excel?
If so, why not use MatLab or Mathematica?&lt;/p&gt;
&lt;p&gt;See Symptom 2. The tool choice was fixed. Other tools weren't on the
table. If so, why ask about Python?&lt;/p&gt;
&lt;p&gt;They specifically said they weren't going to use Python. Which raises
the question &amp;quot;Why ask me anything, then?&amp;quot; To which there was no real
answer, just sulking about me not being helpful.&lt;/p&gt;
&lt;p&gt;Correct. I'm not being helpful. I can't figure out what the problem is.
There's a gnarly formula and Excel somehow doesn't work in some optimal
way. And database surrogate keys. And departmental politics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="did-you-try-this"&gt;
&lt;h2&gt;Did You Try This?&lt;/h2&gt;
&lt;p&gt;The equation simplifies to&lt;/p&gt;
&lt;div class="formula"&gt;
&lt;i&gt;x&lt;/i&gt; = (3&lt;i&gt;y&lt;/i&gt; + 9ln|&lt;i&gt;y&lt;/i&gt;| + 11)&lt;sup&gt;&lt;span class="fraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;1&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;3&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/sup&gt; + 1
&lt;/div&gt;
&lt;p&gt;Which is really easy to graph. &lt;span class="formula"&gt;&lt;i&gt;x&lt;/i&gt; = &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;y&lt;/i&gt;)&lt;/span&gt; is, of course, not the usual
approach of &lt;span class="formula"&gt;&lt;i&gt;y&lt;/i&gt; = &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;x&lt;/i&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Apparently, the Obstinate Idiot had not actually applied algebra to the
equation. Nor had they ever conceived of graphing &lt;span class="formula"&gt;&lt;i&gt;x&lt;/i&gt; = &lt;i&gt;f&lt;/i&gt;(&lt;i&gt;y&lt;/i&gt;)&lt;/span&gt; .&lt;/p&gt;
&lt;p&gt;Which brings us to Symptom 4 of Obstinate Idiocy: &lt;strong&gt;Slow To Ask For Help&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And the variation on Symptom 1 of Obstinate Idiocy: &lt;strong&gt;Goal-Free Activity&lt;/strong&gt;. By this I mean that the thrashing around with Excel and
discussing Python was all just a long, drawn-out and utterly irrelevant
side-bar from the real purpose, which apparently was to find something
out related to a differential equation. It's still unclear what the
equation is being used for and why the graph is helpful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-approach"&gt;
&lt;h2&gt;Python Approach&lt;/h2&gt;
&lt;p&gt;First: Differential Equations are hard. Nothing makes them easy.&lt;/p&gt;
&lt;p&gt;Interactive Python, however, can be of some help after you've taken the
first steps with pencil and paper.&lt;/p&gt;
&lt;p&gt;Here's a console log of something I did to help the Obstinate Idiot.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import math
&amp;gt;&amp;gt;&amp;gt; import pprint
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; def lde_1(y):
...     try:
...         x = (3*y+9*math.log(abs(y))+11)**(1/3)+1
...     except ValueError:
...         x = float(&amp;quot;NaN&amp;quot;)
...     return x
...
&amp;gt;&amp;gt;&amp;gt; def eval(y_lo=-15, y_hi=15, y_step=0.5, f_y=lde_1):
...     # Next smaller power of 2: prettier numbers. Less noise.
...     step_2 = 2**math.floor(math.log(y_step, 2))
...     for t in range(int((y_hi-y_lo) // step_2)):
...         y = y_lo + step_2*t
...         x = f_y(y)
...         yield( x, y )
...
&amp;gt;&amp;gt;&amp;gt; data1= list(eval())
&amp;gt;&amp;gt;&amp;gt; pprint.pprint(data1)
&lt;/pre&gt;
&lt;p&gt;I'll leave out the dump of the data points. However, it's possible to
see the asymptote at zero and the ranges where the results switch from
real to complex numbers.&lt;/p&gt;
&lt;p&gt;We can drill into the region around zero to see some details.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
data2 = list(eval(-2, 2, .0625))
pprint.pprint(data2)
&lt;/pre&gt;
&lt;p&gt;These are just numbers.  A picture is worth a thousand numbers.&lt;/p&gt;
&lt;p&gt;We have lots of choices for graphic packages in Python. The point here,
however, is that evaluating the gnarly equation required two preliminary
steps that were far, far &lt;strong&gt;more&lt;/strong&gt; important than choosing a graphic
package.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Do some simple algebra.&lt;/li&gt;
&lt;li&gt;Write a simple loop.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If output to Excel is somehow important, there's always this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import csv
&amp;gt;&amp;gt;&amp;gt; with open(&amp;quot;data.csv&amp;quot;,&amp;quot;w&amp;quot;) as target:
...    wtr= csv.writer(target)
...    wtr.writerows(data1)
&lt;/pre&gt;
&lt;p&gt;That will produce a CSV that Excel will tolerate and display as an X-Y
scatter plot.&lt;/p&gt;
&lt;p&gt;A jupyter notebook with pyplot will knock out a picture directly,
allowing visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="easiest-thing-which-is-operating-system-independen"&gt;
&lt;h2&gt;Easiest thing which is operating system independen...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-11 14:38:50.240000-04:00&lt;/p&gt;
&lt;p&gt;Easiest thing which is operating system independent and don't have to
deal w/ fancy stuff like Mathematica is to&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Bring up Wolfram Alpha url: &lt;a class="reference external" href="http://www.wolframalpha.com/"&gt;http://www.wolframalpha.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enter in the following &lt;tt class="docutils literal"&gt;y + 3*ln|y\| = (1/3)( &lt;span class="pre"&gt;(x-1)^3&lt;/span&gt; ) - (11/3)&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="spreadsheet"></category><category term="software design"></category><category term="software process improvement"></category><category term="analysis"></category></entry><entry><title>HamCalc -- Preserving the Legacy</title><link href="https://slott56.github.io/2013_06_02-hamcalc_preserving_the_legacy.html" rel="alternate"></link><published>2013-06-02T14:35:00-04:00</published><updated>2013-06-02T14:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-06-02:/2013_06_02-hamcalc_preserving_the_legacy.html</id><summary type="html">&lt;p&gt;Wow.
The response to modernizing HamCalc was overwhelming.
Apparently there are a fair number of people who also think that HamCalc
is a treasure to be preserved, improved and added-to.
If you're interested, start here: &lt;a class="reference external" href="http://hamcalc.wikispaces.com/home"&gt;http://hamcalc.wikispaces.com/home&lt;/a&gt;
You can ask to be a member of this wiki …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wow.
The response to modernizing HamCalc was overwhelming.
Apparently there are a fair number of people who also think that HamCalc
is a treasure to be preserved, improved and added-to.
If you're interested, start here: &lt;a class="reference external" href="http://hamcalc.wikispaces.com/home"&gt;http://hamcalc.wikispaces.com/home&lt;/a&gt;
You can ask to be a member of this wiki, and I can add you. This gives
us a place to share ideas.
I think the most important aspect of this project is to be welcoming and
supportive of recreational and amateur programmers. The explanatory
notes and documentation need to be clear, with proper references and
footnotes. The final application programs need to be simple.
The point of HamCalc is not to build a large, complex application. The
point of HamCalc is to be a repository of small, simple solutions that
can be easily understood and repackaged. In my estimation, no one simply
&amp;quot;uses&amp;quot; HamCalc. They read, extend, modify and make local copies of their
private extensions to HamCalc.
Toward this end, we need to allow for alternate implementations. Two
people should be able to carve out the same piece of code and provide
different implementations that provide consistent results but reflect
different optimizations for speed and resource use.
Here's the code repository. &lt;a class="reference external" href="https://github.com/slott56/HamCalc-2.1"&gt;https://github.com/slott56/HamCalc-2.1&lt;/a&gt;
This will let folks who are interested get started. What I think might
happen is that people will carve out pieces that interest them and
convert bits of HamCalc. There are 449 programs, each one of which is a
potential nugget of goodness.&lt;/p&gt;
</content><category term="Technologies"></category><category term="GW-Basic"></category><category term="test-driven reverse engineering"></category><category term="HamCalc"></category></entry><entry><title>Legacy Preservation and "Code Modernization"</title><link href="https://slott56.github.io/2013_05_30-legacy_preservation_and_code_modernization.html" rel="alternate"></link><published>2013-05-30T08:00:00-04:00</published><updated>2013-05-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-30:/2013_05_30-legacy_preservation_and_code_modernization.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The correct marketing term is &amp;quot;Code Modernization&amp;quot;.&lt;/div&gt;
&lt;div class="line"&gt;There are a large number of companies in the Code Modernization
business.&lt;/div&gt;
&lt;div class="line"&gt;They appear to offer &lt;em&gt;automated&lt;/em&gt; &amp;quot;modernization&amp;quot; of code.&lt;/div&gt;
&lt;div class="line"&gt;I would suggest going slowly toward automated modernization. I'm not
easily convinced that any automated tool can preserve what's
meaningful and ignore the …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The correct marketing term is &amp;quot;Code Modernization&amp;quot;.&lt;/div&gt;
&lt;div class="line"&gt;There are a large number of companies in the Code Modernization
business.&lt;/div&gt;
&lt;div class="line"&gt;They appear to offer &lt;em&gt;automated&lt;/em&gt; &amp;quot;modernization&amp;quot; of code.&lt;/div&gt;
&lt;div class="line"&gt;I would suggest going slowly toward automated modernization. I'm not
easily convinced that any automated tool can preserve what's
meaningful and ignore the parts which are quirks, bugs or legacy cruft
that needs to be disposed of.&lt;/div&gt;
&lt;div class="line"&gt;Indeed, I'm rather sure that an automated modernization will actually
be deleterious.&lt;/div&gt;
&lt;div class="line"&gt;Without some care, cruft from the legacy code could be canonized into
an incomprehensible &amp;quot;feature&amp;quot; in the modern implementation. This will
eventually become it's own weird legacy quirk.&lt;/div&gt;
&lt;div class="line"&gt;It's often best to rethink and rewrite the essential parts of the
legacy. Why?&lt;/div&gt;
&lt;div class="line"&gt;Rule One: &lt;strong&gt;Writing Software is Capturing Knowledge&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Consequence: &lt;strong&gt;Converting Software is Preserving Knowledge&lt;/strong&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Knowledge is something that &lt;strong&gt;people&lt;/strong&gt; use. As with modern Agile
software development, we need to focus on the connections among
people. We need to use code as part of the channels of communication.&lt;/div&gt;
&lt;div class="line"&gt;Read the Agile
Manifesto: &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;http://agilemanifesto.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;There are four principles:&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Individuals and interactions over processes and tools&lt;/li&gt;
&lt;li&gt;Working software over comprehensive documentation&lt;/li&gt;
&lt;li&gt;Customer collaboration over contract negotiation&lt;/li&gt;
&lt;li&gt;Responding to change over following a plan&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;A detailed investigation into the use cases of legacy software, the
unique knowledge encoded, and the quirks and cruft requires thinking
about who uses the software and what they expect.&lt;/div&gt;
&lt;div class="line"&gt;Working software (i.e., readable code) is central. An automated
modernization that doesn't properly handle quirks and cruft may create
&amp;quot;working&amp;quot; software in the sense that it compiles. But software that
people can't read and understand doesn't &amp;quot;work&amp;quot; in the more global
sense of encoding captured knowledge.&lt;/div&gt;
&lt;div class="line"&gt;Collaboration is defeated by &lt;strong&gt;automated&lt;/strong&gt; modernization. The users
may have features they don't like or additional features they need.
Doing the functionality improvements side-by-side with code
modernization makes the most sense. Indeed, it often leads to a proper
rewrite, which is the best strategy.&lt;/div&gt;
&lt;div class="line"&gt;It's difficult for users to envision new software that corrects
long-standing quirks. When an Agile process makes software available
incrementally (e.g., the release cycle of Scrum), then the users learn
what they &lt;strong&gt;should&lt;/strong&gt; have requested. An automated modernization cannot
easily respond to the way that users learn through each release.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="your-post-is-a-good-and-your-information-easily-un"&gt;
&lt;h2&gt;your post is a good and your information easily un...&lt;/h2&gt;
&lt;p&gt;olive&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-04-04 05:41:04.683000-04:00&lt;/p&gt;
&lt;p&gt;your post is a good and your information easily understand every person
but you not mention that how to install this software if you want to
check the best rewrite and you want to &lt;a class="reference external" href="https://thinkcomputers.org/save-your-time-and-energy-by-using-article-rewriter/"&gt;Save your time and energy by
using Article
Rewriter&lt;/a&gt;
then check my website
Thanks!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="preservation"></category><category term="test-driven reverse engineering"></category><category term="modernization"></category></entry><entry><title>Legacy Code Preservation: Language Incompatibility and Technology Evolution</title><link href="https://slott56.github.io/2013_05_23-legacy_code_preservation_language_incompatibility_and_technology_evolution.html" rel="alternate"></link><published>2013-05-23T08:00:00-04:00</published><updated>2013-05-23T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-23:/2013_05_23-legacy_code_preservation_language_incompatibility_and_technology_evolution.html</id><summary type="html">&lt;p&gt;It's important to address language or platform incompatibility as
consequences of technology modernization. The reason why we have to do
manual conversions of software is because of the language
incompatibility issue. We must convert manually when no tool can do
the conversion.&lt;/p&gt;
&lt;p&gt;There are several layers to this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Platform Incompatibility …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;It's important to address language or platform incompatibility as
consequences of technology modernization. The reason why we have to do
manual conversions of software is because of the language
incompatibility issue. We must convert manually when no tool can do
the conversion.&lt;/p&gt;
&lt;p&gt;There are several layers to this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Platform Incompatibility&lt;/strong&gt;. This means that the supporting
libraries for the language are incompatible between versions. This is
relatively rare; language libraries are almost always backward
compatible. When they aren't, the problem can often be masked with a
&amp;quot;shim&amp;quot; or little bit software to &amp;quot;wrap&amp;quot; the new libraries to make
them work like the old libraries. Adding the shim is -- generally --
a terrible idea. Why preserve the old version's weird features and
quirks? Why add the complexity (and bugs and quirks) of the shim?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support or Framework Incompatibility&lt;/strong&gt;. A common &amp;quot;Support&amp;quot;
incompatibility is a database; there are many other examples. SQL,
for example, has a standardized core, but is not consistently
implemented and vendor extensions are common. Any large framework
will have compatibility issues among versions and platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS Incompatibility&lt;/strong&gt;. Most POSIX-compliant OS's (Linux, Mac OS X,
etc.) are reasonably compatible. Windows throws a monkey-wrench into
the works. In some cases, a language offers a library to make the
programs in that language OS-agnostic. An OS-unique feature of an
application is a disturbing thing to convert. Is the OS-unique
feature an &lt;strong&gt;essential&lt;/strong&gt; feature of the application? In some cases,
the OS-unique feature stems from specialized drivers for media
support (sound, images, video, etc.) This media compatibility issue
leads to complex OS-agnostic support or leads to the use of
third-party OS-agnostic libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language Incompatibility&lt;/strong&gt;. This is usually an absolute block to
automated conversion. Languages are designed &lt;strong&gt;not&lt;/strong&gt; to be compatible
at a conceptual or semantic level. Automated translation from one
programming language to another is difficult and in some cases
essentially impossible without some kind of supremely sophisticated
artificial intelligence effort. If languages were compatible at a
conceptual level, we'd have universal translation among programming
languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we look at our case studies, we see the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What's the Story?&lt;/strong&gt; OS conversion; the language remained
more-or-less the same.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Are There Quirks?&lt;/strong&gt; OS and Language conversion: Fortran to PL/1.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What's the Cost?&lt;/strong&gt; Language conversion: JOVIAL to Fortran.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paving the Cowpaths&lt;/strong&gt;. Persistence framework conversion: flat files
to RDBMS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Warehouse and Legacy Operations&lt;/strong&gt;. This often involves OS,
language and persistence conversion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Bugs are the Features&lt;/strong&gt;. This was a mental problem, not a
technical one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Preserve An Abomination?&lt;/strong&gt; OS, language and persistence
conversion: Basic to Java.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How Do We Manage This?&lt;/strong&gt; OS, language and persistence conversion:
COBOL to Java.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Preserve the DSL?&lt;/strong&gt; Language and persistence conversion: C to
Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the case where there's a language conversion, the effort simply
becomes new development. The &amp;quot;conversion&amp;quot; or &amp;quot;modernization&amp;quot; concept
is there merely to make managers feel that value is being preserved.&lt;/p&gt;
&lt;p&gt;In the rare case where the language was &lt;strong&gt;not&lt;/strong&gt; converted, deep
questions about user stories vs. technical implementation needed to be
asked and answered clearly and completely. When they were not asked
(or answered) the conversion did not go well.&lt;/p&gt;
&lt;p class="rubric" id="automated-language-translation"&gt;Automated Language Translation&lt;/p&gt;
&lt;p&gt;The idea of automated language conversion is an &amp;quot;attractive
nuisance&amp;quot;.&lt;/p&gt;
&lt;p&gt;(&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Attractive_nuisance_doctrine"&gt;http://en.wikipedia.org/wiki/Attractive_nuisance_doctrine&lt;/a&gt;). Not only
is it generally impossible, it reduces or eliminates the value of the
captured knowledge.&lt;/p&gt;
&lt;p&gt;Assume you have some program P_1 in language L_1. It captures some
knowledge, K, about the problem domain, and encodes that knowledge in
a more-or-less readable and meaningful format.&lt;/p&gt;
&lt;p&gt;We want to 'automagically' create a new program P_2 in language L_2.&lt;/p&gt;
&lt;p&gt;Since the two languages employ different concepts, different data
structures, different programming paradigms, the conversion doesn't
happen at a &amp;quot;high level&amp;quot;. This is not a matter of changing
the print statement to the print() function. This is a matter of
&amp;quot;understanding&amp;quot; the program, P_1 and then creating a new program,
P_2. that performs the &amp;quot;same&amp;quot; functions from the user's point of
view.&lt;/p&gt;
&lt;p&gt;Choice #1 is to create a very high-level technical &amp;quot;specification&amp;quot;
that's language-independent. Then, a translator compiles that
high-level specification into the new language. In essence, we've
&amp;quot;decompiled&amp;quot; from P_1 to P_S and then compiled P_S to P_2, using an
intermediate specification language, L_S. The high-level
specification language L_S must contain both languages, L_1 and L_2,
as features.&lt;/p&gt;
&lt;p&gt;There are examples of elements of this. C++ is compiled to C. Eiffel
is often compiled to C. We can think of C++ as a specification
language that's translated to C.&lt;/p&gt;
&lt;p&gt;Further, we know that &amp;quot;control structure&amp;quot; (IF-THEN-ELSE, WHILE, GOTO)
can all be mapped to each other. There's an elegant graph-theoretic
proof that a program which is a morass of GOTO's can be revised into
IF-THEN-ELSE and WHILE loops. Clearly, then, the converse is
possible.&lt;/p&gt;
&lt;p&gt;While we can go from C++ to C, can we go from C to C++? At least
superficially, yes. But that's only true because C++ is defined to be
a superset of C. So that example is really poor. We'll ignore C++ as
a higher-level language.&lt;/p&gt;
&lt;p&gt;Let's look at Eiffel. We can go from Eiffel to C. Can we go from C to
Eiffel? Not really. Eiffel lacks the GOTO, which C supports. Also, C
has unconstrained pointer coercion (or casting) which Eiffel lacks.
In order to &amp;quot;decompile&amp;quot; C to Eiffel, we'd need to &amp;quot;understand&amp;quot; the C
programming and essentially rewrite it into a neutral version in
Eiffel which could be then translated to another implementation
language.&lt;/p&gt;
&lt;p&gt;Making the problem worse, C has murky semantics for some
constructs. a[i++]= i; for example, is poorly-defined and can do a
wide variety of things.&lt;/p&gt;
&lt;p class="rubric" id="semantic-loss"&gt;Semantic Loss&lt;/p&gt;
&lt;p&gt;Choice #1--to create a very high-level technical
&amp;quot;specification&amp;quot;--can't be done automatically.&lt;/p&gt;
&lt;p&gt;Choice #2 is to create a very low-level implementation of the program
P_1 by compiling it into machine instructions (or JVM instructions or
Python byte codes or Forth words). This low-level language is L_M.
Given a program in L_M, we want to restructure those machine
instructions into a new program, P_2, in the new language, L_2.&lt;/p&gt;
&lt;p&gt;It's important to observe that the translation from P_1 to machine
code L_M may involve some loss of semantic information. A
machine-language &amp;quot;AND&amp;quot; instruction might be part of a P_1 logical
&amp;quot;and&amp;quot; operation or part of a P_1 bit mask operation. The context and
semantic background is lost.&lt;/p&gt;
&lt;p&gt;Without the semantic information, P_2 may not reflect the original
knowledge captured in P_1.&lt;/p&gt;
&lt;p&gt;Note that this difficulty is the same as choice #1--creating a
higher-level specification.&lt;/p&gt;
&lt;p&gt;We can't easily &amp;quot;decompile&amp;quot; code into a summary or understanding or
description. Indeed, for some languages, we're pretty sure we don't
want to try to automatically decompile it. Some legacy C code is so
obscure and riddled with potential confusion that it probably should
be rewritten rather than decompiled.&lt;/p&gt;
&lt;p&gt;Here's a concrete example from HamCalc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;700&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;A&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;B&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;P:&lt;/span&gt;&lt;span class="vg"&gt;X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;0&lt;/span&gt;
&lt;span class="nl"&gt;730&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;FOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;STEP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;B&lt;/span&gt;
&lt;span class="nl"&gt;750&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;IF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kr"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vg"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="kr"&gt;THEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;X&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="il"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;PN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;N:&lt;/span&gt;&lt;span class="vg"&gt;T&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vg"&gt;T&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;N:&lt;/span&gt;&lt;span class="kr"&gt;GOTO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;730&lt;/span&gt;
&lt;span class="nl"&gt;760&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;A&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="vg"&gt;B&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="il"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;770&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;NEXT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="vg"&gt;N&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The point is to find prime factors of P, building the array PN with
the X factors.&lt;/p&gt;
&lt;p&gt;Note that line 750 executes a GOTO back to the FOR statement. What --
precisely -- does this mean? And how can be be automagically
decompiled into a specification suitable for compilation into another
language?&lt;/p&gt;
&lt;p&gt;This, it turns out, is also an example of a place where HamCalc is
not a repository of profoundly useful programming.
See &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Integer_factorization"&gt;http://en.wikipedia.org/wiki/Integer_factorization&lt;/a&gt; for more
sophisticated algorithms.&lt;/p&gt;
&lt;p class="rubric" id="knowledge-capture"&gt;Knowledge Capture&lt;/p&gt;
&lt;p&gt;It appears that knowledge capture requires thinking.
There's no automatic translation among programming languages, data
structures or programming paradigms.
The only viable translation method is manual conversion:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Understand the source program.&lt;/li&gt;
&lt;li&gt;Create unit test cases.&lt;/li&gt;
&lt;li&gt;Develop a new program that passes the unit test cases.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: Some Patterns</title><link href="https://slott56.github.io/2013_05_21-legacy_code_preservation_some_patterns.html" rel="alternate"></link><published>2013-05-21T08:00:00-04:00</published><updated>2013-05-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-21:/2013_05_21-legacy_code_preservation_some_patterns.html</id><summary type="html">&lt;div class="section docutils container" id="some-patterns"&gt;
&lt;p&gt;After looking at this suite of examples, we can see some patterns
emerging. There seem to be several operating principles.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;The Data Matters&lt;/strong&gt;. In many cases, the data is the only thing
that actually matters. The legacy application knowledge may be
obsolete, or so riddled with quirks as to be …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="some-patterns"&gt;
&lt;p&gt;After looking at this suite of examples, we can see some patterns
emerging. There seem to be several operating principles.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;The Data Matters&lt;/strong&gt;. In many cases, the data is the only thing
that actually matters. The legacy application knowledge may be
obsolete, or so riddled with quirks as to be useless. The legacy
knowledge may involve so much technical detail---no user
story---that it's irrelevant when a newer, better technology is
used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Stories Matter; Legacy Technology Doesn't Matter&lt;/strong&gt;. It is
essential to distinguish the legacy technology from the meaningful
user stories. Once the two are teased apart, the technology can be
replaced and the user stories preserved. A cool DSL may be
helpful, and needs to be preserved, or may be a distraction from
the real solution to the real problem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understanding the New Technology Is Central&lt;/strong&gt;. Misusing the new
technology simply creates another horrifying legacy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing is Essential&lt;/strong&gt;. Legacy code cannot be preserved without
test cases. Any effort that doesn't include automated comparisons
between legacy and converted is just new development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Discarding is Acceptable&lt;/strong&gt;. Unless the legacy code has a
seriously brilliant and unique algorithm, most business
applications are largely disposable. It may be less expensive to
simply do new development using the legacy code as a kind of
overly-detailed specification. Calling it &amp;quot;conversion&amp;quot; to make
managers feel good about &amp;quot;preserving&amp;quot; an &amp;quot;asset&amp;quot; is acceptable.
The project is the same as new development, only the words change
to protect the egos of those not really involved.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quirks are Painful&lt;/strong&gt;. They might be bugs or they might be
features. It will be difficult to tell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How do these principles match against our various case study
projects?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What's the Story?&lt;/strong&gt; The applications were technical, and could
be discarded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Are There Quirks?&lt;/strong&gt; Without a test case, we could not be sure of
our conversion. So we accepted the quirks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What's the Cost?&lt;/strong&gt; The application was technical, and could be
discarded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paving the Cowpaths.&lt;/strong&gt; New Technology was misused, the result
was a disaster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Warehouse and Legacy Operations.&lt;/strong&gt; The legacy software
encoding knowledge can be split haphazardly into database and
application software buckets. The user stories matter. The
technology doesn't matter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Bugs are the Features.&lt;/strong&gt; The user stories matter. If you
can't articulate them, you're going to struggle doing your
conversion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Preserve An Abomination?&lt;/strong&gt; When the code is shabby and has
bugs, you have to sort out the quirks that will be carried forward
and the junk that will be discarded.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How Do We Manage This?&lt;/strong&gt; The user stories matter. The data
matters. Focus on these two can help prioritize.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Preserve the DSL?&lt;/strong&gt; The user stories and test cases lead to
a successful outcome. While the customer may feel like a
conversion was being performed, it was really new development
using legacy code as a specification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With modern languages and tools, legacy code conversion is quite
simple. The impediments are simply managerial in nature. No one wants
to have a carefully maintained piece of software declared a liability
and discarded. Everyone wants to think of it as an asset that will be
carefully preserved.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="there-is-another-pattern-that-i-have-first-hand-ex"&gt;
&lt;h2&gt;There is another pattern that I have first hand ex...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-05-21 19:03:46.862000-04:00&lt;/p&gt;
&lt;p&gt;There is another pattern that I have first hand experience with. Covert
only part of the legacy system and have the legacy and the new system
with new features update each other in real time. Oh and btw, the old
and new system are not fully compatible w/ each other.
Techniques like database views and instead of triggers are used to fake
out the old or new system as needed.
And yes, I used the words &amp;quot;fake out&amp;quot; on purpose.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="test-driven reverse engineering"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: Why Preserve the DSL?</title><link href="https://slott56.github.io/2013_05_16-legacy_code_preservation_why_preserve_the_dsl.html" rel="alternate"></link><published>2013-05-16T08:00:00-04:00</published><updated>2013-05-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-16:/2013_05_16-legacy_code_preservation_why_preserve_the_dsl.html</id><summary type="html">&lt;div class="section docutils container" id="why-preserve-the-dsl"&gt;
&lt;p&gt;A Domain-Specific Language (DSL) can provide some intellectual
leverage. We can always write long and convoluted programs in a
general-purpose programming language (like Python, Java or C).&lt;/p&gt;
&lt;p&gt;Sometimes it can make more sense to invent a new domain-specific
language and implement the solution in that language.&lt;/p&gt;
&lt;p&gt;Sometimes, even well-written, highly …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="why-preserve-the-dsl"&gt;
&lt;p&gt;A Domain-Specific Language (DSL) can provide some intellectual
leverage. We can always write long and convoluted programs in a
general-purpose programming language (like Python, Java or C).&lt;/p&gt;
&lt;p&gt;Sometimes it can make more sense to invent a new domain-specific
language and implement the solution in that language.&lt;/p&gt;
&lt;p&gt;Sometimes, even well-written, highly portable programming becomes a
legacy. I once converted a large, well-written program from C to
Java. The organization had no skills in C and didn't want to build
these skills.&lt;/p&gt;
&lt;p&gt;They wanted their legacy C program rewritten into Java and then
extended to cover some additional features.&lt;/p&gt;
&lt;p&gt;The timeframe for this exercise is the sometime after 2010. This is
important because automated unit test and test driven development are
common knowledge. We're not fighting an uphill battle just to figure
out how to compare legacy with new.&lt;/p&gt;
&lt;p&gt;In essence, we're going to be doing &amp;quot;Test Driven Reverse
Engineering.&amp;quot; Creating test cases, seeing what the legacy software
does and then creating new software that does the same thing.&lt;/p&gt;
&lt;p&gt;We're preserving exactly those features which we can encode as unit
test cases.&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric"&gt;The Code Base&lt;/p&gt;
&lt;p&gt;In this case, there was an interesting wrinkle in the code base.
The application included a small Domain-Specific Language (DSL)
that was used to define processing rules.&lt;/p&gt;
&lt;p&gt;There were only a dozen or so rules. The idea was the various
combinations of features could be included or excluded via this
little DSL. The application included a simple parser that
validated the DSL and configured the rest of the application to do
the actual work.&lt;/p&gt;
&lt;p&gt;The DSL itself is of no value. No one in the user organization
knew it was there. The file hadn't been touched in years. It was
just a configuration that could have been meaningfully built as
source code in C.&lt;/p&gt;
&lt;p&gt;The dozen or so rules are extremely important. But the syntax of
the DSL was disposable.&lt;/p&gt;
&lt;p&gt;It was relatively simple to create class definitions that -- in a
limited way -- mirrored the DSL. The configuration could then be
translated into first-class Java.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;com.whatever.app.config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;com.whatever.app.defs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Configuration&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;theRules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;theRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Simple_Rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this_condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SomeOption&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AnotherOption&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;theRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Simple_Rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;that_condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SomeOption&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;theRules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Exception_Rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;some_exception&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things that had been keywords in the old DSL became objects or
classes full of static declarations that could be used like
objects.&lt;/p&gt;
&lt;p&gt;By making the configuration a separate module, and using a
property file to name that module, alternate configurations could
be created. As Java code in Java Syntax, validated by the Java
compiler.&lt;/p&gt;
&lt;p class="rubric" id="the-unit-tests"&gt;The Unit Tests&lt;/p&gt;
&lt;p&gt;The bulk of the code was reasonably clear C programming.
Reasonably. Not completely.&lt;/p&gt;
&lt;p&gt;However, I still insisted on a pair of examples of each of the
different transactions this program performed. These mostly
paralleled the DSL configuration.&lt;/p&gt;
&lt;p&gt;Having this suite of test cases made it easy to confirm that the
essential features really had been preserved.&lt;/p&gt;
&lt;p&gt;The user acceptance testing, however, revealed some failures that
were not part of the unit test suite. Since TDD was new to this
customer, there was some fumbling while they created new examples
that I could turn into proper unit test cases.&lt;/p&gt;
&lt;p&gt;The next round of acceptance testing revealed another few cases
not covered by the examples they had supplied. By now, the users
were in on the joke, and immediately supplied examples. And they
also revised a existing examples to correct an error in their test
cases.&lt;/p&gt;
&lt;p class="rubric" id="what-was-preserved"&gt;What Was Preserved&lt;/p&gt;
&lt;p&gt;Of the original C software, very little actually remained. The
broad outline of processing was all.&lt;/p&gt;
&lt;p&gt;The tiny details were defined by the DSL. This was entirely
rewritten to be proper Java classes.&lt;/p&gt;
&lt;p&gt;The C data structures where entirely replaced by Java classes.
All of the original SQL database access was replaced with an ORM
layer.&lt;/p&gt;
&lt;p&gt;Further, all of the testing was done with an entirely fresh set of
unit tests.&lt;/p&gt;
&lt;p&gt;The project was -- actually -- new development. There was no
&amp;quot;conversion&amp;quot; going on. The customer felt good about doing a
conversion and &amp;quot;preserving&amp;quot; an &amp;quot;asset&amp;quot;. However, nothing much was
actually preserved.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: How Do We Manage This?</title><link href="https://slott56.github.io/2013_05_14-legacy_code_preservation_how_do_we_manage_this.html" rel="alternate"></link><published>2013-05-14T08:00:00-04:00</published><updated>2013-05-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-14:/2013_05_14-legacy_code_preservation_how_do_we_manage_this.html</id><summary type="html">&lt;div class="section docutils container" id="how-do-we-manage-this"&gt;
&lt;p&gt;At an insurance company, I encountered an application that had been
in place for thirty years.&lt;/p&gt;
&lt;p&gt;Classic flat-file, mainframe COBOL. And decades old.
It had never been replaced with a packaged solution. It had never
been converted to a SQL database. It had never been rewritten in VB
to run …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="how-do-we-manage-this"&gt;
&lt;p&gt;At an insurance company, I encountered an application that had been
in place for thirty years.&lt;/p&gt;
&lt;p&gt;Classic flat-file, mainframe COBOL. And decades old.
It had never been replaced with a packaged solution. It had never
been converted to a SQL database. It had never been rewritten in VB
to run on a desktop.&lt;/p&gt;
&lt;p&gt;What had happened is that it had grown and morphed organically.
Pieces the original application it had been subsumed by other
applications. Additional functionality had been grafted on.&lt;/p&gt;
&lt;p&gt;After a few decades of staff turnover, no single person could
summarize what the applications did. There was no executive overview.&lt;/p&gt;
&lt;p&gt;No pithy summary. No elevator pitch.&lt;/p&gt;
&lt;p&gt;The company had, further, spent money to have consultants &amp;quot;reverse
engineer&amp;quot; the COBOL. This meant that the consultants created
narrative English-language versions of the COBOL code.&lt;/p&gt;
&lt;p&gt;This reverse engineering replaced detailed, disorganized COBOL with
detailed, disorganized English. No summaries were produced that could
serve as an explanation of the actual valuable parts of the program.
The question of scope and duration was daunting. The conversion would
take years to complete. the central question become &amp;quot;How to manage
the conversion?&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric" id="the-goal"&gt;The Goal&lt;/p&gt;
&lt;p&gt;The goal was to preserve the valuable features while migrating the
data out of flat files into a proper SQL database. The focus on
the data was important.&lt;/p&gt;
&lt;p&gt;The technical obstacle was the hellish complexity of the
applications and their various shell scripts (&amp;quot;JCL&amp;quot; in the Z/OS
mainframe world.)&lt;/p&gt;
&lt;p&gt;One approach to overcoming the complexity is to break the overall
collection of applications down into just those applications that
write to any of the central &amp;quot;master&amp;quot; files. Other applications
that read master files or do other processing are less important
than those which update the master files.&lt;/p&gt;
&lt;p&gt;The master files themselves are easy to identify. The JCL that
references these files is easy to identify.&lt;/p&gt;
&lt;p&gt;The programs run by those JCL scripts give us clusters of related
functionality.&lt;/p&gt;
&lt;p&gt;We want to rank the master files by business value. The one with
the most valuable data is something we tackle first. The least
valuable data we leave for last.&lt;/p&gt;
&lt;p&gt;In some cases, we'll identify programs that work with relatively
low-value data; programs which are not actually assets. They don't
encode any new, useful knowledge. A wise manager can elect to
remove them from the software inventory rather than convert them.&lt;/p&gt;
&lt;p&gt;Since the conversion can't happen overnight, there needs to be a
period of coexistence between the first conversion and the last.
And this coexistence means that database tables will get extracted
back to flat files so that legacy programs can continue to
operate.&lt;/p&gt;
&lt;p&gt;Another component of the plan for this conversion was the assembly
of test cases. This is critical when refactoring code.
The idea here is to preserve selected files and run them through
the application software to create repeatable test cases. One of
the existing file-compare utilities can be used to validate the
output.&lt;/p&gt;
&lt;p class="rubric" id="other-barriers"&gt;Other Barriers&lt;/p&gt;
&lt;p&gt;The human obstacle was triumphant here. People who had worked with
this software for their entire career in IT would rather quit than
help with the conversion.&lt;/p&gt;
&lt;p&gt;Experienced mainframe people could not see how a &amp;quot;little&amp;quot; Linux
processor could ever provide the amazing feature set and
performance of their beloved mainframe. They made the case that
CICS was higher performance and more scalable than any web-based
application platform.&lt;/p&gt;
&lt;p&gt;And that lead to an impasse where one camp refused to consider any
migration except to COBOL and CICS. The other camp simply wanted
to write a web application and be done with it.&lt;/p&gt;
&lt;p&gt;The COBOL/CICS group were either confused on in denial of how
quick and simple to can be to build default web applications
around stable data models. In this case, the relational database
version of the flat files would not be difficult to concoct. Once
built, 80% of the application programming would be default
add-change-delete transactions. The other 20% would be
transactions that included the remnants of useful knowledge
encoded in the legacy COBOL.&lt;/p&gt;
&lt;p&gt;More time would be spent &amp;quot;studying the alternatives&amp;quot; than were
required to build working prototypes.&lt;/p&gt;
&lt;p class="rubric" id="preservation"&gt;Preservation&lt;/p&gt;
&lt;p&gt;The real question is one of what needs to be preserved.
Clearly, the data is central to the business.&lt;/p&gt;
&lt;p&gt;The larger question, then, is how much of the COBOL processing was
really essential processing?&lt;/p&gt;
&lt;p&gt;How much of the COBOL was technical workaround to implement things
that are one-liners in SQL?&lt;/p&gt;
&lt;p&gt;How much of the COBOL is workaround for other bugs in other
applications? How many programs fix broken interface files? How
many programs provide data quality inspections?&lt;/p&gt;
&lt;p&gt;How much of the COBOL is actually unique? A substantial fraction
of the legacy code was irrelevant because a package replaced it.
Another substantial fraction implemented a &amp;quot;Customer Relationship
Management&amp;quot; (CRM) application for which a package might have been
a better choice than a software conversion.&lt;/p&gt;
&lt;p&gt;How much of the legacy code contain quirks? How much code would we
would have to understand and consider repairing because it
actually contains a long-standing bug?&lt;/p&gt;
&lt;p&gt;Perhaps the &lt;strong&gt;only&lt;/strong&gt; thing of value was the data.&lt;/p&gt;
&lt;p&gt;And perhaps the reason for the human obstacle was an realization
that the cost to convert exceeded the value being preserved. It's
difficult to have your life's work simply discarded.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: Why Preserve An Abomination?</title><link href="https://slott56.github.io/2013_05_09-legacy_code_preservation_why_preserve_an_abomination.html" rel="alternate"></link><published>2013-05-09T08:00:00-04:00</published><updated>2013-05-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-09:/2013_05_09-legacy_code_preservation_why_preserve_an_abomination.html</id><summary type="html">&lt;div class="section docutils container" id="why-preserve-an-abomination"&gt;
&lt;p&gt;By the early aughts (2001-2005) Visual Basic had gone from state of
the art to a legacy application language. Code written in VB was
being replaced with something more modern (generally Java.)&lt;/p&gt;
&lt;p&gt;Having worked with COBOL and Fortran legacy programs, it's easy to
describe this legacy VB code as an …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="why-preserve-an-abomination"&gt;
&lt;p&gt;By the early aughts (2001-2005) Visual Basic had gone from state of
the art to a legacy application language. Code written in VB was
being replaced with something more modern (generally Java.)&lt;/p&gt;
&lt;p&gt;Having worked with COBOL and Fortran legacy programs, it's easy to
describe this legacy VB code as an abomination. Several customers.
Several applications. Not a simple size of one. Abomination.&lt;/p&gt;
&lt;p&gt;The VB programming I've been involved in preserving has been
uniformly shabby. It seems reflect an IT department that threw warm
bodies at a problem until it appeared solved and did nothing more. No
code reviews. No cleanup. Just random acts of maintenance.&lt;/p&gt;
&lt;p&gt;I'm sure there's are many good VB programmers. But I haven't seen
their work product yet.&lt;/p&gt;
&lt;p&gt;And now, a customer is paying consultants like me to clean up their
shabby VB and replace it with Java. Or a web site. Or both.&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric" id="a-code-base"&gt;A Code Base&lt;/p&gt;
&lt;p&gt;One particular example of abominable VB was a hodgepodge of
copy-and-paste programming, GOTO's and other poorly-used features.
The application printed insurance-like summaries of benefits. In
order to do this, it extracted a great deal of data from a
database. It relied on a collection of stored procedures and an
intimate connection with a massive &amp;quot;calculation&amp;quot; module that
derived the actual benefits, which the VB application summarized
and reported.&lt;/p&gt;
&lt;p&gt;The new application architecture was designed to separate the
database from the calculations. The printing of letters to
summarize benefits would be yet another separate part of a web
site.&lt;/p&gt;
&lt;p&gt;Instead of being done on one specific model of dot-matrix printer,
the letter would be generated as a PDF that could be displayed or
downloaded or printed. Pretty conventional stuff by modern
standards. A huge revision considering the legacy programming.
The intimate connections between the database, the calculation
module and the letter-writing module would have to be narrowed
considerably. A formal list of specific pieces of information
would have to replace the no-holds-barred access in the VB modules
and database.&lt;/p&gt;
&lt;p class="rubric" id="preservation"&gt;Preservation&lt;/p&gt;
&lt;p&gt;Essentially, the VB code that produced the letters encoded some
business knowledge.&lt;/p&gt;
&lt;p&gt;Much of knowledge was encoded in the calculation module, also.
This needed to be refactored so that the business knowledge was
focused on the calculation module.&lt;/p&gt;
&lt;p&gt;The letter writing had to be stripped down to something that
worked like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Query some initial stuff from the database.&lt;/li&gt;
&lt;li&gt;Determine which letter template to use.&lt;/li&gt;
&lt;li&gt;Query the rest of the stuff from the database based on the specific situation and template letter.&lt;/li&gt;
&lt;li&gt;Fill in the blanks in the template. Generate the PDF.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The legacy VB code, of course, had to be studied carefully to
locate all of the business process and all of the data sources.
And all of the quirks had to be explained. In this case, there are
unfixed bugs that had to be preserved in order to say the new
output matched the old output. In a few cases, we had to report
that the old application was clearly wrong and actually fix the
bugs. Interestingly, there was no arguing about this. The bugs we
found were all pretty well-known bugs.&lt;/p&gt;
&lt;p&gt;An &amp;quot;Interface&amp;quot; module was defined. All of the processing from the
VB letter-writing programs was pushed into the interface. The
letter-writing was refactored down to template fill-ins.&lt;/p&gt;
&lt;p&gt;The interface became the subject of some architectural debate. It
was the essential encoded knowledge from the original VB programs.
Is it part of letter-writing? Or is it really part of the core
calculation module?&lt;/p&gt;
&lt;p&gt;Eventually, it was pushed into the calculation module and the
&amp;quot;interface&amp;quot; could be removed, leaving a very clean interface
between letter-writing and calculation.&lt;/p&gt;
&lt;p&gt;I suspect (but I don't know) that the Java calculation module was
quite the mishmash of stuff extracted from numerous VB programs.
Hopefully, those programmers had proper unit test cases and could
refactor the calculation module to get it into some sensible,
maintainable form.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: The Bugs Are The Features</title><link href="https://slott56.github.io/2013_05_07-legacy_code_preservation_the_bugs_are_the_features.html" rel="alternate"></link><published>2013-05-07T08:00:00-04:00</published><updated>2013-05-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-07:/2013_05_07-legacy_code_preservation_the_bugs_are_the_features.html</id><summary type="html">&lt;p&gt;The extreme end of &amp;quot;paving the cowpaths&amp;quot; are people for whom the bug
list is also the feature list.&lt;/p&gt;
&lt;p&gt;This is a very strange phenomenon, rarely seen, but still relevant to
this review.&lt;/p&gt;
&lt;p&gt;In this particular case, the legacy application was some kind of
publishing tool. It used MS-Word documents …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The extreme end of &amp;quot;paving the cowpaths&amp;quot; are people for whom the bug
list is also the feature list.&lt;/p&gt;
&lt;p&gt;This is a very strange phenomenon, rarely seen, but still relevant to
this review.&lt;/p&gt;
&lt;p&gt;In this particular case, the legacy application was some kind of
publishing tool. It used MS-Word documents with appropriate style
tags, and built documents in HTML and PDF formats from the MS-Word
document. Badly.&lt;/p&gt;
&lt;p&gt;To begin with, problems with MS-Word's style tags are very difficult
to diagnose. Fail to put the proper style tag around a word or phrase
and your MS-Word source file looks great, but it doesn't produce the
right HTML or PDF.&lt;/p&gt;
&lt;p&gt;More importantly, the PDF files that got created were somewhat
broken, having bugs with embedded fonts and weirdness with
downloading, saving locally and printing.&lt;/p&gt;
&lt;p&gt;And--of course--the vendor was long out of business.&lt;/p&gt;
&lt;p&gt;What to do?&lt;/p&gt;
&lt;p class="rubric" id="feature-review"&gt;Feature Review&lt;/p&gt;
&lt;p&gt;In order to replace this broken publishing app, we need to
identify what features are essential in the HTML and PDF output.
This shouldn't be rocket science.&lt;/p&gt;
&lt;p&gt;For instance, there may be inter-document links that should be
magically revised when a document moves to a new URL. Or, there
must be embedded spreadsheets. Or there have to be fill-in forms
that can be printed.&lt;/p&gt;
&lt;p&gt;The editor who worked with this tool could not---even after
repeated requests---provide a list of features.&lt;/p&gt;
&lt;p&gt;Could not or would not, it didn't matter.&lt;/p&gt;
&lt;p&gt;Instead, they had a list of 20 or so specific bugs that needed to
be fixed.&lt;/p&gt;
&lt;p&gt;When we tried to talk about locating a &lt;strong&gt;better&lt;/strong&gt; publishing
package, all the editor could bring to the table was this list of
bugs.&lt;/p&gt;
&lt;p&gt;For example: &amp;quot;The downloaded document has to have the proper flags
set so that it uses local fonts.&amp;quot;&lt;/p&gt;
&lt;p&gt;We suggested that perhaps this should include &amp;quot;Or it has all the
fonts embedded correctly?&amp;quot;&lt;/p&gt;
&lt;p&gt;We were told---firmly---&amp;quot;No. The local fonts must be used or the
document can't be saved and won't print.&amp;quot;&lt;/p&gt;
&lt;p&gt;Trying to explain that this font bugs doesn't even exist in other
packages that create proper PDF's went nowhere. There was a
steadfast refusal to understand that the bugs were not timeless
features of PDF creation. They were bugs.&lt;/p&gt;
&lt;p&gt;Several meetings got sidelined with the Bug List Review.&lt;/p&gt;
&lt;p&gt;Eventually, the editor had to be reassigned to something less
relevant and visible. A more rational editor was put into the
position to work with a technology team to bring in a new package
and convert the legacy documents.&lt;/p&gt;
&lt;p class="rubric" id="the-confusion"&gt;The Confusion&lt;/p&gt;
&lt;p&gt;It's not easy to see where the confusion between feature and bug
comes from.&lt;/p&gt;
&lt;p&gt;Why did the desirable feature set become a murky unknown? An
editor should be able to locate the list of styles actually used
and what those styles did in the resulting documents.
The confusion and bizarre behavior could possibly stem from the
stress or terror.&lt;/p&gt;
&lt;p&gt;Perhaps learning a new package was too stressful.
Perhaps idea of converting several dozen complex documents from
MS-Word to some other markup was terrifying. So terrifying that
roadblocks needed to be put in place to prevent meaningful
discussion of the conversion effort.&lt;/p&gt;
&lt;p&gt;Where was the business knowledge encoded? What needed to be
preserved?&lt;/p&gt;
&lt;p&gt;Not the software. It was junk.&lt;/p&gt;
&lt;p&gt;There was business knowledge represented in the documents in the
obvious way. But there was also some business knowledge encoded in
the markup that established links and references, emphasis,
spreadsheets, forms or whatever other features were being used.&lt;/p&gt;
&lt;p&gt;Any semantic markup encodes additional knowledge above and beyond
the words being marked up. The semantic markup was what needed to
be preserved during the conversion. Maybe this was the source of
the terror and confusion.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: Data Warehouse and Legacy Operations</title><link href="https://slott56.github.io/2013_05_02-legacy_code_preservation_data_warehouse_and_legacy_operations.html" rel="alternate"></link><published>2013-05-02T08:00:00-04:00</published><updated>2013-05-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-05-02:/2013_05_02-legacy_code_preservation_data_warehouse_and_legacy_operations.html</id><summary type="html">&lt;p&gt;A data warehouse preserves data.&lt;/p&gt;
&lt;p&gt;It can be argued that a data warehouse preserves &lt;strong&gt;only&lt;/strong&gt; data. This,
however, is false.&lt;/p&gt;
&lt;p&gt;To an extent, a data warehouse must also preserve processing details.&lt;/p&gt;
&lt;p&gt;Indeed, a data warehouse exemplifies knowledge capture because the
data and its processing steps are both captured.&lt;/p&gt;
&lt;p&gt;The ETL …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A data warehouse preserves data.&lt;/p&gt;
&lt;p&gt;It can be argued that a data warehouse preserves &lt;strong&gt;only&lt;/strong&gt; data. This,
however, is false.&lt;/p&gt;
&lt;p&gt;To an extent, a data warehouse must also preserve processing details.&lt;/p&gt;
&lt;p&gt;Indeed, a data warehouse exemplifies knowledge capture because the
data and its processing steps are both captured.&lt;/p&gt;
&lt;p&gt;The ETL process that prepares data for loading into the warehouse is
tied to specific source applications that provide data in a known
form and a known processing state. A warehouse isn't populated with
random data. It's populated with data that is at a known, consistent
state.&lt;/p&gt;
&lt;p&gt;For example, when loading financial data, the various accounting
applications (like the General Ledger) must be updated with precisely
the same data that's captured for data warehouse processing. Failure
to assure consistency between ledger and warehouse makes it difficult
to believe that the warehouse data is correct.&lt;/p&gt;
&lt;p class="rubric" id="preserving-details"&gt;Preserving Details&lt;/p&gt;
&lt;p&gt;In some cases, legacy applications have a tangled architecture.
Code can be repeated because of copy-and-paste programming. This
can make it difficult to be sure that a data warehouse properly
captures data in a consistent state.&lt;/p&gt;
&lt;p&gt;What's distressingly common is to have a &amp;quot;code&amp;quot; or &amp;quot;status&amp;quot; field
where the first or last position has been co-opted to have
additional meanings. A &amp;quot;9&amp;quot; in the last position of a product
number may be a flag for special processing.&lt;/p&gt;
&lt;p&gt;These cryptic flags and indicators are difficult to identify in
the first place. They are often scattered throughout the
application code base. Sometimes they reflect work-arounds to
handle highly-specialized situations. Other times, they're
pervasive changes that were done via cryptic flags rather than
make a first-class change to a file format.&lt;/p&gt;
&lt;p&gt;When populating a warehouse, these codes and flags and secret
processing handshakes need to be found and properly normalized.
This may mean that an ETL program will recapitulate different
pieces of special-case logic that's scattered around a number of
legacy programs.&lt;/p&gt;
&lt;p&gt;This is the essence of knowledge capture.&lt;/p&gt;
&lt;p&gt;It also drives up the cost and expense of maintaining the ETL
pipeline that feeds the data warehouse.&lt;/p&gt;
&lt;p&gt;After all, the source application can make processing changes that
aren't properly reflected in the ETL processing pipeline.&lt;/p&gt;
&lt;p&gt;As if this isn't bad enough, many organization permit technology
that makes processing even more obscure.&lt;/p&gt;
&lt;p class="rubric" id="the-evils-of-stored-procedures"&gt;The Evils of Stored Procedures&lt;/p&gt;
&lt;p&gt;In far too many cases, software architectures place code into two
locations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Application programs.&lt;/li&gt;
&lt;li&gt;Data bases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Putting code into a database is simply a mistake. There's no
rational justification. None.&lt;/p&gt;
&lt;p&gt;The irrational justifications include the following farcical
claims.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Stored Procedures are faster.&lt;/p&gt;
&lt;p&gt;Not really. There's no reason why they should be faster, and
simple benchmark measurements show that application programs
outside the database will be as fast or faster than stored
procedures. A process running &lt;strong&gt;outside&lt;/strong&gt; the database doesn't
compete for database resources the same way the stored
procedure engine does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Some processing is essential to data integrity.&lt;/p&gt;
&lt;p&gt;This is absurd, since it presumes that the folks writing stored
procedures are trustworthy and folks writing non-stored
procedure applications are a lying bunch of thieving scoundrels
who will break the data integrity rules if given half the
chance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's look at this second justification.
The argument has two variants.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Some logic is so essential to interpreting the contents of
the database that it cannot meaningfully be packaged any
other way.&lt;/p&gt;
&lt;p&gt;This makes the claim that all sharable programming technology
(Java packages, Python modules, etc.) simply don't work, and
the database is the only effective way to share code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Some logic is so essential to correct status of the
database, that no application developer can be trusted to
touch it.&lt;/p&gt;
&lt;p&gt;This presumes that application developers are willing to cut
corners and break rules and force bad data into an otherwise
pristine database. Data integrity problems come from those
&amp;quot;other&amp;quot; developers. The DBA's can't trust anyone except the
stored procedure author.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When confronted with other ways to share logic, the stored
procedure folks fall back on &amp;quot;faster&amp;quot; or possibly the &amp;quot;Us vs.
Them&amp;quot; nature of the second variant.&lt;/p&gt;
&lt;p class="rubric" id="stored-procedure-consequences"&gt;Stored Procedure Consequences&lt;/p&gt;
&lt;p&gt;Stored procedures really are code. They should not be separated
from the rest of the code base.&lt;/p&gt;
&lt;p&gt;Stored procedures are maintained with different tools and through
different organizations and processes. This leads to conflict and
confusion.&lt;/p&gt;
&lt;p&gt;It can also lead to weird secrecy.&lt;/p&gt;
&lt;p&gt;A stored procedure can be difficult to extract from the database.
It may require privileges and help from DBA's to locate the
unencrypted original source text.&lt;/p&gt;
&lt;p&gt;In a huge organization, it can take weeks to track down the right
DBA to reveal the content of the stored procedure.&lt;/p&gt;
&lt;p&gt;Why the secrecy?&lt;/p&gt;
&lt;p&gt;Once exposed, of course, the stored procedure can then be
rewritten as proper code, eliminating the stored procedure.
The proper question to ask is &amp;quot;Why is critical business knowledge
encoded in so many different places?&amp;quot; Why not just application
code? Why also try to encode some knowledge in database stored
procedures? How does this bifurcation help make the origination
more efficient?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-a-related-article-on-the-subject-check-out-ho"&gt;
&lt;h2&gt;For a related article on the subject, check out Ho...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-05-04 08:58:23.063000-04:00&lt;/p&gt;
&lt;p&gt;For a related article on the subject, check out How To Survive a
Ground-Up Rewrite Without Losing Your Sanity - aka: Screw you Joel
Spolsky, We're Rewriting It From Scratch!
&lt;a class="reference external" href="http://onstartups.com/tabid/3339/bid/97052/How-To-Survive-a-Ground-Up-Rewrite-Without-Losing-Your-Sanity.aspx"&gt;http://onstartups.com/tabid/3339/bid/97052/How-To-Survive-a-Ground-Up-Rewrite-Without-Losing-Your-Sanity.aspx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: Paving the Cowpaths</title><link href="https://slott56.github.io/2013_04_30-legacy_code_preservation_paving_the_cowpaths.html" rel="alternate"></link><published>2013-04-30T08:00:00-04:00</published><updated>2013-04-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-04-30:/2013_04_30-legacy_code_preservation_paving_the_cowpaths.html</id><summary type="html">&lt;div class="section docutils container" id="paving-the-cowpaths"&gt;
&lt;p&gt;No discussion of legacy preservation is complete without some &amp;quot;Paving
the Cowpaths&amp;quot; stories.&lt;/p&gt;
&lt;p&gt;The phrase refers to the way cows tend to meander across the
landscape in a remarkably consistent way. The cows reliably follow a
consistent path. The paths tend to wander in ways that seem crazy to
us …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="paving-the-cowpaths"&gt;
&lt;p&gt;No discussion of legacy preservation is complete without some &amp;quot;Paving
the Cowpaths&amp;quot; stories.&lt;/p&gt;
&lt;p&gt;The phrase refers to the way cows tend to meander across the
landscape in a remarkably consistent way. The cows reliably follow a
consistent path. The paths tend to wander in ways that seem crazy to
us.&lt;/p&gt;
&lt;p&gt;Rather than do a survey and move some dirt to lay a straight,
efficient road, paving the cowpaths refers to simply using the legacy
path without consideration of more efficient alternatives.&lt;/p&gt;
&lt;p&gt;There are two, nearly identical paving the cowpath stories, separated
by three years. We'll only look at one in detail, since the other is
simply a copy-and-paste clone.&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric" id="the-code-base"&gt;The Code Base&lt;/p&gt;
&lt;p&gt;In both cases, the code base was not something I saw in any
detail. In one case, I saw a presentation, and I talked with the
author in depth. In the other case, I had the customer assign a
programmer to work with me.&lt;/p&gt;
&lt;p&gt;In one case they had a fabulous application system that was the
backbone of their business. It was lots and lots of VAX Fortran
code that did simply everything they needed, and did it exactly
the right way. It was highly optimized and encoded deep knowledge
about the business.&lt;/p&gt;
&lt;p&gt;[The other case wasn't so fabulous, but the outcome is the same.]
Sadly, each gem was entirely written to use flat files. It was
relatively inflexible. A new field or new relationship required
lots of tweaking of lots of programs to accommodate the revised
file layout.&lt;/p&gt;
&lt;p&gt;In 1991, the idea of SQL databases was gaining currency. Products
like Oracle, Ingres, Informix and many others battled for market
share. This particular customer had chosen Ingres as their RDBMS
and had decided to convert their essential, foundational
applications from flat file to relational database.&lt;/p&gt;
&lt;p class="rubric" id="the-failure"&gt;The Failure&lt;/p&gt;
&lt;p&gt;There was a singular, and epic failure to understand relational
database concepts.&lt;/p&gt;
&lt;p&gt;A SQL table is &lt;strong&gt;not&lt;/strong&gt; a file that's been tarted up with SQL
access methods.&lt;/p&gt;
&lt;p&gt;A foreign key, it turns out, is actually rather important. Not
something to be brushed aside as &amp;quot;too much database mumbo-jumbo.&amp;quot;
What they did was preserve &lt;strong&gt;all&lt;/strong&gt; of their legacy processing.
Including file operations. They replaced OPEN, CLOSE, READ and
WRITE with CONNECT, DISCONNECT, SELECT and UPDATE in a remarkably
unthinking way.&lt;/p&gt;
&lt;p&gt;This also means that they preserved their legacy programs that
made file copies. They rewrote a file copy as a table copy, using
SELECT and INSERT loops.&lt;/p&gt;
&lt;p&gt;Copying data from one file to another file can be a shabby way to
implement a one-to-many relationship. It becomes a one-to-one with
many copies. A file copy can be amazingly fast. A SQL table copy
can never be as fast as a file copy.&lt;/p&gt;
&lt;p&gt;They can, of course, easily compare the database results with the
old flat file results. The structures are nearly identical. This,
I think, creates a false sense of security.&lt;/p&gt;
&lt;p class="rubric" id="my-condolences"&gt;My Condolences&lt;/p&gt;
&lt;p&gt;In both cases, I was called in to help them &amp;quot;tune&amp;quot; the database to
get it to run faster.&lt;/p&gt;
&lt;p&gt;I asked about the longest-running parts of the application. I
asked about the most business-critical parts of the application.
&amp;quot;What's the most important thing that's being blocked by
unacceptable slowness?&amp;quot;&lt;/p&gt;
&lt;p&gt;It's not possible to get everything to be fast. It is, however,
possible to get important things to be fast. Other, less important
things, can be slow. That's okay.&lt;/p&gt;
&lt;p&gt;They talked me though a particularly painful part of the
application that was very important and unbelievably slow. It
cloned a table making a small change to each row.&lt;/p&gt;
&lt;p&gt;&amp;quot;Oh,&amp;quot; I suggested, &amp;quot;you could have used an UPDATE statement with
no WHERE clause to touch all rows.&amp;quot;&lt;/p&gt;
&lt;p&gt;That suggestion, it turns out, was wrong. The copying was
essential because the keys were incomplete.&lt;/p&gt;
&lt;p&gt;Then it began to dawn on me.&lt;/p&gt;
&lt;p&gt;Their legacy application did file copies because they were almost
instant. And the filename (and directory path) become part of the
key structure.&lt;/p&gt;
&lt;p&gt;They were shocked that a SQL table copy could be so amazingly
slow. Somehow, the locking and logging that create transactional
integrity wasn't visible enough.&lt;/p&gt;
&lt;p&gt;The really hard part was trying
to---gently---determine &lt;strong&gt;why&lt;/strong&gt; they thought it necessary to clone
tables.&lt;/p&gt;
&lt;p&gt;The answer surfaced slowly. They had simply treated SQL as if it
was a file access method. They had not redesigned their
applications. They did not understand how primary key, foreign key
relationships were supposed to work. They had, essentially, wasted
a fair amount of time and money doing a very, very bad thing.&lt;/p&gt;
&lt;p class="rubric" id="preservation"&gt;Preservation&lt;/p&gt;
&lt;p&gt;They preserved the relevant business features.&lt;/p&gt;
&lt;p&gt;They also preserved irrelevant technical implementation features.
They didn't understand the distinction between business process
and technical implementation details.&lt;/p&gt;
&lt;p&gt;In effect, they labored under the assumption that all code was
precious, even code that was purely technical in nature.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: What's the Cost?</title><link href="https://slott56.github.io/2013_04_25-legacy_code_preservation_whats_the_cost.html" rel="alternate"></link><published>2013-04-25T08:00:00-04:00</published><updated>2013-04-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-04-25:/2013_04_25-legacy_code_preservation_whats_the_cost.html</id><summary type="html">&lt;div class="section docutils container" id="what-s-the-cost"&gt;
&lt;p&gt;It's 1980-something. We're working on a fairly complex system that
includes some big machines and three computers. One of the computers
has a magnetic tape drive into which it writes a log of interesting
events. In the 80's, this was a pretty big deal.&lt;/p&gt;
&lt;p&gt;An operational run will produce a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="what-s-the-cost"&gt;
&lt;p&gt;It's 1980-something. We're working on a fairly complex system that
includes some big machines and three computers. One of the computers
has a magnetic tape drive into which it writes a log of interesting
events. In the 80's, this was a pretty big deal.&lt;/p&gt;
&lt;p&gt;An operational run will produce a log; then we can use customized
applications to analyze and reduce the log to something more useful
and focused. The first step is to do some data extraction to get the
relevant log entries off the tape and into a disk file that engineers
can work with.&lt;/p&gt;
&lt;p&gt;Recall that the spreadsheet has only been around for a few weeks at
this point in the history of computing. Sums and counts require
programs. In this case, they are written in Fortran.&lt;/p&gt;
&lt;p&gt;So far, so good. My job is to add yet another feature to the data
extraction program. It will pull some new different bits of data off
the logs.&lt;/p&gt;
&lt;p&gt;The log entries are, of course, fairly complex. This is not different
from log scraping in a web server context. Some log entries have to
be ignored, others have to be merged. Some have cryptic formats.&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric" id="the-code-base"&gt;The Code Base&lt;/p&gt;
&lt;p&gt;The extraction application has been in use (and heavily modified)
for a couple of years. Many programmers have touched it. Many.
The data extractor is written in a language called
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/JOVIAL"&gt;JOVIAL&lt;/a&gt;. This is not a
problem. It's the language of the large system being built. The
engineers are happy to use Fortran for their off-line analysis of
the files.&lt;/p&gt;
&lt;p&gt;There's a subtlety that arises in this mixed language environment.
Any engineer with Fortran skills can whip together an analysis
program. But only the favored few programmers know enough JOVIAL
to tweak the data extraction program. And they're all busy writing
the real software, not supporting analysis and trouble-shooting.&lt;/p&gt;
&lt;p&gt;This data extractor program suffers from a lot of &amp;quot;copy-and-paste&amp;quot;
programming. Blocks of code are repeated with minor changes.&lt;/p&gt;
&lt;p&gt;Standard modules are repeated with differences from the official
copy that the entire rest of the system uses. Block comments don't
nest, so it's hard to remove a large chunk of code which contains
a block comment.&lt;/p&gt;
&lt;p&gt;Further, it suffers from &amp;quot;&lt;strong&gt;Don't Delete Diddly&lt;/strong&gt;&amp;quot; programming.&lt;/p&gt;
&lt;p&gt;Large swaths of code are left in place, relegated to a subroutine
that never gets used. Other blocks of code are circumvented with a
GOTO statement to simply jump over the code.&lt;/p&gt;
&lt;p&gt;And, it has a complex history and provenance. In order to debug
anything on the complex target system, the logger had to be the
first thing up and running. Therefore, the logger specifically
predates all other features of the application. It doesn't involve
any rational reuse of any other piece of software.&lt;/p&gt;
&lt;p&gt;This is the 80's, so version control and forking a new version
were simply not done.&lt;/p&gt;
&lt;p&gt;My job was to make a minor revision and extract just one certain
type of log entry. Effectively a &amp;quot;filter&amp;quot; applied to the log.
After several days of reading this mess, I voted with my feet. I
wrote a brand-new, from-scratch, &amp;quot;de novo&amp;quot; program (in Fortran,
not JOVIAL) which reads the tape and produces the required log
entries.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;It was cheaper than messing with the legacy code base. Less work.
Less risk of breaking something. And less long-term cost from
continuing to maintain the data extractor.&lt;/p&gt;
&lt;p class="rubric" id="grief-and-consternation"&gt;Grief and Consternation&lt;/p&gt;
&lt;p&gt;Discarding the legacy JOVIAL analysis program was a kind of
heresy. It was a Bad Thing To Do. It &amp;quot;Raised Questions&amp;quot;.
Raised Questions? Really? About what?&lt;/p&gt;
&lt;p&gt;Did it raise questions about the sanity of managers who preserved
this beast? Or about the sanity of programmers doing
copy-and-paste programming?&lt;/p&gt;
&lt;p&gt;I had to endure a lengthy lecture on the history of the data
extraction program. As if the history somehow made a bad program
better.&lt;/p&gt;
&lt;p&gt;I had to endure begging. The legacy program should be preserved
precisely because it was a legacy. Really. It should be
&amp;quot;grandfathered in&amp;quot; somehow. Whatever that means.&lt;/p&gt;
&lt;p class="rubric" id="preservation"&gt;Preservation&lt;/p&gt;
&lt;p&gt;The original Jovial data extractor program still existed. It still
ran. It could still be used. The JOVIAL code base and tools (and
skilled programmers) remained available.&lt;/p&gt;
&lt;p&gt;No one had &lt;strong&gt;deleted&lt;/strong&gt; anything. There was no actual problem.
We had just started to realize that it was time to move on.&lt;/p&gt;
&lt;p&gt;I started with a clean, simple Fortran program that read the logs,
extracted records, and created files that engineers could work
with.&lt;/p&gt;
&lt;p&gt;But, but doing that, I guess that I had called somebody's baby
ugly.&lt;/p&gt;
&lt;p&gt;This new Fortran program preserved the &lt;strong&gt;essential&lt;/strong&gt; knowledge
from the original JOVIAL program. Indeed, I think that one of the
reasons for all the grief was that I had exposed relevant details
of the implementation, stripped clean of the historical cruft.&lt;/p&gt;
&lt;p&gt;The tape file format and the detailed information on the log file
records had gone from closed and embedded in just one program to
open and available to more than one program.&lt;/p&gt;
&lt;p&gt;The Fortran program exposed the log file details so that anyone
could write a short (and more widely readable) Fortran program.
This allowed them to avoid the cost and complexity of waiting for
someone like me to modify the JOVIAL extraction program.&lt;/p&gt;
&lt;p&gt;The file format is merely a technical detail. It's the analyses
that were of real value. And none of that was in the original
JOVIAL program. They remained as separate Fortran programs.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: Are There Quirks?</title><link href="https://slott56.github.io/2013_04_23-legacy_code_preservation_are_there_quirks.html" rel="alternate"></link><published>2013-04-23T08:00:00-04:00</published><updated>2013-04-23T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-04-23:/2013_04_23-legacy_code_preservation_are_there_quirks.html</id><summary type="html">&lt;div class="section docutils container" id="are-there-quirks"&gt;
&lt;p&gt;Let's visit some other conversion activities in the 1970's. The gig
was at a company implementing a customized insurance application. The
actuaries used a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/PDP-10"&gt;PDP-10&lt;/a&gt;
(and Fortran) to compute their various tables and summaries.&lt;/p&gt;
&lt;p&gt;I was roped into rewriting an actuarial Fortran programs into
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/PL/I"&gt;PL/1&lt;/a&gt; for an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IBM_System/370"&gt;IBM
370 …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="are-there-quirks"&gt;
&lt;p&gt;Let's visit some other conversion activities in the 1970's. The gig
was at a company implementing a customized insurance application. The
actuaries used a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/PDP-10"&gt;PDP-10&lt;/a&gt;
(and Fortran) to compute their various tables and summaries.&lt;/p&gt;
&lt;p&gt;I was roped into rewriting an actuarial Fortran programs into
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/PL/I"&gt;PL/1&lt;/a&gt; for an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IBM_System/370"&gt;IBM
370&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This program, clearly, encodes deep business knowledge. It must be
preserved very precisely, since the actuarial calculations are
directly tied to the financial expectations for the particular line
of business.&lt;/p&gt;
&lt;p&gt;The good news about Fortran to PL/1 conversion is that PL/1 offers
features (and syntax) that are similar to Fortran. It's not an exact
match, but it's close enough to make the conversion relatively
risk-free.&lt;/p&gt;
&lt;p&gt;There are, of course, issues.&lt;/p&gt;
&lt;p&gt;In particular, Fortran IV was not big on the &amp;quot;structured
if-then-else&amp;quot; features of Algol-like languages. PL/1, like Pascal,
followed on the heels of Algol 60. Fortran didn't follow Algol;
Fortran depended on GOTO statements instead of nested IF-THEN-ELSE
statements.&lt;/p&gt;
&lt;p&gt;This meant that some logic expressions were rather tangled and
difficult to fully understand. Patience and and care were required to
unwind the logic from it's tangled nest of Fortran GOTO's into neater
PL/1 BEGIN-END blocks.&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric" id="test-case"&gt;Test Case&lt;/p&gt;
&lt;p&gt;Perhaps the most important gap here was the lack of any kind of
definitive test case.&lt;/p&gt;
&lt;p&gt;It was the 70's. Testing was---at best---primitive. The languages
and tools didn't support very much in the way of automated
testing.&lt;/p&gt;
&lt;p&gt;Compounding the problem, IT management was so late in getting the
project started that we had to do repeated overnighters to get
things running. The fog of sleep deprivation doesn't facilitate
high quality software.&lt;/p&gt;
&lt;p&gt;Further compounding the problem, we don't really have access to
the PDP-10 that the actuaries use. We can't run any controlled
tests.&lt;/p&gt;
&lt;p&gt;And. Bonus.&lt;/p&gt;
&lt;p&gt;We were doing &amp;quot;test-in-production&amp;quot;. As soon as it worked, that was
the official production run. Everything prior to the one that
worked was discard as a test run.&lt;/p&gt;
&lt;p&gt;The test strategy was simply to do a side-by-side comparison with
the legacy PDP-10 output. While it's tedious to read hundreds of
pages of mainframe computer print-out, that was the job.&lt;/p&gt;
&lt;p class="rubric" id="results"&gt;Results&lt;/p&gt;
&lt;p&gt;For the first attempts, there were significant logic issues.
Regions of IF-GOTO that hadn't been properly rewritten into
IF-THEN-ELSE.&lt;/p&gt;
&lt;p&gt;At some point, the output would disagree. The PDP-10 Fortran, of
course, was deemed to be &amp;quot;right.&amp;quot;&lt;/p&gt;
&lt;p&gt;So it was a matter of discovering what was unique about the case
where there was a difference. Lots of deduction and puzzle
solving.&lt;/p&gt;
&lt;p&gt;Finally, we got down to one really subtle issue.&lt;/p&gt;
&lt;p&gt;The numbers were slightly different. Slightly.&lt;/p&gt;
&lt;p&gt;What does this slight discrepancy mean?&lt;/p&gt;
&lt;p&gt;Is it a bug? Do we have to chase down some math error? It's
unlikely to be a math error, since the expressions convert
trivially from Fortran to PL/1. And the numbers are close.&lt;/p&gt;
&lt;p&gt;Is it a feature? Is there something in Fortran or PL/1 that we
simply failed to understand? Unlikely.&lt;/p&gt;
&lt;p&gt;Everything else works.&lt;/p&gt;
&lt;p&gt;It's a &amp;quot;quirk&amp;quot;. It's not a &amp;quot;bug&amp;quot; because it's not clearly wrong.
It's not a feature, because we're not going to define it as being
clearly right. It's in this middle realm of behavior best
described as quirky.&lt;/p&gt;
&lt;p class="rubric" id="quirks"&gt;Quirks&lt;/p&gt;
&lt;p&gt;What we've uncovered, it turns out, is the difference between
Fortran floating point calculations and PL/1's fixed-point decimal
calculations. PL/1's compiler reasons out the proper number of
decimal places in the intermediate results and generates
fixed-point decimal code appropriately.&lt;/p&gt;
&lt;p&gt;Decimal hardware, BTW, was part of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IBM_System/370"&gt;IBM
370&lt;/a&gt; system.
Decimal-mode arithmetic was often faster then floating-point.
The PL/1 rules have some odd features regarding division and
multiplication. A*0.001 and A/1000 have different deduced number
of decimal places. Other than that, the rules are obvious and
mathematically sound.&lt;/p&gt;
&lt;p&gt;The PL/1 version provides exact decimal answers. Lots of decimal
places exact.&lt;/p&gt;
&lt;p&gt;The Fortran version involved approximations. All floating-point
calculation must be looked at as an approximation. Many numbers
have an exact binary representation. But numbers without an exact
binary representation will have tiny errors. The tiny errors are
magnified through calculations. Generally, subtracting two
nearly-equal floating-point values elevates the erroneous parts of
the approximation to lofty heights of visibility.&lt;/p&gt;
&lt;p class="rubric" id="preservation"&gt;Preservation&lt;/p&gt;
&lt;p&gt;It was important to preserve the essential actuarial knowledge
encoded in Fortran into PL/1.&lt;/p&gt;
&lt;p&gt;It was not as important to preserve the quirks of single-precision
floating-point math.&lt;/p&gt;
&lt;p&gt;Clearly, we have to distinguish between three separate
considerations.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Valuable Features: encoded business knowledge.&lt;/li&gt;
&lt;li&gt;Implementation Details: technology knowledge.&lt;/li&gt;
&lt;li&gt;Quirks. Aspects of the implementation that lead to low-value discrepancies in the output.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation: What's the Story?</title><link href="https://slott56.github.io/2013_04_18-legacy_code_preservation_whats_the_story.html" rel="alternate"></link><published>2013-04-18T08:00:00-04:00</published><updated>2013-04-18T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-04-18:/2013_04_18-legacy_code_preservation_whats_the_story.html</id><summary type="html">&lt;div class="section docutils container" id="what-s-the-story"&gt;
&lt;p&gt;Wind back the clock to the late 1970's. Yes, there were computers in
those days.&lt;/p&gt;
&lt;p&gt;Some of my earliest billable gigs where conversions from old OS to
new OS. (Specifically DOS/VSE to OS/370, now called Z/OS.) Back when
a company owned exactly one computer, all of the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section docutils container" id="what-s-the-story"&gt;
&lt;p&gt;Wind back the clock to the late 1970's. Yes, there were computers in
those days.&lt;/p&gt;
&lt;p&gt;Some of my earliest billable gigs where conversions from old OS to
new OS. (Specifically DOS/VSE to OS/370, now called Z/OS.) Back when
a company owned exactly one computer, all of the in-house customized
software had to be rewritten as part of the conversion.&lt;/p&gt;
&lt;p&gt;For the most part, this was part of a corporate evolution from an IBM
360-series to 370-series computer. That included revisions of the
operating system toward OS/370.&lt;/p&gt;
&lt;p&gt;A company's custom software often encoded deep knowledge of business
operations. Indeed, back in the day before desktop computers, that
software &lt;strong&gt;was&lt;/strong&gt; the business. There was no manual fallback if the
one-and-only computer didn't work. Consequently, the entire IT
department could be focused on converting the software from old
operating system to new.&lt;/p&gt;
&lt;p&gt;Every line of code was carefully preserved.&lt;/p&gt;
&lt;p&gt;Not all software encoded uniquely valuable knowledge, however.&lt;/p&gt;
&lt;/div&gt;
&lt;p class="rubric" id="flashback"&gt;Flashback&lt;/p&gt;
&lt;p&gt;In the days before relational databases, all data was in files.
File access required a program. Often a customized piece of
programming to extract or transform a file's content.&lt;/p&gt;
&lt;p&gt;In old flat-file systems, programs would do the essential
add-change-delete operation on a &amp;quot;master&amp;quot; file. In some cases
programs would operate on multiple &amp;quot;master&amp;quot; files.&lt;/p&gt;
&lt;p&gt;In this specific conversion effort, one program did a kind of join
between two files. In effect, it was something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BIG_TABLE&lt;/span&gt;
&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OTHER_TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BIG_TABLE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CODE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;OTHER_TABLE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CODE&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's interesting about this is the relative cost of access to
OTHER_TABLE.&lt;/p&gt;
&lt;p&gt;A small subset of OTHER_TABLE rows counts for most of the rows
that join with BIG_TABLE. The rest of OTHER_TABLE rows were
referenced once or a very few times in BIG_TABLE.&lt;/p&gt;
&lt;p&gt;Clearly, a cache of the highly-used rows of OTHER_TABLE has a huge
performance benefit. The question is, of course, what's the
optimal cache from OTHER_TABLE? What keys in OTHER_TABLE are most
used in BIG_TABLE?&lt;/p&gt;
&lt;p&gt;Modern databases handle this caching seamlessly, silently and
automatically. Back in the 70's, we had to tailor this cache to
optimize performance on a computer that---by modern
standards---was very small and slow.&lt;/p&gt;
&lt;p class="rubric" id="the-code-base"&gt;The Code Base&lt;/p&gt;
&lt;p&gt;In the course of the conversion, I was assigned a script (&amp;quot;JCL&amp;quot; is
what they called a shell script on Z/OS) that ran two programs and
some utility sort steps. Specifically, the sequence of programs
did the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CODE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BIG_TABLE&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CODE&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Really? Two largish programs and two utility sort steps for the
above bit of SQL?&lt;/p&gt;
&lt;p&gt;Yes. In the days before SQL, the above kind of process was a
rather complex extract from BIG_TABLE to get all the codes used.
That file could be sorted into order by the codes. The codes could
then be reduced to counts. The final reduction was then sorted
into order by popularity.&lt;/p&gt;
&lt;p&gt;This program did not encode &amp;quot;business knowledge.&amp;quot; It's purely
technical.&lt;/p&gt;
&lt;p&gt;At the time, SQL was not the kind of commodity knowledge it is
today. There was no easy way to articulate the fact that the
program was purely technical and didn't encode something
interesting. However, I eventually made the case that this pair of
programs and sorts could be replaced with something simpler (and
faster.)&lt;/p&gt;
&lt;p&gt;I wrote a program that used a data structure like a
Python defaultdict (or a Java TreeMap) and did the operation in
one swoop.&lt;/p&gt;
&lt;p&gt;Something like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;
&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;big_table&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BigTable_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;by_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;by_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;frequency&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;by_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;by_count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;frequency&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;BigTable_iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;BigTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;field0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Except, I did it in COBOL, so the code was much, much longer.&lt;/p&gt;
&lt;p class="rubric" id="preservation"&gt;Preservation&lt;/p&gt;
&lt;p&gt;This is one end of the spectrum of legacy code preservation.
What was preserved?&lt;/p&gt;
&lt;p&gt;Not business knowledge, certainly.&lt;/p&gt;
&lt;p&gt;What this example shows is that there are several kinds of
software.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unique features of the business, or company or industry.&lt;/li&gt;
&lt;li&gt;Purely technical features of the implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to examine each software conversion using a yardstick that
measures the amount of unique business knowledge encoded.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="you-are-probably-aware-but-just-in-case-you-shoul"&gt;
&lt;h2&gt;You are probably aware but just in case, you shoul...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-18 20:33:11.083000-04:00&lt;/p&gt;
&lt;p&gt;You are probably aware but just in case, you should check out python's
pandas join on 2 data frames. By using pandas, you avoid having to screw
around w/ a database and all it's associated work. Also, you avoid
having to write plumbing code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="maybe-it-wasn-39-t-clear-but-the-blog-post-descr"&gt;
&lt;h2&gt;Maybe it wasn&amp;amp;#39;t clear, but the blog post descr...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-05-04 10:33:42.680000-04:00&lt;/p&gt;
&lt;p&gt;Maybe it wasn't clear, but the blog post describes a situation that
occurred 30 years ago. Python, Pandas didn't exist. SQL databases were
an academic exercise.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>Legacy Code Preservation</title><link href="https://slott56.github.io/2013_04_16-legacy_code_preservation.html" rel="alternate"></link><published>2013-04-16T08:00:00-04:00</published><updated>2013-04-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-04-16:/2013_04_16-legacy_code_preservation.html</id><summary type="html">&lt;p&gt;This is important:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule One: Writing Software is Capturing Knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequence: Converting Software is Preserving Knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When software is revised for a new framework or operating system or
database or when an algorithm is converted to a new language, then
we're &amp;quot;converting&amp;quot; (or &amp;quot;migrating&amp;quot;) software. We're preserving code,
and preserving …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is important:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule One: Writing Software is Capturing Knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequence: Converting Software is Preserving Knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When software is revised for a new framework or operating system or
database or when an algorithm is converted to a new language, then
we're &amp;quot;converting&amp;quot; (or &amp;quot;migrating&amp;quot;) software. We're preserving code,
and preserving the knowledge encoded.&lt;/p&gt;
&lt;p&gt;For the next few months, I'm going to post some examples of preserving
legacy code and how this ties to the knowledge capture issue.&lt;/p&gt;
&lt;p&gt;Once we've looked at some examples of business software, we can turn
to something a little less concrete:
&lt;a class="reference external" href="http://www.cq-amateur-radio.com/cq_ham_calc/cq_ham_calc.html"&gt;HamCalc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These examples are presented in historical order. Each example raises
questions and outlines elements of a strategy for legacy code
preservation.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What's the Story?&lt;/strong&gt; Late 1970's. What user story was encoded in the software?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Are There Quirks?&lt;/strong&gt; Late 1970's. Is the encoded knowledge really a
useful feature? Or is it a bug? What if we can't be sure?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What's the Cost?&lt;/strong&gt; Early 1980's. What if the legacy code is complex
and expensive? How can we be sure it doesn't encode some valuable
knowledge?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paving the Cowpaths.&lt;/strong&gt; Throughout the 80's. When converting from
flat-file to database, how can we distinguish between encoded user
stories and encoded technical details? Isn't all code equally
valuable? There are several examples; I've combined them into one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Warehouse and Legacy Operations.&lt;/strong&gt; This is a digression on how
data warehouse implementation tends to preserve a great deal of
legacy functionality. Some of that legacy functionality exists in
stored procedures, a programming nightmare.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Bugs are the Features&lt;/strong&gt;. Can you do software preservation when
user doesn't seem to understand their own use cases?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Preserve An Abomination?&lt;/strong&gt; How do we preserve shabby code? How
can we separating the user stories from the quirks and bugs? There
are several instances, I've used one as an example.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How Do We Manage This?&lt;/strong&gt; The legacy code base was so old that no
one could summarize it. It had devolved to a morass of details. With
no intellectual handles, how can we talk about the process of
converting and what needs to be preserved?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Why Preserve the DSL?&lt;/strong&gt; describes a modern instance of &amp;quot;Test-Driven
Reverse Engineering&amp;quot; where the unit test cases were created from the
user stories and the legacy code use merely as supporting details. An
entirely new application was written which preserved very little of
the legacy code, but met all the user's requirements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These nine examples include some duplicates. It's really more like a
dozen individual case studies. Some are simple duplicates; the name of
the customer is changed, but little else.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="check-out-the-internet-archive-and-their-preservat"&gt;
&lt;h2&gt;Check out the internet archive and their preservat...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-18 05:29:44.870000-04:00&lt;/p&gt;
&lt;p&gt;Check out the internet archive and their preservation of software. A
good place to start is
&lt;a class="reference external" href="http://ascii.textfiles.com/archives/3947"&gt;http://ascii.textfiles.com/archives/3947&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="HamCalc"></category><category term="knowledge capture"></category></entry><entry><title>This Seems Irrational... But... HamCalc</title><link href="https://slott56.github.io/2013_04_11-this_seems_irrational_but_hamcalc.html" rel="alternate"></link><published>2013-04-11T09:54:00-04:00</published><updated>2013-04-11T09:54:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2013-04-11:/2013_04_11-this_seems_irrational_but_hamcalc.html</id><summary type="html">&lt;p&gt;Step 1.  Look at the
original &lt;a class="reference external" href="http://www.cq-amateur-radio.com/cq_ham_calc/cq_ham_calc.html"&gt;HamCalc&lt;/a&gt;.
Even if you aren't interested in Ham radio, it's an epic, evolving
achievement in a specialized kind of engineering support.  It's a
repository of mountains of mathematical models, some published by the
&lt;a class="reference external" href="http://www.arrl.org/"&gt;ARRL&lt;/a&gt;, others scattered around the internet.&lt;/p&gt;
&lt;p&gt;Step 2.  Look closely at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Step 1.  Look at the
original &lt;a class="reference external" href="http://www.cq-amateur-radio.com/cq_ham_calc/cq_ham_calc.html"&gt;HamCalc&lt;/a&gt;.
Even if you aren't interested in Ham radio, it's an epic, evolving
achievement in a specialized kind of engineering support.  It's a
repository of mountains of mathematical models, some published by the
&lt;a class="reference external" href="http://www.arrl.org/"&gt;ARRL&lt;/a&gt;, others scattered around the internet.&lt;/p&gt;
&lt;p&gt;Step 2.  Look closely at HamCalc.  It's all written in GW basic.
Really.  The more-or-less final update is from 2011 -- &lt;a class="reference external" href="http://www.southgatearc.org/news/october2011/development_of_hamcalc_to_cease.htm"&gt;it's no
longer an active
project&lt;/a&gt;
-- but it's a clever idea that suffers from a horrible constraint
imposted by the implementation language.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;long&lt;/strong&gt; time ago, I was captivated by the idea of rewriting HamCalc
as Java Applets.  It seemed like a good idea at the time, but that's a
lot of work: 449 programs, 85,000 lines of code.&lt;/p&gt;
&lt;p&gt;Recently, I wanted to make some additional use of HamCalc's amazing
collection of formulas.&lt;/p&gt;
&lt;p&gt;However.  The distribution kit is rather hard to read.  The .BAS files
are in the tokenized &amp;quot;binary&amp;quot; format.&lt;/p&gt;
&lt;p&gt;I found a Python project to interpret the byte codes into a more
useful format.
See &lt;a class="reference external" href="http://www.danvk.org/wp/gw-basic-program-decoder/"&gt;http://www.danvk.org/wp/gw-basic-program-decoder/&lt;/a&gt;  However, it
wasn't terribly well written, and didn't prove completely useful.&lt;/p&gt;
&lt;div class="section" id="gw-basic-bytes-codes"&gt;
&lt;h2&gt;GW Basic Bytes Codes&lt;/h2&gt;
&lt;p&gt;Look at &lt;a class="reference external" href="http://www.chebucto.ns.ca/~af380/GW-BASIC-tokens.html"&gt;http://www.chebucto.ns.ca/~af380/GW-BASIC-tokens.html&lt;/a&gt; for some
basic rules on the file format.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.antonis.de/qbebooks/gwbasman/index.html"&gt;http://www.antonis.de/qbebooks/gwbasman/index.html&lt;/a&gt; for a
reasonably clear definition of the language itself. Quirks are, of
course, studiously ignored, so there's a lot of ambiguity on edge
cases.&lt;/p&gt;
&lt;p&gt;For simple bytes-to-text translation, this is pretty simple.  The next
step -- interpreting GW Basic -- is a bit more complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;The irrational thing is that I'm captivated by the idea of preserving
this legacy gift from the authors in another, more useful language.
Indeed, the idea of a community of &amp;quot;HamCalc Ports to Other Languages&amp;quot;
appeals to me. This base of knowledge is best preserved by being made
open so that it can be rewritten into other commonly-used languages.&lt;/p&gt;
&lt;p&gt;There's a subset version
here: &lt;a class="reference external" href="http://www.softpedia.com/get/Science-CAD/HamCalc.shtml"&gt;http://www.softpedia.com/get/Science-CAD/HamCalc.shtml&lt;/a&gt; and
here &lt;a class="reference external" href="http://www.dxzone.com/dx11432/hamcalc-v1-3.html"&gt;http://www.dxzone.com/dx11432/hamcalc-v1-3.html&lt;/a&gt;. This is just a
few of the calculations, carefully rebuilt to include nice versions of
the ASCII-art graphics that are central to the original presentation.&lt;/p&gt;
&lt;p&gt;The hard part of preserving HamCalc is the absolute lack of any test
cases of any kind.&lt;/p&gt;
&lt;p&gt;I think the project should work like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Publish the complete plain text source decoded from the tokenized
binary format. It will likely be somewhere on
&lt;a class="reference external" href="http://www.itmaybeahack.com/"&gt;http://www.itmaybeahack.com/&lt;/a&gt; or perhaps a
&lt;a class="reference external" href="https://www.dropbox.com/home"&gt;Dropbox&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Publish the index of programs and features as a cross-reference to
the various programs. This should include the various links and
references and documentation snippets that populate the code and
output. This forms the backbone of the documentation as well as the
unit testing.&lt;/li&gt;
&lt;li&gt;Do a patient (and relatively lame) translation to Python3.2 to break
HamCalc into two tiers. The calculation library and a simple UI
veneer using stdio features of the print() and input() statements.
The idea is to do a minimalist rewrite of the core feature set so
that a GUI can be laminated onto a working calculation library.&lt;/li&gt;
&lt;li&gt;Work out test cases for the initial suite of 449 legacy programs
oriented toward the calculation layer, avoiding the UI behavior. The
idea isn't 100% code coverage. The idea is to pick the relevant logic
paths based on the more obvious use cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A sophisticated GUI is clearly something that was part of the
original vision. But the limitations of GW Basic and tiny computers
of that era assured that the UI and calculation were inextricably
intertwingled.&lt;/p&gt;
&lt;p&gt;If we can separate the two, we can provide a useful library that
others can build on.&lt;/p&gt;
&lt;p&gt;Maybe I should organize &lt;a class="reference external" href="http://www.hamcalc.org/"&gt;http://www.hamcalc.org/&lt;/a&gt; as the jumping-off
point for this effort?&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="why-not-put-the-project-on-github-or-bitbucket-so"&gt;
&lt;h2&gt;Why not put the project on Github or BitBucket so ...&lt;/h2&gt;
&lt;p&gt;Chris Nelson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-12 07:16:32.048000-04:00&lt;/p&gt;
&lt;p&gt;Why not put the project on Github or BitBucket so the project has source
control and exposure? You could also make a modern Python version that
utilized some of the great third party libraries for graphing and
calculations.
Chris
WA5TT&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="that-wasn-t-necessary-you-can-save-a-file-in-asci"&gt;
&lt;h2&gt;That wasn´t necessary. You can save a file in ASCI...&lt;/h2&gt;
&lt;p&gt;Rodri&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-12 05:48:56.085000-04:00&lt;/p&gt;
&lt;p&gt;That wasn´t necessary. You can save a file in ASCII format in GWBASIC.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interesting-project-i-39-d-be-willing-to-help-if"&gt;
&lt;h2&gt;Interesting project. I&amp;amp;#39;d be willing to help if...&lt;/h2&gt;
&lt;p&gt;Jason Crowe&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-11 16:08:54.095000-04:00&lt;/p&gt;
&lt;p&gt;Interesting project. I'd be willing to help if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="while-my-gwbasic-knowledge-is-a-little-bit-rusted"&gt;
&lt;h2&gt;While my GWBASIC knowledge is a little bit rusted,...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-12 04:28:04.215000-04:00&lt;/p&gt;
&lt;p&gt;While my GWBASIC knowledge is a little bit rusted, i offer my help in
porting stuff to Python. I am not quite sure if i got the point of the
test cases right: You want to compare the calculation results of the
legacy GWBASIC apps with the ported Python apps as test cases?
How can we stay in contact regarding the project?
Greetings,
Stefan DL1ELY&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-is-a-great-idea-i-39-m-ready-to-get-involv"&gt;
&lt;h2&gt;This is a great idea.  I&amp;amp;#39;m ready to get involv...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-14 00:09:23.367000-04:00&lt;/p&gt;
&lt;p&gt;This is a great idea. I'm ready to get involved. I like the Github idea,
too. So, has anyone started a github, yet? Or shold I do it
Peter
N3DXY&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cool-thanks-i-was-out-of-town-for-a-while-but"&gt;
&lt;h2&gt;Cool thanks ... I was out of town for a while but ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-05-22 23:49:23.350000-04:00&lt;/p&gt;
&lt;p&gt;Cool thanks ... I was out of town for a while but I'm back and still
thinking this is a good idea. Is anyone else working on this?&lt;/p&gt;
&lt;p&gt;Steve,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-put-together-a-dos-vm-and-dug-up-my-old"&gt;
&lt;h2&gt;I put together a DOS VM and dug up my old ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-17 00:10:59.621000-04:00&lt;/p&gt;
&lt;p&gt;Steve,
I put together a DOS VM and dug up my old copies of GWBASIC. Getting the
code to ASCII isn't really a big problem. Although GWBASIC saves in that
tokenized format by default. From inside the interpreter after you load
the BASIC file, you can just save them as ASCII using the command: SAVE
&amp;quot;filename.bas&amp;quot;,a
Then it's saved as text. So I've done a bunch already.&lt;/p&gt;
&lt;p&gt;Found it!&lt;/p&gt;
&lt;p&gt;gwbascii.exe with source code!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Chris Nelson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-17 09:00:38.678000-04:00&lt;/p&gt;
&lt;p&gt;Found it!
gwbascii.exe with source code!
&lt;a class="reference external" href="http://utopia.knoware.nl/users/arne/gwbascii/"&gt;http://utopia.knoware.nl/users/arne/gwbascii/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Peter,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-39-s-also-conversion-program-i-foun"&gt;
&lt;h2&gt;There&amp;amp;#39;s also conversion program I foun...&lt;/h2&gt;
&lt;p&gt;Chris Nelson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-17 06:12:32.315000-04:00&lt;/p&gt;
&lt;p&gt;Peter,
There's also conversion program I found a while back that runs under
Windows, I'll have to scrounge and see where it came from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-folks-who-are-interested-http-hamcalc-wiki"&gt;
&lt;h2&gt;For folks who are interested.  &lt;a class="reference external" href="http://hamcalc.wiki"&gt;http://hamcalc.wiki&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-06-01 07:45:16.488000-04:00&lt;/p&gt;
&lt;p&gt;For folks who are interested. &lt;a class="reference external" href="http://hamcalc.wikispaces.com/home"&gt;http://hamcalc.wikispaces.com/home&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/slott56/HamCalc-2.1"&gt;https://github.com/slott56/HamCalc-2.1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="knowledge capture"></category><category term="HamCalc"></category><category term="GW-Basic"></category><category term="test-driven reverse engineering"></category></entry><entry><title>RESTful Web Services Testing, Q&amp;A</title><link href="https://slott56.github.io/2012_09_13-restful_web_services_testing_qa.html" rel="alternate"></link><published>2012-09-13T08:00:00-04:00</published><updated>2012-09-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-09-13:/2012_09_13-restful_web_services_testing_qa.html</id><summary type="html">&lt;p&gt;Some background:&lt;/p&gt;
&lt;p&gt;I was vaguely pointed at one call in an API, via a 2-page &amp;quot;tutorial&amp;quot;
that uses CURL examples. Told &amp;quot;Test this some more.&amp;quot; by the guy who'd
been doing some amount (none?) of hand &amp;quot;success path&amp;quot; testing via
CURL. This has since morphed into &amp;quot;regression testing things, all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some background:&lt;/p&gt;
&lt;p&gt;I was vaguely pointed at one call in an API, via a 2-page &amp;quot;tutorial&amp;quot;
that uses CURL examples. Told &amp;quot;Test this some more.&amp;quot; by the guy who'd
been doing some amount (none?) of hand &amp;quot;success path&amp;quot; testing via
CURL. This has since morphed into &amp;quot;regression testing things, all 12
calls&amp;quot;, &amp;quot;we have a build API as well&amp;quot;, and &amp;quot;there's this hot new
feature for a vendor conference in a couple weeks ...&amp;quot;&lt;/p&gt;
&lt;p&gt;There was more, but you get the idea.  There were so more specific
&amp;quot;requirements&amp;quot; for the RESTful unit testing environment.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Get &amp;quot;smoke test&amp;quot; coverage vs. all the calls&lt;/p&gt;
&lt;p&gt;A sequence of CURL requests to exercise a server can be viewed as
&amp;quot;testing&amp;quot;.  It's piss-poor at best.  Indeed, it's often misleading
because of the complexity of the technology stack.&lt;/p&gt;
&lt;p&gt;In addition to the app, you're also testing Apache (or whatever server
they're using) plus the framework, plus the firewall, plus caching and
any other components of the server's technology stack.&lt;/p&gt;
&lt;p&gt;However, it does get you started ASAP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;expand / parameterize that&lt;/p&gt;
&lt;p&gt;CURL isn't the best choice.  You wind up writing shell scripts.  It
gets ugly before long.&lt;/p&gt;
&lt;p&gt;Python is better for this.&lt;/p&gt;
&lt;p&gt;Selenium may also work.  Oh wait.  Selenium is written in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;build out to response correctness &amp;amp; error codes&lt;/p&gt;
&lt;p&gt;Proper design for testability makes this easy.&lt;/p&gt;
&lt;p&gt;However.  When you've be tossed a &amp;quot;finished&amp;quot; RESTful web service that
you're supposed to be testing, you have to struggle with expected vs.
actual.&lt;/p&gt;
&lt;p&gt;It's not trivial because the responses may have legitimate variances:
date-time stamps, changing security tokens or nonces, sequence numbers
that vary.&lt;/p&gt;
&lt;p&gt;Essentially, you can't just use the OS DIFF program to compare actual
CURL responses with expected CURL responses.&lt;/p&gt;
&lt;p&gt;You're going to have to parse the response, pick out appropriate
fields to check and write proper unittest assertions around those
fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;layer in at least that much testing for the new, new feature
breathlessly happening RIGHT NOW.&lt;/p&gt;
&lt;p&gt;Without a proper design for testability, this can be painful.&lt;/p&gt;
&lt;p&gt;If you're using a good unit test framework, it shouldn't be
impossible.  Your framework must be able to start the target RESTful
web service for a TestCase, exercise the TestCase, and then shutdown
the target RESTful web service when the test has completed.&lt;/p&gt;
&lt;p&gt;Now, you're just writing unittest TestCase instances for the new
feature breathlessly happening RIGHT NOW.  That should be manageable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;...tool things I've found so far... [&lt;em&gt;list elided&lt;/em&gt;]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All crap, more or less.  They're REST client libraries, not testing tools.&lt;/p&gt;
&lt;p&gt;You need a proper unit testing framework with TestCase and TestSuite
classes and a TestRunner.  The tools you identified aren't testing
frameworks, they're lower level REST client and client library.  CURL,
by itself, isn't really very good for robust testing unless you embed
CURL in some test framework.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For defining interfaces (2), I have found these... [&lt;em&gt;list elided&lt;/em&gt;]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;API's in a typical RESTful environment have little or no formal
definition, other than Engrish.  WSDL is for Java/XML/SOAP.  It's not
used much for (simpler) REST.  For the most part, REST API definitions
(i.e., via JSON or whatever) are mostly experimental.  Not
standardized.  Not to be trusted.&lt;/p&gt;
&lt;p&gt;The issue is one of parallel maintenance.  The idea is that a REST
frameworks can operate without too much additional JSON or XML
folderol; just the code should be sufficient.&lt;/p&gt;
&lt;p&gt;If there's no WSDL (because it's just REST) then there's no &lt;em&gt;formal&lt;/em&gt;
definition of anything.  Sorry.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I (perhaps foolishly) figured there's be some standard way to consume
the standard format definition of an API, to generate test cases and
stubbing at least. Maybe even a standard set of verifications, like
error codes. So I went a-googling for 1) a standard / conventional
way to spec these APIs, 2) a standard / conventional tool or maybe
tools &amp;#64;one per stack, and 3) a standard / conventional way to
generate tests or test scaffolding in these tools, consuming the
standard / conventional API spec. So far, not so much.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;So far, not so much&amp;quot; is the state of the art.  You have correctly
understood what's available.&lt;/p&gt;
&lt;p&gt;REST -- in spite of it's trivial simplicity and strict adherence to
HTTP -- is a rather open world.  It's also pretty simple.  Fancy tools
don't help much.&lt;/p&gt;
&lt;p&gt;Why not?&lt;/p&gt;
&lt;p&gt;Because decent programming languages already do REST; tools don't add
&lt;em&gt;significant&lt;/em&gt; value.  In the case of Python, there are relatively few
tools (&lt;a class="reference external" href="http://seleniumhq.org/"&gt;Selenium&lt;/a&gt; is the big deal, and it's
for browser testing) because there's no real marketplace niche for
them.  In general, simple Python using httplib (or Python
3 http.client) can test the living shit out of RESTful API better than
CURL/DIFF with no ugly shell-script coding.  Only polite, civilized
Python coding.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="good-post-i-appreciate-yor-way-of-writing-that"&gt;
&lt;h2&gt;good post.....I appreciate yor way of writing that...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-29 03:40:29.866000-04:00&lt;/p&gt;
&lt;p&gt;good post.....I appreciate yor way of writing that make the blog
attractive and make reader to hold longer to your blog.
&lt;a class="reference external" href="http://www.qualitestgroup.com/Web-Testing-Services"&gt;web testing
services&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category></entry><entry><title>RESTful Web Service Testing</title><link href="https://slott56.github.io/2012_09_11-restful_web_service_testing.html" rel="alternate"></link><published>2012-09-11T08:00:00-04:00</published><updated>2012-09-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-09-11:/2012_09_11-restful_web_service_testing.html</id><summary type="html">&lt;p&gt;Unit testing RESTful web services is rather complex.  Ideally, the
services are tested in isolation before being packaged as a service.&lt;/p&gt;
&lt;p&gt;However, sometimes people will want to test the &amp;quot;finished&amp;quot; or
&amp;quot;integrated&amp;quot; web services technology stack because (I suppose) they
don't trust their lower-level unit tests.&lt;/p&gt;
&lt;p&gt;Or they don't have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Unit testing RESTful web services is rather complex.  Ideally, the
services are tested in isolation before being packaged as a service.&lt;/p&gt;
&lt;p&gt;However, sometimes people will want to test the &amp;quot;finished&amp;quot; or
&amp;quot;integrated&amp;quot; web services technology stack because (I suppose) they
don't trust their lower-level unit tests.&lt;/p&gt;
&lt;p&gt;Or they don't have effective lower-level unit tests.&lt;/p&gt;
&lt;p&gt;Before we look at testing a complete RESTful web service, we need to
expose some underlying principles.&lt;/p&gt;
&lt;p&gt;Principle #1.  &lt;strong&gt;Unit does not mean &amp;quot;class&amp;quot;&lt;/strong&gt;.  Unit means unit: a
discrete unit of code.  Class, package, module, framework, application.&lt;/p&gt;
&lt;p&gt;All are legitimate meanings of unit.  We want to use stable,
easy-to-live with unit testing tools.  We don't want to invent something
based on shell scripts running CURL and DIFF.&lt;/p&gt;
&lt;p&gt;Principle #2.  &lt;strong&gt;The code under test cannot have any changes made to it
for testing&lt;/strong&gt;.  It has to be the real, unmodified production code.  This
seems self-evident.  But.  It gets violated by folks who have
badly-designed RESTful services.&lt;/p&gt;
&lt;p&gt;This principle means that all the settings required for testability must
be part of an external configuration.  No exceptions.  It also means
that your service may need to be refactored so that the guts can be run
from the command line outside Apache.&lt;/p&gt;
&lt;p&gt;When your RESTful Web Service depends on third-party web service(s),
there is an additional principle.&lt;/p&gt;
&lt;p&gt;Principle #3.  &lt;strong&gt;You must have formal proxy classes for all RESTful services your app consumes&lt;/strong&gt;.  These proxy classes are going to be
really simple, since they must &lt;strong&gt;trivially&lt;/strong&gt; map resource requests to
proper HTTP processing.  In Python, it is delightfully simple to create
a class where each method simply uses httplib (or http.client in Python
3.2) to make a GET, POST, PUT or DELETE request.  In Java you can do
this, also, it's just not delightfully simple.&lt;/p&gt;
&lt;div class="section" id="testcase-overview"&gt;
&lt;h2&gt;TestCase Overview&lt;/h2&gt;
&lt;p&gt;Testing a RESTful web service is a matter of starting an instance of the
service, running a standard unit testing TestCase, and then shutting
that instance down.  Generally this will involve setUpModule and
tearDownModule (in Python parlance) or a &amp;#64;BeforeClass and &amp;#64;AfterClass
(in Java parlance).&lt;/p&gt;
&lt;p&gt;The class-level (or module-level) setup must start the application
server being tested.  The server will start in some known initial
condition.  This may involve building and populating known database,
too.  This can be fairly complex.&lt;/p&gt;
&lt;p&gt;When working with SQL, In-memory databases are essential for this.&lt;/p&gt;
&lt;p&gt;SQLite (Python) or &lt;a class="reference external" href="http://hsqldb.org/"&gt;http://hsqldb.org&lt;/a&gt; (Java)
can be life-savers because they're fast and flexible.&lt;/p&gt;
&lt;p&gt;What's important is that the client access to the RESTful web service is
entirely under control of a unit testing framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mocking-the-server"&gt;
&lt;h2&gt;Mocking The Server&lt;/h2&gt;
&lt;p&gt;A small, special-purpose server must be built that mocks the full
application server without the endless overheads of a full web server.
It can be simpler to mock a server rather than to try to reset the state
of a running Apache server.  TestCases often execute a sequence of
stateful requests assuming a known starting state.   Starting a fresh
mock server is sometimes an easy way to set this known starting state.
Here's a Python script that will start a server.   It writes the PID to
a file for the shutdown script.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import http.server
import os
from the_application import some_application_feature
class AppWrapper( http.server.BaseHTTPRequestHandler ):
    def do_GET( self ):
        # Parse the URL
        id= url.split(&amp;quot;/&amp;quot;)[-1]
        # Invoke the real application's method for GET on this URL.
        body= some_application_feature( id )
        # Respond appropriately
        self.send_response( 200, body )
    ... etc ...
# Database setup before starting the service.
# Filesystem setup before starting the service.
# Other web service proxy processes must be started, too.
with open(&amp;quot;someservice.pid&amp;quot;,&amp;quot;w&amp;quot;) as pid_file:
    print( os.getpid(), file=pid_file )
httpd = http.server.HTTPServer(&amp;quot;localhost:8000&amp;quot;, AppWrapper)
try:
    httpd.serve_forever()
finally:
    # Cleanup other web services.
&lt;/pre&gt;
&lt;p&gt;Here's a shutdown script.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import os, signal
with open(&amp;quot;someservice.pid&amp;quot;) as pid_file:
    pid= int( pid_file.read() )
os.kill( pid, signal.CTRL_C_EVENT )
&lt;/pre&gt;
&lt;p&gt;These two scripts will start and stop a mock server that wraps the
underlying application.&lt;/p&gt;
&lt;p&gt;When you're working in Java, it isn't so &lt;em&gt;delightfully&lt;/em&gt; simple as Python&lt;/p&gt;
&lt;p&gt;But it should be respectably simple.  And you have &lt;a class="reference external" href="http://www.jython.org/jythonbook/en/1.0/JythonAndJavaIntegration.html"&gt;Jython Java
integration&lt;/a&gt;
so that this Python code can invoke a Java application without too much
pain.&lt;/p&gt;
&lt;p&gt;Plus,  you can always fall further back to a CGI-like unit testing
capability where &amp;quot;body= some_application_feature( id )&amp;quot; becomes a
subprocess.call(). Yes it's inefficient.  We're just testing.&lt;/p&gt;
&lt;p&gt;This CGI-like access only works if the application is very well-behaved
and can be configured to process one request at a time from a local file
or from the command line.  This, in turn, may require building a test
harness that uses the core application logic in a CGI-like context where
STDIN is read and STDOUT is written.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-am-a-newbie-i-did-not-have-a-clear"&gt;
&lt;h2&gt;I am a newbie, I did not have a clear...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-09-11 08:58:36.627000-04:00&lt;/p&gt;
&lt;p&gt;Thanks,
I am a newbie, I did not have a clear Idea about testing RESTful
services untill I saw this post.
Thanks again.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="JUnit"></category><category term="REST"></category></entry><entry><title>How Expensive is a "Waterfall" Project Plan?</title><link href="https://slott56.github.io/2012_08_08-how_expensive_is_a_waterfall_project_plan.html" rel="alternate"></link><published>2012-08-08T08:15:00-04:00</published><updated>2012-08-08T08:15:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-08-08:/2012_08_08-how_expensive_is_a_waterfall_project_plan.html</id><summary type="html">&lt;p&gt;It's impossible to step into the same river twice; other waters are
flowing toward the sea.  It's impossible to do &amp;quot;head-to-head&amp;quot; project
comparisons.  You can't have the same people doing the same thing with
only one constraint changed.  You can try to resort to having similar
people doing the exact …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's impossible to step into the same river twice; other waters are
flowing toward the sea.  It's impossible to do &amp;quot;head-to-head&amp;quot; project
comparisons.  You can't have the same people doing the same thing with
only one constraint changed.  You can try to resort to having similar
people doing the exact same thing.&lt;/p&gt;
&lt;p&gt;It's impossible to provide trivial quantification of the costs of a
waterfall approach.  However, there's a lot of places where &amp;quot;up front&amp;quot;
engineering &lt;strong&gt;adds&lt;/strong&gt; cost and risk.  A waterfall plan adds friction,
zero-value administrative costs and (sometimes) extra work.&lt;/p&gt;
&lt;p&gt;For software development that doesn't involve &amp;quot;toy&amp;quot; projects, but
apply to the magical &amp;quot;real world&amp;quot; projects, it's difficult to justify
building the same &amp;quot;real world&amp;quot; thing twice.  It's hard to create a
detailed and purely economic analysis of this question.  Therefore, we
have to resort to hand-waving and speculation.&lt;/p&gt;
&lt;p&gt;[I put &amp;quot;real world&amp;quot; in quotes, because the &amp;quot;real world&amp;quot; is a kind of
dog-whistle phrase that only project managers understand.  It appears
to mean &amp;quot;projects that fit my preconceived notions&amp;quot; or &amp;quot;projects that
can't be done any other way because of political considerations&amp;quot; or
&amp;quot;projects constrained by a customer to have a farcical structure&amp;quot;.
Another variant on this dog-whistle phrase is &amp;quot;the realities of
running a business.&amp;quot;  There's something in their real world that they
(a) can't define and (b) prevents any change.]&lt;/p&gt;
&lt;p&gt;A few months back, I saw a &lt;a class="reference external" href="http://prezi.com/"&gt;http://prezi.com&lt;/a&gt;
presentation that was intended to drive architecture, cost and
schedule conversations.  The authors were happy.  I was left
relatively mystified.&lt;/p&gt;
&lt;p&gt;There are three relevant issues that don't fit well into a prezi
presentation.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open Technology questions.  If it's &lt;strong&gt;new&lt;/strong&gt; software development,
there are unanswered software API, performance, quality,
fitness-for-purpose questions.  If it's a clone or a clean-room
reverse engineering, then there may be few questions.  Otherwise,
there must be unknowns.&lt;/li&gt;
&lt;li&gt;Open User Story questions.  If it's &lt;strong&gt;new&lt;/strong&gt; software development,
then the user stories are not complete, consistent and optimized.
There must be something missing or extra.&lt;/li&gt;
&lt;li&gt;Open User Experience questions.  I'm not a UX person.  Tinkering with
an Arduino has taught me that even in the most prosaic, simplistic
project there is a UX element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's easy to trivialize this as &amp;quot;details&amp;quot; or &amp;quot;supporting information&amp;quot;
omitted from the presentation.  Actually, it's considerably more
interesting that simply elaborating details.  Indeed, the missing
stuff is often more important that the elements of the presentation
than were provided.&lt;/p&gt;
&lt;div class="section" id="the-standard-gaps"&gt;
&lt;h2&gt;The Standard Gaps&lt;/h2&gt;
&lt;p&gt;While a presentation can show some elements of UX, it's not
&lt;strong&gt;interactive&lt;/strong&gt;.  It cannot provide any useful depth on the UX.
Failure to do UX exploration (with real interaction) is crazy.
Making assumptions about UX is more likely to &lt;strong&gt;create&lt;/strong&gt; cost and
risk.&lt;/p&gt;
&lt;p&gt;User Stories can be kicked around in a presentation.  However.  Once
the highest-priority user stories are built, and lessons learned about
the users, the problem and the emerging solution, then the other user
stories can (and should) change based on those lessons learned.
Assuming a list of user stories and then committing to a specific
schedule &lt;strong&gt;enshrines&lt;/strong&gt; the costs in a bad plan.  And we all know that
the plan (and the dates) are sacred once written down.&lt;/p&gt;
&lt;p&gt;Software does not exist in a vacuum.&lt;/p&gt;
&lt;p&gt;I'll repeat that, since it's a hidden assumption behind the waterfall.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Software does not exist in a vacuum.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;You have a Heisenberg problem when you start building software and
releasing it incrementally.  The presence of the new software, even
in a first-release, beta-test, barely-working mode changes the
ecosystem in which the software exists.  Other applications can (and
will) be modified to adjust to the new software.  Requirements can
(and should) change.&lt;/p&gt;
&lt;p&gt;A waterfall project plan exists to prevent and stifle change.  A long
list of tasks and dates exists to assure that people perform those
tasks on those dates.  This is done irrespective of value created and
lessons learned.&lt;/p&gt;
&lt;p&gt;Technology changes.  Our understanding of the technology changes.
One wrong assumption about the technology invalidates the
deliverables for a sprint.  In a project with multiple people,
multiple assumptions and multiple sprints, this effect is cumulative.
Every assumption by every person for every technology is subject to
(considerable) error.&lt;/p&gt;
&lt;p&gt;Every technology assumption must be looked at as a needless cost
that's being built into the project.&lt;/p&gt;
&lt;p&gt;Recently, I've been working on a project with folks that don't know
Django very well.  Their assumptions are -- sometimes -- alarming.&lt;/p&gt;
&lt;p&gt;Part way through a sprint, I got a raft of technical questions on
encrypting passwords.  It's hard to state it strongly enough: &lt;strong&gt;never
encrypt a password&lt;/strong&gt;.  What's more useful is this: &lt;strong&gt;always hash
passwords&lt;/strong&gt;.  The original password &lt;strong&gt;must&lt;/strong&gt; be unrecoverable.  There
are lots of clever hashing techniques.  Some of which are already
part of Django.  A significant portion of the sprint (appeared) to be
based on reinventing a feature already part of Django.&lt;/p&gt;
&lt;p&gt;Do the math: a few wrong assumptions made during project planning are
canonized forever as requirements in the project.  With a waterfall
project, they're not easy to change.  Project managers are punished
for changing the project.  You can't increase the project deadline;
that's death.  You can't decrease it, either: you get blamed for
sand-bagging the estimates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arduino-technology-lessons-learned"&gt;
&lt;h2&gt;Arduino Technology Lessons Learned&lt;/h2&gt;
&lt;p&gt;After buying several 74HC595 shift registers from Sparkfun, I
realized that my assumptions about the interfaces were utterly wrong.
I needed to solder a mix of right-angle header and straight-through
headers onto the breakout boards.  I tried twice to order the right
mix headers.  It seems so simple.  But &lt;strong&gt;assumptions&lt;/strong&gt; about the
technology are often wrong.&lt;/p&gt;
&lt;p&gt;This is yet more anecdotal evidence that &lt;strong&gt;all&lt;/strong&gt; assumptions must be
treated as simple lies.  Some managers like to treat assumptions as
&amp;quot;possibly true&amp;quot; statements; i.e., these are statements that are
unlikely to be false.  This is wrong.  Assumptions always have a very
high probability of being false, since they're not based on factual
knowledge.&lt;/p&gt;
&lt;p&gt;Some managers like to treat assumptions as &amp;quot;boundary conditions&amp;quot;:
i.e.,  if the assumption is true, then the project will go according
to plan.  Since all of the assumptions will be prove to be incorrect,
this seems like simple psychosis.&lt;/p&gt;
&lt;p&gt;[Interestingly, the assumptions-are-boundary folks like to play the
&amp;quot;real world&amp;quot; card: &amp;quot;In the real world, we need to make assumptions
and go forward.&amp;quot;  Since all assumptions &lt;strong&gt;will&lt;/strong&gt; be shown to be
incorrect, why make them?  Wouldn't it be more rational to say &amp;quot;we
need to explore carefully by addressing high-righ unknowns first&amp;quot;?
Wouldn't it be better to both gather facts and build an early
release of the software at the same time?]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arduino-user-story-assumptions"&gt;
&lt;h2&gt;Arduino User Story Assumptions&lt;/h2&gt;
&lt;p&gt;After building a prototype that addressed two of the user stories, it
slowly became clear that the third user story didn't actually exist.&lt;/p&gt;
&lt;p&gt;Sure, the words were there on paper.  Therefore, there's a user
story.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;There was nothing to actually &lt;strong&gt;do&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The whole &amp;quot;As a [role], I need [feature] so that I can [benefit]&amp;quot;
that was written on day one was based on a failure to understand
precisely how much information was trivially available.  The benefit
statement was available with a small software change and no separate
user story.  And no separate hardware to support that user story.&lt;/p&gt;
&lt;p&gt;Exploration and tinkering &lt;strong&gt;reduced&lt;/strong&gt; the scope of the work.  In the
real world.
[In the &amp;quot;real world&amp;quot; where waterfall is considered important,
exploration is described as unbounded spending of limited resources.
In the real real world, money &lt;strong&gt;must&lt;/strong&gt; be spent; it can either be
long hand-wringing meetings or it can be prototype development.]&lt;/p&gt;
&lt;p&gt;The user story (written before a prototype existed) was based on a
failure to fully understand the UX.  The only way to fully understand
the UX is to build it.  Education costs money.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arduino-ux-learnings"&gt;
&lt;h2&gt;Arduino UX Learnings&lt;/h2&gt;
&lt;p&gt;Perhaps the most important issue here is UX.&lt;/p&gt;
&lt;p&gt;Once upon a time, UX was expensive, difficult and complex.  So
difficult that special-purpose prototyping tools were created to make
it possible to create a preliminary UX that could be used to confirm
UX and user stories.&lt;/p&gt;
&lt;p&gt;This UX prototyping effort was real money spent as part of
&amp;quot;requirements&amp;quot; or &amp;quot;design&amp;quot;; it created documentation that flowed over
the waterfall for subsequent development.&lt;/p&gt;
&lt;p&gt;This notion is obsolete.  And has been obsolete for several years.&lt;/p&gt;
&lt;p&gt;UX is now so easy to build that it makes much more sense to build two
(or three) competing UX's and compare them to see which is
&lt;strong&gt;actually&lt;/strong&gt; better.&lt;/p&gt;
&lt;p&gt;Indeed, it makes a lot of sense to build one UX and release it; make
a real effort at solving the user's problems.  Then build a second UX
for A/B testing purposes to see if there's room for improvement.&lt;/p&gt;
&lt;p&gt;I'll repeat that for folks who really like the waterfall.&lt;/p&gt;
&lt;p&gt;It's now cheaper to actually build two than it is to write detailed
requirements for one.
-----------------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;[In the &amp;quot;real world&amp;quot;, this is deprecated as &amp;quot;wasting time playing
with the UX&amp;quot;.  As if written requirements based on nothing more than
a whiteboard are more &amp;quot;real&amp;quot; than hands-on experience with the UX.]
You can prove this to yourself by actually observing actual UX
developers knocking out pages and screens.  Long &amp;quot;requirements
gathering&amp;quot; meetings with prospective users amount to a waste of time
and money.  Long &amp;quot;brainstorming&amp;quot; sessions, similarly, are wasteful.
Short, ongoing conversations, a build, a release, and a follow-up
review has more value, and costs less.&lt;/p&gt;
&lt;p&gt;Do the math.  Several users and business analysts in several
multiple-hour meetings costs how much?&lt;/p&gt;
&lt;p&gt;A pair of developers banging out fully-functioning, working UX for a
use case costs how much?&lt;/p&gt;
&lt;p&gt;A slavish adherence to waterfall development creates &amp;quot;real world&amp;quot;
costs.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="does-the-approach-scale-how-much-does-each-iterat"&gt;
&lt;h2&gt;Does the approach scale? How much does each iterat...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-22 19:46:20.193000-04:00&lt;/p&gt;
&lt;p&gt;Does the approach scale? How much does each iteration/experiment cost?
If it's $100k per go around, well we better think long and hard. How
about saying, lets spend x dollars to try y? If it is a total failure,
we will have spend x dollars to learn z.&lt;/p&gt;
&lt;p&gt;Yah, I know, putting x dollars and failure in the same sentence is not a
whining proposition. However, who knows, your might actually find a
customer that might like the truth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="does-the-approach-scale-by-definiti"&gt;
&lt;h2&gt;&amp;quot;Does the approach scale&amp;quot;.  By definiti...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-28 07:17:12.529000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Does the approach scale?&amp;quot;. By definition. Did you read the post?
Cheaper is cheaper at every scale.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="waterfall"></category><category term="agile"></category></entry><entry><title>Innovation, Arduino and "Tinkering"</title><link href="https://slott56.github.io/2012_07_12-innovation_arduino_and_tinkering.html" rel="alternate"></link><published>2012-07-12T08:00:00-04:00</published><updated>2012-07-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-07-12:/2012_07_12-innovation_arduino_and_tinkering.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Many of my customers (mostly super-large IT shops) wouldn't recognize
innovative behavior.  Large organizations tend to punish defectors
(folks that don't conform), and innovation is non-conforming.&lt;/div&gt;
&lt;div class="line"&gt;I've just had two object lessons in innovation.  The state of the art
has left many in-house IT development processes in the dust.  The …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Many of my customers (mostly super-large IT shops) wouldn't recognize
innovative behavior.  Large organizations tend to punish defectors
(folks that don't conform), and innovation is non-conforming.&lt;/div&gt;
&lt;div class="line"&gt;I've just had two object lessons in innovation.  The state of the art
has left many in-house IT development processes in the dust.  The cost
and complexity of innovation has fallen, but organizations continue to
lumber along pretending that innovation is risky or complex.&lt;/div&gt;
&lt;div class="line"&gt;You can find endless advice on how to foster a &lt;a class="reference external" href="http://scholar.google.com/scholar?q=culture+of+innovation&amp;amp;hl=en&amp;amp;as_sdt=0&amp;amp;as_vis=1&amp;amp;oi=scholart&amp;amp;sa=X&amp;amp;ei=fBf-T-utG6aC2wXrr-GzDw&amp;amp;ved=0CGEQgQMwAA"&gt;culture of
innovation&lt;/a&gt;.
 Often, this advice includes a suggestion that innovative projects
should somehow &amp;quot;&lt;a class="reference external" href="http://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=innovation+fail+fast&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8"&gt;fail
fast&lt;/a&gt;&amp;quot;.
 I'm deeply suspicious of &amp;quot;fail fast&amp;quot; advice.  I think it misleads IT
management into thinking there's a super-cheap way to innovate.  It's
misleading because &amp;quot;fail fast&amp;quot; leaves too many questions unanswered.&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How soon do you know something's about to be a failure?&lt;/li&gt;
&lt;li&gt;What's the deadline that applies so that failure can happen quickly?&lt;/li&gt;
&lt;li&gt;What's the leading indicator of failure?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;If you are gifted enough to predict the future -- and can predict
failure -- why not apply that gift to predicting success?  Give up on
the silliness of unstructured &amp;quot;innovation&amp;quot; and simply implement what
will not fail.&lt;/div&gt;
&lt;div class="line"&gt;At MADExpo, I saw an eye-opening presentation on the Arduino.  I
followed that with viewing &lt;a class="reference external" href="http://www.ted.com/talks/massimo_banzi_how_arduino_is_open_sourcing_imagination.html"&gt;Massimo Banzi's TED
Talk&lt;/a&gt;
on the subject of Arduino, imagination and open source.&lt;/div&gt;
&lt;div class="line"&gt;There are two central parts of the Arduino philosophy.&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tinkering.&lt;/li&gt;
&lt;li&gt;Interaction Design.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;Without delving too deeply, I'm trying to build a device that will
measure the position of a hydraulic piston.  It's the hydraulic
steering on a boat, and a measurement of the piston position provides
the rudder position, something that's handy for adjusting sail trim to
reduce the strain on an autopilot.&lt;/div&gt;
&lt;div class="line"&gt;Clearly, such a device needs to be calibrated with the extreme port
and starboard range of motion.  Barring unusual circumstances, the
amidships position is simply the center between the two limits.&lt;/div&gt;
&lt;div class="line"&gt;Part 1.  Buy an Arduino, a Sharp GP2Y0A02YK0F IR distance measurer
(for 10-80 cm), plus miscellaneous things like breadboard, jumpers,
LED's, test leads, etc.  A trip to &lt;a class="reference external" href="http://www.radioshack.com/product/index.jsp?productId=12268262"&gt;Radio
Shack&lt;/a&gt;
covers most of the bases.  The rest comes from
&lt;a class="reference external" href="http://www.sparkfun.com/"&gt;Sparkfun&lt;/a&gt;, &lt;a class="reference external" href="http://www.robotshop.com/"&gt;Robot
Shop&lt;/a&gt;,
&lt;a class="reference external" href="http://www.digikey.com/"&gt;Digi-Key&lt;/a&gt; and
&lt;a class="reference external" href="http://www.mouser.com/"&gt;Mouser&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Part 2.  Learn the language (a subset of C.)  Learn core algorithms
(de-bouncing buttons and the IR sensor).&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Tinkering&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;At this point, we've tinkered.  Heavily.&lt;/div&gt;
&lt;div class="line"&gt;What's important for IT managers is that tinkering doesn't have a
project plan.  It doesn't have a simple schedule and clear milestones.
 It's a learning process.  It's knowledge acquisition.&lt;/div&gt;
&lt;div class="line"&gt;The current replacement for tinkering is training.  Rather than learn
by attempting (and failing), IT managers hire experts to pass on
knowledge.  This is, generally, limiting and specifically stifles
innovation.&lt;/div&gt;
&lt;div class="line"&gt;Years ago, I worked on embedded systems: hardware software hybrids.
 We burned ROMs and programmed in assembler.  Back in those days, this
kind of tinkering was difficult, and consequently frowned upon.  It
was difficult to specify, locate, source, and assemble the components.
 There was a lot of reading complex product data sheets to try and
determine what to buy and how few were needed.&lt;/div&gt;
&lt;div class="line"&gt;What had once been a very serious (and very difficult) electrical
engineering exercise (IR sensor, button, LED, power supply, etc.,
etc.) was a few days of tinkering with commodity parts.  The price was
low enough and availability ubiquitous enough that frying a few LED's
is of no real consequence.  Even frying an Arduino or two isn't much
of a concern.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Interaction Design&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;The next step is to work out the user interface.  For the normal
operating mode, the input comes from the hydraulic piston and the
output is some LED's to show the displacement left or right of center.
 Pretty simple.&lt;/div&gt;
&lt;div class="line"&gt;However.&lt;/div&gt;
&lt;div class="line"&gt;There's the issue of calibration.  Clearly, the left and right limits
(as well as center position) need to be calibrated into the device.&lt;/div&gt;
&lt;div class="line"&gt;Just as clearly, this means that the device needs buttons and LED's to
switch from normal mode to calibration mode.  And it needs some
careful interaction design.  There are several operating modes
(uncalibrated, calibrating, normal) with several submodes for
calibrating (setting left, setting right, setting center.)&lt;/div&gt;
&lt;div class="line"&gt;Once upon a time, we wrote long, wordy documents.  We drew complex UML
state charts.  We drew all kinds of pictures to try and capture the
important features of the interaction.&lt;/div&gt;
&lt;div class="line"&gt;&lt;strong&gt;Enter Arduino&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;The point of Arduino is not to spend too much time up front
over-specifying something that's probably a bad idea.   The point is
to experiment quickly with different user interface and interaction
experiences to see what works and what doesn't work.&lt;/div&gt;
&lt;div class="line"&gt;The same is true of many modern development environments.  Web
development, for example, can be done by using sophisticated
frameworks, writing little backend code and messing with the jQuery,
CSS and HTML5 aspects of the interaction.&lt;/div&gt;
&lt;div class="line"&gt;The scales fell from my eyes when I started to document the various
operating modes.&lt;/div&gt;
&lt;div class="line"&gt;Arduino doesn't have a great unit testing environment.  It's for
tinkering, after all.  It's also for building small, focused things.
 Not large, rambling, hyper-complex things.  You can achieve
complexity through the interaction of small, easy-to-test things.  But
don't start out with complexity.&lt;/div&gt;
&lt;div class="line"&gt;After writing a few paragraphs, I realized that the piston movements
could easily be self-calibrating.  Simply track the maximum and
minimum distances ever seen.  That's it.  Nothing more.  In the case
of a boat, it means swinging the wheel from stop to stop to define the
operating range.  That's it.&lt;/div&gt;
&lt;div class="line"&gt;A button (to clear the accumulated history) is still useful.  But much
simpler since it's a one-time-only reset button.  Nothing more.&lt;/div&gt;
&lt;div class="line"&gt;Moving from idea to working prototype took less time than writing this
blog post.&lt;/div&gt;
&lt;div class="line"&gt;Next steps are to tinker with various display alternatives.  How many
LED's?  What colors?  LCD Text Display?  There are numerous choices.&lt;/div&gt;
&lt;div class="line"&gt;Rather than wasting times on UML, specifications, whiteboard and
diagrams, it's a simpler matter to write the user stories and tinker
with display hardware.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I always love these either or conversations.&lt;/p&gt;
&lt;div class="section" id="i-am"&gt;
&lt;h2&gt;I am...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-14 03:27:21.858000-04:00&lt;/p&gt;
&lt;p&gt;I always love these either or conversations.
I am not sure what the answer is, just trust me and give me an infinite
amount of money to tinker and experiment. This ignores the realities of
running a business, cash flow and making payrole.
I need to know down to the exact number of hours of how long it will
take you to implement (some nebulous requirement). This ignores the fact
that requirements discovery is unpredictable whose unknowns are turbo
charged by politics.
How about a different approach. How about saying, I have x dollars w/
which to experiments; what should we try first. As we are trying x, lets
think about what the next step should be. I think that this is called
agile?
How about if we just realize that the client doesn't want to tinker but
wants a package solution. Check out &amp;quot;The chicken and egg of big data
solutions&amp;quot; by Jim Stogdill.
(&lt;a class="reference external" href="http://radar.oreilly.com/2012/05/hadoop-applications-package-enterprise-startups.html"&gt;http://radar.oreilly.com/2012/05/hadoop-applications-package-enterprise-startups.html&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="personally-i-like-quot-do-it-yourself-an-automa"&gt;
&lt;h2&gt;Personally, I like &amp;amp;quot;Do-It-Yourself: An Automa...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-23 11:11:37.392000-04:00&lt;/p&gt;
&lt;p&gt;Personally, I like &amp;quot;Do-It-Yourself: An Automated Bartender&amp;quot; project.
(&lt;a class="reference external" href="https://ieeetv.ieee.org/ieee_spectrum_reports/barbot-mixes-drinks-automatically"&gt;https://ieeetv.ieee.org/ieee_spectrum_reports/barbot-mixes-drinks-automatically&lt;/a&gt;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-just-trust-me-and-give-me-an-infinite-amount"&gt;
&lt;h2&gt;&amp;amp;quot;just trust me and give me an infinite amount...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-09-01 08:10:13.544000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;just trust me and give me an infinite amount of money&amp;quot; is clearly just
a fanciful straw man argument. It doesn't actually exist. Why propose
it? There is no such thing as an infinite budget. This post has nothing
to do with an infinite budget. You're misrepresenting this in an
egregious way.
&amp;quot;just trust me and give me an ... money&amp;quot; is isomorphic to &amp;quot;I have x
dollars w/ which to experiments&amp;quot;. Isomorphic. The same thing. You're
&amp;quot;different approach&amp;quot; is the same thing I'm suggesting here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="check-out-the-article-quot-sensors-and-arduino-h"&gt;
&lt;h2&gt;Check out the article &amp;amp;quot;Sensors and Arduino: H...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-03 22:00:02.354000-04:00&lt;/p&gt;
&lt;p&gt;Check out the article &amp;quot;Sensors and Arduino: How to glue them together&amp;quot;
(url: &lt;a class="reference external" href="http://radar.oreilly.com/2012/08/sensors-arduino-htm.html"&gt;http://radar.oreilly.com/2012/08/sensors-arduino-htm.html&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="arduino"></category><category term="#MADExpo"></category><category term="innovation"></category></entry><entry><title>Cool stuff I saw at MADExpo</title><link href="https://slott56.github.io/2012_07_10-cool_stuff_i_saw_at_madexpo.html" rel="alternate"></link><published>2012-07-10T08:00:00-04:00</published><updated>2012-07-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-07-10:/2012_07_10-cool_stuff_i_saw_at_madexpo.html</id><summary type="html">&lt;p&gt;A random list of cool things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;HTML5.  Start now.  It's supported (more or less) by all browsers if
you add appropriate shims.  Start with sites
like &lt;a class="reference external" href="http://www.html5rocks.com/en/"&gt;http://www.html5rocks.com/en/&lt;/a&gt; and continue reading.  It's
largely arrived and there's no compelling reason to delay.&lt;/li&gt;
&lt;li&gt;JavaScript.  I'm not a fan of …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;A random list of cool things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;HTML5.  Start now.  It's supported (more or less) by all browsers if
you add appropriate shims.  Start with sites
like &lt;a class="reference external" href="http://www.html5rocks.com/en/"&gt;http://www.html5rocks.com/en/&lt;/a&gt; and continue reading.  It's
largely arrived and there's no compelling reason to delay.&lt;/li&gt;
&lt;li&gt;JavaScript.  I'm not a fan of the language.  However.  It's clearly
here to stay. It's part of many important technologies (like
CouchDB).  HTML5 shims (or
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/HTML5_Shiv"&gt;shivs&lt;/a&gt;) are necessary.
Flex (and other browser plug-in languages) are effectively dead.
JavaScript is all that's left.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://redis.io/"&gt;Redis&lt;/a&gt;.  Wow! Is that cool?  Rather that fart
around trying to get outstanding performance out of a clunky old
RDBMS, use a simple, high performance data store.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.mongodb.org/"&gt;MongoDB&lt;/a&gt;.  Now that I've seen it, I have
a vague notion of places where Mongo is better and places where Couch
might be better.  In 80% of the application space, both are fine.
But there's a 20% where we might be able to split a hair and
leverage the slightly different feature sets.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don't build mobile apps.  But if I did, I think I'd start with
&lt;a class="reference external" href="http://www.appcelerator.com/platform"&gt;Appcelerator Titanium&lt;/a&gt;
before switching to a &amp;quot;native&amp;quot; development environment.  The idea that
several standard features are readily accessible with a convenient
development environment is pleasant.&lt;/p&gt;
&lt;p&gt;I finally laid eyes on an &lt;a class="reference external" href="http://www.arduino.cc/"&gt;Arduino&lt;/a&gt;.  Let
me simply say that it looks like dangerous, dangerous fun.  I think
I'll be hanging around at &lt;a class="reference external" href="http://www.radioshack.com/product/index.jsp?productId=12268262"&gt;Radio
Shack&lt;/a&gt;
a lot.&lt;/p&gt;
</content><category term="Technologies"></category><category term="arduino"></category><category term="titanium"></category><category term="jquery"></category><category term="HTML"></category><category term="mongodb"></category><category term="redis"></category><category term="javascript"></category></entry><entry><title>Book Deal Fell Apart (sigh)</title><link href="https://slott56.github.io/2012_07_03-book_deal_fell_apart_sigh.html" rel="alternate"></link><published>2012-07-03T08:00:00-04:00</published><updated>2012-07-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-07-03:/2012_07_03-book_deal_fell_apart_sigh.html</id><summary type="html">&lt;p&gt;After spending a couple of years (really) working with a publisher,
the deal has gone south.&lt;/p&gt;
&lt;p&gt;The problem was—likely—all mine.  The book wasn't &lt;em&gt;really&lt;/em&gt; what the
publisher wanted.  Perhaps it was close and they thought they could
edit it into shape.  And perhaps I wasn't responsive enough to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After spending a couple of years (really) working with a publisher,
the deal has gone south.&lt;/p&gt;
&lt;p&gt;The problem was—likely—all mine.  The book wasn't &lt;em&gt;really&lt;/em&gt; what the
publisher wanted.  Perhaps it was close and they thought they could
edit it into shape.  And perhaps I wasn't responsive enough to
criticism.&lt;/p&gt;
&lt;p&gt;I like to think that I was responsive, since I made almost all of the
suggested changes.&lt;/p&gt;
&lt;p&gt;But the deal fell apart, so my subjective impression isn't too
relevant.&lt;/p&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What To Do?&lt;/h2&gt;
&lt;p&gt;I have two essential choices here.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Finish up&lt;/strong&gt;.  Simply press on with the heavily-edited version.  The
path of least resistance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Roll back the content&lt;/strong&gt;.  This involves going back to a less
heavily edited version and merging in the &lt;em&gt;relevant&lt;/em&gt; changes and
corrections from the writing process.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option 2 is on the table because my editor was unhappy with
&amp;quot;digressive&amp;quot; material.  The editor had a vision of some kind of
narrative arc that exposed Python in one smooth story line.  My
attempted presentation was to expose language features and provide
supporting details.&lt;/p&gt;
&lt;p&gt;Perhaps I'm too deeply invested in the details of computer science.
Or.  Perhaps I'm just a lousy writer.  But I felt that the
digressions were of some value because they could fill in some of the
gaps I observed while coaching and teaching programmers over the last
few decades.&lt;/p&gt;
&lt;p&gt;In addition to the editorial challenge, there's technical challenge.
Do I step back from LaTeX?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Use LaTeX&lt;/strong&gt;.  This means that I would have to create the non-PDF
version with a LaTeX to HTML translator.  Read &lt;a class="reference external" href="http://river.styx.org/ww/2010/11/latex"&gt;Converting LaTeX
to HTML in the Modern
Age&lt;/a&gt;.  See
&lt;a class="reference external" href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt;.  Or, it means that
I don't offer an HTML version (a disservice, I think.)  Also, I
need to unwind the publisher's LaTeX style libraries and revert to
a plain LaTeX.  Since LaTeX is semantically poor, I need to rework
a lot of RST markup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Revert to RST&lt;/strong&gt;.  While RST tools can make both LaTeX and HTML
from a common source, it does mean that some of the fancier LaTeX
formatting has to go.  Specifically, I really got to know the
&lt;a class="reference external" href="http://en.wikibooks.org/wiki/LaTeX/Algorithms_and_Pseudocode"&gt;algorithm and algorithmic
packages&lt;/a&gt;.
I hate to give those up.  But maybe I can work something out with
Sphinx 1.1.3's various features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem is that three of the four combinations of paths have
advantages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish up using LaTeX is easiest.  Remove the publisher's document
style.  Use HeVeA or Pandoc to make HTML.  Move on.&lt;/li&gt;
&lt;li&gt;Finish up but revert to RST.  This means conversion from the
publisher's LaTeX to RST followed by some editing to fix the
missing RST semantic markup and then some debugging to get the
LaTeX and HTML to look good.&lt;/li&gt;
&lt;li&gt;Rollback the content using LaTeX.  This would be challenging
because I would have to merge manually edited publisher-specific
LaTeX from the heavily-edited version with the Sphinx-generated
LaTeX from the less-heavily edited source.  Things like the
publishers' style tags would complicate the merge.&lt;/li&gt;
&lt;li&gt;Rollback the content and revert to RST. This means using Pandoc to
convert the heavily-edited LaTeX to RST. Then merging the
&lt;em&gt;relevant&lt;/em&gt; edits into the RST original text.   This actually seems
pretty clean, since the heavily-edited RST (converted from LaTeX)
would be short.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Perhaps, if I was a better writer, I wouldn't have these problems.
It appears than the solution is MacFarlane's
&lt;a class="reference external" href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt;.  This can reverse
LaTeX to RST, allowing easy side-by-side merging of texts from
various sources.  Or.  It can convert LaTeX to HTML, allowing easy
work with the heavily edited LaTeX version.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-39-m-glad-you-39-ve-had-good-luck-with-hevea"&gt;
&lt;h2&gt;I&amp;amp;#39;m glad you&amp;amp;#39;ve had good luck with HeVeA. ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-03 11:53:18.502000-04:00&lt;/p&gt;
&lt;p&gt;I'm glad you've had good luck with HeVeA. I wanted to let you know that
I've been using plasTeX to convert latex to html and docbook in a
publishing setting. I had to write a few python classes for my own
customizations and I expect the algorigthm classes aren't supported out
of the box.
Still, it's a nice python package, imo.
[&lt;a class="reference external" href="http://plastex.sourceforge.net/"&gt;http://plastex.sourceforge.net/&lt;/a&gt;]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-the-deal-is-definitely-off-the-table-that-39"&gt;
&lt;h2&gt;So the deal is definitely off the table? That&amp;amp;#39;...&lt;/h2&gt;
&lt;p&gt;Knack&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-03 11:14:26.643000-04:00&lt;/p&gt;
&lt;p&gt;So the deal is definitely off the table? That's unfortunate. Sorry to
hear that.
As the deal is gone (as I understood), the only person you need to
satisfiy is yourself. That's good news. I would finish the project as
fast as possible, as you've been happy with your style and content in
the first place. And then be proud of it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-your-goal-for-writing-this-book-how-would"&gt;
&lt;h2&gt;What is your goal for writing this book? How would...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-07 06:03:24.632000-04:00&lt;/p&gt;
&lt;p&gt;What is your goal for writing this book? How would having a publisher
help you achieve your goal?
&amp;quot;dinosaur publishing company&amp;quot;
Yes, the publishing industry is changing. However, publishers do still
add value. Just think O'Reilly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="as-james-says-self-publish-today-it-is-the-way-t"&gt;
&lt;h2&gt;As James says, self publish. Today it is the way t...&lt;/h2&gt;
&lt;p&gt;Tucanae Services&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-03 12:54:05.902000-04:00&lt;/p&gt;
&lt;p&gt;As James says, self publish. Today it is the way to go.
Get yourself a amazon publishers account set up. Retweek your content
for epub. Get an account with LuLu or Smartwords to support your hard
copy followers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-just-have-to-add-a-ditto-why-would-any-author-t"&gt;
&lt;h2&gt;I just have to add a ditto. Why would any author t...&lt;/h2&gt;
&lt;p&gt;Lee Daniel Crocker&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-03 13:18:19.967000-04:00&lt;/p&gt;
&lt;p&gt;I just have to add a ditto. Why would any author today deal with a
dinosaur publishing company? Just publish it yourself and keep all the
money.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="made-almost-all-of-the-suggested-changes"&gt;
&lt;h2&gt;made almost all of the suggested changes ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-07 05:58:32.197000-04:00&lt;/p&gt;
&lt;p&gt;... made almost all of the suggested changes ...
... unhappy with &amp;quot;digressive&amp;quot; material ...
... digressions were of some value because they could
fill in some of the gaps I observed while coaching and teaching
programmers over the last few decades ...
So, you cared enough about the reader not to get rid of the &amp;quot;digressive&amp;quot;
material.
... one smooth story line ...
How could anyone think that learning a language is one smooth and linear
process?
I am trying to work my way through your Python book and your writing is
cool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dude-self-publish-it-39-s-a-real-option"&gt;
&lt;h2&gt;Dude self publish. It&amp;amp;#39;s a real option.&lt;/h2&gt;
&lt;p&gt;James Thiele&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-03 11:06:09.293000-04:00&lt;/p&gt;
&lt;p&gt;Dude self publish. It's a real option.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="choose-the-path-that-will-result-in-a-book-that-is"&gt;
&lt;h2&gt;Choose the path that will result in a book that is...&lt;/h2&gt;
&lt;p&gt;Lennart Regebro&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-09 04:13:50.730000-04:00&lt;/p&gt;
&lt;p&gt;Choose the path that will result in a book that is good enough for you
to live with it, but involves the least amount of work.
Writing computer books in specialized topics (such as Python) is rarely
a profitable venture. You do it because it's fun, because the book is
needed or as a vanity project. Or, as in my case, all three.
But you are highly unlikely to ever get any significant amount of money,
so do whatever it takes to make a book that is good enough for you, but
no more.
Then self-publish it. If you live in the US or any country where they
can send you money via bank-transfer, Amazons self-publishing company
CreateSpace is a definite option.
I wrote a bit on the experience I had here:
&lt;a class="reference external" href="http://regebro.wordpress.com/2011/10/24/self-publishing-a-book-part-1-why-and-how/"&gt;http://regebro.wordpress.com/2011/10/24/self-publishing-a-book-part-1-why-and-how/&lt;/a&gt;
I'll write a bit on my experience with CreateSpace soonish.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>MADExpo 2012</title><link href="https://slott56.github.io/2012_06_26-madexpo_2012.html" rel="alternate"></link><published>2012-06-26T08:00:00-04:00</published><updated>2012-06-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-26:/2012_06_26-madexpo_2012.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://madexpo.us/"&gt;http://madexpo.us/&lt;/a&gt;
June 27 - 29
Hampton, VA&lt;/p&gt;
&lt;p&gt;I hope to see you there.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#MADExpo"></category><category term="#python"></category></entry><entry><title>QR Code</title><link href="https://slott56.github.io/2012_06_21-qr_code.html" rel="alternate"></link><published>2012-06-21T08:00:00-04:00</published><updated>2012-06-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-21:/2012_06_21-qr_code.html</id><summary type="html">&lt;p&gt;I suddenly realized that QR Codes are everywhere.
Except my business cards.
&lt;a class="reference external" href="http://pypi.python.org/pypi/qrcode/2.0"&gt;http://pypi.python.org/pypi/qrcode/2.0&lt;/a&gt;
That should allow me to solve that problem and move on.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="http-zxing-appspot-com-generator"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://zxing.appspot.com/generator/"&gt;http://zxing.appspot.com/generator/&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-24 03:02:38.966000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zxing.appspot.com/generator/"&gt;http://zxing.appspot.com …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I suddenly realized that QR Codes are everywhere.
Except my business cards.
&lt;a class="reference external" href="http://pypi.python.org/pypi/qrcode/2.0"&gt;http://pypi.python.org/pypi/qrcode/2.0&lt;/a&gt;
That should allow me to solve that problem and move on.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="http-zxing-appspot-com-generator"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://zxing.appspot.com/generator/"&gt;http://zxing.appspot.com/generator/&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-24 03:02:38.966000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zxing.appspot.com/generator/"&gt;http://zxing.appspot.com/generator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-24 10:03:00.132000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by a blog administrator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="check-out-cardcloud-com"&gt;
&lt;h2&gt;Check out cardcloud.com&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-24 08:01:03.036000-04:00&lt;/p&gt;
&lt;p&gt;Check out cardcloud.com&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Dereliction of Duty</title><link href="https://slott56.github.io/2012_06_19-dereliction_of_duty.html" rel="alternate"></link><published>2012-06-19T08:00:00-04:00</published><updated>2012-06-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-19:/2012_06_19-dereliction_of_duty.html</id><summary type="html">&lt;p&gt;Recently started looking into &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Metadata_registry"&gt;Metadata
Registries&lt;/a&gt; and
UDEF and related semantic technology.&lt;/p&gt;
&lt;p&gt;The Wikipedia page lists a bunch of relevant Metadata Registry
projects and commercial products.  Very nice.  Easy to follow the
links and determine features and benefits.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;A client has IBM Cognos.  Is there any easy to to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently started looking into &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Metadata_registry"&gt;Metadata
Registries&lt;/a&gt; and
UDEF and related semantic technology.&lt;/p&gt;
&lt;p&gt;The Wikipedia page lists a bunch of relevant Metadata Registry
projects and commercial products.  Very nice.  Easy to follow the
links and determine features and benefits.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;A client has IBM Cognos.  Is there any easy to to see what kind of
Metadata features are part of Cognos?&lt;/p&gt;
&lt;p&gt;No.  Not really.&lt;/p&gt;
&lt;p&gt;I wondered about this marketing gap.  Why doesn't IBM (or Oracle,
they're pretty bad at this also) provide a tidy list of features?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They're so big (and arrogant) that they don't feel the need to do any
marketing?&lt;/li&gt;
&lt;li&gt;They're so paranoid that they don't want to have their products
reduce to a simple bullet list?&lt;/li&gt;
&lt;li&gt;They're sales people are so good that they don't need a web presence
to sell their products?&lt;/li&gt;
&lt;li&gt;They already have such tight wired-in relationships that they don't
need to do any marketing?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or is it the &amp;quot;growth by acquisition&amp;quot; problem?  Since IBM acquired
Cognos, they hesitate to commit to a list of features?&lt;/p&gt;
&lt;p&gt;Whatever the reason, it's frankly difficult to include IBM products
in an easy-to-understand info-graphic comparing alternative products.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="difficult-to-include-ibm-products-in-an-e"&gt;
&lt;h2&gt;difficult to include IBM products in an e...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-19 17:13:02.621000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt;difficult to include IBM products
&amp;gt;in an easy-to-understand info-graphic
&amp;gt;comparing alternative products
Perhaps that is their goal?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="metadata"></category><category term="udef"></category><category term="cognos"></category></entry><entry><title>IBM RAMAC Device: 5 MB</title><link href="https://slott56.github.io/2012_06_14-ibm_ramac_device_5_mb.html" rel="alternate"></link><published>2012-06-14T08:00:00-04:00</published><updated>2012-06-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-14:/2012_06_14-ibm_ramac_device_5_mb.html</id><summary type="html">&lt;p&gt;Check out this picture.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.petapixel.com/2011/12/27/what-5mb-of-storage-looked-like-in-1956/"&gt;http://www.petapixel.com/2011/12/27/what-5mb-of-storage-looked-like-in-1956/&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="random-reminiscing-follows"&gt;
&lt;h2&gt;Random Reminiscing Follows&lt;/h2&gt;
&lt;p&gt;When I was in college (1974-1978) 64K of RAM was the size of a
refrigerator.&lt;/p&gt;
&lt;p&gt;By 1982, 64K of RAM was an Apple ][+ fully tricked out with the 16K
expansion card.&lt;/p&gt;
&lt;p&gt;I vaguely remember working …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Check out this picture.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.petapixel.com/2011/12/27/what-5mb-of-storage-looked-like-in-1956/"&gt;http://www.petapixel.com/2011/12/27/what-5mb-of-storage-looked-like-in-1956/&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="random-reminiscing-follows"&gt;
&lt;h2&gt;Random Reminiscing Follows&lt;/h2&gt;
&lt;p&gt;When I was in college (1974-1978) 64K of RAM was the size of a
refrigerator.&lt;/p&gt;
&lt;p&gt;By 1982, 64K of RAM was an Apple ][+ fully tricked out with the 16K
expansion card.&lt;/p&gt;
&lt;p&gt;I vaguely remember working with a &amp;quot;tower&amp;quot; device that was a 5MB disk
drive.  Think &lt;a class="reference external" href="http://www.apple.com/macpro/"&gt;Mac Pro&lt;/a&gt; case to hold a
disk drive.&lt;/p&gt;
&lt;p&gt;By 1985 or so, 128K or RAM was a Macintosh and a 5MB disk drive a big
desktop console box.  Smaller than a tower.  Irritating because it took
up so much real-estate when compared with the Mac itself that was
designed to take up an 8 x 11 space (not including keyboard or mouse).
Now 5MB is round-off error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-important"&gt;
&lt;h2&gt;What's Important?&lt;/h2&gt;
&lt;p&gt;Has computing gotten that much better?&lt;/p&gt;
&lt;p&gt;Old folks (like me) reminisce about running large companies on small
computers.  Now, we can't even get our coffee in the morning without the
staggering capabilities of a 32GB iPhone.&lt;/p&gt;
&lt;p&gt;Old folks, however, are sometimes mired in bad waterfall development
methods and don't understand the value of test-driven development.&lt;/p&gt;
&lt;p&gt;While the hardware is amazing, the development tools and techniques
have improved, also.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="hardware"></category><category term="software process improvement"></category><category term="tdd"></category><category term="methodology"></category></entry><entry><title>The Universal Data Element Framework (UDEF)</title><link href="https://slott56.github.io/2012_06_12-the_universal_data_element_framework_udef.html" rel="alternate"></link><published>2012-06-12T08:00:00-04:00</published><updated>2012-06-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-12:/2012_06_12-the_universal_data_element_framework_udef.html</id><summary type="html">&lt;p&gt;Okay.  This is seriously cool.&lt;/p&gt;
&lt;p&gt;The Universal Data Element Framework (UDEF)  provides a controlled
vocabulary that should be used to seed a project's data model.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.udef.com/"&gt;http://www.udef.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.opengroup.org//udef/"&gt;http://www.opengroup.org//udef/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We're looking at applying UDEF retroactively to an existing schema.&lt;/p&gt;
&lt;p&gt;What a pain in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Okay.  This is seriously cool.&lt;/p&gt;
&lt;p&gt;The Universal Data Element Framework (UDEF)  provides a controlled
vocabulary that should be used to seed a project's data model.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.udef.com/"&gt;http://www.udef.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.opengroup.org//udef/"&gt;http://www.opengroup.org//udef/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We're looking at applying UDEF retroactively to an existing schema.&lt;/p&gt;
&lt;p&gt;What a pain in the neck!&lt;/p&gt;
&lt;p&gt;Step 1.  Parse the table names.  In our case, they're simply
CONTIGUOUSSTRINGSOFCHARS, so we have to work out a quick lexicon and use
that to break the names into words.  Then we can find the obvious
aliases, spelling mistakes and noise words.  'spec', 'quanitity' and
'for' are examples of each.&lt;/p&gt;
&lt;p&gt;Step 2.  Look up the various words in the UDEF vocabulary to create
candidate matches.   Since each individual word is matched, each table
will have multiple candidate matches to seed the analyst's thinking.&lt;/p&gt;
&lt;p&gt;Step 3.  Manually pick UDEF standard names or create internal extensions
to the standard for the problem domain or enterprise unique features.
Do a similar thing for the column names.  In that case, they're
CamelCaseWithSomeACRONYMS.  This is slightly easier to parse, but not
much.&lt;/p&gt;
&lt;p&gt;Eventually, we have to apply real human business analyst grey matter to
locating standard names which might fit with the host of legacy names.&lt;/p&gt;
&lt;p&gt;Here's the column name parser.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def property_word_iter( prop_name ):
    &amp;quot;&amp;quot;&amp;quot;Find words via case changes.

    -   Lower to upper ends a word.
    -   Upper to lower ends a word.  However.
        Sometimes the Upper is an acronym that was all caps.
        A lookahead is required to disambiguate.
    &amp;quot;&amp;quot;&amp;quot;
    cc_iter= iter(prop_name)
    word=[ next(cc_iter) ]
    for c in cc_iter:
        if c.isdigit():
            yield ''.join(word)
            yield c
            word=[ next(cc_iter) ]
        if word[-1].islower() and c.islower():
            word.append(c)
        elif word[-1].isupper() and c.isupper():
            word.append(c)
        elif word[-1].islower() and c.isupper():
            yield ''.join(word)
            c2= next(cc_iter)
            if c2.isupper():
                word= [c, c2]
            else:
                word= [c.lower(), c2]
        elif word[-1].isupper() and c.islower():
            c0 = word[-1]
            yield ''.join(word[:-1])
            word= [c0.lower(), c]
        else:
            raise Exception( &amp;quot;What? {0!r} {1!r}&amp;quot;.format( word[-1], c ) )
    if word:
        yield ''.join(word)
&lt;/pre&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="software design"></category><category term="UDEF"></category></entry><entry><title>Stingray Schema-Based File Reader</title><link href="https://slott56.github.io/2012_06_07-stingray_schema_based_file_reader.html" rel="alternate"></link><published>2012-06-07T08:00:00-04:00</published><updated>2012-06-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-07:/2012_06_07-stingray_schema_based_file_reader.html</id><summary type="html">&lt;p&gt;Just updated the &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;Stingray
Reader&lt;/a&gt;.  There was
an egregious error (and a missing test case).  I fixed the error, but
didn't add a test case to cover the problem.
It's simple laziness.  TDD is quite clear on how to tackle this kind of
thing.  Write the missing test case (which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just updated the &lt;a class="reference external" href="https://sourceforge.net/projects/stingrayreader/"&gt;Stingray
Reader&lt;/a&gt;.  There was
an egregious error (and a missing test case).  I fixed the error, but
didn't add a test case to cover the problem.
It's simple laziness.  TDD is quite clear on how to tackle this kind of
thing.  Write the missing test case (which will now fail).  Then make
the code change.
But the code change was so simple.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Your contents are more then sufficient for me.
&amp;lt;a ...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-30 07:40:44.138000-04:00&lt;/p&gt;
&lt;p&gt;Your contents are more then sufficient for me.
&lt;a class="reference external" href="http://www.realbookie.com"&gt;bookie service&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="i-am-sure-you-have-a-great-fan-following-out-there"&gt;
&lt;h2&gt;I am sure you have a great fan following out there...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-23 02:11:28.318000-04:00&lt;/p&gt;
&lt;p&gt;I am sure you have a great fan following out there.
&lt;a class="reference external" href="http://www.c2logix.com/"&gt;www.c2logix.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="#python"></category><category term="tdd"></category><category term="stingray reader"></category></entry><entry><title>COBOL Rework</title><link href="https://slott56.github.io/2012_06_05-cobol_rework.html" rel="alternate"></link><published>2012-06-05T08:00:00-04:00</published><updated>2012-06-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-06-05:/2012_06_05-cobol_rework.html</id><summary type="html">&lt;p&gt;See this article: &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/9227263/The_Cobol_Brain_Drain?taxonomyId=154"&gt;The COBOL Brain
Drain&lt;/a&gt;&amp;quot;
in ComputerWorld.  This article is very, very well written and repeats
a number of common fallacies.&lt;/p&gt;
&lt;p&gt;The fallacies lead to expensive, labor-intensive in-house software
development and maintenance.  Either there's a lot of effort poking at
the COBOL code.  Or there's a lot of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this article: &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/9227263/The_Cobol_Brain_Drain?taxonomyId=154"&gt;The COBOL Brain
Drain&lt;/a&gt;&amp;quot;
in ComputerWorld.  This article is very, very well written and repeats
a number of common fallacies.&lt;/p&gt;
&lt;p&gt;The fallacies lead to expensive, labor-intensive in-house software
development and maintenance.  Either there's a lot of effort poking at
the COBOL code.  Or there's a lot of extra code to &amp;quot;wrap&amp;quot; the COBOL
code so that it's never touched.&lt;/p&gt;
&lt;p&gt;&amp;quot;Migrating large-scale systems built in Cobol is costly and risky.&amp;quot;  A
popular position.  But the risks are actually quite small; possibly
non-existent.  The risks of not converting are usually higher than the
risk of conversion.&lt;/p&gt;
&lt;p&gt;The perception of the COBOL code is that it's filled with decades of
tricky, nuanced legacy details that are hard to fully understand.
This is only partially true.&lt;/p&gt;
&lt;p&gt;A great deal of the tricky code is simply redundant.  COBOL is often
written with copy-and-paste programming and blocks of code are simply
repeated.  It's also important to note that some of the code is no
longer exercised in the first place.&lt;/p&gt;
&lt;div class="section" id="mythical-risk"&gt;
&lt;h2&gt;Mythical Risk&lt;/h2&gt;
&lt;p&gt;The &amp;quot;risk&amp;quot; comes from the perceived opacity of  the tricky, nuanced
legacy details.  It doesn't appear to be clear what they mean.  How
can a project be started when the requirements aren't fully
understood?&lt;/p&gt;
&lt;p&gt;What appears to be the case in reality is is that this tricky code
isn't very interesting.  Most COBOL programs don't do much.  They can
often be summarized in a few sentences and bullet points.&lt;/p&gt;
&lt;p&gt;Detailed analysis (641,000 lines of code, 933 programs) reveals that
COBOL programs often contain several commingled feature sets.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The actual business rules.  These are often easy to find in the code
and can also be articulated by key users.  The real work is usually
quite simple.&lt;/li&gt;
&lt;li&gt;A bunch of hackarounds.  These are hacks to work around bugs that
occur elsewhere in the processing.  Sometimes a hackaround introduces
additional problems which require yet more hackarounds.  All of this
can be ignored.&lt;/li&gt;
&lt;li&gt;Solutions to COBOL data representation issues.  Most of these seem to
be &amp;quot;subtype&amp;quot; issues: a flag or indicator is introduced to distinguish
between subtypes.  Often, these are extensions.  A field that has a
defined range of values (&amp;quot;A&amp;quot;, &amp;quot;C&amp;quot; or &amp;quot;D&amp;quot;) has a few instances of &amp;quot;*&amp;quot;
to indicated another subclass that was introduced with a non-standard
code for peculiar historical reasons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we separate the real code from the hackarounds and the
representation issues, we find that most COBOL programs are trivial.
About 46% of the lines of code (74% of the distinct programs)
involves programs that read one to four files to write a report.  In
effect, these programs do a simple &amp;quot;relational join&amp;quot; or query.  These
programs have single-sentence summaries.&lt;/p&gt;
&lt;p&gt;The hackaround problem is profound.  When looking at COBOL code,
there may be endless copy-and-paste IF-statements to handle some
issue.  There may be whole suites of programs designed to work around
some issue with a third-party package.  There may be suites of
programs to deal with odd product offerings or special customer
relationships.&lt;/p&gt;
&lt;p&gt;The remaining 26% of the non-trivial programs follow a normal
distribution of 1/4 simple, 1/2 moderately complex, and 1/4
regrettably and stupidly complex.  That final 5% of the programs will
also be a whopping 20% of the lines of code.  They are the few big
programs that really matter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="risk-mitigation"&gt;
&lt;h2&gt;Risk Mitigation&lt;/h2&gt;
&lt;p&gt;The risk mitigation strategy involves several parts.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Data Profiling.  The COBOL data may have considerable value.  The
processing is what we're trying to rewrite into a modern language.
A profile of every field of every file will reveal that (a) most
of the data is usable and (b) the unusable portion of the data
isn't very valuable.&lt;/li&gt;
&lt;li&gt;Triage.  We can summarize 80% of the code in simple sentences.
46% of the code is single-sentence summaries.  34% of the code
has multiple sentence summaries.  The remaining 20% requires
in-depth analysis because the programs are large; they average of
2400 lines of code each.&lt;/li&gt;
&lt;li&gt;Test-Driven Reverse Engineering.  Since a 5% of the programs do
the real updates, it's important to collect the inputs and outputs
of these few programs.  This forms a core test suite.&lt;/li&gt;
&lt;li&gt;Agile Methods.  Find the user stories which really matter.  Find
the COBOL programs that implement those user stories.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The most important risk reduction strategy is to take an Agile
approach.  We need to prioritize based on value creation.  All
COBOL programs are not created equal.  Some fraction can simply be
ignored.  Another fraction produces relatively low value, and can
be converted last.&lt;/p&gt;
&lt;p&gt;The second most important risk mitigation is to build conversions
from legacy COBOL files to the new, preferred databases.  The data
is preserved.&lt;/p&gt;
&lt;p&gt;There's almost no risk in rewriting the 46% of low-complexity
COBOL lines of code.  This code is trivial.  Note that some of
this code actually has no business value.  Simply ignoring the
no-value code also reduces risk.  Since we're using live files to
drive testing, we can easily prove that our new programs work.&lt;/p&gt;
&lt;p&gt;It's not risky to focus on the 20% of high-value COBOL lines of code.
This contains most (or all) of the processing that the business
needs to have preserved.  They can articulate the user stories; it's
easy to confirm that the COBOL does what the business needs.  It's
easy to use live data to drive the reverse engineering.&lt;/p&gt;
&lt;p&gt;The remaining 34% of the code base may actually involve a small
amount of overlooked complexity.  There may be a nuance here that
really matters.&lt;/p&gt;
&lt;p&gt;This overlooked &amp;quot;nuance&amp;quot; is something that the users didn't
articulate, but it showed up in our unit testing.  We couldn't
reproduce an expected output because we didn't correctly locate all
the processing steps.  It wasn't in our summary of the 80% of
moderate-to-low complexity programs.  It wasn't in our detailed
analysis of the 20% subset of hyper-complex, large programs.&lt;/p&gt;
&lt;p&gt;We've reduced the risk by reducing the volume of code that needs to
be examined under the microscope. We've reduced the risk by using
live files for parallel testing.  We've reduced the risk by
collecting user stories.&lt;/p&gt;
&lt;p&gt;The remaining risks are ordinary project risks, unrelated to COBOL or
legacy data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-other-great-lie"&gt;
&lt;h2&gt;The Other Great Lie&lt;/h2&gt;
&lt;p&gt;Another popular fallacy is this:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&amp;quot;The business wants us to make investments in programming that buys&lt;/div&gt;
&lt;div class="line"&gt;them new revenue. Rewriting an application doesn't buy them any&lt;/div&gt;
&lt;div class="line"&gt;value-add&amp;quot;.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The value-add is to create a nimble business.  Purging the COBOL has a
lot of advantages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It reduces the total number of lines of code.  Reducing costs.
Improving time-to-market for an IT solution to a business problem.&lt;/li&gt;
&lt;li&gt;It reduces the number of technologies competing for mind-share.  Less
thinking about the legacy applications is less time wasted solving
problems.&lt;/li&gt;
&lt;li&gt;It reduces the architectural complexity.  If the architecture is a
spaghetti-bowl of interconnections between Web and Legacy COBOL and
Desktop, then following the spaghetti-like connections is simply a
kind of intellectual friction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The COBOL does not need to be purged all at once through a magical
&amp;quot;big-bang&amp;quot; replacement.  It needs to be phased out.&lt;/p&gt;
&lt;p&gt;Agile techniques need to be applied.  A simple backlog of high-value
COBOL-based user stories is the place to start.  The prioritization
of these stories needs to then be clustered around the data files.&lt;/p&gt;
&lt;p&gt;Ideally all of the programs which create or update a given file (or
related group of files) can be rewritten in a tidy package.  The old
files can be used for Test-Driven Reverse Engineering.  Once the
programs have been rewritten, the remaining COBOL legacy applications
can continue to operate, using a file created by a non-COBOL
application.&lt;/p&gt;
&lt;p&gt;Each file (and related cluster of programs) is replaced from
high-value down to low-value.  Each step creates a more nimble
organization.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="test-driven reverse engineering"></category><category term="data conversion"></category><category term="COBOL"></category></entry><entry><title>The Passive-Aggressive Programmer (again)</title><link href="https://slott56.github.io/2012_05_31-the_passive_aggressive_programmer_again.html" rel="alternate"></link><published>2012-05-31T08:00:00-04:00</published><updated>2012-05-31T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-31:/2012_05_31-the_passive_aggressive_programmer_again.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I'm not even interested in psychology.  But.  This kind of thing seems
to come up once in a great while.&lt;/div&gt;
&lt;div class="line"&gt;You're asked (or &amp;quot;forced&amp;quot;) to work with someone who—essentially—fails
to cooperate.  They don't actively disagree or actively suggest
something better.  They passively fail to agree.&lt;/div&gt;
&lt;div class="line"&gt;In fact, they …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I'm not even interested in psychology.  But.  This kind of thing seems
to come up once in a great while.&lt;/div&gt;
&lt;div class="line"&gt;You're asked (or &amp;quot;forced&amp;quot;) to work with someone who—essentially—fails
to cooperate.  They don't actively disagree or actively suggest
something better.  They passively fail to agree.&lt;/div&gt;
&lt;div class="line"&gt;In fact, they probably disagree.  They may actually have an idea of
their own.&lt;/div&gt;
&lt;div class="line"&gt;But they prefer to passively &amp;quot;fail to agree.&amp;quot;&lt;/div&gt;
&lt;div class="line"&gt;I have little patience to begin with.  And I had noted my personal
inability to cope in &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/architecture/C551260341/E20071129060000/index.html"&gt;The Passive-Aggressive Programmer or Why Nothing
Gets
Done&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Recently, I received this.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&amp;quot;I thought I was going crazy and started doubting myself when dealing
with a PAP co-worker. I went out on the internet searching for help
and ran into your blog and its helped me realize that I'm not crazy.
The example conversations you posted are almost every day occurrences
here at my job when dealing with my co-worker. From outside of the
department it was oh those two just butt-heads because I never knew
how to communicate or point out that really I'm a targeted victim of
a PAP rather than a butting heads issue. No matter what approach I
took with the PAP I was doomed and still not quite sure where to go
from here. Would you happen to offer any advice on how to actually
deal with PAP? It's driven me to a point where I'm looking for new
employment because my employer won't deal with it.&amp;quot;&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I really have no useful advice.  There's no way to &amp;quot;force&amp;quot; them to
agree with anything specific.  In some cases, there's no easy to even
determine what they might agree with.&lt;/div&gt;
&lt;div class="line"&gt;Your employer will only &amp;quot;deal with&amp;quot; problems that cause them real
pain.  If you're butting heads, but still getting things done, then
there's no real pain.  You're successful, even if you're unhappy.&lt;/div&gt;
&lt;div class="line"&gt;If you want to be both happy &lt;em&gt;and&lt;/em&gt; successful, you need to stop doing
things that make you unhappy.  If you can't agree with a co-worker,
you can butt heads (which makes you unhappy) or you can ignore them
(which may make you happy.)&lt;/div&gt;
&lt;div class="line"&gt;Ignoring them completely may mean that things will stop getting done.
 You may appear less successful.  If you stop being successful, then
your employer will start to feel some pain.&lt;/div&gt;
&lt;div class="line"&gt;When you employer feels pain, they will take action to relieve the
pain.&lt;/div&gt;
&lt;div class="line"&gt;You might want to try to provide clear, complete documentation of your
colleague's ideas, whatever they are.  If you write down the
Passive-Aggressive Programmer's &amp;quot;suggestions&amp;quot;, then you might be able
to demonstrate what's causing the pain.  Since a properly passive
programmer never actually agrees with anything, it's tricky to pin
them down to anything specific.&lt;/div&gt;
&lt;div class="line"&gt;You might be able to make it clear that they're the roadblock that
needs to be removed.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="if-you-want-to-be-both-satisfied-and-effective-yo"&gt;
&lt;h2&gt;If you want to be both satisfied and effective, yo...&lt;/h2&gt;
&lt;p&gt;Charles Petal&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-05-31 15:24:41.962000-04:00&lt;/p&gt;
&lt;p&gt;If you want to be both satisfied and effective, you need to quit doing
factors that create you disappointed.
&lt;a class="reference external" href="http://www.01com.com/imintouch-remote-desktop"&gt;remote desktop
connection&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-you-feel-that-agreement-is-necessary-just-keep"&gt;
&lt;h2&gt;If you feel that agreement is necessary just keep ...&lt;/h2&gt;
&lt;p&gt;Gordon J Milne&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-03 01:03:50.630000-04:00&lt;/p&gt;
&lt;p&gt;If you feel that agreement is necessary just keep saying &amp;quot;I will take
your silence as tacit agreement to proceed&amp;quot;. [silence implies consent]
Either Mr/Ms Passive-Aggressive will counter argue or give up and leave.
Still with 30 years experience under your belt I am surprised you have
ended up working alongside a PAP.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="passive-aggressive programmer"></category><category term="software process improvement"></category></entry><entry><title>Mid-Atlantic Design Expo (MADExpo)</title><link href="https://slott56.github.io/2012_05_29-mid_atlantic_design_expo_madexpo.html" rel="alternate"></link><published>2012-05-29T08:00:00-04:00</published><updated>2012-05-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-29:/2012_05_29-mid_atlantic_design_expo_madexpo.html</id><summary type="html">&lt;p&gt;&lt;img alt="220x250_4.jpg" src="webkit-fake-url://FFFD5FCE-633E-470E-ACEB-77A7BCBD3153/220x250_4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I'm looking forward to this.  I'll be talking about Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Python 3.2 tutorial.  I did a dry run with the help of the 757
Python group.  Made a bunch of changes based on their input.&lt;/li&gt;
&lt;li&gt;A more in-depth presentation on a good architecture of Database
Schema Migration scripts …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="220x250_4.jpg" src="webkit-fake-url://FFFD5FCE-633E-470E-ACEB-77A7BCBD3153/220x250_4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I'm looking forward to this.  I'll be talking about Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Python 3.2 tutorial.  I did a dry run with the help of the 757
Python group.  Made a bunch of changes based on their input.&lt;/li&gt;
&lt;li&gt;A more in-depth presentation on a good architecture of Database
Schema Migration scripts.  You know, the &amp;quot;open heart surgery&amp;quot; of a
database where the structure changes in some way that's not a
trivial ALTER statement.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="SQL"></category><category term="#MADExpo"></category><category term="scripted"></category><category term="star-schema"></category><category term="schema migration"></category></entry><entry><title>Delusional Project Managers</title><link href="https://slott56.github.io/2012_05_24-delusional_project_managers.html" rel="alternate"></link><published>2012-05-24T10:24:00-04:00</published><updated>2012-05-24T10:24:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-24:/2012_05_24-delusional_project_managers.html</id><summary type="html">&lt;p&gt;Maybe it's the circle-R in the PMP® signature that put me off.&lt;/p&gt;
&lt;p&gt;What's important is that the PMP-certified project manager is absolutely
married to fixed-price software development.  The idea of &amp;quot;Agile&amp;quot; was
unthinkable.  They were very clear that we had enough information to
create a fixed price.&lt;/p&gt;
&lt;p&gt;It's hard to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Maybe it's the circle-R in the PMP® signature that put me off.&lt;/p&gt;
&lt;p&gt;What's important is that the PMP-certified project manager is absolutely
married to fixed-price software development.  The idea of &amp;quot;Agile&amp;quot; was
unthinkable.  They were very clear that we had enough information to
create a fixed price.&lt;/p&gt;
&lt;p&gt;It's hard to disagree with someone who's sure that their presentation is
a pinnacle of project specification.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Slides 2 and 3 are an overview that lists some broad, vague buzzwords.&lt;/dt&gt;
&lt;dd&gt;(&amp;quot;Asset&amp;quot;, &amp;quot;Resource&amp;quot;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Slides 4 to 7 are blurry screen shots of the legacy application.  There
must be dozens of pages.  We were shown four.&lt;/p&gt;
&lt;p&gt;Slide 8 is a list of project objectives with no priorities, actors or
user stories.  &amp;quot;Modify tool navigation to be more intuitive and
efficient.&amp;quot;  That's the kind of stuff that's supposed to define the
scope with enough detail to create a fixed price.&lt;/p&gt;
&lt;p&gt;Slide 9 is  another list of objectives.  &amp;quot;Create a simple project and
resource KPI dashboard showing real-time status.&amp;quot;  I'm not even sure we
can define a fixed-price task for figuring out what this might mean.&lt;/p&gt;
&lt;p&gt;Slide 10 is a schedule in which all of the dates are &lt;strong&gt;already in the
past&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We were told -- firmly and finally -- that we were supposed to fabricate
a fixed price proposal from this PPT.  We were encouraged to ask
follow-up questions.&lt;/p&gt;
&lt;p&gt;My first follow-up question should be &amp;quot;Are you crazy?&amp;quot;&lt;/p&gt;
&lt;p&gt;My second follow-up question should be &amp;quot;How much time are you willing to
put into this effort?  If it's less than 4 hours per day, we can't
really help much.&amp;quot;&lt;/p&gt;
&lt;p&gt;I'm guessing that we're just &amp;quot;column fillers&amp;quot;.  There's an incumbent
team that has an existing proposal to extend or rewrite; we're merely
providing an outside, &amp;quot;independent&amp;quot; quote that can be used for
comparison purposes.  The incumbent team probably knows (in detail) the
actors and user stories, and has a carefully prioritized feature set.&lt;/p&gt;
&lt;p&gt;We don't even know (precisely) what's in the data model.&lt;/p&gt;
&lt;p&gt;I would like to avoid writing a &amp;quot;column filler&amp;quot; proposal that will be a
million dollars more than they had in mind.&lt;/p&gt;
&lt;p&gt;An Agile approach (5 people × 8 hrs × 15 days = 600 labor hours per
sprint) was refused.&lt;/p&gt;
&lt;p&gt;If they would reveal their budget, we could have a more meaningful
conversation on what they can get finished and delivered for that little
dribble of money.&lt;/p&gt;
&lt;p&gt;I think that PMP best practices are getting in the way of a successful
software development effort.&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="agile"></category><category term="estimating"></category></entry><entry><title>Are engineers valued?</title><link href="https://slott56.github.io/2012_05_24-are_engineers_valued.html" rel="alternate"></link><published>2012-05-24T08:00:00-04:00</published><updated>2012-05-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-24:/2012_05_24-are_engineers_valued.html</id><summary type="html">&lt;p&gt;Check out this post: &amp;quot;&lt;a class="reference external" href="http://sef.kloninger.com/2012/05/engineering-culture-litmus-tests/"&gt;Why Quit? Because They Have Bigger
Monitors&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Brilliant summary of a few small cost things that have a large impact.
How many other signals are being sent?&lt;/p&gt;
&lt;p&gt;Jim B. once pointed out that some organizations are entirely run by the
accountants.  You can have a good …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this post: &amp;quot;&lt;a class="reference external" href="http://sef.kloninger.com/2012/05/engineering-culture-litmus-tests/"&gt;Why Quit? Because They Have Bigger
Monitors&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Brilliant summary of a few small cost things that have a large impact.
How many other signals are being sent?&lt;/p&gt;
&lt;p&gt;Jim B. once pointed out that some organizations are entirely run by the
accountants.  You can have a good idea.  You can justify the good idea.&lt;/p&gt;
&lt;p&gt;You can show ROI for the good idea.  And you can still be shot down in
flames with feeble excuses like &amp;quot;it wasn't part of this year's budget,
so we won't do it.&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="you-can-still-be-shot-down-how-about-a-differe"&gt;
&lt;h2&gt;you can still be shot down... How about a differe...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-05-27 09:19:59.657000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt;you can still be shot down
How about a different approach? How about not going the formal route to
begin with? How about having just a chit/chat to get some feedback on
idea x? How about doing y mundane day to day tasks so that when request
a chit/chat, they will actually listen.&lt;/p&gt;
&lt;p&gt;I am actually trying this at my current client site. I have suggested
applying our core expertise for which we have paying clients to a
related industry. The &amp;quot;big guy&amp;quot; said, interesting and then personally
came to my cube and apologized for having to reschedule our meeting.
How about just declaring failure and moving on? Some tribes just aren't
willing to take a risk until the barbarians are at the gate. After all,
if they take the risk and fail; they will be in trouble. If they
succeed, they will get a 1.3% raise as opposed to a 1%.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Flickr, Innovation and Integration</title><link href="https://slott56.github.io/2012_05_17-flickr_innovation_and_integration.html" rel="alternate"></link><published>2012-05-17T08:00:00-04:00</published><updated>2012-05-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-17:/2012_05_17-flickr_innovation_and_integration.html</id><summary type="html">&lt;p&gt;Read this on Gizmodo: &amp;quot;&lt;a class="reference external" href="http://gizmodo.com/5910223/how-yahoo-killed-flickr-and-lost-the-internet"&gt;How Yahoo Killed Flickr and Lost the
Internet&lt;/a&gt;&amp;quot;
Compelling stuff: &amp;quot;Integration Is The Enemy of Innovation&amp;quot;.
&amp;quot;[Corporate Development milestones] often completely ignore what made
the smaller target valuable in the first place.&amp;quot;
Lessons learned: it's hard to apply structured, formal, financial
controls to innovation.  As soon …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this on Gizmodo: &amp;quot;&lt;a class="reference external" href="http://gizmodo.com/5910223/how-yahoo-killed-flickr-and-lost-the-internet"&gt;How Yahoo Killed Flickr and Lost the
Internet&lt;/a&gt;&amp;quot;
Compelling stuff: &amp;quot;Integration Is The Enemy of Innovation&amp;quot;.
&amp;quot;[Corporate Development milestones] often completely ignore what made
the smaller target valuable in the first place.&amp;quot;
Lessons learned: it's hard to apply structured, formal, financial
controls to innovation.  As soon as the accountants show up, innovation
will be stopped.  Someone has to champion the freedom to innovate in
spite of being part of a profit-seeking corporation.&lt;/p&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="software process improvement"></category></entry><entry><title>More of Disruptive Technology Change</title><link href="https://slott56.github.io/2012_05_08-more_of_disruptive_technology_change.html" rel="alternate"></link><published>2012-05-08T08:00:00-04:00</published><updated>2012-05-08T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-08:/2012_05_08-more_of_disruptive_technology_change.html</id><summary type="html">&lt;p&gt;There's a cool infographic on technology change in FrugalDad.  See &lt;a class="reference external" href="http://frugaldad.com/personal-technology/"&gt;The
Great Disruption: The Future of Personal
Tech&lt;/a&gt;.  It's interesting
and informative, but the few predictions it makes are not really
&lt;em&gt;disruptive&lt;/em&gt;.  You wouldn't see anyone lobbying against the suggested
future directions.  They're all good ideas that leverage existing
technology …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's a cool infographic on technology change in FrugalDad.  See &lt;a class="reference external" href="http://frugaldad.com/personal-technology/"&gt;The
Great Disruption: The Future of Personal
Tech&lt;/a&gt;.  It's interesting
and informative, but the few predictions it makes are not really
&lt;em&gt;disruptive&lt;/em&gt;.  You wouldn't see anyone lobbying against the suggested
future directions.  They're all good ideas that leverage existing
technology.&lt;/p&gt;
&lt;p&gt;On the other hand, there's a great graphic that shows how disruptive
technology is labeled as illegal.  See Infographic: &lt;a class="reference external" href="http://matadornetwork.com/change/infographic-why-the-movie-industry-is-so-wrong-about-sopa/"&gt;Why the movie
industry is so wrong about
SOPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider just one example.  Digital Movies.  The DVD was so frightening
to movie producers (or distributors or theaters or the whole supply
chain) that &lt;em&gt;discussion&lt;/em&gt; of circumvention of DVD encoding had to be made
illegal.  That kind of industry legislative action is evidence that a
technology is truly disruptive.&lt;/p&gt;
&lt;p&gt;Disruptive change will often lead to fearful rejection and legislative
action.&lt;/p&gt;
&lt;p&gt;&amp;quot;But wait,&amp;quot; you say, &amp;quot;no one tried to make the iPod illegal.&amp;quot;  Correct.&lt;/p&gt;
&lt;p&gt;The iPod is not the &lt;em&gt;core&lt;/em&gt; disruptive change.  Digital music is the
disruptive change.  The iPod is just a vehicle.  Apple is making their
money by providing a platform for digital content.&lt;/p&gt;
&lt;p&gt;If you want to know what the &lt;strong&gt;Next Big Thing&lt;/strong&gt; is, look to the US
Congress.  Lobbyists are trying to make some things illegal merely
because they're disruptive.&lt;/p&gt;
&lt;p&gt;Universal Health Care, as one example, is being fought against.  There
are lots of specious and farcical reasons being used to argue against
simplifying the insurance mess that has emerged over the last few
decades.  If Congress is fighting against it, that means the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's disruptive.  Game Changing.  Terrifying.&lt;/li&gt;
&lt;li&gt;The old school companies are spending huge lobbying and campaign
budgets to prevent change.  They are unable to adapt to a different set
of rules.&lt;/li&gt;
&lt;li&gt;Some new school companies stand to be &lt;em&gt;wildly&lt;/em&gt; profitable if the
change ever gets past the Congressional objections.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For another example, read this brilliant article: &lt;a class="reference external" href="http://gizmodo.com/5691604/how-ma-bell-shelved-the-future-for-60-years"&gt;How Ma Bell Shelved
the Future for 60
Years&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This an example of internal censorship of disruptive technology.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;More precisely, in Bell's imagination, the very knowledge that it was
possible to record a conversation would &amp;quot;greatly restrict the use of the
telephone,&amp;quot; with catastrophic consequences for its business.&lt;/p&gt;
&lt;p&gt;Businessmen, for instance, the theory supposed, might fear the potential
use of a recorded conversation to undo a written contract.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You know it's disruptive when it's actively feared.&lt;/p&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="disruption"></category></entry><entry><title>Bravo -- Iteration and Generator Functions</title><link href="https://slott56.github.io/2012_05_03-bravo_iteration_and_generator_functions.html" rel="alternate"></link><published>2012-05-03T08:00:00-04:00</published><updated>2012-05-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-03:/2012_05_03-bravo_iteration_and_generator_functions.html</id><content type="html">&lt;p&gt;See
this: &lt;a class="reference external" href="http://nedbatchelder.com/blog/201204/python_iteration_presentation.html"&gt;http://nedbatchelder.com/blog/201204/python_iteration_presentation.html&lt;/a&gt;
Nicely done, very thorough presentation on some Python fundamentals.
The nature of iteration and generator functions is easily overlooked.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>GE vs. Apple</title><link href="https://slott56.github.io/2012_05_01-ge_vs_apple.html" rel="alternate"></link><published>2012-05-01T22:39:00-04:00</published><updated>2012-05-01T22:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-05-01:/2012_05_01-ge_vs_apple.html</id><content type="html">&lt;p&gt;Read this
&lt;a class="reference external" href="http://www.forbes.com/sites/stevedenning/2012/04/25/david-brooks-competitiveness-vs-creativity-ge-vs-apple/"&gt;http://www.forbes.com/sites/stevedenning/2012/04/25/david-brooks-competitiveness-vs-creativity-ge-vs-apple/&lt;/a&gt;
It's a brilliant analysis of innovation and creativity.&lt;/p&gt;
</content><category term="Technologies"></category><category term="innovation"></category></entry><entry><title>MADExpo</title><link href="https://slott56.github.io/2012_04_26-madexpo.html" rel="alternate"></link><published>2012-04-26T16:24:00-04:00</published><updated>2012-04-26T16:24:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-04-26:/2012_04_26-madexpo.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://madexpo.us/"&gt;http://madexpo.us/&lt;/a&gt;
The &lt;strong&gt;Mid-Atlantic Developer Expo&lt;/strong&gt;.
In my backyard (more-or-less).
There's going to be this: &lt;a class="reference external" href="http://madexpo.us/Sessions/384"&gt;http://madexpo.us/Sessions/384&lt;/a&gt;
and this: &lt;a class="reference external" href="http://madexpo.us/Sessions/385"&gt;http://madexpo.us/Sessions/385&lt;/a&gt;
I'm looking forward to &lt;a class="reference external" href="http://madexpo.us/Sessions/339"&gt;http://madexpo.us/Sessions/339&lt;/a&gt;, which I'm
certainly going to attend.  Many other sessions look like fun …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://madexpo.us/"&gt;http://madexpo.us/&lt;/a&gt;
The &lt;strong&gt;Mid-Atlantic Developer Expo&lt;/strong&gt;.
In my backyard (more-or-less).
There's going to be this: &lt;a class="reference external" href="http://madexpo.us/Sessions/384"&gt;http://madexpo.us/Sessions/384&lt;/a&gt;
and this: &lt;a class="reference external" href="http://madexpo.us/Sessions/385"&gt;http://madexpo.us/Sessions/385&lt;/a&gt;
I'm looking forward to &lt;a class="reference external" href="http://madexpo.us/Sessions/339"&gt;http://madexpo.us/Sessions/339&lt;/a&gt;, which I'm
certainly going to attend.  Many other sessions look like fun, too.&lt;/p&gt;
</content><category term="Technologies"></category><category term="meetup"></category><category term="757 Labs"></category><category term="learning"></category></entry><entry><title>Should the CIO Know How to Code?</title><link href="https://slott56.github.io/2012_04_26-should_the_cio_know_how_to_code.html" rel="alternate"></link><published>2012-04-26T16:24:00-04:00</published><updated>2012-04-26T16:24:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-04-26:/2012_04_26-should_the_cio_know_how_to_code.html</id><summary type="html">&lt;p&gt;Read this Computerworld posting: &lt;a class="reference external" href="http://www.computerworld.com/s/article/9226190/Should_the_CIO_know_how_to_code_"&gt;Should the CIO know how to
code?&lt;/a&gt;
The answer is &amp;quot;Yes.&amp;quot;
The examples of &amp;quot;well-functioning non-technical CIOs&amp;quot; are people as rare
as hen's teeth.  &amp;quot;These are leaders who know what they don't know. They
are good at asking the right questions, probing for further insight, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this Computerworld posting: &lt;a class="reference external" href="http://www.computerworld.com/s/article/9226190/Should_the_CIO_know_how_to_code_"&gt;Should the CIO know how to
code?&lt;/a&gt;
The answer is &amp;quot;Yes.&amp;quot;
The examples of &amp;quot;well-functioning non-technical CIOs&amp;quot; are people as rare
as hen's teeth.  &amp;quot;These are leaders who know what they don't know. They
are good at asking the right questions, probing for further insight, and
then re-framing the answers in such a way that the business side will
understand&amp;quot;.
I'm sure there are people like this.  In the last 35 years, I've met
very, very few.  Two actually.
Larry and Chuck are the two examples.
Larry knew what he didn't know.  He took the time to actually sit with
actual developers and actually watch them work.  It was weird the first
time he sat and watched you type.  But without deep knowledge, he
couldn't be sure the projects would get done.  So he allocated an hour
or more each day to sit with key developers and learn.
Chuck did essentially the kind of thing.  He sat with each developer
individually every single day.  He did not have all-hands meetings that
lasted hours.  He did not have an &amp;quot;around the table&amp;quot; where everyone
spent 20 minutes boring the entire rest of the team with irrelevant
details.
Could they code?
Essentially, yes.  They looked at code over a developer's shoulder.
They participated in a form of &amp;quot;pair programming&amp;quot; where they watched
code happen.  By themselves they couldn't code much.  As pair
programmers, however, they could work with another programmer and get
stuff done.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="great-post-steven-i-keep-telling-my-co-workers-ho"&gt;
&lt;h2&gt;Great post Steven! I keep telling my co workers ho...&lt;/h2&gt;
&lt;p&gt;Kate Dunkin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-09-19 14:39:56.656000-04:00&lt;/p&gt;
&lt;p&gt;Great post Steven! I keep telling my co workers how &lt;a class="reference external" href="http://www.inloox.com/resource-management-software/"&gt;resource
management&lt;/a&gt; can
help you get 100 times more organized than you were before. Thank you
for sharing this with us!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="project management"></category></entry><entry><title>Patents vs. Innovation</title><link href="https://slott56.github.io/2012_03_27-patents_vs_innovation.html" rel="alternate"></link><published>2012-03-27T08:00:00-04:00</published><updated>2012-03-27T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-03-27:/2012_03_27-patents_vs_innovation.html</id><summary type="html">&lt;p&gt;Read &amp;quot;&lt;a class="reference external" href="http://www.infoworld.com/d/open-source-software/why-software-patents-are-evil-188738"&gt;Why Software Patents are
Evil&lt;/a&gt;&amp;quot;
by Simon Phipps in InfoWorld.
It's an excellent summary of the problems caused by patents applied to
software.
There's a great TED Talk by Johanna Blakley on &amp;quot;&lt;a class="reference external" href="http://www.ted.com/talks/johanna_blakley_lessons_from_fashion_s_free_culture.html"&gt;Lessons Learned from
Fashion's Free
Culture&lt;/a&gt;&amp;quot;
which reinforces the essential point.
Software patents don't help anyone.  The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read &amp;quot;&lt;a class="reference external" href="http://www.infoworld.com/d/open-source-software/why-software-patents-are-evil-188738"&gt;Why Software Patents are
Evil&lt;/a&gt;&amp;quot;
by Simon Phipps in InfoWorld.
It's an excellent summary of the problems caused by patents applied to
software.
There's a great TED Talk by Johanna Blakley on &amp;quot;&lt;a class="reference external" href="http://www.ted.com/talks/johanna_blakley_lessons_from_fashion_s_free_culture.html"&gt;Lessons Learned from
Fashion's Free
Culture&lt;/a&gt;&amp;quot;
which reinforces the essential point.
Software patents don't help anyone.  The open source movement is
evidence that folks working outside the constraints of patent lawyers
are more innovative and produce high-quality software.  The Internet is
built on non-proprietary technology (TCP/IP and related protocols),
GNU/Linux, Apache and similar software componentry.  How have patents
helped?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Check out the article&lt;/p&gt;
&lt;div class="section" id="the-coming-software-patent"&gt;
&lt;h2&gt;The Coming Software Patent ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-04-29 14:48:19.071000-04:00&lt;/p&gt;
&lt;p&gt;Check out the article
The Coming Software Patent Apocalypse
July 27, 2007 by Jeff Atwood
&lt;a class="reference external" href="http://www.codinghorror.com/blog/2007/07/the-coming-software-patent-apocalypse.html"&gt;http://www.codinghorror.com/blog/2007/07/the-coming-software-patent-apocalypse.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="innovation"></category></entry><entry><title>Detailed Analysis of Disruptive Technology Change</title><link href="https://slott56.github.io/2012_03_22-detailed_analysis_of_disruptive_technology_change.html" rel="alternate"></link><published>2012-03-22T08:00:00-04:00</published><updated>2012-03-22T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-03-22:/2012_03_22-detailed_analysis_of_disruptive_technology_change.html</id><summary type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read this: &lt;a class="reference external" href="http://andrewchenblog.com/2012/03/14/why-i-doubted-facebook-could-build-a-billion-dollar-business-and-what-i-learned-from-being-horribly-wrong/"&gt;Why I doubted Facebook could build a billion dollar
business, and what I learned from being horribly
wrong&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Don't be afraid to read it again.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
when it comes to the exceptional cases, all bets are off. So keep
your mind open to weird, young [ideas] that you meet …&lt;/blockquote&gt;</summary><content type="html">&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Read this: &lt;a class="reference external" href="http://andrewchenblog.com/2012/03/14/why-i-doubted-facebook-could-build-a-billion-dollar-business-and-what-i-learned-from-being-horribly-wrong/"&gt;Why I doubted Facebook could build a billion dollar
business, and what I learned from being horribly
wrong&lt;/a&gt;.&lt;/div&gt;
&lt;div class="line"&gt;Don't be afraid to read it again.&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
when it comes to the exceptional cases, all bets are off. So keep
your mind open to weird, young [ideas] that you meet that don’t fit
the established pattern&lt;/blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Sound advice.  The best ideas are disruptive.  That means that the
idea does not fit an established pattern.&lt;/div&gt;
&lt;div class="line"&gt;The problem with being an architect is that software architecture is a
political game.&lt;/div&gt;
&lt;div class="line"&gt;In order to justify large projects with large funding, you must cater
to the folks with money who (generally) feel that disruption == risk.
 The idea of incremental effort and proofs of concept may not fly
because they've decided that inappropriate incumbent technology is
magically quicker than appropriate but novel technology.&lt;/div&gt;
&lt;div class="line"&gt;There's a profound Software Process Improvement issue here.
 Organizations can (and do) stifle innovation in an effort to
&amp;quot;improve&amp;quot; their software development process.  The false hope is that
an unchanging technology base is somehow helpful at making people more
effective.&lt;/div&gt;
&lt;div class="line"&gt;Even if you give people second-rate tools, you can eventually get to
be pretty good at using them.  However.  Using better tools might be
better than trying to get really good at using poor tools.&lt;/div&gt;
&lt;div class="line"&gt;What I find endlessly funny are folks who want &amp;quot;formal research&amp;quot; or
&amp;quot;studies&amp;quot; that prove that some new idea is actually better than
existing ideas.  You can read Stack Overflow and
programmers.stackexhcange.com questions looking for studies that
&lt;em&gt;prove&lt;/em&gt; the value of unit testing or &lt;em&gt;prove&lt;/em&gt; the value of a NoSQL
database or &lt;em&gt;prove&lt;/em&gt; that software is simpler without triggers or
stored procedures.&lt;/div&gt;
&lt;div class="line"&gt;For the moment, these are disruptive ideas.&lt;/div&gt;
&lt;div class="line"&gt;We know they're disruptive because people keep asking for proof.&lt;/div&gt;
&lt;div class="line"&gt;When they stop asking for proof, you know the idea has finally
&amp;quot;arrived&amp;quot; and it's time to move on to find the edge of the envelope
again.&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&amp;amp;quot;value of a NoSQL&amp;amp;quot;&lt;/p&gt;
&lt;div class="section" id="haven-39-t-you-hear"&gt;
&lt;h2&gt;Haven&amp;amp;#39;t you hear...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-22 19:03:34.083000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;value of a NoSQL&amp;quot;
Haven't you heard. NoSQL and Big Data is a Big Lie. Check out &amp;quot;The Big
Lie About Big Data&amp;quot; by Eric Savitz
&lt;a class="reference external" href="http://www.forbes.com/sites/ciocentral/2012/03/21/the-big-lie-about-big-data/"&gt;http://www.forbes.com/sites/ciocentral/2012/03/21/the-big-lie-about-big-data/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-have-read-this-post-collection-of-post-is-a-nic"&gt;
&lt;h2&gt;I have read this post. collection of post is a nic...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-28 01:45:37.159000-04:00&lt;/p&gt;
&lt;p&gt;I have read this post. collection of post is a nice one ..that am doing
&lt;a class="reference external" href="http://www.anusuyaw3.com/web_designing.php"&gt;website designing company chennai
india&lt;/a&gt; and &lt;a class="reference external" href="http://www.anusuyaw3.com/web_designing.php"&gt;website
development company chennai
india&lt;/a&gt;. That I will
inform about your post to my friends and all the best for your future
posts..&lt;/p&gt;
&lt;p&gt;&amp;amp;quot;architecture is a political game&amp;amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="very"&gt;
&lt;h2&gt;Very...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-22 18:14:49.906000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;architecture is a political game&amp;quot;
Very well put.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="software process improvement"></category><category term="disruption"></category></entry><entry><title>Innovation is Disruptive -- and sometimes forbidden</title><link href="https://slott56.github.io/2012_03_20-innovation_is_disruptive_and_sometimes_forbidden.html" rel="alternate"></link><published>2012-03-20T08:00:00-04:00</published><updated>2012-03-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-03-20:/2012_03_20-innovation_is_disruptive_and_sometimes_forbidden.html</id><summary type="html">&lt;p&gt;Saw this on Twitter from
&lt;a class="reference external" href="https://twitter.com/#!/hunterwalk"&gt;&amp;#64;hunterwalk&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Startups piss people off because their existence is a statement that
incumbents aren't doing their job well enough&lt;/blockquote&gt;
&lt;p&gt;Also true of IT internal innovation.  Pitch a novel, innovative idea
to management, and most organizations will find ways to avoid it.
Suggesting a bold new …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Saw this on Twitter from
&lt;a class="reference external" href="https://twitter.com/#!/hunterwalk"&gt;&amp;#64;hunterwalk&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Startups piss people off because their existence is a statement that
incumbents aren't doing their job well enough&lt;/blockquote&gt;
&lt;p&gt;Also true of IT internal innovation.  Pitch a novel, innovative idea
to management, and most organizations will find ways to avoid it.
Suggesting a bold new direction makes it look like someone isn't
doing their job.&lt;/p&gt;
&lt;p&gt;If  you want to see real push-back, try suggesting that the incumbent
technology platform needs to be replaced.&lt;/p&gt;
&lt;p&gt;As an example, consider an all-singing-all-dancing all VB shop.  The
idea that C# might be better is met with a variety of responses.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's too costly to change now.  We can't afford the training or the
licenses or something.  The list is long and often includes silly
costs based on a really bad adoption strategy.  A bad adoption plan
allows someone to defend their incumbent technology.&lt;/li&gt;
&lt;li&gt;It's too risky to change now.  What risks?  The list of risks is
often surprising and frustrating.  My favorite is the blanket &amp;quot;We
don't know what we don't know&amp;quot; risk statement.  That's designed to be
a complete show-stopper because there's no evidence to counter it.&lt;/li&gt;
&lt;li&gt;The new Visual Studio has features that make VB acceptable for
development.  It's so important to keep the legacy technology that
excuses can be made and work-arounds applied to preserve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As another example, consider replacing a 30-year old COBOL system.
As part of stalling an innovative plan, I've been told that the only
scalable transaction-processing technology is COBOL-CICS-VSAM.  This
was about five years ago, when the incumbency of COBOL might have
seemed doubtful.  But to IT staff, the idea of Java was too
innovative.&lt;/p&gt;
&lt;p&gt;The other problem was the innovative idea of a phased implementation.
Yes.  Agile thinking can be seen as disruptive to project managers;
it can appear that they don't add much value.  The idea that we'd
build &amp;quot;bridges&amp;quot; between legacy applications and new applications was
so unpleasant that we had to spend a long time discussing the
maintenance and support of throw-away code that existed just long
enough to be sure that all the &lt;em&gt;relevant&lt;/em&gt; COBOL had been rewritten.&lt;/p&gt;
&lt;p&gt;Bridges between old and new were portrayed as costly and risky.
These are the usual responses to a proposed new way of looking at
the problem.  And, of course, a phased implementation was inherently
low-value.  I've been told that a project was absolutely &amp;quot;all or
nothing&amp;quot; and no piece had value separate from the complete scope.&lt;/p&gt;
&lt;p&gt;Suggesting a change means that there's a problem, right?  It means
their 30-year track record of COBOL support is less than perfect.  It
means their ability to use VB is flawed in some way.   The only
reason for a change is because -- somehow -- &lt;em&gt;they&lt;/em&gt; have failed.&lt;/p&gt;
</content><category term="Technologies"></category><category term="innovation"></category></entry><entry><title>Document Database and Schema Design</title><link href="https://slott56.github.io/2012_03_15-document_database_and_schema_design.html" rel="alternate"></link><published>2012-03-15T08:00:00-04:00</published><updated>2012-03-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-03-15:/2012_03_15-document_database_and_schema_design.html</id><summary type="html">&lt;p&gt;As part of coming to grips with CouchDB (and a particularly odious
graph-theory problem) I've been looking around for design guidelines,
hints and tips.&lt;/p&gt;
&lt;p&gt;This MongoDB &lt;a class="reference external" href="http://www.mongodb.org/display/DOCS/Schema+Design"&gt;Schema
Design&lt;/a&gt; document
is quite helpful.  The Link vs. Embed section clarifies the essential
tradeoff here.  In SQL world, link is the only tool …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of coming to grips with CouchDB (and a particularly odious
graph-theory problem) I've been looking around for design guidelines,
hints and tips.&lt;/p&gt;
&lt;p&gt;This MongoDB &lt;a class="reference external" href="http://www.mongodb.org/display/DOCS/Schema+Design"&gt;Schema
Design&lt;/a&gt; document
is quite helpful.  The Link vs. Embed section clarifies the essential
tradeoff here.  In SQL world, link is the only tool.  In this
document-database world of CouchDB and MongoDB (as well as XML schema
design) we have a link vs. embed decision.&lt;/p&gt;
&lt;p&gt;Here is a presentation on trees (a specific kind of graph) in a document
database:  &lt;a class="reference external" href="http://www.mongodb.org/display/DOCS/Trees+in+MongoDB"&gt;Trees in MongoDB&lt;/a&gt;.  It
enumerates a number of alternatives that are part of this new, larger
design space for databases.&lt;/p&gt;
&lt;p&gt;I found this because it was referenced in the
&lt;a class="reference external" href="http://nosql.mypopescu.com/"&gt;myNoSQL&lt;/a&gt; blog, which seems to be a
collection of sometimes useful links.&lt;/p&gt;
&lt;p&gt;A September 2011 DAMA-NY meeting included a presentation on NoSQL Data
Stores.  It's findable on Google if you search for &amp;quot;dama nisql data
stores&amp;quot; [&lt;em&gt;sic; it is misspelled&lt;/em&gt;].  However, it's hard to link to
directly because of the way Google obscures the target of their search.&lt;/p&gt;
&lt;p&gt;What's important in this presentation is the slightly defensive posture
it takes about data modeling.  It seems to describe ways that relational
database modelers can cling to relevance in spite of threats represented
by &amp;quot;NoSQL&amp;quot; databases.&lt;/p&gt;
&lt;div class="section" id="the-transit-system-problem"&gt;
&lt;h2&gt;The Transit System Problem&lt;/h2&gt;
&lt;p&gt;For a particularly gnarly problem, look at the &lt;a class="reference external" href="https://developers.google.com/transit/gtfs/reference"&gt;Google Transit Feed
Specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, look at &lt;a class="reference external" href="http://www.gtfs-data-exchange.com/agency/hampton-roads-transit-hrt/"&gt;Hampton Roads
Transit&lt;/a&gt;
on the GTFS Data Exchange.&lt;/p&gt;
&lt;p&gt;How do we build a CouchDB document-centric view of this
highly-normalized graph?&lt;/p&gt;
&lt;p&gt;Route-centric?  Each route has multiple trips.  Each trip has a sequence
of stop times.  Do we repeat the stop definition over and over again?&lt;/p&gt;
&lt;p&gt;Seems silly, so perhaps it's Route - Trip - Stop-Time as a single
document with links to Stop definitions.&lt;/p&gt;
&lt;p&gt;Stop-centric?  Each stop has multiple stop-times, and each stop has a
parent route (based on trips along a route.)  While this allows us to
have a Stop document with a list of stop times and a (generally) single
Route definition, it's not too useful.&lt;/p&gt;
&lt;p&gt;We generally use transit based on the routes, not based on a single
stop.  So we need to query the stops based on a Route as well as based
on a Stop Time.  We may be able to use the CouchDB map definitions to
provide some of these alternative views of  a stop (i.e., by stop time,
by route).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-no-sql-lessons"&gt;
&lt;h2&gt;Some No SQL Lessons&lt;/h2&gt;
&lt;p&gt;What's really important here is that NoSQL schema design is not
precisely the same as RDBMS schema design.  In the RDMS world, with a
single, fixed schema, proper up-front design is life-or-death.  A great
deal of design hand-wringing is required to get the relational model
correct.  In a good organization, this design effort
involves prototyping, modeling and experimentation.  In a bad
organization, this design effort follows trivialized rules of thumb
without too many second thoughts.&lt;/p&gt;
&lt;p&gt;On the other hand, the No SQL schema design is essentially the same as
RDBMS schema design.&lt;/p&gt;
&lt;p&gt;In the NoSQL world, we still have to do prototyping, modeling and
experimentation.  We still have the three-tier separation between
conceptual, logical and physical.    Unlike the relational database,
however, these tiers are more closely aligned in a document-oriented
database.  The conceptual tier is usually very, very close to the
logical tier document structure.  The conceptual gaps are filled by
map-reduce views.  The physical tier is just the logical tier document
structure with some description of the sharding policies.&lt;/p&gt;
&lt;p&gt;We do have to be more circumspect about committing to a design.  In SQL
world, DDL is a formal commitment to a design.  DDL changes lead to
breakage; making the dependencies more clear.  In NoSQL world, there
isn't the same depth of commitment.  A technical spike which looks
promising can lead to a gradual path of progressive dependence on the
model.&lt;/p&gt;
&lt;p&gt;The breakage that comes from schema change is more manageable but can
spin out of control.  It's more manageable because we can design our
application around optional, missing and variant definitions of a
document.  It can become less manageable if we introduce too layers of
useless abstraction to handle schema evolution.&lt;/p&gt;
&lt;p&gt;The discipline of an ORM-like mapping between documents and Python
classes is somewhat helpful for keeping the design focused around
documents that have first-class meaning in the problem space.  For that
reason, &lt;a class="reference external" href="http://couchdbkit.org/"&gt;couchdbkit&lt;/a&gt; seems useful.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&amp;amp;gt;odious graph-theory problem
Why use CouchDB? W...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-16 07:44:55.282000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt;odious graph-theory problem
Why use CouchDB? Why not a true graph database like neo4j.org&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="please-consider-taking-a-step-back-and-blogging-ab"&gt;
&lt;h2&gt;Please consider taking a step back and blogging ab...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-15 20:30:23.021000-04:00&lt;/p&gt;
&lt;p&gt;Please consider taking a step back and blogging about the &amp;quot;four main
NoSQL database categories&amp;quot;. Check out &amp;quot;NoSQL and Graph Databases –
Neo4j’s Emil Eifrem at QCON London 2010&amp;quot;
(&lt;a class="reference external" href="http://glennas.wordpress.com/2011/04/02/nosql-and-graph-databases-neo4js-emil-eifrem-at-qcon-london-2010/"&gt;http://glennas.wordpress.com/2011/04/02/nosql-and-graph-databases-neo4js-emil-eifrem-at-qcon-london-2010/&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="couchdb"></category><category term="#python"></category><category term="noSQL"></category></entry><entry><title>The Moderator Problem</title><link href="https://slott56.github.io/2012_03_14-the_moderator_problem.html" rel="alternate"></link><published>2012-03-14T07:00:00-04:00</published><updated>2012-03-14T07:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-03-14:/2012_03_14-the_moderator_problem.html</id><summary type="html">&lt;p&gt;As the #3 ranked contributor on &lt;a class="reference external" href="http://programmers.stackexchange.com"&gt;http://programmers.stackexchange.com&lt;/a&gt;,
I've provided my share of advice.  554 Answers to be factual about it.
The moderators, however, have decided that I'm no longer welcome.  It
was simply shocking to be firmly (but politely) shown the door.&lt;/p&gt;
&lt;p&gt;The issue was Python.  Specifically …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As the #3 ranked contributor on &lt;a class="reference external" href="http://programmers.stackexchange.com"&gt;http://programmers.stackexchange.com&lt;/a&gt;,
I've provided my share of advice.  554 Answers to be factual about it.
The moderators, however, have decided that I'm no longer welcome.  It
was simply shocking to be firmly (but politely) shown the door.&lt;/p&gt;
&lt;p&gt;The issue was Python.  Specifically, the fact that Python uses
whitespace instead of C-style {}'s or some other notation for an
enclosed block of code.  The question -- closed by the moderators --
asked about convincing a reluctant boss to use Python instead of PHP for
web development.  The question stated that the boss liked his curly
braces.&lt;/p&gt;
&lt;p&gt;My answer pointed out several things, two of which became issues.&lt;/p&gt;
&lt;p&gt;Python doesn't use {}'s.  That means that {}'s aren't essential.  That
means the boss's preference for {}'s is a silly personal preference.&lt;/p&gt;
&lt;p&gt;Generally, there's no way to convince someone to change their personal
preference.&lt;/p&gt;
&lt;p&gt;According to a moderator, Python not using {}'s does not make {}'s
non-essential.  Even though Python does not use them, they're still --
somehow -- &lt;em&gt;essential&lt;/em&gt;.  This means that the boss referenced in the
question is not expressing a personal preference. My claim that {}'s are
not essential is merely opinion, I'm being too aggressive in stating my
opinions, and Python's syntax is not a sufficient factual basis for my
claim that {}'s are not essential.&lt;/p&gt;
&lt;p&gt;Wow.&lt;/p&gt;
&lt;p&gt;Python doesn't use {}'s.  But I'm flat-out wrong to claim that liking
{}'s is a preference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;.  And weirder.  I claimed that people mess up punctuation
frequently, but they very rarely indent incorrectly.  I've spend hours
looking at C code that was indented nicely but omitted a closing }.&lt;/p&gt;
&lt;p&gt;I've seen hundreds of Stack Overflow questions that amount to missing
punctuation.&lt;/p&gt;
&lt;p&gt;The hundreds of Stack Overflow questions where punctuation was messed up
were deemed not factual.&lt;/p&gt;
&lt;p&gt;Not factual?  Denied four separate ways.  Note that we're way beyond any
emotional response here.  I'm being told that my facts are not facts.
Denial One.  The moderator stated that they have never messed up
punctuation like {}'s.  While this may be true, it doesn't make other
people's problems fanciful.&lt;/p&gt;
&lt;p&gt;Denial Two.  Those users were &amp;quot;dumb&amp;quot; for messing up punctuation.  While
this may also be true, it doesn't make other people's problems a matter
of my opinion.&lt;/p&gt;
&lt;p&gt;Denial Three.  There are more questions with proper punctuation than
messed up punctuation.  This, too, my be true, but doesn't magically
make the other questions go away.  They still seem to exist as stubborn
irrefutable facts.  People mess up punctuation.  Perhaps they're dumb,
but they mess up.&lt;/p&gt;
&lt;p&gt;Denial Four.  The moderator simply disputed the SO evidence.  I was
simply wrong to present it.&lt;/p&gt;
&lt;p&gt;Wow again.&lt;/p&gt;
&lt;p&gt;Other folks in the Programmers Chat said we we're not seeing
&amp;quot;eye-to-eye&amp;quot;.  Wait, what?&lt;/p&gt;
&lt;p&gt;A moderator says my responses about {}'s being non-essential and people
messing up {}'s were not &lt;em&gt;factual&lt;/em&gt;.  I thought I provided &lt;em&gt;facts&lt;/em&gt;.  The
moderator then simply refuted the facts saying that the facts were not
facts.  This is a purely emotional response preventing any rational
presentation of evidence.&lt;/p&gt;
&lt;p&gt;I'm not sure that's an &amp;quot;eye-to-eye&amp;quot; issue.  That's more of a &amp;quot;I don't
like you&amp;quot; issue.&lt;/p&gt;
&lt;blockquote&gt;
[&amp;quot;You're just being a drama queen.&amp;quot;  Okay.  I was told that I had a
&amp;quot;history&amp;quot; of being &amp;quot;aggressive&amp;quot;.  If my history is the basis for
refuting the facts, that means this was merely personal.  As in &amp;quot;you're
not welcome.&amp;quot;]&lt;/blockquote&gt;
&lt;p&gt;The Moderator Problem is that there's no recourse.  I have the
third-highest reputation, but that carries no &lt;em&gt;actual&lt;/em&gt; weight.  My
answer was edited in a shockingly heavy-handed way.  The question was
closed as &amp;quot;Not Constructive&amp;quot; presumably because the boss's understanding
of programming languages (e.g., {}'s are essential) is somehow &amp;quot;correct&amp;quot;
and hardly worth responding to.  And I was told that there's no reason
to argue with the moderators, I should just &amp;quot;move on&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
[I was also told to simply roll-back the edits and see what happens
next.  That's being equally heavy-handed; a wikipedia edit war wouldn't
address the &amp;quot;I deny your facts&amp;quot; problem.]&lt;/blockquote&gt;
&lt;p&gt;The design of the stack exchange sites allows flagging questions for
moderator attention.  This is pure genius.&lt;/p&gt;
&lt;p&gt;But there's no way to flag &lt;em&gt;moderators&lt;/em&gt; for further attention.  Perhaps
a &amp;quot;revote this answer&amp;quot; kind of process where the up voters and down
voters would be notified of a change to an answer.  But that seems
complex.  And if the original voters didn't feel like revoting after a
change, the results would be indeterminate.&lt;/p&gt;
&lt;p&gt;It was suggested that I take the issue up on Programmer's Meta
(&lt;a class="reference external" href="http://meta.programmers.stackexchange.com/"&gt;http://meta.programmers.stackexchange.com/&lt;/a&gt;).  I'm not sure what would
happen.  The question is closed.  The heavy-handed edits and refutation
of facts are invisible and therefore irrelevant.  All that's left is a
&amp;quot;don't see eye-to-eye&amp;quot; situation that no one needs to care about since
the question was closed.&lt;/p&gt;
&lt;p&gt;It's hard to get over such a blatant refutation of stubborn facts.&lt;/p&gt;
&lt;p&gt;It's hard to get over a moderator simply refusing to &lt;em&gt;moderate&lt;/em&gt; but
instead taking the time to repeatedly refute simple facts.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="curly-braces-essential-how-about-all-the-languag"&gt;
&lt;h2&gt;Curly braces essential?  How about all the languag...&lt;/h2&gt;
&lt;p&gt;Joe&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-13 10:51:41.987000-04:00&lt;/p&gt;
&lt;p&gt;Curly braces essential? How about all the languages that don't use
braces? Like Fortran, Pascal, Lisp, Forth, Ada, Erlang, and who knows
how many more. It would be easier to argue that statement terminators
(semicolons, etc.) may be essential, but braces?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="while-you-certainly-have-the-right-to-express-your"&gt;
&lt;h2&gt;While you certainly have the right to express your...&lt;/h2&gt;
&lt;p&gt;SirVer&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-14 05:08:08.930000-04:00&lt;/p&gt;
&lt;p&gt;While you certainly have the right to express your opinion here Mr.
Lott, it would help an awful lot to link to the question in question -
for people not so familiar with the SO knowledge cycle.
That said, I always feel that a message consist of 50% content and 50%
presentation. For example the sentence &amp;quot;False assumption.&amp;quot; has the
content &amp;quot;I think this is a false assumption&amp;quot; for you. I believe, you try
to cut the 'obvious'. Others might read the 'obvious' as &amp;quot;I know that
better than you&amp;quot;. It is your personal opinion - your presentation should
reflect this clearly imho or the message becomes unclear: &amp;quot;I feel this
is a wrong assumption.&amp;quot; I think you want to be effective - but you
cannot be effective with people (See the 7 habits book).
The comment of Wassim suggests to me that people could have taken
offense in your presentation which could have lead to a swing of
emotions which could have led to this no-win situation here. Wassim
seems to have taken a commendable approach to this and changed
(bettered!) himself which is really the only thing one can do as one
can't change others. I would suggest you take an example in him as he
did in you and think about 'bettering' your presentation. I do not put
the blame on you (or the moderator for that matter) - but you cannot
change the moderator, only yourself.
I really hope we do not loose your knowledge and your love of sharing
it. It would be a loss for the python community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sad-to-read-this-and-the-train-wreck-se-chat-but"&gt;
&lt;h2&gt;Sad to read this and the train wreck SE chat, but ...&lt;/h2&gt;
&lt;p&gt;fumanchu&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-13 12:03:06.088000-04:00&lt;/p&gt;
&lt;p&gt;Sad to read this and the train wreck SE chat, but the most damning part
is how much latitude the moderators have to put words in your mouth.
Each answer has the look and feel like it's &amp;quot;from me&amp;quot;, but if moderators
are encouraged to replace what I say with what they prefer I had said,
I'll have to rethink my participation in Stack Exchange before
aggressive editors start making me sound just like Wikipedia. The
&amp;quot;edited&amp;quot; link isn't enough to signal that &amp;quot;my words&amp;quot; may in fact be
someone else's.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-read-through-the-chat-transcripts-that-resulted"&gt;
&lt;h2&gt;I read through the chat transcripts that resulted ...&lt;/h2&gt;
&lt;p&gt;Eric&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-13 09:21:06.743000-04:00&lt;/p&gt;
&lt;p&gt;I read through the chat transcripts that resulted from the question, er,
in question and...well, just wow. All I can think of to say is that
StackExchange is losing a huge asset if they force you out. Your handle
is very familiar to me, a frequent peruser of [python]. When there is an
exceptionally detailed and helpful Python-related answer it very
frequently comes from one of a small list of people...and you are one of
those people. All I can say is that if you start spending less time on
StackExchange it just means you have more time to spend helping in other
knowledge-circles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-curly-braces-are-essential-and-indentation-is-a"&gt;
&lt;h2&gt;If curly braces are essential and indentation is a...&lt;/h2&gt;
&lt;p&gt;TechNeilogy&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-13 10:07:18.837000-04:00&lt;/p&gt;
&lt;p&gt;If curly braces are essential and indentation is a matter of opinion,
then why is indentation style considered a key issue in coding styles
for curly brace languages?
But I understand; I grew up in the curly brace world. Significant
whitespace was downright scary to me at first, too. I overcame my fear
and so will they. It's just a shame they've chased away a valuable asset
in the interim.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-m-sorry-but-i-seem-to-be-reading-the-actual"&gt;
&lt;h2&gt;I&amp;amp;#39;m sorry, but I seem to be reading the actual...&lt;/h2&gt;
&lt;p&gt;lychee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-14 01:46:40.165000-04:00&lt;/p&gt;
&lt;p&gt;I'm sorry, but I seem to be reading the actual exchange differently.
Your original comment (in the question history) was &amp;quot;The extra curly
braces aren't really all that helpful.&amp;quot; Which is not the same as &amp;quot;{}'s
aren't essential.&amp;quot;[?]
If your statement was &amp;quot;{}s are not essential in a language&amp;quot; it makes
sense (and is fact). &amp;quot;The extra curly braces aren't really all that
helpful&amp;quot; on the other hand, is an opinion because there is no way to
determine whether it is true or not - what is &amp;quot;really&amp;quot;, or &amp;quot;helpful&amp;quot;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-shut-down-is-indeed-quite-unfair-but-you-had"&gt;
&lt;h2&gt;This shut down is indeed quite unfair, but you had...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-14 07:22:21.681000-04:00&lt;/p&gt;
&lt;p&gt;This shut down is indeed quite unfair, but you had it coming.
You do have an history of being agressive, on SO at least.
I do find your answers interesting, I even got your blog in my RSS
feeds.
But man, if you don't learn to say interesting things in a more
diplomatic way, you'll get people cumulating bad feelings about you, and
they will strike back one day (like this one), whatever the reason, just
because they can.
You can ignore this advice (which, again, comes from somebody that
actually likes to read you), but if you do so, just stop complaining
about the consequences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ok-it-39-s-about-some-months-now-since-i-39-ve"&gt;
&lt;h2&gt;Ok. It&amp;amp;#39;s about some months now since I&amp;amp;#39;ve ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-13 14:36:27.028000-04:00&lt;/p&gt;
&lt;p&gt;Ok. It's about some months now since I've decided to quit SO for a
while. You, Mr. Lott, you were the reason. In what way? Well, without
entering to the boring details let's just say that you're &amp;quot;HARD&amp;quot; with
not-so-academic-formatted-brains. I'm one of them.
BUT, your attitude made me think about why this man with worth-gold rep
is hard with me? After some extra thoughts I realized that the man with
the big rep (you Mr. Lott) is just PRECISE, and apparently I'm one of
those who don't dare to face precision. After taking a look at your
worth-being-classics books, I finally realized that I need to
re-introduce myself with computer science, the science of DETAILS.
Now, I'm enrolled in a computer science class, I'm reading math books,
I'm trying to be precise in my thoughts, and I'm somehow ashamed of
posting those kind of questions, but it seems that it was worth it. I'm
really thankful to you Mr. Lott.
BTW, I'm changed to a point where I'm starting to think that Alex
Martellis answers are too long, he needs to be more PRECISE ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="intersting-and-beautiful-blog-lovely-presentation"&gt;
&lt;h2&gt;Intersting and beautiful blog lovely presentation ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-21 05:40:30.675000-04:00&lt;/p&gt;
&lt;p&gt;Intersting and beautiful blog lovely presentation thanks for sharing
your views...&lt;a class="reference external" href="http://www.we24support.com/microsoft/microsoft-support.html"&gt;microsoft software
support&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-m-sure-it-was-your-tone-that-was-the-problem"&gt;
&lt;h2&gt;I&amp;amp;#39;m sure it was your tone that was the problem...&lt;/h2&gt;
&lt;p&gt;adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-13 14:18:50.843000-04:00&lt;/p&gt;
&lt;p&gt;I'm sure it was your tone that was the problem -- how you said it rather
than what you said. While I don't use Programmers, your SO answers (and
comments) are often dripping with an intolerable (to me) superior
attitude.
I'm not sure moderator action is warranted, but I can understand wanting
to remove you from the conversation, as I often feel you are a net
negative whatever your level of technical knowledge or correctness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-could-claim-that-your-high-smart-humble-ratio"&gt;
&lt;h2&gt;You could claim that your high smart/humble ratio ...&lt;/h2&gt;
&lt;p&gt;Keith&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-14 14:54:30.736000-04:00&lt;/p&gt;
&lt;p&gt;You could claim that your high smart/humble ratio is really Asperger
Syndrome (like Temperance Brennan on &amp;quot;Bones&amp;quot;), and they're
discriminating against you ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-they-kicked-you-off-so-that-39-s-insane"&gt;
&lt;h2&gt;wait... they kicked you off SO? that&amp;amp;#39;s insane ...&lt;/h2&gt;
&lt;p&gt;MidnightCoffee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-05-01 23:05:50.798000-04:00&lt;/p&gt;
&lt;p&gt;wait... they kicked you off SO? that's insane given your contribution.
That being said, I echo the feelings of e-satis and sirver
if your goal is to teach people you need to do more then provide a
sufficient answer. Maybe pick up a book on teaching like Ignite (geared
towards teaching younger children).
In short, people need to feel comfortable in order to learn. If they
feel mocked,afraid,outclassed or any anything other then excited and
safe they will recoil. Enough recoil and they will revolt even if your
answer is correct.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>couchdb on Mac OS X</title><link href="https://slott56.github.io/2012_03_06-couchdb_on_mac_os_x.html" rel="alternate"></link><published>2012-03-06T08:00:00-05:00</published><updated>2012-03-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-03-06:/2012_03_06-couchdb_on_mac_os_x.html</id><summary type="html">&lt;p&gt;I've started to work with &lt;a class="reference external" href="http://couchdb.apache.org/"&gt;couchdb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've blogged before about the problems of SQL schema in &lt;a class="reference external" href="https://slott56.github.io/2011_02_02-escaping_the_relational_schema_trap.html"&gt;Escaping the
Relational Schema
Trap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A SQL schema -- for many applications -- is too confining.  It creates
cost with relatively little value.  Once upon a time (when disks where
expensive and computers were slow) it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've started to work with &lt;a class="reference external" href="http://couchdb.apache.org/"&gt;couchdb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've blogged before about the problems of SQL schema in &lt;a class="reference external" href="https://slott56.github.io/2011_02_02-escaping_the_relational_schema_trap.html"&gt;Escaping the
Relational Schema
Trap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A SQL schema -- for many applications -- is too confining.  It creates
cost with relatively little value.  Once upon a time (when disks where
expensive and computers were slow) it was essential.&lt;/p&gt;
&lt;p&gt;The funny part about using couchdb is the build process.&lt;/p&gt;
&lt;p&gt;In the couchdb Wiki, they have a page for &lt;a class="reference external" href="http://wiki.apache.org/couchdb/Installing_on_OSX"&gt;Mac OS X
installation&lt;/a&gt;.
The relevant part is the following line of shell script.&lt;/p&gt;
&lt;p&gt;brew install couchdb&lt;/p&gt;
&lt;p&gt;That's it?&lt;/p&gt;
&lt;p&gt;Yes.  If--and only if--you follow the directions.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;If you don't follow the directions, however, it can take all day.&lt;/dt&gt;
&lt;dd&gt;Here are the steps.&lt;/dd&gt;
&lt;/dl&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install Apple's Developer Tools.  I have Mac OS X 10.7.  &lt;a class="reference external" href="https://developer.apple.com/xcode/"&gt;XCode 4.3 for Lion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Launch XTools and install the command-line utilities.  This is important because it includes things like &lt;strong&gt;make&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Remove &lt;strong&gt;fink&lt;/strong&gt; or &lt;strong&gt;MacPorts&lt;/strong&gt; if you happened to have used them for
anything.  For fink, you'll need to clean it out of your ~/.profile
or ~/.bash_profile and rename the /sw directory.&lt;/li&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://github.com/mxcl/homebrew"&gt;Homebrew&lt;/a&gt;.   Use the
one-line ruby script from the
&lt;a class="reference external" href="https://github.com/mxcl/homebrew/wiki/installation"&gt;Installation&lt;/a&gt;
page of the Homebrew wiki.  This: /usr/bin/ruby -e &amp;quot;$(curl -fsSL
&lt;a class="reference external" href="https://raw.github.com/gist/323731"&gt;https://raw.github.com/gist/323731&lt;/a&gt;)&amp;quot; I tried several wrong ways
before doing it the right way.&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;couchdb&lt;/strong&gt; using homebrew.  It takes a while.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are numerous things which may go wrong.&lt;/p&gt;
&lt;p&gt;A missing lib/crt.1.10.6.o, for example. This is just an out-of-date
Xcode. It took few hours of failed experiments to (a) realize it and
(b) get the right one.  There are several proposed solutions around
the web.  Most of them are clever, but ineffective.  Just get the
right Xcode.&lt;/p&gt;
&lt;p&gt;A failure to build Erlang. This was just an improperly installed
version of Homebrew.  There were a lot of message.  A lot.  I messed
around with a lot of things until I finally crashed brew doctor. I
deleted and reinstalled Homebrew and everything built.  First try.&lt;/p&gt;
</content><category term="Technologies"></category><category term="xcode"></category><category term="macosx"></category><category term="SQL"></category><category term="noSQL"></category></entry><entry><title>Civic Hacking</title><link href="https://slott56.github.io/2012_03_01-civic_hacking.html" rel="alternate"></link><published>2012-03-01T06:05:00-05:00</published><updated>2012-03-01T06:05:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-03-01:/2012_03_01-civic_hacking.html</id><summary type="html">&lt;p&gt;This weekend: the HRVA Civic Hackfest. &lt;a class="reference external" href="http://guestlistapp.com/events/86160"&gt;http://guestlistapp.com/events/86160&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.altdaily.com/blogs/news-blogs/opinion-blogs/hampton-roads-civic-hackfest.html"&gt;Alt Daily coverage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some more &lt;a class="reference external" href="http://topsy.com/guestlistapp.com/events/86160"&gt;references&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's it all about?  &lt;a class="reference external" href="http://codeforamerica.org/"&gt;Code For America&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Exploit the information we have to make civic improvements.  Ask any
journalist who wrestles with government data.  There's transparency
(i.e., lip service) and there's transparency …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This weekend: the HRVA Civic Hackfest. &lt;a class="reference external" href="http://guestlistapp.com/events/86160"&gt;http://guestlistapp.com/events/86160&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.altdaily.com/blogs/news-blogs/opinion-blogs/hampton-roads-civic-hackfest.html"&gt;Alt Daily coverage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some more &lt;a class="reference external" href="http://topsy.com/guestlistapp.com/events/86160"&gt;references&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's it all about?  &lt;a class="reference external" href="http://codeforamerica.org/"&gt;Code For America&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Exploit the information we have to make civic improvements.  Ask any
journalist who wrestles with government data.  There's transparency
(i.e., lip service) and there's transparency.  Publishing information as
a PDF based on scans of paper documents doesn't really do much for folks
who are exercising their civic duty to analyze and correlate government
actions with social  benefits.&lt;/p&gt;
&lt;p&gt;Only you can make your government more responsive.  Voting is one way.
Civic Hacking is another.&lt;/p&gt;
&lt;p&gt;Another way is doing good data wrangling to expose the depth of
influence money has over politics.  Look at
&lt;a class="reference external" href="http://www.opensecrets.org/"&gt;OpenSecrets.org&lt;/a&gt; for an example.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#codeforamerica"></category></entry><entry><title>Interesting...</title><link href="https://slott56.github.io/2012_02_28-interesting.html" rel="alternate"></link><published>2012-02-28T08:00:00-05:00</published><updated>2012-02-28T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-28:/2012_02_28-interesting.html</id><summary type="html">&lt;p&gt;Check this out: &lt;a class="reference external" href="http://hyperpolyglot.org/scripting"&gt;http://hyperpolyglot.org/scripting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's a side-by-side comparison of PHP, Perl, Python, Ruby.
I'm not sure why, but it seems sort of cool.&lt;/p&gt;
&lt;p&gt;Things like &amp;quot;offside rule&amp;quot; to describe indentation in Python are
confusing at first.  The &amp;quot;regions which define local scope&amp;quot; section on
Python makes precious …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check this out: &lt;a class="reference external" href="http://hyperpolyglot.org/scripting"&gt;http://hyperpolyglot.org/scripting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's a side-by-side comparison of PHP, Perl, Python, Ruby.
I'm not sure why, but it seems sort of cool.&lt;/p&gt;
&lt;p&gt;Things like &amp;quot;offside rule&amp;quot; to describe indentation in Python are
confusing at first.  The &amp;quot;regions which define local scope&amp;quot; section on
Python makes precious little sense.  The &amp;quot;null test&amp;quot; is inaccurate.  The
&amp;quot;Here Document&amp;quot; omits mention of the exec or eval functions.&lt;/p&gt;
&lt;p&gt;The &amp;quot;arrays&amp;quot; and &amp;quot;dictionaries&amp;quot; are merely a subset of the built-in
structures in Python.  I guess it's tedious to enumerate all the Python
features which are lacking from other languages.  Passing numbers or
strings by reference in Python is described as &amp;quot;not possible&amp;quot; when
actually it's &amp;quot;the only way&amp;quot;; except strings and numbers are immutable,
so the distinction is important.&lt;/p&gt;
&lt;p&gt;The &amp;quot;C-style for&amp;quot; omits for i in range(10) as an equivalent.  The
file-handling section omits mentioning the &lt;strong&gt;with&lt;/strong&gt; statement.&lt;/p&gt;
&lt;p&gt;More importantly, the very idea of side-by-side comparison is flawed.&lt;/p&gt;
&lt;p&gt;Python features like generator functions, list comprehensions and
context managers can't easily be displayed in a chart like this because
they don't have trivial mappings to other languages.&lt;/p&gt;
&lt;p&gt;The languages are actually different and no simple compiler can
translate among them.  That means the side-by-side chart must be
misrepresenting each language is small (but important) ways.&lt;/p&gt;
&lt;p&gt;Still.  It's very thorough and covers a &lt;strong&gt;lot&lt;/strong&gt; of territory.&lt;/p&gt;
</content><category term="Technologies"></category><category term="perl"></category><category term="PHP"></category><category term="#python"></category><category term="ruby"></category></entry><entry><title>Is Django Suitable?</title><link href="https://slott56.github.io/2012_02_23-is_django_suitable.html" rel="alternate"></link><published>2012-02-23T08:00:00-05:00</published><updated>2012-02-23T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-23:/2012_02_23-is_django_suitable.html</id><summary type="html">&lt;p&gt;I got a long list of requirements from a firm that's looking to build a
related family of web sites.  They were down to a Django vs.
Ruby-on-Rails decision.&lt;/p&gt;
&lt;p&gt;As you can see, they've done their homework in thinking through their
needs.&lt;/p&gt;
&lt;p&gt;I grouped their &amp;quot;high-level requirements&amp;quot; into several
categories …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got a long list of requirements from a firm that's looking to build a
related family of web sites.  They were down to a Django vs.
Ruby-on-Rails decision.&lt;/p&gt;
&lt;p&gt;As you can see, they've done their homework in thinking through their
needs.&lt;/p&gt;
&lt;p&gt;I grouped their &amp;quot;high-level requirements&amp;quot; into several
categories.  I summarizes the fit with Django here, and
provided into details separately.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Authentication&lt;/strong&gt;.  Django supports flexible logins and
Python makes it easy to adapt other security API's.  Django
and Python assure that this is a solid 10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Shared Code&lt;/strong&gt;.  This is handled through Python features
that are central to the Django framework.  Shared code
management -- with appropriate overrides and customization
-- is part of Python and a 10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Database Access&lt;/strong&gt;.  While Django provides the
necessary access features, database scalability depends on
the implementation of the database engine itself.  There are
numerous parallelization features that must all be used to
maximize database throughput.  Even though the real
responsibility for performance is outside Django, the Django
flexibility results in a 10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;AJAX and Javascript&lt;/strong&gt;.  Django supports the
necessary RESTful API's.  However, Django treats JavaScript
as simple static content, offering little specific support.&lt;/p&gt;
&lt;p&gt;Since JavaScript support is not an &lt;em&gt;essential&lt;/em&gt; part of
Django, perhaps this is only a 5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Applications&lt;/strong&gt;.  The various applications described in the
requirements are more-or-less irrelevant to Django.  They
can be built easily, but are not first-class features of
Django.  In the sense of easy-to-develop, this is a solid
10.  In the sense of already-existing-applications, this may
be a 5 if the applications are part of a community like
Pinax.  Because the applications do not already exist,
this may also be a 0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;API&lt;/strong&gt;.  Python allows use of any API.  Django's
transparent use of Python makes it easy to build API's.
This is a feature of Python and scores 10 out of 10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Usability and Developer Skills&lt;/strong&gt;.  Django's ease-of-use is
a direct consequence of the Python programming language. The
developers of Django make excellent use of the Python
language,  giving this a 10.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Performance, Access and Scalability&lt;/strong&gt;.  For the most part,
Django performance comes from consideration of the purpose
of all layers of the architecture.  Principle design
features include keeping static content separate from
dynamic content (reducing Django's workload), and optimizing
the database (to hande concurrent access well).  Django
provides several internal design features to minimize
memory.  Django  encourages proper separation of concerns,
giving a 10.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each of these areas, it's possible to dive into
considerable depth.  It was tempting to offer up
proof-of-concept code for some of the questions.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="and-coincidentally-mentioned-in-another-planet-py"&gt;
&lt;h2&gt;And coincidentally, mentioned in another Planet Py...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-24 08:23:05.855000-05:00&lt;/p&gt;
&lt;p&gt;And coincidentally, mentioned in another Planet Python post just a few
entries after this one: &lt;a class="reference external" href="http://www.dajaxproject.com/"&gt;http://www.dajaxproject.com/&lt;/a&gt;
May help address the Django + AJAX question.&lt;/p&gt;
&lt;p&gt;I particularly liked this example:
&lt;a class="reference external" href="http://www.dajaxproject.com/maps/"&gt;http://www.dajaxproject.com/maps/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-performance-front-you-can-run-a-django-sit"&gt;
&lt;h2&gt;On the performance front: you can run a Django sit...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-24 08:06:44.261000-05:00&lt;/p&gt;
&lt;p&gt;On the performance front: you can run a Django site on PyPy to both
optimise execution speed and reduce memory usage at the same time.
For database access: Django can also be set up to use SQLAlchemy, one of
the most powerful and flexible database abstractions available.&lt;/p&gt;
&lt;p&gt;(You already scored Django highly for both of those, so these are really
just confirming your assessment)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="indeed-this-is-the-best-thing-about-it-is-that-it"&gt;
&lt;h2&gt;Indeed this is the Best thing about it is that it ...&lt;/h2&gt;
&lt;p&gt;Admiral Adney&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-05-07 06:51:06.599000-04:00&lt;/p&gt;
&lt;p&gt;Indeed this is the Best thing about it is that it is open source but its
really hard to find the appropriate &lt;a class="reference external" href="http://www.goodcoresoft.com/ruby-on-rails-portal-development/"&gt;ruby on rails development
company&lt;/a&gt;
or to &lt;a class="reference external" href="http://www.goodcoresoft.com/hire-ruby-on-rails-developers/"&gt;hire ruby on rails
developer&lt;/a&gt;
.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Django"></category><category term="#python"></category></entry><entry><title>MADExpo</title><link href="https://slott56.github.io/2012_02_21-madexpo.html" rel="alternate"></link><published>2012-02-21T08:00:00-05:00</published><updated>2012-02-21T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-21:/2012_02_21-madexpo.html</id><content type="html">&lt;p&gt;Looks like fun: &lt;a class="reference external" href="http://madexpo.us/"&gt;Mid-Atlantic Developer Expo&lt;/a&gt;.
June 27-29 2012 in Hampton, VA.
Got a nice reminder through the &lt;a class="reference external" href="http://757labs.org/"&gt;757
Labs&lt;/a&gt; mailing list.
Community is a good thing.&lt;/p&gt;
</content><category term="Technologies"></category><category term="meetup"></category><category term="757 Labs"></category><category term="learning"></category></entry><entry><title>The Estimation Charade</title><link href="https://slott56.github.io/2012_02_16-the_estimation_charade.html" rel="alternate"></link><published>2012-02-16T08:00:00-05:00</published><updated>2012-02-16T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-16:/2012_02_16-the_estimation_charade.html</id><summary type="html">&lt;p&gt;Tweeted by &lt;a class="reference external" href="https://twitter.com/brennandunn"&gt;&amp;#64;brennandunn&lt;/a&gt;:
&lt;a class="reference external" href="http://diegobasch.com/why-software-development-estimations-are-regu"&gt;Why Software Development Estimations Are Regularly
Off&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;quot;In reality, most projects worth doing are not repetitions of
previous things.&amp;quot;&lt;/p&gt;
&lt;p&gt;Thank you for that.&lt;/p&gt;
&lt;p&gt;If it has been done before -- same problem -- same technology -- then
we should be able to clone that solution and avoid creating a
software …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tweeted by &lt;a class="reference external" href="https://twitter.com/brennandunn"&gt;&amp;#64;brennandunn&lt;/a&gt;:
&lt;a class="reference external" href="http://diegobasch.com/why-software-development-estimations-are-regu"&gt;Why Software Development Estimations Are Regularly
Off&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;quot;In reality, most projects worth doing are not repetitions of
previous things.&amp;quot;&lt;/p&gt;
&lt;p&gt;Thank you for that.&lt;/p&gt;
&lt;p&gt;If it has been done before -- same problem -- same technology -- then
we should be able to clone that solution and avoid creating a
software development project.  If there's something novel -- new
problem -- new technology -- then we can't easily predict the whole
sweep of software development effort.&lt;/p&gt;
&lt;p&gt;The whole Estimation Charade is an artifact of the way accountants
exercise control over the finances.  They require (with the force of
law) that budgets be written in advance.  Often in advance of the
requirements being known.  When we sit down to fabricate next year's
budget, we're dooming some fraction next year's projects to a
scramble for funding leading to cancellation and failure.&lt;/p&gt;
&lt;p&gt;Accountants further require that software development be arbitrarily
partitioned into &amp;quot;capital&amp;quot; and &amp;quot;expense&amp;quot;.  There's no rational
distinction between the phases.  The nature and scope of the work
don't change at all.&lt;/p&gt;
&lt;p&gt;Yet.&lt;/p&gt;
&lt;p&gt;Somehow, the accountants are happy because some capital budget has
been spent (as planned 18 months ago) and now we're spending expense
budget.  From an accounting perspective, some kind of capital asset
has been created.&lt;/p&gt;
&lt;p&gt;Think of it.  Some lines of code are a capital asset.  Other lines of
code are an expense.&lt;/p&gt;
&lt;p&gt;Someday, I'll have to ask some accountants to explain how I can tell
which was which.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="a-few-thoughts-on-this-as-a-finance-manager-and-b"&gt;
&lt;h2&gt;A few thoughts on this (as a finance manager and b...&lt;/h2&gt;
&lt;p&gt;Michael Rand&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-16 09:07:19.041000-05:00&lt;/p&gt;
&lt;p&gt;A few thoughts on this (as a finance manager and beginning programmer
who has read your online books).&lt;/p&gt;
&lt;p&gt;1) If your issue is that the accountants can't even explain the
difference between what is capitalized and what is expensed, you have
bad accountants and you should read the standards yourself. They're not
that long.&lt;/p&gt;
&lt;p&gt;If the software to be sold, leased, or otherwise marketed, FASB topic
985.20.25 answers your question.&lt;/p&gt;
&lt;p&gt;If the software is internal use, FASB 340.40.25 has your answer.&lt;/p&gt;
&lt;p&gt;2) Assuming #1 isn't your issue, it might be that you find the phased
process outlined in 340.40.25 and 985.20.25 to be far more reflective of
a waterfall methodology than the more Agile methods you use.&lt;/p&gt;
&lt;p&gt;If so, here's a pitch that talks about how to apply existing accounting
rules to Agile methodologies:
&lt;a class="reference external" href="http://www.scribd.com/doc/40154541/Agile-Accounting"&gt;http://www.scribd.com/doc/40154541/Agile-Accounting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is always considerably leeway in the determination of accounting
phases. Perhaps you can show this pitch to your accountants to get them
to see that they can interpret the phases in a way that is more
consistent with Agile methodologies.&lt;/p&gt;
&lt;p&gt;3) &amp;quot;Some lines of code are a capital asset. Other lines of code are an
expense.&amp;quot; Yes, we know. If it makes you feel any better, it doesn't make
sense to us, either, and there are dozens of other accounting areas that
are equally arbitrary.&lt;/p&gt;
&lt;p&gt;Good finance managers know that the only thing that matters is cash flow
and the &amp;quot;market value&amp;quot; of the software you build (vs. the accounting
charges and resultant assets). They also know that there are better uses
of developer's time than supporting accounting processes which, quite
frankly, has no impact on a company's value.&lt;/p&gt;
&lt;p&gt;If the finance people you have in charge of your business don't see it
that way, they're just not good at what they do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hey-nice-site-you-have-here-keep-up-the-excellen"&gt;
&lt;h2&gt;Hey, nice site you have here! Keep up the excellen...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-09-21 12:54:51.767000-04:00&lt;/p&gt;
&lt;p&gt;Hey, nice site you have here! Keep up the excellent work!
&lt;a class="reference external" href="http://www.amitysoft.com/corporatetraining.html"&gt;ISTQB Training Institute in
Chennai&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="project management"></category></entry><entry><title>Multiprocessing Goodness -- Part 2 -- Class Defintions</title><link href="https://slott56.github.io/2012_02_14-multiprocessing_goodness_part_2_class_defintions.html" rel="alternate"></link><published>2012-02-14T08:32:00-05:00</published><updated>2012-02-14T08:32:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-14:/2012_02_14-multiprocessing_goodness_part_2_class_defintions.html</id><summary type="html">&lt;p&gt;The
&lt;a class="reference external" href="http://docs.python.org/library/multiprocessing.html"&gt;multiprocessing&lt;/a&gt;
module includes a generic
&lt;a class="reference external" href="http://docs.python.org/library/multiprocessing.html#multiprocessing.Process"&gt;Process&lt;/a&gt;
class, which can be used to wrap a simple function.&lt;/p&gt;
&lt;p&gt;The function must be designed to work with Queues or Pipelines or
other synchronization techniques.&lt;/p&gt;
&lt;p&gt;There's an advantage, however, to defining a class which gracefully
handles generator functions.  If we have Generator-Aware
multi-processing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The
&lt;a class="reference external" href="http://docs.python.org/library/multiprocessing.html"&gt;multiprocessing&lt;/a&gt;
module includes a generic
&lt;a class="reference external" href="http://docs.python.org/library/multiprocessing.html#multiprocessing.Process"&gt;Process&lt;/a&gt;
class, which can be used to wrap a simple function.&lt;/p&gt;
&lt;p&gt;The function must be designed to work with Queues or Pipelines or
other synchronization techniques.&lt;/p&gt;
&lt;p&gt;There's an advantage, however, to defining a class which gracefully
handles generator functions.  If we have Generator-Aware
multi-processing, we can (1) write our algorithms as generators and
then (2) trivially connect Processes with Queues to improve
scalability.&lt;/p&gt;
&lt;p&gt;We're looking at creating processing &amp;quot;pipelines&amp;quot; using Queues.  That
way we can easily handle multiple-producer and multiple-consumer
(fan-in, fan-out) processing that enhances concurrency.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2012_02_02-multiprocessing_goodness_part_1_use_case.html"&gt;Multiprocessing Goodness -- Part 1 -- Use
Cases&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;p&gt;We have three use cases:  Producer, Consumer and Consumer-Producer.&lt;/p&gt;
&lt;div class="section" id="producer"&gt;
&lt;h2&gt;Producer&lt;/h2&gt;
&lt;p&gt;A Producer gets data from somewhere and populates a queue with it.
This is the source that feeds data into the pipeline.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ProducerProcess( Process ):
    &amp;quot;&amp;quot;&amp;quot;Produces items into a Queue.

    The &amp;quot;target&amp;quot; must be a generator function which yields
    pickable items.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self, group=None, target=None, name=None, args=None, kwargs=None, output_queue=None, consumers=0 ):
        super( ProducerProcess, self ).__init__( name=name )
        self.target= target
        self.args= args if args is not None else []
        self.kwargs= kwargs if kwargs is not None else {}
        self.output_queue= output_queue
        self.consumers= consumers
    def run( self ):
        target= self.target
        for item in target(*self.args, **self.kwargs):
            self.output_queue.put( item )
        for x in range(self.consumers):
            self.output_queue.put( None )
        self.output_queue.close()
&lt;/pre&gt;
&lt;p&gt;This class will wrap a &amp;quot;target&amp;quot; function which &lt;strong&gt;must&lt;/strong&gt; be a
generator.   Every value yielded is put into the &amp;quot;output_queue&amp;quot;.  When
the source data runs out, enough sentinel tokens are put into the
queue to satisfy all consumers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consumer"&gt;
&lt;h2&gt;Consumer&lt;/h2&gt;
&lt;p&gt;A Consumer gets data from a queue and does some final processing.
Perhaps it loads a database, or writes a file.  It is the sink that
consumes data on the pipeline.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ConsumerProcess( Process ):
    &amp;quot;&amp;quot;&amp;quot;Consumes items from a Queue.

    The &amp;quot;target&amp;quot; must be a function which expects an iterable as it's
    only argument.  Therefore, the args value is not used here.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self, group=None, target=None, name=None, kwargs=None, input_queue=None, producers=0 ):
        super( ConsumerProcess, self ).__init__( name=name )
        self.target= target
        self.kwargs= kwargs if kwargs is not None else {}
        self.input_queue= input_queue
        self.producers= producers
    def items( self ):
        while self.producers != 0:
            for item in iter( self.input_queue.get, None ):
                yield item
            self.producers -= 1
    def run( self ):
        target= self.target
        target( self.items(), **self.kwargs )
&lt;/pre&gt;
&lt;p&gt;This class will wrap a &amp;quot;target&amp;quot; function which must be ready to work
with any iterable.  Every value from the queue will be provided to the
target function for processing.  When enough sentinel tokens have been
consumed from producers, it terminates processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consumer-producer"&gt;
&lt;h2&gt;Consumer-Producer&lt;/h2&gt;
&lt;p&gt;The middle of a processing pipeline is consumer-producer processes
which consume from one queue and the produce to another queue.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ConsumerProducerProcess( Process ):
    &amp;quot;&amp;quot;&amp;quot;Consumes items from a Queue and produces items onto a Queue.

    The &amp;quot;target&amp;quot; must be a generator function which yields
    pickable items and which expects an iterable as it's
    only argument.  Therefore, the args value is not used here.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self, group=None, target=None, name=None, kwargs=None, input_queue=None, producers=0, output_queue=None, consumers=0 ):
        super( ConsumerProducerProcess, self ).__init__( name=name )
        self.target= target
        self.kwargs= kwargs if kwargs is not None else {}
        self.input_queue= input_queue
        self.producers= producers
        self.output_queue= output_queue
        self.consumers= consumers
    def items( self ):
        while self.producers != 0:
            for item in iter( self.input_queue.get, None ):
                yield item
            self.producers -= 1
    def run( self ):
        target= self.target
        for item in target(self.items(), **self.kwargs):
            self.output_queue.put( item )
        for x in range(self.consumers):
            self.output_queue.put( None )
        self.output_queue.close()
&lt;/pre&gt;
&lt;p&gt;This class will wrap a &amp;quot;target&amp;quot; function which must be a generator
function that consumes an iterable.&lt;/p&gt;
&lt;p&gt;Every value from the queue is provided to the target generator.  Every
value yielded by the generator is sent to the output queue.  The input
side counts sentinels to know when to stop.  The output side produces
enough sentinels to alert downstream processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="target-functions"&gt;
&lt;h2&gt;Target Functions&lt;/h2&gt;
&lt;p&gt;A producer function must be a generator function of this form&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def prod( *args ):
    for item in some_function(*args):
       yield item
&lt;/pre&gt;
&lt;p&gt;A consumer function looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def cons( source ):
    for item in source:
       final_disposition(item)
&lt;/pre&gt;
&lt;p&gt;Finally, a consumer-producer function looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def cons_prod( source ):
    for item in source:
       next_value= transform(item)
       yield next_value
&lt;/pre&gt;
&lt;p&gt;These functions can be tested and debugged like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for final in consumer( cons_prod( producer( *args ) ) ):
    print( final )
&lt;/pre&gt;
&lt;p&gt;That way we're confident that our algorithm is correct before
attempting to scale it with multiprocessing.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-try-your-the-above-code-but-it-does-run-would-y"&gt;
&lt;h2&gt;I try your the above code but it does run. Would y...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-08 04:13:55.109000-05:00&lt;/p&gt;
&lt;p&gt;I try your the above code but it does run. Would you be able to put
together a complete example? Thanks!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-code-isn-39-t-exception-safe-sys-exit-safe"&gt;
&lt;h2&gt;Your code isn&amp;amp;#39;t exception safe, sys.exit safe,...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-08 20:36:05.805000-05:00&lt;/p&gt;
&lt;p&gt;Your code isn't exception safe, sys.exit safe, or C extension
abort/assert safe. Using None as a sentinel is a bad idea for hopefully
obvious reasons. It's simply bad code, period.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adam-it-39-s-more-helpful-to-post-revised-and-c"&gt;
&lt;h2&gt;&amp;#64;Adam: It&amp;amp;#39;s more helpful to post revised and c...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-14 08:34:08.212000-05:00&lt;/p&gt;
&lt;p&gt;&amp;#64;Adam: It's more helpful to post revised and corrected code in your own
blog rather than hints or suggestions that something might be wrong.
&amp;quot;Simply bad code&amp;quot; doesn't present better code, does it?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="multiprocessing"></category></entry><entry><title>PDF Reading</title><link href="https://slott56.github.io/2012_02_09-pdf_reading.html" rel="alternate"></link><published>2012-02-09T08:00:00-05:00</published><updated>2012-02-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-09:/2012_02_09-pdf_reading.html</id><summary type="html">&lt;p&gt;PDF files aren't pleasant.&lt;/p&gt;
&lt;p&gt;The good news is that they're documented (&lt;a class="reference external" href="http://www.adobe.com/devnet/pdf/pdf_reference.html"&gt;http://www.adobe.com/devnet/pdf/pdf_reference.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;They bad news is that they're rather complex.&lt;/p&gt;
&lt;p&gt;I found four Python packages for reading PDF files.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pybrary.net/pyPdf/"&gt;http://pybrary.net/pyPdf/&lt;/a&gt; - weak&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.swftools.org/gfx_tutorial.html"&gt;http://www.swftools.org/gfx_tutorial.html&lt;/a&gt; - depends on binary …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;PDF files aren't pleasant.&lt;/p&gt;
&lt;p&gt;The good news is that they're documented (&lt;a class="reference external" href="http://www.adobe.com/devnet/pdf/pdf_reference.html"&gt;http://www.adobe.com/devnet/pdf/pdf_reference.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;They bad news is that they're rather complex.&lt;/p&gt;
&lt;p&gt;I found four Python packages for reading PDF files.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pybrary.net/pyPdf/"&gt;http://pybrary.net/pyPdf/&lt;/a&gt; - weak&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.swftools.org/gfx_tutorial.html"&gt;http://www.swftools.org/gfx_tutorial.html&lt;/a&gt; - depends on binary XPDF&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.didierstevens.com/programs/pdf-tools/"&gt;http://blog.didierstevens.com/programs/pdf-tools/&lt;/a&gt; - limited&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.unixuser.org/~euske/python/pdfminer/"&gt;http://www.unixuser.org/~euske/python/pdfminer/&lt;/a&gt; - acceptable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I elected to work with PDFMiner for two reasons.  (1) Pure Python, (2)
Reasonably Complete.&lt;/p&gt;
&lt;p&gt;This is not, however, much of an endorsement.  The implementation
(while seemingly correct for my purposes) needs a fair amount of
cleanup.&lt;/p&gt;
&lt;p&gt;Here's one example of &lt;em&gt;remarkably&lt;/em&gt; poor programming.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Connect the parser and document objects.
parser.set_document(doc)
doc.set_parser(parser)
&lt;/pre&gt;
&lt;p&gt;Only one of these two is needed; the other is trivially handled as
part of the setter method.&lt;/p&gt;
&lt;p&gt;Also, the package seems to rely on a huge volume of isinstance type
checking.  It's not clear if proper polymorphism is even possible.
But some kind of filter that picked elements by type might be nicer
than a lot of isinstance checks.&lt;/p&gt;
&lt;div class="section" id="annotation-extraction"&gt;
&lt;h2&gt;Annotation Extraction&lt;/h2&gt;
&lt;p&gt;While shabby, the good news is that PDFMiner seems to reliably
extract the annotations on a PDF form.&lt;/p&gt;
&lt;p&gt;In a couple of hours, I had this example of how to read a PDF
document and collect the data filled into the form.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from pdfminer.pdfparser import PDFParser, PDFDocument
from pdfminer.psparser import PSLiteral
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter, PDFTextExtractionNotAllowed
from pdfminer.pdfdevice import PDFDevice
from pdfminer.pdftypes import PDFObjRef
from pdfminer.layout import LAParams, LTTextBoxHorizontal
from pdfminer.converter import PDFPageAggregator

from collections import defaultdict, namedtuple

TextBlock= namedtuple(&amp;quot;TextBlock&amp;quot;, [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;text&amp;quot;])

class Parser( object ):
    &amp;quot;&amp;quot;&amp;quot;Parse the PDF.

    1.  Get the annotations into the self.fields dictionary.

    2.  Get the text into a dictionary of text blocks.
        The key to the dictionary is page number (1-based).
        The value in the dictionary is a sequence of items in (-y, x) order.
        That is approximately top-to-bottom, left-to-right.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self ):
        self.fields = {}
        self.text= {}

    def load( self, open_file ):
        self.fields = {}
        self.text= {}

        # Create a PDF parser object associated with the file object.
        parser = PDFParser(open_file)
        # Create a PDF document object that stores the document structure.
        doc = PDFDocument()
        # Connect the parser and document objects.
        parser.set_document(doc)
        doc.set_parser(parser)
        # Supply the password for initialization.
        # (If no password is set, give an empty string.)
        doc.initialize('')
        # Check if the document allows text extraction. If not, abort.
        if not doc.is_extractable:
            raise PDFTextExtractionNotAllowed
        # Create a PDF resource manager object that stores shared resources.
        rsrcmgr = PDFResourceManager()
        # Set parameters for analysis.
        laparams = LAParams()
        # Create a PDF page aggregator object.
        device = PDFPageAggregator(rsrcmgr, laparams=laparams)
        # Create a PDF interpreter object.
        interpreter = PDFPageInterpreter(rsrcmgr, device)

        # Process each page contained in the document.
        for pgnum, page in enumerate( doc.get_pages() ):
            interpreter.process_page(page)
            if page.annots:
                self._build_annotations( page )
            txt= self._get_text( device )
            self.text[pgnum+1]= txt

    def _build_annotations( self, page ):
        for annot in page.annots.resolve():
            if isinstance( annot, PDFObjRef ):
                annot= annot.resolve()
                assert annot['Type'].name == &amp;quot;Annot&amp;quot;, repr(annot)
                if annot['Subtype'].name == &amp;quot;Widget&amp;quot;:
                    if annot['FT'].name == &amp;quot;Btn&amp;quot;:
                        assert annot['T'] not in self.fields
                        self.fields[ annot['T'] ] = annot['V'].name
                    elif annot['FT'].name == &amp;quot;Tx&amp;quot;:
                        assert annot['T'] not in self.fields
                        self.fields[ annot['T'] ] = annot['V']
                    elif annot['FT'].name == &amp;quot;Ch&amp;quot;:
                        assert annot['T'] not in self.fields
                        self.fields[ annot['T'] ] = annot['V']
                        # Alternative choices in annot['Opt'] )
                    else:
                        raise Exception( &amp;quot;Unknown Widget&amp;quot; )
            else:
                raise Exception( &amp;quot;Unknown Annotation&amp;quot; )

    def _get_text( self, device ):
        text= []
        layout = device.get_result()
        for obj in layout:
            if isinstance( obj, LTTextBoxHorizontal ):
                if obj.get_text().strip():
                    text.append( TextBlock(obj.x0, obj.y1, obj.get_text().strip()) )
        text.sort( key=lambda row: (-row.y, row.x) )
        return text

    def is_recognized( self ):
        &amp;quot;&amp;quot;&amp;quot;Check for Copyright as well as Revision information on each page.&amp;quot;&amp;quot;&amp;quot;
        bottom_page_1 = self.text[1][-3:]
        bottom_page_2 = self.text[2][-3:]
        pg1_rev= &amp;quot;Rev 2011.01.17&amp;quot; == bottom_page_1[2].text
        pg2_rev= &amp;quot;Rev 2011.01.17&amp;quot; == bottom_page_2[0].text
        return pg1_rev and pg2_rev
&lt;/pre&gt;
&lt;p&gt;This gives us a dictionary of field names and values.  Essentially
transforming the PDF form into the same kind of data that comes from
an HTML POST request.&lt;/p&gt;
&lt;p&gt;An important part is that we don't want much of the background text.
Just enough to confirm the version of the form file itself.&lt;/p&gt;
&lt;p&gt;The cryptic &lt;tt class="docutils literal"&gt;text.sort( key=lambda row: &lt;span class="pre"&gt;(-row.y,&lt;/span&gt; row.x) )&lt;/tt&gt; will sort
the text blocks into order from top-to-bottom and left-to-right.  For
the most part, a page footer will show up last.  This is not
guaranteed, however.  In a multi-column layout, the footer can be so
close to the bottom of a column that PDFMiner may put the two text
blocks together.&lt;/p&gt;
&lt;p&gt;The other unfortunate part is the extremely long (and opaque) setup
required to get the data from the page.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-ported-pdfminer-to-python-3-a-couple-of-months-a"&gt;
&lt;h2&gt;I ported PdfMiner to python 3 a couple of months a...&lt;/h2&gt;
&lt;p&gt;Virgil Dupras&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-09 11:34:01.712000-05:00&lt;/p&gt;
&lt;p&gt;I ported PdfMiner to python 3 a couple of months ago (
&lt;a class="reference external" href="https://bitbucket.org/hsoft/pdfminer3k"&gt;https://bitbucket.org/hsoft/pdfminer3k&lt;/a&gt; ) and a bit of cleanup was
involved. The risk of breaking something in the library while cleaning
up is significant which makes the effort harder. Let me know if you want
to get involved in a cleanup effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pdfminer-certainly-looks-very-promising-if-i-have"&gt;
&lt;h2&gt;PDFMiner certainly looks very promising. If I have...&lt;/h2&gt;
&lt;p&gt;David Boddie&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-09 16:27:28.223000-05:00&lt;/p&gt;
&lt;p&gt;PDFMiner certainly looks very promising. If I have to deal with PDF
files in the future, I'll probably try it out before the other Python
solutions.&lt;/p&gt;
&lt;p&gt;As an aside, I'm not intending to start a fight here, but you might want
to pick your words more carefully if you are aiming to deliver
constructive criticism to the author. Since the tool has been around for
a while, some of the &amp;quot;poor programming&amp;quot; might not be so easy to change,
particularly if users have built up a collection of scripts that rely on
the API remaining fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-use-your-code-i-dont-understood-tried-1-hou"&gt;
&lt;h2&gt;How use your code ? I dont understood. Tried 1 hou...&lt;/h2&gt;
&lt;p&gt;Piotr Pastuszka&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-10-13 15:05:11.003000-04:00&lt;/p&gt;
&lt;p&gt;How use your code ? I dont understood. Tried 1 hour and not sucess.&lt;/p&gt;
&lt;p&gt;Hi,
I have a trouble with table parsing in pdf. Pl...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;hoangnguyenminh&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-09-25 00:35:31.535000-04:00&lt;/p&gt;
&lt;p&gt;Hi,
I have a trouble with table parsing in pdf. Please let me know how
pdfminer extract table!
Thank you very much!
hugo&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="pdf"></category><category term="#python"></category></entry><entry><title>Multiprocessing Goodness -- Part 1 -- Use Case</title><link href="https://slott56.github.io/2012_02_02-multiprocessing_goodness_part_1_use_case.html" rel="alternate"></link><published>2012-02-02T08:00:00-05:00</published><updated>2012-02-02T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-02-02:/2012_02_02-multiprocessing_goodness_part_1_use_case.html</id><summary type="html">&lt;p&gt;The advantage of multiprocessing is to have multiple processes working
on a problem.  If we break a big problem into small, concurrent steps,
we can often get results in less elapsed time by making more effective
use of the CPU.  Specifically, we want to make use of non-user time
where …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The advantage of multiprocessing is to have multiple processes working
on a problem.  If we break a big problem into small, concurrent steps,
we can often get results in less elapsed time by making more effective
use of the CPU.  Specifically, we want to make use of non-user time
where our process might be waiting for something on the network or
waiting for physical I/O to finish.&lt;/p&gt;
&lt;p&gt;There are limits on the speedup offered by multiprocessing.  Once
utilization gets to 100%×cores, we can't go any faster.  However,
there are numerous processes that do a lot of I/O or a lot of network
access; we can use Python's
&lt;a class="reference external" href="http://docs.python.org/py3k/library/multiprocessing.html"&gt;multiprocessing&lt;/a&gt;
module to make more effective use of our CPU.&lt;/p&gt;
&lt;p&gt;The easiest approach to multiprocessing is to use the shell's pipeline
philosophy.  Break the processing up into small steps, each of which
reads from a source stream and writes to an output stream.  The
long-standing tradition here is to read from `sys.stdin` and write
to `sys.stdout`.  The multiprocessing module, however, gives us
tools to achieve this with relatively little pain.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Rather than use a simple pipe, however, we need to use a&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://multiprocessing.Queue/"&gt;multiprocessing.Queue&lt;/a&gt;.  In shell
parlance we might have &lt;tt class="docutils literal"&gt;func1 | func2 | func3&lt;/tt&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;For multiprocessing purposes, we'd have something a hair more complex
looking.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
q1 = Queue()
q2 = Queue()
p1 = Process( target=func1, kwargs=dict(output=q1))
p2 = Process( target=func2, kwargs=dict(input=q1, output=q2))
p3 = Process( target=func3, kwargs=dict(input=q2))
p1.start()
p2.start()
p3.start()
&lt;/pre&gt;
&lt;p&gt;While wordy, it hints at a more generalized approach to have three
processes passing data.&lt;/p&gt;
&lt;div class="section" id="termination"&gt;
&lt;h2&gt;Termination&lt;/h2&gt;
&lt;p&gt;The issue is one of termination.  Most multiprocessing packages (like
multiprocessing and celery) presume that your processing pipeline has
a fairly long lifetime.  Because of this, it presumes that you can
determine that it's idle and kill it off one process at a time.&lt;/p&gt;
&lt;p&gt;This isn't a bad assumption, and probably covers a large number of use
cases.&lt;/p&gt;
&lt;p&gt;It doesn't, however, cover the simple shell-like &lt;tt class="docutils literal"&gt;func1 | func2 | func3&lt;/tt&gt; use case very well at all.&lt;/p&gt;
&lt;p&gt;Why not?&lt;/p&gt;
&lt;p&gt;Because we can't easily tell when a queue is shutdown for good and
all.  A producing process can close a queue, but that's not a piece of
information that shows up at the consumer end of the queue.&lt;/p&gt;
&lt;p&gt;Queues are designed to be durable and have multiple produces.  There's
no easy way to know a Queue is no longer needed.  Each producer would
have to attempt to close the Queue &lt;strong&gt;and&lt;/strong&gt; the Queue would have to
know the intended number of producers.  If processes are dynamic, then
the number of producers may not have a fixed, known-in-advance limit.&lt;/p&gt;
&lt;p&gt;The approach, therefore, is to put a sentinel object in the queue.
This way, a consumer knows that production has finished.  It can
release resources and exit politely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fan-out-and-fan-in"&gt;
&lt;h2&gt;Fan-Out and Fan-In&lt;/h2&gt;
&lt;p&gt;The problem with a sentinel on a multi-producer queue is that there
will be multiple sentinels, one from each producer.  And, of course,
with a multi-consumer queue, there must be one sentinels for each
consumer.&lt;/p&gt;
&lt;p&gt;If producers adhere to a sentinel-per-consumer rule, and consumers
know to expect a sentinel-per-producer, then we can easily create
dynamic multi-processing networks that startup and shutdown quickly
and cleanly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case"&gt;
&lt;h2&gt;Use Case&lt;/h2&gt;
&lt;p&gt;Here's a use case.  We want to do &lt;strong&gt;whois&lt;/strong&gt; analysis on IP addresses
in a log.&lt;/p&gt;
&lt;p&gt;If we have a simple loop to parse the log and do a &lt;strong&gt;whois&lt;/strong&gt; request
on each host IP address, the processing will be slow.  It uses
approximately no CPU, since it spends almost all of it's time waiting
for input from the log, waiting for whois, or waiting for buffers to
be written in the output file.&lt;/p&gt;
&lt;p&gt;If we make a simple three-step pipeline &lt;tt class="docutils literal"&gt;(parse | whois | report)&lt;/tt&gt;
then we get some improvement in elapsed time, but -- really -- the
&lt;strong&gt;whois&lt;/strong&gt; step is killing the throughput.&lt;/p&gt;
&lt;p&gt;What we need is a way to run a dozen &lt;strong&gt;whois&lt;/strong&gt; requests concurrently.
This leads us to multiprocessing, fan-out and fan-in.&lt;/p&gt;
&lt;p&gt;Here's what we want.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def analyze_ip( logs ):
    user_queue = Queue()
    report_queue= Queue()

    user_from_log= ProducerProcess( name='book_users', target=book_users, args=(logs,), output_queue=user_queue, consumers=12 )
    user_from_log.start()

    workers= []
    for worker in range(12):
        get_details= ConsumerProducerProcess( name='user_whois', target=user_whois, kwargs=dict(LIVE=False),
        input_queue=user_queue, output_queue=report_queue, producers=1, consumers=1 )
        get_details.start()
        workers.append(get_details)

    report= ConsumerProcess( name='final_report', target=final_report,
        input_queue=report_queue, producers=12 )
    report.start()

    user_from_log.join()
    for w in workers:
        w.join()
    report.join()
&lt;/pre&gt;
&lt;p&gt;This will do a number of concurrent &lt;strong&gt;whois&lt;/strong&gt; requests, tying up lots
and lots of resources and (hopefully) saturating the CPU with real
work.&lt;/p&gt;
&lt;p&gt;This shows a fan-out from one &lt;strong&gt;ProducerProcess&lt;/strong&gt; to a dozen
&lt;strong&gt;ConsumerProducerProcess&lt;/strong&gt; instances.  It shows a fan-in from
the &lt;strong&gt;ConsumerProducerProcess&lt;/strong&gt; to a single &lt;strong&gt;ConsumerProcess&lt;/strong&gt; that
writes the final report.&lt;/p&gt;
&lt;p&gt;This is trivially scaled up (or done) by changing the number of
processes in the middle.&lt;/p&gt;
&lt;p&gt;What's important is that the actual functions involved (book_users,
user_whois and final_report) are relatively trivial generator
functions that consume source data (log files or queue entries) and
produce results (queue entries or a report file.)&lt;/p&gt;
&lt;p&gt;Also important is the fact that it closes down cleanly.  When the
input reaches end-of-file, sentinel values are put into the queues to
trickle through and lead to orderly process shutdown.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="this-statement-is-nonsense-for-any-definition-of"&gt;
&lt;h2&gt;This statement is nonsense for any definition of &amp;amp;...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-02 18:54:15.044000-05:00&lt;/p&gt;
&lt;p&gt;This statement is nonsense for any definition of &amp;quot;user&amp;quot; that I can think
of: &amp;quot;Specifically, we want to make use of non-user time where our
process might be waiting for something on the network or waiting for
physical I/O to finish.&amp;quot; Time spent sleeping isn't considered &amp;quot;non-user&amp;quot;
time in the wall clock sense nor the accounting sense. Just saying
something like, &amp;quot;Multiprocessing allows for lengthy computations to be
performed simultaneously, or for an application to wait on multiple I/O
resources simultaneously. Simultaneous processing can reduce the total
real-world time it takes to complete a program. Accomplishing this
requires structuring your program so that each lengthy computation or
I/O access proceeds independently of the other tasks in the
application,&amp;quot; is considerably more clearer and more accurate.&lt;/p&gt;
&lt;p&gt;Your statements about multiprocessing and Celery are also problematic.
multiprocessing makes no assumptions about your tasks because it's a
general purpose module. Celery is based around durable queues, so the
lack of producers doesn't mean anything to a consumer--there may never
be a finish point.&lt;/p&gt;
&lt;p&gt;It'd be far more accurate to say, &amp;quot;We need to terminate, or join, our
child processes when we are done with all processing tasks. A simple
queue does not provide any mechanism to indicate when all producers have
finished putting data into the queue. One way to solve this problem is
to put in a special data record, called a sentinel, that indicates the
end of input.&amp;quot;&lt;/p&gt;
&lt;p&gt;Your example function leaks resources. All of them, in fact, under the
right conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="also-one-hopes-you-39-ve-carefully-considered-ho"&gt;
&lt;h2&gt;Also, one hopes you&amp;amp;#39;ve carefully considered ho...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-02 19:24:00.144000-05:00&lt;/p&gt;
&lt;p&gt;Also, one hopes you've carefully considered how to handle the case where
a producer or consumer exits prematurely...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="multiprocessing"></category></entry><entry><title>Enriched Details of Apache Common Log Format</title><link href="https://slott56.github.io/2012_01_31-enriched_details_of_apache_common_log_format.html" rel="alternate"></link><published>2012-01-31T22:25:00-05:00</published><updated>2012-01-31T22:25:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-31:/2012_01_31-enriched_details_of_apache_common_log_format.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2012_01_26-apache_log_parsing.html"&gt;Apache Log Parsing&lt;/a&gt;
for the background.&lt;/p&gt;
&lt;p&gt;Here's a generator function which expands a simple Access to be a more
detailed named tuple.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Access_Details= namedtuple( 'Access_Details',
    ['access', 'time', 'method', 'url', 'protocol'] )

def details_iter( iterable ):
    def parse_time_linux( ts ):
        return datetime.datetime.strptime( ts, &amp;quot;%d/%b/%Y:%H:%M:%S %z&amp;quot; )

    def …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2012_01_26-apache_log_parsing.html"&gt;Apache Log Parsing&lt;/a&gt;
for the background.&lt;/p&gt;
&lt;p&gt;Here's a generator function which expands a simple Access to be a more
detailed named tuple.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Access_Details= namedtuple( 'Access_Details',
    ['access', 'time', 'method', 'url', 'protocol'] )

def details_iter( iterable ):
    def parse_time_linux( ts ):
        return datetime.datetime.strptime( ts, &amp;quot;%d/%b/%Y:%H:%M:%S %z&amp;quot; )

    def parse_time_macos( ts ):
        dt= datetime.datetime.strptime( ts[:-6], &amp;quot;%d/%b/%Y:%H:%M:%S&amp;quot; )
        tz_text= ts[-6:]
        sign, hh, mm = tz_text[:1], int(tz_text[1:3]), int(tz_text[3:])
        minutes= (hh*60+mm) * (-1 if sign == '-' else +1)
        offset = datetime.timedelta(minutes = minutes)
        tz= datetime.timezone( offset, tz_text )
        return dt.replace(tzinfo=tz)
        return dt

    first, last = None, None
    for access in iterable:
        meth, uri, protocol = access.request.split()
        dt= parse_time_macos( access.time )
        first= min(dt,first) if first else dt
        last= max(dt,last) if last else dt
        yield Access_Details(
            access= access,
            time= dt,
            method= meth,
            url= urllib.parse.urlparse(uri),
            protocol= protocol )

    print( &amp;quot;Log Data from&amp;quot;, first, &amp;quot;to&amp;quot;, last, 'duration', last-first )
&lt;/pre&gt;
&lt;p&gt;This &amp;quot;wraps&amp;quot; the original Access object with an Access_Details that
includes information that isn't trivially parsed from the access row.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The datetime object with the real timestamp.  Not the Mac OS
subtlety.  Due to platform issues, the %z strptime format doesn't
seem to work in Python 3.2&lt;/li&gt;
&lt;li&gt;The three fields from the request: method, URL and protocol.&lt;/li&gt;
&lt;li&gt;The URL is parsed into its individual fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the &lt;tt class="docutils literal"&gt;Access_Details&lt;/tt&gt; object is pickle-able.  While seemingly
irrelevant, it turns out that having something which can be pickled
means that we can use multiprocessing to create a multi-staged
concurrent pipeline of log analysis.&lt;/p&gt;
&lt;p&gt;What's important here is that we're adding functionality without
redefining the underlying Access class. Indeed, the underlying Access
object is immutable.  The idea of stateless values comes from the
functional programming crowd.  It seems to work out really well
because the functionality seems to accrete in relatively simple
layers.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category><category term="Apache"></category><category term="analysis"></category></entry><entry><title>Apache Log Parsing</title><link href="https://slott56.github.io/2012_01_26-apache_log_parsing.html" rel="alternate"></link><published>2012-01-26T08:00:00-05:00</published><updated>2012-01-26T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-26:/2012_01_26-apache_log_parsing.html</id><summary type="html">&lt;p&gt;How much do I love Python?  Consider this little snippet that parses
Apache logs.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re
from collections import defaultdict, named tuple

format_pat= re.compile(
   r&amp;quot;(?P&amp;lt;host&amp;gt;[\d\.]+)\s&amp;quot;
   r&amp;quot;(?P&amp;lt;identity&amp;gt;\S*)\s&amp;quot;
   r&amp;quot;(?P&amp;lt;user&amp;gt;\S*)\s&amp;quot;
   r&amp;quot;\[(?P&amp;lt;time&amp;gt;.*?)\]\s&amp;quot;
   r'&amp;quot;(?P&amp;lt;request&amp;gt;.*?)&amp;quot;\s'
   r&amp;quot;(?P …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;How much do I love Python?  Consider this little snippet that parses
Apache logs.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re
from collections import defaultdict, named tuple

format_pat= re.compile(
   r&amp;quot;(?P&amp;lt;host&amp;gt;[\d\.]+)\s&amp;quot;
   r&amp;quot;(?P&amp;lt;identity&amp;gt;\S*)\s&amp;quot;
   r&amp;quot;(?P&amp;lt;user&amp;gt;\S*)\s&amp;quot;
   r&amp;quot;\[(?P&amp;lt;time&amp;gt;.*?)\]\s&amp;quot;
   r'&amp;quot;(?P&amp;lt;request&amp;gt;.*?)&amp;quot;\s'
   r&amp;quot;(?P&amp;lt;status&amp;gt;\d+)\s&amp;quot;
   r&amp;quot;(?P&amp;lt;bytes&amp;gt;\S*)\s&amp;quot;
   r'&amp;quot;(?P&amp;lt;referer&amp;gt;.*?)&amp;quot;\s' # [SIC]
   r'&amp;quot;(?P&amp;lt;user_agent&amp;gt;.*?)&amp;quot;\s*'
)

Access = namedtuple('Access',
   ['host', 'identity', 'user', 'time', 'request',
   'status', 'bytes', 'referer', 'user_agent'] )

def access_iter( source_iter ):
   for log in source_iter:
       for line in (l.rstrip() for l in log):
           match= format_pat.match(line)
           if match:
               yield Access( **match.groupdict() )
&lt;/pre&gt;
&lt;p&gt;That's about it.  The access log rows are now first-class Access-class
objects that can be processed pleasantly by high-level Python
applications.&lt;/p&gt;
&lt;p&gt;Cool things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The adjacent string concatenation means that the regular expression
can be broken up into bits to make it readable.&lt;/li&gt;
&lt;li&gt;When the named tuple attributes match the regular expression names,
we can trivially turn the match.groupdict() into a named tuple.&lt;/li&gt;
&lt;li&gt;By using a generator, the other parts of the application can simply
loop through the results without tying up memory to create vast
intermediate structures.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A couple of years back, a sysadmin was trying to justify spending
money on a log analyzer product.  I suggested they (at the very
least) get an open source log analyzer.&lt;/p&gt;
&lt;p&gt;I also suggested that they learn Python and save themselves the pain
of working with a (potentially) complex tool.  Given this as a common
library module, log analysis applications are remarkably easy to
write.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="nice-code-but-what-about-using-re-verbose-flag"&gt;
&lt;h2&gt;Nice code. But what about using &lt;cite&gt;re.VERBOSE&lt;/cite&gt; flag ...&lt;/h2&gt;
&lt;p&gt;Roman Haritonov&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-28 10:45:17.687000-05:00&lt;/p&gt;
&lt;p&gt;Nice code. But what about using `re.VERBOSE` flag instead adjacent
string concatenation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cool-thanks-very-much"&gt;
&lt;h2&gt;Cool, thanks very much!&lt;/h2&gt;
&lt;p&gt;Mandar Mitra&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-11-21 12:05:56.600000-05:00&lt;/p&gt;
&lt;p&gt;Cool, thanks very much!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category><category term="Apache"></category><category term="analysis"></category></entry><entry><title>Building Skills in Programming</title><link href="https://slott56.github.io/2012_01_24-building_skills_in_programming.html" rel="alternate"></link><published>2012-01-24T08:00:00-05:00</published><updated>2012-01-24T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-24:/2012_01_24-building_skills_in_programming.html</id><summary type="html">&lt;p&gt;I've revised (and streamlined) my &lt;em&gt;Building Skills in Programming&lt;/em&gt; book.
The 2.6.2. edition will simply replace the 2.6.1. edition, leading to
the possibility of broken bookmarks because of the changes.&lt;/p&gt;
&lt;p&gt;Currently, the non-programmer book accounts for under 10% hits on the
&lt;a class="reference external" href="http://www.itmaybeaback.com/book"&gt;http://www.itmaybeaback.com/book …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've revised (and streamlined) my &lt;em&gt;Building Skills in Programming&lt;/em&gt; book.
The 2.6.2. edition will simply replace the 2.6.1. edition, leading to
the possibility of broken bookmarks because of the changes.&lt;/p&gt;
&lt;p&gt;Currently, the non-programmer book accounts for under 10% hits on the
&lt;a class="reference external" href="http://www.itmaybeaback.com/book"&gt;http://www.itmaybeaback.com/book&lt;/a&gt; site.  Consequently, I'm not &lt;em&gt;very&lt;/em&gt;
worried about the breakage.  I know someone will hate me for messing
with the content just as they were starting to understand it.&lt;/p&gt;
&lt;p&gt;I'm indebted to all my readers for the numerous suggestions, corrections
and complements that I've received.  In order to simplify the correction
process, I've put the source onto SourceForge.  See the &lt;a class="reference external" href="http://sourceforge.net/projects/progbook-py26/"&gt;Programming
Book-Python 2.6&lt;/a&gt;
project.&lt;/p&gt;
&lt;p&gt;The next step will be to add a PayPal donations button.&lt;/p&gt;
&lt;p&gt;And... If I can get the PDF into really good shape, I may post it on
&lt;a class="reference external" href="http://www.lulu.com/"&gt;Lulu&lt;/a&gt; for folks who really want a hardcopy.&lt;/p&gt;
&lt;div class="section" id="traffic"&gt;
&lt;h2&gt;Traffic&lt;/h2&gt;
&lt;p&gt;For a random 2-day period, the usage looks like this:&lt;/p&gt;
&lt;p&gt;246 distinct &amp;quot;users&amp;quot; (really IP addresses).&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{'html only': 161,
 ('both', 'oodesign-java-2.1'): 9,
 ('both', 'oodesign-python-2.1'): 5,
 ('both', 'programming-2.6'): 3,
 ('both', 'python-2.6'): 7,
 ('pdf only', 'oodesign-java-2.1'): 21,
 ('pdf only', 'oodesign-python-2.1'): 14,
 ('pdf only', 'programming-2.6'): 11,
 ('pdf only', 'python-2.6'): 37}
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;both&amp;quot; is a count of users reading HTML as well as the identified
PDF editions.&lt;/p&gt;
&lt;p&gt;For the &amp;quot;html only&amp;quot; and &amp;quot;both&amp;quot; users, there's a detailed list of
particular books and sections.  Too large and boring to repeat here.&lt;/p&gt;
&lt;p&gt;One interesting part is this detail:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
82.128.23.63 {'programming-2.6': 37, 'oodesign-java-2.1': 28, 'python-2.6': 37, 'oodesign-python-2.1': 24}
&lt;/pre&gt;
&lt;p&gt;Apparently, Nigeria needs a &lt;strong&gt;lot&lt;/strong&gt; of copies of the PDF.  I think I
might want to block them, because this can't be anything sensible except
endless polling by some botnet script.&lt;/p&gt;
&lt;p&gt;Since we don't drop off cookies, we can't really identify user sessions.&lt;/p&gt;
&lt;p&gt;Maybe in the future, I'll wrap the static content download with a
simple WSGI application to drop off and collect cookies to track users
instead of IP addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="http-www-itmaybeahack-com-book-programming-2-6-h"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://www.itmaybeahack.com/book/programming-2.6/h"&gt;http://www.itmaybeahack.com/book/programming-2.6/h&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-25 07:05:40.381000-05:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.itmaybeahack.com/book/programming-2.6/html/index.html"&gt;http://www.itmaybeahack.com/book/programming-2.6/html/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello I was wondering.
Where can I find the book?
-------------------------------------------------&lt;/p&gt;
&lt;p&gt;Denis&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-25 05:20:18.759000-05:00&lt;/p&gt;
&lt;p&gt;Hello I was wondering.
Where can I find the book?&lt;/p&gt;
&lt;p&gt;Jack Johnny&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-04-10 09:48:35.488000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by the author.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>Python 2.7 CSV files with Unicode Characters</title><link href="https://slott56.github.io/2012_01_19-python_27_csv_files_with_unicode_characters.html" rel="alternate"></link><published>2012-01-19T08:00:00-05:00</published><updated>2012-01-19T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-19:/2012_01_19-python_27_csv_files_with_unicode_characters.html</id><summary type="html">&lt;p&gt;The csv module in Python 2.7 is more-or-less hard-wired to work with
ASCII and only ASCII.&lt;/p&gt;
&lt;p&gt;Sadly, we're often confronted with CSV files that include Unicode
characters.  There are numerous Stack Overflow questions on this
topic.  &lt;a class="reference external" href="http://stackoverflow.com/search?q=python+csv+unicode"&gt;http://stackoverflow.com/search?q=python+csv+unicode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What to do?  Since csv …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The csv module in Python 2.7 is more-or-less hard-wired to work with
ASCII and only ASCII.&lt;/p&gt;
&lt;p&gt;Sadly, we're often confronted with CSV files that include Unicode
characters.  There are numerous Stack Overflow questions on this
topic.  &lt;a class="reference external" href="http://stackoverflow.com/search?q=python+csv+unicode"&gt;http://stackoverflow.com/search?q=python+csv+unicode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What to do?  Since csv is married to seeing ASCII/bytes, we must
explicitly decode the column values.&lt;/p&gt;
&lt;p&gt;One solution is to wrap csv.DictReader, something like the following.
We need to decode each individual column before attempting to do
anything with value.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class UnicodeDictReader( object ):
    def __init__( self, *args, **kw ):
        self.encoding= kw.pop('encoding', 'mac_roman')
        self.reader= csv.DictReader( *args, **kw )
    def __iter__( self ):
        decode= codecs.getdecoder( self.encoding )
        for row in self.reader:
            t= dict( (k,decode(row[k])[0]) for k in row )
            yield t
&lt;/pre&gt;
&lt;p&gt;This new object is an iterable which contains a DictReader. We could
subclass DictReader, also.&lt;/p&gt;
&lt;p&gt;The use case, then, becomes something simple like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open(&amp;quot;some.csv&amp;quot;,&amp;quot;rU&amp;quot;) as source:
    rdr= UnicodeDictReader( source )
    for row in rdr:
        # process the row
&lt;/pre&gt;
&lt;p&gt;We can now get Unicode characters from a CSV file.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="it-s-one-of-those-things-the-files-came-to"&gt;
&lt;h2&gt;It's one of those things... The files came to ...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-23 11:27:19.901000-05:00&lt;/p&gt;
&lt;p&gt;It's one of those things... The files came to me in that encoding. UTF-8
seems so much more sensible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-like-that-you-think-mac-roman-is-a-sen"&gt;
&lt;h2&gt;I like that you think 'mac_roman' is a sen...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-20 19:56:24.488000-05:00&lt;/p&gt;
&lt;p&gt;I like that you think 'mac_roman' is a sensible default encoding.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="csv"></category><category term="#python"></category><category term="unicode"></category></entry><entry><title>Multiprocessing and Shared Objects [Revised]</title><link href="https://slott56.github.io/2012_01_18-multiprocessing_and_shared_objects_revised.html" rel="alternate"></link><published>2012-01-18T05:48:00-05:00</published><updated>2012-01-18T05:48:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-18:/2012_01_18-multiprocessing_and_shared_objects_revised.html</id><summary type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://eli.thegreenplace.net/2012/01/04/shared-counter-with-pythons-multiprocessing/"&gt;Shared Counter with Python
Multiprocessing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Brilliant.  Thank you for this.&lt;/p&gt;
&lt;p&gt;Too many of the questions on StackOverflow that include multi-threading
are better approached as multi-processing.  In Linux, there are times
when all threads of a single process are stopped while the process (as a
whole) waits for system …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://eli.thegreenplace.net/2012/01/04/shared-counter-with-pythons-multiprocessing/"&gt;Shared Counter with Python
Multiprocessing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Brilliant.  Thank you for this.&lt;/p&gt;
&lt;p&gt;Too many of the questions on StackOverflow that include multi-threading
are better approached as multi-processing.  In Linux, there are times
when all threads of a single process are stopped while the process (as a
whole) waits for system services to complete.  It's a consequence of the
way select and poll work.  An example of the kind of sophisticated
design required to avoid this can be found
&lt;a class="reference external" href="http://www.kircher-schwanninger.de/michael/publications/lf.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most I/O-intensive applications should be done via multi processing,
not multi threading.&lt;/p&gt;
&lt;p&gt;And.  The kind of shared objects that multi threading allows are often
rare and require locks.&lt;/p&gt;
&lt;p&gt;So, simplify your life.  When you hear about &amp;quot;threads&amp;quot;, replace the word
with &amp;quot;processes&amp;quot; and move on.  The implementation will be much nicer.&lt;/p&gt;
&lt;p&gt;The standard gripe is that process creation is so expensive, and thread
creation is relatively cheap.  All true.  That's why folks use process
pools: to amortize the creation cost over a long period of operation.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="according-to-my-tests-forking-in-python-under-li"&gt;
&lt;h2&gt;According to my tests, forking in python (under li...&lt;/h2&gt;
&lt;p&gt;Nick Craig-Wood&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-17 09:52:33.728000-05:00&lt;/p&gt;
&lt;p&gt;According to my tests, forking in python (under linux) takes about 3.5
times as long as creating a thread. Forking takes about 600 microseconds
on my machine which is quite quick though ;-)
So use processes - they are cheap!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import sys
import os
from time import time
import threading

def nop():
    &amp;quot;&amp;quot;&amp;quot;Do nothing&amp;quot;&amp;quot;&amp;quot;
    pass

def fork_test(n):
    &amp;quot;&amp;quot;&amp;quot;
    Print time to create and destroy n forks
    &amp;quot;&amp;quot;&amp;quot;
    start = time()
    for i in xrange(n):
        pid = os.fork()
        if pid == 0: # child
            nop()
        os._exit(0)
        os.waitpid(pid, 0) # join
    elapsed = time() - start
    print &amp;quot;That took %.3f seconds for %d iterations, %.3fms / fork&amp;quot; %
    (elapsed, n, elapsed*1E3/n)

def threading_test(n):
    &amp;quot;&amp;quot;&amp;quot;
    Print time to create and destroy n threads
    &amp;quot;&amp;quot;&amp;quot;
    start = time()
    for i in xrange(n):
        tid = threading.Thread(target=nop)
        tid.start()
        tid.join()
    elapsed = time() - start
    print &amp;quot;That took %.3f seconds for %d iterations, %.3fms / thread&amp;quot; %
    (elapsed, n, elapsed*1E3/n)

def main():
    if len(sys.argv) != 2:
        print &amp;quot;Syntax: %s &amp;quot; % sys.argv[0]
        raise SystemExit(1)
    iterations = int(sys.argv[1])
    fork_test(iterations)
    threading_test(iterations)

if __name__ == &amp;quot;__main__&amp;quot;:
    main()
&lt;/pre&gt;
&lt;p&gt;(Can't figure out what sort of markup to post that code with - sorry!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-couldn-39-t-agree-more-i-moved-from-multi-thre"&gt;
&lt;h2&gt;I couldn&amp;amp;#39;t agree more. I moved from multi-thre...&lt;/h2&gt;
&lt;p&gt;SteveO&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-12 13:42:36.714000-05:00&lt;/p&gt;
&lt;p&gt;I couldn't agree more. I moved from multi-threading to multi-processing
ASAP with 2.6 and life's wonderful. I use it extensively to parallel
process data from hundreds of servers in multiple data centers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-threads-do-not-generally-block-the-whole-proce"&gt;
&lt;h2&gt;No, threads do not generally block the whole proce...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-12 16:04:15.544000-05:00&lt;/p&gt;
&lt;p&gt;No, threads do not generally block the whole process unless they do an
operation that requires the whole process to block (which are
well-known). This simple test program demonstrates this pretty well:
&lt;a class="reference external" href="http://pastebin.com/cAhfNB5K"&gt;http://pastebin.com/cAhfNB5K&lt;/a&gt;
Increase the iterations to a large number and notice in top(1) that it
happily eats up 2 CPUs without any trouble, yet spends almost all of its
execution in kernel space, since it's just making the kernel copy
buffers back and forth. top(1) will likely indicate the process is
sleeping too!&lt;/p&gt;
&lt;p&gt;Threads would be much more useless if every syscall blocked the whole
process, even if only when the syscall was actually executing in kernel
space.&lt;/p&gt;
&lt;p&gt;Even in Python, where the global interpreter lock prevents threads from
executing Python code concurrently, concurrent I/O is typically possible
since the GIL is usually released before an I/O operation begins and
reacquired after it completes. It is true in Python, that
multiprocessing will probably let you fan out wider than
multi-threading, but that is due the GIL and not the characteristics of
the underlying operating system.&lt;/p&gt;
&lt;p&gt;The overhead of creating processes is often quoted as a reason to avoid
them, but it's really a falsehood. Both threads and processes are
generally too expensive to create on-demand, so well written threaded
code will generally use a thread pool[1].&lt;/p&gt;
&lt;p&gt;The common reasons for choosing multiple threads over processes are:&lt;/p&gt;
&lt;p&gt;* Memory is shared by default, instead of shared explicitly.&lt;/p&gt;
&lt;p&gt;* The overhead of concurrency constructs is typically lower with threads[1].&lt;/p&gt;
&lt;p&gt;* The memory overhead per thread of execution may be much lower.&lt;/p&gt;
&lt;p&gt;* Some operating systems only support certain concurrency constructs under a threaded model.&lt;/p&gt;
&lt;p&gt;* Some operating systems lack fork(), making it difficult or impossible to spawn a copy of a running program. Portable programs and languages may prefer threads for this reason alone.&lt;/p&gt;
&lt;p&gt;[1] In Linux, the difference between the two isn't very large. Thread
and processes really aren't very different at all from the perspective
of the kernel (A clone(2) is a clone(2)). However, not all operating
systems are Linux and things weren't always this way.&lt;/p&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-12 16:03:43.972000-05:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by the author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="while-i-agree-with-the-principle-of-what-you-39-r"&gt;
&lt;h2&gt;While I agree with the principle of what you&amp;amp;#39;r...&lt;/h2&gt;
&lt;p&gt;Shane Hathaway&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-12 14:37:00.571000-05:00&lt;/p&gt;
&lt;p&gt;While I agree with the principle of what you're saying, it is quite
incorrect to say that Linux stops all threads while the process (as a
whole) waits for system services to complete. In reality, Linux is very
good at executing multiple threads concurrently, both application code
and system services.&lt;/p&gt;
&lt;p&gt;What gets in the way is Python's GIL, which prevents multiple threads of
an application from accessing Python objects simultaneously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cool-thanks-for-mentioning-my-post-it-was-act"&gt;
&lt;h2&gt;Cool, thanks for mentioning my post :-) It was act...&lt;/h2&gt;
&lt;p&gt;Eli Bendersky&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-18 10:25:08.730000-05:00&lt;/p&gt;
&lt;p&gt;Cool, thanks for mentioning my post :-) It was actually born from seeing
this kind of questions on SO too often.&lt;/p&gt;
&lt;p&gt;Make sure to read the follow-up post on using multiprocessing instead of
threading for CPU-bound tasks. I also plan additional posts on
multiprocessing in the near future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-very-minor-revision-does-nothing-to-correct-y"&gt;
&lt;h2&gt;Your very minor revision does nothing to correct y...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-13 16:26:55.741000-05:00&lt;/p&gt;
&lt;p&gt;Your very minor revision does nothing to correct your post. To be
honest, I'm not even sure I'm entirely correctly that there are any
operations left that require the whole process to block simultaneously.
Regardless, such operations are things like fork(2), exit(2), and
possibly some signal related activities. If your multithreaded
application is doing these things with any regularity, it's broken
anyway.&lt;/p&gt;
&lt;p&gt;There's not even a good way to do what you claim happens within the
kernel: there's no singular magic lock you can hold that will suddenly
stop a process and all of its threads from executing in kernel space
(outside of things like the historical BKL that locked the whole kernel
for everything). There isn't even a single lock for the whole
task_struct anymore.&lt;/p&gt;
&lt;p&gt;As a result, I believe that the kernel typically iterates through the
list of tasks and locks each one individually when it needs to modify
several in a group, possibly also locking the list itself to prevent
mutation where necessary. However, such locking could also effect code
using multiple processes, since processes are also tasks. Remember, the
Linux kernel doesn't treat threads very differently from processes--it
only does so where POSIX demands it do so.&lt;/p&gt;
&lt;p&gt;Tasks shouldn't block other tasks unless they're contending for the same
resource. Avoiding that in a multithreaded application is hardly
difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-revised-it-again-and-you-39-re-still-totally"&gt;
&lt;h2&gt;You revised it again and you&amp;amp;#39;re still totally ...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-26 08:00:28.581000-05:00&lt;/p&gt;
&lt;p&gt;You revised it again and you're still totally wrong! Calling select()
nor poll() in one thread does not cause other threads to block, nor does
the paper you cited say that. The only case where multiple threads
calling select() might see additional blocking is when their waitsets
share FDs (i.e., two threads are waiting on the same FD).&lt;/p&gt;
&lt;p&gt;All the paper says is that using select() and poll() in multiple threads
with shared waitsets can cause synchronization issues for your
application. Moreover, if I were to attempt the design mentioned in your
paper with multiple processes, the same problems would still occur. The
issue isn't threads, the issue is attempting to access the same socket
from multiple tasks simultaneously without properly synchronizing access
to the socket and the socket's state. All you need to do to test is call
fork(): file descriptors are shared across processes by default!&lt;/p&gt;
&lt;p&gt;The problems discussed by the paper are entirely a consequence of their
decision to use select() and/or poll(). Other designs lack these
problems entirely. Blocking I/O with one thread per FD is a perfectly
viable design on Linux and is quite common in Java applications. It can
even lead to superior performance in a lot of cases
(&lt;a class="reference external" href="http://www.mailinator.com/tymaPaulMultithreaded.pdf"&gt;http://www.mailinator.com/tymaPaulMultithreaded.pdf&lt;/a&gt;) and is certainly
easier to manage and program in many ways. Even in their design, the
only time that you'll see all threads blocked is when all FDs are idle,
which is something that /you want to happen/.&lt;/p&gt;
&lt;p&gt;Though even with their design (which is essentially a variant on the I/O
completion port model provided by Windows), if there's enough work to be
done per I/O request, you won't see all of the threads blocking.&lt;/p&gt;
&lt;p&gt;At this point, without actual kernel source code demonstrating your
claims, you really need to issue a full retraction. You really should
issue an apology, too. Your behavior with this issue and refusal to
engage directly is way less than professional and what is expected.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="multiprocessing"></category></entry><entry><title>Python 3.2 CSV Module -- Very, very nice</title><link href="https://slott56.github.io/2012_01_17-python_32_csv_module_very_very_nice.html" rel="alternate"></link><published>2012-01-17T08:00:00-05:00</published><updated>2012-01-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-17:/2012_01_17-python_32_csv_module_very_very_nice.html</id><summary type="html">&lt;p&gt;A common (and small) task is reformatting a file that's in some
variant of CSV.  It could be a SQL database extract, or an export from
an application that works well with CSV files.&lt;/p&gt;
&lt;p&gt;In Python 2.x, a CSV file with Unicode was a bit of a problem.  The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A common (and small) task is reformatting a file that's in some
variant of CSV.  It could be a SQL database extract, or an export from
an application that works well with CSV files.&lt;/p&gt;
&lt;p&gt;In Python 2.x, a CSV file with Unicode was a bit of a problem.  The
CSV module isn't happy with Unicode.  The documentation is quite clear
that many files need to be opened with a mode of 'rb' to correctly
handle Windows line-endings.&lt;/p&gt;
&lt;p&gt;Because of this, a CSV file with Unicode required using an explicit
decoder on the individual columns (not the line as a whole!)&lt;/p&gt;
&lt;p&gt;But with Python 3.2, that's all behind us.&lt;/p&gt;
&lt;p&gt;Here's something I did recently.  The file has six columns that are
relevant.  One of them (the &amp;quot;NOTE&amp;quot;) column has a big block of text
with details buried inside using a kind of RST markup.  The data might
be three lines with a value like this &amp;quot;words words\n:budget:
1500\nwords words&amp;quot;.&lt;/p&gt;
&lt;p&gt;The file is UTF-8, and the words have non-ASCII unicode characters
randomly through it.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def details( source ):
   relevant = ( &amp;quot;TASK&amp;quot;, &amp;quot;FOLDER&amp;quot;, &amp;quot;CONTEXT&amp;quot;, &amp;quot;PRIORITY&amp;quot;, &amp;quot;STAR&amp;quot;, )
   parse= &amp;quot;NOTE&amp;quot;
   data_pat= re.compile( r&amp;quot;^:(\w+):\s*(.*)\s*$&amp;quot; )
   rdr= csv.DictReader( source )
   for row in rdr:
       txt= row[parse]
       lines= ( data_pat.match(l) for l in txt.splitlines() )
       matches= ( m.groups() for m in lines if m )
       result= dict( (k, row[k]) for k in relevant)
       result.update( dict(matches) )
       yield result
&lt;/pre&gt;
&lt;p&gt;How much do I love Python? Let me count the ways.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The assignment of &lt;em&gt;lines&lt;/em&gt; on line 8 was fun.  The &amp;quot;NOTE&amp;quot; column, in
row[parse], contains the extra fields.  They'll be on a separate line
with the :word:value format as shown in the &lt;em&gt;data_pat&lt;/em&gt; pattern.  We
create a generator which will split the text field into lines and
apply the pattern to each line.&lt;/li&gt;
&lt;li&gt;The assignment to  &lt;em&gt;matches&lt;/em&gt; on line 9 was equally fun.  If the
&lt;tt class="docutils literal"&gt;matches&lt;/tt&gt; generator produced a match object, the &lt;em&gt;lines&lt;/em&gt; generator
will gather the two groups form the line.&lt;/li&gt;
&lt;li&gt;The assignment to &lt;em&gt;result&lt;/em&gt; creates a dictionary from the relevant
columns.&lt;/li&gt;
&lt;li&gt;The second assignment to &lt;em&gt;result&lt;/em&gt; updates this dictionary with data
parsed out of the &amp;quot;NOTE&amp;quot; column.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That makes it quite pleasant (and fast) to process an extract file,
reformatting a &amp;quot;big blob of text&amp;quot; into individual columns.&lt;/p&gt;
&lt;p&gt;The rest of the app boils down to this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def rewrite( input, target=sys.stdout ):
   with io.open(input, 'r', encoding='UTF-8') as source:
       data= list( details( source ) )
   headers= set( k for row in data for k in row  )
   wtr= csv.DictWriter( target, sorted(headers) )
   wtr.writeheader( )
   wtr.writerows( data )
&lt;/pre&gt;
&lt;p&gt;This gathers the raw data into a big old sequence in memory, and then
writes that big old sequence back out to a file.  If we knew the
headers buried in the &amp;quot;NOTE&amp;quot; field, we could do the entire thing in a
single pass just using generators.&lt;/p&gt;
&lt;p&gt;We have to explicitly provide the encoding because the file was
created via a download and the encoding isn't properly set on the
client machine.  The important thing is that we &lt;em&gt;can&lt;/em&gt; do this when
it's necessary.  And we no longer have to explicitly decode fields.&lt;/p&gt;
&lt;p&gt;Since we don't know the headers in the &amp;quot;NOTE&amp;quot; field, we're forced to
create the &lt;em&gt;headers&lt;/em&gt; set by examining each row dictionary for it's
keys.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="csvkit-is-designed-to-augment-or-supercede-much-of"&gt;
&lt;h2&gt;csvkit is designed to augment or supercede much of...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-17 19:29:33.971000-05:00&lt;/p&gt;
&lt;p&gt;csvkit is designed to augment or supercede much of Python’s csv module
url: &lt;a class="reference external" href="http://csvkit.readthedocs.org/en/latest/index.html"&gt;http://csvkit.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="csv"></category><category term="#python"></category></entry><entry><title>Innovation is the punctuation at the end of a string of failures</title><link href="https://slott56.github.io/2012_01_10-innovation_is_the_punctuation_at_the_end_of_a_string_of_failures.html" rel="alternate"></link><published>2012-01-10T08:00:00-05:00</published><updated>2012-01-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-10:/2012_01_10-innovation_is_the_punctuation_at_the_end_of_a_string_of_failures.html</id><summary type="html">&lt;p&gt;Read this in Forbes: &amp;quot;&lt;a class="reference external" href="http://www.forbes.com/sites/work-in-progress/2011/05/05/innovations-return-on-failure-rof/"&gt;Innovation's Return on Failure:
ROF&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Also, this: &amp;quot;&lt;a class="reference external" href="http://blogs.hbr.org/berkun/2008/10/the-necessity-of-failure-in-in.html"&gt;The Necessity of Failure in Innovation (+ more on
CDOs)&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This, too: &amp;quot;&lt;a class="reference external" href="http://www.scottberkun.com/blog/2006/why-innovation-efforts-fail/"&gt;Why innovation efforts
fail&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;While we're at it: &amp;quot;&lt;a class="reference external" href="http://commscopeblogs.com/2011/12/21/accepting-failure-is-key-to-good-overall-returns-on-high-risk-development-programs/"&gt;Accepting Failure is Key to Good Overall Returns on
High-Risk Development
Programs&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;I can't say enough about the value of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this in Forbes: &amp;quot;&lt;a class="reference external" href="http://www.forbes.com/sites/work-in-progress/2011/05/05/innovations-return-on-failure-rof/"&gt;Innovation's Return on Failure:
ROF&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Also, this: &amp;quot;&lt;a class="reference external" href="http://blogs.hbr.org/berkun/2008/10/the-necessity-of-failure-in-in.html"&gt;The Necessity of Failure in Innovation (+ more on
CDOs)&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This, too: &amp;quot;&lt;a class="reference external" href="http://www.scottberkun.com/blog/2006/why-innovation-efforts-fail/"&gt;Why innovation efforts
fail&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;While we're at it: &amp;quot;&lt;a class="reference external" href="http://commscopeblogs.com/2011/12/21/accepting-failure-is-key-to-good-overall-returns-on-high-risk-development-programs/"&gt;Accepting Failure is Key to Good Overall Returns on
High-Risk Development
Programs&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;I can't say enough about the value of &amp;quot;failure&amp;quot;.  The big issue here is
the label.&lt;/p&gt;
&lt;p&gt;A project with a grand scope and strategic vision gets changed to make
it smaller and more focused.  Did it &amp;quot;fail&amp;quot; to deliver on the original
requirements?  Or did someone learn that the original grand scope was
wrong?&lt;/p&gt;
&lt;p&gt;A project that changes isn't failure.  It's just lessons learned.&lt;/p&gt;
&lt;p&gt;Canceling, re-scoping, de-scoping, and otherwise modifying a project is
what innovation looks like.  It should not be counted as a &amp;quot;failure&amp;quot;.&lt;/p&gt;
&lt;p&gt;A project &amp;quot;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Death_march_(project_management)"&gt;Death
March&lt;/a&gt;&amp;quot;
occurs because failure is not an option, and change will be labeled as
failure.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="did-it-fail-or-did-someone-l"&gt;
&lt;h2&gt;Did it &amp;quot;fail&amp;quot; ... Or did someone l...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-10 21:15:24.729000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Did it &amp;quot;fail&amp;quot; ... Or did someone learn ... &amp;quot;&lt;/p&gt;
&lt;p&gt;Very few tribes (ooops, I think their called organizations these days)
would tolerate words like we are going to try ... and spend ... dollars
to figure out what to do. The response would be something like, what do
you mean that you don't know EXACTLY what to do?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-the-startup-term-quot-pivot-quot-startups-d"&gt;
&lt;h2&gt;Use the startup term &amp;amp;quot;pivot&amp;amp;quot;. Startups d...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-21 19:34:05.877000-05:00&lt;/p&gt;
&lt;p&gt;Use the startup term &amp;quot;pivot&amp;quot;. Startups don't fail. They try x, learn y
and then try z.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="project management"></category></entry><entry><title>Self-Direction, Mastery, Purpose</title><link href="https://slott56.github.io/2012_01_05-self_direction_mastery_purpose.html" rel="alternate"></link><published>2012-01-05T08:00:00-05:00</published><updated>2012-01-05T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-05:/2012_01_05-self_direction_mastery_purpose.html</id><summary type="html">&lt;p&gt;Watch
this: &lt;a class="reference external" href="http://www.youtube.com/watch?v=u6XAPnuFjJc"&gt;http://www.youtube.com/watch?v=u6XAPnuFjJc&lt;/a&gt;
Brilliant summary of what &lt;strong&gt;really&lt;/strong&gt; motivates people.
The most important advice: provide a sense of purpose and get out of
people's way so that they can do the right thing.
Micromanagement, incentives, annual performance reviews and the like
aren't as useful …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Watch
this: &lt;a class="reference external" href="http://www.youtube.com/watch?v=u6XAPnuFjJc"&gt;http://www.youtube.com/watch?v=u6XAPnuFjJc&lt;/a&gt;
Brilliant summary of what &lt;strong&gt;really&lt;/strong&gt; motivates people.
The most important advice: provide a sense of purpose and get out of
people's way so that they can do the right thing.
Micromanagement, incentives, annual performance reviews and the like
aren't as useful as providing the sense of purpose, the opportunity for
mastery and the freedom of self-direction.&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Epic indictment of Waterfall Methods</title><link href="https://slott56.github.io/2012_01_03-epic_indictment_of_waterfall_methods.html" rel="alternate"></link><published>2012-01-03T08:00:00-05:00</published><updated>2012-01-03T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2012-01-03:/2012_01_03-epic_indictment_of_waterfall_methods.html</id><summary type="html">&lt;p&gt;Saw this recently.&lt;/p&gt;
&lt;blockquote&gt;
Why do most gov websites look like they were created by someone's 10
year old nephew yet cost millions to make?
— Steve Dekorte (&amp;#64;stevedekorte) &lt;a class="reference external" href="https://twitter.com/stevedekorte/status/152208488716701696"&gt;December 29,
2011&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this aptly summarizes the results of a waterfall methodology.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You wrote a lot of requirements, not fully understanding …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Saw this recently.&lt;/p&gt;
&lt;blockquote&gt;
Why do most gov websites look like they were created by someone's 10
year old nephew yet cost millions to make?
— Steve Dekorte (&amp;#64;stevedekorte) &lt;a class="reference external" href="https://twitter.com/stevedekorte/status/152208488716701696"&gt;December 29,
2011&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this aptly summarizes the results of a waterfall methodology.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You wrote a lot of requirements, not fully understanding the actors
or their use cases.&lt;/li&gt;
&lt;li&gt;Your vendor implemented those requirements because they were
contractual obligations not because they created value for the
actors.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The government's not the only offender.  They're just more visible and
more bound up in a legally-mandated purchasing cycle that makes the
waterfall desirable and more Agile methods undesirable.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="another-aspect-is-the-damaged-or-virtually-non-exi"&gt;
&lt;h2&gt;Another aspect is the damaged or virtually non-exi...&lt;/h2&gt;
&lt;p&gt;TechNeilogy&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-03 09:41:30.120000-05:00&lt;/p&gt;
&lt;p&gt;Another aspect is the damaged or virtually non-existent prototype loop.
As the architect Christopher Alexander points out, useful things of
value are grown, not built to spec. In software we've gotten this idea
that the class of people using, selling or designing the stuff have
magical architectural powers when it comes to envisioning what they
want. This is not often the case.
The real world analog is designing a house. I think I know what I want
in a house, and I do deserve input into any house I'm paying to have
built. But if I thought I could manage the entire design and engineering
process up front and then just hand it to the builders, I'd probably end
up with a pretty sorry house. On the other hand, if I were to work
iteratively with a group of skilled architects, engineers, and designers
-- planning for changes and growth up front -- I might just end up with
a really nice home.
Users, architects and designers who fail to recognize that this must be
an iterative process of unfolding end up in trouble, whether building
houses or software. And in a business sense, this iterative process
actually saves money, because things are done right, problems are
spotted early, etc. The costs are front loaded effectively, rather than
wastefully, as in a fiat, non-iterative process.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="waterfall"></category><category term="agile"></category></entry><entry><title>LANGSEC: Language-theoretic Security</title><link href="https://slott56.github.io/2011_12_29-langsec_language_theoretic_security.html" rel="alternate"></link><published>2011-12-29T08:00:00-05:00</published><updated>2011-12-29T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-29:/2011_12_29-langsec_language_theoretic_security.html</id><summary type="html">&lt;p&gt;Wow.  Just wow.  See &amp;quot;&lt;a class="reference external" href="http://www.cs.dartmouth.edu/~sergey/langsec/occupy/"&gt;LANGSEC explained in a few
slogans&lt;/a&gt;&amp;quot;.
Short, easy-to-grasp explanation of why complex protocols create new
problems.
I'm happy with REST and the stack of stuff under it (HTTP, TCP/IP, etc.)
Once upon a time (2001), I invented by own version of a RESTful protocol
outside …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Wow.  Just wow.  See &amp;quot;&lt;a class="reference external" href="http://www.cs.dartmouth.edu/~sergey/langsec/occupy/"&gt;LANGSEC explained in a few
slogans&lt;/a&gt;&amp;quot;.
Short, easy-to-grasp explanation of why complex protocols create new
problems.
I'm happy with REST and the stack of stuff under it (HTTP, TCP/IP, etc.)
Once upon a time (2001), I invented by own version of a RESTful protocol
outside HTTP.  That was cool.  Very simple, and very fast.  But
relatively inflexible.  The syntax was more like FTP and SMTP; the
semantics where mostly just CRUD rules and RESTful state transfers.
I was way too dumb to leverage HTTP methods and the genius of a URI.&lt;/p&gt;
</content><category term="Technologies"></category><category term="REST"></category><category term="HTTP"></category><category term="security"></category></entry><entry><title>Technology Refresh</title><link href="https://slott56.github.io/2011_12_27-technology_refresh.html" rel="alternate"></link><published>2011-12-27T08:00:00-05:00</published><updated>2011-12-27T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-27:/2011_12_27-technology_refresh.html</id><summary type="html">&lt;p&gt;I've been refurbishing an older project -- written in 2008.  Probably
with Django 1.0.1.  Certainly with Python 2.5.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.3/releases/#release"&gt;Django 1.3
release&lt;/a&gt;
has been around since March.  The change underscored the importance of
technology refresh.&lt;/p&gt;
&lt;p&gt;The best part was to delete code.  There were two significant reasons …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been refurbishing an older project -- written in 2008.  Probably
with Django 1.0.1.  Certainly with Python 2.5.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.3/releases/#release"&gt;Django 1.3
release&lt;/a&gt;
has been around since March.  The change underscored the importance of
technology refresh.&lt;/p&gt;
&lt;p&gt;The best part was to delete code.  There were two significant reasons.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.3/ref/django-admin/#testserver-fixture-fixture"&gt;testserver command&lt;/a&gt; allowed
me to eliminate a bunch of low-value test harness.   Without this
command, we had to create our own test database, start a server, run
integration tests, and then kill the server.  With this command, we
simply start and kill the server.&lt;/li&gt;
&lt;li&gt;The RESTful web services can be securely integrated into the main web
application.  A simple piece of middleware can authenticate requests
based on headers containing &lt;a class="reference external" href="http://forgerock.com/openam.html"&gt;ForgeRock
OpenAM&lt;/a&gt; tokens.  It may be that
this was &lt;em&gt;always&lt;/em&gt; a feature of Django, but over the last few years,
we've figured out how to exploit it with simple middleware.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Few things are better than removing old code and replacing it with
code written (and tested) by someone else.&lt;/p&gt;
&lt;p&gt;In  addition to the deletes, we also rearranged some of the
dependencies.  We had (incorrectly) thought of the Django project as
somehow central or essential.  It turns out that a bunch of other
Python libraries were actually core to the application.  The Django
web presentation was just one of the sensible use cases.  A suite of
command-line apps could also be built around the underlying
libraries.&lt;/p&gt;
&lt;p&gt;In addition to this cleanup, we also replaced the documentation with
a new Sphinx project.  The project originally used
&lt;a class="reference external" href="http://epydoc.sourceforge.net/"&gt;Epydoc&lt;/a&gt; markup.  This meant that
every single docstring had to be rewritten to use RST markup.  The
upside of this is that we corrected numerous errors.&lt;/p&gt;
&lt;div class="section" id="there-was-pain"&gt;
&lt;h2&gt;There Was Pain&lt;/h2&gt;
&lt;p&gt;This wasn't without some pain.&lt;/p&gt;
&lt;p&gt;Was the cost worth the effort?  That's the real question here.&lt;/p&gt;
&lt;p&gt;I think that many IT managers adopt a silly &amp;quot;If it ain't broke, don't
fix it&amp;quot; policy that focuses on short-term cost and short-term value.
It ignores long-term accrual from even tiny short-term cost savings.&lt;/p&gt;
&lt;p&gt;Here's are two important lessons.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Money saved today is saved forever.&lt;/li&gt;
&lt;li&gt;Savings accrue.  Forever.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's important to avoid short-term thinking about cost and benefit.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="please-consider-updating-the-posting-w-how-the-co"&gt;
&lt;h2&gt;Please consider updating the posting w/ how the co...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-28 08:18:36.389000-05:00&lt;/p&gt;
&lt;p&gt;Please consider updating the posting w/ how the company actually saved
money. Also, consider adding a section about &amp;quot;value added&amp;quot; by things
like knowledge discovery.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Color Schemes</title><link href="https://slott56.github.io/2011_12_20-color_schemes.html" rel="alternate"></link><published>2011-12-20T08:00:00-05:00</published><updated>2011-12-20T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-20:/2011_12_20-color_schemes.html</id><summary type="html">&lt;p&gt;I worked with this a few years ago to tweak up some web pages.
&lt;a class="reference external" href="http://colorschemedesigner.com/"&gt;http://colorschemedesigner.com/&lt;/a&gt;
I just rediscovered it.  It's a cool toy.  You get some colors that all
&amp;quot;go&amp;quot; together.  If you're careful with your .CSS definitions, you give
people this page and let them fuss around …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I worked with this a few years ago to tweak up some web pages.
&lt;a class="reference external" href="http://colorschemedesigner.com/"&gt;http://colorschemedesigner.com/&lt;/a&gt;
I just rediscovered it.  It's a cool toy.  You get some colors that all
&amp;quot;go&amp;quot; together.  If you're careful with your .CSS definitions, you give
people this page and let them fuss around until their positively silly
with color palettes.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HTML"></category><category term="css"></category></entry><entry><title>Good Summary of Bad Security Assumptions</title><link href="https://slott56.github.io/2011_12_15-good_summary_of_bad_security_assumptions.html" rel="alternate"></link><published>2011-12-15T08:00:00-05:00</published><updated>2011-12-15T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-15:/2011_12_15-good_summary_of_bad_security_assumptions.html</id><summary type="html">&lt;p&gt;This isn't the &lt;a class="reference external" href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;OWASP Top
10&lt;/a&gt;
list, but it's still very handy.
&lt;a class="reference external" href="http://www.eweek.com/c/a/Security/Top-10-Dumb-Computer-Security-Notions-and-Myths-740587/"&gt;Top 10 Dumb Computer Security
Notions&lt;/a&gt;.
I'm particularly fond of the &amp;quot;security can't be perfect; since it can't
be perfect, why bother?&amp;quot; approach.
One other notion that amuses me is the silliness of changing a password
every 90 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This isn't the &lt;a class="reference external" href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;OWASP Top
10&lt;/a&gt;
list, but it's still very handy.
&lt;a class="reference external" href="http://www.eweek.com/c/a/Security/Top-10-Dumb-Computer-Security-Notions-and-Myths-740587/"&gt;Top 10 Dumb Computer Security
Notions&lt;/a&gt;.
I'm particularly fond of the &amp;quot;security can't be perfect; since it can't
be perfect, why bother?&amp;quot; approach.
One other notion that amuses me is the silliness of changing a password
every 90 days.  The argument is that &amp;quot;it's harder to hit a moving
target&amp;quot;.  That's obviously false.  A good rainbow table and a bad
password without salt can be broken in about half an hour.  There's no
&amp;quot;moving target&amp;quot; here.  At 30 minutes to crack a password, the only way
the target can appear to move is making every password a 1-time-only
password based on some kind of external source (like a token generator.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="security"></category></entry><entry><title>Statically Typed Language Nonsense</title><link href="https://slott56.github.io/2011_12_09-statically_typed_language_nonsense.html" rel="alternate"></link><published>2011-12-09T08:00:00-05:00</published><updated>2011-12-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-09:/2011_12_09-statically_typed_language_nonsense.html</id><summary type="html">&lt;p&gt;Read this: &amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/l/36103"&gt;Here Comes Functional Programming&lt;/a&gt;&amp;quot; by Larry O'Brien in SD Times.&lt;/p&gt;
&lt;blockquote&gt;
people who should know better continue to assert that statically
typed languages are &amp;quot;safer, because the compiler can catch errors
that otherwise wouldn't show up until runtime.&amp;quot; While it's true a
statically typed language can detect that you've …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Read this: &amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/l/36103"&gt;Here Comes Functional Programming&lt;/a&gt;&amp;quot; by Larry O'Brien in SD Times.&lt;/p&gt;
&lt;blockquote&gt;
people who should know better continue to assert that statically
typed languages are &amp;quot;safer, because the compiler can catch errors
that otherwise wouldn't show up until runtime.&amp;quot; While it's true a
statically typed language can detect that you've assigned a string to
a double without running your code, no type system is so strict that
it can substitute for a test suite, and if you have a test suite,
type-assignment errors are discovered and precisely diagnosed with
little difficulty.&lt;/blockquote&gt;
&lt;p&gt;Thank you.   A language like Python, which lacks static type
declarations for variables, is not evil or an accident waiting to
happen.&lt;/p&gt;
&lt;p&gt;The article is about functional languages.  But the static declaration
statement is universally true.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-love-python-myself-but-i-ve-dabbled-in-hask"&gt;
&lt;h2&gt;I love Python myself, but I've dabbled in Hask...&lt;/h2&gt;
&lt;p&gt;Luke Plant&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-09 12:02:48.058000-05:00&lt;/p&gt;
&lt;p&gt;I love Python myself, but I've dabbled in Haskell and this oft-repeated
argument only goes so far. You could equally say that no test suite is a
substitute for static typing!
For example, the following code has a type level bug (class Bar has a
method missing), despite a test suite with 100% coverage:
&lt;a class="reference external" href="https://gist.github.com/1452367"&gt;https://gist.github.com/1452367&lt;/a&gt;
The problem is that tests only test code works for one value - an
infinitesimal fraction of the possible number of values. Languages with
strong static typing systems can enforce checks for *every* value,
and, in the hands of someone skilled, can be used to make remarkable
guarantees about a program that would be extremely difficult/impossible
to do using a test suite.
For example, the guarantees made by STM code in Haskell - see
&lt;a class="reference external" href="http://book.realworldhaskell.org/read/software-transactional-memory.html"&gt;http://book.realworldhaskell.org/read/software-transactional-memory.html&lt;/a&gt;
section &amp;quot;STM and safety&amp;quot; - these checks are impossible to do using
tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="types-considered-harmful-by-lamport-http-resear"&gt;
&lt;h2&gt;Types Considered Harmful by Lamport &lt;a class="reference external" href="http://resear"&gt;http://resear&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-26 15:38:19.907000-05:00&lt;/p&gt;
&lt;p&gt;Types Considered Harmful by Lamport
&lt;a class="reference external" href="http://research.microsoft.com/en-us/um/people/lamport/tla/notes.html"&gt;http://research.microsoft.com/en-us/um/people/lamport/tla/notes.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-criteria-are-being-used-to-judge-static-versu"&gt;
&lt;h2&gt;What criteria are being used to judge static versu...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-15 15:28:03.888000-05:00&lt;/p&gt;
&lt;p&gt;What criteria are being used to judge static versus dynamic languages?
What is the context in which the criteria are being applied?
In my opinion, it is a design choice. What comes to mind is the quote
from spider man “with great power comes great responsibility”. The good
news is that dynamic languages allow for greater flexibility. The bad
news is that the greater flexibility allows you to get yourself into
more trouble.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-but-i-ve-dabbled-in-haskell-and-this-oft"&gt;
&lt;h2&gt;&amp;amp;quot;but I've dabbled in Haskell and this oft...&lt;/h2&gt;
&lt;p&gt;mazelife&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-09 13:36:30.290000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;but I've dabbled in Haskell and this oft-repeated argument only goes so
far&amp;quot;
True, but Haskell is at the very far end of the scale in terms of what
its type system is capable of. When you make an assertion that a
statically typed language like, say, Java, is inherently safer, it's a
more problematic proposition.
Interestingly enough, Haskell's type system can actually aid you in
writing your test suite (see, for example QuickCheck, which can generate
test caes for you).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="should-your-specification-language-be-typed-wit"&gt;
&lt;h2&gt;Should Your Specification Language Be Typed?  (wit...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-26 15:27:15.938000-05:00&lt;/p&gt;
&lt;p&gt;Should Your Specification Language Be Typed? (with Larry Paulson)
ACM Transactions on Programming Languages and Systems 21, 3 (May 1999)
502-526. Also appeared as SRC Research Report 147.
&lt;a class="reference external" href="http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-types.pdf"&gt;http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-types.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="luke-i-d-argue-that-it-is-not-100-coverage-a"&gt;
&lt;h2&gt;&amp;#64;Luke I'd argue that it is not 100% coverage a...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-09 13:39:10.885000-05:00&lt;/p&gt;
&lt;p&gt;&amp;#64;Luke I'd argue that it is not 100% coverage as it does not verify the
logic of what happens if val &amp;gt; 10.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Programming Languages"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>I'm Confused by this Marketing Ploy</title><link href="https://slott56.github.io/2011_12_06-im_confused_by_this_marketing_ploy.html" rel="alternate"></link><published>2011-12-06T08:00:00-05:00</published><updated>2011-12-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-06:/2011_12_06-im_confused_by_this_marketing_ploy.html</id><summary type="html">&lt;p&gt;Got this a few weeks back.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My job is to persuade bloggers to link to our site.&lt;/p&gt;
&lt;p&gt;I really love my job! We have a friendly team and good management,
but unfortunately I have no idea how to convince a blogger to link to
us, I'm afraid I might lose …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Got this a few weeks back.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My job is to persuade bloggers to link to our site.&lt;/p&gt;
&lt;p&gt;I really love my job! We have a friendly team and good management,
but unfortunately I have no idea how to convince a blogger to link to
us, I'm afraid I might lose my job because of it :(&lt;/p&gt;
&lt;p&gt;And that is why, instead of sending letters to thousands of different
blogs, I am reading yours.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Couldn't parse it.&lt;/p&gt;
&lt;p&gt;It seems to be a calculated Pity Ploy.  &amp;quot;I'm afraid I might lose my
job...I am reading your [blog].&amp;quot;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The product seemed cool enough.  The pitch, however, was too sketchy&lt;/dt&gt;
&lt;dd&gt;for me.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="other-possible-messages-i-love-something-i-h"&gt;
&lt;h2&gt;Other possible messages: &amp;quot;I love something I h...&lt;/h2&gt;
&lt;p&gt;cwallenpoole&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-06 11:56:00.637000-05:00&lt;/p&gt;
&lt;p&gt;Other possible messages:
&amp;gt;I love something I have no idea how to do!
&amp;gt;Instead of doing my job, I am goofing off on the interwebs!
&amp;gt;My management is great because they haven't been able to detect
incompetence!
&amp;gt;I am unwilling to do basic research on how to do my job so I was hoping
you would tell me!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="blogging"></category></entry><entry><title>Agile "Religion" Issues</title><link href="https://slott56.github.io/2011_12_01-agile_religion_issues.html" rel="alternate"></link><published>2011-12-01T08:00:00-05:00</published><updated>2011-12-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-12-01:/2011_12_01-agile_religion_issues.html</id><summary type="html">&lt;p&gt;See this &lt;a class="reference external" href="http://www.pmhut.com/limitations-of-agile-software-development"&gt;Limitations of Agile Software
Development&lt;/a&gt; and
this &lt;a class="reference external" href="https://slott56.github.io/2011_10_20-the_agile_religion_what.html"&gt;The Agile &amp;quot;Religion&amp;quot; --
What?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's important is that the limitations of Agile are not
limitations.  They're (mostly) intentional roadblocks to Agile.&lt;/p&gt;
&lt;p&gt;Looking for &amp;quot;limitations&amp;quot; in the Agile approach misses the point of
Agile in several important ways.&lt;/p&gt;
&lt;p&gt;The most important problem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this &lt;a class="reference external" href="http://www.pmhut.com/limitations-of-agile-software-development"&gt;Limitations of Agile Software
Development&lt;/a&gt; and
this &lt;a class="reference external" href="https://slott56.github.io/2011_10_20-the_agile_religion_what.html"&gt;The Agile &amp;quot;Religion&amp;quot; --
What?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What's important is that the limitations of Agile are not
limitations.  They're (mostly) intentional roadblocks to Agile.&lt;/p&gt;
&lt;p&gt;Looking for &amp;quot;limitations&amp;quot; in the Agile approach misses the point of
Agile in several important ways.&lt;/p&gt;
&lt;p&gt;The most important problem with this list of &amp;quot;limitations&amp;quot; is that
five of the six issues are simply anti-Agile positions that a company
can take.&lt;/p&gt;
&lt;p&gt;In addition to being anti-Agile, a company can be anti-Test Driven
Development.  They can be Anti-Continuous Integration.  They can be
Anti-NoSQL.  There are lots of steps a company can take to subvert any
given development practice.  Taking a step against a practice does not
reveal a limitation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;1. A team of stars... it takes more than the average Joe to achieve agility&amp;quot;&lt;/strong&gt;.   This is not a specific step against agility.  I chalk
this up to a project manager who really likes autocratic rule.  It's
also possible that this is from a project manager that's deeply
misanthropic.  Either way, the underlying assumption is that
developers are somehow too dumb or disorganized to be trusted.&lt;/p&gt;
&lt;p&gt;Agile only requires working toward a common goal.  I can't see how a
project manager is an &lt;em&gt;essential&lt;/em&gt; feature of working toward a common
goal.  A manager may make things more clear or more efficient, but
that's all.  Indeed, the &amp;quot;clarity&amp;quot; issue is emphasized in most Agile
methods: a &amp;quot;Scrum Master&amp;quot; is part of the team specifically to foster
clarity of purpose.&lt;/p&gt;
&lt;p&gt;Further, some Agile methods require a Product Owner to clarify the
team's direction.&lt;/p&gt;
&lt;p&gt;&amp;quot;A team of stars&amp;quot; is emphatically &lt;strong&gt;not&lt;/strong&gt; required.  The experience of
folks working in Agile environments confirms this.  Real, working
Agile teams really really are average.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;2. Fit with organizational culture&amp;quot;&lt;/strong&gt;.  This has nothing to do with
Agile methods.  This is just a sweeping (and true) generalization
about organizations.  An organization that refuses autonomy and
refuses flexibility can't use Agile methods.  An organization that
refuses to create a &amp;quot;Big Design Up Front&amp;quot; can't use a traditional
waterfall method and &lt;strong&gt;must&lt;/strong&gt; use Agile methods.&lt;/p&gt;
&lt;p&gt;Organizational fit is not a limitation of Agile.  It's just a fact
about people.&lt;/p&gt;
&lt;div class="section" id="small-team-assuming-that-large-projects-tend-to-require-large-teams-this-restriction-naturally-extends-to-project-size"&gt;
&lt;h2&gt;&amp;quot;3. Small team...Assuming that large projects tend to require large teams, this restriction naturally extends to project size.&amp;quot;&lt;/h2&gt;
&lt;p&gt;The assumption simply contradicts Agile principles.  It's not a
&amp;quot;limitation&amp;quot; at all.  Large projects (with large numbers of people)
have a number of smaller teams.  I've seen projects with over a dozen
parallel Agile teams.  This means that in addition to a dozen daily
scrums, there's also a scrum-of-scrums by the scrum masters.&lt;/p&gt;
&lt;p&gt;Throwing out the small team isn't a limitation of Agile.  It's a
failure to understand Agile.  A project with many small teams works
quite well.  It's not &amp;quot;religion&amp;quot;.  It's experience.&lt;/p&gt;
&lt;p&gt;A single large team has been shown (for the last few decades) to be
expensive and risky.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;4. Collocated team...We can easily think of a number of situations where this limitation prevents using agile:&amp;quot;&lt;/strong&gt;  These are not
limitations of Agile, but outright refusals to follow Agile
principles.  Specifically:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;&lt;strong&gt;Office space organized by departments&lt;/strong&gt;&amp;quot; is not a limitation of
Agile.  That's a symptom of an organization that refuses to be Agile.
See #2 above; this indicates a bad fit with the culture.  An
organization that doesn't have space organized by department might
have trouble executing a traditional waterfall method.&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;strong&gt;Distributed environment&lt;/strong&gt;&amp;quot; is not a limitation of Agile.  Phones
work.  Skype works.&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;strong&gt;Subcontracting... We have to acknowledge that there is no
substitute for face-to-face&lt;/strong&gt;&amp;quot;.  Actually, subcontracting is
irrelevant.  Further, subcontracting is not a synonym for a failure
to be collocated.  When subcontractors are located remotely, phones
still work.  Skype works better and is cheaper.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;5. Where’s my methodology?&amp;quot;&lt;/strong&gt;  This is hard to sort out, since
it's full of errors.  Essentially, this appears to be a claim that a
well-defined, documented processes is somehow &lt;em&gt;essential&lt;/em&gt; to software
development.  Experience over the last few decades is quite clear
that the written processes and the work actually performed diverge a
great deal.  Most of the time, what people do is not documented, and
the documented process has no bearing on what people actually do.  A
documented process -- in most cases -- appears irrelevant to the work
actually done.&lt;/p&gt;
&lt;p&gt;Agile is not chaos.  It's a change in the rules to de-emphasize
unthinking adherence to a plan and replace this with focus on working
software.  Well-organized software analysis, design, code and test
still exist even without elaborately documented (and irrelevant)
process definitions.&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;strong&gt;6. Team ownership vs. individual accountability... how can we implement it since an organization’s performance-reward system assesses individual performance and rewards individuals, not teams...?&lt;/strong&gt;&amp;quot;
Again, the assumption (&amp;quot;performance-reward system
assesses individual performance&amp;quot;) is simply a rejection of Agile
principles.  It's not a limitation of Agile, it's an intentional step
away from an Agile approach.&lt;/p&gt;
&lt;p&gt;If an organization insists on individual performance metrics, see #2.
The culture is simply antithetical to Agile. Agile still works; the
organization, however, is taking active steps to subvert it.&lt;/p&gt;
&lt;p&gt;Agile isn't a religion.  It doesn't suffer from hidden or ignored
&amp;quot;limitations&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-did-we-question-the-assumption-that-agile-was-indeed-superior-to-traditional-methodologies"&gt;
&lt;h2&gt;&amp;quot;But did we question the assumption that Agile was indeed superior to traditional methodologies?&amp;quot;&lt;/h2&gt;
&lt;p&gt;The answer is &amp;quot;yes&amp;quot;.  A thousand times yes.  The whole reason for
Agile approaches is specifically and entirely because of folks
questioning traditional methodologies.  Traditional
command-and-control methodologies have a long history of not working
out well for software development.  The Agile Manifesto is a result
of examining the failures of traditional methods.&lt;/p&gt;
&lt;p&gt;A traditional &amp;quot;waterfall&amp;quot; methodology works when there are few
unknowns.  Construction projects, for example, rarely have the kinds
of unknowns that software development has.  Construction usually
involves well-known techniques applied to well-documented plans to
produce a well-understood result.  Software development rarely
involves so many well-known details.  Software development is 80%
design and 20% construction.  And the design part involves 80%
learning something new and 20% applying experience.&lt;/p&gt;
&lt;p&gt;Agile is not Snake Oil.  It's not something to be taken on faith.&lt;/p&gt;
&lt;p&gt;The Agile community exists for exactly one reason.  Agile methods
work.&lt;/p&gt;
&lt;p&gt;Agile isn't a money-making product or service offering.  Agile --
itself -- is free.  Some folks try to leverage Agile techniques to
sell supporting products or services, but Agile isn't an IBM or
Oracle product.  There are no &amp;quot;backers&amp;quot;.  There's no trail of money
to see who profits from Agility.&lt;/p&gt;
&lt;p&gt;Folks have been questioning &amp;quot;traditional&amp;quot; methodologies for years.
Why?  Because &amp;quot;traditional&amp;quot; waterfall methodologies are a
crap-shoot.  Sometimes they work and sometimes they don't work.  The
essential features of long term success are summarized in the &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;Agile
Manifesto&lt;/a&gt;.  Well-run projects all
seem to have certain common features; the features of well-run
projects form the basis for the Agile methods.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="mostly-intentional-roadblock-personally-i-p"&gt;
&lt;h2&gt;(mostly) intentional roadblock. Personally I p...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-03 11:50:29.575000-05:00&lt;/p&gt;
&lt;p&gt;&amp;gt;(mostly) intentional roadblock
Personally I prefer words like &amp;quot;administering the are you serious test&amp;quot;?
Recently, a client was jumping up and down that they wanted x. I
requested that they do x to further their goal. It took them over 6 days
to do x. When I pointed this out they were furious were furious but they
go the point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hi-probably-our-entry-may-be-off-topic-but-anyway"&gt;
&lt;h2&gt;Hi, probably our entry may be off topic but anyway...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-01 05:03:23.372000-05:00&lt;/p&gt;
&lt;p&gt;Hi, probably our entry may be off topic but anyways, I have been surfing
around your blog and it looks
very professional. It’s obvious you know your topic and you appear
fervent about it. I’m developing a
fresh blog plus I’m struggling to make it look good, as well as offer
the best quality content. I have
learned much at your web site and also I anticipate alot more articles
and will be coming back soon.
Thanks you.
&lt;a class="reference external" href="http://www.cprime.com/"&gt;Project Management Training&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-for-sharing-i-will-bookmark-and-be-back-ag"&gt;
&lt;h2&gt;Thanks for sharing, I will bookmark and be back ag...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-01 05:19:23.254000-05:00&lt;/p&gt;
&lt;p&gt;Thanks for sharing, I will bookmark and be back again
&lt;a class="reference external" href="http://www.cprime.com/about/scrum_faq.html"&gt;Agile Software
Development&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="great-thoughts-you-got-there-believe-i-may-possib"&gt;
&lt;h2&gt;Great thoughts you got there, believe I may possib...&lt;/h2&gt;
&lt;p&gt;agathiyan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-16 01:50:47.869000-05:00&lt;/p&gt;
&lt;p&gt;Great thoughts you got there, believe I may possibly try just some of it
throughout my daily life.
&lt;a class="reference external" href="http://www.cprime.com/about/scrum_faq.html"&gt;Agile Software Development with
Scrum&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="great-thoughts-you-got-there-believe-i-may-possib-1"&gt;
&lt;h2&gt;Great thoughts you got there, believe I may possib...&lt;/h2&gt;
&lt;p&gt;agathiyan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-02-09 03:44:22.716000-05:00&lt;/p&gt;
&lt;p&gt;Great thoughts you got there, believe I may possibly try just some of it
throughout my daily life.
&lt;a class="reference external" href="http://www.cprime.com/about/scrum_faq.html"&gt;Agile Software
Development&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="agile"></category><category term="project management"></category></entry><entry><title>The Value of Microsoft's Tools</title><link href="https://slott56.github.io/2011_11_29-the_value_of_microsofts_tools.html" rel="alternate"></link><published>2011-11-29T08:00:00-05:00</published><updated>2011-11-29T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-11-29:/2011_11_29-the_value_of_microsofts_tools.html</id><summary type="html">&lt;p&gt;See Andrew Binstock's &amp;quot;&lt;a class="reference external" href="http://drdobbs.com/windows/231700224#"&gt;Windows 8: Microsoft's Development Re-Do&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
The costs of these migrations has been enormous and continues to
accumulate...&lt;/blockquote&gt;
&lt;p&gt;I can only rub my hands with glee and engage in shameless &amp;quot;I Told You
So&amp;quot; self-congratulations.&lt;/p&gt;
&lt;p&gt;Only you can prevent being held hostage by Microsoft.&lt;/p&gt;
&lt;p&gt;More than once, I've …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Andrew Binstock's &amp;quot;&lt;a class="reference external" href="http://drdobbs.com/windows/231700224#"&gt;Windows 8: Microsoft's Development Re-Do&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
The costs of these migrations has been enormous and continues to
accumulate...&lt;/blockquote&gt;
&lt;p&gt;I can only rub my hands with glee and engage in shameless &amp;quot;I Told You
So&amp;quot; self-congratulations.&lt;/p&gt;
&lt;p&gt;Only you can prevent being held hostage by Microsoft.&lt;/p&gt;
&lt;p&gt;More than once, I've observed that a strategy of using only
proprietary tools would be expensive and complex.  And every time, the
folks I was talking to trivialized my concerns as hardly worth
considering.&lt;/p&gt;
&lt;p&gt;I've seen orphaned software: it only compiles on an old version of
Visual Studio.   I've seen software orphaned so badly that it can only
be compiled on one creaky old PC.  The cost to convert was so
astronomical that the customer preferred to hope for a product to
arise somewhere in the marketplace.  When no suitable product appeared
over the decades, the problem reached palpable Pants On Fire (POF)
levels of panic.  All due to the hidden costs of Microsoft's tools.&lt;/p&gt;
&lt;p&gt;I've even been told that VB is a terrible language, but Visual Studio
makes it acceptable.&lt;/p&gt;
</content><category term="Technologies"></category><category term="tools"></category></entry><entry><title>Justification of Project Staffing</title><link href="https://slott56.github.io/2011_11_28-justification_of_project_staffing.html" rel="alternate"></link><published>2011-11-28T07:37:00-05:00</published><updated>2011-11-28T07:37:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-11-28:/2011_11_28-justification_of_project_staffing.html</id><summary type="html">&lt;p&gt;I really dislike being asked to plan a project.  It's hard to predict
the future accurately.&lt;/p&gt;
&lt;p&gt;In spite of the future being -- well -- the future, and utterly
unknowable, we still have to have the following kinds of discussions.&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;It's probably going to take a team of six.&amp;quot;&lt;/p&gt;
&lt;p&gt;Customer: &amp;quot;We …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I really dislike being asked to plan a project.  It's hard to predict
the future accurately.&lt;/p&gt;
&lt;p&gt;In spite of the future being -- well -- the future, and utterly
unknowable, we still have to have the following kinds of discussions.&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;It's probably going to take a team of six.&amp;quot;&lt;/p&gt;
&lt;p&gt;Customer: &amp;quot;We don't really have the budget for that.  You're going to
have to provide a lot of justification for a team that big.&amp;quot;&lt;/p&gt;
&lt;p&gt;What's wrong with this picture?  Let's enumerate.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Customer is paying me for my opinion based on my experience.  If they
want to provide me with the answers, I have a way to save them a lot
of money.  Write their own project plan with their own answers and
leave me out of it.&lt;/li&gt;
&lt;li&gt;I've already provided all the justification there is.  I'm predicting
the future here.  Software projects are not simple Rate-Time-Distance
fourth-grade math problems.  They involve an unknown number of
unknowns.  I can't provide a &amp;quot;lot&amp;quot; of justification because there
isn't any indisputable basis for the prediction.&lt;/li&gt;
&lt;li&gt;I don't know the people. The customer -- typically -- hasn't hired
them yet.  Since I don't know them, I don't know how &amp;quot;productive&amp;quot;
they'll be.  They could hire a dozen n00bz who can't find their asses
blindfolded even using both hands.  Or.  They could hire two singular
geniuses who can knock the thing out in a weekend.  Or.  They could
hire a half-dozen arrogant SOB's who refuse to follow my
recommendations.&lt;/li&gt;
&lt;li&gt;They're going to do whatever they want no matter what I say.
Seriously.  I could say &amp;quot;six&amp;quot;.  They could argue that I should
rewrite the plan to say &amp;quot;four&amp;quot; without changing the effort and
duration.  Why ask me to change the plan?  A customer can only do
what they &lt;strong&gt;know&lt;/strong&gt; to be the right thing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Doing the Right Thing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's return to that last point.  A customer project manager can only
do what they absolutely &lt;strong&gt;know&lt;/strong&gt; is the right thing.  I can suggest
all kinds of things.  If they're too new, too different, too
disturbing, they're going to get ignored.&lt;/p&gt;
&lt;p&gt;Indeed, since people have such a huge &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Confirmation_bias"&gt;Confirmation
Bias&lt;/a&gt;, it's very,
very hard to introduce anything new.  A customer doesn't bring in
consultants without having already sold the idea that a software
development project is in the offing.  They justify spending a few
thousand on consulting by establishing some overall, ball-park,
big-picture budget and showing that the consulting fees are just a
small fraction of the overall.&lt;/p&gt;
&lt;p&gt;As consultants, we have to guess this overall, ball-park, big-picture
budget accurately, or the project will be shut down.  If we guess too
high, then the budget is out of control, or the scope isn't
well-enough defined, or some other smell will stop all progress.  If
we guess too low, then we have to lard on additional work to get back
to the original concept.&lt;/p&gt;
&lt;p&gt;Architectures, components and techniques &lt;strong&gt;all&lt;/strong&gt; have to meet
expectations. A customer that isn't familiar with test drive
development, for example, will have an endless supply of objections.
&amp;quot;It's unproven.&amp;quot;  &amp;quot;We don't have the budget for all that testing.&amp;quot;
&amp;quot;We're more comfortable with our existing process.&amp;quot;&lt;/p&gt;
&lt;p&gt;The final trump card is the passive aggressive &amp;quot;I'll have to see the
detailed justification.&amp;quot;  It means &amp;quot;Don't you dare.&amp;quot;  But it sounds
just like passive acceptance.&lt;/p&gt;
&lt;p&gt;Since project managers can only do what they know is right, they'll
find lots of ways of subverting the new and unfamiliar.&lt;/p&gt;
&lt;p&gt;If they don't like the architecture, the first glitch or delay or
problem will immediately lead to a change in direction to yank out the
new and replace it with the familiar.&lt;/p&gt;
&lt;p&gt;If they don't like a component, they'll find numerous great reasons to
rework that part of the project to remove the offending component.&lt;/p&gt;
&lt;p&gt;If they don't like a technique (e.g., Code Walk Throughs) they'll
subvert it.  Either not schedule them.  Or cancel them because there
are &amp;quot;more important things to do.&amp;quot;  Or interrupt them to pull people
out of them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overcoming the Confirmation Bias&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I find the process of overcoming the confirmation bias to be tedious.
Some people like the one-on-one &amp;quot;influencing&amp;quot; role.  It takes patience
and time to overcome the confirmation bias so that the customer is
open to new ideas.  I just don't have the patience.  It's too much
work to listen patiently to all the objections and slowly work through
all the alternatives.&lt;/p&gt;
&lt;p&gt;I've worked with folks who really relish this kind of thing.  Endless
one-on-one meetings.  Lots of pre-meetings and post-meetings and
reviews of drafts.  I suppose it's rewarding.  Sigh.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="doing-the-right-thing-is-this-a-relig"&gt;
&lt;h2&gt;&amp;quot;Doing the Right Thing&amp;quot; Is this a relig...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-11-24 17:39:52.953000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Doing the Right Thing&amp;quot;
Is this a religious activity? Must we summon a priest, rabbi or some
such thing? Must we convert someone to our &amp;quot;religion&amp;quot; so that they do
the &amp;quot;right thing&amp;quot;.
Perhaps the initial mindset is all wrong? Perhaps we should be &amp;quot;making
business decisions&amp;quot; instead?
Recently, one group at the client wanted to do x because it was the
&amp;quot;right things to do&amp;quot;. Another group wanted to do y because it was the
&amp;quot;right thing to do? From perspective a, x was the right thing to do.
From perspective b, y was the right thing to do. I was caught in the
middle and got annoyed. I finally said, it is a business decision that
must be centered around time to market.
Perhaps the budget trumps all? Okay, let be honest about that.
Perhaps orgs is not willing to change process d? Okay, lets be honest
about that.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="project management"></category></entry><entry><title>How to Learn</title><link href="https://slott56.github.io/2011_11_22-how_to_learn.html" rel="alternate"></link><published>2011-11-22T08:00:00-05:00</published><updated>2011-11-22T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-11-22:/2011_11_22-how_to_learn.html</id><summary type="html">&lt;p&gt;A recent question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i came up with two options.&lt;/p&gt;
&lt;p&gt;1.  building skills 1 (+ other references)... then algorithms &amp;amp; data
structures.... then your books 2 &amp;amp; 3&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;2.  your three books 1,2 &amp;amp; 3... then algo &amp;amp; ds
kindly help me decide so i can start soon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have two pieces of advice …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A recent question.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i came up with two options.&lt;/p&gt;
&lt;p&gt;1.  building skills 1 (+ other references)... then algorithms &amp;amp; data
structures.... then your books 2 &amp;amp; 3&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;2.  your three books 1,2 &amp;amp; 3... then algo &amp;amp; ds
kindly help me decide so i can start soon.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have two pieces of advice.&lt;/p&gt;
&lt;p&gt;First.  Programming is a &lt;em&gt;language&lt;/em&gt; skill.  Just like English.  If you
can't get the English right, the odds of getting Python, Java, HTML or
SQL right is considerably reduced.  Please, please, please take more
care in grammar, syntax and punctuation.  Otherwise, your future as a
programmer doesn't look very good.  For example, the personal pronoun
is spelled &amp;quot;I&amp;quot;.  In the 20th century, we spell out &amp;quot;and&amp;quot;; we stopped
writing &amp;quot;&amp;amp;&amp;quot; as a stand-in for the Latin &amp;quot;&lt;em&gt;et&lt;/em&gt;&amp;quot; centuries ago.  Also,
ellipses (&amp;quot;...&amp;quot;) shouldn't be used except when eliding part of a
quote.  Clarity and precision actually matter.&lt;/p&gt;
&lt;p&gt;Second, and more relevant, your two choices don't really amount to a
significant difference.  If you're waiting around for advice, you're
wasting your time.  Both sequences are good ideas. It's more important
to get started than it is to carefully choose the precise and exact
course of study. Just start doing something immediately.&lt;/p&gt;
&lt;p&gt;Learning to program is a life-long exercise. There will &lt;strong&gt;always&lt;/strong&gt; be
more to learn. Start as soon as you can. The exact choices don't
matter.  Why?  Because, eventually, you'll read &lt;strong&gt;all&lt;/strong&gt; of those books
plus  &lt;strong&gt;many, many&lt;/strong&gt; others.&lt;/p&gt;
&lt;p&gt;Spend less time waiting for advice and more time studying.&lt;/p&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="learning"></category></entry><entry><title>More On Inheritance vs. Delegation</title><link href="https://slott56.github.io/2011_11_17-more_on_inheritance_vs_delegation.html" rel="alternate"></link><published>2011-11-17T08:00:00-05:00</published><updated>2011-11-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-11-17:/2011_11_17-more_on_inheritance_vs_delegation.html</id><summary type="html">&lt;p&gt;Emphasis on the &amp;quot;More On&amp;quot; as in &amp;quot;Moron&amp;quot;.  This is a standard design
error story.  The issue is that inheritance happens along an &amp;quot;axis&amp;quot; or
&amp;quot;dimension&amp;quot; where the subclasses are at different points along that
axis.  Multi-dimensional inheritance is an EPIC FAIL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data warehouse processing can involve a fair …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Emphasis on the &amp;quot;More On&amp;quot; as in &amp;quot;Moron&amp;quot;.  This is a standard design
error story.  The issue is that inheritance happens along an &amp;quot;axis&amp;quot; or
&amp;quot;dimension&amp;quot; where the subclasses are at different points along that
axis.  Multi-dimensional inheritance is an EPIC FAIL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data warehouse processing can involve a fair amount of &amp;quot;big batch&amp;quot;
programs.  Loading 40,000 rows of econometric data in a single swoop,
updating dimensions and loading facts, for example.&lt;/p&gt;
&lt;p&gt;When you get data from customers and vendors, you have endless
file-format problems.  To assure that things will work, each of these
big batch programs has at least two operating modes.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Validate.  Go through all the motions.  Except.  Don't commit any
changes to the database; don't make any filesystem changes.  (i.e.,
write the new files, but don't do the final renames to make the files
current.)&lt;/li&gt;
&lt;li&gt;Load.  Go through all the motions including a complete commit to the
database and any filesystem changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What's the difference between the two modes?  Clearly, one is a
subclass of the other.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Load can be the superclass.  The Validate subclass simply replaces
the save methods stubs that do nothing.&lt;/li&gt;
&lt;li&gt;Validate can be the superclass.  The Load subclass simply implements
the save method stubs with methods that do something useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simple, right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What Doesn't Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This design has a smell.  The smell is that we can't easily extend the
overall processing to include an additional feature.&lt;/p&gt;
&lt;p&gt;Why not?&lt;/p&gt;
&lt;p&gt;This design has the persistence feature set as the inheritance axis or
dimension.  This is kind of limited.  We really want a different
feature set for inheritance.&lt;/p&gt;
&lt;p&gt;Consider a Validate for two dimensions (Company and Time) that loads
econometric facts.  It has stub &amp;quot;save&amp;quot; methods.&lt;/p&gt;
&lt;p&gt;We subclass the Validate to create the proper Load for these two
dimensions and one fact.  We replace the stub save methods with proper
database commits.&lt;/p&gt;
&lt;p&gt;After the actuaries think for a while, suddenly we have a file which
includes an additional dimension (i.e., business location) or an
additional fact (i.e., econometric data at a different level of
granularity).  What now?  If we subclass Validate to add the dimension
or fact, we have a problem.  We have to repeat the Load subclass
methods for the new, extended Load.  Oops.&lt;/p&gt;
&lt;p&gt;If we subclass Load to add the dimension or fact, we have a problem.
We have to repeat the Validate stubs in the new extended Load to make
it into a Validate.  Oops.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recognizing Delegation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's difficult to predict inheritance vs. delegation design problems.&lt;/p&gt;
&lt;p&gt;The hand-waving advice is to consider the &lt;em&gt;essential&lt;/em&gt; features of the
object.  This isn't too helpful.  Often, we're so focused on the
database design that persistence seems essential.&lt;/p&gt;
&lt;p&gt;Experience shows, however, that some things are not essential.
Persistence, for example, is one of those things that should &lt;em&gt;always&lt;/em&gt;
be delegated.&lt;/p&gt;
&lt;p&gt;Another thing that should always be delegated is the more general
problem of representation: JSON, XML, etc., should rely on delegation
since this is never essential.  There's always another representation
for data.  Representation is always independent of the object's
essential internal state changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequence&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my case, I've got about a dozen implementations using a clunky
inheritance that had some copy-and-paste programming.  Oops.&lt;/p&gt;
&lt;p&gt;I'm trying to reduce that technical debt by rewriting each to be a
proper delegation.  With good unit test coverage, there's no real
technical risk.  Just tedious fixing the same mistake that I rushed
into production twelve separate times.&lt;/p&gt;
&lt;p&gt;Really.  Colossally dumb.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="check-out-quot-composition-versus-inheritance-a"&gt;
&lt;h2&gt;Check out &amp;amp;quot;Composition versus inheritance: A ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-11-25 15:15:50.851000-05:00&lt;/p&gt;
&lt;p&gt;Check out &amp;quot;Composition versus inheritance: A first attempt at designing
the new cars&amp;quot; in the chapter &amp;quot;Putting Plans into Action with the
Strategy Pattern&amp;quot; in the book Design Patterns for Dummies&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-produce-the-error-when-you-design-validate-as"&gt;
&lt;h2&gt;You produce the error when you design Validate as ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-11-17 11:57:27.299000-05:00&lt;/p&gt;
&lt;p&gt;You produce the error when you design Validate as superclass with save
method stubs, it clearly should do nothing but validation. Mixing
different interfaces, -- that's the real cause. When you separate them,
it becomes indifferent to inherit Validate as a mix-in superclass or
instantiate it as a component.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-general-problems-like-the-above-are-exactly-wh"&gt;
&lt;h2&gt;In general, problems like the above are exactly wh...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-11-17 12:23:23.506000-05:00&lt;/p&gt;
&lt;p&gt;In general, problems like the above are exactly why inheritance,
especially implementation inheritance, is a really bad idea. Composition
avoids this problem entirely even if it requires more work on the part
of the programmer.
Your real problem is that 'Load' and 'Validate' aren't actually
subclasses of one another: they have different side-effects and
therefore different invariants (one modifies the database, the other
does not). The Liskov Substitution Principal tells us that classes with
different invariants cannot be subclasses of one another.
The bigger problem is that 'modifies the database' is an invariant that
not all code cares about. To support code that cares and code that does
not care, one must inject an interface into the inheritance diagram:
ETLProcessor (interface)
|-OnlyValidate
|-LoadForReal
with 'ETLProcessor' explicitly noting that it is undefined whether the
database is modified or not. This way, you can't have loads that don't
actually load and validates that do load. ETLProcessor is still subject
to the fragile base-class problem, but that's true of all inheritance
schemes; composition is the only way to avoid this problem.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category><category term="delegation"></category><category term="inheritance"></category></entry><entry><title>VMware, VIX and PyVIX2</title><link href="https://slott56.github.io/2011_10_25-vmware_vix_and_pyvix2.html" rel="alternate"></link><published>2011-10-25T08:00:00-04:00</published><updated>2011-10-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-10-25:/2011_10_25-vmware_vix_and_pyvix2.html</id><summary type="html">&lt;p&gt;The topic of VMware came up at my local &lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/"&gt;757 Python Users
Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common administrative need is to control VM farms.  While there are
a number of pointy-clicky GUI tools, VMware offers the VIX library to
permit writing scripts to control VM's.&lt;/p&gt;
&lt;p&gt;Here's some information we looked at recently …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The topic of VMware came up at my local &lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/"&gt;757 Python Users
Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common administrative need is to control VM farms.  While there are
a number of pointy-clicky GUI tools, VMware offers the VIX library to
permit writing scripts to control VM's.&lt;/p&gt;
&lt;p&gt;Here's some information we looked at recently on &lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/pages/PyVIX2_and_VMware_Control/"&gt;PyVIX2 and
VMware&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea behind PyVIX2 is to provide a relatively simple Python
binding to VIX.    This, too, is a command-line interface, following
on the heels of &lt;a class="reference external" href="http://www.blogger.com/blogger.g?blogID=684183198890094283#editor/target=post;postID=2609889238262822318"&gt;More Command-Line
Goodness&lt;/a&gt; and
&lt;a class="reference external" href="http://www.blogger.com/blogger.g?blogID=684183198890094283#editor/target=post;postID=6953887040859784637"&gt;Command-Line
Applications&lt;/a&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="ctypes"></category><category term="#python"></category><category term="vmware"></category></entry><entry><title>The Agile "Religion" -- What?</title><link href="https://slott56.github.io/2011_10_20-the_agile_religion_what.html" rel="alternate"></link><published>2011-10-20T15:38:00-04:00</published><updated>2011-10-20T15:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-10-20:/2011_10_20-the_agile_religion_what.html</id><summary type="html">&lt;p&gt;Received&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;it seems that software development has caught the agile
religion. Personally, I have an issue w/ being unimodal.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;p&gt;First.  &amp;quot;agile religion&amp;quot;.  As in the deprecating statement: &lt;em&gt;Agile is
nothing more than a religion&lt;/em&gt;?  As in &lt;em&gt;Agile is nothing more than a
vague religious practice with no tangible value …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Received&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;it seems that software development has caught the agile
religion. Personally, I have an issue w/ being unimodal.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;p&gt;First.  &amp;quot;agile religion&amp;quot;.  As in the deprecating statement: &lt;em&gt;Agile is
nothing more than a religion&lt;/em&gt;?  As in &lt;em&gt;Agile is nothing more than a
vague religious practice with no tangible value to an organization&lt;/em&gt;?
Interesting, I guess.&lt;/p&gt;
&lt;p&gt;I'm assuming that the author did not read the &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;Manifesto for Agile
Software Development&lt;/a&gt;.  Or--worse-- they
read it and find that the four values (Individuals and
interactions, Working software, Customer collaboration and Responding to
change) are just of no tangible value.&lt;/p&gt;
&lt;p&gt;That's alarming.  Really.  The alternative (processes and
tools, comprehensive documentation, contract negotiation, and following
a plan without regard to changes) seems like it's a recipe for cost,
risk, low-value work and a cancelled project.  Indeed, it seems like
non-Agile project management is the best way to get to the fabled
&amp;quot;Software Crisis&amp;quot; where lots of money gets spent but little of value
gets created.&lt;/p&gt;
&lt;p&gt;Further, it seems that &lt;strong&gt;all&lt;/strong&gt; modifications of the classic waterfall
method (e.g., spiral method as a prime example) specifically create
&amp;quot;iterative, incremental&amp;quot; approaches to software development.  That is,
everything that's not a strict (brain-dead) waterfall has some elements
of Agile.&lt;/p&gt;
&lt;p&gt;This causes me to think that Agile isn't a religion.  It causes me to
think that Waterfall methods were a religious practice of no tangible
value.  All the methodology experiments over the last 15 years have been
ways of introducing flexibility (agility, brains) into a foolishly
inflexible methodology definition.&lt;/p&gt;
&lt;p&gt;Indeed, it appears that the heavy-weigh waterfallish methods are an
attempt to replace thinking with process.  And it didn't work.  So, we
have to go back to the thinking part.  Only, we call it Agile now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Religious Wars&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Second.  &amp;quot;agile religion&amp;quot; (again).  As in &lt;em&gt;methodology discussions are
just religious wars&lt;/em&gt;?  As in &lt;em&gt;methodology discussions are just quibbling
over no-value details&lt;/em&gt;?  Some folks may get this impression of making a
choice between Agile vs. Non-Agile methods.  I think that those folks
haven't actually had the opportunity to work from a prioritized backlog
and build the most valuable part first.  I think that someone who things
Agile is just a religious war hasn't been allowed to fix a broken
project plan based on lessons learned during the first release.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Agility&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Third.   &amp;quot;unimodal&amp;quot;.  As in &lt;em&gt;being exclusively Agile is bad&lt;/em&gt;?  As in
&lt;em&gt;sometimes you need to have a rigid, unyielding process that sticks
strictly to the schedule irrespective of changes which may occur&lt;/em&gt;?  That
doesn't seem rational.&lt;/p&gt;
&lt;p&gt;Change happens.  Forcing the inevitable changes to conform to some
farcical schedule made up by people who didn't have all the details
seems silly.  Making contract negotiation the focal point of response to
change seems like a waste of effort.  Trying to document everything so
completely that all possible changes are already accounted for seems
impossible.  And replacing change with a process that regulates change
seems -- perhaps -- unhinged.&lt;/p&gt;
&lt;p&gt;There were some links and some charts and graphs attached.  I couldn't
get past the two sentences above to see if there was, perhaps, something
more to it.  All I could do was respond with a request for clarification
that didn't involve the trivialization of Agile methods.  It doesn't
seem sensible to try and remove the human element from software
development.&lt;/p&gt;
&lt;p&gt;I'll provide whatever follow-up clarification surfaces on this topic.&lt;/p&gt;
&lt;p&gt;It's interesting to see if the &amp;quot;agile religion&amp;quot; was misplaced, or if
there are folks who think that responding to the messiness of real
software development is a bad idea.&lt;/p&gt;
&lt;p&gt;We tried the waterfall method.  And it didn't work very well.  Agile
isn't a &amp;quot;religion&amp;quot;.  It's a simple acknowledgement that reality is
messy.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="the-reason-i-think-that-the-strongest-proponents"&gt;
&lt;h2&gt;The reason, I think, that the strongest proponents...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-21 17:46:25.316000-04:00&lt;/p&gt;
&lt;p&gt;The reason, I think, that the strongest proponents of Agile are being
labeled &amp;quot;religious zealots&amp;quot; is because there have been a number of
people who have said that it is better for every project ever when there
was little to no evidence to support that position. At this point, most
main-stream authors are advocating a combination -- one cannot exist by
itself and survive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="agile-like-all-approaches-has-pros-cons-for-a-w"&gt;
&lt;h2&gt;Agile, like all approaches, has pros/cons. For a w...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-29 17:01:56.277000-04:00&lt;/p&gt;
&lt;p&gt;Agile, like all approaches, has pros/cons. For a well thought out
discussion of agile cons, check out
Limitations of Agile Software Development By Bruno Collet
&lt;a class="reference external" href="http://www.pmhut.com/limitations-of-agile-software-development"&gt;http://www.pmhut.com/limitations-of-agile-software-development&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-a-href-https-www-fieldengineer-com-skills"&gt;
&lt;h2&gt;The &amp;lt;a href=&amp;quot;&lt;a class="reference external" href="https://www.fieldengineer.com/skills/"&gt;https://www.fieldengineer.com/skills/&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;datriyo&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-03-16 09:17:13.811000-04:00&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.fieldengineer.com/skills/network-systems-engineer"&gt;Network Systems
Engineer&lt;/a&gt;
must document all the interactions with detail technical descriptions,
root causes and solutions. The professionals have to examine and
evaluate the new technology and must brief others about its merits,
weaknesses and recommendation on adoptability. They have to validate the
updates of the operating system, software, hardware.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="waterfall"></category><category term="agile"></category></entry><entry><title>More Command-Line Goodness</title><link href="https://slott56.github.io/2011_10_13-more_command_line_goodness.html" rel="alternate"></link><published>2011-10-13T08:00:00-04:00</published><updated>2011-10-13T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-10-13:/2011_10_13-more_command_line_goodness.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2011_10_06-command_line_applications.html"&gt;Command-Line Applications&lt;/a&gt;,
we looked at a Python main-import switch which boiled down to this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for file in args.file:
    with open( file, &amp;quot;r&amp;quot; ) as source:
        process_file( source, args )
&lt;/pre&gt;
&lt;p&gt;The point was that each distinct file on the command-line was
processed in a more-or-less uniform way by a single function …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2011_10_06-command_line_applications.html"&gt;Command-Line Applications&lt;/a&gt;,
we looked at a Python main-import switch which boiled down to this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for file in args.file:
    with open( file, &amp;quot;r&amp;quot; ) as source:
        process_file( source, args )
&lt;/pre&gt;
&lt;p&gt;The point was that each distinct file on the command-line was
processed in a more-or-less uniform way by a single function that
does the &amp;quot;real work&amp;quot; for that input file.&lt;/p&gt;
&lt;p&gt;It turns out that we often have flat files which are spreadsheets or
spreadsheet-like.   Indeed, for some people (and some organizations)
the spreadsheet is their preferred user interface.  As I've said
before,&lt;/p&gt;
&lt;p&gt;Spreadsheets are the universal user interface. Everyone likes them,
they're almost inescapable. And they work. There's no reason to
attempt to replace the spreadsheet with a web page or a form or a
desktop application. It's easier to cope with spreadsheet vagaries
than to replace them.&lt;/p&gt;
&lt;p&gt;They have problems, but they are surprisingly common.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class="reference external" href="http://sourceforge.net/p/stingrayreader/home/Stingray%20--%20Schema-Based%20File%20Reader/"&gt;Stingray
Reader&lt;/a&gt;.
This is a small Python library to make it easy to have programs
which read workbooks--collections of spreadsheets--or
spreadsheet-like files with a degree of transparency.&lt;/p&gt;
&lt;p&gt;And.  It allows a clean command-line interface.&lt;/p&gt;
&lt;p&gt;With a little care, we can reduce the main-import switch to something
like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if __name__ == &amp;quot;__main__&amp;quot;:
  logging.basicConfig( stream=sys.stderr )
  args= parse_args()
  logging.getLogger().setLevel( args.verbosity )
  builder= make_builder( args )
  try:
      for file in args:
          with workbook.open_workbook( input ) as source:
              process_workbook( source, builder )
      status= 0
  except Exception as e:
      logging.exception( e )
      status= 3
  logging.shutdown()
  sys.exit( status )
&lt;/pre&gt;
&lt;p&gt;The bold lines are specific to workbook (&amp;quot;spreadsheet&amp;quot;) processing.
A &amp;quot;builder&amp;quot; creates application-specific Python objects from
spreadsheet rows.  The &amp;quot;workbook.open_workbook&amp;quot; is a function that
builds a workbook reader based on the file name.  It can handle a
number of file types.&lt;/p&gt;
&lt;p&gt;The process_workbook function is the &amp;quot;real work&amp;quot; function that
handles a workbook of individual spreadsheets (or a spreadsheet-like
file).&lt;/p&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="CLI"></category></entry><entry><title>A smoothly operating, well-oiled engine for failure</title><link href="https://slott56.github.io/2011_10_11-a_smoothly_operating_well_oiled_engine_for_failure.html" rel="alternate"></link><published>2011-10-11T08:00:00-04:00</published><updated>2011-10-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-10-11:/2011_10_11-a_smoothly_operating_well_oiled_engine_for_failure.html</id><summary type="html">&lt;p&gt;It occurs to me that much of &amp;quot;Big IT&amp;quot; creates a well-oiled organization
that makes broken software seem acceptable. The breakage is wrapped in
layers of finely-tuned process.
Consider a typical Enterprise Application.  There's a help desk, ticket
tracking, a user support organization that does &amp;quot;ad-hoc&amp;quot; processing, and
a development …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It occurs to me that much of &amp;quot;Big IT&amp;quot; creates a well-oiled organization
that makes broken software seem acceptable. The breakage is wrapped in
layers of finely-tuned process.
Consider a typical Enterprise Application.  There's a help desk, ticket
tracking, a user support organization that does &amp;quot;ad-hoc&amp;quot; processing, and
a development organization to handle bug fixes and enhancement
requests.  All those people doing all that work.
Why?
If people need all that support, then the application is -- from a
simplistic view -- broken.
The organization, however, has coped with the broken application by
wrapping it in layers of people, process, tools, technology, management
and funding.  The end users have a problem, they call the help desk, and
the machine kicks in to resolve their problem.
It is a given -- a going-in assumption -- a normal, standard expectation
that any enterprise software is so broken that a huge organization will
be essential for pressing forward.  It is expected that good software
cannot be built.
We're asked to help a client create a sophisticated plan for the New
Enterprise App support organization.  Planning this organization feels
like planning for various kinds of known, predicted, expected failures.
Failure is the expectation.  Broken is the standard operating mode.
Consider a typical non-Enterprise Application.  Let's say, the GNU C
compiler.  Or Python.  Or Linux.  An almost entirely volunteer
organization, no help desk, no trouble tickets, no elaborate support
organization plan.  Yet.  These products actually work flawlessly.
They're not wrapped in a giant organization.
Why is the bar for acceptability so low for &amp;quot;Enterprise&amp;quot; applications?
Why is this tolerated?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="it-is-because-of-two-substantial-reasons-1-it-is"&gt;
&lt;h2&gt;It is because of two substantial reasons: 1. it is...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-21 21:59:09.965000-04:00&lt;/p&gt;
&lt;p&gt;It is because of two substantial reasons: 1. it is cheaper to ship and
maintain at 90% bug free than it is to ship at 100% bug free -- in a
large enough project, as the number of bugs approaches 0, the cost per
bug fix climbs exponentially. 2. There is no 100% intuitive UI and what
might seem intuitive and well designed through early tests can fail in
the real world.&lt;/p&gt;
&lt;p&gt;I wouldn&amp;amp;#39;t call it broken but alive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-real"&gt;
&lt;h2&gt;Can real...&lt;/h2&gt;
&lt;p&gt;vemv&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-11 10:16:42.513000-04:00&lt;/p&gt;
&lt;p&gt;I wouldn't call it broken but alive.
Can really software be perfectly designed before implementation?
Feature requests and bug reports seem the most normal thing to me -
requirements constantly change.
Let me blindly bet that most massive open source projects use ticketing
to some extent. And that not all enterprises enjoy using giantic systems
- what blocks them from using just a handful of tools instead?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-of-all-i-am-sorry-you-are-working-on-enterp"&gt;
&lt;h2&gt;First of all, I am sorry you are working on Enterp...&lt;/h2&gt;
&lt;p&gt;AConsul&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-11 11:18:56.533000-04:00&lt;/p&gt;
&lt;p&gt;First of all, I am sorry you are working on Enterprise software.
Secondly, extremely bad comparison.
You might as well be complaining about how teaching remedial english at
an urban public school is nothing like (but should be like! ) a
graduate-level English literature seminar.
Enterprise apps are by giant organizations for giant organizations,
filled with people with low levels of technical interest and ability.
The ecosystem for developers using GCC, Python, or Sys Admins using
Linux, is composed of a very different set of people working on a very
different set of goals from Enterprise/Business.
For GNU C you have a self-selecting set of technically competent people
who don't balk, experiment, persist, and actually read the
documentation, specifications, etc., as well as not balk at the first
compiler error. Do you honestly think you can compare the average GNU C
compiler user to the average Enterprise User? Do you really think the
average Enterprise user would spend more than 5 minutes looking at GCC
documentation before running away screaming?
Enterprise IT is another country, another culture. Consider this like a
trip to a foreign land. Learn the local customs, expectations. You may
not like it there but that's what it will take you to survive.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="software process improvement"></category></entry><entry><title>Command Line Applications</title><link href="https://slott56.github.io/2011_10_06-command_line_applications.html" rel="alternate"></link><published>2011-10-06T08:00:00-04:00</published><updated>2011-10-06T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-10-06:/2011_10_06-command_line_applications.html</id><summary type="html">&lt;p&gt;I'm old -- I admit it -- and I feel that command-line applications are
still very, very important. Linux, for example, is packed full of almost
innumerable command-line applications. In some cases, the Linux GUI
tools are specifically just wrappers around the underlying command-line
applications.&lt;/p&gt;
&lt;p&gt;For many types of high-volume data processing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm old -- I admit it -- and I feel that command-line applications are
still very, very important. Linux, for example, is packed full of almost
innumerable command-line applications. In some cases, the Linux GUI
tools are specifically just wrappers around the underlying command-line
applications.&lt;/p&gt;
&lt;p&gt;For many types of high-volume data processing, command-line
applications are essential.&lt;/p&gt;
&lt;p&gt;I've seen command-line applications done very badly.&lt;/p&gt;
&lt;div class="section" id="overusing-main"&gt;
&lt;h2&gt;Overusing Main&lt;/h2&gt;
&lt;p&gt;When writing OO programs, it's absolutely essential that the OS
interface (public static void main in Java or the if __name__ ==
&amp;quot;__main__&amp;quot;: block in Python) does as little as possible.&lt;/p&gt;
&lt;p&gt;A good command-line program has the underlying tasks or actions
defined in some easy-to-work with class hierarchy built on the
&lt;strong&gt;Command&lt;/strong&gt; design pattern. The actual main program part does just a
few things: gather the relevant environment variables, parse
command-line options and arguments, identify the configuration files,
and initiate the appropriate commands. Nothing application-specific.&lt;/p&gt;
&lt;p&gt;When the main method does application-specific work, that application
functionality is buried in a method that's particularly hard to
reuse. It's important to keep the application functionality away from
the OS interface.
I'm finding that main programs should look something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if \__name_\_ == &amp;quot;__main__&amp;quot;:
   logging.basicConfig( stream=sys.stderr )
   args= parse_args()
   logging.getLogger().setLevel( args.verbosity )
   try:
       for file in args.file:
           with open( file, &amp;quot;r&amp;quot; ) as source:
               process_file( source, args )
       status= 0
   except Exception as e:
       logging.exception( e )
       status= 3
   logging.shutdown()
   sys.exit( status )
&lt;/pre&gt;
&lt;p&gt;That's it.  Nothing more in the top-level main program.  The
process_file function becomes a reusable &amp;quot;command&amp;quot; and something
that can be tested independently.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="this-is-my-standard-main"&gt;
&lt;h2&gt;This is my standard main&lt;/h2&gt;
&lt;p&gt;Chai&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-11 18:24:57.551000-04:00&lt;/p&gt;
&lt;p&gt;This is my standard main.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if __name__ == '__main__' :
    if os.path.exists( &amp;quot;logging.conf&amp;quot; ) :
        logging.config.fileConfig(&amp;quot;logging.conf&amp;quot;)
    else :
        logging.basicConfig(level=logging.INFO)
    fnName = sys.argv[ 1 ]
    logging.info( '** function %s', fnName )
    n = locals()[ fnName ]( args = sys.argv[ 2: ] )
    logging.info( '** bye' )
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you-for-posting-this-this-is-actually-somet"&gt;
&lt;h2&gt;Thank you for posting this. This is actually somet...&lt;/h2&gt;
&lt;p&gt;Kellan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-06 18:08:52.652000-04:00&lt;/p&gt;
&lt;p&gt;Thank you for posting this. This is actually something I knew I was
doing wrong but I didn't quite know exactly where I was making the wrong
turn. This gets me much closer to the clean code I would like to be
writing in python. Any chance you have a simple script you wrote you
would like to share with us, that uses this method? I would love to see
an example I can read over and use to learn from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-myself-like-to-wrap-this-in-a-main-function"&gt;
&lt;h2&gt;I myself like to wrap this in a main function...&lt;/h2&gt;
&lt;p&gt;Ids&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-07 03:49:17.887000-04:00&lt;/p&gt;
&lt;p&gt;Hi.
I myself like to wrap this in a main function like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def main(argv):
    ...

if __name__ == '__main__':
main(sys.argv)
&lt;/pre&gt;
&lt;p&gt;Also, the standard python fileinput module may come in handy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="java"></category><category term="CLI"></category></entry><entry><title>"Hard Coding" Business Rules</title><link href="https://slott56.github.io/2011_10_05-hard_coding_business_rules.html" rel="alternate"></link><published>2011-10-05T06:42:00-04:00</published><updated>2011-10-05T06:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-10-05:/2011_10_05-hard_coding_business_rules.html</id><summary type="html">&lt;p&gt;See this: &amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/STOP_HARD_CODING_BUSINESS_RULES/By_David_Rubinstein/About_BUSINESSDEVELOPERS_and_BUSINESSRULES/35919"&gt;Stop hard-coding business
rules&lt;/a&gt;&amp;quot;
in SD Times.
Here's what's exasperating: &amp;quot;Memo to developers: Stop hard-coding
business rules into applications. Use business rules engines instead.&amp;quot;
Business Rules Engines?  You mean Python?
It appears that they don't mean Python.
&amp;quot;Developers can use [a BPM suite or rules engine] and be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this: &amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/STOP_HARD_CODING_BUSINESS_RULES/By_David_Rubinstein/About_BUSINESSDEVELOPERS_and_BUSINESSRULES/35919"&gt;Stop hard-coding business
rules&lt;/a&gt;&amp;quot;
in SD Times.
Here's what's exasperating: &amp;quot;Memo to developers: Stop hard-coding
business rules into applications. Use business rules engines instead.&amp;quot;
Business Rules Engines?  You mean Python?
It appears that they don't mean Python.
&amp;quot;Developers can use [a BPM suite or rules engine] and be more
productive, so long as they don’t use C# or Java as a default for
development&amp;quot;.
I'm guessing that by &amp;quot;C# or Java&amp;quot; they mean &amp;quot;a programming language&amp;quot; and
I would bet that Python is included in &amp;quot;bad&amp;quot; languages for development.
Python has all the simplicity and expressive power of a Domain-Specific
Language (DSL) for business rules.
Don't hard-code business rules in Java.  Code them in an interpreted
language like Python.
Also, don't be mislead by any claims that business analysts or (weirdly)
users can somehow &amp;quot;code&amp;quot; business rules.  They can't (and mostly, they
won't).  That's what SD Times wisely says &amp;quot;Developers&amp;quot;.  That's how
coding gets done.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="the-underlying-point-about-reducing-the-friction-o"&gt;
&lt;h2&gt;The underlying point about reducing the friction o...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-04 12:01:17.299000-04:00&lt;/p&gt;
&lt;p&gt;The underlying point about reducing the friction of change management
and moving towards more of a self-service mentality for business users
is actually a valid one.
Python is Turing complete - to really use it to its full power, you need
to be able to think algorithmically and in terms of data structures.
The key purpose of a business rules engine is to provide a constrained
environment for *non* developers to make changes to business logic
directly. Just as the data in an application has traditionally been the
domain of the business users rather than the developers, a rules engine
aims to put some of the *logic* in their hands as well (with
appropriate access controls, of course, again, just like data).
It's similar to the reason why JSON or ini-style config files are a
better idea than using Python for the same thing: you *don't want*
that level of expressiveness in your configuration settings, you want
things to be explicit rather than algorithmically generated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-it-39-s-not-the-language-but-the-change-deplo"&gt;
&lt;h2&gt;So it&amp;amp;#39;s not the language, but the change deplo...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-07 15:31:41.731000-04:00&lt;/p&gt;
&lt;p&gt;So it's not the language, but the change deployment mechanism? Since
it's interpreted it doesn't need a compiled binary to be shipped? But it
still needs a testing cycle, right? Seems to me, many languages could
work (even compiled ones, since you can compile and load a .NET CLR
assembly at runtime). Obviously some languages might be more suitable
than others in expressiveness and simplicity, but how do you measure
that? How important is the readability of a traditional language like
VB.NET versus something more declarative yet opaque (i.e. requires more
experience) like XSLT, SQL or Scheme? If users can't program business
rules, what level of developers should?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-constrained-environment-for-non-developers"&gt;
&lt;h2&gt;&amp;amp;quot;constrained environment for &lt;em&gt;non&lt;/em&gt; developers...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-04 18:59:42.317000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;constrained environment for *non* developers&amp;quot;
The &amp;quot;constrained environment&amp;quot; may or may not work depending on the
client. Personally, I have seen people become infuriated by limitations
and started using Access/Excel.
At a certain Vanguard location, they first generate reports w/
Access/Excel to explore/document the business rules. Once it's stable
(ie they have figured out what they really want), then it gets
incorporated into their infrastructure via a programming language.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="business rules"></category></entry><entry><title>The Politics of Estimating</title><link href="https://slott56.github.io/2011_09_29-the_politics_of_estimating.html" rel="alternate"></link><published>2011-09-29T08:00:00-04:00</published><updated>2011-09-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-09-29:/2011_09_29-the_politics_of_estimating.html</id><summary type="html">&lt;p&gt;Computerworld, September 12, page 10.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Microburst&lt;/strong&gt;IT Disasters
According to a study of 1,471 big IT projects, 15% turn out to be
money pits, with cost overruns averaging 200%.&lt;/blockquote&gt;
&lt;p&gt;How is this a politically-charged statement?  We hear this kind of
thing all the time.&lt;/p&gt;
&lt;p&gt;As developers (or project leaders …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Computerworld, September 12, page 10.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Microburst&lt;/strong&gt;IT Disasters
According to a study of 1,471 big IT projects, 15% turn out to be
money pits, with cost overruns averaging 200%.&lt;/blockquote&gt;
&lt;p&gt;How is this a politically-charged statement?  We hear this kind of
thing all the time.&lt;/p&gt;
&lt;p&gt;As developers (or project leaders) we're failing to execute.&lt;/p&gt;
&lt;p&gt;Right?&lt;/p&gt;
&lt;p&gt;Hogwash.&lt;/p&gt;
&lt;p&gt;An &amp;quot;overrun&amp;quot; is isomorphic to &amp;quot;badly justified&amp;quot; or &amp;quot;badly budgeted&amp;quot; or
&amp;quot;oversold to executive sponsors&amp;quot;.&lt;/p&gt;
&lt;p&gt;An &amp;quot;overrun&amp;quot; can be a failure to use (or even permit) realistic
estimates.  It may reflect an executive sponsor restating objectives
to make the project large enough to justify it.  An overrun can mean
anything.&lt;/p&gt;
&lt;p&gt;Calling it an overrun is a way to label it as &amp;quot;failure to execute&amp;quot;.&lt;/p&gt;
&lt;p&gt;I prefer to call it a failure of vision (or whatever it is executive
sponsors do).  It's more likely to be an under-estimate than it is to
be an over-run.&lt;/p&gt;
&lt;p&gt;After all, how many times have we been told to reduce an estimate?
How many times have folks gotten their &amp;quot;attaboys&amp;quot; and &amp;quot;attagirls&amp;quot; for
&amp;quot;sharpening their pencils&amp;quot; and reducing the proposal to the smallest
amount that the customer would approve?&lt;/p&gt;
</content><category term="Technologies"></category><category term="project management"></category><category term="estimating"></category></entry><entry><title>Threads and I/O</title><link href="https://slott56.github.io/2011_09_27-threads_and_io.html" rel="alternate"></link><published>2011-09-27T18:58:00-04:00</published><updated>2011-09-27T18:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-09-27:/2011_09_27-threads_and_io.html</id><summary type="html">&lt;p&gt;&amp;quot;Threads don't promote concurrent I/O.&amp;quot;&lt;/p&gt;
&lt;p&gt;Kernel threads may.  Most of us write user threads.  Here's a great
summary under &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Thread_(computer_science)"&gt;Thread (Computer Science)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the use of blocking system calls in user threads (as opposed
to kernel threads) or fibers can be problematic. If a user thread or
a fiber …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;Threads don't promote concurrent I/O.&amp;quot;&lt;/p&gt;
&lt;p&gt;Kernel threads may.  Most of us write user threads.  Here's a great
summary under &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Thread_(computer_science)"&gt;Thread (Computer Science)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the use of blocking system calls in user threads (as opposed
to kernel threads) or fibers can be problematic. If a user thread or
a fiber performs a system call that blocks, the other user threads
and fibers in the process are unable to run until the system call
returns. A typical example of this problem is when performing I/O:
most programs are written to perform I/O synchronously. When an I/O
operation is initiated, a system call is made, and does not return
until the I/O operation has been completed. In the intervening
period, the entire process is &amp;quot;blocked&amp;quot; by the kernel and cannot run,
which starves other user threads and fibers in the same process from
executing.&lt;/p&gt;
&lt;p&gt;The point is this.
&lt;strong&gt;If it involves I/O, multi-threading may not help.  Processes do.&lt;/strong&gt;
If it involves computing while waiting for I/O, multi-threading may help.&lt;/p&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="software design"></category><category term="architecture"></category></entry><entry><title>"Strict" Unit Testing -- Everything In Isolation Is Too Much Work</title><link href="https://slott56.github.io/2011_09_22-strict_unit_testing_everything_in_isolation_is_too_much_work.html" rel="alternate"></link><published>2011-09-22T08:00:00-04:00</published><updated>2011-09-22T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-09-22:/2011_09_22-strict_unit_testing_everything_in_isolation_is_too_much_work.html</id><summary type="html">&lt;p&gt;Folks like to claim that unit testing absolutely requires each class be
tested in isolation using mocks for all dependencies.  This is a noble
aspiration, but doesn't work out perfectly well in Python.&lt;/p&gt;
&lt;p&gt;First, &amp;quot;unit&amp;quot; is intentionally vague.  It could be a class, a
function, a module or a package …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Folks like to claim that unit testing absolutely requires each class be
tested in isolation using mocks for all dependencies.  This is a noble
aspiration, but doesn't work out perfectly well in Python.&lt;/p&gt;
&lt;p&gt;First, &amp;quot;unit&amp;quot; is intentionally vague.  It could be a class, a
function, a module or a package.  It's &amp;quot;unit&amp;quot; of code.  Anything
could be considered a &amp;quot;unit&amp;quot;.&lt;/p&gt;
&lt;p&gt;Second--and more important--the extensive mocking isn't fully
appropriate for Python programming.  Mocks are very helpful in
statically-typed languages where you must be very fussy about
assuring that all of the interface definitions are carefully matched
up properly.&lt;/p&gt;
&lt;p&gt;In Python, duck typing allows a mock to be defined quite trivially.
A mock library isn't terribly helpful, since it doesn't reduce the
code volume or complexity in any meaningful way.&lt;/p&gt;
&lt;div class="section" id="dependencies-without-injection"&gt;
&lt;h2&gt;Dependencies without Injection&lt;/h2&gt;
&lt;p&gt;The larger issue with trying to unit test in Python with mock objects
is the impact of change.&lt;/p&gt;
&lt;p&gt;We have some class with an interface.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class AppFeature( object ):

   def app_method( self, anotherObject ):
       etc.

class AnotherClass( object ):

   def another_method( self ):
       etc.
&lt;/pre&gt;
&lt;p&gt;We've properly used dependency injection to make AppFeature depend on
an instance of AnotherClass.  This means that we're &lt;em&gt;supposed&lt;/em&gt; to
create a mock of AnotherClass to test the AppFeature.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MockAnotherClass( object ):

   def another_method( self ):
       etc.
&lt;/pre&gt;
&lt;p&gt;In Python, this mock isn't a best practice.  It can be helpful.  But
adding a mock can also be confusing and misleading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refactoring-scenario"&gt;
&lt;h2&gt;Refactoring Scenario&lt;/h2&gt;
&lt;p&gt;Consider the situation where we're refactoring and change the
interface to AnotherClass.  We modify another_method to take an
additional argument, for example.&lt;/p&gt;
&lt;p&gt;How many mocks do we have?  How many need to be changed?  What
happens when we miss one of the mocks and have the mysterious
Isolated Test Failure?&lt;/p&gt;
&lt;p&gt;While we can use a naming convention and grep to locate the mocks,
this can (and does) get murky when we've got a mock that replaces a
complex cluster of objects with a simple &lt;strong&gt;Facade&lt;/strong&gt; for testing
purposes.  Now, we've got a mock that doesn't trivially replace the
mocked class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-less-strict-mocking"&gt;
&lt;h2&gt;Alternative: Less Strict Mocking&lt;/h2&gt;
&lt;p&gt;In Python--and other duck typing languages--a less mock-heavy
approach seems more productive.  The goal of testing &lt;strong&gt;every&lt;/strong&gt; class
in isolation surrounded by mocks needs to be relaxed.  A more helpful
approach is to work up through the layers.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Test the &amp;quot;low-level&amp;quot; classes--those with few or no
dependencies--in isolation.  This is easy because they're already
isolated by design.&lt;/li&gt;
&lt;li&gt;The classes which depend on these low-level classes can simply use
the low-level classes without shame or embarrassment.  The
low-level classes work.  Higher-level classes can depend on them.
It's okay.&lt;/li&gt;
&lt;li&gt;In some cases, mocks are required for particularly complex or
difficult classes.  Nothing is wrong with mocks.  But fussy
overuse of mocks does create additional work.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The benefit of this is&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The layered architecture is tested the way it's actually used.
The low-level classes are tested in isolation as well as being
tested in conjunction with the classes that depend on them.&lt;/li&gt;
&lt;li&gt;It's easier to refactor.  The design changes aren't propagated
into mocks.&lt;/li&gt;
&lt;li&gt;Layer boundaries can be more strictly enforced.  Circularities are
exposed in a more useful way through the dependencies and layered
testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to still work out proper dependency injection.  If we try
to mock every dependency, we are forced to confront every
dependency in glorious detail.  If we don't mock every single
dependency, we can slide by without properly isolating our design.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="you-need-to-mock-out-to-a-level-which-allows-yo"&gt;
&lt;h2&gt;You need to mock out to a level which allows yo...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-09-26 13:21:05.696000-04:00&lt;/p&gt;
&lt;p&gt;You need to mock out to a level which&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;allows you to not have any side effects when executing tests&lt;/li&gt;
&lt;li&gt;allows you to immediately understand which is the affected &amp;quot;unit&amp;quot; when a test fails without necessarily have to fire up the debugger etc...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lot-of-useful-points-are-there-its-really-keeps-m"&gt;
&lt;h2&gt;Lot of useful points are there. Its really keeps m...&lt;/h2&gt;
&lt;p&gt;Movies Gallery 2011&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-11-29 07:10:48.813000-05:00&lt;/p&gt;
&lt;p&gt;Lot of useful points are there. Its really keeps me updated.
&lt;a class="reference external" href="http://in.linkedin.com/pub/vee-eee-technologies/15/a00/b79"&gt;Vee Eee
Technologies&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="#python"></category></entry><entry><title>BOSSIE Awards</title><link href="https://slott56.github.io/2011_09_13-bossie_awards.html" rel="alternate"></link><published>2011-09-13T08:06:00-04:00</published><updated>2011-09-13T08:06:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-09-13:/2011_09_13-bossie_awards.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://web2py.com/"&gt;web2py&lt;/a&gt; wins an
&lt;a class="reference external" href="http://www.infoworld.com/d/open-source-software/bossie-awards-2011-the-best-open-source-application-development-software-171759-0&amp;amp;current=10&amp;amp;last=11#slideshowTop"&gt;award&lt;/a&gt;
-- cool.
I really like &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;.  But...&lt;/p&gt;
</content><category term="Technologies"></category><category term="management"></category><category term="python"></category></entry><entry><title>Data Warehousing and SQL -- Tread Carefully</title><link href="https://slott56.github.io/2011_09_01-data_warehousing_and_sql_tread_carefully.html" rel="alternate"></link><published>2011-09-01T08:00:00-04:00</published><updated>2011-09-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-09-01:/2011_09_01-data_warehousing_and_sql_tread_carefully.html</id><summary type="html">&lt;p&gt;&amp;quot;Are you implying that a scalable Data Warehouse solution could be
implemented using Python and serialised files?&amp;quot;&lt;/p&gt;
&lt;p&gt;Not &amp;quot;implying&amp;quot;.  I'm trying to state it as clearly as I can.
A scalable data warehouse solution involves a lot of flat file
processing.&lt;/p&gt;
&lt;p&gt;ETL, for example, is mostly a flat-file pipeline.  It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;Are you implying that a scalable Data Warehouse solution could be
implemented using Python and serialised files?&amp;quot;&lt;/p&gt;
&lt;p&gt;Not &amp;quot;implying&amp;quot;.  I'm trying to state it as clearly as I can.
A scalable data warehouse solution involves a lot of flat file
processing.&lt;/p&gt;
&lt;p&gt;ETL, for example, is mostly a flat-file pipeline.  It starts with source
application extract (to create a flat file) and proceeds through a
number of transformation steps to filter, cleanse, recode, conform
dimensions, and eventually relate facts to dimensions.  This is
generally very, very fast when done with simple flat files and
considerably slower when done with a database.&lt;/p&gt;
&lt;p&gt;This is the &amp;quot;Data Warehouse Bus&amp;quot; that Kimball describes in chapter 9 of
&lt;em&gt;The Data Warehouse Lifecycle Toolkit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ultimately, the cleansed, conformed files will lay around in a &amp;quot;staging
area&amp;quot; forever.  When a datamart is built, then a subset of these files
can be (rapidly) loaded into an RDBMS for query processing.&lt;/p&gt;
&lt;p&gt;Doing this in Python is no different from doing it in Java, C++ or
(for that matter) &lt;a class="reference external" href="http://www.syncsort.com/"&gt;Syncsort&lt;/a&gt;.  Yes.
You can build a data warehouse using processing steps written
around Syncsort and be quite successful.&lt;/p&gt;
&lt;p&gt;The important part of this is to recognize the following.&lt;/p&gt;
&lt;p&gt;When trying to do data warehouse flat-file processing in C++ (or
Java) you have the ongoing schema maintenance issue.  The source
data changes.  You must tweak the schema mapping from source to
warehouse.  You can encode this schema mapping as property files
or some such, or you can simply use an interpreted language like
Python and encode the mappings as Python code.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Data Warehouse Bus&amp;quot; is a lot of applications that are
trivially written as simple, parallel, multi-processing, small,
read-match-write programs.  Forget threads.  Simply use
heavy-weight, OS-level processes so that you can maximize the I/O
bandwidth.  (Remember: &lt;strong&gt;when one thread makes an I/O request, the
entire process waits&lt;/strong&gt;; an I/O-bound application isn't helped by
multi-threading.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open('some_data','rb') as source:
    rdr= csv.DictReader( source )
    wtr= csv.DictWriter( sys.stdout, some_schema )
    for row in rdr:
      if exclude( row ): continue
      clean = cleanse( row )
      wtr.writerow( clean )
&lt;/pre&gt;
&lt;p&gt;This example writes to stdout so that it can be connected in a
pipeline with other steps in the processing.  Programs running in
an OS pipeline run concurrently.  They tie up all the cores
available without any real programming effort other than
decomposing the problem into discrete parallel steps that apply to
each row being touched.&lt;/p&gt;
&lt;p&gt;Simple file processing is much, much faster than SQL processing.
Why?  No overheads for locking or buffer pooling or rollback
segments, or logging, or after-image journaling or deadlock
detection, etc.&lt;/p&gt;
&lt;p&gt;Note that a data warehouse database has no need for sophisticated
locking.  All of the &amp;quot;updates&amp;quot; are bulk loads.  80% of the
activity is &amp;quot;insert&amp;quot;.  With some Slowly Changing Dimension (SCD)
operations there is a trivial status-change update, but this can
be handled with a single database-wide lock during insert.&lt;/p&gt;
&lt;p&gt;The primary reason for using SQL is to handle &amp;quot;SELECT something
... GROUP BY&amp;quot; queries.  SQL does this reasonably well most of the
time.  Python does it pretty well, also.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sum_col1 = defaultdict( float )
count_group = defaultdict( int )
with connection.cursor() as c:
  c.execute( &amp;quot;SELECT COL1, GROUP FROM...&amp;quot; )
  for row in c.fetchall():
      sum_col1[row.group] += col1
      count_group[row.group] += 1
print( sum_col1, count_group )
&lt;/pre&gt;
&lt;p&gt;That's clearly wordier than SQL.  But not &lt;em&gt;much&lt;/em&gt; wordier.  The
SELECT statement embedded in the Python is simpler because it
omits the GROUP BY clause.  Since it's simpler, it's more likely
to benefit from being reused in the RDBMS.&lt;/p&gt;
&lt;p&gt;The Python may actually run &lt;em&gt;faster&lt;/em&gt; than a pure SQL query because
it avoids the (potentially expensive) RDBMS sort step.  The Python
defaultdict (or Java HashMap) is how we avoid sorting.  If we need
to present the keys in some kind of user-friendly order, we have
limited the sort to just the distinct key values, not the entire
join result.&lt;/p&gt;
&lt;p&gt;Because of the huge cost of group by, there are two hack-arounds.
One is &amp;quot;materialized views&amp;quot;.  The idea is that a group-by view is
updated when the base tables are updated to avoid the painful cost
of sorting at query time.  In addition to this, there are
reporting tools which are &amp;quot;aggregate aware&amp;quot;.  They can leverage
the materialized view to avoid the sort.&lt;/p&gt;
&lt;p&gt;How about we avoid all the conceptual overhead of materialized
views and aggregate aware reporting. Instead we can write simple
Python procedures that do the processing we want.&lt;/p&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Data Warehouse does not imply SQL.  Indeed, it doesn't even
suggest SQL except for datamart processing of flexible ad-hoc
queries where there's enough horsepower to endure all the sorting.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="remember-when-one-thread-makes-an-i-o-reque"&gt;
&lt;h2&gt;&amp;quot;Remember: when one thread makes an I/O reque...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-09-01 13:17:16.823000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Remember: when one thread makes an I/O request, the entire process
waits; an I/O-bound application isn't helped by multi-threading.&amp;quot;
Um, what? That's not true at all. In fact, that's the number one reason
to use multi-threading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="indeed-the-process-vs-thread-decision-for-cpython"&gt;
&lt;h2&gt;Indeed, the process-vs-thread decision for CPython...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-09-01 19:51:19.242000-04:00&lt;/p&gt;
&lt;p&gt;Indeed, the process-vs-thread decision for CPython is exactly the
reverse of what you describe here. Due to the Global Interpreter Lock,
threads are great for I/O-bound applications (since I/O operations
release the GIL, allowing other threads to run), but lousy for CPU-bound
processes on multi-core machines (since the GIL and memory
synchronisation issues will effectively limit each process to one
processor).&lt;/p&gt;
&lt;p&gt;In terms of the wider topic of the article, I definitely agreed that
manipulating files directly in the filesystem is often a preferable
alternative to letting the database handle things. Filesystems are
primarily designed for bulk storage, databases are primarily designed
for record keeping (although the lines obviously get blurred in both
directions in practice).&lt;/p&gt;
&lt;p&gt;However, it's also important to be careful to avoid premature
optimisation. For cases like the sort example at the end, I'd start with
the version that let the database handle everything, and only pull logic
out into the application code if it offered a demonstrable improvement
in performance. Otherwise it's easy to fall into the trap of trying to
solve problems yourself that RDBMS authors have already handled for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="while-i-agree-that-dw-sql-and-your-analysis-of"&gt;
&lt;h2&gt;While I agree that DW != SQL and your analysis of ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-09-06 18:27:33.788000-04:00&lt;/p&gt;
&lt;p&gt;While I agree that DW != SQL and your analysis of using Python is very
interesting; I have to wonder if you're creating a custom tool here that
could be done better by other tools. What about MDX as it is implemented
in MS Analysis Services, Hyperion, and other products. This language
(MDX) is built from the ground up for the type of cube queries you
outline like the &amp;quot;Group By&amp;quot; SQL statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-visiting-blogs-i-usually-discover-a-very-goo"&gt;
&lt;h2&gt;When visiting blogs, i usually discover a very goo...&lt;/h2&gt;
&lt;p&gt;mariyamkhan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-09-29 13:50:31.651000-04:00&lt;/p&gt;
&lt;p&gt;When visiting blogs, i usually discover a very good content like yours
&lt;a class="reference external" href="https://www.linkedin.com/in/scott-korn-62546a19/"&gt;see here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data warehouse"></category><category term="#python"></category><category term="performance"></category><category term="star-schema"></category></entry><entry><title>Brain-Damaged Data</title><link href="https://slott56.github.io/2011_08_04-brain_damaged_data.html" rel="alternate"></link><published>2011-08-04T08:00:00-04:00</published><updated>2011-08-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-08-04:/2011_08_04-brain_damaged_data.html</id><summary type="html">&lt;p&gt;We process a fair amount of externally-prepared datasets.  40,000 rows
of econometric data that we purchased from a third-party.  Mostly, the
data is in a usable format: .CSV or .XSLX.&lt;/p&gt;
&lt;p&gt;Once in a while, we get CSV with &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;.  A few times, we got
fixed-format COBOL-style records.&lt;/p&gt;
&lt;p&gt;Recently, we got …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We process a fair amount of externally-prepared datasets.  40,000 rows
of econometric data that we purchased from a third-party.  Mostly, the
data is in a usable format: .CSV or .XSLX.&lt;/p&gt;
&lt;p&gt;Once in a while, we get CSV with &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;.  A few times, we got
fixed-format COBOL-style records.&lt;/p&gt;
&lt;p&gt;Recently, we got a CSV-with-pipe that included 2 records with embedded
&lt;tt class="docutils literal"&gt;\n&lt;/tt&gt; sequences in the middle of a CSV row of data.  Really.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Painful Elimination&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to &amp;quot;eliminate&amp;quot; this problem.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Subclass our input processing to handle this special CSV-with-pipe
case.&lt;/li&gt;
&lt;li&gt;Actually read and parse the source file creating a clean intermediate
file that we can simply process with an existing CSV-with-pipe
configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I elected to do the first.  The second is (to my mind) an auditing
nightmare because we touched the file.  We have to prove that we
didn't disturb any other fields.  While not impossible, it becomes a
very strange special case for this one-and-only file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSV Simplicity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The CSV module's epic simplicity makes it easy to work around this
kind of goofy data.  Our subclass for this case had the following
extra foolishness put in&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def make_reader( self ):
        def filter_damage( aFile ):
            file_iter= iter(aFile)
            for row in file_iter:
                if row.rfind('&amp;quot;') &amp;gt;= len(row)-3:
                    logger.error( &amp;quot;Damaged Line: %r&amp;quot;, row )
                    rest= next(file_iter)
                    line= row[:row.rfind('&amp;quot;')] + rest[3:]
                    logger.warning( &amp;quot;Repaired Line: %r&amp;quot;, line )
                    yield line
                else:
                    yield row
        tweaked_file= filter_damage( self.sourceFile )
        return csv.reader( tweaked_file, delimiter='|', doublequote=False, escapechar='&amp;quot;' )
&lt;/pre&gt;
&lt;p&gt;That's it.  Since the Python CSV reader merely wants an iterator over
lines, we can (with a simple generator function) provide the necessary
&amp;quot;iterator-over-lines&amp;quot;.&lt;/p&gt;
&lt;p&gt;Delightful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apology&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The murky-looking &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;row.rfind('&amp;quot;')&lt;/span&gt; &amp;gt;= &lt;span class="pre"&gt;len(row)-3&lt;/span&gt;&lt;/tt&gt; condition is one of
those consequences of trying to find just a few irregular line endings
in an otherwise regular file.  For CSV processing, files often have to
be opened in &amp;quot;rb&amp;quot; mode because they originate (or will be used with)
MS-Excel.  This makes the damaged line-ending either &lt;tt class="docutils literal"&gt;\n&lt;/tt&gt; or maybe
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\\r\\n&lt;/span&gt;&lt;/tt&gt;.  Rather than spend too much time negotiating with Python's
universal newline and &amp;quot;rb&amp;quot; mode, it's slightly easier to look for a
&lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; near the end.&lt;/p&gt;
&lt;p&gt;We're hoping this is a one-time-only subclass that we can safely
ignore in the future.  If hope is dashed, it's a distinct subclass, so
it's easily reused and didn't break anything else.&lt;/p&gt;
</content><category term="Technologies"></category><category term="csv"></category><category term="#python"></category></entry><entry><title>One of Those Things</title><link href="https://slott56.github.io/2011_07_26-one_of_those_things.html" rel="alternate"></link><published>2011-07-26T08:00:00-04:00</published><updated>2011-07-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-07-26:/2011_07_26-one_of_those_things.html</id><summary type="html">&lt;p&gt;Check out this question on Stack Overflow: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/6789230/python-replace-a-string-by-a-float-in-txt-file/6789735#6789735"&gt;Python: replace a string by
a float in txt
file&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;The question is confusing, but it appears to be a longish and confused
description of simple formatting or template substitution.  It's hard to
be sure, but it sounds like one of Those Things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this question on Stack Overflow: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/6789230/python-replace-a-string-by-a-float-in-txt-file/6789735#6789735"&gt;Python: replace a string by
a float in txt
file&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;The question is confusing, but it appears to be a longish and confused
description of simple formatting or template substitution.  It's hard to
be sure, but it sounds like one of Those Things™ (TT).&lt;/p&gt;
&lt;p&gt;Most of Those Things (TT) are standard problems with standard solutions.&lt;/p&gt;
&lt;p&gt;Until you've seen a lot TT's, it seems like your problem is unique and
special.  It's hard to see TT's for what they are.&lt;/p&gt;
&lt;p&gt;In this case, the problem appears to be solved by Python's
&lt;a class="reference external" href="http://docs.python.org/library/string.html#template-strings"&gt;string.Template&lt;/a&gt;
class with minor modifications.  The documentation for customizing
string.Template isn't clear, so here's an example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from string import Template
class MyTemplate( Template ):
    delimiter= '&amp;#64;'
    pattern=
r&amp;quot;&amp;#64;(?P&amp;lt;escaped&amp;gt;&amp;#64;)|&amp;#64;(?P&amp;lt;named&amp;gt;[_a-z][_a-z0-9]*)&amp;#64;|&amp;#64;(?P&amp;lt;braced&amp;gt;[_a-z][_a-z0-9]*)&amp;#64;|&amp;#64;(?P&amp;lt;invalid&amp;gt;)&amp;quot;
&lt;/pre&gt;
&lt;p&gt;That appears to be the standard solution to the standard problem.&lt;/p&gt;
&lt;p&gt;Define a new delimiter ('&amp;#64;') and some slightly different delimiter
parsing rules and away you go.&lt;/p&gt;
&lt;p&gt;This can be used as follows to replace any '&amp;#64;x&amp;#64;' variables in any
template file.  What's important is that very little actual code is
needed, since it's one of Those Things that's already been solved.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open( 'a.txt', 'r' ) as source:
    t = MyTemplate(source.read())
    result= t.substitute( x=15 )
    print result
&lt;/pre&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-think-this-is-a-rather-over-engineered-solution"&gt;
&lt;h2&gt;I think this is a rather over-engineered solution....&lt;/h2&gt;
&lt;p&gt;Paul&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-07-26 13:08:26.374000-04:00&lt;/p&gt;
&lt;p&gt;I think this is a rather over-engineered solution. As the accepted
answer on the question shows, the replace method is vastly more obvious
and less verbose than that frightening regular expression.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="text-template"></category><category term="string"></category></entry><entry><title>Spam Email Footers</title><link href="https://slott56.github.io/2011_07_21-spam_email_footers.html" rel="alternate"></link><published>2011-07-21T11:35:00-04:00</published><updated>2011-07-21T11:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-07-21:/2011_07_21-spam_email_footers.html</id><summary type="html">&lt;p&gt;I don't want the spamilicious email.  I'm trying to actually
unsubscribe.
The footer says &amp;quot;If you are not the intended recipient, you are hereby
notified that any dissemination, distribution or copying of any
information contained in or attached to this communication is strictly
prohibited. If you have received this message …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don't want the spamilicious email.  I'm trying to actually
unsubscribe.
The footer says &amp;quot;If you are not the intended recipient, you are hereby
notified that any dissemination, distribution or copying of any
information contained in or attached to this communication is strictly
prohibited. If you have received this message in error, please notify
the sender immediately and delete the material from any computer.&amp;quot;
I don't feel like the intended recipient because it's just irrelevant
junk.  Perhaps you should not have disseminated, distributed, copied or
sent me this.  Wouldn't that have been simpler? Keep it to yourself?
I also think I've received the message in error.  Since I don't want the
damn thing. And that means that I have to delete it?  Why can't you stop
sending it?  Wouldn't that be simpler for both of us?&lt;/p&gt;
</content><category term="Technologies"></category><category term="use case"></category><category term="spam"></category></entry><entry><title>757 Python User's Group Meetup</title><link href="https://slott56.github.io/2011_07_18-757_python_users_group_meetup.html" rel="alternate"></link><published>2011-07-18T06:06:00-04:00</published><updated>2011-07-18T06:06:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-07-18:/2011_07_18-757_python_users_group_meetup.html</id><content type="html">&lt;p&gt;Wednesday night.  At 757 Labs.  Be there.
Here's the details on
&lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/events/22825011/"&gt;meetup.com&lt;/a&gt;
Lacking any other agenda, I'll do some more presentation on the supreme
coolness of Django.&lt;/p&gt;
</content><category term="Technologies"></category><category term="meetup"></category></entry><entry><title>I almost wet myself</title><link href="https://slott56.github.io/2011_07_12-i_almost_wet_myself.html" rel="alternate"></link><published>2011-07-12T08:00:00-04:00</published><updated>2011-07-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-07-12:/2011_07_12-i_almost_wet_myself.html</id><summary type="html">&lt;p&gt;Someone sent me this: &amp;quot;&lt;a class="reference external" href="http://mygisblog.wordpress.com/2010/05/03/building-skills-in-python-steven-f-lott/"&gt;“Building Skills in Python” – Steven F.
Lott&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;I had a vague idea that this book would get some traction.  This
response was surprising.  I guess I should get to work on the upgrades.&lt;/p&gt;
&lt;p&gt;And focus on the &amp;quot;no-nonsense&amp;quot; comment.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="will-your-target-audience-for-the-book-upgrade-be"&gt;
&lt;h2&gt;Will your target audience for the book …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Someone sent me this: &amp;quot;&lt;a class="reference external" href="http://mygisblog.wordpress.com/2010/05/03/building-skills-in-python-steven-f-lott/"&gt;“Building Skills in Python” – Steven F.
Lott&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;I had a vague idea that this book would get some traction.  This
response was surprising.  I guess I should get to work on the upgrades.&lt;/p&gt;
&lt;p&gt;And focus on the &amp;quot;no-nonsense&amp;quot; comment.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="will-your-target-audience-for-the-book-upgrade-be"&gt;
&lt;h2&gt;Will your target audience for the book upgrade be ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-07-14 11:20:06.583000-04:00&lt;/p&gt;
&lt;p&gt;Will your target audience for the book upgrade be the same or will it
change?
What are you goals for the book upgrade?
What kind of comments have you gotten from readers of your book?
It has been an outstanding book to teach myself Python. Besides some
minor typos, I really can't think of any major comments to provide.
Good luck!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>Security Vulnerabilities</title><link href="https://slott56.github.io/2011_07_07-security_vulnerabilities.html" rel="alternate"></link><published>2011-07-07T17:20:00-04:00</published><updated>2011-07-07T17:20:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-07-07:/2011_07_07-security_vulnerabilities.html</id><summary type="html">&lt;p&gt;Just saw this for the first time today:  &lt;a class="reference external" href="http://cwe.mitre.org/top25/"&gt;http://cwe.mitre.org/top25/&lt;/a&gt;
I'd always relied on
this: &lt;a class="reference external" href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&lt;/a&gt;
Both are really good lists of security vulnerabilities.
I once had to listen to a DBA tell me that &amp;quot;we don't know what we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just saw this for the first time today:  &lt;a class="reference external" href="http://cwe.mitre.org/top25/"&gt;http://cwe.mitre.org/top25/&lt;/a&gt;
I'd always relied on
this: &lt;a class="reference external" href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&lt;/a&gt;
Both are really good lists of security vulnerabilities.
I once had to listen to a DBA tell me that &amp;quot;we don't know what we don't
know&amp;quot; as a way of saying that there was no way to be sure that a web app
was &amp;quot;secure&amp;quot;.  That comment lead the project manager to go  through the
classic &amp;quot;risk exposure&amp;quot; exercise (and hours of discussion) to determine
that security mattered.  We defined the risks, the costs and the
probability of occurrence so that we could document all kinds of
potential exposures or something.
Instead of hand-wringing, these kinds of simple lists of the common
vulnerabilities provides actionable steps for design, code, test and
audit of operations.  Further, they guide selection, configuration and
operation of web server technology to assure that the vulnerabilities
are addressed.&lt;/p&gt;
</content><category term="Technologies"></category><category term="security"></category></entry><entry><title>Implementing the Unsubscribe User Story</title><link href="https://slott56.github.io/2011_06_30-implementing_the_unsubscribe_user_story.html" rel="alternate"></link><published>2011-06-30T08:00:00-04:00</published><updated>2011-06-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-06-30:/2011_06_30-implementing_the_unsubscribe_user_story.html</id><summary type="html">&lt;p&gt;I've been unsubscribing from some junk email recently.
The user story is simple: As a not-very-interested person, I want to get
off your dumb-ass mailing list so that I don't have to flag your crap as
spam any more.&lt;/p&gt;
&lt;p&gt;The implementations vary from good to evil.  Here's what I've found …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been unsubscribing from some junk email recently.
The user story is simple: As a not-very-interested person, I want to get
off your dumb-ass mailing list so that I don't have to flag your crap as
spam any more.&lt;/p&gt;
&lt;p&gt;The implementations vary from good to evil.  Here's what I've found.
The best sites have an unsubscribe link that simply presents the facts
-- you are unsubscribed.  I almost feel like re-subscribing to a site
that handles this use case so well.&lt;/p&gt;
&lt;p&gt;The first level of crap is a site which forces me to click an OK or
Unsubscribe button to confirm that I really want to unsubscribe and
wasn't clicking the tiny little links at the end of the message
randomly.&lt;/p&gt;
&lt;p&gt;The deeper level of &amp;quot;marketing&amp;quot; crap is a form that allows me to
&amp;quot;configure my subscription settings&amp;quot;.  This is done by some marketing
genius who wanted to &amp;quot;offer additional value&amp;quot; rather than simply do what
I asked.  This is a hateful (but not yet evil) practice.  I don't want
to &amp;quot;configure&amp;quot; my settings.  I want out.&lt;/p&gt;
&lt;p&gt;The third-from-worst is a form in which I must enter my email address.&lt;/p&gt;
&lt;p&gt;What?  I have several email aliases that redirect to a common mailbox.
I have to -- what? -- guess which of the aliases was used?  This is
pernicious because I can make a spelling mistake and they can continue
to send me dunning email.  This fill-in-the-blanks unsubscribe is simply
evil because it gives them plausible deniability when the continue to
send me email.  It's now my fault that I didn't spell my name correctly.
The next-to-worst is a &amp;quot;mailto:&amp;quot; link that jumps into my emailer.  I
have to -- what? -- fill in the magic word &amp;quot;Complete&amp;quot; somewhere?  You're
kidding, right?  This is so 1980's-vintage listserv that I'm hoping
these companies can be sued because they failed to actually unsubscribe
folks.  Again, this gives the spammer a legitimate excuse because I
failed to do the arcane step properly.&lt;/p&gt;
&lt;p&gt;The worst is no link at all.  Just instructions explaining that an email
must be send with the magic word &amp;quot;Complete&amp;quot; or &amp;quot;Unsubscribe&amp;quot; in the
subject or body.  Because I use aliases, this will probably not
unsubscribe anything useful, but will only unsubscribe my outbound email
address.  This is the worst kind of evil.  In a way, it meets the user
story.  But only in a very, very oblique way.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="don-t-forget-the-final-insult-you-may-c"&gt;
&lt;h2&gt;Don't forget the final insult: &amp;quot;You may c...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-07-22 10:06:41.908000-04:00&lt;/p&gt;
&lt;p&gt;Don't forget the final insult: &amp;quot;You may continue to receive email from
us for the next 6-8 weeks...&amp;quot;
By then, of course--much like mailing a rebate--you've forgotten that
you already tried to unsubscribe and either go through the whole cycle
again or just give up.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="use case"></category></entry><entry><title>Simplicity vs. Depth</title><link href="https://slott56.github.io/2011_06_28-simplicity_vs_depth.html" rel="alternate"></link><published>2011-06-28T08:39:00-04:00</published><updated>2011-06-28T08:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-06-28:/2011_06_28-simplicity_vs_depth.html</id><summary type="html">&lt;p&gt;During  chapter technical reviews, the question of technical depth has
come up time and again.  Essentially, in every single chapter.
In the older &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/html/index.html"&gt;Building Skills in Python&lt;/a&gt;
book, there are a number of topics that feel &amp;quot;digressive&amp;quot; to the
reviewer and editor.  Too much depth.&lt;/p&gt;
&lt;p&gt;However, there are a number …&lt;/p&gt;</summary><content type="html">&lt;p&gt;During  chapter technical reviews, the question of technical depth has
come up time and again.  Essentially, in every single chapter.
In the older &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/html/index.html"&gt;Building Skills in Python&lt;/a&gt;
book, there are a number of topics that feel &amp;quot;digressive&amp;quot; to the
reviewer and editor.  Too much depth.&lt;/p&gt;
&lt;p&gt;However, there are a number of Python tutorials, many of which are very
shallow.  I'd like to find a way to retain the technical depth, without
it feeling &amp;quot;digressive&amp;quot;.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Choice 1.&lt;/dt&gt;
&lt;dd&gt;Split each chapter into different &amp;quot;basic&amp;quot; and &amp;quot;advanced&amp;quot;
sections.  This would retain a sensible outline of parts (Language
Fundamentals, Data Structures, Classes, Modules and a bunch of advanced
projects) and chapters within each part.  Some chapters would still have
to be split because a number of &amp;quot;advanced&amp;quot; concepts (i.e. alternative
function argument passing with * and **) really has to be delayed
until after an appropriate data structure chapter.&lt;/dd&gt;
&lt;dt&gt;Choice 2.&lt;/dt&gt;
&lt;dd&gt;Separate material two kinds of chapters &amp;quot;basic&amp;quot; and &amp;quot;pro&amp;quot;.
This would lead to a &amp;quot;basics&amp;quot; thread for n00bz (read all the &amp;quot;basics&amp;quot;
chapters) and an &amp;quot;pro&amp;quot; thread for professionals where you'd just read
all the chapters in order without skipping.    This would create some
more chapters, but each chapter would be shorter and more focused.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="if-you-consider-quot-passing-arguments-to-functio"&gt;
&lt;h2&gt;If you consider &amp;amp;quot;passing arguments to functio...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-06-28 06:22:06.240000-04:00&lt;/p&gt;
&lt;p&gt;If you consider &amp;quot;passing arguments to functions&amp;quot; an advanced concept,
then maybe your problem isn't the depth of the material itself, but what
you consider an advanced skill.&lt;/p&gt;
&lt;p&gt;Decision Fatigue&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-psychology-marketing-it-is-w"&gt;
&lt;h2&gt;In psychology/marketing, it is w...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-07-01 07:49:51.558000-04:00&lt;/p&gt;
&lt;p&gt;Decision Fatigue
In psychology/marketing, it is well established that if you give humans
too many choices, they make no choice. Readers students want to make the
decision once as to whether or not the book is at the appropriate level
and be done w/ it. They don't want to continually make the decision
should I read or not read this chapter or this section.
The other thing, look at how successful your book is. Look at how widely
it is referenced out there in the internet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-href-http-www-youtube-com-watch-v-063jqam6n8"&gt;
&lt;h2&gt;&amp;lt;a href=&amp;quot;&lt;a class="reference external" href="http://www.youtube.com/watch?v=063jQAM6N8"&gt;http://www.youtube.com/watch?v=063jQAM6N8&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;David Goodger&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-06-27 22:13:40.092000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.youtube.com/watch?v=063jQAM6N8I"&gt;it's&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line-question-who-is-your-intended-audienc"&gt;
&lt;h2&gt;Bottom line question: Who is your intended audienc...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-06-29 18:01:25.013000-04:00&lt;/p&gt;
&lt;p&gt;Bottom line question: Who is your intended audience?
In your book you explicitly state
&amp;quot;Audiance: Professional programmers who need to learn Python are our
primary audience.&amp;quot;
url:
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/html/preface.html#audience"&gt;http://homepage.mac.com/s_lott/books/python/html/preface.html#audience&lt;/a&gt;
So, are you going to change your target audience? Is your target
audience everyone? Both basic and pro?
Now that everyone is our target audience, we can then ring our hands
about what belongs in the basic areas of the book and what belongs in
the advanced part of the book.
Lets not stop at adding burdens just to the author, lets make sure to
add burdens to the readers. The reader has to figure out whether or not
to read a section depending on whether it is basic or advanced. Of
course the reader will disagree w/ what is advanced and what is basic
and he then can have endless arguments w/ the author.
How about choice 0: do nothing and stick w/ the original intended
audience?
How many other successful tech language books have both basic and
advanced excepted in an extremely limited sense?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Hackerspace</title><link href="https://slott56.github.io/2011_06_21-hackerspace.html" rel="alternate"></link><published>2011-06-21T08:00:00-04:00</published><updated>2011-06-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-06-21:/2011_06_21-hackerspace.html</id><content type="html">&lt;p&gt;Just started learning about
&amp;quot;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Hackerspace"&gt;Hackerspace&lt;/a&gt;&amp;quot;.
Without really knowing what I was doing, I fell into the &lt;a class="reference external" href="http://757labs.org/"&gt;757
Labs&lt;/a&gt; Hackerspace.
The &lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/"&gt;757 Python Users'
Group&lt;/a&gt;, specifically.
What a great idea.  Bright people.  Interested in the same area of
technology.
It's like hanging around with sailors at a marina.&lt;/p&gt;
</content><category term="Technologies"></category><category term="hackerspace"></category><category term="#python"></category></entry><entry><title>An Object-Lesson in How to Stifle Innovation</title><link href="https://slott56.github.io/2011_06_09-an_object_lesson_in_how_to_stifle_innovation.html" rel="alternate"></link><published>2011-06-09T08:00:00-04:00</published><updated>2011-06-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-06-09:/2011_06_09-an_object_lesson_in_how_to_stifle_innovation.html</id><summary type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://gizmodo.com/5691604/how-ma-bell-shelved-the-future-for-60-years"&gt;How Ma Bell Shelved the Future for 60 Years&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
AT&amp;amp;T firmly believed that the answering machine, and its magnetic
tapes, would lead the public to abandon the telephone.&lt;/blockquote&gt;
&lt;p&gt;How many good ideas are set aside by managers who simply don't have a
clue what users actually want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this: &lt;a class="reference external" href="http://gizmodo.com/5691604/how-ma-bell-shelved-the-future-for-60-years"&gt;How Ma Bell Shelved the Future for 60 Years&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
AT&amp;amp;T firmly believed that the answering machine, and its magnetic
tapes, would lead the public to abandon the telephone.&lt;/blockquote&gt;
&lt;p&gt;How many good ideas are set aside by managers who simply don't have a
clue what users actually want?&lt;/p&gt;
&lt;p&gt;How many great IT projects are rejected because of this kind of
delusional paranoia?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="its-not-just-at-t-and-the-old-guard"&gt;
&lt;h2&gt;Its not just AT&amp;amp;T and the &amp;quot;old guard&amp;quot;...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-06-11 12:20:05.510000-04:00&lt;/p&gt;
&lt;p&gt;Its not just AT&amp;amp;T and the &amp;quot;old guard&amp;quot;. Most humans ASSUME linear
progression and can't imagine discontinuities. The latest craze is the
phrase &amp;quot;black swans&amp;quot;. Lots of talk but how many people actually DO
anything about it. Even &amp;quot;people in the know&amp;quot; screw this up. Check out
&amp;quot;Bill Gates Flabbergasted by Gmail By Morgan&amp;quot;
&lt;a class="reference external" href="http://www.fool.com/investing/general/2011/05/31/bill-gates-flabbergasted-by-gmail.aspx"&gt;http://www.fool.com/investing/general/2011/05/31/bill-gates-flabbergasted-by-gmail.aspx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="innovation"></category></entry><entry><title>Multithreading -- Fear, Uncertainty and Doubt</title><link href="https://slott56.github.io/2011_06_07-multithreading_fear_uncertainty_and_doubt.html" rel="alternate"></link><published>2011-06-07T14:10:00-04:00</published><updated>2011-06-07T14:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-06-07:/2011_06_07-multithreading_fear_uncertainty_and_doubt.html</id><summary type="html">&lt;p&gt;Read this: &amp;quot;&lt;a class="reference external" href="http://programmers.stackexchange.com/questions/81003/how-to-explain-why-multi-threading-is-difficult/81008#81008"&gt;How to explain why multi-threading is
difficult&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;We need to talk. This is not that difficult.&lt;/p&gt;
&lt;p&gt;Multi-threading is only difficult if you do it badly. There are an
almost infinite number of ways to do it badly. Many magazines and
bloggers have decided that the multithreading hurdle is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Read this: &amp;quot;&lt;a class="reference external" href="http://programmers.stackexchange.com/questions/81003/how-to-explain-why-multi-threading-is-difficult/81008#81008"&gt;How to explain why multi-threading is
difficult&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;We need to talk. This is not that difficult.&lt;/p&gt;
&lt;p&gt;Multi-threading is only difficult if you do it badly. There are an
almost infinite number of ways to do it badly. Many magazines and
bloggers have decided that the multithreading hurdle is the Next Big
Thing (NBT™). We need new, fancy, expensive language and library
support for this and we need it right now.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Parallel_computing"&gt;Parallel Computing&lt;/a&gt; is the
secret to following Moore's Law. All those extra cores will go unused
if we can't write multithreaded apps. And we can't write
multi-threaded apps because—well—there are lots of reasons, split
between ignorance and arrogance. All of which can be solved by
throwing money after tools. Right?&lt;/p&gt;
&lt;div class="section" id="arrogance"&gt;
&lt;h2&gt;Arrogance&lt;/h2&gt;
&lt;p&gt;One thing that makes multi-threaded applications error-prone is
simple arrogance. There are lots and lots of race conditions that can
arise. And folks aren't trained to think about how simple it is to
have a sequence of instructions interrupted at just the wrong spot.
Any sequence of &amp;quot;read, work, update&amp;quot; operations will have threads
doing reads (in any order), threads doing the work (in any order) and
then doing the updates in the worst possible order.&lt;/p&gt;
&lt;p&gt;Compound &amp;quot;read, work, update&amp;quot; sequences need locks. And the locations
of the locks can be obscure because we rarely think twice about
reading a variable. Setting a variable is a little less confusing.
Because we don't think much about reads, we fail to see the
consequences of moving the read of a variable around as part of an
optimization effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ignorance"&gt;
&lt;h2&gt;Ignorance&lt;/h2&gt;
&lt;p&gt;The best kind of lock is not a mutex or a semaphore. It surely isn't
an RDBMS (but God knows, numerous organizations have used an RDBMS as
a large, slow, complex and expensive message queue.)&lt;/p&gt;
&lt;p&gt;The best kind of lock seems to be a message queue. The various
concurrent elements can simply dequeue pieces of data, do their tasks
and enqueue the results. It's really elegant. It has many, simple,
uncoupled pieces. It can be scaled by increasing the number of
threads sharing a queue.&lt;/p&gt;
&lt;p&gt;A queue (read with an official &amp;quot;get&amp;quot;) means that the reads aren't
casually ignored and moved around during optimization. Further, the
creation of a complex object can be done by one thread which gets
pieces of data from a queue shared by multiple writers. No locking on
the complex object.&lt;/p&gt;
&lt;p&gt;Using message queues means that there's no weird race condition when
getting data to start doing useful work; a get is atomic and
&lt;em&gt;guaranteed&lt;/em&gt; to have that property. Each thread gets an thread-local,
thread-safe object. There's no weird race condition when passing a
result on to the next step in a pipeline. It's dropped into the
queue, where it's available to another thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dining-philosophers"&gt;
&lt;h2&gt;Dining Philosophers&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Dining_philosophers_problem"&gt;Dining Philosophers&lt;/a&gt;
Code Kata has a queue-based solution that's pretty cool.&lt;/p&gt;
&lt;p&gt;A queue of Forks can be shared by the various Philosopher threads.
Each Philosopher must get two Fork resources from the queue, eat,
philosophize and then enqueue the two Forks again. It's quite short,
easy to write and easy to demonstrate that it &lt;em&gt;must&lt;/em&gt; work.&lt;/p&gt;
&lt;p&gt;Perhaps the hardest thing is designing the Dining Room (also know as
the Waiter, Conductor or Footman) that only allows four of the five
philosophers to dine concurrently. To do this, a departing
Philosopher must enqueue themselves into a &amp;quot;done eating&amp;quot; queue so
that the next waiting Philosopher can be seated.&lt;/p&gt;
&lt;p&gt;A queue-based solution is delightfully simple. 200 or so lines of
code including docstrings comments so that the documentation looked
nice, too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-constraints"&gt;
&lt;h2&gt;Additional Constraints&lt;/h2&gt;
&lt;p&gt;The simplest solution uses a single queue of anonymous Forks. A
common constraint is to insist that each Philosopher use only the two
adjacent forks. Philosopher &lt;em&gt;p&lt;/em&gt; can use forks &lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt; + 1&lt;span class="unknown"&gt;\mod&lt;/span&gt;5&lt;/span&gt; and
&lt;span class="formula"&gt;&lt;i&gt;p&lt;/i&gt; − 1&lt;span class="unknown"&gt;\mod&lt;/span&gt;5&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This is pleasant to implement. The Philosopher simply dequeues a
fork, checks the position, and re-enqueues it if it's a wrong fork.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fud-factor"&gt;
&lt;h2&gt;FUD Factor&lt;/h2&gt;
&lt;p&gt;I think that the publicity around parallel programming and
multithreaded applications is designed to create Fear, Uncertainty
and Doubt (FUD™).&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Too many questions on StackOverflow seem to indicate that a slow
program might magically get faster if somehow threads where
involved. For programs that involve scanning the entire hard drive
or downloading Wikipedia or doing a giant SQL query, the number of
threads has little relevance to the real work involved. These
programs are I/O bound; since threads must share the I/O resources
of the containing process, multi-threading won't help.&lt;/li&gt;
&lt;li&gt;Too many questions on StackOverflow seem to have simple message
queue solutions. But folks seem to start out using inappropriate
technology. Just learn how to use a message queue. Move on.&lt;/li&gt;
&lt;li&gt;Too many vendors of tools (or languages) are pandering to (or
creating) the FUD factor. If programmers are made suitably
fearful, uncertain or doubtful, they'll lobby for spending lots of
money for a language or package that &amp;quot;solves&amp;quot; the problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sigh. The answer isn't software tools, it's design. Break the
problem down into independent parallel tasks and feed them from
message queues. Collect the results in message queues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-code"&gt;
&lt;h2&gt;Some Code&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
class Philosopher( threading.Thread ):
    &amp;quot;&amp;quot;&amp;quot;A Philosopher.  When invited to dine, they will
    cycle through their standard dining loop.

    -   Acquire two forks from the fork Queue
    -   Eat for a random interval
    -   Release the two forks
    -   Philosophize for a random interval

    When done, they will enqueue themselves with
    the &amp;quot;footman&amp;quot; to indicate that they are leaving.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self, name, cycles=None ):
        &amp;quot;&amp;quot;&amp;quot;Create this philosopher.

        :param name: the number of this philosopher.
            This is used by a subclass to find the correct fork.
        :param cycles: the number of cycles they will eat.
            If unspecified, it's a random number, u, 4 &amp;lt;= u &amp;lt; 7
        &amp;quot;&amp;quot;&amp;quot;
        super( Philosopher, self ).__init__()
        self.name= name
        self.cycles= cycles if cycles is not None else random.randrange(4,7)
        self.log= logging.getLogger( &amp;quot;{0}.{1}&amp;quot;.format(self.__class__.__name__, name) )
        self.log.info( &amp;quot;cycles={0:d}&amp;quot;.format( self.cycles ) )
        self.forks= None
        self.leaving= None
    def enter( self, forks, leaving ):
        &amp;quot;&amp;quot;&amp;quot;Enter the dining room.  This must be done before the
        thread can be started.

        :param forks: The queue of available forks
        :param leaving: A queue to notify the footman that they are
            done.
        &amp;quot;&amp;quot;&amp;quot;
        self.forks= forks
        self.leaving= leaving
    def dine( self ):
        &amp;quot;&amp;quot;&amp;quot;The standard dining cycle:
        acquire forks, eat, release forks, philosophize.
        &amp;quot;&amp;quot;&amp;quot;
        for cycle in range(self.cycles):
            f1= self.acquire_fork()
            f2= self.acquire_fork()
            self.eat()
            self.release_fork( f1 )
            self.release_fork( f2 )
            self.philosophize()
        self.leaving.put( self )
    def eat( self ):
        &amp;quot;&amp;quot;&amp;quot;Eating task.&amp;quot;&amp;quot;&amp;quot;
        self.log.info( &amp;quot;Eating&amp;quot; )
        time.sleep( random.random() )
    def philosophize( self ):
        &amp;quot;&amp;quot;&amp;quot;Philosophizing task.&amp;quot;&amp;quot;&amp;quot;
        self.log.info( &amp;quot;Philosophizing&amp;quot; )
        time.sleep( random.random() )
    def acquire_fork( self ):
        &amp;quot;&amp;quot;&amp;quot;Acquire a fork.

        :returns: The Fork acquired.
        &amp;quot;&amp;quot;&amp;quot;
        fork= self.forks.get()
        fork.held_by= self.name
        return fork
    def release_fork( self, fork ):
        &amp;quot;&amp;quot;&amp;quot;Acquire a fork.

        :param fork: The Fork to release.
        &amp;quot;&amp;quot;&amp;quot;
        fork.held_by= None
        self.forks.put( fork )
    def run( self ):
        &amp;quot;&amp;quot;&amp;quot;Interface to Thread.  After the Philosopher
        has entered the dining room, they may engage
        in the main dining cycle.
        &amp;quot;&amp;quot;&amp;quot;
        assert self.forks and self.leaving
        self.dine()
&lt;/pre&gt;
&lt;p&gt;The point is to have the dine method be a direct expression of the
Philosopher's dining experience.  We might want to override
the acquire_fork method to permit different fork acquisition
strategies.
For example, a picky philosopher may only want to use the forks
adjacent to their place at the table, rather than reaching across the
table for the next available Fork.
The Fork, by comparison, is boring.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Fork( object ):
    &amp;quot;&amp;quot;&amp;quot;A Fork.  A Philosopher requires two of these to eat.&amp;quot;&amp;quot;&amp;quot;
    def __init__( self, name ):
        &amp;quot;&amp;quot;&amp;quot;Create the Fork.

        :param name: The number of this fork.  This may
            be used by a Philosopher looking for the correct Fork.
        &amp;quot;&amp;quot;&amp;quot;
        self.name= name
        self.holder= None
        self.log= logging.getLogger( &amp;quot;{0}.{1}&amp;quot;.format(self.__class__.__name__, name) )
    &amp;#64;property
    def held_by( self ):
        &amp;quot;&amp;quot;&amp;quot;The Philosopher currently holding this Fork.&amp;quot;&amp;quot;&amp;quot;
        return self.holder
    &amp;#64;held_by.setter
    def held_by( self, philosopher ):
        if philosopher:
            self.log.info( &amp;quot;Acquired by {0}&amp;quot;.format( philosopher ) )
        else:
            self.log.info( &amp;quot;Released by {0}&amp;quot;.format( self.holder ) )
        self.holder= philosopher
&lt;/pre&gt;
&lt;p&gt;The Table, however, is interesting.  It includes the special
&amp;quot;leaving&amp;quot; queue that's not a proper part of the problem domain, but
is a part of this particular solution.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Table( object ):
    &amp;quot;&amp;quot;&amp;quot;The dining Table.  This uses a queue of Philosophers
    waiting to dine and a queue of forks.

    This sets Philosophers, allows them to dine and then
    cleans up after each one is finished dining.

    To prevent deadlock, there's a limit on the number
    of concurrent Philosophers allowed to dine.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self, philosophers, forks, limit=4 ):
        &amp;quot;&amp;quot;&amp;quot;Create the Table.
        :param philosophers: The queue of Philosophers waiting to dine.
        :param forks: The queue of available Forks.
        :param limit: A limit on the number of concurrently dining Philosophers.
        &amp;quot;&amp;quot;&amp;quot;
        self.philosophers= philosophers
        self.forks= forks
        self.limit= limit
        self.leaving= Queue.Queue()
        self.log= logging.getLogger( &amp;quot;table&amp;quot; )
    def dinner( self ):
        &amp;quot;&amp;quot;&amp;quot;The essential dinner cycle:
        admit philosophers (to the stated limit);
        as philosophers finish dining, remove them and admit more;
        when the dining queue is empty, simply clean up.
        &amp;quot;&amp;quot;&amp;quot;
        self.at_table= self.limit
        while not self.philosophers.empty():
            while self.at_table != 0:
                p= self.philosophers.get()
                self.seat( p )
            # Must do a Queue.get() to wait for a resource
            p= self.leaving.get()
            self.excuse( p )
        assert self.philosophers.empty()
        while self.at_table != self.limit:
            p= self.leaving.get()
            self.excuse( p )
        assert self.at_table == self.limit
    def seat( self, philosopher ):
        &amp;quot;&amp;quot;&amp;quot;Seat a philosopher.  This increments the count
        of currently-eating Philosophers.

        :param philosopher: The Philosopher to be seated.
        &amp;quot;&amp;quot;&amp;quot;
        self.log.info( &amp;quot;Seating {0}&amp;quot;.format(philosopher.name) )
        philosopher.enter( self.forks, self.leaving)
        philosopher.start()
        self.at_table -= 1 # Consume a seat
    def excuse( self, philosopher ):
        &amp;quot;&amp;quot;&amp;quot;Excuse a philosopher.  This decrements the count
        of currently-eating Philosophers.

        :param philosopher: The Philosopher to be excused.
        &amp;quot;&amp;quot;&amp;quot;
        philosopher.join() # Cleanup the thread
        self.log.info( &amp;quot;Excusing {0}&amp;quot;.format(philosopher.name) )
        self.at_table += 1 # Release a seat
&lt;/pre&gt;
&lt;p&gt;The dinner method assures that all Philosophers eat until they are
finished.  It also assures that four Philosophers sit at the table
and when one finishes, another takes their place.  Finally, it also
assures that all Philosophers are done eating before the dining room
is closed.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="sometimes-even-when-its-a-black-box-people-get-t"&gt;
&lt;h2&gt;Sometimes, even when its a black box, people get t...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-06-07 19:26:30.802000-04:00&lt;/p&gt;
&lt;p&gt;Sometimes, even when its a black box, people get themselves into
trouble. The classic example that I have run into is Oracle parallel
execution. Just to show that &amp;quot;its not just me&amp;quot;, check out
Expert Oracle Database Architecture: 9i and 1…
by Thomas Kyte&lt;/p&gt;
&lt;p&gt;Chapter 14: Parallel Execution&lt;/p&gt;
&lt;p&gt;Section: When to Use Parallel Execution&lt;/p&gt;
&lt;p&gt;&amp;quot;Parallel execution is essentially nonscalable solution. It was designed
to
allow an individual user or a particular SQL statement to consume all
resources
of a database. If you have a feature that allows an indiividual to make
use of
everything that is available, and then you allow two individuals to use
that
feature, you'll have obvious contention issues.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="threads"></category><category term="software design"></category><category term="code-kata"></category><category term="queue"></category></entry><entry><title>Changed the Page Template</title><link href="https://slott56.github.io/2011_06_03-changed_the_page_template.html" rel="alternate"></link><published>2011-06-03T08:52:00-04:00</published><updated>2011-06-03T08:52:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-06-03:/2011_06_03-changed_the_page_template.html</id><content type="html">&lt;p&gt;The &amp;quot;default&amp;quot; template I chose was too narrow for presenting code
samples.  Changed it.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category></entry><entry><title>Code Kata : "Simple" Database Design</title><link href="https://slott56.github.io/2011_05_26-code_kata_simple_database_design.html" rel="alternate"></link><published>2011-05-26T08:00:00-04:00</published><updated>2011-05-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-26:/2011_05_26-code_kata_simple_database_design.html</id><summary type="html">&lt;p&gt;Here's a pretty simple set of use cases for a code-kata database
application.&lt;/p&gt;
&lt;p&gt;This is largely transactional, not analytical.&lt;/p&gt;
&lt;p&gt;It's a simple inventory of ingredients, recipes and locations.&lt;/p&gt;
&lt;div class="section" id="context"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;42' sailboat.&lt;/li&gt;
&lt;li&gt;Lots of places to keep stuff. Lots.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stuff gets lots or misplaced. It's helpful to marry recipes with
ingredients …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Here's a pretty simple set of use cases for a code-kata database
application.&lt;/p&gt;
&lt;p&gt;This is largely transactional, not analytical.&lt;/p&gt;
&lt;p&gt;It's a simple inventory of ingredients, recipes and locations.&lt;/p&gt;
&lt;div class="section" id="context"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;42' sailboat.&lt;/li&gt;
&lt;li&gt;Lots of places to keep stuff. Lots.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stuff gets lots or misplaced. It's helpful to marry recipes with
ingredients to use up the last of something before it goes bad and
stinks up the boat.&lt;/p&gt;
&lt;p&gt;Actor is essentially the cook.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-cases"&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Perishables to be eaten soon?&lt;/li&gt;
&lt;li&gt;Shopping list for specific recipes.&lt;/li&gt;
&lt;li&gt;Where did I put that?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="model"&gt;
&lt;h2&gt;Model&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external image-reference" href="http://yuml.me/diagram/scruffy/class/%5BIngredient%5Dm-n%5BRecipe%5D,%20%5BIngredient%5D1-n%5BOn-Hand%5D,%20%5BOn-Hand%5Dn-1%5BLocation%5D."&gt;&lt;img alt="image1" src="http://yuml.me/diagram/scruffy/class/%5BIngredient%5Dm-n%5BRecipe%5D,%20%5BIngredient%5D1-n%5BOn-Hand%5D,%20%5BOn-Hand%5Dn-1%5BLocation%5D." /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ingredient. A generic description: &amp;quot;lime&amp;quot;, &amp;quot;coconut&amp;quot;. Not too
much more is needed. A &amp;quot;food safety&amp;quot; notation (refrigeration
required, etc.) is a helpful attribute. Maybe a &amp;quot;food group&amp;quot; or
other nutrition information.&lt;/li&gt;
&lt;li&gt;Location. A text description of where things can be stored.
This shouldn't have too many attributes, because boats aren't
big grids. Phrases like &amp;quot;port saloon upper cabinet&amp;quot;, or &amp;quot;galley
outer cooler&amp;quot; make sense to folks who live on the boat.&lt;/li&gt;
&lt;li&gt;On Hand. This is simply ingredient, location and a measurement
of some kind. Example: 3 limes in the starboard galley center
cooler. There's a lot of magic around units and unit conversion
that can be fun. But that strays outside the database domain.&lt;/li&gt;
&lt;li&gt;Recipe. Example: &amp;quot;One of sour, two of sweet, three of strong,
and four of weak.&amp;quot;, lime, simple syrup, rum, water. Plain text
using a lightweight markup is what's required here. Along with
a many-to-many relationship with ingredients. This is not
carefully defined above because it should be done as a &amp;quot;more
advanced&amp;quot; exercise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think this has the right amount of complexity and isn't very
abstract. Since the use cases are pretty obvious to anyone who's
cooked or been to a grocery store, use case details aren't
essential.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="what-did-you-use-to-draw-your-schema-looks-cool"&gt;
&lt;h2&gt;What did you use to draw your schema? Looks cool.&lt;/h2&gt;
&lt;p&gt;Fred Janon&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-29 01:01:28.601000-04:00&lt;/p&gt;
&lt;p&gt;What did you use to draw your schema? Looks cool.&lt;/p&gt;
&lt;p&gt;mlee3680&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-11-07 15:35:35.681000-05:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by a blog administrator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-wanted-to-thank-you-for-this-excellent-read-i"&gt;
&lt;h2&gt;I wanted to thank you for this excellent read!! I ...&lt;/h2&gt;
&lt;p&gt;liperk&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-11-15 08:11:01.943000-05:00&lt;/p&gt;
&lt;p&gt;I wanted to thank you for this excellent read!! I definitely loved every
little bit of it. I have you bookmarked your site to check out the new
stuff you post. &lt;a class="reference external" href="https://www.meridiannorstar.net/"&gt;Meridian Norstar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="code-kata"></category></entry><entry><title>Meetup Tonight</title><link href="https://slott56.github.io/2011_05_25-meetup_tonight.html" rel="alternate"></link><published>2011-05-25T08:56:00-04:00</published><updated>2011-05-25T08:56:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-25:/2011_05_25-meetup_tonight.html</id><summary type="html">&lt;p&gt;Tonight (May 25th). Red Dog. Colley Ave. Ghent. I'll be wearing my Stack
Overflow shirt. I'll be there about 7. I know that at least one other
person won't be there until 8.&lt;/p&gt;
&lt;p&gt;The
&lt;a class="reference external" href="http://www.meetup.com/stackoverflow/Hampton-VA/105118/"&gt;Meetup&lt;/a&gt;
link.&lt;/p&gt;
&lt;p&gt;I like this meetup idea a lot. Probably because the WFH
life-style is a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tonight (May 25th). Red Dog. Colley Ave. Ghent. I'll be wearing my Stack
Overflow shirt. I'll be there about 7. I know that at least one other
person won't be there until 8.&lt;/p&gt;
&lt;p&gt;The
&lt;a class="reference external" href="http://www.meetup.com/stackoverflow/Hampton-VA/105118/"&gt;Meetup&lt;/a&gt;
link.&lt;/p&gt;
&lt;p&gt;I like this meetup idea a lot. Probably because the WFH
life-style is a little isolating.&lt;/p&gt;
&lt;p&gt;There's the small &amp;quot;&lt;a class="reference external" href="http://www.meetup.com/stackoverflow/Hampton-VA/"&gt;Hampton Stack Overflow
Community&lt;/a&gt;&amp;quot;.
We have a common interest in Stack Overflow.&lt;/p&gt;
&lt;p&gt;Also, there's the &lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/"&gt;757 Python Users
Group&lt;/a&gt;. We have
a common interest in Python. I've decided to become the &amp;quot;official&amp;quot;
organizer for this. I'm going to join the &lt;a class="reference external" href="http://757labs.org/"&gt;757
Labs&lt;/a&gt; Hackerspace, also.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="meetup"></category><category term="stackoverflow"></category></entry><entry><title>Creating UML</title><link href="https://slott56.github.io/2011_05_19-creating_uml.html" rel="alternate"></link><published>2011-05-19T08:00:00-04:00</published><updated>2011-05-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-19:/2011_05_19-creating_uml.html</id><summary type="html">&lt;p&gt;I'm a big fan of plain-text tools. Source Code. ReStructuredText. LaTeX.&lt;/p&gt;
&lt;p&gt;I'm not a big fan of proprietary file formats and document formats
that are difficult or impossible to decode. JSON and XML rock. .XLS
files are painful and difficult to work with.&lt;/p&gt;
&lt;p&gt;UML Diagrams are a particularly odious problem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a big fan of plain-text tools. Source Code. ReStructuredText. LaTeX.&lt;/p&gt;
&lt;p&gt;I'm not a big fan of proprietary file formats and document formats
that are difficult or impossible to decode. JSON and XML rock. .XLS
files are painful and difficult to work with.&lt;/p&gt;
&lt;p&gt;UML Diagrams are a particularly odious problem. To see a diagram it
has to be PNG or PDF or some other graphic format that's optimized
for storage and display, but not really optimized for editing. SVG
has a text vector markup language, but it's painful because it's so
generalized.&lt;/p&gt;
&lt;p&gt;Recently, I found two text to UML tools that are exciting prospects.&lt;/p&gt;
&lt;p&gt;First, there's &lt;a class="reference external" href="http://yuml.me/"&gt;YUML.me&lt;/a&gt;. This draws pretty nice,
if simple, diagrams that you can work with with relatively little
pain. It's slow and limited. But it works for simple diagrams.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image1" src="http://yuml.me/diagram/scruffy;scale:75/usecase/%5BAuthor%5D-(write%20text),%20(render%20image)-%5BYUML%5D,%20%5BAuthor%5D-(share%20link)." /&gt;&lt;/p&gt;
&lt;p&gt;The best part is that the image is rendered from the URL as plain
text.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://yuml.me/diagram/scruffy/usecase/[Author]-(write"&gt;http://yuml.me/diagram/scruffy/usecase/[Author]-(write&lt;/a&gt; text), (render
image)-[YUML], [Author]-(share link).&lt;/p&gt;
&lt;p&gt;YUML supports simple use case diagrams, simple class diagrams and
really simple activity diagrams. It covers a few bases with a
pleasant level of flexibility.&lt;/p&gt;
&lt;p&gt;The other tool is &lt;a class="reference external" href="http://plantuml.sourceforge.net/"&gt;Plant UML&lt;/a&gt;.
&amp;quot;PlantUML is used to draw UML diagram, using a simple and human
readable text description.&amp;quot;&lt;/p&gt;
&lt;p&gt;The online &lt;a class="reference external" href="http://www.plantuml.com/plantuml/"&gt;Plant UML Server&lt;/a&gt;
allows a flexible no-software-on-the-desktop way to play with their
markup language. The text of the image is not in the URL here, since
the text is so much more complex.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image2" src="http://www.plantuml.com:80/plantuml/img/it8iBSd8Bx9IqDMrKz08paWiIbNmoSpBrkJbiaAH2Y_AB4bL24cjA05A0IL3ylDpe591gNafgKKAdhc9wQcQ0000" /&gt;&lt;/p&gt;
&lt;p&gt;The best part of this is that the pictures come from plain text.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The plain text is trivial to put under configuration control.&lt;/li&gt;
&lt;li&gt;Plain text system descriptions are easy to write with simple
markup.&lt;/li&gt;
&lt;li&gt;Plain text documentation of existing software can be derived from
simple source analysis.&lt;/li&gt;
&lt;li&gt;Plain text design documents can generate some elements of the
source code&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="also-check-out-a-number-of-sphinx-extensions-whic"&gt;
&lt;h2&gt;Also check out a number of Sphinx extensions whic ...&lt;/h2&gt;
&lt;p&gt;Kevin H&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-19 16:02:17.133000-04:00&lt;/p&gt;
&lt;p&gt;Also check out a number of Sphinx extensions whic do things like this at
&lt;a class="reference external" href="https://bitbucket.org/birkenfeld/sphinx-contrib/"&gt;https://bitbucket.org/birkenfeld/sphinx-contrib/&lt;/a&gt;
All based on external tools (aafig, blockdiag, sdedit, etc.) but I find
that the sphinx-contrib repo acts as sort of a hub for these tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hi-a-full-list-of-text-to-uml-tools-can-be-found"&gt;
&lt;h2&gt;Hi, A full list of text-to-UML tools can be found ...&lt;/h2&gt;
&lt;p&gt;Jordi Cabot&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-21 11:00:13.109000-04:00&lt;/p&gt;
&lt;p&gt;Hi, A full list of text-to-UML tools can be found here:
&lt;a class="reference external" href="http://modeling-languages.com/content/uml-tools#textual"&gt;http://modeling-languages.com/content/uml-tools#textual&lt;/a&gt; (around 15 and
counting!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="see-also-http-www-graphviz-org-which-is-a-gener"&gt;
&lt;h2&gt;See also &lt;a class="reference external" href="http://www.graphviz.org/"&gt;http://www.graphviz.org/&lt;/a&gt; which is a gener...&lt;/h2&gt;
&lt;p&gt;zacharyh&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-29 17:52:40.757000-04:00&lt;/p&gt;
&lt;p&gt;See also &lt;a class="reference external" href="http://www.graphviz.org/"&gt;http://www.graphviz.org/&lt;/a&gt; which is a general purpose grapher
that can be extended for UML.
See here for an example:
&lt;a class="reference external" href="http://www.ffnn.nl/pages/articles/media/uml-diagrams-using-graphviz-dot.php"&gt;http://www.ffnn.nl/pages/articles/media/uml-diagrams-using-graphviz-dot.php&lt;/a&gt;
Also, it appears UML Graph is such an extension of graphviz.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="markup"></category><category term="UML"></category></entry><entry><title>The 757 Python User's Group</title><link href="https://slott56.github.io/2011_05_18-the_757_python_users_group.html" rel="alternate"></link><published>2011-05-18T13:36:00-04:00</published><updated>2011-05-18T13:36:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-18:/2011_05_18-the_757_python_users_group.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.meetup.com/757-Python-Users-Group/"&gt;http://www.meetup.com/757-Python-Users-Group/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm looking forward to meeting other Python developers in Hampton
Roads.&lt;/p&gt;
&lt;p&gt;Tonight. 7:00 PM. See you there.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="meetup"></category></entry><entry><title>Decisions and Consequences</title><link href="https://slott56.github.io/2011_05_17-decisions_and_consequences.html" rel="alternate"></link><published>2011-05-17T08:00:00-04:00</published><updated>2011-05-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-17:/2011_05_17-decisions_and_consequences.html</id><summary type="html">&lt;p&gt;A single poorly-made decision can have profound ripple-effects. Once
your stuck with it, you make accommodations, hacks and work-arounds.
Eventually, things work, but the result is less than ideal.&lt;/p&gt;
&lt;p&gt;Changing tack requires sometimes pervasive rework to the application.
How can we reduce the risks and improve the value created?&lt;/p&gt;
&lt;div class="section" id="a-recent-example"&gt;
&lt;h2&gt;A …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A single poorly-made decision can have profound ripple-effects. Once
your stuck with it, you make accommodations, hacks and work-arounds.
Eventually, things work, but the result is less than ideal.&lt;/p&gt;
&lt;p&gt;Changing tack requires sometimes pervasive rework to the application.
How can we reduce the risks and improve the value created?&lt;/p&gt;
&lt;div class="section" id="a-recent-example"&gt;
&lt;h2&gt;A Recent Example&lt;/h2&gt;
&lt;p&gt;When dealing with bulk econometric data (Bloomberg, D&amp;amp;B, Moody's,
etc.) you get BIG files with lots of fields. Depending on what
you're paying for, the file layouts are frequently different even
though the content is similar. I'm a big fan of plain-old CSV
data. Even the tab-delimited variant of CSV is not bad to work
with.&lt;/p&gt;
&lt;p&gt;Further, most vendors will slap some heading rows on the file so
that the column names are--more or less--identified. Surprisingly,
this doesn't work out well in practice because there are often
multiple columns with the same name. Sigh.&lt;/p&gt;
&lt;p&gt;Using Python's
&lt;a class="reference external" href="http://docs.python.org/release/3.1.3/library/csv.html"&gt;csv&lt;/a&gt;
library module lets us cope with CSV (and tab-delim) quite
gracefully.&lt;/p&gt;
&lt;p&gt;What's wrong with that decision? Nothing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="variant-column-names"&gt;
&lt;h2&gt;Variant Column Names&lt;/h2&gt;
&lt;p&gt;The question arises when you've purchased several files of
econometric data and the column names are slightly different. This
happens with a single vendor and across vendors. It's part of the
game that can't easily be avoided. Column names vary.&lt;/p&gt;
&lt;p&gt;What to do?&lt;/p&gt;
&lt;p&gt;Here's the less-than-ideal decision. &lt;strong&gt;Make the column names a
parameter&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In Python, this is not terribly difficult. The csv module's
DictReader provides us a dictionary for each row. Each column name
becomes a key. We can access the fields with
some_row['this_field'] and some_row['that_field']. How bad can it
be?&lt;/p&gt;
&lt;p&gt;The extra punctuation is fairly hideous.&lt;/p&gt;
&lt;p&gt;More importantly, however, is the nature of the metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consequence-one-dynamic-metadata"&gt;
&lt;h2&gt;Consequence One -- Dynamic Metadata&lt;/h2&gt;
&lt;p&gt;Dynamic metadata, in this case, means that any indexing of the
data is done based on character string column names.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
index[index_name][row[column_name]].append( row )
&lt;/pre&gt;
&lt;p&gt;That's rather more complex than the alternative where the metadata
has a fixed definition.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
some_index[row.column].append( row )
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="consequence-two-murky-orm"&gt;
&lt;h2&gt;Consequence Two -- Murky ORM&lt;/h2&gt;
&lt;p&gt;Once we have dynamic metadata, we're largely frozen out of
ordinary SQL database implementations. We don't know the column
names, we don't know the indices. We can't do simple CREATE TABLE
statements because we don't really have the column names until we
open the working files.&lt;/p&gt;
&lt;p&gt;We have to grub through all the code to find out where the dynamic
mapping is reasoned out. Once we find that, we can then consider
how to make the metadata fixed enough to tackle a SQL database.&lt;/p&gt;
&lt;p&gt;We could, of course, generate the SQL CREATE INDEX statements
on-the-fly. There's nothing wrong with it. But it slows down
analysis and decision-making when we're not sure what indexes
there are or what leads to a choice of index.&lt;/p&gt;
&lt;p&gt;What's important here is that we want to use SQLite because it
ships with Python. We want our application to &lt;em&gt;use&lt;/em&gt; an ORM (like
&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; or
&lt;a class="reference external" href="http://sqlobject.org/"&gt;SQLObject&lt;/a&gt;). We don't want our
application to &lt;em&gt;become&lt;/em&gt; a kind of ORM because of the dynamic SQL
and dynamic column names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanup"&gt;
&lt;h2&gt;Cleanup&lt;/h2&gt;
&lt;p&gt;The cleanup road is clear.&lt;/p&gt;
&lt;p&gt;#. Map all variant inputs to one common structure. Rather than
work with raw dictionaries from csv, map each row to a standard
set of names. For now, we can replace the dictionaries with
named tuples to prepare for a migration to an ORM when that's
possible.
#. Replace the row['some field'] syntax with row.some_field
syntax. Of course, there's a lot of this. This is a pervasive
change.
#. Find all the dynamic index creation and refactor that into a
more static &amp;quot;database-like&amp;quot; place for now.&lt;/p&gt;
&lt;p&gt;Item 1 is pretty easy to unit test. We're adding a function to
map from dynamic names to fixed names. Nothing much to this
testing-wise.&lt;/p&gt;
&lt;p&gt;Item 2 requires unit tests with really good code coverage or
there's no earthy way we can be sure that each mapping-syntax
name has been transformed into an attribute-syntax name.&lt;/p&gt;
&lt;p&gt;Item 3 barely requires testing. Indexes and other features are
performance enhancements that can be removed and added without
altering functionality.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="API Design"></category></entry><entry><title>A Taxonomy of Use Case Errors</title><link href="https://slott56.github.io/2011_05_15-a_taxonomy_of_use_case_errors.html" rel="alternate"></link><published>2011-05-15T12:38:00-04:00</published><updated>2011-05-15T12:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-15:/2011_05_15-a_taxonomy_of_use_case_errors.html</id><summary type="html">&lt;p&gt;First, the definition. A use case describes an actor's interaction
with a system to create business value. There are three parts: Actor,
Interaction and Business Value.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Not Interactive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1.1. The use case is just features and technical attributes with no
actor interaction expressed.&lt;/p&gt;
&lt;p&gt;1.2. The use case is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, the definition. A use case describes an actor's interaction
with a system to create business value. There are three parts: Actor,
Interaction and Business Value.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Not Interactive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1.1. The use case is just features and technical attributes with no
actor interaction expressed.&lt;/p&gt;
&lt;p&gt;1.2. The use case is just algorithms and processing with no
connection to an actor or a goal.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;No Business Value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.1. Incomplete&lt;/p&gt;
&lt;p&gt;2.1.1. The use case focus on sequential operations with no value or
goal.&lt;/p&gt;
&lt;p&gt;2.1.3. The use case simply follows existing precedent without
supporting actual business goals. It &amp;quot;paves the cow path&amp;quot;.&lt;/p&gt;
&lt;p&gt;2.2. Non-Specific&lt;/p&gt;
&lt;p&gt;2.2.1. The use case is a result of free-running imagination; it
conflates &amp;quot;possibly&amp;quot; vs. &amp;quot;required&amp;quot;. It contains descriptions of
interactions which could happen or would be nice to happen.&lt;/p&gt;
&lt;p&gt;2.3. Covers the Technology Only&lt;/p&gt;
&lt;p&gt;2.3.1. The solution technology is conflated with the business
problem. Words like &amp;quot;database&amp;quot; or &amp;quot;foreign key&amp;quot; or &amp;quot;error log&amp;quot; or
other solution technology are central.&lt;/p&gt;
&lt;p&gt;2.4. Contradictory&lt;/p&gt;
&lt;p&gt;2.4.1. The use case goal contradicts other goals.&lt;/p&gt;
&lt;p&gt;2.4.2. The use case sequence is inconsistent with the stated goal.&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;No Actor.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="analysis"></category><category term="use case"></category></entry><entry><title>The Ubiquitous Object</title><link href="https://slott56.github.io/2011_05_10-the_ubiquitous_object.html" rel="alternate"></link><published>2011-05-10T08:00:00-04:00</published><updated>2011-05-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-10:/2011_05_10-the_ubiquitous_object.html</id><summary type="html">&lt;p&gt;Objects are everywhere.&lt;/p&gt;
&lt;p&gt;Weirdly, some people can't see them. I guess they live in a rarified,
HP Lovecraftian world of pure action inhabited by amorphous things
that can't be properly called &amp;quot;beings&amp;quot; but rather &amp;quot;doings&amp;quot; because
they're pure activity with no existence.&lt;/p&gt;
&lt;p&gt;Read
&amp;quot;&lt;a class="reference external" href="http://www.hplovecraft.com/writings/texts/fiction/hy.asp"&gt;Hypnos&lt;/a&gt;&amp;quot;.
&amp;quot;They were sensations, yet within them …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Objects are everywhere.&lt;/p&gt;
&lt;p&gt;Weirdly, some people can't see them. I guess they live in a rarified,
HP Lovecraftian world of pure action inhabited by amorphous things
that can't be properly called &amp;quot;beings&amp;quot; but rather &amp;quot;doings&amp;quot; because
they're pure activity with no existence.&lt;/p&gt;
&lt;p&gt;Read
&amp;quot;&lt;a class="reference external" href="http://www.hplovecraft.com/writings/texts/fiction/hy.asp"&gt;Hypnos&lt;/a&gt;&amp;quot;.
&amp;quot;They were sensations, yet within them lay unbelievable elements of
time and space—things which at bottom possess no distinct and
definite existence.&amp;quot;&lt;/p&gt;
&lt;p&gt;Got this comment the other day.&lt;/p&gt;
&lt;blockquote&gt;
... doing procedural code correctly when you don't want to be
bothered w/ OO is a separate and big enough topic that warrants
its own book or monograph.&lt;/blockquote&gt;
&lt;p&gt;I guess that means that objects, and the reality that they model, are
a &amp;quot;bother&amp;quot;—a pitfall to be avoided—a cost with no benefit. This is
not the first time I've heard this, and—like Lovecraft—it leads me to
wonder how such a rich and weird phantasy world gets constructed.&lt;/p&gt;
&lt;p&gt;I had a project manager exclaim &amp;quot;You don't need more than seven or
eight objects to write any application.&amp;quot; I didn't press the person on
that point. I assumed that they were talking about classes (not
objects) and, further, had conflated class with &amp;quot;elaborate
module-like library packed with amazing features&amp;quot;. Or maybe they
conflated class with package. Or something. It's hard for me to dig
into misapprehensions and false assumptions without being rude.&lt;/p&gt;
&lt;p&gt;There are a surprising number of misapprehensions. I'm occasionally
tempted to turn &lt;a class="reference external" href="http://www.nltk.org/"&gt;NTLK&lt;/a&gt; loose on all
questions tagged &amp;quot;Python&amp;quot; on Stack Overflow. With some patient
reading, I think I could develop a taxonomy of OO confusion. However,
let's just focus on this comment.&lt;/p&gt;
&lt;div class="section" id="the-bother-factor"&gt;
&lt;h2&gt;The Bother Factor&lt;/h2&gt;
&lt;p&gt;Why is OO a &amp;quot;bother&amp;quot;?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I've been told that OO programming is &lt;em&gt;different&lt;/em&gt;. Different from
what? From procedural programming without objects, I guess.&lt;/li&gt;
&lt;li&gt;I'm been told that some problems are a better fit for OO, and some
problems aren't a good fit for OO. This is hard to parse because
it makes the more profound claim that some problems weirdly don't
involve any &amp;quot;objects&amp;quot; just pure actions.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch"&gt;Object-Relational Impedance Mismatch&lt;/a&gt;
problem somehow indicts object-oriented programming as unsuitable
when there's a relational database involved.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's look at some of these in a little depth to see the
underlying fallacies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="procedural-is-more-fundamental"&gt;
&lt;h2&gt;Procedural Is More Fundamental&lt;/h2&gt;
&lt;p&gt;This is subtle and pernicious. An OO language contains within it a
procedural language. Because of this, we can use Java, C++ or Python
to write Fortran-like (or VB-like) crapola code. It's possible to
write everything in a single, massive, static class with piles of
random global variables, long lists of disorganized methods, and
&amp;quot;adaptation via block comment&amp;quot; buffoonery.&lt;/p&gt;
&lt;p&gt;Some folks object to characterizing procedural programming as random,
disorganized or buffoonery. They tell me that a purely procedural can
be neat and well organized with tidy, focused modules that have
narrowly-defined responsibilities, no global variables and clever
techniques like pointer-to-function to support adaptation.&lt;/p&gt;
&lt;p&gt;Wait. The idea of tidy, focused modules with narrowly-defined
responsibilities is exactly what a class is.&lt;/p&gt;
&lt;p&gt;This is important. &lt;strong&gt;All good procedural programming is isomorphic to
object-oriented programming minus the class definitions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Procedural isn't &amp;quot;fundamental&amp;quot;. It's just a &amp;quot;fragmentary&amp;quot;. Procedural
programming is a subset of object-oriented programming. Not a
foundation. We can, for example, do functional-style object-oriented
programming by using immutable objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-problems-aren-t-a-good-fit"&gt;
&lt;h2&gt;Some Problems Aren't A Good Fit&lt;/h2&gt;
&lt;p&gt;Claiming that there are problems which don't fit the object-oriented
paradigm is false. Or such a claim hearkens to a more elaborate
ontology in which existence somehow doesn't matter.&lt;/p&gt;
&lt;p&gt;This question is typical: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/178262/what-should-be-oo-and-what-shouldnt"&gt;What should be OO and what
shouldn't?&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;When a program &amp;quot;runs&amp;quot; or &amp;quot;executes&amp;quot; there is state change. In a lazy
functional world, state change is characterized by the creation and
destruction of immutable objects: the new &amp;quot;4&amp;quot; that's created by
&amp;quot;2+2&amp;quot;.&lt;/p&gt;
&lt;p&gt;In order for there to be state, there must be an object that has a
state of being. Objects are inherent in doing any computing of any
kind.&lt;/p&gt;
&lt;p&gt;Some folks like to lift up stored procedures or shell scripts as
&amp;quot;important&amp;quot; examples of non-OO programming. Mostly, these just show
that a non-OO language can persist for a long time because clever
programmers can work around a lot of limitations. (&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Turing_completeness"&gt;Turing
Completeness&lt;/a&gt; is
a necessary pre-condition; not a desirable feature set.)&lt;/p&gt;
&lt;p&gt;[And yes, I've written multiple-thousand line shell scripts so
customers can avoid paying a license fee for a proper compiler. Just
because it &lt;em&gt;can&lt;/em&gt; be done doesn't mean it &lt;em&gt;should&lt;/em&gt; be done.]&lt;/p&gt;
&lt;p&gt;This is important. &lt;strong&gt;All Programming Involves Objects&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are really just two &amp;quot;paradigm&amp;quot; decisions. Does the problem
involve &lt;em&gt;new&lt;/em&gt; class definitions or can it be done using built-in
classes? Does the problem involve mutable objects or immutable
objects?&lt;/p&gt;
&lt;p&gt;Software that uses only built-in classes is termed &amp;quot;procedural&amp;quot;.
Software that uses only immutable objects is termed &amp;quot;functional&amp;quot;.
Software that uses mutable objects is mistakenly termed
&amp;quot;object-oriented&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="object-relational-mismatch"&gt;
&lt;h2&gt;Object-Relational Mismatch&lt;/h2&gt;
&lt;p&gt;This isn't really very interesting, no matter how many times people
like to flog it. Use an ORM. Move on.&lt;/p&gt;
&lt;p&gt;Further, it's important to recognize that normalization, foreign
keys, cascading deletes and other malarky are hacks imposed on us by
several relational database limitations. These are not &lt;em&gt;essential&lt;/em&gt;
parts of any problem.&lt;/p&gt;
&lt;p&gt;I don't know how many times I've had to answer the &amp;quot;how do I do
foreign keys in Java/C++/Python?&amp;quot; question. The answer is always the
same: foreign keys are a hack-around because there are no proper
object references in a relational database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-left"&gt;
&lt;h2&gt;What's Left?&lt;/h2&gt;
&lt;p&gt;In spite of the obvious logic that OO is central, there is always a
residual &amp;quot;It's a bother&amp;quot; sense from folks who's first language was
not an OO language.&lt;/p&gt;
&lt;p&gt;As far as I can tell, the &amp;quot;bother&amp;quot; stems from simple ignorance of
what's &lt;em&gt;really&lt;/em&gt; going on. Many programmers can't articulate any
design principles. Yet, they tend to follow some principles rather
closely. Ask them what they're doing. Read their code. Almost
everyone who codes has some set of fundamental principles. (The few
exceptions are people who seem to write code more-or-less randomly
and still manage to arrive at something that appeared to &amp;quot;work&amp;quot;;
these people do exist and are very scary.)&lt;/p&gt;
&lt;p&gt;Many programmers don't follow &lt;strong&gt;all&lt;/strong&gt; of the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Solid_(object-oriented_design)"&gt;SOLID
Principles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many programmers follow the SOLID principles using different
nomenclature. The SOLID initials and acronyms are just one one goofy
terminology. There are more principles than these, and the principles
can have other names.&lt;/p&gt;
&lt;p&gt;What's important is that (except for rare exceptions) &lt;strong&gt;all&lt;/strong&gt;
programmers follow some of the SOLID principles. Some follow all of
them. Some follow numerous additional principles beyond these. Some
give their principles other names.&lt;/p&gt;
&lt;p&gt;The folks who claim OO programming is a &amp;quot;bother&amp;quot; just don't happen to
recognize that they're already following some of the SOLID principles
and actually doing OO programming with built-in classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="doing-procedural-programming-correctly"&gt;
&lt;h2&gt;Doing Procedural Programming Correctly&lt;/h2&gt;
&lt;p&gt;Bottom Line: &amp;quot;doing procedural code correctly&amp;quot; is simply OO
programming using only built-in classes.&lt;/p&gt;
&lt;p&gt;It's not a &amp;quot;big&amp;quot; topic. It's entirely an exercise in learning how to
apply someone else's nomenclature to one's existing principles.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="procedural programming"></category><category term="object-oriented design"></category></entry><entry><title>The curse of procedural design</title><link href="https://slott56.github.io/2011_05_03-the_curse_of_procedural_design.html" rel="alternate"></link><published>2011-05-03T08:00:00-04:00</published><updated>2011-05-03T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-05-03:/2011_05_03-the_curse_of_procedural_design.html</id><summary type="html">&lt;p&gt;After reverse engineering procedural code in C, VB or even Python, I'm
finding that procedural programming inevitably leads to bad, bad
code-rot.&lt;/p&gt;
&lt;p&gt;Consider some of the common design patterns.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategy&lt;/strong&gt;. Confronted with alternative strategy choices, a purely
procedural code solution is either&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If-statements everywhere the strategy is involved.&lt;/li&gt;
&lt;li&gt;Block comments …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;After reverse engineering procedural code in C, VB or even Python, I'm
finding that procedural programming inevitably leads to bad, bad
code-rot.&lt;/p&gt;
&lt;p&gt;Consider some of the common design patterns.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategy&lt;/strong&gt;. Confronted with alternative strategy choices, a purely
procedural code solution is either&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If-statements everywhere the strategy is involved.&lt;/li&gt;
&lt;li&gt;Block comments. (Pre-processor #if statements are the logical
equivalent of block comments plus a tool to move them around just
prior to compilation.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These lack flexibility and seem to devolve into a quagmire of
mystery. The if-statements often become tangled and complex. More
importantly, some strategy choices — which are unused — may not be
maintained at all. Of course, the block comments are never
maintained.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command&lt;/strong&gt;. Often a command design requires a &amp;quot;code&amp;quot; or &amp;quot;label&amp;quot; and
a big-old sequential switch (BOSS™) statement to select among the
procedures which implement the various commands. Once &amp;quot;composite&amp;quot;
commands are introduced, this devolves into nonsense. Ideally, it's a
simple recursion, where a composite command simply invokes the
sub-commands. However, folks get nervous about recursion and try to
write weird loops.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt;. A state design always seems to involve labels or codes for
the state names and a slightly different big-old-state-switch (BOSS™,
no accident that this is the same acronym) to sort out the variant
behaviors in the distinct states. This shouldn't become too
confusing. After all, Turing machines and other mathematical
abstractions give us a strong hint on how we should proceed.&lt;/p&gt;
&lt;p&gt;The problem with stateful procedural programming is that the state
changes can be hidden everywhere. In the Really Bad Languages,
variables can change values without an assignment statement! In the
Not Bad Languages, we can track down the various assignment
statements and try to reason out the state changes. Procedural
code—without a lot of adult supervision—never seems to encapsulate
state change with the the same in-your-face clarity that OO programs
do.&lt;/p&gt;
&lt;div class="section" id="i-could-go-on"&gt;
&lt;h2&gt;I Could Go On&lt;/h2&gt;
&lt;p&gt;The point is this. While procedural programming &lt;em&gt;could&lt;/em&gt; be done well,
there appear to be a lot of obstacles inherent in the paradigm.&lt;/p&gt;
&lt;p&gt;The best procedural programming I've seen has always been very
object-oriented. Each procedure or function had a distinct data
structure it worked with; they were all closely related by virtue of
naming or file structure; much like a class definition.&lt;/p&gt;
&lt;p&gt;I'm starting to wonder if my Building Skills books are taking the
right approach. I start with the procedural aspects of Python. I'm
beginning to feel that this may be a disservice to the n00bz.&lt;/p&gt;
&lt;p&gt;Perhaps it's better to swap the order of the sections and start with
the various Pythonic data structures and introduce the various
statements sort of &amp;quot;casually&amp;quot; as part of demonstrating how a data
structure is supposed to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-think-the-procedural-approach-still-is-the-best"&gt;
&lt;h2&gt;I think the procedural approach still is the best ...&lt;/h2&gt;
&lt;p&gt;Patchwork&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-04 16:55:11.543000-04:00&lt;/p&gt;
&lt;p&gt;I think the procedural approach still is the best way to start teaching
how to program. Although, it is not the best abstraction when the
application gets some non-trivial complexity. Then, some encapsulation
is necessary.&lt;/p&gt;
&lt;p&gt;In other words, encapsulation is an abstraction that helps to handle
complexity, but it is not the first concept n00bz must learn.&lt;/p&gt;
&lt;p&gt;I don't agree that starting with a data centric view is better than a
procedural one. Any structured data is also an arrangement to solve some
kind of problem and it is not necessary to solve initial programming
concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-perhaps-it-39-s-better-to-swap-the-order-of"&gt;
&lt;h2&gt;&amp;amp;quot;Perhaps it&amp;amp;#39;s better to swap the order of...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-03 21:27:49.097000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Perhaps it's better to swap the order of the sections and start with
the various Pythonic data structures and introduce the various
statements sort of &amp;quot;casually&amp;quot; as part of demonstrating how a data
structure is supposed to be used.&amp;quot;&lt;/p&gt;
&lt;p&gt;Lets step back and explicitly state what the goals are.&lt;/p&gt;
&lt;p&gt;Lets step back and remember the clue absorption rate of the student.
Lets step back and not try to do too much and end up loosing focus.
How about a 3rd book entitled something like doing procedural code
correctly when you don't want to be bothered w/ OO?&lt;/p&gt;
&lt;p&gt;I am currently working my way through your book &amp;quot;Building Skills in
Python&amp;quot; and loving it. It follows the &amp;quot;expected&amp;quot; standard procedural
language progression. Heck even Oracle's PL/SQL manual does it.
&lt;a class="reference external" href="http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14261/toc.htm"&gt;http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14261/toc.htm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-intro-to-java-programming-class-i-took-many-mo"&gt;
&lt;h2&gt;The intro to Java programming class I took many mo...&lt;/h2&gt;
&lt;p&gt;eryksun&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-03 14:24:00.410000-04:00&lt;/p&gt;
&lt;p&gt;The intro to Java programming class I took many moons ago emphasized
object oriented design and tail recursive algorithms. Java for/while
loops weren't introduced until near the end of the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-also-think-starting-with-procedural-design-is-st"&gt;
&lt;h2&gt;I also think starting with procedural design is st...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-05 07:36:58.093000-04:00&lt;/p&gt;
&lt;p&gt;I also think starting with procedural design is still the right thing to
do. However, part of the point of OO is to make it clear that procedural
programming *doesn't scale well*.&lt;/p&gt;
&lt;p&gt;At the small scale, OO is overkill (even functions are overkill at a
sufficiently small scale).&lt;/p&gt;
&lt;p&gt;So Python starts with scripts: Top to bottom evaluation of the main
script.&lt;/p&gt;
&lt;p&gt;Then we add conditional execution and repetition (if statements and
loops), but still no distinction between &amp;quot;definition time&amp;quot; and
&amp;quot;execution time&amp;quot;
Then we start to modularise blocks of execution as functions and
introduce the idea that algorithms can be stored for use in multiple
places so that &amp;quot;definition time&amp;quot; and &amp;quot;execution time&amp;quot; may be separated.
Then we start to modularise data and operations on that data as classes.
Then we start to modularise collections of classes (and potentially data
and standalone functions) as separate modules (and now we can optionally
introduce the idea of &amp;quot;compilation time&amp;quot; as separate from both
&amp;quot;definition time&amp;quot; and &amp;quot;execution time&amp;quot;).&lt;/p&gt;
&lt;p&gt;Then modules may be bundled into packages, and packages into frameworks
and applications (introducing &amp;quot;build time&amp;quot; and &amp;quot;installation time&amp;quot; as
two new potentially important phases in program execution).&lt;/p&gt;
&lt;p&gt;Part of the art of software design is learning how to choose an
appropriate level of complexity for the problem at hand.&lt;/p&gt;
&lt;p&gt;In my opinion, the *reason* &amp;quot;scripting&amp;quot; languages are easier to learn
for many people is that they permit you to start immediately with a main
module that &amp;quot;does things&amp;quot;, allowing the introduction of the &amp;quot;function&amp;quot;
and &amp;quot;class&amp;quot; abstractions to be deferred until later.&lt;/p&gt;
&lt;p&gt;Starting with C and Java, on the other hand, always requires instructors
to say &amp;quot;Oh, don't worry about that boilerplate, you'll learn what it
means later&amp;quot; before starting in with the explanation of what can go
inside a main() function or method. The &amp;quot;compilation time&amp;quot; vs &amp;quot;execution
time&amp;quot; distinction also has to be introduced immediately, rather than
being deferred until the introduction of file level modularisation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-a-related-blog-also-posted-by-steve-lott-chec"&gt;
&lt;h2&gt;For a related blog also posted by Steve Lott, chec...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-03 21:33:20.399000-04:00&lt;/p&gt;
&lt;p&gt;For a related blog also posted by Steve Lott, check out
&lt;a class="reference external" href="https://slott56.github.io/2010_12_27-the_anti_if_campaign.html"&gt;&amp;quot;The Anti-IF Campaign&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="procedural programming"></category><category term="object-oriented design"></category></entry><entry><title>Language, Tools, Chickens, Eggs, Java and Python</title><link href="https://slott56.github.io/2011_04_30-language_tools_chickens_eggs_java_and_python.html" rel="alternate"></link><published>2011-04-30T08:00:00-04:00</published><updated>2011-04-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-04-30:/2011_04_30-language_tools_chickens_eggs_java_and_python.html</id><summary type="html">&lt;p&gt;Too much of programming is intimately tied up with the tools to support
the development of the software.&lt;/p&gt;
&lt;p&gt;Example 1. I was told -- with absolute and fierce conviction -- that
VB may suck as a language, but Visual Studio more than makes up for
the obvious problems. For some people, &lt;strong&gt;Tools …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Too much of programming is intimately tied up with the tools to support
the development of the software.&lt;/p&gt;
&lt;p&gt;Example 1. I was told -- with absolute and fierce conviction -- that
VB may suck as a language, but Visual Studio more than makes up for
the obvious problems. For some people, &lt;strong&gt;Tools Trump Language&lt;/strong&gt;.
Sadly, I've also had customers with ancient code they could no longer
compile or maintain because the tools were out of support.&lt;/p&gt;
&lt;p&gt;On Stack Overflow, you can read questions like this: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/81584/what-ide-to-use-for-python"&gt;What IDE to
use for
Python?&lt;/a&gt;&amp;quot;.
In spite of this question's immense popularity, it gets re-asked all
the time. Search for &amp;quot;Python IDE&amp;quot; to see endless duplicates. One of
the most common duplicate forms of this question asks (or demands)
code completion. As if there are folks who cannot write code without
code completion.&lt;/p&gt;
&lt;div class="section" id="chickens-and-eggs"&gt;
&lt;h2&gt;Chickens and Eggs&lt;/h2&gt;
&lt;p&gt;The issue with sophisticated IDE's (like Eclipse, NetBeans, and even
Komodo) is that you have to learn the tools before learning the
language. Until you know something about the language, the tools, of
course, are useless. Worse, Eclipse is for &amp;quot;enterprise&amp;quot; applications
and is so fat with bells (and whistles) that it's hard to determine
what to use and what it means.&lt;/p&gt;
&lt;p&gt;So the tool is a prerequisite for the language. But the language is a
prerequisite for the tool.&lt;/p&gt;
&lt;p&gt;How to cut the Gordian Knot?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-principles"&gt;
&lt;h2&gt;First Principles&lt;/h2&gt;
&lt;p&gt;Irrespective of the &amp;quot;Visual Studio makes VB not suck&amp;quot; crowd, language
comes first -- and last -- and fills all the spaces in between.&lt;/p&gt;
&lt;p&gt;Language is everything. Software is merely encoded knowledge. The
language of that encoding is how we determine meaning; how we argue
about correctness, adaptability, maintainability and security. Tools
don't endure -- they come and go -- but the language remains.&lt;/p&gt;
&lt;p&gt;The only thing more important than the language is the data itself.
But that's another rant.&lt;/p&gt;
&lt;p&gt;Proof, of course, is available everyone except in VB circles. For
non-proprietary languages (Java, Python, etc., etc.) there are a
large number of competing tools. One language many tools. Take the
hint. Language is important.&lt;/p&gt;
&lt;p&gt;Yes, some tools are so flexible, they cover several languages. But
there's no universal tool any more than there's a universal language.
And the bias is clearly very, very many tools for a given language
and only a few languages for a given tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-start"&gt;
&lt;h2&gt;How To Start&lt;/h2&gt;
&lt;p&gt;Language comes first.&lt;/p&gt;
&lt;p&gt;For Python, that's easy. Run Python, type code at the &amp;gt;&amp;gt;&amp;gt; prompt, and
you're learning. Python comes with IDLE which is a minimalist IDE. It
will get anyone started. Later, they can try other IDE's.&lt;/p&gt;
&lt;p&gt;For Java, however, that's not that easy. It isn't however, impossible
to get started. It's just challenging.&lt;/p&gt;
&lt;p&gt;Option 1 -- Bare Knuckles. It's possible to edit text and run the
javac compiler to learn a great deal of Java without an IDE. It's not
a bad idea. It will get complex to manage projects with more than a
few files.&lt;/p&gt;
&lt;p&gt;Eventually that's what &lt;a class="reference external" href="http://ant.apache.org/"&gt;Ant&lt;/a&gt;,
&lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; and
&lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt; are for. But that's not a good
place to start. Again, the tools don't make sense until you start
writing things big enough that the tools actually help.&lt;/p&gt;
&lt;p&gt;Option 2 -- Succession of IDE's. It's probably best to start with a
very simple IDE for Java. Something like &lt;a class="reference external" href="http://www.activestate.com/komodo-edit"&gt;Komodo
Edit&lt;/a&gt;,
&lt;a class="reference external" href="http://macromates.com/"&gt;TextMate&lt;/a&gt; or
&lt;a class="reference external" href="http://www.barebones.com/products/bbedit/index.html"&gt;BBEdit&lt;/a&gt;.
There are a lot of choices, but the idea is to find something little
more than a text editor with a few tools. I've used these and like
their relative simplicity.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.javawide.org/index.php/Main_Page"&gt;JavaWIDE&lt;/a&gt;
toolset might be helpful. I haven't used it, but some folks suggest
that it simplifies the language learning. Later a &amp;quot;regular&amp;quot; desktop
IDE can be used.&lt;/p&gt;
&lt;p&gt;Later, one can move to &lt;a class="reference external" href="http://netbeans.org/"&gt;NetBeans&lt;/a&gt; or
&lt;a class="reference external" href="http://www.eclipse.org/"&gt;Eclipse&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="classrooms-and-autodidacts"&gt;
&lt;h2&gt;Classrooms and Autodidacts&lt;/h2&gt;
&lt;p&gt;In the classroom, it's easy to demonstrate NetBeans and answer
questions.&lt;/p&gt;
&lt;p&gt;For auto-didacts, however, choosing the wrong tool leads to endless
confusion. The chicken and egg issue isn't clarified by wasting time
trying to install and use a tool that's too sophisticated for a n00b.&lt;/p&gt;
&lt;p&gt;N00b autodidacts really need to start with a simple text-editor. They
need to use `javac` to compile and `java` to run the resulting
class. For the first week or two, this will do. Once past the
fundamentals, however, IDE selection can start to make sense. A
BBEdit/TextMate/Komodo thing should be next. This is good for --
perhaps a year or more. Then, when doing &amp;quot;real&amp;quot; programming, a
heavier-weight tool makes sense.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Programming Languages"></category><category term="ide"></category><category term="tools"></category></entry><entry><title>StackOverflow Meetup</title><link href="https://slott56.github.io/2011_03_31-stackoverflow_meetup.html" rel="alternate"></link><published>2011-03-31T08:59:00-04:00</published><updated>2011-03-31T08:59:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-03-31:/2011_03_31-stackoverflow_meetup.html</id><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://www.meetup.com/stackoverflow/Hampton-VA/"&gt;http://www.meetup.com/stackoverflow/Hampton-VA/&lt;/a&gt; for information on
next week's Stack Exchange meetup.&lt;/p&gt;
&lt;p&gt;For other events near you, see the
&lt;a class="reference external" href="http://www.meetup.com/stackoverflow/"&gt;Meetup&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;I'll be wearing my &amp;quot;official&amp;quot; Stack Overflow shirt. I'll try to grab
a seat by the door, also, to be easy to find.&lt;/p&gt;
&lt;p&gt;#SOMeetup&lt;/p&gt;
</content><category term="Technologies"></category><category term="#SOMeetup"></category><category term="meetup"></category><category term="stackoverflow"></category></entry><entry><title>Code Deletion</title><link href="https://slott56.github.io/2011_03_30-code_deletion.html" rel="alternate"></link><published>2011-03-30T16:55:00-04:00</published><updated>2011-03-30T16:55:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-03-30:/2011_03_30-code_deletion.html</id><summary type="html">&lt;p&gt;A joyous milestone today. Removed much of our
pre-&lt;a class="reference external" href="https://bitbucket.org/jespern/django-piston/wiki/Home"&gt;Piston&lt;/a&gt;
RESTful web services code.&lt;/p&gt;
&lt;p&gt;We started with the &lt;a class="reference external" href="http://code.google.com/p/django-rest-interface/"&gt;Django-REST
Interface&lt;/a&gt;. While
nice, it imposed a number of restrictions that were onerous. In
particular, we have a lot of non-model responses. They're model-like
data that we serialize to be compatible with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A joyous milestone today. Removed much of our
pre-&lt;a class="reference external" href="https://bitbucket.org/jespern/django-piston/wiki/Home"&gt;Piston&lt;/a&gt;
RESTful web services code.&lt;/p&gt;
&lt;p&gt;We started with the &lt;a class="reference external" href="http://code.google.com/p/django-rest-interface/"&gt;Django-REST
Interface&lt;/a&gt;. While
nice, it imposed a number of restrictions that were onerous. In
particular, we have a lot of non-model responses. They're model-like
data that we serialize to be compatible with Django, but without
actually being first-class Django Model objects.&lt;/p&gt;
&lt;p&gt;In order to provide a generic, but detailed &amp;quot;status&amp;quot; message, we
actually defined a Model that we never instantiated in the database.
We'd build (but not save) instances, just to make it easy to
serialize them.&lt;/p&gt;
&lt;p&gt;What a hack.&lt;/p&gt;
&lt;p&gt;To further complicate things, I failed to really understand the way
that the alternate user authentication sources worked, and how much
of the Django authentication process was better handled through
middleware. Failing to fully understand that, I wrote too much code.
We tinkered with incoming requests to extract HTTP Authorization
headers. We tinkered to handle Amazon-style key/signature values in
the GET or POST. And we tinkered to handle OpenAM authentication
cookies.&lt;/p&gt;
&lt;p&gt;Too much code.&lt;/p&gt;
&lt;p&gt;And it gets worse. I tried to use
&lt;a class="reference external" href="http://docs.python.org/library/urllib2.html"&gt;urllib2&lt;/a&gt; for a wide
variety of RESTful requests. This means more than GET and POST. That
was a mistake.
&lt;a class="reference external" href="http://docs.python.org/library/httplib.html"&gt;httplib&lt;/a&gt; works out a
little better for doing RESTful web services requests. If you don't
have a lot of complex proxy server handling. And if you don't have a
lot of complex authentication.&lt;/p&gt;
&lt;p&gt;In our case, the urllib2 was handling the 401 retries, cookies and
also had some extra handler code to treat a 201 Created response as a
non-error (by default, urrlib2 gagged on 201 Created). Also, urllib2
appears to be lazy and doesn't send everything or close the sockets
in the event of a problem. This makes unit testing just a bit more
complex than necessary. Also, urllib2 required a couple of monkey
patches to let us use PUT and DELETE without problems.&lt;/p&gt;
&lt;p&gt;Needless Complexity.&lt;/p&gt;
&lt;p&gt;It turns out that handling a 401 retry in httplib isn't really all
that difficult. That ended the use case for urllib2.&lt;/p&gt;
&lt;p&gt;What's nice is&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Being able to unmake some bad decisions.&lt;/li&gt;
&lt;li&gt;Rerunning the entire unit test suite to ferret out the remaining concealed dependencies.&lt;/li&gt;
&lt;li&gt;Removing hack-arounds, volume and complexity.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We still have a lot of work to make full use of Piston. That will
lead to removing yet more code. It will, however, also change the
API's slightly because the &amp;quot;.../xml/...&amp;quot; URL's will have a
different format and we'll introduce &amp;quot;.../django/...&amp;quot; URL's which
will have the current format.&lt;/p&gt;
</content><category term="Technologies"></category><category term="refactoring"></category><category term="architecture"></category></entry><entry><title>Where is Python Used? (Update)</title><link href="https://slott56.github.io/2011_03_30-where_is_python_used_update.html" rel="alternate"></link><published>2011-03-30T14:25:00-04:00</published><updated>2011-03-30T14:25:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-03-30:/2011_03_30-where_is_python_used_update.html</id><summary type="html">&lt;p&gt;This is a fair-to-partly silly question that shows up on places like
StackOverflow once in a while.&lt;/p&gt;
&lt;p&gt;Python is used widely and pretty heavily.&lt;/p&gt;
&lt;p&gt;It's a built-in feature to many operating systems in common use. The
exception, of course, is Windows.&lt;/p&gt;
&lt;p&gt;I just found out -- the hard way -- that Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a fair-to-partly silly question that shows up on places like
StackOverflow once in a while.&lt;/p&gt;
&lt;p&gt;Python is used widely and pretty heavily.&lt;/p&gt;
&lt;p&gt;It's a built-in feature to many operating systems in common use. The
exception, of course, is Windows.&lt;/p&gt;
&lt;p&gt;I just found out -- the hard way -- that Python 2.6 is an integral
part of &lt;a class="reference external" href="http://www.apple.com/ilife/"&gt;Apple's iLife&lt;/a&gt; suite of
products.&lt;/p&gt;
&lt;p&gt;Important safety tip for Mac OS X users. System.Libary.Frameworks
should not be touched.&lt;/p&gt;
&lt;p&gt;Also, it helps to get used to the idea of typing python3 on the
command-line. Further, it helps to skip Python 3.1 and go straight to
Python 3.2.&lt;/p&gt;
&lt;p&gt;Python 3.2 has
&lt;a class="reference external" href="http://docs.python.org/py3k/library/argparse.html"&gt;argparse&lt;/a&gt; and
the new dictionary-based configuration of
&lt;a class="reference external" href="http://docs.python.org/py3k/library/logging.config.html#logging.config.dictConfig"&gt;logging&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-worked-on-a-pyqt-interface-to-a-database-with-a"&gt;
&lt;h2&gt;I worked on a PyQT interface to a database with a ...&lt;/h2&gt;
&lt;p&gt;James Thiele&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-29 13:40:18.667000-04:00&lt;/p&gt;
&lt;p&gt;I worked on a PyQT interface to a database with a Python API used by
thousands of engineers around the world working on a large new
commercial airliner. I won't say where I worked but Airbus and Boeing
are the only two players in the large commrcial airliner market. :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-do-you-recommend-skipping-python-3-1"&gt;
&lt;h2&gt;Why do you recommend skipping Python 3.1?&lt;/h2&gt;
&lt;p&gt;offby1&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-29 22:29:46.025000-04:00&lt;/p&gt;
&lt;p&gt;Why do you recommend skipping Python 3.1?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sometimes-i-feel-like-python-is-like-cobol-in-that"&gt;
&lt;h2&gt;Sometimes I feel like Python is like COBOL in that...&lt;/h2&gt;
&lt;p&gt;Eric Wilson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-04-27 21:23:20.828000-04:00&lt;/p&gt;
&lt;p&gt;Sometimes I feel like Python is like COBOL in that it is &amp;quot;Everywhere and
Nowhere.&amp;quot;
One thing that I like about Python is that it is being used for about
everything that one could use a programming language to do.
But somehow, despite this, I don't know anyone that gets paid to program
in Python. Even when I go to the the local Python user group, I mainly
meet people that spend their days programming in Java, C#, or even Ruby.
Anyway, all of this is to agree with your assessment, that the question
is partly fair, and partly silly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-is-not-just-a-languageit-39-s-a-developme"&gt;
&lt;h2&gt;Python Is Not Just a Language—It&amp;amp;#39;s a Developme...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-15 06:50:47.347000-04:00&lt;/p&gt;
&lt;p&gt;Python Is Not Just a Language—It's a Development Platform: An Interview
with Doug Hellmann
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1710396&amp;amp;ns=23111&amp;amp;WT.mc_id=2011-05-15_NL_InformITContent"&gt;http://www.informit.com/articles/article.aspx?p=1710396&amp;amp;ns=23111&amp;amp;WT.mc_id=2011-05-15_NL_InformITContent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="macosx"></category><category term="#python"></category></entry><entry><title>Improving the "Velocity" of IT</title><link href="https://slott56.github.io/2011_03_15-improving_the_velocity_of_it.html" rel="alternate"></link><published>2011-03-15T15:44:00-04:00</published><updated>2011-03-15T15:44:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-03-15:/2011_03_15-improving_the_velocity_of_it.html</id><summary type="html">&lt;p&gt;Check this out: &amp;quot;&lt;a class="reference external" href="http://www.informationweek.com/news/global-cio/interviews/showArticle.jhtml?articleID=229218781"&gt;IT Is Too Darn
Slow&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This article is packed with helpful advice on how to improve
&amp;quot;velocity&amp;quot; and the pace of innovation.&lt;/p&gt;
&lt;p&gt;Good quotes: &amp;quot;Once IT decides to focus on speed, two obstacles get in
the way: security and governance.&amp;quot; This is important. Manage security
without it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check this out: &amp;quot;&lt;a class="reference external" href="http://www.informationweek.com/news/global-cio/interviews/showArticle.jhtml?articleID=229218781"&gt;IT Is Too Darn
Slow&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This article is packed with helpful advice on how to improve
&amp;quot;velocity&amp;quot; and the pace of innovation.&lt;/p&gt;
&lt;p&gt;Good quotes: &amp;quot;Once IT decides to focus on speed, two obstacles get in
the way: security and governance.&amp;quot; This is important. Manage security
without it becoming an impediment.&lt;/p&gt;
&lt;p&gt;One of the most important things not mentioned here is the idea that
internal security must be a simple, cheap commodity. A identity
manager and SSO framework needs to be standard, available, and
well-understood. Each project shouldn't involve head-scratching and
deep thinking about security. Like an OS and a file system, security
infrastructure should be a given.&lt;/p&gt;
&lt;p&gt;Another good quote: &amp;quot;IT can't set priorities for 10 projects spread
over the next two years because, once projects one, two, and three
are done, that will change what would have been four, five, and six.&amp;quot;&lt;/p&gt;
&lt;p&gt;What isn't provided is the a way to handle the accounting practices
that always seem to take IT hostage. The idea of &amp;quot;capital&amp;quot; vs.
&amp;quot;expense&amp;quot; can serve as a weird artificial boundary on innovative
projects. Lots of innovation gets chopped off when the &amp;quot;capital&amp;quot;
budget is spent, and we switch over to &amp;quot;expense&amp;quot; where we can't
invent anything new. It's the same people. Yet, the money is
&amp;quot;different&amp;quot;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="small-word-omission-what-isn-t-prov"&gt;
&lt;h2&gt;Small word omission: What isn't prov...&lt;/h2&gt;
&lt;p&gt;Deech Vogt&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-14 18:54:15.216000-04:00&lt;/p&gt;
&lt;p&gt;S.Lott,
Small word omission:
What isn't provided is the a way to handle the accounting practices
^that^ can take IT hostage.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>XBox Live -- Can't Unsubscribe</title><link href="https://slott56.github.io/2011_03_15-xbox_live_cant_unsubscribe.html" rel="alternate"></link><published>2011-03-15T08:00:00-04:00</published><updated>2011-03-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-03-15:/2011_03_15-xbox_live_cant_unsubscribe.html</id><summary type="html">&lt;p&gt;Here's a lack of a use case for you.&lt;/p&gt;
&lt;p&gt;Someone -- fraudulently -- used my email address to subscribe to XBox
live. I cannot remedy this. Apparently, neither can Microsoft.&lt;/p&gt;
&lt;p&gt;I get spam from XBox. I change my passwords all over the place.&lt;/p&gt;
&lt;p&gt;I go to the XBox live web site to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a lack of a use case for you.&lt;/p&gt;
&lt;p&gt;Someone -- fraudulently -- used my email address to subscribe to XBox
live. I cannot remedy this. Apparently, neither can Microsoft.&lt;/p&gt;
&lt;p&gt;I get spam from XBox. I change my passwords all over the place.&lt;/p&gt;
&lt;p&gt;I go to the XBox live web site to cancel this fraudulent account. I
can't. There's no place to do that. I cannot cancel the account
because it can only be done through the XBox console. Except -- of
course -- in the case of fraud, the email user doesn't have a
console.&lt;/p&gt;
&lt;p&gt;So I call the help desk. &amp;quot;Please remove my email from this account
that fraudulently uses it.&amp;quot; They can't. Absolutely can't. All I can
do is route &lt;tt class="docutils literal"&gt;xbox.com&lt;/tt&gt; email into the spam folder. That's it.&lt;/p&gt;
&lt;p&gt;Nice help desk agent. Doing the best she can. But, she cannot find
the email address and disconnect me from spam or XBox or XBox live.
Someone at the console needs to do that.&lt;/p&gt;
&lt;p&gt;How do we contact the person at the XBox Console? Can't send them
email -- it goes to me!&lt;/p&gt;
&lt;p&gt;Somehow, someone at Microsoft has to call &amp;quot;beezyNdetroit&amp;quot; on the
phone (I guess) and break the bad news to them that they're
fraudulently using one of my email addresses for their XBox spam.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="in-germany-you-have-the-right-to-demand-that-your"&gt;
&lt;h2&gt;In germany you have the right to demand that your ...&lt;/h2&gt;
&lt;p&gt;Patrick Cornelissen&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-16 11:35:39.559000-04:00&lt;/p&gt;
&lt;p&gt;In germany you have the right to demand that your data is removed from a
service provider if you don't want to make business with the provider
anymore. So I don't believe that they can't do that. I'd say, they just
want to keep up the high number of registered accounts, so they can
appear bigger than they are...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="use case"></category></entry><entry><title>To Robert Fulton, Regarding the "Steam Boat"</title><link href="https://slott56.github.io/2011_03_10-to_robert_fulton_regarding_the_steam_boat.html" rel="alternate"></link><published>2011-03-10T08:00:00-05:00</published><updated>2011-03-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-03-10:/2011_03_10-to_robert_fulton_regarding_the_steam_boat.html</id><summary type="html">&lt;p&gt;A quote&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;What sir, would you make a ship sail against the wind and currents
by lighting a bonfire under her deck? I pray you excuse me. I have no
time to listen to such nonsense.&amp;quot;&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Napoleon Bonaparte&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's no authoritative source for this quote. Since Fulton was
commissioned to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quote&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;What sir, would you make a ship sail against the wind and currents
by lighting a bonfire under her deck? I pray you excuse me. I have no
time to listen to such nonsense.&amp;quot;&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Napoleon Bonaparte&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's no authoritative source for this quote. Since Fulton was
commissioned to build a submarine and did build a steam-powered boat
in France, it's unlikely for this quote to be actually true.&lt;/p&gt;
&lt;p&gt;A great list of related quotes: &lt;a class="reference external" href="http://www.av8n.com/physics/ex-cathedra.htm"&gt;Famous Authoritative
Pronouncements&lt;/a&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="software process improvement"></category></entry><entry><title>DIY and the Dumb Rules of Prevention</title><link href="https://slott56.github.io/2011_03_01-diy_and_the_dumb_rules_of_prevention.html" rel="alternate"></link><published>2011-03-01T08:00:00-05:00</published><updated>2011-03-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-03-01:/2011_03_01-diy_and_the_dumb_rules_of_prevention.html</id><summary type="html">&lt;p&gt;Check out this little item in eWeek. &amp;quot;&lt;a class="reference external" href="http://www.eweek.com/c/a/Enterprise-Applications/Transforming-DIY-Projects-from-the-Painful-to-the-Productive-382595/"&gt;Transforming DIY Projects from
the Painful to the
Productive&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;As an outside consultant in a large number of organizations, I've
seen a lot of DIY projects—what we used to call &amp;quot;end user computing&amp;quot;.
Indeed, I've even been hired by the user organizations …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this little item in eWeek. &amp;quot;&lt;a class="reference external" href="http://www.eweek.com/c/a/Enterprise-Applications/Transforming-DIY-Projects-from-the-Painful-to-the-Productive-382595/"&gt;Transforming DIY Projects from
the Painful to the
Productive&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;As an outside consultant in a large number of organizations, I've
seen a lot of DIY projects—what we used to call &amp;quot;end user computing&amp;quot;.
Indeed, I've even been hired by the user organizations because IT was
ineffective.&lt;/p&gt;
&lt;p&gt;But IT gets in it's own way. There are some Dumb Rules of IT that
creates an environment in which software development and project
management are nightmares over burdensome inefficiency. Why? How?&lt;/p&gt;
&lt;p&gt;How is easy. IT has too much process. I sat with angry users at
meetings where they begged me to influence the CIO to stop making
everything into a large-scale, heavy-weight, closely-monitored
&amp;quot;project&amp;quot;. All that the users wanted were simple conversations on how
best to interface with existing applications and frameworks.&lt;/p&gt;
&lt;p&gt;They didn't want a &amp;quot;project&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="root-cause"&gt;
&lt;h2&gt;Root Cause&lt;/h2&gt;
&lt;p&gt;Why does IT anger the users with too much process?&lt;/p&gt;
&lt;p&gt;That's sometimes hard to see when we're an insider. From end-users, I
learned that IT's response to the inherent complexity of software
development is to treat the act of creating software solutions as if
the development work were—itself—just more software. Software
executed by people and organizations. They write process they way
they write code.&lt;/p&gt;
&lt;p&gt;Here's Dumb Rule 1 of success in IT: &amp;quot;&lt;strong&gt;When in doubt, define a process.&lt;/strong&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;And that rule is often just wrong. Users hate it.&lt;/p&gt;
&lt;p&gt;Process is wrong? For software development, yes, too much process is
a bad thing. Why do you think we had to invent Agile methods? The way
we create complex software is not helped in any way by having a
large-scale, heavy-weight process defined. Adding process steps to
the already complex task of creating software merely slows the work
down.&lt;/p&gt;
&lt;p&gt;All processes aren't bad. Processes to create software are
demonstrably unhelpful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="suggestion-one-lighten-up"&gt;
&lt;h2&gt;Suggestion One: Lighten UP&lt;/h2&gt;
&lt;p&gt;&amp;quot;The first step is to bring business developers out of the shadows
and into the limelight.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is important, and difficult. IT is so enamored of large
processes that simply embracing non-IT developers means wrapping them
in processes they don't need and can't comply with.&lt;/p&gt;
&lt;p&gt;While good advice, this isn't the &lt;em&gt;real&lt;/em&gt; first step.&lt;/p&gt;
&lt;p&gt;The real first step is &lt;strong&gt;stop weighing down everything with
overly-defined, heavy-weight process definitions&lt;/strong&gt;. Embrace Agile
development where there are sprints and releases and leave it at
that.&lt;/p&gt;
&lt;p&gt;DIY folks who are not in IT can understand sprint and release, since
that's how they work anyway. IT needs to help them get started and
help them release. The rest has to be hands-off. Inside corporate IT
and outside the corporate IT enclave.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="suggestion-two-open-the-door"&gt;
&lt;h2&gt;Suggestion Two: Open The Door&lt;/h2&gt;
&lt;p&gt;&amp;quot;Next, it’s important for IT to take the lead in providing tools and
guidelines that make it easy for business developers to start off on
the right foot.&amp;quot;&lt;/p&gt;
&lt;p&gt;While also good advice, it's almost impossible to actually do.&lt;/p&gt;
&lt;p&gt;Why? IT folks who have drunk the Proprietary (i.e., Microsoft) Kool
Aid laced with contractual terms and conditions won't let end-users
have expensive Visual Studio toolkits. And the true believers in
Microsoft hegemony can't let users have non-Microsoft tools. All the
large IT organizations that are all-singing, all-dancing,
all-Microsoft can't empower end users very well at all.&lt;/p&gt;
&lt;p&gt;They offer up Sharepoint and MS-Access and then shut down all further
access to tools.&lt;/p&gt;
&lt;p&gt;Here's Dumb Rule 2 of success in IT: &amp;quot;&lt;strong&gt;Measure Success By Licensing Fees&lt;/strong&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Visual Studio works because its expensive. Right? Oracle is
&amp;quot;enterprise&amp;quot; scale because it's expensive. SQLite is unacceptable
because there's no support, right?&lt;/p&gt;
&lt;p&gt;To provide tools and guidelines, Corporate IT has to &lt;strong&gt;either (1)
stop paying so much for tools or (2) budget for user departments to
have access to real tools or both&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If we don't allow the DIY folks a decent tool set they'll still
create software using crappy tools. They're remarkably capable of
building vast shadow systems in MS-Access. Seven interlocked Access
databases that all magically work together on a single desktop is the
kind of thing they'll do if we don't help them do something better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="suggestion-three-stop-driving-and-start-guiding"&gt;
&lt;h2&gt;Suggestion Three: Stop Driving and Start Guiding&lt;/h2&gt;
&lt;p&gt;DIY folks want first class access to servers, data and tools.&lt;/p&gt;
&lt;p&gt;&amp;quot;IT can take the lead in providing guidelines and even code snippets
or basic scripts that work with platforms that are commonly used to
create DIY projects in your organization.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Provide small doses of advice on how to design applications for
scale and security that are led by your professional-development
staff. &amp;quot;&lt;/p&gt;
&lt;p&gt;This can't happen, of course. The reason is that we can't &amp;quot;trust&amp;quot; the
end users. If we give them access to the data, they'll make a total
mess of it. We &lt;strong&gt;know&lt;/strong&gt; they'll make a mess of it because we have
columns in the database where the users have stopped entering the
data we carefully defined in the data dictionary and started entering
other data.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why, oh why do end users corrupt the columns in the database?&lt;/em&gt; We
tear at our hair and rend our clothes asking this. Everyone asks
this. It's the great rhetorical argument against allowing users into
the hallowed halls of IT.&lt;/p&gt;
&lt;p&gt;No one tries to &lt;em&gt;answer&lt;/em&gt; it, of course. It's a rhetorical question.
The answer is embarrassing.&lt;/p&gt;
&lt;p&gt;Users corrupt and misuse the database because a small change to add a
column is a 9-month delay preceded by endless useless meetings,
endless useless IT process. While waiting for IT to make a simple
change, it's easier to simply enter the data into another unused
field.&lt;/p&gt;
&lt;p&gt;IT creates they're own nightmare by being unable to adapt to business
change.&lt;/p&gt;
&lt;p&gt;Here's Dumb Rule 3 of success in IT: &amp;quot;&lt;strong&gt;Control The Data&lt;/strong&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Rather than adapt to business changes, wrap them in process as a way
to say &amp;quot;no&amp;quot;. Have elaborate processes. Complex budget negotiations.
Project prioritization meetings.&lt;/p&gt;
&lt;p&gt;Yes, the resources are finite. More process, however, means fewer
resources devoted to solving business problems.&lt;/p&gt;
&lt;p&gt;Code that does updates needs a lot of code review and testing no
matter who wrote it. If end-users have a DIY project, IT should be
deeply involved in the QA process. End users don't particularly
like the kind of rigorous, expensive, sophisticated testing that
IT imposes on itself. That doesn't remove the need to engage the
DIY folks in some kind of test plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-progress"&gt;
&lt;h2&gt;Making Progress&lt;/h2&gt;
&lt;p&gt;IT needs to offer a menu of services including &amp;quot;secure, reliable and
available data and processing resources&amp;quot;.&lt;/p&gt;
&lt;p&gt;IT needs to have a simple, easy-to-understand quality threshold for
software.&lt;/p&gt;
&lt;p&gt;Programming, software purchase, integration installation and
configuration and the like can be done by IT or by anyone else who
meets the simple quality threshold.&lt;/p&gt;
&lt;p&gt;A test plan. Evidence that the tests are passed. Compatibility with
some standards.&lt;/p&gt;
&lt;p&gt;It should be very, very simple so that DIY can be made to work
efficiently. Since it's going to happen anyway, it's better to do it
well than to fight against it with Dumb Rules.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="the-following-quote-from-the-netflix-hr-department"&gt;
&lt;h2&gt;The following quote from the Netflix HR department...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-01 19:23:10.997000-05:00&lt;/p&gt;
&lt;p&gt;The following quote from the Netflix HR department slide deck is
appropriate here
&lt;a class="reference external" href="http://www.slideshare.net/reed2001/culture-1798664"&gt;http://www.slideshare.net/reed2001/culture-1798664&lt;/a&gt;
&amp;quot;Flexibility is more important than efficiency in the long term.&amp;quot;
People try to optimize for the current situation which makes everything
rigid.
The above is just another way of saying Agile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-suggestion-three-stop-driving-and-start-gui"&gt;
&lt;h2&gt;&amp;amp;quot;Suggestion Three: Stop Driving and Start Gui...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-01 19:15:59.754000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Suggestion Three: Stop Driving and Start Guiding&amp;quot;&lt;/p&gt;
&lt;p&gt;Start of sarcasm&lt;/p&gt;
&lt;p&gt;What? Are you crazy? This would mean that I would not longer have the
ILLUSION of control!&lt;/p&gt;
&lt;p&gt;End of sarcasm&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Escaping the Relational Schema Trap</title><link href="https://slott56.github.io/2011_02_02-escaping_the_relational_schema_trap.html" rel="alternate"></link><published>2011-02-02T08:00:00-05:00</published><updated>2011-02-02T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-02-02:/2011_02_02-escaping_the_relational_schema_trap.html</id><summary type="html">&lt;p&gt;We're struggling with our Relational Schema. We're not alone, of course,
everyone struggles with the relational model. The technology imposes
difficult limitations and we work around them.&lt;/p&gt;
&lt;p&gt;There's kind of a 4-step process through which the relational schema
erodes into irrelevance. The concept of a schema is not irrelevant.
It's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're struggling with our Relational Schema. We're not alone, of course,
everyone struggles with the relational model. The technology imposes
difficult limitations and we work around them.&lt;/p&gt;
&lt;p&gt;There's kind of a 4-step process through which the relational schema
erodes into irrelevance. The concept of a schema is not irrelevant.
It's the rigid relational schema that's a problem.&lt;/p&gt;
&lt;p&gt;Many DBA's will say that the relational model is the ultimate in
flexibility. They're right, but they're missing the point. The
relational database clearly separates the physical storage from
the logical model as seen in tables and columns. It's flexible,
but the presence of a rigid relational schema limits the pace of
business change.&lt;/p&gt;
&lt;p&gt;&amp;quot;Clearly,&amp;quot; the DBA says, &amp;quot;you don't know how to use ALTER.&amp;quot; I beg
to differ. I can use ALTER; however, it doesn't permit the broad,
sweeping scope of change that the business demands.&lt;/p&gt;
&lt;p&gt;In order to attempt to match the pace of business change, we're
using an ORM layer. This allows us to fabricate methods and
properties left, right and center. We can tackle some pretty big
problems with simple code changes. This, however, is no longer
helping.&lt;/p&gt;
&lt;div class="section" id="straws-and-camels"&gt;
&lt;h2&gt;Straws and Camels&lt;/h2&gt;
&lt;p&gt;When designing a database, we have to be cognizant of the nature
and tempo of change. In highly-regulated, very settled business
applications (back-office accounting, for example) the data model
is well known. Changes are mostly distinctive reporting changes
and the tempo is pretty lethargic. It's the back office. Sorry,
but innovation rarely happens there.&lt;/p&gt;
&lt;p&gt;Each change is just a another hand-full of straw thrown on the
camel's back. It happens fairly slowly. And there aren't many
surprises. Hacks, workarounds and technical debt accumulates
slowly.&lt;/p&gt;
&lt;p&gt;In innovative, novel, experimental businesses, however, the nature
and tempo are very different. The changes are disruptive, &amp;quot;what
are you saying?&amp;quot; kinds of changes. They are &amp;quot;throw out the
bathwater, the babies, the cribs and fire the nursemaid&amp;quot; kinds of
changes. The tempo is semi-annual reinvent everything. Hacks,
workarounds and technical debt get out of control suddenly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important Lesson Learned&lt;/strong&gt;. When the customer misunderstands
the offering and asks for something completely senseless, it's
good to listen and try to build that -- even if it wasn't what
you were offering. In some cases, the original offering was too
complex or contrived. In other cases, the offering didn't
create enough value. But when you offer &lt;strong&gt;[X]&lt;/strong&gt; and the
customer asks how much it will cost for &lt;strong&gt;[Y]&lt;/strong&gt;, you have
disruptive, sudden, and surprising database changes.&lt;/p&gt;
&lt;p&gt;This is bales of hay through onto an unprepared camel. Backs can
get broken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coping"&gt;
&lt;h2&gt;Coping&lt;/h2&gt;
&lt;p&gt;One common coping strategy is SQL ALTER statements to fiddle with
the logical model. This has to be coupled with CREATE TABLE AS
SELECT scripts to do open-heart surgery on the logical model.
Married with modified ORM definitions. This requires some careful
&amp;quot;schema versioning&amp;quot; techniques.&lt;/p&gt;
&lt;p&gt;Another coping strategy is lots of &amp;quot;Expansion&amp;quot; columns in the
tables. These can be renamed and repurposed without physical
storage changes. The rows haven't physically changed, but the
column name morphed from &amp;quot;EXPANSION_INT_01&amp;quot; to
&amp;quot;Some_Real_Attribute&amp;quot;. This doesn't prevent the CREATE TABLE AS
SELECT scripts to do open-heart surgery. It still requires some
careful &amp;quot;schema versioning&amp;quot; techniques to be sure that the ORM
layer matches the logical schema.&lt;/p&gt;
&lt;p&gt;A third -- and perhaps most popular -- coping strategy is
manpower. Just having dedicated DBA's and maintenance programmers
is a common way to handle this. Some folks object, saying that a
large staff isn't a way to &amp;quot;cope with change&amp;quot; but is a basic &amp;quot;cost
of doing business&amp;quot;.&lt;/p&gt;
&lt;p&gt;It's false, by the way, to claim that dedicated DBA's are
essential. A solo developer can design and implement a database
and application software with no help at all. Indeed, in most
organizations, developers design and build databases, then turn
them over to DBA's for operational support. If the nature of
change is minor and tempo of change is slow, a solo developer can
deal perfectly well with the database. A dedicated DBA is someone
we &lt;strong&gt;add&lt;/strong&gt; when the developer gets swamped by too much change.&lt;/p&gt;
&lt;p&gt;(Some DBA's like to claim that the developers never get
normalization or indexing correct. I counter with the observation
that some DBA's don't get this right, either. DBA's aren't
&lt;strong&gt;essential&lt;/strong&gt;. They're a popular way to cope with the nature and
tempo of change.)&lt;/p&gt;
&lt;p&gt;In the ORM world, there are schema migration toolkits. Projects
like &lt;a class="reference external" href="https://storm.canonical.com/"&gt;Storm&lt;/a&gt;, this
&lt;a class="reference external" href="http://code.djangoproject.com/wiki/SchemaEvolution"&gt;list&lt;/a&gt; for
Django, &lt;a class="reference external" href="http://www.embarcadero.co.uk/products/db-change-manager-xe"&gt;Embarcadero Change
Manager&lt;/a&gt;
for Oracle, and numerous others attempt to support the schema
evolution and change management problem. All of this is a clever
way to cope with a problem inherent in our choice of technology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chaos-theory"&gt;
&lt;h2&gt;Chaos Theory&lt;/h2&gt;
&lt;p&gt;Rather than invent clever coping mechanisms, let's take a step
back. If we're inventing technology to work around the fixed
relational schema, it might be time to rethink the relational
schema.&lt;/p&gt;
&lt;p&gt;&amp;quot;Oh noes,&amp;quot; DBA's cry, &amp;quot;we must have a fixed logical model
otherwise chaos ensues.&amp;quot;&lt;/p&gt;
&lt;p&gt;Really? How come we're always altering that schema? How come we're
always adding tables and restructuring the tables?&lt;/p&gt;
&lt;p&gt;&amp;quot;Oh that? That's 'controlled change',&amp;quot; the DBA responds.&lt;/p&gt;
&lt;p&gt;No, that's slow chaos.&lt;/p&gt;
&lt;p&gt;Here's how it plays out. We have a disruptive change. We negotiate
with the DBA's to restructure the database. And the test database.
And the QA database. We do the development database without any
help from the DBA's. We fix the ORM layers. We unit test the
changes.&lt;/p&gt;
&lt;p&gt;Then we plan and coordinate the production rollout of this change
with the DBA's. Note. We already made the change in development.
We're not allowed to make the change in production. The DBA's then
suggest design alternatives. Normalization isn't &amp;quot;right&amp;quot;. Or there
are physical changes that need to be declared in the table
definitions. We redo the development database. And the ORM layer.
And rerun the unit tests.&lt;/p&gt;
&lt;p&gt;Because the production database couldn't be touched -- and we had
paying customers -- we copied production data into a development
database and started doing &amp;quot;production&amp;quot; in development. Now that
we're about to make the official production change, we have two
databases. The official database content is out-of-date. The
development database is a mixture of live production and test
data. Sigh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rethinking-schema"&gt;
&lt;h2&gt;Rethinking Schema&lt;/h2&gt;
&lt;p&gt;If the schema is a problem, perhaps we can live without it. Enter
NoSQL databases.&lt;/p&gt;
&lt;p&gt;Here's how you start down the slippery slope.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase I&lt;/strong&gt;. You need a fairly radical database change. Rather
than wait weeks for the DBA's, you ask for a single &amp;quot;BLOB&amp;quot; column.
You take the extra data elements for the radical change, JSON
encode them, and store the JSON representation in the BLOB field.
Now you have a &amp;quot;subschema&amp;quot; buried inside a single BLOB column.&lt;/p&gt;
&lt;p&gt;Since this is a simple ALTER, the DBA's will do it without a lot
of negotiation or delay. You have a hybrid database with a mixture
of schema and noSQL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase II&lt;/strong&gt;. You need an even more radical change. Rather than
wait weeks for the DBA's, you ask for a few tables that have just
a primary key and a BLOB column. You've basically invented a
document-structured database inside SQL, bypassing the SQL schema
entirely.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase III&lt;/strong&gt;. While waiting for the Phase II changes to be
implemented, you convert the customer data from their obscure,
stupid format into a simple sequential file of JSON documents and
write your own simple map-reduce algorithms in Python. Sure,
performance is poor, but you're up and running without any
database overheads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase IV&lt;/strong&gt;. Start looking for alternatives.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.mongodb.org/display/DOCS/MongoDB,+CouchDB,+MySQL+Compare+Grid"&gt;MongoDB, CouchDB, MySQL Compare Grid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This MongoDB looks really nice.
&lt;a class="reference external" href="http://api.mongodb.org/python/1.7%2B/tools.html#framework-tools"&gt;PyMongo&lt;/a&gt;
offers lots of hints and guidance.&lt;/p&gt;
&lt;p&gt;At least one person is looking at
&lt;a class="reference external" href="https://github.com/vpulim/mango"&gt;mango&lt;/a&gt;, a MongoDB database
adapter for Django. For us, this isn't the best idea. We use
OpenAM for identity management, so our Users and Sessions are
simply cloned from OpenAM by an &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/ref/authbackends/"&gt;authentication
backend&lt;/a&gt;
that gets the user from OpenAM. SQLite works fine for this.&lt;/p&gt;
&lt;p&gt;We think we can use Django's ORM and a relational database for
User and Session. For everything else, we need to look closely and
MongoDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wins-and-losses"&gt;
&lt;h2&gt;Wins and Losses&lt;/h2&gt;
&lt;p&gt;The big win is the ability to handle disruptive change a little
bit more gracefully.&lt;/p&gt;
&lt;p&gt;The big loss in switching away from the Django ORM is we lose the
built-in admin pages. We have to build admin Forms and view
functions. While this is a bit of a burden, we've already
customized every model form heavily. Switching from ModelForm to
Form and adding the missing fields isn't much additional work.&lt;/p&gt;
&lt;p&gt;The biggest issue with document-oriented data models is assuring
that the documents comply with some essential or core schema.
Schemas are inescapable. The question is more a matter of how the
schema limits change. Having a Django Form to validate JSON
documents for the &amp;quot;essential&amp;quot; features is far more flexible than
having a Django Model class and a mapping to a relational
database.&lt;/p&gt;
&lt;p&gt;Schema migration becomes a non-issue until we have to expand the
essential schema, which changes the validation rules, and may
render old documents retroactively invalid. This is not a new
problem -- Relational folks cope with this, also -- but if it's
the &lt;em&gt;only&lt;/em&gt; problem, then we may have streamlined the process of
making disruptive business changes.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="before-looking-at-mongodb-and-their-ilk-ask-if-ac"&gt;
&lt;h2&gt;Before looking at MongoDB and their ilk, ask if AC...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-04 18:57:21.271000-05:00&lt;/p&gt;
&lt;p&gt;Before looking at MongoDB and their ilk, ask if ACID (atomicity,
consistency, isolation, durability) [ie, the transaction thing] is a
business requirement.
Check out &amp;quot;Dropping ACID with MongoDB&amp;quot;
&lt;a class="reference external" href="http://www.slideshare.net/kchodorow/dropping-acid-with-mongodb"&gt;http://www.slideshare.net/kchodorow/dropping-acid-with-mongodb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="article-real-world-nosql-amazon-simpledb-at-netf"&gt;
&lt;h2&gt;Article: Real World NoSQL: Amazon SimpleDB at Netf...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-05 10:57:48.187000-05:00&lt;/p&gt;
&lt;p&gt;Article: Real World NoSQL: Amazon SimpleDB at Netflix By GUY HARRISON of
GigaOm - February 4, 2011
Relational database transactions were depreciated in favour of
SimpleDB’s optimistic concurrency mechanism, which allows modifications
to proceed only if an item is unchanged since it was last accessed&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-can-take-a-look-at-mongoengine-http-mongoen"&gt;
&lt;h2&gt;You can take a look at mongoengine (&lt;a class="reference external" href="http://mongoen"&gt;http://mongoen&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Jaime&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-02 08:17:07.851000-05:00&lt;/p&gt;
&lt;p&gt;You can take a look at mongoengine (&lt;a class="reference external" href="http://mongoengine.org/"&gt;http://mongoengine.org/&lt;/a&gt;) It's an
&amp;quot;ORM&amp;quot; for MongoDB made to be extremely similar to Django ORM.
In the last version, they integrate the authentication with MongoDB (I
haven't test it)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-oh-that-that-39-s-39-controlled-change"&gt;
&lt;h2&gt;&amp;amp;quot;Oh that? That&amp;amp;#39;s &amp;amp;#39;controlled change&amp;amp;#...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-02 18:17:45.938000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Oh that? That's 'controlled change',&amp;quot; the DBA responds.
No, that's slow chaos.
Hilarious.
BTW, awesome blog post!&lt;/p&gt;
&lt;p&gt;Check out&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-friendfeed-uses-mysql-to-store-sche"&gt;
&lt;h2&gt;How FriendFeed uses MySQL to store sche...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-05 16:53:24.035000-05:00&lt;/p&gt;
&lt;p&gt;Check out
How FriendFeed uses MySQL to store schema-less data
By Bret Taylor · February 27, 2009
&lt;a class="reference external" href="http://bret.appspot.com/entry/how-friendfeed-uses-mysql"&gt;http://bret.appspot.com/entry/how-friendfeed-uses-mysql&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="SQL"></category><category term="noSQL"></category></entry><entry><title>Wild-Card (LIKE-clause) searches are slow. What to do?</title><link href="https://slott56.github.io/2011_01_25-wild_card_like_clause_searches_are_slow_what_to_do.html" rel="alternate"></link><published>2011-01-25T08:00:00-05:00</published><updated>2011-01-25T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-25:/2011_01_25-wild_card_like_clause_searches_are_slow_what_to_do.html</id><summary type="html">&lt;p&gt;Patient: &amp;quot;Doctor, doctor, it hurts when I do this.&amp;quot;&lt;/p&gt;
&lt;p&gt;Doctor: &amp;quot;Then don't do that.&amp;quot;&lt;/p&gt;
&lt;p&gt;I got an email with hundreds of words of content. This part made
sense: &amp;quot;...doing wild card searches using Oracle's database engine
and are wondering why is it so slow and how do they make it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Patient: &amp;quot;Doctor, doctor, it hurts when I do this.&amp;quot;&lt;/p&gt;
&lt;p&gt;Doctor: &amp;quot;Then don't do that.&amp;quot;&lt;/p&gt;
&lt;p&gt;I got an email with hundreds of words of content. This part made
sense: &amp;quot;...doing wild card searches using Oracle's database engine
and are wondering why is it so slow and how do they make it go
faster.&amp;quot;&lt;/p&gt;
&lt;p&gt;The rest made very little sense at all. The programmer in question
immediately dove into nuances of indexing, Oracle pattern matching,
Oracle Text Query and other technical questions. The entire focus was
on the technical ins-and-outs.&lt;/p&gt;
&lt;p&gt;Not a single word on &lt;strong&gt;why&lt;/strong&gt; wildcards were even being used in the
first place. Wildcards appear to solve a business problem; the
business problem was never mentioned.&lt;/p&gt;
&lt;div class="section" id="use-case-for-wildcards"&gt;
&lt;h2&gt;Use Case for Wildcards&lt;/h2&gt;
&lt;p&gt;After some back-and-forth, the use case emerged. We'll address it
below. Essentially, the invoices have names (really) that have &amp;quot;rich
semantic content&amp;quot;. These invoice names have the form &amp;quot;{customer}
{time period} {offering}&amp;quot;.&lt;/p&gt;
&lt;p&gt;Apparently, the use case is &amp;quot;slice-and-dice&amp;quot; queries. All invoices
for a given customer; all invoices in a given time period; all
invoices for a given offering; various combinations.&lt;/p&gt;
&lt;p&gt;Really. Rather than provide discrete dimensions and use a star
schema, they've (a) combined all attributes into a single free-text
field and (b) used wild-card searches and now (c) want to complain
about it.&lt;/p&gt;
&lt;p&gt;We'll return to this use case below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-rules"&gt;
&lt;h2&gt;Basic Rules&lt;/h2&gt;
&lt;p&gt;Here's are the two rules.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Wild Cards Are The Last Resort For Human-Friendly Search.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outside Human-Friendly Search, Wild Cards Are Useless.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's look at rule 1: &lt;strong&gt;Wild Cards Are The Last Resort For Human-Friendly Search&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When a person enters a search string on a web page, we have two
choices.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Trust them to enter the exact field as it appears in the database&lt;/li&gt;
&lt;li&gt;Presume that people are fallible and cannot be trusted to enter
the exact field.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case #1 (exact match) we might be using an account number,
shipping number, an invoice number or some kind of surrogate key.
In this case, we do simple equality checks. If the user can't get
it right, bummer. In many cases, this is appropriate to prevent
snooping.&lt;/p&gt;
&lt;p&gt;In case #2 (partial match), we're forced to use a some kind of SQL
LIKE clause for the human-friendly search. We have several
implementation choices, some in the database, some out of the
database. Some in-the-database solutions benefit from clever
indexing. Many in-the-database solutions are pretty slow.&lt;/p&gt;
&lt;p&gt;Yes, an out-of-the-database solution may actually be faster. Until we
benchmark, we can't know. There's no trivial rule that says the
database always does search faster. For real speed, we may have to
resort to a hybrid solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="search-optimization"&gt;
&lt;h2&gt;Search Optimization&lt;/h2&gt;
&lt;p&gt;We might create a small RESTful server for our searchable text
fields. This is a cache; the server should handle CRUD rules to
assure cache coherence. This search server can uses a Regular
Expression engine, or perhaps compute &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein
distances&lt;/a&gt; or
whatever makes sense to optimize user-oriented search.&lt;/p&gt;
&lt;p&gt;If we're searching in larger chunks of text, we might want to use a
commercial full-text search.&lt;/p&gt;
&lt;p&gt;What's essential about this plan is that we're looking at
&lt;em&gt;application-specific optimizations&lt;/em&gt;. People need flexibility for
&lt;em&gt;specific&lt;/em&gt; reasons. It's important to look at the &lt;em&gt;actual&lt;/em&gt; use cases
where a person cannot make an exact match lookup. What problems do
they have?&lt;/p&gt;
&lt;p&gt;An application may have to deal with customer names. These are often
difficult to spell consistently. (Is it &amp;quot;AT&amp;amp;T&amp;quot; or &amp;quot;ATT&amp;quot;?) For this
kind of thing Levenshtein Distance might make more sense than
wild-card searches.&lt;/p&gt;
&lt;p&gt;An application may have to deal with time periods. &amp;quot;2010&amp;quot;, &amp;quot;2Q 2010&amp;quot;,
&amp;quot;July 2010&amp;quot;, etc. This is best handled by decomposing time periods
into discrete fields and doing appropriate exact match on the
specific, relevant fields. The issue is that there are a lot of
formulations and some text parsing can be better than a form with a
million drop-downs.&lt;/p&gt;
&lt;p&gt;An application may have to deal with oddly-named offerings. Marketing
calls it one thing. Sales folks call it another. The customer's
invoice may call it a third, and the help desk may not use any of
those phrases. This may benefit from wild-cards.&lt;/p&gt;
&lt;p&gt;Note that we're looking at the &lt;em&gt;business&lt;/em&gt; issues. Not the technology
issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-errors"&gt;
&lt;h2&gt;Design Errors&lt;/h2&gt;
&lt;p&gt;The proper use for LIKE is only to optimize the human-friendly
search. Nothing else. Which brings us to rule 2, &lt;strong&gt;Outside Human-Friendly Search, Wild Cards are Useless&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Outside human search, every wild-card in a SQL statement indicates a
serious database design error. Serious? Error? Yes.&lt;/p&gt;
&lt;p&gt;LIKE clauses outside human search indicate a failure to create a
design in first normal form (1NF). A field which is used in a LIKE
clause has multiple parts, and should have been decomposed into
pieces.&lt;/p&gt;
&lt;p&gt;Decomposing a multi-part attribute isn't always trivial. There are
two cases.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Simple, regular format or punctuation. For example, SSN, US Phones
or ZIP codes: 123-45-6789 or (123)555-1234 or 12345-1234.&lt;/li&gt;
&lt;li&gt;Complex, irregular format or punctuation. In this case, we have
disjoint subtypes in a single table. Most manufacturing part
numbers suffer from this.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In case 1, we have two choices: fully decompose or denormalize. In
case 2, we can only denormalize because the rules are irregular.&lt;/p&gt;
&lt;p&gt;The decomposition solution does not have to lead to a hideous user
interface. We can have a web page with a single text field for phone
numbers. We can parse that string and decompose the phone number into
area code, exchange and number for purposes of database storage. We
don't have to thoughtlessly force the users to decompose a field that
they don't see as being in three parts.&lt;/p&gt;
&lt;p&gt;The denormalization solution means that we have to do some
calculation when we accept the input value. We save the full field,
plus we extract the various sub-fields based on whatever hellish,
complex rules we're faced with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-choices"&gt;
&lt;h2&gt;Implementation Choices&lt;/h2&gt;
&lt;p&gt;Whenever we have a single text field with &amp;quot;rich semantic content&amp;quot;
(i.e., combines multiple disjoint attributes like customer, time
period and offering) what we're seeing is a clever way to push
database design onto the users. The expectation is that IT will (1)
understand the use cases, (2) provide a proper design and (3)
optimize performance around that design.&lt;/p&gt;
&lt;p&gt;A big text field and wild-card search (and the attendant email
traffic) indicates an explicit unwillingness to discuss the real use
cases, unwillingness to do design, and a lame hope that somehow
wild-card searches can magically be made faster through magical
indexing or other super-natural techniques.&lt;/p&gt;
&lt;p&gt;The &amp;quot;rich semantic content&amp;quot; field can be decomposed one of two ways.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;In the GUI. Add drop-downs so users pick the customer, time
period, and product offering information.&lt;/li&gt;
&lt;li&gt;In the Application. Parse the big text field into smaller text
fields that don't require wild-card search.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There isn't any magic. If wild-card searches are too slow, they have
to be replaced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benefits"&gt;
&lt;h2&gt;Benefits?&lt;/h2&gt;
&lt;p&gt;The benefit of decomposing (or denormalizing) a complex field is that
we can eliminate LIKE processing and wild-cards. Instead of
&amp;quot;LONG_TEXT_FIELD LIKE '%2Q 2010%'&amp;quot;, we can do &amp;quot;DATE.QUARTER=2 AND
DATE.YEAR=2010&amp;quot;.&lt;/p&gt;
&lt;p&gt;All the technical folderol related to indexing and full-text search
and database regular expression engines goes right out the window.&lt;/p&gt;
&lt;p&gt;The cost is that we have to &amp;quot;wrap&amp;quot; the INSERT and UPDATE processing
in a class definition that does the denormalization. That's what a
data model layer is for: these kinds of business rules. The
insert/update cost, BTW, will be microscopic compared to the number
of SELECTs. The extra time spent at INSERT will be handsomely
amortized over all the simplified SELECT operations.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Check out the book&lt;/p&gt;
&lt;p&gt;Search Patterns
Design for Dis...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-26 05:15:46.122000-05:00&lt;/p&gt;
&lt;p&gt;Check out the book
Search Patterns
Design for Discovery
By Peter Morville, Jeffery Callender
&lt;a class="reference external" href="http://oreilly.com/catalog/9781449380335"&gt;http://oreilly.com/catalog/9781449380335&lt;/a&gt;
It is slightly off topic because talking about searching in general and
not wild card searching in particular&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="SQL"></category><category term="architecture"></category></entry><entry><title>Python Jobs</title><link href="https://slott56.github.io/2011_01_24-python_jobs.html" rel="alternate"></link><published>2011-01-24T08:00:00-05:00</published><updated>2011-01-24T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-24:/2011_01_24-python_jobs.html</id><summary type="html">&lt;p&gt;Looked interesting enough for someone to email it to me. Still can't
figure out why they sent it. Posting this feels like advertising, so
perhaps I should charge them a promotional fee.&lt;/p&gt;
&lt;div class="section" id="web-services-mobile-developer"&gt;
&lt;h2&gt;Web Services - Mobile Developer&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;A minimum of 2 years of Web Service development, preferably using an
established Python-based …&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Looked interesting enough for someone to email it to me. Still can't
figure out why they sent it. Posting this feels like advertising, so
perhaps I should charge them a promotional fee.&lt;/p&gt;
&lt;div class="section" id="web-services-mobile-developer"&gt;
&lt;h2&gt;Web Services - Mobile Developer&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;A minimum of 2 years of Web Service development, preferably using an
established Python-based framework (Django or Pylons).&lt;/p&gt;
&lt;p&gt;Demonstrated proficiency with Python is a must.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.maxhire.net/cp/?E85B6B361D43515B7E571E2877501F6A02627C49"&gt;http://www.maxhire.net/cp/?E85B6B361D43515B7E571E2877501F6A02627C49&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maybe they sent it as confirmation that Python is somehow a &amp;quot;real&amp;quot;
technology.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Client-Server Partitioning</title><link href="https://slott56.github.io/2011_01_11-client_server_partitioning.html" rel="alternate"></link><published>2011-01-11T08:00:00-05:00</published><updated>2011-01-11T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-11:/2011_01_11-client_server_partitioning.html</id><summary type="html">&lt;p&gt;I have slowly grown to love RESTful web services.&lt;/p&gt;
&lt;p&gt;I was asked about a nearly empty section in the code repository
labeled &amp;quot;Java client&amp;quot;.&lt;/p&gt;
&lt;p&gt;&amp;quot;Yes,&amp;quot; I said, &amp;quot;it's a place-holder for a Java package that includes
classes to wrap our RESTful web services.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Really?&amp;quot; I was asked, &amp;quot;Why? We use …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have slowly grown to love RESTful web services.&lt;/p&gt;
&lt;p&gt;I was asked about a nearly empty section in the code repository
labeled &amp;quot;Java client&amp;quot;.&lt;/p&gt;
&lt;p&gt;&amp;quot;Yes,&amp;quot; I said, &amp;quot;it's a place-holder for a Java package that includes
classes to wrap our RESTful web services.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Really?&amp;quot; I was asked, &amp;quot;Why? We use FLEX for the client, not Java
Applets.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Today we use FLEX. In the past, we weren't sure. We have a complete
Python client library. Indeed, the original concept was to support
our customer's building their own web site to use our web services.
The Java package would plug into a J2EE web app. No one wanted that,
so we built FLEX clients instead.&amp;quot;&lt;/p&gt;
&lt;p&gt;Then they said that the super-clean separation between all these
clients and the RESTful server was taking &amp;quot;flexibility to a whole new
level.&amp;quot;&lt;/p&gt;
&lt;p&gt;I pointed them to this. &lt;a class="reference external" href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html"&gt;EWD340: The Humble
Programmer&lt;/a&gt;.
It has this killer quote:&lt;/p&gt;
&lt;blockquote&gt;
The competent programmer is fully aware of the strictly limited
size of his own skull; therefore he approaches the programming
task in full humility, and among other things he avoids clever
tricks like the plague.&lt;/blockquote&gt;
&lt;p&gt;I find that this really helps keep the focus on simplicity. I suppose
that it leads to flexibility, but that's not the real point. The real
point was simplicity.&lt;/p&gt;
</content><category term="Technologies"></category><category term="REST"></category><category term="architecture"></category></entry><entry><title>Java PHP Python -- Which is "Faster In General"?</title><link href="https://slott56.github.io/2011_01_06-java_php_python_which_is_faster_in_general.html" rel="alternate"></link><published>2011-01-06T08:00:00-05:00</published><updated>2011-01-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-06:/2011_01_06-java_php_python_which_is_faster_in_general.html</id><summary type="html">&lt;p&gt;Sigh. What a difficult question. There are numerous incarnations on
StackOverflow. All nearly unanswerable. The worst part is questions
where they add the &amp;quot;in general&amp;quot; qualifier. Which is &amp;quot;faster in general&amp;quot;
is essentially impossible to answer. And yet, the question persists.&lt;/p&gt;
&lt;p&gt;There are three rules for figuring out which is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sigh. What a difficult question. There are numerous incarnations on
StackOverflow. All nearly unanswerable. The worst part is questions
where they add the &amp;quot;in general&amp;quot; qualifier. Which is &amp;quot;faster in general&amp;quot;
is essentially impossible to answer. And yet, the question persists.&lt;/p&gt;
&lt;p&gt;There are three rules for figuring out which is faster.&lt;/p&gt;
&lt;p&gt;And there are three significant problems that make these rules
inescapable.&lt;/p&gt;
&lt;div class="section" id="rule-one-languages-don-t-have-speeds-implementations-have-speeds"&gt;
&lt;h2&gt;Rule One. Languages don't have speeds. Implementations have speeds.&lt;/h2&gt;
&lt;p&gt;Info on
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Benchmark_(computing)"&gt;benchmarking&lt;/a&gt;.
The idea of a benchmark is to have a single, standard suite of
source code, which can be used to compare compilers, run-time
libraries or hardware.&lt;/p&gt;
&lt;p&gt;Having a standard suite of source is essential because it provides
a basis for comparison. A single benchmark source is the fixed
reference. We don't compare the top of the Empire State Building
with the top of the Stratosphere in Las Vegas without specifying
whether we care about height above the ground or height above sea
level. There has to be some fixed point of comparison, some common
attribute, or the measurements devolve into mere numerosity.&lt;/p&gt;
&lt;p&gt;Once we have a basis for comparison (one single body of source
code), the other attributes are degrees of freedom; the
measurements we make will include the other attributes. This will
allow a rational statement of what the experimental results where.
We can then compare these various free attributes against each
other. For details look at something like the &lt;a class="reference external" href="http://www.cs.cmu.edu/~jch/java/microbench.html"&gt;Java Micro
Benchmark&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rule-two-statistics-aren-t-a-panacea"&gt;
&lt;h2&gt;Rule Two. Statistics Aren't a Panacea.&lt;/h2&gt;
&lt;p&gt;The reason there's no &amp;quot;in general&amp;quot; comparison among languages is
because there are too many degrees of freedom to make any kind of
rational comparison. We can make irrational comparisons, but
that's the trap of numerosity -- throwing numbers around. 1250 vs.
1149, 1300 vs. 3177. What do they mean? Height above ground?
Height above sea level? What's being measured?&lt;/p&gt;
&lt;p&gt;There's a huge problem with claiming that statistics will yield an
answer to which language implementation is faster &amp;quot;in general&amp;quot;. We
need some population that we can sample and measure. &lt;strong&gt;Problem
1&lt;/strong&gt;: What the population are we measuring? It can't be &amp;quot;programs&amp;quot;:
we can't compare grep against Apache httpd. Those two programs
have almost no common features.&lt;/p&gt;
&lt;p&gt;What makes the population of programs difficult to define is the
language differences. If we're trying to compare PHP, Python and
Java, we need to find a program which somehow -- magically -- is
common across all three languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-basis-for-comparison"&gt;
&lt;h2&gt;The Basis For Comparison&lt;/h2&gt;
&lt;p&gt;Finding common programs degenerates into &lt;strong&gt;Problem 2&lt;/strong&gt;: what
programs could be comparable? For example, we have the Tomcat
application, written in Java. We wouldn't want to write Tomcat in
Python (since Tomcat is a Java Servlet container). We could
probably write something Tomcat-like in PHP, but why try? So we
can't just grab programs randomly.&lt;/p&gt;
&lt;p&gt;At this point, we devolve to subjectivity. We need to find some
kind of problem domain in which these languages overlap. This gets
icky. Clearly, big servers aren't a good problem domain. Almost as
clearly, command-line applications aren't the best idea. PHP does
run from the command-line, but it's always contrived-looking
because it doesn't exploit PHP's strengths. So we wind up looking
at web applications because that's where PHP excels.&lt;/p&gt;
&lt;p&gt;Web applications? Subjective? Correct. PHP is a language plus a
web application framework bundled together. Java and Python -- by
themselves -- are just languages and require a framework. Which
Java (and Python) framework is &lt;em&gt;identical&lt;/em&gt; to PHP's framework?
Spring, Struts, Django, Pylons? None of these reflects a code base
that's even remotely similar. Maybe Java JSP is similar enough to
PHP. For Python there are several implementations. Sigh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="crappy-program-problem"&gt;
&lt;h2&gt;Crappy Program Problem&lt;/h2&gt;
&lt;p&gt;We can't easily compare programs because we're really comparing
implementations of an algorithm. This leads to &lt;strong&gt;Problem 3&lt;/strong&gt;: we
picked a poor algorithm or did a lousy job of implementing it in
the target language.&lt;/p&gt;
&lt;p&gt;In order to be &amp;quot;comparable&amp;quot;, we don't want to exploit
highly-optimized or unique features of a language. So we tried to
be generic. This is fraught with risks.&lt;/p&gt;
&lt;p&gt;For example, Java and PHP don't have list comprehensions. Do we
forbid them from our Python behchmark? In Python, everything is a
reference, values cannot be copied. If we pick an algorithm
implementation which depends on copying objects, Java may appear
to excel. If we pick an algorithm implementation which depends on
sharing references, Python may appear to excel.&lt;/p&gt;
&lt;p&gt;Somehow we have to get past language differences and programmer
mistakes. What to do?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="synthetic-benchmarks"&gt;
&lt;h2&gt;Synthetic Benchmarks&lt;/h2&gt;
&lt;p&gt;Since we can't easily find comparable programs -- as whole
programs -- we're left with the need to create some kind of
benchmark based on language primitives. Statements or expressions
or something. We can try to follow the
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Whetstone_(benchmark)"&gt;Whetstone&lt;/a&gt;/&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Dhrystone"&gt;Dhrystone&lt;/a&gt;
approach of analyzing a bunch of programs to find the primitive
constructs and their relative frequency.&lt;/p&gt;
&lt;p&gt;Here's the plan. We'll take 100 PHP programs, 100 Java programs
and 100 Python programs and analyze them to find the relative
frequency of different kinds of statements. What then?&lt;/p&gt;
&lt;p&gt;The goal is to create one source that reflects the statements
actually used in the 300 programs we analyzed. In three different
languages. Hmmm... Okay. We'll need to create a magical mapping
among the statement constructs in the three languages. Well,
that's hard. The languages aren't terribly comparable. A Python
expression using a List Comprehension is the same thing a
multi-statement Java loop. Rats.&lt;/p&gt;
&lt;p&gt;The languages aren't very comparable at the statement level at
all. And if we force them to be comparable, we're not comparing
real programs, but an artificial mapping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-machine-benchmarks"&gt;
&lt;h2&gt;Virtual Machine Benchmarks&lt;/h2&gt;
&lt;p&gt;Since we can't compare the languages at the program level or the
statement level, what's left? Clearly, the underlying interpreter
is what we care about.&lt;/p&gt;
&lt;p&gt;We're really comparing the Java Virtual Machine, the PHP
interpreter and the Python interpreter. That's what we really care
about.&lt;/p&gt;
&lt;p&gt;And life is simple because we can compare Java, The &lt;a class="reference external" href="https://www.projectzero.org/php/"&gt;Project Zero
PHP Interpreter&lt;/a&gt; based on the
JVM and &lt;a class="reference external" href="http://www.jython.org/"&gt;Jython&lt;/a&gt;. We can look at
&amp;quot;compiled&amp;quot; PHP, Java Class Files and Python .PYC files to find the
VM primitives used by each language and then -- what? Compare the
run-time of the various VM primitives? No, that's silly, since the
run-times are all JVM run-times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-we-re-left-with"&gt;
&lt;h2&gt;What We're Left With&lt;/h2&gt;
&lt;p&gt;The very best we can can do is to compare the statistical
distribution of the VM instructions created by Java, PHP or Jython
compilers. We could note that maybe PHP or Python uses too many
&amp;quot;slow&amp;quot; VM instructions, where Java used more &amp;quot;fast&amp;quot; VM
instructions. That would be an &amp;quot;in general&amp;quot; comparison. Right?&lt;/p&gt;
&lt;p&gt;See? You can &lt;a class="reference external" href="http://www.howtomeasureanything.com/"&gt;measure anything&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this case, the compiler itself is a degree of freedom. Sadly,
we're not comparing languages &amp;quot;in general&amp;quot;. We're comparing the
bytecodes created by various compilers. We're actually comparing
compilers and compiler optimizations of the bytecode. Sigh.&lt;/p&gt;
&lt;p&gt;That's not what we were hoping for. We were hoping for some kind
of &amp;quot;in general&amp;quot; comparison of the language, not the JVM compiler.&lt;/p&gt;
&lt;p&gt;Java has pretty sophisticated optimization. Python, however,
eschews optimization. PHP has it's own weird issues. See this
paper from Rob Nicholson from the CodeZero project on how to
&lt;a class="reference external" href="http://wiki.jvmlangsummit.com/pdf/24_Nicholson_p8.pdf"&gt;implement PHP in the JVM&lt;/a&gt;.
PHP doesn't fit the JVM as well as Python does. So there's a weird
bias.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rule-three-benchmarking-is-hard"&gt;
&lt;h2&gt;Rule Three. Benchmarking Is Hard.&lt;/h2&gt;
&lt;p&gt;There is no &amp;quot;in general&amp;quot; comparison of programming languages. All
that we can do is benchmark something specific.&lt;/p&gt;
&lt;p&gt;It works like this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Stop quibbling about language performance &amp;quot;in general&amp;quot;.&lt;/li&gt;
&lt;li&gt;Find something specific and concrete we plan to implement.&lt;/li&gt;
&lt;li&gt;Actually write the performance-critical piece in Java, PHP,
Python, Ruby, whatever. Yes. Build it several times. Really. We
don't want to use &amp;quot;language-independent&amp;quot; or &amp;quot;common&amp;quot; features.
We want to optimize ruthlessly -- use the language the way it
was meant to be used. -- use the various unique-to-the language
features correctly and completely.&lt;/li&gt;
&lt;li&gt;Actually run the performance-critical piece to get actual
timings.&lt;/li&gt;
&lt;li&gt;Since run-time libraries and hardware are degrees of freedom,
we have to use multiple run-time libraries, multiple compiler
optimization settings and multiple hardware configurations to
make a proper decision on which language to use for our
specific problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we know something about our specific problem domain and the
available languages. That's the best we can do.&lt;/p&gt;
&lt;p&gt;We can only compare a specific problem, with a specific algorithm.
That's the basis for all benchmark comparisons. Since each
implementation was well-done and properly optimized, the degree of
freedom is the language -- and the run-time implementation of that
language -- and the selected OS and hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="nice-post-thanks-for-sharing"&gt;
&lt;h2&gt;Nice post, thanks for sharing.&lt;/h2&gt;
&lt;p&gt;MyOpenDraft&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-08 07:30:01.084000-05:00&lt;/p&gt;
&lt;p&gt;Nice post, thanks for sharing.&lt;/p&gt;
&lt;p&gt;Again, nice post, thanks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-there-is-more-to-la"&gt;
&lt;h2&gt;But there is more to la...&lt;/h2&gt;
&lt;p&gt;Paddy3118&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-11 16:24:07.364000-05:00&lt;/p&gt;
&lt;p&gt;Again, nice post, thanks.
But there is more to language comparison than benchmarking/speed. See
&lt;a class="reference external" href="http://rosettacode.org"&gt;http://rosettacode.org&lt;/a&gt; for an alternate approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-hope-that-php-was-very-advanced-compared-to-java"&gt;
&lt;h2&gt;I hope that PHP was very advanced compared to JAVA...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-10-13 07:03:08.721000-04:00&lt;/p&gt;
&lt;p&gt;I hope that PHP was very advanced compared to JAVA as it has many
benefits compared to JAVA programming.U have shared many good points.
Thank you !
&lt;a class="reference external" href="http://www.web-designs-company.com"&gt;web design company&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-think-you-missed-the-point-although-the-points"&gt;
&lt;h2&gt;I think you missed the point, although the points ...&lt;/h2&gt;
&lt;p&gt;DarKMaTTeR&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-27 15:22:51.770000-04:00&lt;/p&gt;
&lt;p&gt;I think you missed the point, although the points you made are valid.
I doubt the question &amp;quot;which is faster&amp;quot;, even with &amp;quot;in general&amp;quot; included,
ever meant &amp;quot;how fast would the world be, if it was implemented in X&amp;quot;. I
found the example about writing Tomcat in PHP embarassing, actually.
What people mean is &amp;quot;If I were to code a webpage of unspecified nature
and cared about speed, how much would the language matter&amp;quot;&lt;/p&gt;
&lt;p&gt;Hi,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recently-i-came-across-some-great-articles-on"&gt;
&lt;h2&gt;Recently I came across some great articles on...&lt;/h2&gt;
&lt;p&gt;Innofied&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2013-04-16 06:51:03.954000-04:00&lt;/p&gt;
&lt;p&gt;Hi,
Recently I came across some great articles on your site.
The other day, I was discussing
(This post) with
my colleagues and they suggested I submit an article of my own. Your
site is just perfect for what I have written!&lt;/p&gt;
&lt;p&gt;Would it be ok to submit the article? It is free of charge, of course!
Let me know what you think&lt;/p&gt;
&lt;p&gt;Contact me at &lt;a class="reference external" href="mailto:anelieivanova&amp;#64;gmail.com"&gt;anelieivanova&amp;#64;gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Regards&lt;/p&gt;
&lt;p&gt;Anele Ivanova&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="PHP"></category><category term="#python"></category><category term="java"></category><category term="numerosity"></category></entry><entry><title>Search For Expertise</title><link href="https://slott56.github.io/2011_01_06-search_for_expertise.html" rel="alternate"></link><published>2011-01-06T07:56:00-05:00</published><updated>2011-01-06T07:56:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-06:/2011_01_06-search_for_expertise.html</id><summary type="html">&lt;p&gt;I'm looking for a unbiased Python expert to help with a book I'm working
on. We need &amp;quot;an unbiased python expert with a keen eye for detail.&amp;quot;&lt;/p&gt;
&lt;p&gt;The role is technical reviewer. I've never done this before, but it
appears that the tech reviewer is a paid position somewhere in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm looking for a unbiased Python expert to help with a book I'm working
on. We need &amp;quot;an unbiased python expert with a keen eye for detail.&amp;quot;&lt;/p&gt;
&lt;p&gt;The role is technical reviewer. I've never done this before, but it
appears that the tech reviewer is a paid position somewhere in a
publication pipeline along with copy editing and other production
steps. It doesn't sound like a full-time job, since the chapters
trickle through the pipeline slowly.&lt;/p&gt;
&lt;p&gt;I'm guessing that you'd get to correct the misstatements and run all
the code examples.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="unbiased-in-what-way"&gt;
&lt;h2&gt;Unbiased in what way?&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-08 21:26:11.451000-05:00&lt;/p&gt;
&lt;p&gt;Unbiased in what way?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-any-requirements-besides-being-a-quot-pytho"&gt;
&lt;h2&gt;&amp;amp;quot;any requirements besides being a &amp;amp;quot;Pytho...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-09 15:06:42.002000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;any requirements besides being a &amp;quot;Python expert&amp;quot; ?&amp;quot; None that I know
of.
&amp;quot;Unbiased in what way?&amp;quot; No idea. That was what my editor suggested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="may-i-apply-to-this-i-mean-there-are-any-requir"&gt;
&lt;h2&gt;May I apply to this ? I mean, there are any requir...&lt;/h2&gt;
&lt;p&gt;Nicholas&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-06 20:04:02.081000-05:00&lt;/p&gt;
&lt;p&gt;May I apply to this ? I mean, there are any requirements besides being a
&amp;quot;Python expert&amp;quot; ?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Integration Testing, unittest and Python 2.7</title><link href="https://slott56.github.io/2011_01_04-integration_testing_unittest_and_python_27.html" rel="alternate"></link><published>2011-01-04T08:00:00-05:00</published><updated>2011-01-04T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-04:/2011_01_04-integration_testing_unittest_and_python_27.html</id><summary type="html">&lt;p&gt;Many folks use Python's unittest module for integration testing. It
sometimes leads to whining and hand-wringing, but it is very effective.
Ordinary &amp;quot;unit&amp;quot; tests use mocks and focus on a class or a module
more-or-less in isolation. The purists say &amp;quot;complete isolation&amp;quot;. But
that's sometimes unrealistic. A class that's part …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many folks use Python's unittest module for integration testing. It
sometimes leads to whining and hand-wringing, but it is very effective.
Ordinary &amp;quot;unit&amp;quot; tests use mocks and focus on a class or a module
more-or-less in isolation. The purists say &amp;quot;complete isolation&amp;quot;. But
that's sometimes unrealistic. A class that's part of a &lt;strong&gt;State&lt;/strong&gt; design
pattern or a &lt;strong&gt;Strategy&lt;/strong&gt; design pattern is often so trivial that &amp;quot;pure&amp;quot;
unit tests aren't really very enlightening. Using the stateful class
along with it's state class hierarchy is usually far more interesting
and helpful.&lt;/p&gt;
&lt;p&gt;I argue that it's still &amp;quot;unit&amp;quot; testing because parts of the
application have been extracted from their processing context.&lt;/p&gt;
&lt;div class="section" id="os-and-module-mocks"&gt;
&lt;h2&gt;OS and Module Mocks&lt;/h2&gt;
&lt;p&gt;Some folks will hand-wring over the use of OS API's or other library
API's in a unit test. They feel that the OS API's should be
completely mocked in order to call it a &amp;quot;unit&amp;quot; test. In most cases,
simplistic mocks can be created, but for most use cases, the mock
grows to hellish complexity.&lt;/p&gt;
&lt;p&gt;For example, we have a large number of tests which depend on Python's
csv module. While we could mock csv to produce row after row of
mocked data, it seems much simpler to trust that our infrastructure
works, use csv and simply provide files of test data in CSV format.
The file is part of the test fixture and is locked up in the source
code repository.&lt;/p&gt;
&lt;p&gt;Is this &amp;quot;unit&amp;quot; testing when we're integrated with some of the
underlying modules?&lt;/p&gt;
&lt;p&gt;We don't separately test csv. We simply trust that it library modules
have their own tests. If we're willing to trust the already-supplied
tests for csv, why not use it in our tests? Why Mock something we've
decided to trust?&lt;/p&gt;
&lt;p&gt;[For that matter, we also trust Python, the OS and the unittest
module itself. Why draw lines between Python, unittest and csv?]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="orm-and-rdbms-mocks"&gt;
&lt;h2&gt;ORM and RDBMS Mocks&lt;/h2&gt;
&lt;p&gt;A similar kind of worry comes with an ORM layer. Somehow, the &amp;quot;trust&amp;quot;
factor starts to break down here. Folks want to mock the ORM layer.
Or -- worse -- they want to try and mock the RDBMS layer so that
they're testing the application and ORM layer. This is another
artificial distinction between stuff we'll trust (the RDBMS layer)
and stuff we feel we must write additional tests for (the ORM layer).&lt;/p&gt;
&lt;p&gt;It's so much nicer to adopt the Django philosophy of building a test
database as part of the test fixture. The ORM and RDBMS are
integrated into the test itself. The thing that's &amp;quot;mocked&amp;quot; is the
data which gets pre-loaded into the database.&lt;/p&gt;
&lt;p&gt;Outside of Django, this can be a bit complex to set up properly. You
need to create a temporary database, execute the SQL DDL, load the
fixture data. This is an annoying bit of code to write the first
time. However, it has handsome rewards because the &amp;quot;unit&amp;quot; testing
includes the ORM and RDBMS at a higher level where it's easier to
work with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-testing"&gt;
&lt;h2&gt;Integration Testing&lt;/h2&gt;
&lt;p&gt;We use the unittest module to do integration testing also. In Python
2.6, this involved a fair amount of work. We had to start our RESTful
server, run the unit test, and then kill the server. Because of the
way the subprocess module works, we can't be completely sure the
server is running, so we simply cheat and use a time.sleep(12) to
wait for the DB to be built and loaded.&lt;/p&gt;
&lt;p&gt;Python 2.7 adds module-level test cases. It checks for setUpModule
and tearDownModule functions. I've been gleefully revising all our
unit tests to make ready for this. Our previous testing needed
pervasive (but minor) rewrites to refactor the database setup and
tear down and provide proper names.&lt;/p&gt;
&lt;p&gt;Once that's in place, our big test shell script can be simplified
down to a little Python unittest module. This module will build a
unittest.Suite from all the other test modules (there are dozens) and
simply execute the suite as a single, integrated whole.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="nice-post-i-39-ve-done-something-similar-while-t"&gt;
&lt;h2&gt;Nice post! I&amp;amp;#39;ve done something similar while t...&lt;/h2&gt;
&lt;p&gt;Andrei Savu&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-04 14:06:10.826000-05:00&lt;/p&gt;
&lt;p&gt;Nice post! I've done something similar while testing an application
built using tornado and mongodb [1]
[1] &lt;a class="reference external" href="https://github.com/andreisavu/automatic-testing-demo"&gt;https://github.com/andreisavu/automatic-testing-demo&lt;/a&gt;
I find this approach a lot more useful than trying to mock everything.
I would love to know what you think about this demo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="regarding-starting-stopping-a-server-for-tests-ch"&gt;
&lt;h2&gt;Regarding starting/stopping a server for tests, Ch...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-25 16:24:23.342000-05:00&lt;/p&gt;
&lt;p&gt;Regarding starting/stopping a server for tests, CherryPy has a really
simple wait_for_port function that makes sure the socket is listening. I
usually also implement some sort of basic status URL as well that I can
query to make sure the service is really up and running.&lt;/p&gt;
&lt;p&gt;Going further you can double up with something like logging.statistics
(&lt;a class="reference external" href="http://www.aminus.org/blogs/index.php/2010/11/19/logging-statistics?blog=2"&gt;http://www.aminus.org/blogs/index.php/2010/11/19/logging-statistics?blog=2&lt;/a&gt;)
when testing for whether a service is up.&lt;/p&gt;
&lt;p&gt;Thanks for blogging about all this. The question of whether to
mock/stub/whatever else is always an interesting question that can be
tough to decide on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-d-say-that-people-mock-the-orm-layer-not-bec"&gt;
&lt;h2&gt;I&amp;amp;#39;d say that people mock the ORM layer not bec...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-04 23:20:16.496000-05:00&lt;/p&gt;
&lt;p&gt;I'd say that people mock the ORM layer not because of trust issues, but
because they want their unit tests to be *fast*.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="#python"></category></entry><entry><title>Hypothetical Designs and Numerosity</title><link href="https://slott56.github.io/2011_01_04-hypothetical_designs_and_numerosity.html" rel="alternate"></link><published>2011-01-04T07:22:00-05:00</published><updated>2011-01-04T07:22:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-04:/2011_01_04-hypothetical_designs_and_numerosity.html</id><summary type="html">&lt;p&gt;I love hypothetical questions. Got a bunch recently. I guess it's the
season for hypotheticals.&lt;/p&gt;
&lt;p&gt;These all seem to come from the &amp;quot;Averted Glance&amp;quot; school of
management. The best part about the &amp;quot;I don't want to know the
details&amp;quot; management is that we need to substitute metrics for
understanding. One …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love hypothetical questions. Got a bunch recently. I guess it's the
season for hypotheticals.&lt;/p&gt;
&lt;p&gt;These all seem to come from the &amp;quot;Averted Glance&amp;quot; school of
management. The best part about the &amp;quot;I don't want to know the
details&amp;quot; management is that we need to substitute metrics for
understanding. One could also call this the &amp;quot;Numerosity&amp;quot; school of
management. It's one step above numerology.&lt;/p&gt;
&lt;p&gt;There is no substitute for hands-on work. Quantity leads directly to
Quality. Bottom Line: &lt;strong&gt;touch the technology early and often&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="easier"&gt;
&lt;h2&gt;Easier&lt;/h2&gt;
&lt;p&gt;I described the Sphinx production pipeline as &amp;quot;easier&amp;quot; than
DocBook.&lt;/p&gt;
&lt;p&gt;Someone asked for a definition of &amp;quot;easier&amp;quot;. I had to research the
definition of &amp;quot;easier&amp;quot; and found the Standard Information
Management Process and Logical Effort index (SIMPLE). This index
has a number of objective scoring factors for platform, language,
toolset, performance, steps, problems encountered, rework and
workaround, as well as the price to tea in China.&lt;/p&gt;
&lt;p&gt;I find the SIMPLE index to be very useful for answering the random
questions that arise when someone does not want to actually
besmirch their fingers by touching the technology.&lt;/p&gt;
&lt;p&gt;Considering that Sphinx and the DocBook processing components are
both largely free, it seemed easier to me to actually rig them up
and run them a few times to see how they work. But that relies on
the undefined term &amp;quot;easier&amp;quot;. To cut the Gordian Knot while keeping
the eyes averted, one resorts to numerosity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cleaner-and-more-uniform"&gt;
&lt;h2&gt;Cleaner and More Uniform&lt;/h2&gt;
&lt;p&gt;I described XML as cleaner and more uniform than LaTeX. (Even
though I've switched to LaTeX because it produces better results.)&lt;/p&gt;
&lt;p&gt;Someone asked for a definition of Cleaner and More Uniform. I
tried using the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_test"&gt;Flesch-Kincaid Readability
Index&lt;/a&gt;,
but it was limited to the content and didn't work well for the
markup. I tried using this
&lt;a class="reference external" href="http://www.standards-schmandards.com/exhibits/rix/"&gt;calculator&lt;/a&gt;,
but it barfed. So I invented by own index based on the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Halstead_complexity_measures"&gt;Halstead
complexity
metrics&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I find the Halstead complexity to be very useful for answering
random questions that arise when someone does not want to actually
burden themselves with looking at the technology. I suppose actual
examples of XML vs. LaTex vs. RST would burn holes in the brain,
running the risk of killing one of the few working brain cells.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inheritance-vs-delegation"&gt;
&lt;h2&gt;Inheritance vs. Delegation&lt;/h2&gt;
&lt;p&gt;My favorite, however, is the question on &amp;quot;criteria for when to use
/ not use inheritance&amp;quot;. Asking for criteria is the leading
indicator of the Numerosity School of Design. How do I know this?&lt;/p&gt;
&lt;p&gt;No Example.&lt;/p&gt;
&lt;p&gt;Hypothetical questions never have practical class definitions.
They either have no classes at all, or an overly simplified design
based on Foo, Bar and Baz. Rather than actually write some code,
we'll talk about what might go into writing some code.&lt;/p&gt;
&lt;p&gt;The most important part of learning OO design is to actually do a
lot of OO design. &lt;a class="reference external" href="https://slott56.github.io/2009_08_14-code_dojo_and_oo_design_oo_design_dojo.html"&gt;Code
Kata&lt;/a&gt;
works. &lt;a class="reference external" href="http://russelldavies.typepad.com/planning/2007/02/quantity_equals.html"&gt;Quantity translates directly to
Quality&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don't talk about writing code. Write code. Write lots of code.
Write as much code as possible.&lt;/p&gt;
&lt;p&gt;I'm revising my Building Skills in OO Design book to make it a
better answer to the Inheritance vs. Delegation question. Do the
exercises. At the end of the book, you'll know the answers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sadly"&gt;
&lt;h2&gt;Sadly&lt;/h2&gt;
&lt;p&gt;Sadly, the bulk of IT management does not believe in
skill-building. Training is limited to one or two weeks out of 52
(just under 2% of your working life) and that's as often cancelled
as granted. Any time spent trying something to see if it will work
is aggressively punished (&amp;quot;Quit gold plating that solution and put
some garbage into production right now! Learn on your own time.
King Cnut Demands It.&amp;quot;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="numerosity"></category><category term="architecture"></category><category term="object-oriented design"></category></entry><entry><title>Sensible Metrics -- Avoiding Numerosity</title><link href="https://slott56.github.io/2011_01_04-sensible_metrics_avoiding_numerosity.html" rel="alternate"></link><published>2011-01-04T07:22:00-05:00</published><updated>2011-01-04T07:22:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2011-01-04:/2011_01_04-sensible_metrics_avoiding_numerosity.html</id><summary type="html">&lt;p&gt;In general, Software Engineering Metrics are not without value.&lt;/p&gt;
&lt;p&gt;Expecting magic from metrics is what devalues them, reducing metrics
to dumb numerosity.&lt;/p&gt;
&lt;p&gt;Once code is in production, plenty of metrics are readily available.
For example, the trouble-ticket history tells you everything you need
to know about code that's in production …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In general, Software Engineering Metrics are not without value.&lt;/p&gt;
&lt;p&gt;Expecting magic from metrics is what devalues them, reducing metrics
to dumb numerosity.&lt;/p&gt;
&lt;p&gt;Once code is in production, plenty of metrics are readily available.
For example, the trouble-ticket history tells you everything you need
to know about code that's in production. You don't need anything more
than this.&lt;/p&gt;
&lt;p&gt;Also, an attempt to do more statistical analysis of production code
is largely doomed because it appears (to most managers) as zero-value
work.&lt;/p&gt;
&lt;p&gt;Software Engineering Metrics (Cyclomatic Complexity, for example) are
used for their predictive power. There's not point in using them for
post-production analysis.&lt;/p&gt;
&lt;div class="section" id="metrics-as-leading-indicators"&gt;
&lt;h2&gt;Metrics as Leading Indicators&lt;/h2&gt;
&lt;p&gt;Metrics are a handy filter as part of an overall QA process. The
point is this: sometimes they're a leading indicator of code smells.&lt;/p&gt;
&lt;p&gt;Metrics have to be one part of the overall QA process. For example.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;All code is inspected.&lt;/li&gt;
&lt;li&gt;Code with more suspicious metrics are inspected more closely. Code
with less suspicious metrics are not inspected as closely.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the questions become much more sensible. Can we quantify
&amp;quot;suspicious&amp;quot; to support decision-making by thinking people?&lt;/p&gt;
&lt;p&gt;Imagine this scenario. You establish a Cyclomatic Complexity
threshold; you choose 5 as the upper limit on acceptable complexity.&lt;/p&gt;
&lt;p&gt;Now what?&lt;/p&gt;
&lt;p&gt;You start measuring code as it goes through development. And
everything is between 5 and 15. What does that mean?&lt;/p&gt;
&lt;p&gt;Until you inspect all that code, 5 doesn't mean anything.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inspect-first-measure-second"&gt;
&lt;h2&gt;Inspect First, Measure Second&lt;/h2&gt;
&lt;p&gt;If, on the other hand, you start inspecting every piece of code,
you'll learn a lot.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Some inspections are boring. The code is good. End the meeting;
move on quickly. (Few things are more awkward than a manager who
feels the need to control people by using the entire half-hour.)&lt;/li&gt;
&lt;li&gt;Some inspections are hard. The code is confusing. Cut to the
Rework; reschedule.&lt;/li&gt;
&lt;li&gt;Some inspections are contentious. Some folks like one thing and
other folks find they cannot reconcile themselves to this.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What's important is to use metrics to enhance the good stuff and
expose the bad stuff. People still have to make the decisions.
Metrics only help.&lt;/p&gt;
&lt;p&gt;Find a metric that brackets the boring stuff to save you having to
inspect every module that's &amp;quot;similar&amp;quot;. Cyclomatic Complexity is
popular for this. It's not the only thing, but it's popular. You can
use feature count or lines of code, also. Short and sweet modules
rarely suffer from code smell. But you still have to check them.&lt;/p&gt;
&lt;p&gt;Find a metric that brackets the obviously bad stuff to alert you that
something really bad is going on. Intervene and rework early and
often. Large and complex modules are a leading indicator of a code
smell. How large is too large? Inspect and decide.&lt;/p&gt;
&lt;p&gt;Find a way to reduce the contention. Metrics -- because they're so
simple -- are harder to fight over. A Cyclomatic Complexity of 20 is
just too complex. Stop arguing and rework it. Often, bull-headed
nerds can find a way to agree to a metrics program more easily than
they can agree to detailed coding standards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-metric"&gt;
&lt;h2&gt;Which Metric?&lt;/h2&gt;
&lt;p&gt;That's the tough problem. In a vacuum, of course, it's an impossible
question.&lt;/p&gt;
&lt;p&gt;Given an inspection process, however, adding metrics to tune and
enhance the existing inspection process can make sense.&lt;/p&gt;
&lt;p&gt;There are many Software Science metrics. Here's the list:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Software_metric"&gt;http://en.wikipedia.org/wiki/Software_metric&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pick some at random and see if they correlate in any way with
inspection results. If they do, you can trim down your inspection
time. If they don't, pick other metrics until you find some that do.&lt;/p&gt;
&lt;p&gt;But only use metrics to support you're code inspection process.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="integration-watch-using-metrics-effectively-by"&gt;
&lt;h2&gt;Integration Watch: Using metrics effectively - By ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-09 21:13:40.636000-05:00&lt;/p&gt;
&lt;p&gt;Integration Watch: Using metrics effectively - By Andrew Binstock -
March 1, 2010 -
&lt;a class="reference external" href="http://www.sdtimes.com/INTEGRATION_WATCH_USING_METRICS_EFFECTIVELY/By_ANDREW_BINSTOCK/About_METRICS/34157"&gt;http://www.sdtimes.com/INTEGRATION_WATCH_USING_METRICS_EFFECTIVELY/By_ANDREW_BINSTOCK/About_METRICS/34157&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nist-special-publication-500-235-struct"&gt;
&lt;h2&gt;NIST Special Publication 500-235 Struct...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-03 07:38:33.916000-04:00&lt;/p&gt;
&lt;p&gt;Check out
NIST Special Publication 500-235
Structured Testing: A Testing Methodology Using the Cyclomatic
Complexity Metric
&lt;a class="reference external" href="http://www.mccabe.com/iq_research_nist.htm"&gt;http://www.mccabe.com/iq_research_nist.htm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="numerosity"></category></entry><entry><title>pyWeb Literate Programming Tool | Download pyWeb Literate Programming Tool software for free at SourceForge.net</title><link href="https://slott56.github.io/2010_12_30-pyweb_literate_programming_tool_download_pyweb_literate_programming_tool_software_for_free_at_sourceforgenet.html" rel="alternate"></link><published>2010-12-30T13:31:00-05:00</published><updated>2010-12-30T13:31:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-12-30:/2010_12_30-pyweb_literate_programming_tool_download_pyweb_literate_programming_tool_software_for_free_at_sourceforgenet.html</id><summary type="html">&lt;p&gt;I've (finally) updated the pyWeb Literate Programming Tool.&lt;/p&gt;
&lt;p&gt;There were feature requests and bug reports. Much to do. Sadly, I'm
really slow at doing it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://sourceforge.net/projects/pywebtool/?sms_ss=blogger&amp;amp;at_xt=4d1ccf8b638ad5eb%2C0"&gt;pyWeb Literate Programming Tool | Download pyWeb Literate
Programming Tool software for free at
SourceForge.net&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="pyweb-patch-for-c"&gt;
&lt;h2&gt;pyweb-patch-for-c&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-01 02:31:48.402000-05 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I've (finally) updated the pyWeb Literate Programming Tool.&lt;/p&gt;
&lt;p&gt;There were feature requests and bug reports. Much to do. Sadly, I'm
really slow at doing it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://sourceforge.net/projects/pywebtool/?sms_ss=blogger&amp;amp;at_xt=4d1ccf8b638ad5eb%2C0"&gt;pyWeb Literate Programming Tool | Download pyWeb Literate
Programming Tool software for free at
SourceForge.net&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="pyweb-patch-for-c"&gt;
&lt;h2&gt;pyweb-patch-for-c&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-02-01 02:31:48.402000-05:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://itpith.blogspot.com/2011/01/pyweb-patch-for-c.html"&gt;http://itpith.blogspot.com/2011/01/pyweb-patch-for-c.html&lt;/a&gt;
little (limited) workaround&lt;/p&gt;
&lt;p&gt;Excellent tool!! Thanks a lot!
But can you help me...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-29 10:57:10.919000-05:00&lt;/p&gt;
&lt;p&gt;Excellent tool!! Thanks a lot!
But can you help me with one little problem? I want to use it with
C/C++, a special with C-macros which is ended with '\' (backslash). So,
if I use '\' - I get in doc chunk in ONE line, in .H file all is good.
If I use '\\' (2 backslashes), doc looks good but I get in .H file two
ending ('\\').
How to use the tool for C-macros?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>Top Language Skills</title><link href="https://slott56.github.io/2010_12_30-top_language_skills.html" rel="alternate"></link><published>2010-12-30T08:00:00-05:00</published><updated>2010-12-30T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-12-30:/2010_12_30-top_language_skills.html</id><summary type="html">&lt;p&gt;Check out this item on eWeek: &lt;a class="reference external" href="http://www.eweek.com/c/a/Application-Development/Java-C-C-Top-18-Programming-Languages-for-2011-480790/?kc=EWWHNEMNL12272010STR1"&gt;Java, C, C++: Top Programming Languages
for 2011 - Application Development - News &amp;amp; Reviews -
eWeek.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The presentation starts with Java, C, C++, C# -- not surprising.
These are clearly the most popular programming languages. These seem
to be the first choice made by many organizations.&lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this item on eWeek: &lt;a class="reference external" href="http://www.eweek.com/c/a/Application-Development/Java-C-C-Top-18-Programming-Languages-for-2011-480790/?kc=EWWHNEMNL12272010STR1"&gt;Java, C, C++: Top Programming Languages
for 2011 - Application Development - News &amp;amp; Reviews -
eWeek.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The presentation starts with Java, C, C++, C# -- not surprising.
These are clearly the most popular programming languages. These seem
to be the first choice made by many organizations.&lt;/p&gt;
&lt;p&gt;In some cases, it's also the last choice. Many places are simply &amp;quot;All
C#&amp;quot; or &amp;quot;All Java&amp;quot; without any further thought. This parallels the
&amp;quot;All COBOL&amp;quot; mentality that was so pervasive when I started my career.
The &amp;quot;All Singing-All Dancing-All One Language&amp;quot; folks find the most
shattering disruptions when their business is eclipsed by competitors
with language and platform as a technical edge.&lt;/p&gt;
&lt;p&gt;The next tier of languages starts with JavaScript, which is expected.
Just about every web site in common use has some JavaScript
somewhere. Browsers being what they are, there's really no viable
alternative.&lt;/p&gt;
&lt;p&gt;Weirdly, Perl is 6th. I say weirdly because the &lt;a class="reference external" href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"&gt;TIOBE Programming
Community
Index&lt;/a&gt;
puts Perl much further down the popularity list.&lt;/p&gt;
&lt;p&gt;PHP is next. Not surprising.&lt;/p&gt;
&lt;p&gt;Visual Basic weighs in above Python. Being above Python is less weird
than seeing Perl in 6th place. This position is closer to the TIOBE
index. It is distressing to think that VB is still so wildly popular.
I'm not sure what VB's strong suit is. C# seems to have every
possible advantage over VB. Yet, there it is.&lt;/p&gt;
&lt;p&gt;Python and Ruby are the next two. Again, this is more-or-less in the
order I expected to see them. This is is the second tier of
languages: really popular, but not in the same league as Java or one
of the innumerable C variants.&lt;/p&gt;
&lt;p&gt;After this, they list Objective-C as number 11. This language is tied
to Apple's iOS and MacOS platforms, so it's popularity (like C# and
VB) is driven in part by platform popularity.&lt;/p&gt;
&lt;div class="section" id="third-tier"&gt;
&lt;h2&gt;Third Tier&lt;/h2&gt;
&lt;p&gt;Once we get past the top 10 Java/C/C++/C#/Objective C and
PHP/Python/Perl/Ruby/Javascript tier, we get into a third realm of
languages that are less popular, but still garnering a large
community of users.&lt;/p&gt;
&lt;p&gt;ActionScript. A little bit surprising. But -- really -- it fills the
same client-side niche as JavaScript, so this makes sense. Further,
almost all ActionScript-powered pages will also have a little bit of
JavaScript to help launch things smoothly.&lt;/p&gt;
&lt;p&gt;Now we're into interesting -- &amp;quot;perhaps I should learn this next&amp;quot; --
languages: Groovy, Go, Scala, Erlang, Clojure and F#. Notable by
their absence are Haskell, Lua and Lisp. These seem like languages to
learn in order to grab the good ideas that make them both popular and
distinctive from Java or Python.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="also-don-39-t-leave-out-d-and-go-programming-lan"&gt;
&lt;h2&gt;Also, don&amp;amp;#39;t leave out D and Go programming lan...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-02 07:19:50.660000-05:00&lt;/p&gt;
&lt;p&gt;Also, don't leave out D and Go programming languages
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1622265&amp;amp;ns=21324&amp;amp;WT.mc_id=2011-01-02_NL_InformITContent"&gt;http://www.informit.com/articles/article.aspx?p=1622265&amp;amp;ns=21324&amp;amp;WT.mc_id=2011-01-02_NL_InformITContent&lt;/a&gt;
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1623555&amp;amp;ns=21324&amp;amp;WT.mc_id=2011-01-02_NL_InformITContent"&gt;http://www.informit.com/articles/article.aspx?p=1623555&amp;amp;ns=21324&amp;amp;WT.mc_id=2011-01-02_NL_InformITContent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-you-are-interested-in-the-history-of-languages"&gt;
&lt;h2&gt;If you are interested in the history of languages ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-31 10:54:08.707000-05:00&lt;/p&gt;
&lt;p&gt;If you are interested in the history of languages and how they
influenced each other, check out
Influential Programming Languages, Part 1: ALGOL
David Chisnall
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1671636"&gt;http://www.informit.com/articles/article.aspx?p=1671636&lt;/a&gt;
Influential Programming Languages, Part 2: Simula
David Chisnall
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1671637&amp;amp;seqNum=1"&gt;http://www.informit.com/articles/article.aspx?p=1671637&amp;amp;seqNum=1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="C"></category><category term="#python"></category><category term="java"></category><category term="C#"></category><category term="Programming Languages"></category></entry><entry><title>The Anti-IF Campaign</title><link href="https://slott56.github.io/2010_12_27-the_anti_if_campaign.html" rel="alternate"></link><published>2010-12-27T11:48:00-05:00</published><updated>2010-12-27T11:48:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-12-27:/2010_12_27-the_anti_if_campaign.html</id><summary type="html">&lt;p&gt;Check this out: &lt;a class="reference external" href="http://www.antiifcampaign.com/"&gt;http://www.antiifcampaign.com/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm totally in favor of reducing complexity. I've seen too many
places where a &lt;strong&gt;Strategy&lt;/strong&gt; or some other kind of &lt;strong&gt;Delegation&lt;/strong&gt;
design pattern should have been used. Instead a cluster of
if-statements was used. Sometimes these if-statements suffer
copy-and-paste repetition because someone didn't …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check this out: &lt;a class="reference external" href="http://www.antiifcampaign.com/"&gt;http://www.antiifcampaign.com/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm totally in favor of reducing complexity. I've seen too many
places where a &lt;strong&gt;Strategy&lt;/strong&gt; or some other kind of &lt;strong&gt;Delegation&lt;/strong&gt;
design pattern should have been used. Instead a cluster of
if-statements was used. Sometimes these if-statements suffer
copy-and-paste repetition because someone didn't recognize the design
pattern.&lt;/p&gt;
&lt;p&gt;What's important is the the &lt;strong&gt;if&lt;/strong&gt; statement -- in general -- isn't
the issue. The anti-if folks are simply demanding that folks don't
use &lt;strong&gt;if&lt;/strong&gt; as a stand-in for proper polymorphism.&lt;/p&gt;
&lt;div class="section" id="related-issues"&gt;
&lt;h2&gt;Related Issues&lt;/h2&gt;
&lt;p&gt;Related to abuse of the &lt;strong&gt;if&lt;/strong&gt; statement is abuse of the &lt;strong&gt;else&lt;/strong&gt;
clause.&lt;/p&gt;
&lt;p&gt;My pet-peeve is code like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if condition1:
   work
elif condition2:
   work
elif condition3:
   work
else:
   what condition applies here?
&lt;/pre&gt;
&lt;p&gt;When the various conditions share common variables it can be very
difficult to deduce the condition that applies for the &lt;strong&gt;else&lt;/strong&gt;
clause.&lt;/p&gt;
&lt;p&gt;My suggestion is to &lt;strong&gt;Avoid Else&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Write it like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if condition1:
   work
elif condition2:
   work
elif condition3:
   work
elif not (condition1 or condition2 or condition3)
   work
else:
   raise AssertionError( &amp;quot;Oops.  Design Error.  Sorry&amp;quot; )
&lt;/pre&gt;
&lt;p&gt;Then you'll know when you've screwed up.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;]&lt;/p&gt;
&lt;blockquote&gt;
Using an &lt;strong&gt;assert&lt;/strong&gt; coupled with an &lt;strong&gt;else&lt;/strong&gt; clause is a kind of
code-golf optimization that doesn't seem to help much. An &lt;strong&gt;elif&lt;/strong&gt;
will have the same conditional expression as the &lt;strong&gt;assert&lt;/strong&gt; would
have. But the comment did lead to rewriting this to use
AssertionError instead of vague, generic Exception.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="comments"&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class="section" id="how-do-you-feel-about-an-assert-in-the-else-e-g"&gt;
&lt;h3&gt;How do you feel about an assert in the else, e.g. ...&lt;/h3&gt;
&lt;p&gt;Fred&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-23 18:47:19.280000-05:00&lt;/p&gt;
&lt;p&gt;How do you feel about an assert in the else, e.g. assert not (condition1
or condition2 or condition3)? Failed asserts usually mean some kind of
design or logic error (they mean that exactly to me, but opinions vary),
which you indicated in your last mock up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="um-i-thought-everyone-whom-took-cs101-was-taugh"&gt;
&lt;h3&gt;Um... I thought everyone whom took CS101 was taugh...&lt;/h3&gt;
&lt;p&gt;Doug Napoleone&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-25 05:07:08.052000-05:00&lt;/p&gt;
&lt;p&gt;Um... I thought everyone whom took CS101 was taught this when the case
statement was covered.&lt;/p&gt;
&lt;p&gt;To be clear:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rules-for-the-proper-use-of-the-case"&gt;
&lt;h3&gt;Rules for the proper use of the case...&lt;/h3&gt;
&lt;p&gt;Doug Napoleone&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-25 05:12:46.968000-05:00&lt;/p&gt;
&lt;p&gt;To be clear:
Rules for the proper use of the case statement:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;always have a 'default:'&lt;/li&gt;
&lt;/ol&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;2a. if the work in the case statement changes the score state (i.e.&lt;/dt&gt;
&lt;dd&gt;later code is expecting it to have set state to a valid value) then
raise an exception unconditionally as the only work in the default
target. That exception should not be treated as a normal error, but a
development internal error.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;2b. if not, then use an assert in the default target.&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;In either case of 2, have the error or assert contain descriptive text.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(Taken from our coding standards document)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-didn-t-mean-the-assert-as-code-golf-the-ass"&gt;
&lt;h3&gt;I didn't mean the assert as code golf. The ass...&lt;/h3&gt;
&lt;p&gt;Fred&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-28 19:24:26.852000-05:00&lt;/p&gt;
&lt;p&gt;I didn't mean the assert as code golf. The assert has an indication of
&amp;quot;we shouldn't really have to check this, as it's supposed to be
guaranteed true already, but we will anyway&amp;quot;, which isn't as obvious (at
least to me) the other way.&lt;/p&gt;
&lt;p&gt;I do find it useful, moreso in early prototyping, to include the failed
expression as the exception message by default. A generic &amp;quot;internal
error, exiting&amp;quot; message can be shown to the user at a higher level where
AssertionError is caught, rather than coming up with a meaningful
message for each of these explicit raises.&lt;/p&gt;
&lt;p&gt;However, both are very close in any case. (You seemed to acknowledge
this by saying the only difference is in golf.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="anti-if"></category><category term="#python"></category></entry><entry><title>Code Base Fragmentation -- Again</title><link href="https://slott56.github.io/2010_12_14-code_base_fragmentation_again.html" rel="alternate"></link><published>2010-12-14T08:00:00-05:00</published><updated>2010-12-14T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-12-14:/2010_12_14-code_base_fragmentation_again.html</id><summary type="html">&lt;p&gt;Check this out: &amp;quot;&lt;a class="reference external" href="http://pydanny.blogspot.com/2010/12/stupid-template-languages.html"&gt;Stupid Template
Languages&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Love this:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The biggest annoyance I have with smart template
languages (Mako, Genshi, Jinja2, PHP, Perl, ColdFusion, etc) is that
you have the capability to mix core business logic with your end
views, hence violating the rules of Model-View-Controller
architecture.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Yes, too much power …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check this out: &amp;quot;&lt;a class="reference external" href="http://pydanny.blogspot.com/2010/12/stupid-template-languages.html"&gt;Stupid Template
Languages&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Love this:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The biggest annoyance I have with smart template
languages (Mako, Genshi, Jinja2, PHP, Perl, ColdFusion, etc) is that
you have the capability to mix core business logic with your end
views, hence violating the rules of Model-View-Controller
architecture.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Yes, too much power in the template leads to code base fragmentation:
critical information is not in the applications, but is pushed into
the presentation. This also happens with stored procedures and
triggers.&lt;/p&gt;
&lt;p&gt;I love the questions on Stack Overflow (like
&lt;a class="reference external" href="http://stackoverflow.com/questions/2115869/calling-python-function-in-django-template"&gt;this&lt;/a&gt;
one) asking how to do something super-sophisticated in the Django
Template language. And the answer is often &amp;quot;Don't. That's what view
functions are for.&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="actually-it-can-39-t-violate-the-rules-of-model-v"&gt;
&lt;h2&gt;Actually it can&amp;amp;#39;t violate the rules of Model-V...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-15 14:31:59.687000-05:00&lt;/p&gt;
&lt;p&gt;Actually it can't violate the rules of Model-View-Controller, because
Django doesn't implement MVC in the first place. It's some variation of
PMVC or MVP at best.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/1549857/simple-php-mvc-framework"&gt;http://stackoverflow.com/questions/1549857/simple-php-mvc-framework&lt;/a&gt;
And since you are already stretching the definition, I fail to see how
adding real presentation logic is bad. (And said example is not nearly
as bad, btw, as some PHP code *cough* osCommerce *cough*.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="Django"></category><category term="architecture"></category><category term="text-template"></category><category term="jinja"></category><category term="mako"></category></entry><entry><title>The Wrapper vs. Library vs. Aspect Problem</title><link href="https://slott56.github.io/2010_12_09-the_wrapper_vs_library_vs_aspect_problem.html" rel="alternate"></link><published>2010-12-09T08:00:00-05:00</published><updated>2010-12-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-12-09:/2010_12_09-the_wrapper_vs_library_vs_aspect_problem.html</id><summary type="html">&lt;p&gt;Imagine that we've got a collection of applications used by customers to
provide data, a collection of applications we use to collect data from
vendors. We've got a third collection of analytical tools.&lt;/p&gt;
&lt;p&gt;Currently, they share a common database, but the focus, use cases,
and interfaces are different.&lt;/p&gt;
&lt;p&gt;Okay so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine that we've got a collection of applications used by customers to
provide data, a collection of applications we use to collect data from
vendors. We've got a third collection of analytical tools.&lt;/p&gt;
&lt;p&gt;Currently, they share a common database, but the focus, use cases,
and interfaces are different.&lt;/p&gt;
&lt;p&gt;Okay so far? Three closely-related groups or families of
applications.&lt;/p&gt;
&lt;p&gt;We need to introduce a new cross-cutting capability. Let's imagine
that it's something central like using
&lt;a class="reference external" href="http://celeryproject.org/"&gt;celery&lt;/a&gt; to manage long-running batch
jobs. Clearly, we don't want to just hack celery features into all
three families of applications. Do we?&lt;/p&gt;
&lt;div class="section" id="choices"&gt;
&lt;h2&gt;Choices&lt;/h2&gt;
&lt;p&gt;It appears that we have three choices.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A &amp;quot;wrapper&amp;quot; application that unifies all the application families
and provides a new central application. Responsibilities shift to
the new application.&lt;/li&gt;
&lt;li&gt;A site-specific library that layers some common features so that
our various families of applications can be more consistent. This
involves less of a responsibility shift.&lt;/li&gt;
&lt;li&gt;An &amp;quot;aspect&amp;quot; via Aspect-Oriented programming techniques. Perhaps
some additional decorators added to the various applications to
make them use the new functionality in a consistent way.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned"&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;Adding a new application to be an overall wrapper turned out to be a
bad idea. After implementing it, it was difficult to extend. We had
two dimensions of extension.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The workflows in the &amp;quot;wrapper&amp;quot; application needed constant
tweaking as the other applications evolved. Every time we wanted
to add a step, we had to update the real application and also
update the wrapper. Python has a lot of introspection, but these
aren't technical changes, these are user-visible workflow changes.&lt;/li&gt;
&lt;li&gt;Introducing a new data types and file formats was painful. The
responsibility for this is effectively split between the wrapper
and the underlying applications. The wrapper merely serves to
dilute the responsibilities.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="libraries-aspects"&gt;
&lt;h2&gt;Libraries/Aspects&lt;/h2&gt;
&lt;p&gt;It appears that new common features are almost always new aspects of
existing applications.&lt;/p&gt;
&lt;p&gt;What makes this realization painful is the process of retrofitting a
supporting library into multiple, existing applications. It seems
like a lot of cut-and-paste to add the new &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; statements, add
the new decorators and lines of code. However, it's a &lt;em&gt;pervasive&lt;/em&gt;
change. The point is to add the common decorator in all the right
places.&lt;/p&gt;
&lt;p&gt;Trying to &amp;quot;finesse&amp;quot; a pervasive change by introducing a higher-level
wrapper isn't a very good idea.&lt;/p&gt;
&lt;p&gt;A pervasive change is simply a lot of changes and regression tests.
Okay, I'm over it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="API Design"></category><category term="architecture"></category></entry><entry><title>Intuition and Experience</title><link href="https://slott56.github.io/2010_12_07-intuition_and_experience.html" rel="alternate"></link><published>2010-12-07T08:00:00-05:00</published><updated>2010-12-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-12-07:/2010_12_07-intuition_and_experience.html</id><summary type="html">&lt;p&gt;First, read
&lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD800.PDF"&gt;EWD800&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It has harsh things to say about relying on &lt;em&gt;intuition&lt;/em&gt; in
programming.&lt;/p&gt;
&lt;p&gt;Stack Overflow is full of questions where someone takes their
experience with one language and applies it incorrectly and
inappropriately to another language.&lt;/p&gt;
&lt;p&gt;I get email, periodically, also on this subject. I got one recently …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, read
&lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/ewd08xx/EWD800.PDF"&gt;EWD800&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It has harsh things to say about relying on &lt;em&gt;intuition&lt;/em&gt; in
programming.&lt;/p&gt;
&lt;p&gt;Stack Overflow is full of questions where someone takes their
experience with one language and applies it incorrectly and
inappropriately to another language.&lt;/p&gt;
&lt;p&gt;I get email, periodically, also on this subject. I got one recently
on the question of &amp;quot;cast&amp;quot;, &amp;quot;coercion&amp;quot; and &amp;quot;conversion&amp;quot; which I found
incomprehensible for a long time. I had to reread EWD800 to realize
that someone was relying on some sort of vague intuition; it appears
that they were desperate to map Java (or C++) concepts on Python.&lt;/p&gt;
&lt;div class="section" id="casting"&gt;
&lt;h2&gt;Casting&lt;/h2&gt;
&lt;p&gt;In my Python 2.6 book, I use the word &amp;quot;cast&amp;quot; exactly twice. In the
same paragraph. Here they are.&lt;/p&gt;
&lt;blockquote&gt;
This also means the &amp;quot;casting&amp;quot; an object to match the declared type
of a variable isn't meaningful in Python. You don't use C++ or
Java-style casting.&lt;/blockquote&gt;
&lt;p&gt;I though that would be enough information to close the subject. I
guess not. It appears that some folks have some intuition about type
casting that they need to see reflected in other languages, no matter
how inappropriate the concept is.&lt;/p&gt;
&lt;p&gt;The email asked for a &amp;quot;a nice summary with a simple specific example
to hit the point home.&amp;quot;&lt;/p&gt;
&lt;p&gt;It's quite hard to provide an example of something that doesn't
exist. But, I guess, intuition provides a strong incentive to see
things which aren't there. I'm not sure how to word it more strongly
or clearly. I hate to devolve into blow-by-blow comparison between
languages because there are concepts that don't map. I'll work on
being more forceful on casting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coercion"&gt;
&lt;h2&gt;Coercion&lt;/h2&gt;
&lt;p&gt;The words coercion (and coerce) occur more often, since they're
sensible Python concepts. After all, Python 2 has formal type
coercion rules. See &amp;quot;&lt;a class="reference external" href="http://docs.python.org/reference/datamodel.html#coercion-rules"&gt;Coercion
Rules&lt;/a&gt;&amp;quot;.
I guess my summary (&amp;quot;Section 3.4.8 of the Python Language Reference
covers this in more detail; along with the caveat that the Python 2
rules have gotten too complex.&amp;quot;) wasn't detailed or explicit enough.&lt;/p&gt;
&lt;p&gt;The relevant quote from the Language manual is this: &amp;quot;As the language
has evolved, the coercion rules have become hard to document
precisely; documenting what one version of one particular
implementation does is undesirable. Instead, here are some informal
guidelines regarding coercion. In Python 3.0, coercion will not be
supported.&amp;quot;&lt;/p&gt;
&lt;p&gt;I guess I could provide examples of coercion. However, the fact that
it is going to be expunged from the language seems to indicate that
it isn't deeply relevant. It appears that some readers have an
intuition about coercion that requires some kind of additional
details. I guess I have to include the entire quote to dissuade
people from relying on their intuition regarding coercion.&lt;/p&gt;
&lt;p&gt;Further, the request for &amp;quot;a nice summary with a simple specific
example to hit the point home&amp;quot; doesn't fit well with something that
-- in the long run -- is going to be removed. Maybe I'm wrong, but
omitting examples entirely seemed to hit the point home.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conversion"&gt;
&lt;h2&gt;Conversion&lt;/h2&gt;
&lt;p&gt;Conversion gets it's own section, since it's sensible in a Python
context. I kind of thought that a whole section on conversion would
cement the concepts. Indeed, there are (IMO) too many examples of
conversions in the conversion section. But I guess that showing all
of the numeric conversions somehow wasn't enough. I have certainly
failed at least one reader. However, I can't imagine what more could
be helpful, since it is -- essentially -- an exhaustive enumeration
of all conversions for all built-in numeric types.&lt;/p&gt;
&lt;p&gt;What I'm guessing is that (a) there's some lurking intuition and (b)
Python doesn't match that intuition. Hence the question -- in spite
of exhaustively enumerating the conversions. I'm not sure what more
can be done to make the concept clear.&lt;/p&gt;
&lt;p&gt;It appears that all those examples weren't &amp;quot;nice&amp;quot;, &amp;quot;simple&amp;quot; or
&amp;quot;specific&amp;quot; enough. Okay. I'll work on that.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-a-simple-example-something-like-the-following"&gt;
&lt;h2&gt;For a simple example, something like the following...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-08 07:25:31.723000-05:00&lt;/p&gt;
&lt;p&gt;For a simple example, something like the following might be helpful&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; x = 3
&amp;gt;&amp;gt;&amp;gt; print x, type(x)
3
&amp;gt;&amp;gt;&amp;gt; x = float(x)
&amp;gt;&amp;gt;&amp;gt; print x, type(x)
3.0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="you-could-have-a-section-aimed-at-disentangling-th"&gt;
&lt;h2&gt;You could have a section aimed at disentangling th...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-07 23:05:24.537000-05:00&lt;/p&gt;
&lt;p&gt;You could have a section aimed at disentangling the three technical
terms, as they all refer to very similar concepts of &amp;quot;changing the type&amp;quot;
of something. In C++ and Java casting is a way of changing the &lt;em&gt;static&lt;/em&gt;
type to make the compiler happy, but (as noted above) this is irrelevant
to dynamically typed languages. Coercion in Python is a process wherein
the types of some values are implicitly changed to match the
requirements of an operator. Conversion is an &lt;em&gt;explicit&lt;/em&gt; change of type
allowing the programmer to make use of different representations of a
value (string, numeric, boolean) for different purposes.
I bet programmers interchange these three terms when speaking casually,
which adds to the confusion. :P&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="well-cast-and-conversion-don-39-t-seem-so-differ"&gt;
&lt;h2&gt;Well, cast and conversion don&amp;amp;#39;t seem so differ...&lt;/h2&gt;
&lt;p&gt;Michael Foord&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-07 11:13:53.397000-05:00&lt;/p&gt;
&lt;p&gt;Well, cast and conversion don't seem so different in meaning.
As an example, if you have a class that implements __contains__ and it
returns a non-boolean object then it will be changed to a bool. Is this
a cast or a conversion?&lt;/p&gt;
&lt;p&gt;I guess the problem is, as you say, when people take words with a
precise semantic meaning in one language and apply them to another
language where that specific meaning only partly makes sense (or is only
part of the story).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-not-sure-how-to-word-it-more-strongly-or-cle"&gt;
&lt;h2&gt;&amp;amp;quot;not sure how to word it more strongly or cle...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-07 21:08:25.945000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;not sure how to word it more strongly or clearly&amp;quot;
Try something like this
&amp;quot;Since the concept of a declared type of a variable does not exist in
Python, &amp;quot;casting&amp;quot; an object to match the variable data type is
non-sensical. You don't use C++ or Java style casting in Python. This is
a long winded way of saying that Python is a dynamnic language but C++
and Java are not. Also, this is one of the areas where experience with
one langauge may be incorrectly and inappropriately applied to another
language.&amp;quot;
Another possbility is that perhaps you are dealing with a poor student.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>More Open Source and More Agile News</title><link href="https://slott56.github.io/2010_12_02-more_open_source_and_more_agile_news.html" rel="alternate"></link><published>2010-12-02T08:00:00-05:00</published><updated>2010-12-02T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-12-02:/2010_12_02-more_open_source_and_more_agile_news.html</id><summary type="html">&lt;p&gt;ComputerWorld, November 22, 2010, has this: &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/9197420/Open_source_grows_up"&gt;Open Source Grows
Up&lt;/a&gt;&amp;quot;.
The news of the weird is &amp;quot;It's clear that open-source software has moved
beyond the zealotry phase.&amp;quot; I wasn't aware this phase existed. I hope to
see the project plan with &amp;quot;zealotry&amp;quot; in it.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;real&lt;/em&gt; news is &amp;quot;More than …&lt;/p&gt;</summary><content type="html">&lt;p&gt;ComputerWorld, November 22, 2010, has this: &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/9197420/Open_source_grows_up"&gt;Open Source Grows
Up&lt;/a&gt;&amp;quot;.
The news of the weird is &amp;quot;It's clear that open-source software has moved
beyond the zealotry phase.&amp;quot; I wasn't aware this phase existed. I hope to
see the project plan with &amp;quot;zealotry&amp;quot; in it.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;real&lt;/em&gt; news is &amp;quot;More than two-thirds (69%) of the respondents
said they expect to increase their investments in open source.&amp;quot;
That's cool.&lt;/p&gt;
&lt;p&gt;Be sure to read the sidebar &amp;quot;Many Enterprises Aren't Giving Back.&amp;quot;
There's still a lot of concern over intellectual property. I've seen
a lot of corporate software -- it's not that good. Most companies
that are wringing their hands over losing control of their trade
secrets should really be wringing their hands because their in-house
software won't measure up to open-source standards.&lt;/p&gt;
&lt;p&gt;I like this other quote: 'Five years ago, the South Carolina
government was &amp;quot;considering writing a policy to prohibit or at least
'control' open source&amp;quot;.' I like the &amp;quot;Must Control Open Source&amp;quot;
feeling that IT leadership has. Without this mysterious &amp;quot;control&amp;quot;,
the organization could be swamped by software it didn't write. How's
that different from being swamped by software products that involve
contracts and fees? And requires &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Patch_Tuesday"&gt;Patch
Tuesday&lt;/a&gt;?&lt;/p&gt;
&lt;div class="section" id="agility"&gt;
&lt;h2&gt;Agility&lt;/h2&gt;
&lt;p&gt;SD Times has two articles on Agile methods. Both on the front page of
a print publication. That's how you know the technique has &amp;quot;arrived&amp;quot;.&lt;/p&gt;
&lt;p&gt;First, there's &amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/VERSIONONE_SURVEY_FINDS_AGILE_KNOWLEDGE_AND_USE_ON_THE_RISE/By_Katie_Serignese/About_AGILE_and_VERSIONONE/34936"&gt;VersionOne survey finds agile knowledge and use on
the
rise&lt;/a&gt;&amp;quot;.
My favorite quote: &amp;quot;Interestingly, management support, the ability to
change organizational culture and general resistance to change,
remained at the forefronts of participants’ minds when indicating
barriers to further agile adoption.&amp;quot; I like the management barriers.
I like it when management tries to exert more 'control' over a
process (like software creation) that's so poorly understood.&lt;/p&gt;
&lt;p&gt;Here's the companion piece, &amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/link/34886"&gt;For agile success, leaders must let
teams loose&lt;/a&gt;&amp;quot;. This is all good
advice. Particularly, this: '&amp;quot;It’s hard to not command and control,
but leadership is not about managing work. It’s about creating a
capable organization that can manage work,&amp;quot; [Rick Simmons] added.'&lt;/p&gt;
&lt;p&gt;If you're micro-managing, you're not building an organization.
Excellent advice. However, tell that to the financial control crowd.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="budgets-and-control"&gt;
&lt;h2&gt;Budgets and &amp;quot;Control&amp;quot;&lt;/h2&gt;
&lt;p&gt;Finally, be sure to read this by Frank Hayes in ComputerWorld: &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/352786/Big_Projects_Done_Small"&gt;Big
Projects, Done
Small&lt;/a&gt;&amp;quot;.
Here are the relevant quotes: &amp;quot;The logical conclusion: We should
break up all IT projects into sub-million-dollar pieces.&amp;quot; &amp;quot;The
political reality: Everybody wants multimillion-dollar behemoths.&amp;quot;
&amp;quot;...huge projects get big political support.&amp;quot;&lt;/p&gt;
&lt;p&gt;In short, Agile is the right thing to do until you're trying to get
approval. Bottom line: use Agile methods. But for purposes of
pandering to executives who want to see large numbers with lots of
zeroes, it's often necessary to write giant project &amp;quot;plans&amp;quot; that you
don't actually use.&lt;/p&gt;
&lt;p&gt;Go ahead, write waterfall plans. Don't feel guilty or conflicted.
Some folks won't catch up with Agility because they think &amp;quot;Control&amp;quot;
is better. Pander to them. It's okay.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="if-you-really-want-to-get-quot-them-quot-annoyed"&gt;
&lt;h2&gt;If you really want to get &amp;amp;quot;them&amp;amp;quot; annoyed...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-05 08:56:14.240000-05:00&lt;/p&gt;
&lt;p&gt;If you really want to get &amp;quot;them&amp;quot; annoyed, say something like &amp;quot;control is
at best a passing illusion.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-agile-management-an-interview-with-jurgen-appe"&gt;
&lt;h2&gt;On Agile Management: An Interview with Jurgen Appe...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-12-05 09:17:11.760000-05:00&lt;/p&gt;
&lt;p&gt;On Agile Management: An Interview with Jurgen Appelo By Matthew Heusser
- Nov 29, 2010
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1654593&amp;amp;ns=20966&amp;amp;WT.mc_id=2010-12-05_NL_InformITContent"&gt;http://www.informit.com/articles/article.aspx?p=1654593&amp;amp;ns=20966&amp;amp;WT.mc_id=2010-12-05_NL_InformITContent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="software process improvement"></category><category term="agile"></category></entry><entry><title>Questions, or, How to Ask For Help</title><link href="https://slott56.github.io/2010_11_30-questions_or_how_to_ask_for_help.html" rel="alternate"></link><published>2010-11-30T08:00:00-05:00</published><updated>2010-11-30T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-11-30:/2010_11_30-questions_or_how_to_ask_for_help.html</id><summary type="html">&lt;p&gt;Half the fun on Stack Overflow is the endless use of closed-ended
questions. &amp;quot;Can I do this in Python?&amp;quot; being so common and so hilarious.&lt;/p&gt;
&lt;p&gt;The answer is &amp;quot;Yes.&amp;quot; You &lt;em&gt;can&lt;/em&gt; do it.&lt;/p&gt;
&lt;p&gt;Perhaps that's not the question they really meant to ask.&lt;/p&gt;
&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://polaris.gseis.ucla.edu/jrichardson/dis220/openclosed.htm"&gt;Open versus Closed Ended
Questions&lt;/a&gt;&amp;quot;
for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Half the fun on Stack Overflow is the endless use of closed-ended
questions. &amp;quot;Can I do this in Python?&amp;quot; being so common and so hilarious.&lt;/p&gt;
&lt;p&gt;The answer is &amp;quot;Yes.&amp;quot; You &lt;em&gt;can&lt;/em&gt; do it.&lt;/p&gt;
&lt;p&gt;Perhaps that's not the question they really meant to ask.&lt;/p&gt;
&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://polaris.gseis.ucla.edu/jrichardson/dis220/openclosed.htm"&gt;Open versus Closed Ended
Questions&lt;/a&gt;&amp;quot;
for a great list of examples.&lt;/p&gt;
&lt;p&gt;Closed-Ended Questions have short answers, essentially yes or no.
&lt;a class="reference external" href="http://www.mediacollege.com/journalism/interviews/leading-questions.html"&gt;Leading
Questions&lt;/a&gt;
and presuming questions are common variations on this theme. A
closed-ended question is sometimes called &amp;quot;dichotomous&amp;quot; because
there are only two choices. They can also be called &amp;quot;saturated&amp;quot;,
possibly because all the possible answers are laid out in the
question.&lt;/p&gt;
&lt;div class="section" id="asking-questions"&gt;
&lt;h2&gt;Asking Questions&lt;/h2&gt;
&lt;p&gt;The most important part about asking questions is to go through a few
steps of preparation.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt;. Use Google, use the Stack Overflow search. A huge
number of people seem to bang questions into Stack Overflow
without taking the time to see if it's been asked (and answered)
already.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Define Your Goal&lt;/strong&gt;. Seriously. Write down your objective. In
words. Be sure the goal includes an active-voice verb -- something
you want to be able to &lt;strong&gt;do&lt;/strong&gt;. If you want to be able to write
code, write down the words &amp;quot;I want to write code for [X]&amp;quot;. If you
want to be able to tell the difference between two nearly
identical things, write down the words &amp;quot;I want to distinguish [Y]
from [Z]&amp;quot;. When in doubt, use active voice verbs to write down the
thing you want to do. Focus on actions you want to take.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frame Your Question&lt;/strong&gt;. Rewrite your goal into a sentence by
changing the fewest words. 90% of the time, you'll switch &amp;quot;I want
to&amp;quot; to &amp;quot;How do I&amp;quot;. The rest of the time, you'll have to think for
a moment because your goal didn't make sense. If your goal is not
an active-voice verb phrase (something you want to &lt;strong&gt;do&lt;/strong&gt;) then
you'll have trouble with the rewrite.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In some cases, folks will skip one or more steps. Hilarity Ensues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="leading-presuming-questions"&gt;
&lt;h2&gt;Leading/Presuming Questions&lt;/h2&gt;
&lt;p&gt;Another form of closed-ended question is the veiled complaint. &amp;quot;Why
doesn't Python do [X] the way Perl/PHP/Haskell/Java/C# does it?&amp;quot;&lt;/p&gt;
&lt;p&gt;Essentially, this is &amp;quot;my favorite other language has a feature Python
is missing.&amp;quot; The question boils down to, &amp;quot;Why is [Y] not like [Z]?&amp;quot;
Often it's qualified by some feature, but the question is the same:
&amp;quot;Regarding [X], why is Python not like language [Z]?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer is &amp;quot;Because they're different.&amp;quot; The two languages are not
the same, that's why there's a difference.&lt;/p&gt;
&lt;p&gt;This leads to &amp;quot;probing&amp;quot; questions of no real value. &amp;quot;Why did Python
designers decide to leave out [X]&amp;quot; and other variants on this theme.&lt;/p&gt;
&lt;p&gt;If the answer was &amp;quot;Because they're evil gnomes&amp;quot; what does it matter?
If the answer was &amp;quot;because it's inefficient&amp;quot; how does that help?
Feature [X] is still missing, and all the &amp;quot;why?&amp;quot; questions won't
really help add it back into the language.&lt;/p&gt;
&lt;p&gt;It's possible that there's a legitimate question hidden under the
invective. It might be &amp;quot;How do I implement [X] in Python? For
examples, see Perl/PHP/Haskell/Java/C#.&amp;quot; Notice that this question is
transformed into an active-voice verb: &amp;quot;implement&amp;quot;.&lt;/p&gt;
&lt;p&gt;If we look at the three-step question approach above, there's no
active-voice verb behind a &amp;quot;why question&amp;quot;. What you &amp;quot;know&amp;quot; isn't
really all that easy to provide answers for. Knowledge is simply hard
to provide. Questions about what you want to &lt;strong&gt;do&lt;/strong&gt;, are much, much
easier to answer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="probing-confirming-questions"&gt;
&lt;h2&gt;Probing/Confirming Questions&lt;/h2&gt;
&lt;p&gt;One other category are the &amp;quot;questions&amp;quot; that post a pile of details
looking for confirmation. There are three common variations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;. The wealth of detail was overwhelming. I'm a big fan of
the &amp;quot;detail beat-down&amp;quot;. It seems like some folks don't need to
summarize. There appear to be people with massive brains that
don't need models, abstractions or summaries, but are perfectly
capable of coping with endless details. It would be helpful if
these folks could &amp;quot;write down&amp;quot; to those of us with small brains
who need summaries.&lt;/li&gt;
&lt;li&gt;No question at all, or the question is a closed-ended &amp;quot;Do you
agree?&amp;quot; An answer of &amp;quot;No.&amp;quot; is probably not what they wanted. But
what can you do? That's all they asked for.&lt;/li&gt;
&lt;li&gt;Sometimes the question is &amp;quot;Any comments?&amp;quot; This often stems from
having no clear goal. Generally, if you've done a lot of research
and you simply want confirmation, there's no question there. If
you've got doubts, that means you need to do something to correct
the problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's what is really important with &lt;strong&gt;tl;dr&lt;/strong&gt; questions: What do
you want to do?&lt;/p&gt;
&lt;p&gt;80% of the time, it's &amp;quot;Fix my big, complex tl;dr proposal to
correct problem [X].&amp;quot; [X] could be &amp;quot;security&amp;quot; or &amp;quot;deadlock&amp;quot; or
&amp;quot;patent infringement&amp;quot; or &amp;quot;cost overrun&amp;quot; or &amp;quot;testability&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's how to adjust this question from something difficult to answer
to something good.&lt;/p&gt;
&lt;p&gt;You want to know if your tl;dr proposal have problem [X]. You're
really looking for &lt;em&gt;confirmation&lt;/em&gt; that your tl;dr proposal is free
from problem [X]. This is something you want to know -- but knowledge
is not a great goal. It's too hard to guess what you don't know; lots
of answers can provide &lt;em&gt;almost&lt;/em&gt; the right information.&lt;/p&gt;
&lt;p&gt;Reframe your goal: drop knowledge and switch to action. What do you
want to &lt;strong&gt;do&lt;/strong&gt;? You want to show that your tl;dr proposal is free
from problem [X]. So ask that: &amp;quot;&lt;strong&gt;How do I show my tl;dr proposal is
free from problem [X]?&lt;/strong&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Once you write that down, you now have to focus your tl;dr proposal
to get the answer to this question. In many cases, you can pare
things down to some relevant parts that can shown to be free from
problem [X]. In most cases, you'll uncover the problem on your own.
In other cases, you've got a good open-ended question to start a
useful conversation that will give you something you can do.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="how-to-use-dlinq-in-spring-boot-any-source-of-tuto"&gt;
&lt;h2&gt;How to use DLinQ in Spring Boot any source of tuto...&lt;/h2&gt;
&lt;p&gt;Simon Charls&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-11-27 18:36:00.664000-05:00&lt;/p&gt;
&lt;p&gt;How to use DLinQ in Spring Boot any source of tutorial ??&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-have-you-tried-when-you-searched"&gt;
&lt;h2&gt;What have you tried when you searched?&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2020-11-27 18:37:00.025000-05:00&lt;/p&gt;
&lt;p&gt;What have you tried when you searched?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="reverse engineering"></category><category term="analysis"></category><category term="knowledge capture"></category></entry><entry><title>Open-Source, moving from "when" to "how"</title><link href="https://slott56.github.io/2010_11_23-open_source_moving_from_when_to_how.html" rel="alternate"></link><published>2010-11-23T08:00:00-05:00</published><updated>2010-11-23T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-11-23:/2010_11_23-open_source_moving_from_when_to_how.html</id><summary type="html">&lt;p&gt;Interesting item in the November 1 eWeek: &amp;quot;&lt;a class="reference external" href="http://www.eweek.com/c/a/Linux-and-Open-Source/Open-Source-Software-in-the-Enterprise-177312/"&gt;Open-Source Software in the
Enterprise&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's the key quote: &amp;quot;rather than asking if or when, organizations
are increasingly focusing on how&amp;quot;.&lt;/p&gt;
&lt;p&gt;Interestingly, the article then goes on to talk about licensing and
intellectual property management. I suppose those count, but they're
fringe issues …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Interesting item in the November 1 eWeek: &amp;quot;&lt;a class="reference external" href="http://www.eweek.com/c/a/Linux-and-Open-Source/Open-Source-Software-in-the-Enterprise-177312/"&gt;Open-Source Software in the
Enterprise&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's the key quote: &amp;quot;rather than asking if or when, organizations
are increasingly focusing on how&amp;quot;.&lt;/p&gt;
&lt;p&gt;Interestingly, the article then goes on to talk about licensing and
intellectual property management. I suppose those count, but they're
fringe issues, only relevant to lawyers.&lt;/p&gt;
&lt;p&gt;Here's the two real issues:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Configuration Management&lt;/li&gt;
&lt;li&gt;Quality Assurance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many organizations do things so poorly that open source software is
unusable.&lt;/p&gt;
&lt;div class="section" id="configuration-management"&gt;
&lt;h2&gt;Configuration Management&lt;/h2&gt;
&lt;p&gt;Many organizations have non-existent or very primitive CM. They may
have some source code control and some change management. But the
configuration of the test and production technology stacks are
absolutely mystifying. No one can positively say what versions of
what products are in production or in test.&lt;/p&gt;
&lt;p&gt;The funniest conversations center on the interconnectedness of open
source projects. You don't just take a library and plug it in. It's
not like neatly-stacked laundry, all washed and folded and ready to
be used. Open Source software is more like a dryer full of a tangled
collection of stuff that's tied in knots and suffers from major
static cling.&lt;/p&gt;
&lt;p&gt;&amp;quot;How do we upgrade [X]&amp;quot;? You don't simply replace a component. You
create a new tech stack with the upgraded [X] and all of the stuff
that's knotted together with [X].&lt;/p&gt;
&lt;p&gt;Changing from Python 2.5 to 2.6 changes any binary-compiled libraries
like PIL or MySQL_python, mod_wsgi, etc. These, in turn, may require
OS library upgrades.&lt;/p&gt;
&lt;p&gt;A tech stack must be a hallowed thing. Someone must actively manage
change to be sure they're complete and consistent across the
enterprise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quality-assurance"&gt;
&lt;h2&gt;Quality Assurance&lt;/h2&gt;
&lt;p&gt;Many organizations have very weak QA. They have an organization,
but it has no authority and developers are permitted to run
rough-shod over QA any time they use the magic words &amp;quot;the user's
demand it&amp;quot;.&lt;/p&gt;
&lt;p&gt;The truly funny conversations center on how the organization can
be sure that open source software works, or is free of hidden
malware. I've been asked how a client can vet an open source
package to be sure that it is malware free. As if the client's
Windows PC's are pristine works of art and the Apache POI project
is just a logic bomb.&lt;/p&gt;
&lt;p&gt;The idea that you might do acceptance testing on open source software
always seems foreign to everyone involved. You test your in-house
software. Why not test the downloaded software? Indeed, why not test
commercial software for which you pay fees? Why does QA only seem to
apply to in-house software?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="goals-vs-directions"&gt;
&lt;h2&gt;Goals vs. Directions&lt;/h2&gt;
&lt;p&gt;I think one other thing that's endlessly confusing is &amp;quot;Architecture
is a Direction not a Goal.&amp;quot; I get the feeling that many organizations
strive for a crazy level of stability where everything is fixed,
unchanging and completely static (except for patches.)&lt;/p&gt;
&lt;p&gt;The idea that we have systems on a new tech stack and systems on an
old tech stack seems to lead to angry words and stalled projects.
However, there's really no sensible alternative.&lt;/p&gt;
&lt;p&gt;We have tech stack [X.1], [X.2] and [X.3] running in production. We
have [X.4] in final quality assurance testing. We have [X.5] in
development. The legacy servers running version 1 won't be upgraded,
they'll be retired. The legacy servers running version 2 may be
upgraded, depending on the value of the new features vs. the cost of
upgrading. The data in the version 3 servers will be migrated to the
version 4, and the old servers retired.&lt;/p&gt;
&lt;p&gt;It can be complex. The architecture is a direction in which most (but
not all) servers are heading. The architecture changes, and some
servers catch up to the golden ideal and some servers never catch up.
Sometimes the upgrade doesn't create enough value.&lt;/p&gt;
&lt;p&gt;These are &amp;quot;how&amp;quot; questions that are more important than studying the
various licensing provisions.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="one-question-to-ask-clients-is-for-a-road-map-of-t"&gt;
&lt;h2&gt;One question to ask clients is for a road map of t...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-11-30 21:32:37.832000-05:00&lt;/p&gt;
&lt;p&gt;One question to ask clients is for a road map of their environments.
Recently, at a client site, I was asked, what is that?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="#python"></category></entry><entry><title>Software Patents</title><link href="https://slott56.github.io/2010_11_18-software_patents.html" rel="alternate"></link><published>2010-11-18T08:00:00-05:00</published><updated>2010-11-18T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-11-18:/2010_11_18-software_patents.html</id><summary type="html">&lt;p&gt;Here's an interesting news item: &amp;quot;&lt;a class="reference external" href="http://www.nytimes.com/external/gigaom/2010/11/12/12gigaom-red-hats-secret-patent-deal-and-the-fate-of-jboss-98607.html?ref=technology"&gt;Red Hat’s Secret Patent Deal and the
Fate of JBoss
Developers&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's an ancient -- but still relevant -- piece from Tim O'Reilly:
&amp;quot;&lt;a class="reference external" href="http://tim.oreilly.com/patents/index.csp"&gt;Software and Business Method
Patents&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's a great article in Slate on the consequences of software
patents. &amp;quot;&lt;a class="reference external" href="http://www.slate.com/id/2135559/"&gt;Weapons of Business Destruction: How a …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's an interesting news item: &amp;quot;&lt;a class="reference external" href="http://www.nytimes.com/external/gigaom/2010/11/12/12gigaom-red-hats-secret-patent-deal-and-the-fate-of-jboss-98607.html?ref=technology"&gt;Red Hat’s Secret Patent Deal and the
Fate of JBoss
Developers&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's an ancient -- but still relevant -- piece from Tim O'Reilly:
&amp;quot;&lt;a class="reference external" href="http://tim.oreilly.com/patents/index.csp"&gt;Software and Business Method
Patents&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's a great article in Slate on the consequences of software
patents. &amp;quot;&lt;a class="reference external" href="http://www.slate.com/id/2135559/"&gt;Weapons of Business Destruction: How a tiny little
'patent troll' got BlackBerry in a
headlock&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;The biggest issue with software patents is always the &amp;quot;non-obvious&amp;quot;
issue. Generally, this can be debated, so a prior art review is far
more valuable.&lt;/p&gt;
&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://spectrum.ieee.org/computing/software/peer-review-starts-for-software-patent-applications/0"&gt;Peer Review Starts for Software Patent Applications: IEEE
Spectrum talks to the founder to Peer-to-Patent Beth
Noveck&lt;/a&gt;&amp;quot;.
This is where the rubber hits the road.&lt;/p&gt;
&lt;p&gt;To participate, see &lt;a class="reference external" href="http://www.peertopatent.org/"&gt;Peer To
Patent&lt;/a&gt;. Locate prior art and make
patent trolls get real jobs.&lt;/p&gt;
&lt;p&gt;Also, see this: &amp;quot;&lt;a class="reference external" href="http://www.economist.com/node/9719020?story_id=9719020"&gt;A patent improvement: Intellectual property: A new
scheme will solicit comments via the internet to improve the vetting
of patent
applications&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="just-like-we-don-t-want-patents-to-restrict-so"&gt;
&lt;h2&gt;Just like we don't want patents to restrict so...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-11-19 19:27:32.178000-05:00&lt;/p&gt;
&lt;p&gt;Just like we don't want patents to restrict software development, we
don't want companies to restrict the flow of info on the internet. Check
out the article by Tim Berners-Lee in Scientific American titled &amp;quot;Long
Live the Web&amp;quot;
&lt;a class="reference external" href="http://www.scientificamerican.com/article.cfm?id=long-live-the-web"&gt;http://www.scientificamerican.com/article.cfm?id=long-live-the-web&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="justices-to-hear-microsoft-patent-case"&gt;
&lt;h2&gt;Justices to Hear Microsoft Patent Case&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-11-30 21:24:24.731000-05:00&lt;/p&gt;
&lt;p&gt;Justices to Hear Microsoft Patent Case
By REUTERS
Published: November 29, 2010
&lt;a class="reference external" href="http://www.nytimes.com/2010/11/30/technology/30bizcourt.html?ref=technology"&gt;http://www.nytimes.com/2010/11/30/technology/30bizcourt.html?ref=technology&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Hadoop and SQL/Relational Hegemony</title><link href="https://slott56.github.io/2010_11_11-hadoop_and_sqlrelational_hegemony.html" rel="alternate"></link><published>2010-11-11T08:00:00-05:00</published><updated>2010-11-11T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-11-11:/2010_11_11-hadoop_and_sqlrelational_hegemony.html</id><summary type="html">&lt;p&gt;Here's a nice article on why Facebook, Yahoo and eBay use Hadoop:
&amp;quot;&lt;a class="reference external" href="http://www.forbes.com/2010/11/05/facebook-yahoo-ebay-technology-hadoop.html"&gt;Asking Any Question Of All Your
Data&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;The article has one tiny element of pandering to the SQL hegemonists.&lt;/p&gt;
&lt;p&gt;Yes, it sounds like a conspiracy theory, but it seems like there
really are folks who will tell you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a nice article on why Facebook, Yahoo and eBay use Hadoop:
&amp;quot;&lt;a class="reference external" href="http://www.forbes.com/2010/11/05/facebook-yahoo-ebay-technology-hadoop.html"&gt;Asking Any Question Of All Your
Data&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;The article has one tiny element of pandering to the SQL hegemonists.&lt;/p&gt;
&lt;p&gt;Yes, it sounds like a conspiracy theory, but it seems like there
really are folks who will tell you that the relational database is
effectively perfect for all data processing and should not be
questioned. To bolster their point, they often have to conflate all
data processing into one amorphous void. Relational transactions
aren't central to all processing, just certain elements of data
processing. There, I said it.&lt;/p&gt;
&lt;p&gt;Here's the pandering quote: &amp;quot;But this only works if the underlying
data storage and compute engine is powerful enough to operate on a
large dataset in a time-efficient manner&amp;quot;.&lt;/p&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;p&gt;Is he saying that relational databases do not impose the same
constraint?&lt;/p&gt;
&lt;p&gt;Clearly, the RDBMS has the same &amp;quot;catch&amp;quot;. The relational database only
works if &amp;quot;...the underlying data storage and compute engine is
powerful enough to operate on a large dataset in a time-efficient
manner.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="pandering-really"&gt;
&lt;h2&gt;Pandering? Really?&lt;/h2&gt;
&lt;p&gt;Here's why it seems like the article is pandering. Because it worked.
It totally appealed to the target audience. I saw this piece because
a DBA -- a card-carrying member of the SQL Hegemony cabal -- sent me
the link, and highlighted two things. The DBA highlighted the
&amp;quot;powerful enough&amp;quot; quote.&lt;/p&gt;
&lt;p&gt;As if to say, &amp;quot;See, it won't happen any time soon, Hadoop is too
resource intensive to displace the RDBMS.&amp;quot;&lt;/p&gt;
&lt;p&gt;Which appears to assume that the RDBMS isn't resource intensive.&lt;/p&gt;
&lt;p&gt;Further, the DBA had to add the following. &amp;quot;The other catch which is
not stated is the skill level required of the people doing the work.&amp;quot;&lt;/p&gt;
&lt;p&gt;As if to say, &amp;quot;It won't happen any time soon, ordinary programmers
can't understand it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Which appears to assume that ordinary programmers totally understand
SQL and the relational model. If they did understand SQL and the
relational model perfectly, why would we have DBA's? Why would we
have performance tuning? Why would we have DBA's adjusting
normalization to correct application design problems?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="weaknesses"&gt;
&lt;h2&gt;Weaknesses&lt;/h2&gt;
&lt;p&gt;So the weaknesses of Hadoop are that it (a) demands resources and (b)
requires specialized skills. Okay. But isn't that the exact same
weakness as the relational database?&lt;/p&gt;
&lt;p&gt;Which causes me to ask why an article like this has to pander to the
SQL cabal by suggesting that Hadoop requires a big compute engine? Or
is this just my own conspiracy theory?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RDBMS"></category><category term="hadoop"></category><category term="map-reduce"></category></entry><entry><title>Data Mapping and Conversion Tools -- Sigh</title><link href="https://slott56.github.io/2010_11_09-data_mapping_and_conversion_tools_sigh.html" rel="alternate"></link><published>2010-11-09T08:00:00-05:00</published><updated>2010-11-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-11-09:/2010_11_09-data_mapping_and_conversion_tools_sigh.html</id><summary type="html">&lt;p&gt;Yes, ETL is interesting and important.&lt;/p&gt;
&lt;p&gt;But creating a home-brewed data mapping and conversion tool isn't
interesting or important. Indeed, it's just an attractive nuisance.
Sure, it's fun, but it isn't valuable work. The world doesn't need
another ETL tool.&lt;/p&gt;
&lt;p&gt;The core problem is talking management (and other developers) into …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yes, ETL is interesting and important.&lt;/p&gt;
&lt;p&gt;But creating a home-brewed data mapping and conversion tool isn't
interesting or important. Indeed, it's just an attractive nuisance.
Sure, it's fun, but it isn't valuable work. The world doesn't need
another ETL tool.&lt;/p&gt;
&lt;p&gt;The core problem is talking management (and other developers) into a
change of course. How do we stop development of Yet Another ETL Tool
(YAETLT)?&lt;/p&gt;
&lt;p&gt;First, there's products like
&lt;a class="reference external" href="http://www.talend.com/index.php"&gt;Talend&lt;/a&gt;,
&lt;a class="reference external" href="http://www.cloveretl.com/products/community-edition"&gt;CloverETL&lt;/a&gt;
and &lt;a class="reference external" href="http://www.pentaho.com/products/data_integration/"&gt;Pentaho&lt;/a&gt;
open source data integration. Open Source. ETL. Done.&lt;/p&gt;
&lt;p&gt;Then, there's this list of &lt;a class="reference external" href="http://www.manageability.org/blog/stuff/open-source-etl"&gt;Open Source ETL
products&lt;/a&gt;
on the Manageability blog. This list all Java, but there's nothing
wrong with Java. There are a lot of jumping-off points in this list.
Most importantly, the world doesn't need another ETL tool.&lt;/p&gt;
&lt;p&gt;Here's a piece on &lt;a class="reference external" href="http://www.information-management.com/issues/20060601/1088417-1.html"&gt;Open Source
BI&lt;/a&gt;,
just to drive the point home.&lt;/p&gt;
&lt;div class="section" id="business-rules"&gt;
&lt;h2&gt;Business Rules&lt;/h2&gt;
&lt;p&gt;The ETL tools must have rules. Either simple field alignment or more
complex transformations. The rules can either be interpreted
(&amp;quot;engine-based&amp;quot; ETL) or used to build a stand-alone program
(&amp;quot;code-generating&amp;quot; ETL).&lt;/p&gt;
&lt;p&gt;The engine-based ETL, when written in Java, is creepy. We have a JVM
running a Java app. The Java app is an interpreter for a bunch of ETL
rules. Two levels of interpreter. Why?&lt;/p&gt;
&lt;p&gt;Code-generating ETL, OTOH, is a huge pain in the neck because you
have to produce reasonably portable code. In Java, that's hard. Your
rules are used to build Java code; the resulting Java code can be
compiled and run. And it's often very efficient. [Commercial products
often produce portable C (or COBOL) so that they can be very
efficient. That's really hard to do well.]&lt;/p&gt;
&lt;p&gt;Code-generating, BTW, has an additional complication. Bad Behavior.
Folks often tweak the resulting code. Either because the tool wasn't
able to generate all the proper nuances, or because the
tool-generated code was inefficient in a way that's so grotesque that
it couldn't be fixed by an optimizing compiler. It happens that we
can have rules that run afoul of the boilerplate loops.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="old-school-architecture"&gt;
&lt;h2&gt;Old-School Architecture&lt;/h2&gt;
&lt;p&gt;First, we need to focus on the &amp;quot;TL&amp;quot; part of ETL. Our applications
receive files from our customers. We don't do the extract -- they do.
This means that each file we receive has a unique and distinctive
&amp;quot;feature&amp;quot;. We have a clear SoW and examples. That doesn't help. Each
file is an experiment in novel data formatting and &lt;a class="reference external" href="http://www.springerlink.com/content/vq07h7701u11852p/"&gt;Semantic
Heterogeneity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common old-school design pattern for this could be called &amp;quot;The ETL
Two-Step&amp;quot;. This design breaks the processing into &amp;quot;T&amp;quot; and &amp;quot;L&amp;quot;
operations. There are lots of unique, simple, &amp;quot;T&amp;quot; options, one per
distinctive file format. The output from &amp;quot;T&amp;quot; is a standardized file.
A simple, standardized &amp;quot;L&amp;quot; loads the database from the standardized
file.&lt;/p&gt;
&lt;p&gt;Indeed, if you follow the &lt;strong&gt;ETL Two Step&lt;/strong&gt; carefully, you don't need
to actually write the &amp;quot;L&amp;quot; pass at all. You prepare files which your
RDBMS utilities can simply load. So the ETL boils down to &amp;quot;simple&amp;quot;
transformation from input file to output file.&lt;/p&gt;
&lt;p&gt;Folks working on YAETLT have to focus on just the &amp;quot;T&amp;quot; step. Indeed,
they should be writing Yet Another Transformation Tool (YATT) instead
of YAETLT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-the-python"&gt;
&lt;h2&gt;Enter the Python&lt;/h2&gt;
&lt;p&gt;If all we're doing is moving data around, what's involved?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import csv
result = {
  'column1': None,
  'colmnn2': None,
  # etc.
}
with open(&amp;quot;source&amp;quot;,&amp;quot;rb&amp;quot;) as source:
  rdr= csv.DictReader( source )
  with open( &amp;quot;target&amp;quot;,&amp;quot;wb&amp;quot;) as target:
      wtr= csv.DictWriter( target, result.keys() )
      for row in rdr:
          result['column1']= row['some_column']
          result['column2']= some_func( row['some_column'] )
          # etc.
          wtr.writerow( result )
&lt;/pre&gt;
&lt;p&gt;That's really about it. There appear to be 6 or 7 lines of overhead.
The rest is working code.&lt;/p&gt;
&lt;p&gt;But let's not be too dismissive of the overhead. An ETL depends on
the file format, summarized in the import statement. With a little
care we can produce libraries similar to Python's csv that work with
XLS directly, as well as XLSX and other formats. Dealing with
COBOL-style fixed layout files can also be boiled down to an
importable module. The import isn't overhead; it's a central part of
the rules.&lt;/p&gt;
&lt;p&gt;The file open functions could be seen as overhead. Do we really need
a full line of code when we could -- more easily -- read from stdin
and write to stdout? If we're willing to endure the inefficiency of
processing one input file multiple times to create several
standardized outputs, then we could eliminate the two with
statements. If, however, we have to merge several input files to
create a standardized output file, the one-in-one-out model breaks
down and we need the with statements and the open functions.&lt;/p&gt;
&lt;p&gt;The for statement could be seen as needless overhead. It goes without
saying that we're processing the entire input file. Unless, of
course, we're merging several files. Then, perhaps, it's not a simple
loop that can be somehow implied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-just-code"&gt;
&lt;h2&gt;It's Just Code&lt;/h2&gt;
&lt;p&gt;The point of Python-based ETL is that the problem &amp;quot;solved&amp;quot; by YATT
isn't that interesting. Python is an excellent transformation engine
ETL. Rather than write a fancy rule interpreter, just write Python.
Done.&lt;/p&gt;
&lt;p&gt;We don't need a higher-level data transformation engine written in
Java. Emit simple Python code and use the Python engine. (We could
try to emit Java code, but it's not as simple and requires a rather
complex supporting library. Python's &lt;a class="reference external" href="http://www.voidspace.org.uk/python/articles/duck_typing.shtml"&gt;Duck
Typing&lt;/a&gt;
simplifies the supporting library.)&lt;/p&gt;
&lt;p&gt;If we don't write a new transformation engine, but use Python, that
leaves a tiny space left over for the YATT: producing the ETL rules
in Python notation. Rather than waste time writing another engine,
the YATT developers could create a GUI that drags and drops column
names to write the assignment statements in the body of the loop.&lt;/p&gt;
&lt;p&gt;That's right, the easiest part of the Python loop is what we can
automate. Indeed, that's about all we can automate. Everything else
requires complex coding that can't be built as &amp;quot;drag-and-drop&amp;quot;
functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="transformations"&gt;
&lt;h2&gt;Transformations&lt;/h2&gt;
&lt;p&gt;There are several standard transformations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Column order or name changes. Trivial assignment statements handle
this.&lt;/li&gt;
&lt;li&gt;Mapping functions. Some simple (no hysteresis, idempotent)
function is applied to one or more columns to produce one or more
columns. This can be as simple as a data type conversion, or a
complex calculation.&lt;/li&gt;
&lt;li&gt;Filter. Some simple function is used to include or exclude rows.&lt;/li&gt;
&lt;li&gt;Reduction. Some summary (sum, count, min, max, etc.) is applied to
a collection of input rows to create output rows. This is an ideal
spot for Python generator functions. But there's rarely a simple
drag-n-drop for these kinds of transformations.&lt;/li&gt;
&lt;li&gt;Split. One file comes in, two go out. This breaks the
stdin-to-stdout assumption.&lt;/li&gt;
&lt;li&gt;Merge. Two go in, one comes out. This breaks the stdin-to-stdout
assumption, also. Further, the matching can be of several forms.
There's the multi-file merge when several similarly large files
are involved. There's the lookup merge when a large file is merged
with smaller files. Merging also applies to doing key lookups
required to match natural keys to locate database FK's.&lt;/li&gt;
&lt;li&gt;Normalization (or Distinct Processing). This is a more subtle form
of filter because the function isn't idempotent; it depends on the
state of a database or output file. We include the first of many
identical items; we exclude the subsequent copies. This is also an
ideal place for Python generator functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of these, only the first three are candidates for drag-and-drop.
And for mapping and filtering, we either need to write code or
have a huge library of pre-built mapping and filtering functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problems-and-solutions"&gt;
&lt;h2&gt;Problems and Solutions&lt;/h2&gt;
&lt;p&gt;The YATT problem has two parts. Creating the rules and executing the
rules.&lt;/p&gt;
&lt;p&gt;Writing another engine to execute the rules is a bad idea. Just
generate Python code. It's a delightfully simple language for
describing data transformation. It already works.&lt;/p&gt;
&lt;p&gt;Writing a tool to create rules is a bad idea. Just write the Python
code and call it the rule set. Easy to maintain. Easy to test. Clear,
complete, precise.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="by-chance-i-was-looking-at-what-etl-tools-had-to"&gt;
&lt;h2&gt;By chance, I was looking at what ETL tools had to ...&lt;/h2&gt;
&lt;p&gt;AB&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-11-10 06:43:22.749000-05:00&lt;/p&gt;
&lt;p&gt;By chance, I was looking at what ETL tools had to offer yesterday. At
first glance, it seems &lt;a class="reference external" href="http://pyfproject.org/"&gt;PyF&lt;/a&gt; is your kind of
system. Rules in Python; GUI to plug Python rules together if you need
it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ETL"></category><category term="#python"></category></entry><entry><title>Pythonic vs. "Clean"</title><link href="https://slott56.github.io/2010_11_04-pythonic_vs_clean.html" rel="alternate"></link><published>2010-11-04T08:00:00-04:00</published><updated>2010-11-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-11-04:/2010_11_04-pythonic_vs_clean.html</id><summary type="html">&lt;p&gt;This provokes thought:
&amp;quot;&lt;a class="reference external" href="http://nedbatchelder.com/blog/201011/pythonic.html"&gt;Pythonic&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Why does Python have a &amp;quot;Pythonic&amp;quot; style? Why not &amp;quot;clean&amp;quot;?&lt;/p&gt;
&lt;p&gt;Is it these lines from Tim Peters' &amp;quot;The Zen of Python&amp;quot; (a/k/a import
this)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/p&gt;
&lt;p&gt;Although that way may not be obvious …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This provokes thought:
&amp;quot;&lt;a class="reference external" href="http://nedbatchelder.com/blog/201011/pythonic.html"&gt;Pythonic&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Why does Python have a &amp;quot;Pythonic&amp;quot; style? Why not &amp;quot;clean&amp;quot;?&lt;/p&gt;
&lt;p&gt;Is it these lines from Tim Peters' &amp;quot;The Zen of Python&amp;quot; (a/k/a import
this)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/p&gt;
&lt;p&gt;Although that way may not be obvious at first unless you're Dutch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perhaps having a &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;, a
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Guido_van_Rossum"&gt;BDFL&lt;/a&gt; (and
&lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0401/"&gt;FLUFL&lt;/a&gt;) means that
there's a certain &amp;quot;pressure&amp;quot; to conform?&lt;/p&gt;
&lt;p&gt;Or do we have higher standards than other languages? Or less
intellectual diversity?&lt;/p&gt;
&lt;p&gt;I think that &amp;quot;pythonic&amp;quot; is just a catchy phrase that rolls off the
tongue. I think a similar concept exists in all languages, but there
isn't a good phrase for it in most other languages. Although Ned
Batchelder has some really good suggestions. (Except for C++, which
should be &amp;quot;C-Posh-Posh&amp;quot; for really good coding style.)&lt;/p&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;When I was a COBOL programmer, there were two buzz-phrases used.
&amp;quot;Clean&amp;quot; and &amp;quot;Structured&amp;quot;. Clean was poorly-defined and really just a
kind of cultural norm. In those days, each shop had a different
opinion of &amp;quot;clean&amp;quot; and the lack of widespread connectivity meant that
each shop had a more-or-less unique style. Indeed, as a traveling
consultant, I helped refine and adjust those standards because of the
wide variety of code I saw in my travels.&lt;/p&gt;
&lt;p&gt;&amp;quot;Structured&amp;quot; is pretty much an absolute. Each GOTO-like thing had to
be reworked as properly nested IFs or PERFORMs. No real issue there.
Except from folks who argued that &amp;quot;Structured&amp;quot; was slower than
non-Structured. A load of malarkey, but one I heard remarkably often.&lt;/p&gt;
&lt;p&gt;When I was a Fortran (and Ada) programmer, I worked for the military
in which there were simply absolute standards for every feature of
the source code. Boring. And no catchy buzz-word. Just &amp;quot;Compliant&amp;quot; or
&amp;quot;Wrong&amp;quot;.&lt;/p&gt;
&lt;p&gt;Since it was the early '90's (and we were sequestered) we didn't have
much Internet access. Once in a while we'd have internal discussions
on style where the details weren't covered by any standard. Not
surprisingly, they amounted to &amp;quot;&lt;a class="reference external" href="http://codegolf.com/"&gt;Code Golf&lt;/a&gt;&amp;quot;
questions. Ada has to be perfectly clear, which can be verbose, and
some folks don't like clarity.&lt;/p&gt;
&lt;p&gt;When I become a C programmer, I found a Thomas Plum's &lt;a class="reference external" href="http://www.amazon.com/Reliable-Data-Structures-Thomas-Plum/dp/091153704X"&gt;Reliable Data Structures in C&lt;/a&gt;.
That provided a really good set of standards. The buzzword I used was
&amp;quot;Reliable&amp;quot;.&lt;/p&gt;
&lt;p&gt;The problem with C programming is that &amp;quot;Clean&amp;quot; and &amp;quot;Code Golf&amp;quot; get
conflated all the time. Folks write the craziest crap, claim it's
&amp;quot;clean&amp;quot; and ignore the resulting obscurity. Sigh. I wish folks with
stick with &amp;quot;Reliable&amp;quot; or &amp;quot;Maintainable&amp;quot; rather than &amp;quot;Clean&amp;quot;.&lt;/p&gt;
&lt;p&gt;While doing Perl programming I noticed that some folks didn't seem to
realize the golden rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;No One Wins At Code Golf&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I don't know why. Other than to think that some folks felt that Perl
programs weren't &amp;quot;real&amp;quot; programs. They were just &amp;quot;scripts&amp;quot; and could
be treated with a casual contempt.&lt;/p&gt;
&lt;p&gt;When I learned Java, I noted that an objective was to have a syntax
that was familiar. It was a stated goal to have the Java style
guidelines completely overlap with C and C++ style guidelines. Fair
enough. Doesn't solve the &amp;quot;Code Golf&amp;quot; vs. &amp;quot;Clean&amp;quot; problem. But it
doesn't confound it with another syntax, either.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;From this history, I think that &amp;quot;Pythonic&amp;quot; exists because we have a
BDFL with high standards.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>"Might Be Misleading" is misleading</title><link href="https://slott56.github.io/2010_11_02-might_be_misleading_is_misleading.html" rel="alternate"></link><published>2010-11-02T08:00:00-04:00</published><updated>2010-11-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-11-02:/2010_11_02-might_be_misleading_is_misleading.html</id><summary type="html">&lt;p&gt;My books (&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/nonprogrammer.html#book-nonprogrammer"&gt;Building Skills in
Programming&lt;/a&gt;,
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html#book-python"&gt;Building Skills in
Python&lt;/a&gt;
and &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/oodesign.html#book-oodesign"&gt;Building Skills in OO
Design&lt;/a&gt;)
develop a steady stream of email. [Also, as a side note, I need to move
them to the me.com server, Apple is decommissioning the homepage.mac.com
domain.]&lt;/p&gt;
&lt;p&gt;The mail falls into several …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My books (&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/nonprogrammer.html#book-nonprogrammer"&gt;Building Skills in
Programming&lt;/a&gt;,
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html#book-python"&gt;Building Skills in
Python&lt;/a&gt;
and &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/oodesign.html#book-oodesign"&gt;Building Skills in OO
Design&lt;/a&gt;)
develop a steady stream of email. [Also, as a side note, I need to move
them to the me.com server, Apple is decommissioning the homepage.mac.com
domain.]&lt;/p&gt;
&lt;p&gt;The mail falls into several buckets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;. Always a delight. Keep 'em coming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestions&lt;/strong&gt;. These are suggestions for new topics. Recently, I've
had a few requests for Python 3 coverage. I'm working with a
publisher on this, and hope -- before too long -- to have real news.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corrections&lt;/strong&gt;. I get a &lt;em&gt;lot&lt;/em&gt; of these. A lot. Keep 'em coming. I
didn't pay a copy editor; I tried to do it myself. It's hard and I
did a poor job. More valuable than spelling corrections are technical
corrections. (I'm happy to report that I don't get as many of these.)
Technical corrections are the most serious kind of correction and I
try to fix those as quickly as possible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source Code Requests&lt;/strong&gt;. No. I don't supply any source. If I send
you the source, what skill did you build? Asking for source? Not a
skill that has much value, IMHO. If you want to learn to program, you
have to create the source yourself. That &lt;em&gt;is&lt;/em&gt; the job. Sorry for
making you work, but you have to &lt;em&gt;actually&lt;/em&gt; do the work. There's no
royal road to programming.&lt;/p&gt;
&lt;div class="section" id="the-other-bucket"&gt;
&lt;h2&gt;The &amp;quot;Other&amp;quot; Bucket&lt;/h2&gt;
&lt;p&gt;I get some emails that I file under &amp;quot;other&amp;quot; because they're so funny.
They have the following boilerplate.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Code fragment [X] might is misleading because [Y].&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;First, it's a complaint, not a question. That's not very helpful.
That's just complaining. Without a suggested improvement, it's the
worst kind of bare negativity.&lt;/p&gt;
&lt;p&gt;The best part is that — without exception — the person sending the
email was not mislead. They correctly understood the code examples.&lt;/p&gt;
&lt;p&gt;Clearly, the issue isn't that the code is &amp;quot;misleading&amp;quot; in the usual
sense of &amp;quot;lying&amp;quot; or &amp;quot;mendacious&amp;quot;. If it was actually misleading, then
(a) they wouldn't have understood it and (b) there'd be a proper
question instead of a complaint.&lt;/p&gt;
&lt;p&gt;Since they correctly understood it, what's misleading?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="user-interface-reviews"&gt;
&lt;h2&gt;User Interface Reviews&lt;/h2&gt;
&lt;p&gt;In software development, we used to go through the &amp;quot;misleading&amp;quot;
crap-ola in user interface reviews. In non-Agile (&amp;quot;waterfall&amp;quot;)
development, we have to get every nuance, every aspect, every feature
of the UI completely specified before we can move on. Everyone has to
hand-wring over every word, every font choice, field order, button
placement, blah, blah and blah.&lt;/p&gt;
&lt;p&gt;It seems like 80% of the comments are &amp;quot;label [X] might be
misleading&amp;quot;. The least useful comment, of course, is this sort of
comment with no suggestion. The least useful reviewer is the person
who (1) provides a negative comment and, when asked for an
improvement, (2) calls a meeting of random people to come up with
replacement text.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;Hint: If you eventually understood the misleading label, please
state your understanding in your own words. Often, hilarity ensues
when their stated understanding cycles back to the original label.&lt;/em&gt;]&lt;/p&gt;
&lt;p&gt;The &amp;quot;label [X] might be misleading&amp;quot; comment is — perhaps — the most
expensive nuisance comment ever. Projects wind up spinning through
warrens of rat-holes chasing down some verbiage that is acceptable.
After all, you can't go over the waterfall until the entire UI is
specified, right?&lt;/p&gt;
&lt;p&gt;Worse, of course, the best sales people do not interpose themselves
into the sales process. They connect prospective customers with
products (or services). Really excellent sales people can have
trouble making suggestions. Their transparency is what makes them
good. It's not sensible demanding suggestions from them.&lt;/p&gt;
&lt;p&gt;Underneath a &amp;quot;Might Be Misleading&amp;quot; comment, the person complaining
completely understood the label. They were not &lt;em&gt;actually&lt;/em&gt; mislead at
all. If it was misleading, then (a) they wouldn't have understood it
and (b) there'd be a proper question instead of a complaint.&lt;/p&gt;
&lt;p&gt;Thank goodness for Agile product owners who can discard the bad kind
of negativity. The right thing to do is put a UI in front of more
than one user and bypass the negativity with a consensus that the UI
actually is usable and isn't really misleading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="might-be-misleading"&gt;
&lt;h2&gt;Might Be Misleading&lt;/h2&gt;
&lt;p&gt;The &amp;quot;Might be Misleading&amp;quot; comments are often code-speak for &amp;quot;I don't
like it because...&amp;quot; And the reason why is often &amp;quot;because I had to
think.&amp;quot; I know that thinking is bad.&lt;/p&gt;
&lt;p&gt;I understand that Krug's famous &lt;a class="reference external" href="http://www.sensible.com/"&gt;Don't Make me
Think&lt;/a&gt; is the benchmark in usability.
And I totally agree that some thinking is bad.&lt;/p&gt;
&lt;p&gt;There are two levels of thinking.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thinking about the problem.&lt;/li&gt;
&lt;li&gt;Thinking about the UI and how the UI models the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Krug's advice is clear. Don't make users think about the UI and how
the UI models the problem. Users still have to think about the
problem itself.&lt;/p&gt;
&lt;p&gt;In the case of UI labels which &amp;quot;Might Be Misleading&amp;quot;, we have to
figure out if it's the problem or the UI that folks are complaining
about. In many cases, parts of the problem are actually hard and no
amount of UI fixup can ever make the problem easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="not-completely-accurate"&gt;
&lt;h2&gt;Not Completely Accurate&lt;/h2&gt;
&lt;p&gt;One of the most common UI label complaints is that the label isn't
&amp;quot;completely&amp;quot; accurate. They seem to object to fact that a UI label
can only contain a few words and they have to actually &lt;em&gt;understand&lt;/em&gt;
the few words. I assume that folks who complain about UI labels also
complain about light switches having just &amp;quot;on&amp;quot; and &amp;quot;off&amp;quot; as labels.
Those labels aren't &amp;quot;completely&amp;quot; accurate. It should say &amp;quot;power on&amp;quot;.
Indeed it should say &amp;quot;110V AC power connected&amp;quot;. Indeed it should say
&amp;quot;110V AC power connected through load&amp;quot;. Indeed it should say &amp;quot;110V AC
15 A power connected via circuit labeled #4 through load with
ground&amp;quot;.&lt;/p&gt;
&lt;p&gt;Apparently this is news. &lt;strong&gt;Labels are Summaries&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;No label can be &amp;quot;completely&amp;quot; accurate. You heard it here first. Now
that you've been notified, you can stop complaining about labels
which &amp;quot;might be misleading because they're not completely accurate.&amp;quot;
They can't be &amp;quot;completely&amp;quot; accurate unless the label recapitulates
the entire problem domain description and all source code leading to
the value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apologies"&gt;
&lt;h2&gt;Apologies&lt;/h2&gt;
&lt;p&gt;In too many cases of &amp;quot;Might Be Misleading,&amp;quot; people are really
complaining that they don't like the UI label (or the code example)
because the problem itself is hard. I'm sympathetic that the problem
domain is hard and requires thinking.&lt;/p&gt;
&lt;p&gt;Please, however, don't complain about what &amp;quot;Might Be Misleading&amp;quot;.
Please try to focus on &amp;quot;Actually Is Misleading.&amp;quot;&lt;/p&gt;
&lt;p&gt;Before complaining, please clarify your understanding.&lt;/p&gt;
&lt;p&gt;Here's the rule. &lt;strong&gt;If you eventually understood it, it may be that
the problem itself is hard&lt;/strong&gt;. If the problem is hard, fixing the
label isn't going to help, is it?&lt;/p&gt;
&lt;p&gt;If the problem is hard, you have to think. Some days are like that.
The UI designer and I apologize for making you think. Can we move on
now?&lt;/p&gt;
&lt;p&gt;If the label (or example) really is &lt;strong&gt;wrong&lt;/strong&gt;, and you can correct
it, that's a good thing. Figure out what is actually misleading.
Supply the correction. Try to escalate &amp;quot;Might Be Misleading&amp;quot; to
&amp;quot;Actually Mislead Someone&amp;quot;. Specifics matter.&lt;/p&gt;
&lt;p&gt;Also, please remember that labels are summaries. At some point,
details must be elided. If you have trouble with the concept of
&amp;quot;summary&amp;quot;, you can do this. (1) Write down &lt;strong&gt;all&lt;/strong&gt; the details that
you understand. Omit nothing. (2) Rank the details in order of
importance. (3) Delete words to pare the description down to an
appropriate length to fit in the UI. When you're done, you have a
suggestion.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>Code Base Fragmentation</title><link href="https://slott56.github.io/2010_10_21-code_base_fragmentation.html" rel="alternate"></link><published>2010-10-21T08:00:00-04:00</published><updated>2010-10-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-10-21:/2010_10_21-code_base_fragmentation.html</id><summary type="html">&lt;p&gt;Here's what I love -- an argument that can only add cost and complexity
to a project.&lt;/p&gt;
&lt;p&gt;It sounds like this to me: &amp;quot;We need to fragment the code base into
several different languages. Some of the application programming
simply &lt;strong&gt;must&lt;/strong&gt; be written in a language that's poorly-understood,
with tools that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's what I love -- an argument that can only add cost and complexity
to a project.&lt;/p&gt;
&lt;p&gt;It sounds like this to me: &amp;quot;We need to fragment the code base into
several different languages. Some of the application programming
simply &lt;strong&gt;must&lt;/strong&gt; be written in a language that's poorly-understood,
with tools that are not widely available, and supported by a select
few individuals that have exclusive access to this code. We haven't
benchmarked the technical benefit.&amp;quot;&lt;/p&gt;
&lt;p&gt;Further, we'll create complex organizational roadblocks in every
single project around this obscure, specialized, hard-to-support
language.&lt;/p&gt;
&lt;p&gt;Perhaps I'm wrong, but database triggers always seem to create more
problems than they solve.&lt;/p&gt;
&lt;div class="section" id="they-totally-solve-a-problem"&gt;
&lt;h2&gt;They Totally Solve a Problem&lt;/h2&gt;
&lt;p&gt;The most common argument boils down to application-specific
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Aspect-oriented_programming"&gt;cross-cutting
concerns&lt;/a&gt;.
The claim is that these concerns (logging, validation, data model
integrity, whatever) can only be solved with triggers. For some
reason, though, these cross-cutting concerns can't be solved through
ordinary software design. I'm not sure why triggers are the only
solution when simple OO design would be far simpler.&lt;/p&gt;
&lt;p&gt;Some folks like to adopt the &amp;quot;multiple application programming
languages&amp;quot; argument. That is, that ordinary OO design won't work
because the code would have to be repeated in each language. This is
largely bunk. It's mostly folks scent-marking territory and refusing
to cooperate.&lt;/p&gt;
&lt;p&gt;Step 1. Write a library and share it. It's hard to find a language
that can't be used to write a sharable library. It's easy to find an
organization where the Visual C# programmers are not on speaking
terms with the Java programmers and the isolated Python folks are
pariahs. This isn't technology. Any one of the languages can create
the necessary shared library. A modicum of &lt;em&gt;cooperation&lt;/em&gt; would be
simpler than creating triggers.&lt;/p&gt;
&lt;p&gt;Step 2. Get over it. &amp;quot;Duplicated&amp;quot; business logic is rampant in most
organizations. Now that you know about, you can manage it. You don't
need to add Yet Another Language to the problem. Just &lt;em&gt;cooperate&lt;/em&gt; to
propagate the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="they-re-totally-essential-to-the-database"&gt;
&lt;h2&gt;They're Totally Essential To The Database&lt;/h2&gt;
&lt;p&gt;The silly argument is that some business rules are &amp;quot;closer to&amp;quot; or
&amp;quot;essential to&amp;quot; the database. The reason I can call this silly is
because when the data is converted to another database (or extracted
to the data warehouse) the triggers aren't relevant or even needed.
If the triggers aren't part of &amp;quot;interpreting&amp;quot; or &amp;quot;using&amp;quot; the data,
they aren't essential. They're just convenient.&lt;/p&gt;
&lt;p&gt;The data really &lt;strong&gt;is&lt;/strong&gt; separate from the processing. And the data is
far, far more valuable than the processing. The processing really
&lt;strong&gt;is&lt;/strong&gt; mostly application-specific. Any processing that isn't
specific to the application really &lt;strong&gt;is&lt;/strong&gt; a cross-cutting concern
(see above). There is no &amp;quot;essential&amp;quot; processing that's magically part
of the data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if"&gt;
&lt;h2&gt;What If...&lt;/h2&gt;
&lt;p&gt;Life is simpler if all application programming is done in application
programming languages. And all triggers are just methods in classes.
And everyone just uses the class library they're supposed to use.&lt;/p&gt;
&lt;p&gt;&amp;quot;But what if someone doesn't use the proper library? A trigger would
magically prevent problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;If someone refuses to use the application libraries, they need career
coaching. As in &amp;quot;find another job where breaking the rules is
tolerated.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="thanks-robert"&gt;
&lt;h2&gt;Thanks, Robert.&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-25 23:54:32.457000-04:00&lt;/p&gt;
&lt;p&gt;Thanks, Robert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unrelated-but-your-book-building-skills-in-python"&gt;
&lt;h2&gt;Unrelated, but your book Building Skills in Python...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-25 04:36:30.479000-04:00&lt;/p&gt;
&lt;p&gt;Unrelated, but your book Building Skills in Python doesn't use Python 3.
Are you going to update it for Python 3 anytime soon? I'd love to learn
Python and I like your approach. I especially like that you are going to
be using 'casino games' problems. IMO, they provide a good mix of
challenge without being too complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="all-i-can-say-is-that-using-triggers-is-equivalent"&gt;
&lt;h2&gt;All I can say is that using triggers is equivalent...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-21 18:35:01.429000-04:00&lt;/p&gt;
&lt;p&gt;All I can say is that using triggers is equivalent to relying on side
effects.&lt;/p&gt;
&lt;p&gt;If side effects don't turn you off, how about the mutating table issue ?
Would you take medicine that had side effects and caused mutations ?
You say that you have a strong physical constitution and can handle the
medicine. Well, can you mental constitution handle it ?&lt;/p&gt;
&lt;p&gt;In Oracle, the manual explicitly states that it does not gurantee the
execution order of certain triggers. So, your program now becomes
non-deterministic. Yah, I know, deterministic software is for wimps.
Also, haven forbid if you ask for documentation about the triggers. If
you really want to blow their mind, generate some UML state charts for
the triggers.&lt;/p&gt;
&lt;p&gt;Oh, and before I forget, lets not forget about trying to test and debug
w/ all these triggers firing all over the place. Yah, I know, you like a
good challenge.&lt;/p&gt;
&lt;p&gt;Well, enough ranting. In my career, each and everytime that I have had
serious issues at a client site, its always been because of triggers.
One last thing, if you are an advanced Oracle user, you can take a walk
on the wild side and use &amp;quot;instead of triggers&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="try-posting-the-quot-unrelated-quot-python-post"&gt;
&lt;h2&gt;Try posting the &amp;amp;quot;unrelated&amp;amp;quot; Python post ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-25 21:37:14.514000-04:00&lt;/p&gt;
&lt;p&gt;Try posting the &amp;quot;unrelated&amp;quot; Python post in the following Google group
&lt;a class="reference external" href="http://groups.google.com/group/building-skills-books?hl=en"&gt;http://groups.google.com/group/building-skills-books?hl=en&lt;/a&gt;
Steve uses the above Google group to support his books.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-an-interesting-discussing-on-this-trigger-stuf"&gt;
&lt;h2&gt;For an interesting discussing on this trigger stuf...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-21 18:39:24.577000-04:00&lt;/p&gt;
&lt;p&gt;For an interesting discussing on this trigger stuff, check out &amp;quot;Database
Triggers - Good, Bad, Ugly?&amp;quot; by &amp;quot;Joel on Software&amp;quot;
&lt;a class="reference external" href="http://discuss.fogcreek.com/joelonsoftware2/default.asp?cmd=show&amp;amp;ixPost=67962"&gt;http://discuss.fogcreek.com/joelonsoftware2/default.asp?cmd=show&amp;amp;ixPost=67962&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="triggers"></category><category term="database design"></category></entry><entry><title>Technical Debt</title><link href="https://slott56.github.io/2010_10_19-technical_debt.html" rel="alternate"></link><published>2010-10-19T08:00:00-04:00</published><updated>2010-10-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-10-19:/2010_10_19-technical_debt.html</id><summary type="html">&lt;p&gt;Love this from Gartner. &amp;quot;&lt;a class="reference external" href="http://www.gartner.com/it/page.jsp?id=1439513"&gt;Gartner Estimates Global 'IT Debt' to Be $500
Billion This Year, with Potential to Grow to $1 Trillion by
2015&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;NetworkWorld ran a quicky version of the story. Gartner: &lt;a class="reference external" href="http://www.networkworld.com/news/2010/092310-global-it-debt.html"&gt;Global 'IT
debt' hits $500 billion, on the way to $1
trillion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ComputerWorld -- to be proper journalists …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Love this from Gartner. &amp;quot;&lt;a class="reference external" href="http://www.gartner.com/it/page.jsp?id=1439513"&gt;Gartner Estimates Global 'IT Debt' to Be $500
Billion This Year, with Potential to Grow to $1 Trillion by
2015&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;NetworkWorld ran a quicky version of the story. Gartner: &lt;a class="reference external" href="http://www.networkworld.com/news/2010/092310-global-it-debt.html"&gt;Global 'IT
debt' hits $500 billion, on the way to $1
trillion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ComputerWorld -- to be proper journalists -- have to get a balancing
quote. Their version of the story is this: &lt;a class="reference external" href="http://www.computerworld.com/s/article/352022/Gartner_Warns_of_App_Maintenance_Debt_?intsrc=print_latest"&gt;Gartner warns of app
maintenance
'debt'&lt;/a&gt;.
The balancing quote is the following:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;There are many good reasons to NOT upgrade/modernize many
applications, and I believe Gartner is out of line using words
like 'debt' which have guilt associated with them,&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;&amp;quot;Guilt&amp;quot;? That's a problem? Why are we pandering to an organization's
(i.e., CIO's) emotional response?&lt;/p&gt;
&lt;p&gt;I'm not sure that using a word like &amp;quot;debt&amp;quot; is a problem. Indeed, I
think they should ramp up the threat level on this and add words like
&amp;quot;short-sighted&amp;quot; and &amp;quot;daft&amp;quot; and perhaps even &amp;quot;idiotic&amp;quot;.&lt;/p&gt;
&lt;p&gt;Anyone who doesn't believe (or doesn't understand) technical debt
needs only to review the Y2K plans and budgets. A bad technology
decision lead to a mountain of rework. Yes, it was all successful,
but it made IT budgeting difficult for years afterwords.&lt;/p&gt;
&lt;p&gt;The rest of the organization was grumpy about having their projects
were stalled until after Y2K. IT created it's own problems by letting
the technology debt accumulate to a level where it was &amp;quot;fix or face
an unacceptable risk of not being able to stay in business.&amp;quot;&lt;/p&gt;
&lt;p&gt;How many other latent Y2K-like problems are companies ignoring?&lt;/p&gt;
</content><category term="Technologies"></category><category term="refactoring"></category><category term="software process improvement"></category><category term="agile"></category><category term="architecture"></category></entry><entry><title>NoSQL -- Old Wine, New Bottle</title><link href="https://slott56.github.io/2010_10_18-nosql_old_wine_new_bottle.html" rel="alternate"></link><published>2010-10-18T10:15:00-04:00</published><updated>2010-10-18T10:15:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-10-18:/2010_10_18-nosql_old_wine_new_bottle.html</id><summary type="html">&lt;p&gt;Got an email with links about NoSQL. Links like &amp;quot;&lt;a class="reference external" href="http://msdn.microsoft.com/en-us/magazine/ee310029.aspx"&gt;Going NoSQL with
MongoDB&lt;/a&gt;&amp;quot;.
This -- like many such articles -- includes the phrase &amp;quot;the NoSQL
movement&amp;quot; as if there's something new going on. Thank goodness Ted
Neward includes quotes around &amp;quot;new&amp;quot;. This isn't new. And doubly good,
Neward doesn't use words like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Got an email with links about NoSQL. Links like &amp;quot;&lt;a class="reference external" href="http://msdn.microsoft.com/en-us/magazine/ee310029.aspx"&gt;Going NoSQL with
MongoDB&lt;/a&gt;&amp;quot;.
This -- like many such articles -- includes the phrase &amp;quot;the NoSQL
movement&amp;quot; as if there's something new going on. Thank goodness Ted
Neward includes quotes around &amp;quot;new&amp;quot;. This isn't new. And doubly good,
Neward doesn't use words like &amp;quot;excitement&amp;quot;.&lt;/p&gt;
&lt;p&gt;Some folks like to link to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/NoSQL"&gt;http://en.wikipedia.org/wiki/NoSQL&lt;/a&gt;. This
is misleading, of course, since avoiding SQL isn't new or even that
interesting. If you're going to treat avoiding SQL specially, then
you should have a NoProceduralProgramming, NoFunctionalProgramming,
NoAssembler, NoShellScript and NoHTML movements, also.&lt;/p&gt;
&lt;p&gt;Why stop there? Why not have a &lt;strong&gt;NoDumbAssArchitecture&lt;/strong&gt; movement,
too?&lt;/p&gt;
&lt;p&gt;If you want to see dumb, breathless stuff, however, use Google and
search for &amp;quot;nosql excitement&amp;quot;. You'd think that the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/File_system"&gt;file
system&lt;/a&gt; was new
technology. In particular, posts like &amp;quot;&lt;a class="reference external" href="http://java.dzone.com/news/nosql-movement-excited"&gt;NOSQL Movement - Excited with
the coexistence of Divergent
Thoughts&lt;/a&gt;&amp;quot; seem
silly.&lt;/p&gt;
&lt;p&gt;Unless -- I guess -- you've been solving all data management problems
with a relational database. I guess when you discover that you don't
have to use the hammer, then it's exciting to see that everything
isn't simply a nail, either.&lt;/p&gt;
&lt;p&gt;If avoiding the hegemony of SQL seems important, or even interesting,
perhaps you've been living in a cave. Seriously. The file system has
always been there and has always worked nicely for lots of problems.
My 2002-era Ralph Kimball Data Warehouse Toolkit books are very clear
that large, high-volume data warehouses are mostly flat files. Data
marts are SQL databases suitable for ad-hoc SQL queries. But the
RDBMS isn't always the best place for large volumes of data.&lt;/p&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;NoSQL isn't new or even very interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consequences"&gt;
&lt;h2&gt;Consequences&lt;/h2&gt;
&lt;p&gt;If you're an architect, but you're not looking at alternatives to the
RDBMS -- and running benchmarks to compare the choices -- you're not
really doing architectural work. You're probably a glorified
programmer and should consider working in a place that doesn't stifle
you by imposing a &amp;quot;one world -- one architecture&amp;quot; viewpoint.&lt;/p&gt;
&lt;p&gt;If you're a manager and think that &amp;quot;everything in SQL&amp;quot; is a
risk-reducer, you need to actually talk to your people. If you think
that your people's skills are limited to SQL, you're doing your team
(and your customers) a disservice. Consider a skill upgrade of your
own. Your team can learn other non-RDBMS technologies. Perhaps you
should stop stifling them.&lt;/p&gt;
&lt;p&gt;If you're a DBA and you know -- for a fact -- that the relational
database is perfect and complete, you should perhaps pause a moment
and consider things the relational databases don't do well.
Graph-theory problems and hierarchies require fairly complex
workarounds. Even a many-to-many relationship requires this extra
association table. Perhaps those things are the signs of
force-fitting data into the RDBMS model.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="nosql-is-a-marketing-brand-not-a-technology-or-ar"&gt;
&lt;h2&gt;NoSQL is a marketing brand, not a technology or ar...&lt;/h2&gt;
&lt;p&gt;Bill Karwin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-27 13:36:31.339000-04:00&lt;/p&gt;
&lt;p&gt;NoSQL is a marketing brand, not a technology or architecture term. All
the hype and &amp;quot;newness&amp;quot; and &amp;quot;excitement&amp;quot; makes more sense if you view it
in this context.&lt;/p&gt;
&lt;p&gt;As for many-to-many tables, this is not a good example of
&amp;quot;force-fitting&amp;quot;.&lt;/p&gt;
&lt;p&gt;Take for example regular expressions. Making a regular expression to
match any problem you throw at it is really easy! Here it is: .*
The hard part is making a regular expression that matches your valid
input, but also rejects invalid input.
So it is with relational databases. Accept valid input, reject invalid
input.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nosql-means-not-only-sql-so-it-39-s-not-about-a"&gt;
&lt;h2&gt;NoSQL means Not Only SQL. So, it&amp;amp;#39;s not about a...&lt;/h2&gt;
&lt;p&gt;Luca Bruno&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-28 14:00:49.129000-04:00&lt;/p&gt;
&lt;p&gt;NoSQL means Not Only SQL. So, it's not about avoiding SQL, it's about
enhancing data management with a different approach when it makes sense.
It's about integration.&lt;/p&gt;
&lt;p&gt;Big Data and NoSQL March to the Enterprise
By GARY...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-11-01 12:21:28.428000-04:00&lt;/p&gt;
&lt;p&gt;Big Data and NoSQL March to the Enterprise
By GARY ORENSTEIN of GigaOm
Published: October 30, 2010
url:
&lt;a class="reference external" href="http://www.nytimes.com/external/gigaom/2010/10/30/30gigaom-big-data-and-nosql-march-to-the-enterprise-73963.html?ref=technology"&gt;http://www.nytimes.com/external/gigaom/2010/10/30/30gigaom-big-data-and-nosql-march-to-the-enterprise-73963.html?ref=technology&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Notes from A NOSQL Evening in Palo Alto
DateThurs...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-30 15:11:42.222000-04:00&lt;/p&gt;
&lt;p&gt;Notes from A NOSQL Evening in Palo Alto
DateThursday, October 28, 2010 at 10:35AM
url:
&lt;a class="reference external" href="http://highscalability.com/blog/2010/10/28/notes-from-a-nosql-evening-in-palo-alto.html"&gt;http://highscalability.com/blog/2010/10/28/notes-from-a-nosql-evening-in-palo-alto.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="snowflake-data-warehouse"&gt;
&lt;h2&gt;Snowflake data warehouse&lt;/h2&gt;
&lt;p&gt;Lafay Tech Plaza&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-08-13 10:55:17.852000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.indiumsoftware.com/data-warehouse-services/"&gt;Snowflake data
warehouse&lt;/a&gt;
is a cloud-based data warehouse that uses a unique data model optimized
to manage both structured and unstructured data at scale. It
dramatically simplifies ETL processes, allowing users to focus on data
modeling and business insights.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="noSQL"></category><category term="database design"></category><category term="SQL"></category></entry><entry><title>Real Security Models</title><link href="https://slott56.github.io/2010_10_14-real_security_models.html" rel="alternate"></link><published>2010-10-14T07:46:00-04:00</published><updated>2010-10-14T07:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-10-14:/2010_10_14-real_security_models.html</id><summary type="html">&lt;p&gt;Lots of folks like to wring their hands over the Big Vague Concept
(BVC™) labeled &amp;quot;security&amp;quot;.&lt;/p&gt;
&lt;p&gt;There's a lot of quibbling. Let's move beyond BVC to the interesting
stuff.&lt;/p&gt;
&lt;p&gt;I've wasted hours listening to people identify risks and costs of
something that's not very complex. I've been plagued by folks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lots of folks like to wring their hands over the Big Vague Concept
(BVC™) labeled &amp;quot;security&amp;quot;.&lt;/p&gt;
&lt;p&gt;There's a lot of quibbling. Let's move beyond BVC to the interesting
stuff.&lt;/p&gt;
&lt;p&gt;I've wasted hours listening to people identify risks and costs of
something that's not very complex. I've been plagued by folks
throwing up the &amp;quot;We don't know what we don't know&amp;quot; objection to a web
services interface. This objection amounts to &amp;quot;We don't know every
possible vulnerability; therefore we don't know how to secure it;
therefore all architectures are bad and we should stop development
right now!&amp;quot; The &lt;a class="reference external" href="http://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;OWASP top-ten
list&lt;/a&gt;,
for some reason, doesn't sway them into thinking that security is
actually manageable.&lt;/p&gt;
&lt;p&gt;What's more interesting than quibbling over BVC, is determining the
authorization rules.&lt;/p&gt;
&lt;div class="section" id="basics"&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Two of the pillars of security are Authentication (who are you?) and
Authorization (what are you allowed to do?)&lt;/p&gt;
&lt;p&gt;Authentication is not something to be invented. It's something to be
used. In our case, with an Apache/Django application, the Django
authentication system works nicely for identity management. It
supports a simple model of users, passwords and profiles.&lt;/p&gt;
&lt;p&gt;We're moving to &lt;a class="reference external" href="https://opensso.dev.java.net/"&gt;Open SSO&lt;/a&gt;. This
takes identity management out of Django.&lt;/p&gt;
&lt;p&gt;The point is that authentication is -- largely -- a solved problem.
Don't invent. It's solved and it's easy to get wrong. Download or
License an established product for identity management&lt;/p&gt;
&lt;p&gt;and use it for all authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authorization"&gt;
&lt;h2&gt;Authorization&lt;/h2&gt;
&lt;p&gt;The Authorization problem is always more nuanced, and more
interesting, than Authentication. Once we know who the user is, we
still have to determine what they're really allowed to do. This
varies a lot. A small change to the organization, or a business
process, can have a ripple effect through the authorization rules.&lt;/p&gt;
&lt;p&gt;In the case of Django, there is a &amp;quot;low-level&amp;quot; set of authorization
tests that can be attached to each view function. Each
&lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/ref/models/options/"&gt;model&lt;/a&gt;
has an implicit set of three permissions (can_add, can_delete and
can_change). Each view function can test to see if the current user
has the required permission. This is done through a simple
&lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/auth/#the-permission-required-decorator"&gt;permission_required&lt;/a&gt;
decorator on each view function.&lt;/p&gt;
&lt;p&gt;However, that's rarely enough information for practical — and nuanced
— problems.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users"&gt;auth profile
module&lt;/a&gt;
can be used to provide additional authorization information. In our
case, we just figured out that we have some &amp;quot;big picture&amp;quot;
authorizations. For sales and marketing purposes, some clusters of
features are identified as &amp;quot;products&amp;quot; (or &amp;quot;features&amp;quot; or &amp;quot;options&amp;quot; or
something). They aren't smallish things like Django models. They
aren't largish things like whole sites. They're intermediate things
based on what customers like to pay for (and not pay for).&lt;/p&gt;
&lt;p&gt;Some of these &amp;quot;features&amp;quot; map to Django applications. That's easy. The
application view functions can all simply refuse to work if the
user's contract doesn't include the option.&lt;/p&gt;
&lt;p&gt;Sadly, however, some &amp;quot;features&amp;quot; are part of an application. Drat. We
have two choices here.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Assure that there's a &amp;quot;default&amp;quot; option and configure the feature
or the default at run time. For a simple class (or even a simple
module) this isn't too hard. Picking a class to instantiate at run
time is pretty standard OO programming.&lt;/li&gt;
&lt;li&gt;Rewrite the application to refactor it into two applications: the
standard version and the optional version. This can be hard when
the feature shows up as one column in a displayed list of objects
or one field in a form showing object details. However, it's very
Django to have applications configured dynamically in the settings
file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our current structure is simple: all customers get all applications.
We have to move away from that to mix-and-match applications on a
per-customer basis. And Django supports this elegantly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-in-depth"&gt;
&lt;h2&gt;Security In Depth&lt;/h2&gt;
&lt;p&gt;This leads us to the &amp;quot;Defense in Depth&amp;quot; buzzword bingo. We have SSL.
We have SSO. We have high-level &amp;quot;product&amp;quot; authorizations. We have
fine-grained Django model authorizations.&lt;/p&gt;
&lt;p&gt;So far, all of this is done via Django group memberships, allowing us
to tweak permissions through the auth module. Very handy. Very nice.
And we didn't invent anything new.&lt;/p&gt;
&lt;p&gt;All we invented was our high-level &amp;quot;product&amp;quot; authorization. This is a
simple many-to-many relationship between the Django Profile model and
a table of license terms and conditions with expiration dates.&lt;/p&gt;
&lt;p&gt;Django rocks. The nuanced part is fine-tuning the available bits and
pieces to match the marketing and sales pitch and the the legal terms
and conditions in the contracts and statements of work.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;What about &lt;a class="reference external" href="http://forgerock.com/"&gt;http://forgerock.com/&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="opensso-express"&gt;
&lt;h2&gt;OpenSSO Express...&lt;/h2&gt;
&lt;p&gt;Rudiger Wolf&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-14 19:30:45.179000-04:00&lt;/p&gt;
&lt;p&gt;What about &lt;a class="reference external" href="http://forgerock.com/"&gt;http://forgerock.com/&lt;/a&gt;?
OpenSSO Express has been removed for download from Oracle's website,
leaving users of the community version of what was Sun's single sign-on
platform to either, build their own version from source code, or to go
to a third party. Norwegian company ForgeRock has stepped in and
released OpenAM, based on OpenSSO source code.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Django"></category><category term="#python"></category><category term="security"></category></entry><entry><title>.xlsm and .xlsx Files -- Finally Reaching Broad Use</title><link href="https://slott56.github.io/2010_10_04-xlsm_and_xlsx_files_finally_reaching_broad_use.html" rel="alternate"></link><published>2010-10-04T08:00:00-04:00</published><updated>2010-10-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-10-04:/2010_10_04-xlsm_and_xlsx_files_finally_reaching_broad_use.html</id><summary type="html">&lt;p&gt;For years, I've been using &lt;a class="reference external" href="http://poi.apache.org/"&gt;Apache POI&lt;/a&gt; in
Java and &lt;a class="reference external" href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;XLRD&lt;/a&gt; in Python
to read spreadsheets. Finally, now that .XLSX and .XLSM files are in
more widespread use, we can move away from those packages and their
reliance on successful reverse engineering of undocumented features.&lt;/p&gt;
&lt;p&gt;Spreadsheets are -- BTW -- the universal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For years, I've been using &lt;a class="reference external" href="http://poi.apache.org/"&gt;Apache POI&lt;/a&gt; in
Java and &lt;a class="reference external" href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;XLRD&lt;/a&gt; in Python
to read spreadsheets. Finally, now that .XLSX and .XLSM files are in
more widespread use, we can move away from those packages and their
reliance on successful reverse engineering of undocumented features.&lt;/p&gt;
&lt;p&gt;Spreadsheets are -- BTW -- the universal user interface. Everyone
likes them, they're almost inescapable. And they work. There's no
reason to attempt to replace the spreadsheet with a web page or a
form or a desktop application. It's easier to cope with
spreadsheet vagaries than to replace them.&lt;/p&gt;
&lt;p&gt;The downside is, of course, that users often tweak their
spreadsheets, meaning that you never have a truly &amp;quot;stable&amp;quot;
interface. However, transforming each row of data into a Python
dictionary (or Java mapping) often works out reasonably well to
make your application mostly immune to the common spreadsheet
tweaks.&lt;/p&gt;
&lt;p&gt;Most of the .XLSX and .XLSM spreadsheets we process can be
trivially converted to CSV files. It's manual, yes, but a quick
audit can check the counts and totals.&lt;/p&gt;
&lt;p&gt;Yesterday we got an .XLSM with over 80,000 plus rows. It couldn't
be trivially converted to CSV by my installation of Excel.&lt;/p&gt;
&lt;p&gt;What to do?&lt;/p&gt;
&lt;div class="section" id="python-to-the-rescue"&gt;
&lt;h2&gt;Python to the Rescue&lt;/h2&gt;
&lt;p&gt;Step 1. Read the standards. Start with the Wikipedia article: &amp;quot;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Office_Open_XML"&gt;Open
Office XML&lt;/a&gt;&amp;quot;. Move
to the &lt;a class="reference external" href="http://www.ecma-international.org/publications/standards/Ecma-376.htm"&gt;ECMA
376&lt;/a&gt;
standard.&lt;/p&gt;
&lt;p&gt;Step 2. It's a zip archive. So, to process the file, we need to
locate the various bits inside the archive. In many cases, the zip
members can be processed &amp;quot;in memory&amp;quot;. In the case of our 80,000+ row
spreadsheet, the archive is 34M. The sheet in question expands to a
215M beast. The shared strings are 3M. This doesn't easily fit into
memory.&lt;/p&gt;
&lt;p&gt;Further, a simple DOM parser, like Python's excellent
&lt;a class="reference external" href="http://docs.python.org/library/xml.etree.elementtree.html"&gt;ElementTree&lt;/a&gt;,
won't work on files this huge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expanding-an-xlsx-or-xlsm-file"&gt;
&lt;h2&gt;Expanding an XLSX or XLSM file&lt;/h2&gt;
&lt;p&gt;Here's step 2. Expanding the zip archive to locate the shared strings
and sheets.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import zipfile
def get_worksheets(name):
    arc= zipfile.ZipFile( name, &amp;quot;r&amp;quot; )
    member= arc.getinfo(&amp;quot;xl/sharedStrings.xml&amp;quot;)
    arc.extract( member )
    for member in arc.infolist():
        if member.filename.startswith(&amp;quot;xl/worksheets&amp;quot;) and member.filename.endswith('.xml'):
            arc.extract(member)
            yield member.filename
&lt;/pre&gt;
&lt;p&gt;This does two things. First, it locates the shared strings and the
various sheets within the zip archive. Second, it expands the sheets
and shared strings into the local working directory.&lt;/p&gt;
&lt;p&gt;There are many other parts to the workbook archive. The good news is
that we're not interesting in complex workbooks with lots of cool
Excel features. We're interested in workbooks that are basically
file-transfer containers. Usually a few sheets with a consistent
format.&lt;/p&gt;
&lt;p&gt;Once we have the raw files, we have to parse the shared strings
first. Then we can parse the data. Both of these files are simple
XML. However, they don't fit in memory. We're forced to use SAX.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-parse-the-strings"&gt;
&lt;h2&gt;Step 3 -- Parse the Strings&lt;/h2&gt;
&lt;p&gt;Here's a SAX ContentHandler that finds the shared strings.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import xml.sax
import xml.sax.handler

class GetStrings( xml.sax.handler.ContentHandler ):
    &amp;quot;&amp;quot;&amp;quot;Locate Shared Strings.&amp;quot;&amp;quot;&amp;quot;
    def __init__( self ):
        xml.sax.handler.ContentHandler.__init__(self)
        self.context= []
        self.count= 0
        self.string_dict= {}
    def path( self ):
        return [ n[1] for n in self.context ]
    def startElement( self, name, attrs ):
        print( &amp;quot;***Non-Namespace Element&amp;quot;, name )
    def startElementNS( self, name, qname, attrs ):
        self.context.append( name )
        self.buffer= &amp;quot;&amp;quot;
    def endElementNS( self, name, qname ):
        if self.path() == [u'sst', u'si', u't']:
            self.string_dict[self.count]= self.buffer
            self.buffer= &amp;quot;&amp;quot;
            self.count += 1
        while self.context[-1] != name:
            self.context.pop(-1)
        self.context.pop(-1)
 def characters( self, content ):
        if self.path() == [u'sst', u'si', u't']:
            self.buffer += content
&lt;/pre&gt;
&lt;p&gt;This handler collects the strings into a simple dictionary, keyed by
their relative position in the XML file.&lt;/p&gt;
&lt;p&gt;This handler is used as follows.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
string_handler= GetStrings()
rdr= xml.sax.make_parser()
rdr.setContentHandler( string_handler )
rdr.setFeature( xml.sax.handler.feature_namespaces, True )
rdr.parse( &amp;quot;xl/sharedStrings.xml&amp;quot; )
&lt;/pre&gt;
&lt;p&gt;We create the handler, create a parser, and process the shared
strings portion of the workbook. When this is done, the handler has a
dictionary of all strings. This is string_handler.string_dict. Note
that a &lt;a class="reference external" href="http://docs.python.org/library/shelve.html"&gt;shelve&lt;/a&gt;
database could be used if the string dictionary was so epic that it
wouldn't fit in memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-final-countdown"&gt;
&lt;h2&gt;The Final Countdown&lt;/h2&gt;
&lt;p&gt;Once we have the shared strings, we can then parse each worksheet,
using the share string data to reconstruct a simple CSV file (or JSON
document or something more usable).&lt;/p&gt;
&lt;p&gt;The Content Handler for the worksheet isn't too complex. We only want
cell values, so there's little real subtlety. The biggest issue is
coping with the fact that sometimes the content of a tag is reported
in multiple parts.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class GetSheetData( xml.sax.handler.ContentHandler ):
    &amp;quot;&amp;quot;&amp;quot;Locate column values.&amp;quot;&amp;quot;&amp;quot;
    def __init__( self, string_dict, writer ):
        xml.sax.handler.ContentHandler.__init__(self)
        self.id_pat = re.compile( r&amp;quot;(\D+)(\d+)&amp;quot; )
        self.string_dict= string_dict
        self.context= []
        self.row= {}
        self.writer= writer
    def path( self ):
        return [ n[1] for n in self.context ]
    def startElement( self, name, attrs ):
        print( &amp;quot;***Non-Namespace Element&amp;quot;, name )
    def startElementNS( self, name, qname, attrs ):
        self.context.append( name )
        if name[1] == &amp;quot;row&amp;quot;:
            self.row_num = attrs.getValueByQName(u'r')
        elif name[1] == &amp;quot;c&amp;quot;:
            if u't' in attrs.getQNames():
                self.cell_type = attrs.getValueByQName(u't')
            else:
                self.cell_type = None # defult, not a string
            self.cell_id = attrs.getValueByQName(u'r')
            id_match = self.id_pat.match( self.cell_id )
            self.row_col = self.make_row_col( id_match.groups() )
        elif name[1] == &amp;quot;v&amp;quot;:
            self.buffer= &amp;quot;&amp;quot; # Value of a cell
        else:
            pass # might do some debugging here.
    &amp;#64;staticmethod
    def make_row_col( col_row_pair ):
        col = 0
        for c in col_row_pair[0]:
            col = col*26 + (ord(c)-ord(&amp;quot;A&amp;quot;)+1)
        return int(col_row_pair[1]), col-1
    def endElementNS( self, name, qname ):
        if name[1] == &amp;quot;row&amp;quot;:
            # write the row to the CSV result file.
            self.writer.writerow( [ self.row.get(i) for i in xrange(max(self.row.keys())) ] )
            self.row= {}
        elif name[1] == &amp;quot;v&amp;quot;:
            if self.cell_type is None:
                try:
                    self.value= float( self.buffer )
                except ValueError:
                    print( self.row_num, self.cell_id, self.cell_type, self.buffer )
                    self.value= None
            elif self.cell_type == &amp;quot;s&amp;quot;:
                try:
                    self.value= self.string_dict[int(self.buffer)]
                except ValueError:
                    print( self.row_num, self.cell_id, self.cell_type, self.buffer )
                    self.value= None
            elif self.cell_type == &amp;quot;b&amp;quot;:
                self.value= bool(self.buffer)
            else:
                print( self.row_num, self.cell_id, self.cell_type, self.buffer, self.string_dict.get(int(self.buffer)) )
                self.value= None
            self.row[self.row_col[1]] = self.value
            while self.context[-1] != name:
                self.context.pop(-1)
            self.context.pop(-1)
    def characters( self, content ):
        self.buffer += content
&lt;/pre&gt;
&lt;p&gt;This class and the shared string handler could be refactored to
eliminate a tiny bit of redundancy.&lt;/p&gt;
&lt;p&gt;This class does two things. At the end of a tag, it determines what
data was found. It could be a number, a boolean value or a shared
string. At the end of a tag, it writes the row to a CSV writer.&lt;/p&gt;
&lt;p&gt;This handler is used as follows.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rdr= xml.sax.make_parser()
rdr.setFeature( xml.sax.handler.feature_namespaces, True )
for s in sheets:
with open(s+&amp;quot;.csv&amp;quot;,&amp;quot;wb&amp;quot;) as result:
    handler= GetSheetData(string_handler.string_dict,csv.writer(result))
    rdr.setContentHandler( handler )
    rdr.parse( s )
&lt;/pre&gt;
&lt;p&gt;This iterates through each sheet, transforming it into a simple .CSV
file. Once we have the file in CSV format, it's smaller and simpler.
It can easily be processed by follow-on applications.&lt;/p&gt;
&lt;p&gt;The overall loop actually looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sheets= list( get_worksheets(name) )

string_handler= GetStrings()
rdr= xml.sax.make_parser()
rdr.setContentHandler( string_handler )
rdr.setFeature( xml.sax.handler.feature_namespaces, True )
rdr.parse( &amp;quot;xl/sharedStrings.xml&amp;quot; )

rdr= xml.sax.make_parser()
rdr.setFeature( xml.sax.handler.feature_namespaces, True )
for s in sheets:
    with open(s+&amp;quot;.csv&amp;quot;,&amp;quot;wb&amp;quot;) as result:
        handler= GetSheetData(string_handler.string_dict,csv.writer(result))
        rdr.setContentHandler( handler )
        rdr.parse( s )
&lt;/pre&gt;
&lt;p&gt;This expands the shared strings and individual sheets. It iterates
through the sheets, using the shared strings, to create a bunch of
.CSV files from the .XLSM data.&lt;/p&gt;
&lt;p&gt;The resulting .CSV -- stripped of the XML overheads -- is 80,000+
rows and only 39M. Also, it can be processed with the Python
&lt;a class="reference external" href="http://docs.python.org/library/csv.html"&gt;csv&lt;/a&gt; library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="csv-processing"&gt;
&lt;h2&gt;CSV Processing&lt;/h2&gt;
&lt;p&gt;This, after all, was the goal. Read the CSV file and do some useful
work.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def csv_rows(source):
    rdr= csv.reader( source )
    headings = []
    for n, cols in enumerate( rdr ):
       if n &amp;lt; 4:
           if headings:
               headings = [ (top+' '+nxt).strip() for top, nxt in zip( headings, cols ) ]
           else:
               headings = cols
           continue
       yield dict(zip(headings,cols))
&lt;/pre&gt;
&lt;p&gt;We locate the four header rows and build labels from the the four
rows of data. Given these big, complex headers, we can then build a
dictionary from each data row. The resulting structure is exactly
like the results of a csv.DictReader, and can be used to do the &amp;quot;real
work&amp;quot; of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="you-know-you-could-use-elementtree-to-do-this"&gt;
&lt;h2&gt;You know you could use elementtree to do this ...&lt;/h2&gt;
&lt;p&gt;Tim&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-04 11:12:16.217000-04:00&lt;/p&gt;
&lt;p&gt;Hi
You know you could use elementtree to do this processing. Elementtree
can do pull style processing see &lt;a class="reference external" href="http://effbot.org/zone/element-pull.htm"&gt;http://effbot.org/zone/element-pull.htm&lt;/a&gt;
or use iterparse &lt;a class="reference external" href="http://effbot.org/zone/element-iterparse.htm"&gt;http://effbot.org/zone/element-iterparse.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Umm, good article but...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-state-quot-spreads"&gt;
&lt;h2&gt;You state: &amp;amp;quot;Spreads...&lt;/h2&gt;
&lt;p&gt;Paddy3118&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-04 18:51:06.258000-04:00&lt;/p&gt;
&lt;p&gt;Umm, good article but...&lt;/p&gt;
&lt;p&gt;You state: &amp;quot;Spreadsheets are -- BTW -- the universal user interface.
Everyone likes them, they're almost inescapable. And they work.&amp;quot;
Unfortunately they don't work. Some auditors such as KPMG say that
around 95% of the spreadsheets they audit have errors. It is
notoriousely difficult to both audit spreadsheets, and to spot
changes/errors.&lt;/p&gt;
&lt;p&gt;I would agree that spreadsheets are heavily used, but the error rate
seems to be high, in critical documents submitted in important tax
claims.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://staffweb.cms.gre.ac.uk/~cd02/EUSPRIG/"&gt;http://staffweb.cms.gre.ac.uk/~cd02/EUSPRIG/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="very-useful-i-didn-39-t-know-that-i-could-u"&gt;
&lt;h2&gt;Very useful. I didn&amp;amp;#39;t know that I could u...&lt;/h2&gt;
&lt;p&gt;amuhsen&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-12-06 11:23:39.355000-05:00&lt;/p&gt;
&lt;p&gt;Hi,
Very useful. I didn't know that I could unzip an excel file :)
One thing i noticed though, the code doesn't write the last column to
the CSV.&lt;/p&gt;
&lt;p&gt;you need to change the line in GetSheetData.endElementNS(self, name,
qname):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
...
...
self.writer.writerow( [ self.row.get(i) for i in
    xrange(max(self.row.keys())+1) ] )
&lt;/pre&gt;
&lt;p&gt;Hi,
This is a very useful example of how covert hu...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-03-05 10:15:17.216000-05:00&lt;/p&gt;
&lt;p&gt;Hi,
This is a very useful example of how covert huge xlsn files to csv using
Sax.
Thanks for sharing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quan-ho-you-have-not-got-a-brain"&gt;
&lt;h2&gt;Quan Ho, you have not got a brain&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-20 01:00:59.543000-04:00&lt;/p&gt;
&lt;p&gt;Quan Ho, you have not got a brain&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-you-convert-the-code-to-javascript"&gt;
&lt;h2&gt;Can you convert the code to JavaScript?&lt;/h2&gt;
&lt;p&gt;Quan Ho&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-06-04 11:46:16.764000-04:00&lt;/p&gt;
&lt;p&gt;Can you convert the code to JavaScript?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="xml"></category><category term="spreadsheet"></category><category term="xlsx"></category><category term="xlsm"></category><category term="zipfile"></category><category term="excel"></category></entry><entry><title>SQL Can Be Slow -- Why Do People Doubt This?</title><link href="https://slott56.github.io/2010_09_30-sql_can_be_slow_why_do_people_doubt_this.html" rel="alternate"></link><published>2010-09-30T13:03:00-04:00</published><updated>2010-09-30T13:03:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-30:/2010_09_30-sql_can_be_slow_why_do_people_doubt_this.html</id><summary type="html">&lt;p&gt;Here's a typical problem that results from &amp;quot;SQL Hegemony&amp;quot; -- all data
must be in a database, and all access must be via SQL. This can also be
called the &amp;quot;SQL Fetish&amp;quot; school of programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;War Story&lt;/strong&gt;. On a Data Warehousing project, we had to load and
process the organizational hierarchy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a typical problem that results from &amp;quot;SQL Hegemony&amp;quot; -- all data
must be in a database, and all access must be via SQL. This can also be
called the &amp;quot;SQL Fetish&amp;quot; school of programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;War Story&lt;/strong&gt;. On a Data Warehousing project, we had to load and
process the organizational hierarchy. SQL doesn't do hierarchies well
because they can (and should) involve an join of indefinite depth.
One of the DBA's wanted to use a &amp;quot;pure SQL&amp;quot; traversal of the
hierarchy.&lt;/p&gt;
&lt;p&gt;My opinion was that it was a waste of code. We were writing Java
programs. We could -- trivially -- fetch the entire tree into Java
objects and work with the hierarchy as a hierarchy.&lt;/p&gt;
&lt;p&gt;The DBA finally &amp;quot;won&amp;quot; because of the SQL Hegemony argument -- all
access must be in SQL, right? I say &amp;quot;won&amp;quot; because we eventually had
to throw all the SQL away and use flat files. A &amp;quot;pure SQL&amp;quot; data
warehouse is generally unacceptably slow for loading. Data mart
subsets can be done in pure SQL, but loads can't.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recent Events&lt;/strong&gt;. &amp;quot;a table called [LOTSADATA] and it has 14.7
million rows. One of the columns in [LOTSADATA] table is BRAND&amp;quot; for
which they need to do a select distinct. &amp;quot;The disadvantage of [SELECT
DISTINCT] is that the Oracle database engine will do a sort which is
an insanely expensive operation.&lt;/p&gt;
&lt;blockquote&gt;
Question: Are there alternative approaches to obtaining the unique
brands in a table?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Response 1. &lt;strong&gt;Duh&lt;/strong&gt;. Of course there are alternatives. What are you,
stupid? You have programming languages. Use them.&lt;/p&gt;
&lt;p&gt;Response 2. &lt;strong&gt;You're kidding, right&lt;/strong&gt;? Why ask me? Why not just run
it? How hard can it be to benchmark this? What are you, stupid?
Seriously.&lt;/p&gt;
&lt;p&gt;Response 3. &lt;strong&gt;Oh&lt;/strong&gt;. SQL Hegemony. Folks are actually &lt;em&gt;arguing&lt;/em&gt; about
the cost of a query and -- it appears -- no one can actually write
the eight lines of code required to demonstrate that SELECT ALL is
faster than SELECT DISTINCT.&lt;/p&gt;
&lt;p&gt;[Sorry for calling you stupid. You're paralyzed by fear, not
stupidity. What if SQL isn't the perfect end-all, do-all language? If
SQL isn't perfect for all data processing, what other lies have we
been living? Is this the end of organized data processing? The
collapse of western civilization?&lt;/p&gt;
&lt;p&gt;Indeed, I'm repeatedly shocked that the question even comes up. And
I'm more shocked that the &amp;quot;appeal to authority&amp;quot; argument has to be
used. It's trivial to measure. It appears that it's easier to ask me
than to gather data.]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;. SQL Hegemony? Yes. Rather than run a demonstration program,
written in Java or C# or Python, they argued about the SQL. Doing
this with minimalist SQL didn't seem to make anyone's radar. Why not?
SQL Hegemony. Rather than consider real alternatives, everyone was
reduced to looking for sneaky SQL tricks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Benchmarking&lt;/strong&gt;. Here is what I did. It's 5 lines of code for each
case. [How hard can this be? Apparently, SQL hegemony makes it
&lt;em&gt;impossible&lt;/em&gt; for some organizations to do even this.]&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def select_distinct():
    q1= db.cursor()
    q1.execute( &amp;quot;SELECT DISTINCT BRAND FROM LOTSADATA&amp;quot; )
    print q1.fetchall()
    q1.close()

def select_all():
    q2= db.cursor()
    q2.execute( &amp;quot;SELECT ALL BRAND FROM LOTSADATA&amp;quot; )
    print set( q2.fetchall() )
    q2.close()
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I only simulated 100,000 rows. [I don't have the patience to wait
for 15 million rows to be created, loaded and queried.]&lt;/li&gt;
&lt;li&gt;The table only had four columns.&lt;/li&gt;
&lt;li&gt;I used SQLite3 -- which is mostly in-memory -- and runs much, much
faster than Oracle.&lt;/li&gt;
&lt;li&gt;The select all is not a specious result based on cache being
filled; the results are repeatable in any ordering of the queries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;select_distinct 0.417096&lt;/p&gt;
&lt;p&gt;select_all 0.162827&lt;/p&gt;
&lt;p&gt;For this data, the SQL SELECT DISTINCT took almost 3x as long as
the SELECT ALL. It's just that simple.&lt;/p&gt;
&lt;p&gt;Want more speed? Use array fetch features to get more rows in bigger
buffers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequences&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is not rocket science. &lt;strong&gt;SQL can be Slow&lt;/strong&gt;. Don't Argue:
Benchmark. Your Mileage May Vary.&lt;/p&gt;
&lt;p&gt;SQL databases do locking, transaction management, backup and recovery
and a &lt;strong&gt;bunch&lt;/strong&gt; of things well. SQL databases are helpful and
necessary. However, SQL isn't always fast.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL means Slow Query Language&lt;/strong&gt;. You've been told.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="sql-can-handle-hierarchies-just-fine-we-have-been"&gt;
&lt;h2&gt;SQL can handle hierarchies just fine, we have been...&lt;/h2&gt;
&lt;p&gt;dwelden&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-30 12:27:01.964000-04:00&lt;/p&gt;
&lt;p&gt;SQL can handle hierarchies just fine, we have been doing it for years.
See &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Nested_set_model"&gt;http://en.wikipedia.org/wiki/Nested_set_model&lt;/a&gt; or
&lt;a class="reference external" href="http://kamfonas.com/wordpress/wp-content/uploads/2007/08/recursive-hierarchies-no-columns.htm"&gt;http://kamfonas.com/wordpress/wp-content/uploads/2007/08/recursive-hierarchies-no-columns.htm&lt;/a&gt;.
I use a slight modification of the Kamfonas approach which also includes
the parent member in the row. This makes certain queries a little
simpler, and simpler is faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-program-needs-select-distinct-that-badly-why-d"&gt;
&lt;h2&gt;if program needs SELECT DISTINCT that badly, why d...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-30 21:41:20.754000-04:00&lt;/p&gt;
&lt;p&gt;if program needs SELECT DISTINCT that badly, why don't you keep a table
with such results and select from it?
&lt;tt class="docutils literal"&gt;select * from distinct_brands;&lt;/tt&gt; -- will do the trick
+ update, that table from time to time when new data arrives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="don-39-t-blame-sql-and-relational-databases-that"&gt;
&lt;h2&gt;Don&amp;amp;#39;t Blame SQL and relational databases that ...&lt;/h2&gt;
&lt;p&gt;Dragan Sahpaski&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-01 08:51:10.908000-04:00&lt;/p&gt;
&lt;p&gt;Don't Blame SQL and relational databases that your company staff are not
creative. Also SQL is a language. You probably wanted to say that
relational databases can be slow. Not SQL. SQL can also be implemented
in a non-relational database environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ok-but-say-you-want-to-only-display-the-top-100-r"&gt;
&lt;h2&gt;Ok, but say you want to only display the top 100 r...&lt;/h2&gt;
&lt;p&gt;Matthys Meintjes&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-01 02:08:54.589000-04:00&lt;/p&gt;
&lt;p&gt;Ok, but say you want to only display the top 100 results to the user -
do you still pull all 14.7 million before doing the paging, or do you do
the paging on the server (which forces you to do the DISTINCT on the
server as well)?&lt;/p&gt;
&lt;p&gt;That's the problem with doing programming side manipulation on sets -
its usually too expensive retrieving all data before doing the
filtering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rottweiler-you-should-read-even-rants-with-more"&gt;
&lt;h2&gt;rottweiler — you should read even rants with more ...&lt;/h2&gt;
&lt;p&gt;Brandon Rhodes&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-01 00:04:41.288000-04:00&lt;/p&gt;
&lt;p&gt;rottweiler — you should read even rants with more attentiveness. Yes,
'SELECT ALL' and 'SELECT DISTINCT' are “both SQL,” as you claim. But the
point is not whether one solution uses SQL and the other not —
obviously, every approach towards selecting the brands will have to
involve SQL because the data is stored in a table! The point is that the
'SELECT DISTINCT' solution is *only* SQL, whereas the alternative
approach combines a SQL statement that does not actually answer the
question (“What is the list of distinct brands?”) with post-processing
that reduces the data to a meaningful answer. That is the point: not
that both solutions involve SQL; but that one of them involves *only*
SQL, and that in some enterprises that is considered a necessary
attribute of *any* solution.&lt;/p&gt;
&lt;p&gt;Your post is a rant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-the-choice-is-between-3"&gt;
&lt;h2&gt;So the choice is between &amp;amp;#3...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-30 11:29:04.923000-04:00&lt;/p&gt;
&lt;p&gt;Your post is a rant.
So the choice is between 'SELECT ALL' and 'SELECT DISTINCT'. How is one
an example of &amp;quot;SQL Hegemony&amp;quot; and the other isn't? They're both SQL.
And your supposedly revolutionary timing code doesn't prove anything ...
they don't do the same thing. Doing less is faster than doing more, big
surprise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="matt-said-want-to-only-display-the-top-100-res"&gt;
&lt;h2&gt;Matt said ... want to only display the top 100 res...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-02 08:50:19.420000-04:00&lt;/p&gt;
&lt;p&gt;Matt said ... want to only display the top 100 results ...
That is a different question than &amp;quot;provide a DISTINCT list of ALL the
values&amp;quot;.&lt;/p&gt;
&lt;p&gt;For a discussion of the &amp;quot;Top N query&amp;quot; problem, refer to
Processing Rows in Batches
&lt;a class="reference external" href="http://www.drdobbs.com/184406071"&gt;http://www.drdobbs.com/184406071&lt;/a&gt;
Full disclosure: The above is a Dr. Dobb's article that Steve and I
co-authored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="please-note-that-the-blog-states-quot-one-of-the"&gt;
&lt;h2&gt;Please note that the blog states &amp;amp;quot;One of the ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-01 19:44:38.101000-04:00&lt;/p&gt;
&lt;p&gt;Please note that the blog states &amp;quot;One of the columns in [LOTSADATA]
table is BRAND for which they need to do a select distinct&amp;quot;. In other
words the goal is to produce a list of distinct brands.&lt;/p&gt;
&lt;p&gt;Ideally you would never be in this silly situation and would keep the
number of distinct brands somewhere else as one of the commenters
stated.&lt;/p&gt;
&lt;p&gt;I think what is missing from the blog is the Python code that processes
the &amp;quot;select all&amp;quot; output through a Python &amp;quot;sets&amp;quot; to product the distinct
brands.
&lt;a class="reference external" href="http://docs.python.org/tutorial/datastructures.html"&gt;http://docs.python.org/tutorial/datastructures.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-doing-hierarchies-in-sql-some-good-references"&gt;
&lt;h2&gt;For doing hierarchies in sql, some good references...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-01 19:34:32.593000-04:00&lt;/p&gt;
&lt;p&gt;For doing hierarchies in sql, some good references are
1) Article: Trees in SQL by Joe Celko
&lt;a class="reference external" href="http://intelligent-enterprise.informationweek.com/001020/celko.jhtml;jsessionid=X4HTCAP5KAJGPQE1GHRSKHWATMY32JVN"&gt;http://intelligent-enterprise.informationweek.com/001020/celko.jhtml;jsessionid=X4HTCAP5KAJGPQE1GHRSKHWATMY32JVN&lt;/a&gt;
2) Book: Joe Celko's Trees and Hierarchies in SQL for Smarties
3) Some vendors like Oracle, have special knobs for hierarchical queries
CONNECT BY, LEVEL, PRIOR CONNECT_BY_ROOT
&lt;a class="reference external" href="http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/pseudocolumns001.htm#i1009313"&gt;http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/pseudocolumns001.htm#i1009313&lt;/a&gt;
&lt;a class="reference external" href="http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/operators004.htm#i1036358"&gt;http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/operators004.htm#i1036358&lt;/a&gt;
&lt;a class="reference external" href="http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/queries003.htm#i2053935"&gt;http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/queries003.htm#i2053935&lt;/a&gt;
4) Flatten the hierarchy using Kimball's bridge table concept&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="as-per-dragan-sahpaski-39-s-post-said-this-isn"&gt;
&lt;h2&gt;As per Dragan Sahpaski&amp;amp;#39;s post said, this isn&amp;amp;#...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-03 22:46:38.567000-04:00&lt;/p&gt;
&lt;p&gt;As per Dragan Sahpaski's post said, this isn't a feature of SQL it is
one or more of; the database, the database configuration, etc.
The &amp;quot;select all&amp;quot; piped into a sort is really VERY inefficient, I can't
(and I won't) comment on the Oracle database you have but with a
database that has some good out of box defaults the database engine
should be a lot faster at sorting than the client. I tried out the idea
using Vectorwise and the dbt3 database and doing the sort is much
quicker in the database, I've in-lined the results below but the summary
is DBMS sort 0.164s versus 3.426s no sort and pulling the data back to
the client (and not applying a sort). This uses a table with ~6million
rows where 200K of the &amp;quot;distinct&amp;quot; column are unique. I should make clear
that this table is NOT indexed :-)&lt;/p&gt;
&lt;p&gt;Doing the sort client side doesn't make any sense for this example if
you have a decent DBMS that has been configured correctly.
Someone already posted about trees in relational table approaches. If
you truly have a lot of data you can't store this in memory so you need
another approach (that may or may not be a relational DBMS).
Chris&lt;/p&gt;
&lt;p&gt;Full disclosure: I work for Ingres so I'm likely to have some bias :-)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[ivw&amp;#64;ingres_vw ~]$ cat /tmp/t.sh
#!/bin/sh
# Ingres Vectorwise dbt3 demo database
sql dbt3 &amp;lt;/tmp/1.txt &amp;lt;/tmp/2.txt &amp;lt;&amp;lt;EOF
select all l_partkey from lineitem\\p\\g
EOF
[ivw&amp;#64;ingres_vw ~]$ sh /tmp/t.sh
INGRES TERMINAL MONITOR Copyright 2009 Ingres Corporation
Ingres VectorWise Linux Version VW 1.0.0 (a64.lnx/114)NPTL login
Sun Oct 3 19:21:34 2010
continue
\* /\* SQL Startup File \*/
help lineitem
Executing . . .
Name: lineitem
Owner: ivw
Created: 17-aug-2010 10:54:23
Type: user table
Version: II10.0
Column Information:
Key
Column Name Type Length Nulls Defaults Seq
l_orderkey integer 4 no no
l_partkey integer 4 no no
l_suppkey integer 4 no no
l_linenumber integer 4 no no
l_quantity float 4 no no
l_extendedprice float 4 no no
l_discount float 4 no no
l_tax float 4 no no
l_returnflag char 1 no no
l_linestatus char 1 no no
l_shipdate ansidate no no
l_commitdate ansidate no no
l_receiptdate ansidate no no
l_shipinstruct char 25 no no
l_shipmode char 10 no no
l_comment varchar 44 no no
continue
\* select count(*) from lineitem
Executing . . .
+----------------------+
\|col1 \|
+----------------------+
\| 6001215\|
+----------------------+
(1 row)
continue
\*
Ingres VectorWise Version VW 1.0.0 (a64.lnx/114)NPTL logout
Sun Oct 3 19:21:34 2010
distinct returns 200000 rows
real 0m0.164s
user 0m0.104s
sys 0m0.008s
real 0m3.426s
user 0m3.152s
sys 0m0.262s
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="as-per-dragan-sahpaski-39-s-post-said-this-isn-1"&gt;
&lt;h2&gt;As per Dragan Sahpaski&amp;amp;#39;s post said, this isn&amp;amp;#...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-03 22:45:36.723000-04:00&lt;/p&gt;
&lt;p&gt;As per Dragan Sahpaski's post said, this isn't a feature of SQL it is
one or more of; the database, the database configuration, etc.
The &amp;quot;select all&amp;quot; piped into a sort is really VERY inefficient, I can't
(and I won't) comment on the Oracle database you have but with a
database that has some good out of box defaults the database engine
should be a lot faster at sorting than the client. I tried out the idea
using Vectorwise and the dbt3 database and doing the sort is much
quicker in the database, I've in-lined the results below but the summary
is DBMS sort 0.164s versus 3.426s no sort and pulling the data back to
the client (and not applying a sort). This uses a table with ~6million
rows where 200K of the &amp;quot;distinct&amp;quot; column are unique. I should make clear
that this table is NOT indexed :-)&lt;/p&gt;
&lt;p&gt;Doing the sort client side doesn't make any sense for this example if
you have a decent DBMS that has been configured correctly.&lt;/p&gt;
&lt;p&gt;Someone already posted about trees in relational table approaches. If
you truly have a lot of data you can't store this in memory so you need
another approach (that may or may not be a relational DBMS).
Chris&lt;/p&gt;
&lt;p&gt;Full disclosure: I work for Ingres so I'm likely to have some bias :-)&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;::&lt;/dt&gt;
&lt;dd&gt;[&lt;a class="reference external" href="mailto:ivw&amp;#64;ingres_vw"&gt;ivw&amp;#64;ingres_vw&lt;/a&gt; ~]$ cat /tmp/t.sh
#!/bin/sh
# Ingres Vectorwise dbt3 demo database
sql dbt3 &amp;lt;/tmp/1.txt &amp;lt;/tmp/2.txt &amp;lt;&amp;lt;EOF
select all l_partkey from lineitem\p\g
EOF
[&lt;a class="reference external" href="mailto:ivw&amp;#64;ingres_vw"&gt;ivw&amp;#64;ingres_vw&lt;/a&gt; ~]$ sh /tmp/t.sh
INGRES TERMINAL MONITOR Copyright 2009 Ingres Corporation
Ingres VectorWise Linux Version VW 1.0.0 (a64.lnx/114)NPTL login
Sun Oct 3 19:21:34 2010
continue
* /* SQL Startup File */
help lineitem
Executing . . .
Name: lineitem
Owner: ivw
Created: 17-aug-2010 10:54:23
Type: user table
Version: II10.0
Column Information:
Key
Column Name Type Length Nulls Defaults Seq
l_orderkey integer 4 no no
l_partkey integer 4 no no
l_suppkey integer 4 no no
l_linenumber integer 4 no no
l_quantity float 4 no no
l_extendedprice float 4 no no
l_discount float 4 no no
l_tax float 4 no no
l_returnflag char 1 no no
l_linestatus char 1 no no
l_shipdate ansidate no no
l_commitdate ansidate no no
l_receiptdate ansidate no no
l_shipinstruct char 25 no no
l_shipmode char 10 no no
l_comment varchar 44 no no
continue
* select count(*) from lineitem
Executing . . .
+----------------------+
|col1 |
+----------------------+
| 6001215|
+----------------------+
(1 row)
continue
*
Ingres VectorWise Version VW 1.0.0 (a64.lnx/114)NPTL logout
Sun Oct 3 19:21:34 2010
distinct returns 200000 rows
real 0m0.164s
user 0m0.104s
sys 0m0.008s
real 0m3.426s
user 0m3.152s
sys 0m0.262s&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data warehouse"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Why Professional Certification Might Be Good</title><link href="https://slott56.github.io/2010_09_28-why_professional_certification_might_be_good.html" rel="alternate"></link><published>2010-09-28T16:00:00-04:00</published><updated>2010-09-28T16:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-28:/2010_09_28-why_professional_certification_might_be_good.html</id><summary type="html">&lt;p&gt;Sometimes I think we need professional certification in this industry. I
supported the &lt;a class="reference external" href="http://www.iccp.org/"&gt;ICCP&lt;/a&gt; for a long time.&lt;/p&gt;
&lt;p&gt;In addition to certification, which requires ongoing educational
credits to maintain, there ought to be a process for revoking one's
certification, requiring them to pass their exams again.&lt;/p&gt;
&lt;p&gt;Here's three strikes against …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes I think we need professional certification in this industry. I
supported the &lt;a class="reference external" href="http://www.iccp.org/"&gt;ICCP&lt;/a&gt; for a long time.&lt;/p&gt;
&lt;p&gt;In addition to certification, which requires ongoing educational
credits to maintain, there ought to be a process for revoking one's
certification, requiring them to pass their exams again.&lt;/p&gt;
&lt;p&gt;Here's three strikes against two clods who wasted hours on -- perhaps
-- the dumbest things possible.&lt;/p&gt;
&lt;div class="section" id="strike-1-counting-from-zero"&gt;
&lt;h2&gt;Strike 1. Counting From Zero&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I then ponited out that the Microsoft doco is weird because
the highest
number allowed by ulong is 18,446,744,073,709,551,615 which
ends in an odds
number&lt;/p&gt;
&lt;p&gt;I remineded him that 2**64 = 18,446,744,073,709,551,616&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Apparently, this was the first time anyone realized how counting from
zero works. If they had actually thought about this, they could have
tried a smaller example. For example three bits. &lt;span class="formula"&gt;2&lt;sup&gt;3&lt;/sup&gt; = 8&lt;/span&gt;. When you
enumerate the values you get 0, 1, 2, 3, 4, 5, 6, 7. The highest
value is &lt;span class="formula"&gt;2&lt;sup&gt;3&lt;/sup&gt; − 1&lt;/span&gt;. It's not &amp;quot;weird&amp;quot;. It's a trivially obvious
mathematical fact.&lt;/p&gt;
&lt;p&gt;It works like this: &lt;span class="formula"&gt;&lt;i&gt;n&lt;/i&gt;&lt;/span&gt; values have numbers from 0 to &lt;span class="formula"&gt;&lt;i&gt;n&lt;/i&gt; − 1&lt;/span&gt;. Didn't
know that? Consider your certification revoked. Even hobbyists know
this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strike-2-wrong-tools-and-wrong-approach"&gt;
&lt;h2&gt;Strike 2. Wrong Tools and Wrong Approach&lt;/h2&gt;
&lt;p&gt;This is more subtle and involves two strikes. We'll look at just one
of them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Then he wanted a spreadsheet of 2 raised to nth power.&lt;/p&gt;
&lt;p&gt;I put it together and the numbers just looked weird. I then
realized that
when you type a number that contains more than 15 digits in a
cell,
Microsoft Excel changes any digits past the fifteenth place to
zeroes&lt;/p&gt;
&lt;p&gt;What I felt like saying is that Python has built in this
concept of &amp;quot;long integers&amp;quot; which has unlimited precision and it automatically
switches to
them&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the clods knew Python. Instead of writing a trivial loop in
Python, apparently, clod #1 proceeded to type numbers into a
spreadsheet. The clod didn't &lt;em&gt;compute&lt;/em&gt; them -- with formulas or
software -- the clod &lt;em&gt;typed&lt;/em&gt; the numbers. &lt;em&gt;Typed&lt;/em&gt;. Have Python.
Elected to type. How did they do the calculations? On a pocket
calculator? Oh the shame.&lt;/p&gt;
&lt;p&gt;Also, additional penalties for exhaustive enumeration. They sent me
the spreadsheet as if it was somehow important that they could
enumerate values between 2**0 and 2**135. No summary or rule. Just a
mountain of useless numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strike-3-floating-point"&gt;
&lt;h2&gt;Strike 3. Floating Point&lt;/h2&gt;
&lt;p&gt;This is not news. Nor should it be. Indeed, this should be the first
set of questions on the certification exam. If you can't figure out
floating point, you can't write software. Period. Please find another
job in an industry where you won't waste time on this.&lt;/p&gt;
&lt;p&gt;Floating point is not simple, and everyone should study it before
they are allowed to charge money for creating software. Running
random experiments and exhaustively enumerating values is not
studying. That's not even hobbyist stuff. Try actually reading.
Starting with the standard. And David Goldberg's &amp;quot;&lt;a class="reference external" href="http://www.validlab.com/goldberg/paper.pdf"&gt;What Every
Computer Scientist Should Know About Floating-Point
Arithmetic&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
contains more than 15 digits in a cell,
Microsoft Excel changes any digits past the fifteenth place to
zeroes&lt;/blockquote&gt;
&lt;p&gt;This is not &amp;quot;news&amp;quot;. The link provided in the email (&amp;quot;&lt;a class="reference external" href="http://support.microsoft.com/?kbid=269370"&gt;Last digits are
changed to zeroes when you type long numbers in cells of
Excel&lt;/a&gt;&amp;quot;) indicates a
profound lack of understanding.&lt;/p&gt;
&lt;p&gt;They could not have noticed that this is near &lt;span class="formula"&gt;2&lt;sup&gt;50&lt;/sup&gt;&lt;/span&gt;. They never
looked up the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/IEEE_754-2008"&gt;IEEE floating
point&lt;/a&gt;
representation that -- pretty clearly -- says that there are only
52 bits of useful information. Wikipedia reminds us that this is
about 15 decimal digits. Rather than look this up, they chose to
be astonished.&lt;/p&gt;
&lt;p&gt;These clods were astonished that floating-point numbers have a
finite mantissa. Astonished that -- empirically -- they had
stumbled on the fact that the mantissa is about 50 bits.&lt;/p&gt;
&lt;p&gt;How much time did they waste on this? More importantly, how can
they consider their activities to be &amp;quot;professional&amp;quot;? Unable to
count from zero? Using the wrong tools and exhaustively
enumerating the obvious? Not realizing the floating-point values
have limited precision?&lt;/p&gt;
&lt;p&gt;I find it appalling. Their escapades sound like two home hobbyists
with their fist ever copy of C#. Not like professionals.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hi-your-rant-reminds-me-of-the-possibly-allied-c"&gt;
&lt;h2&gt;Hi, Your rant reminds me of the possibly allied c...&lt;/h2&gt;
&lt;p&gt;Paddy3118&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-29 00:59:33.785000-04:00&lt;/p&gt;
&lt;p&gt;Hi,
Your rant* reminds me of the possibly allied case of the state of maths
awareness in the UK, where it is quite acceptable to admit to bad maths
skills whatever your other skills may be. You could be paid six-figures
in some industry, but have trouble working-out 17.5% of a number.
I guess the problem in your examples is that presumably these people are
calling themselves programmers without base knowledge that you think is
important.&lt;/p&gt;
&lt;p&gt;I see the problem, but am not sure that certification, like microsoft
certification, is what we should be looking for. If someone has a degree
in programming or a degree in an allied subject such as a science or
engineering and computing was part of that course, then maybe all of
what you have mentioned should be covered by the course, and employers
should pay more for the degree qualified programmer. But programming can
still be self-taught and if you employ a self-taught programmer then you
should expect a much wider range of capabilities.&lt;/p&gt;
&lt;p&gt;*I meant rant in that you seemed to be letting off steam on an issue
rather than being excessively abusive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-i-started-my-current-job-the-company-soon-hi"&gt;
&lt;h2&gt;When I started my current job, the company soon hi...&lt;/h2&gt;
&lt;p&gt;Power Baker&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-10-02 00:03:52.501000-04:00&lt;/p&gt;
&lt;p&gt;When I started my current job, the company soon hired someone officially
as a systems administrator, but also as another PHP programmer. The guy
spent a full two weeks (between taking phone calls about his side job)
editing a set of CSV files exported from Access tables, replacing the
commas with pipe characters, removing the in-field newlines (thereby
destroying vital information), replacing the end-of row newlines with
bare carriage returns (because that's &amp;quot;the Unix convention&amp;quot; despite
being completely ignored by Subversion), and stripping the quotation
marks.&lt;/p&gt;
&lt;p&gt;By hand.&lt;/p&gt;
&lt;p&gt;Because regular expressions were out of his league, and he hadn't spent
enough time on Google to learn about fgetcsv().&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="floating-point"></category><category term="integer"></category><category term="#python"></category></entry><entry><title>Making a bad problem worse</title><link href="https://slott56.github.io/2010_09_24-making_a_bad_problem_worse.html" rel="alternate"></link><published>2010-09-24T08:14:00-04:00</published><updated>2010-09-24T08:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-24:/2010_09_24-making_a_bad_problem_worse.html</id><summary type="html">&lt;p&gt;Imagine that you're a beer distributor who provides &amp;quot;just-in-time&amp;quot; beer
by type. You don't take orders for a specific brand, you take orders a
type: stout, lager, India pale ale, etc. You resolve the bill based on
what you actually delivered.&lt;/p&gt;
&lt;p&gt;This can be kind of complex. However, there's no …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine that you're a beer distributor who provides &amp;quot;just-in-time&amp;quot; beer
by type. You don't take orders for a specific brand, you take orders a
type: stout, lager, India pale ale, etc. You resolve the bill based on
what you actually delivered.&lt;/p&gt;
&lt;p&gt;This can be kind of complex. However, there's no call for being crazy
about it. Yet, before we get to the end of this saga, it will get
crazy.&lt;/p&gt;
&lt;p&gt;Your fulfillment (or &amp;quot;order-to-ship&amp;quot;) process is rather complex.
There's the order as placed and there's the actual products that
got shipped. Your invoicing is also rather complex because you
have to reconcile the order with the fulfillment and the final
delivery.&lt;/p&gt;
&lt;p&gt;Recently, I saw a piece of a &amp;quot;database&amp;quot; design for software
used to support this kind of business. The design was so
dysfunctional that there were heated arguments about how to
proceed.&lt;/p&gt;
&lt;p&gt;Note that the real business with the dysfunctional database deals
in intellectual property, not beer. The fact that they deal in IP
instead of tangible assets seems to make them easily confused. One
thing I've heard -- but haven't seen -- is that they &lt;strong&gt;update&lt;/strong&gt;
the order during the fulfillment process. After all, the
customer's order &lt;strong&gt;should&lt;/strong&gt; match the invoice, right? Yes, but. In
this business, the fulfillment will diverge from the order; it
makes more sense to create a mapping from invoice to order than to
rewrite the order.&lt;/p&gt;
&lt;div class="section" id="not-the-crazy-part"&gt;
&lt;h2&gt;Not the Crazy Part&lt;/h2&gt;
&lt;p&gt;The hellish thing that I saw was the many-to-many association
between order and beer type. A many-to-many isn't bad. What they
did, however, was really bad. But not crazy. Not yet.&lt;/p&gt;
&lt;p&gt;It's a many-to-many table. Order has one or more Beer Types. A Beer
Type can appear on any number of Orders. Could be simple.&lt;/p&gt;
&lt;p&gt;In the world of atoms (tangible goods, not services) there's a pretty
standard model where an order is a composite object with multiple
line items. Each line item has a reference to a product. For this
business, each line item would have a reference to a product type,
instead of a specific product.&lt;/p&gt;
&lt;p&gt;In a sensible software solution, there'd also be an invoice as a
composite object; separate from the order. Only a customer can change
an order. The invoice, however, would grow and change throughout the
fulfillment process. The invoice, like the order, would have multiple
line items. Each invoice line item would reference two things: the
product actually delivered, and the order line item that this product
fulfilled. This could include some &amp;quot;justification&amp;quot; or &amp;quot;rationale&amp;quot;
showing how the fulfillment matches the order.&lt;/p&gt;
&lt;p&gt;Because the real business didn't separate order and invoice -- and
instead tried to massage the order to also be an invoice -- what they
had was a table with flags and 10 (ten, yes ten) business rules that
resolved whether or not this type of beer was or was not part of the
order.&lt;/p&gt;
&lt;p&gt;I'll summarize. The many-to-many table had two columns with flag
values and ten business rules to interpret those flag values to
determine what the was ordered and what was fulfilled. Two columns of
flags. Ten rules. But that's not the crazy part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bad-data"&gt;
&lt;h2&gt;Bad Data&lt;/h2&gt;
&lt;p&gt;A database that requires ten business rules and procedural processing
to interpret the data is bad. It gets worse, however.&lt;/p&gt;
&lt;p&gt;One of the ten business rules is a tie-breaker. The process that
fulfilled orders was so badly broken that it could (and did) create
multiple, conflicting invoice-to-type association rows. I was
shocked: multiple, conflicting invoice-to-type association rows. Rule
10 was &amp;quot;in the event of a tie, there's 'bad data', pick a row and
keep going.&amp;quot;&lt;/p&gt;
&lt;p&gt;There's &amp;quot;bad data&amp;quot;? Keep going? I would think this would be a
show-stopper. Whomever wrote the application that created the bad
data needs career guidance (guidance as in, &amp;quot;you're fired&amp;quot;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-broken-but"&gt;
&lt;h2&gt;It's Broken, But...&lt;/h2&gt;
&lt;p&gt;Clearly, any database that requires ten procedural business rules is
not much of a database. A SQL query cannot be used to produce either
order or invoice. To fetch an order or an invoice requires a
procedure so complex that the organization cannot even figure out
what programming language to use.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A procedure so complex that the organization cannot even figure out
what programming language to use.&lt;/em&gt; Really.&lt;/p&gt;
&lt;p&gt;The DBA's say it can be done as a stored procedure. And they have a
worse plan, too. We'll get to that.&lt;/p&gt;
&lt;p&gt;The programmers want to do this in C# because -- clearly -- the
database is broken.&lt;/p&gt;
&lt;p&gt;If you can't agree on the implementation, you've got big, big
problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-crazy-part"&gt;
&lt;h2&gt;The Crazy Part&lt;/h2&gt;
&lt;p&gt;The pitch from one of the DBA's was to add yet more complexity. There
are two flag columns and ten business rules to resolve nuances of
order and fulfillment. This is a mistake which requires someone sit
down and work out a fix.&lt;/p&gt;
&lt;p&gt;Instead, the DBA pitched using Oracle's analytic functions to make
the complex procedural processing look like &amp;quot;ordinary&amp;quot; database
processing.&lt;/p&gt;
&lt;p&gt;Wait, what?&lt;/p&gt;
&lt;p&gt;That's right. Take a database design so complex that it's
dysfunctional and add complexity to it.&lt;/p&gt;
&lt;p&gt;Call me crazy but anyone who uses Oracle analytic functions on this
problem now has two problems. They've got a analytic layer that only
one DBA understands. This wraps a broken many-to-many table that
(apparently) no one understands.&lt;/p&gt;
&lt;p&gt;None of this reflects the actual business model very well, does it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;If the database does not (1) reflect the actual business model and
(2) work in simple SQL, it's broken. Adding technology to a broken
database makes it more complex but leaves it essentially broken.&lt;/p&gt;
&lt;p&gt;Stop. Adding. Complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="sounds-scary-couple-typos-for-you-http-www-eme"&gt;
&lt;h2&gt;Sounds scary. Couple typos for you: &lt;a class="reference external" href="http://www.eme"&gt;http://www.eme&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;John Tantalo&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-25 14:13:40.080000-04:00&lt;/p&gt;
&lt;p&gt;Sounds scary. Couple typos for you:
&lt;a class="reference external" href="http://www.emendapp.com/sites/slott-softwarearchitect.blogspot.com"&gt;http://www.emendapp.com/sites/slott-softwarearchitect.blogspot.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;you just describe magento's EAV design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="just"&gt;
&lt;h2&gt;Just ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-25 17:29:19.932000-04:00&lt;/p&gt;
&lt;p&gt;you just describe magento's EAV design.
Just admit it. You had a client who wanted to use Magento for services
rather than products.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="software design"></category><category term="database design"></category><category term="SQL"></category></entry><entry><title>Comments, Assertions and Unit Tests</title><link href="https://slott56.github.io/2010_09_23-comments_assertions_and_unit_tests.html" rel="alternate"></link><published>2010-09-23T08:00:00-04:00</published><updated>2010-09-23T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-23:/2010_09_23-comments_assertions_and_unit_tests.html</id><summary type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://wrongsideofmemphis.wordpress.com/2010/09/15/commenting-the-code/"&gt;Commenting the
Code&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This posting tickled my fancy because it addressed the central issue of
&amp;quot;what requires comments outside Python docstrings&amp;quot;. All functions,
classes, modules and packages require docstrings. That's clear. But
which lines of code require additional documentation?&lt;/p&gt;
&lt;p&gt;We use Sphinx, so we make extensive use of docstrings …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="http://wrongsideofmemphis.wordpress.com/2010/09/15/commenting-the-code/"&gt;Commenting the
Code&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This posting tickled my fancy because it addressed the central issue of
&amp;quot;what requires comments outside Python docstrings&amp;quot;. All functions,
classes, modules and packages require docstrings. That's clear. But
which lines of code require additional documentation?&lt;/p&gt;
&lt;p&gt;We use Sphinx, so we make extensive use of docstrings. This posting
forced me to think about non-docstring commentary. The post makes
things a bit more complex than necessary. It enumerated some cases,
which is helpful, but didn't see the commonality between them.&lt;/p&gt;
&lt;p&gt;The posting lists five cases for comments in the code.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Summarizing the code blocks. Semi-agree. However, many code
blocks indicates too few functions or methods. I rarely write a
function long enough to have &amp;quot;code blocks&amp;quot;. And the few times I
did, it became regrettable. We're unwinding a terrible mistake
I made regarding an actuarial calculation. It seemed so logical
to make it four steps. It's untestable as a 4-step calculation.&lt;/li&gt;
&lt;li&gt;Describe every &amp;quot;non-trivial&amp;quot; operation. Hmmm... Hard t0 discern
what's trivial and what's non-trivial. The examples on the
original post seems to be a repeat of #1. However, it seems
more like this is a repeat of #5.&lt;/li&gt;
&lt;li&gt;TODO's. I don't use comments for these. These have to be
official &amp;quot;.. todo::&amp;quot; notations that will be picked up by
Sphinx. So these have to be in docstrings, not comments.&lt;/li&gt;
&lt;li&gt;Structures with more than a couple of elements. The example is
a tuple of tuples. I'd prefer to use a
&lt;a class="reference external" href="http://docs.python.org/library/collections.html#collections.namedtuple"&gt;namedtuple&lt;/a&gt;,
since that includes documentation.&lt;/li&gt;
&lt;li&gt;Any &amp;quot;doubtful&amp;quot; code. This is -- actually -- pretty clear. When
in doubt, write it out. This seems to repeat #2.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the other cases in the the post was really just a
suggestion that comments be &amp;quot;clear as well as short&amp;quot;. That's
helpful, but not a separate use case for code comments.&lt;/p&gt;
&lt;p&gt;So, of the five situations for comments described in the post, I
can't distinguish two of them and don't agree with two more.&lt;/p&gt;
&lt;p&gt;This leaves me with two use cases for Python code commentary
(distinct from docstrings).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &amp;quot;summary&amp;quot; of the blocks in a long-ish method (or function)&lt;/li&gt;
&lt;li&gt;Any doubtful or &amp;quot;non-trivial&amp;quot; code. I think this is code where
the semantics aren't obvious; or code that requires some kind
of review of explanation of what the semantics are.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other situations are better handled through docstrings or
named tuples.&lt;/p&gt;
&lt;div class="section" id="assertions"&gt;
&lt;h2&gt;Assertions&lt;/h2&gt;
&lt;p&gt;Comments are interesting and useful, but they aren't real quality
assurance.&lt;/p&gt;
&lt;p&gt;A slightly stronger form of commentary is the assert statement.
Including an assertion formalizes the code into a clear predicate
that's actually executable. If the predicate fails, the program
was mis-designed or mis-constructed.&lt;/p&gt;
&lt;p&gt;Some folks argue that assertions are a lot of overhead. While they
are overhead, they aren't a lot of overhead. Assertions in the
body of the inner-most, inner-most loops may be expensive. But
must of the really important assertions are in the edge and corner
cases which (a) occur rarely and (b) are difficult to design and
(c) difficult to test.&lt;/p&gt;
&lt;p&gt;Since the obscure, oddball cases are rare, cover these with the
assert statement in addition to a comment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="that-s-fine-but-my-colleagues-are-imbeciles"&gt;
&lt;h2&gt;That's Fine, But My Colleagues are Imbeciles&lt;/h2&gt;
&lt;p&gt;There are numerous questions on Stack Overflow that amount to
&amp;quot;comments don't work&amp;quot;. Look at at the hundreds of question that
include the keywords &lt;a class="reference external" href="http://stackoverflow.com/search?q=public+protected+private"&gt;public, protected and
private&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's a particularly bad
&lt;a class="reference external" href="http://www.blogger.com/Access%20Modifiers%20%E2%80%A6%20Why?"&gt;question&lt;/a&gt;
with a very common answer.&lt;/p&gt;
&lt;blockquote&gt;
Because you might not be the only developer in your project and
the other developers might not know that they shouldn't change
it. ...&lt;/blockquote&gt;
&lt;p&gt;This seems silly. &amp;quot;other developers might not know&amp;quot; sounds like
&amp;quot;other developers won't read the comments&amp;quot; or &amp;quot;other developers will
ignore the comments.&amp;quot; In short &amp;quot;comments don't work.&amp;quot;&lt;/p&gt;
&lt;p&gt;I disagree in general. Comments &lt;strong&gt;can&lt;/strong&gt; work. They work particularly
well in languages like Python where the source is always available.&lt;/p&gt;
&lt;p&gt;For languages like C++ and Java, where the source can be separated
and kept secret, comments don't work. In this case, you have to
resort to something even stronger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-tests"&gt;
&lt;h2&gt;Unit Tests&lt;/h2&gt;
&lt;p&gt;Unit tests are perhaps the best form of documentation. If someone
refuses to read the comments, abuses a variable that's supposed to be
private, and breaks things, then tests will fail. Done.&lt;/p&gt;
&lt;p&gt;Further, the unit test source &lt;strong&gt;must&lt;/strong&gt; be given to all the other
developers so they can see how the API is supposed to work. A unit
test is a living, breathing document that describes how a class,
method or function behaves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="explanatory-power"&gt;
&lt;h2&gt;Explanatory Power&lt;/h2&gt;
&lt;p&gt;Docstrings are essential. Tools can process these.&lt;/p&gt;
&lt;p&gt;Comments are important for describing what's supposed to happen.
There seem to be two situations that call for comments outside
docstrings.&lt;/p&gt;
&lt;p&gt;Assertions can be comments which are executable. They aren't always
as descriptive and English prose, but they are formal and precise.&lt;/p&gt;
&lt;p&gt;Unit tests are important for confirming what actually happens.
There's really no alternative to unit testing to supplement the
documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="wow-being-commented-even-to-more-or-less-disagre"&gt;
&lt;h2&gt;Wow, being commented (even to more or less disagre...&lt;/h2&gt;
&lt;p&gt;Jaime&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-23 09:31:45.493000-04:00&lt;/p&gt;
&lt;p&gt;Wow, being commented (even to more or less disagree on some things) on
this blog is a great honor ;-)&lt;/p&gt;
&lt;p&gt;I've updated a little the post, and also what to remark that, those are
habits I have, not ready guidelines.&lt;/p&gt;
&lt;p&gt;I also make use of assertions from time to time, probably not as much as
I should.&lt;/p&gt;
&lt;p&gt;What is important to note, is that comments are actually useful (or
could be, at least). And, of course, any documentation, unit testing,
assertions, etc... I don't know why, but my impression is that recently
there is some &amp;quot;anti comment&amp;quot; movement (probably more on high level,
dynamic languages, as they are more descriptive), stating that comments
(not bad-quality comments, but all comments) are not only unnecessary,
but pointless/confusing.&lt;/p&gt;
&lt;p&gt;And I found that quite dangerous.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-tend-to-comment-sparingly-relying-on-clear-code"&gt;
&lt;h2&gt;I tend to comment sparingly, relying on clear code...&lt;/h2&gt;
&lt;p&gt;casey&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-23 16:26:12.991000-04:00&lt;/p&gt;
&lt;p&gt;I tend to comment sparingly, relying on clear code as much as possible,
however there are some cases where I feel comments are invaluable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Where the code does not clearly convey intent. This can often be the
case with tightly optimized code. Unfortunately many common and
effective code optimization techniques can make code difficult to read.
A comment describing the algorithm and optimization, can prevent later
second-guessing.&lt;/li&gt;
&lt;li&gt;When I start out writing something &amp;quot;the obvious way&amp;quot; and find out that
isn't adequate for whatever reason. For example, the obvious way may not
handle an important edge case or may be very inefficient in some cases.
A comment to explain why the code is not done the obvious way can be
very helpful to others or your future-self.&lt;/li&gt;
&lt;li&gt;Similarly when refactoring &amp;quot;obvious&amp;quot; code to fix edge case bugs.
Sometimes its really useful to say why. Long explanations can be left to
checkin comments and bug reports, of course, but a short comment can be
really handy.&lt;/li&gt;
&lt;li&gt;Explaining what isn't there. Sometimes you need to highlight or
describe things that are either highly implicit or deliberately omitted
from the code. Since there is typically no explicit code for these
things, a comment is needed. Sometimes an assertion is also good for
this, but it isn't always practical.&lt;/li&gt;
&lt;li&gt;Small things that have big consequences. Sometimes you might have a
very finely tuned constant, or threshold that appears arbitrary. You
might have to import things in a special order (ugh, I know) or use an
unsavory hack because of reasons you don't control. These things are
rarely self-explanatory.&lt;/li&gt;
&lt;li&gt;Backward compatibility hacks or caveats. You may beautifully refactor
your api for the latest version, but you still need to support the old
gross api for a while. You may need some comments to separate the wheat
from the chaff.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could go on and on. But primarily they are needed when there are
factors and reasons outside of the code itself that make it not
self-explanatory. In general, any dogma such as &amp;quot;_____ is bad&amp;quot; reveals
a lack of practical perspective. Ideally we wouldn't need comments, but
that is not the world we inhabit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="check-out-quot-java-programming-with-assertions-q"&gt;
&lt;h2&gt;Check out &amp;amp;quot;Java Programming With Assertions&amp;amp;q...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-23 22:10:52.044000-04:00&lt;/p&gt;
&lt;p&gt;Check out &amp;quot;Java Programming With Assertions&amp;quot;
&lt;a class="reference external" href="http://download-llnw.oracle.com/javase/1.4.2/docs/guide/lang/assert.html"&gt;http://download-llnw.oracle.com/javase/1.4.2/docs/guide/lang/assert.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="efficiently-written-information-it-will-be-profit"&gt;
&lt;h2&gt;Efficiently written information. It will be profit...&lt;/h2&gt;
&lt;p&gt;Saqib Khatri&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-05-19 02:43:22.222000-04:00&lt;/p&gt;
&lt;p&gt;Efficiently written information. It will be profitable to anybody who
utilizes it, counting me. Keep up the good work. For certain I will
review out more posts day in and day out. &lt;a class="reference external" href="https://kissenglishcenter.com/phan-mem-hoc-tieng-anh-offline-mien-phi/"&gt;Free offline English learning
software&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="sphinx"></category><category term="#python"></category></entry><entry><title>A Really Bad Idea -- Adding Clutter to A Language</title><link href="https://slott56.github.io/2010_09_21-a_really_bad_idea_adding_clutter_to_a_language.html" rel="alternate"></link><published>2010-09-21T08:00:00-04:00</published><updated>2010-09-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-21:/2010_09_21-a_really_bad_idea_adding_clutter_to_a_language.html</id><summary type="html">&lt;p&gt;A DBA suggested that I read up on &amp;quot;Practical API Design: Confessions of
a Java Framework Architect&amp;quot;.&lt;/p&gt;
&lt;p&gt;Apparently the DBA had read the phrase &amp;quot;direct compiler support of
versioning of APIs&amp;quot; in a review of the book and -- immediately --
become terribly confused.&lt;/p&gt;
&lt;p&gt;I can see why a DBA would be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A DBA suggested that I read up on &amp;quot;Practical API Design: Confessions of
a Java Framework Architect&amp;quot;.&lt;/p&gt;
&lt;p&gt;Apparently the DBA had read the phrase &amp;quot;direct compiler support of
versioning of APIs&amp;quot; in a review of the book and -- immediately --
become terribly confused.&lt;/p&gt;
&lt;p&gt;I can see why a DBA would be confused. From a DBA's point of view all
data, all processing and all management-- all of it -- is intimately
tied to a single tool. The idea behind &lt;strong&gt;Big Relational&lt;/strong&gt; is to
conflate configuration management, quality assurance, programming and
the persistent data so that the product is inescapable.&lt;/p&gt;
&lt;blockquote&gt;
[The idea is so pervasive that not using the RDBMS has to be called a
&amp;quot;movement&amp;quot;, as in &amp;quot;NoSQL Movement&amp;quot;. It's not a new idea -- it's &lt;a class="reference external" href="https://slott56.github.io/2010_10_18-nosql_old_wine_new_bottle.html"&gt;old
wine in new
bottles&lt;/a&gt;
-- but Big Relational has become so pervasive that avoiding the
database makes some folks feel like renegades.]&lt;/blockquote&gt;
&lt;p&gt;Adding to the confusion is the reality that DBA's live in a world
where version management is difficult. What is an API version number
when applied to the database? Can a table have a version? Can a
schema have a version?&lt;/p&gt;
&lt;blockquote&gt;
[IMO, the answer is yes, database designs -- metadata -- can easily
be versioned. There's no support in the database product. But it's
easy to do with simple naming conventions.]&lt;/blockquote&gt;
&lt;p&gt;For a DBA -- who's mind-set is often twisted into &amp;quot;one product
hegemony&amp;quot; and &amp;quot;versioning is hard&amp;quot; -- the phrase &amp;quot;direct compiler
support of versioning of APIs&amp;quot; maps to &amp;quot;direct
tool/database/everything support of versioning.&amp;quot; Nirvana.&lt;/p&gt;
&lt;div class="section" id="all-things-in-moderation"&gt;
&lt;h2&gt;All Things in Moderation&lt;/h2&gt;
&lt;p&gt;A relevant quote from the book is much more sensible than this
fragment of a review. &amp;quot;Some parts of the solution should be in the
compiler, or at least reflected in the sources, and processed by some
annotation processor later.&amp;quot;&lt;/p&gt;
&lt;p&gt;API versioning is not a good idea for adding to a programming
language. At all. It's entirely a management discipline. There's no
sensible avenue for &amp;quot;language&amp;quot; support of versioning. It can make
sense to carry version information in the source, via annotations or
comments. But to augment a language to support management can't work
out well in the long run.&lt;/p&gt;
&lt;p&gt;Why not?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 1. Programming Languages are Turing Complete. And Nothing More&lt;/strong&gt;. Syntactic sugar is okay, if it can be proven to be built on
the Turing complete core language. Extra &amp;quot;features&amp;quot; like version
control are well outside the minimal set of features required to be
Turing complete. So far outside that they make a completeness proof
hard because there's this extra stuff that doesn't matter to the
proof.&lt;/p&gt;
&lt;p&gt;Therefore: &lt;strong&gt;Don't Add Features&lt;/strong&gt;. The language is the language. Add
features via a toolset or a annotation processor or somewhere else.
Your API revision junk will only make the proof of completeness that
much more complex; and the proof won't touch the &amp;quot;features&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 2. Today's Management Practice is Only A Fad&lt;/strong&gt;. Version
numbering for API's with a string of
&lt;em&gt;Major&lt;/em&gt;.&lt;em&gt;Minor&lt;/em&gt;.&lt;em&gt;Release&lt;/em&gt;.&lt;em&gt;Patch&lt;/em&gt; is simply a trendy fad. No
one seems to have a consistent understanding of what those numbers
&lt;em&gt;mean&lt;/em&gt;. Further, some tools (like subversion) simply using
monotonically increasing numbers -- no dots.&lt;/p&gt;
&lt;p&gt;Someday, someone will come up with an XML Feature Summary (XFS) for
describing features and aspects of the the API, and numbers will be
dropped as uselessly vague and replaced with a complex namespace of
features and feature enumeration and a URI referencing an RDF that
identifies the feature set. Numbers will be replaced with URI's.&lt;/p&gt;
&lt;p&gt;Therefore: &lt;strong&gt;Don't Canonize Today's Management Practice in the Language&lt;/strong&gt;. When the current practice has faded from memory, we don't
want to have to retool our programming languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What To Do?&lt;/h2&gt;
&lt;p&gt;What we do for API version control is -- well -- hard work.
Annotations are good. A tool that scrapes out the annotations to
create a &amp;quot;profile&amp;quot; of the API might be handy.&lt;/p&gt;
&lt;p&gt;In Python (and other dynamic languages) it's a much simpler problem
than it is in static languages like Java and C++. Indeed, API version
management may be one of the reasons for the slow shift from static
to dynamic languages.&lt;/p&gt;
&lt;p&gt;If we try to fold in complex language features for API version
support, we introduce bugs and problems. Then -- when management
practice drifts to a new way of handling API's -- we're stuck with
bad language features. We can't simply deprecate them, we have to
find a new language that has similar syntax, but lacks the old-bad
API management features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="distutils"&gt;
&lt;h2&gt;Distutils&lt;/h2&gt;
&lt;p&gt;Python &lt;a class="reference external" href="http://docs.python.org/distutils/setupscript.html"&gt;distutils&lt;/a&gt; has
a nice &amp;quot;Requires&amp;quot;, &amp;quot;Provides&amp;quot; and &amp;quot;Obsoletes&amp;quot; specification that's
part of the installation script. This is a handy level of automation:
the unit of configuration management (the module) is identified at a
high level using simple numbers. More than this is probably
ill-advised.&lt;/p&gt;
&lt;p&gt;And -- of course -- this isn't part of the Python language. It's just
a tool.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="configuration management"></category><category term="#python"></category></entry><entry><title>What Innovation Looks Like</title><link href="https://slott56.github.io/2010_09_16-what_innovation_looks_like.html" rel="alternate"></link><published>2010-09-16T09:16:00-04:00</published><updated>2010-09-16T09:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-16:/2010_09_16-what_innovation_looks_like.html</id><summary type="html">&lt;p&gt;Check out &amp;quot;&lt;a class="reference external" href="http://www.informationweek.com/news/telecom/collaboration/showArticle.jhtml?articleID=227300081"&gt;End User 2.0: When Employees Have All The
Answers&lt;/a&gt;&amp;quot;
in InformationWeek. This is about adoption of non-approved technology.
Think iPad.&lt;/p&gt;
&lt;p&gt;This shows what innovation looks like when it happens.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There's no process for innovation.&lt;/li&gt;
&lt;li&gt;There's no &amp;quot;permission to fail&amp;quot;. Folks just fail or succeed
without anyone's support …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Check out &amp;quot;&lt;a class="reference external" href="http://www.informationweek.com/news/telecom/collaboration/showArticle.jhtml?articleID=227300081"&gt;End User 2.0: When Employees Have All The
Answers&lt;/a&gt;&amp;quot;
in InformationWeek. This is about adoption of non-approved technology.
Think iPad.&lt;/p&gt;
&lt;p&gt;This shows what innovation looks like when it happens.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There's no process for innovation.&lt;/li&gt;
&lt;li&gt;There's no &amp;quot;permission to fail&amp;quot;. Folks just fail or succeed
without anyone's support or permission.&lt;/li&gt;
&lt;li&gt;It's disruptive. Many IT departments don't know how to cope with
USB drives, iPads and related leading-edge technology. So these
things are simply banned. (Ever walked past a sign that says &amp;quot;No
Recording Devices Allowed Beyond This Point&amp;quot; with your iPhone?)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's one great quote: &amp;quot;Policies around regulatory compliance,
reliability, budget approvals, and support all give IT teams reasons
to resist technology driven by end users.&amp;quot;&lt;/p&gt;
&lt;p&gt;Technology innovation is happening. It is disruptive. Therefore, IT
tends to resist the disruption.&lt;/p&gt;
&lt;p&gt;The best stall tactic: &amp;quot;Security&amp;quot;. If IT lifts up security as an
issue, they can resist technology innovation effectively.&lt;/p&gt;
&lt;div class="section" id="other-disruptive-change"&gt;
&lt;h2&gt;Other Disruptive Change&lt;/h2&gt;
&lt;p&gt;This happens everywhere. It isn't just the iPad. All disruptive,
innovative change is met with serious resistance.&lt;/p&gt;
&lt;p&gt;Agile Methods. Some IT departments resist agile methods because --
obviously -- the lack of a comprehensive and detailed project plan is
a problem. Failure to plan is a plan for failure. The idea of
building intentional flexibility into predicting the future is
rejected. It's too disruptive to the IT chain of command to reduce
the need for project managers.&lt;/p&gt;
&lt;p&gt;Dynamic or Functional Programming Languages. It was painful to adopt
Java (or C#). Adopting another, different language like Python is
insanity. Obviously. Anyone in &amp;quot;Big IT&amp;quot; who is a serious Java or C#
developer can tell you that a dynamic language is obviously
unsuitable for production use. Mostly, the reasons boil down to &amp;quot;it's
different&amp;quot;; different is too disruptive.&lt;/p&gt;
&lt;p&gt;N0SQL Data Management. Clearly, the relational database is the only
form of persistence that can possibly be used. It is perfect in every
way. It can be used as a message queue (because adopting an actual
message queue is too much work). It can be used for temporary or
transient data. It can be used for non-relational objects like XML
documents. Any suggestion that we use something other than a database
is often met with derision. Clearly, a non-SQL database is disruptive
to the orderly flow of data.&lt;/p&gt;
&lt;p&gt;Simplified Architecture. [This is code for &amp;quot;No Stored Procedures&amp;quot;.]
Since stored procedures have been used with mixed success, some folks
argue that they should be used more. On the other hand, it seems
peculiar to me to intentionally fork application logic into two
places -- application code and database. It seems to add complexity
with no value. Lots of DBA's try to explain that some logic is
&amp;quot;lower-level&amp;quot; or &amp;quot;more closely associated with the data&amp;quot; or &amp;quot;is a
more 'essential' business rule.&amp;quot; There's no dividing line here that
makes stored procedures necessary or useful.&lt;/p&gt;
&lt;p&gt;Try to prevent the problems associated with stored procedures and you
will receive a $#!+-storm of abuse. Every time. Reducing the use of
stored procedures is a disruptive change. An innovation. A bad thing.&lt;/p&gt;
&lt;p&gt;[Want proof of the non-essential nature of stored procedures? Watch
what happens when to upgrade or replace an application and migrate
your data. Did you need the stored procedures? No, you left those
behind. You only kept the data.]&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="check-out-the-book-quot-the-innovator-39-s-dilem"&gt;
&lt;h2&gt;Check out the book &amp;amp;quot;The Innovator&amp;amp;#39;s Dilem...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-17 05:02:05.552000-04:00&lt;/p&gt;
&lt;p&gt;Check out the book &amp;quot;The Innovator's Dilemma&amp;quot; by Christensen.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="disruption"></category></entry><entry><title>Sustaining Innovation or Placating Management</title><link href="https://slott56.github.io/2010_09_14-sustaining_innovation_or_placating_management.html" rel="alternate"></link><published>2010-09-14T08:00:00-04:00</published><updated>2010-09-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-14:/2010_09_14-sustaining_innovation_or_placating_management.html</id><summary type="html">&lt;p&gt;Computerworld, July 26, 2010 cover story was &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/350480/Sustaining_Innovation"&gt;Sustaining
Innovation&lt;/a&gt;&amp;quot;.
The magazine was chock-full of thoughts on innovation.&lt;/p&gt;
&lt;p&gt;Much of it was good, but some of it is just appeasement to management
types who are focused on cost and schedule.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Establish processes and ownership. Organizations should have a
process for taking …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Computerworld, July 26, 2010 cover story was &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/350480/Sustaining_Innovation"&gt;Sustaining
Innovation&lt;/a&gt;&amp;quot;.
The magazine was chock-full of thoughts on innovation.&lt;/p&gt;
&lt;p&gt;Much of it was good, but some of it is just appeasement to management
types who are focused on cost and schedule.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Establish processes and ownership. Organizations should have a
process for taking a promising idea and testing it out...&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Innovation is disruptive. Having a process seeks to minimize
disruption. Indeed, most processes are there to block real innovation
and constraint the energies into pre-approved areas of innovation.&lt;/p&gt;
&lt;p&gt;Which do you want? Innovative change or a nice, controlled process so
that things don't change?&lt;/p&gt;
&lt;p&gt;The number one item -- in the side bar -- is brilliant. &amp;quot;&lt;strong&gt;Give employees the right to fail.&lt;/strong&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Epic advice. And almost impossible to follow, hence the appeasement
item. Permission to fail means -- well -- failures and money
&amp;quot;wasted&amp;quot;. Cost and schedule shot in an attempt to improve.&lt;/p&gt;
&lt;div class="section" id="juxtaposition"&gt;
&lt;h2&gt;Juxtaposition&lt;/h2&gt;
&lt;p&gt;There's an interesting juxtaposition with another article in the same
issue. &amp;quot;&lt;a class="reference external" href="http://www.computerworld.com/s/article/348193/When_good_projects_go_bad"&gt;When Good Projects Go
Bad&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This: &amp;quot;Push for due diligence at the start of a project.&amp;quot; This is the
perfect way to stifle innovation.&lt;/p&gt;
&lt;p&gt;I realize the two articles are almost unrelated, but they're
side-by-side in the print edition. Any cowardly project manager knows
that we can't really give people permission to fail. We need to have
a well-defined process, perform due diligence, and then assure that
all projects are either denied up front or are a ringing success.&lt;/p&gt;
&lt;p&gt;It's easy to avoid the important lesson on innovation (innovation ==
failure) and focus on the appeasement words: &amp;quot;process&amp;quot; and &amp;quot;due
diligence&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="check-out-the-book-the-myths-of-innovation-by-scot"&gt;
&lt;h2&gt;Check out the book The Myths of Innovation By Scot...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-14 20:24:23.833000-04:00&lt;/p&gt;
&lt;p&gt;Check out the book The Myths of Innovation By Scott Berkun.
Depending on the politics, ask them what things that they tried while
innovating that failed.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="management"></category></entry><entry><title>Transformation Pipelines</title><link href="https://slott56.github.io/2010_09_08-transformation_pipelines.html" rel="alternate"></link><published>2010-09-08T22:20:00-04:00</published><updated>2010-09-08T22:20:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-08:/2010_09_08-transformation_pipelines.html</id><summary type="html">&lt;p&gt;My laptop chartplotter software (&lt;a class="reference external" href="http://www.gpsnavx.com/"&gt;GPSNavX&lt;/a&gt;)
is marvelous for visualizing a route. But, there are elements to route
planning that it doesn't handle gracefully.&lt;/p&gt;
&lt;p&gt;Specifically, it doesn't provide useful elapsed time calculation at
all. While the TTG and ETA (Time to Go and Estimated Time of Arrival)
for the next waypoint …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My laptop chartplotter software (&lt;a class="reference external" href="http://www.gpsnavx.com/"&gt;GPSNavX&lt;/a&gt;)
is marvelous for visualizing a route. But, there are elements to route
planning that it doesn't handle gracefully.&lt;/p&gt;
&lt;p&gt;Specifically, it doesn't provide useful elapsed time calculation at
all. While the TTG and ETA (Time to Go and Estimated Time of Arrival)
for the next waypoint are essential, they aren't enough. On a
sailboat, you need to know the complete sequence of planned arrival
times so that you can gauge the overall impact of wind and tide
vagaries on the trip.&lt;/p&gt;
&lt;p&gt;As the trip progresses, the schedule variance allows informed
decision-making. Tack? Hole up for the night? Motor?&lt;/p&gt;
&lt;p&gt;GPSNavX has a number of marvelous export capabilities -- as GPX, KML
or CSV data. These contain a list of waypoints and little more. We
need to enrich this data to produce an overall schedule.&lt;/p&gt;
&lt;div class="section" id="enriching-the-data"&gt;
&lt;h2&gt;Enriching The Data&lt;/h2&gt;
&lt;p&gt;Fundamentally, we have a number of enrichment stages. The functional
programming features of Python make this complex sequence of
enrichment stages into a very tidy, and adaptable application.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if variance is None: variance= chesapeake
with open(route_file,'rb') as source:
    rte= csv.reader(source)
    with open(schedule_file,'wb') as target:
        rte_rhumb= csv.writer( target )
        rte_rhumb.writerow(
            [&amp;quot;Name&amp;quot;, &amp;quot;Lat&amp;quot;, &amp;quot;Lon&amp;quot;, &amp;quot;Desc&amp;quot;,
            &amp;quot;Distance (nm)&amp;quot;, &amp;quot;True Bearing&amp;quot;, &amp;quot;Magnetic Bearing&amp;quot;,
            &amp;quot;Distance Run&amp;quot;, &amp;quot;Elapsed HH:MM&amp;quot;, ]
            )
        for sched in gen_schedule( gen_mag_bearing( gen_rhumb( gen_route_points( rte ) ), variance), speed ):
            rte_rhumb.writerow(
                [sched.point.name, sched.point.lat, sched.point.lon, sched.point.desc,
                sched.distance,
                int(sched.true_bearing.deg) if sched.true_bearing is not None else None,
                int(sched.magnetic.deg) if sched.magnetic is not None else None,
                sched.running, sched.elapsed_hm, ]
                )
&lt;/pre&gt;
&lt;p&gt;Essentially, the core of this is a simple composition of generator
functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for sched in gen_schedule( gen_mag_bearing( gen_rhumb( gen_route_points( rte ) ), variance), speed ):
&lt;/pre&gt;
&lt;p&gt;We have a number of individual transformations to look at. Each of
those follows a common pattern. The transformations are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;gen_route_points( rte )&lt;/li&gt;
&lt;li&gt;gen_rhumb( route_points_iter )&lt;/li&gt;
&lt;li&gt;gen_mag_bearing( rhumb_iter, declination )&lt;/li&gt;
&lt;li&gt;gen_schedule( rhumb_mag_iter, speed= 5.0 )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's a bunch of fancy math involved in the rhumb line and distance
between two points on the surface of the earth. For my purposes,
plane sailing is fine. I don't need great circle routes because I'm
not going far.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.movable-type.co.uk/scripts/latlong.html"&gt;Calculate distance, bearing and more between Latitude/Longitude
points&lt;/a&gt; for a
clear and useful treatment of the math. Bowditch's American Practical
Navigator, &lt;a class="reference external" href="http://www.irbs.com/bowditch/pdf/chapt24.pdf"&gt;chapter
24&lt;/a&gt;, provides
alternate methods using table lookup and interpolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="seeding-the-pipeline"&gt;
&lt;h2&gt;Seeding the Pipeline&lt;/h2&gt;
&lt;p&gt;Here, for example, is the first step of the pipeline. Creating a
RoutePoint from the four values found in the CSV or GPX route file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
RoutePoint= namedtuple( 'RoutePoint', 'name,lat,lon,desc,point' )

def gen_route_points( rte ):
for name,lat,lon,desc in rte:
    point= navigation.LatLon( lat, lon )
    yield RoutePoint( name, lat, lon, desc, point )
&lt;/pre&gt;
&lt;p&gt;Since this is a generator function, it can use an iterator and be
used by an iterator. The source iterator can be a csv.reader. Or it
can be the result of XML parsing -- just so long as it matches the
interface specification of being an iterator over a 4-tuple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rhumb-line-calculation"&gt;
&lt;h2&gt;Rhumb-Line Calculation&lt;/h2&gt;
&lt;p&gt;We'll enrich the data. But we won't update an object. We'll stick
closely to the philosophy of immutable objects (i.e., named tuples)
which are modified by a generator function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
RoutePoint_Rhumb= namedtuple( 'RoutePoint', 'point,distance,bearing' )

def gen_rhumb( route_points_iter ):
    p1= route_points_iter.next()
    for p2 in route_points_iter:
        r, theta= navigation.range_bearing( p1.point, p2.point )
        yield RoutePoint_Rhumb( p1, r, theta )
        p1= p2
    yield RoutePoint_Rhumb( p2, None, None )
&lt;/pre&gt;
&lt;p&gt;The essential calculations are in a separate module, navigation. What
we've done, however, is merge information from adjacent values so
that we can transform a simple list of points into a list of pairs of
points: the from and to for each leg of the trip. Between the two
points, we compute the simple rhumb line, the distance and bearing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="true-to-magnetic-conversion"&gt;
&lt;h2&gt;True to Magnetic Conversion&lt;/h2&gt;
&lt;p&gt;We need to enrich our waypoint rhumb-line information with magnetic
compass information. The true course needs a declination or variance
value added to it. Again, we're just creating new objects from
existing objects, using immutable named tuples.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
RoutePoint_Rhumb_Magnetic= namedtuple( 'RoutePoint', 'point,distance,true_bearing,magnetic' )

def gen_mag_bearing( rhumb_iter, declination ): # A/k/a Variation
    for rp_rhumb in rhumb_iter:
        if rp_rhumb.bearing is None:
            yield RoutePoint_Rhumb_Magnetic(rp_rhumb.point, None, None, None)
        else:
            magnetic= rp_rhumb.bearing+declination(rp_rhumb.point)
            yield RoutePoint_Rhumb_Magnetic(rp_rhumb.point, rp_rhumb.distance, rp_rhumb.bearing, magnetic )
&lt;/pre&gt;
&lt;p&gt;In this case, we're simply including a declination calculation. While
the model is available from
&lt;a class="reference external" href="http://www.ngdc.noaa.gov/IAGA/vmod/igrf.html"&gt;IUGG&lt;/a&gt;, we can often
use averages or approximations. And -- in the Chesapeake -- the
approximation is simply to add 11 degrees.&lt;/p&gt;
&lt;p&gt;Spot-on accuracy doesn't matter, since we're driving a sailboat. The
compass isn't very accurate; the boat motion makes it hard to read
precisely; and current as well as leeway have profound effects. It is
helpful to have magnetic courses in the schedule instead of true
courses. Further, the chartplotter will be computing the final CTS
(Course to Steer).&lt;/p&gt;
&lt;p&gt;So this stage in the pipeline might be optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="distance-run-and-elapsed-time"&gt;
&lt;h2&gt;Distance Run and Elapsed Time&lt;/h2&gt;
&lt;p&gt;The final distance run and elapsed time is pretty simple. We're
creating a new tuple from existing tuples.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SchedulePoint = namedtuple( 'RoutePoint', 'point,distance,true_bearing,magnetic,running,elapsed_min,elapsed_hm' )

def gen_schedule( rhumb_mag_iter, speed= 5.0 ):
    distance = 0.0
    for rp in rhumb_mag_iter:
        if rp.true_bearing is None:
            yield SchedulePoint( rp.point, rp.distance, rp.true_bearing, rp.magnetic, None, None, None )
        else:
            distance += rp.distance
            elapsed_min= 60.*distance/speed
            h, m = divmod( int(elapsed_min), 60 )
            elapsed_hm = &amp;quot;{0:02d}h {1:02d}m&amp;quot;.format( h, m )
            yield SchedulePoint( rp.point, rp.distance, rp.true_bearing, rp.magnetic, distance, elapsed_min, elapsed_hm )
&lt;/pre&gt;
&lt;p&gt;This gives us a tuple that includes the original way point, the next
waypoint, the distance, true bearing, magnetic bearing, total
distance run, and elapsed time.&lt;/p&gt;
&lt;p&gt;The amount of programming is minimal. The overall design seems
reasonably flexible and built from small, easy-to-validate pieces.&lt;/p&gt;
&lt;p&gt;Python's functional programming features -- particularly generator
functions and named tuples -- seem to make it pleasant to write this
kind of transformation pipeline.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional programming"></category></entry><entry><title>Legacy Data Preservation</title><link href="https://slott56.github.io/2010_09_08-legacy_data_preservation.html" rel="alternate"></link><published>2010-09-08T08:00:00-04:00</published><updated>2010-09-08T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-08:/2010_09_08-legacy_data_preservation.html</id><summary type="html">&lt;p&gt;Extracting legacy data can be really, really hard. However, it's of
central importance because data lives forever. Application &amp;quot;logic&amp;quot; and
&amp;quot;business rules&amp;quot; come and go.&lt;/p&gt;
&lt;p&gt;Today's case study is a dusty old Dell Inspiron Laptop running
Windows 98 with
&lt;a class="reference external" href="http://www.nobeltec.com/support/suppot_notice.asp"&gt;Chartview&lt;/a&gt;
software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 1.&lt;/strong&gt; Chartview. No extract or export capability, except …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Extracting legacy data can be really, really hard. However, it's of
central importance because data lives forever. Application &amp;quot;logic&amp;quot; and
&amp;quot;business rules&amp;quot; come and go.&lt;/p&gt;
&lt;p&gt;Today's case study is a dusty old Dell Inspiron Laptop running
Windows 98 with
&lt;a class="reference external" href="http://www.nobeltec.com/support/suppot_notice.asp"&gt;Chartview&lt;/a&gt;
software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 1.&lt;/strong&gt; Chartview. No extract or export capability, except
to a GPS via a serial port. I guess I could solder up a PC serial
connector to a serial-USB interface so my Mac could read the
stream of NMEA 0183 messages that contain routes and waypoints.
But that seems complex for a one-time transfer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 2&lt;/strong&gt;. Windows 98. Won't mount any USB device I own. No
solid-state disk, no rotating disk. Nothing. I have the original
install CD with all the extra drivers. Didn't help.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 3&lt;/strong&gt;. Dell Laptop. DVD player, floppy disk drive, and a
USB port that Windows 98 doesn't seem to know what to do with. No
ethernet, only a modem connection.&lt;/p&gt;
&lt;p&gt;How do we preserve the waypoints and routes on this ancient Dell
so that we can replace it with a nice, new &lt;a class="reference external" href="http://www.standardhorizon.com/indexVS.cfm?cmd=DisplayProducts&amp;amp;ProdCatID=84&amp;amp;encProdID=786FA3B62DC4B9B5DD197438F18995CD&amp;amp;DivisionID=3&amp;amp;isArchived=0"&gt;Standard Horizon CP
300i&lt;/a&gt;
and MacBook Pro running &lt;a class="reference external" href="http://www.gpsnavx.com"&gt;GPSNavX&lt;/a&gt;?&lt;/p&gt;
&lt;div class="section" id="raw-data"&gt;
&lt;h2&gt;Raw Data&lt;/h2&gt;
&lt;p&gt;To get the raw data, I pulled the disk drive, mounted it in an
IDE-USB enclosure and pulled the relevant routes and waypoints
files. Now we have something we can work with.&lt;/p&gt;
&lt;p&gt;The file formats are undocumented, but the data's not complex,
making it easy to explore. Also, we can look at the old Chartview
GUI to see the data and compare it with the raw bytes on the file.&lt;/p&gt;
&lt;p&gt;Modern software is more properly normalized, simplifying the
conversion. The legacy Chartview route data included each waypoint
-- unrelated to the master list of waypoints -- along with bearing
and range information, as well as compass deviation and projected
speed. Really. A modern GPX file as used by
&lt;a class="reference external" href="http://www.gpsnavx.com/"&gt;GPSNavX&lt;/a&gt; or
&lt;a class="reference external" href="http://www.inavx.com/"&gt;iNavX&lt;/a&gt; only needs the waypoints.
Nothing else. New software will correctly calculate range and
bearing to next waypoint as well as lookup the magnetic deviation
from standard tables. So we don't need to preserve all of the
data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pass-1"&gt;
&lt;h2&gt;Pass 1&lt;/h2&gt;
&lt;p&gt;The first pass is to write simple &amp;quot;hex dump&amp;quot; utility in Python to
see what's even in the files.&lt;/p&gt;
&lt;p&gt;Something like this seems to allow enough flexibility to get a
good view of the record sizes and field contents in the file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def hex_print( bytes, offset=0 ):
for section in xrange(0,len(bytes)+31,32):
    block= bytes[section:section+32]
    print( '    ', ' '.join( '{0:3d}'.format(x+section) for x in xrange(32) ) )
    print( &amp;quot;{0:4d}&amp;quot;.format(offset+section), ' '.join( '{0:3d}'.format(ord(x)) for x in block ) )
    print( '    ', ' '.join(  &amp;quot;  {0}&amp;quot;.format(x) if 32 &amp;lt;= ord(x) &amp;lt; 128 else '   ' for x in block ) )
    print()

def hex_dump( file, size=32 ):
offset= 0
with open(file,'rb') as data:
    print( '    ', ' '.join( '{0:3d}'.format(x) for x in xrange(size) ) )
    block= data.read(size)
    while block:
        hex_print( block, offset )
        block= data.read(size)
        offset += size
&lt;/pre&gt;
&lt;p&gt;Once we have a sense of what's going on, we can use the Python
&lt;a class="reference external" href="http://docs.python.org/library/struct.html"&gt;struct&lt;/a&gt; module to
get the real data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pass-2"&gt;
&lt;h2&gt;Pass 2&lt;/h2&gt;
&lt;p&gt;In the case of Chartview marks, we have a complex, but manageable
structure definition. Some of the field sizes are conjectures.
It's possible that all those filler bytes are some kind of word or
x386 paragraph alignment; it's also possible that I've
misinterpreted some of the less relevant numeric fields. The two
double-precision values, however, are rock solid.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mark_structure =   &amp;quot;=b 4x 6s 45x 502s   d   d 10x h h h 10x 8s x 6s x 8s x 6s 31x  f  f 32x&amp;quot;
Mark= namedtuple( 'Mark',
 &amp;quot;record, name, text, lat, lon, display_name, enable_mark, anchor_mark,&amp;quot;
 &amp;quot;dt1, tm1, dt2, tm2, arrival_radius, max_xte&amp;quot; )
&lt;/pre&gt;
&lt;p&gt;Given this structure and the associated named tuple, we can write
a pleasant (and highly reusable) generator function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def gen_items( file, structure, record_class ):
 size= struct.calcsize( structure )
 with open(file,'rb') as data:
     block= data.read(size)
     while len(block) == size:
         raw= record_class( *struct.unpack(structure,block) )
         yield raw
         block= data.read(size)
&lt;/pre&gt;
&lt;p&gt;This makes for a simple application to extract the marks. An
application can reformat them into GPX or CSV format.&lt;/p&gt;
&lt;p&gt;Something like this is a good starting point.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def print_marks( file ):
  for mark in gen_items( file, mark_structure, Mark ):
      print( strip(mark.name), mark.lat, mark.lon )
&lt;/pre&gt;
&lt;p&gt;We can easily write a version which includes the formatting
required to get the latitudes and longitudes into a format
acceptable by &lt;a class="reference external" href="http://www.gpsnavx.com/"&gt;GPSNavX&lt;/a&gt; or
&lt;a class="reference external" href="http://www.x-traverse.com/"&gt;X-Traverse&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="routes"&gt;
&lt;h2&gt;Routes&lt;/h2&gt;
&lt;p&gt;Routes are more complex than marks because they have a header,
followed by the details as a sequence of individual waypoints.
Since Chartview doesn't normalize these things, each route can
have duplicate waypoints, making it very difficult to get them
loaded into an application that normalizes properly.&lt;/p&gt;
&lt;p&gt;How many WP1's can you have? The answer should be &amp;quot;one&amp;quot;. Each
additional WP1 is a problem. But it's a small problem. For the WPx
points, we simply disambiguate them a route number. There seemed
to have been a limit of 15 routes, so we can just expand WP&lt;em&gt;x&lt;/em&gt;
to WP&lt;em&gt;x&lt;/em&gt;-&lt;em&gt;rr&lt;/em&gt;, where &lt;em&gt;rr&lt;/em&gt; is the route number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Data is preserved. Legacy PC and GPS can be chucked (or sold on
eBay to a collector).&lt;/p&gt;
&lt;p&gt;It's important to note that data outlives application software.
This is a universal truth -- data lasts forever, applications come
and go. Highly optimized data structures (like the legacy
Chartview files) are a bad policy. Highly usable data structures
(like GPX files) are more valuable.&lt;/p&gt;
&lt;p&gt;Python does a marvelous job of making a potentially horrifying
data conversion into something like a few evenings trying to find
the key pieces of data in the legacy files. Perhaps the hardest
part was tracking down single and double-precision floating-point
numbers. But once they were found -- matching known latitudes and
longitudes -- it was clear sailing.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="microsoft-will-not-provide-usb-2-0-driver-support"&gt;
&lt;h2&gt;Microsoft will not provide USB 2.0 driver support ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-09-08 19:27:27.213000-04:00&lt;/p&gt;
&lt;p&gt;Microsoft will not provide USB 2.0 driver support on Windows 9x or
earlier Windows operating systems
&lt;a class="reference external" href="http://www.microsoft.com/whdc/archive/usb2support.mspx"&gt;http://www.microsoft.com/whdc/archive/usb2support.mspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out&lt;/p&gt;
&lt;p&gt;Creating The Social Address Book
Terry ...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-11-06 12:28:19.222000-04:00&lt;/p&gt;
&lt;p&gt;Check out
Creating The Social Address Book
Terry Jones, 11.03.10, 06:00 AM EDT
&lt;a class="reference external" href="http://www.forbes.com/2010/11/02/internet-fluidinfo-software-technology-social-media.html"&gt;http://www.forbes.com/2010/11/02/internet-fluidinfo-software-technology-social-media.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data conversion"></category><category term="#python"></category></entry><entry><title>Using SCons</title><link href="https://slott56.github.io/2010_09_01-using_scons.html" rel="alternate"></link><published>2010-09-01T08:00:00-04:00</published><updated>2010-09-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-09-01:/2010_09_01-using_scons.html</id><summary type="html">&lt;p&gt;In looking at Application Lifecycle Management (see &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2010_02_04-alm_tools.html"&gt;ALM
Tools&lt;/a&gt;&amp;quot;),
I had found that &lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt; appears to be pretty
popular. It's not as famous as all the make variants, or Apache Ant or
Apache Maven, but it seems to have a niche in the forest of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_build_automation_software"&gt;Build
Automation
Software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In looking at Application Lifecycle Management (see &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2010_02_04-alm_tools.html"&gt;ALM
Tools&lt;/a&gt;&amp;quot;),
I had found that &lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt; appears to be pretty
popular. It's not as famous as all the make variants, or Apache Ant or
Apache Maven, but it seems to have a niche in the forest of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_build_automation_software"&gt;Build
Automation
Software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While it looks nice, parts of SCons are confusing. I struggled until
I found a simple use case.&lt;/p&gt;
&lt;p&gt;More: &lt;a class="reference external" href="http://www.genode-labs.com/publications/scons-vs-make-2008.pdf"&gt;Empirical Comparison of SCons and GNU
Make&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;SCons proved to be more accurate, mostly due to its stateful,
content-based signature model.&lt;/p&gt;
&lt;p&gt;On the other hand, GNU Make proved to be more resource
friendly, especially regard- ing the memory footprint. SCons
needs to address this problem to be a viable alternative to
Make when building large software projects.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[Also, it appears that a lot of build and test automation have
been reframed as &amp;quot;Continuous Integration&amp;quot;. Which isn't really a
bad thing. But it can be confusing because there are too many
categories into which general-purpose tools can be fit.]&lt;/p&gt;
&lt;p&gt;While SCons looks cool, I haven't had a huge need for it at work.
Working in Python, there's no real &amp;quot;build&amp;quot;. Instead our continuous
integration boils down to unit testing. Our &amp;quot;build&amp;quot; is an SVN
checkin. Our deployment is an SVN checkout and `python setup.py
install`.&lt;/p&gt;
&lt;p&gt;At some point, I would like to create an SConstruct file that runs
our integration test suite. But it's trapped at a low priority.&lt;/p&gt;
&lt;div class="section" id="scons-and-sphinx"&gt;
&lt;h2&gt;SCons and Sphinx&lt;/h2&gt;
&lt;p&gt;I did find an SConscript example that automated a document build
using Sphinx. This&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bitbucket.org/zondo/sphinx-scons/"&gt;sphinx-scons&lt;/a&gt; was
quite cool. However, it was challenging to customize. The SCons
documentation requires real work to understand. I could see the
value, but it was a lot of work.&lt;/p&gt;
&lt;p&gt;I'm hoping that &lt;a class="reference external" href="http://nostarch.com/"&gt;No Starch Press&lt;/a&gt; finds
someone to write a tidy introduction to SCons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scons-and-rst-and-latex-oh-my"&gt;
&lt;h2&gt;SCons and RST and LaTeX (oh, my!)&lt;/h2&gt;
&lt;p&gt;Sphinx has made me a total fanboi of &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReStructured
Text&lt;/a&gt;. While I know
MS Word and iWorks Pages quite well, I have no patience with all
the pointing and clicking. Getting consistency is requires
consistent pointing and clicking; some people can do it, but some
of us find that manual pointing and clicking is sometimes
irreproducible. Semantic markup is a huge pain in the neck because
we have to stop typing to click on the proper style hint for the
various words.&lt;/p&gt;
&lt;p&gt;I also know DocBook XML and LaTeX quite well. I've used very cool
XML editors including &lt;a class="reference external" href="http://www.xmlmind.com/xmleditor/"&gt;XML Mind XML
Editor&lt;/a&gt; (which is very
nice.) I no longer have any patience with any of these tools
because there's too much GUI.&lt;/p&gt;
&lt;p&gt;RST is fun because you write in plain text. There are a few
directives and a few bits of inline roles for semantic markup. But
your work can focus on the content, leaving presentation aside. A
command-line tool (with templates) emits HTML or LaTeX or
whatever. The style considerations can be (a) secondary and (b)
completely consistent.&lt;/p&gt;
&lt;p&gt;RST will easily produce complex LaTeX from plain text. What a joy.
LaTeX, of course, isn't the goal, it's just an intermediate result
that leads to DVI which leads -- eventually -- to a PDF.&lt;/p&gt;
&lt;p&gt;Because of the Unicode and font selection on the Mac, I'm a user
of XeTeX and XeLaTeX. I have some problems with getting my copy of
&lt;a class="reference external" href="http://www.fonts.com/FindFonts/detail.htm?pid=204105"&gt;Blackadder
ITC&lt;/a&gt; to
work, but generally I'm able to write without much fussing around.&lt;/p&gt;
&lt;p&gt;SCons has a great deal of the TeX/DVI/PDF tool chain already
installed. However, it doesn't have either the rst2latex script or
the XeTeX tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-sconscript"&gt;
&lt;h2&gt;An SConscript&lt;/h2&gt;
&lt;p&gt;While my first attempts to understand SCons didn't work out well,
looking at RST and XeLaTex was a much better use case.&lt;/p&gt;
&lt;p&gt;I wound up with this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rst2latex = Builder( action=&amp;quot;rst2latex.py $SOURCES &amp;gt;$TARGET&amp;quot;,
    suffix='.tex', src_suffix='.rst',
)
xelatex = Builder( action=[&amp;quot;xelatex $SOURCES&amp;quot;, &amp;quot;xelatex $SOURCES&amp;quot;],
    suffix='.pdf', src_suffix='.tex',
)
env = Environment(ENV=os.environ,
    BUILDERS = { 'rst2latex' : rst2latex, 'xelatex':xelatex }
)
env.rst2latex('someDoc')
env.xelatex('someDoc' )
env.rst2latex('anotherDoc')
env.xelatex('anotherDoc')
&lt;/pre&gt;
&lt;p&gt;Getting this to work was quite pleasant. I can see how I could
further optimize the document production pipeline by combining the
two Builders.&lt;/p&gt;
&lt;p&gt;[And yes, the xelatex step is run twice to guarantee that the
references are correct.]&lt;/p&gt;
&lt;p&gt;Now, I can get away with write, run `scons` and review the
resulting PDF. It's fast and it produces a nice-looking PDF with very
little work and no irreproducible pointing and clicking.&lt;/p&gt;
&lt;p&gt;Given this baseline, I can now dig into SCons for ways to make this
slightly simpler.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="scons"></category><category term="#python"></category><category term="docutils"></category><category term="continuous integration"></category></entry><entry><title>Oracle Analytics and Functional Programming</title><link href="https://slott56.github.io/2010_08_30-oracle_analytics_and_functional_programming.html" rel="alternate"></link><published>2010-08-30T07:28:00-04:00</published><updated>2010-08-30T07:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-08-30:/2010_08_30-oracle_analytics_and_functional_programming.html</id><summary type="html">&lt;p&gt;As a hypothetical, I was asked about doing Oracle Analytic functions in
Python.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Sidebar: Politics&lt;/strong&gt;. The question came from a DBA in a C# shop.
That's why it's just hypothetical. Politically, they could never make
use of this information. In C# world, Functional Programming is often
scary and evil. It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As a hypothetical, I was asked about doing Oracle Analytic functions in
Python.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Sidebar: Politics&lt;/strong&gt;. The question came from a DBA in a C# shop.
That's why it's just hypothetical. Politically, they could never make
use of this information. In C# world, Functional Programming is often
scary and evil. It does exist -- obviously -- but it's called &amp;quot;Oracle
Analytics&amp;quot;, which makes it acceptable. If functional programming was
called &amp;quot;functional programming&amp;quot; it would be unacceptable.]&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Sidebar: SQL&lt;/strong&gt;. A big apples-to-oranges issue here is that the
Oracle analytic functions can be composed in subqueries to write
complex reporting queries. When you implement these functions in
Python, you appear to lose some SQL &amp;quot;features&amp;quot; for report-writing.
Actually, you move the SQL functional programming into Python
functional programming. Everyone complains when they have to give up
SQL. The true haterz say that using Python's functional programming
for database processing subverts the database and leads to moral
decay and the end of Western Civilization. Godwin's Law then
applies.]&lt;/p&gt;
&lt;p&gt;Specific functions lifted up to me were RANK, FIRST, LAST, ROW_NUMBER
and DENSE_RANK. All of these are relatively simple functional
programming examples.&lt;/p&gt;
&lt;div class="section" id="group-by"&gt;
&lt;h2&gt;GROUP BY&lt;/h2&gt;
&lt;p&gt;First -- and foremost -- SQL GROUP-BY can be slow. No one ever wants
to hear this. The true haterz will claim that it's supposed to be
faster and provide a bunch of non-reasons. Please benchmark.&lt;/p&gt;
&lt;p&gt;Every database has to provide a GROUP-BY implementation that's
&lt;em&gt;perfectly&lt;/em&gt; general; it has to sort. A procedural program can
sometimes do the same operation much more quickly because it doens't
have to be perfectly general; we can make different memory use
tradeoffs than the the database does.&lt;/p&gt;
&lt;p&gt;For a fast GROUP-BY, use a hash map of some kind. Read all the rows
in the simplest, fastest array fetch possible. Here's how you can do
a blindingly fast SUM/GROUP-BY.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections import defaultdict
from decimal import Decimal

groups = defaultdict( Decimal )
for row in some_query_result_set:
    groups[row['key']] += groups[row['value']]
&lt;/pre&gt;
&lt;p&gt;Writing code like this is based on the assumption that the number of
groups is small enough to fit into memory. That assumption allows us
to avoid a sort. The database can't make this assumption, and can't
easily use this kind of data structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functional-programming"&gt;
&lt;h2&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;The analytical functions are nice applications of a functional style
of programming. The ROW_NUMBER is already part of Python: it's the
internal enumerate function.&lt;/p&gt;
&lt;p&gt;We can use enumerate to implement FIRST.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def first( the_limit, some_query ):
    for number, row in enumerate( some_query ):
        if number &amp;gt;= the_limit:
            break
        yield row
&lt;/pre&gt;
&lt;p&gt;This first function can be then used in another loop.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for row in first( 100, some_query ):
    process( row )
&lt;/pre&gt;
&lt;p&gt;LAST is more complex because there's no easy way to skip ahead.
Instead we have to buffer some rows.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def last( the_limit, some_query ):
    queue = []
    for row in some_query:
        if len(queue) == the_limit:
            queue.pop( 0 )
            queue.append( row )
    for row in queue:
        yield row
&lt;/pre&gt;
&lt;p&gt;This can be sped up a little by using an explicit iterator object and
breaking the &lt;tt class="docutils literal"&gt;for row in some_query&lt;/tt&gt; loop into two phases to hoist
the nearly-constant if-statement.&lt;/p&gt;
&lt;p&gt;These can be composed with Python's sorted function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for row in first( 10, sorted( some_query, key=lambda row: row['key']) ):
    process( row )
&lt;/pre&gt;
&lt;p&gt;This is elegant, but may only draw a tie in a race against the
database. Python has the potential advantage of in-memory sorting.
Oracle, however, is clever enough to use in-memory sorting on small
sets of data, offsetting Python's advantage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-complex-functions"&gt;
&lt;h2&gt;More Complex Functions&lt;/h2&gt;
&lt;p&gt;The more complex functions of RANK and DENSE_RANK require two-phase
processing of rows. If we assume that we can fit the rows in memory,
this isn't very complex at all. Indeed, the rank function is just a
glorified order-by of a subset of the original data. However, it does
require a potentially slow sort step.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ranked = enumerate ( sorted( some_query, key = lambda row: row['key'] ) )
&lt;/pre&gt;
&lt;p&gt;Okay. So RANK isn't so complex after all. Functional programming
rocks.&lt;/p&gt;
&lt;p&gt;DENSE_RANKED is confusing to me, but it look like the key phrase is
&amp;quot;Rows with equal values for the ranking criteria receive the same
rank.&amp;quot; This means that the simple built-in enumerate isn't
appropriate, and we need a key-aware enumeration.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def dense_rank( some_query, key ):
    query_iter= iter(some_query)
    rank= 1
    current = query_iter.next()
    yield rank, current
    for row in query_iter:
        if key(current) != key(row):
            rank += 1
            current= row
        yield rank, row
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="composition"&gt;
&lt;h2&gt;Composition&lt;/h2&gt;
&lt;p&gt;One of the strong suits of SQL is that it allows us to define a
functional-programming composition. Rather than write a lot of
looping, we specify a series of functions which are composed and
applied to our data.&lt;/p&gt;
&lt;p&gt;For example, using FIRST and DENSE_RANK can be done like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for row in first( 10, dense_rank( some_ordered_query, key=lambda row: row['key'] ) ):
    process( row )
&lt;/pre&gt;
&lt;p&gt;This functional programming composition is -- BTW -- precisely what
SQL specifies. SQL describes incremental processing of each row
through a kind of pipeline that does map, filter, reduce and sort
algorithms on the row.&lt;/p&gt;
&lt;p&gt;The ORDER-BY clause is an initial sort.&lt;/p&gt;
&lt;p&gt;The WHERE clause is an initial filter. It may involve a mapping if
there are calculations in the various parts of the WHERE clause.&lt;/p&gt;
&lt;p&gt;The GROUP-BY clause is a reduction into groups.&lt;/p&gt;
&lt;p&gt;The HAVING clause is a second filter, applied to the groups. It may
involve a mapping if there are calculations in the various parts of
the HAVING clause.&lt;/p&gt;
&lt;p&gt;Finally the SELECT clause is a mapping that does calculations on the
resulting collection of rows.&lt;/p&gt;
&lt;p&gt;The analytic functions, like subqueries, are simple complex mapping
operations that involve other query pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="you-could-use-itertools-islice-to-implement-firs"&gt;
&lt;h2&gt;You could use itertools.islice() to implement firs...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-30 09:24:04.333000-04:00&lt;/p&gt;
&lt;p&gt;You could use itertools.islice() to implement first().
A collections.deque would make last() less inefficient.
In theory you could implement first(10, sorted(...)) more efficiently by
not sorting items past position 10 (e.g. skip quicksort's recursive
calls if they wouldn't touch the first 10 items). I'm not sure if
Python's stdlib has an algorithm for this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-a-similar-set-of-compose-able-sql-lik"&gt;
&lt;h2&gt;Implementing a similar set of compose-able SQL-lik...&lt;/h2&gt;
&lt;p&gt;Bryan Cole&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-30 12:28:28.334000-04:00&lt;/p&gt;
&lt;p&gt;Implementing a similar set of compose-able SQL-like sorting and grouping
functions for operating on large datasets led me to create &amp;quot;sendtools&amp;quot;:
see &lt;a class="reference external" href="http://pypi.python.org/pypi/sendtools"&gt;http://pypi.python.org/pypi/sendtools&lt;/a&gt;
(appologies for the plug). How does this compare?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="software design"></category><category term="functional programming"></category><category term="SQL"></category></entry><entry><title>Is It Worth Describing Obscure Features?</title><link href="https://slott56.github.io/2010_08_17-is_it_worth_describing_obscure_features.html" rel="alternate"></link><published>2010-08-17T08:00:00-04:00</published><updated>2010-08-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-08-17:/2010_08_17-is_it_worth_describing_obscure_features.html</id><summary type="html">&lt;p&gt;I'm rewriting &lt;em&gt;Building Skills in Python&lt;/em&gt;. 2.7 is out. As more libraries
make the move, 3.1 is getting more and more viable.&lt;/p&gt;
&lt;p&gt;I'm looking closely at the Decorators chapter (&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/html/p03/p03c06_decorators.html"&gt;Part 3, Chapter
6&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And I'm struggling with classmethod. It's a first-class part of
Python. And I'm sure there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm rewriting &lt;em&gt;Building Skills in Python&lt;/em&gt;. 2.7 is out. As more libraries
make the move, 3.1 is getting more and more viable.&lt;/p&gt;
&lt;p&gt;I'm looking closely at the Decorators chapter (&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/html/p03/p03c06_decorators.html"&gt;Part 3, Chapter
6&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And I'm struggling with classmethod. It's a first-class part of
Python. And I'm sure there are folks who find it useful.&lt;/p&gt;
&lt;p&gt;But I'm struggling to find a &amp;quot;simple&amp;quot; (i.e., under 12 lines of code)
example where it might be useful.&lt;/p&gt;
&lt;p&gt;Indeed, I'm starting to suffer from a growing feeling that this is
one language feature that I can gracefully elide from in-depth to
mere mention.&lt;/p&gt;
&lt;p&gt;There is a relevant Stack Overflow question: &lt;a class="reference external" href="http://stackoverflow.com/questions/38238/what-are-class-methods-in-python-for"&gt;What are Class methods
in Python
for?&lt;/a&gt;
But the examples there aren't terribly compelling. Perhaps I have a
blind-spot here because I never seen a big need for writing
metaclasses. Or perhaps because I don't see a need for creating
alternate constructors -- the options in __init__() seem to cover
almost all my needs.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="just-if-it-helps-you-as-a-real-world-example-one"&gt;
&lt;h2&gt;Just if it helps you as a real-world example, one ...&lt;/h2&gt;
&lt;p&gt;Jaime&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-17 08:41:36.512000-04:00&lt;/p&gt;
&lt;p&gt;Just if it helps you as a real-world example, one specific classmethod
that it's very useful it's when dealing with ORMs. Specifically with
SQLAlchey.&lt;/p&gt;
&lt;p&gt;Your class it's something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyClass(Base):
    id = sa.Column(sa.type.Integer(), primary_key=true)
    name = sa.Column(sa.type.String())
    &amp;#64;classmethod
    def all(cls):
        ''' Get all the elements of this class '''
        return meta.Session.query(cls)
&lt;/pre&gt;
&lt;p&gt;I don't know if it's a good example, as it relies on a particular module
(SQLAlchemy) and have some concepts of that module, like meta and query
it, etc... but, well, it's a real world example.&lt;/p&gt;
&lt;p&gt;Other use I sometimes give to classmethods is, if for a particular
static function I want to associate it to a specific class, but it's not
using any object information, sometimes I will &amp;quot;attach&amp;quot; it to the Class.
For example, let's say we are describing vehicles&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Vehicle():
    def __init__(self, type):
        self.type = type
    &amp;#64;classmethod
    def get_num_wheels(cls, type):
        ''' Return number of wheels for a particular type of vehicle '''
        matrix = {'CAR':4, 'BIKE':2, 'TRUCK':8}
        return matrix[type]
&lt;/pre&gt;
&lt;p&gt;I could do the same with a static function outside the class, but I
found sometimes clearer to attach that inside the class, so the calling
will be Vehicle.get_num_wheels(type)
Maybe it's just a stupid example... ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-use-class-methods-often-but-almost-always-as-al"&gt;
&lt;h2&gt;I use class methods often, but almost always as al...&lt;/h2&gt;
&lt;p&gt;casey&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-17 12:38:47.211000-04:00&lt;/p&gt;
&lt;p&gt;I use class methods often, but almost always as alternate constructors.
They really have nothing to do with metaclasses IMO, though they can be
useful with them. I've probably used classmethods 100 times for every 1
time I've created a metaclass (and more often then not, I wind up
refactoring it away later anyhow 8^).&lt;/p&gt;
&lt;p&gt;Probably the best practical example is when an object can be constructed
with args of different meanings. I find it more explicit than sniffing
the arg types in __init__. Also sometimes, the types of the input args
are the same type in both constructors. A simple, useful example I ran
into recently is a 2D vector class. It can be constructed two distinct
ways: with cartesian coordinates or polar coordinates. It so happens
that in both cases they are two numeric arguments (x,y or angle,length)
so a classmethod is perfect to differentiate cleanly.&lt;/p&gt;
&lt;p&gt;Another common use I find for them is for classes for scripts or
daemons. In __init__, I have all of the scripts command line options
broken out into separate arguments. Then I have a classmethod like:
&amp;quot;from_argv(cls, argv)&amp;quot; which takes the arguments as a list of strings as
they would be passed in from the system. This uses argparse or whatever
to parse them and delegates to __init__ using normal arguments. This
makes everything, including the command line arg parsing easily unit
testable, but I'm not forced to fake out CL args to instantiate the
class when testing, unless I want to test that explicitly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-use-classmethods-periodically-and-i-don-39-t-fi"&gt;
&lt;h2&gt;I use classmethods periodically and I don&amp;amp;#39;t fi...&lt;/h2&gt;
&lt;p&gt;TheBashar99&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-17 18:05:55.387000-04:00&lt;/p&gt;
&lt;p&gt;I use classmethods periodically and I don't find them particularly
confusing. They're a convenient way to define methods which do use some
class level data but do not use instance data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;classmethod
def compute(cls, input1, input2)
    return (input1 / input2) * cls.scale
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-think-we-39-re-struggling-with-here-is-the"&gt;
&lt;h2&gt;What I think we&amp;amp;#39;re struggling with here is the...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-17 11:29:39.727000-04:00&lt;/p&gt;
&lt;p&gt;What I think we're struggling with here is the fact that all bound
methods in python are a mere convenience - you get &amp;quot;self&amp;quot; for free. But
whatever &amp;quot;self&amp;quot; is could have been an argument to an unbound function in
the first place.&lt;/p&gt;
&lt;p&gt;When you start talking about classmethod, you give up even that small
convenience. When we use classmethod, we are typically trying to
represent one of two things:&lt;/p&gt;
&lt;p&gt;1) Static data that could just be stored on the class or module in the
first place
or&lt;/p&gt;
&lt;p&gt;2) A function that returns different values based on arguments passed
in, and not on &amp;quot;self&amp;quot;. In this case, one might question why we want to
attach this seemingly unrelated function to the class at all, and not
simply leave leave it as an unbound function in the module's namespace.&lt;/p&gt;
&lt;p&gt;This seems the simple, reasonable thing to do, which is why I think we
struggle to come up with practical examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="probably-the-best-argument-for-class-methods-that"&gt;
&lt;h2&gt;Probably the best argument for class methods that ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-17 12:51:05.295000-04:00&lt;/p&gt;
&lt;p&gt;Probably the best argument for class methods that I've seen is for
alternate constructors. __init__() provides the most common one and
then class methods provide alternate forms of construction. E.g.
Decimal.from_float() or somesuch.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>End User Programming -- Solution or Nuisance?</title><link href="https://slott56.github.io/2010_08_09-end_user_programming_solution_or_nuisance.html" rel="alternate"></link><published>2010-08-09T08:00:00-04:00</published><updated>2010-08-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-08-09:/2010_08_09-end_user_programming_solution_or_nuisance.html</id><summary type="html">&lt;p&gt;The question of &amp;quot;customization&amp;quot; and &amp;quot;extension&amp;quot; is a common one. For
example, &amp;quot;non-technical users to be able to extend with simple scripts&amp;quot;.&lt;/p&gt;
&lt;p&gt;Read this question on Stack Overflow: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3410958/programming-scripting-language-aimed-at-non-technical-people"&gt;Programming / scripting
language aimed at non-technical
people&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is -- at best -- little more than an attractive nuisance. At
worst, of course, it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The question of &amp;quot;customization&amp;quot; and &amp;quot;extension&amp;quot; is a common one. For
example, &amp;quot;non-technical users to be able to extend with simple scripts&amp;quot;.&lt;/p&gt;
&lt;p&gt;Read this question on Stack Overflow: &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3410958/programming-scripting-language-aimed-at-non-technical-people"&gt;Programming / scripting
language aimed at non-technical
people&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is -- at best -- little more than an attractive nuisance. At
worst, of course, it turns into a maintenance nightmare and the
reason for killing the project. Let's look at the ways this can end
badly.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Your &amp;quot;end users&amp;quot; can't or don't customize it with small scripts.
Bottom line: you wrote a scripting interface which only you can use.
Not all bad, but hardly worth the effort. Here's &lt;a class="reference external" href="http://www.robelle.com/smugbook/laws.html"&gt;one
version&lt;/a&gt; of rule: &amp;quot;Make
it possible for programmers to write in English and you will find
that programmers cannot write in English.&amp;quot;&lt;/li&gt;
&lt;li&gt;Your &amp;quot;end users&amp;quot; turn into the worst kind of hackers and break
things left, right and center. Bottom line: you spend more time
debugging the messes created by scripting.&lt;/li&gt;
&lt;li&gt;The real world use cases turn out to be more complex than you
bargained for. You spend endless time extending and modifying the
scripting support to try and balance limited power (to prevent
problems) against enough sophistication (to handle unforeseen use
cases.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;quot;Well,&amp;quot; you argue, &amp;quot;those are extreme cases. There has to be a middle
road where the user's behave properly.&amp;quot; No, not really. This middle
road doesn't exist. Why? Programming is hard. A phrase like &amp;quot;simple
scripts&amp;quot; is contradictory.&lt;/p&gt;
&lt;div class="section" id="war-story-i-the-sas-hacks"&gt;
&lt;h2&gt;War Story I -- The SAS Hacks&lt;/h2&gt;
&lt;p&gt;At one organization, the accountants had created a monster. Their
chart of accounts in the General Ledger (GL) was not consistent
across all of the organizations. Consequently, financial analysis
programs required careful rearrangement of certain ledger totals to
make them reflect the business reality, not the legacy GL mistakes.&lt;/p&gt;
&lt;p&gt;So they wrote some &amp;quot;simple&amp;quot; business rules in SAS do GL extracts. The
extracts which were processed by these rules were useful for
financial reporting because the legacy GL work-arounds were properly
allocated.&lt;/p&gt;
&lt;p&gt;Our job was to write a proper financial reporting tool that correctly
extracted and reported on ledger data. It was going to be a proper
data warehouse. The facts were amounts, the various dimensions were
time, account, organization, bank product line, etc.&lt;/p&gt;
&lt;p&gt;However, because of the SAS hacks, we could not get a single straight
answer to any question. Everything had to be explained by a &amp;quot;here's
some code&amp;quot; answer. Their business rules numbered over 9,000
individual simple statements.&lt;/p&gt;
&lt;p&gt;Question: How is 9,000 of anything &amp;quot;simple&amp;quot;? Answer: it isn't. The
volume makes it complex.&lt;/p&gt;
&lt;p&gt;Further -- of course -- the business rules were actually more complex
than claimed. The superficial claim was that the rules implemented
line-of-business (separate from organization) rules. Some statistics
showed that the rules likely contained two independent dimensions of
each amount.&lt;/p&gt;
&lt;p&gt;The &amp;quot;simple&amp;quot; rules were used to create huge complexity. It's human
nature. The world is complex; we want to write software which
reflects the world as we encounter it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="war-story-ii-the-ms-access-hack"&gt;
&lt;h2&gt;War Story II -- The MS Access Hack&lt;/h2&gt;
&lt;p&gt;At another organization, we had helped the end users buy really nice
reporting tools from
&lt;a class="reference external" href="http://www-01.ibm.com/software/data/cognos/"&gt;Cognos&lt;/a&gt; (before they
became part of IBM) and &lt;a class="reference external" href="http://www.sap.com/solutions/sapbusinessobjects/index.epx"&gt;Business
Objects&lt;/a&gt;
(before they became part of SAP). The tools were -- at the time --
the state of the art in flexible end-user reporting. Cool
drag-and-drop interfaces, flexible scripting add-on capabilities.
Really sweet.&lt;/p&gt;
&lt;p&gt;Did the users actually use this power?&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;They wrote dumb, large, detail-oriented reports. They extracted the
bulk data into MS-Access Databases. Then they hacked around in
MS-Access to produce the reports they wanted.&lt;/p&gt;
&lt;p&gt;Why? (1) They understood Access; learning to use Cognos or BO tools
wasn't going to happen. (2) They wanted real power; the limited
scripting capabilities weren't solving their problems.&lt;/p&gt;
&lt;p&gt;The reason we became involved was because their Chief Access Hack
(CAH™) got another job and no one could figure out how the Access
stuff worked.&lt;/p&gt;
&lt;p&gt;After two weeks of reverse engineering, I found a bunch of business
rules that should have been in the data warehouse. We had a nice
meeting with their executive; we wanted to talk about the CAH and
what they were going to do to prevent this kind of MS-Access
nightmare in the future.&lt;/p&gt;
&lt;p&gt;The executive reminded us that business rules are subtle and complex.
Data warehouse software development is slow and clumsy. The users
will always be several steps ahead of the warehouse processing. The
MS-Access hacking is how they coped with the limitations of the
warehouse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-lines"&gt;
&lt;h2&gt;Bottom Lines&lt;/h2&gt;
&lt;p&gt;Software is complex. We can't create a language suitable for
&amp;quot;non-technical users&amp;quot;. Either the language is too technical for our
users -- and it isn't used -- or the users become technical and
demand more features.&lt;/p&gt;
&lt;p&gt;People learn. They're only non-technical users on day 1. If they
start using the scripting language, they immediately start on the
path to become technical users.&lt;/p&gt;
&lt;p&gt;The real world is complex. There are no &amp;quot;simple scripts&amp;quot; except in a
few textbook cases. When we first set out to build our simple
scripting environment, we start with a few sensible use cases. Then
unforeseen use cases crop up and we either tell people they can't use
our system [&lt;em&gt;Really, would you turn them down?&lt;/em&gt;] or we have to add
complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="architectural-implications"&gt;
&lt;h2&gt;Architectural Implications&lt;/h2&gt;
&lt;p&gt;Because of this complexity issue, avoid some urges to refactor. Not
all refactoring is good refactoring. There is &lt;a class="reference external" href="https://slott56.github.io/2010_05_10-a_limit_to_reuse.html"&gt;A Limit to
Reuse&lt;/a&gt;.
Specifically, any attempt to create plug-in scripting into a larger
application rapidly becomes hard to manage. It's better to provide
necessary libraries to build applications around a script than to
plug a script into a standardized application.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="to-follow-the-train-of-thought-related-to-quot-a"&gt;
&lt;h2&gt;To follow the train of thought related to &amp;amp;quot;A ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-15 06:34:18.463000-04:00&lt;/p&gt;
&lt;p&gt;To follow the train of thought related to &amp;quot;A Limit to Reuse&amp;quot;, check out
&amp;quot;Code Reuse - A Myth ? by Danny Kalev&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-is-a-third-way-at-one-client-the-quot-pow"&gt;
&lt;h2&gt;There is a third way. At one client, the &amp;amp;quot;pow...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-09 20:22:17.007000-04:00&lt;/p&gt;
&lt;p&gt;There is a third way. At one client, the &amp;quot;power users&amp;quot; did their thing
until the report became &amp;quot;stable&amp;quot;. &amp;quot;Stable&amp;quot; was a negotiated definition
on a per report basis between the &amp;quot;power user&amp;quot; and management. Once it
was agreed that the report was &amp;quot;stable&amp;quot;, it coded up into the formal
infrastructure. Yes, there were still politics. The &amp;quot;power user&amp;quot; did not
want to give up his baby. Management had to say, go have &amp;quot;another baby&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-am-the-marketing-guy-i-agree-you-re-wasting"&gt;
&lt;h2&gt;I am the marketing guy. I agree you're wasting...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-12 02:23:47.637000-04:00&lt;/p&gt;
&lt;p&gt;I am the marketing guy. I agree you're wasting time writing for us end
users. I liken your creative skills to that of an interpreter for a
diplomat. You translate the creative intent of others. Obviously you
couldn't translate for 2 people speaking at the same time. Obviously the
diplomat has no business asking you to teach him the language you've
mastered, as you are busy translating. Which of the diplomat wish to
learn a few light phrases to keep the conversation going shouldn't you
be the able to supply them? Of course problems will occur if you attempt
to teach him how to conduct his efforts, or become overly concerned with
the truth or accuracy of what he says.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-worked-to-program-an-online-survey-system-that-s"&gt;
&lt;h2&gt;I worked to program an online survey system that s...&lt;/h2&gt;
&lt;p&gt;Christian&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-18 11:05:51.971000-04:00&lt;/p&gt;
&lt;p&gt;I worked to program an online survey system that supports &amp;quot;interludes&amp;quot;
of (type-checked, limited) Python code that can be run between pages
during the survey interview process. The questionnaires are scripted in
a custom language that generates a web-version of the questionnaire so
the users are already programming to an extent. The Python interludes
give them some extra power and creative ability though and have allowed
them to do some things that the questionnaire scripting language doesn't
yet support in a first class way (or may never support, for one-off type
things).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-non-technical-should-maybe-be-allowed-simple-b"&gt;
&lt;h2&gt;The non-technical should maybe be allowed simple b...&lt;/h2&gt;
&lt;p&gt;Paddy3118&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-19 12:55:30.031000-04:00&lt;/p&gt;
&lt;p&gt;The non-technical should maybe be allowed simple binary flag
manipulation. Anything beyond that: loops, conditionals, subroutines,
... requires some technical ability.
Maybe a changes to a well commented .ini file is all that could be asked
of the non-technical user.
- Paddy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="software process improvement"></category><category term="#python"></category></entry><entry><title>Scrum Made Difficult</title><link href="https://slott56.github.io/2010_07_22-scrum_made_difficult.html" rel="alternate"></link><published>2010-07-22T08:00:00-04:00</published><updated>2010-07-22T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-07-22:/2010_07_22-scrum_made_difficult.html</id><summary type="html">&lt;p&gt;Here's a great post called &amp;quot;&lt;a class="reference external" href="http://www.mountaingoatsoftware.com/system/article/file/11/ScrumSmells.pdf?1267552461"&gt;Toward a Catalog of Scrum
Smells&lt;/a&gt;&amp;quot;.
This lists some &amp;quot;Management Smells&amp;quot;: specifically doing clumsy,
ineffective things and calling it &amp;quot;Scrum&amp;quot;.&lt;/p&gt;
&lt;p&gt;I found this in StackOverflow question, titled &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3293691/any-stories-where-trying-to-apply-scrum-went-wrong"&gt;Any stories where
trying to apply Scrum went
wrong?&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Another great answer was a link to &amp;quot;&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1392832"&gt;Scrummerfall: World's …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a great post called &amp;quot;&lt;a class="reference external" href="http://www.mountaingoatsoftware.com/system/article/file/11/ScrumSmells.pdf?1267552461"&gt;Toward a Catalog of Scrum
Smells&lt;/a&gt;&amp;quot;.
This lists some &amp;quot;Management Smells&amp;quot;: specifically doing clumsy,
ineffective things and calling it &amp;quot;Scrum&amp;quot;.&lt;/p&gt;
&lt;p&gt;I found this in StackOverflow question, titled &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/3293691/any-stories-where-trying-to-apply-scrum-went-wrong"&gt;Any stories where
trying to apply Scrum went
wrong?&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Another great answer was a link to &amp;quot;&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1392832"&gt;Scrummerfall: World's Worst
Software Development
Methodology&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;What's interesting to me is that (1) Scrum works -- or you'd have
more horror stories -- and (2) people do it wrong all the time.&lt;/p&gt;
&lt;p&gt;Most of the Scrum-Done-Badly smells amount to management-as-usual.
Rather than empower the developers, managers insist on long, stupid
status meetings the purpose of which is to inform management. Rather
than trust the developers to get things done, managers insist on
detailed plans of little value to the developers.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="when-checklist-cultures-meet-non-checklist-cul"&gt;
&lt;h2&gt;... When checklist cultures meet non-checklist cul...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-28 20:29:03.641000-04:00&lt;/p&gt;
&lt;p&gt;... When checklist cultures meet non-checklist cultures the clash can be
ugly ...
Article: The Checklist Manifesto And The Digital Divide by
Joshua-Michele Ross
&lt;a class="reference external" href="http://www.forbes.com/2010/07/26/project-management-marketing-technology-breakthroughs-checklist.html?partner=technology_newsletter"&gt;http://www.forbes.com/2010/07/26/project-management-marketing-technology-breakthroughs-checklist.html?partner=technology_newsletter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="scrum"></category></entry><entry><title>Complexity and Simplicity</title><link href="https://slott56.github.io/2010_07_12-complexity_and_simplicity.html" rel="alternate"></link><published>2010-07-12T21:45:00-04:00</published><updated>2010-07-12T21:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-07-12:/2010_07_12-complexity_and_simplicity.html</id><summary type="html">&lt;p&gt;Here's an interesting -- and common -- question.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;... any tools that I could use to create a web scraper that I could
use to interact with a .aspx website?&lt;/blockquote&gt;
&lt;p&gt;I want to build a tool that will read an input file (e.g. an excel
spreadsheet) containing a list of property parcel …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's an interesting -- and common -- question.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;... any tools that I could use to create a web scraper that I could
use to interact with a .aspx website?&lt;/blockquote&gt;
&lt;p&gt;I want to build a tool that will read an input file (e.g. an excel
spreadsheet) containing a list of property parcel numbers, and for
each parcel number:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;connect to the property appraiser's website (which happens to be the .aspx page),&lt;/li&gt;
&lt;li&gt;enter the parcel number,&lt;/li&gt;
&lt;li&gt;scrape selected data (which is contained in a table on the search results page)&lt;/li&gt;
&lt;li&gt;store the scraped data in an output file (e.g. in the excel file that contains the input list)&lt;/li&gt;
&lt;li&gt;repeat the process for each parcel number&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The follow-on is interesting, also.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I've created an excel macro which does the above with 'simple /
plain vanilla html pages using the WebQuery feature, but it can't
interact with an .aspx page.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Let's consider some of the complexities and simplicities that are
present here.&lt;/p&gt;
&lt;div class="section" id="solution-speak"&gt;
&lt;h2&gt;Solution-Speak&lt;/h2&gt;
&lt;p&gt;First, and most important, this is written in solution-speak. It's an
IT habit, and it's very hard to break. The input appears to be a
spreadsheet. It may not &lt;em&gt;actually&lt;/em&gt; be a spreadsheet, but this
description essentially forces the solution to be built around the
spreadsheet. The source may be another web page or some other file
format. Since the problem is written in solution-speak, we don't know
and can't -- easily -- explore the alternatives.&lt;/p&gt;
&lt;p&gt;Let's assume that the source actually is a spreadsheet. And that this
is the &lt;em&gt;real&lt;/em&gt; source; it's maintained manually by the person who
really &amp;quot;owns&amp;quot; the data.&lt;/p&gt;
&lt;p&gt;The &amp;quot;update-in-place&amp;quot; nature of the question (&amp;quot;e.g. in the excel
file that contains the input list&amp;quot;) constrains the solution. This
tends to add complexity because it somehow &lt;em&gt;seems&lt;/em&gt; simpler to
update a file in place.&lt;/p&gt;
&lt;p&gt;What's &lt;em&gt;actually&lt;/em&gt; simpler is often a process that creates a next
revision of the file, leaving the first one intact and read-only.
It's actually simpler because the &amp;quot;revert&amp;quot; strategy -- in case of
problems -- is trivial. Simply delete the new file, fix the data (or
the software) and run things again. Backup and history are simpler
when creating a new file, also.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technology-choices"&gt;
&lt;h2&gt;Technology Choices&lt;/h2&gt;
&lt;p&gt;Since it's written in solution speak, many technology choices have
been made that might be inappropriate.&lt;/p&gt;
&lt;p&gt;First, it appears that Excel is the &amp;quot;database&amp;quot; of choice. This is a
terrible thing, but very, very common. The person has a problem. They
tried to solve it with a spreadsheet. Now they have two problems.&lt;/p&gt;
&lt;p&gt;A spreadsheet has a great GUI, but -- sadly -- leads to weird,
inconsistent, undisciplined and generally &amp;quot;out-of-control&amp;quot; data. It
doesn't have to create a mess, but it's hard to constrain it to
prevent creating a mess.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternatives"&gt;
&lt;h2&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;This problem is ubiquitous and -- often -- trivial to solve if we cut
Excel out of the picture.&lt;/p&gt;
&lt;p&gt;Consider this workflow.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A small Python program uses xlrd to read this &amp;quot;list of property
parcel numbers&amp;quot; and creates a simple CSV file. Excel is now
officially out of the picture. If this process can't run (because
the spreadsheet got tweaked) we can produce elegant reports with
row and column information so that the person creating the
spreadsheet can fix their problem. Let's say this is 20 lines of
code, assuming the spreadsheet is hellishly complex.&lt;/li&gt;
&lt;li&gt;Some small Python programs read a CSV file, uses urllib2 to
&amp;quot;connect to the property appraiser's website (which happens to be
the .aspx page), enter the parcel number&amp;quot;, do the POST and
retrieve the resulting page. This can be written to a file for
future reference purposes. Numerous problems will be encountered
here every time an appraiser's web site changes. It's best to keep
this separate, since there may be several, each unique to an
appraiser. There's no reason to generalize. Each of these is under
20 lines of code. Often under a dozen.&lt;/li&gt;
&lt;li&gt;Some small Python program reads the resulting pages, uses
Beautiful Soup to parse the resulting HTML. Again, numerous
problems will be encountered here every time an appraiser's web
site changes. It's pleasant to keep this separate from posting the
query since this is just parsing result pages and doing nothing
more. Easy to tweak and fix to keep up with changes. However,
because of the potential complexity of each page, these might be
complex. Let's pretend they're 20+ lines of code.&lt;/li&gt;
&lt;li&gt;Some small Python program merges the original &amp;quot;list of property
parcel numbers&amp;quot; and parsed results into a new .CSV file. With a
double-click, this will be loaded back into Excel to make it look
like the file was updated more-or-less in place. This should be
about a dozen lines of code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since each step is separate, each can be written, tested and
debugged separately. Once they work, some kind of master script
can sequence through all four steps. That master script should be
under a dozen lines of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns"&gt;
&lt;h2&gt;Design Patterns&lt;/h2&gt;
&lt;p&gt;One important design pattern is to get out of &amp;quot;Office Product&amp;quot; mode
as early as possible. Office Produces (like Excel) are fine for
people, but dreadful for automation. They're too complex.&lt;/p&gt;
&lt;p&gt;Another important design pattern is to decompose the problem into
small scripts that can be run independently. Each step creates a work
result that can be viewed and used for debugging. The files aren't
big and can be deleted when the final work product is created. But an
overly automated system is very, very hard to debug.&lt;/p&gt;
&lt;p&gt;Another design pattern is to separate the various web services
requests (in this case a form POST) by destination web site. Each
site has unique security and validation considerations. It's too
complex to write a super-universal, uber-form-filler-outer. It's
easier to write a bunch of specific RESTful web services requests
that are tailored to the unique problems present in each site.&lt;/p&gt;
&lt;p&gt;Finally, it's important to avoid &amp;quot;update in place&amp;quot;. It's hard to do
well, and it's a pain in the neck when something goes wrong and you
want to fall back to the previous version of the database.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="yep-i-had-a-similar-experience-in-2003-i-was-as"&gt;
&lt;h2&gt;Yep, I had a similar experience in 2003.  I was as...&lt;/h2&gt;
&lt;p&gt;Bill Karwin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-13 12:15:32.097000-04:00&lt;/p&gt;
&lt;p&gt;Yep, I had a similar experience in 2003. I was asked to write a script
to import a data dump that was emailed in Excel format. I wrote the
script, but the next week the spreadsheet arrived with a new,
incompatible layout. Changes included new columns, new order of columns,
new column header labels, and ad hoc &amp;quot;notes&amp;quot; fields sprinkled
throughout.&lt;/p&gt;
&lt;p&gt;Again the third week and the fourth week, the layout of the worksheet
was different from any of the weeks prior.&lt;/p&gt;
&lt;p&gt;I rewrote the data import script each week, while I tried in vain to
communicate to my manager that the spreadsheet must be in a consistent
format or else the work I did to &amp;quot;automate&amp;quot; data import would have to be
re-done, and with that much work, we might as well have done data entry
by hand. My explanation had no effect; the spreadsheets continued to be
submitted with a different layout each week.&lt;/p&gt;
&lt;p&gt;Finally my contract at that company ended and I departed (somewhat with
relief, as this incident was typical of the communication failures I
faced). I think it's safe to assume that the data import broke again the
next week, and the company would have no understanding of why it broke.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="Web Services"></category><category term="software design"></category></entry><entry><title>Finding Simplicity</title><link href="https://slott56.github.io/2010_07_01-finding_simplicity.html" rel="alternate"></link><published>2010-07-01T08:00:00-04:00</published><updated>2010-07-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-07-01:/2010_07_01-finding_simplicity.html</id><summary type="html">&lt;p&gt;In Creating Complexity Where None Existed, I noted that it's possible to
create complexity out of thin air.&lt;/p&gt;
&lt;p&gt;Indeed, by wallowing in the supposed drama, one can turn the
differences between sales and service delivery into a hopelessly
complex situation. A focus on a manufactured &amp;quot;conflict&amp;quot; leads to the
following …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Creating Complexity Where None Existed, I noted that it's possible to
create complexity out of thin air.&lt;/p&gt;
&lt;p&gt;Indeed, by wallowing in the supposed drama, one can turn the
differences between sales and service delivery into a hopelessly
complex situation. A focus on a manufactured &amp;quot;conflict&amp;quot; leads to the
following question: &amp;quot;What are the standard techniques for conflict
resolution ?&amp;quot;&lt;/p&gt;
&lt;p&gt;Standard Techniques. Conflict Resolution.&lt;/p&gt;
&lt;p&gt;First, there's no &amp;quot;conflict&amp;quot;. Sales offers something. The customer
may or may not understand that offer. The customer commits to
something. Sales may or may not understand what the customer thinks
they're buying. And delivery has to fill in these gaps between what
sales offered and what the customer thought they were buying.&lt;/p&gt;
&lt;p&gt;It's very simple. I called the lawn service, asking someone to mow my
lawn. But they didn't trim my hedge. No one asked me if I had a
hedge. I didn't have one when I called. I had it put in after I
placed the order for the services. Is this &amp;quot;conflict&amp;quot;? Does it
require &amp;quot;resolution&amp;quot;? Or, does it require that the folks selling the
services on the phone and the folks delivering the service have some
smarter way of coping with the inevitable differences of
understanding?&lt;/p&gt;
&lt;div class="section" id="reality"&gt;
&lt;h2&gt;Reality&lt;/h2&gt;
&lt;p&gt;The trick to avoiding 482 words of drama (using code names!) to
describe sales and delivery is simple. Get Out Of Fantasy Land.&lt;/p&gt;
&lt;p&gt;In the real world, sales has one view of the order, and delivery has
a different view.&lt;/p&gt;
&lt;p&gt;This is not news. Accounts cope with this variability all the time.
They ask people to create a &amp;quot;budget&amp;quot; or a &amp;quot;plan&amp;quot;. And then they
measure actual expenditures against the budget. Budgets changes.
Actuals don't match the budget. This is not &amp;quot;conflict&amp;quot;. There's
nothing to &amp;quot;resolve&amp;quot;.&lt;/p&gt;
&lt;p&gt;There's planned and actual and they're different.&lt;/p&gt;
&lt;p&gt;The real sales promise, memorialized in an &amp;quot;order&amp;quot; is one thing. This
order can change, of course, making things complex.&lt;/p&gt;
&lt;p&gt;The delivery on that promise, memorialized in an &amp;quot;invoice&amp;quot; is another
thing. The delivery may be done in &amp;quot;scramble&amp;quot; mode; folks struggling
to balance ability to deliver against promises made. Or, the delivery
may be done in a more leisurely pace; the work being fit in to a
schedule as time and resources permit.&lt;/p&gt;
&lt;p&gt;Ideally -- of course -- order and invoice match. In reality, they
don't always match.&lt;/p&gt;
&lt;p&gt;Before the invoice is sent, someone needs to be sure it matches
reality; someone has to affirm that the work was actually done. It
may not be what the customer ordered, in which case there will be
issues to resolve.&lt;/p&gt;
&lt;p&gt;But there is not &amp;quot;conflict&amp;quot;. There's no &amp;quot;drama&amp;quot;. We don't need to
assign code names (&amp;quot;Flintstones&amp;quot;, &amp;quot;Rubbles&amp;quot;) to sales and delivery.&lt;/p&gt;
&lt;p&gt;Above all, we don't need to impose a weird legacy software world-view
on something as simple as order, delivery and invoice. Sales has
orders. Delivery has invoices. Hopefully, sales order changes get to
delivery in time to adjust what's really happening. Some has to look
at the mismatches and exceptions to determine what the consequences
are. Maybe the customer gets a credit. Maybe someone sales is
over-promising. Maybe someone in delivery, is under-delivering.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="software design"></category><category term="analysis"></category></entry><entry><title>Creating Complexity Where None Existed</title><link href="https://slott56.github.io/2010_06_29-creating_complexity_where_none_existed.html" rel="alternate"></link><published>2010-06-29T08:00:00-04:00</published><updated>2010-06-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-06-29:/2010_06_29-creating_complexity_where_none_existed.html</id><summary type="html">&lt;p&gt;I read a 482-word treatise that amounted to these four words &amp;quot;sales and
delivery disagree&amp;quot;.&lt;/p&gt;
&lt;p&gt;A more useful summary is &amp;quot;Sales and Delivery have different views of
the order&amp;quot;.&lt;/p&gt;
&lt;p&gt;It started out calling the standard sales-delivery differences a
&amp;quot;Conflict&amp;quot; requiring &amp;quot;Resolution&amp;quot;. The description was so
hopelessly enmeshed in the conflict …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I read a 482-word treatise that amounted to these four words &amp;quot;sales and
delivery disagree&amp;quot;.&lt;/p&gt;
&lt;p&gt;A more useful summary is &amp;quot;Sales and Delivery have different views of
the order&amp;quot;.&lt;/p&gt;
&lt;p&gt;It started out calling the standard sales-delivery differences a
&amp;quot;Conflict&amp;quot; requiring &amp;quot;Resolution&amp;quot;. The description was so
hopelessly enmeshed in the conflict that it code-named sales and
delivery as &amp;quot;Flintstones&amp;quot; and &amp;quot;Rubbles&amp;quot; as if they might see their
names in the email and object. [Or -- what's more likely the case
-- the author refused to see the forest for the drama among the
trees.]&lt;/p&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;p&gt;Sales and delivery are in perpetual conflict and there is no
&amp;quot;resolution&amp;quot; possible. I assume this &amp;quot;resolution&amp;quot; comes from living
in a fantasy world where order-to-fulfillment and
fulfillment-to-invoice processes somehow are able to agree at each
step and the invoice always matches the order in every particular.&lt;/p&gt;
&lt;p&gt;If this were &lt;em&gt;actually&lt;/em&gt; true, either sales or delivery would be
redundant and could be eliminated from the organization.&lt;/p&gt;
&lt;div class="section" id="fantastic-software"&gt;
&lt;h2&gt;Fantastic Software&lt;/h2&gt;
&lt;p&gt;I'm guessing that someone fantasized about an order-to-invoice
process and wrote software that didn't reflect any of the actual
issues that occur when trying to deliver services. Now, of course,
reality doesn't match the fantasy software and someone wants a
&amp;quot;solution&amp;quot;.&lt;/p&gt;
&lt;p&gt;Part of finding that solution appears to be an effort to document
(482 words!) this &amp;quot;drama&amp;quot; and &amp;quot;conflict&amp;quot; between sales and delivery.&lt;/p&gt;
&lt;p&gt;Here's what I observed.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Take a standard process of perfectly typical complexity and
fantasize about it, writing completely useless software.&lt;/li&gt;
&lt;li&gt;Document the process as though it's a titanic struggle between two
evil empires of vast and malicious sociopaths with innocent little
IT stuck in the middle as these worlds collide. Assign code-name
to sales and delivery to make the conflict seem larger and more
important than it is.&lt;/li&gt;
&lt;li&gt;Start layering in yet more complexity regarding &amp;quot;conflict
resolution algorithm&amp;quot; and other buzzwords that aren't part of the
problem.&lt;/li&gt;
&lt;li&gt;Start researching these peripheral issues.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That makes a standard business process into something so complex that
one could spend years doing nothing useful. A make-work project of
epic proportions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="software process improvement"></category><category term="use case"></category></entry><entry><title>TDD and Python</title><link href="https://slott56.github.io/2010_06_25-tdd_and_python.html" rel="alternate"></link><published>2010-06-25T05:53:00-04:00</published><updated>2010-06-25T05:53:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-06-25:/2010_06_25-tdd_and_python.html</id><summary type="html">&lt;p&gt;First, let me say that
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; rocks.&lt;/p&gt;
&lt;p&gt;Few things are as much fun as (1) writing a test script for a
feature, and then (2) debugging the feature incrementally until it
passes the test. It's fun because a great deal of hand-wringing and
over-thinking is taken off the table.&lt;/p&gt;
&lt;p&gt;To …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, let me say that
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; rocks.&lt;/p&gt;
&lt;p&gt;Few things are as much fun as (1) writing a test script for a
feature, and then (2) debugging the feature incrementally until it
passes the test. It's fun because a great deal of hand-wringing and
over-thinking is taken off the table.&lt;/p&gt;
&lt;p&gt;To paraphrase &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Obi-Wan_Kenobi"&gt;Obi-Wan
Kenobi&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Use The Test, Luke.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;The essence of TDD is a pleasant two-step process: write tests, write
code.&lt;/p&gt;
&lt;p&gt;However, leaving things at this simplistic level isn't appropriate.&lt;/p&gt;
&lt;div class="section" id="code-quality"&gt;
&lt;h2&gt;Code Quality&lt;/h2&gt;
&lt;p&gt;Most folks describe TDD as a 3-step process. I like to call this
&amp;quot;red-green-gold&amp;quot; (The Lithuanian Flag version of TDD.)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Tests don't pass (red).&lt;/li&gt;
&lt;li&gt;Tests pass (green).&lt;/li&gt;
&lt;li&gt;Refactor the code until things look good (gold).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The point here is that once you have tests that pass, you can
trivially engage in refactoring and other engineering tasks to
improve the overall quality of the code. You can optimize or make
it more readable or more reusable without breaking it.&lt;/p&gt;
&lt;p&gt;Even this isn't quite right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-quality"&gt;
&lt;h2&gt;Test Quality&lt;/h2&gt;
&lt;p&gt;The issue with a too-simplistic view TDD is that we walk a fine line.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Over-engineering the tests.&lt;/li&gt;
&lt;li&gt;Under-engineering the tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can -- trivially -- fall into the trap of wringing our hands
over every potential nuance of our new piece of code. We can be
stalled writing tests. Often we hear complaints from folks who
fall into this trap. They spend too much time writing tests and
indict all of TDD because they dove into details too early in the
process.&lt;/p&gt;
&lt;p&gt;We can -- equally easily -- fall into the trap of failing to write
suitably robust tests for our software.&lt;/p&gt;
&lt;p&gt;TDD is really a 3+1 step process.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write tests, which don't pass (Red).&lt;/li&gt;
&lt;li&gt;Write code until tests pass (Green).&lt;/li&gt;
&lt;li&gt;&lt;ol class="first loweralpha"&gt;
&lt;li&gt;Clean up code to improve quality features. (b) Expand tests to add an appropriate level of robustness.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The operating word here is &amp;quot;appropriate&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="costs-and-benefits"&gt;
&lt;h2&gt;Costs and Benefits&lt;/h2&gt;
&lt;p&gt;Some modules -- because of risk or complexity or visibility --
require extensive testing. Some modules don't require this.&lt;/p&gt;
&lt;p&gt;Interestingly, portability -- even in Python -- requires some care in
testing. It turns out that MySQL and SQLite are not completely
identical in their behavior.&lt;/p&gt;
&lt;p&gt;Omitting an order-by in a query can &amp;quot;work by accident&amp;quot; in one
database and fail in another. So we need appropriate testing to
ferret out these RDBMS-specific issues. Until we have the appropriate
level of testing we have an application that works in SQLite but
fails in MySQL.&lt;/p&gt;
&lt;p&gt;The initial gut reaction can sometimes be &amp;quot;TDD failed us&amp;quot;.&lt;/p&gt;
&lt;p&gt;But this isn't true. TDD actually helped us by (1) identifying code
which passed on one platform and failed on another, and (2) leading
us to beef up all tests which depend on ordering. Pleasantly, there
aren't many.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Good point about robustness of tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-came-by"&gt;
&lt;h2&gt;I came by &amp;lt;...&lt;/h2&gt;
&lt;p&gt;Juho Vepsäläinen&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-25 11:29:52.728000-04:00&lt;/p&gt;
&lt;p&gt;Good point about robustness of tests.
I came by &lt;a class="reference external" href="http://www.infoq.com/presentations/Sustainable-Test-Driven-Development"&gt;this
presentation&lt;/a&gt;
a while ago. Freeman discusses these issues and then some in it (it
focuses on Java but the basic ideas still apply).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-test-is-a-very-inefficient-way-to-find-defe"&gt;
&lt;h2&gt;...  a test is a very inefficient way to find defe...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-27 10:47:26.977000-04:00&lt;/p&gt;
&lt;p&gt;... a test is a very inefficient way to find defects ...
Check out the article
An Interview with Watts Humphrey, Part 18: The Move to SEI by By Watts
S. Humphrey and Grady Booch
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1602411&amp;amp;ns=18775&amp;amp;WT.mc_id=2010-06-27_NL_InformITContent"&gt;http://www.informit.com/articles/article.aspx?p=1602411&amp;amp;ns=18775&amp;amp;WT.mc_id=2010-06-27_NL_InformITContent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="yeah-the-lithuanian-flag-is-yellow-green-red"&gt;
&lt;h2&gt;Yeah, the Lithuanian flag is yellow-green-red.&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-30 12:06:47.840000-04:00&lt;/p&gt;
&lt;p&gt;Yeah, the Lithuanian flag is yellow-green-red.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="red-green-gold-hmm-looks-like-burkins-faso-is-th"&gt;
&lt;h2&gt;Red green gold? Hmm, looks like burkins faso is th...&lt;/h2&gt;
&lt;p&gt;Patrick Cornelissen&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-25 02:57:44.802000-04:00&lt;/p&gt;
&lt;p&gt;Red green gold? Hmm, looks like burkins faso is the TDD country! Look at
their flag:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Pan-African_colours"&gt;http://en.wikipedia.org/wiki/Pan-African_colours&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RDBMS"></category><category term="#python"></category><category term="tdd"></category></entry><entry><title>Adobe's Feckless Updater</title><link href="https://slott56.github.io/2010_06_16-adobes_feckless_updater.html" rel="alternate"></link><published>2010-06-16T08:00:00-04:00</published><updated>2010-06-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-06-16:/2010_06_16-adobes_feckless_updater.html</id><summary type="html">&lt;a class="reference external image-reference" href="https://slott56.github.io/media/feckless.jpg"&gt;&lt;img alt="Adobe Error Dialog Box" id="blogger-photo-id-5482434982200131154" src="https://slott56.github.io/media/feckless.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Consider this dialog box.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The application was modified.&lt;/li&gt;
&lt;li&gt;It can't be updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why not just replace it? Replacing a modified application seems to be
a perfectly sensible use case.&lt;/p&gt;
&lt;p&gt;But no, rather than doing something useful, it shows a dialog box. I
guess no one thought through this use case …&lt;/p&gt;</summary><content type="html">&lt;a class="reference external image-reference" href="https://slott56.github.io/media/feckless.jpg"&gt;&lt;img alt="Adobe Error Dialog Box" id="blogger-photo-id-5482434982200131154" src="https://slott56.github.io/media/feckless.jpg" /&gt;&lt;/a&gt;
&lt;p&gt;Consider this dialog box.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The application was modified.&lt;/li&gt;
&lt;li&gt;It can't be updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why not just replace it? Replacing a modified application seems to be
a perfectly sensible use case.&lt;/p&gt;
&lt;p&gt;But no, rather than doing something useful, it shows a dialog box. I
guess no one thought through this use case and asked what -- if
anything -- the Actor actually cares about. Doing installs is not one
of my goals as an actor. Managing installations is not one of my
goals. I want to (a) read PDF's and (b) have everything else handled
automatically.&lt;/p&gt;
</content><category term="Technologies"></category><category term="use case"></category></entry><entry><title>Sales Person with Principles</title><link href="https://slott56.github.io/2010_06_14-sales_person_with_principles.html" rel="alternate"></link><published>2010-06-14T08:00:00-04:00</published><updated>2010-06-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-06-14:/2010_06_14-sales_person_with_principles.html</id><summary type="html">&lt;p&gt;My MacBook has an 80Gb drive with less than 2Gb available. A few times
I've totally filled the disk and had to spend time judiciously searching
and removing old files. Sigh.&lt;/p&gt;
&lt;p&gt;I have (and use) external hard drives, but it seems to violate some
kind of &amp;quot;laptop&amp;quot; principle to be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My MacBook has an 80Gb drive with less than 2Gb available. A few times
I've totally filled the disk and had to spend time judiciously searching
and removing old files. Sigh.&lt;/p&gt;
&lt;p&gt;I have (and use) external hard drives, but it seems to violate some
kind of &amp;quot;laptop&amp;quot; principle to be tethered to the desk. Backups, yes;
general writing, no.&lt;/p&gt;
&lt;p&gt;I use a 4Gb thumb drive for much of my writing. That allows me to
travel with just my work laptop without synchronizing files. It also
allows me to work with poor or no connectivity.&lt;/p&gt;
&lt;p&gt;Today, I went to my local Apple Store to talk about a new
MacBook Pro. The sales person had a bunch of ways to preserve
my old machine by using removable hard drives and my Mobile Me
account. After a long conversation I had to beg them to sell me
a new computer. It appears that they'd rather preserve my
investment than wring more money out of me.&lt;/p&gt;
&lt;p&gt;What? Make do with &amp;quot;good enough&amp;quot;? Improve slightly to solve the
actual problem I actually have? Spend the least to get the
most? That seems downright un-American!&lt;/p&gt;
&lt;p&gt;The sales person was pretty sure I didn't need a MacBook Pro. A
MacBook was good enough. (I have a older FireWire video camera,
so the Pro is necessary.)&lt;/p&gt;
&lt;p&gt;And that's not all. The on-line purchases from
&lt;a class="reference external" href="http://store.apple.com/"&gt;http://store.apple.com/&lt;/a&gt; allow more customization. In-store
purchases do not have the same degree of customization. Since
my needs were unique, the sales person sent me home
empty-handed rather than sell me a product that's not &lt;em&gt;exactly&lt;/em&gt;
what I need. We went through the on-line ordering a few
different ways to explore what I actually need.&lt;/p&gt;
&lt;p&gt;It's odd to meet principled sales people.&lt;/p&gt;
</content><category term="Technologies"></category><category term="apple"></category><category term="retail"></category></entry><entry><title>Sagan-esque Data Volumes</title><link href="https://slott56.github.io/2010_06_11-sagan_esque_data_volumes.html" rel="alternate"></link><published>2010-06-11T08:00:00-04:00</published><updated>2010-06-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-06-11:/2010_06_11-sagan_esque_data_volumes.html</id><summary type="html">&lt;p&gt;About once a week a question shows up on &lt;a class="reference external" href="http://stackoverflow.com/"&gt;Stack
Overflow&lt;/a&gt; that involves loading a database
with truly epic volumes of data. For example &amp;quot;billions of rows in a
single table for a month&amp;quot;.&lt;/p&gt;
&lt;p&gt;Billions of rows per month is a minimum insert rate of 385 row &lt;em&gt;per
second&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;About once a week a question shows up on &lt;a class="reference external" href="http://stackoverflow.com/"&gt;Stack
Overflow&lt;/a&gt; that involves loading a database
with truly epic volumes of data. For example &amp;quot;billions of rows in a
single table for a month&amp;quot;.&lt;/p&gt;
&lt;p&gt;Billions of rows per month is a minimum insert rate of 385 row &lt;em&gt;per
second&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Also, this quote is killer. &amp;quot;data for the past 5 years&amp;quot;. That's a
minimum of 60 billion rows.&lt;/p&gt;
&lt;p&gt;This is a really, really poor use of an RDBMS. This requires some
kind of well-planned hierarchy of storage and analytic solutions.
Load and Query can't work.&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h2&gt;Goal&lt;/h2&gt;
&lt;p&gt;The question is &amp;quot;What's the Goal&amp;quot;? Some of the Stack Overflow
questions lack essential use cases, making it impossible to determine
what these folks are trying to do.&lt;/p&gt;
&lt;p&gt;What's certain, however, is that no human being is going to do an
ad-hoc SQL query on 60 billion rows of anything. Analysis of data
volumes like that will involve fairly narrow and specific queries.&lt;/p&gt;
&lt;p&gt;Analysis of a subset may involve ad-hoc SQL queries. But the whole
data set isn't really useful -- as a whole. It's useful when sliced
and diced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="heresy"&gt;
&lt;h2&gt;Heresy&lt;/h2&gt;
&lt;p&gt;At this point, many DBA's pronounce me Heretic and Apostate. Anyone
who suggests that a SQL database is (a) slow, and (b) biased toward
ad-hoc queries must have fallen from the true path.&lt;/p&gt;
&lt;p&gt;First, SQL is slow. A flat file is always faster. Try it. For
reasonably well-structured data -- arriving at a sustained rate of
385 rows per second -- only a concurrent pipeline of flat-file
processing can keep up. The dimensional conformance and fact table
preparation has to be done in flat files. With no database loads
involved at all.&lt;/p&gt;
&lt;p&gt;Second, SQL is for ad-hoc processing. Most applications that have
embedded SQL don't involve queries that the user types at the command
line. However, most applications use SQL specifically to divorce the
application from the physical data model. The idea is that SQL offers
an ad-hoc scale of flexibility in exchange for glacial processing
speed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acquisition"&gt;
&lt;h2&gt;Acquisition&lt;/h2&gt;
&lt;p&gt;The first step is to acquire the data in some storage that will
handle 60 billion rows of data. Even if the rows are small, this is a
big pile of disk. Super-large files are a mistake, so it means a
complex directory tree of several smaller files.&lt;/p&gt;
&lt;p&gt;Ideally, some &amp;quot;sharding&amp;quot; algorithm is used so that perhaps a dozen
files are in use concurrently, each getting 30 or so rows per second.
This is a more sensible processing pace, achievable by heavily loaded
devices.&lt;/p&gt;
&lt;p&gt;Data acquisition is -- itself -- a highly parallelized operation. The
rows must be immediately separated into pipelines. Each pipeline must
be a multi-processing sequence of dimension conformance operations.
At the end of each pipeline, a standardized row with all of the
dimension FK's emerges and is appended to a file. Some flushing and
periodic close-reopen operations will probably be reliable enough.&lt;/p&gt;
&lt;p&gt;The dimension values can be built into a database. The facts,
however, have to reside in flat files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analysis"&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;In the unlikely case that someone thinks they want to analyze all 60
billion rows, there are two things to be done. First, talk them out
of it. Second, write special-purpose flat-file analyzers which do
concurrent map-reduce operations on all of the various source files.&lt;/p&gt;
&lt;p&gt;In the more likely use cases, folks want a subset of the data. In
this case, there's a three-part process.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Grab the relevant dimensions. They're in a master-dimension
database, being constantly updated by the ongoing loads.&lt;/li&gt;
&lt;li&gt;Filter the facts. This is a massively parallel map-reduce process
that extracts the relevant rows from the fact files and creates a
&amp;quot;data mart&amp;quot; fact file.&lt;/li&gt;
&lt;li&gt;Load a datamart. This has dimensions and facts. The facts may have
to be summarized to create appropriate sums and counts.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This subset datamart can be turned over to people for further
slicing and dicing or whatever it is that they do with 60 billion
rows of data.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="lustre-or-similar-file-systems-can-solve-many-of"&gt;
&lt;h2&gt;Lustre (or similar file-systems) can solve many of...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-04 16:34:04.629000-04:00&lt;/p&gt;
&lt;p&gt;Lustre (or similar file-systems) can solve many of the performance
problems with commonplace hardware (of course some thinking is needed as
ususal).&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category></entry><entry><title>The Users Just Want "Search" -- What's So Hard?</title><link href="https://slott56.github.io/2010_06_09-the_users_just_want_search_whats_so_hard.html" rel="alternate"></link><published>2010-06-09T08:00:00-04:00</published><updated>2010-06-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-06-09:/2010_06_09-the_users_just_want_search_whats_so_hard.html</id><summary type="html">&lt;p&gt;Great article on &amp;quot;Search&amp;quot; from back in '08 in Forbes. &amp;quot;&lt;a class="reference external" href="http://www.forbes.com/2008/09/19/cio-enterprise-search-tech-cio-cx_dw_0922search.html"&gt;Why Google Isn't
Enough&lt;/a&gt;&amp;quot;,
by Dan Woods. He's talking about &amp;quot;Enterprise Search&amp;quot;: why in-house
Google-style search is really hard and often unsatisfying.&lt;/p&gt;
&lt;p&gt;Here's the cool quote.&lt;/p&gt;
&lt;blockquote&gt;
enterprise search systems also index and navigate information that
may reside in databases, content …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Great article on &amp;quot;Search&amp;quot; from back in '08 in Forbes. &amp;quot;&lt;a class="reference external" href="http://www.forbes.com/2008/09/19/cio-enterprise-search-tech-cio-cx_dw_0922search.html"&gt;Why Google Isn't
Enough&lt;/a&gt;&amp;quot;,
by Dan Woods. He's talking about &amp;quot;Enterprise Search&amp;quot;: why in-house
Google-style search is really hard and often unsatisfying.&lt;/p&gt;
&lt;p&gt;Here's the cool quote.&lt;/p&gt;
&lt;blockquote&gt;
enterprise search systems also index and navigate information that
may reside in databases, content management systems and other
structured or semi-structured repositories. The contents may
include not only text documents, but also spreadsheets,
presentations, XML documents and so on. Even text documents may
include some amount of structure, perhaps stored in an XML format.&lt;/blockquote&gt;
&lt;p&gt;Everyone thinks (hopes) that the mere presence of data is sufficient.
That fact that it's structured doesn't seem to influence their hopes.&lt;/p&gt;
&lt;p&gt;The complication is simple -- and harsh. Many enterprise databases
are really bad. Really, really epically bad. So bad as to be
incomprehensible to a search engine.&lt;/p&gt;
&lt;div class="section" id="explanations"&gt;
&lt;h2&gt;Explanations&lt;/h2&gt;
&lt;p&gt;How many spreadsheets or reports &amp;quot;stand alone&amp;quot; as tidy, complete,
usable documents?&lt;/p&gt;
&lt;p&gt;Almost none.&lt;/p&gt;
&lt;p&gt;You create a budget for a project. It seems clear enough. Then the
project director wants to know if the labor costs are &amp;quot;burdened or
unburdened&amp;quot;. So the column labeled &amp;quot;cost&amp;quot; has to be further
qualified. And &amp;quot;burdened&amp;quot; costs need to be detailed as to which --
exact -- overheads are included.&lt;/p&gt;
&lt;p&gt;So a search engine might find your spreadsheet. If a person can't
interpret the data, neither can a search engine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="star-schema-nuance"&gt;
&lt;h2&gt;Star Schema Nuance&lt;/h2&gt;
&lt;p&gt;You can build a clever star schema from source data. But what you
find is that your sources have nuanced definitions. Each field isn't
directly mappable because it includes one or more subtleties.&lt;/p&gt;
&lt;p&gt;Customer name and address. Seems simple enough. But... is that
mailing address or shipping address or billing address? Phone number.
Seems simple. Fax, Voice, Mobile, Land-line, corporate switch-board,
direct? Sigh. So much detail.&lt;/p&gt;
&lt;p&gt;Of course the users &amp;quot;just want search&amp;quot;.&lt;/p&gt;
&lt;p&gt;Sadly, they've created data so subtle and nuanced that they can't
have search.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="dimensional data"></category><category term="database design"></category></entry><entry><title>Python in the News</title><link href="https://slott56.github.io/2010_05_21-python_in_the_news.html" rel="alternate"></link><published>2010-05-21T08:00:00-04:00</published><updated>2010-05-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-05-21:/2010_05_21-python_in_the_news.html</id><summary type="html">&lt;p&gt;Making the rounds: &lt;a class="reference external" href="http://stackp.online.fr/?p=28"&gt;Droopy: easy file
receiving&lt;/a&gt;. Apparently, there were
some widely-read blog posts about this. Google &amp;quot;Droopy: A Tiny Web
Server That Makes Receiving Files a Snap&amp;quot; to see the buzz.&lt;/p&gt;
&lt;p&gt;The point here is that 750 lines of Python code can go a long way.
It's a complete …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Making the rounds: &lt;a class="reference external" href="http://stackp.online.fr/?p=28"&gt;Droopy: easy file
receiving&lt;/a&gt;. Apparently, there were
some widely-read blog posts about this. Google &amp;quot;Droopy: A Tiny Web
Server That Makes Receiving Files a Snap&amp;quot; to see the buzz.&lt;/p&gt;
&lt;p&gt;The point here is that 750 lines of Python code can go a long way.
It's a complete web server to support large file transfers without
the botheration of email servers and their limitations.&lt;/p&gt;
&lt;p&gt;Elegantly, it's packaged as a single module including HTML page
templates, translations into several languages, plus the core server.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-02 15:15:32.001000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by a blog administrator.&lt;/p&gt;
&lt;div class="section" id="check-out-article-study-open-source-making-signi"&gt;
&lt;h2&gt;check out article: Study: Open-Source Making Signi...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-24 19:18:29.841000-04:00&lt;/p&gt;
&lt;p&gt;check out article: Study: Open-Source Making Significant Traction in the
Enterprise by Alex Williams / June 24, 2010 12:10 PM
(&lt;a class="reference external" href="http://www.readwriteweb.com/enterprise/2010/06/study-open-source-making-signi.php"&gt;http://www.readwriteweb.com/enterprise/2010/06/study-open-source-making-signi.php&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Technology Adoption and the "No"-gates</title><link href="https://slott56.github.io/2010_05_19-technology_adoption_and_the_no_gates.html" rel="alternate"></link><published>2010-05-19T08:00:00-04:00</published><updated>2010-05-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-05-19:/2010_05_19-technology_adoption_and_the_no_gates.html</id><summary type="html">&lt;p&gt;Let's say you've found some new, good way to do business.&lt;/p&gt;
&lt;p&gt;JSON, for example. Or Agile Methods in general. Or TDD specifically.
Or use of an ORM.&lt;/p&gt;
&lt;p&gt;You read up on it. You build a spike solution to show that it's more
efficient.&lt;/p&gt;
&lt;div class="section" id="the-first-no-gate"&gt;
&lt;h2&gt;The First No-Gate&lt;/h2&gt;
&lt;p&gt;You make The Essential …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Let's say you've found some new, good way to do business.&lt;/p&gt;
&lt;p&gt;JSON, for example. Or Agile Methods in general. Or TDD specifically.
Or use of an ORM.&lt;/p&gt;
&lt;p&gt;You read up on it. You build a spike solution to show that it's more
efficient.&lt;/p&gt;
&lt;div class="section" id="the-first-no-gate"&gt;
&lt;h2&gt;The First No-Gate&lt;/h2&gt;
&lt;p&gt;You make The Essential Pitch. You keep it simple and direct.&lt;/p&gt;
&lt;p&gt;A manager says &amp;quot;that's too &lt;em&gt;Blah-Blah-Blah&lt;/em&gt;, we don't want to add the
cost/risk/complexity.&amp;quot; Of course, it doesn't matter what specific
things are said. This is management &amp;quot;No #1&amp;quot;. We just can't. There is
too much &amp;quot;we&amp;quot; (that is, &amp;quot;I, as a non-technical manager&amp;quot;) don't
understand.&lt;/p&gt;
&lt;p&gt;The first answer must generally be &amp;quot;No.&amp;quot; No manager can agree unless
it was their idea before it was your idea. If they'd already heard of
this and ask you to look into it, then you might get a yes. But if it
was your idea first, management must say &amp;quot;No&amp;quot;.&lt;/p&gt;
&lt;p&gt;You work some more, you refine your pitch to address the
&lt;em&gt;Blah-Blah-Blah&lt;/em&gt; issue and show that it does not actually increase
cost, risk or complexity.&lt;/p&gt;
&lt;p&gt;BTW, there's no point in trying to pre-empt the initial &amp;quot;No&amp;quot;. It has
to be there. You have to get specific objections, so you have to go
through this &amp;quot;No&amp;quot; gate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-second-no-gate"&gt;
&lt;h2&gt;The Second No-Gate&lt;/h2&gt;
&lt;p&gt;You make the Address-Your-Concerns Pitch. You elaborate with lots of
what-ifs and alternatives and objections and solutions. Two
Powerpoint slides expand to about a dozen.&lt;/p&gt;
&lt;p&gt;A manager says &amp;quot;I'm not sure that it has the cost-benefit we need to
see.&amp;quot; This is management &amp;quot;No #2&amp;quot;. We just can't afford it. [&lt;em&gt;Yes,
this is a repeat of the cost argument, but it's different because the
expected response is now different&lt;/em&gt;.]&lt;/p&gt;
&lt;p&gt;The second answer must always &amp;quot;raise the bar&amp;quot; from technical issues
to monetary issues.&lt;/p&gt;
&lt;p&gt;At this point, you really can't go too far. There's essentially no
cost-benefit information on any element of any technology stack in
use anywhere. No one sits down and finds the most cost-effective
operating system, the most cost-effective language, the most
cost-effective protocols. There's no data and cost-benefit is not a
core part of approval. It's tangential at best.&lt;/p&gt;
&lt;p&gt;Further, the real answer in technology selection always boils down to
skills. Does the organization have the necessary skills? Do they
understand it?&lt;/p&gt;
&lt;p&gt;You work some more, you refine your pitch to address the
cost-benefit issue and show that it does not actually increase
cost, may reduce risk, and have have some tangible benefits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-third-no-gate"&gt;
&lt;h2&gt;The Third No-Gate&lt;/h2&gt;
&lt;p&gt;You make the Cost-Benefit pitch. You try to keep it factual.&lt;/p&gt;
&lt;p&gt;At this point, you've entered a loop. Essentially, you must be
redirected to address one more concern. That concern, once
addressed, won't have the monetization. Back and forth until
something breaks you out of the loop.&lt;/p&gt;
&lt;p&gt;You're stuck here because there's no &lt;em&gt;compelling&lt;/em&gt; reason to adopt.
Managers talk about cost and risk and benefits and other vaguely
monetary ways to determine if the technology has or creates value.
But those are reasons to say &amp;quot;no&amp;quot;, not &amp;quot;yes.&amp;quot; Technology rarely
has a compelling monetized business case. It's just a little
better or a little less risky. But that involves change and any
change is inherently more risky than anything else.&lt;/p&gt;
&lt;p&gt;Remember: the first fax machine was useless until someone else got
a fax machine.&lt;/p&gt;
&lt;p&gt;So you iterate. Pitch, refine. Pitch, refine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compulsion"&gt;
&lt;h2&gt;Compulsion&lt;/h2&gt;
&lt;p&gt;At some point, you either implement your spike solution, which
makes management's approval a &lt;em&gt;fait accompli&lt;/em&gt;, or some force
outside IT (business demand for a new kind of software product,
external force from competitors) compels the organization to make
a change.&lt;/p&gt;
&lt;p&gt;Note that there has been no change to the technology itself. JSON
was unacceptable until a customer demanded JSON-format files. Now
JSON is required. The organization, however, has flipped from &amp;quot;No
with a million reasons&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/p&gt;
&lt;p&gt;Agile cannot be done until a customer requires it. TDD has no ROI
until someone gets their project done early because of TDD. An ORM
is needless complexity until the new web framework requires it.&lt;/p&gt;
&lt;p&gt;At this point, there are a series of steps to go from &amp;quot;acceptable&amp;quot;
to &amp;quot;required&amp;quot; to &amp;quot;standard&amp;quot; to &amp;quot;irreplaceable legacy&amp;quot;. Those just
as puzzling as the No-Gates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finesse"&gt;
&lt;h2&gt;Finesse&lt;/h2&gt;
&lt;p&gt;It isn't possible to finesse this and reduce the frustration. The
organization &lt;em&gt;must&lt;/em&gt; resist change until compelled to make the
change. Once compelled, it must then stumble forward as though all
the nay-saying never happened. And what could have been a simple
technology adoption must turn into a morass of competing bad
ideas.&lt;/p&gt;
&lt;p&gt;So, we can (and should) continue to find new technology. We can
(and will) make the pitch. We will be shot down.&lt;/p&gt;
&lt;p&gt;The trick is not to take it personally. Just keep refining so that
when the organization is eventually compelled to adopt, we've
already got it planned out.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="check-out-quot-stop-trying-to-reinvent-the-wheel"&gt;
&lt;h2&gt;Check out &amp;amp;quot;Stop Trying to Reinvent the Wheel ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-04 22:23:58.672000-04:00&lt;/p&gt;
&lt;p&gt;Check out &amp;quot;Stop Trying to Reinvent the Wheel by Scott Berkun&amp;quot;
(&lt;a class="reference external" href="http://www.businessweek.com/innovate/content/jun2010/id2010062_565850.htm"&gt;http://www.businessweek.com/innovate/content/jun2010/id2010062_565850.htm&lt;/a&gt;).
The key paragraph: The second reason for reinvention pertains to ego and
rewards. In many corporations there is more prestige to be gained for
making something new than for reusing work done elsewhere in the company
or industry. This is true even when the newly made thing is much worse
that what already existed. An executive might proclaim the wonders of
the new (worse) thing to his division without encountering anyone
willing to stand up for the old (better) thing. It's harder to inflate
the importance of one's own work if the key decision was to buy or
borrow from elsewhere. The verbs &amp;quot;make,&amp;quot; &amp;quot;invent,&amp;quot; and &amp;quot;create&amp;quot; lead to
more promotions than &amp;quot;reuse,&amp;quot; &amp;quot;borrow,&amp;quot; or &amp;quot;convert.&amp;quot; In Pavlovian
terms, if a culture rewards unnecessary reinvention more than it honors
wise reuse, the ambitious will follow suit. Asking people to behave one
way while rewarding them for another has predictable results. The
counter notion to NIH—&amp;quot;PFE,&amp;quot; or &amp;quot;Proudly Found Elsewhere&amp;quot;—has been
talked about before, but I've rarely seen it thrive.&lt;/p&gt;
&lt;p&gt;Where Are The Yes Men?
Warren Meyer, 06.24.10, 01:...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-25 22:30:56.029000-04:00&lt;/p&gt;
&lt;p&gt;Where Are The Yes Men?
Warren Meyer, 06.24.10, 01:00 PM EDT
url:
&lt;a class="reference external" href="http://www.forbes.com/2010/06/24/bp-obama-bureaucracy-oil-opinions-columnists-warren-meyer.html"&gt;http://www.forbes.com/2010/06/24/bp-obama-bureaucracy-oil-opinions-columnists-warren-meyer.html&lt;/a&gt;
... hundreds of people involved who, given their incentives, are
virtually programmed to say &amp;quot;no.&amp;quot; ... everyone can say &amp;quot;no,&amp;quot; and worse,
since their incentives are loaded toward risk avoidance (they get
punished for violating procedure, but never punished for missing an
opportunity), they have a tendency to say &amp;quot;no&amp;quot; a lot, in fact to say
&amp;quot;no&amp;quot; by default. In the Gulf we have a thousand federal employees from
20 agencies whose entire incentive system--whose entire career--whose
every lesson from every bureaucratic battle in a sort of long-term
aversion therapy, prompts them to say &amp;quot;no&amp;quot; by reflex ...&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>A Limit to Reuse</title><link href="https://slott56.github.io/2010_05_10-a_limit_to_reuse.html" rel="alternate"></link><published>2010-05-10T08:00:00-04:00</published><updated>2010-05-10T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-05-10:/2010_05_10-a_limit_to_reuse.html</id><summary type="html">&lt;p&gt;We do a lot of bulk loads. A lot.&lt;/p&gt;
&lt;p&gt;So many that we have some standard ETL-like modules for generic
&amp;quot;Validate&amp;quot;, &amp;quot;Load&amp;quot;, &amp;quot;Load_Dimension&amp;quot;, &amp;quot;Load_Fact&amp;quot; and those sorts of
obvious patterns.&lt;/p&gt;
&lt;p&gt;Mostly our business processes amount to a &amp;quot;dimensional conformance
and fact load&amp;quot;, followed by extracts, followed by a different
&amp;quot;dimensional …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We do a lot of bulk loads. A lot.&lt;/p&gt;
&lt;p&gt;So many that we have some standard ETL-like modules for generic
&amp;quot;Validate&amp;quot;, &amp;quot;Load&amp;quot;, &amp;quot;Load_Dimension&amp;quot;, &amp;quot;Load_Fact&amp;quot; and those sorts of
obvious patterns.&lt;/p&gt;
&lt;p&gt;Mostly our business processes amount to a &amp;quot;dimensional conformance
and fact load&amp;quot;, followed by extracts, followed by a different
&amp;quot;dimensional conformance and fact load&amp;quot;. We have multiple fact
tables, with some common dimensions. In short, we're building up
collections of facts about entities in one of the dimensions. [And
no, we're not building up data individual consumers. Really.]&lt;/p&gt;
&lt;p&gt;Until, of course, someone has a brain-fart.&lt;/p&gt;
&lt;div class="section" id="overall-application-design"&gt;
&lt;h2&gt;Overall Application Design&lt;/h2&gt;
&lt;p&gt;An overall load application is a simple loop. For each row in the
source document, conform the various dimensions, and then load the
fact. Clearly, we have a bunch of dimension conformance objects and a
fact loading object. Each object gets a crack at the input row and
enriches it with some little tidbit (like a foreign key).&lt;/p&gt;
&lt;p&gt;This leads us to pretty generic &amp;quot;Builder&amp;quot; and &amp;quot;Dimension Builder&amp;quot; and
&amp;quot;Fact Builder&amp;quot; class hierarchy. Very tidy.&lt;/p&gt;
&lt;p&gt;Each new kind of feed (usually because no two customers are alike) is
really just a small module with builders that are specific to that
customer. And the builders devolve to two methods&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Transform a row to a new-entity dict, suitable for a Django model.
Really, just a simple &lt;tt class="docutils literal"&gt;dict( &lt;span class="pre"&gt;field=source['Column'],&lt;/span&gt; &lt;span class="pre"&gt;field=source['Column'],&lt;/span&gt; ... )&lt;/tt&gt; block of code.&lt;/li&gt;
&lt;li&gt;Transform a row to a dimension conformance query, suitable for a
Django filter. Again, a simple &lt;tt class="docutils literal"&gt;dict( &lt;span class="pre"&gt;some_key__iexact=source['Column']&lt;/span&gt; )&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The nice thing is that the builders abstract out all the messy
details. Except.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hard-to-conform-data"&gt;
&lt;h2&gt;Hard-to-Conform Data&lt;/h2&gt;
&lt;p&gt;We're now getting data that's not -- narrowly -- based on things our
customers tell us. We're getting data that might be useful to our
customer. Essentially, we're processing they're data as well as
offering additional data.&lt;/p&gt;
&lt;p&gt;Cool, right?&lt;/p&gt;
&lt;p&gt;But... We lack the obvious customer-supplied keys required to do
dimensional conformance. Instead, we have to resort to a multi-step
matching dance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="limiting-factors"&gt;
&lt;h2&gt;Limiting Factors&lt;/h2&gt;
&lt;p&gt;The multi-step matching dance pushed the &amp;quot;Builder&amp;quot; design one step
beyond. It moved from tidy to obscure. There's a line that seems to
be drawn around &amp;quot;too much&amp;quot; back-and-forth between framework code and
our Builders.&lt;/p&gt;
&lt;p&gt;Something as bone-simple as a bulk loader has two candidate design
patterns.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Standard loader app with plug-in features for mappings. This is
what I chose. The mappings have been (until now) simple. The app
is standard. Plug a short list of classes into the standard
framework. Done.&lt;/li&gt;
&lt;li&gt;Standard load support libraries that make a simple load app look
simple. In this case, each load app really is a top-level app, not
simply some classes that plug into an existing, standardized app.
Write the standard outer loop? Please.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's wrong with plug-ins?&lt;/p&gt;
&lt;p&gt;It's hard to say. But it seems that a plug-in passes some limit to OO
understandability. It seems that if we refactor too much up to the
superclass then our plug-ins become hard to understand because they
lose any &amp;quot;conceptual unity&amp;quot;.&lt;/p&gt;
&lt;p&gt;The limiting factor seems to be a &amp;quot;conceptually complete&amp;quot; operation
or step. Not all code is so costly that a simple repeat is an
accident waiting to happen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hints-from-map-reduce"&gt;
&lt;h2&gt;Hints from Map-Reduce&lt;/h2&gt;
&lt;p&gt;It seems like there are two conceptual units. The loop. The function
applied within the loop. And we should write all of the loop or all
of the mapped function.&lt;/p&gt;
&lt;p&gt;If we're writing the mapped function, we might call other functions,
but it feels like we should limit how much other functions call back
to the customer-specific piece.&lt;/p&gt;
&lt;p&gt;If we're writing the overall loop -- because some bit of logic is
really convoluted -- we should simply write the loop without shame.
It's a &lt;strong&gt;for&lt;/strong&gt; statement. It's not obscure or confusing. And there's
no reason to try and factor the &lt;strong&gt;for&lt;/strong&gt; statement into the superclass
just because we can.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-shame-sorry-i-just-couldn-t-resist"&gt;
&lt;h2&gt;For shame! Sorry, I just couldn't resist. :)&lt;/h2&gt;
&lt;p&gt;Jerry Seutter&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-05-10 14:58:39.093000-04:00&lt;/p&gt;
&lt;p&gt;For shame!
Sorry, I just couldn't resist. :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-reuse-a-myth-by-danny-kalev-au"&gt;
&lt;h2&gt;Code Reuse -- A Myth? by Danny Kalev Au...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-22 06:08:46.367000-04:00&lt;/p&gt;
&lt;p&gt;Check out
Code Reuse -- A Myth? by Danny Kalev Aug 13, 2010
Code Reuse -- A Myth? Part II by Danny Kalev Aug 13, 2010
&lt;a class="reference external" href="http://www.informit.com/guides/content.aspx?g=cplusplus&amp;amp;seqNum=499"&gt;http://www.informit.com/guides/content.aspx?g=cplusplus&amp;amp;seqNum=499&lt;/a&gt;
&lt;a class="reference external" href="http://www.informit.com/guides/content.aspx?g=cplusplus&amp;amp;seqNum=500&amp;amp;ns=19521&amp;amp;WT.mc_id=2010-08-22_NL_InformITContent"&gt;http://www.informit.com/guides/content.aspx?g=cplusplus&amp;amp;seqNum=500&amp;amp;ns=19521&amp;amp;WT.mc_id=2010-08-22_NL_InformITContent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="dimensional data"></category><category term="database design"></category><category term="refactoring"></category></entry><entry><title>Functional Programming Goodness -- Python to the Rescue</title><link href="https://slott56.github.io/2010_05_07-functional_programming_goodness_python_to_the_rescue.html" rel="alternate"></link><published>2010-05-07T08:00:00-04:00</published><updated>2010-05-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-05-07:/2010_05_07-functional_programming_goodness_python_to_the_rescue.html</id><summary type="html">&lt;p&gt;Here's the situation.&lt;/p&gt;
&lt;p&gt;A vendor sent us three separate files which need to be merged.
70,000+ records each. They're CSV files, so column &lt;em&gt;position&lt;/em&gt; doesn't
much matter. The column &lt;em&gt;name&lt;/em&gt; (in row 1) is what matters.&lt;/p&gt;
&lt;p&gt;I looked at three solutions. Two of which are merely OK. The third …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's the situation.&lt;/p&gt;
&lt;p&gt;A vendor sent us three separate files which need to be merged.
70,000+ records each. They're CSV files, so column &lt;em&gt;position&lt;/em&gt; doesn't
much matter. The column &lt;em&gt;name&lt;/em&gt; (in row 1) is what matters.&lt;/p&gt;
&lt;p&gt;I looked at three solutions. Two of which are merely OK. The third
was some functional programming that was very cool.&lt;/p&gt;
&lt;div class="section" id="option-1-os-sort-merge"&gt;
&lt;h2&gt;Option 1 -- OS Sort/Merge&lt;/h2&gt;
&lt;p&gt;To get the files into a consistent order, we need to sort. The Linux
sort, however, is biased toward columns that are known positionally.&lt;/p&gt;
&lt;p&gt;So, we need to exploit the &lt;strong&gt;Decorate-Sort-Undecorate&lt;/strong&gt; design
pattern. So we have a shell script something like the following.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
decorate.py a.csv | sort &amp;gt;a_sorted.csv
decorate.py b.csv | sort &amp;gt;b_sorted.csv
decorate.py c.csv | sort &amp;gt;c_sorted.csv
sort -m a_sorted.csv b_sorted.csv c_sorted.csv | undecorate.py &amp;gt;result.csv
&lt;/pre&gt;
&lt;p&gt;This works well because decorate.py and undecorate.py are such simple
programs. Here's decorate.py.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from __future__ import print_function
import csv
import sys
with open(sys.argv[1],&amp;quot;rb&amp;quot;) as source:
    rdr= csv.DictReader( source )
    for row in rdr:
        print( row['the key'], row )
&lt;/pre&gt;
&lt;p&gt;Undecorate is similar. It uses the str.partition() method to remove
the decoration.&lt;/p&gt;
&lt;p&gt;Note that the initial &amp;quot;decorate&amp;quot; steps can be run concurrently,
leading to some time reduction. This scales well. It doesn't use much
memory; the OS concurrency management means that it uses every core
available.&lt;/p&gt;
&lt;p&gt;I didn't benchmark this, BTW.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="option-2-big-in-memory-dict"&gt;
&lt;h2&gt;Option 2 -- Big In-Memory Dict&lt;/h2&gt;
&lt;p&gt;Since the files aren't insanely big, they do fit in memory. This is
pretty simple, also.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import csv
from collections import defaultdict

# build the result set
result = defaultdict( dict )
for f in ( 'a.csv', 'b.csv', 'c.csv' ):
    with open( f, 'rb' ) as source:
         rdr = csv.DictReader( source )
         for row in rdr:
             result[row['key']].update( row )

# find the column titles
keys = set()
for row in result:
    keys |= set( result[row].keys() )

# write the result set
with open( 'output.csv', 'wb' ) as target:
     wtr= csv.DictWriter( target, sorted(keys) )
     wtr.writerow( dict(zip(keys,keys)) )
     for row in result:
         wtr.writerow( result[row] )
&lt;/pre&gt;
&lt;p&gt;This isn't too bad. For insanely big files, however, it won't scale
well.&lt;/p&gt;
&lt;p&gt;Elapsed time for the real files (which were zipped, adding processing
that's not relevant to this posting) was 218 seconds on my little
laptop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="option-3-functional-programming"&gt;
&lt;h2&gt;Option 3 -- Functional Programming&lt;/h2&gt;
&lt;p&gt;The functional programming approach is a bit more code than option 1.
But it's way cool and very extensible. It offers more flexibility
without the memory limitation of the big dictionary.&lt;/p&gt;
&lt;p&gt;Let's start with the end in mind.&lt;/p&gt;
&lt;p&gt;We're doing a 3-file merge. The algorithm for 2-file merge is really
simple. The algorithm for an &lt;em&gt;n&lt;/em&gt;-file merge, however, is not so
simple. We can easily build up an &lt;em&gt;n&lt;/em&gt;-file merge as a composition of
&lt;em&gt;n&lt;/em&gt;-1 pair-wise merges.&lt;/p&gt;
&lt;p&gt;Here's how it should look.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with open('temp.csv','wb') as output:
    wtr= csv.DictWriter( output, sorted(fieldNames) )
    wtr.writerow( dict( zip( fieldNames, fieldNames )))
    for row in merge( merge( s1, s2 ), s3 ):
        wtr.writerow( row )
&lt;/pre&gt;
&lt;p&gt;We're doing merge( merge( s1, s2 ), s3 ) to compose a 3-file merge
from 2 2-file merges. And yes, it &lt;em&gt;can&lt;/em&gt; be just that simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="composable-sort"&gt;
&lt;h2&gt;Composable Sort&lt;/h2&gt;
&lt;p&gt;To be &amp;quot;composable&amp;quot;, we must write iterator functions which read and
write data of the same type. In our case, since we're using a
DictReader, our various functions must work with an iterable over
dicts which yields dicts.&lt;/p&gt;
&lt;p&gt;In order to merge, the input must be sorted. Here's our composable
sort.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def key_sort( source, key='key' ):
    def get_key( x ):
       return int(x[key])
    for row in sorted(source, key=get_key ):
       yield row
&lt;/pre&gt;
&lt;p&gt;Yes, we need to pre-process the keys, they're not simple text;
they're numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="composable-2-file-merge"&gt;
&lt;h2&gt;Composable 2-File Merge&lt;/h2&gt;
&lt;p&gt;The composable merge has a similar outline. It's a loop over the
inputs and it yields outputs of the same type.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def merge( f1, f2, key='key' ):
    &amp;quot;&amp;quot;&amp;quot;Merge two sequences of row dictionaries on a key column.&amp;quot;&amp;quot;&amp;quot;
    r1, r2 = None, None
    try:
        r1= f1.next()
        r2= f2.next()
        while True:
            if r1[key] == r2[key]:
                r1.update(r2)
                yield r1
                r1, r2 = None, None
                r1= f1.next()
                r2= f2.next()
            elif r1[key] &amp;lt; r2[key]:
                yield r1
                r1= None
                r1= f1.next()
            elif r1[key] &amp;gt; r2[key]:
                yield r2
                r2= None
                r2= f2.next()
            else:
                raise Exception # Yes, this is impossible
    except StopIteration:
        pass
    if r1 is not None:
        yield r1
        for r1 in f1:
           yield r1
    elif r2 is not None:
        yield r2
        for r2 in f2:
            yield r2
    else:
        pass # Exhausted with an exact match.
&lt;/pre&gt;
&lt;p&gt;This runs in 214 seconds. Not a big improvement in time. However, the
improvement in flexibility is outstanding. And the elegant simplicity
is delightful. Having the multi-way state managed entirely through
the Generator Function/Iterator abstraction is amazing.&lt;/p&gt;
&lt;p&gt;Also, this demonstrates that the bulk of the time is spent reading
the zipped CSV files and writing the final CSV output file. The
actual merge algorithm doesn't dominate the complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="python-2-6-includes-heapq-merge-iterables-than-d"&gt;
&lt;h2&gt;Python 2.6 includes &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;heapq.merge(*iterables)&lt;/span&gt;&lt;/tt&gt; than d...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-05-07 17:47:14.333000-04:00&lt;/p&gt;
&lt;p&gt;Python 2.6 includes &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;heapq.merge(*iterables)&lt;/span&gt;&lt;/tt&gt; than does an N-way merge.
For earlier versions you can use the recipe at
&lt;a class="reference external" href="http://code.activestate.com/recipes/491285-iterator-merge/"&gt;http://code.activestate.com/recipes/491285-iterator-merge/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="utilize-technology-to-the-point-that-will-help-wit"&gt;
&lt;h2&gt;Utilize technology to the point that will help wit...&lt;/h2&gt;
&lt;p&gt;protein powder&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-18 06:39:28.642000-04:00&lt;/p&gt;
&lt;p&gt;Utilize technology to the point that will help with all aspects of your
business and you’ll see very quickly how beneficial it can be for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="while-some-project-managers-prefer-to-have-each-te"&gt;
&lt;h2&gt;While some project managers prefer to have each te...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-16 06:50:30.552000-04:00&lt;/p&gt;
&lt;p&gt;While some project managers prefer to have each team leader present the
status of the recent work, many insist on having the project coordinator
present the status since they will be unbiased. As a result, true
project problems will be surfaced in the project status review meetings.
It will then be up to the project manager, and the “problem owner” to
work out a corrective action plan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-program-investment-life-cycle-integrates-the"&gt;
&lt;h2&gt;The Program (Investment) Life Cycle integrates the...&lt;/h2&gt;
&lt;p&gt;protein powder&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-15 07:23:21.969000-04:00&lt;/p&gt;
&lt;p&gt;The Program (Investment) Life Cycle integrates the project management
and system development life cycles with the activities directly
associated with system deployment and operation. By design, system
operation management and related activities occur after the project is
complete and are not documented within this guide.
&lt;a class="reference external" href="http://www.project-drive.net/"&gt;Project Management Software&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="threads"></category><category term="functional programming"></category></entry><entry><title>Goodhart's Law and Numerosity</title><link href="https://slott56.github.io/2010_05_05-goodharts_law_and_numerosity.html" rel="alternate"></link><published>2010-05-05T08:00:00-04:00</published><updated>2010-05-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-05-05:/2010_05_05-goodharts_law_and_numerosity.html</id><summary type="html">&lt;p&gt;They say &amp;quot;&lt;a class="reference external" href="http://management.about.com/od/metrics/a/Measure2Manage.htm"&gt;You Can't Manage What You Don't
Measure&lt;/a&gt;&amp;quot;.
This isn't quite right, however. You can measure lots of things you
can't manage. Rainfall, for example. Software development is like that.
You can measure stuff that you can't actually control.&lt;/p&gt;
&lt;p&gt;The original
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/W._Edwards_Deming"&gt;Deming&lt;/a&gt; quotes
are more subtle: there are things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;They say &amp;quot;&lt;a class="reference external" href="http://management.about.com/od/metrics/a/Measure2Manage.htm"&gt;You Can't Manage What You Don't
Measure&lt;/a&gt;&amp;quot;.
This isn't quite right, however. You can measure lots of things you
can't manage. Rainfall, for example. Software development is like that.
You can measure stuff that you can't actually control.&lt;/p&gt;
&lt;p&gt;The original
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/W._Edwards_Deming"&gt;Deming&lt;/a&gt; quotes
are more subtle: there are things which you cannot measure, but they
are still important. And there are visible measures that are an
attractive nuisance.&lt;/p&gt;
&lt;p&gt;What gets lost is that &amp;quot;any observed statistical regularity will
tend to collapse once pressure is placed upon it for control
purposes&amp;quot; This is &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Goodhart%27s_law"&gt;Goodhart's
Law&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As soon as you try to measure &amp;quot;programmer productivity&amp;quot; or
&amp;quot;quality&amp;quot; or similar things, folks will find ways to tweak the
numbers without actually improving anything.&lt;/p&gt;
&lt;p&gt;Metrics are troubling things.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="quot-you-can-t-manage-what-you-don-t-meas"&gt;
&lt;h2&gt;&amp;amp;quot;You can't manage what you don't meas...&lt;/h2&gt;
&lt;p&gt;Roger Pate&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-05-10 19:16:25.483000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;You can't manage what you don't measure&amp;quot; doesn't imply &amp;quot;you can manage
what you do measure&amp;quot;, or am I missing something?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="numerosity"></category></entry><entry><title>NULL Confusion</title><link href="https://slott56.github.io/2010_04_29-null_confusion.html" rel="alternate"></link><published>2010-04-29T08:00:00-04:00</published><updated>2010-04-29T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-29:/2010_04_29-null_confusion.html</id><summary type="html">&lt;p&gt;The SQL database offers a domain-independent NULL value. This is a
terrible thing, and should be treated with a depth of respect and fear.&lt;/p&gt;
&lt;p&gt;Before using NULL values in a database, read things like &amp;quot;&lt;a class="reference external" href="http://www.springerlink.com/content/m774708n21277205/"&gt;Null
Values in Fuzzy
Datasets&lt;/a&gt;&amp;quot;
and &amp;quot;&lt;a class="reference external" href="http://www.springerlink.com/content/lmvekd0xj0r54rq6/"&gt;Null Values Revisited in Prospect of Data
Integration&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;See this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The SQL database offers a domain-independent NULL value. This is a
terrible thing, and should be treated with a depth of respect and fear.&lt;/p&gt;
&lt;p&gt;Before using NULL values in a database, read things like &amp;quot;&lt;a class="reference external" href="http://www.springerlink.com/content/m774708n21277205/"&gt;Null
Values in Fuzzy
Datasets&lt;/a&gt;&amp;quot;
and &amp;quot;&lt;a class="reference external" href="http://www.springerlink.com/content/lmvekd0xj0r54rq6/"&gt;Null Values Revisited in Prospect of Data
Integration&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;See this
&lt;a class="reference external" href="http://stackoverflow.com/questions/1017064/null-value-in-database"&gt;question&lt;/a&gt;,
and the answers -- people are very, very confused by NULL. The issue
is that the SQL NULL conflates several separate and unrelated
concepts.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Not Available Now&lt;/strong&gt;. We expect that the data will be discovered
later. That is, this NULL is a work-around for a process issue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not Applicable (or Optional)&lt;/strong&gt;. This means that disjoint
subtypes have been unified into a single table with optional or
not-applicable attributes. This is an optimization choice. This
also be due to state changes: the attribite is not used in one
state, but will be used in another state.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With two meanings for a single value, hilarity always ensues.&lt;/p&gt;
&lt;div class="section" id="further-confusion"&gt;
&lt;h2&gt;Further Confusion&lt;/h2&gt;
&lt;p&gt;The NULL value doesn't participate in comparisons or indexes. This is
-- apparently -- shocking to some people. Here's a nice summary in
&amp;quot;&lt;a class="reference external" href="http://www.xaprb.com/blog/2006/05/18/why-null-never-compares-false-to-anything-in-sql/"&gt;Why NULL never compares false to anything in
SQL&lt;/a&gt;&amp;quot;.
Also, some notes for Oracle users in &amp;quot;&lt;a class="reference external" href="http://www.dba-oracle.com/oracle_tips_ault_nulls_values.htm"&gt;Understand Oracle null
values&lt;/a&gt;&amp;quot;
and &amp;quot;&lt;a class="reference external" href="http://www.lifeaftercoffee.com/2005/09/28/oracle-conditions-and-how-they-handle-null/"&gt;Oracle conditions and how they handle
NULL&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Because of this &amp;quot;NULL doesn't compare&amp;quot; problem, people get baffled by
the use of NVL (or IFNULL) functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-rules-of-null"&gt;
&lt;h2&gt;The Rules of NULL&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The first rule of NULL is &amp;quot;Don't.&amp;quot;&lt;/strong&gt; Don't define a data model that
depends on nullability. Define a model where each class is distinct
and all the attributes are &lt;em&gt;required&lt;/em&gt;. This will lead to a number of
focused, distinct class definitions. A large number. Get over it.
Don't pre-optimize a design to reduce your number of classes or
tables.&lt;/p&gt;
&lt;p&gt;Once you have a model that makes sense -- one that you can prove will
work -- one that precisely matches the semantics of your problem --
you can optimize. But don't start out by pre-optimizing or taking
&amp;quot;obvious&amp;quot; short-cuts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The second rule of NULL is &amp;quot;Don't conflate Availability with Applicability.&amp;quot;&lt;/strong&gt; If you have data that is not available, you may
have serious issues in the process you're trying to automate. Often,
this is because you have multiple views of a single entity. If you
have data that's not applicable, you've done your design wrong -- you
put disjoint subtypes into a single class definition. Factor them
(for now) into class definitions where &lt;em&gt;all attributes are required&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you have inapplicable or unavailable data, you must factor things
into pieces where all attributes are required. You will then find
that your &amp;quot;thing with optional attributes&amp;quot; is either &amp;quot;thing that
changes state&amp;quot; or &amp;quot;thing with multiple subsets of attributes that
must be joined together.&amp;quot; Later, you can think about optimizing.&lt;/p&gt;
&lt;p&gt;&amp;quot;But,&amp;quot; you object, &amp;quot;it's a &lt;em&gt;single&lt;/em&gt; entity, I can't meaningfully
decompose it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Consider the root causes for missing data before you take this
position too seriously.&lt;/p&gt;
&lt;p&gt;Let's take a concrete example. We're doing econometric analysis of
businesses. We have a &amp;quot;Business&amp;quot; entity that has various kinds of
measurements from various sources. Not all sources of information
have data on all businesses. There's a lot of &amp;quot;not available&amp;quot; data.
Also, depending on the type of business, there may be a certain
amount of &amp;quot;not applicable&amp;quot; data. (For example, not-for-profit
corporations, privately held companies and public companies all have
different kinds of reporting requirements.)&lt;/p&gt;
&lt;p&gt;What you have is a core &amp;quot;Business Name&amp;quot; entity with the minimal
information. Name; maybe other identifying information. But often,
the name is all you know.&lt;/p&gt;
&lt;p&gt;You have a &amp;quot;Business Address&amp;quot; entity with mailing address. Small
businesses may have only one of these. Large businesses will have
more than one.&lt;/p&gt;
&lt;p&gt;You have &amp;quot;Econometric Scoring From Source X&amp;quot; which may have a
normalized name, a different address and other scores.&lt;/p&gt;
&lt;p&gt;Conceptually, this is a single entity, a business. But from three
different points of view. Initially, this is not a single class
definition. It may be optimized into a single table with NULLs.
That's a lousy design, but very popular. There are multiple
addresses; scores change over time. Implementing this as a
&amp;quot;single-table-with-nulls&amp;quot; seems to be a bad policy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The third rule of NULL is &amp;quot;Only as an optimization.&amp;quot;&lt;/strong&gt; If you can
prove that a particular join is nearly one-to-one, and you can prove
that the cost of the join is too high, then you can consider
pre-joining and using NULLs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="common-mistakes"&gt;
&lt;h2&gt;Common Mistakes&lt;/h2&gt;
&lt;p&gt;There are two common NULL-join mistakes: optional joins and date
ranges.&lt;/p&gt;
&lt;p&gt;One common mistake is attempting to join on an &amp;quot;optional&amp;quot; attribute.
You wind up with NVL functions in the WHERE clause. RED ALERT.&lt;/p&gt;
&lt;p&gt;If you have NVL functions in a WHERE clause then (1) you've defeated
all indexing and (2) you've reinvented the wheel.&lt;/p&gt;
&lt;p&gt;An NVL to a where clause is stand-in for a UNION. When you think you
need an NVL, you've got two subsets that you're tying to put
together: the subset with a non-NULL value and the subset with a NULL
value. This is a UNION, and the UNION will probably be faster than
your NVL construct. (If it isn't, good on you for benchmarking.)&lt;/p&gt;
&lt;p&gt;Another common mistake is date ranges. Folks insist on having
&amp;quot;open-ended&amp;quot; date ranges where the &amp;quot;end-of-time&amp;quot; is represented as a
NULL. RED ALERT. NULL already means not applicable or not available.
The end of time is both applicable and available. Don't add a new
meaning to NULL.&lt;/p&gt;
&lt;p&gt;Coding the end of time as NULL is simply wrong. The end of time (for
now) is 12-21-2112. It's an easy date to remember. It's a cooler date
in Europe than the US.&lt;/p&gt;
&lt;p&gt;&amp;quot;But,&amp;quot; the deeply argumentative claim, &amp;quot;I can't have my application
dependent on a mystery constant like that&amp;quot;. Lighten up. First, your
app won't be running in 2112. Second, your app is full of mystery
constants like that. You've got codes, your users have codes they
think are important. Your localtime offset from GMT is a mystery
constant. The start and end dates for daylight savings time are
mystery constants. Please. You have lots of mystery constants. If you
want to be &amp;quot;transparent&amp;quot;, make it a configuration parameter.&lt;/p&gt;
&lt;p&gt;Just code the end-of-time as a real date not a NULL and use ordinary
date-range logic with no silly NVL business.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="null-means-that-a-property-doesn-39-t-exist-for-a"&gt;
&lt;h2&gt;NULL means that a property doesn&amp;amp;#39;t exist for a...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-29 09:50:21.438000-04:00&lt;/p&gt;
&lt;p&gt;NULL means that a property doesn't exist for a record -- nothing more
nothing less. It is exactly what you want when you have a date range
where some records don't have an end date. Either you have living people
and dead people in separate tables, or you pre-union them and use NULLs
for date of death. That's what NULL is for, and it's good at it. Your
silly special value is a date, so everybody in your table is currently
dead in the future. That makes no sense. Worse, and not a matter of
taste at all, is that using a special date to mean no-date is a bug.
Unlike NULL, the database doesn't know anything special about that
particular date or your convention. It will happily compute wrong
numbers based on it, instead of turning all your erroneous results into
NULLs, as they should be. What's the cumulative life span of everybody
in the system? Well, if you don't explicitly use the current date for
living people, you'll get NULL. There is no cumulative life span when
you don't specify how to deal with living people. NULL is not a special
date. It is no-date. NULL shouldn't be overused, but there are some
specific cases where it is a good optimization, if you understand the
tradeoffs and don't use it for something it is not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nullology-the-zen-of-database-c-j-dat"&gt;
&lt;h2&gt;Nullology: The Zen of Database C.J. Dat...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-05-04 18:00:10.878000-04:00&lt;/p&gt;
&lt;p&gt;Check out
Nullology: The Zen of Database C.J. Date
&lt;a class="reference external" href="http://post.oreilly.com/rd/9z1zquisnote29p5lsq1r7i10h3t9qlf9s89vl7aubo"&gt;http://post.oreilly.com/rd/9z1zquisnote29p5lsq1r7i10h3t9qlf9s89vl7aubo&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-example-can-be-improved-a-table-of-a"&gt;
&lt;h2&gt;Your example can be improved: - a table of a...&lt;/h2&gt;
&lt;p&gt;Chris&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-05-18 11:57:30.045000-04:00&lt;/p&gt;
&lt;p&gt;&amp;#64;Adam&lt;/p&gt;
&lt;p&gt;Your example can be improved:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a table of all persons with their date of birth (and other required fields)&lt;/li&gt;
&lt;li&gt;a separate table that contains the date a person dies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#64;Others&lt;/p&gt;
&lt;p&gt;At my company, we build our data models without NULLs and have done so,
successfully on many occasions (and yes, they are real world scenarios).
The trick is to understand &amp;quot;why&amp;quot; you don't have that information. Yes,
we have a lot of tables and the queries are complex, but the data
structure is rigid and provable. We know what the meaning of all the
data is at any point. With NULL, there is no &amp;quot;meaning&amp;quot; to that data, so
you cannot reason about it (and if that is the case, you should use a
document store or other non-SQL store).&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category></entry><entry><title>REST and HTTP Digest Authentication</title><link href="https://slott56.github.io/2010_04_23-rest_and_http_digest_authentication.html" rel="alternate"></link><published>2010-04-23T13:14:00-04:00</published><updated>2010-04-23T13:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-23:/2010_04_23-rest_and_http_digest_authentication.html</id><summary type="html">&lt;p&gt;It seems so simple: use the HTTP Digest Authorization with the Quality
of Protection set to &amp;quot;auth&amp;quot;.&lt;/p&gt;
&lt;p&gt;It's an easy algorithm. A nonce that encodes a timestamp can be used
to be sure no one is attempting to cache credentials. It's
potentially very, very nice.&lt;/p&gt;
&lt;p&gt;Except for one thing: Apache …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It seems so simple: use the HTTP Digest Authorization with the Quality
of Protection set to &amp;quot;auth&amp;quot;.&lt;/p&gt;
&lt;p&gt;It's an easy algorithm. A nonce that encodes a timestamp can be used
to be sure no one is attempting to cache credentials. It's
potentially very, very nice.&lt;/p&gt;
&lt;p&gt;Except for one thing: Apache.&lt;/p&gt;
&lt;p&gt;Apache absorbs the Authorization header. And that's the end of that.
It seems so simple, but I think I've been burned by it twice, now. I
write unit tests that work with simplified Python wsgiref (or
similar) servers. And I believe that those unit tests are equivalent
to integration tests.&lt;/p&gt;
&lt;p&gt;Ouch.&lt;/p&gt;
&lt;p&gt;There's another reason why HTTP Digest authentication for RESTful
services is a poor idea.&lt;/p&gt;
&lt;p&gt;It involves too much traffic. HTTP authentication is usually a
two-step dance to establish a session. Two steps in one too many, and
RESTful services don't usually have any kind of session.&lt;/p&gt;
&lt;p&gt;Schemes like this can actually work:
&lt;a class="reference external" href="http://broadcast.oreilly.com/2009/12/principles-for-standardized-rest-authentication.html"&gt;http://broadcast.oreilly.com/2009/12/principles-for-standardized-rest-authentication.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The comments on this post are almost as helpful as the post itself.&lt;/p&gt;
&lt;p&gt;The three points are straight-forward.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Use SSL. Always.&lt;/li&gt;
&lt;li&gt;Multiple Key/Secret credentials. Read this as username/password if
that's helpful. We store hashes of &amp;quot;username:realm:password&amp;quot; as
part of a RFC 2167 Digest Authentication. We plan to continue to
use those hashes. This is a bit touchy, but we think we can handle
this by a slight change to our user profile table.&lt;/li&gt;
&lt;li&gt;The &amp;quot;signed query&amp;quot; principle requires some thought. We don't make
heavy use of query strings. Indeed, we make almost no use of the
query strings. So the hand-wringing over this is a bit silly. We
simply ignore any query string when signing the request.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I just wish I did integration testing with Apache sooner, not later.
Sigh.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-wonder-what-apache-buys-us-anymore-now-that-the"&gt;
&lt;h2&gt;I wonder what Apache buys us anymore, now that the...&lt;/h2&gt;
&lt;p&gt;brian&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-23 16:21:30.109000-04:00&lt;/p&gt;
&lt;p&gt;I wonder what Apache buys us anymore, now that there are so many
battle-tested options out there. I started writing a digest auth mixin
for tornado applications. It works, but it's missing one or two finer
points of the protocol (time allowing...)
&lt;a class="reference external" href="http://github.com/bkjones/curtain"&gt;http://github.com/bkjones/curtain&lt;/a&gt;
Also, what about putting Apache behind a proxy to handle auth for you?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="are-you-sure-that-2-http-requests-cost-more-than"&gt;
&lt;h2&gt;Are you sure, that 2 HTTP requests cost more than ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-23 16:49:50.654000-04:00&lt;/p&gt;
&lt;p&gt;Are you sure, that 2 HTTP requests cost more than 1 SSL session
initialization? I'm not ready to answer this question without
experiments. I guess that double round-trip time is more than shared
secret generation, but I'm not sure. Double round-trip means 4 TCP
packets before the actual data can be sent it the best case. But the PKI
thing...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http-code-google-com-p-modwsgi-wiki-configuratio"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/Configuratio"&gt;http://code.google.com/p/modwsgi/wiki/Configuratio&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-26 07:06:57.031000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIPassAuthorization"&gt;http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIPassAuthorization&lt;/a&gt;.
Aha! I've already rewritten things to use the query string for
authentication -- in the style of AWS. But. This is an important
alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-apache-hosting-mechanism-are-you-using-for-ws"&gt;
&lt;h2&gt;What Apache hosting mechanism are you using for WS...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-24 01:49:54.484000-04:00&lt;/p&gt;
&lt;p&gt;What Apache hosting mechanism are you using for WSGI to claim that
'Apache absorbs the Authorization header'?&lt;/p&gt;
&lt;p&gt;It is true that Apache absorbs it for CGI. This is because it is viewed
as a security risk in typical setup to pass it. You can tell Apache to
pass it through anyway, but you have to recompile Apache from source
code and define 'SECURITY_HOLE_PASS_AUTHORIZATION'.&lt;/p&gt;
&lt;p&gt;In Apache/mod_wsgi, again because of the security issues, it doesn't by
default pass the Authorization header to WSGI application. You can
override this by setting the WSGIPassAuthorization directory or
pass-authorization option to appropriate mod_wsgi directives.&lt;/p&gt;
&lt;p&gt;From memory, for the mod_fastcgi and mod_fcgid modules it depends on
what headers you tell it to pass through in the configuration
And for mod_scgi, it doesn't care and I believe passes it straight
through without any concern about security issues.&lt;/p&gt;
&lt;p&gt;When proxying with Apache it should pass Authorization header straight
through because obviously the final destination server should be
worrying about it.&lt;/p&gt;
&lt;p&gt;So, have you ensured you have configured your server appropriately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="digest-authentication-doesn-39-t-strictly-require"&gt;
&lt;h2&gt;Digest authentication doesn&amp;amp;#39;t strictly require...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-23 19:31:46.001000-04:00&lt;/p&gt;
&lt;p&gt;Digest authentication doesn't strictly require two steps all the way.
When the client does the first request, the server will issue a
challenge key that SHOULD stay valid for a certain time.&lt;/p&gt;
&lt;p&gt;The client can then pre-authenticate future requests against that
challenge key, thus, no double-ping-pong happens anymore.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="architecture"></category><category term="Apache"></category><category term="WebServices"></category><category term="REST"></category></entry><entry><title>Working Definitions of Complexity</title><link href="https://slott56.github.io/2010_04_20-working_definitions_of_complexity.html" rel="alternate"></link><published>2010-04-20T08:00:00-04:00</published><updated>2010-04-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-20:/2010_04_20-working_definitions_of_complexity.html</id><summary type="html">&lt;p&gt;Software developers get so used to their Culture of Complexity, they
hardly notice it.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.scottberkun.com/blog/2007/asshole-driven-development"&gt;Asshole-Driven Development&lt;/a&gt;
for more thoughts on this. The comments add lots and lots of examples
of dysfunctional development. Many of these are additional examples
of complexity run amok.&lt;/p&gt;
&lt;p&gt;My personal addition is Next Year's Dollars …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Software developers get so used to their Culture of Complexity, they
hardly notice it.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.scottberkun.com/blog/2007/asshole-driven-development"&gt;Asshole-Driven Development&lt;/a&gt;
for more thoughts on this. The comments add lots and lots of examples
of dysfunctional development. Many of these are additional examples
of complexity run amok.&lt;/p&gt;
&lt;p&gt;My personal addition is Next Year's Dollars are Cheaper (NYDC): next
year's dollars are less valuable than this year's dollars. So
technical debt can be accrued without any long-term consequences.
Dumb, bad design can be forced into production because maintenance is
cheaper than getting something done by a fantasy-based deadline date.
Never mind the fact that maintenance goes on -- effectively --
forever, and technical debt accrues real cost at an exponential rate.
Complexity is free? Apparently so.&lt;/p&gt;
&lt;p&gt;Recently I heard of the &amp;quot;DIMY&amp;quot; development. DIMY is Do It My Way. The
specific war story was a PL/SQL stored procedure that was somehow
&amp;quot;too complex&amp;quot; because all it did was call 7 other stored procedures.
The business process had 7 steps; the parallelism between procedure
and use case was an important part of the design. Yet, since some
folks would prefer a Monolithic Stored Procedure (MSP), they saw fit
to complain.&lt;/p&gt;
&lt;p&gt;Asserting that a MSP is &amp;quot;less complex&amp;quot; is a mirror image our normal
understanding of complexity creating cost. It's a mirror-image
because the debits and credits are reversed. In the DIMY world,
measurable complexity is valued as an asset and real simplicity is
viewed as a cost.&lt;/p&gt;
&lt;div class="section" id="working-definitions"&gt;
&lt;h2&gt;Working Definitions&lt;/h2&gt;
&lt;p&gt;Based in the war story, we can identify several aspects of this
working definition of complexity.&lt;/p&gt;
&lt;p&gt;First, it appears that a monolithic piece of software (no matter how
poorly it matches the use case) is &amp;quot;less complex&amp;quot; than a relatively
simple piece of software that better matches the use case. So
software that actually matches the use case is &amp;quot;complex&amp;quot;.&lt;/p&gt;
&lt;p&gt;It also appears that a simple count of stored procedure names is a
measure of complexity. So any effort at doing any meaningful,
&amp;quot;high-level&amp;quot;
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Chunking_(psychology)"&gt;chunking&lt;/a&gt; of
meaning is accused of creating complexity. So chunking is &amp;quot;complex&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
[I am forced to agree that &amp;quot;more names&amp;quot; is a larger number; I can't
agree that more names is more complex, because I find that chunking
works. Note that refusing to engage in mental chunking is absurd.
Claiming that multiple named stored procedures &amp;quot;obscures the details&amp;quot;
is silly. Why stop at named procedures? Why not claim that PL/SQL --
by it's very nature -- obscures the details? Why not claim that an
RDBMS obscures the details? Why not claim that the OS API's obscure
details? Why not claim that compiled languages obscure the details?
Chunking is essential.]&lt;/blockquote&gt;
&lt;p&gt;Finally, it appears that real measure of complexity, like &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;Cyclomatic
Complexity&lt;/a&gt;
are irrelevant. So a monolith, with lots of loops and ifs is somehow
less &amp;quot;complex&amp;quot; and more desirable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="perfect-code"&gt;
&lt;h2&gt;Perfect Code&lt;/h2&gt;
&lt;p&gt;Clearly, then, for some folks, high quality code involves (1) no
match against the use case, (2) a single name, and (3) no limit on
the loops and if-statements. In order to achieve this, we need a very
simple use case (real simplicity -- low cyclomatic complexity -- a
sequence of decision-free steps) for which we can write an immense,
possibly irrelevant pile of code.&lt;/p&gt;
&lt;p&gt;What's wrong with the MSP?&lt;/p&gt;
&lt;p&gt;Given a monolithic piece of code that doesn't match the use case
sequence of steps, how could we construct unit tests? I don't see
how. Since we can't decompose the problem into meaningful chunks, we
can't test the thing in pieces. All we can do is write overall
end-to-end functional tests. And hope.&lt;/p&gt;
&lt;p&gt;Given this MSP, how would we debug problems? I don't see how. We'd be
confronted with &amp;quot;it's broken&amp;quot; almost every time something went wrong.
Pin-pointing the root cause seems like it would be impossible.&lt;/p&gt;
&lt;p&gt;DIMY development -- and the associated complexity -- does mean one
thing. It means job security: no one will ever be able to
understand, maintain or adapt this software. Write once, maintain
forever. If you're patient, you have a job for life. At some
point, managers will realize it's too expensive to maintain and --
because you're the only expert -- you can rewrite it, continuing
the cycle of complexity.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="complexity"></category><category term="software process improvement"></category></entry><entry><title>Ways to Complicate Use Case Analysis</title><link href="https://slott56.github.io/2010_04_13-ways_to_complicate_use_case_analysis.html" rel="alternate"></link><published>2010-04-13T09:52:00-04:00</published><updated>2010-04-13T09:52:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-13:/2010_04_13-ways_to_complicate_use_case_analysis.html</id><summary type="html">&lt;p&gt;I sat through a great use case analysis session recently.&lt;/p&gt;
&lt;p&gt;&amp;quot;Great&amp;quot; because I saw lots of ways to derail a simple process.
Eventually, we did identify a couple of actors and a couple of use
cases. But it took hours and hours.&lt;/p&gt;
&lt;p&gt;Bonus: this was the third go-round on these …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I sat through a great use case analysis session recently.&lt;/p&gt;
&lt;p&gt;&amp;quot;Great&amp;quot; because I saw lots of ways to derail a simple process.
Eventually, we did identify a couple of actors and a couple of use
cases. But it took hours and hours.&lt;/p&gt;
&lt;p&gt;Bonus: this was the third go-round on these exact use cases.&lt;/p&gt;
&lt;div class="section" id="requirements-gathering"&gt;
&lt;h2&gt;Requirements Gathering&lt;/h2&gt;
&lt;p&gt;The first go-round of requirements gathering was a conference call.
We produced some nice notes. Very good stuff.&lt;/p&gt;
&lt;p&gt;The various whiteboarding tools available with Skype work pretty
well. We could sketch stuff, and collect notes, and digest the
conversation down to a tidy document.&lt;/p&gt;
&lt;p&gt;The actual work went pretty well. Stuff got built. The principal
users need -- of course -- to review the preliminary stuff. There's a
first sprint to build stuff, followed by some chance to comment,
followed by a second sprint to finalize.&lt;/p&gt;
&lt;p&gt;Focus was lost two ways. One, the technical folks were derailed by
other, more important projects. Customer pilots, reinstallation on a
new host, and an unrelated project threw down trump cards. Second --
and more important -- the principal users simply could not find time
or interest to review the preliminary stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trying-again"&gt;
&lt;h2&gt;Trying Again&lt;/h2&gt;
&lt;p&gt;For no sensible reason, we had a second go-round of requirements
gathering. The core problem is that the users simply won't take the
time to try something out on their own. They're sales folks, without
an actual customer in the room, they seem incapable of doing
anything. This kind of world view takes some getting used to.&lt;/p&gt;
&lt;p&gt;Instead of previewing what was available, they insisted on more
requirements gathering. What we got was a random document that
purported to describe what the actors might do. It was intended to
repeat the initial phone call with more focus. Instead it had lots of
&amp;quot;We'll need to talk about this&amp;quot; parenthetical comments.&lt;/p&gt;
&lt;p&gt;In short, it was impossible for them to even set down a coherent idea
on paper. All they could do was talk about it. There was no
alternative to a conversation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="round-three"&gt;
&lt;h2&gt;Round Three&lt;/h2&gt;
&lt;p&gt;In order to make some progress, our Adobe FLEX developers were
brought in to create something a little snappier than the simplistic
HTML interface we had been working on. We redid the entire
requirements gathering for them.&lt;/p&gt;
&lt;p&gt;The principle users -- sales folks -- did not want any of the
previous requirements gathering results brought in. We had to have a
&amp;quot;conversation&amp;quot;, repeating the entire previous effort from the ground
up.&lt;/p&gt;
&lt;p&gt;And -- of course -- all of the previous dead-ends, bad ideas, logical
impossibilities and business impossibilities had to be repeated yet
again. Data that's never been available was still spoken of as
&amp;quot;required&amp;quot;. The conversation on why the data cannot possibly exist
had to be rehashed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="derailing"&gt;
&lt;h2&gt;Derailing&lt;/h2&gt;
&lt;p&gt;What's derailing the process is simple. The sales folks cannot work
independently. Each interaction must be a hands-on, guided tour of
the software in which the sales folks say random things that must be
ignored.&lt;/p&gt;
&lt;p&gt;At some point in the future, there's a remote possibility that
someone will login on their own and actually run the demo that's been
in place for months.&lt;/p&gt;
&lt;p&gt;As developers, we have been remiss in not catering to their learning
style. They cannot think without talking, and they cannot take action
unless they're influencing someone. Asking them to test the demo site
is unproductive because they simply wont. Asking them for &amp;quot;comments&amp;quot;
can be troublesome because they're job is influence, not simply
provide a simplified &amp;quot;ok/not ok&amp;quot; feedback on specific features of the
implementation of their use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="broad-not-deep"&gt;
&lt;h2&gt;Broad Not Deep&lt;/h2&gt;
&lt;p&gt;Additionally, we have folks that keep trying to define the
requirements in broad, sweeping terms. They're uncomfortable with an
end-to-end use case. At each step in the interaction they want to
define all the possible future courses of events and interactions and
consequences of each alternative course.&lt;/p&gt;
&lt;p&gt;Folks with the big-picture view have a hard time writing a use case
that describes a task from beginning to the end. Even basic concepts
like &amp;quot;Creating Business Value&amp;quot; can be elusive since the possibilities
are limitless.&lt;/p&gt;
&lt;p&gt;As developers, we were successful at focusing down on a complete use
case. With some effort we got from the user's initial interaction to
the final bit of business value.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Learning Styles -- The Astonishment Response</title><link href="https://slott56.github.io/2010_04_12-learning_styles_the_astonishment_response.html" rel="alternate"></link><published>2010-04-12T08:00:00-04:00</published><updated>2010-04-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-12:/2010_04_12-learning_styles_the_astonishment_response.html</id><summary type="html">&lt;p&gt;We're not really talking about &amp;quot;&lt;a class="reference external" href="http://www.ldpride.net/learningstyles.MI.htm#Learning%20Styles%20Explained"&gt;Learning
Styles&lt;/a&gt;&amp;quot;
as much as &amp;quot;Denial Styles&amp;quot;. This is a list of responses to
&amp;quot;Astonishment&amp;quot; I've seen.&lt;/p&gt;
&lt;p&gt;We're not talking about the Kübler-Ross model of grief, although this
is similar.&lt;/p&gt;
&lt;p&gt;However, the response to astonishment isn't a &amp;quot;progression&amp;quot; toward
acceptance. Some folks simply don't like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We're not really talking about &amp;quot;&lt;a class="reference external" href="http://www.ldpride.net/learningstyles.MI.htm#Learning%20Styles%20Explained"&gt;Learning
Styles&lt;/a&gt;&amp;quot;
as much as &amp;quot;Denial Styles&amp;quot;. This is a list of responses to
&amp;quot;Astonishment&amp;quot; I've seen.&lt;/p&gt;
&lt;p&gt;We're not talking about the Kübler-Ross model of grief, although this
is similar.&lt;/p&gt;
&lt;p&gt;However, the response to astonishment isn't a &amp;quot;progression&amp;quot; toward
acceptance. Some folks simply don't like to learn and are perfectly
capable of arguing down the facts because they don't fit with
assumptions and preconceived notions.&lt;/p&gt;
&lt;p&gt;When faced with new information, some folks seem to have a consistent
response to astonishment. Other folks seem to jump around among a few
preferred responses. Additionally there are people who seem to prefer
to escalate things to a crisis level because learning seems to
require adrenaline.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Oh&lt;/strong&gt;. Classic acceptance. Many folks start here; which is pleasant.
It saves a lot of email traffic. When astonished, they assimilate the
information without really fighting against it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That Can't Be True&lt;/strong&gt;. Classic denial. It's surprising how often
this happens. Even when confronted with facts &lt;em&gt;supplied by the
learner themself&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Example. The DBA says stored procedures are a maintenance problem.
You say, &amp;quot;Correct, perhaps they shouldn't be used to heavily&amp;quot;.&lt;/p&gt;
&lt;p&gt;The DBA asks &amp;quot;Why reduce dependence on stored procedures?&amp;quot; You say
that, amongst other things, &amp;quot;they're a maintenance nightmare.&amp;quot;&lt;/p&gt;
&lt;p&gt;And the DBA says, &amp;quot;That can't be true; it's just a management
problem.&amp;quot; WTF -- Wasn't That Funny -- the DBA is going to deny their
own facts in order to avoid learning something knew.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I Wasn't Told.&lt;/strong&gt; This is a kind of grudging, negotiated acceptance.
&amp;quot;What you say about bubble sort being inefficient may be true, but I
wasn't told.&amp;quot; Okay. You weren't told. Does that mean that I have to
email all of Don Knuth to you so that you will have been &amp;quot;told&amp;quot;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I'll have to see it&lt;/strong&gt;. This is really just a basic denial wrapped
in the terms of settlement. In short, the learner is saying, &amp;quot;I still
disagree with all your facts.&amp;quot; I'm not sure what &amp;quot;I'll have to see
it&amp;quot; means when we have working implementations of something &amp;quot;new&amp;quot; or
&amp;quot;different&amp;quot;.&lt;/p&gt;
&lt;p&gt;Example. A: &amp;quot;RESTful web services are simpler.&amp;quot; B: &amp;quot;No.&amp;quot; A: &amp;quot;No SOAP,
no WSDL; seems simpler.&amp;quot; B: &amp;quot;Perhaps, but I'll have to see it.&amp;quot; See
what? How can you &amp;quot;see&amp;quot; the absence of complex WSDL?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This project is out of control&lt;/strong&gt;. This is a somewhere near grudging
acceptance. It might also be a form of reneging or repudiation of
acceptance. It's hard to say.&lt;/p&gt;
&lt;p&gt;Example. Manager: &amp;quot;The Ontology has thousands of objects with dozens
of properties and the SPARQL processing is slow.&amp;quot; Architect. &amp;quot;Replace
it with a relational database derived from the ontology.&amp;quot; Manager:
&amp;quot;Okay&amp;quot;.&lt;/p&gt;
&lt;p&gt;Four Weeks Later. Manager: &amp;quot;This Project is Out of Control.&amp;quot;&lt;/p&gt;
&lt;p&gt;Right. We're making a disruptive change to the architecture. What did
you expect? Non-disruptive change? How is it change if it doesn't
disrupt &lt;em&gt;something&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Does Everyone Know This?&lt;/strong&gt; This is a form of &amp;quot;I wasn't told&amp;quot;. It's
my favorite because it projects one's own knowledge-gathering onto a
mysterious &amp;quot;everyone&amp;quot;. I'm not sure why some folks say this. To me,
it seems a pretty bold statement about the mental states of other
folks on the team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That's Non-Standard&lt;/strong&gt;. More properly this should be &amp;quot;That's
atypical&amp;quot; or &amp;quot;That's unconventional&amp;quot;. This is another negotiated,
grudging acceptance. But it's a pretty complex deal. The first part
is to establish a convention. Sometimes a legacy usage needs to be
elevated to &amp;quot;typical&amp;quot; or &amp;quot;conventional&amp;quot;; other times legacy usage
already is conventional. The second part is to realize that the new
thing is different from the convention. The third part -- which is
subtle -- is to deprecate something new because it is unconventional.&lt;/p&gt;
&lt;p&gt;Example. Architect: &amp;quot;You should use a HashMap for those dimensional
conformance lookups.&amp;quot; Programmer: &amp;quot;Not everyone understands those
fancy collection classes, so we use primitive arrays.&amp;quot; Architect:
&amp;quot;That's amazingly slow. It's less code to build and lookup a HashMap,
and it runs faster.&amp;quot;&lt;/p&gt;
&lt;p&gt;Programmer: &amp;quot;That would be non-standard&amp;quot;. Architect: &amp;quot;There's no
applicable ISO standard. Perhaps you mean 'unconventional'.&amp;quot;
Programmer: &amp;quot;Right, unconventional. And we can't change now because
it would disrupt the established code base.&amp;quot;&lt;/p&gt;
&lt;p&gt;Architect: &amp;quot;It will be less code and run faster.&amp;quot; Programmer: &amp;quot;I'll
have to see it.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doesn't That Contradict Something?&lt;/strong&gt; This is best nit-picky form of
denial ever. Step one is to analyze each word of the suggested
change; in some cases, using the level of care appropriate to
studying the
&lt;a class="reference external" href="http://www.myjewishlearning.com/texts/Rabbinics/Talmud/Talmud/Studying_Talmud.shtml"&gt;Talmud&lt;/a&gt;.
Step two is to locate something that could be construed as
contradictory. The third step is to deprecate the new thing because
it can be linked to something that can be seen as contradictory.&lt;/p&gt;
&lt;p&gt;Architect: &amp;quot;Can we add some formal assert statements in the tricky
actuarial scoring algorithm. It involves non-obvious assumptions
about NULL's and ranges of values.&amp;quot; Programmer: &amp;quot;No. That contradicts
your earlier advice to unit test all those corner and edge cases.&amp;quot;&lt;/p&gt;
&lt;p&gt;Architect: &amp;quot;Contradict? Perhaps you mean it's redundant.&amp;quot; Programmer:
&amp;quot;No, it's clearly contradictory; one never needs both assertions and
unit tests. You demanded unit tests, that means that assertions are a
contradiction.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Other than patience, it's hard to provide any other advice on how to
work through these things. Mostly, these are fact-free positions. In
some cases, even facts don't help the learning process.&lt;/p&gt;
&lt;p&gt;I think the only way to cope with a fundamental refusal to learn is
to ask what it takes to convince them. In many cases, the answer
amounts to &amp;quot;Do the entire implementation two ways and then
micro-examine each nuance of performance, maintainability,
adaptability and cost to the organization over a period of a decade
before I'll consider your worthless opinion.&amp;quot;&lt;/p&gt;
&lt;p&gt;I remember once being asked -- seriously -- how I can possibly claim
one implementation is higher performance than another. The question
was asked as if &amp;quot;measurement&amp;quot; didn't apply to software performance.
At the time, I couldn't figure out why &amp;quot;measurement&amp;quot; wasn't the
obvious fact gathering technique. Now I realize that they were simply
refusing to learn and didn't care about evidence; they simply didn't
want to change to a more efficient implementation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="learning"></category><category term="architecture"></category></entry><entry><title>iPad Thoughts -- Fashion Accessory?</title><link href="https://slott56.github.io/2010_04_09-ipad_thoughts_fashion_accessory.html" rel="alternate"></link><published>2010-04-09T08:00:00-04:00</published><updated>2010-04-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-09:/2010_04_09-ipad_thoughts_fashion_accessory.html</id><summary type="html">&lt;p&gt;From a Blog that's inside a company's firewall, so this had to be
heavily edited.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The instant ON is a relief. The full page touch screen works just
like on the iPhone - only better. Web pages look great..
Photographs and Movies are fabulous. The screen resolution is
fantastic. Sharing pictures …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;From a Blog that's inside a company's firewall, so this had to be
heavily edited.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The instant ON is a relief. The full page touch screen works just
like on the iPhone - only better. Web pages look great..
Photographs and Movies are fabulous. The screen resolution is
fantastic. Sharing pictures makes it clear that the photo album is
history. Tough times for Kindle. Email - much better than on the
Blackberry. The things we like on the PDAs are all more attractive
- and more usable! Almost like on a laptop.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Also.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I did not have an easy way to view Excel &amp;amp; Powerpoint. 3G is not
available for another month. ... No Adobe Flash. For some, the one
big 'flaw' will be the lack of a 'file system'.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Finally, emphasis mine.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The iPad is not a big leap, it is just a step, a big iTouch. But
this is the last step that brings a whole new vision home. While
not quite ready for Enterprise deployment, it gives us time to get
going. &lt;em&gt;And this may be the Tablet that makes it acceptable for
men to carry handbags&lt;/em&gt;&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Okay. Time to start shopping for a nice
&lt;a class="reference external" href="http://www.timbuk2.com/blog/2010/04/02/timbuk2-and-the-ipad/"&gt;Timbuktu&lt;/a&gt;
messenger bag.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="makes-it-acceptable-for-men-to-carry-handbags"&gt;
&lt;h2&gt;makes it acceptable for men to carry handbags...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-09 17:31:06.983000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt;makes it acceptable for men to carry handbags
What a very American perspective! Perhaps it might already be acceptable
in other countries?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="innovation"></category><category term="iPad"></category></entry><entry><title>Fancy Literate Programming</title><link href="https://slott56.github.io/2010_04_07-fancy_literate_programming.html" rel="alternate"></link><published>2010-04-07T08:00:00-04:00</published><updated>2010-04-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-07:/2010_04_07-fancy_literate_programming.html</id><summary type="html">&lt;p&gt;My bias is toward &amp;quot;printable&amp;quot; documents. I like the idea of an HTML
document that is directly printable. I've used tools like &lt;a class="reference external" href="https://xhtmlrenderer.dev.java.net/"&gt;Flying
Saucer&lt;/a&gt; (and appropriate CSS) to
guarantee printability.&lt;/p&gt;
&lt;p&gt;I like using &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReStructured Text&lt;/a&gt; to create HTML
and LaTeX that match precisely.&lt;/p&gt;
&lt;p&gt;When I think of Literate Programming, I'm …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My bias is toward &amp;quot;printable&amp;quot; documents. I like the idea of an HTML
document that is directly printable. I've used tools like &lt;a class="reference external" href="https://xhtmlrenderer.dev.java.net/"&gt;Flying
Saucer&lt;/a&gt; (and appropriate CSS) to
guarantee printability.&lt;/p&gt;
&lt;p&gt;I like using &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReStructured Text&lt;/a&gt; to create HTML
and LaTeX that match precisely.&lt;/p&gt;
&lt;p&gt;When I think of Literate Programming, I'm biased toward print.&lt;/p&gt;
&lt;p&gt;However, HTML has a lot of power. Taking off the blinkers for a
moment, one can see that rich HTML and Javascript may be a really
workable approach.&lt;/p&gt;
&lt;p&gt;Take a look at the &lt;a class="reference external" href="http://literate-molly.sourceforge.net/"&gt;Literate Molly Module&lt;/a&gt;: another
tool for Literate Programming. This is an example of using rich
HTML as a vehicle for literate programming.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="software-architect-s-key-responsibility-areas"&gt;
&lt;h2&gt;Software Architect's Key Responsibility Areas(...&lt;/h2&gt;
&lt;p&gt;Prashant S Akerkar&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-29 06:28:23.075000-04:00&lt;/p&gt;
&lt;p&gt;Software Architect's Key Responsibility Areas(KRA)
1.Identifying Business Needs.
2.Designing - High and Low Level Designs.
3.Creating Prototyping Model.
4.Possess Excellent Functional Domain Knowledge.
5.Identifying Technology,API,Framework viz Open Source, Microsoft, Sun
Microsystems for the solution
6.Identifying SDLC Model viz Waterfall,Iterative,Agile for Project
Execution
7.Write System Test Cases
8.Adhering to Quality Processes Standards for Software Products
Development.
Thanks &amp;amp; Regards,
Prashant S Akerkar
&lt;a class="reference external" href="http://www.linkedin.com/in/prashantakerkar"&gt;http://www.linkedin.com/in/prashantakerkar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="literate programming"></category></entry><entry><title>Dumb Info Security</title><link href="https://slott56.github.io/2010_04_05-dumb_info_security.html" rel="alternate"></link><published>2010-04-05T15:07:00-04:00</published><updated>2010-04-05T15:07:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-05:/2010_04_05-dumb_info_security.html</id><summary type="html">&lt;p&gt;A truly great question came up the other day.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Why change passwords every 90 days? What is the threat scenario
countered by that policy?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Of course strong password policy means constantly changing passwords.
Right?&lt;/p&gt;
&lt;p&gt;Then I started to think about it. What -- actually -- does a password
change protect you against …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A truly great question came up the other day.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Why change passwords every 90 days? What is the threat scenario
countered by that policy?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Of course strong password policy means constantly changing passwords.
Right?&lt;/p&gt;
&lt;p&gt;Then I started to think about it. What -- actually -- does a password
change protect you against?&lt;/p&gt;
&lt;p&gt;The answer, it appears, is nothing. Changing passwords is largely a
waste of time and money. I suppose that a password change prevents
further abuse of the account. But generally, the abuse is not
ongoing. Once in to a system, the trick is to create an additional
privileged account that does not belong to any real user; all the
password changes in the world have no effect.&lt;/p&gt;
&lt;p&gt;This post is spot-on: &amp;quot;&lt;a class="reference external" href="http://isc.sans.org/diary.html?storyid=7510"&gt;Password rules: Change them every 25
years&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;In short, there's no threat that's actually countered by changing
passwords. However, it's on everyone's checklist.&lt;/p&gt;
&lt;blockquote&gt;
[Look at &lt;a class="reference external" href="http://passcracking.com/hybrid.html"&gt;http://passcracking.com/hybrid.html&lt;/a&gt; for information on
rainbow table attacks. The time required is on the order of 10
minutes.]&lt;/blockquote&gt;
&lt;p&gt;Since a weak password is broken in well under 90 days, there's no
&amp;quot;moving target&amp;quot; to this. A weak password is -- effectively --
broken instantly compared to the 90-day password change. Once
broken, the machine's freely available for -- on average -- 45
days.&lt;/p&gt;
&lt;p&gt;The comments on this post are helpful also. Most people agree that
password changes do not have any possible impact on security.
Except that it gives security managers a chance to improve the
rules and enforce everyone to change their passwords to meet the
new rules.&lt;/p&gt;
&lt;div class="section" id="missing-the-point"&gt;
&lt;h2&gt;Missing the Point&lt;/h2&gt;
&lt;p&gt;One comment that's interesting is this:&lt;/p&gt;
&lt;blockquote&gt;
You've made two assumptions: 1) all password thieves will give
up after a few tries in the case of brute-force attack, and 2)
all thieves will give up after a few tries in the case of
dictionary attacks.&lt;/blockquote&gt;
&lt;p&gt;This misses the point entirely. These two assumptions are not
&lt;em&gt;overlooked&lt;/em&gt; by this posting. They're not part of it at all. None
of this is based on password thieves giving up.&lt;/p&gt;
&lt;p&gt;Changing a password does not materially impact the thieves'
ability to crack a password. Phishing, and Key Logging always
work, no matter how often the password is changed.&lt;/p&gt;
&lt;p&gt;A dictionary attack is trivially defeated by disabling the account
after a few failures. Changing the password is of no relevance at
all.&lt;/p&gt;
&lt;p&gt;A rainbow table to undo a hashed password is defeated by using
long salt strings with the hash. Changing passwords every 90 days
has nothing to do with this, either. There's no &amp;quot;moving target&amp;quot;
concept, since a rainbow table attack takes much less than 90
days.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-29 16:14:51.793000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by a blog administrator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="amen-i-wish-more-people-would-get-this"&gt;
&lt;h2&gt;Amen.  I wish more people would get this.&lt;/h2&gt;
&lt;p&gt;Kevin H&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-29 12:10:34.157000-04:00&lt;/p&gt;
&lt;p&gt;Amen. I wish more people would get this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-agree-with-you-100-but-there-are-a-few-things"&gt;
&lt;h2&gt;I agree with you 100%, but there are a few things ...&lt;/h2&gt;
&lt;p&gt;Cade&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-29 12:44:03.339000-04:00&lt;/p&gt;
&lt;p&gt;I agree with you 100%, but there are a few things (opportunistic
attacks) it protects against (which are flaws caused by bad account
management or the regular password expiry concept itself!):&lt;/p&gt;
&lt;p&gt;People finding an old written down password taped under the desk.
Written down in the first place, because changing passwords and have
crazy password schemes makes people write down their passwords.&lt;/p&gt;
&lt;p&gt;People using an old account which someone forgot to disable or notify
admainstrators to be disabled. This is only a problem when you aren't
managing your accounts properly in the first place. The nature of the
password age shouldn't matter - accounts have to be disabled as soon as
they shouldn't be used.&lt;/p&gt;
&lt;p&gt;I guess you could argue defense-in-depth in the second case, but the
problems that regular password expiry causes are huge.&lt;/p&gt;
&lt;p&gt;As long as security auditors have password expiry as a check box on
their lists, it's going to keep causing millions of dollars in
productivity waste and security problems for years to come.&lt;/p&gt;
&lt;p&gt;Along these same lines, check out&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-top-5-cyber"&gt;
&lt;h2&gt;My Top 5 Cyber ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-02 07:34:31.149000-04:00&lt;/p&gt;
&lt;p&gt;Along these same lines, check out
My Top 5 Cyber Fallacies
Written by Jeffrey Carr
&lt;a class="reference external" href="http://intelfusion.net/wordpress/2010/03/28/my-top-5-cyber-fallacies/"&gt;http://intelfusion.net/wordpress/2010/03/28/my-top-5-cyber-fallacies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Because it provides a moving target.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="see-my-reply"&gt;
&lt;h2&gt;See my reply...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-04 09:56:30.193000-04:00&lt;/p&gt;
&lt;p&gt;Because it provides a moving target.
See my reply to
&lt;a class="reference external" href="http://architects.dzone.com/news/dumb-info-security"&gt;http://architects.dzone.com/news/dumb-info-security&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="after-reading-this-post-i-remember-my-cousin-39"&gt;
&lt;h2&gt;After reading this post, I remember my cousin&amp;amp;#39;...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-30 02:40:38.844000-04:00&lt;/p&gt;
&lt;p&gt;After reading this post, I remember my cousin's website that has a
malfunctioning &amp;quot;registry button&amp;quot; in the main page. Some clients
contacted him repeatedly since the &amp;quot;sign-in&amp;quot; button doesn't work for
them while they are registering in the website.&lt;/p&gt;
&lt;p&gt;In that case, he researched for the best &lt;a class="reference external" href="http://www.modulusmedia.ca/toronto-web-development"&gt;web development
(Toronto)&lt;/a&gt;
company to fix his website that would focus not only with the design but
also with its usability, and fast page loading time. I must say that the
&lt;a class="reference external" href="http://www.modulusmedia.ca/web-designer-toronto"&gt;web designer
Toronto&lt;/a&gt; that was
assigned to him did a remarkable job setting up his website. After a
month, there were no more calls or e-mails from clients reporting any
bugs and errors on his website.&lt;/p&gt;
&lt;p&gt;I certainly enjoy reading your posts. Great job!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="security"></category></entry><entry><title>Getting Started Creating Web Pages</title><link href="https://slott56.github.io/2010_04_05-getting_started_creating_web_pages.html" rel="alternate"></link><published>2010-04-05T08:00:00-04:00</published><updated>2010-04-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-05:/2010_04_05-getting_started_creating_web_pages.html</id><summary type="html">&lt;p&gt;Got this question recently.&lt;/p&gt;
&lt;blockquote&gt;
I’m looking for an HTML editor that fits into my price range (free
of course). I don’t need to do anything fancy, just vanilla HTML
to run on an Apache server ..., and maybe some PHP down the line.
Can you recommend any open source …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Got this question recently.&lt;/p&gt;
&lt;blockquote&gt;
I’m looking for an HTML editor that fits into my price range (free
of course). I don’t need to do anything fancy, just vanilla HTML
to run on an Apache server ..., and maybe some PHP down the line.
Can you recommend any open source or shareware software that would
run on Windows?&lt;/blockquote&gt;
&lt;p&gt;What to do?&lt;/p&gt;
&lt;p&gt;First, civilized folks don’t edit HTML any more. That’s so 1999.&lt;/p&gt;
&lt;p&gt;You have a spectrum of choices if you want to try and edit HTML.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;General-purpose text editors&lt;/strong&gt;. Good ones do HTML syntax
coloring. This is the hardy, forge-through-the-forest way to
go. Raw text editing. Like when we were kids.
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_text_editors"&gt;http://en.wikipedia.org/wiki/List_of_text_editors&lt;/a&gt;. In Windows
world, I use
&lt;a class="reference external" href="http://notepad-plus.sourceforge.net/uk/site.htm"&gt;Notepad++&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;HTML-specific editors&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_HTML_editors"&gt;http://en.wikipedia.org/wiki/List_of_HTML_editors&lt;/a&gt;. Note that
WYSIWYG HTML Editing is more trouble than you’d believe
possible. It’s always fun for the first few months, but then
you try to do something that confuses the GUI interface and you
wind up with an entire paragraph in italics and can’t figure
out why. Or you want to move a punctuation outside a link and
discover that the editor just can’t figure out where the tag is
supposed to fall and puts everything inside it. Most of us do
not try to use WYSIWYG HTML editors because it slowly becomes
annoying once you get beyond the trivial basics.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDE’s&lt;/strong&gt;. To produce HTML sensibly, you have to also write
.CSS style sheets, and you often have a number of related
pages. Essentially, a “project”. An IDE is usually a better
choice than an editor. All the good IDE’s are free: Eclipse,
NetBeans and Komodo Edit. I use ActiveState &lt;a class="reference external" href="http://www.activestate.com/komodo_edit/"&gt;Komodo
Edit&lt;/a&gt; heavily.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While NetBeans or Komodo Edit seems like overkill, it will
(eventually) pay out as you move into developing more than static
HTML pages.&lt;/p&gt;
&lt;div class="section" id="better-than-html"&gt;
&lt;h2&gt;Better Than HTML&lt;/h2&gt;
&lt;p&gt;Instead of creating HTML, many of us use “Lightweight Markup”
which is much, much easier to cope with and simple tools to
produce HTML from the markup.
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lightweight_markup_language"&gt;http://en.wikipedia.org/wiki/Lightweight_markup_language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I use
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt;
instead of HTML. I use the
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/ReStructuredText#Docutils"&gt;DocUtils&lt;/a&gt;
project, which has an rst2html.py tool that converts my RST into
HTML for me. I also use rst2s5.py to create power-point-like
presentations from my reStructuredText. If you want to see the
power of RST, you can look at my &lt;a class="reference external" href="http://homepage.mac.com/s_lott/steve/index.html"&gt;personal
site&lt;/a&gt; and my
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/index.html"&gt;books&lt;/a&gt;: and.
100% RST. No manual HTML anywhere. I use
&lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; to create really complex
docments like the books.&lt;/p&gt;
&lt;p&gt;For some tasks, I use HTML templates and simple scripts to process
data and create static HTML from the data. You’d be surprised how
effective this is. Few things require up-to-the-second web
applications. Many things can be done as nightly batch programs
that emit static HTML and FTP the HTML up to the web page. No PHP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-development"&gt;
&lt;h2&gt;Application Development&lt;/h2&gt;
&lt;p&gt;For web development, PHP is fine. It will – before long – create
holes in your head because it’s so badly thought out. But for
getting started, it’s fun. Real companies (like Google) don’t
waste their time with it because of the numerous problems PHP
causes.&lt;/p&gt;
&lt;p&gt;“Problems?” you say. “What problems?”&lt;/p&gt;
&lt;p&gt;PHP’s world view (HTML + code in a single package) is a terrible
architecture. It’s horribly slow and leads to very muddled,
inflexible designs. Everyone who tries to make a global change to
their site's “look and feel” finds that PHP is inflexible and a
regrettable platform. Even folks who simply want consistency among
several different pages within their site find that the PHP world
view is more headache than solution.&lt;/p&gt;
&lt;p&gt;But it’s fun when you first build a site that works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frameworks"&gt;
&lt;h2&gt;Frameworks&lt;/h2&gt;
&lt;p&gt;Generally, most folks find that a “framework” is absolutely
essential for debugging, consistency and separating Content,
Processing and Presentation. Even a simple Blog or Forum or
Visitor Registration has separate Content, Processing and
Presentation; PHP muddles these. A framework can help unmuddle
them.&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt; as framework and
Python as programming language. Your hosting site may not support
this, in which case you may be in trouble.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#PHP"&gt;Web Frameworks
list&lt;/a&gt;
on Wikipedia is good. Zend and CodeIgniter are highly recommended
in places like
&lt;a class="reference external" href="http://stackoverflow.com/questions/2648/what-php-framework-would-you-choose-for-a-new-application-and-why"&gt;StackOverflow&lt;/a&gt;.
However, here's a good Django vs. PHP comparison: &lt;a class="reference external" href="http://www.reddit.com/r/django/comments/bhvhz/the_onion_uses_django_and_why_it_matters_to_us/"&gt;The Onion Uses
Django, And Why It Matters To
Us&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Because Cleaner. Much cleaner. Proper unit testing. Real reusable
components across applications. An ORM rather than a just a series
of functional query helpers....&amp;quot;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Get an IDE to edit your pages. &lt;strong&gt;Komodo Edit&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Consider using RST and tools instead of raw HTML. Installing
Python + DocUtils and using rst2html.py is easier than learning
HTML.&lt;/li&gt;
&lt;li&gt;Try to avoid PHP’s numerous pitfalls; ideally by avoiding PHP.
Use Django + Python and create a real application that clearly
separates the content (data model) from processing (view
functions) from presentation (HTML templates)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hi-thanks-for-sharing-you-see-power-pack-open-sou"&gt;
&lt;h2&gt;Hi thanks for sharing. you see power pack open sou...&lt;/h2&gt;
&lt;p&gt;patrick&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-06 01:32:49.801000-04:00&lt;/p&gt;
&lt;p&gt;Hi thanks for sharing. you see power pack open source web sites no
problem see on &lt;a class="reference external" href="http://www.itemplatez.com%22"&gt;Web design and
developments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Suggestion: look into CakePHP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-of-my-exper"&gt;
&lt;h2&gt;Most of my exper...&lt;/h2&gt;
&lt;p&gt;Jerry Seutter&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-05 12:41:36.170000-04:00&lt;/p&gt;
&lt;p&gt;Suggestion: look into CakePHP.
Most of my experience is with Django and Pylons, but I recently looked
into CakePHP and have found it _very_ easy to use. It splits up
Views/Models/Controllers just like any other MVC web framework.
Deployment of PHP apps is dead simple on my shared hosting account.
Python apps require more work for me to deploy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-agree-with-the-author-that-phps-world-view-htm"&gt;
&lt;h2&gt;I agree with the author that PHP’s world view (HTM...&lt;/h2&gt;
&lt;p&gt;Marcus_Dane&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-05-18 10:37:34.437000-04:00&lt;/p&gt;
&lt;p&gt;I agree with the author that PHP’s world view (HTML + code in a single
package) is a terrible &lt;a class="reference external" href="http://www.webbizdesigns.com/web-architecture"&gt;website
architecture&lt;/a&gt;. But
using frameworks is the best solution to fix the problem. For &lt;a class="reference external" href="http://www.webbizdesigns.com/web-architecture"&gt;web
application
architecture&lt;/a&gt;, web
developers need to learn possible ways to use HTML or PHP whichever is
necessary. But then again, the author forewarned web developers to try
avoid PHP’s numerous pitfalls; ideally by avoiding PHP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-for-the-information-we-will-add-this-story"&gt;
&lt;h2&gt;Thanks for the information, we will add this story...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-21 14:45:33.169000-04:00&lt;/p&gt;
&lt;p&gt;Thanks for the information, we will add this story to our blog, as we
have a audience in this sector that loves reading like this” &lt;a class="reference external" href="http://www.fundootemplates.com"&gt;web
development&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="very-interesting-and-useful-post-thank-you-for-sh"&gt;
&lt;h2&gt;Very interesting and useful post, thank you for sh...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-09-27 07:14:28.361000-04:00&lt;/p&gt;
&lt;p&gt;Very interesting and useful post, thank you for sharing this with us.
&lt;a class="reference external" href="http://www.web-designs-company.com"&gt;web design company&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="PHP"></category><category term="Django"></category><category term="#python"></category><category term="HTML"></category></entry><entry><title>The Final Design Review</title><link href="https://slott56.github.io/2010_04_01-the_final_design_review.html" rel="alternate"></link><published>2010-04-01T08:00:00-04:00</published><updated>2010-04-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-04-01:/2010_04_01-the_final_design_review.html</id><summary type="html">&lt;p&gt;Today, we're reviewing the final and only code in the application. It's
just that simple. We'll start with the data model.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE TABLE STUFF(
    COLUMN1 TEXT,
    COLUMN2 TEXT,
    COLUMN3 TEXT
    );
&lt;/pre&gt;
&lt;p&gt;As you can see from the enclosed table design, we have generalized
the general triple-store to make it more general …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, we're reviewing the final and only code in the application. It's
just that simple. We'll start with the data model.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CREATE TABLE STUFF(
    COLUMN1 TEXT,
    COLUMN2 TEXT,
    COLUMN3 TEXT
    );
&lt;/pre&gt;
&lt;p&gt;As you can see from the enclosed table design, we have generalized
the general triple-store to make it more general by removing all type
restrictions on the RDF triple.&lt;/p&gt;
&lt;p&gt;This can be used to construct any relations by the convention of
having COLUMN1 be the database, schema and table, separated with
dots. COLUMN2 is the column or attribute name. COLUMN3 is -- again,
by convention only -- the target data type (integer, string, date,
etc.) and the quoted value.&lt;/p&gt;
&lt;p&gt;Any Questions?&lt;/p&gt;
&lt;p&gt;The stunned silence is -- I'm sure -- due to the glittering
brilliance of this design. Why this hasn't been more widely used, I
have no idea.&lt;/p&gt;
&lt;p&gt;The code is equally simple. We don't need to get into the details,
but we have&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;a function called do_stuff. ... not to worry because the
method does more than one thing. ... don't worry because the
method is overloaded many different ways.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Great. That ends this design review. With this kind of obvious
simplification, we don't need any more design reviews, this one
covers all possible bases.&lt;/p&gt;
&lt;div class="section" id="seriously"&gt;
&lt;h2&gt;Seriously&lt;/h2&gt;
&lt;p&gt;I've seen the first discussed seriously in the context of &amp;quot;why
don't we simply...&amp;quot;. The answer (&amp;quot;it doesn't perform well&amp;quot;) is
always a surprise to people who pitch the triple-store solution to
a problem they've managed to get wrong.&lt;/p&gt;
&lt;p&gt;I recently received an email bemoaning a real code review in which
someone seriously tried to put a function into production named
&amp;quot;do_stuff&amp;quot;.&lt;/p&gt;
&lt;p&gt;Equally bad is this &amp;quot;question&amp;quot; on Stack Overflow. &amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/2438841/using-table-of-contents-in-code"&gt;Using
table-of-contents in
code?&lt;/a&gt;&amp;quot;.
(It's not really a question, it's a blog post in the rhetorical
form of a question.) The money quote: &amp;quot;I know that alternative to
that kind of listing would be to split up big files into smaller
classes/files, so that their class declaration would be
self-explanatory enough.. but some complex tasks require a lot of
code&amp;quot;.&lt;/p&gt;
&lt;p&gt;It appears that there are programmers who have done too little
maintenance and adaptation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="software process improvement"></category></entry><entry><title>Programming in the Large -- Multicore Goodness</title><link href="https://slott56.github.io/2010_03_31-programming_in_the_large_multicore_goodness.html" rel="alternate"></link><published>2010-03-31T08:00:00-04:00</published><updated>2010-03-31T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-31:/2010_03_31-programming_in_the_large_multicore_goodness.html</id><summary type="html">&lt;p&gt;The lowly shell (bash, zsh, csh, the whole bunch) is usually a
dreadful programming environment. Perfectly awful. With some care,
you can easily architect applications so that you don't really need
the shell for very much.&lt;/p&gt;
&lt;p&gt;However, there is a precious nugget of goodness within the shell's
programming language. The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The lowly shell (bash, zsh, csh, the whole bunch) is usually a
dreadful programming environment. Perfectly awful. With some care,
you can easily architect applications so that you don't really need
the shell for very much.&lt;/p&gt;
&lt;p&gt;However, there is a precious nugget of goodness within the shell's
programming language. The Linux shell's have a cool Programming in
the Large (PITL) language. This combines executable programs using a
number of operators. These operators are an excellent set of design
patterns that can help us create complex multi-processing pipelines.&lt;/p&gt;
&lt;p&gt;The best part about the shell's PITL language is that a simple shell
pipeline will use every core in our processor, maximizing throughput
and minimizing the amount of programming we have to do.&lt;/p&gt;
&lt;div class="section" id="pitl-objects"&gt;
&lt;h2&gt;PITL Objects&lt;/h2&gt;
&lt;p&gt;This PITL language has a simple set of operators. If your programs
are well-behaved, the language is, in a formal mathematical sense,
closed. You can apply PITL operators to combinations of programs to
get new composite programs.&lt;/p&gt;
&lt;p&gt;To be well-behaved a program must read from standard in and write to
standard out. The inputs and outputs must be in some regular syntax.
Regular, here, means parseable by regular expressions or regular
grammars.&lt;/p&gt;
&lt;p&gt;As a special case, we need to create a special program that can read
from someplace other than standard in, but write it's content to
standard out. A program like cat.&lt;/p&gt;
&lt;p&gt;Note that any map-reduce step will be well-behaved. To seed the
map-reduce pipeline we use cat as the &amp;quot;head-0f-the-pipeline&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pitl-operators"&gt;
&lt;h2&gt;PITL Operators&lt;/h2&gt;
&lt;p&gt;We'll look at the composition operators using three short-hand
commands: p1, p2 and p3. Each of these is &amp;quot;well-behaved&amp;quot;: they read
from stdin and write to stdout.&lt;/p&gt;
&lt;p&gt;Typically, running a program from the shell involves a much longer
and more involved command-line, but we'll use these three aliases to
strip away the details and look at the design patterns. You can
imagine them as being p1.py or even python p1.py.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sequence,&lt;/strong&gt; &lt;tt class="docutils literal"&gt;;&lt;/tt&gt;. A sequence of steps is shown in the shell on
multiple lines, or with the ; operator. In effect a sequence declares
a program as the precondition for the following program. We can
summarize this as &amp;quot;p1 ; p2&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parallel,&lt;/strong&gt; &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;. A parallel operation is shown by using the &amp;amp;
operator. The two programs are declared as independent operations. We
can summarize this as &amp;quot;p1 &amp;amp; p2&amp;quot;. As an extension to this, a trailing
&amp;quot;&amp;amp;&amp;quot; allows the programs to run in parallel with the shell itself;
this gives you a next prompt right away.&lt;/p&gt;
&lt;p&gt;This allows the OS to schedule your two processes on two or more
cores. However, there's no real relationship between the processes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pipeline,&lt;/strong&gt; &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;. A pipeline operation is shown using the |
operator. We can summarize this as &amp;quot;p1 | p2&amp;quot;. In addition to the
logical connection of one program's input being the other program's
output, both programs can run in parallel, also.&lt;/p&gt;
&lt;p&gt;This allows the OS to schedule your two processes on two or more
cores. Indeed, the more stages in the pipeline, the more cores you'll
need to do the processing. Best, of course, the I/O is through a
shared buffer and doesn't involve any physical transfer of bytes
among the processes.&lt;/p&gt;
&lt;p&gt;This is a very powerful way to use multiple cores with minimal
programming.&lt;/p&gt;
&lt;p&gt;If one part of a pipeline is a sort, however, the parallel processing
is limited. The sort must read all input before providing any output.
A process like &amp;quot;p1 | sort | p3&amp;quot; is effectively serial: &amp;quot;p1 &amp;gt; temp1;
sort temp1 &amp;gt;temp2; p3 temp2&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grouping&lt;/strong&gt;. Programs are grouped by &lt;tt class="docutils literal"&gt;()&lt;/tt&gt;'s of various kinds (&lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;
and ``). Also the conditional and repetitive statements
effectively group series of programs. We use syntax like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;``(&lt;/span&gt; p1 &amp;amp; p2 ); p3&lt;/tt&gt; to show the situation where p1 and p2 must both complete
before p3 can begin processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-all-the-cores"&gt;
&lt;h2&gt;Using All the Cores&lt;/h2&gt;
&lt;p&gt;Most importantly, something like &amp;quot;( p1 ; p2 ) | p3&amp;quot; directs the
output of two programs into a third for further processing. And
the two program sequence runs concurrently with that third
program. This will use at least two cores.&lt;/p&gt;
&lt;p&gt;What we'd also like is &amp;quot;( p1 &amp;amp; p2 ) | p3&amp;quot;, but this doesn't work
as well as we might hope. The output from p1 and p2 are not a
stream of atomic writes carefully interleaved. They are non-atomic
buffer copies that are impossible to disentangle. Sadly, this
can't easily be implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-features"&gt;
&lt;h2&gt;Other Features&lt;/h2&gt;
&lt;p&gt;The shell offers a few other composition operations, but as we start
using these, we find that the shell isn't a very effective
programming environment. While the shell pipeline notation is
outstandingly cool, other parts of the notation are weak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conditional&lt;/strong&gt;. The &lt;tt class="docutils literal"&gt;if&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;case&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;select&lt;/tt&gt; shell statements define
conditional processing and groupings for programs. Trying to evaluate
expressions is where this gets dicey and needlessly complex.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repetitive&lt;/strong&gt;. The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;until&lt;/tt&gt; shell statements define
repetitive processing for a program. Again, expression evaluation is
crummy. The for statement is usable without needless complication.&lt;/p&gt;
&lt;p&gt;Four of these PITL operators (sequence, parallel, pipeline, grouping)
give us a hint as to how we can proceed to design large-scale
applications that will use every core we own.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-hints"&gt;
&lt;h2&gt;Implementation Hints&lt;/h2&gt;
&lt;p&gt;You can -- trivially -- use all your cores simply by using the shell
appropriately. Use the shell's pipeline features &lt;strong&gt;and nothing
else&lt;/strong&gt;, and you'll use every core you own.&lt;/p&gt;
&lt;p&gt;For everything outside the pipelining features, use Python or
something more civilized.&lt;/p&gt;
&lt;p&gt;And, you have a nice hybrid solution:
&lt;a class="reference external" href="http://pypi.python.org/pypi/iterpipes"&gt;iterpipes&lt;/a&gt;. You can
construct pleasant, simple, &amp;quot;use-all-the-cores&amp;quot; pipelines directly in
Python.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Check out&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="computer-scientists-created-the-paralle"&gt;
&lt;h2&gt;Computer Scientists Created the Paralle...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-04-02 08:16:50.053000-04:00&lt;/p&gt;
&lt;p&gt;Check out
Computer Scientists Created the Parallel Programming Crisis
&lt;a class="reference external" href="http://rebelscience.blogspot.com/2010/02/computer-scientists-created-parallel.html"&gt;http://rebelscience.blogspot.com/2010/02/computer-scientists-created-parallel.html&lt;/a&gt;
... problem with the Turing Computing Model: timing is not an inherent
part of the model ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-thing-that-helps-me-run-my-everyday-tasks-in-p"&gt;
&lt;h2&gt;One thing that helps me run my everyday tasks in p...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-31 17:22:11.781000-04:00&lt;/p&gt;
&lt;p&gt;One thing that helps me run my everyday tasks in parallel using N cores
is the xargs -P N command. Diomidis Spinellis wrote an indroductionary
blog post on this subject &lt;a class="reference external" href="http://www.spinellis.gr/blog/20090304/"&gt;Parallelizing Jobs with
xargs&lt;/a&gt; a while ago. xargs -P
does a better job in balancing the workload than a pipeline composition
(|). It would be nice to mention xargs -P in your series of posts on
multicore programming.&lt;/p&gt;
&lt;p&gt;Sometimes parallel mapping of a list of data units is not trivial due to
the complex nature of the list itself. For example, in GNU make a list
of jobs is computed lazily in the runtime. That is why it has a
special-purpose -j option for running a list of jobs in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-a-windows-perspective-on-this-issue-refer-to"&gt;
&lt;h2&gt;For a Windows perspective on this issue, refer to ...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-04 11:30:11.837000-04:00&lt;/p&gt;
&lt;p&gt;For a Windows perspective on this issue, refer to &amp;quot;Windows Parallelism,
Fast File Searching, and Speculative Processing&amp;quot; By Johnson M. Hart
url:
&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1606242&amp;amp;ns=18872&amp;amp;WT.mc_id=2010-07-04_NL_InformITContent"&gt;http://www.informit.com/articles/article.aspx?p=1606242&amp;amp;ns=18872&amp;amp;WT.mc_id=2010-07-04_NL_InformITContent&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="Programming Languages"></category><category term="architecture"></category></entry><entry><title>Building Skill Books -- Google Group</title><link href="https://slott56.github.io/2010_03_25-building_skill_books_google_group.html" rel="alternate"></link><published>2010-03-25T08:00:00-04:00</published><updated>2010-03-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-25:/2010_03_25-building_skill_books_google_group.html</id><summary type="html">&lt;p&gt;The readers of the Building Skills Books have a number of needs:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A way to post errors and corrections. I get a &lt;em&gt;lot&lt;/em&gt; of these.
Thanks!&lt;/li&gt;
&lt;li&gt;A way to share comments and questions. I get a fair number of
these.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A Google Group seems to be the best approach. We …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The readers of the Building Skills Books have a number of needs:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A way to post errors and corrections. I get a &lt;em&gt;lot&lt;/em&gt; of these.
Thanks!&lt;/li&gt;
&lt;li&gt;A way to share comments and questions. I get a fair number of
these.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A Google Group seems to be the best approach. We have pages,
discussions, email notifications, a lot of features.&lt;/p&gt;
&lt;p&gt;As long as we're opening the group, I figured I should actually
make the dozens of corrections that have been sent in. Also, I'm
looking closely at using &lt;a class="reference external" href="http://www.lulu.com/"&gt;Lulu&lt;/a&gt; to handle
hard-copy production for the folks that have asked for that.&lt;/p&gt;
&lt;p&gt;Dive in: &lt;a class="reference external" href="http://groups.google.com/group/building-skills-books?hl=en"&gt;Building Skills
Books&lt;/a&gt;.&lt;/p&gt;
</content><category term="Technologies"></category><category term="building skills books"></category></entry><entry><title>Architecture Change: Breaking Conway's Law</title><link href="https://slott56.github.io/2010_03_23-architecture_change_breaking_conways_law.html" rel="alternate"></link><published>2010-03-23T10:16:00-04:00</published><updated>2010-03-23T10:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-23:/2010_03_23-architecture_change_breaking_conways_law.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2010_03_22-architecture_change_recognizing_conways_law.html"&gt;Architecture Change: Recognizing Conway's
Law&lt;/a&gt;
we looked at the profound influence Conway's Law has on architecture.&lt;/p&gt;
&lt;p&gt;Recently I've looked at two gutsy declarations that an architecture
was broken. One recognized that a three-tiered architecture was too
complex for their needs. The other recognized that the Ontology tools
weren't performing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2010_03_22-architecture_change_recognizing_conways_law.html"&gt;Architecture Change: Recognizing Conway's
Law&lt;/a&gt;
we looked at the profound influence Conway's Law has on architecture.&lt;/p&gt;
&lt;p&gt;Recently I've looked at two gutsy declarations that an architecture
was broken. One recognized that a three-tiered architecture was too
complex for their needs. The other recognized that the Ontology tools
weren't performing well, and perhaps weren't helping.&lt;/p&gt;
&lt;p&gt;My point is that these architectural mistakes are the result of
Conway's Law. They aren't inherently flawed.&lt;/p&gt;
&lt;div class="section" id="the-root-cause"&gt;
&lt;h2&gt;The Root Cause&lt;/h2&gt;
&lt;p&gt;What's flawed is &lt;strong&gt;not&lt;/strong&gt; the architecture. What's flawed is the
organization that built the architecture.&lt;/p&gt;
&lt;p&gt;A three-tiered architecture is workable. In some cases, it's
necessary. In other cases it could be overkill. But it isn't the
cause of the problems.&lt;/p&gt;
&lt;p&gt;An Ontology is often a good thing. However, using the ontology to
represent what is -- essentially -- a &lt;strong&gt;Star Schema&lt;/strong&gt; fact table is
poor use of the technology.&lt;/p&gt;
&lt;p&gt;Declaring the architecture broken is not a technical statement. It'
an organizational statement. It says that the organization, the
teams, the areas of responsibility are broken.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Rule 1: A Broken Architecture Is A Broken Organization&lt;/strong&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="complexity"&gt;
&lt;h2&gt;Complexity&lt;/h2&gt;
&lt;p&gt;One can try to make a distinction between &lt;em&gt;Essential Complexity&lt;/em&gt; and
&lt;em&gt;Accidental Complexity&lt;/em&gt;. One can claim that essential complexity is
part of the solution and accidental complexity is just other staff
that accretes. This doesn't make any sense, since software
development is not &amp;quot;accidental&amp;quot;. Software doesn't &amp;quot;happen&amp;quot;. It's hard
to call something &amp;quot;accidental complexity&amp;quot; without saying that
software involves random accidents. Blaming &amp;quot;accidental&amp;quot; complexity
is a dodge, an attempt to obscure the root cause.&lt;/p&gt;
&lt;p&gt;One might call it incidental or tangential complexity. But that still
hides the fundamental problem.&lt;/p&gt;
&lt;p&gt;To be more honest, one must separate Problem Complexity from Solution
Complexity. The Problem Domain may be inherently complex. In which
case, simplification is hard and 2 tiers, 3 tiers or N tiers don't
matter. The problem itself is hard, no matter what architecture is
chosen.&lt;/p&gt;
&lt;p&gt;An ontology, for example, is very helpful when the problem itself is
inherently hard. The formalization of relationships in an ontology
can help beat a path through a tangled problem domain.&lt;/p&gt;
&lt;p&gt;In most cases of a broken architecture, the solution is has grown out
of scale with the problem's inherent complexity. If we're doing
actuarial risk analysis, we don't really need an ontological model of
&amp;quot;Risk&amp;quot;: we need facts that help us measure the risk factors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule 2: A Broken Architecture Means the Solution Doesn't Fit the Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Corollary: The Organization Doesn't Fit the Problem&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="kinds-of-broken"&gt;
&lt;h2&gt;Kinds of Broken&lt;/h2&gt;
&lt;p&gt;Why would we declare an architecture broken? Generally, we've got a
grotesque failure due to the very structure of the solution. These
can be decomposed into five areas.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Failure to satisfy the need; i.e., the software doesn't have the
required functions or features.&lt;/li&gt;
&lt;li&gt;Failure to use resources effectively; i.e., the software is slow,
uses too much disk or too much network traffic.&lt;/li&gt;
&lt;li&gt;Failure to be maintainable; i.e., bugs cannot be fixed.&lt;/li&gt;
&lt;li&gt;Failure to be adaptable; i.e., new features cannot be added.&lt;/li&gt;
&lt;li&gt;Failure to fit other organizational needs (cost, licensing, etc.);
i.e., it's too expensive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The two broken architectures I've heard about recently have
different problems. One is unacceptably slow (as well as hard to
adapt). The other is described by some as impossible to maintain
and adapt.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Rule 3: All Architectural Problems Are Symptoms of Organizational Problems&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;In short, a broken architecture is not a simple technical problem
and it doesn't have a simple technical solution. It's an
organizational problem, and it has a multi-part solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-progress"&gt;
&lt;h2&gt;Making Progress&lt;/h2&gt;
&lt;p&gt;It's important to acknowledge that Conway's Law, like Mutual
Attraction and Thermodynamics is a feature of the universe. It
cannot be &amp;quot;broken&amp;quot; or even &amp;quot;subverted&amp;quot;. You cannot win, you cannot
break even, you cannot quit the game.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Axiom: Conway's Law Cannot Be Broken.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Given that Conway's Law is like Thermodynamics, you have to work
with it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Conclusion: Architecture Must Drive Organization; Problem Must Drive Architecture&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;The only way to make progress is to restart the project at a
fundamental level. You have to -- effectively -- fire everyone and
rehire then to create brand-new team. The broken architecture came
from a broken organization. To fix the architecture, you need to
fix the organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-1-unmaintainable-stored-procedures"&gt;
&lt;h2&gt;Example #1, Unmaintainable Stored Procedures&lt;/h2&gt;
&lt;p&gt;Consider an application with stored procedures (SP) so badly
broken as to be unmaintainable. Let's say it's many hundreds of
lines of code. A Cyclomatic Complexity so high as to be laughable.
Clearly, the folks responsible for building this need to be
reassigned and new folks need to be brought in. If the new folks
are simply assigned to the same old separate SP/DBA group, then a
new unmaintainable mess will eventually replace the existing
unmaintainable mess.&lt;/p&gt;
&lt;p&gt;Conway's Law applies: If the SP developers are separate, they will
evolve in their own direction. If you want to have a &amp;quot;technical&amp;quot;
reason for SP's, then you have to prove that they're more
effective than a non-SP implementation. That means spike solutions
to compare SP's and your other application programming languages
point-by-point.&lt;/p&gt;
&lt;p&gt;To prevent stored procedures from getting out of control there are
two choices.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use stored procedures. Put that logic in with the rest of
the application, where it belongs. Same code base, not a
separate language buried in the database. One team, one
language.&lt;/li&gt;
&lt;li&gt;Don't make stored procedure writing a separate &amp;quot;team&amp;quot;. The
stored procedure writing must be part of application writing.
One team, multiple languages.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that choice #2 leaves it to the team to use stored
procedures if they have a provable improvement on performance.
Things are not handed over to the DBA's because SP's must do
all database interface or SP's must maintain &amp;quot;low-level&amp;quot; rules
or other blurry lines. Things are not handed to the DBA's --
the team solves the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-2-too-many-tiers"&gt;
&lt;h2&gt;Example #2, Too Many Tiers&lt;/h2&gt;
&lt;p&gt;Consider an architecture with too many tiers. The inter-tier
communication is blamed as creating &amp;quot;accidental complexity&amp;quot;.
This is a dodge. The coordination between teams is what creates
complexity.&lt;/p&gt;
&lt;p&gt;To prevent inter-tier communication from being a problem, one
doesn't need to remove tiers. One needs to remove
organizational structure. There's really only one choice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fail: Team Follows Technology&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Win: Team Follows Features&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For a given feature set, everyone involved has to become part
of one, unified team working one one sprint attending one daily
stand-up meeting.&lt;/p&gt;
&lt;p&gt;&amp;quot;But that's unwieldy,&amp;quot; you say. &amp;quot;DBA's have to be kept
separate.&amp;quot;&lt;/p&gt;
&lt;p&gt;That's Conways' Law in action.&lt;/p&gt;
&lt;p&gt;To work &lt;em&gt;with&lt;/em&gt; Conway's Law, you must create a team that owns
the feature set -- all tiers -- all technologies -- and can
make all the implementation choices required to bring that
feature set to the users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-3-overuse-of-ontology"&gt;
&lt;h2&gt;Example #3, Overuse of Ontology&lt;/h2&gt;
&lt;p&gt;Consider an inappropriate use of an Ontology where a Database
would have been a better choice.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Remove the old team. Assign them to hard problems where the
ontology pays dividends, get them away from easy problems
where the ontology is a solution looking for a problem.&lt;/li&gt;
&lt;li&gt;Create a new team around the new solution. Each feature has
a team that has a complete skill set -- front-end, bulk
processing, persistence, web server, database, network --
everything.&lt;/li&gt;
&lt;li&gt;The new team stands alone and builds the solution.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="excuses-excuses"&gt;
&lt;h2&gt;Excuses Excuses&lt;/h2&gt;
&lt;p&gt;The number one cultural impediment is the &amp;quot;Skill Focus&amp;quot;
excuse. These are just Conway's Law in action.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;We can't have application programmers doing database
design. They might 'mess things up'.&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We don't want our DBA's assigned to application
development teams. They have operational responsibilities
that trump new development.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The number two cultural impediment is the authorization
excuse. These are also Conway's Law, wrapped in the mantel
of &amp;quot;security&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;We can't allow application developers sudo privileges to
configure Apache (or MySQL, or Oracle, or -- frankly --
anything.)&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We can't assign a DBA or SysAdmin or anyone to support
new development...&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Stop organizing teams by skills.&lt;/p&gt;
&lt;p&gt;Start organizing teams by deliverable.&lt;/p&gt;
&lt;p&gt;Stop carving out random technology features without proof
that the technology solves a problem. Stored Procedures,
Middle Tiers, Ontologies are just &lt;em&gt;potential&lt;/em&gt; solutions.
Don't commit to them until they're proven.&lt;/p&gt;
&lt;p&gt;Start creating spike solutions to measure the value of a
technology. If a spike solution doesn't work, stop
development, change the plans, change the schedule and
start again based on the lessons learned.&lt;/p&gt;
&lt;p&gt;Stop forcing a deadline-driven death march.&lt;/p&gt;
&lt;p&gt;Start learning technology lessons and making project
changes based on what was learned.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="a-lot-of-these-points-definitely-resonate-but-the"&gt;
&lt;h2&gt;A lot of these points definitely resonate, but the...&lt;/h2&gt;
&lt;p&gt;Shekhar Vemuri&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-05-16 22:37:21.044000-04:00&lt;/p&gt;
&lt;p&gt;A lot of these points definitely resonate, but there is something to be
said about having teams around skills, where people with similar skill
sets are able to work together to improve upon what they do and bring
around better ways of solving problems. this gets diluted when the focus
is just around deliverables. also on a larger scale each of these
individual teams then start making choices which makes the landscape
more and more diverse than what it should be.&lt;/p&gt;
&lt;p&gt;I am not refuting the point around having cross functional scrum teams
together who own the solution end to end, i want to add to it by saying,
that there should also be virtual teams that allow people like DBAs or
QA personnel, release folks, sys admins go back to to hone their skills
to form a strategy and vision to solve the problems they run into in
each scrum team and avoid reinventing the wheel evertyime a team runs
into it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="architecture"></category><category term="conway's law"></category></entry><entry><title>Architecture Change: Recognizing Conway's Law</title><link href="https://slott56.github.io/2010_03_22-architecture_change_recognizing_conways_law.html" rel="alternate"></link><published>2010-03-22T08:00:00-04:00</published><updated>2010-03-22T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-22:/2010_03_22-architecture_change_recognizing_conways_law.html</id><summary type="html">&lt;p&gt;I've got lots of examples of places where Conway's Law has turned a
good idea into a poor implementation. A classic is a data warehouse
where there were three project managers, so they broke things up
three ways, leading to a crazy mess of dumb duplication.&lt;/p&gt;
&lt;p&gt;Countering that, I've recently …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've got lots of examples of places where Conway's Law has turned a
good idea into a poor implementation. A classic is a data warehouse
where there were three project managers, so they broke things up
three ways, leading to a crazy mess of dumb duplication.&lt;/p&gt;
&lt;p&gt;Countering that, I've recently look at two gutsy declarations. It
takes real courage to declare an architecture wrong. Our basic human
nature prevents us from acknowledging that an existing architecture
is a liability, not an asset.&lt;/p&gt;
&lt;p&gt;Pitching a fix is easy. Locating the root cause of the original
problem is hard. Trying to fix a broken architecture means that you
will run afoul of Conway's Law. In addition to having the guts to
acknowledge that something is broken, figuring a way to work with
Conway's Law is essential to success.&lt;/p&gt;
&lt;div class="section" id="broken-3-tier-architecture"&gt;
&lt;h2&gt;Broken 3-Tier Architecture&lt;/h2&gt;
&lt;p&gt;The biggest reason for broken architectures is dumb over-engineering.
And most of the dumbosity has Conway's Law as its root cause. Yes,
organizational structures will impose a solution structure that
doesn't match the problem. There are lots of examples.&lt;/p&gt;
&lt;p&gt;If you read too much and build too little, you find a ton of articles
on .Net 3-Tier Architectures. Google and you'll get a mountain of
hits, each with a distinctive spin on 3-Tier. For reference, start
with this: &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/ms973279.aspx"&gt;Building an N-Tier Application in
.NET&lt;/a&gt;. It's
the party line on splitting things into tiny buckets consistent with
the MS product offerings.&lt;/p&gt;
&lt;p&gt;A &amp;quot;3-Tier&amp;quot; presentation is very seductive because it plays by
Conway's Law.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Manager A&lt;/strong&gt;. Lobbies for Web-based solution; takes over
&amp;quot;presentation&amp;quot; development and builds a team to create flashy
front-end stuff with cool tools and technologies: HTML, CSS,
JavaScript, Silverlight, etc. The front-end developers are as much
graphic designer as programmer; they have distinct skills.
Conway's Law says that since they're separate from &amp;quot;other&amp;quot;
programmers, presentation must be a separate tier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager B&lt;/strong&gt;. Manages the DBA's. DBA's must be kept separate
because a database is &amp;quot;infrastructure&amp;quot;, like a network and a web
server. Somehow database development is usually lumped in with
database administration and development competes with operation
for resources. Conway's Law says that DBA's are separate so there
must be a separate data tier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager C&lt;/strong&gt;. All of the interfaces and batch loads have to be
done by someone. There's no sizzle to this; it isn't fun for
DBA's. It's frankly boring stuff. Another manager is assigned to
create &amp;quot;back-end&amp;quot; interfaces, and other stuff. Conway's Law says
that we'll introduce a &amp;quot;middle tier&amp;quot; to give these people
something to contribute to the web application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point, some people call &amp;quot;shenanigans&amp;quot;. They say that this
Conway's Law analysis is crazy talk: I'm just fitting the evidence
to my theory. Here's my question? What's the alternative to the
3-tier architecture? Are they claiming that the three tiers are
&lt;em&gt;logically&lt;/em&gt; necessary?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="necessary-decomposition"&gt;
&lt;h2&gt;Necessary Decomposition&lt;/h2&gt;
&lt;p&gt;If three tiers were logically necessary, we wouldn't discuss
N-tier architectures.&lt;/p&gt;
&lt;p&gt;Clearly, folks have decomposed things into more than three tiers.
So, three tiers isn't &lt;em&gt;necessary&lt;/em&gt;. It's just convenient. QED:
There's no necessity to three tiers; it's just a handy team size.&lt;/p&gt;
&lt;p&gt;Some scalability works out well with a three-tier separation. In
particular, serving a lot of static content (CSS files, PNG's,
static HTML) can be delegated to a front-end tier. Serving the
dynamic content is better handled by a separate process (perhaps
even a separate processor). Database processing -- because it's
I/O bound, is often well-handled by a separate process.&lt;/p&gt;
&lt;p&gt;However, if the &amp;quot;middle-tier&amp;quot; has a lot of work or relies on slow
external web services, it might decompose into sub-tiers. No more
three-tier solution. Similarly, one can make a case for splitting
static content services into two sub-tiers: reverse proxy and
proper content server. Again, no more three-tier solution.&lt;/p&gt;
&lt;p&gt;Three tiers, five tiers or &lt;em&gt;N&lt;/em&gt; tiers: the architecture could have
been driven by necessity or it could be driven by Conway's Law.
Clearly, Conway's Law has a profound influence. Indeed, most of
the time, Conway's Law trumps all other considerations.&lt;/p&gt;
&lt;p&gt;Otherwise we wouldn't have broken architectures. If the decisions
were technical, we'd have technical spikes and we'd discard broken
ideas. Instead we pursue broken ideas in that weird deadline
driven project death-march.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apostasy"&gt;
&lt;h2&gt;Apostasy&lt;/h2&gt;
&lt;p&gt;One consequence of Conway's Law is Stored Procedures. That's the
tier assigned to the DBA's. The idea that stored procedures might
be a bad idea strikes at the very heart of all DBA's (and their
managers) and is therefore unthinkable. Try suggesting that stored
procedures be replaced by middle-tier application logic. Everyone
says that replacing SP's with application code is heresy.&lt;/p&gt;
&lt;p&gt;Less than two years ago I sat in a meeting where I was told, very
plainly, that the &lt;em&gt;only&lt;/em&gt; provably scalable solution was a
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/CICS"&gt;CICS&lt;/a&gt; transaction server
and a mainframe DB2 database. The entire room was told that web
architectures were a bad idea. Only CICS could be made to work.
This is just as dumb as claiming that stored procedures are
essential.&lt;/p&gt;
&lt;p&gt;This kind of thing leads to a Conway's Law Hybrid solution (CLH™)
where the web front-end used SOAP web services to talk to a CICS
back-end that merely invoked DB2 stored procedures. No other
architecture was discussable. The architecture documentation had
to be rewritten to put the simple web site into an appendix as an
&amp;quot;alternative&amp;quot;. The primary pitch was a hell-on-earth hybrid.&lt;/p&gt;
&lt;p&gt;Since there was no DBA bandwidth to write all these stored
procedures, the project could only be cancelled. Business rules in
Java were unthinkable, heretical. As a former DBA, my suggestion
to give up on stored procedures makes me apostate. Stored
procedures can be driven by necessity or Conway's Law.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conway-s-law"&gt;
&lt;h2&gt;Conway's Law&lt;/h2&gt;
&lt;p&gt;From &lt;a class="reference external" href="http://www.code-muse.com/blog/?p=7"&gt;http://www.code-muse.com/blog/?p=7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This concept is known as Conway’s Law, named after Mel Conway, who
published a paper called “How Do Committees Invent?”. Fred Brooks
cited Conway’s paper in his classic “The Mythical Man Month”, and
invented the name “Conway’s Law”. Here’s the definition from
Conway’s own website (which also has the original paper in full):&lt;/p&gt;
&lt;blockquote&gt;
Any organization that designs a system (defined more broadly here
than just information systems) will inevitably produce a design
whose structure is a copy of the organization’s communication
structure.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Conway%27s_Law"&gt;http://en.wikipedia.org/wiki/Conway%27s_Law&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-broken-architectures"&gt;
&lt;h2&gt;More Broken Architectures&lt;/h2&gt;
&lt;p&gt;Another example.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Manager A&lt;/strong&gt;. FLEX front-end development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager B&lt;/strong&gt;. Ontology development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wait, what? Ontology? No database?&lt;/p&gt;
&lt;p&gt;Not at first. Clearly, a good ontology engine will handle the
information processing needs. It will be great. The FLEX front-end
can make SPARQL queries, right?&lt;/p&gt;
&lt;p&gt;Actually, it doesn't work out well. SPARQL is slow. Hardly
appropriate for a rich user interface.&lt;/p&gt;
&lt;p&gt;So here's another pass at this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Manager A&lt;/strong&gt;. FLEX front-end development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manager B&lt;/strong&gt;. Ontology development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No One In Particular&lt;/strong&gt;. Backend Web Services Development between
FLEX and the Ontology.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;Aha!&amp;quot; you say. &amp;quot;An example that proves Conway's Law is wrong.&amp;quot;&lt;/p&gt;
&lt;p&gt;Actually, this is evidence that Conway's Law can't be &lt;em&gt;patched&lt;/em&gt;. The
initial ontology-based application is entirely Conway's Law in
action. Trying to create the necessary architectural features without
creating a proper organization around the solution ran aground.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="calling-it-quits"&gt;
&lt;h2&gt;Calling It Quits&lt;/h2&gt;
&lt;p&gt;A really hard thing to do is call it quits when something isn't
working. A fundamental law of human behavior says that we hold onto
losers. Partly, this is the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Endowment_effect"&gt;Endowment
Effect&lt;/a&gt; -- once the
architecture is in place, it &lt;em&gt;can&lt;/em&gt; be salvaged. Partly, this is &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Loss_aversion"&gt;Loss
Aversion&lt;/a&gt; -- declaring
the old architecture broken realizes that the investment created a
liability, not an asset.&lt;/p&gt;
&lt;p&gt;How do you restart the project with a new architecture?&lt;/p&gt;
&lt;p&gt;How do you avoid Conway's Law in the next generation of a web
application?&lt;/p&gt;
&lt;p&gt;Stay Tuned for part 2 -- &lt;strong&gt;Architecture Change: Breaking Conway's Law&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="architecture"></category><category term="conway's law"></category></entry><entry><title>Obsolescence</title><link href="https://slott56.github.io/2010_03_20-obsolescence.html" rel="alternate"></link><published>2010-03-20T11:03:00-04:00</published><updated>2010-03-20T11:03:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-20:/2010_03_20-obsolescence.html</id><summary type="html">&lt;p&gt;My old Citizen Pro-Master watch died. It needs batteries. It's a dive
watch, so it also needs to be opened by professionals, have the gaskets
replaced, and get pressure tested to be sure it works.&lt;/p&gt;
&lt;p&gt;I tried sending it to the Citizen Watch Service facility in
Dallas. Their &lt;a class="reference external" href="http://www.citizenwatchserv.com/?id=1"&gt;web site …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;My old Citizen Pro-Master watch died. It needs batteries. It's a dive
watch, so it also needs to be opened by professionals, have the gaskets
replaced, and get pressure tested to be sure it works.&lt;/p&gt;
&lt;p&gt;I tried sending it to the Citizen Watch Service facility in
Dallas. Their &lt;a class="reference external" href="http://www.citizenwatchserv.com/?id=1"&gt;web site&lt;/a&gt;
has the advantage of being search-engine friendly, a real plus. It
has some significant problems, also.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Their address is an image, not text. How do I copy and paste to
create a shipping label?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;They spelling mistakes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Overall, it has an amateurish look, leaving one uncomfortable
mailing and expensive watch to them.&lt;/p&gt;
&lt;p&gt;They do respond promptly, however, and told me not to mail them
the watch. They did not have parts. They suggested the
&amp;quot;Torrance&amp;quot; facility.&lt;/p&gt;
&lt;p&gt;Okay, try and find the &amp;quot;Torrance&amp;quot; facility on line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Not so easy, is it? You can find a lot of peripheral
information about the Torrance location and it's location. But
not any real contact information directly from a
Citizen-branded web site.&lt;/p&gt;
&lt;p&gt;The Citizen site is &lt;em&gt;slick&lt;/em&gt;, but appears to be totally
search-engine unfriendly. No spelling mistakes, but amazingly
hard to find the &amp;quot;Torrance facility&amp;quot; via the Citizen site.&lt;/p&gt;
&lt;p&gt;Further, without actually seeing the watch, email #3 said &amp;quot;We
hate for you to send the watch only to find out that we too
cannot fix it.&amp;quot;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It doesn't work. Why would you hate to have me send it out?
If you can't fix it, I haven't lost anything by trying, have
I? I don't understand that comment.&lt;/li&gt;
&lt;li&gt;Dallas never looked at it, so the &amp;quot;we, too&amp;quot; part doesn't
make sense, either.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I tried one last time to explain that I just wanted
batteries.&lt;/p&gt;
&lt;p&gt;After four emails simply trying to figure out if they would
look at it, I guess I have to give up trying to get it
fixed.&lt;/p&gt;
&lt;p&gt;Sad that a solidly built watch isn't even good for 20 years
of service. Sad, too, that the web sites are collectively so
bad: either they're slick and search-engine proof or
amateurish.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-22 06:20:43.785000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by a blog administrator.&lt;/p&gt;
&lt;div class="section" id="if-you-can-t-fix-it-i-haven-t-lost-an"&gt;
&lt;h2&gt;If you can't fix it, I haven't lost an...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-21 07:05:18.612000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt;If you can't fix it, I haven't lost anything
&amp;gt;by trying, have I?&lt;/p&gt;
&lt;p&gt;Perhaps the time and money associated with shipping and handling.
Perhaps they are trying to give you the brush off in a nice way. Perhaps
they aren't interested in fixing the watch because they can't make
enough money.&lt;/p&gt;
&lt;p&gt;Perhaps the internet is not the place to look ?
Perhaps talking to fellow divers or a dive shop might help ?
Perhaps the focus of the article was not on the watch but on poorly
built web pages ?&lt;/p&gt;
&lt;p&gt;Perhaps I should shut up and have coffee and breakfast ?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="HTML"></category><category term="search optimization"></category></entry><entry><title>Security Vulnerabilities</title><link href="https://slott56.github.io/2010_03_19-security_vulnerabilities.html" rel="alternate"></link><published>2010-03-19T08:00:00-04:00</published><updated>2010-03-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-19:/2010_03_19-security_vulnerabilities.html</id><summary type="html">&lt;p&gt;I lean on the OWASP list heavily.
&lt;a class="reference external" href="http://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;http://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This analysis is handy also:
&lt;a class="reference external" href="http://www.cenzic.com/downloads/Cenzic_AppSecTrends_Q1-Q2-2009.pdf"&gt;http://www.cenzic.com/downloads/Cenzic_AppSecTrends_Q1-Q2-2009.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The point is that most of the vulnerabilities are pretty clear.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Injection flaws: SQL, OS, and LDAP injection. Pretty clear that
building SQL …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I lean on the OWASP list heavily.
&lt;a class="reference external" href="http://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;http://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This analysis is handy also:
&lt;a class="reference external" href="http://www.cenzic.com/downloads/Cenzic_AppSecTrends_Q1-Q2-2009.pdf"&gt;http://www.cenzic.com/downloads/Cenzic_AppSecTrends_Q1-Q2-2009.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The point is that most of the vulnerabilities are pretty clear.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Injection flaws: SQL, OS, and LDAP injection. Pretty clear that
building SQL, shell scripts or LDAP queries dynamically is simply
wrong. Don't do it. Use SQL Binding, and proper
escaping/quoting/filtering.&lt;/li&gt;
&lt;li&gt;Cross-site scripting. Again, proper escaping/quoting/filtering is
essential.&lt;/li&gt;
&lt;li&gt;Authentication and session management. This is generally done well
by most frameworks.&lt;/li&gt;
&lt;li&gt;Insecure object references. Files, directories, etc. A good
framework prevents this by making all URL's into indirect
references to underlying objects.&lt;/li&gt;
&lt;li&gt;Cross-site request forgeries, like session management, are
generally handled by frameworks.&lt;/li&gt;
&lt;li&gt;Security misconfiguration. This is where actual skills shown up.
This can be hard, and takes work.&lt;/li&gt;
&lt;li&gt;URL-level validation. I thought this went without saying: all
URL's are available to users even if the link is not on a page
anywhere; anyone can bookmark or forge a request. All requests
must be validated even if &amp;quot;there's no way the user could see that
link and click on it.&amp;quot;&lt;/li&gt;
&lt;li&gt;Unvalidated redirects and forwards. This strikes me as weird
because we use redirects in one (and only one) situation:
redirect-after-post. However, if you synthesize a redirect from
user input -- without filtering, validating or quoting properly --
you'd be open to problems.&lt;/li&gt;
&lt;li&gt;Insecure crypto. Like security misconfiguration, this is very hard
work on the part of architects and administrators. Key escrow
systems are part of this, as is encrypted database fields and
(possibly) encrypted physical storage. Sigh.&lt;/li&gt;
&lt;li&gt;Transport layer protection. SSL is part of any security framework.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some of these are solved by using commonly-available open-source
frameworks.&lt;/p&gt;
&lt;p&gt;Too many people reject these open-source solutions for dumb or
wrong reasons.&lt;/p&gt;
&lt;p&gt;One of the biggest mistakes is to say that a framework is &amp;quot;too
heavyweight&amp;quot; for a small web application.&lt;/p&gt;
&lt;p&gt;The rules are simple: &lt;strong&gt;either reinvent the wheel properly, or use
an established open-source framework&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Open Source? Yes, one that can be vetted for security
vulnerabilities.&lt;/p&gt;
</content><category term="Technologies"></category><category term="security"></category></entry><entry><title>COBOL File Processing in Python (really)</title><link href="https://slott56.github.io/2010_03_17-cobol_file_processing_in_python_really.html" rel="alternate"></link><published>2010-03-17T08:00:00-04:00</published><updated>2010-03-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-17:/2010_03_17-cobol_file_processing_in_python_really.html</id><summary type="html">&lt;p&gt;Years ago (6? 7?) I did some data profiling in Python.&lt;/p&gt;
&lt;p&gt;This required reading COBOL files with Python code.&lt;/p&gt;
&lt;p&gt;Superficially, this is not really very hard.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python slice syntax will pick fields on of the record. For
example: data[12:14].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#.  Python codecs will convert from EBCDIC to Unicode without …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Years ago (6? 7?) I did some data profiling in Python.&lt;/p&gt;
&lt;p&gt;This required reading COBOL files with Python code.&lt;/p&gt;
&lt;p&gt;Superficially, this is not really very hard.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python slice syntax will pick fields on of the record. For
example: data[12:14].&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#.  Python codecs will convert from EBCDIC to Unicode without pain.
c   odecs.get('cp037').decode( someField ).&lt;/p&gt;
&lt;p&gt;With some more finesse, one can handle COMP-3 fields. Right?&lt;/p&gt;
&lt;p&gt;Maybe not.&lt;/p&gt;
&lt;div class="section" id="problems"&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;There are three serious problems.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Computing the field offsets (and in some cases sizes) is a
large, error-prone pain.&lt;/li&gt;
&lt;li&gt;The string slice notation makes the COBOL record structure
completely opaque.&lt;/li&gt;
&lt;li&gt;COMP-3 conversion is both ubiquitous and tricky.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, what's the solution?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cobol-dde-parsing"&gt;
&lt;h2&gt;COBOL DDE Parsing&lt;/h2&gt;
&lt;p&gt;What I did was write a simple parser that read the COBOL
&amp;quot;copybook&amp;quot; -- the COBOL source that defined the file layout.
Given this Data Definition Entry (DDE) it's easy to work out
offset, size and type conversion requirements.&lt;/p&gt;
&lt;p&gt;It was way cool, so I delivered the results -- but not the code
-- to the customer. I posted parts of the code on my personal
site.&lt;/p&gt;
&lt;p&gt;Over the years, a few people have found it and asked pointed
questions.&lt;/p&gt;
&lt;p&gt;Recently, however, I got a patch kit because of a serious bug.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-tests"&gt;
&lt;h2&gt;Unit Tests&lt;/h2&gt;
&lt;p&gt;The code was written in Python 2.2 style -- very primitive. I
cleaned it up, added unit tests, and -- most importantly --
corrected a few serious bugs.&lt;/p&gt;
&lt;p&gt;And, I posted the whole thing to SourceForge, so others can --
in principle -- fix the remaining bugs. The project is here:
&lt;a class="reference external" href="https://sourceforge.net/projects/cobol-dde/"&gt;https://sourceforge.net/projects/cobol-dde/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="COBOL"></category><category term="#python"></category></entry><entry><title>How do I use all my cores?</title><link href="https://slott56.github.io/2010_03_15-how_do_i_use_all_my_cores.html" rel="alternate"></link><published>2010-03-15T08:00:00-04:00</published><updated>2010-03-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-15:/2010_03_15-how_do_i_use_all_my_cores.html</id><summary type="html">&lt;p&gt;News Flash: Multi-core programming is &amp;quot;hard&amp;quot;. EVERYBODY PANIC.&lt;/p&gt;
&lt;p&gt;ZOMFG: We either need new tools, new languages or both! Right Now!&lt;/p&gt;
&lt;p&gt;Here's one example. You can find others. &amp;quot;&lt;a class="reference external" href="http://chipdesignmag.com/sld/blog/2009/03/27/taming-the-multicore-beast/"&gt;Taming the Multicore
Beast&lt;/a&gt;&amp;quot;:&lt;/p&gt;
&lt;blockquote&gt;
The next piece is application software, and most of the code that
has been written in the past has …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;News Flash: Multi-core programming is &amp;quot;hard&amp;quot;. EVERYBODY PANIC.&lt;/p&gt;
&lt;p&gt;ZOMFG: We either need new tools, new languages or both! Right Now!&lt;/p&gt;
&lt;p&gt;Here's one example. You can find others. &amp;quot;&lt;a class="reference external" href="http://chipdesignmag.com/sld/blog/2009/03/27/taming-the-multicore-beast/"&gt;Taming the Multicore
Beast&lt;/a&gt;&amp;quot;:&lt;/p&gt;
&lt;blockquote&gt;
The next piece is application software, and most of the code that
has been written in the past has been written using a serial
approach. There is no easy way to compile that onto multiple
cores, although there are tools to help.&lt;/blockquote&gt;
&lt;p&gt;What?&lt;/p&gt;
&lt;p&gt;That's hooey. Application software is already working in a multicore
environment; it has been waiting for multi-core hardware. And it
requires little or no modification.&lt;/p&gt;
&lt;p&gt;Any Linux-based OS (and even Windows) will take a simple shell
pipeline and assure that the processing elements are spread around
among the various cores.&lt;/p&gt;
&lt;div class="section" id="pipelines-and-concurrency"&gt;
&lt;h2&gt;Pipelines and Concurrency&lt;/h2&gt;
&lt;p&gt;A shell pipeline -- viewed as Programming In The Large -- is not
&amp;quot;written using a serial approach&amp;quot;. Each stage of a shell pipeline
runs concurrently, and folks have been leveraging that since Unix's
inception in the late 60's.&lt;/p&gt;
&lt;p&gt;When I do python p1.py | python p2.py, both processes run
concurrently. Most OS's will farm them out so that each process is on
its own core. That wasn't hard, was it?&lt;/p&gt;
&lt;p&gt;I got this email recently:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Then today, I saw the book&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.amazon.com/Software-Pipelines-SOA-Multi-Core-Processing/dp/0137137974"&gt;Software Pipelines and SOA: Releasing the Power of Multi-Core
Processing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;By Cory Isaacson&lt;/p&gt;
&lt;p&gt;At that point, I figured that there are a lot of yahoos out
there that are barking up the wrong tree.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I agree in general. I don't agree with all of Isaacson's approach.
A big ESB-based SOA architecture may be too much machinery for
something that may turn out to be relatively simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easy-problems"&gt;
&lt;h2&gt;Easy Problems&lt;/h2&gt;
&lt;p&gt;Many problems are easily transformed into map-reduce problems. A
&amp;quot;head&amp;quot; will push data down a shell pipeline. Each step on the
pipeline is a &amp;quot;map&amp;quot; step that does one incremental transformation
on the data. A &amp;quot;reduce&amp;quot; step can combine data for further maps.&lt;/p&gt;
&lt;p&gt;This can be expressed simply as: head.py | map1.py | map2.py |
reduce1.py | map3.py. You'll use both cores heavily.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="optimization"&gt;
&lt;h2&gt;Optimization&lt;/h2&gt;
&lt;p&gt;Some folks like to really focus on &amp;quot;balancing&amp;quot; the workload so
that each core has precisely the same amount of work.&lt;/p&gt;
&lt;p&gt;You can do that, but it's not really going to help much. The OS
mostly does this by ordinary demand-based scheduling. Further
fine-tuning is a nice idea, but hardly worth the effort until all
other optimization cards have been played. Even then, you'd simply
be moving the functionality around to refactor map1.py | map2.py
to be a single process, map12.py.&lt;/p&gt;
&lt;p&gt;Easy and well-understood.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="harder-problems"&gt;
&lt;h2&gt;Harder Problems&lt;/h2&gt;
&lt;p&gt;The Hard Problems involve &amp;quot;fan-out&amp;quot; and &amp;quot;fan-in&amp;quot;. Sometimes we
think we need a thread pool and a queue of processing agents.
Sometimes this isn't actually necessary because a simple
map-reduce pipeline may be all we need.&lt;/p&gt;
&lt;p&gt;But just sometimes, there's a fan-out where we need multiple
concurrent map processors to handle some long-running, complex
transformation. In this case, we might want an ESB and other
machinery to handle the fan-out/fan-in problem. Or, we might just
need a JMS message queue that has a one writer and multiple
readers (1WmR).&lt;/p&gt;
&lt;p&gt;A pipeline has one writer and one reader (1W1R). The reason why
fan-out is hard is that Linux doesn't offer a trivial (1WmR)
abstraction.&lt;/p&gt;
&lt;p&gt;Even fan-in is easier: we have a many writer one reader (mW1R)
abstraction available in the
&lt;a class="reference external" href="http://linux.die.net/man/2/select"&gt;select&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;The simplest way to do fan-out is to have a parent which forks a
number of identical children. The parent then simply round-robins
the requests among the children. It's not optimal, but it's
simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Want to make effective use of your fancy, new multi-core
processors?&lt;/p&gt;
&lt;p&gt;Use Linux pipelines. Right now. Don't wait for new tools or new
languages.&lt;/p&gt;
&lt;p&gt;Don't try to decide which threading library is optimal.&lt;/p&gt;
&lt;p&gt;Simply refactor your programs using a simple &lt;strong&gt;Map-Reduce&lt;/strong&gt; design
pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="just-to-mention-a-href-http-pypi-python-org-p"&gt;
&lt;h2&gt;Just to mention, &amp;lt;a href=&amp;quot;&lt;a class="reference external" href="http://pypi.python.org/p"&gt;http://pypi.python.org/p&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-15 19:26:40.124000-04:00&lt;/p&gt;
&lt;p&gt;Just to mention, &lt;a class="reference external" href="http://pypi.python.org/pypi/iterpipes/"&gt;iterpipes&lt;/a&gt;
is a little Python library for running shell pipelines using shell-like
syntax. It is a thin wrapper around the standard subprocess module.
I wrote it initially for system administration, but it fits nicely in
the context you have described.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-like-the-post-respect-the-idea-but-i-don-39-t"&gt;
&lt;h2&gt;I like the post, respect the idea, but I don&amp;amp;#39;t...&lt;/h2&gt;
&lt;p&gt;Bala&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-19 20:03:33.838000-04:00&lt;/p&gt;
&lt;p&gt;I like the post, respect the idea, but I don't think I can agree with
you totally!&lt;/p&gt;
&lt;p&gt;What will happen if the process on the right completes before the
process on the left? Your pipe will throw an error. You can ignore/mask
the error, but the point is that IMHO, pipes were constructed for
communicating between processes and not for running things in parallel
(though the latter, to an extent, occurs as a side-effect).&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="architecture"></category></entry><entry><title>Literate Programming</title><link href="https://slott56.github.io/2010_03_14-literate_programming.html" rel="alternate"></link><published>2010-03-14T12:02:00-04:00</published><updated>2010-03-14T12:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-14:/2010_03_14-literate_programming.html</id><summary type="html">&lt;p&gt;About a decade ago, I discovered the concept of Literate Programming.
It's seductive. The idea is to write elegant documentation that embeds
the actual working code.&lt;/p&gt;
&lt;p&gt;For tricky, complex, high-visibility components, a literate
programming approach can give people confidence that the software
actually works as advertised.&lt;/p&gt;
&lt;p&gt;I actually wrote my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;About a decade ago, I discovered the concept of Literate Programming.
It's seductive. The idea is to write elegant documentation that embeds
the actual working code.&lt;/p&gt;
&lt;p&gt;For tricky, complex, high-visibility components, a literate
programming approach can give people confidence that the software
actually works as advertised.&lt;/p&gt;
&lt;p&gt;I actually wrote my own Literate Programming tool. Amazingly, someone
actually cared deeply enough to send me a patch to fix some
long-standing errors in the LaTeX output. What do I do with a patch
kit?&lt;/p&gt;
&lt;div class="section" id="forward-and-reverse-lp"&gt;
&lt;h2&gt;Forward and Reverse LP&lt;/h2&gt;
&lt;p&gt;There are two schools of literate programming: Forward and Reverse.
Forward literate programming starts with a source text and generates
the documentation plus the source code files required by the
compilers or interpreters.&lt;/p&gt;
&lt;p&gt;Reverse literate programming generates documentation from the source
files. Tools like &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; do this very
nicely. With a little bit of work, one can create a documentation
tree with uses Sphinx's
&lt;a class="reference external" href="http://sphinx.pocoo.org/ext/autodoc.html"&gt;autodoc&lt;/a&gt; extension to
create great documentation from the source.&lt;/p&gt;
&lt;p&gt;Reverse LP, however, tends to focus on the API's of the code &lt;em&gt;as
written&lt;/em&gt;. Sometimes it's hard to figure out why it's written that way
without further, deeper explanation. And keeping a separate
documentation tree in Sphinx means that the code and the
documentation can disagree.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-pyweb-tool"&gt;
&lt;h2&gt;My pyWeb Tool&lt;/h2&gt;
&lt;p&gt;The gold standard in Literate Programming is Knuth's Web. This is
available as
&lt;a class="reference external" href="http://www.literateprogramming.com/cweb_download.html"&gt;CWEB&lt;/a&gt;
which generates TeX output. It's quite sophisticated, allowing very
rich markup and formatting of the code.&lt;/p&gt;
&lt;p&gt;There are numerous imitators, each less and less sophisticated. When
you get to &lt;a class="reference external" href="http://nuweb.sourceforge.net/"&gt;nuweb&lt;/a&gt; and
&lt;a class="reference external" href="http://www.cs.tufts.edu/~nr/noweb/"&gt;noweb&lt;/a&gt;, you're getting down
to the bare bones of what the core use cases are.&lt;/p&gt;
&lt;p&gt;For reasons I can't recall, I wrote one, too. I wrote (and used)
pyWeb for a few small projects. I posted some code as an experiment
on the Zope site, since I was a Zope user for a while. I went to move
it and got emails from a couple of folks who are serious Literate
Programmers and where concerned when their links broke. Cool.&lt;/p&gt;
&lt;p&gt;I moved the code to my own personal site, where it sat between 2002
and today. It was hard-to-find; but there are some hard-core Literate
Programmers who are willing to chase down tools and play with them to
see how they work at producing elegant, readable code. Way cool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="patch-kit"&gt;
&lt;h2&gt;Patch Kit&lt;/h2&gt;
&lt;p&gt;Recently, I received a patch kit for pyWeb. This says several things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's at least good enough that folks can use it and find the
errors in the LaTeX markup it produced&lt;/li&gt;
&lt;li&gt;Some folks care enough about good software to help correct the
errors.&lt;/li&gt;
&lt;li&gt;Hosting it on my personal web site is a bad idea.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I created a SourceForge project, &lt;a class="reference external" href="https://sourceforge.net/projects/pywebtool/"&gt;pyWeb Literate Programming
Tool&lt;/a&gt;, to make it
easier for folks to find and correct any problems.&lt;/p&gt;
&lt;p&gt;I expect the number of downloads to hover right around zero
forever. But at least it's now fixable by someone other than me.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="regarding-leo-it-has-advanced-by-leaps-and-bound"&gt;
&lt;h2&gt;Regarding Leo - it has advanced by leaps and bound...&lt;/h2&gt;
&lt;p&gt;Ville&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-14 16:24:11.895000-04:00&lt;/p&gt;
&lt;p&gt;Regarding Leo - it has advanced by leaps and bounds lately, including a
new fast (and good-looking!) Qt ui, simplified reST authoring, Python 3
support...&lt;/p&gt;
&lt;p&gt;It's actually quite an exciting project, even if you were not into LP at
all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="do-you-know-leo"&gt;
&lt;h2&gt;Do you know Leo ?&lt;/h2&gt;
&lt;p&gt;luigi_scarso&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-04 14:03:27.855000-05:00&lt;/p&gt;
&lt;p&gt;Do you know Leo ?
&lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;http://webpages.charter.net/edreamleo/front.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi Steven,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-ve-sent-you-a-patch-to-pyweb-2-1"&gt;
&lt;h2&gt;I've sent you a patch to pyWeb 2.1...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-18 02:59:21.054000-04:00&lt;/p&gt;
&lt;p&gt;Hi Steven,&lt;/p&gt;
&lt;p&gt;I've sent you a patch to pyWeb 2.1 related to RST generation yesterday
to s_lott at yahoo.com&lt;/p&gt;
&lt;p&gt;Duplicating this info here to make sure it wouldn't lost.&lt;/p&gt;
&lt;p&gt;Best regards,
Egor&lt;/p&gt;
&lt;p&gt;Hi Steven,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="another-patch-for-pyweb-2-1-related-to"&gt;
&lt;h2&gt;Another patch for pyWeb 2.1 related to...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-08-02 12:17:54.267000-04:00&lt;/p&gt;
&lt;p&gt;Hi Steven,&lt;/p&gt;
&lt;p&gt;Another patch for pyWeb 2.1 related to RST generation was sent to s_lott
at yahoo.com&lt;/p&gt;
&lt;p&gt;Best regards,&lt;/p&gt;
&lt;p&gt;Egor&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category><category term="#python"></category><category term="literate programming"></category></entry><entry><title>Great Lies: "Design" vs. "Construction"</title><link href="https://slott56.github.io/2010_03_11-great_lies_design_vs_construction.html" rel="alternate"></link><published>2010-03-11T11:37:00-05:00</published><updated>2010-03-11T11:37:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-11:/2010_03_11-great_lies_design_vs_construction.html</id><summary type="html">&lt;p&gt;In reflecting on Architecture, I realized that there are some profound
differences between &amp;quot;real&amp;quot; architecture and software architecture.&lt;/p&gt;
&lt;p&gt;One of the biggest differences is design.&lt;/p&gt;
&lt;p&gt;In the earliest days, software was built by very small groups of very
bright people. Alan Turing, Brian Kernighan, Dennis Ritchie, Steve
Bourne, Ken Thompson …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In reflecting on Architecture, I realized that there are some profound
differences between &amp;quot;real&amp;quot; architecture and software architecture.&lt;/p&gt;
&lt;p&gt;One of the biggest differences is design.&lt;/p&gt;
&lt;p&gt;In the earliest days, software was built by very small groups of very
bright people. Alan Turing, Brian Kernighan, Dennis Ritchie, Steve
Bourne, Ken Thompson, Guido van Rossum. (Okay, that last one says
that even today, software is sometimes built by small groups of very
bright people.) Overall architecture, both design and construction
where done by the same folks.&lt;/p&gt;
&lt;p&gt;At some point (before I started in this business in the '70's)
software development was being pushed &amp;quot;out&amp;quot; to ever larger groups of
developers. The first attempts at this -- it appears -- didn't work
out well. Not everyone who can write in a programming language can
also design software that actually works reliably and predictably.&lt;/p&gt;
&lt;p&gt;By the time I got my first job, the great lie had surfaced.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;There are Designers who are distinct from Programmers.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;The idea was to insert a few smart people into the vast sea of
mediocre people. This is manifestly false. But, it's a handy lie to
allow managers to &lt;em&gt;attempt&lt;/em&gt; to build large, complex pieces of
software using a a larger but lower-skilled workforce.&lt;/p&gt;
&lt;div class="section" id="reasoning-by-analogy"&gt;
&lt;h2&gt;Reasoning By Analogy&lt;/h2&gt;
&lt;p&gt;The reasoning probably goes like this. In the building trades there
are architects, engineers and construction crews. In manufacturing,
there are engineers and factory labor.&lt;/p&gt;
&lt;p&gt;In these other areas, there's a clear distinction between design and
construction.&lt;/p&gt;
&lt;p&gt;Software must be the same. Right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;The analogy is fatally flawed because there is no &amp;quot;construction&amp;quot; in
the creation of software. Software only has design. Writing code is
-- essentially -- design work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="architecture-and-software-architecture"&gt;
&lt;h2&gt;Architecture and Software Architecture&lt;/h2&gt;
&lt;p&gt;Spend time with architects and you realize that a good architect can
(and often does) create a design that includes construction details:
what fastenings to use, how to assemble things. The architect will
build models with CAD tools, but also using foam board to help
visualize the construction process as well as the final product.&lt;/p&gt;
&lt;p&gt;In the software realm, you appear to have different degrees of
detail: High Level Design, Detailed Design, Coding Specifications,
Code.&lt;/p&gt;
&lt;p&gt;High Level Design (or &amp;quot;Architecture&amp;quot;) is the big picture of
components and services; the mixture of purchased plus built;
configuration vs. constructions; adaptation vs. new development. That
kind of thing. Essential for working out a budget and plan for buying
stuff and building other stuff.&lt;/p&gt;
&lt;p&gt;Usually, this is too high-level for a lot of people to code from.
It's planning stuff. Analogous to a foam-board overview of a
building.&lt;/p&gt;
&lt;p&gt;Detailed Design -- I guess -- is some intermediate level of design
where you provide some guidance to someone so they can write
programming specifications. Some folks want this done in more formal
UML or something to reveal parts of the software design. This is a
murky work product because we don't have really formal standards for
this. We can claim that UML is the equivalent of blueprints. But we
don't know what level of detail we should reveal here.&lt;/p&gt;
&lt;p&gt;When I have produced UML-centric designs, they're both &amp;quot;too
technical&amp;quot; and &amp;quot;not detailed enough for coders&amp;quot;. A critique I've
never understood.&lt;/p&gt;
&lt;p&gt;Program Specifications -- again, I'm guessing -- are for &amp;quot;coders&amp;quot; to
write code from. To write such a thing, I have to visualize some code
and describe that code in English.&lt;/p&gt;
&lt;p&gt;Let's consider that slowly. To write programming specifications, I
have to&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Visualize the code they're supposed to write.&lt;/li&gt;
&lt;li&gt;Describe that code in English.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wouldn't it be simpler to just let me code it? It would certainly
take less time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="detailed-design-flaws"&gt;
&lt;h2&gt;Detailed Design Flaws&lt;/h2&gt;
&lt;p&gt;First, let me simplify things by mashing &amp;quot;Detailed Design&amp;quot; and
&amp;quot;Specification&amp;quot; together, since they seem to be the same thing. A
designer (me) has to reason out the classes required. Then the
designer has to pick appropriate algorithms and data structures
(HashMap vs. TreeMap). Then the designer has to either draw a UML
picture or write an English narrative (or both) from which someone
else can code the required class, data structure and algorithm.
Since you can call this either name, the names don't seem to mean
much.&lt;/p&gt;
&lt;p&gt;I suppose there could be a pipeline from one design document at a
high level to other designs at a low level. But if the low-level
design is made difficult by errors in the high-level design, the
high-level designer has to rework things. Why separate the work? I
don't know.&lt;/p&gt;
&lt;p&gt;When handing things to the coders, I've had several problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;They ignore the design and write stuff using primitive arrays
because they didn't understand &amp;quot;Map&amp;quot;, much less &amp;quot;HashMap&amp;quot; vs.
&amp;quot;TreeMap&amp;quot;. In which case, why write detailed design if they
only ignore it? Remember, I provided specifications that were
essentially, line-of-code narrative. I named the classes and
the API's.&lt;/li&gt;
&lt;li&gt;They complain about the design because they don't understand
it, requiring rework to add explanatory details. I've gone
beyond line-of-code narrative into remedial CS-101. I don't
mind teaching (I prefer it) but not when there's a silly
delivery deadline that can't be met because folks need to
improve their skills.&lt;/li&gt;
&lt;li&gt;They find flaws in the design because I didn't actually write
some experimental code to confirm each individual English
sentence. Had I written the code first, then described it in
English, the description would be completely correct. Since I
didn't write the code first, the English description of what
the code &lt;em&gt;should be&lt;/em&gt; contained some errors (perhaps I failed to
fully understand some nuance of an API). These are nuances I
would have found had I actually written the code. So,
error-free specifications require me to write the code first.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My Point is This.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;If the design is detailed enough to code from -- and error free -- a designer must actually write the code first.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Indeed, the designer probably should simply have written the
code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="architecture-isn-t-like-that"&gt;
&lt;h2&gt;Architecture Isn't Like That&lt;/h2&gt;
&lt;p&gt;Let's say we have a software design that's detailed enough to
code from, and is completely free from egregious mistakes in
understanding some API. Clearly, the designer verified each
statement against the API. I'd argue that the best way to do
this is to have the compiler check each assumptions. Clearly,
the best way to do this is to simply write the code.&lt;/p&gt;
&lt;p&gt;&amp;quot;Wait,&amp;quot; you say, &amp;quot;that's going too far.&amp;quot;&lt;/p&gt;
&lt;p&gt;Okay, you're right. Some parts of the processing do not require
that level of care. However, some parts do. For instance,
time-critical (or storage-critical) sections of algorithms with
many edge cases require that the designer build and benchmark
the alternatives to be sure they've picked the right algorithm
and data structure.&lt;/p&gt;
&lt;p&gt;Wait.&lt;/p&gt;
&lt;p&gt;In order for the designer has absolute certainty that the
design will work, they have to build a copy that works before
giving it to the coders.&lt;/p&gt;
&lt;p&gt;In architecture or manufacturing, the construction part is
expensive.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In software, the construction part does not exist&lt;/em&gt;. Once you
have a detailed design that's error-free and meets the
performance requirements, you're actually done. You've created
&amp;quot;prototypes&amp;quot; that include all the required features. You've run
them under production-like loads. You've subjected them to unit
tests to be sure they work correctly (why benchmark something
that's incorrect?)&lt;/p&gt;
&lt;p&gt;There's nothing left to do except transition to production (or
package for distribution.)&lt;/p&gt;
&lt;p&gt;Software Design&lt;/p&gt;
&lt;p&gt;There's no &amp;quot;detailed design&amp;quot; or &amp;quot;programming specifications&amp;quot; in
software. That pipeline is crazy.&lt;/p&gt;
&lt;p&gt;It's more helpful to think of it this way: there's &amp;quot;easy stuff&amp;quot;
and &amp;quot;hard stuff&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Easy Stuff&lt;/strong&gt; has well-understood design patterns, nothing
tricky, heavy use of established API's. The things where the
&amp;quot;architectural&amp;quot; design can be given to a programmer to
complete the design by writing and testing some code.
Database CRUD processing, reporting and analysis modules,
bulk file processing, standard web form processing for data
administration, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hard Stuff&lt;/strong&gt; has stringent performance requirements, novel
or difficult design patterns, new API's. The things where
you have to do extensive design and prototyping work to
resolve complex or interlocking issues. By the time there's
a proven design, there's also code, and there's no reason
for the designer to then write &amp;quot;specifications&amp;quot; for someone
to reproduce the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In both cases, there are no &amp;quot;coders&amp;quot;. Everyone's a designer.
Some folks have one design strength (&amp;quot;easy stuff&amp;quot;,
well-known design patterns and API's) and other folks have a
different design strength.&lt;/p&gt;
&lt;p&gt;There is no &amp;quot;construction&amp;quot;. &lt;strong&gt;All of software development is
design&lt;/strong&gt;. Some design is assembling well-known components
into easily-visualized solutions. Other design is closer to
the edge of the envelope, inventing something new.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="website-design-canada"&gt;
&lt;h2&gt;Website Design Canada...&lt;/h2&gt;
&lt;p&gt;David&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-12 01:31:03.040000-05:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.aguaesolutions.com/webdesign.html"&gt;Website Design Canada&lt;/a&gt;
is very helpful for a web site Designing.Designing of a website plays an
important role in business.Effective design attracts people very
easily..&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="check-out-the-book-quot-the-nature-of-design-quot"&gt;
&lt;h2&gt;Check out the book &amp;amp;quot;The Nature of Design&amp;amp;quot...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-21 17:29:02.287000-04:00&lt;/p&gt;
&lt;p&gt;Check out the book &amp;quot;The Nature of Design&amp;quot; by David Pye&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="project management"></category><category term="architecture"></category></entry><entry><title>I see why you were confused</title><link href="https://slott56.github.io/2010_03_09-i_see_why_you_were_confused.html" rel="alternate"></link><published>2010-03-09T08:00:00-05:00</published><updated>2010-03-09T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-09:/2010_03_09-i_see_why_you_were_confused.html</id><summary type="html">&lt;p&gt;Got a nice email about &lt;em&gt;architecture&lt;/em&gt; -- but the wrong kind.&lt;/p&gt;
&lt;p&gt;It was about physical structures, not software.&lt;/p&gt;
&lt;p&gt;It is a &amp;quot;bucket-list&amp;quot; of buildings one simply &lt;em&gt;must&lt;/em&gt; see. &lt;a class="reference external" href="http://constructionmanagementdegree.org/?page_id=459"&gt;100
Amazing Buildings Every Architecture Buff Should
See&lt;/a&gt;. A cool
list to have handy.&lt;/p&gt;
&lt;p&gt;I know bupkes about buildings. I've lived in them …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Got a nice email about &lt;em&gt;architecture&lt;/em&gt; -- but the wrong kind.&lt;/p&gt;
&lt;p&gt;It was about physical structures, not software.&lt;/p&gt;
&lt;p&gt;It is a &amp;quot;bucket-list&amp;quot; of buildings one simply &lt;em&gt;must&lt;/em&gt; see. &lt;a class="reference external" href="http://constructionmanagementdegree.org/?page_id=459"&gt;100
Amazing Buildings Every Architecture Buff Should
See&lt;/a&gt;. A cool
list to have handy.&lt;/p&gt;
&lt;p&gt;I know bupkes about buildings. I've lived in them for all my life,
I've even owned a few. But that's about it. I'm more interested in
marine architecture and knowing how my boat is put together. [My
boat was designed by &lt;a class="reference external" href="http://www.tedbrewer.com/"&gt;Ted Brewer&lt;/a&gt;;
that's the kind of architecture I'm interested in.]&lt;/p&gt;
&lt;p&gt;Despite my utter ignorance of buildings, I am very aware that the
Software Design Patterns folks were heavily influenced by
Christopher Alexander's work on patterns in architecture. For the
parallels, read this by Doug Lea, &lt;a class="reference external" href="http://g.oswego.edu/dl/ca/ca/ca.html#node6"&gt;Christopher Alexander:An
Introduction for Object-Oriented
Designers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may also want to read &lt;a class="reference external" href="http://zeta.math.utsa.edu/~yxk833/Chris.text.html"&gt;SOME NOTES ON CHRISTOPHER
ALEXANDER&lt;/a&gt;
by Nikos A. Salingaros.&lt;/p&gt;
&lt;div class="section" id="retronyms"&gt;
&lt;h2&gt;Retronyms&lt;/h2&gt;
&lt;p&gt;When the &amp;quot;electric guitar&amp;quot; was perfected, folks had to create a
new word to replace &amp;quot;guitar&amp;quot;. The word had become ambiguous, and
the phrase &amp;quot;acoustic guitar&amp;quot; was invented to disambiguate
&amp;quot;guitar&amp;quot;.&lt;/p&gt;
&lt;p&gt;We have the same problem with architecture. There's software
architecture, marine architecture, and &amp;quot;unqualified&amp;quot; architecture.
Worse, we're unlikely to get a good retronym because architecture
is a pretty well-defined profession (like &amp;quot;doctor&amp;quot;, &amp;quot;dentist&amp;quot; or
&amp;quot;barber&amp;quot;) and you can't easily rename it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category></entry><entry><title>Fun</title><link href="https://slott56.github.io/2010_03_07-fun.html" rel="alternate"></link><published>2010-03-07T17:28:00-05:00</published><updated>2010-03-07T17:28:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-07:/2010_03_07-fun.html</id><summary type="html">&lt;p&gt;XKCD - &lt;a class="reference external" href="http://xkcd.com/710/"&gt;http://xkcd.com/710/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Collatz_conjecture#Syracuse_function"&gt;http://en.wikipedia.org/wiki/Collatz_conjecture#Syracuse_function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I remember learning about this as an undergrad at Syracuse University
in the 70's and didn't think much of it. It was just &amp;quot;one of those
things&amp;quot; that I heard about, and perhaps wrote a homework assignment
in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;XKCD - &lt;a class="reference external" href="http://xkcd.com/710/"&gt;http://xkcd.com/710/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Collatz_conjecture#Syracuse_function"&gt;http://en.wikipedia.org/wiki/Collatz_conjecture#Syracuse_function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I remember learning about this as an undergrad at Syracuse University
in the 70's and didn't think much of it. It was just &amp;quot;one of those
things&amp;quot; that I heard about, and perhaps wrote a homework assignment
in APL or Algol-W.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://projecteuler.net/index.php?section=problems&amp;amp;id=14"&gt;http://projecteuler.net/index.php?section=problems&amp;amp;id=14&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The good old days. When a program to examine the conjecture was hours
of heavy thinking followed by carefully monitored run-times on an IBM
370. Computer time was money back in the day. Every minute counted.
And you could spend your precious budget checking the Syracuse
function or going out with friends.&lt;/p&gt;
&lt;p&gt;My solution to the Project Euler problem is 18 lines of Python.&lt;/p&gt;
&lt;p&gt;With a few memoization tricks, it runs in something like 3 seconds on
my little MacBook. Back in the day, I don't think it even compiled
that quickly.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="my-solution-is-about-twice-as-many-lines-of-java"&gt;
&lt;h2&gt;My solution is about twice as many lines of Java, ...&lt;/h2&gt;
&lt;p&gt;Bill the Lizard&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-05 13:15:29.678000-05:00&lt;/p&gt;
&lt;p&gt;My solution is about twice as many lines of Java, but I didn't use any
memoization tricks so it would get a bit longer. Even without caching
any values it only took about 9 seconds (on a fairly new desktop
machine). It would certainly speed things up if I stored the lengths of
the sequences, at least for each starting value. It would probably
complicate the code beyond all recognition if I tried to cache all of
the intermediate values as well.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>The Web is my ESB, but it's slow...</title><link href="https://slott56.github.io/2010_03_01-the_web_is_my_esb_but_its_slow.html" rel="alternate"></link><published>2010-03-01T08:00:00-05:00</published><updated>2010-03-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-03-01:/2010_03_01-the_web_is_my_esb_but_its_slow.html</id><summary type="html">&lt;p&gt;Transaction design seems to be really hard for some people. The
transactions they build seem to based on some crazy assumptions. The
problem is that benchmarking is hard because you have to build enough
stuff to get a meaningful benchmark. Everyone thinks your done when
really, all you did was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Transaction design seems to be really hard for some people. The
transactions they build seem to based on some crazy assumptions. The
problem is that benchmarking is hard because you have to build enough
stuff to get a meaningful benchmark. Everyone thinks your done when
really, all you did was show that you've got a rotten design.&lt;/p&gt;
&lt;p&gt;One reason is that people people roll their own ESB. There are many
nice ones, but they seem big, complex and expensive. Wikipedia has a
handy list of
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Enterprise_service_bus#Commercial_and_Open_Source_Vendors"&gt;ESB&lt;/a&gt;'s
and vendors. Instead of using a purpose-built ESB, it seems sensible
to use the the web as an ESB. There's nothing wrong with using the
web as an ESB. What's wrong is assuming that the web has our
imaginary level of performance.&lt;/p&gt;
&lt;p&gt;It appears that there are two assumptions people make. Here's what
happens.&lt;/p&gt;
&lt;div class="section" id="shoddy-design"&gt;
&lt;h2&gt;Shoddy Design&lt;/h2&gt;
&lt;p&gt;They design a really complex web transaction and then complain.
Attributes of these complex web transactions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They're part of the presentation, for example, a response to an HTML-based GET request. With a person watching it execute.&lt;/li&gt;
&lt;li&gt;They involve aggregating information from other web services.&lt;/li&gt;
&lt;li&gt;Sometimes, they involve multi-step workflows.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The complaints include the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's slow. The user is forced to wait for a long time.&lt;/li&gt;
&lt;li&gt;It's unreliable. Sometimes an information source doesn't respond at all.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, the assumptions appear to be that the actual web is as
fast as your integration test mock web. And the actual web
is as reliable as your mock web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternatives"&gt;
&lt;h2&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;In the case that the transaction is an &amp;quot;order from stock&amp;quot;
(it involves competition for physical goods) then the user
must wait. When ordering books from inventory, or airplane
seats, or hotel rooms, the web site &lt;strong&gt;must&lt;/strong&gt; display a
clever animation while it grinds away doing the transaction.&lt;/p&gt;
&lt;p&gt;But, when the transaction is placing an order, or it
involves aggregating information, then there are better
things than making the user sit there and watch the
beach-ball spin while your transaction grinds away.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Make them wait while you grind. This is the &amp;quot;do nothing&amp;quot;
solution; if it's slow or crashes, the user will
complain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Queue Up a Work Request&lt;/strong&gt;. Tell the user you're
queueing it up. Allow them to monitor the status of their
queued work request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pre-Cache&lt;/strong&gt;. We can often gather the expected
information in advance and store it locally. When we're
providing some kind standard information aggregates, we
should gather it in advance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="work-queues"&gt;
&lt;h2&gt;Work Queues&lt;/h2&gt;
&lt;p&gt;The work queue is no different from an eBay auction. You
place an order or request and monitor the status.
Information aggregation shouldn't take a week; it should
be quick.&lt;/p&gt;
&lt;p&gt;The user fills in their form, or uploads their request.
Your web transaction puts it into the queue, and gives
immediate feedback that it was accepted.&lt;/p&gt;
&lt;p&gt;Your web site must include, therefore, a background
processor that actually handles the request. You can
spawn a &amp;quot;nohup&amp;quot; subprocess. You can have a &amp;quot;crontab&amp;quot;
schedule that checks the queue every minute. You can have
a proper daemon spawned by &amp;quot;init&amp;quot;.&lt;/p&gt;
&lt;p&gt;The background process dequeues the request, gathers the
data. It handles slow, timeout, crashes, etc. When it's
done, the status is updated. Maybe an email is sent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pre-cached-data"&gt;
&lt;h2&gt;Pre-Cached Data&lt;/h2&gt;
&lt;p&gt;Many applications aggregate data. Except in the rare case
that the data involves competition over physical goods
(inventory levels, current availability, etc.) the data
doesn't change constantly.&lt;/p&gt;
&lt;p&gt;Indeed, many times the data is changed on a pretty slow
schedule. Weather forecasts, econometric data, etc.,
changes slowly. It's easy to query this data and cache it
locally. This gives the illusion of immediate response.&lt;/p&gt;
&lt;p&gt;In some cases, the data may involve something like a
Twitter feed, where there is a constant flow of data, but
there's no competition over physical goods. Folks like to
wring their hands over getting the absolute
up-to-the-second Twitter information. This is, of course,
impossible because the Internet is (1) slow and (2)
unreliable. What does up-to-the-second mean when your
request is trashed by a momentary problem with your web
host's DNS server?&lt;/p&gt;
&lt;p&gt;Even Twitter postings can be pre-cached. Polling the
Twitter server -- and caching the interesting tweets --
every few minutes will yield results that are every bit
as current as trying to get a &amp;quot;live&amp;quot; feed. Remember, the
folks tweeting have latency and unreliability at their
end. The Twitter servers have latency and unreliability.
Your web server has latency and unreliability. Your
user's browser has latency and unreliability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="high-value-data"&gt;
&lt;h2&gt;High-Value Data&lt;/h2&gt;
&lt;p&gt;In some applications, the data is very high value.
Electronic Health Records, for example. Econometric Data
from commercial sources (see the &lt;a class="reference external" href="http://www.nabe.com/publib/links/tools.html"&gt;NABE
Tools&lt;/a&gt;
page) for example. In the case of high-value data we have
to account for (1) slow and we have to resolve (2)
unreliable.&lt;/p&gt;
&lt;p&gt;We can't fix slow. We have to handled it by a combination
of pre-caching and managing request work queues. Use Case
1: users make a standard econometrics request; we have
the current data that we've subscribed to. Done. Use Case
2: users make a non-standard request; we queue up the
task, we gather the information from sources, when we've
finished the job, we close the task and notify the user.&lt;/p&gt;
&lt;p&gt;The unreliable is handled by service level agreements and
relatively simple work-flow techniques. When integrating
data from several sources, we don't simply write a dumb
sequence of REST (or SOAP) requests. We have to break the
processing down so that each source is handled separately
and can be retried until it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background-processing-tier"&gt;
&lt;h2&gt;Background Processing Tier&lt;/h2&gt;
&lt;p&gt;This says that a standard web architecture should have
the following tiers.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Browser.&lt;/li&gt;
&lt;li&gt;Presentation Tier. JSP pages, Django View Functions and Templates.&lt;/li&gt;
&lt;li&gt;Services Tier. An actual ESB. Or we can write our own
Backend Processor. Either way, we must have a separate
server with it's own work queue to handle long-running
transactions.&lt;/li&gt;
&lt;li&gt;Persistence Tier. Database (or files). Your
presentation and ESB (or Backend) can share a common
database. This can be decomposed into further tiers
like ORM, access and actual database.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can try some other architectures, but they are
often painful and complex. The most common attempt
appears to be multi-threading. Folks try to write a
web presentation transaction that's multi-threaded and
handles the long-running background processing as a
separate thread. Sadly threads compete for I/O
resources, so this is often ineffective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wsgi-based-esb"&gt;
&lt;h2&gt;WSGI-Based ESB&lt;/h2&gt;
&lt;p&gt;Writing a REST+WSGI ESB (in Python) is relatively
straight-forward.&lt;/p&gt;
&lt;p&gt;Use
&lt;a class="reference external" href="http://docs.python.org/library/wsgiref.html"&gt;wsgiref&lt;/a&gt;,
or &lt;a class="reference external" href="http://werkzeug.pocoo.org/"&gt;werkzeug&lt;/a&gt;. Create
the &amp;quot;services&amp;quot; as WSGI applications that plug into the
simple WSGI framework. Add authentication, URL
processing, logging, and other aspects via the WSGI
processing pipeline. Do the work, and formulate a JSON
(or XML) response.&lt;/p&gt;
&lt;p&gt;Need your services tier to scale? Use
&lt;a class="reference external" href="http://www.lighttpd.net/"&gt;lighttpd&lt;/a&gt; or
&lt;a class="reference external" href="http://nginx.org/"&gt;nginx&lt;/a&gt; to &amp;quot;wrap&amp;quot; your WSGI
services tier. You can configure WSGI into nginx
(&lt;a class="reference external" href="http://wiki.nginx.org/NginxNgxWSGIModule"&gt;link&lt;/a&gt;).
Also, you can configure WSGI into lighttd
(&lt;a class="reference external" href="http://redmine.lighttpd.net/projects/lighttpd-sandbox/wiki/Howto_WSGI"&gt;link&lt;/a&gt;);
you can mess around with FastCGI configuration to
create multiple instances of the server daemon.&lt;/p&gt;
&lt;p&gt;It's much, much easier to make the OS handle the
background processing as a separate heavy-weight
process. Apache, lighttpd or nginx can make the
background processor multi-threaded for you.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="nice-post-some-good-stuff-on-queue-s-and-pre"&gt;
&lt;h2&gt;Nice post. Some good stuff on Queue's and Pre-...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-03-08 11:43:26.748000-05:00&lt;/p&gt;
&lt;p&gt;Nice post. Some good stuff on Queue's and Pre-Caching. Thanks.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category></entry><entry><title>Numerosity -- More Metrics without Meaning</title><link href="https://slott56.github.io/2010_02_23-numerosity_more_metrics_without_meaning.html" rel="alternate"></link><published>2010-02-23T08:00:00-05:00</published><updated>2010-02-23T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-02-23:/2010_02_23-numerosity_more_metrics_without_meaning.html</id><summary type="html">&lt;p&gt;Common Complaint: &amp;quot;&lt;em&gt;This was the nth time that someone was up in arms
that [X] was broken ... PL/SQL that ... has one function that is over
1,500 lines of [code].&lt;/em&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Not a good solution: &amp;quot;&lt;em&gt;Find someway to measure &amp;quot;yucky code&amp;quot;.&lt;/em&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Continuing down a path of relatively low value, the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Common Complaint: &amp;quot;&lt;em&gt;This was the nth time that someone was up in arms
that [X] was broken ... PL/SQL that ... has one function that is over
1,500 lines of [code].&lt;/em&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Not a good solution: &amp;quot;&lt;em&gt;Find someway to measure &amp;quot;yucky code&amp;quot;.&lt;/em&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Continuing down a path of relatively low value, the question
included this reference: &amp;quot;&lt;a class="reference external" href="http://www.informit.com/articles/article.aspx?p=1561879"&gt;Using Metrics to Find Out if Your Code
Base Will Stand the Test of
Time&lt;/a&gt;,&amp;quot;
Aaron Erickson, Feb 18, 2010. The article is quite nice, but the
question abuses it terribly.&lt;/p&gt;
&lt;p&gt;For example: &amp;quot;&lt;em&gt;It mentions cyclomatic complexity, efferent and
afferent coupling. The article mentions some tools.&lt;/em&gt;&amp;quot; Mentions? I
believe the article defines cyclomatic complexity and gives
examples of it's use.&lt;/p&gt;
&lt;p&gt;Red Alert. There's no easy way to &amp;quot;measure&amp;quot; code smell. Stop
trying.&lt;/p&gt;
&lt;p&gt;How is this a path of low value? How can I say that proven metrics
like cyclomatic complexity are of low value? How dare I?&lt;/p&gt;
&lt;div class="section" id="excessive-measurment"&gt;
&lt;h2&gt;Excessive Measurment&lt;/h2&gt;
&lt;p&gt;Here's why the question devolves into numerosity.&lt;/p&gt;
&lt;p&gt;The initial problem is that a piece of code is actually breaking.
Code that breaks repeatedly is costly: disrupted production, time
to repair, etc.&lt;/p&gt;
&lt;p&gt;What further metric do you need? It breaks. It costs. That's all
you need to know. You can judge the cost in dollars. Everything
else is numerosity.&lt;/p&gt;
&lt;p&gt;A good quote from the article: &amp;quot;By providing visibility into the
maintainability of your code base—and being proactive about
reducing these risks—companies can significantly reduce spend on
maintenance&amp;quot;. The article is trying to help identify &lt;em&gt;possible&lt;/em&gt;
future maintenance.&lt;/p&gt;
&lt;p&gt;The code in question is &lt;em&gt;already known to be bad&lt;/em&gt;. What more
information is needed?&lt;/p&gt;
&lt;p&gt;What level of Cyclomatic Complexity is too high? Clearly, that
piece of code was already too much. Do you need a Cyclomatic
Complexity number to know it's broken? No, you have simple, direct
labor cost that tells you it's broken. Everyone already agrees
it's broken. What more is required?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First things first: It's already broken&lt;/strong&gt;. Stop trying to
measure. When the brakes have already failed, you don't need to
measure hydraulic pressure in the brake lines. They've failed. Fix
them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-magical-number"&gt;
&lt;h2&gt;The Magical Number&lt;/h2&gt;
&lt;p&gt;The best part is this. Here's a question that provides much
insight in to the practical use of Cyclomatic Complexity.
&lt;a class="reference external" href="http://stackoverflow.com/questions/20702/whats-your-a-good-limit-for-cyclomatic-complexity"&gt;http://stackoverflow.com/questions/20702/whats-your-a-good-limit-for-cyclomatic-complexity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some say 5, some say 10.&lt;/p&gt;
&lt;p&gt;What does that mean? Clearly code with a cyclomatic complexity of
10 is twice as bad as a cyclomatic complexity of 5. Right? Or is
the cost function relatively flat, and 10 is only 5% worse than 5?
Or is the cost function exponential and 10 is 10 times worse than
5? Who knows? How do we interpret these numbers? What does each
point of Cyclomatic complexity map to? (Other than if-statements.)&lt;/p&gt;
&lt;p&gt;Somehow both 5 and 10 are &amp;quot;acceptable&amp;quot; thresholds.&lt;/p&gt;
&lt;p&gt;When folks ask how to use this to measure code smell, it means
they're trying to replace thinking with counting. Always a bad
policy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second Principle: If you want to find code smells, you have to read the code.&lt;/strong&gt; When the brakes are mushy and ineffective, you
don't need to start measuring hydraulic pressure in every car in
the parking lot. You need to fix the brakes on the car that's
already obviously in need of maintenance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="management-initiative"&gt;
&lt;h2&gt;Management Initiative&lt;/h2&gt;
&lt;p&gt;Imagine this scenario. Someone decides that the CC threshold is
10. That means they now have to run some metrics tool and gather
the CC for every piece of code. Now what?&lt;/p&gt;
&lt;p&gt;Seriously. What will happen?&lt;/p&gt;
&lt;p&gt;Some code will have a CC score of 11. Clearly unacceptable. Some
will have a CC score of 300. Also unacceptable. You can't just
randomly start reworking everything with &lt;span class="formula"&gt;&lt;i&gt;CC&lt;/i&gt; &amp;gt; 10&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;What will happen?&lt;/p&gt;
&lt;p&gt;You prioritize. The modules with CC scores of 300 will be reworked
first.&lt;/p&gt;
&lt;p&gt;Guess what? You &lt;em&gt;already knew&lt;/em&gt; they stank. You don't need a CC
score to find the truly egregious modules. You already know. Ask
anyone which modules are the worst. Everyone who reads the code on
a regular basis knows exactly where actual problems are.&lt;/p&gt;
&lt;p&gt;Indeed, ask a manager. They know which modules are trouble. &amp;quot;Don't
touch module [Y], it's a nightmare to get working again.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Third Principle: You already know everything you need to know&lt;/strong&gt;.
The hard part is taking action. Rework of existing code is
something that managers are punished for. Rework is a failure
mode. Ask any manager about fixing something that's rotten to the
core but not actually failing in production. What do they say?
Everyone -- absolutely everyone -- will say &amp;quot;if it ain't broke,
don't fix it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Failure to find and fix code smells is entirely a management
problem. Metrics don't help.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dream-world"&gt;
&lt;h2&gt;Dream World&lt;/h2&gt;
&lt;p&gt;The numerosity dream is that there's some function that maps
cyclomatic complexity to maintenance cost. In dollars. Does that
mean this formula magically includes organization overheads, time
lost in meetings, and process dumbness?&lt;/p&gt;
&lt;p&gt;Okay. The sensible numerosity dream is that there's some function
between cyclomatic complexity and effort to maintain in applied
labor hours. That means the formula magically includes personal
learning time, skill level of the developer, etc.&lt;/p&gt;
&lt;p&gt;Okay. A more sensible numerosity dream is that there's some
function between cyclomatic complexity and effort to maintain in
standardized labor hours. Book hours. These have to be adjusted
for the person and the organization. That means the formula
magically includes factors for technology choices like language
and IDE.&lt;/p&gt;
&lt;p&gt;Why is it so hard to find any sensible prediction from specific
cyclomatic complexity?&lt;/p&gt;
&lt;p&gt;Look at previous attempts to measure software development. For
example, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/COCOMO"&gt;COCOMO&lt;/a&gt;. Basic
COCOMO has a nice &lt;span class="formula"&gt;&lt;i&gt;R&lt;/i&gt;×&lt;i&gt;T&lt;/i&gt; = &lt;i&gt;D&lt;/i&gt;&lt;/span&gt; kind of formula. Actually it's
&lt;span class="formula"&gt;&lt;i&gt;a&lt;/i&gt;×&lt;i&gt;K&lt;/i&gt;&lt;sup&gt;&lt;i&gt;b&lt;/i&gt;&lt;/sup&gt; = &lt;i&gt;E&lt;/i&gt;&lt;/span&gt;, but the idea is that you have a simple function
with one independent variable (likes of code, &lt;em&gt;K&lt;/em&gt;), and one
dependent variable (effort, &lt;em&gt;E&lt;/em&gt;) and some constants (&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;). A
nice Newtonian and Einsteinian model.&lt;/p&gt;
&lt;p&gt;Move on to intermediate COCOMO and &lt;a class="reference external" href="http://sunset.usc.edu/csse/research/COCOMOII/cocomo_main.html"&gt;COCOMO II&lt;/a&gt;.
At least 15 additional independent variables have shown up. And in
COCOMO II, the number of independent variables is yet larger with
yet more complex relationships.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fourth Principle: Software development is a human endeavor&lt;/strong&gt;.
We're talking about human behavior. Measuring hydraulic pressure
in the brake lines will &lt;em&gt;never&lt;/em&gt; find the the idiot mechanic who
forgot to fill the reservoir.&lt;/p&gt;
&lt;p&gt;Boehm called his book &lt;em&gt;Software Engineering Economics&lt;/em&gt;. Note the
parallel. Software engineering -- like economics -- is a dismal
science. It has lots of things you &lt;em&gt;can&lt;/em&gt; measure. Sadly, the human
behavior factors create an unlimited number of independent
variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="relative-values"&gt;
&lt;h2&gt;Relative Values&lt;/h2&gt;
&lt;p&gt;Here's a sensible approach: &amp;quot;&lt;a class="reference external" href="http://blogs.msdn.com/mswanson/articles/154460.aspx"&gt;Code Review and Complexity&lt;/a&gt;&amp;quot;.
They used a relative jump in Cyclomatic Complexity to trigger an
in-depth review.&lt;/p&gt;
&lt;p&gt;Note that this happens at &lt;em&gt;development&lt;/em&gt; time.&lt;/p&gt;
&lt;p&gt;Once it's in &lt;em&gt;production&lt;/em&gt;, no matter how smelly, it's unfixable.
After all, if it got to production, &amp;quot;it ain't broke&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-lines"&gt;
&lt;h2&gt;Bottom Lines&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You already know it's broken. The brakes failed. Stop measuring
what you already know.&lt;/li&gt;
&lt;li&gt;You can only find smell by reading the code. Don't measure
hydraulic pressure in every car: find cars with mushy brakes.
Any measurement will be debated down to a subjective judgement.
A CC threshold of 10 will have exceptions. Don't waste time
creating a rule and then creating a lot of exceptions. Stop
trying to use metrics as a way to avoid thinking about the
code.&lt;/li&gt;
&lt;li&gt;You already know what else smells. The hard part is taking
action. You don't need more metrics to tell you where the costs
and risks already are. It's in production -- you have all the
history you need. A review of trouble tickets is enough.&lt;/li&gt;
&lt;li&gt;It's a human enterprise. There are too many independent
variables, stop trying to measure things you can't actually
control. You need to find the idiot who didn't fill the brake
fluid reservoir.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="numerosity"></category><category term="project management"></category></entry><entry><title>Information Technology -- It's all about Decision-Making</title><link href="https://slott56.github.io/2010_02_19-information_technology_its_all_about_decision_making.html" rel="alternate"></link><published>2010-02-19T08:00:00-05:00</published><updated>2010-02-19T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-02-19:/2010_02_19-information_technology_its_all_about_decision_making.html</id><summary type="html">&lt;p&gt;Check this SD Times article out: &lt;a class="reference external" href="http://www.sdtimes.com/link/34139"&gt;Future of data analysis lies in tools
for humans, not automatic
systems&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Andreas Weigend... said that “data is only worth as much as the
decisions made based on that data.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This is the entire point of IT: &lt;strong&gt;IT Systems Support
Decision-Making&lt;/strong&gt;. The job is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check this SD Times article out: &lt;a class="reference external" href="http://www.sdtimes.com/link/34139"&gt;Future of data analysis lies in tools
for humans, not automatic
systems&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Andreas Weigend... said that “data is only worth as much as the
decisions made based on that data.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This is the entire point of IT: &lt;strong&gt;IT Systems Support
Decision-Making&lt;/strong&gt;. The job is not to &amp;quot;automate&amp;quot; decision-making with
a bunch of business rules. The job is to create systems to support
decision-making by people. Buying a tool that allows &amp;quot;end-users&amp;quot; to
drag and drop icons to create workflows and business rules misses the
point. Automating everything isn't helpful.&lt;/p&gt;
&lt;p&gt;Information should be classified and categorized to &lt;em&gt;facilitate&lt;/em&gt;
decision-making.&lt;/p&gt;
&lt;p&gt;People need to be in the loop.&lt;/p&gt;
&lt;p&gt;Management by exception can only happen when people see the data, can
analyze, categorize, summarize and -- by manipulating the data --
discover outliers and unusual special cases.&lt;/p&gt;
&lt;p&gt;Too many systems attempt to leave people out of the loop.&lt;/p&gt;
&lt;div class="section" id="business-rules"&gt;
&lt;h2&gt;Business Rules&lt;/h2&gt;
&lt;p&gt;A canonical example of business rule processing is credit checks or
discounts in an order processing system. This requires integrating a
lot of information, and making a decision based on ordering history,
credit-worthiness, etc., etc.&lt;/p&gt;
&lt;p&gt;In some cases, the decision may be routine. But even then, it is
subject to some review to be sure that management goals &lt;em&gt;are&lt;/em&gt; being
met. Offering credit or discounts is a business strategy decision --
it has a real dollar-valued impact. A person owns this policy and
needs to be sure that it makes business sense.&lt;/p&gt;
&lt;p&gt;These decisions are &lt;strong&gt;not&lt;/strong&gt; just &amp;quot;if-statements&amp;quot; in BPML or Java or
something. They are larger than this.&lt;/p&gt;
&lt;p&gt;One good design is to queue up the requests, sorted into groups by
their relative complexity, so a person can view the queues and either
make (or confirm) the automated decisions. It's a boring job, but
they're doing management by exception. They own the problems, the
corner cases, the potential fraud cases, the suspicious cases. They
should have an incentive payment for every real problem they solve.&lt;/p&gt;
&lt;p&gt;You give up &amp;quot;real-time&amp;quot; because there's a person in the loop. For
small value, high-volume consumer purchases, you may not want a
person in the loop. Most of us, however, are not Amazon.com. Most of
us have businesses that are higher value and smaller volume. People
will look at the orders anyway.&lt;/p&gt;
&lt;p&gt;All IT Systems must facilitate and simplify manual review. Even if
they can automate, the record of the decisions made should be trivial
to review. Screen shots or log scraping or special-purpose
audit/extract programs mean the application doesn't correctly put
people into the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automated-data-mining"&gt;
&lt;h2&gt;&amp;quot;Automated&amp;quot; Data Mining&lt;/h2&gt;
&lt;p&gt;In most of the data warehousing projects I've worked on, folks have
been interested in the idea of &amp;quot;automated data mining&amp;quot; discovering
something novel in their data. For example, one of the banks I worked
with was hoping for some kind of magical analysis of risk in their
loan portfolio.&lt;/p&gt;
&lt;p&gt;Data Mining is highly constrained by the implicit causal models that
people already have. There's a philosophical issue with attempting to
correlate random numbers in a database and then trying to reason out
some theory or model for those correlations. The science of going
from observation to theory requires actual thinking. There's a long
analysis here:
&lt;a class="reference external" href="http://theoryandscience.icaap.org/content/vol9.2/Chong.html"&gt;http://theoryandscience.icaap.org/content/vol9.2/Chong.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Indeed, the only possible point of data mining is not to discover
something completely unexpected, but to confirm the details of
something suspected but hidden by noise or complexity. People
formulate models, they confirm (or reject) them with tools like a
data warehouse with some data mining analytics.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="dimensional data"></category><category term="database design"></category></entry><entry><title>Enterprise Applications (Revised)</title><link href="https://slott56.github.io/2010_02_17-enterprise_applications_revised.html" rel="alternate"></link><published>2010-02-17T15:59:00-05:00</published><updated>2010-02-17T15:59:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-02-17:/2010_02_17-enterprise_applications_revised.html</id><summary type="html">&lt;p&gt;Enterprise Applications really make people sweat. Look at this selection
of StackOverflow questions. There are hundreds. People really get worked
into a lather over this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/161991/what-makes-an-application-an-enterprise-or-enterprise-level-application"&gt;What makes an application an “enterprise” or “enterprise-level” application?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/349924/is-the-lamp-stack-appropriate-for-enterprise-use"&gt;Is the LAMP stack appropriate for Enterprise use?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/464514/what-is-enterprise-ready-can-we-test-for-it"&gt;What is “Enterprise ready”? Can we test for …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Enterprise Applications really make people sweat. Look at this selection
of StackOverflow questions. There are hundreds. People really get worked
into a lather over this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/161991/what-makes-an-application-an-enterprise-or-enterprise-level-application"&gt;What makes an application an “enterprise” or “enterprise-level” application?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/349924/is-the-lamp-stack-appropriate-for-enterprise-use"&gt;Is the LAMP stack appropriate for Enterprise use?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/464514/what-is-enterprise-ready-can-we-test-for-it"&gt;What is “Enterprise ready”? Can we test for it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/1358084/python-in-the-enterprise-pros-and-cons"&gt;Python in the enterprise: Pros and cons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's an important subtext to this. Your favorite tool
(Python, PHP, LAMP) is not Enterprise Ready. My favorite tool
is better &lt;em&gt;because&lt;/em&gt; it's Enterprise Scale.&lt;/p&gt;
&lt;p&gt;Some folks will reject the subtext and try to say that these
are reasonable questions. Until push comes to shove and no one
seems to be able to define &amp;quot;Enterprise Ready&amp;quot;. Words like
scalable and reliable crop up in vague hand-waving ways. But
without a clear yardstick for Enterprise Scale, the term has no
useful meaning.&lt;/p&gt;
&lt;p&gt;It's import to separate useful considerations from deprecating
something you don't like. In reading the Stack Overflow
questions, I've figured out what the political consideration
behind Enterprise Scale might be.&lt;/p&gt;
&lt;div class="section" id="mission-critical"&gt;
&lt;h2&gt;Mission Critical&lt;/h2&gt;
&lt;p&gt;In many cases, Enterprise-Scale is taken to mean that the
software can be trusted to handle Mission-Critical or
Business-Critical computing. Sadly, even this doesn't mean
much. Numerous businesses do bad things and yet remain in
business. For example, &lt;a class="reference external" href="http://www.informationweek.com/news/security/showArticle.jhtml?articleID=198701100"&gt;TJ Maxx suffers a huge theft of
information&lt;/a&gt;,
and they remain in business. In this case, the software that
was compromised was -- somehow -- not &lt;em&gt;actually&lt;/em&gt; business
critical. The software failed; they're still in business.&lt;/p&gt;
&lt;blockquote&gt;
[Information loss is not a zero sum game; information
compromise is not like theft of tangible goods. However,
everyone would say that credit card processing is mission
critical. Everyone.]&lt;/blockquote&gt;
&lt;p&gt;We can use words like &amp;quot;critical&amp;quot;, but actual destructive
testing -- live business, live data, live bad-guys -- showed
that is wasn't &amp;quot;critical&amp;quot;. It was central, conspicuous and
important. Based on the evidence, we need a new word, other
than &amp;quot;critical&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-definition-of-enterprise-scale"&gt;
&lt;h2&gt;Working Definition of Enterprise Scale&lt;/h2&gt;
&lt;p&gt;In talking with a sysadmin about installs, it occurred to me
what the politically-motivated definition of Enterprise Scale
is&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;The install is not &amp;quot;next-next-done&amp;quot; wizard&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Desktop and &amp;quot;departmental&amp;quot; applications have easy-to-use
installers with few options and simple configurations.
Therefore, people who don't like them can easily say their not
Enteprise Scale.&lt;/p&gt;
&lt;p&gt;Some folks aren't happy with Enterprise applications unless
they have configurations so complex and terrifying that it
takes numerous specialists (Sysadmins, DBA's, programmers,
managers, business analysts and users) to install and configure
the application.&lt;/p&gt;
&lt;p&gt;That's how some folks &lt;em&gt;know&lt;/em&gt; that a LAMP-based application
stack involving Python can't be enterprise-ready. Python and
MySQL install with &amp;quot;next-next-done&amp;quot; wizards. The application
suite installs with a few dozen easy_install steps followed by
a database build script. They will then spend hours talking
around numerous tangential, ill-defined, hard-to-clarify issues
to back up what they &lt;em&gt;know&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Anything that's simple can't scale.&lt;/p&gt;
&lt;p&gt;This is the subtext of many &amp;quot;your application or tool isn't
enterprise scale&amp;quot; arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="good-i-drop-by-here-through-keyword-sql-inj"&gt;
&lt;h2&gt;good, i drop by here through keyword &amp;quot;sql inj...&lt;/h2&gt;
&lt;p&gt;d3ck4&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-02-16 02:37:35.773000-05:00&lt;/p&gt;
&lt;p&gt;good, i drop by here through keyword &amp;quot;sql injection&amp;quot; via a service call
&amp;quot;blogger auto follow&amp;quot; im following u.. hope to see u in my followers
list soon and would love to share anything from internet, network and
information security stuff.&lt;/p&gt;
&lt;p&gt;regards,&lt;/p&gt;
&lt;p&gt;Hacking Expose! Team&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-i-started-writing-a-comment-to-your-post-b"&gt;
&lt;h2&gt;Hello, I started writing a comment to your post, b...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-02-17 06:53:29.379000-05:00&lt;/p&gt;
&lt;p&gt;Hello, I started writing a comment to your post, but it grew too much so
I thought of posting it in my blog:
&lt;a class="reference external" href="http://geekscrap.com/2010/02/what-enterprise-grade-really-means/"&gt;http://geekscrap.com/2010/02/what-enterprise-grade-really-means/&lt;/a&gt;
I would really appreciate your opinion on it :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="good-post-very-informative-glad-that-you-are-goi"&gt;
&lt;h2&gt;Good Post! Very informative, glad that you are goi...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-02-18 08:45:53.389000-05:00&lt;/p&gt;
&lt;p&gt;Good Post! Very informative, glad that you are going to continue writing
things like this!
Regards.
&lt;a class="reference external" href="http://www.cooperburns.co.uk"&gt;http://www.cooperburns.co.uk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-mistake-you-make-in-tj-maxx-39-s-case-is-assu"&gt;
&lt;h2&gt;The mistake you make in TJ Maxx&amp;amp;#39;s case is assu...&lt;/h2&gt;
&lt;p&gt;Steve&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-02-15 12:01:50.473000-05:00&lt;/p&gt;
&lt;p&gt;The mistake you make in TJ Maxx's case is assuming that data theft
deprives the original owner of a copy. Without that data their sales and
marketing operations may well have ground to a halt, but someone else
taking an illicit copy (while it *should* have been fatal if there was
any justice in the world) didn't stop them from operating.&lt;/p&gt;
&lt;p&gt;As for the rest, that would normally fall under the umbrella of &amp;quot;complex
operating environment&amp;quot;. However the Python Software Foundation has a
complex operating environment, but its applications aren't enterprise
applications.&lt;/p&gt;
&lt;p&gt;And Apache, which (on Windows at least) can be installed with a
next-next-done wizard, needs complex configuration afterwards before it
can truly be said to be operational, surely? So I am not sure how
helpful this definition will be.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Layers of Management == Layers of Veto</title><link href="https://slott56.github.io/2010_02_12-layers_of_management_layers_of_veto.html" rel="alternate"></link><published>2010-02-12T15:36:00-05:00</published><updated>2010-02-12T15:36:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-02-12:/2010_02_12-layers_of_management_layers_of_veto.html</id><summary type="html">&lt;p&gt;In an organization with more than one layer of management, the default
answer must be &amp;quot;no&amp;quot;. Folks get needlessly frustrated by this. But it's a
logical consequence of multiple layers of management.&lt;/p&gt;
&lt;p&gt;Consider that direction must come &lt;em&gt;down&lt;/em&gt; from above. If you're
suggesting something &lt;em&gt;up&lt;/em&gt; to your manager (or in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In an organization with more than one layer of management, the default
answer must be &amp;quot;no&amp;quot;. Folks get needlessly frustrated by this. But it's a
logical consequence of multiple layers of management.&lt;/p&gt;
&lt;p&gt;Consider that direction must come &lt;em&gt;down&lt;/em&gt; from above. If you're
suggesting something &lt;em&gt;up&lt;/em&gt; to your manager (or in your role as an
outsider) the response must be &amp;quot;no&amp;quot;. What you're suggesting is not
the direction that came from above.&lt;/p&gt;
&lt;p&gt;If any manager not at the top says &amp;quot;yes&amp;quot; to you -- an underling our
outsider -- they've just committed an act of insubordination to their
actual manager.&lt;/p&gt;
&lt;p&gt;All managers in positions other than the apex, must say &amp;quot;no&amp;quot; or be
insubordinate. And the top manager has &amp;quot;outside pressure&amp;quot; to say
&amp;quot;no&amp;quot;. Approval is largely impossible to obtain except at the very
top.&lt;/p&gt;
&lt;div class="section" id="variations-on-the-theme"&gt;
&lt;h2&gt;Variations on the Theme&lt;/h2&gt;
&lt;p&gt;A &amp;quot;no&amp;quot; can come in a variety of forms.&lt;/p&gt;
&lt;p&gt;For organizations that are CMM level 1, it's simply &amp;quot;no&amp;quot;, without
much justification. All ideas that didn't come down from above are
inappropriate or unfunded or simply &amp;quot;not on our radar&amp;quot;.&lt;/p&gt;
&lt;p&gt;For organizations in CMM level 2, there are more complex and
ritualistic forms of &amp;quot;no&amp;quot;. Often they are filtered by &amp;quot;if it makes
business sense.&amp;quot; However, making business sense is largely
impossible. Marketing doesn't have to jump through elaborate hoops to
justify spending money on advertising. They mostly just do using
vague back-of-the envelope justification.&lt;/p&gt;
&lt;p&gt;For CMM level 3 or higher organizations, there's an approval
&lt;em&gt;process&lt;/em&gt;, that will net a big old &amp;quot;no&amp;quot; after a lot of work following
the defined process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-gets-done"&gt;
&lt;h2&gt;What Gets Done?&lt;/h2&gt;
&lt;p&gt;Generally, ideas that come down from the top have a pre-approved
&amp;quot;yes&amp;quot;. After all, what comes from above was already in this year's
budget. It was scheduled for this year. The schedule is sacred.&lt;/p&gt;
&lt;p&gt;In a CMM 1 organization, you just do what you're told. In CMM 2
organization, there's some kind of &amp;quot;management&amp;quot; veneer wrapped around
the word from on high. In CMM 3 organizations, there's a process to
rubber-stamp the stuff that's trickles down from the top to be rubber
stamped.&lt;/p&gt;
&lt;p&gt;Process doesn't always help. Projects that are ill-defined -- but a
pet project of a development director or CIO -- will still be vetted
and approved. Projects that come from outside IT are often &amp;quot;more
valuable&amp;quot; and get more ready approval, even though there are no more
details in those project descriptions.&lt;/p&gt;
&lt;p&gt;Projects that bubble up from below, however, have to be be rejected.
They weren't in the budget.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fixing-the-approval-process"&gt;
&lt;h2&gt;Fixing The Approval Process&lt;/h2&gt;
&lt;p&gt;You pretty much can't fix the approval process. Taking things
upstairs to your manager is -- generally -- insubordination. You
weren't told to do it, so you're wasting your time, time that could
be spent on things that were in the budget for this year.&lt;/p&gt;
&lt;p&gt;You can be lucky enough to work for an organization that has little
or no management. Such &amp;quot;entrepreneurial&amp;quot; organizations are
characterized by more &amp;quot;yes&amp;quot; than &amp;quot;no&amp;quot;; more importantly an
entrepreneurial simply has very little management. (Nothing is
funnier than training managers to be entrepreneurial. You want
entrepreneurial? Make the managers actually write code.)&lt;/p&gt;
&lt;p&gt;The only thing you can do in a large organization is to take
hostages. If it's a good enough idea, you have to start doing it
anyway. Once people catch you at it, then you have to explain what a
good idea it it. It will be an uphill fight all the way. No one will
ever &amp;quot;greenlight&amp;quot; your idea.&lt;/p&gt;
&lt;p&gt;If you're doing the right thing, it may be a struggle, and you will
be in trouble until it appears in next year's budget. Then someone
else will be assigned to it.&lt;/p&gt;
&lt;p&gt;Interestingly, it more-or-less must work this way. Sadly, smart
technical people are often unhappy with this. They either don't want
to fight for their ideas, or fight too stridently for them. There's a
happy medium in the middle of pushing a good idea without alienating
managers that are forced to reject what is obviously a good idea.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Controlling the Message</title><link href="https://slott56.github.io/2010_02_09-controlling_the_message.html" rel="alternate"></link><published>2010-02-09T06:50:00-05:00</published><updated>2010-02-09T06:50:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-02-09:/2010_02_09-controlling_the_message.html</id><summary type="html">&lt;p&gt;I finally figured out what is so bad about folks who need to &amp;quot;control
the message.&amp;quot;&lt;/p&gt;
&lt;p&gt;Architecture is as much politics as technology. And some folks think
that political spin and message control is required. I think it's a
mistake because the urge to control the message points up a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I finally figured out what is so bad about folks who need to &amp;quot;control
the message.&amp;quot;&lt;/p&gt;
&lt;p&gt;Architecture is as much politics as technology. And some folks think
that political spin and message control is required. I think it's a
mistake because the urge to control the message points up a deeper
problem with the message itself.&lt;/p&gt;
&lt;p&gt;Here's one of many examples of architecture being as much politics as
technology.&lt;/p&gt;
&lt;p&gt;A really good platform for web development is Linux, Apache, MySQL,
Python, Django and mod_wsgi. Really good. Inexpensive, scalable,
simple, and reliable. Standards-compliant.&lt;/p&gt;
&lt;p&gt;However, when a client asks what they should use, that's almost never
an acceptable answer. If the client is a VB/ASP shop, you can't tell
them to ditch their installed technology. You can suggest looking at
C# and ASPX and .NET, but even that simple change is going to get you
into arguments over the upgrade costs. Many times customers just want
Pixie Dust that magically makes things &amp;quot;better&amp;quot; without being a
disruptive change.&lt;/p&gt;
&lt;p&gt;(&amp;quot;What about the personnel cost of a change? You can't ignore the
people&amp;quot; Yes, actually, I can. Those people where &lt;strong&gt;not&lt;/strong&gt; considered
when VB and ASP were introduced. If they were, they'd still be using
COBOL and CICS. Why consider them now when it's time to make another
change? The &amp;quot;personnel cost&amp;quot; question is an excuse to veto change.
The people will be more productive using C#. Start changing, stop
preventing.)&lt;/p&gt;
&lt;div class="section" id="right-vs-wrong"&gt;
&lt;h2&gt;Right vs. Wrong&lt;/h2&gt;
&lt;p&gt;I've been told that politics comes first when making a technical
decision. That's perhaps the dumbest, most defeatist attitude I've
ever heard (and I told them that, more than once.) There &lt;strong&gt;are&lt;/strong&gt;
right answers. There are -- in some cases -- answers that are
&lt;em&gt;absolutely&lt;/em&gt; right, but a political problem.&lt;/p&gt;
&lt;p&gt;Anyone who puts politics first rejects the opportunity to know what's
right. It's essential to have facts and evidence for the technically
right answer, even if you never use those facts, and simply accept
the politically-determined sub-optimal answer.&lt;/p&gt;
&lt;p&gt;And there's no reason to be a jerk about political decisions. They
may be bad decisions made for political reasons. They may be good
decisions made for the wrong reasons. Your hard-won technical input
may get disregarded. Publish your findings and move on.&lt;/p&gt;
&lt;p&gt;My number one example of this is the slowness of most stored
procedure languages. Benchmarks reveal that they're slow when
compared with Java or even Python. That shouldn't be a surprise, but
the politically-motivated response is that Stored Procedures &lt;em&gt;have&lt;/em&gt; a
place and &lt;em&gt;will&lt;/em&gt; be used in spite of the problems. Politics trumps
technology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="controlling-the-message-1"&gt;
&lt;h2&gt;Controlling the Message&lt;/h2&gt;
&lt;p&gt;In my trips to the top of the IT food chain -- the CIO's office -- it
seems like everything is political. It may not be, but the technical
content is approximately zero and is often diluted by the political
considerations of influence, favors and power.&lt;/p&gt;
&lt;p&gt;I'm sure this is sampling bias. I don't meet a lot of CIO's. And I
don't meet them to talk about things on which they are already deeply
knowledgeable. I'm there because folks are lost and struggling.&lt;/p&gt;
&lt;p&gt;The thing I like least, however, is any &amp;quot;Controlling the Message&amp;quot;
part of the discussion. It happens in governmental politics as much
as it happens in technology. In government, it's particularly odious.
Elected officials often have separate public and private messages.
They have a public message that is nothing more than pandering to the
&amp;quot;shouting class&amp;quot; at the party fringe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-control-it"&gt;
&lt;h2&gt;Why Control It?&lt;/h2&gt;
&lt;p&gt;Here's my lesson learned. If you need to control the message, then
the message itself is flawed.&lt;/p&gt;
&lt;p&gt;If the communication &amp;quot;requires appropriate background&amp;quot;, or if the
remarks &amp;quot;could be misinterpreted if taken out of context&amp;quot;, then the
message is inappropriate or -- perhaps -- wrong.&lt;/p&gt;
&lt;p&gt;Here's an example. We're talking about teaching C programming. The
customer says &amp;quot;We're not planning on re-educating a lot of our
existing staff, we're mostly going to train the new hires.&amp;quot; This
message needed to be &amp;quot;controlled&amp;quot;.&lt;/p&gt;
&lt;p&gt;Why can't we simply say that we're going to teach C to new hires?&lt;/p&gt;
&lt;p&gt;Because that message is fundamentally flawed. So it needs to be
controlled to hide the flaws.&lt;/p&gt;
&lt;p&gt;If you think you need to control your message, take the hint and
rethink your message.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>ALM Tools</title><link href="https://slott56.github.io/2010_02_04-alm_tools.html" rel="alternate"></link><published>2010-02-04T08:00:00-05:00</published><updated>2010-02-04T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-02-04:/2010_02_04-alm_tools.html</id><summary type="html">&lt;p&gt;There's a Special Report in the January 15 SDTimes with a headline that
bothers me -- a lot. In the print edition, it's called &amp;quot;Can ALM tame the
agile beast?&amp;quot;. Online it's &lt;a class="reference external" href="http://www.sdtimes.com/ALM_TOOLS_EVOLVE_IN_FACE_OF_AGILE_PROCESSES/By_Jeff_Feinman/About_AGILE_and_ALM/34058"&gt;ALM Tools Evolve in the Face of Agile
Processes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The online title makes a lot more sense than the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's a Special Report in the January 15 SDTimes with a headline that
bothers me -- a lot. In the print edition, it's called &amp;quot;Can ALM tame the
agile beast?&amp;quot;. Online it's &lt;a class="reference external" href="http://www.sdtimes.com/ALM_TOOLS_EVOLVE_IN_FACE_OF_AGILE_PROCESSES/By_Jeff_Feinman/About_AGILE_and_ALM/34058"&gt;ALM Tools Evolve in the Face of Agile
Processes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The online title makes a lot more sense than the print title. The
print title is very disturbing. &amp;quot;Agile Beast?&amp;quot; Is Agile a bad thing?
Is it somehow out of control? It needs to be &amp;quot;tamed&amp;quot;?&lt;/p&gt;
&lt;p&gt;The article makes the case -- correctly -- that ALM tools are biased
toward waterfall projects with (a) long lead times, (b) a giant drop
of deliverables, and (c) a sudden ending. Agile projects often lack
these attributes.&lt;/p&gt;
&lt;p&gt;The best part of the special report is the acknowledgement that
&amp;quot;barriers between developers and QA are disappearing&amp;quot;. TDD works to
blur the distinction between test and development, which is a very
good thing. Without unit tests, how do you know you're finished
coding?&lt;/p&gt;
&lt;div class="section" id="how-many-tools-do-we-need"&gt;
&lt;h2&gt;How Many Tools Do We Need?&lt;/h2&gt;
&lt;p&gt;The point in the article was that the ALM vendors have created a
collection of tools, each of which seems like a good idea. However,
it's too much of the wrong thing for practical, Agile, project
management.&lt;/p&gt;
&lt;p&gt;The article claims that there were three tools for requirements,
tests and defects. I've seen organizations with wishlists that are
much bigger than these three. The &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Application_lifecycle_management#Categories_of_ALM_tools"&gt;Wikipedia ALM
Article&lt;/a&gt;
has an insane list of 16 tools (with some overlaps).&lt;/p&gt;
&lt;p&gt;Of these, we can summarize them into the following eight categories,
based on the kind of information kept. Since the boundaries are
blurry, it isn't sensible to break these up by who uses them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Requirements - in user terms; the &amp;quot;what&amp;quot;&lt;/li&gt;
&lt;li&gt;Modeling and Design - in technical terms; an overview of &amp;quot;how&amp;quot;&lt;/li&gt;
&lt;li&gt;Project Management (backlog, etc.) - requirements and dates&lt;/li&gt;
&lt;li&gt;Configuration Management - technology components&lt;/li&gt;
&lt;li&gt;Build Management - technology components&lt;/li&gt;
&lt;li&gt;Testing - components, tests (and possibly requirements)&lt;/li&gt;
&lt;li&gt;Release and Deployment - more components&lt;/li&gt;
&lt;li&gt;Bug, Issue and Defect Tracking - user terms, requirements, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agile methods can remove the need for most (but not all) of these
categories of tools. If the team is small, and really collaborating
with the users, then there isn't the need to capture a mountain of
details as well as complex management overviews for slice-and-dice
reporting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="yagni"&gt;
&lt;h2&gt;YAGNI&lt;/h2&gt;
&lt;p&gt;Here's a list of tools that shouldn't be necessary -- if you're
collaborating.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Requirements&lt;/strong&gt; have an overview in the backlog, on the
scrumboard. Details can be captured in text documents written
using simple markup like RST or Markdown. You don't need much
because this is an ongoing conversation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modeling and Design&lt;/strong&gt; is a mixture of UML pictures and narrative
text. Again, simpler tools are better for this. Tool integration
can be accomplished with a simple web site of entirely static
content showing the current state of the architecture and any
detail designs need to clarify the architecture. Write in RST,
build it with &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Management&lt;/strong&gt; should be simply the backlog. This is
digested into periodic presentations to various folks outside the
scrum team. There isn't much that can be automated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For UML pictures, &lt;a class="reference external" href="http://argouml.tigris.org/"&gt;ARGO UML&lt;/a&gt; is very
nice. Here's a more complete list of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_Unified_Modeling_Language_tools#Open_Source"&gt;Open Source UML
Tools&lt;/a&gt;
from Wikipedia.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-management"&gt;
&lt;h2&gt;Configuration Management&lt;/h2&gt;
&lt;p&gt;This is, perhaps, the single most important tool. However, there are
two parts to this discipline.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Source Code Control, sometimes called Revision Control. See the
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_revision_control_software"&gt;Comparison of Revision Control
Software&lt;/a&gt;
page for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Software Configuration Management; the actual deployment of
assets. See the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_open_source_configuration_management_software"&gt;Comparison of Configuration Management
Software&lt;/a&gt;
page for more information.&lt;/p&gt;
&lt;p&gt;For Revision Control,
&lt;a class="reference external" href="http://subversion.apache.org/"&gt;Subversion&lt;/a&gt; works very nicely.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="continuous-integration"&gt;
&lt;h2&gt;Continuous Integration&lt;/h2&gt;
&lt;p&gt;The more interesting tools fall under the cover of &amp;quot;Continuous
Integration&amp;quot;. Mostly, however, this is just automation of some common
tasks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Build Management&lt;/strong&gt; might be interesting for complex, statically
compiled applications. Use of a dynamic language (e.g., Python)
can prevent this. Build management should be little more than
&lt;a class="reference external" href="http://ant.apache.org/"&gt;Ant&lt;/a&gt;,
&lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; or
&lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additional tools include the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Build_automation#Software_tools"&gt;Build
Automation&lt;/a&gt;
list of tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Testing&lt;/strong&gt; is part of the daily build as well as each developer's
responsibility. It should be part of the nightly build, and is
simply a task in the build script.&lt;/p&gt;
&lt;p&gt;Overall integration or acceptance testing, however, might require
some additional tools to exercise the application and confirm that
some suite of requirements are met. It may be necessary to have a
formal match-up between user stories and acceptance tests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There's a Wikipedia article with &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Software_Testing#Testing_Tools"&gt;Testing
Tools&lt;/a&gt;
and &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Automated_testing"&gt;Automated
Testing&lt;/a&gt;. Much
of this is architecture-specific, and it's difficult to locate a
generic recommendation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Release and Deployment&lt;/strong&gt; can be complex for some architectures.
The article on &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Software_deployment"&gt;Software
Deployment&lt;/a&gt;
doesn't list any tools. Indeed, it says &amp;quot;Because every software
system is unique, the precise processes or procedures within each
activity can hardly be defined.&amp;quot;&lt;/p&gt;
&lt;p&gt;Something that's important is a naming and packaging standard,
similar to that used by RPM's or Python .egg files. It can be
applied to Java .EAR/.WAR/.JAR files. Ideally, the installed
software sits in a standard directory (under /opt) and a
configuration file determines which version is used for
production.&lt;/p&gt;
&lt;p&gt;Perhaps most important is the asset tracking, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Configuration_management"&gt;configuration
management&lt;/a&gt;
aspect of this. We need to plan and validate what components are
in use in what locations. For this
&lt;a class="reference external" href="http://trac.mcs.anl.gov/projects/bcfg2/"&gt;BCFG2&lt;/a&gt; seems to
embody a sensible approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For most build, test and release automation, SCons is sufficient.
It's easily extended and customized to include testing.&lt;/p&gt;
&lt;p&gt;More elaborate tools are listed in the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Continuous_integration#Software"&gt;Continuous
Integration&lt;/a&gt;
article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customer-relationship-management"&gt;
&lt;h2&gt;Customer Relationship Management&lt;/h2&gt;
&lt;p&gt;The final interesting category isn't really technical. It includes
tools for &lt;strong&gt;Bug, Issue and Defect Tracking&lt;/strong&gt;. This is about being
responsive to customer requests for bug fixes and enhancements.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Comparison_of_issue_tracking_systems"&gt;Comparison of Issue Tracking
Systems&lt;/a&gt;
article lists a number of products.
&lt;a class="reference external" href="http://www.bugzilla.org/"&gt;Bugzilla&lt;/a&gt; is typical, and probably does
everything one would actually require.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="old-and-busted"&gt;
&lt;h2&gt;Old and Busted&lt;/h2&gt;
&lt;p&gt;I've seen organizations actively reject requirements management tools
and use unstructured documents because the tool (&lt;a class="reference external" href="http://www.ibm.com/software/awdtools/reqpro/"&gt;Requisite
Pro&lt;/a&gt;) imposed too
many constraints on how requirements could be formalized and
analyzed.&lt;/p&gt;
&lt;p&gt;This was not a problem with tool at all. Rather, the use of a
requirements management tool exposes serious requirements analysis
and backlog management issues. The tool had to be dropped. The excuse
was that it was &amp;quot;cumbersome&amp;quot; and didn't add value.&lt;/p&gt;
&lt;blockquote&gt;
[This same customer couldn't use Microsoft Project, either, because
it &amp;quot;didn't level the resources properly.&amp;quot; They consistently
overbooked resources and didn't like the fact that this made the
schedule slip.]&lt;/blockquote&gt;
&lt;p&gt;When asked about requirements tools, I suggest people look at blog
entries like this one on &lt;a class="reference external" href="http://www.agile-software-development.com/2007/10/how-to-implement-scrum-in-10-easy-steps_16.html"&gt;Create a Collaborative
Workspace&lt;/a&gt;
or these pictures of a well-used
&lt;a class="reference external" href="http://www.xqa.com.ar/visualmanagement/tag/scrumboard/"&gt;scrumboard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Too much software can become an impediment. The point of Agile is to
collaborate, not use different tools. Software tools can (and do)
enforce a style of work that may not be very collaborative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Starting from the ALM overview, there are potentially a lot of tools.&lt;/p&gt;
&lt;p&gt;Apply Agile methods and prune away some of the tools. You'll still
want some design tools to help visualize really complex
architectures. Use Argo UML and plain text.&lt;/p&gt;
&lt;p&gt;Developers need source code revision control. Use Subversion.&lt;/p&gt;
&lt;p&gt;Most everything else will devolve to &amp;quot;Continuous Integration&amp;quot;, which
is really about Build and Test, possibly Release. SCons covers a lot
of bases.&lt;/p&gt;
&lt;p&gt;You have some asset management issues (what is running where?)
There's a planning side of this as well as an inventory side of
confirming the configuration. Use BCFG2.&lt;/p&gt;
&lt;p&gt;And you have customer relationship management issues (what would you
like to see changed?) Use Bugzilla.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="toyata-computer-addled-design-impractical-to"&gt;
&lt;h2&gt;Toyata: Computer-Addled Design? ... impractical to...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-02-04 21:29:07.184000-05:00&lt;/p&gt;
&lt;p&gt;Toyata: Computer-Addled Design? ... impractical to expect any company to
develop products that have zero defects ... what we need is very agile
in detecting and responding to events ...
&lt;a class="reference external" href="http://www.forbes.com/2010/02/02/toyota-recall-pedal-business-autos-virtual.html"&gt;http://www.forbes.com/2010/02/02/toyota-recall-pedal-business-autos-virtual.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manual-processes-of-attending-projects-can-create"&gt;
&lt;h2&gt;Manual processes of attending projects can create ...&lt;/h2&gt;
&lt;p&gt;protein powder&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-15 07:24:15.048000-04:00&lt;/p&gt;
&lt;p&gt;Manual processes of attending projects can create major problems
sometimes due to lack of accuracy. In web based &lt;a class="reference external" href="http://www.project-drive.net/"&gt;Project Management
Software&lt;/a&gt;, all the errors can be
removed easily and apart from that you can track and record all of your
jobs. Even companies can customize project management software as per
their requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="project-teams-often-require-coordination-of-activi"&gt;
&lt;h2&gt;Project teams often require coordination of activi...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-16 06:51:26.375000-04:00&lt;/p&gt;
&lt;p&gt;Project teams often require coordination of activities, resources,
equipment, and information. To satisfy this need the project coordinator
functions in their primary role. Any coordination issues which cannot be
resolved are elevated to the project manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="most-everything-else-will-devolve-to-quot-continu"&gt;
&lt;h2&gt;Most everything else will devolve to &amp;amp;quot;Continu...&lt;/h2&gt;
&lt;p&gt;protein powder&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-06-18 06:39:47.555000-04:00&lt;/p&gt;
&lt;p&gt;Most everything else will devolve to &amp;quot;Continuous Integration&amp;quot;, which is
really about Build and Test, possibly Release. SCons covers a lot of
bases.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="configuration management"></category><category term="agile"></category></entry><entry><title>Project Narrative Arc -- Is there a "middle"?</title><link href="https://slott56.github.io/2010_02_01-project_narrative_arc_is_there_a_middle.html" rel="alternate"></link><published>2010-02-01T08:00:00-05:00</published><updated>2010-02-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-02-01:/2010_02_01-project_narrative_arc_is_there_a_middle.html</id><summary type="html">&lt;p&gt;See Paul Glen's opinion piece on &lt;a class="reference external" href="http://www.computerworld.com/s/article/346443/Projects_and_the_Ungrounded_Middle"&gt;Projects and the Ungrounded
Middle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's a subtle issue here that bothers me. It's the phony narrative
arc imposed on a project.&lt;/p&gt;
&lt;p&gt;Glen says that &amp;quot;managers talk about beginnings and endings&amp;quot;. This is
a -- potentially -- phony narrative arc we're told to wrap around a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Paul Glen's opinion piece on &lt;a class="reference external" href="http://www.computerworld.com/s/article/346443/Projects_and_the_Ungrounded_Middle"&gt;Projects and the Ungrounded
Middle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's a subtle issue here that bothers me. It's the phony narrative
arc imposed on a project.&lt;/p&gt;
&lt;p&gt;Glen says that &amp;quot;managers talk about beginnings and endings&amp;quot;. This is
a -- potentially -- phony narrative arc we're told to wrap around a
project. Some projects are small, clear and have more-or-less
definite beginnings.&lt;/p&gt;
&lt;p&gt;Glen also says that &amp;quot;The beginnings are abstract and ambiguous&amp;quot;. This
is a more useful reality. The project's official &amp;quot;beginning&amp;quot; is
unrelated to the conversations and decisions in which it actually
began.&lt;/p&gt;
&lt;div class="section" id="details-details"&gt;
&lt;h2&gt;Details Details&lt;/h2&gt;
&lt;p&gt;The biggest issue with the imposed narrative arc is that it is a
distortion of the real beginning of the project. See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2010_01_28-aristotles_poetics_and_project_management.html"&gt;Aristotle's
Poetics and Project
Management&lt;/a&gt;&amp;quot;
The official beginning, the kick-off meeting, and the official
project charter may not match the real situation as understood by
accounting (in paying for the project) or the users (in having
expectations) or the product owner (in prioritizing the sprints).&lt;/p&gt;
&lt;p&gt;It's risky trying to impose a definite start and charter on a
project. It's likely to be wrong; at the very least it can be
misleading.&lt;/p&gt;
&lt;p&gt;The details matter, and imposing a phony narrative arc can elide or
obscure the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-practice"&gt;
&lt;h2&gt;Better Practice&lt;/h2&gt;
&lt;p&gt;Background and context leading up to a project are very, very
important and shouldn't be elided. While &lt;em&gt;every&lt;/em&gt; little detail in the
entire lead-up to a project isn't helpful, what is interesting is
changing the concept of &lt;em&gt;inception&lt;/em&gt; of a project.&lt;/p&gt;
&lt;p&gt;From the first conversations, we should stop looking at all projects
as discrete, unified things with a Beginning, Middle and End. Some
projects may be discrete, but many software development projects will
have a large backlog, numerous deliverables, constant upgrades,
improvements and &amp;quot;maintenance&amp;quot; and will be a career move more than a
project.&lt;/p&gt;
&lt;p&gt;We have to realize that the very first, preliminary conversations
about software involve a prioritized backlog of feature requests.&lt;/p&gt;
&lt;p&gt;Later, when we try to impose our standard narrative framework, and
have a kick-off meeting, we already understand the project as a
series of sprints to build some things. The &amp;quot;deliverables&amp;quot; are ranked
from most valuable to least valuable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="don-t-create-a-middle"&gt;
&lt;h2&gt;Don't Create a Middle&lt;/h2&gt;
&lt;p&gt;Honesty about the lack of a clear start allows us -- from the very
beginning -- more latitude to rethink and re-prioritize. There is no
separate moment when clarity sets in. It was always clear that the
end-state was &amp;quot;enough&amp;quot; software, not &amp;quot;all of these features and
nothing but these features&amp;quot;. We avoid the ungrounded middle, and it's
emotional low-point.&lt;/p&gt;
&lt;p&gt;We avoid the ungrounded middle because we don't impose a phony
narrative arc on the enterprise. We can be much more clear that we're
involved in a sequence of sprints. We can pace ourselves for the long
haul.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Aristotle's Poetics and Project Management</title><link href="https://slott56.github.io/2010_01_28-aristotles_poetics_and_project_management.html" rel="alternate"></link><published>2010-01-28T08:00:00-05:00</published><updated>2010-01-28T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-28:/2010_01_28-aristotles_poetics_and_project_management.html</id><summary type="html">&lt;p&gt;It can be a fatal mistake to impose a story arc on a project.&lt;/p&gt;
&lt;p&gt;Aristotle's
&lt;a class="reference external" href="http://classics.mit.edu/Aristotle/poetics.html"&gt;Poetics&lt;/a&gt; is a
commentary on drama, in which he identified two story arcs that are
sure-fire hits: Big Man Brought Down, and Small Man Lifted Up. These
are the standard &amp;quot;Change in Fortune&amp;quot; story lines …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It can be a fatal mistake to impose a story arc on a project.&lt;/p&gt;
&lt;p&gt;Aristotle's
&lt;a class="reference external" href="http://classics.mit.edu/Aristotle/poetics.html"&gt;Poetics&lt;/a&gt; is a
commentary on drama, in which he identified two story arcs that are
sure-fire hits: Big Man Brought Down, and Small Man Lifted Up. These
are the standard &amp;quot;Change in Fortune&amp;quot; story lines that we like.&lt;/p&gt;
&lt;p&gt;Most movies in the category called &amp;quot;westerns&amp;quot; have elements of
both. When we look at a movie like &amp;quot;Who Shot Liberty Valance&amp;quot;, we
see both changes in fortune intertwined in this story.&lt;/p&gt;
&lt;p&gt;Movies, further, have a well-defined three-act structure with an
opening that introduces characters, context and the dramatic
situations. Within the first minutes of the film, there will be
some kind of initiating incident that clarifies the overall
conflict and sets up the character's goals. We can call this the
narrative framework. Or a story design pattern.&lt;/p&gt;
&lt;div class="section" id="project-narrative"&gt;
&lt;h2&gt;Project Narrative&lt;/h2&gt;
&lt;p&gt;A &amp;quot;project&amp;quot; -- in principle -- has a narrative arc, much like a
movie. Walker Royce (&lt;a class="reference external" href="http://www.amazon.com/Software-Project-Management-Unified-Framework/dp/0201309580"&gt;Project Management: A Unified
Framework&lt;/a&gt;)
breaks big waterfall-like projects into four acts (or &amp;quot;phases&amp;quot;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Inception&lt;/li&gt;
&lt;li&gt;Elaboration&lt;/li&gt;
&lt;li&gt;Construction&lt;/li&gt;
&lt;li&gt;Transition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even if done in a spiral, instead of a waterfall, these are the
acts in the narrative between the opening &amp;quot;Fade In:&amp;quot; and the
closing credits.&lt;/p&gt;
&lt;p&gt;In some cases, folks will try to impose this four-act structure on
an otherwise Agile method. It's often a serious mistake to attempt
to impose this convention of fiction on reality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-that-don-t-exist"&gt;
&lt;h2&gt;Things That Don't Exist&lt;/h2&gt;
&lt;p&gt;One of the most important parts of the narrative arc is
&amp;quot;inception&amp;quot;. Every story has a &amp;quot;beginning&amp;quot;.&lt;/p&gt;
&lt;p&gt;Projects, however, do not always have a clear beginning. They can
have a &amp;quot;kick-off&amp;quot; meeting, but that's only a fictionalized
beginning. Work began long before the kick-off meeting. Often, the
kick-off is just a one small part of Inception.&lt;/p&gt;
&lt;p&gt;Some projects will have a well-defined narrative structure.
Projects labeled &amp;quot;strategic&amp;quot;, however, do not ever have this
structure. They can't.&lt;/p&gt;
&lt;p&gt;For large projects, something happened before &amp;quot;inception&amp;quot;; this is
a real part of the project. The fiction is that the project
somehow begins with the inception phase. This narrative framework
is simply wrong; the folks that helped plan and execute inception
know this thing that filmmakers call &amp;quot;back story&amp;quot;. This
pre-inception stuff is a first-class part of the project, even
though it's not an official part of the narrative framework.&lt;/p&gt;
&lt;p&gt;Even if you have an elaborate governance process for projects,
there's a lot that happens before the first governance tollgate.
In really dysfunctional organizations, there can be a two-tiered
inception, where there's a big project to gather enough
information to justify the project governance meeting to justify
the rest of the work. The &amp;quot;rest of the work&amp;quot; -- the real project
-- starts with an &amp;quot;inception&amp;quot; effort that's a complete
falsification. It has to ignore (or at best summarize) the stuff
that happened prior to inception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-price-of-ignorance"&gt;
&lt;h2&gt;The Price of Ignorance&lt;/h2&gt;
&lt;p&gt;The Narrative Arc of a project requires us to collect things into
an official Inception or story setup. It absolutely requires that
we discard things that happened before inception.&lt;/p&gt;
&lt;p&gt;Here's what happens.&lt;/p&gt;
&lt;p&gt;Users say they want something. &amp;quot;Automated customer name
resolution&amp;quot;. Something that does an immediate one-click credit
check on prospective B2B e-commerce customers.&lt;/p&gt;
&lt;p&gt;In order to justify the project, we do some preliminary work. We
talk to our vendors and discover that business names are always
ambiguous, and there's no such thing as one-click resolution. So
we write sensible requirements. Not the user's original dream.&lt;/p&gt;
&lt;p&gt;We have a kick-off meeting for a quick, three-sprint project. We
have one user story that involves two multi-step alternative
scenarios. We have some refactoring in the first sprint, then
we'll build one scenario for the most-common case, then the other
scenario for some obscure special cases.&lt;/p&gt;
&lt;p&gt;When we get ready for release, the customer asks about the
one-click thing.&lt;/p&gt;
&lt;p&gt;&amp;quot;What one-click thing?&amp;quot; we ask.&lt;/p&gt;
&lt;p&gt;&amp;quot;I always understood that this would be one-click,&amp;quot; the customer
says.&lt;/p&gt;
&lt;p&gt;&amp;quot;Do you recall the project governance meetings, the signed-off
requirements and the kick-off meeting? You were there. We walked
through the story and the scenarios. There can't be one-click.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="communicate-more-hardly"&gt;
&lt;h2&gt;Communicate More? Hardly&lt;/h2&gt;
&lt;p&gt;What can be done to &amp;quot;prevent&amp;quot; this? Essentially, nothing.&lt;/p&gt;
&lt;p&gt;The standard project narrative framework -- start, work, finish --
or perhaps inception, elaboration, construction, transition --
doesn't actually exist.&lt;/p&gt;
&lt;p&gt;Stuff happened &amp;quot;before&amp;quot; the start is part of the project. We can
claim (or hope) that it doesn't exist, but it really does. We can
claim that a project has a &amp;quot;start&amp;quot;, but it doesn't. It sort of
eases into being based on lots of preliminary conversations.&lt;/p&gt;
&lt;p&gt;When the users asked for &amp;quot;one click&amp;quot;, it was a result of several
other conversations that happened before going to the business
analyst to ask for the additional feature.&lt;/p&gt;
&lt;p&gt;Indeed, the &amp;quot;one click&amp;quot; was a compromise (of sorts) reached
between a bunch of non-IT people having a conversation prior to
engaging the business analyst to start the process of starting the
project. All of that back story really is part of the project,
irrespective of the requirements of the project's standard
narrative structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Poetics don't apply to large, strategic projects. A project is a
subtle and complex thing. There's no tidy narrative arc. Backstory
matters; it can't be summarized out of existence with a kick-off
slide show.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="project management"></category></entry><entry><title>Map-Reduce, Python and Named Tuples</title><link href="https://slott56.github.io/2010_01_25-map_reduce_python_and_named_tuples.html" rel="alternate"></link><published>2010-01-25T07:44:00-05:00</published><updated>2010-01-25T07:44:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-25:/2010_01_25-map_reduce_python_and_named_tuples.html</id><summary type="html">&lt;p&gt;A year and change back, I wrote this on &amp;quot;&lt;a class="reference external" href="http://homepage.mac.com/s_lott/iblog/architecture/C551260341/E20081005191603/index.html"&gt;Exploratory
Programming&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;It turns out that it was a mistake. While the subclass-expansion
technique is a cool way to bang out a program incrementally, in the
long run, the subclassing is ill-advised.&lt;/p&gt;
&lt;p&gt;The more I look at Python generator functions and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A year and change back, I wrote this on &amp;quot;&lt;a class="reference external" href="http://homepage.mac.com/s_lott/iblog/architecture/C551260341/E20081005191603/index.html"&gt;Exploratory
Programming&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;It turns out that it was a mistake. While the subclass-expansion
technique is a cool way to bang out a program incrementally, in the
long run, the subclassing is ill-advised.&lt;/p&gt;
&lt;p&gt;The more I look at Python generator functions and the idea of using
Map-Reduce, the more I realize that Visitors and Subclass Extension
are not the best design pattern. The same kind of exploration can be
done with map-reduce techniques, and the resulting application is
slightly simpler.&lt;/p&gt;
&lt;div class="section" id="design-coupling"&gt;
&lt;h2&gt;Design Coupling&lt;/h2&gt;
&lt;p&gt;The problem with design-by-subclass is that the map and reduce
operations are often defined relatively informally. After all,
they're just method invocations within the same class. You can,
unthinkingly, create obscure dependencies and assumptions. This can
make the Visitor rather complex or make subclass features hard to
refactor into the Visitor.&lt;/p&gt;
&lt;p&gt;As a concrete example, we have an application that processes
directories of files and file archives (ZIP and TAR) of workbooks
with multiple sheets. All of this nesting merely wraps a source of
spreadsheet rows. This should be a collection of simple nested map
operations to transform directories, files, archives of files, etc.,
into a spreadsheet row source.&lt;/p&gt;
&lt;p&gt;Part way through our class hierarchy, however, a subclass introduced
a stateful object that other method functions could use. However,
when we tried to refactor things into a simple Visitor to visit all
of the workbooks (ignoring all the directory, archive and file
structure), we worked around the hidden stateful object without
realizing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="named-tuples-and-immutability"&gt;
&lt;h2&gt;Named Tuples and Immutability&lt;/h2&gt;
&lt;p&gt;A much cleaner solution is to make use of Python's
&lt;a class="reference external" href="http://docs.python.org/dev/library/collections.html#collections.namedtuple"&gt;namedtuple&lt;/a&gt;
constructor and write generator functions which map one kind of
namedtuple to another kind of namedtuple. This has the advantage that
-- unless you've done something really bad -- you should be able to
pickle and unpickle each tuple, easily seeding a multi-processing
pipeline. Maximal concurrency, minimal work.&lt;/p&gt;
&lt;p&gt;Each stage in a map-reduce pipeline can have the following form.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SomeResult = namedtuple('SomeResult',['a','b','c'])
for x in someSource():
    assert isinstance( x, SomeSource )
    yield SomeResult( some transformation of x )
&lt;/pre&gt;
&lt;p&gt;The assertion should be obvious from inspection of the someSource
function. It's provided here because it's essential to creating
map-reduce pipelines that work. It's better to prove that the
assertion true through code inspection and comment out the assert
statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pipelining"&gt;
&lt;h2&gt;Pipelining&lt;/h2&gt;
&lt;p&gt;What pops out of this are stateless objects. Since named tuples are
immutable, it appears that we've done some purely functional
programming without really breaking a sweat.&lt;/p&gt;
&lt;p&gt;Further, we can see our way toward encapsulating a generator function
and it's resulting namedtuple as a single MapReduce object. The
assertion can then be plucked out of the loop and refactored into a
pipeline manager.&lt;/p&gt;
&lt;p&gt;This might give us several benefits.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A way to specify a pipeline as a connected series of generator
functions. E.g., Pipeline( generator_1, map_2, map_3, reduce_4 ).&lt;/li&gt;
&lt;li&gt;Inspection of the pipeline to be sure that constraints will be
met. The head of the pipeline has a resulting type, all other
stages have an required source type and a result type. Since
they're named tuples we only care that the required attributes are
a subset of the previous stage's result attributes.&lt;/li&gt;
&lt;li&gt;Implementation through injection of a pickle/unpickle wrapper
around each stage.&lt;/li&gt;
&lt;li&gt;Distribution through a &amp;quot;runner&amp;quot; that forks a subprocess pipeline.
This should yield map-reduce operations that swamp the OS by
having multiple concurrent stages.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;p&gt;Generally, our goal is to get the CPU 100% committed to the right
task. Either 100% doing web services, or 100% doing database
queries or 100% doing batch processing of massive flat-file
datasets.&lt;/p&gt;
&lt;p&gt;Currently, we can't get much past 66%: one core is close to 100%,
but the other is only lightly involved. By growing to
multi-processing, we should be able to red-line a processor with
any number of cores.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="map-reduce"></category><category term="#python"></category></entry><entry><title>Exacting Definitions</title><link href="https://slott56.github.io/2010_01_21-exacting_definitions.html" rel="alternate"></link><published>2010-01-21T11:21:00-05:00</published><updated>2010-01-21T11:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-21:/2010_01_21-exacting_definitions.html</id><summary type="html">&lt;p&gt;Interesting comments to &lt;a class="reference external" href="https://slott56.github.io/2010_01_21-splitting_meta_hairs.html"&gt;Splitting
Meta-Hairs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Terms like Scripting, Interpreted and Dynamic are &lt;em&gt;not&lt;/em&gt; &amp;quot;marketing
terms&amp;quot;. New, Improved, All Natural, Visual, Groovy, Lucid, etc., are
marketing terms. I regret giving the impression that one should &amp;quot;not
to spend time trying to get definitions that are exacting&amp;quot;. One
absolutely &lt;em&gt;must&lt;/em&gt; get definitions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Interesting comments to &lt;a class="reference external" href="https://slott56.github.io/2010_01_21-splitting_meta_hairs.html"&gt;Splitting
Meta-Hairs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Terms like Scripting, Interpreted and Dynamic are &lt;em&gt;not&lt;/em&gt; &amp;quot;marketing
terms&amp;quot;. New, Improved, All Natural, Visual, Groovy, Lucid, etc., are
marketing terms. I regret giving the impression that one should &amp;quot;not
to spend time trying to get definitions that are exacting&amp;quot;. One
absolutely &lt;em&gt;must&lt;/em&gt; get definitions which are exacting. Clearly, I
failed. &lt;strong&gt;Exact definitions matter.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hiding behind the edge and corner cases, however, isn't helpful. Just
because some terms &lt;em&gt;could&lt;/em&gt; be redundant, or &lt;em&gt;could&lt;/em&gt; be ambiguous
(when stripped of useful meaning) isn't really a helpful thing.
Harping on the &amp;quot;ambiguity&amp;quot; or &amp;quot;contradiction&amp;quot; or &amp;quot;redundancy&amp;quot; isn't
helpful. Yes, Python has edge cases. Outside the purity of
mathematics, no categorization is ever perfect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scripting&lt;/strong&gt;. The Python community steers away from this because
it's limiting. However, it's also true. What's important is that some
folks overlook this and over-engineer solutions. Python modules
require three things (1) an appropriate #! line, (2) a mode that
includes appropriate &amp;quot;x&amp;quot; mode flags and (3) a location on the PATH to
be indistinguishable from binary executables.&lt;/p&gt;
&lt;p&gt;I find it necessary to repeat &amp;quot;scripting&amp;quot; to prevent
over-engineering. Clearly, scripting isn't a completely distinct
dimension of language description, but it's still an important
clarification to many of the people I work with.&lt;/p&gt;
&lt;p&gt;Python's on this &lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_programming_languages_by_category#Scripting_languages"&gt;scripting language
list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[We had a RHEL system with SELinux settings that prevented Python
scripts from running. A sysadmin said -- seriously -- that I just
needed to use `sudo su -` to get past this. The admin, it appeared,
couldn't see why Python scripts should behave exactly like all other
scripts. Hence the need to emphasize that Python is a scripting
language. Otherwise people forget.]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpreted&lt;/strong&gt;. Python is a byte-code interpreter. Saying things
like &amp;quot;compiling to machine code is also interpreted&amp;quot; eliminates all
meaning from the words, so it can't be true or useful. We need to
distinguish between &lt;strong&gt;compiled&lt;/strong&gt; to machine code and &lt;strong&gt;interpreted&lt;/strong&gt;;
machine code binary executes directly. And Python doesn't compile to
machine code. Python is interpreted.&lt;/p&gt;
&lt;blockquote&gt;
[The fact that some hardware had microprogramming is irrelevant;
there are programmable ASIC chips in my Macintosh, that doesn't
matter to my Python interpreter. There's a clear line between the
binary machine code and the Python or Java interpreter. Yes, there
are other levels of abstraction. No, they don't matter when
discussing the nature of Python.]&lt;/blockquote&gt;
&lt;p&gt;You can use &lt;a class="reference external" href="http://www.cython.org/"&gt;cython&lt;/a&gt; or
&lt;a class="reference external" href="http://www.py2exe.org/"&gt;py2exe&lt;/a&gt; or
&lt;a class="reference external" href="http://www.undefined.org/python/"&gt;py2app&lt;/a&gt; to create binaries from
Python. But that's not the interpreted Python language. This is the
distinction I'm trying to emphasize.&lt;/p&gt;
&lt;p&gt;I find it necessary to repeat &amp;quot;interpreted&amp;quot; so people are not
confused by the presence of visible bytecode cache (.pyc) files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dynamic&lt;/strong&gt;. Python is dynamic. Dynamic is clearly distinct from the
other dimensions. There's less confusion over this word, but it still
fails to sink in.&lt;/p&gt;
&lt;p&gt;I find that this needs to be repeated frequently so people stop
looking for static type declarations. The number of Stack Overflow
questions that include &amp;quot;python&amp;quot; and &amp;quot;declaration&amp;quot; is always
disappointing.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="python-is-interpreted-then-java-is-a"&gt;
&lt;h2&gt;&amp;quot;Python is interpreted.&amp;quot; Then Java is a...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 11:12:51.026000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Python is interpreted.&amp;quot;&lt;/p&gt;
&lt;p&gt;Then Java is an interpreted language as well, and I'll find that you
have removed the meaning of *that* word. Interpreted != Virtual
machine != machine code.&lt;/p&gt;
&lt;p&gt;And what about the DEC machines, which had processors you programmed in
micro-code? Was that interpreted too? :-)&lt;/p&gt;
&lt;p&gt;Python in itself probably could be an interpreted language, but CPython
is a byte-compiled/VM language, like Java. With a JIT-byte-compiler,
unlike Java, which means it can be used as a scripting language, also
unlike Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="re-the-scripting-argument-again-you-seem-to-be-m"&gt;
&lt;h2&gt;Re: the scripting argument. Again you seem to be m...&lt;/h2&gt;
&lt;p&gt;Richard Jones&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 17:54:33.824000-05:00&lt;/p&gt;
&lt;p&gt;Re: the scripting argument. Again you seem to be missing the point. It's
not that Python can't used for scripting it's that can be used for much
more. Calling it a &amp;quot;scripting&amp;quot; language leads to pigeon-holing - and yes
I've personally had someone be amazed that I earn a six-figure annual
salary using Python because &amp;quot;it's just a scripting language, isn't it?&amp;quot;
Also Python modules don't require either &amp;quot;#!&amp;quot; lines or the &amp;quot;x&amp;quot; bit.
Python &amp;quot;scripts&amp;quot; on Unix-alike operating systems might. Python programs
certainly don't - double-clicking a &amp;quot;.py&amp;quot; file on Windows and OS X will
execute those programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="regebro-as-per-my-comment-languages-like-java-an"&gt;
&lt;h2&gt;&amp;#64;regebro As per my comment, languages like Java an...&lt;/h2&gt;
&lt;p&gt;Michael Foord&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 11:14:47.689000-05:00&lt;/p&gt;
&lt;p&gt;&amp;#64;regebro&lt;/p&gt;
&lt;p&gt;As per my comment, languages like Java and C# are usually described as
compiled because they have JIT compilers. The bytecode is *not*
interpreted, but native code is generated and executed. Python has an
interpreter loop that interprets its bytecode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="py2exe-and-py2app-do-not-compile-to-binaries-the"&gt;
&lt;h2&gt;py2exe and py2app do not compile to binaries - the...&lt;/h2&gt;
&lt;p&gt;Michael Foord&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 11:13:15.751000-05:00&lt;/p&gt;
&lt;p&gt;py2exe and py2app do not compile to binaries - they merely bundle the
Python interpreter with the code (usually as compiled bytecode) with the
application. This doesn't change your point, but the way you write
*implies* that these tools compile to binary.&lt;/p&gt;
&lt;p&gt;As you say Python is usually described as interpreted because the
bytecode is interpreted, whereas languages like C# and Java are usually
described as compiled because they have JIT compilers that compile
bytecode to native code. Once Unladen Swallow is integrated with Python
3 Python will also have a JIT compiler...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-definition-of-compiled-vs-interpreted-language"&gt;
&lt;h2&gt;The definition of compiled vs interpreted language...&lt;/h2&gt;
&lt;p&gt;Jaime&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 14:36:10.090000-05:00&lt;/p&gt;
&lt;p&gt;The definition of compiled vs interpreted language it's getting somehow
blurry... I'd say that the difference is the fact that the bytecode of
an interpreted language it's a direct translation of the language, in a
more convenient load format, but it doesn't change any of the
fundamentals.&lt;/p&gt;
&lt;p&gt;The variables gets their names declared on the bytecode. Any algorithm
is literally used the same way, any parameters are referenced by their
names or positions, etc...&lt;/p&gt;
&lt;p&gt;On a compiled language, it's compiled on a different language. Yes, it
does the same, but the variables are transformed on memory addresses,
there are checks ensuring these transformations can be done correctly
(compilation errors)...&lt;/p&gt;
&lt;p&gt;The Java bytecode it's really machine code in the &amp;quot;Java architecture&amp;quot;,
in the 90s even there were a few &amp;quot;Java&amp;quot; machines that run natively Java
code. It works like assembler, has registers, address jumps, etc...
That's NOT the case of Python bytecode, which is just changing the more
natural language into a step by step more easily loaded by the
interpreter. You can't make a &amp;quot;Python architecture&amp;quot; machine, you'll
always will need a program running that takes that bytecode and map it
to machine code, sometimes one way, sometimes other. All you can do is
join the bytecode with the interpreter to give the illusion of a true
compiled program.&lt;/p&gt;
&lt;p&gt;Anyway, JIT and other techniques are making these distinctions
difficult, and I think it's better to think in terms of static and
dynamic, which is usually what change the way of thinking and using the
language...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-java-wasn-39-t-described-as-interpreted-even"&gt;
&lt;h2&gt;But Java wasn&amp;amp;#39;t described as interpreted even ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 11:22:50.775000-05:00&lt;/p&gt;
&lt;p&gt;But Java wasn't described as interpreted even before it had a JIT
compiler by default. With that wording it would have been a compiled
interpreted language in the 90's, which nicely illustrates how wrong it
is to try to push all languages into an interpreted/compiled dichotomy.
Python is not interpreted, because it gets compiled to bytecode. An
interpreted language reads the source code line by line. It's a
byte-compiled VM language. So it Java, even though it's typically run
with JIT-compilers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="regebro-an-interpreted-language-reads-the-s"&gt;
&lt;h2&gt;&amp;#64;regebro &amp;quot;An interpreted language reads the s...&lt;/h2&gt;
&lt;p&gt;Michael Foord&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 11:31:53.201000-05:00&lt;/p&gt;
&lt;p&gt;&amp;#64;regebro&lt;/p&gt;
&lt;p&gt;&amp;quot;An interpreted language reads the source code line by line.&amp;quot; - that is
not how the terms are *generally* used today, although feel free to
make up your own definitions and use them. ;-) (Marketing history of
Java not-withstanding.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="interpreted"></category><category term="scripted"></category></entry><entry><title>Splitting Meta-Hairs</title><link href="https://slott56.github.io/2010_01_21-splitting_meta_hairs.html" rel="alternate"></link><published>2010-01-21T09:01:00-05:00</published><updated>2010-01-21T09:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-21:/2010_01_21-splitting_meta_hairs.html</id><summary type="html">&lt;p&gt;Recently, I've been involved in some hair-splitting over the nature of
Python.&lt;/p&gt;
&lt;p&gt;I've described it as &amp;quot;interpreted&amp;quot;, &amp;quot;scripting&amp;quot; and &amp;quot;dynamic&amp;quot;, all of
which seem to be true, but yet each seems to lead to a standard --
and pointless -- dispute.&lt;/p&gt;
&lt;div class="section" id="yes-but-no"&gt;
&lt;h2&gt;Yes but No&lt;/h2&gt;
&lt;p&gt;Some folks object to &amp;quot;interpreted&amp;quot;. They feel a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recently, I've been involved in some hair-splitting over the nature of
Python.&lt;/p&gt;
&lt;p&gt;I've described it as &amp;quot;interpreted&amp;quot;, &amp;quot;scripting&amp;quot; and &amp;quot;dynamic&amp;quot;, all of
which seem to be true, but yet each seems to lead to a standard --
and pointless -- dispute.&lt;/p&gt;
&lt;div class="section" id="yes-but-no"&gt;
&lt;h2&gt;Yes but No&lt;/h2&gt;
&lt;p&gt;Some folks object to &amp;quot;interpreted&amp;quot;. They feel a need to repeat the
fact that Python is compiled to byte code which is then interpreted.
Somehow, compiling to byte code interferes with their notion of
interpreter. Further exploration of the objection reveals their
unwavering conviction that an interpreter must work directly with the
original source. And it must be slow.&lt;/p&gt;
&lt;p&gt;Eventually, they'll admit that's Python is interpreted, but not
really. I don't know why it is so important to raise the objection.&lt;/p&gt;
&lt;p&gt;So noted. Are we done? Can we move beyond this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scripting-means-bad"&gt;
&lt;h2&gt;Scripting Means Bad&lt;/h2&gt;
&lt;p&gt;Some folks object to &amp;quot;scripted&amp;quot;. They insist that scripting languages
must also include performance problems, limited data representation
or other baggage. Python is a scripting language because it responds
properly to the shell #! processing rules. Period.&lt;/p&gt;
&lt;p&gt;I don't know why it's important, but someone feels the need to object
to calling Python a scripting language. Somehow the #! thing doesn't
convey enough complexity; scripting just &lt;em&gt;has&lt;/em&gt; to be bad. Pages like
Wikipedia's &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Scripting_language"&gt;Scripting
Language&lt;/a&gt; don't
seem to help clarify that scripting isn't inherently bad.&lt;/p&gt;
&lt;p&gt;Again, objection noted. And overruled. Scripting doesn't have to be
complex or bad. It's just a relationship with the shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-nuances"&gt;
&lt;h2&gt;Further Nuances&lt;/h2&gt;
&lt;p&gt;I'm baffled when some folks take this further and object to Scripted
and Interpreted being separate terms. I guess they feel (very
strongly) that it's redundant and the redundancy is somehow
confusing. A shell script language pretty much has to be interpreted,
otherwise the #! line wouldn't mean anything. I guess that this is
why they have to emphasize their point that Scripted is a proper
subset of Interpreted.&lt;/p&gt;
&lt;p&gt;But then, of course, Python is technically compiled before being
interpreted, so what then? What's the point of bringing up the detail
yet again?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic"&gt;
&lt;h2&gt;Dynamic&lt;/h2&gt;
&lt;p&gt;More rarely, folks will object to using Dynamic and Interpreted as
separate dimensions of the language space.&lt;/p&gt;
&lt;p&gt;Hard-core C++ and Java programmers object to Dynamic in the first
place; sometimes claiming that a dynamic language isn't a &amp;quot;robust&amp;quot;
language. Or that it isn't &amp;quot;safe enough&amp;quot; for production use. Or that
it can't scale for &amp;quot;enterprise&amp;quot; use. Or that there are no &amp;quot;real&amp;quot;
applications built with dynamic languages.&lt;/p&gt;
&lt;p&gt;Once we get past the &amp;quot;dynamic&amp;quot; argument, they go on to complain that
dynamic languages &lt;em&gt;must&lt;/em&gt; be interpreted. The byte-code compiling --
and the possibility that the byte code could be translated to native
binary -- doesn't enter into the discussion early enough.&lt;/p&gt;
&lt;p&gt;Also, some folks don't like the fact that an IDE can't do code
completion for a dynamic language. To me, it seems like just pure
laziness to object to a language based on the lack of code
completion. But some folks claim that IDE auto-completion makes VB a
good language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hair-resplitting"&gt;
&lt;h2&gt;Hair Resplitting&lt;/h2&gt;
&lt;p&gt;How about we stop wasting so much bandwidth resplittting these
hairs? It's scripted. It's interpreted. It's dynamic. How does it
help to micro-optimize the words? Even if scripted really is a
proper subset of interpreted, these prominent features solve
different kinds of problems; it seems to help the potential
language user to keep these concepts separate.&lt;/p&gt;
&lt;p&gt;Can we slow down the repetition of (irrelevant) fact that Python
is compiled (but not to executable binary) &lt;strong&gt;and&lt;/strong&gt; interpreted?
It's not confusing: byte-code compilation really is a
well-established design pattern for interpreted languages. Has
been for decades. Applesoft Basic on the Apple ][+ used
byte-codes. Okay?&lt;/p&gt;
&lt;p&gt;Duck Typing is not a &amp;quot;flaw&amp;quot; or &amp;quot;weakness&amp;quot;. Binary compilation is
not a &amp;quot;strength&amp;quot;. It's trivial to corrupt a binary file and
introduce bugs or viri; binary compilation is not inherently
superior.&lt;/p&gt;
&lt;p&gt;Can we move on and actually solve problems rather than split
meta-hairs?&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="today-i-ve-been-teaching-some-python-issues-at"&gt;
&lt;h2&gt;Today I've been teaching some Python issues at...&lt;/h2&gt;
&lt;p&gt;Jaime&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-20 15:00:13.914000-05:00&lt;/p&gt;
&lt;p&gt;Today I've been teaching some Python issues at a girl at work. She's
learning Python, so these days I give her &amp;quot;homework&amp;quot; to do, basically
some small programs to practice and getting the code more Pythonic and
less &amp;quot;C-istic&amp;quot;.&lt;/p&gt;
&lt;p&gt;Today's program takes to run 90 seconds at first. After some profiling
and two optimizations on for loops, the code takes about a second to
run. The optimization were nothing very difficult, just changing the
algorithm a little and doing the things properly on Python...
The main point is, what is the greatest factor on performance? It's not
dynamic or static language, or using registers, or duck typing, or
scripting.&lt;/p&gt;
&lt;p&gt;It's algorithmics...&lt;/p&gt;
&lt;p&gt;And, at least to me, I can concentrate more on algorithmics on Python
than on other languages. If after algorithmic work, you'll still need
performance, you can then think to change your approach...&lt;/p&gt;
&lt;p&gt;I've been &amp;quot;suffering&amp;quot; a lot of the same arguments over and over... ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="regarding-your-apple-comment-toward-the-end-i-thi"&gt;
&lt;h2&gt;Regarding your Apple comment toward the end, I thi...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 08:23:40.805000-05:00&lt;/p&gt;
&lt;p&gt;Regarding your Apple comment toward the end, I think you mean Applesoft
BASIC (instead of AppleScript), which was the floating-point replacement
for the original Apple BASIC that only supported numeric integers (and
also used a byte-code format for storing programs in memory.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="java-also-compiles-to-bytecode-not-directly-to-ho"&gt;
&lt;h2&gt;Java also compiles to bytecode, not directly to ho...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-20 19:54:29.002000-05:00&lt;/p&gt;
&lt;p&gt;Java also compiles to bytecode, not directly to host code. In that
sense, Python and Java are both compiled, as are a bunch other languages
that include a VM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="as-a-newbie-i-found-this-posting-very-helpful-al"&gt;
&lt;h2&gt;As a newbie, I found this posting very helpful. Al...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-20 19:15:16.227000-05:00&lt;/p&gt;
&lt;p&gt;As a newbie, I found this posting very helpful. All these terms get
thrown around and I don't know whether they require exacting definitions
or whether they are &amp;quot;technical marketing&amp;quot; terms. Please note the use of
&amp;quot;technical&amp;quot; before &amp;quot;marketing&amp;quot;.&lt;/p&gt;
&lt;p&gt;Now I know that these are &amp;quot;technical marketing&amp;quot; terms and not to spend
time trying to get definitions that are exacting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-39-s-clear-that-what-you-mean-with-quot-inter"&gt;
&lt;h2&gt;It&amp;amp;#39;s clear that what you mean with &amp;amp;quot;inter...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 02:32:22.531000-05:00&lt;/p&gt;
&lt;p&gt;It's clear that what you mean with &amp;quot;interpreted&amp;quot; and &amp;quot;scripting&amp;quot; is
pretty much the same thing. So I object to that *you* separate them.
:)&lt;/p&gt;
&lt;p&gt;I'd say that it's a byte-code compiled dynamic general purpose
programming language. Yes, it's a scripting language too. Very general
purpose. :)&lt;/p&gt;
&lt;p&gt;If compiling to byte code is interpreted, then compiling to
machine code is also interpreted. Because you have to interpret the code
sometimes. :)&lt;/p&gt;
&lt;p&gt;And my editor does code completion... OK, not as well as a static
language, obviously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-may-find-it-helpful-to-note-that-wikipedia-doe"&gt;
&lt;h2&gt;You may find it helpful to note that Wikipedia doe...&lt;/h2&gt;
&lt;p&gt;Richard Jones&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-20 17:01:34.084000-05:00&lt;/p&gt;
&lt;p&gt;You may find it helpful to note that Wikipedia does not classify Python
as a &amp;quot;scripting language&amp;quot; but rather as a &amp;quot;general purpose language&amp;quot;.
This may help clarify any confusion you have trying to match &amp;quot;scripting
language&amp;quot; against your view of Python.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="interpreted"></category><category term="scripted"></category></entry><entry><title>The Secret Architect's Cabal</title><link href="https://slott56.github.io/2010_01_16-the_secret_architects_cabal.html" rel="alternate"></link><published>2010-01-16T07:37:00-05:00</published><updated>2010-01-16T07:37:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-16:/2010_01_16-the_secret_architects_cabal.html</id><summary type="html">&lt;p&gt;Recently, I had two very weird &amp;quot;meta&amp;quot; questions on the subject of OO
design.&lt;/p&gt;
&lt;p&gt;They bother me because they imply that some Brother or Sister
Architect has let slip the presence of the Secret Technologies that
we Architects are hiding from the Hoi Polloi developers.&lt;/p&gt;
&lt;p&gt;These are the real questions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I had two very weird &amp;quot;meta&amp;quot; questions on the subject of OO
design.&lt;/p&gt;
&lt;p&gt;They bother me because they imply that some Brother or Sister
Architect has let slip the presence of the Secret Technologies that
we Architects are hiding from the Hoi Polloi developers.&lt;/p&gt;
&lt;p&gt;These are the real questions. Lightly edited to fix spelling and
spacing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;What are the ways to implement a many to many association in
an OO model?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Besides the relational model, what other persistence
mechanisms are available to store a many to many association?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are &amp;quot;meta&amp;quot; questions because they're not asking anything
specific about a particular data model or set of requirements. I
always like unfocused questions because all answers are good
answers. Focus allows people to see through the smoke and mirrors
of Architecture.&lt;/p&gt;
&lt;p&gt;The best part about these questions (and some similar questions
that I didn't paste here) is that they are of the form &amp;quot;Is there a
secret technique you're not telling us about?&amp;quot;&lt;/p&gt;
&lt;p&gt;It's time to come clean. There &lt;strong&gt;is&lt;/strong&gt; a Secret Cabal of
Architects. There &lt;strong&gt;are&lt;/strong&gt; things we're not telling you.&lt;/p&gt;
&lt;div class="section" id="many-to-many"&gt;
&lt;h2&gt;Many-to-Many&lt;/h2&gt;
&lt;p&gt;The many-to-many question shows just how successful the Society of
Secrets (as we call ourselves) has been about creating a SQL bias.
When folks draw higher-level data model diagrams that imply (but
don't show) the required many-to-many association table, the
Architects have failed. In other organizations the association
table is So Very Important that it is carefully diagrammed in
detail. This is a victory for forcing people to think only in
implementation details.&lt;/p&gt;
&lt;p&gt;In the best cases, the DBA's treat the association table as part
of the &amp;quot;dark art&amp;quot; of being a DBA. It's something they have to
dwell on and wring their hands over. This leads to developers
getting wrapped around the axle because the table isn't a
first-class part of the data model, but is absolutely required as
part of SQL joins.&lt;/p&gt;
&lt;p&gt;It's a kind of intellectual overhead that shows how successful the
Secret Architecture Society is.&lt;/p&gt;
&lt;p&gt;The presence of a dark secret technique for implementing
association leads to smart developers asking about other such
intellectual overhead. If there's one secret technique, there must
be many, many others.&lt;/p&gt;
&lt;p&gt;It is to laugh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-secret-techniques-for-associations"&gt;
&lt;h2&gt;The Secret Techniques for Associations&lt;/h2&gt;
&lt;p&gt;The problem arises when someone ask about the &lt;em&gt;OO implementation&lt;/em&gt;
of many-to-many associations. It's really difficult to misdirect
developers when the OO implementation is mostly trivial and not
very interesting. There's no easy to add complexity.&lt;/p&gt;
&lt;p&gt;In Python there are a bunch of standard collections. The language
has a bunch that are built in. Plus, in Python 2.6, the
collections module has &lt;a class="reference external" href="http://docs.python.org/library/collections.html#abcs-abstract-base-classes"&gt;Abstract Base
Classes&lt;/a&gt;
that clearly identify all of the collections.&lt;/p&gt;
&lt;p&gt;There isn't too much more to say on the subject of many-to-many
associations. That makes it really hard to add secret layers and
create value as an architect.&lt;/p&gt;
&lt;p&gt;The best I can do with questions like this is say &amp;quot;I was sworn to
secrecy by the secret Cabal of Architects, so I can't reveal the
many-to-many association techniques in a general way. Please get
the broomstick of the Wicked Witch of the West if you want more
answers.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="persistence"&gt;
&lt;h2&gt;Persistence&lt;/h2&gt;
&lt;p&gt;The persistence question, however, was gift. When someone equates
&amp;quot;relational model&amp;quot; with a &amp;quot;persistence mechanism&amp;quot;, we have lots of
room to maneuver. I know that we're talking about a &amp;quot;relational
database&amp;quot; as a &amp;quot;persistence mechanism&amp;quot;. However, it's clear they
don't know that, and that's my opportunity to sow murkiness and
confusion.&lt;/p&gt;
&lt;p&gt;Sadly, the OS offers us exactly one &amp;quot;persistence mechanism&amp;quot;. Yet,
the question implies that the Secret Cabal of Architects know
about some secret &amp;quot;alternative persistence mechanisms&amp;quot; that mere
programmers can't be told about.&lt;/p&gt;
&lt;p&gt;Every device with a changeable state appears as a file. All
databases (relational, hierarchical, object, whatever) are just
files tarted up with fancy API's that allow for performance and
security. Things like indexing, locking, buffering, access
controls, and the like are just &amp;quot;features&amp;quot; layered on top of
good-old files. But those features are So Very Important, that
they appear to be part of persistence.&lt;/p&gt;
&lt;p&gt;Excellent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logical-vs-physical"&gt;
&lt;h2&gt;Logical vs. Physical&lt;/h2&gt;
&lt;p&gt;What's really helpful here is the confusion folks have with
&amp;quot;Logical&amp;quot; vs. &amp;quot;Physical&amp;quot; design layers.&lt;/p&gt;
&lt;p&gt;Most DBA's claim (and this is entirely because of ERwin's use of
the terms) that physical design is when you add in the database
details to a logical design. This is wrong, and it really helps
the Architect Secret Society when a vendor misuses common terms
like that.&lt;/p&gt;
&lt;p&gt;The Physical layer is the file-system implementation. Table spaces
and blocks and all that what-not that &lt;strong&gt;is&lt;/strong&gt; the underlying
persistence.&lt;/p&gt;
&lt;p&gt;The Logical layer is what you see from your API's: tables and
views.&lt;/p&gt;
&lt;p&gt;The relational database cleanly separates logical from physical.
Your applications do not (indeed, can not) see the implementation
details. This distinction breaks down in the eyes of DBA's,
however, and that lets us insert the idea that a database is
somehow more than tarted-up files.&lt;/p&gt;
&lt;p&gt;Anyone asking about the &amp;quot;relational model&amp;quot; and &amp;quot;persistence
mechanism&amp;quot; has -- somehow -- lost focus on what's happening inside
the relational database. This allows us to create Architectural
Value by insisting that we add a &amp;quot;Persistence Layer&amp;quot; underneath
(or on top of or perhaps even beside) the &amp;quot;Database Layer&amp;quot;. This
helps confuse the developers by implying that we must &amp;quot;isolate&amp;quot;
the database from the persistence mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="many-to-many-and-orm"&gt;
&lt;h2&gt;Many-to-many and ORM&lt;/h2&gt;
&lt;p&gt;Sadly, these two questions may turn out to be ORM questions. The
problem with ORM layers is that the application objects are
trivially made persistent. It's really hard to add complexity when
there's an ORM layer.&lt;/p&gt;
&lt;p&gt;However, a Good Architect can sometimes find room to maneuver.&lt;/p&gt;
&lt;p&gt;A programmer with SQL experience will often think in SQL. They
will often try to provide a specific query and ask how that SQL
query can be implemented in the ORM layer. This needs to be
encouraged. It's important to make programmers think that the SQL
queries are &lt;em&gt;First Class Features&lt;/em&gt;. The idea that class
definitions might map directly to the underlying data must be
discouraged.&lt;/p&gt;
&lt;p&gt;A good DBA &lt;em&gt;should&lt;/em&gt; insist on defining database tables first, and
then applying the ORM layer to those tables. Doing things the
other way around (defining the classes first) can't be encouraged.
Table-first design works out really well for imposing a
SQL-centered mind-set on everyone. It means that simple
application objects can be split across multiple tables (for
&amp;quot;performance reasons&amp;quot;) leading to hellish mapping issues and
performance problems.&lt;/p&gt;
&lt;p&gt;No transaction should make use of SQL set-oriented processing
features. Bulk inserts are a special case that should be done with
the database-supplied load application. Bulk updates indicate a
design problem. Bulk deletes may be necessary, but they're not
end-user oriented transactions. Bulk reporting is not
transactional and should be done in a data warehouse.&lt;/p&gt;
&lt;p&gt;Subverting the ORM layer by &amp;quot;hand-designing&amp;quot; the relational
database can create a glorious mess. Given the performance
problems, some DBA's will try to add more SQL. Views and Dynamic
Result Sets created by Stored Procedures are good ways to make the
Architecture really complex. The Covert Coven of Architects likes
this.&lt;/p&gt;
&lt;p&gt;Sometimes a good developer can be subvert things by creating a
&amp;quot;hybrid&amp;quot; design where some of the tables have a trivial ORM
mapping and work simply. But. A few extra tables are kept aside
that don't have clean ORM mappings. These can be used with
manually-written SQL. The best part is populating these extra
tables via triggers and stored procedures. This assures us that
the architecture is so complex that no one can understand it.&lt;/p&gt;
&lt;p&gt;The idea of separating the database into Logical and Physical
layers hurts the Architectural Cabal. Wrapping the Logical layer
with a simple ORM is hurtful, too. But putting application
functionality into the database -- that really helps make
Architecture appear to be magical.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-persistence-mechanisms"&gt;
&lt;h2&gt;The Persistence Mechanisms&lt;/h2&gt;
&lt;p&gt;The bottom line is that the Secret Conference of Architects
doesn't have a pat answer on Persistence Mechanisms. We have,
however, a short list of misdirections.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;API and API Design. This is a rat-hole of lost time. Chasing
API design issues will assure that persistence is never really
found.&lt;/li&gt;
&lt;li&gt;Cloud Computing. This is great. The cloud can be a great
mystifier. Adding something like the Python Datastore API can
sow confusion until developers start to think about it.&lt;/li&gt;
&lt;li&gt;Multi-Core Computing. Even though the OS handles this
seamlessly, silently and automatically, it's possible to really
dig into multi-core and claim that we need to rethink software
architecture from the very foundations to rewrite our core
algorithms to exploit multiple cores. Simply using Unix
pipelines cannot be mentioned because it strips the mystery
away from the problem.&lt;/li&gt;
&lt;li&gt;XML. Always good a for a few hours of misdirection. XML as a
hierarchical data model mapped to a relational database can
really slow down the developers. Eventually someone figures it
out, and the Architect has nothing left to do.&lt;/li&gt;
&lt;li&gt;EJB's. This is digging. It's Java specific and -- sadly --
trumped by simple ORM. But it can sometimes slow the
conversation down for a few hours.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="he-he-nice-post"&gt;
&lt;h2&gt;He he, nice post :)&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-12-28 13:26:00.245000-05:00&lt;/p&gt;
&lt;p&gt;He he, nice post :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-is-no-secret-architectural-society-it-is-a"&gt;
&lt;h2&gt;There is no Secret Architectural Society. It is a ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-12-31 04:23:49.563000-05:00&lt;/p&gt;
&lt;p&gt;There is no Secret Architectural Society. It is a lie. Mr Lott will be
disciplined. You have not read this post.&lt;/p&gt;
&lt;p&gt;&amp;amp;quot;list of misdirections&amp;amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-knew-it-i-ju"&gt;
&lt;h2&gt;I knew it! I ju...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-12-28 20:30:33.514000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;list of misdirections&amp;quot;
I knew it! I just knew it! Architects are like magicians, they make
something happen and then your stuck wondering how they did that. :-)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="object-oriented design"></category></entry><entry><title>FW: Eight Things Business Hates About IT</title><link href="https://slott56.github.io/2010_01_12-fw_eight_things_business_hates_about_it.html" rel="alternate"></link><published>2010-01-12T09:38:00-05:00</published><updated>2010-01-12T09:38:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-12:/2010_01_12-fw_eight_things_business_hates_about_it.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.cioinsight.com/c/a/IT-Management/8-Things-Business-Hates-About-IT-791460/?kc=CIOMINUTE01082010CIO1"&gt;Eight Things Business Hates About IT. Plus eight things IT hates about
business.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I suppose.&lt;/p&gt;
&lt;p&gt;While there are 8 things identified, they seem to boil down to 2
things to fix: Replace bureaucratic with Agile; replace Keep The
Lights On Management with any other way of budgeting.&lt;/p&gt;
&lt;p&gt;While Agility is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.cioinsight.com/c/a/IT-Management/8-Things-Business-Hates-About-IT-791460/?kc=CIOMINUTE01082010CIO1"&gt;Eight Things Business Hates About IT. Plus eight things IT hates about
business.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I suppose.&lt;/p&gt;
&lt;p&gt;While there are 8 things identified, they seem to boil down to 2
things to fix: Replace bureaucratic with Agile; replace Keep The
Lights On Management with any other way of budgeting.&lt;/p&gt;
&lt;p&gt;While Agility is not a panacea, it does address a lot of problems in
more active, engaging and solution-oriented ways.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;IT can be bureaucratic. That's IT's dumb reaction to failed
projects -- add more process. While it seems obvious that projects
don't fail for lack of process, that's the standard remediation. The
pithy management summary is &amp;quot;The Project Is Out Of Control.&amp;quot; But it
isn't a lack of process. It's a lack of clarity and milestones that
are (a) irrelevant (who needs a detailed design document, really?)
and (b) too far apart.&lt;/p&gt;
&lt;p&gt;Good point. Something to fix. Use Agile methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;IT can be condescending techies. Whatever. That's a consequence of
the huge technical complexity. If non-IT people want a &amp;quot;simplified&amp;quot;
explanation, it's going to sound condescending. I don't like this
one.&lt;/p&gt;
&lt;p&gt;Rotten point. Hard to fix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;IT can be reactive. When IT chooses the low-road of &amp;quot;Keep The
Lights On Management&amp;quot;, it elects to be reactive.&lt;/p&gt;
&lt;p&gt;Good point. Something to fix. Spend more time with the business and
less time in the server room.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;IT can propose &amp;quot;deluxe&amp;quot; solutions. Sometimes. Programming is a
hobby and too many folks in IT really enjoy their hobbies. But.
Managers on both sides (IT and business) both pad projects with stuff
that will &amp;quot;add enough value&amp;quot; to justify the costs. It's equally bad
on both sides. I reject this as an IT problem &lt;em&gt;per se&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, this is really a consequence of #1. By forcing
projects to be Big, Complex Affairs, solutions get padded.&lt;/p&gt;
&lt;p&gt;Duplicate. Agile methods and incremental delivery can push the deluxe
features out far enough in time that they don't impact this year's
budget.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;IT doesn't deliver on time. This is a consequence of point #1. IT
often adds process where none is needed. Delivery on time is easy, if
IT simply delivers incrementally. Customer IT departments have said
that a partial solution was of no value, and refused to entertain the
idea of risk and cost reduction through incremental (&amp;quot;Agile&amp;quot;)
delivery. The end users who were in the meeting had to disagree with
their own IT people over this -- and agree with us -- that
incremental delivery did create value.&lt;/p&gt;
&lt;p&gt;Duplicate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;IT doesn't understand customization. This is also a consequence of
point #1. A too complex, overly bureaucratic project can't tolerate
customization (or change).&lt;/p&gt;
&lt;p&gt;Duplicate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;IT doesn't support innovation. What? That's point #3 again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;IT inhibits business change. This is also a consequence of point
#1. A too complex, overly bureaucratic project can't tolerate
customization (or change).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="what-do-you-do-when-agile-gets-wrapped-up-with-pro"&gt;
&lt;h2&gt;What do you do when Agile gets wrapped up with pro...&lt;/h2&gt;
&lt;p&gt;Scott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-12 11:30:58.456000-05:00&lt;/p&gt;
&lt;p&gt;What do you do when Agile gets wrapped up with process. It seems that
sometimes people get hung up on moving cards around and making a
processes to impress the &amp;quot;customer&amp;quot; instead of actually getting things
done. What do you do when you're one of the IT employees stuck under
&amp;quot;processes and tools&amp;quot; instead of &amp;quot;individuals and interactions&amp;quot;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-pains-no-gains-a-href-http-5403-meimei080"&gt;
&lt;h2&gt;No pains, no gains.&amp;lt;a href=&amp;quot;&lt;a class="reference external" href="http://5403.meimei080"&gt;http://5403.meimei080&lt;/a&gt;....&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-19 00:22:43.108000-05:00&lt;/p&gt;
&lt;p&gt;No pains, no
gains.&lt;a class="reference external" href="http://5403.meimei080.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://666.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://g8.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://g88.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://g8mm.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://girl.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://gogo.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://hot.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://ilove.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://japan.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://jolin.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://jpgirl.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://face.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://dvd.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://dudusex.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://66k.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://69.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://69vip.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://6k.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://777.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://adult.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://aio.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://bb.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://buty.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://chat.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://king.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://kiss168.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://play.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://playboy.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://post.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://room.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://shop.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://shopping.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://show.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://showlive.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://sogo.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://taiwangirl.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://panda.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://orz.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://nice.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://kk123.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://ko.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://live.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://livesex.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://honey.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://love104.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://loveu.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://may.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://mm.meimei0204.info"&gt;.&lt;/a&gt;&lt;a class="reference external" href="http://monkey.meimei0204.info"&gt;.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lessons in IT from Howard Stern&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bw-http-www-bu"&gt;
&lt;h2&gt;BW: &lt;a class="reference external" href="http://www.bu"&gt;http://www.bu&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-21 13:03:55.528000-05:00&lt;/p&gt;
&lt;p&gt;Lessons in IT from Howard Stern
BW:
&lt;a class="reference external" href="http://www.businessweek.com/technology/content/jan2010/tc20100120_473287.htm"&gt;http://www.businessweek.com/technology/content/jan2010/tc20100120_473287.htm&lt;/a&gt;
... my $129.99 Sirius radio cost more like $460.26 and at least five
hours of my time ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-do-find-the-distinction-between-it-and-business"&gt;
&lt;h2&gt;I do find the distinction between IT and business ...&lt;/h2&gt;
&lt;p&gt;Ronald&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-15 07:20:49.803000-05:00&lt;/p&gt;
&lt;p&gt;I do find the distinction between IT and business to be absolute
rubbish.&lt;/p&gt;
&lt;p&gt;Do you reckon that in the first 20 years after the Phone was invented
they had books warbling on about 8 things business hates about phones?
Damn right. IT is business. it's as much part of a business as accounts
or HR or sales. business that don't see that are the ones that gripe and
complain and deliver late and inferior projects.&lt;/p&gt;
&lt;p&gt;You show me a condescending techy, and I'll show you inept middle
management, less than fully trained staff, or another &amp;quot;business&amp;quot;
problem, they normally go hand in hand.&lt;/p&gt;
&lt;p&gt;One more thing. Agile is not a silver bullet or the cure for all ills.
Agile is a way to let you arrange your activity to respond better to
change. that's it. it's not IT specific, it doesn't need scrums or issue
management or user stories. Those things have their place, and if
they're usefull do it. but if you're claiming to be agile and it takes
you 3 months to realise you're working on a dud feature you're an idiot.
As for what you do do if you're stuck under processes and tools. Leave.
The company is going to fail eventually anyway, might as well get a head
start.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="management"></category><category term="innovation"></category><category term="agile"></category></entry><entry><title>Map Reduce -- How Cool is that?</title><link href="https://slott56.github.io/2010_01_10-map_reduce_how_cool_is_that.html" rel="alternate"></link><published>2010-01-10T12:57:00-05:00</published><updated>2010-01-10T12:57:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-10:/2010_01_10-map_reduce_how_cool_is_that.html</id><summary type="html">&lt;p&gt;From time-to-time I hear a few mentions of MapReduce; up until recently,
I avoided looking into it.&lt;/p&gt;
&lt;p&gt;This month's &lt;a class="reference external" href="http://cacm.acm.org/magazines/2010/1"&gt;CACM&lt;/a&gt;,
however, is chock-full of MapReduce goodness.&lt;/p&gt;
&lt;p&gt;After reading some of the articles, I decided to look a little more
closely at that approach to handling large datasets.&lt;/p&gt;
&lt;div class="section" id="python-implementation"&gt;
&lt;h2&gt;Python Implementation&lt;/h2&gt;
&lt;p&gt;Map-Reduce …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;From time-to-time I hear a few mentions of MapReduce; up until recently,
I avoided looking into it.&lt;/p&gt;
&lt;p&gt;This month's &lt;a class="reference external" href="http://cacm.acm.org/magazines/2010/1"&gt;CACM&lt;/a&gt;,
however, is chock-full of MapReduce goodness.&lt;/p&gt;
&lt;p&gt;After reading some of the articles, I decided to look a little more
closely at that approach to handling large datasets.&lt;/p&gt;
&lt;div class="section" id="python-implementation"&gt;
&lt;h2&gt;Python Implementation&lt;/h2&gt;
&lt;p&gt;Map-Reduce is a pleasant functional approach to handling several
closely-related problems.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Concurrency.&lt;/li&gt;
&lt;li&gt;Filtering and Exclusion.&lt;/li&gt;
&lt;li&gt;Transforming.&lt;/li&gt;
&lt;li&gt;Summarizing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The good part is that it works with no magic. The best part is that
you can build map-reduce processors very easily with readily
available tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="map-reduce-on-the-cheap"&gt;
&lt;h2&gt;Map-Reduce on the Cheap&lt;/h2&gt;
&lt;p&gt;The basics of map reduce can be done several ways in Python. We could
use the built-in
&lt;a class="reference external" href="http://docs.python.org/library/functions.html#map"&gt;map&lt;/a&gt; and
&lt;a class="reference external" href="http://docs.python.org/library/functions.html#reduce"&gt;reduce&lt;/a&gt;
functions. This can lead to problems if you provide a poorly designed
function to reduce.&lt;/p&gt;
&lt;p&gt;But Python also provides generator functions. See &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0255/"&gt;PEP
255&lt;/a&gt; for background on
these. A generator function makes it really easy to implement simple
map-reduce style processing on a single host.&lt;/p&gt;
&lt;p&gt;Here's a simple web log parser built in the map-reduce style with
some generator functions.&lt;/p&gt;
&lt;p&gt;Here's the top-level operation. This isn't too interesting because it
just picks out a field and reports on it. The point is that it's
delightfully simple and focused on the task at hand, free of clutter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def dump_log( log_source ):
    for entry in log_source:
        print entry[3]
&lt;/pre&gt;
&lt;p&gt;We can improve this, of course, to do yet more calculations,
filtering and even reduction. Let's not clutter this example with too
much, however.
Here's a map function that can fill the role of log_source. Given a
source of rows, this will determine if they're parseable log entries
and yield up the parse as a 9-tuple. This maps strings to 9-tuples,
filtering away anything that can't be parsed.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
log_row_pat= re.compile( r'(\d+\.\d+\.\d+\.\d+) (\S+?) (\S+?) (\[[^\]]+?]) (&amp;quot;[^&amp;quot;]*?&amp;quot;) (\S+?) (\S+?) (&amp;quot;[^&amp;quot;]*?&amp;quot;) (&amp;quot;[^&amp;quot;]*?&amp;quot;)' )
def log_from_rows( row_source ):
    for row in row_source:
        m= log_row_pat.match( row )
        if m is not None:
            yield m.groups()
&lt;/pre&gt;
&lt;p&gt;This log source has one bit of impure functional programming. The
tidy, purely functional alternative to saving the match object, m,
doesn't seem to be worth the extra lines of code.
Here's a map function that can participate as a row source. This will
map a file name to an sequence of individual rows. This can be
decomposed if we find the need to reuse either part separately.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def rows_from_name( name_source ):
    for aFileName in name_source:
        logger.info( aFileName )
        with open(aFileName,&amp;quot;r&amp;quot;) as source:
            for row in source:
                yield row
&lt;/pre&gt;
&lt;p&gt;Here's a mapping from directory root to a sequence of filenames
within the directory structure.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def names_( root='/etc/httpd/logs' ):
    for path, dirs, files in os.walk( root ):
        for f in files:
            logging.debug( f )
            if f.startswith('access_log'):
                yield os.path.join(path,f)
&lt;/pre&gt;
&lt;p&gt;This applies a simple name filter. We could have used Python's
fnmatch, which would give us a slightly more extensible structure.
Putting it Together
This is the best part of this style of functional programming. It
just snaps together with simple composition rules.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
logging.basicConfig( stream=sys.stderr, level=logging.INFO )
dump_log( log_from_rows( rows_from_name( names_from_dir() ) ) )
logging.shutdown()
&lt;/pre&gt;
&lt;p&gt;We can simply define a of map functions. Our goal, expressed in
dump_log, is the head of the composition. It depends on the tail,
which is parsing, reading a file, and locating all files in a
directory.&lt;/p&gt;
&lt;p&gt;Each step of the map pipeline is a pleasant head-tail composition.&lt;/p&gt;
&lt;p&gt;Pipelines&lt;/p&gt;
&lt;p&gt;This style of programming can easily be decomposed to work through
Unix-style pipelines.&lt;/p&gt;
&lt;p&gt;We can cut a map-reduce sequence anywhere. The head of the
composition will get it's data from an unpickle operation instead of
the original tail.&lt;/p&gt;
&lt;p&gt;The original tail of the composition will be used by a new head that
pickles the results. This new head can then be put into the source of
a Unix-style pipeline.&lt;/p&gt;
&lt;p&gt;Parallelism&lt;/p&gt;
&lt;p&gt;There are two degrees of parallelism available in this kind of
map-reduce. By default, in a single process, we don't get either one.
However, if we break the steps up into separate physical processes,
we get huge performance advantages. We force the operating to do
scheduling. And we have processes that have a lot of resources
available to them.&lt;/p&gt;
&lt;blockquote&gt;
[Folks like to hand-wring over &amp;quot;heavy-weight&amp;quot; processing vs. threads.
Practically, it rarely matters. Create processes until you can prove
it's ineffective.]&lt;/blockquote&gt;
&lt;p&gt;Additionally, we can -- potentially -- parallelize each map
operation. This is more difficult, but that's where a framework helps
to wring the last bit of parallel processing out of a really large
task.&lt;/p&gt;
&lt;p&gt;Until you need the framework, though, you can start doing map-reduce
today.&lt;/p&gt;
&lt;p&gt;A Link: &lt;a class="reference external" href="http://hadoop.apache.org/mapreduce/"&gt;http://hadoop.apache.org/mapreduce/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="regarding-heavy-processes-windows-does-indeed-ha"&gt;
&lt;h2&gt;Regarding heavy processes - windows does indeed ha...&lt;/h2&gt;
&lt;p&gt;Mark Mc Mahon&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-12 04:10:03.584000-05:00&lt;/p&gt;
&lt;p&gt;Regarding heavy processes - windows does indeed have a big difference
between processes and threads. (Creating processes is quite slow in
Windows). See
&lt;a class="reference external" href="http://stackoverflow.com/questions/1289813/python-multiprocessing-vs-threading-for-cpu-bound-work-on-windows-and-linux"&gt;http://stackoverflow.com/questions/1289813/python-multiprocessing-vs-threading-for-cpu-bound-work-on-windows-and-linux&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-wouldn-39-t-count-saving-the-match-object-39"&gt;
&lt;h2&gt;I wouldn&amp;amp;#39;t count saving the match object &amp;amp;#39;...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-14 11:26:27.622000-05:00&lt;/p&gt;
&lt;p&gt;I wouldn't count saving the match object 'm' as 'impure'. You don't
redefine 'm' or mutate it. The fact that the underlying implementation
(which creates a variable in a locals dict) can allow mutation doesn't
really affect this issue - you are using variable assignment in a pure
way.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="map-reduce"></category><category term="#python"></category><category term="software design"></category></entry><entry><title>Fossil and SQLite</title><link href="https://slott56.github.io/2010_01_03-fossil_and_sqlite.html" rel="alternate"></link><published>2010-01-03T18:53:00-05:00</published><updated>2010-01-03T18:53:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-03:/2010_01_03-fossil_and_sqlite.html</id><content type="html">&lt;p&gt;Interesting thoughts:
&lt;a class="reference external" href="http://nedbatchelder.com/blog/201001/d_richard_hipps_software_universe.html"&gt;http://nedbatchelder.com/blog/201001/d_richard_hipps_software_universe.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I use SQLite heavily. Time to look into Fossil.&lt;/p&gt;
</content><category term="Technologies"></category><category term="Fossil"></category><category term="SQLite"></category></entry><entry><title>Building Skills in Object-Oriented Design</title><link href="https://slott56.github.io/2010_01_02-building_skills_in_object_oriented_design.html" rel="alternate"></link><published>2010-01-02T11:14:00-05:00</published><updated>2010-01-02T11:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-02:/2010_01_02-building_skills_in_object_oriented_design.html</id><summary type="html">&lt;p&gt;Completely revised &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/oodesign.html"&gt;Building Skills in Object-Oriented
Design&lt;/a&gt;. Cleaned
up many of the exercises to make them simpler and more sensible to the
n00b designer.&lt;/p&gt;
&lt;p&gt;Also, to make it easier to follow, I made use of the Sphinx
&amp;quot;ifconfig&amp;quot; feature to separate the text into two parallel editions: a
Python edition …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Completely revised &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/oodesign.html"&gt;Building Skills in Object-Oriented
Design&lt;/a&gt;. Cleaned
up many of the exercises to make them simpler and more sensible to the
n00b designer.&lt;/p&gt;
&lt;p&gt;Also, to make it easier to follow, I made use of the Sphinx
&amp;quot;ifconfig&amp;quot; feature to separate the text into two parallel editions: a
Python edition and a Java edition. A little language-specific focus
may help.&lt;/p&gt;
&lt;p&gt;Interestingly, I got an email recently from someone who wanted the
entire source code for the projects described in the book. I was a
little puzzled. Providing the source would completely defeat the
purpose of the book, which is to build skills by actually doing the
work. So, no, there is no source code available for these exercises.
The point is to do the work, all the work, all by yourself.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hi-steven-the-download-link-to-building-sk"&gt;
&lt;h2&gt;Hi Steven, The download link to &amp;quot;Building Sk...&lt;/h2&gt;
&lt;p&gt;Manjula&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-05-31 19:42:22.025000-04:00&lt;/p&gt;
&lt;p&gt;Hi Steven,
The download link to &amp;quot;Building Skills in OO Design&amp;quot; redirects to
MobileMe? page. Can you please share the working url. Thank you very
much.
MB&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http-www-brpreiss-com-books-opus7-html-book-html"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://www.brpreiss.com/books/opus7/html/book.html"&gt;http://www.brpreiss.com/books/opus7/html/book.html&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-08-07 21:50:03.977000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.brpreiss.com/books/opus7/html/book.html"&gt;http://www.brpreiss.com/books/opus7/html/book.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category><category term="building skills books"></category><category term="java"></category></entry><entry><title>Python Book -- Thanks for the Bug Reports</title><link href="https://slott56.github.io/2010_01_02-python_book_thanks_for_the_bug_reports.html" rel="alternate"></link><published>2010-01-02T11:14:00-05:00</published><updated>2010-01-02T11:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-02:/2010_01_02-python_book_thanks_for_the_bug_reports.html</id><summary type="html">&lt;p&gt;I made some fundamental changes to the text processing pipeline. I think
I've corrected all of the typographical and production problems. (Plus,
I fixed some content errors, too.)&lt;/p&gt;
&lt;p&gt;I've republished the &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html"&gt;Building Skills in
Python&lt;/a&gt;, both
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/html/index.html"&gt;HTML&lt;/a&gt;
and
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/BuildingSkillsinPython.pdf"&gt;PDF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully, this is considerably better and more usable.&lt;/p&gt;
&lt;p&gt;Next step -- revising …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I made some fundamental changes to the text processing pipeline. I think
I've corrected all of the typographical and production problems. (Plus,
I fixed some content errors, too.)&lt;/p&gt;
&lt;p&gt;I've republished the &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html"&gt;Building Skills in
Python&lt;/a&gt;, both
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/html/index.html"&gt;HTML&lt;/a&gt;
and
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/BuildingSkillsinPython.pdf"&gt;PDF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully, this is considerably better and more usable.&lt;/p&gt;
&lt;p&gt;Next step -- revising the OO Design publication pipeline.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>Python Book -- Version 2.6</title><link href="https://slott56.github.io/2010_01_02-python_book_version_26.html" rel="alternate"></link><published>2010-01-02T11:14:00-05:00</published><updated>2010-01-02T11:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-02:/2010_01_02-python_book_version_26.html</id><summary type="html">&lt;p&gt;Completely revised the &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html"&gt;Building Skills in
Python&lt;/a&gt; book.&lt;/p&gt;
&lt;p&gt;It now covers Python 2.6 and is much, must easier to maintain in
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReStructured Text&lt;/a&gt;
markup, formatted with &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; and
&lt;a class="reference external" href="http://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; (via
&lt;a class="reference external" href="http://www.tug.org/texlive/"&gt;TeXLive&lt;/a&gt;) than it was in XML.&lt;/p&gt;
&lt;p&gt;XML -- while modern and clean and uniform -- isn't as convenient as
LaTeX and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Completely revised the &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html"&gt;Building Skills in
Python&lt;/a&gt; book.&lt;/p&gt;
&lt;p&gt;It now covers Python 2.6 and is much, must easier to maintain in
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReStructured Text&lt;/a&gt;
markup, formatted with &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; and
&lt;a class="reference external" href="http://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; (via
&lt;a class="reference external" href="http://www.tug.org/texlive/"&gt;TeXLive&lt;/a&gt;) than it was in XML.&lt;/p&gt;
&lt;p&gt;XML -- while modern and clean and uniform -- isn't as convenient as
LaTeX and RST.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;great! tank&amp;amp;#39;s a lot for the new version
I wil...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;CWB&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-26 13:08:53.380000-05:00&lt;/p&gt;
&lt;p&gt;great! tank's a lot for the new version
I will take a look starting this weekend&lt;/p&gt;
&lt;div class="section" id="thank-you-for-your-great-work-i-39-m-quite-eager"&gt;
&lt;h2&gt;Thank you for your great work, i&amp;amp;#39;m quite eager...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-26 14:59:01.739000-05:00&lt;/p&gt;
&lt;p&gt;Thank you for your great work, i'm quite eager to review that new
revision.
I noticed that the pdf is broken: pages 88 to 159 are blanks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ahhh-i-can-39-t-download-it-at-work-because-a"&gt;
&lt;h2&gt;Ahhh.... I can&amp;amp;#39;t download it at work because a...&lt;/h2&gt;
&lt;p&gt;Jaime&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-27 01:09:05.310000-05:00&lt;/p&gt;
&lt;p&gt;Ahhh.... I can't download it at work because a stupid &amp;quot;personal home
page&amp;quot; error on our corporate firewall... I will take a look at it at
home.
I'm interested on the RST code, is it visible from any link?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="great-book"&gt;
&lt;h2&gt;Great book.&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-02 15:20:43.192000-05:00&lt;/p&gt;
&lt;p&gt;Great book.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="sphinx"></category><category term="xml"></category><category term="LaTeX"></category><category term="texlive"></category><category term="building skills books"></category></entry><entry><title>Building Skills in Programming</title><link href="https://slott56.github.io/2010_01_02-building_skills_in_programming.html" rel="alternate"></link><published>2010-01-02T11:13:00-05:00</published><updated>2010-01-02T11:13:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2010-01-02:/2010_01_02-building_skills_in_programming.html</id><summary type="html">&lt;p&gt;I've updated &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/nonprogrammer.html#book-nonprogrammer"&gt;Building Skills in
Programming&lt;/a&gt;
-- an introduction to programming for non-programmers.&lt;/p&gt;
&lt;p&gt;The entire thing was redone in
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt; and
&lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, leading to an easier-to-read,
more colorful layout. The cross-references are generally better and
more complete. I also get Sphinx's indexing and search capabilities.&lt;/p&gt;
&lt;p&gt;Everything was touched, chapters were added …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've updated &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/nonprogrammer.html#book-nonprogrammer"&gt;Building Skills in
Programming&lt;/a&gt;
-- an introduction to programming for non-programmers.&lt;/p&gt;
&lt;p&gt;The entire thing was redone in
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt; and
&lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, leading to an easier-to-read,
more colorful layout. The cross-references are generally better and
more complete. I also get Sphinx's indexing and search capabilities.&lt;/p&gt;
&lt;p&gt;Everything was touched, chapters were added and rearranged. Numerous
Python 3 reminders were added.&lt;/p&gt;
&lt;p&gt;I can now -- easily -- include Google Adsense advertising on each
chapter.&lt;/p&gt;
&lt;p&gt;Next steps will be to upgrade my MacOS Python to 2.6.2 and then
revise the book to cover 2.6 so that it is completely up-to-date.
Also, the math needs to be redone using one of the Sphinx Math
extensions so that the resulting LaTeX (and PDF) work out correctly.&lt;/p&gt;
&lt;p&gt;Currently, my casual use of dozens of Unicode math characters has
lead Sphinx to create LaTeX that isn't source encoded properly.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-really-enjoy-and-use-the-building-skills-site-i"&gt;
&lt;h2&gt;I really enjoy and use the Building Skills site- i...&lt;/h2&gt;
&lt;p&gt;DanDan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-03 23:31:39.241000-04:00&lt;/p&gt;
&lt;p&gt;I really enjoy and use the Building Skills site- it has been an
essential resource for me and I totally appreciate that you are still
luvin' on it.
Thanks!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="building skills books"></category></entry><entry><title>The Data Cartel and "Users"</title><link href="https://slott56.github.io/2009_12_26-the_data_cartel_and_users.html" rel="alternate"></link><published>2009-12-26T10:14:00-05:00</published><updated>2009-12-26T10:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-12-26:/2009_12_26-the_data_cartel_and_users.html</id><summary type="html">&lt;p&gt;I work with a CIO who calls the DBA's &amp;quot;The Data Cartel&amp;quot;. They control
the data. Working with some DBA's always seems to turn into hostage
negotiation sessions.&lt;/p&gt;
&lt;p&gt;The worst problems seem to arise when we get out of the DBA comfort
zone and start to talk about how the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I work with a CIO who calls the DBA's &amp;quot;The Data Cartel&amp;quot;. They control
the data. Working with some DBA's always seems to turn into hostage
negotiation sessions.&lt;/p&gt;
&lt;p&gt;The worst problems seem to arise when we get out of the DBA comfort
zone and start to talk about how the data is actually going to be
used by actual human beings.&lt;/p&gt;
&lt;div class="section" id="the-users-won-t-mind"&gt;
&lt;h2&gt;The Users Won't Mind&lt;/h2&gt;
&lt;p&gt;I had one customer where the DBA demanded we use some Oracle-supplied
job -- running in crontab -- for the LDAP to database
synchronization. I was writing a J2EE application; we had direct
access to database and LDAP server. But to the data cartel, their SQL
script had some magical properties that seemed essential to them.&lt;/p&gt;
&lt;p&gt;Sadly, a crontab job introduces a mandatory delay into the processing
while the user waits for the job to run and finish the processing.
This creates either a long transaction or a multi-step transaction
where the user gets emails or checks back or something.&lt;/p&gt;
&lt;p&gt;The DBA claimed that the delays and the complex workflow were
perfectly acceptable to the users. The users wouldn't mind the delay.
Further, spawning a background process (which could lead to multiple
concurrent jobs) was unacceptable.&lt;/p&gt;
&lt;p&gt;This kind of DBA decision-making occurs in a weird vacuum. They just
made a claim about the user's needs. The DBA claimed that they
wouldn't mind the delay. Since the DBA controls the data, we're
forced to agree. So if we don't agree, what? A file &amp;quot;accidentally&amp;quot;
gets deleted?&lt;/p&gt;
&lt;p&gt;The good news is that the crontab-based script could not be made to
work in their environment in time to meet the schedule, so I had to
fall back to the simpler solution of reading the LDAP entries
directly and providing (1) immediate feedback to the user and (2) a
1-step workflow.&lt;/p&gt;
&lt;p&gt;We wasted time because the data cartel insisted (without any factual
evidence) that the users wouldn't mind the delays and complexity.&lt;/p&gt;
&lt;p&gt;[The same DBA turned all the conversations on security into a
nightmare by repeating the catch-phrase &amp;quot;we don't know what we don't
know.&amp;quot; That was another hostage negotiation situation: they wouldn't
agree to anything until we paid for a security audit that illustrated
all the shabby security practices. The OWASP list wasn't good
enough.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-users-shouldn-t-learn"&gt;
&lt;h2&gt;The Users Shouldn't Learn&lt;/h2&gt;
&lt;p&gt;Recent conversations occurred in a similarly vacuous environment.&lt;/p&gt;
&lt;p&gt;It's not clear what's going on -- the story from the data cartel is
often sketchy and missing details. But the gaps in the story indicate
how uncomfortable DBA's are with people using their precious data.&lt;/p&gt;
&lt;p&gt;It appears that a reporting data model has a number of many-to-many
associations. Periodically, a new association arrives on the scene,
and the DBA's create a many-to-many association table. (The DBA makes
it sound like a daily occurrence.)&lt;/p&gt;
&lt;p&gt;Someone -- it's not clear who -- claimed this was silly. The DBA
claims the product owner said that incremental requirements causing
incremental database changes was silly. I think the DBA is simply too
lazy to create the required many-to-many association tables. It's a
table with two FK references. A real nightmare of labor. But there
were 3 or maybe 4 instances of this. And no end in sight.&lt;/p&gt;
&lt;p&gt;It appears that the worst part was that the data model requirements
didn't arrive all at once. Instead, these requirements had the
temerity to trickle in through incremental evolution of the
requirements. This incremental design became a &amp;quot;problem&amp;quot; that needed
a a &amp;quot;solution&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="two-layers-of-hated-user-interaction"&gt;
&lt;h2&gt;Two Layers of Hated User Interaction&lt;/h2&gt;
&lt;p&gt;First, users are a problem because they're always touching the data.
Some DBA's do not want to know why users are always touching the
data. Users exist on the other side of some bulkhead. What the users
are doing on their side is none of our concern as DBA.&lt;/p&gt;
&lt;p&gt;Second, users are a problem because they're fickle. Learning -- and
the evolution of requirements that is a consequence of learning -- is
a problem that we need to solve. Someone should monitor this
bulkhead, collect all of the requirements and pass them through the
bulkhead just once. No more. What the users are learning on their
side is none of our concern as DBA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-missing"&gt;
&lt;h2&gt;What's Missing?&lt;/h2&gt;
&lt;p&gt;What's missing from the above story? Use Cases.&lt;/p&gt;
&lt;p&gt;According to the DBA, the product owner is an endless sequence of
demands for data model features. Apparently, adding features
incrementally is silly. Further, there's no rhyme or reason behind
these requests. To the DBA they appear random.&lt;/p&gt;
&lt;p&gt;The DBA wanted some magical OO design feature that would make it
possible to avoid all the work involved in adding each new
many-to-many association table.&lt;/p&gt;
&lt;p&gt;I asked for use cases. After some back and forth, I got something
that made no sense.&lt;/p&gt;
&lt;p&gt;It turns out that the data model involves &amp;quot;customers&amp;quot; the DBA started
out describing the customer-centric features of the data model. After
all, the &amp;quot;actor&amp;quot; in a use case is a person and the database contains
information on people. That's as far as the DBA was willing to go:
repeat the data model elements that involved people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-it-weren-t-for-the-users"&gt;
&lt;h2&gt;If It Weren't For the Users&lt;/h2&gt;
&lt;p&gt;The DBA could not name a user of the application, or provide a use
case for the application. They actually refused to articulate one
reason why people put data in or took data out. They sent an angry
email saying they could not find a reason why anyone would need these
many-to-many association tables.&lt;/p&gt;
&lt;p&gt;I responded that if there's no user putting data in or getting data
out then there's no system. Nothing to build. Stop asking me for help
with your design if no person will ever use it.&lt;/p&gt;
&lt;p&gt;To the DBA, this was an exercise in pure data: there was no purpose
behind it. Seriously. Why else would they tell me that there were no
use cases for the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="just-write-down-what-s-supposed-to-happen"&gt;
&lt;h2&gt;Just Write Down What's Supposed to Happen&lt;/h2&gt;
&lt;p&gt;So I demanded that the DBA write down some sequence of interactions
between actual real-world end-user and system that created something
of value to the organization. (My idea was to slide past the &amp;quot;use
case&amp;quot; buzzword and get past that objection.)&lt;/p&gt;
&lt;p&gt;The DBA wrote down a 34-step sequence of steps. 34 steps! While it's
a dreadful use case, it's a start: far better than what we had
before, which was nothing. We had a grudging acknowledgement that
actual people actually used the database for &lt;em&gt;something&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We're moving on to do simplistic noun analysis of the use case to try
and determine what's really going on with the many-to-many
associations. My approach is to try and step outside of &amp;quot;pure data&amp;quot;
and focus on what the users are doing with all those many-to-many
associations.&lt;/p&gt;
&lt;p&gt;That didn't go well. The data cartel, it appears, doesn't like
end-users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-final-response"&gt;
&lt;h2&gt;The Final Response&lt;/h2&gt;
&lt;p&gt;Here's what the DBA said. &amp;quot;The ideal case is to find a person that is
actually trying to do something and solve a real end user problem.
Unfortunately, I don't have this situation. Instead, my situation is
to describe how a system responds to inputs and the desired end state
of the system.&amp;quot;&lt;/p&gt;
&lt;p&gt;Bottom line. No requirements for the data model. No actors. No use
case. No reality. Just pure abstract data modeling.&lt;/p&gt;
&lt;p&gt;Absent requirements, this approach will turn into endless
hypothetical &amp;quot;what if&amp;quot; scenarios. New, fanciful &amp;quot;features&amp;quot; will
inevitably spring out of the woodwork randomly when there are no
actual requirements grounded in reality. Design exists to solve
problems. But the DBA has twice refused to discuss the problem that
they're trying to solve by designing additional tables.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="when-i-was-working-for-a-big-mining-company-i-was"&gt;
&lt;h2&gt;When I was working for a big mining company I was ...&lt;/h2&gt;
&lt;p&gt;Carl Trachte&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-12-25 22:13:47.947000-05:00&lt;/p&gt;
&lt;p&gt;When I was working for a big mining company I was quite fortunate in
this regard, although at the time I didn't appreciate it.&lt;/p&gt;
&lt;p&gt;As I user I was one of the &amp;quot;subject matter experts&amp;quot; who worked with the
dba's and corporate developers to take our one off system and integrate
it into the bigger one.&lt;/p&gt;
&lt;p&gt;Everyone was pretty cooperative, and the main question was usually, &amp;quot;How
are you using the data?&amp;quot;&lt;/p&gt;
&lt;p&gt;Probably the reason a consultant was brought in in the case above is
that the situation was so messed up only a consultant would have the
objectivity and ability to make it right.&lt;/p&gt;
&lt;p&gt;As I've said before, Mr. Lott, think of it as job security :-\&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="database administration"></category><category term="database design"></category></entry><entry><title>The Problem with Software Development is...</title><link href="https://slott56.github.io/2009_12_15-the_problem_with_software_development_is.html" rel="alternate"></link><published>2009-12-15T14:19:00-05:00</published><updated>2009-12-15T14:19:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-12-15:/2009_12_15-the_problem_with_software_development_is.html</id><summary type="html">&lt;p&gt;Folks like to say that there's a &amp;quot;Software Crisis&amp;quot;. We can't build
software quickly enough, cheaply enough or well enough.&lt;/p&gt;
&lt;p&gt;I agree with EWD -- software is really very, very complex. See &lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD316.2.html"&gt;EWD
316&lt;/a&gt;
for more justification of this position.&lt;/p&gt;
&lt;p&gt;Is my conclusion is that the cost of software stems from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Folks like to say that there's a &amp;quot;Software Crisis&amp;quot;. We can't build
software quickly enough, cheaply enough or well enough.&lt;/p&gt;
&lt;p&gt;I agree with EWD -- software is really very, very complex. See &lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD316.2.html"&gt;EWD
316&lt;/a&gt;
for more justification of this position.&lt;/p&gt;
&lt;p&gt;Is my conclusion is that the cost of software stems from complexity?
Hardly news.&lt;/p&gt;
&lt;p&gt;No, my conclusion is that the high cost of software comes from doing
the &lt;em&gt;wrong things&lt;/em&gt; to manage the high cost of software.&lt;/p&gt;
&lt;div class="section" id="the-illusion-of-control"&gt;
&lt;h2&gt;The Illusion of Control&lt;/h2&gt;
&lt;p&gt;Nothing gives a better illusion of control than a project plan. I
think that software development project management tools -- MS
Project specifically -- is the biggest mistake we can make.&lt;/p&gt;
&lt;p&gt;As evidence, I look at Agile methods. One key element of Agile
methods is to reduce (or eliminate) the project management nonsense
that accumulates around software development.&lt;/p&gt;
&lt;p&gt;I think that software development projects are generally pretty
complex and a big MPP file doesn't reduce the complexity or help
anyone's understanding. I think that we should not make an effort to
capture the complexity -- that's simply silly.&lt;/p&gt;
&lt;p&gt;If you find that you need a really complex document to capture a lot
of really complex complexity, you're doing something wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hands-in-the-pocket-explanations"&gt;
&lt;h2&gt;Hands in the Pocket Explanations&lt;/h2&gt;
&lt;p&gt;I think that user stories are great because they reduce the
complexity down to something that we can articulate and remember.
This gives us a fighting chance at understanding.&lt;/p&gt;
&lt;p&gt;If the use case requires a big, complicated document, we're missing
something essential. It should have a pithy, easy-to-remember,
easy-to-write-on-a-sticky-note summary. It can have a detailed
technical appendix. But it has to have a pithy, easy-to-articulate
summary.&lt;/p&gt;
&lt;p&gt;If you can't explain the use case with your hands in your pockets,
it's too complex.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="architecture"&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;An architecture diagram is helpful. Architecture -- as a foundation
-- has to be subject to considerable analysis to be sure it's right.
You need to be absolutely confident that it works. And like any piece
of mathematical analysis, you need diagrams and formulas, and you
need to show your work.&lt;/p&gt;
&lt;p&gt;A miraculous pronunciation that some architecture will work is a
terrible thing. A few pithy formula (that we can remember) and some
justification are a whole lot better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-wbs-is-the-problem"&gt;
&lt;h2&gt;The WBS Is The Problem&lt;/h2&gt;
&lt;p&gt;I find that projects with complicated WBS's have added a layer of
complexity and management that aren't helpful. The cost of software
is high, so lets add management to try and reduce our costs. On the
surface, adding labor to reduce labor doesn't make sense.&lt;/p&gt;
&lt;p&gt;Rather than waste time adding work, it would be better to introduce
someone who can facilitate decision-making (i.e., a Scrum Master) and
keep progress on track.&lt;/p&gt;
&lt;p&gt;Incremental releases of partial solutions have more value than weekly
status reports.&lt;/p&gt;
&lt;p&gt;Meetings with product owners have more value than a carefully-written
schedule for doing the poorly-understood process of detailed design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="justifications"&gt;
&lt;h2&gt;Justifications&lt;/h2&gt;
&lt;p&gt;We can justify project management by saying that it somehow makes the
software development process more efficient by eliminating
&amp;quot;roadblocks&amp;quot; or &amp;quot;inefficiencies&amp;quot;.&lt;/p&gt;
&lt;p&gt;I used to believe. I no longer buy this.&lt;/p&gt;
&lt;p&gt;Let's look at some candidate roadblocks that a project management
might smooth out.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;User Involvement. Or rather, the lack of user involvement. I don't
see how a PM does anything except nag the users. If the users
aren't motivated to help with software development by answering
questions or reviewing the results of a sprint, then the software
isn't creating any value. Stop work now and find something the
users really want.&lt;/li&gt;
&lt;li&gt;Technical Resources. Coordinating technical resources (DBA's,
sysadmins, independent testers, etc.) doesn't require a complex
plan, status meetings or reports. It only requires some phone
calls among the relevant folks. Directly.&lt;/li&gt;
&lt;li&gt;Decision-Making. The PM isn't the product owner, nor are they a
user, nor are they technically proficient enough to understand
what's really at stake. Essentially, they only act as a
facilitator in a conversation that don't fully understand. That's
fine, as long as they stick to facilitating and don't take on
responsibilities that aren't assigned to them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point, I can find a use for a facilitator (&amp;quot;Scrum
Master&amp;quot;). But I can't see why we have just an emphasis on IT
project management. The Agile folks seem to have it right. Reduce
cost and complexity by actually reducing the cost and complexity.
Not by adding management.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-a-non-software-version-of-the-same-problem-re"&gt;
&lt;h2&gt;For a non-software version of the same problem, re...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-12-21 18:33:35.465000-05:00&lt;/p&gt;
&lt;p&gt;For a non-software version of the same problem, refer to the article
Faster, NASA, Faster by Edward Lu in nytimes.com on 12/20/2009
&lt;a class="reference external" href="http://www.nytimes.com/2009/12/21/opinion/21lu.html"&gt;http://www.nytimes.com/2009/12/21/opinion/21lu.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="very-nice-easy-to-follow-simple-and-working-t"&gt;
&lt;h2&gt;Very nice - easy to follow, simple, and working. T...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-01-04 02:06:50.455000-05:00&lt;/p&gt;
&lt;p&gt;Very nice - easy to follow, simple, and working. Thanks for the
knowledge!
&lt;a class="reference external" href="http://www.itsolusenz.com/internet-marketing/pay-per-click.aspx"&gt;Pay per
click&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poor-accenture-first-tiger-and-now-this"&gt;
&lt;h2&gt;Poor Accenture!  First Tiger, and now this . . .&lt;/h2&gt;
&lt;p&gt;Carl Trachte&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-12-15 16:56:50.519000-05:00&lt;/p&gt;
&lt;p&gt;Poor Accenture! First Tiger, and now this . . .&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Mutability Analysis</title><link href="https://slott56.github.io/2009_12_09-mutability_analysis.html" rel="alternate"></link><published>2009-12-09T07:29:00-05:00</published><updated>2009-12-09T07:29:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-12-09:/2009_12_09-mutability_analysis.html</id><summary type="html">&lt;p&gt;First, there are several tiers of mutability in requirements. These
tiers define typical levels of change context of the problem, the
problem itself and the forces that select a solution to the problem.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Natural Laws&lt;/strong&gt; (i.e., Gravity, Natural Selection). As well as
metaphysical &amp;quot;laws&amp;quot; (i.e., reality). These don't …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;First, there are several tiers of mutability in requirements. These
tiers define typical levels of change context of the problem, the
problem itself and the forces that select a solution to the problem.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Natural Laws&lt;/strong&gt; (i.e., Gravity, Natural Selection). As well as
metaphysical &amp;quot;laws&amp;quot; (i.e., reality). These don't change much.
Sometimes we encapsulate this information with static final
constants so we can use names to identify the constants. PI, E,
seconds_per_minute, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Legal Context&lt;/strong&gt; (both statutory law and case law), as well as
standards and procedures with the effect of law (i.e. GAAP). Most
software products are implicitly constrained, and the constraints
are so fundamental as to be immutable. They aren't design
constraints, per se, they are constraints on the context space for
the basic description of the problem. Like air, these are hard to
see, and their effects are usually noted indirectly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry&lt;/strong&gt;. That is to say, industry practices and procedures
which are prevalent, and required before we can be called a
business in a particular industry. Practices and procedures that
cannot be ignored without severe, business-limiting consequences.
These are more flexible than laws, but as pervasive and almost as
implicit. Some software will call out industry-specific features.
Health-care packages, banking packages, etc., are explicitly
tailored to an industry context.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Company&lt;/strong&gt;. Constraints imposed by the organization of the
company itself. The structure of ownership, subsidiaries,
stock-holders, directors, trustees, etc. Often, this is reflected
in the accounting, HR and Finance systems. The chart of accounts
is the backbone of these constraints. These constraints are often
canonized in customized software to create unique value based on
the company's organization, or in spite of it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Line of Business&lt;/strong&gt;. Line of business changes stem from special
considerations for subsets of vendors, customers, or products.
Sometimes it is a combination of company organization and line of
business considerations, making the relationship even more
obscure. Often, these are identified as special cases in software.
In many cases, the fact that these are special, abnormal cases is
lost, and the &amp;quot;normal&amp;quot; case is hard to isolate from all the
special cases. Since these are things change, they often become
opaque mysteries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operational Bugs and Workarounds&lt;/strong&gt;. Some procedures or software
are actually fixes for problems introduced in other software.
These are the most ephemeral of constraints. The root cause is
obscure, the need for the fix is hidden, the problem is enigmatic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of these, tiers 1 to 3 are modeled in the very nature of the problem,
context and solution. They aren't modeled explicitly as constraints
on problem X, or business rules that apply to problem X, they are
modeled as X itself. These things are so hard to change that they are
embodied in packaged applications from third parties that don't
create unique business value, but permit engaging in business to
begin with.&lt;/p&gt;
&lt;p&gt;Layers 4 to 6, however, might involve software constraints,
explicitly packaged to make it clear. Mostly, these are procedural
steps required to either expose or conceal special cases. Once in a
while these become actual limitations on the domain of allowed data
values.&lt;/p&gt;
&lt;div class="section" id="considerations"&gt;
&lt;h2&gt;Considerations.&lt;/h2&gt;
&lt;p&gt;After considering changes to the problem in each of these tiers, we
can then consider changes to the solution. The mutation of the
implementation can be decomposed into procedural mutation and data
model mutation. The &lt;a class="reference external" href="http://www.zifa.com/"&gt;Zachman Framework&lt;/a&gt;
gives us the hint that communication, people and motivation may also
change. Often these changes are manifested through procedural or data
changes.&lt;/p&gt;
&lt;p&gt;Procedural mutation means programming changes. This implies that
flexible software is required to respond to business changes,
customer/vendor/product changes, and evolving workarounds for other
IT bugs. Packaged solutions aren't appropriate ways to implement
unique features of these lower tiers: the maintenance costs of
changing a packaged solution are astronomical. Internally developed
solutions that require extensive development, installation and
configuration aren't appropriate either.&lt;/p&gt;
&lt;p&gt;As we move to the lower and less constrained tiers, scripted
solutions using tools like Python are most appropriate. These support
flexible adaptation of business processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="data-model"&gt;
&lt;h2&gt;Data Model.&lt;/h2&gt;
&lt;p&gt;Data lasts forever, therefore, the data model mutations fall into two
deeper categories: &lt;strong&gt;structural&lt;/strong&gt; and &lt;strong&gt;non-structural&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When data values are keys (natural, primary, surrogate or foreign)
they generally must satisfy integrity constraints (they must exist,
or must not exist, or are mandatory or occur 0..&lt;em&gt;m&lt;/em&gt; times). These
are structural. The data is uninterpretable, incomplete and broken
without them. When these change, it is a either a profound change to
the business or a long-standing bug in the data model. Either way the
fix is expensive. These have to be considered carefully and
understood fully.&lt;/p&gt;
&lt;p&gt;When data values are non-key values, the constraints must be free to
evolve. The semantics of non-key data fields are rarely fixed by any
formalism. Changes to the semantics are rampant, and sometimes
imposed by the users without resorting to software change. In the
face of such change, the constraints must be chosen wisely.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Yes, it says its the number of days overdue, but it's really the
deposit amount in pennies. They're both numbers, after all.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Mutability Analysis, then, seeks to characterize likely changes to
requirements (the problem) as well as the data and processing aspects
of the solution. With some care, this will direct the selection of
solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="focus"&gt;
&lt;h2&gt;Focus.&lt;/h2&gt;
&lt;p&gt;It's important to keep mutability analysis in focus. Some folks are
members of the &lt;strong&gt;Hand-Wringers School of Design&lt;/strong&gt;, and consider every
mutation scenario as equally likely. This is usually silly and
unproductive, since their design work proceeds at a glacial pace
while they overconsider the effects of fundamental changes to
company, the industry, the legal context and the very nature of
reality itself.&lt;/p&gt;
&lt;p&gt;Here's my favorite quote from a member of the &lt;strong&gt;HWSoD&lt;/strong&gt;: &amp;quot;We don't
know what we don't know.&amp;quot;&lt;/p&gt;
&lt;p&gt;This was used to derail a conversation on security in a small web
application. Managers who don't know the technology very well are
panicked by statements like this. My response was that we actually do
know the relevant threat scenarios, just read the &lt;a class="reference external" href="http://www.owasp.org/index.php/Main_Page"&gt;OWASP
vulnerabilities&lt;/a&gt;. Yes,
some new threat may show up. No, we don't need to derail work to
counter threats that do not yet exist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="progress"&gt;
&lt;h2&gt;Progress.&lt;/h2&gt;
&lt;p&gt;The trick with mutability analysis is to do the following.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Time-box the work. Get something done. Make progress. A working
design that is less than absolute perfection is better than no design
at all. Hand-wringing over vanishingly unlikely futures is time
wasted. Wasted. Create value as quickly as possible.&lt;/li&gt;
&lt;li&gt;Work up from the bottom. Consider the tiers most likely to change
first. Workarounds are likely to change. Features of the line of
business might change. Company changes only matter if you've been
specifically told the company is buying or for sale. Beyond that,
it's irrelevant for the most part. (&amp;quot;But my software will change the
industry landscape.&amp;quot; No it won't. But if it is really novel, then
delivery soon matters more than flexibility. If the landscape
changes, you'll have to fundamentally rewrite it anyway.)&lt;/li&gt;
&lt;li&gt;Name Names. Vague hand-waving mutation scenarios are useless. You
must identify specific changes, and who will cause that change. Name
the manager, customer, owner, stakeholder, executive, standard
committee member, legislator or diety who will impose the change. If
you can't name names, you don't really have a change scenario, you
have hand-wringing. Stop worry. Get something to work.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="but-what-if-i-do-something-wrong"&gt;
&lt;h2&gt;But What If I Do Something Wrong?&lt;/h2&gt;
&lt;p&gt;What? Is it correct? Is it designed to make optimal use of resources?
Can you prove it's correct, or do you have unit tests to demonstrate
that it's likely to be correct? Can you prove it's optimal? Move on.
Maintainability and Adaptability are nice-to-have, not central.&lt;/p&gt;
&lt;p&gt;Getting something to work comes first. When confronted with
alternative competing, correct, optimal designs, adaptability and
maintainability are a way to choose between them.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="object-oriented design"></category></entry><entry><title>The King Cnut School of Management</title><link href="https://slott56.github.io/2009_12_03-the_king_cnut_school_of_management.html" rel="alternate"></link><published>2009-12-03T07:16:00-05:00</published><updated>2009-12-03T07:16:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-12-03:/2009_12_03-the_king_cnut_school_of_management.html</id><summary type="html">&lt;p&gt;See this story of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cnut_the_Great#Ruler_of_the_waves"&gt;King Cnut ruling the
waves&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The King Cnut School of Management is management by fiat. Declaring
it so.&lt;/p&gt;
&lt;p&gt;PM: &amp;quot;When will this transition to production?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;After the firewall and VM configuration.&amp;quot;&lt;/p&gt;
&lt;p&gt;PM: &amp;quot;So, can we say Thursday?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;You can say that, if you want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this story of &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cnut_the_Great#Ruler_of_the_waves"&gt;King Cnut ruling the
waves&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The King Cnut School of Management is management by fiat. Declaring
it so.&lt;/p&gt;
&lt;p&gt;PM: &amp;quot;When will this transition to production?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;After the firewall and VM configuration.&amp;quot;&lt;/p&gt;
&lt;p&gt;PM: &amp;quot;So, can we say Thursday?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;You can say that, if you want, but you have no basis for that.
The firewall hardware is sitting on the loading dock, and the RHEL
VM's won't run Python 2.6 with the current SELinux settings. I have
no basis for expecting this to be fixed in a week.&amp;quot;&lt;/p&gt;
&lt;p&gt;PM: &amp;quot;We can just pick a date, and then revise it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Good plan. Pick a random date and complain when it's not met.
While you're at it, hold the tide back for a few hours, too.&amp;quot;&lt;/p&gt;
</content><category term="Technologies"></category><category term="project management"></category></entry><entry><title>Standard "Distributed" Database Issues</title><link href="https://slott56.github.io/2009_11_24-standard_distributed_database_issues.html" rel="alternate"></link><published>2009-11-24T21:43:00-05:00</published><updated>2009-11-24T21:43:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-11-24:/2009_11_24-standard_distributed_database_issues.html</id><summary type="html">&lt;p&gt;Here's a quote &amp;quot;standard issues associated w/ a disitributed db&amp;quot;. And
&amp;quot;There is the push versus pull of data. Say you use push and...&amp;quot; and
more stuff after that.&lt;/p&gt;
&lt;p&gt;First, by &amp;quot;Distributed Database&amp;quot;, the question could mean almost
anything. However, they provide the specific example of Oracle's
Multi-Master Replication. That …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a quote &amp;quot;standard issues associated w/ a disitributed db&amp;quot;. And
&amp;quot;There is the push versus pull of data. Say you use push and...&amp;quot; and
more stuff after that.&lt;/p&gt;
&lt;p&gt;First, by &amp;quot;Distributed Database&amp;quot;, the question could mean almost
anything. However, they provide the specific example of Oracle's
Multi-Master Replication. That narrows the question somewhat.&lt;/p&gt;
&lt;p&gt;This appears to mean that -- for them -- Distributed Database means
two (or more) applications, two (or more) physical database instances
and at least one class of entities which exist in multiple
applications and are persisted in multiple databases.&lt;/p&gt;
&lt;p&gt;That means multiple applications with responsibility for a single
class of objects.&lt;/p&gt;
&lt;p&gt;That breaks at least one fundamental design principle. Generally, a
class has one responsibility. Now we have two implementations sharing
some kind of responsibility for a single class of objects.
Disentangling the responsibilities is always hard.&lt;/p&gt;
&lt;div class="section" id="standard-issues"&gt;
&lt;h2&gt;Standard Issues&lt;/h2&gt;
&lt;p&gt;There's one standard issue with this kind of distributed database. It
is horribly complex and never worth it.&lt;/p&gt;
&lt;p&gt;Never.&lt;/p&gt;
&lt;p&gt;You broke the &lt;a class="reference external" href="http://www.objectmentor.com/resources/articles/srp.pdf"&gt;Single Responsibility
Principle&lt;/a&gt;.
You'll regret that.&lt;/p&gt;
&lt;p&gt;The &amp;quot;distributed database&amp;quot; is like a spread sheet.&lt;/p&gt;
&lt;p&gt;First, you have a problem that you think you can solve with a
distributed database.&lt;/p&gt;
&lt;p&gt;Now you have two problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sensible-alternatives"&gt;
&lt;h2&gt;Sensible Alternatives&lt;/h2&gt;
&lt;p&gt;There are two standard solutions to problems that appear to require a
distributed database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A data warehouse&lt;/strong&gt;. Often, there is no actual state change that is
part of a transactional workflow that moves back and forth between
the applications. In most cases, the information needs be merged for
reporting and analysis purposes. Occasionally, this merged
information is used for transactional processing, but that's easily
handled by the dimensional bus feeding back to source applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An Enterprise Service Bus (ESB) and a Service-Oriented Architecture
(SOA)&lt;/strong&gt;. The rest of the time, one has a &amp;quot;Distributed Transaction&amp;quot;.
This is better thought of as a Composite Applications. A composite
application is not part of any of the foundational (&amp;quot;distributed&amp;quot;)
applications; a composite is fundamentally different and of a higher
level&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stay-out-of-that-box"&gt;
&lt;h2&gt;Stay Out Of That Box&lt;/h2&gt;
&lt;p&gt;In short, the &amp;quot;standard issues&amp;quot; with attempting a distributed
database are often insurmountable. So don't try.&lt;/p&gt;
&lt;p&gt;Pick a fundamentally simpler architecture like Composite Applications
via an SOA using an ESB.&lt;/p&gt;
&lt;p&gt;Yes, simpler. In the long run, a composite application exploits the
foundational applications without invoking a magical two-way
distributed coherence among multiple data stores. A composite
application leverages the foundational applications by creating a
higher-level workflow to pass data between the foundational
applications as needed by the composite application.&lt;/p&gt;
&lt;p&gt;Read any vendor article on any ESB and you'll see numerous examples
of &amp;quot;distributed&amp;quot; databases done more simply (and more effectively) by
ditching the concept of &amp;quot;distributed&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www-01.ibm.com/software/info/ebf/smartsoa/index.jsp?cm_mmc=agus_itebfsoatest-20090701-108AU1HW-_-k-_-google-_-ibm_soa_mkwid_scWvrWyxv_3064320991_4320hrybowu501022"&gt;IBM&lt;/a&gt;,
&lt;a class="reference external" href="http://www.oracle.com/webapps/dialogue/dlgpage.jsp?p_ext=Y&amp;amp;p_dlg_id=7747792&amp;amp;src=6818567&amp;amp;Act=5&amp;amp;sckw=NAMK09052542MPP001.GCM.8320.200"&gt;Oracle&lt;/a&gt;
(which now owns Sun's JCAPS),
&lt;a class="reference external" href="http://www.jboss.com/products/platforms/soa/?s_kwcid=TC%7C8574%7Centerprise%20service%20bus%7C%7CS%7Ce%7C3689181351"&gt;JBoss&lt;/a&gt;,
&lt;a class="reference external" href="http://wso2.com/products/enterprise-service-bus/"&gt;WSO2&lt;/a&gt;,
&lt;a class="reference external" href="https://open-esb.dev.java.net/"&gt;OpenESB&lt;/a&gt;, &lt;a class="reference external" href="http://www.sun.com/software/javaenterprisesystem/javacaps/glassfish_esb.jsp"&gt;Glassfish
ESB&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="ESB"></category><category term="SOA"></category></entry><entry><title>ORM magic</title><link href="https://slott56.github.io/2009_11_16-orm_magic.html" rel="alternate"></link><published>2009-11-16T23:01:00-05:00</published><updated>2009-11-16T23:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-11-16:/2009_11_16-orm_magic.html</id><summary type="html">&lt;p&gt;The ORM layer is magic, right?&lt;/p&gt;
&lt;p&gt;The ORM layer &amp;quot;hides&amp;quot; the database, right?&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;never&lt;/em&gt; have to think about persistence, right? It just magically
&amp;quot;happens.&amp;quot;&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;Here's some quotes from a recent email:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Somehow people are surprised that we would have performance issues.
Somehow people are surprised that now that …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The ORM layer is magic, right?&lt;/p&gt;
&lt;p&gt;The ORM layer &amp;quot;hides&amp;quot; the database, right?&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;never&lt;/em&gt; have to think about persistence, right? It just magically
&amp;quot;happens.&amp;quot;&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;Here's some quotes from a recent email:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Somehow people are surprised that we would have performance issues.
Somehow people are surprised that now that we are putting humpy/dumpy
together that we would have to go back and look at how we have
partitioned the system.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;I'm not sure what all of that means except that it appears that the
author thinks mysterious &amp;quot;people&amp;quot; think performance considerations are
secondary.&lt;/p&gt;
&lt;p&gt;I don't have a lot of technical details, just a weird ranting list of
complaints, including the following.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;... the root cause of the performance issue was that each call to
the component did a very small amount of work. So, they were having
to make 10 calls to 10 different components to gather useful info.
Even though each component calls was quick (something like 0.1
second), to populate the gui screen, they had to make 15 of them.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Read the following Stack Overflow questions: &lt;a class="reference external" href="http://stackoverflow.com/questions/1691207/optimizing-this-django-code"&gt;Optimizing this Django
Code?&lt;/a&gt;,
and &lt;a class="reference external" href="http://stackoverflow.com/questions/1689031/overhead-of-a-round-trip-to-mysql"&gt;Overhead of a Round-trip to
MySql?&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="orm-is-a-silver-bullet-it-solves-all-our-problems"&gt;
&lt;h2&gt;ORM Is A &amp;quot;Silver Bullet&amp;quot; -- It Solves All Our Problems&lt;/h2&gt;
&lt;p&gt;If you think that you can adopt some architectural component and then
program without further regard for the what that component actually
does, stop coding now and find another job. Seriously.&lt;/p&gt;
&lt;p&gt;If you think you don't have to consider performance, please save us from
having to clean up your mess.&lt;/p&gt;
&lt;p&gt;I'm repeatedly shocked at people who claim that some particular ORM
(e.g., Hibernate) was unacceptable because of poor performance.&lt;/p&gt;
&lt;p&gt;ORM's like &lt;a class="reference external" href="https://www.hibernate.org/"&gt;Hibernate&lt;/a&gt;,
&lt;a class="reference external" href="http://ibatis.apache.org/"&gt;iBatis&lt;/a&gt;,
&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;, &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/db/models/#topics-db-models"&gt;Django
ORM&lt;/a&gt;,
etc., are not performance problems. They're solutions to specific
problems. And like all solution technology, they're very easy to misuse.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint 1: ORM == Mapping&lt;/strong&gt;. Not Magic. Mapping.&lt;/p&gt;
&lt;p&gt;The mapping is from low-rent relational row-column (with no usable
collections) to object instances. That's all. Just mapping rows to
objects. No magic. Object collections and SQL foreign keys are cleverly
exchanged using specific techniques that must be understood to be used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint 2: Encapsulation != Ignorance&lt;/strong&gt;. OO design frees us from
&amp;quot;implementation details&amp;quot;. This does not mean that it frees us from
performance considerations. Performance is not an &amp;quot;implementation
detail&amp;quot;. The performance considerations of class encapsulation are
&lt;em&gt;central&lt;/em&gt; to the very idea of encapsulation.&lt;/p&gt;
&lt;p&gt;One central reason we have object-oriented design is to separate
performance from programming nuts and bolts. We want to be able to pick
and choose alternative class definitions based on performance
considerations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="orm-s-role"&gt;
&lt;h2&gt;ORM's Role.&lt;/h2&gt;
&lt;p&gt;ORM saves writing mappings from column names to class instances. It
saves us from writing SQL. It doesn't remove the need to actually think
about what's actually going on.&lt;/p&gt;
&lt;p&gt;If an attribute is implemented as a property that actually does a query,
we need to pay attention to this. We need to read the API documentation,
know what features of a class do queries, and think about how to manage
this.&lt;/p&gt;
&lt;p&gt;If we don't know, we need to write experiments and spikes to demonstrate
what is happening. Reading the SQL logs should be done early in the
architecture definition.&lt;/p&gt;
&lt;p&gt;You can't write random code and complain that the performance isn't
very good.
------------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;If you think you should be able to write code without thinking and
understanding what you're doing, you need to find a new job.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="ORM"></category></entry><entry><title>Another HTML Cleanup</title><link href="https://slott56.github.io/2009_11_10-another_html_cleanup.html" rel="alternate"></link><published>2009-11-10T06:28:00-05:00</published><updated>2009-11-10T06:28:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-11-10:/2009_11_10-another_html_cleanup.html</id><summary type="html">&lt;p&gt;Browsers are required to skip over bad HTML and render something.&lt;/p&gt;
&lt;p&gt;Consequently, many web sites have significant HTML errors that don't
show up until you try to scrape their content.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt;
has a handy hook for doing &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/documentation.html#Sanitizing%20Bad%20Data%20with%20Regexps"&gt;markup
massage&lt;/a&gt;
prior to parsing. This is a way of fixing site-specific …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Browsers are required to skip over bad HTML and render something.&lt;/p&gt;
&lt;p&gt;Consequently, many web sites have significant HTML errors that don't
show up until you try to scrape their content.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt;
has a handy hook for doing &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/documentation.html#Sanitizing%20Bad%20Data%20with%20Regexps"&gt;markup
massage&lt;/a&gt;
prior to parsing. This is a way of fixing site-specific bugs when
necessary.&lt;/p&gt;
&lt;p&gt;Here's a two-part massage I wrote recently that corrects two common
(and show-stopping) HTML issues with quoted attributes values in a
tag.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Fix style=&amp;quot;background-image:url(&amp;quot;url&amp;quot;)&amp;quot;
background_image = re.compile(r'background-image:url\(&amp;quot;([^&amp;quot;]+)&amp;quot;\)')
def fix_background_image( match ):
   return 'background-image:url(&amp;amp;quote;%s&amp;amp;quote;)' % ( match.group(1) )

# Fix src=&amp;quot;url name=&amp;quot;name&amp;quot;&amp;quot;
bad_img = re.compile( r'src=&amp;quot;([^ ]+) name=&amp;quot;([^&amp;quot;]+)&amp;quot;&amp;quot;' )
def fix_bad_img( match ):
   return 'src=&amp;quot;%s&amp;quot; name=&amp;quot;%s&amp;quot;' % ( match.group(1), match.group(2) )

fix_style_quotes = [
   (background_image, fix_background_image),
   (bad_img, fix_bad_img),
]
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;fix_style_quotes&amp;quot; sequence is provided to the BeautifulSoup
contructor as the markupMassage value.&lt;/p&gt;
</content><category term="Technologies"></category><category term="HTML"></category><category term="#python"></category><category term="beautiful soup"></category></entry><entry><title>BBEdit Configuration</title><link href="https://slott56.github.io/2009_11_06-bbedit_configuration.html" rel="alternate"></link><published>2009-11-06T10:07:00-05:00</published><updated>2009-11-06T10:07:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-11-06:/2009_11_06-bbedit_configuration.html</id><summary type="html">&lt;p&gt;After installing Python 2.6 in Mac OS X, I had problems with BBEdit not
finding the right version of Python. It kept running an old 2.5 version.&lt;/p&gt;
&lt;p&gt;I finally tracked down the BBEdit documentation,
&lt;a class="reference external" href="http://pine.barebones.com/manual/BBEdit_9_User_Manual.pdf"&gt;http://pine.barebones.com/manual/BBEdit_9_User_Manual.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Found this: &amp;quot;BBEdit expects to find Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After installing Python 2.6 in Mac OS X, I had problems with BBEdit not
finding the right version of Python. It kept running an old 2.5 version.&lt;/p&gt;
&lt;p&gt;I finally tracked down the BBEdit documentation,
&lt;a class="reference external" href="http://pine.barebones.com/manual/BBEdit_9_User_Manual.pdf"&gt;http://pine.barebones.com/manual/BBEdit_9_User_Manual.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Found this: &amp;quot;BBEdit expects to find Python in /usr/bin,
/usr/local/bin, or /sw/bin. If you have installed Python elsewhere,
you must create a symbolic link in /usr/local/bin pointing to your
copy of Python in order to use pydoc and the Python debugger.&amp;quot;&lt;/p&gt;
&lt;p&gt;Checked in /usr/bin and found an old Python there. I think Fink did
that. Removed it and BBEdit is much happier. As is Komodo Edit.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="the-bbedit-manual-is-actually-pretty-trivial-to-tr"&gt;
&lt;h2&gt;The BBEdit manual is actually pretty trivial to tr...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-06 13:10:55.953000-05:00&lt;/p&gt;
&lt;p&gt;The BBEdit manual is actually pretty trivial to track down: just go to
the Help menu, and choose 'User Manual'.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="macosx"></category><category term="#python"></category><category term="bbedit"></category></entry><entry><title>Parsing HTML from Microsoft Products (Like Front Page, etc.)</title><link href="https://slott56.github.io/2009_11_06-parsing_html_from_microsoft_products_like_front_page_etc.html" rel="alternate"></link><published>2009-11-06T09:53:00-05:00</published><updated>2009-11-06T09:53:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-11-06:/2009_11_06-parsing_html_from_microsoft_products_like_front_page_etc.html</id><summary type="html">&lt;p&gt;Ugh. When you try to parse MS-generated HTML, you find some extension
syntax that is completely befuddling.&lt;/p&gt;
&lt;p&gt;I've tried a few things in the past, none were particularly good.&lt;/p&gt;
&lt;p&gt;In reading a file recently, I found that even &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful
Soup&lt;/a&gt; was unable to
prettify or parse it.&lt;/p&gt;
&lt;p&gt;The document was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ugh. When you try to parse MS-generated HTML, you find some extension
syntax that is completely befuddling.&lt;/p&gt;
&lt;p&gt;I've tried a few things in the past, none were particularly good.&lt;/p&gt;
&lt;p&gt;In reading a file recently, I found that even &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful
Soup&lt;/a&gt; was unable to
prettify or parse it.&lt;/p&gt;
&lt;p&gt;The document was filled with &amp;lt;!--[if...]&amp;gt;...&amp;lt;![endif]--&amp;gt; constructs
that looked vaguely directive or comment-like, but still managed to
stump the parser.&lt;/p&gt;
&lt;p&gt;The BeautifulSoup parser has a markupMassage parameter that applies a
sequence of regexps to the source document to cleanup things that are
baffling. Some things, however, are too complex for simple regexp's.
Specifically, these nested comment-like things were totally
confusing.&lt;/p&gt;
&lt;p&gt;Here's what I did. I wrote a simple generator which emitted the text
that was unguarded by these things. The resulting sequence of text
blocks could be assembled into a document that BeautifulSoup could
parse.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def clean_directives( page ):
    &amp;quot;&amp;quot;&amp;quot;
    Stupid Microsoft &amp;quot;Directive&amp;quot;-like comments!
    Must remove all &amp;lt;!--[if...]&amp;gt;...&amp;lt;![endif]--&amp;gt; sequences.  Which can be nested.
    Must remove all &amp;lt;![if...]&amp;gt;...&amp;lt;![endif]&amp;gt; sequences.  Which appear to be the nested version.
    &amp;quot;&amp;quot;&amp;quot;
    if_endif_pat= re.compile(  r&amp;quot;(\&amp;lt;!-*\[if .*?\]\&amp;gt;)|(&amp;lt;!\[endif\]-*\&amp;gt;)&amp;quot; )
    context= []
    start= 0
    for m in if_endif_pat.finditer( page ):
       if &amp;quot;[if&amp;quot; in m.group(0):
           if start is not None:
               yield page[start:m.start()]
           context.append(m)
           start= None
       elif &amp;quot;[endif&amp;quot; in m.group(0):
           context.pop(-1)
           if len(context) == 0:
               start= m.end()+1
    if start is not None:
       yield page[start:]
&lt;/pre&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="those-if-endif-blogspot-won-39-t-let-me-post-t"&gt;
&lt;h2&gt;Those if...endif (blogspot won&amp;amp;#39;t let me post t...&lt;/h2&gt;
&lt;p&gt;Kevin H&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-06 10:50:52.352000-05:00&lt;/p&gt;
&lt;p&gt;Those if...endif (blogspot won't let me post the real syntax...grrr)
things are called &amp;quot;conditional comments&amp;quot;, and are used to do browser
detection and try and make up for the fact that MS couldn't be bothered
to follow web standards for a really long time.&lt;/p&gt;
&lt;p&gt;see: &lt;a class="reference external" href="http://www.quirksmode.org/css/condcom.html"&gt;http://www.quirksmode.org/css/condcom.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, I'm curious, did you try using lxml.html? It's often handy when
dealing with broken pages, and sometimes it can even deal with pages
that BeautifulSoup chokes on.&lt;/p&gt;
&lt;p&gt;I do like your solution, though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-lxml-it-39-s-the-swiss-army-knife-tm-of"&gt;
&lt;h2&gt;+1 on lxml; it&amp;amp;#39;s the Swiss Army knife (tm) of ...&lt;/h2&gt;
&lt;p&gt;Michael Watkins&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-06 13:18:24.816000-05:00&lt;/p&gt;
&lt;p&gt;+1 on lxml; it's the Swiss Army knife (tm) of xml/html parsing and
munging. I'll let blogger screw up the formatting - this is pretty easy:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# this strips all styles, id and class attributes
from lxml.html import clean, fromstring, tostring
cleaner = clean.Cleaner(page_structure=False,
style=True,
safe_attrs_only=True,
comments=True,
remove_unknown_tags=True,
remove_tags=['span',])
doc =
fromstring(open('mswordexport.html').read().decode('windows-1252'))
cleaner(doc)
# clear certain attributes
for el in doc.xpath('.//*'):
el.attrib.pop('id', None)
el.attrib.pop('class', None)
el.attrib.pop('style', None)
print tostring(doc).encode('utf-8')
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="HTML"></category><category term="#python"></category><category term="beautiful soup"></category></entry><entry><title>Stored Procedures and Ad Hominem Arguments</title><link href="https://slott56.github.io/2009_11_05-stored_procedures_and_ad_hominem_arguments.html" rel="alternate"></link><published>2009-11-05T21:07:00-05:00</published><updated>2009-11-05T21:07:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-11-05:/2009_11_05-stored_procedures_and_ad_hominem_arguments.html</id><summary type="html">&lt;p&gt;The question of &amp;quot;Stored Procedures and Triggers&amp;quot; comes up fairly
frequently.&lt;/p&gt;
&lt;p&gt;Over the years (since the 90's, when stored procedures were
introduced to Oracle) I've learned precisely how awful a mistake this
technology is.&lt;/p&gt;
&lt;p&gt;I've seen numerous problems that have stored procedures as their root
cause. I'll identify just a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The question of &amp;quot;Stored Procedures and Triggers&amp;quot; comes up fairly
frequently.&lt;/p&gt;
&lt;p&gt;Over the years (since the 90's, when stored procedures were
introduced to Oracle) I've learned precisely how awful a mistake this
technology is.&lt;/p&gt;
&lt;p&gt;I've seen numerous problems that have stored procedures as their root
cause. I'll identify just a few. These are not &amp;quot;biases&amp;quot; or
&amp;quot;opinions&amp;quot;. These are experience.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &amp;quot;DBA as Bottleneck&amp;quot; problem. In short, the DBA's take projects
hostage while the development team waits for stored procedures to
be written, corrected, performance tuned or maintained.&lt;/li&gt;
&lt;li&gt;The &amp;quot;Data Cartel&amp;quot; problem. The DBA's own parts of the business
process. They refuse (or complicate) changes to fundamental
business rules for obscure database reasons.&lt;/li&gt;
&lt;li&gt;The &amp;quot;Unmaintainability&amp;quot; problem. The stored procedures (and
triggers) have reached a level of confusion and complexity that
means that it's easier to drop the application and install a new
one.&lt;/li&gt;
&lt;li&gt;The &amp;quot;Doesn't Break the License&amp;quot; problem. For some reason, the
interpreted and source-code nature of stored procedures makes them
the first candidate for customization of purchased applications.
Worse, the feeling is that doing so doesn't (or won't) impair the
support agreements.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I bring these up, I wind up subject to weird &lt;em&gt;ad hominem&lt;/em&gt;
attacks.&lt;/p&gt;
&lt;p&gt;I've been told (more than once) that I'm not being &amp;quot;balanced&amp;quot; and
that stored procedures have &amp;quot;There are pros and cons on both sides&amp;quot;.
This is bunk. I have plenty of facts. Stored procedures create a
mess. I've never seen any good come from stored procedures.&lt;/p&gt;
&lt;p&gt;I don't use GOTO's haphazardly. I don't write procedural spaghetti
code. No one says that I should be more &amp;quot;balanced.&amp;quot;&lt;/p&gt;
&lt;p&gt;I don't create random database structures with 1NF, 2NF and 3NF
violations in random places. No one says I should be more &amp;quot;balanced&amp;quot;.&lt;/p&gt;
&lt;p&gt;Indeed, asking me to examine my bias is an ad hominem argument. My
fact-based experience with stored procedures is entirely negative.&lt;/p&gt;
&lt;p&gt;But when it comes to stored procedures, there's a level of
defensiveness that defies my understanding. I assume Oracle, IBM and
Microsoft are paying kickbacks to DBA's to support stored procedures
and PL/SQL over the more sensible alternatives.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="there-are-times-when-sp-have-their-place-procedur"&gt;
&lt;h2&gt;There are times when SP have their place (procedur...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-06 11:30:03.472000-05:00&lt;/p&gt;
&lt;p&gt;There are times when SP have their place (procedures processing lots of
data, procedures pulling together several queries/updates into one DB
call, rather than several network round-trips and also for use in
securing certain permissions, etc., to only within specific
function/procedures).&lt;/p&gt;
&lt;p&gt;However... if your procedures are getting written by DBAs, and not
developers (who know PL/SQL (or whatever language) you have a bit
problem... you wouldn't allow Websphere administrator to insist on
writing all Java code, for example!&lt;/p&gt;
&lt;p&gt;As for customers edition stored procedures - yes, this is a nightmare -
however, Oracle (and possibly other RDBMS providers) have mechanisms for
encrypting code, mitigating against this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="these-are-pretty-arbitrary-objections-you-could"&gt;
&lt;h2&gt;These are pretty arbitrary objections.  You could ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-05 15:11:07.666000-05:00&lt;/p&gt;
&lt;p&gt;These are pretty arbitrary objections. You could apply complaints #s 1-3
to virtually any group within a software development organization -
Business Analysts, for example, or QA testers. It sounds to me like
you've just had bad experiences with &amp;quot;database people&amp;quot; and decided to
hold a grudge.&lt;/p&gt;
&lt;p&gt;There are perfectly legitimate reasons to create stored procedures -
restricting permissions and attack surface, for example, or enhancing
performance by caching query plans for queries with complex logic. That
doesn't justify jamming everything into a proc, but as with everything
else in software development, stored procs are a tool, and can be used
and abused like any other tool. How much do you like those sysadmins who
write everything in completely unreadable Perl scripts? Or the BAs who
code all the business logic in convoluted VBA before handing it over to
a &amp;quot;real&amp;quot; coder to re-write?&lt;/p&gt;
&lt;p&gt;I would recommend examining your biases, and giving the DBAs a break,
because if you came to me with that attitude, you're damn right I would
hold up your project while I tune your stored procs, because now I have
serious doubts about your ability to use them effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-you-don-39-t-allow-the-possibility-that-those"&gt;
&lt;h2&gt;If you don&amp;amp;#39;t allow the possibility that those ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-04 13:23:43.718000-05:00&lt;/p&gt;
&lt;p&gt;If you don't allow the possibility that those who disagree with you
could be anything but crazy or corrupt, then it seems optimistic to
expect respectful debate from them.&lt;/p&gt;
&lt;p&gt;In environments where the database will be accessed and changed by
ad-hoc programs and by many different applications, there are good
reasons to keep logic bound unavoidably to the data instead of trying to
duplicate it separately in every potential channel of access. In this
case, it's important that there not be a sharp and hostile separation
between DBAs and developers. If you've never worked in situations like
that, though - if your data is always the tail and the application is
the dog, instead of the other way around, or if you've never had good
cooperation between DBAs and development - then yes, I suppose you've
never been in a situation where stored procedures could have helped.
Or maybe I'm crazy and corrupt, too.&lt;/p&gt;
&lt;p&gt;It would help a lot if approaches like PL/Python were available outside
postgresql (or if more workplaces used postgresql). Wanting to use
stored procedures shouldn't restrict a person to using a single rather
aged and limited language, but in most databases, it does.&lt;/p&gt;
&lt;p&gt;There are 2 reasons for stored procedures:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="men"&gt;
&lt;h2&gt;1. Men...&lt;/h2&gt;
&lt;p&gt;nnis&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-04 15:21:25.810000-05:00&lt;/p&gt;
&lt;p&gt;There are 2 reasons for stored procedures:&lt;/p&gt;
&lt;p&gt;1. Mentioned by Catherine: You have multiple applications written in
different languages/platforms and no shared libraries between those
accessing the same data and you want to make sure that some validation
always takes place. To avoid duplication of code you write it in a
stored procedure. This is to make sure there is 1 source for the rules,
otherwise you might end up with various apps doing different things.&lt;/p&gt;
&lt;p&gt;2. The stored procedure is doing massive data moves. For example you
move a million records form table A to B and it can't be expressed in
one SQL statement. By doing it in a stored procedure you can use
variables etc, but avoid all that data going out of the database
application over the wire to your application server into your
application and back.&lt;/p&gt;
&lt;p&gt;Otherwise you are right: Avoid stored procedures as much as possible.
The people that know the application better are the developers, there is
more of them than DBAs, they know their programming language better than
whatever language the DB provides, they have better IDEs and debugging
tools. Programming in stored procedures and having to depend on the
usually fewer expert DBAs slows everybody down. Also if you ever decide
to switch database engines for your application you will have to rewrite
all your stored procedures. It is better to try to decouple your
application from your particular Database implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-you-work-in-an-area-where-items-1-and-2-are-r"&gt;
&lt;h2&gt;If you work in an area where items #1 and #2 are r...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-05 10:04:32.095000-05:00&lt;/p&gt;
&lt;p&gt;If you work in an area where items #1 and #2 are real, then you have a
&amp;quot;management&amp;quot; and &amp;quot;staffing&amp;quot; problem, not a &amp;quot;stored procedure&amp;quot; problem.
(This is especially true if your developers aren't the ones writing the
stored procedures.)&lt;/p&gt;
&lt;p&gt;I agree with the article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-ve-also-come-to"&gt;
&lt;h2&gt;I've also come to ...&lt;/h2&gt;
&lt;p&gt;Christopher&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-04 14:20:22.719000-05:00&lt;/p&gt;
&lt;p&gt;I agree with the article.&lt;/p&gt;
&lt;p&gt;I've also come to this realization that stored procedures break the
programmer's ability to &amp;quot;fully grasp&amp;quot; the program. This also means that
unless the programmer using his language also knows the SP language,
then you now automatically involve two programmers, and neither can
&amp;quot;hold the program in their head&amp;quot;. So then you end up having to write
down a lot of documentation (business rules, etc) that too can be
misleading, and requires an analyst and lots of writing, and meetings,
and now instead of one guy being able to crank out something good and
fast you end up with a team creating something bad and slow.&lt;/p&gt;
&lt;p&gt;Why bad? Because no matter how well people think they can write down
what's in their brain, putting things down on paper or even
communicating verbally creates friction that does not exist if one
person is able to just think about the whole problem.&lt;/p&gt;
&lt;p&gt;&amp;#64;catherine: even PL/python is a subset of the real python languange, and
does not have the full expressiveness of python + standard library +
third party tools and frameworks.&lt;/p&gt;
&lt;p&gt;The other thing is that people think they need to protect the data from
the programmer, that they need an abstraction layer. I say: get better
programmers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="don-t-know-why-someone-would-argue-with-you-c"&gt;
&lt;h2&gt;Don't know why someone would argue with you, c...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-04 22:13:37.041000-05:00&lt;/p&gt;
&lt;p&gt;Don't know why someone would argue with you, clearly you are speaking
from personal experiences. They are what they are.&lt;/p&gt;
&lt;p&gt;Triggers can definitely get out of hand and are, imho, the most single
most abused &amp;quot;feature&amp;quot; of any database. What seems like a god-send
rapidly deteriorates into a tangled mess of &amp;quot;magic bullets&amp;quot;. If you see
a lot of triggers being used that should throw up some serious red
flags.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sigh-developers-sure-love-to-hate-on-the-dbas"&gt;
&lt;h2&gt;sigh...developers sure love to hate on the DBAs.&lt;/h2&gt;
&lt;p&gt;SDC&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-04 21:06:24.283000-05:00&lt;/p&gt;
&lt;p&gt;sigh...developers sure love to hate on the DBAs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stored-procedures-may-just-be-another-facet-of-ven"&gt;
&lt;h2&gt;Stored procedures may just be another facet of ven...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-05 04:38:44.880000-05:00&lt;/p&gt;
&lt;p&gt;Stored procedures may just be another facet of vendor lock-in. Using one
type binds you forever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ira-i-too-have-had-bad-experience-with-d"&gt;
&lt;h2&gt;&amp;#64; Ira: I too have had bad experience with &amp;quot;d...&lt;/h2&gt;
&lt;p&gt;Christopher&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-06 05:41:59.595000-05:00&lt;/p&gt;
&lt;p&gt;&amp;#64; Ira:
I too have had bad experience with &amp;quot;dba&amp;quot; people then. It seems to be the
norm, too.
So while in theory stored procedures are a great too, in practice they
turn things into a complete mess. That's what he's saying.
Also, and he approaches this obliquely, he states that insisting on
stored procedures implies mistrust of the programmer's skills. That
can't be good for morale, and demoralized programmers hardly produce
good stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-biggest-problem-with-sps-is-that-the-become-bla"&gt;
&lt;h2&gt;My biggest problem with sps is that the become bla...&lt;/h2&gt;
&lt;p&gt;flukus&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-05 05:19:15.873000-05:00&lt;/p&gt;
&lt;p&gt;My biggest problem with sps is that the become black holes that all
business logic fall into.&lt;/p&gt;
&lt;p&gt;Something might start out as a simple stored procedure but sooner or
later complex business logic starts creeping in. Then if more than one
app requires the same proc critical mass is achieved.&lt;/p&gt;
&lt;p&gt;Sql is great at expressing set based logic but it sucks at expressing
business rules.&lt;/p&gt;
&lt;p&gt;And don't get me started on all those code generators that write stored
procs &amp;quot;because their faster&amp;quot;. Then end up creating the most horifically
slow code.imaginable.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stored procedures"></category><category term="architecture"></category><category term="database design"></category><category term="triggers"></category></entry><entry><title>Open Source in the News</title><link href="https://slott56.github.io/2009_11_04-open_source_in_the_news.html" rel="alternate"></link><published>2009-11-04T08:14:00-05:00</published><updated>2009-11-04T08:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-11-04:/2009_11_04-open_source_in_the_news.html</id><summary type="html">&lt;p&gt;Whitehouse.gov is publicly using open source tools.&lt;/p&gt;
&lt;p&gt;See Boing Boing blog
&lt;a class="reference external" href="http://www.boingboing.net/2009/10/27/the-white-house-swit.html"&gt;entry&lt;/a&gt;.
Plus Huffington Post blog
&lt;a class="reference external" href="http://www.huffingtonpost.com/huff-wires/20091024/us-obama-web-site/"&gt;entry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most importantly, read
&lt;a class="reference external" href="http://radar.oreilly.com/2009/10/whitehouse-switch-drupal-opensource.html"&gt;this&lt;/a&gt;
from O'Reilly.&lt;/p&gt;
&lt;p&gt;Many places are using open source in stealth mode. Some even deny it.
Ask your CIO what the policy on open source is, then check to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Whitehouse.gov is publicly using open source tools.&lt;/p&gt;
&lt;p&gt;See Boing Boing blog
&lt;a class="reference external" href="http://www.boingboing.net/2009/10/27/the-white-house-swit.html"&gt;entry&lt;/a&gt;.
Plus Huffington Post blog
&lt;a class="reference external" href="http://www.huffingtonpost.com/huff-wires/20091024/us-obama-web-site/"&gt;entry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most importantly, read
&lt;a class="reference external" href="http://radar.oreilly.com/2009/10/whitehouse-switch-drupal-opensource.html"&gt;this&lt;/a&gt;
from O'Reilly.&lt;/p&gt;
&lt;p&gt;Many places are using open source in stealth mode. Some even deny it.
Ask your CIO what the policy on open source is, then check to see if
you're using Apache. Often, this is an oops -- policy says &amp;quot;no&amp;quot;,
practice says &amp;quot;yes&amp;quot;.&lt;/p&gt;
&lt;p&gt;For a weird perspective on open source, read Binstock's Integration
Watch piece in SD Times: &lt;a class="reference external" href="http://www.sdtimes.com/INTEGRATION_WATCH_FROM_OPEN_SOURCE_TO_COMMERCIAL_QUALITY_A_STUDY_IN_RIGOR/By_ANDREW_BINSTOCK/About_OPENSOURCE/33835"&gt;From Open Source to Commercial
Quality&lt;/a&gt;.
&amp;quot;rigor is the quality often missing from OSS projects&amp;quot;. &amp;quot;Often&amp;quot;
missing? I guess Binstock travels in wider circles and sees more bad
open source software than I do. The stuff I work with is very, very
high quality. Python, Django, Sphinx, the LaTeX stack, PIL, Docutils
-- all seem to be outstandingly good.&lt;/p&gt;
&lt;p&gt;I guess &amp;quot;rigor&amp;quot; isn't an obvious tangible feature of the software.
Indeed, I'm not sure what &amp;quot;commercial quality&amp;quot; means if open source
lacks this, also.&lt;/p&gt;
&lt;p&gt;All of the commercial software I've seen has been in-house developed
stuff. Because there's so much of it, it must have these elusive
&amp;quot;rigor&amp;quot; and &amp;quot;commercial quality&amp;quot; features that Binstock values so
highly. Yet, the software is really bad: it barely works and they
can't maintain it.&lt;/p&gt;
&lt;p&gt;My experience is different from Binstock's. Also, most of the key
points in his article are process points, not software quality
issues. My experience is that the open source product exceeds
commercial quality. Since there's no money to support a help desk or
marketing or product ownership, the open source process doesn't offer
all the features of a commercial operation.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="quot-the-open-source-process-however-doesn-39"&gt;
&lt;h2&gt;&amp;amp;quot;The open source process, however, doesn&amp;amp;#39;...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-02 19:06:43.240000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;The open source process, however, doesn't offer all the features of a
commercial operation.&amp;quot;&lt;/p&gt;
&lt;p&gt;And this is bad ? I thought that quality code was the goal ? Humm. I
guess I am confused ? Perhaps process is more important than quality
code ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consulted-for-a-fortune-50-company-a-couple-years"&gt;
&lt;h2&gt;consulted for a Fortune 50 company a couple years ...&lt;/h2&gt;
&lt;p&gt;James Thiele&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-04 13:28:16.169000-05:00&lt;/p&gt;
&lt;p&gt;consulted for a Fortune 50 company a couple years ago and they had a
company webpage of vetted OSS that any employee could use.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category></entry><entry><title>Painful Python Import Lessons</title><link href="https://slott56.github.io/2009_10_30-painful_python_import_lessons.html" rel="alternate"></link><published>2009-10-30T09:27:00-04:00</published><updated>2009-10-30T09:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-30:/2009_10_30-painful_python_import_lessons.html</id><summary type="html">&lt;p&gt;Python's packages and modules are -- generally -- quite elegant.&lt;/p&gt;
&lt;p&gt;They're relatively easy to manage. The &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file (to make a
module into a package) is very elegant. And stuff can be put into the
&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file to create a kind of top-level or header module in a
larger package …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python's packages and modules are -- generally -- quite elegant.&lt;/p&gt;
&lt;p&gt;They're relatively easy to manage. The &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file (to make a
module into a package) is very elegant. And stuff can be put into the
&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file to create a kind of top-level or header module in a
larger package of modules.&lt;/p&gt;
&lt;p&gt;To a limit.&lt;/p&gt;
&lt;p&gt;It took hours, but I found the edge of the envelope. The hard way.&lt;/p&gt;
&lt;p&gt;We have a package with about 10 distinct Django apps. Each Django app
is -- itself -- a package. Nothing surprising or difficult here.&lt;/p&gt;
&lt;p&gt;At first, just one of those apps used a couple of fancy
security-related functions to assure that only certain people could
see certain things in the view. It turns out that merely being logged
in (and a member of the right group) isn't enough. We have some
additional context choices that you must make.&lt;/p&gt;
&lt;p&gt;The view functions wind up with a structure that looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;login_required
def someView( request, object_id, context_from_URL ):
    no_good = check_other_context( context_from_URL )
    if no_good is not None: return no_good
    still_no_good = check_session()
    if still_no_good is not None: return still_no_good
    # you get the idea
&lt;/pre&gt;
&lt;p&gt;At first, just one app had this feature.&lt;/p&gt;
&lt;p&gt;Then, it grew. Now several apps need to use check_session and
check_other_context.&lt;/p&gt;
&lt;div class="section" id="where-to-put-the-common-code"&gt;
&lt;h2&gt;Where to Put The Common Code?&lt;/h2&gt;
&lt;p&gt;So, now we have the standard architectural problem of refactoring
upwards. We need to move these functions somewhere accessible. It's
above the original app, and into the package of apps.&lt;/p&gt;
&lt;p&gt;The dumb, obvious choice is the package-level &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;Why this is dumb isn't obvious -- at first. This file is implicitly
imported. Doesn't seem like a bad thing. With one exception.&lt;/p&gt;
&lt;p&gt;The settings.&lt;/p&gt;
&lt;p&gt;If the settings file is in a package, and the package-level
&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; file has any Django stuff in it -- any at all -- that
stuff will be imported &lt;em&gt;before&lt;/em&gt; your settings have finished being
imported. Settings are loaded lazily -- as late as possible. However,
in the process of loading settings, there are defaults, and Django
may have to use those defaults in order to finish the import of your
settings.&lt;/p&gt;
&lt;p&gt;This leads to the weird situation that Django is clearly ignoring
fundamental things like DATABASE_ENGINE and similar settings. You get
the dummy database engine, Yet, a basic from django.conf import
settings; print settings.DATABASE_ENGINE shows that you should have
your expected database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="moral-of-the-story"&gt;
&lt;h2&gt;Moral Of the Story&lt;/h2&gt;
&lt;p&gt;Nothing with any Django imports can go into the package-level
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\``__init__.py&lt;/span&gt;&lt;/tt&gt; files that may get brought in while importing settings.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Django"></category><category term="#python"></category><category term="module"></category><category term="package"></category></entry><entry><title>Process Not Working -- Must Have More Process</title><link href="https://slott56.github.io/2009_10_27-process_not_working_must_have_more_process.html" rel="alternate"></link><published>2009-10-27T11:25:00-04:00</published><updated>2009-10-27T11:25:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-27:/2009_10_27-process_not_working_must_have_more_process.html</id><summary type="html">&lt;p&gt;After all, programmers are all lazy and stupid.&lt;/p&gt;
&lt;p&gt;Got his complaint recently.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Developers on a fairly routine basis check in code into the wrong
branch.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Followed by a common form of the lazy and stupid complaint.
&amp;quot;Someone should think about which branch is used for what and
when.&amp;quot; Clearly &amp;quot;someone …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After all, programmers are all lazy and stupid.&lt;/p&gt;
&lt;p&gt;Got his complaint recently.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Developers on a fairly routine basis check in code into the wrong
branch.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Followed by a common form of the lazy and stupid complaint.
&amp;quot;Someone should think about which branch is used for what and
when.&amp;quot; Clearly &amp;quot;someone&amp;quot; means &lt;em&gt;the programmers&lt;/em&gt; and &amp;quot;should think
about&amp;quot; means &lt;em&gt;are stupid&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This was followed by the &amp;quot;more process will fix this process
problem&amp;quot; litany of candidate solutions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Does CVS / Subversion have a knob which provides the
functionality to
prevent developers from checking code into a branch?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Is there a canonical way to organize branches?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Really, this
means something like &lt;em&gt;what are the lazy, stupid programmers doing
wrong?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Plus there where rhetorical non-questions to emphasize the lazy,
stupid root cause. &amp;quot;Why is code merging so hard?&amp;quot; (Stupid.) &amp;quot;If
code is properly done and not coupled, merging should be easy?&amp;quot;
(Lazy; a better design would prevent this.) &amp;quot;Perhaps the
developers don't understand the code and screw up the merge?&amp;quot;
(Stupid.) &amp;quot;If the code is not coupled, understanding should be
easy?&amp;quot; (Both Lazy and Stupid.)&lt;/p&gt;
&lt;div class="section" id="root-cause-analysis"&gt;
&lt;h2&gt;Root Cause Analysis&lt;/h2&gt;
&lt;p&gt;The complaint is about process failure. Tools do not cause (or
even contribute) to process failure. There are two possible
contributions to process failure: the process and the people.&lt;/p&gt;
&lt;p&gt;The process could be flawed. There could be no earthly way the
programmers can locate the correct branch because (a) it doesn't
exist when they need it or (b) no one told them which branch to
use.&lt;/p&gt;
&lt;p&gt;The people could be flawed. For whatever reason, they refuse to
execute the process. Perhaps they know a better way, perhaps
they're just being jerks.&lt;/p&gt;
&lt;p&gt;Technical means will not solve either root cause problem. It will
-- generally -- exacerbate it. If the process is broken, then
attempting to create CVS / Subversion &amp;quot;controls&amp;quot; will end in
expensive, elaborate failure. Either they can't be made to work,
or (eventually) someone will realize that they don't actually
solve the problem. On the other hand, if the people are broken,
they'll just subvert the controls in more interesting, silly and
convoluted ways.&lt;/p&gt;
&lt;p&gt;My response -- at the time -- was not &amp;quot;analyze the root causes&amp;quot;.
When I first got this, I could only stare at it dumbfounded. My
answer was &amp;quot;You're right, your developers are lazy and stupid.
Good call. Add more process to overcome their laziness and
stupidity.&amp;quot;&lt;/p&gt;
&lt;p&gt;After all, the questioner clearly knows -- for a fact -- that more
process helps fix a broken organization. The questioner must be
convinced that actually talking to people will never help.&lt;/p&gt;
&lt;p&gt;The question was not &amp;quot;what can I do?&amp;quot; The question was &amp;quot;can I
control these people through changes to CVS?&amp;quot; There's a clear
presumption of &amp;quot;process not working -- must have more process.&amp;quot;&lt;/p&gt;
&lt;p&gt;The better response from me should have been. &amp;quot;Ask them what the
problem is.&amp;quot; I'll bet dollars against bent pins that no one tells
them which branch to use in time to start work. I'll bet they're
left guessing. Also, there's a small chance that these are
off-shore developers and communication delays make it difficult to
use the correct branch. There may be no work-orders, just informal
email &amp;quot;communication&amp;quot; between on-shore and off-shore
points-of-contact (and, perhaps, the points-of-contact aren't
decision-makers.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom Line&lt;/strong&gt;. If people can't make CVS work, someone needs to
talk to them to find out why. Someone does not need to invent more
process to control them.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="tools-do-not-cause-or-even-contribute-t"&gt;
&lt;h2&gt;Tools do not cause (or even contribute) t...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-28 08:51:10.818000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt; Tools do not cause (or even contribute) to process failure. There are
two possible contributions to process failure: the process and the
people.&lt;/p&gt;
&lt;p&gt;When I was working in quality assurance and concentrating on process
improvement, we identified the following 6 factors affecting process
effectiveness.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;procedures - How well do the established procedures work?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2. tools - Do the people have the tools that they need? Do the tools
work well?&lt;/p&gt;
&lt;p&gt;3. training - Do the people doing the work have adequate training in the
procedures, how to use the machines, general background information?&lt;/p&gt;
&lt;p&gt;4. the reward system - What are you actually rewarding? If management
*says* it wants a quality product, but promotes people who deliver a
product *quickly* regardless of product quality, then the de facto
reward system is rewarding speed, not quality.&lt;/p&gt;
&lt;p&gt;5. the inputs to the process - If you are getting crappy inputs, you're
going to produce crappy outputs. (See yesterday's headlines: if a home
builder gets toxic drywall from China, he builds a toxic house)&lt;/p&gt;
&lt;p&gt;6. the suitability of the people to the job - Here, the problem is your
hiring process. If you hire square pegs to fit in round holes, then of
course you will have problems.&lt;/p&gt;
&lt;p&gt;Notice that there is no category for &amp;quot;lazy and stupid people&amp;quot;. This is
not a useful category if you're actually trying to improve a process.
But this is, of course, the *only* category that Management has
traditionally recognized and used. Its use, of course, doesn't help
improve anything. All it does is to give a manager whose processes
aren't functioning well some place to shift the blame.&lt;/p&gt;
&lt;p&gt;So: a few more tools to use when thinking about process issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="actually-i-think-svn-cvs-i-e-tools-could-be-co"&gt;
&lt;h2&gt;Actually, I think SVN/CVS (i.e. tools) could be co...&lt;/h2&gt;
&lt;p&gt;Ville&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-27 15:01:53.190000-04:00&lt;/p&gt;
&lt;p&gt;Actually, I think SVN/CVS (i.e. tools) could be contributing to the
problem, as merging with them is a PITA.&lt;/p&gt;
&lt;p&gt;Talking to people should &amp;lt;i&amp;gt;be&amp;lt;/i&amp;gt; the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="w"&gt;
&lt;h2&gt;W...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-27 12:25:32.114000-04:00&lt;/p&gt;
&lt;p&gt;Talking to people should &lt;em&gt;be&lt;/em&gt; the process.&lt;/p&gt;
&lt;p&gt;We recently added a lengthy new freeze stage to our release cycle.
Anyone who
wants to check in longterm code can use the newer branch, anyone who
needs to
get into the release about to land needs to request and be given a
&amp;quot;freezeok&amp;quot;
tag on their bug. I told them: &amp;quot;If you forget, you will be devoured by
zombies.&amp;quot;&lt;/p&gt;
&lt;p&gt;The first couple of times someone pushed code to the frozen branch
without the
tag I used &lt;a class="reference external" href="http://diy.despair.com/motivator.php"&gt;http://diy.despair.com/motivator.php&lt;/a&gt; with an image of their
faces
superimposed on somebody being eaten by zombies. Everyone laughed.
Nobody did
it again.&lt;/p&gt;
&lt;p&gt;Is that so damn hard?&lt;/p&gt;
&lt;p&gt;In respect of your question:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quot-does-cvs-sub"&gt;
&lt;h2&gt;&amp;amp;quot;Does CVS / Sub...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-27 21:51:11.786000-04:00&lt;/p&gt;
&lt;p&gt;In respect of your question:&lt;/p&gt;
&lt;p&gt;&amp;quot;Does CVS / Subversion have a knob which provides the functionality to
prevent developers from checking code into a branch?&amp;quot;&lt;/p&gt;
&lt;p&gt;As far as I know, subversion itself doesn't. But if the repository is
served up by mod_dav_svn under Apache then it isn't that hard to
configure some Apache directives which block the HTTP method types
relating to update of a subversion directory for the appropriate part of
the URL namespace. We use this, and what it allows is for someone to
create a new tag, remove that whole tag, check out from that tag, but
not commit any changes into that tag.&lt;/p&gt;
&lt;p&gt;I'm not at work today so don't have handy what the rules are, but if
remember will post them later.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="configuration management"></category><category term="agile"></category><category term="architecture"></category></entry><entry><title>Breaking into Agile</title><link href="https://slott56.github.io/2009_10_22-breaking_into_agile.html" rel="alternate"></link><published>2009-10-22T21:44:00-04:00</published><updated>2009-10-22T21:44:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-22:/2009_10_22-breaking_into_agile.html</id><summary type="html">&lt;p&gt;I had a recent conversation with some folks who were desperate to
&amp;quot;processize&amp;quot; everything. They were asking about Scrum Master
certification and what standards organizations define the &amp;quot;official&amp;quot;
Scrum method.&lt;/p&gt;
&lt;p&gt;Interestingly, I also saw a cool column in Better Software magazine,
called
&amp;quot;&lt;a class="reference external" href="http://stickyminds.com/BetterSoftware/magazine.asp?fn=citoc"&gt;Scrumdamentalism&lt;/a&gt;&amp;quot;
on the same basic question.&lt;/p&gt;
&lt;p&gt;In my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had a recent conversation with some folks who were desperate to
&amp;quot;processize&amp;quot; everything. They were asking about Scrum Master
certification and what standards organizations define the &amp;quot;official&amp;quot;
Scrum method.&lt;/p&gt;
&lt;p&gt;Interestingly, I also saw a cool column in Better Software magazine,
called
&amp;quot;&lt;a class="reference external" href="http://stickyminds.com/BetterSoftware/magazine.asp?fn=citoc"&gt;Scrumdamentalism&lt;/a&gt;&amp;quot;
on the same basic question.&lt;/p&gt;
&lt;p&gt;In my conversation, I referred them to the &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;Agile
Manifesto&lt;/a&gt;. My first point was that
process often gets in the way of actual progress. Too much process
focus lifts up &amp;quot;activity&amp;quot; in place of &amp;quot;accomplishment&amp;quot;.&lt;/p&gt;
&lt;p&gt;My second point, however, was that the Agile Manifesto and the
Scrum method are responses to a larger problem. Looking for a
process isn't an appropriate response to the problem.&lt;/p&gt;
&lt;div class="section" id="the-one-true-scrum-quest"&gt;
&lt;h2&gt;The One True Scrum Quest&lt;/h2&gt;
&lt;p&gt;Claiming that there's one true Scrum method and everything else is
&amp;quot;not scrum&amp;quot; is an easy mental habit. The question gets asked on
Stack Overflow all the time. The questions are usually one of two
kinds.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What's the &amp;quot;official&amp;quot; or &amp;quot;best practice&amp;quot; Scrum method and how
do I define a process that rigidly enforces this for my entire
team of 20?&lt;/li&gt;
&lt;li&gt;We are doing our design/code/test/integration/release in a way
that diverges from the &amp;quot;official&amp;quot; form in the Ken Schwaber and
Mike Beedle
&lt;a class="reference external" href="http://www.amazon.com/Agile-Software-Development-Scrum/dp/0130676349"&gt;book&lt;/a&gt;.
Or it diverges from the
&lt;a class="reference external" href="http://epf.eclipse.org/wikis/scrum/Scrum/guidances/supportingmaterials/scrum_overview_610E45C2.html"&gt;Eclipse&lt;/a&gt;
version. Or it diverges from the &lt;a class="reference external" href="http://www.controlchaos.com/about/"&gt;Control
Chaos&lt;/a&gt; overview. Or the
&lt;a class="reference external" href="http://www.mountaingoatsoftware.com/scrum"&gt;Mountain Goat&lt;/a&gt;
version. Or the &lt;a class="reference external" href="http://c2.com/cgi/wiki?ScrumOverview"&gt;C2
Wiki&lt;/a&gt; version. Or
&lt;a class="reference external" href="http://codebetter.com/blogs/darrell.norton/articles/50339.aspx"&gt;this&lt;/a&gt;
version. Is it okay to diverge from the &amp;quot;standard&amp;quot;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sigh. The point of Agile is that we should value &amp;quot;Individuals
and interactions over processes and tools&amp;quot;. The quest for &amp;quot;One
True Scrum&amp;quot; specifically elevates the process above the people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-real-world"&gt;
&lt;h2&gt;In The Real World&lt;/h2&gt;
&lt;p&gt;The biggest issue is that the Agile Manifesto is really a
response to some fundamental truths about software development.&lt;/p&gt;
&lt;p&gt;In management fantasy world, a &amp;quot;project&amp;quot; as a fixed, definite,
limited, clearly articulated scope. From this fixed scope, we
can then document &amp;quot;all&amp;quot; the requirements (business and
technical). This requirements document is (a) testable against
the scope, (b) necessary for all further work and (c)
sufficient for design, code, test and transition to production.
That's not all. And -- in order to make a point later on --
I'll continue to enumerate the fantasies. The fantasy continues
that someone can create a &amp;quot;high-level design&amp;quot; or
&amp;quot;specification&amp;quot; that is (a) testable against the requirements,
(b) necessary for all further work and (c) sufficient to code,
test and transition to production. We can then throw this
specification over the transom into another room where a
&amp;quot;coder&amp;quot; will &amp;quot;cut code&amp;quot; that matches the specification. The
code production happens at a fixed, knowable rate with only
small random variation based on risk of illness. The testing,
similarly, can be meticulously scheduled and will happen
precisely as planned. Most &amp;quot;real-world&amp;quot; (management fantasy)
projects do not leave any time for rework after testing --
because rework won't happen. If it won't happen, why test?
Finally, there will be no technology transfer issues because
putting a freshly-written program into production is the same
as installing a game from a DVD.&lt;/p&gt;
&lt;p&gt;Managers like to preface things with &amp;quot;In The Real World&amp;quot;. As in
&amp;quot;In The Real World we need to know how long it will take you to
write this.&amp;quot;&lt;/p&gt;
&lt;p&gt;The &amp;quot;in the real world&amp;quot; speech always means &amp;quot;In My Management
Fantasy Land.&amp;quot; The reason it's always a fantastic speech is
because software development involves the unknowable. I'm not
talking about some variable in a formula with a value that's
currently unknown. I'm talking about predicting the
&lt;em&gt;unknowable&lt;/em&gt; future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-agile-response-to-reality"&gt;
&lt;h2&gt;The Agile Response to Reality&lt;/h2&gt;
&lt;p&gt;In the Real real world, software development is extraordinarily
hard.&lt;/p&gt;
&lt;p&gt;Consider this: the computer clock runs in 100-nanosecond
increments (1.0E-7). We expect an application to run 24x7x0.999
= 6.04E5 seconds. That's from 100-nano to half-million: about
12 orders of magnitude to keep in one's head.&lt;/p&gt;
&lt;p&gt;Consider this: storage in a largish application may span almost
a terabyte, (1.0E12). From bytes to terabytes: about 12 orders
of magnitude to keep in one's head.&lt;/p&gt;
&lt;p&gt;Consider this: a web application written in a powerful
framework (Django) requires one to know the following languages
and frameworks. Shell script, Apache Config, Python, Django
Templates, SQL, HTML, CSS, Javascript, HTTP (the protocol is
it's own language), plus the terminology of the problem domain.
That's 9 distinct languages. We also have the OS, TCP/IP
Apache, mod_wsgi, Django, Python, browser and our application
as distinct frameworks. That's 8 distinct framework API's to
keep in one's head.&lt;/p&gt;
&lt;p&gt;Consider this: the users can't easily articulate their problem.
The business analyst is trying to capture enough information to
characterize the problem. The users, the analyst, the project
manager (and others outside the team) all have recommendations
for a solution, polluting the problem description with
&amp;quot;solution speak&amp;quot; that's only adds confusion.&lt;/p&gt;
&lt;p&gt;In the Management Fantasy &amp;quot;Real World&amp;quot;, this is all knowable
and simple. In the Real Real World, this is rather hard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adapting-to-reality"&gt;
&lt;h2&gt;Adapting to Reality&lt;/h2&gt;
&lt;p&gt;Once we've recognized that software development is hard, we
have several responses.&lt;/p&gt;
&lt;p&gt;#. &lt;strong&gt;Deny&lt;/strong&gt;. Claim that software developers are either lazy or
stupid (or both). Give them pep-talks that begin &amp;quot;in the
real world&amp;quot; and hope that they cough up the required
estimates because they're motivated by being told that
software development &amp;quot;in the real world&amp;quot; isn't all that
hard.&lt;/p&gt;
&lt;p&gt;#. &lt;strong&gt;Processize&lt;/strong&gt;(tm). Claim that software development is a
process that can be specified to a level where even lazy,
stupid programmers can step through the process and create
consistent results.&lt;/p&gt;
&lt;p&gt;#. &lt;strong&gt;Adapt&lt;/strong&gt;. Adapting to the complexity of software
development requires asking, &amp;quot;what -- if anything --
expedites software development?&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-we-need-to-succeed"&gt;
&lt;h2&gt;What Do We Need to Succeed?&lt;/h2&gt;
&lt;p&gt;There are essentially two domains of knowledge required to
create software: the problem domain and the solution domain.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Problem Domain. This is the &amp;quot;business rules&amp;quot;, the
&amp;quot;scope&amp;quot;, the &amp;quot;requirements&amp;quot;, the &amp;quot;purpose&amp;quot;, etc. We have
the features and functions. What the software does. The
value it creates. The &amp;quot;what&amp;quot;, &amp;quot;who&amp;quot;, &amp;quot;where&amp;quot;, &amp;quot;when&amp;quot; and
&amp;quot;why&amp;quot;.&lt;/li&gt;
&lt;li&gt;Solution Domain. This is the technology that makes it go.
The time and space dimensions (all 12 orders of magnitude
in each dimension), all the languages and all the
frameworks. The &amp;quot;how&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The issue is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We don't start out with complete knowledge of problem and solution.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;At the start of the project -- when we're asked to
predict the future -- we can &lt;em&gt;never&lt;/em&gt; know the whole
problem, nor can we &lt;em&gt;ever&lt;/em&gt; know the whole solution we're
about to try and build.&lt;/p&gt;
&lt;p&gt;What we need is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Put Problem Domain and Solution Domain knowledge into one person's head.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;The question then becomes &amp;quot;Who's head?&amp;quot;&lt;/p&gt;
&lt;p&gt;We have two choices:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Non-Programmers&lt;/strong&gt;. We can try to teach the various
non-programmers all the solution domain stuff. We can
make the project manager, business analyst, end-users,
executive sponsor -- everyone -- into programmers so
that they have problem domain and solution domain
knowledge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Programmers&lt;/strong&gt;. We can try to impart the problem
domain knowledge on the programmers. If we're
seriously going to do this, we need to remove the
space between programmer and problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's the core of the Agile Response: Close the gap
between Problem Domain and Solution Domain by letting
programmers understand the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bowl-of-bananas-solution-tm"&gt;
&lt;h2&gt;The Bowl of Bananas Solution(tm)&lt;/h2&gt;
&lt;p&gt;&amp;quot;But wait&amp;quot;, managers like to say, &amp;quot;in the real world, we
can't just let you play around until you claim you're
done. We have to monitor your activity to make sure that
you're making 'progress' toward a 'solution'.&amp;quot;&lt;/p&gt;
&lt;p&gt;In the Real real world, you can't define the &amp;quot;problem&amp;quot;,
much less test whether anything is -- or is not -- a
solution. I could hand most managers a bowl of bananas
and they would not be able to point to any test procedure
that would determine if the bowl of bananas solves or
fails to solve the user's problems.&lt;/p&gt;
&lt;p&gt;Most project scope documents, requirements documents,
specifications, designs, etc., require extensive tacit
problem domain knowledge to interpret them. Given a bowl
of bananas, the best that we can do is say &amp;quot;we still have
the problem, so this isn't a solution.&amp;quot; Our scope
statements and requirements and test procedures all make
so many assumptions about the problem and the solution
that we can't even figure out how evaluate an
out-of-the-box response -- like a bowl of bananas.&lt;/p&gt;
&lt;p&gt;In the Real real world, management in organization A
demands that information be kept in a one database.
Management organization B has a separate database for
reasons mired in historical animosity and territorial
scent-marking. Management in yet another organization
wants them &amp;quot;unified&amp;quot; or &amp;quot;reconciled&amp;quot; and demands that
someone manually put the data into spreadsheets. This
morphs into requirements for a new application &amp;quot;system&amp;quot;
to unify this data, making the results look like
poorly-design spreadsheets. This morphs into a multi-year
project to create a &amp;quot;framework&amp;quot; for data integration that
maintains the poorly-designed spreadsheet as part of the
&amp;quot;solution&amp;quot;.&lt;/p&gt;
&lt;p&gt;A quick SQL script to move data from A to B (or B to A)
is the bowl-0f-bananas solution. It cannot be evaluated
(or even considered) because it isn't a framework, system
or application as specified in the scope document for the
data integration framework.&lt;/p&gt;
&lt;p&gt;This is the problem domain knowledge issue. It's so hard
to define the problem, that we can't trust the executive
sponsor, the program office, the project managers, the
business analysts or anyone to characterize the problem
for the developers.&lt;/p&gt;
&lt;p&gt;The problem domain knowledge is so important that we need
to allow programmers to interact with users so that
&lt;em&gt;both&lt;/em&gt; the problem &lt;em&gt;and&lt;/em&gt; the solution wind up in the
programmer's head.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="variable-in-a-formula-warning-pontifi"&gt;
&lt;h2&gt;&amp;quot;variable in a formula&amp;quot; Warning Pontifi...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-22 20:05:22.782000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;variable in a formula&amp;quot;&lt;/p&gt;
&lt;p&gt;Warning Pontification&lt;/p&gt;
&lt;p&gt;The &amp;quot;real world&amp;quot; usually involves more than one equation with one
variable. However, ...&lt;/p&gt;
&lt;p&gt;If you are lucky, your system is time invariant.&lt;/p&gt;
&lt;p&gt;If you continue to be lucky, you will have n equations with n unknowns.&lt;/p&gt;
&lt;p&gt;If you continue to be lucky, all your equations will be linear.&lt;/p&gt;
&lt;p&gt;If you continue to be lucky the inverse matrix of your linear equations
won't be zero.&lt;/p&gt;
&lt;p&gt;If you continue to be lucky, your numbers are well behaved and you don't
have to do partial pivoting during your inverse matrix operation.&lt;/p&gt;
&lt;p&gt;If you continue to be lucky, just stop working and buy a lottery ticket.&lt;/p&gt;
&lt;p&gt;In the &amp;quot;real world&amp;quot;, our systems are often time variant and governed by
non-linear equations which may or may not be constrained. To get a quick
feel for how truly difficult these problems are, consider scheming
www.mpri.lsu.edu/textbook/Chapter6.htm.&lt;/p&gt;
&lt;p&gt;Software developmnet is at least an order of magnitude harder because in
addition to dealing with the technology, you have to deal with business
constraints intermixed with the human condition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="looking-forward-to-hearing-your-thoughts-of-lean-p"&gt;
&lt;h2&gt;Looking forward to hearing your thoughts of Lean P...&lt;/h2&gt;
&lt;p&gt;Dean Goodmanson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-22 17:55:55.585000-04:00&lt;/p&gt;
&lt;p&gt;Looking forward to hearing your thoughts of Lean Principles applied to
Software Development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fantastic-post-steven-i-agree-that-as-you-put-it"&gt;
&lt;h2&gt;Fantastic post Steven. I agree that as you put it,...&lt;/h2&gt;
&lt;p&gt;Robert Dempsey&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-22 14:02:05.121000-04:00&lt;/p&gt;
&lt;p&gt;Fantastic post Steven. I agree that as you put it, we need to, &amp;quot;close
the gap between Problem Domain and Solution Domain by letting
programmers understand the problem,&amp;quot; and then helping them solve it. On
the other side of the equation, managers need to understand the
challenges involved in solving that problem. I've seen all sorts of
problems arrise due to massive communication issues, typically with
management not understanding what is going on, why things are taking so
long, etc. The onus is on the Team in this case to help management
understand their side of the problem, the issues involved in solving it,
and solutions they are working toward.&lt;/p&gt;
&lt;p&gt;As you point out, the Agile Manifesto talks about individuals and
interactions over processes and tools. And to use a cliche,
communication is a two-way street.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="scrum"></category><category term="agile"></category></entry><entry><title>Django Capacity Planning -- Reading the Meta Model</title><link href="https://slott56.github.io/2009_10_16-django_capacity_planning_reading_the_meta_model.html" rel="alternate"></link><published>2009-10-16T14:34:00-04:00</published><updated>2009-10-16T14:34:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-16:/2009_10_16-django_capacity_planning_reading_the_meta_model.html</id><summary type="html">&lt;p&gt;I find that some people spend way too much time doing &amp;quot;meta&amp;quot;
programming. I prefer to use someone's framework rather than (a)
write my own or (b) extend theirs. I prefer to learn their features
(and quirks).&lt;/p&gt;
&lt;p&gt;Having disclaimed an interest in meta programming, I do have to
participate in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I find that some people spend way too much time doing &amp;quot;meta&amp;quot;
programming. I prefer to use someone's framework rather than (a)
write my own or (b) extend theirs. I prefer to learn their features
(and quirks).&lt;/p&gt;
&lt;p&gt;Having disclaimed an interest in meta programming, I do have to
participate in capacity planning.&lt;/p&gt;
&lt;p&gt;Capacity planning, generally, means canvassing applications to
track down disk storage requirements.&lt;/p&gt;
&lt;div class="section" id="back-in-the-day"&gt;
&lt;h2&gt;Back In The Day&lt;/h2&gt;
&lt;p&gt;Back in the day, when we wrote SQL by hand, we were expected to
carefully plan all our table and index use down to the kilobyte. I
used to have really sophisticated spreadsheets for estimating --
to the byte -- Oracle storage requirements.&lt;/p&gt;
&lt;p&gt;Since then, the price of storage has fallen so far that I no
longer have to spend a lot of time carefully modelling the
byte-by-byte storage allocation. The price has fallen so fast that
some people still spend way more time on this than it deserves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-orm"&gt;
&lt;h2&gt;Django ORM&lt;/h2&gt;
&lt;p&gt;The Django ORM obscures the physical database design. This is a
good thing.&lt;/p&gt;
&lt;p&gt;For capacity planning purposes, however, it would be good to know
row sizes so that we can multiply by expected number of rows and
cough out a planned size.&lt;/p&gt;
&lt;p&gt;Here's some meta-data programming to extract Table and Column
information for the purposes of size estimation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import sys
from django.conf import settings
from django.db.models.base import ModelBase

class Table( object ):
   def __init__( self, name, comment=&amp;quot;&amp;quot; ):
       self.name= name
       self.comment= comment
       self.columns= {}
   def add( self, column ):
       self.columns[column.name]= column
   def row_size( self ):
       return sum( self.columns[c].size for c in self.columns ) + 1*len(self.columns)

class Column( object ):
   def __init__( self, name, type, size ):
       self.name= name
       self.type= type
       self.size= size

sizes = {
   'integer': 4,
   'bool': 1,
   'datetime': 32,
   'text': 255,
   'smallint unsigned': 2,
   'date': 24,
   'real': 8,
   'integer unsigned': 4,
   'decimal': 40,
}
def get_size( db_type, max_length ):
   if max_length is not None:
       return max_length
   return sizes[db_type]

def get_schema():
   tables = {}
   for app in settings.INSTALLED_APPS:
       print app
       try:
           __import__( app + &amp;quot;.models&amp;quot; )
           mod= sys.modules[app + &amp;quot;.models&amp;quot;]
           if mod.__doc__ is not None:
               print mod.__doc__.splitlines()[:1]
           for name in mod.__dict__:
               obj = mod.__dict__[name]
               if isinstance( obj, ModelBase ):
                   t = Table( obj._meta.db_table, obj.__doc__ )
                   for fld in obj._meta.fields:
                       c = Column( fld.attname, fld.db_type(), get_size(fld.db_type(), fld.max_length) )
                       t.add( c )
                   tables[t.name]= t
       except AttributeError, e:
           print e
   return tables

if __name__ == &amp;quot;__main__&amp;quot;:
   tables = get_schema()
   for t in tables:
       print t, tables[t].row_size()
&lt;/pre&gt;
&lt;p&gt;This shows how we can get table and column information without too
much pain. This will report an estimated row size for each DB
table that's reasonably close.&lt;/p&gt;
&lt;p&gt;You'll have to add storage for indexes, also. Further, many
databases leave free space within each physical block, making the
actual database much larger than the raw data.&lt;/p&gt;
&lt;p&gt;Finally, you'll need extra storage for non-database files, logs
and backups.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Django"></category><category term="database design"></category><category term="capacity planning"></category></entry><entry><title>Unit Testing in C</title><link href="https://slott56.github.io/2009_10_14-unit_testing_in_c.html" rel="alternate"></link><published>2009-10-14T11:42:00-04:00</published><updated>2009-10-14T11:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-14:/2009_10_14-unit_testing_in_c.html</id><summary type="html">&lt;p&gt;I haven't written new C code since the turn of the millennium. Since
then it's been almost all Java and Python. Along with Java and Python
come JUnit and Python's unittest module.&lt;/p&gt;
&lt;p&gt;I've grown completely dependent on unit testing.&lt;/p&gt;
&lt;p&gt;I'm looking at some C code, and I want a unit …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't written new C code since the turn of the millennium. Since
then it's been almost all Java and Python. Along with Java and Python
come JUnit and Python's unittest module.&lt;/p&gt;
&lt;p&gt;I've grown completely dependent on unit testing.&lt;/p&gt;
&lt;p&gt;I'm looking at some C code, and I want a unit testing framework. For
pure C, I can find things like
&lt;a class="reference external" href="http://cutest.sourceforge.net/"&gt;CuTest&lt;/a&gt; and
&lt;a class="reference external" href="http://sourceforge.net/projects/cunit/"&gt;CUnit&lt;/a&gt;. The documentation
makes them look kind of shabby. Until I remembered what a simplistic
language C is. Considering what they're working with, they're
actually very cool.&lt;/p&gt;
&lt;p&gt;I found a helpful posting on &lt;a class="reference external" href="http://gamesfromwithin.com/exploring-the-c-unit-testing-framework-jungle"&gt;C++ unit testing
tools&lt;/a&gt;.
It provided some insight into C++. But this application is pure C.&lt;/p&gt;
&lt;p&gt;I'm interested in replacing the shell script in CuTest with a Python
application that does the same basic job. That's -- perhaps -- a
low-value add-on. Perhaps I should look at CUnit and stay away from
replacing the CuTest shell script with something a bit easier to
maintain.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="have-you-considered-cgreen-a-few-friends-have-re"&gt;
&lt;h2&gt;Have you considered Cgreen?  A few friends have re...&lt;/h2&gt;
&lt;p&gt;Tony Arkles&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-14 13:51:28.160000-04:00&lt;/p&gt;
&lt;p&gt;Have you considered Cgreen? A few friends have recommended it for C unit
testing, but I haven't had the chance to try it yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-have-found-it-easier-to-write-unit-tests-in-c-th"&gt;
&lt;h2&gt;I have found it easier to write unit tests in C th...&lt;/h2&gt;
&lt;p&gt;Jerry Seutter&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-14 14:49:56.980000-04:00&lt;/p&gt;
&lt;p&gt;I have found it easier to write unit tests in C than to use Swig.
I use CUnit. It doesn't do much compared to libraries available in
Python, but it is reliable. It is simple enough to keep everything you
need to know in your head.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http-code-google-com-p-test-dept-may-be-of-inte"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://code.google.com/p/test-dept/"&gt;http://code.google.com/p/test-dept/&lt;/a&gt; may be of inte...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-14 15:54:25.615000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/test-dept/"&gt;http://code.google.com/p/test-dept/&lt;/a&gt; may be of interest for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-you-write-itr-correctly-no-need-for-cunit"&gt;
&lt;h2&gt;If you write itr correctly no need for Cunit...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-18 10:44:07.822000-04:00&lt;/p&gt;
&lt;p&gt;If you write itr correctly no need for Cunit...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-about-doing-it-in-python-using-something-like"&gt;
&lt;h2&gt;How about doing it in python using something like ...&lt;/h2&gt;
&lt;p&gt;Amit&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-14 13:54:29.965000-04:00&lt;/p&gt;
&lt;p&gt;How about doing it in python using something like &lt;a class="reference external" href="http://www.swig.org/"&gt;http://www.swig.org/&lt;/a&gt; ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-think-this-is-an-informative-post-and-it-is-very"&gt;
&lt;h2&gt;I think this is an informative post and it is very...&lt;/h2&gt;
&lt;p&gt;saad&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2019-04-03 14:41:58.747000-04:00&lt;/p&gt;
&lt;p&gt;I think this is an informative post and it is very useful and
knowledgeable. therefore, I would like to thank you for the efforts you
have made in writing this article.
&lt;a class="reference external" href="http://mytecheytricks.simplesite.com/"&gt;mytecheytricks.simplesite.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="C"></category><category term="#python"></category><category term="tdd"></category><category term="java"></category><category term="JUnit"></category></entry><entry><title>Sometimes the universe appears multidimensional -- but isn't</title><link href="https://slott56.github.io/2009_10_12-sometimes_the_universe_appears_multidimensional_but_isnt.html" rel="alternate"></link><published>2009-10-12T18:23:00-04:00</published><updated>2009-10-12T18:23:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-12:/2009_10_12-sometimes_the_universe_appears_multidimensional_but_isnt.html</id><summary type="html">&lt;p&gt;Had a knock-down drag-out fight with another architect recently over
&amp;quot;status&amp;quot; and &amp;quot;priority&amp;quot;.&lt;/p&gt;
&lt;p&gt;She claimed that the backlog priority and the status where the same
thing. I claimed that you can easily have this.&lt;/p&gt;
&lt;p&gt;Priority: 1, Status: Not Started&lt;/p&gt;
&lt;p&gt;Priority: 2, Status: In Process&lt;/p&gt;
&lt;p&gt;Priority: 3, Status: Completed&lt;/p&gt;
&lt;p&gt;See? It's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Had a knock-down drag-out fight with another architect recently over
&amp;quot;status&amp;quot; and &amp;quot;priority&amp;quot;.&lt;/p&gt;
&lt;p&gt;She claimed that the backlog priority and the status where the same
thing. I claimed that you can easily have this.&lt;/p&gt;
&lt;p&gt;Priority: 1, Status: Not Started&lt;/p&gt;
&lt;p&gt;Priority: 2, Status: In Process&lt;/p&gt;
&lt;p&gt;Priority: 3, Status: Completed&lt;/p&gt;
&lt;p&gt;See? It's obvious that they're independent dimensions.&lt;/p&gt;
&lt;p&gt;She said that it's just as obvious that you're doing something wrong.&lt;/p&gt;
&lt;p&gt;Here's her point:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If you have priority 1 items that aren't in process now, then
they're really priority 2. Fix them to honestly say priority 2.&lt;/li&gt;
&lt;li&gt;If you have priority 2 items that &amp;quot;somehow&amp;quot; jumped ahead of
priority 1 items, they were really priority 1. Fix them to say
priority 1. And don't hand her that &amp;quot;in the real world, you have
managers or customers that invert the priorities&amp;quot;. Don't invert
the priorities, just change them and be honest about it.&lt;/li&gt;
&lt;li&gt;The only items that are done must have been priority 1, passed
through an &amp;quot;in-process&amp;quot; state and then got finished. Once they're
done, they're not priority 1 any more. They're just done.&lt;/li&gt;
&lt;li&gt;Things that hang around in &amp;quot;in-process, not done&amp;quot; have two parts.
The part that's done, and some other part that's in the backlog
and not priority 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;She says that priority and status are one thing with the following
values.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Done.&lt;/li&gt;
&lt;li&gt;Priority 1 = in process right now.&lt;/li&gt;
&lt;li&gt;Priority 2 = will be in process next. Not eventually. Next.&lt;/li&gt;
&lt;li&gt;Priority 3 through ∞ = eventually, in order by priority.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any more complex scheme is simply misleading (Priority 1 not being
done right now? Is it a resource issue? A priority issue? Why
&lt;em&gt;aren't&lt;/em&gt; you doing it?)&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="say-i-have-a-priority-1-tasks-like-say-solving-my"&gt;
&lt;h2&gt;Say I have a Priority 1 tasks like say solving my ...&lt;/h2&gt;
&lt;p&gt;Chris&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-12 20:52:52.115000-04:00&lt;/p&gt;
&lt;p&gt;Say I have a Priority 1 tasks like say solving my app's use of the
enterprise LDAP for security but I cannot progress because the whole
LDAP team is in training for the week. Does this mean my Priority 1 is
really a Priority 3 because of totally external factors? I'd think my
security architecture/implementation would be pretty important to solve
early.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-d-agree-with-her-it-s-easier-to-keep-pr"&gt;
&lt;h2&gt;I'd agree with her: it's easier to keep pr...&lt;/h2&gt;
&lt;p&gt;EOL (Eric O LEBIGOT)&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-13 03:49:45.466000-04:00&lt;/p&gt;
&lt;p&gt;I'd agree with her: it's easier to keep priorities simple
(unidimensonal). Reassessing priorities is indeed a fact of life. I
think I first read about this in David Allen's famous Getting Things
Done…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="imo-priority-and-status-are-two-different-attribu"&gt;
&lt;h2&gt;IMO, Priority and Status are two different attribu...&lt;/h2&gt;
&lt;p&gt;Michael Levy&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-13 19:17:49.116000-04:00&lt;/p&gt;
&lt;p&gt;IMO, Priority and Status are two different attributes owned by two
different roles. The Product Owner owns the Priority and the dev team
owns the status.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-is-also-the-public-priority-and-a-persons-p"&gt;
&lt;h2&gt;There is also the public priority, and a persons p...&lt;/h2&gt;
&lt;p&gt;Paddy3118&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-14 03:13:54.435000-04:00&lt;/p&gt;
&lt;p&gt;There is also the public priority, and a persons private priority that
don't have to agree in practice.
Or,
Tasks may have high priority but cannot be worked on due to resource
limitations. You don't wait around, you get something else done which
becomes your personal top priority.
- Paddy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-d-agree-with-her-if-you-have-control-over"&gt;
&lt;h2&gt;I'd agree with her _if_ you have control over ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-13 09:13:07.179000-04:00&lt;/p&gt;
&lt;p&gt;I'd agree with her _if_ you have control over all resources necessary
to complete your task. But, if you work in a multi-departmental team
with non-overlapping / conflicting priorities, *your* priority 1 task
may need to wait for someone else's priority 2 task to become a priority
1.
So, while you wait to get back to your priority 1, you spend time on
your 2s &amp;amp; 3s.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="star-schema"></category><category term="dimensional data"></category><category term="database design"></category></entry><entry><title>Flattening Nested Lists -- You're Doing It Wrong</title><link href="https://slott56.github.io/2009_10_07-flattening_nested_lists_youre_doing_it_wrong.html" rel="alternate"></link><published>2009-10-07T10:19:00-04:00</published><updated>2009-10-07T10:19:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-07:/2009_10_07-flattening_nested_lists_youre_doing_it_wrong.html</id><summary type="html">&lt;p&gt;On StackOverflow you can read numerous questions on &amp;quot;flattening&amp;quot; nested
lists in Python.&lt;/p&gt;
&lt;p&gt;They all have a similar form.&lt;/p&gt;
&lt;p&gt;&amp;quot;How do I flatten this list &lt;tt class="docutils literal"&gt;[ [ 1, 2, 3 ], [ 4, 5, 6 ], ... , [ 98, 99, 100 ] ]&lt;/tt&gt;?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answers include list comprehensions, itertools, and other clever
variants.&lt;/p&gt;
&lt;p&gt;[STRIKEOUT:All] Much of which is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On StackOverflow you can read numerous questions on &amp;quot;flattening&amp;quot; nested
lists in Python.&lt;/p&gt;
&lt;p&gt;They all have a similar form.&lt;/p&gt;
&lt;p&gt;&amp;quot;How do I flatten this list &lt;tt class="docutils literal"&gt;[ [ 1, 2, 3 ], [ 4, 5, 6 ], ... , [ 98, 99, 100 ] ]&lt;/tt&gt;?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answers include list comprehensions, itertools, and other clever
variants.&lt;/p&gt;
&lt;p&gt;[STRIKEOUT:All] Much of which is [STRIKEOUT:simply wrong]
inappropriate.&lt;/p&gt;
&lt;div class="section" id="you-re-doing-it-wrong"&gt;
&lt;h2&gt;You're Doing it Wrong&lt;/h2&gt;
&lt;p&gt;The only way to create a nested list is to append a list to a list.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
theList.append( aSubList )
&lt;/pre&gt;
&lt;p&gt;You can trivially replace this with the following&lt;/p&gt;
&lt;pre class="literal-block"&gt;
theList.extend( aSubList )
&lt;/pre&gt;
&lt;p&gt;Now, your list is created flat. If it's created flat, you never need
to flatten it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="obscure-edge-cases"&gt;
&lt;h2&gt;Obscure Edge Cases&lt;/h2&gt;
&lt;p&gt;Sometimes it may be necessary to have both a flattened and an
unflattened list. I'm unclear on when or how this situation arises,
but this may be edge case that makes some of itertools handy.&lt;/p&gt;
&lt;p&gt;For the past 3 decades, I've never seen the &amp;quot;both nested and not
nested&amp;quot; use case, so I can't fathom why or how this would arise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="visiting-a-tree"&gt;
&lt;h2&gt;Visiting a Tree&lt;/h2&gt;
&lt;p&gt;Interestingly, a tree visitor has a net effect somewhat like
&amp;quot;flattening&amp;quot;. However, it does not actually create an intermediate
flat structure. It simply walks the structure as it exists. This
isn't a proper use case for transforming a nested list structure to a
flat structure. Indeed, this is a great example of why nested
structures and flat structures are quite separate use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-think-we-can-safely-remove-itertools-altogether"&gt;
&lt;h2&gt;I think we can safely remove itertools altogether ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 11:20:30.210000-04:00&lt;/p&gt;
&lt;p&gt;I think we can safely remove itertools altogether after this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bit-of-an-odd-statement-that-you-39-ve-never-seen"&gt;
&lt;h2&gt;Bit of an odd statement that you&amp;amp;#39;ve never seen...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 17:07:40.628000-04:00&lt;/p&gt;
&lt;p&gt;Bit of an odd statement that you've never seen &amp;quot;both nested and not
nested&amp;quot; use cases. Consider a simple tree built via lists- walking the
tree depth/breadth is &amp;quot;flattening the list&amp;quot; (more so visitation, but I
digress).&lt;/p&gt;
&lt;p&gt;The usage scenario where nested/not nested is extremely common...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-is-pretty-naive-the-times-i-39-ve-needed-t"&gt;
&lt;h2&gt;This is pretty naive.  The times I&amp;amp;#39;ve needed t...&lt;/h2&gt;
&lt;p&gt;Michael&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 10:20:04.707000-04:00&lt;/p&gt;
&lt;p&gt;This is pretty naive. The times I've needed to flatten a list were
because I needed the non-flattened form for one thing, and the flattened
form for another thing. It's not like we just don't know about extend
versus append.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-remove-itertools-chain-from-the-standard-lib"&gt;
&lt;h2&gt;so, remove itertools.chain() from the standard lib ?&lt;/h2&gt;
&lt;p&gt;mike bayer&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 11:05:36.985000-04:00&lt;/p&gt;
&lt;p&gt;so, remove itertools.chain() from the standard lib ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="list-append-is-not-even-close-to-the-only-way-to-c"&gt;
&lt;h2&gt;List.append is not even close to the only way to c...&lt;/h2&gt;
&lt;p&gt;John&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 14:58:00.388000-04:00&lt;/p&gt;
&lt;p&gt;List.append is not even close to the only way to create nested lists.
The first counterexample that springs to mind is when you map a function
over a list where the result of the function is a list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gt-the-only-way-to-create-a-nested-list-is-to-ap"&gt;
&lt;h2&gt;&amp;amp;gt; The only way to create a nested list is to ap...&lt;/h2&gt;
&lt;p&gt;Jason&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-07 12:31:22.159000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt; The only way to create a nested list is to append a list to a list.
Note quite true. One case I had the other day was like:
# got input data like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; row = [&amp;quot;Apples&amp;quot;, &amp;quot;100&amp;quot;, &amp;quot;40 +- 10&amp;quot;, &amp;quot;50 +- 4&amp;quot;]
&amp;gt;&amp;gt;&amp;gt; row = [c.Split(&amp;quot;+-&amp;quot;) for c in row]
&amp;gt;&amp;gt;&amp;gt; row
[['Apples'], ['100'], ['40 ', ' 10'], ['50 ', ' 4']]
Where I wanted to flatten &amp;quot;row&amp;quot; to:
['Apples', '100', '40 ', ' 10', '50 ', ' 4']
&lt;/pre&gt;
&lt;p&gt;(Later stripping whitespace and converting everything where applicable
to float.)&lt;/p&gt;
&lt;p&gt;I ended up naming each column explicitly, something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; a,b,c,d = row
&amp;gt;&amp;gt;&amp;gt; c1, c2 = c.Split(&amp;quot;+-&amp;quot;)
...
...
&lt;/pre&gt;
&lt;p&gt;which is in the real code pretty verbose and ugly. Wish Python had a
list.flatten(optional_depth) method...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reposted-with-slightly-better-formatting-i-39-v"&gt;
&lt;h2&gt;(Reposted with slightly better formatting. I&amp;amp;#39;v...&lt;/h2&gt;
&lt;p&gt;Chris Leary&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-08 18:14:43.601000-04:00&lt;/p&gt;
&lt;p&gt;(Reposted with slightly better formatting. I've made a mental note that
typing
reStructuredText into arbitrary text boxes doesn't usually end well.)
People were extremely defensive about this post for some reason. I think
it's an excellent point -- if you don't need the nested structure for
something else, you should be creating a flat sequence to begin with.
As a corollary, you may prefer a for-loop to a list comprehension if you
use a transform function that creates a list, but want a flattened
result at the end. For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
flat = []
for item in seq:
    flat += transform(item)
&lt;/pre&gt;
&lt;p&gt;As preferable to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nested = (transform(item) for item in seq)
flat = itertools.chain.from_iterable(nested)
&lt;/pre&gt;
&lt;p&gt;The former certainly gets the point across with less jargon, if
``nested`` is created by you (as opposed to being passed in from
elsewhere).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="naive-indeed-besides-the-nested-version-being-us"&gt;
&lt;h2&gt;Naive indeed.  Besides the nested version being us...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 12:04:53.652000-04:00&lt;/p&gt;
&lt;p&gt;Naive indeed. Besides the nested version being useful as well, what
about working with data structures that one didn't create. :/
Uninspired.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-often-have-lists-of-objects-each-of-which-has-an"&gt;
&lt;h2&gt;I often have lists of objects each of which has an...&lt;/h2&gt;
&lt;p&gt;Noufal&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 13:43:13.736000-04:00&lt;/p&gt;
&lt;p&gt;I often have lists of objects each of which has an attribute which holds
a list of different objects. This is nested list like situation which I
can flatten using minor alterations to the solutions provided on Stack
Overflow. I don't think your suggestion would apply here.
OTOH, I've generally noticed that extend is used a lot lesser than
append.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="michael-are-you-sure-it-creates-intermediate-lis"&gt;
&lt;h2&gt;&amp;#64;Michael: Are you sure it creates intermediate lis...&lt;/h2&gt;
&lt;p&gt;Theran Cochran&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-07 02:44:38.313000-04:00&lt;/p&gt;
&lt;p&gt;&amp;#64;Michael: Are you sure it creates intermediate lists? After testing in
Python 2.6.2, the += operator extends the existing list, and does not
create a new one. The id() of the list does not change at any point in
the loop. However, if you write 'L = L + newitems' you do indeed get a
bunch of new objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="putting-nesting-aside-i-find-myself-using-the-fol"&gt;
&lt;h2&gt;Putting nesting aside, I find myself using the fol...&lt;/h2&gt;
&lt;p&gt;Michael Watkins&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 15:38:56.108000-04:00&lt;/p&gt;
&lt;p&gt;Putting nesting aside, I find myself using the following rather than
[].extend([]):
&amp;gt;&amp;gt;&amp;gt; L = [1,2,3]
&amp;gt;&amp;gt;&amp;gt; L += [4,5,6]
&amp;gt;&amp;gt;&amp;gt; L
[1, 2, 3, 4, 5, 6]&lt;/p&gt;
&lt;p&gt;&amp;#64;Nacho&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-list-comprehension-is-in-effect-doi"&gt;
&lt;h2&gt;Your list comprehension is, in effect, doi...&lt;/h2&gt;
&lt;p&gt;Wyatt&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-11 15:44:43.690000-04:00&lt;/p&gt;
&lt;p&gt;&amp;#64;Nacho
Your list comprehension is, in effect, doing an append. You should just
use a normal loop:
row = [...]
stuff = []
for item in row:
....stuff += item.split('+-')
Reusing the name row isn't saving you anything, and this version is
clearer, *and* it gets you what you want.&lt;/p&gt;
&lt;p&gt;Chris Leary&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-08 18:12:08.065000-04:00&lt;/p&gt;
&lt;p&gt;This comment has been removed by the author.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="michael-watkins-i-would-be-careful-about-getting"&gt;
&lt;h2&gt;&amp;#64;Michael Watkins: I would be careful about getting...&lt;/h2&gt;
&lt;p&gt;Michael&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-06 16:38:49.660000-04:00&lt;/p&gt;
&lt;p&gt;&amp;#64;Michael Watkins: I would be careful about getting into that habit. If
you do that in a loop, you create a bunch of intermediate lists and
it'll get slow really fast.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>Code Kata : Analyze A Hard Drive</title><link href="https://slott56.github.io/2009_10_05-code_kata_analyze_a_hard_drive.html" rel="alternate"></link><published>2009-10-05T07:01:00-04:00</published><updated>2009-10-05T07:01:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-05:/2009_10_05-code_kata_analyze_a_hard_drive.html</id><summary type="html">&lt;p&gt;This isn't computer forensics; it's something much simpler.&lt;/p&gt;
&lt;p&gt;A colleague has been struck down with a disease (or won the lottery)
and won't be back to work any time soon. Worse, they did not use SVN
to do daily check-ins. Their laptop has the latest and greatest. As
well as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This isn't computer forensics; it's something much simpler.&lt;/p&gt;
&lt;p&gt;A colleague has been struck down with a disease (or won the lottery)
and won't be back to work any time soon. Worse, they did not use SVN
to do daily check-ins. Their laptop has the latest and greatest. As
well as all experiments, spike solutions, and failed dead-ends.&lt;/p&gt;
&lt;p&gt;You have their hard drive mounted in an enclosure and available as
/Volumes/Fredslaptop or F: if you're a windows programmer.&lt;/p&gt;
&lt;p&gt;There are, of course, thousands of directories. Not all of which are
terribly useful.&lt;/p&gt;
&lt;p&gt;Step 1 - find the source. Write a small utility to locate all
directories which contain &amp;quot;source&amp;quot;. Pick a language you commonly work
in. For C programmers, you might be looking for .c, .cpp, .h, and
.hpp files. For Python programmers, you're looking for .py files. For
Java programmers, you're looking for .java, and .class files.&lt;/p&gt;
&lt;p&gt;Step 2 - get information. For each directory that appears to have
source, we want to know the number of source files, the total number
of lines in all those source files, and the most recent modification
time for those files. This is a combination of the output from wc and
ls -t.&lt;/p&gt;
&lt;p&gt;Step 3 - produce a useful report. To keep your team informed, create
a .CSV file, which can be loaded into a spreadsheet that summarizes
your findings.&lt;/p&gt;
</content><category term="Technologies"></category><category term="code-kata"></category></entry><entry><title>Agile Methods and "Total Cost"</title><link href="https://slott56.github.io/2009_10_03-agile_methods_and_total_cost.html" rel="alternate"></link><published>2009-10-03T07:35:00-04:00</published><updated>2009-10-03T07:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-03:/2009_10_03-agile_methods_and_total_cost.html</id><summary type="html">&lt;p&gt;Many folks ask about Agile project planning and total cost. As our
internal project managers wrestle with this, there are a lot of
questions.&lt;/p&gt;
&lt;p&gt;Mostly these questions are rejections of incremental delivery (&amp;quot;All
or Nothing&amp;quot;) or rejections of flexibility (&amp;quot;Total Total Cost&amp;quot;). We'll
look at these rejections in detail.&lt;/p&gt;
&lt;p&gt;Traditional …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many folks ask about Agile project planning and total cost. As our
internal project managers wrestle with this, there are a lot of
questions.&lt;/p&gt;
&lt;p&gt;Mostly these questions are rejections of incremental delivery (&amp;quot;All
or Nothing&amp;quot;) or rejections of flexibility (&amp;quot;Total Total Cost&amp;quot;). We'll
look at these rejections in detail.&lt;/p&gt;
&lt;p&gt;Traditional (&amp;quot;waterfall&amp;quot;) project planning creates a master plan,
with all skills, all tasks, all effort, and all costs. It was easy
to simply add it up to a total cost.&lt;/p&gt;
&lt;p&gt;Software development, unlike -- for example -- carpentry, has
serious unknowns. Indeed software development has so many unknowns
that it's not possible to compare software project management with
the construction trades.&lt;/p&gt;
&lt;p&gt;A carpenter has a task (&amp;quot;frame up these rooms&amp;quot;) that has an
absolute boundary with no unknown deliverables. No one says things
like &amp;quot;we need to separate the functions of these users from those
users.&amp;quot; They say &amp;quot;build a wall, surface dry-wall, tape, paint, add
molding.&amp;quot; The carpenter measures, and knows precisely the
materials required.&lt;/p&gt;
&lt;p&gt;The carpenter rarely has new technology. The pace of change is
slow. A carpenter may switch from hand-held nails to a nail gun.
It's still nails. The carpenter may switch from wooden 2x4's to
metal supports. It's still vertical members and nails. The
carpenter may switch brands of wall-board. It's still wall-board.&lt;/p&gt;
&lt;p&gt;The consequence of this is that -- for software projects --
&lt;strong&gt;Total Cost Is Hard To Predict&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="hack-arounds"&gt;
&lt;h2&gt;Hack-Arounds&lt;/h2&gt;
&lt;p&gt;Total cost is hard to predict, but we try to do it anyway. What we
do is add &amp;quot;risk factors&amp;quot; to inflate our estimate. We add risk
factors for the scope of delivery. We add risk factors for our
ability to deliver.&lt;/p&gt;
&lt;p&gt;We can organize these risk factors into several subtle buckets.
The &lt;a class="reference external" href="http://en.wikipedia.org/wiki/COCOMO"&gt;COCOMO&lt;/a&gt; model breaks
scope down into three Product Attributes and four Hardware
Attributes. It breaks delivery down into five Personnel Attributes
and three Project Attributes.&lt;/p&gt;
&lt;p&gt;This is a hack-around because we simply cannot ever know the
&lt;em&gt;final&lt;/em&gt; scope, nor can we ever know our ability to deliver. We
can't know our ability to deliver because the team is constantly
changing. We should not cope with this expected constant state of
flux by writing an elaborate plan and then reporting our failure
to meet that plan. That's stupid.&lt;/p&gt;
&lt;p&gt;Worse still, we can't know the scope because it's usually a fabric
of lies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scope-issue-1-required"&gt;
&lt;h2&gt;Scope Issue 1: &amp;quot;Required&amp;quot;&lt;/h2&gt;
&lt;p&gt;Customers claim that X, Y and Z are &amp;quot;required&amp;quot;. Often, they have
no idea what &amp;quot;required&amp;quot; even means. I spent a fruitless hour with
a customer that had a 24×7 requirement. I said, &amp;quot;you haven't
purchased hardware that will give you 24×7, so we're submitting
this change order to remove it from the requirements.&amp;quot;&lt;/p&gt;
&lt;p&gt;They said, &amp;quot;It's more of a goal. We don't want to remove it.&amp;quot;&lt;/p&gt;
&lt;p&gt;I said, &amp;quot;It cannot be achieved. You will not pay us because we
will fail. Can we remove it and rewrite it as a 'goal'?&amp;quot;&lt;/p&gt;
&lt;p&gt;They said, &amp;quot;No need to remove it: we wouldn't failure to meet that
requirement as a 'failure'.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Okay,&amp;quot; I said, &amp;quot;what's the minimum you'll put up with before
suing us for failing?&amp;quot;&lt;/p&gt;
&lt;p&gt;They couldn't answer that. They had no &amp;quot;required&amp;quot; up-time and
could not determine what was &amp;quot;required&amp;quot;. They had a goal, but no
minimum that would trigger labeling the project a failure.&lt;/p&gt;
&lt;p&gt;Of course, the project failed. But not because of up-time. There
were dozens of these kinds of poorly-worded requirements that
weren't really required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scope-issues-2-the-game"&gt;
&lt;h2&gt;Scope Issues 2: &amp;quot;The Game&amp;quot;&lt;/h2&gt;
&lt;p&gt;I worked with some users who were adept at gaming IT. They knew
that IT was utterly incapable of delivering everything in the
requirements document. They knew this and planned on it.&lt;/p&gt;
&lt;p&gt;Also, the users knew that a simple solution would not &amp;quot;add enough
value&amp;quot;; a simple solution would get rejected by the governance
committee. They knew this and planned on it also.&lt;/p&gt;
&lt;p&gt;The users would write amazing, fabulous, wondrous requirements,
knowing that some of them were sacrificial. The extra requirements
were there to (1) force IT to commit serious resources to the
project and (2) convince governance that the software &amp;quot;added
enough value&amp;quot;.&lt;/p&gt;
&lt;p&gt;IT spent (wasted?) hours planning, architecting, designing,
estimating and tracking progress against &lt;strong&gt;all&lt;/strong&gt; of the
requirements. Then, when we got to acceptance testing, there were
numerous &amp;quot;requirements&amp;quot; that were not required, nor even desired.
They were padding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What To Do?&lt;/h2&gt;
&lt;p&gt;Okay. Scope and delivery are unknowable. Fine. In spite of this,
what do we do to provide a reasonable estimate of development
effort?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Gather the &amp;quot;requirements&amp;quot; or &amp;quot;desires&amp;quot; or &amp;quot;wishes&amp;quot; or &amp;quot;epics&amp;quot;
or &amp;quot;stories&amp;quot; or whatever you've got that provides some scope
definition. This is the &amp;quot;analysis&amp;quot; or &amp;quot;elaboration&amp;quot; phase.
Define &amp;quot;what&amp;quot;, but not &amp;quot;how&amp;quot;. Clearly define the business
problem to be solved. Avoid solution-speak like &amp;quot;database&amp;quot;,
&amp;quot;application server&amp;quot;, and the like.&lt;/li&gt;
&lt;li&gt;Decompose. Define a backlog of sprints based on what you know.
If necessary, dig into some analysis details to provide more
information on the sprints. Jiggle the sprints around to get a
consistent size and effort.&lt;/li&gt;
&lt;li&gt;Prioritize based on your best understanding. Define some
rational ordering to the sprints and releases. Provide some
effort estimate for the first few releases. This estimate is
simply the sum of the sprint costs. The sprints should be all
about the same effort and about the same cost. About. Not
exactly. Fine tune as necessary.&lt;/li&gt;
&lt;li&gt;Prioritize again with the users. Note that the sprint costs and
the sprints required to release are all in their face. They can
adjust the order only. Cost is not negotiable. It's largely
fixed.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="rejection-1-all-or-nothing"&gt;
&lt;h2&gt;Rejection 1: All Or Nothing&lt;/h2&gt;
&lt;p&gt;One weird discussion point is the following: &amp;quot;Until release X,
this is all useless. You may as well not do release 1 to X-1,
those individual steps are of no value.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is not true, but it's a way some folks try to reject the idea
of incremental releases.&lt;/p&gt;
&lt;p&gt;You have two possible responses.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Okay.&amp;quot; In this case, you still create the releases, you just
don't deliver them. We watched two members of the customer's
management team argue about the all-or-nothing issue. One
bone-head kept repeating that it was all-or-nothing. Everyone
else claimed that Release 1 and 2 were really helpful, it was
release 3 to X-1 that were not so useful.&lt;/li&gt;
&lt;li&gt;&amp;quot;What not?&amp;quot; In this case, you suspect that the priorities are
totally wrong and -- for some reason -- the customer is
unwilling to put them in the correct order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything can be prioritized. Something &lt;em&gt;will&lt;/em&gt; be delivered
first. At the very least, you can play this trump card. &amp;quot;We need
to do incremental releases to resolve any potential problems with
delivery and turn-over.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rejection-2-total-total-cost"&gt;
&lt;h2&gt;Rejection 2: Total Total Cost&lt;/h2&gt;
&lt;p&gt;The most frustrating conversations surround the &amp;quot;total cost&amp;quot;
issue.&lt;/p&gt;
&lt;p&gt;The trick to this is the prioritization conversation you had with
your users and buyers. Step 4, above.&lt;/p&gt;
&lt;p&gt;You gave them the Release - Sprint - Cost breakdown.&lt;/p&gt;
&lt;p&gt;You walked through it to put the releases and sprints into the
correct order.&lt;/p&gt;
&lt;p&gt;What you have to do is add another column to the spread-sheet:
&amp;quot;Running Cost&amp;quot;. The running cost column is the sum of the sprint
costs. &lt;strong&gt;Each running cost number is a candidate total cost&lt;/strong&gt;.
It's just that simple.&lt;/p&gt;
&lt;p&gt;It takes several tries to get everyone's head wrapped around the
concept.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customer-control"&gt;
&lt;h2&gt;Customer Control&lt;/h2&gt;
&lt;p&gt;You know the concept has started to sink in when the customer
finally agrees that they can pull the plug on the project after
any sprint. They grudgingly admit that perhaps they control the
costs.&lt;/p&gt;
&lt;p&gt;You know they really get it when they finally say something like
this.&lt;/p&gt;
&lt;p&gt;&amp;quot;We can stop at any time? Any time? In that case, the priority is
all wrong. You need to do X first. If we were -- hypothetically --
going to cancel the project, X would create the most value. Then,
after that, you have to do Z, not Y. If we cancel after X and Z,
we've solved most of the real problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;When they start to go though hypothetical project cancelation
scenarios with you, then they get the way that they control the
total cost.&lt;/p&gt;
&lt;p&gt;This tends to avoid the tedious of negotiations where the customer
then changes the requirements to meet their budget. Nothing is
more awful than a customer who has solicited bids via a Request
for Proposal (RFP) process. They liked our bid, but realized that
they'd asked for too much, and want to reduce the scope, but don't
have priorities or cost-per-release information.&lt;/p&gt;
&lt;p&gt;If you do the priorities interactively -- with the customer --
there's no &amp;quot;negotiation&amp;quot;. It's just decision-making on their part.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Thanks for the answer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-see-that-39-s-like-eve"&gt;
&lt;h2&gt;I see, that&amp;amp;#39;s like eve...&lt;/h2&gt;
&lt;p&gt;etienned&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-02 13:06:01.238000-04:00&lt;/p&gt;
&lt;p&gt;Thanks for the answer!
I see, that's like everything else, I have to teach and educate my
clients.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="COCOMO"></category><category term="TCO"></category><category term="agile"></category><category term="estimating"></category></entry><entry><title>Agile Project Management</title><link href="https://slott56.github.io/2009_10_01-agile_project_management.html" rel="alternate"></link><published>2009-10-01T09:20:00-04:00</published><updated>2009-10-01T09:20:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-01:/2009_10_01-agile_project_management.html</id><summary type="html">&lt;p&gt;Got this question recently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Any suggestions on PM tools that meet the following
considerations&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Planning&lt;/li&gt;
&lt;li&gt;Estimating&lt;/li&gt;
&lt;li&gt;Tracking (allowing both PM input and developer input)&lt;/li&gt;
&lt;li&gt;Reporting&lt;/li&gt;
&lt;li&gt;Support both Agile and Waterfall projects&lt;/li&gt;
&lt;li&gt;Releases&lt;/li&gt;
&lt;li&gt;Bug fixes (probably just another type of backlog)&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Agile PM requires far less planning than you're used to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Got this question recently.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Any suggestions on PM tools that meet the following
considerations&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Planning&lt;/li&gt;
&lt;li&gt;Estimating&lt;/li&gt;
&lt;li&gt;Tracking (allowing both PM input and developer input)&lt;/li&gt;
&lt;li&gt;Reporting&lt;/li&gt;
&lt;li&gt;Support both Agile and Waterfall projects&lt;/li&gt;
&lt;li&gt;Releases&lt;/li&gt;
&lt;li&gt;Bug fixes (probably just another type of backlog)&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Agile PM requires far less planning than you're used to.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A &amp;quot;backlog&amp;quot; which is best done on a spreadsheet.&lt;/li&gt;
&lt;li&gt;Daily standup meetings which last no more than 15 minutes at
the absolute longest.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's about it.&lt;/p&gt;
&lt;p&gt;Let's look at these expectations in some detail. This is
important because Agile PM is a wrenching change from waterfall
PM.&lt;/p&gt;
&lt;div class="section" id="planning"&gt;
&lt;h2&gt;Planning&lt;/h2&gt;
&lt;p&gt;There are two levels of detail in planning. The top level is
the overall backlog. This is based on the &amp;quot;complete
requirements&amp;quot; (hahaha, as if such a thing exists). You have an
initial planning effort to decompose the &amp;quot;requirements&amp;quot; into a
workable sequence of deliverables and sprints to build those
deliverables. Don't over-plan -- things will change. Don't
invest 120 man-hours of effort into a plan that the customer
will invalidated with their first change request. Just
decompose into something workable. Spend only a few days on
this.&lt;/p&gt;
&lt;p&gt;The most important thing is to prioritize. The backlog must
always be kept in priority order. The most important things to
do next are at the top of the backlog. At the end of every
sprint, you review the priorities and change them so that the
next thing you do is the absolutely most valuable thing you can
do. At any time, you can stop work, and you have done something
of significant value. At any time, you can review the next few
sprints and describe precisely how valuable those sprints will
be.&lt;/p&gt;
&lt;p&gt;The micro level of detail is the next few deliverables. No more
than four to six. Don't over-plan. Review the deliverables in
the backlog, correcting, expanding, combining and refining as
necessary to create something that will be of value. List the
sprints to build those deliverables. Try to keep each sprint in
the four week range. This is really hard to do at first, but
after a while you develop a rhythm based on features to be
built and skills of the team. You don't know enough going in,
so don't over-plan. After the first few sprints you'll learn a
lot about the business problem, the technology and the team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="estimating"&gt;
&lt;h2&gt;Estimating&lt;/h2&gt;
&lt;p&gt;Rule 1: don't. Rule 2: the estimate is merely the burn rate
(cost per sprint) times the number of sprints. Each sprint
involves the whole team building something that *could* be
put into production. A team of 5 with 4 week sprints is a cost
of 5*40*4 (800 man-hours).&lt;/p&gt;
&lt;p&gt;Each sprint, therefore, has a cost of 800 man-hours. Period.
The overall project has S sprints. If the project runs more
than a year, stop. Stop. The first year is all you can
rationally estimate this way. Future years are just random
numbers. 5*40*50 = 10,000 man-hours.&lt;/p&gt;
&lt;p&gt;Details don't matter because each customer change will
invalidate all of your carefully planned schedules. Just use
sprints and simple multiplies. It's *more* accurate since it
reflects the actual level of unknowns.&lt;/p&gt;
&lt;p&gt;What about &amp;quot;total cost&amp;quot;? First, define &amp;quot;total&amp;quot;. When the
project starts is the &amp;quot;complete requirements&amp;quot; (hahahaha, as if
such a thing actually exists). Then, with each customer change,
this changes. Further, half the requirements are merely
&amp;quot;nice-to-haves&amp;quot;. Since they're merely nice, they're low
priority -- at the bottom of the backlog.&lt;/p&gt;
&lt;p&gt;Since each sprint creates something deliverable, you can draw a
line under any sprint, call it &amp;quot;done&amp;quot; and call that the &amp;quot;total
cost&amp;quot;. Any sprint. Any. There are as many different total costs
as there are sprints, and all of them are right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tracking"&gt;
&lt;h2&gt;Tracking&lt;/h2&gt;
&lt;p&gt;I don't know what this is. I assume it's &amp;quot;tracking progress of
tasks against a plan&amp;quot;. Since the tasks are not planned at a low
level of detail, there's nothing to &amp;quot;track&amp;quot;.&lt;/p&gt;
&lt;p&gt;You have a daily stand-up. People commit to do something that
day. The next day you find out if they finished or didn't
finish. This isn't a &amp;quot;tool thing&amp;quot;. It's a conversation. Done in
under 15 minutes.&lt;/p&gt;
&lt;p&gt;Two things can happen during this brief conversation.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Things are progressing as hoped. The sprint will include all
hoped-for features.&lt;/li&gt;
&lt;li&gt;Things are not progressing as hoped. The sprint may not
include some feature, or will include an incomplete
implementation. The sprint will never have bugs -- quality is
not sacrificial. Features are sacrificial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's no management intervention possible. The sprint will
have what it will have. Nothing can change that. More people
won't help. Technology changes won't help. Design changes won't
help. You're mid-sprint. You can only finish the sprint.&lt;/p&gt;
&lt;p&gt;AFTER the sprint is over, and you've updated the backlog and
fixed the priorities, you might want to consider design changes
or technology changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reporting"&gt;
&lt;h2&gt;Reporting&lt;/h2&gt;
&lt;p&gt;What? To Whom? Each sprint is a deliverable. The report is
&amp;quot;Done&amp;quot;.&lt;/p&gt;
&lt;p&gt;The backlog is a shared document that the users &amp;quot;own&amp;quot; and you
use to assure that the next sprint is the next most important
thing to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="support-both-agile-and-waterfall-projects"&gt;
&lt;h2&gt;Support both Agile and Waterfall projects&lt;/h2&gt;
&lt;p&gt;Not possible. Incompatible at a fundamental level. You can't do
both with one tool because you don't use tools for Agile
projects. You just use spreadsheets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="releases"&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;p&gt;Some sprints are release sprints. They're no different (from a
management perspective) than development sprints. This is just
CM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bug-fixes"&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;p&gt;Probably just another type of backlog. Correct.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Very interesting and very realistic approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the"&gt;
&lt;h2&gt;The...&lt;/h2&gt;
&lt;p&gt;etienned&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-01 20:48:14.170000-04:00&lt;/p&gt;
&lt;p&gt;Very interesting and very realistic approach.
The only thing problematic for me is how to deal with the clients to
define the cost. Usually my clients want to know how much the
development will cost at the beginning for all their &amp;quot;original&amp;quot;
requirements (not necessarely the real ones)?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-href-http-www-my-project-management-expert-c"&gt;
&lt;h2&gt;&amp;lt;a href=&amp;quot;&lt;a class="reference external" href="http://www.my-project-management-expert.c"&gt;http://www.my-project-management-expert.c&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-04 09:35:42.344000-04:00&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.my-project-management-expert.com/agile-methodology.html"&gt;agile
methodology&lt;/a&gt;
can be a real pain where project management is involved. Yes &lt;a class="reference external" href="http://www.my-project-management-expert.com/agile-documentation.html"&gt;agile
documentation&lt;/a&gt;
is alot easier to produce, but it also means it is harder to cost as
well as to ensure the entirety comes together and get's delivered on
time.&lt;/p&gt;
&lt;p&gt;Regards&lt;/p&gt;
&lt;p&gt;Susan de Sousa&lt;/p&gt;
&lt;p&gt;Site Editor &lt;a class="reference external" href="http://www.my-project-management-expert.com"&gt;http://www.my-project-management-expert.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-is-nice-blog-thanks-for-sharing-resources-relat"&gt;
&lt;h2&gt;It is nice blog,Thanks for sharing resources relat...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-10 04:41:20.402000-04:00&lt;/p&gt;
&lt;p&gt;It is nice blog,Thanks for sharing resources related to &lt;a class="reference external" href="http://www.itsolusenz.com"&gt;website
design&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-improve-productivity-of-a-company-and-reduce-co"&gt;
&lt;h2&gt;To improve productivity of a company and reduce co...&lt;/h2&gt;
&lt;p&gt;Tom Fritz&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-03-07 21:13:33.850000-05:00&lt;/p&gt;
&lt;p&gt;To improve productivity of a company and reduce costs, an effective
management software should be used. &lt;a class="reference external" href="http://www.gurango.com/microsoft-dynamics-mrp.html"&gt;Management
Software&lt;/a&gt; is a
long term solution to leverage existing investment in Microsoft
technology.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="agile"></category><category term="project management"></category></entry><entry><title>Duct Tape Programmers</title><link href="https://slott56.github.io/2009_10_01-duct_tape_programmers.html" rel="alternate"></link><published>2009-10-01T09:14:00-04:00</published><updated>2009-10-01T09:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-10-01:/2009_10_01-duct_tape_programmers.html</id><summary type="html">&lt;p&gt;See Joel On Software: &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2009/09/23.html"&gt;The Duct Tape
Programmer&lt;/a&gt;: he
lauds the programmer who gets stuff done with &amp;quot;duct tape and WD-40&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's why: &amp;quot;Shipping is a feature. A really important feature. Your
product must have it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Dave Drake sent the link along with the following:&lt;/p&gt;
&lt;p&gt;This &amp;quot;speaks of coding for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See Joel On Software: &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2009/09/23.html"&gt;The Duct Tape
Programmer&lt;/a&gt;: he
lauds the programmer who gets stuff done with &amp;quot;duct tape and WD-40&amp;quot;.&lt;/p&gt;
&lt;p&gt;Here's why: &amp;quot;Shipping is a feature. A really important feature. Your
product must have it.&amp;quot;&lt;/p&gt;
&lt;p&gt;Dave Drake sent the link along with the following:&lt;/p&gt;
&lt;p&gt;This &amp;quot;speaks of coding for the rest of us, who are not into building
castles in the air, but getting the job done. Not that there is
anything wrong with better design, cleaner APIs, well-defined
modularity to ease the delegation of coding as well as post-delivery
maintenance. But damn, I wish I had a nickel for every time I sat in
a design meeting where we tried to do something the fancy way, and it
broke in the middle of the development cycle, or testing, or even the
builds, and always in the demos.&amp;quot;&lt;/p&gt;
&lt;div class="section" id="however"&gt;
&lt;h2&gt;However&lt;/h2&gt;
&lt;p&gt;There is one set of quotes that falls somewhere on the continuum of
wrong, misleading and flamebait.&lt;/p&gt;
&lt;p&gt;&amp;quot;And unit tests are not critical. If there’s no unit test the
customer isn’t going to complain about that.&amp;quot;&lt;/p&gt;
&lt;p&gt;This -- in my experience -- is wrong. For Joel or the author of the
quote (Jamie Zawinski) this may be merely misleading because it was
taken out of context.&lt;/p&gt;
&lt;p&gt;It's absolutely false the customers won't complain about missing unit
tests. When things don't work, customers complain. And one of the
surest ways to make things actually work is to write unit tests.&lt;/p&gt;
&lt;p&gt;I suppose that genius-level programmers don't need to test. The rest
of us, however, need to write unit tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing-dogma"&gt;
&lt;h2&gt;Unit Testing Dogma&lt;/h2&gt;
&lt;p&gt;On Stack Overflow there are some questions that illustrate the value
of misinformation on unit testing. On one end, we have Zawinski (and
others) who says that Unit Tests don't create enough value. On the
other end we have questions that indicate the slavish adherence to
some unit test process is essential.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://stackoverflow.com/questions/1463632/how-to-use-tdd-correctly-to-implement-a-numerical-method/1463677#1463677"&gt;How to use TDD correctly to implement a numerical
method?&lt;/a&gt;
The author of the question seems to think that TDD means &amp;quot;decompose
the problem into very small cases, write one test for each very small
test, and then code for just that one case and no others.&amp;quot; I don't
know where this process came from, but it sounds like far too much
work for the value created.&lt;/p&gt;
&lt;p&gt;It's unfair to say that unit testing doesn't add value and claim that
customers don't see the unit tests. They emphatically &lt;strong&gt;do&lt;/strong&gt; see unit
tests when they see software that works. Customers don't see unit
tests in detail. They don't see dogmatic process-oriented software
development.&lt;/p&gt;
&lt;p&gt;When there are no tests, the customer sees shoddy quality. When the
process (or the schedule) trumps the feature-set being delivered, the
customer sees incomplete or low-quality deliverables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The original blog post said -- clearly -- that gold-plated technology
doesn't create any value.&lt;/p&gt;
&lt;p&gt;The blog post also pulled out a quote that said -- incorrectly --
that unit tests doesn't create enough value.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="version-control-is-another-thing-that-the-users-do"&gt;
&lt;h2&gt;Version control is another thing that the users do...&lt;/h2&gt;
&lt;p&gt;Marius Gedminas&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-30 12:24:58.885000-04:00&lt;/p&gt;
&lt;p&gt;Version control is another thing that the users do not see; I wonder
what Joel thinks about it. It is possible to ship code without using
version control but I would not wish to be on the team that tries it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-user-doesn-39-t-normally-see-any-code-eithe"&gt;
&lt;h2&gt;The user doesn&amp;amp;#39;t (normally) see any code eithe...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-30 09:32:48.540000-04:00&lt;/p&gt;
&lt;p&gt;The user doesn't (normally) see any code either, that doesn't mean you
can do without.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-know-quite-a-few-genius-level-programmers-they"&gt;
&lt;h2&gt;I know quite a few genius-level programmers.  They...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-30 00:36:27.359000-04:00&lt;/p&gt;
&lt;p&gt;I know quite a few genius-level programmers. They write tests. In fact,
they write tests first, before writing the code, which is a really
ingenious thing to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-is-nice-blog-thanks-for-sharing-resources-relat"&gt;
&lt;h2&gt;It is nice blog,Thanks for sharing resources relat...&lt;/h2&gt;
&lt;p&gt;Itsolusenz&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-10-10 08:42:57.257000-04:00&lt;/p&gt;
&lt;p&gt;It is nice blog,Thanks for sharing resources related to &lt;a class="reference external" href="http://www.itsolusenz.com"&gt;website
design&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="tdd"></category></entry><entry><title>Code Kata : Parse USPS ZIP3 table</title><link href="https://slott56.github.io/2009_09_23-code_kata_parse_usps_zip3_table.html" rel="alternate"></link><published>2009-09-23T20:49:00-04:00</published><updated>2009-09-23T20:49:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-23:/2009_09_23-code_kata_parse_usps_zip3_table.html</id><summary type="html">&lt;div class="section" id="situation"&gt;
&lt;h2&gt;Situation&lt;/h2&gt;
&lt;p&gt;The USPS ZIP codes have a multi-part structure. The first three
digits are a prefix that defines a sectional center facility.&lt;/p&gt;
&lt;p&gt;The USPS table L005 3-Digit ZIP Code Prefix Groups—SCF Sortation
maps clusters of ZIP3 prefixes to Facility and State codes. The
following URL has this table.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pe.usps.gov/text/DMM300/L005.htm"&gt;http …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="situation"&gt;
&lt;h2&gt;Situation&lt;/h2&gt;
&lt;p&gt;The USPS ZIP codes have a multi-part structure. The first three
digits are a prefix that defines a sectional center facility.&lt;/p&gt;
&lt;p&gt;The USPS table L005 3-Digit ZIP Code Prefix Groups—SCF Sortation
maps clusters of ZIP3 prefixes to Facility and State codes. The
following URL has this table.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pe.usps.gov/text/DMM300/L005.htm"&gt;http://pe.usps.gov/text/DMM300/L005.htm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-job"&gt;
&lt;h2&gt;Your Job&lt;/h2&gt;
&lt;p&gt;Your job is to write a library module that does two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Read and parses this table.&lt;/li&gt;
&lt;li&gt;Support ZIP-code lookup (ZIP3, ZIP, ZIP+4) to return SCF and
State information.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="some-notes"&gt;
&lt;h2&gt;Some Notes&lt;/h2&gt;
&lt;p&gt;Finding and parsing the table is often done in Python with
components like &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful
Soup&lt;/a&gt;.
Equivalents aren't available in all languages. You might want to
copy and paste this table into a spreadsheet application, and save
it as a CSV file, which is much easier to work with than HTML.&lt;/p&gt;
&lt;p&gt;There's a regular format to the ZIP3 ranges that makes parsing
them relatively simple.&lt;/p&gt;
&lt;p&gt;The SCF names, however, have two different formats. Some have
names that begin with SCF. Others have names that don't begin with
SCF. Be careful to handle each version correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="life-insurance-is-the-best-option-to-scour-our-lif"&gt;
&lt;h2&gt;Life Insurance is the best option to scour our lif...&lt;/h2&gt;
&lt;p&gt;surf accommodations&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-04-07 01:59:26.907000-04:00&lt;/p&gt;
&lt;p&gt;Life Insurance is the best option to scour our life.So in this blog &lt;a class="reference external" href="http://www.zipcodeinsights.com/"&gt;US
zip codes&lt;/a&gt; many info and good
content.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="code-kata"></category></entry><entry><title>Code Kata : Merge Changes</title><link href="https://slott56.github.io/2009_09_23-code_kata_merge_changes.html" rel="alternate"></link><published>2009-09-23T20:36:00-04:00</published><updated>2009-09-23T20:36:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-23:/2009_09_23-code_kata_merge_changes.html</id><summary type="html">&lt;div class="section" id="the-situation"&gt;
&lt;h2&gt;The Situation&lt;/h2&gt;
&lt;p&gt;A co-worker has mistakenly cloned a directory tree rather than link
to it. Then they made some number of changes to files in that
directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-job"&gt;
&lt;h2&gt;Your Job&lt;/h2&gt;
&lt;p&gt;Your job is to compute a directory-level difference between an
official copy and the changes they made. Sadly, you can't trivially …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-situation"&gt;
&lt;h2&gt;The Situation&lt;/h2&gt;
&lt;p&gt;A co-worker has mistakenly cloned a directory tree rather than link
to it. Then they made some number of changes to files in that
directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-job"&gt;
&lt;h2&gt;Your Job&lt;/h2&gt;
&lt;p&gt;Your job is to compute a directory-level difference between an
official copy and the changes they made. Sadly, you can't trivially
rely on using Subversion for this. You're going to have to write your
own differ.&lt;/p&gt;
&lt;p&gt;The difference report should show the following kinds of information.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Baseline files unchanged in the clone.&lt;/li&gt;
&lt;li&gt;Cloned files which are new and don't exist in the baseline.&lt;/li&gt;
&lt;li&gt;Cloned files which are changed and newer than the baseline.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You'll need to skip certain directories. They're either working files
or are ignored for other reason.&lt;/p&gt;
&lt;p&gt;You'll need to skip certain file extensions. Things like &lt;tt class="docutils literal"&gt;.pyc&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;.class&lt;/tt&gt; files have date-stamps that don't indicate a real difference.&lt;/p&gt;
&lt;p&gt;Ultimately, you'll produce two things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A report to show what was changed.&lt;/li&gt;
&lt;li&gt;A script that will copy the changes from the clone back into the
master directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="some-notes"&gt;
&lt;h2&gt;Some Notes&lt;/h2&gt;
&lt;p&gt;Python has several modules that help with doing directory and file
comparison.&lt;/p&gt;
&lt;p&gt;In non-Python environments, you may have to rely on system utilities
like &lt;strong&gt;diff&lt;/strong&gt; or &lt;strong&gt;cmp&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is best built incrementally, creating the report first. Then
handle exceptions. Then do the copy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="code-kata"></category></entry><entry><title>Innovation and Outsourcing</title><link href="https://slott56.github.io/2009_09_20-innovation_and_outsourcing.html" rel="alternate"></link><published>2009-09-20T08:46:00-04:00</published><updated>2009-09-20T08:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-20:/2009_09_20-innovation_and_outsourcing.html</id><summary type="html">&lt;p&gt;Good stuff in ComputerWorld: &lt;a class="reference external" href="http://www.computerworld.com/s/article/342303/Partnerships_Can_Go_Too_Far"&gt;Partnerships can Go Too
Far&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;quot;Consider vendor innovation. As companies become large and
entrenched, they typically become more risk-averse and less creative,
often rejecting ideas that challenge conventional wisdom.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is really only half the story.&lt;/p&gt;
&lt;div class="section" id="first-things-first"&gt;
&lt;h2&gt;First Things First&lt;/h2&gt;
&lt;p&gt;Programming is hard -- really hard. Read &lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD316.2.html"&gt;EWD …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Good stuff in ComputerWorld: &lt;a class="reference external" href="http://www.computerworld.com/s/article/342303/Partnerships_Can_Go_Too_Far"&gt;Partnerships can Go Too
Far&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&amp;quot;Consider vendor innovation. As companies become large and
entrenched, they typically become more risk-averse and less creative,
often rejecting ideas that challenge conventional wisdom.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is really only half the story.&lt;/p&gt;
&lt;div class="section" id="first-things-first"&gt;
&lt;h2&gt;First Things First&lt;/h2&gt;
&lt;p&gt;Programming is hard -- really hard. Read &lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD316.2.html"&gt;EWD 316, chapter
2&lt;/a&gt;.
By extension, most of IT is saddled with really, really complex and
difficult problems.&lt;/p&gt;
&lt;p&gt;&amp;quot;As a result of its extreme power, both the amount of information
playing a role in the computations as well as the number of
operations performed in the course of a computation, escape our
unaided imagination by several orders of magnitude. Due to the
limited size of our skull we are absolutely unable to visualize to
any appreciable degree of detail what we are going to set in motion,
and programming thereby comes an activity facing us with conceptual
problems that have risen far, far above the original level of
triviality.&amp;quot;&lt;/p&gt;
&lt;p&gt;Given that IT is hard, it therefore entails either some risk of
failure or considerable cost to avoid failure. It also involves an --
often unknown -- amount of learning.&lt;/p&gt;
&lt;p&gt;Before writing software, we really do need to learn the language,
tools, architecture and components we're going to use. Not a 1-week
introduction, but a real project with real quality reviews. Sometimes
two projects are required to ferret out mistakes.&lt;/p&gt;
&lt;p&gt;Also, before writing software, we really do need to understand the
problem. Sadly, many business problems are workarounds to bad
software. Leaving us with many alternative solutions that are all
equally bad and don't address the root cause problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-value-features"&gt;
&lt;h2&gt;No-Value Features&lt;/h2&gt;
&lt;p&gt;Programmers will often pursue no-value features that are part of the
language, tools, components or architecture. This drives up cost and
risk for no value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="business-short-sightedness"&gt;
&lt;h2&gt;Business Short-Sightedness&lt;/h2&gt;
&lt;p&gt;The compounding problem is a short-sighted business impetus toward
delivering something that mostly works as quickly as possible. Often,
business folks buy into the no-value features, and overlook the real
problem that we're supposed to be solving.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-result-stifling"&gt;
&lt;h2&gt;The Result: Stifling&lt;/h2&gt;
&lt;p&gt;The result of (a) inherent complexity, (b) no-value features and (c)
short-sighted buyers is that IT management finds ways to stifle all
IT innovation.&lt;/p&gt;
&lt;p&gt;In effect, most companies outsource innovation. They hope that their
vendors will provide something new, different and helpful. The IT
organization isn't allowed to invest in the learning or take the
risks necessary to innovate.&lt;/p&gt;
&lt;p&gt;The ComputerWorld article points out that some companies then put
Preferred Supplier Plans in place which further stifle innovation by
narrowing the field of vendors to only the largest and least
innovative.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="innovation"></category></entry><entry><title>Fedora 11 and Python 2.6</title><link href="https://slott56.github.io/2009_09_16-fedora_11_and_python_26.html" rel="alternate"></link><published>2009-09-16T16:13:00-04:00</published><updated>2009-09-16T16:13:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-16:/2009_09_16-fedora_11_and_python_26.html</id><summary type="html">&lt;p&gt;Upgraded a VM to Fedora 11 recently.&lt;/p&gt;
&lt;p&gt;This -- it turns out -- comes with Python 2.6 installed.&lt;/p&gt;
&lt;p&gt;It is, however, an incomplete build. To do anything, I had to install
a some additional Python packages. Specifically, the &amp;quot;libraries and
header files needed for Python development&amp;quot;. Also, IIRC, the tkinter
package …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Upgraded a VM to Fedora 11 recently.&lt;/p&gt;
&lt;p&gt;This -- it turns out -- comes with Python 2.6 installed.&lt;/p&gt;
&lt;p&gt;It is, however, an incomplete build. To do anything, I had to install
a some additional Python packages. Specifically, the &amp;quot;libraries and
header files needed for Python development&amp;quot;. Also, IIRC, the tkinter
package isn't present by default.&lt;/p&gt;
&lt;p&gt;Once I had the development package installed, I could add
&lt;a class="reference external" href="http://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt;. After that,
it's a sequence of easy_install steps and we were up and running.&lt;/p&gt;
&lt;p&gt;I've started running our unit test suite with python -3 to capture
all of the DeprecationWarnings. So far, there aren't many and they
aren't show-stoppers. In one project we have some has_key methods and
a use of urllib that needs to be replaced.&lt;/p&gt;
&lt;p&gt;It's very, very nice to have a short, specific list of Python 3
compatibility issues to look out for. We're not going to use Python 3
any time soon, but it's nice to be able to solve the problems in
advance.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="fedora-12-is-available-to-a-href-http-library"&gt;
&lt;h2&gt;Fedora 12 is available to &amp;lt;a href=&amp;quot;&lt;a class="reference external" href="http://library"&gt;http://library&lt;/a&gt;....&lt;/h2&gt;
&lt;p&gt;elm&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-11-18 03:22:57.748000-05:00&lt;/p&gt;
&lt;p&gt;Fedora 12 is available to &lt;a class="reference external" href="http://library.jak-stik.ac.id"&gt;download&lt;/a&gt;
now!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>The world is multidimensional? Really?</title><link href="https://slott56.github.io/2009_09_15-the_world_is_multidimensional_really.html" rel="alternate"></link><published>2009-09-15T11:33:00-04:00</published><updated>2009-09-15T11:33:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-15:/2009_09_15-the_world_is_multidimensional_really.html</id><summary type="html">&lt;p&gt;I cannot believe that people still consider top-down, uni-dimensional,
taxonomic hierarchies useful.&lt;/p&gt;
&lt;p&gt;This Stack Overflow question (&lt;a class="reference external" href="http://stackoverflow.com/questions/1402721/rest-how-to-create-a-resource-that-depends-on-three-or-more-resources-of-differe"&gt;REST: How to Create a Resource That
Depends on Three or More Resources of Different
Types?&lt;/a&gt;)
repeats an assumption. Essentially the confusion comes from assuming
that &amp;quot;URI's map directly to a hierarchy&amp;quot;.&lt;/p&gt;
&lt;p&gt;I think …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I cannot believe that people still consider top-down, uni-dimensional,
taxonomic hierarchies useful.&lt;/p&gt;
&lt;p&gt;This Stack Overflow question (&lt;a class="reference external" href="http://stackoverflow.com/questions/1402721/rest-how-to-create-a-resource-that-depends-on-three-or-more-resources-of-differe"&gt;REST: How to Create a Resource That
Depends on Three or More Resources of Different
Types?&lt;/a&gt;)
repeats an assumption. Essentially the confusion comes from assuming
that &amp;quot;URI's map directly to a hierarchy&amp;quot;.&lt;/p&gt;
&lt;p&gt;I think it's over-exposure to the Windows file system where hard
links are a rarity.&lt;/p&gt;
&lt;p&gt;Perhaps it's also from over-exposure to hierarchical site-maps that
simply repeat the menu structure without adding information.&lt;/p&gt;
&lt;p&gt;Someone who is reading &lt;a class="reference external" href="http://www.everythingismiscellaneous.com/"&gt;Everything is
Miscellaneous&lt;/a&gt;
suggested I read up on &amp;quot;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Faceted_classification"&gt;faceted
classification&lt;/a&gt;&amp;quot;
as if that was something new or different.&lt;/p&gt;
&lt;p&gt;What's interesting in Weinberger’s book is (1) recognizing this and
(2) taking some concrete action.&lt;/p&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What To Do?&lt;/h2&gt;
&lt;p&gt;What's perhaps the most important thing is this&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stop-forcing-things-into-hierarchies"&gt;
&lt;h2&gt;Stop Forcing Things Into Hierarchies&lt;/h2&gt;
&lt;p&gt;I sat in a multiple hour meeting where we debated the file-system
structure for artifacts created during a development project. Each
artifact has several dimensions.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Phase of the project (Inception, Elaboration, Construction,
Deployment)&lt;/li&gt;
&lt;li&gt;Deliverable type (DB Design, Application Programming, Web Site,
etc.)&lt;/li&gt;
&lt;li&gt;Status (Work in Progress, Waiting UAT, Completed, Rework, etc.)&lt;/li&gt;
&lt;li&gt;Calendar (Year, Quarter, Month the work started, as well as ended)&lt;/li&gt;
&lt;li&gt;Team (DBA's, Batch/Backend, Web/Frontend, ETL, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;p&gt;Since the data is multidimensional, no single taxonomic hierarchy
can ever &amp;quot;work&amp;quot;. Each alternative (and there are 5!=120 ways to
permute five dimensions) appears equally useful.&lt;/p&gt;
&lt;p&gt;If you want, you can enumerate all 5! permutations to see which is
more &amp;quot;logical&amp;quot; or &amp;quot;works better for the team&amp;quot;. What you'll find is
that they &lt;strong&gt;all&lt;/strong&gt; make sense. They all make sense because the
dimensions are all peers -- equally meaningful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternatives"&gt;
&lt;h2&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;One alternative is to do this.&lt;/p&gt;
&lt;p&gt;1. Create a relatively flat structure. Define all your things in
this flat structure. In a Relational Database context, this means
assign surrogate keys to everything, &amp;quot;natural&amp;quot; keys are more
problem than solution. In a content management context, just throw
documents anywhere.&lt;/p&gt;
&lt;p&gt;2. Create &amp;quot;alternative&amp;quot; indices via hard links to the flat
structure. Do not limit yourself to a few alternative orderings of
the dimensions. There are &lt;em&gt;n&lt;/em&gt;! permutations of your dimensions.
Expect to create many of these for different user consituencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remember-search-exists"&gt;
&lt;h2&gt;Remember, Search Exists&lt;/h2&gt;
&lt;p&gt;Recognize that highly structured metadata fields in a database are
usually a waste of time and money. Search exists. Much data is
unstructured or semi-structured and search functions exist that
handle this nicely.&lt;/p&gt;
&lt;p&gt;If you stop force-fitting hierarchies, you find that you have now
have several dimensions. Each dimension has a set of reasonably
well-defined tags. Each document or database fact row is a point
in multi-dimensional space.&lt;/p&gt;
&lt;p&gt;A single SQL-style query among these multiple dimensions is a pain
in the neck. Search, however, where the dimensions are implied
instead of stated, is much, much nicer.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="sounds-like-a-nice-linked-data-project"&gt;
&lt;h2&gt;sounds like a nice linked data project ;)...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-16 01:04:59.094000-04:00&lt;/p&gt;
&lt;p&gt;sounds like a nice linked data project ;)
/me is in reading mode of &amp;quot;Programming the Semantic Web&amp;quot; which gives all
examples in Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="everything-is-miscellaneous-by-weinberger-page-12"&gt;
&lt;h2&gt;Everything is Miscellaneous by Weinberger, page 12...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-26 17:19:50.014000-04:00&lt;/p&gt;
&lt;p&gt;Everything is Miscellaneous by Weinberger, page 125: &amp;quot;People keep
pretending they cn make things deeply hierarchical, categorizable, and
sequential when they can't. Everything is deeply intertwingled,&amp;quot; so said
Ted Nelson.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aka-labels-or-tags-they"&gt;
&lt;h2&gt;AKA &amp;quot;labels&amp;quot; or &amp;quot;tags&amp;quot;.  They ...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-15 12:15:25.031000-04:00&lt;/p&gt;
&lt;p&gt;AKA &amp;quot;labels&amp;quot; or &amp;quot;tags&amp;quot;. They rock. Discuss with your teams first about
which labels they would find useful; make a list of those, standardize
spelling, and go. (For a sufficiently large number of items to
categorize, even standardizing spelling beforehand is unnecessary as the
data will eventually tell you which spelling is important.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-s-flatland-aesthetic-by-b-tognazzini"&gt;
&lt;h2&gt;Apple's Flatland Aesthetic by B. Tognazzini...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-26 20:47:30.958000-04:00&lt;/p&gt;
&lt;p&gt;Apple's Flatland Aesthetic by B. Tognazzini
&lt;a class="reference external" href="http://www.asktog.com/columns/075AppleFlatlandPart1.html"&gt;http://www.asktog.com/columns/075AppleFlatlandPart1.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quote-from-page-235-of-the-book-glut-by-alex-wrigh"&gt;
&lt;h2&gt;Quote from page 235 of the book Glut by Alex Wrigh...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-19 16:09:10.508000-04:00&lt;/p&gt;
&lt;p&gt;Quote from page 235 of the book Glut by Alex Wright: In other words,
hierarchies and networks do not ncessarily hve to stand in opposition;
they may not only co-exist but ultimately prove consilient. As Keven
Kelly puts in his 1994 book Out of Control&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="dimensional data"></category><category term="database design"></category><category term="content management"></category></entry><entry><title>Python in the News</title><link href="https://slott56.github.io/2009_09_11-python_in_the_news.html" rel="alternate"></link><published>2009-09-11T20:22:00-04:00</published><updated>2009-09-11T20:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-11:/2009_09_11-python_in_the_news.html</id><summary type="html">&lt;p&gt;See this in Boing Boing:
&lt;a class="reference external" href="http://www.boingboing.net/2009/09/11/hairy-type.html"&gt;http://www.boingboing.net/2009/09/11/hairy-type.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They're talking about
&lt;a class="reference external" href="http://nodebox.net/code/index.php/Home"&gt;NodeBox&lt;/a&gt;, something I'd
never heard of before.&lt;/p&gt;
&lt;p&gt;&amp;quot;NodeBox is a Mac OS X application that lets you create 2D visuals
(static, animated or interactive) using Python programming code and
export them as a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See this in Boing Boing:
&lt;a class="reference external" href="http://www.boingboing.net/2009/09/11/hairy-type.html"&gt;http://www.boingboing.net/2009/09/11/hairy-type.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They're talking about
&lt;a class="reference external" href="http://nodebox.net/code/index.php/Home"&gt;NodeBox&lt;/a&gt;, something I'd
never heard of before.&lt;/p&gt;
&lt;p&gt;&amp;quot;NodeBox is a Mac OS X application that lets you create 2D visuals
(static, animated or interactive) using Python programming code and
export them as a PDF or a QuickTime movie.&amp;quot;&lt;/p&gt;
&lt;p&gt;Using Python to direct the creation of graphics. How cool.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="nodebox-is-wonderful-it-just-needs-more-community"&gt;
&lt;h2&gt;Nodebox is wonderful. It just needs more community...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-14 22:14:41.347000-04:00&lt;/p&gt;
&lt;p&gt;Nodebox is wonderful. It just needs more community building.&lt;/p&gt;
&lt;p&gt;Why MIT switched from Scheme to Python&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="http-www"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://www"&gt;http://www&lt;/a&gt;...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-30 19:49:44.568000-04:00&lt;/p&gt;
&lt;p&gt;Why MIT switched from Scheme to Python
&lt;a class="reference external" href="http://www.wisdomandwonder.com/link/2110/why-mit-switched-from-scheme-to-python"&gt;http://www.wisdomandwonder.com/link/2110/why-mit-switched-from-scheme-to-python&lt;/a&gt;
&lt;a class="reference external" href="http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-189January--IAP--2008/CourseHome/"&gt;http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-189January--IAP--2008/CourseHome/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>API Quality Check</title><link href="https://slott56.github.io/2009_09_11-api_quality_check.html" rel="alternate"></link><published>2009-09-11T20:14:00-04:00</published><updated>2009-09-11T20:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-11:/2009_09_11-api_quality_check.html</id><summary type="html">&lt;p&gt;A recent request for an API quality check sent me into a paroxysm.&lt;/p&gt;
&lt;p&gt;The request seemed simple enough. They had two varieties of API
design: varietal &lt;strong&gt;M&lt;/strong&gt; had a lot of methods, each with relatively few
parameters. Varietal &lt;strong&gt;P&lt;/strong&gt; had a few methods, but each had a
boat-load of parameters …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A recent request for an API quality check sent me into a paroxysm.&lt;/p&gt;
&lt;p&gt;The request seemed simple enough. They had two varieties of API
design: varietal &lt;strong&gt;M&lt;/strong&gt; had a lot of methods, each with relatively few
parameters. Varietal &lt;strong&gt;P&lt;/strong&gt; had a few methods, but each had a
boat-load of parameters.&lt;/p&gt;
&lt;p&gt;There had been some &amp;quot;reading&amp;quot; on API design and questions were
raised. They wanted me to weigh in, telling them that style &lt;strong&gt;M&lt;/strong&gt; was
&amp;quot;better&amp;quot; than style &lt;strong&gt;P&lt;/strong&gt;. [It is, but that's not the point.]&lt;/p&gt;
&lt;p&gt;I was shocked speechless.&lt;/p&gt;
&lt;p&gt;I find it incredible that anyone could even need coaching in API
design. Much less find Tulach's
&lt;a class="reference external" href="http://books.google.com/books?id=DXYZZVlWOAkC&amp;amp;lpg=PA5&amp;amp;ots=A2FZsDiv0f&amp;amp;dq=art%20of%20api%20design&amp;amp;pg=PA5#v=onepage&amp;amp;q=art%20of%20api%20design&amp;amp;f=false"&gt;book&lt;/a&gt;
and still be unable to apply the principles.&lt;/p&gt;
&lt;p&gt;Here's what bugged me.&lt;/p&gt;
&lt;p&gt;If they were coding in any sensible language, they should have
mountains of API examples all around them. Java has a huge standard
library. C# has the entire .Net framework. Python has a vast library.
All of these are tremendous, well-designed, carefully crafted
examples of API's.&lt;/p&gt;
&lt;div class="section" id="api-s-everywhere"&gt;
&lt;h2&gt;API's Everywhere&lt;/h2&gt;
&lt;p&gt;As far as I can see, the world is fat with API examples. Everywhere
you look, every vendor, every product, everything has an API.&lt;/p&gt;
&lt;p&gt;It just shouldn't be rocket science to compare your API against the
established standard for the language in which you're working.&lt;/p&gt;
&lt;p&gt;Somehow it was possible for several programmers to be completely
unable to find any examples of API design.&lt;/p&gt;
&lt;p&gt;I can only assume that they are living in a time-warp; none of them
have ever connected to the Internet or seen any code but their own.
Perhaps the only API they could think of was JDBC. Or perhaps they
were all Visual Basic or PL/SQL programmers and didn't see much
open-source code. Or perhaps they had some really obscure language
where no one posts any open source API's.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What To Do?&lt;/h2&gt;
&lt;p&gt;My direct advice was to read Tulach and create a big spreadsheet
ranking their code against each principle that Tulach provides.&lt;/p&gt;
&lt;p&gt;After thinking about it, I realize I should have asked what API's
they were currently using and how their proposed new code stacked up
against the existing language and framework they already had.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="API Design"></category></entry><entry><title>RDBMS Issues and Concerns</title><link href="https://slott56.github.io/2009_09_08-rdbms_issues_and_concerns.html" rel="alternate"></link><published>2009-09-08T15:10:00-04:00</published><updated>2009-09-08T15:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-08:/2009_09_08-rdbms_issues_and_concerns.html</id><summary type="html">&lt;p&gt;Check out this blog post:
&lt;a class="reference external" href="http://cacm.acm.org/browse-by-subject/data-storage-and-retrieval/32212-the-end-of-a-dbms-era-might-be-upon-us/fulltext"&gt;http://cacm.acm.org/browse-by-subject/data-storage-and-retrieval/32212-the-end-of-a-dbms-era-might-be-upon-us/fulltext&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first issue is that the RDBMS code base in ancient. The second
issue is that we keep pushing the envelope on the RDBMS model;
examples include OLAP and RDF triple-stores.&lt;/p&gt;
&lt;p&gt;Some folks want to say &amp;quot;reports …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this blog post:
&lt;a class="reference external" href="http://cacm.acm.org/browse-by-subject/data-storage-and-retrieval/32212-the-end-of-a-dbms-era-might-be-upon-us/fulltext"&gt;http://cacm.acm.org/browse-by-subject/data-storage-and-retrieval/32212-the-end-of-a-dbms-era-might-be-upon-us/fulltext&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first issue is that the RDBMS code base in ancient. The second
issue is that we keep pushing the envelope on the RDBMS model;
examples include OLAP and RDF triple-stores.&lt;/p&gt;
&lt;p&gt;Some folks want to say &amp;quot;reports of the death of the RDBMS are
premature.&amp;quot;&lt;/p&gt;
&lt;p&gt;Like COBOL, the relational model, and words like &amp;quot;DASD&amp;quot;, some
technologies will be with us for decades after their useful life.&lt;/p&gt;
&lt;p&gt;The decline of COBOL and the Relational Database will be protracted,
painful, inevitable and asymptotic with actual death. The old
one-size-fits-all COBOL is being replaced by many other languages.
Similarly, the one-size-fits-all RDBMS will be fragmented into more
specialized data stores. Further, legacy technology never completely
goes away.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="olap-and-rdf-are-not-relational-so-it-39-s-no-su"&gt;
&lt;h2&gt;OLAP and RDF are not relational, so it&amp;amp;#39;s no su...&lt;/h2&gt;
&lt;p&gt;Bill Karwin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-08 16:19:48.382000-04:00&lt;/p&gt;
&lt;p&gt;OLAP and RDF are not relational, so it's no surprise that implementing
them in an RDBMS is painful. It'd be like designing an OO application in
a non-OO language like C. Is that C's fault? Does that mean C doesn't
still do some things well?&lt;/p&gt;
&lt;p&gt;The debate about the death of RDBMS is based on a zero-sum game view of
technology. This view is needless. Instead, let's use different tools
where they give the most benefit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-m-not-sure-the-relational-model-can-be-consi"&gt;
&lt;h2&gt;I&amp;amp;#39;m not sure the relational model can be consi...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-09-09 08:25:06.535000-04:00&lt;/p&gt;
&lt;p&gt;I'm not sure the relational model can be considered &amp;quot;legacy technology&amp;quot;
like COBOL et al. Sure, most relational databases are pretty long in the
teeth (and SQL is a huge warty mess), but there's something pretty
timeless about mathematical logic and set theory. I think the relational
model just needs a facelift, personally.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RDBMS"></category><category term="SQL"></category><category term="COBOL"></category></entry><entry><title>Macintosh Support</title><link href="https://slott56.github.io/2009_09_04-macintosh_support.html" rel="alternate"></link><published>2009-09-04T07:10:00-04:00</published><updated>2009-09-04T07:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-09-04:/2009_09_04-macintosh_support.html</id><content type="html">&lt;p&gt;A handy CNET review site: &lt;a class="reference external" href="http://reviews.cnet.com/macfixit/"&gt;http://reviews.cnet.com/macfixit/&lt;/a&gt;&lt;/p&gt;
</content><category term="Technologies"></category><category term="macintosh"></category><category term="macosx"></category></entry><entry><title>SQL Injection Attacks the Top Vulnerability</title><link href="https://slott56.github.io/2009_08_30-sql_injection_attacks_the_top_vulnerability.html" rel="alternate"></link><published>2009-08-30T08:33:00-04:00</published><updated>2009-08-30T08:33:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-30:/2009_08_30-sql_injection_attacks_the_top_vulnerability.html</id><summary type="html">&lt;p&gt;This is an amazing quote: &amp;quot;We see SQL injection as the top attack
technique on the Web&amp;quot;.&lt;/p&gt;
&lt;p&gt;See ComputerWorld's &lt;a class="reference external" href="http://www.computerworld.com/s/article/print/9136805/SQL_injection_attacks_led_to_Heartland_Hannaford_breaches_?taxonomyName=Security&amp;amp;taxonomyId=17"&gt;SQL Injection Attacks Lead to Heartland, Hannaford Breaches&lt;/a&gt;
for more on this topic.&lt;/p&gt;
&lt;p&gt;I'm amazed because SQL injection is entirely a preventable bug. Yet,
it's the top attack technique.&lt;/p&gt;
&lt;p&gt;That's an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an amazing quote: &amp;quot;We see SQL injection as the top attack
technique on the Web&amp;quot;.&lt;/p&gt;
&lt;p&gt;See ComputerWorld's &lt;a class="reference external" href="http://www.computerworld.com/s/article/print/9136805/SQL_injection_attacks_led_to_Heartland_Hannaford_breaches_?taxonomyName=Security&amp;amp;taxonomyId=17"&gt;SQL Injection Attacks Lead to Heartland, Hannaford Breaches&lt;/a&gt;
for more on this topic.&lt;/p&gt;
&lt;p&gt;I'm amazed because SQL injection is entirely a preventable bug. Yet,
it's the top attack technique.&lt;/p&gt;
&lt;p&gt;That's an amazing indictment of the programming profession. There are
so many shoddy, incompetent programmers (and shoddy, incompetent
customers of programming services) that SQL injection is the top
attack technique.&lt;/p&gt;
&lt;p&gt;I almost forgot the obligatory XKCD comic: &lt;a class="reference external" href="http://xkcd.com/327/"&gt;http://xkcd.com/327/&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="xkcd-should-print-that-comic-on-mousepads-and-coff"&gt;
&lt;h2&gt;XKCD should print that comic on mousepads and coff...&lt;/h2&gt;
&lt;p&gt;Bill Karwin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-30 11:52:39.696000-04:00&lt;/p&gt;
&lt;p&gt;XKCD should print that comic on mousepads and coffee mugs so team leads
can hand them out to every developer. Keep SQL injection at the
forefront of people's minds!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="security"></category></entry><entry><title>Code Kata Resources (Updated)</title><link href="https://slott56.github.io/2009_08_27-code_kata_resources_updated.html" rel="alternate"></link><published>2009-08-27T08:53:00-04:00</published><updated>2009-08-27T08:53:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-27:/2009_08_27-code_kata_resources_updated.html</id><summary type="html">&lt;p&gt;I've got a ton of exercises in the &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/index.html"&gt;Building
Skills&lt;/a&gt; books.
Specifically, my &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/oodesign.html#book-oodesign"&gt;OO
Design&lt;/a&gt;
book is based on my own personal Code Kata exercises.&lt;/p&gt;
&lt;p&gt;Plus there's the established Code Kata resources. The
&lt;a class="reference external" href="http://codekata.pragprog.com/"&gt;CodeKata&lt;/a&gt; page, Mark Needham's
blog posting on
&lt;a class="reference external" href="http://www.markhneedham.com/blog/tag/code-kata/"&gt;code-kata&lt;/a&gt;,
Rizky Farhan's &lt;a class="reference external" href="http://frizky.wikidot.com/projects:code-kata"&gt;Collection of Software
Projects&lt;/a&gt;,
jp.hamilton's &lt;a class="reference external" href="http://www.jphamilton.net/post/Coding-Dojo-and-Code-Kata-Resources.aspx"&gt;Code …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've got a ton of exercises in the &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/index.html"&gt;Building
Skills&lt;/a&gt; books.
Specifically, my &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/oodesign.html#book-oodesign"&gt;OO
Design&lt;/a&gt;
book is based on my own personal Code Kata exercises.&lt;/p&gt;
&lt;p&gt;Plus there's the established Code Kata resources. The
&lt;a class="reference external" href="http://codekata.pragprog.com/"&gt;CodeKata&lt;/a&gt; page, Mark Needham's
blog posting on
&lt;a class="reference external" href="http://www.markhneedham.com/blog/tag/code-kata/"&gt;code-kata&lt;/a&gt;,
Rizky Farhan's &lt;a class="reference external" href="http://frizky.wikidot.com/projects:code-kata"&gt;Collection of Software
Projects&lt;/a&gt;,
jp.hamilton's &lt;a class="reference external" href="http://www.jphamilton.net/post/Coding-Dojo-and-Code-Kata-Resources.aspx"&gt;Code Kata
Resources&lt;/a&gt;.
The &lt;a class="reference external" href="http://codingdojo.org/"&gt;Coding Dojo&lt;/a&gt; page (which suffers from
showing no usable URL's -- what a mistake.)&lt;/p&gt;
&lt;p&gt;Plus there are the random problem sites: &lt;a class="reference external" href="http://projecteuler.net/"&gt;Project
Euler&lt;/a&gt;, &lt;a class="reference external" href="http://www.topcoder.com/"&gt;Top
Coder&lt;/a&gt;,
&lt;a class="reference external" href="http://uva.onlinejudge.org/"&gt;UVa&lt;/a&gt;,
&lt;a class="reference external" href="http://www.spoj.pl/"&gt;SPOJ&lt;/a&gt;, Google
&lt;a class="reference external" href="http://code.google.com/codejam/"&gt;CodeJam&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've done a few (63) Project Euler problems (I got stumped by problem
69). Another 37 and I'd be at level 3.&lt;/p&gt;
&lt;p&gt;The question isn't &amp;quot;where are the problems?&amp;quot; The question is &amp;quot;Are
these good Code Kata problems?&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="this-is-awesome-thanks-for-posting-all-these-pote"&gt;
&lt;h2&gt;This is awesome, thanks for posting all these pote...&lt;/h2&gt;
&lt;p&gt;Ryan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-20 00:20:48.286000-04:00&lt;/p&gt;
&lt;p&gt;This is awesome, thanks for posting all these potential Katas!
I think part of what makes a good Kata is not necessarily the problem,
but the attitude you take to solving it.&lt;/p&gt;
&lt;p&gt;For example, a problem that has a difficult domain to understand or
create a solution for (e.g. a Project Euler brain teaser) covers a
different set of skills then something like making a wiki using werkzeug
and AJAX, or focusing on TDD technique with bowling scores.&lt;/p&gt;
&lt;p&gt;As long as you have a focus on what skill you're trying to practice and
the problem offers enough opportunity to practice that skill I think it
makes a good Kata.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-think-one-definition-of-a-good-kata-is-one-which"&gt;
&lt;h2&gt;I think one definition of a good kata is one which...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-24 23:22:45.929000-04:00&lt;/p&gt;
&lt;p&gt;I think one definition of a good kata is one which takes you outside
your comfort zone, to stretch your abilities.&lt;/p&gt;
&lt;p&gt;I think we will continue to see more katas, Dave Thomas came to the idea
while working on an algorithm and trying many different types of
approaches. So software craftsman will continue to stumble upon these
katas (typically within their problem domain) and hopefully publish
their findings.&lt;/p&gt;
&lt;p&gt;I try to point this out to fellow co-workers when they get caught up on
something for a period of time unexpectedly .. hmmm, is there a code
kata in there?&lt;/p&gt;
&lt;p&gt;Great collection
I have tried to do the same : htt...
-----------------------------------------------------&lt;/p&gt;
&lt;p&gt;Gaurav Aroraa&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-01-02 15:25:28.227000-05:00&lt;/p&gt;
&lt;p&gt;Great collection
I have tried to do the same : &lt;a class="reference external" href="http://tddkatas.codeplex.com/"&gt;http://tddkatas.codeplex.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="code-kata"></category><category term="software process improvement"></category></entry><entry><title>Meetings</title><link href="https://slott56.github.io/2009_08_26-meetings.html" rel="alternate"></link><published>2009-08-26T22:33:00-04:00</published><updated>2009-08-26T22:33:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-26:/2009_08_26-meetings.html</id><summary type="html">&lt;p&gt;I found this note while cleaning up. I think it's a summary of John
Cleese's short movie &amp;quot;&lt;a class="reference external" href="http://www.imdb.com/title/tt0295434/"&gt;Meetings Bloody
Meetings&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Plan&lt;/strong&gt;. Why are we meeting? What's the purpose? What are the
subjects?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inform&lt;/strong&gt;. Tell the attendees what, why and the expected outcome.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prepare&lt;/strong&gt;. Create an agenda, with a time line …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I found this note while cleaning up. I think it's a summary of John
Cleese's short movie &amp;quot;&lt;a class="reference external" href="http://www.imdb.com/title/tt0295434/"&gt;Meetings Bloody
Meetings&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Plan&lt;/strong&gt;. Why are we meeting? What's the purpose? What are the
subjects?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inform&lt;/strong&gt;. Tell the attendees what, why and the expected outcome.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prepare&lt;/strong&gt;. Create an agenda, with a time line, and the items to
be covered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Structure&lt;/strong&gt;. If the purpose is to make a decision, this involves
presentation of evidence, interpretation of the evidence and a
decision. If the purpose is to inform, then present the
information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summarize and Record&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hear complaints about time wasted in meetings. This complaint is
absolutely justified. I've wasted a lot of my professional career in
dumb meetings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Out of Touch Management&lt;/strong&gt;. The out-of-touch manager requires long
meetings in which each direct report provides a complete status
report. The all-hands meeting appears to be the only time the
out-of-touch manager ever talks to anyone. Consequently, it devolves
to a sequence of one-on-one meetings which the rest of the team is
forced to attend.&lt;/p&gt;
&lt;p&gt;If the goal is for many people to inform one person, those
conversations don't require a meeting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Going Through The Motions&lt;/strong&gt;. The going-through-the-motions manager
is aware that a staff meeting is expected, but has nothing really to
say or do. These meetings often devolve into awkward silences as
open-ended questions are thrown out to try and stimulate some
interaction.&lt;/p&gt;
&lt;p&gt;If there's no goal (no decision, no information) then there's no
purpose for the meeting.&lt;/p&gt;
&lt;div class="section" id="best-practice"&gt;
&lt;h2&gt;Best Practice&lt;/h2&gt;
&lt;p&gt;In the days before agility, I worked with two project managers who
gathered information in one-on-one meetings. These are separate
projects for separate customers. But the same best practice.&lt;/p&gt;
&lt;p&gt;The PM would stop by your cube, figure out what you were doing, what
you needed, what you were planning to accomplish. Then, at the
ever-so-brief staff meeting, a few key interactions among the staff
would be lifted up from all those one-on-one meetings.&lt;/p&gt;
&lt;p&gt;Let's review the brilliance of these two PM's.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;They stopped by your cube. They did not play the power game and
make you come to their office. They stopped by. In later years
this was called &amp;quot;&lt;a class="reference external" href="http://1000ventures.com/business_guide/mgmt_mbwa.html"&gt;Management by Walking
Around&lt;/a&gt;&amp;quot;
-- something hailed as brilliant. These PM's just did it.&lt;/li&gt;
&lt;li&gt;They hung around long enough to actually get what was going on.
They didn't waste time asking you to write and email status to
them. They asked, listened, understood and summarized your status
for you.&lt;/li&gt;
&lt;li&gt;They recognized the needs for interaction and made them happen.
The status meetings were like &lt;a class="reference external" href="http://www.mountaingoatsoftware.com/daily-scrum"&gt;daily scrum
meetings&lt;/a&gt;.
Since they were weekly, they weren't as brief, but they were just
as focused. No long status reports. No long conversations.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="objections"&gt;
&lt;h2&gt;Objections&lt;/h2&gt;
&lt;p&gt;Some managers don't have time to sit in everyone's cubicle. This
overstates their value as managers by understating the huge cost
of wasting everyone's time in serial one-on-one's done in a
conference room. 12 direct reports means 13 man-hours wasted in a
one hour meeting.&lt;/p&gt;
&lt;p&gt;Some managers don't have time to write status reports. Instead
they forward emails all day.&lt;/p&gt;
&lt;p&gt;It's probably better to get off the email treadmill. Get status,
write short, to-the-point status reports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="focus"&gt;
&lt;h2&gt;Focus&lt;/h2&gt;
&lt;p&gt;Developers (DBA's, Sys Admins, all technical folk) live in a world
of technology delivery.&lt;/p&gt;
&lt;p&gt;Mangers, however, live in a world of budgets, status reports, and
weird exercises in foretelling the future. (&amp;quot;How long will it
take? How much will it cost?&amp;quot;)&lt;/p&gt;
&lt;p&gt;There's no good reason to impose the world of status reporting and
fortune-telling on technical people. There are, however, lots of
bad reasons for imposing unplanned, unprepared and unstructured
meetings on a team that would rather be building product than
talking about building product.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="consequently-it-devolves-to-a-sequence-of-o"&gt;
&lt;h2&gt;&amp;quot;Consequently, it devolves to a sequence of o...&lt;/h2&gt;
&lt;p&gt;DanDan&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2010-07-27 10:42:14.528000-04:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Consequently, it devolves to a sequence of one-on-one meetings which
the rest of the team is forced to attend.&amp;quot;&lt;/p&gt;
&lt;p&gt;This made me smile...&lt;/p&gt;
&lt;p&gt;Until I realized that the real tragedy is how widely disseminated this
kind of mismanagement is.&lt;/p&gt;
&lt;p&gt;Great post.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="agile"></category><category term="software process improvement"></category><category term="scrum"></category></entry><entry><title>Building Skills Books Toolset (Update)</title><link href="https://slott56.github.io/2009_08_20-building_skills_books_toolset_update.html" rel="alternate"></link><published>2009-08-20T07:58:00-04:00</published><updated>2009-08-20T07:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-20:/2009_08_20-building_skills_books_toolset_update.html</id><summary type="html">&lt;p&gt;I wrote the first &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/index.html"&gt;Building
Skills&lt;/a&gt; books using
&lt;a class="reference external" href="http://www.apple.com/support/appleworks/"&gt;Appleworks&lt;/a&gt;. It wasn't too
bad to organize the styles around basic semantics of the subject area.
It's an easy, productive writing environment. Except, of course, for
internal cross-references, indexes, and tables of contents.&lt;/p&gt;
&lt;p&gt;I converted to &lt;a class="reference external" href="http://www.docbook.org/"&gt;DocBook XML&lt;/a&gt; markup. The
conversion was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wrote the first &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/index.html"&gt;Building
Skills&lt;/a&gt; books using
&lt;a class="reference external" href="http://www.apple.com/support/appleworks/"&gt;Appleworks&lt;/a&gt;. It wasn't too
bad to organize the styles around basic semantics of the subject area.
It's an easy, productive writing environment. Except, of course, for
internal cross-references, indexes, and tables of contents.&lt;/p&gt;
&lt;p&gt;I converted to &lt;a class="reference external" href="http://www.docbook.org/"&gt;DocBook XML&lt;/a&gt; markup. The
conversion was arduous, but well worth it. I got better semantic
markup. I used the &lt;a class="reference external" href="http://www.sagehill.net/docbookxsl/"&gt;DocBook
XSL&lt;/a&gt; tools to convert to HTML
both as a single document, and a chunked presentation. It worked out
pretty well.&lt;/p&gt;
&lt;p&gt;Two things don't work out well. First, the FOP processing is shaky.
The books are big, and rather complex, with a fair number of embedded
fonts. I have been unable to get the embedded fonts to work correctly
with FOP.&lt;/p&gt;
&lt;p&gt;The second thing that doesn't work out well is the language-specific
markup. DocBook is biased toward C. There aren't enough tags for
Python markup (module and library tags are missing, for example) and
the syntax-oriented statement, class and function markup is all over
the map in DocBook.&lt;/p&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;My goal is to have the books in four formats: XML, single HTML file,
chunked HTML and PDF. Of these, the single HTML is the least
appealing. The chunked HTML is a great carrier for Adsense ads. The
PDF is what I should be selling.&lt;/p&gt;
&lt;p&gt;I don't mind writing in XML. Using XMLMind
&lt;a class="reference external" href="http://www.xmlmind.com/xmleditor/"&gt;XMLEditor&lt;/a&gt; is generally pretty
nice. Running the XSL-based tool chain to convert to HTML, and
chunked HTML is easy.&lt;/p&gt;
&lt;p&gt;Currently, I'm using FireFox to create the PDF. It's quick, but
dirty. I'm not sure how many of the print-formatting CSS options
FireFox can handle, so I haven't really customized the CSS for
printing. However, the FireFox PDF has properly embedded fonts and
cross-reference links.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="choices"&gt;
&lt;h2&gt;Choices&lt;/h2&gt;
&lt;p&gt;Apple's &lt;a class="reference external" href="http://www.apple.com/iwork/pages/"&gt;Pages&lt;/a&gt; does a lot.
It's a very nice product. But I'm not sure that the PDF and Chunked
HTML will work out all that well.&lt;/p&gt;
&lt;p&gt;The DocBook tool chain has problems identified above. The PDF output
doesn't work because it overwhelms FOP.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Currently, I use FireFox to create PDF's. I could dress up the CSS
to make it look a little better.&lt;/li&gt;
&lt;li&gt;An alternative is to use &lt;a class="reference external" href="http://www.xhtml2pdf.com/"&gt;Pisa&lt;/a&gt; to
transform the XHTML into PDF. I started using &lt;a class="reference external" href="https://xhtmlrenderer.dev.java.net/"&gt;Flying
Saucer&lt;/a&gt; on &lt;a class="reference external" href="https://slott56.github.io/2009_07_11-flying_saucer.html"&gt;another
project&lt;/a&gt;
and the XHTML to PDF idea has some appeal. This requires debugging
the print-media CSS, which doesn't seem too bad.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt;
can have almost all the &lt;a class="reference external" href="https://slott56.github.io/2009_06_24-semantic_markup_rst_vs_xml.html"&gt;semantic
richness&lt;/a&gt;
of XML. I've decided to redo Building Skills in Programming entirely
in &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, using RST. This has the
advantage of being Python-specific, making heavy use of
&lt;a class="reference external" href="http://pygments.org/"&gt;pygments&lt;/a&gt; for syntax coloring.&lt;/p&gt;
&lt;p&gt;Also, I could stick with XML and use a different tool-chain to go
from DocBook XML LaTeX. The
&lt;a class="reference external" href="http://dblatex.sourceforge.net/"&gt;dblatex&lt;/a&gt; package may do this
nicely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tradeoffs"&gt;
&lt;h2&gt;Tradeoffs&lt;/h2&gt;
&lt;p&gt;If I switch to Sphinx, editing is much easier. The source is plain
text.&lt;/p&gt;
&lt;p&gt;The chunked HTML created by Sphinx is outstanding. It's far better
than the DocBook HTML. It's much easier to customize than the DocBook
XSL, allowing use of Adsense ads with relatively little work.&lt;/p&gt;
&lt;p&gt;On the other hand, to produce PDF, I have to go through LaTeX. This
means that I have to find a nice LaTeX to PDF tool.&lt;/p&gt;
&lt;p&gt;Currently, Sphinx doesn't easily produce a single HTML file. There
may be ways around this; perhaps by using an alternate `..
toctree::` directive. But this is also a low-priority requirement,
so this may have to be dropped in favor of a better-looking PDF page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="latex-to-pdf"&gt;
&lt;h2&gt;LaTeX to PDF&lt;/h2&gt;
&lt;p&gt;A Google search for &amp;quot;mac os x latex to pdf&amp;quot; turns up some interesting
results.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.math.toronto.edu/joel/tex/"&gt;http://www.math.toronto.edu/joel/tex/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.math.wisc.edu/~andrejko/resources/LaTex-on-Mac-OSX.html"&gt;http://www.math.wisc.edu/~andrejko/resources/LaTex-on-Mac-OSX.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list of references makes it look appealing to start with
&lt;a class="reference external" href="http://www.uoregon.edu/%7Ekoch/texshop/texshop.html"&gt;TeXShop&lt;/a&gt; and
seeing if the LaTeX output from Sphinx can be used to produce PDF.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://ii2.sourceforge.net/tex-index.html"&gt;TeXLive&lt;/a&gt;
distribution includes a basic pdfTeX utility that might emit a nice
PDF from the Sphinx LaTeX output.&lt;/p&gt;
&lt;p&gt;Additionally, there is &lt;a class="reference external" href="http://itexmac.sourceforge.net/"&gt;iTeXMac&lt;/a&gt;,
which may also convert my Sphinx LaTeX to PDF.&lt;/p&gt;
&lt;p&gt;These, however, seem to be largely WYSIWYG editing. While editing
LaTeX isn't too bad, I want to work from a single RST source.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-solutions"&gt;
&lt;h2&gt;Python Solutions&lt;/h2&gt;
&lt;p&gt;The &amp;quot;python latex to pdf&amp;quot; Google search turns up the following
projects for doing LaTeX processing in Python. These look very nice.
In particular, they get away from manual editing of LaTeX.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plastex.sourceforge.net/"&gt;plasTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.tug.org/applications/pdftex/"&gt;pdfTeX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="better-still"&gt;
&lt;h3&gt;Better Still&lt;/h3&gt;
&lt;p&gt;Finally, I located the following:
&lt;a class="reference external" href="http://jimmyg.org/blog/2009/sphinx-pdf-generation-with-latex.html"&gt;http://jimmyg.org/blog/2009/sphinx-pdf-generation-with-latex.html&lt;/a&gt;.
This makes it clear that Sphinx expects
&lt;a class="reference external" href="http://www.tug.org/texlive/"&gt;TeXLive&lt;/a&gt;. This leads me to
&lt;a class="reference external" href="http://www.tug.org/mactex/"&gt;MacTeX&lt;/a&gt;, which -- it appears -- is
what Sphinx expects.&lt;/p&gt;
&lt;p&gt;Sphinx generates a makefile to create PDF from the LaTeX. Hopefully,
this is not highly Linux-specific and will use the TeXlive
distribution on Mac OS X.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-feature"&gt;
&lt;h3&gt;Bonus Feature&lt;/h3&gt;
&lt;p&gt;Switching to LaTeX may also give me a better way to handle the
formulas in the exercise sections. Currently, I have to write them
and save the images. I don't know how many different equation editors
I've used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-rst-to-pdf"&gt;
&lt;h3&gt;Alternative RST to PDF&lt;/h3&gt;
&lt;p&gt;There's an &lt;a class="reference external" href="http://code.google.com/p/rst2pdf/"&gt;rst2pdf&lt;/a&gt; tool that
may make it possible to go from Sphinx RST directly to PDF.
Hopefully, this honors all the Sphinx extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="why-the-fear-of-latex-as-far-as-markup-languages"&gt;
&lt;h2&gt;Why the fear of Latex?  As far as markup languages...&lt;/h2&gt;
&lt;p&gt;Benjamin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-19 00:24:58.745000-04:00&lt;/p&gt;
&lt;p&gt;Why the fear of Latex? As far as markup languages go, it's pretty damned
solid, especially if you want to use anything but the simplest
equations. In the world of mathematical publishing, it's the de facto
standard, and for good reason.&lt;/p&gt;
&lt;p&gt;Considering that you're actually contemplating messing with CSS in order
to get Firefox to produce pdfs, using a markup language designed to
produce publishable quality documents and a tool designed to convert
those documents to pdf while maintaining that quality sounds like the
simpler and saner solution to me. In fact, I wonder if a better solution
for you, overall, would be to find some software that builds
satisfactory html from latex. Then again, my background is as a
sys-admin, so we may have differing opinions of 'satisfactory html.' (I
suspect dvi2html's method of producing images of the text wouldn't quite
cut it for your purposes.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="maybe-you-can-use-sphinx-for-pdf-generation-withou"&gt;
&lt;h2&gt;Maybe you can use Sphinx for pdf generation withou...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-19 07:06:41.459000-04:00&lt;/p&gt;
&lt;p&gt;Maybe you can use Sphinx for pdf generation without latex.&lt;/p&gt;
&lt;p&gt;Roberto Alsina's rst2pdf can be used as pdf producer in sphinx, as he
wrote in hes blog before. Maybe it's not mature enough at this moment,
but if you cooperate with him, he can get a good test material (your
books) to work with :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="pdf"></category><category term="RST"></category><category term="xml"></category><category term="LaTeX"></category><category term="xhtml"></category></entry><entry><title>Code Dojo and OO Design -- OO Design Dojo</title><link href="https://slott56.github.io/2009_08_14-code_dojo_and_oo_design_oo_design_dojo.html" rel="alternate"></link><published>2009-08-14T14:58:00-04:00</published><updated>2009-08-14T14:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-14:/2009_08_14-code_dojo_and_oo_design_oo_design_dojo.html</id><summary type="html">&lt;p&gt;Code Dojo, to an extent, includes a fair amount of OO Design.&lt;/p&gt;
&lt;p&gt;I've been pondering ways to help folks who clearly have no design
skills at all. I've read their code. It's appalling.&lt;/p&gt;
&lt;p&gt;Toward that end, I looked at some of the Code Kata links: the
&lt;a class="reference external" href="http://codekata.pragprog.com/"&gt;CodeKata&lt;/a&gt; page, Mark Needham's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Code Dojo, to an extent, includes a fair amount of OO Design.&lt;/p&gt;
&lt;p&gt;I've been pondering ways to help folks who clearly have no design
skills at all. I've read their code. It's appalling.&lt;/p&gt;
&lt;p&gt;Toward that end, I looked at some of the Code Kata links: the
&lt;a class="reference external" href="http://codekata.pragprog.com/"&gt;CodeKata&lt;/a&gt; page, Mark Needham's
blog posting on
&lt;a class="reference external" href="http://www.markhneedham.com/blog/tag/code-kata/"&gt;code-kata&lt;/a&gt;,
Rizky Farhan's &lt;a class="reference external" href="http://frizky.wikidot.com/projects:code-kata"&gt;Collection of Software
Projects&lt;/a&gt;,
jp.hamilton's &lt;a class="reference external" href="http://www.jphamilton.net/post/Coding-Dojo-and-Code-Kata-Resources.aspx"&gt;Code Kata
Resources&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They asked for code samples to act as best practices. I suggested
to our sales folks that code samples and simple code &amp;quot;best
practices&amp;quot; were completely inadequate. They need serious remedial
skill-building in programming.&lt;/p&gt;
&lt;p&gt;What started to percolate was organizing a periodic &amp;quot;code dojo&amp;quot;
meeting to help them build skills without the onerous &amp;quot;teaching&amp;quot;
(or worse, &amp;quot;lecturing&amp;quot;) mode. Teaching OO design to working
programmers is generally hard. Many programmers seem to have a
starting point that isn't based on the requirements or any kind of
rational design. It appears that many programmers start with a
pretty random boilerplate program.&lt;/p&gt;
&lt;div class="section" id="teaching-java-to-cobol-programmers"&gt;
&lt;h2&gt;Teaching Java to COBOL Programmers&lt;/h2&gt;
&lt;p&gt;I remember struggling with COBOL programmers. Back in '02 (before
Code Dojo existed), I had no real way to educate folks except a
lot of one-on-one conversations. I tried to schedule code
walkthroughs, but the project manager didn't like the idea, and
cancelled them.&lt;/p&gt;
&lt;p&gt;I was allowed a quick overview of J2EE concepts and how the web
side of our application was going to be assembled, but that was
it.&lt;/p&gt;
&lt;p&gt;Even covering basic J2EE servlet concepts become a FAIL because
the legacy web framework was a JSP hack-around. It didn't work
well, couldn't easily be explained (or used). But it was
entrenched, and therefore, had priority in everyone's mind.&lt;/p&gt;
&lt;p&gt;No matter how many times I tried to review basic OO concepts, and
some design approaches, there were problems.&lt;/p&gt;
&lt;p&gt;Everyone wanted to start from &amp;quot;the top&amp;quot;, with a &amp;quot;main program&amp;quot;
that &amp;quot;simply read and wrote files.&amp;quot; COBOL concepts. Java File I/O
has a subtle complexity with lots of nested constructors. No one
likes to see that as a beginner. Also, file parsing is -- in
reality -- fairly hard, but COBOL provides a handy optimization
via a fixed format record layout and lots of implicit conversions.&lt;/p&gt;
&lt;p&gt;We're writing servlets that query a database. There was no mapping
to the COBOL concepts everyone wanted to start with. A few
lectures and presentations aren't helpful. Had I but known about
Code Dojo, I would have suggested that. It might have worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-getting-started-problem"&gt;
&lt;h2&gt;The &amp;quot;Getting Started&amp;quot; Problem&lt;/h2&gt;
&lt;p&gt;Some Stack Overflow questions on design are really questions about
&amp;quot;getting started&amp;quot;. These cause me to wonder how to help people who
are sure they know the language and syntax, but can't seem to get
started writing anything useful &amp;quot;from scratch&amp;quot; (or &lt;em&gt;de novo&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;I've heard from people have have UML class diagrams and still
claim they don't know what to do next. They can't -- for some
reason -- get started.&lt;/p&gt;
&lt;p&gt;I think this is related. They have a limited, fixed set of
programming templates. Learning a new language does not fit their
limited set of templates. Perhaps Code Dojo could help these folks
gain a new set of templates.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="thanks-for-the-code-kata-links"&gt;
&lt;h2&gt;Thanks for the code-kata links&lt;/h2&gt;
&lt;p&gt;Montecristo&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-12-15 03:51:15.528000-05:00&lt;/p&gt;
&lt;p&gt;Thanks for the code-kata links&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="code-kata"></category><category term="object-oriented design"></category></entry><entry><title>The E. W. Dijkstra Archive (Update)</title><link href="https://slott56.github.io/2009_08_06-the_e_w_dijkstra_archive_update.html" rel="alternate"></link><published>2009-08-06T13:08:00-04:00</published><updated>2009-08-06T13:08:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-06:/2009_08_06-the_e_w_dijkstra_archive_update.html</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="http://www.cs.utexas.edu/~EWD/welcome.html"&gt;E. W. Dijkstra&lt;/a&gt;
Archive is a collection of over 1,000 manuscripts that EWD sent around
during his career.&lt;/p&gt;
&lt;p&gt;This Stack Overflow question (&amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/1229611/explaining-software-development-to-management/1229660#1229660"&gt;explaining software development to
management&lt;/a&gt;&amp;quot;)
had a really brilliant comment on one of the answers.&lt;/p&gt;
&lt;blockquote&gt;
Analogies are always leaky, and you will end up with proposed …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="http://www.cs.utexas.edu/~EWD/welcome.html"&gt;E. W. Dijkstra&lt;/a&gt;
Archive is a collection of over 1,000 manuscripts that EWD sent around
during his career.&lt;/p&gt;
&lt;p&gt;This Stack Overflow question (&amp;quot;&lt;a class="reference external" href="http://stackoverflow.com/questions/1229611/explaining-software-development-to-management/1229660#1229660"&gt;explaining software development to
management&lt;/a&gt;&amp;quot;)
had a really brilliant comment on one of the answers.&lt;/p&gt;
&lt;blockquote&gt;
Analogies are always leaky, and you will end up with proposed
solutions that solve the analogy, not your actual problem. Just
explain the problem in simple terms without comparing it to
anything physical. Read Edsger Dijkstra's famous 1036 and 854 for
an insight into the horrors thinkign by analogy is inflicting upon
us&lt;/blockquote&gt;
&lt;div class="section" id="follow-up-reading"&gt;
&lt;h2&gt;Follow-up Reading&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD854.html"&gt;EWD 854&lt;/a&gt;,
&amp;quot;The fruits of misunderstanding&amp;quot;. &amp;quot;when faced with something new and
unfamiliar we try to relate it to what we are familiar with&amp;quot;. &amp;quot;a
program is an abstract mechanism&amp;quot;. &amp;quot;the mechanism being abstract, its
production is subsumed in its design. In this respect a program is
like a poem: you cannot write a poem without writing it. Yet people
talk about programming as if it were a production process and measure
'programmer productivity' in terms of 'number of lines of code
produced'.&amp;quot;&lt;/p&gt;
&lt;p&gt;Aha. Software production is subsumed in its design. There is no
&amp;quot;production&amp;quot; other than design. We design at a high level. We design
code. When we've designed the code, we're done. There is no further
development effort.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD10xx/EWD1036.html"&gt;EWD 1036&lt;/a&gt;,
&amp;quot;On the cruelty of really teaching computing science&amp;quot;. &amp;quot;From a bit to
a few hundred megabytes, from a microsecond to a half an hour of
computing confronts us with completely baffling ratio of
10&lt;sup&gt;9&lt;/sup&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Love that cautionary note. Computer science forces us to confront
layers of meaning that have a huge scope.&lt;/p&gt;
&lt;p&gt;I'll have to work my way through the archive. It will probably take
years to read through all the manuscripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-i-ve-got-one-of-those"&gt;
&lt;h2&gt;Wait -- I've Got One Of Those&lt;/h2&gt;
&lt;p&gt;Back in the 70's, the undergrads at Syracuse University were given
copies of
&lt;a class="reference external" href="http://www.cs.utexas.edu/users/EWD/ewd03xx/EWD316.PDF"&gt;EWD316&lt;/a&gt;.
At the time, it was just a paper on the art of programming. It sat in
a file drawer for decades. I unearthed it recently.&lt;/p&gt;
&lt;p&gt;At the time, EWD316 looked like a course number. I assumed -- wrongly
-- that it was notes from some other school of computer science.
Turns out, it was one of those EWD missives. It had found it's way
into the hands of the CS Faculty at SU. From there, a copy fell into
my hands. Not until recently (30+ years later) did I realize exactly
what it was a copy of.&lt;/p&gt;
&lt;p&gt;It's densely-packed stuff. I think &lt;a class="reference external" href="http://www.amazon.com/Discipline-Programming-Prentice-Hall-Automatic-Computation/dp/013215871X"&gt;A Discipline of
Programming&lt;/a&gt;
is a little bit easier to work with. Further, Gries' &lt;a class="reference external" href="http://books.google.com/books?id=vv5pot-ySsEC&amp;amp;dq=gries+science+of+programming&amp;amp;printsec=frontcover&amp;amp;source=bn&amp;amp;hl=en&amp;amp;ei=8w17SszhNMe3twfr64HtAQ&amp;amp;sa=X&amp;amp;oi=book_result&amp;amp;ct=result&amp;amp;resnum=4#v=onepage&amp;amp;q=&amp;amp;f=false"&gt;The Science of
Programming&lt;/a&gt;
is easier still.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="object-oriented design"></category><category term="defensive programming"></category></entry><entry><title>No Brown M&amp;M's -- A Brilliant Compliance Test</title><link href="https://slott56.github.io/2009_08_06-no_brown_mms_a_brilliant_compliance_test.html" rel="alternate"></link><published>2009-08-06T09:31:00-04:00</published><updated>2009-08-06T09:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-06:/2009_08_06-no_brown_mms_a_brilliant_compliance_test.html</id><summary type="html">&lt;p&gt;My son's a musician, and one of the standard jokes boils down to the
phrase &amp;quot;no brown M&amp;amp;M's&amp;quot;. They use it as a catch-all phrase for people
being fussy to a level that's senseless.&lt;/p&gt;
&lt;p&gt;Then BoingBoing pointed me to the &lt;a class="reference external" href="http://www.snopes.com/music/artists/vanhalen.asp"&gt;Van Halen Brown
M&amp;amp;M&lt;/a&gt; story in
snopes.com …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My son's a musician, and one of the standard jokes boils down to the
phrase &amp;quot;no brown M&amp;amp;M's&amp;quot;. They use it as a catch-all phrase for people
being fussy to a level that's senseless.&lt;/p&gt;
&lt;p&gt;Then BoingBoing pointed me to the &lt;a class="reference external" href="http://www.snopes.com/music/artists/vanhalen.asp"&gt;Van Halen Brown
M&amp;amp;M&lt;/a&gt; story in
snopes.com.&lt;/p&gt;
&lt;p&gt;The brown M&amp;amp;M's was actually a compliance test. If you read the
contract rider, and complied with all the terms and conditions, you'd
filter the brown M&amp;amp;M's off the buffet.&lt;/p&gt;
&lt;p&gt;If you were not prepared for the technical requirements for the Van
Halen show, you'd book them, skip reading the rider, hope it went off
well, and -- generally -- fail to filter the M&amp;amp;M's.&lt;/p&gt;
&lt;div class="section" id="statements-of-work"&gt;
&lt;h2&gt;Statements of Work&lt;/h2&gt;
&lt;p&gt;We write a lot of Statements of Work (SOW's) with lots of
&amp;quot;assumptions&amp;quot;. A common assumption is that deliverables will be
approved within three days. We often write it, suspecting that the
client can't actually take action in three days.&lt;/p&gt;
&lt;p&gt;But we never really know until we start work. Once we're there, we
discover that it takes them a month to get ready to spend five days
reviewing a document and wondering what to do. Now we're five weeks
behind the original schedule, and the customer will blame us for
&amp;quot;springing&amp;quot; the 3-day decision window on them.&lt;/p&gt;
&lt;p&gt;If we had a &amp;quot;No Brown M&amp;amp;M's&amp;quot; assumption, perhaps we'd have an earlier
indication that things weren't going to work out well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-cases"&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;I'm also wondering if there needs to be a &amp;quot;Brown M&amp;amp;M&amp;quot; use case.
Something egregious, but small. Something that &lt;em&gt;should&lt;/em&gt; lead to
client confusion. If they approve the scope of work, including the
Brown M&amp;amp;M use case, we know they didn't really read or review the
scope of work.&lt;/p&gt;
&lt;p&gt;Perhaps there should be a &amp;quot;Brown M&amp;amp;M&amp;quot; in the architecture. Perhaps an
irrelevant component that we insist must be downloaded and installed
in the development environment. We simply check that it's there. If
not -- well -- what else will be wrong?&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="my-mother-in-law-is-a-theatrical-caterer-and-still"&gt;
&lt;h2&gt;My mother-in-law is a theatrical caterer and still...&lt;/h2&gt;
&lt;p&gt;Scott Pierce&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-06 21:23:38.293000-04:00&lt;/p&gt;
&lt;p&gt;My mother-in-law is a theatrical caterer and still has the rider
specifying &amp;quot;no brown M&amp;amp;Ms&amp;quot;. My wife tells the story of having to sit w/
her sister and pluck them out of a big bowl of multi-colored M&amp;amp;Ms.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Wishful Thinking -- An Accident Waiting To Happen</title><link href="https://slott56.github.io/2009_08_03-wishful_thinking_an_accident_waiting_to_happen.html" rel="alternate"></link><published>2009-08-03T07:39:00-04:00</published><updated>2009-08-03T07:39:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-08-03:/2009_08_03-wishful_thinking_an_accident_waiting_to_happen.html</id><summary type="html">&lt;p&gt;Some assumptions are really hard to identify as &amp;quot;assumptions&amp;quot;. Some
assumptions are more &amp;quot;wishful thinking&amp;quot; than &amp;quot;assumption&amp;quot;.&lt;/p&gt;
&lt;p&gt;We process a lot of spreadsheets. As far as I'm concerned, the
Spreadsheet User Interface (SUI) is a first-class part of any
application. Users understand them, and you don't have to code as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some assumptions are really hard to identify as &amp;quot;assumptions&amp;quot;. Some
assumptions are more &amp;quot;wishful thinking&amp;quot; than &amp;quot;assumption&amp;quot;.&lt;/p&gt;
&lt;p&gt;We process a lot of spreadsheets. As far as I'm concerned, the
Spreadsheet User Interface (SUI) is a first-class part of any
application. Users understand them, and you don't have to code as
much.&lt;/p&gt;
&lt;p&gt;We have a library that wraps
&lt;a class="reference external" href="http://pypi.python.org/pypi/xlrd/0.5.2"&gt;XLRD&lt;/a&gt;,
&lt;a class="reference external" href="http://docs.python.org/library/csv.html"&gt;csv&lt;/a&gt;,
&lt;a class="reference external" href="http://docs.python.org/library/zipfile.html"&gt;zipfile&lt;/a&gt; and
&lt;a class="reference external" href="http://docs.python.org/library/xml.etree.elementtree.html"&gt;ElementTree&lt;/a&gt;
XML parsing to read a wide variety of spreadsheet formats.&lt;/p&gt;
&lt;p&gt;However, we were recently stabbed by an assumption. I had to spend
over 40 hours restructuring our workbook library and application
code.&lt;/p&gt;
&lt;div class="section" id="go-with-what-you-know"&gt;
&lt;h2&gt;Go With What You Know&lt;/h2&gt;
&lt;p&gt;The point of an Agile approach is to build high-value things first.
In the olden days, we would have spent months (really) writing a
sophisticated set of hypothetical use cases for the workbook library
and then designing something that would cover all possible bases.&lt;/p&gt;
&lt;p&gt;Rather than spend endless hours on the potential workbook features, I
wrote what we needed to read the workbook files we actually had. We
had a mixture of XLS, XLS in ZIP files, and CSV files. So we unified
those with a fairly simple model of a &amp;quot;Row Source&amp;quot; that provided
information on sheets, and provided the sequence of rows.&lt;/p&gt;
&lt;p&gt;However, all those spreadsheets had a common feature. They were built
by people with a strong IT background, people who -- even if they
couldn't define &amp;quot;Normalization&amp;quot; -- knew what normalized data looked
like. They provided everything as proper columns.&lt;/p&gt;
&lt;p&gt;Recently, we got some data for a new customer pilot that was just
enough different that it was a costly problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-changed"&gt;
&lt;h2&gt;What Changed?&lt;/h2&gt;
&lt;p&gt;The change was the use of the sheet tab names to carry meaningful key
information.&lt;/p&gt;
&lt;p&gt;Every previous example either had sheets with names like &amp;quot;sheet1&amp;quot;,
&amp;quot;sheet2&amp;quot; and &amp;quot;sheet3&amp;quot;, or the sheet name was something we could
filter on.&lt;/p&gt;
&lt;p&gt;This workbook had the time dimension coded in the sheet names, not a
column of data on each sheet. Suddenly, the worksheet name was
significant. And that's not all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-bad-can-it-be"&gt;
&lt;h2&gt;How Bad Can It Be?&lt;/h2&gt;
&lt;p&gt;The extensive breakage came from a bad design decision buried in the
workbook library and all application layers that depend on the
workbook libraries. Assuming that data was in columns -- instead of
sheet names -- didn't create a big problem. Unwinding that assumption
was an easy to fix.&lt;/p&gt;
&lt;p&gt;What was bad was a design that permitted the various mappings to be
independent of each other. The &amp;quot;operation&amp;quot; classes that stepped
through rows were designed so that a simple list of independent
mappings could be used to extract relevant columns from a row and
process them. Each independent mapping created a Python object from
columns.&lt;/p&gt;
&lt;p&gt;It turns out that each mapping needed a context (with worksheet
name). Also, it turns out that some mappings actually depend on other
mappings.&lt;/p&gt;
&lt;p&gt;When the mappings are picking up columns, having several mappings
depending on a single column is easy. Having several mappings depend
on the context, wasn't too bad. Having one mapping that parsed the
sheet name, exposed our wishful thinking.&lt;/p&gt;
&lt;p&gt;We needed to have mappings that depended on each other. When we map
the sheet name to a Python object, we did parsing and database
lookups. Other mappings now must be &amp;quot;aware&amp;quot; of this mapping so they
don't redo the parsing and database lookups.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned"&gt;
&lt;h2&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;The trivial (and wrong) lesson learned could be &amp;quot;don't make so many
assumptions&amp;quot;. That's silly. We didn't casually make assumptions. We
had example data; the sample data was biased and didn't show all
conceivable permutations.&lt;/p&gt;
&lt;p&gt;Another trivial (and wrong) lesson could be &amp;quot;document all your
assumptions&amp;quot;. That's silly, too. We did document them. That doesn't
make the breakage significantly easier to fix.&lt;/p&gt;
&lt;p&gt;The real lesson is to avoid wishful thinking . We'd tried too hard to
make all of the mappings into independent objects. The phrase &amp;quot;shared
nothing&amp;quot; is our mantra. While shared nothing gave us a very
composable design, it wasn't actually correct.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="agile"></category><category term="object-oriented design"></category></entry><entry><title>Object Models and Relational Joins -- Endless Confusion</title><link href="https://slott56.github.io/2009_07_31-object_models_and_relational_joins_endless_confusion.html" rel="alternate"></link><published>2009-07-31T07:32:00-04:00</published><updated>2009-07-31T07:32:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-31:/2009_07_31-object_models_and_relational_joins_endless_confusion.html</id><summary type="html">&lt;p&gt;Check out this list of questions from Stack Overflow: &lt;a class="reference external" href="http://stackoverflow.com/search?q=%5Bdjango%5D+join"&gt;[Django]
join&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are all folks trying to do joins or outer joins even though
they have objects fetched through the ORM.&lt;/p&gt;
&lt;p&gt;How does this confusion arise? Easy. Folks work with SQL as if the
relational world-view is Important and Universal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out this list of questions from Stack Overflow: &lt;a class="reference external" href="http://stackoverflow.com/search?q=%5Bdjango%5D+join"&gt;[Django]
join&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are all folks trying to do joins or outer joins even though
they have objects fetched through the ORM.&lt;/p&gt;
&lt;p&gt;How does this confusion arise? Easy. Folks work with SQL as if the
relational world-view is Important and Universal. It isn't. SQL isn't
even a programming language, &lt;em&gt;per se&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here's the important thing for Django developers to know: &lt;strong&gt;SQL is a
Hack; Leave it Behind&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The bad news is that all those years spent mastering the ins and outs
of the SELECT statement doesn't have as much enduring value as I'd
hoped it would have. [Yes, I was a DBA in Ingres and Oracle. I know
my SQL.]&lt;/p&gt;
&lt;p&gt;The good news is that Object Navigation replaces much of the
hideousness of SQL. To an extent. Let's look at some cases.&lt;/p&gt;
&lt;div class="section" id="joins-in-general"&gt;
&lt;h2&gt;Joins in General&lt;/h2&gt;
&lt;p&gt;SQL SELECT statements are an algebraic specification of a result set.
The database is free to use any algorithm to build the required set.&lt;/p&gt;
&lt;p&gt;SQL imposes the Join hack because SQL is a completely consistent set
algebra system. A simple SELECT returns a row-column set of data. A
join between tables has to construct a fake row-column set so that
everything is consistent.&lt;/p&gt;
&lt;p&gt;A Join is nothing more than navigation from an object to associated
objects. In OO world, this is simply object containment; the
navigation is simply the name of a &lt;a class="reference external" href="http://docs.djangoproject.com/en/dev/topics/db/queries/#related-objects"&gt;related
object&lt;/a&gt;.
Nothing more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="master-detail-1-m-joins"&gt;
&lt;h2&gt;Master-Detail (1:m) Joins&lt;/h2&gt;
&lt;p&gt;A master-detail join in SQL works with a foreign key reference on the
children.&lt;/p&gt;
&lt;p&gt;In Django, this has to be declared in a SQL-friendly way so that the
ORM will work.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Master( models.Model ):

class Detail( models.Model ):
   master= models.ForeignKey( Master )
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;Join&amp;quot; query is simply this. The &amp;quot;detail_set&amp;quot; name is deduced by
Django from the class that contains the foreign key.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for m in Master.objects.filter():
   process m
       for d in m.detail_set.all():
           process d
&lt;/pre&gt;
&lt;p&gt;&amp;quot;But wait!&amp;quot; the SQL purist cries, &amp;quot;isn't that inefficient?&amp;quot; The
answer is &amp;quot;rarely&amp;quot;. It's possible that the RDBMS, doing a
&amp;quot;merge-join&amp;quot; algorithm to build the entire result set might be
quicker than this.&lt;/p&gt;
&lt;p&gt;As practical matter, however, the rest of the web transaction --
including the painfully slow download -- will dominate the timeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="association-m-m-joins"&gt;
&lt;h2&gt;Association (m:m) Joins&lt;/h2&gt;
&lt;p&gt;An association in SQL requires an intermediate table to carry the
combinations of foreign keys.&lt;/p&gt;
&lt;p&gt;In Django, this has to be declared in a SQL-friendly way so that
the ORM will work.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class This( models.Model ):

class That( models.Model ):
   these = models.ManyToManyField( This )
&lt;/pre&gt;
&lt;p&gt;The navigation, however, is simply following the relationships.
There's no complicated SQL join required.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for this in This.objects.filter():
    for that in this.that_set.all():
        process this and that
&lt;/pre&gt;
&lt;p&gt;Here's the other side of the navigation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for that in That.objects.filter():
    for this in that.these:
       process this and that
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="outer-joins"&gt;
&lt;h2&gt;Outer Joins&lt;/h2&gt;
&lt;p&gt;An Outer Join is a &amp;quot;Join with Null for Missing Relationships&amp;quot;.
It's navigation with an if-statement or an exception clause.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for that in That.objects.filter():
    try:
        this = that.this_set.get()
    except This.DoesNotExist:
        this = None
    process this and that
&lt;/pre&gt;
&lt;p&gt;There isn't any &amp;quot;join&amp;quot; in object-oriented programming. The ORM
layer removes the need.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="you-might-be-interested-in-rql-which-is-similar-to"&gt;
&lt;h2&gt;You might be interested in RQL which is similar to...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-31 09:28:02.676000-04:00&lt;/p&gt;
&lt;p&gt;You might be interested in RQL which is similar to SPARQL and CubicWeb's
way to get data from the database.
&lt;a class="reference external" href="http://www.logilab.org/project/rql"&gt;http://www.logilab.org/project/rql&lt;/a&gt;
&lt;a class="reference external" href="http://www.cubicweb.org/"&gt;http://www.cubicweb.org/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-wait-quot-the-sql-purist-cries"&gt;
&lt;h2&gt;&amp;quot;But wait!&amp;amp;quot; the SQL purist cries, &amp;amp;...&lt;/h2&gt;
&lt;p&gt;mike bayer&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-31 11:30:32.391000-04:00&lt;/p&gt;
&lt;p&gt;&amp;gt; &amp;quot;But wait!&amp;quot; the SQL purist cries, &amp;quot;isn't that inefficient?&amp;quot; The answer
is &amp;quot;rarely&amp;quot;.&lt;/p&gt;
&lt;p&gt;I'll have to disagree with you there. There answer is, &amp;quot;if there are
many parent rows, yes&amp;quot;. Fetching a single result set is definitely
faster than executing hundreds of individual SELECT statements.&lt;/p&gt;
&lt;p&gt;SQLAlchemy, as you know, abstracts the JOIN in the &amp;quot;first grab each
parent item, then grab each child item&amp;quot; problem into a feature called
&amp;quot;eager loading&amp;quot;. So I don't think the problem is JOINs per se but just
being able to use them appropriately in conjunction with an object
model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fumanchu-yes-we-re-doing-that-on-a-project"&gt;
&lt;h2&gt;fumanchu:  yes, we're doing that on a project ...&lt;/h2&gt;
&lt;p&gt;mike bayer&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-01 21:08:35.454000-04:00&lt;/p&gt;
&lt;p&gt;fumanchu: yes, we're doing that on a project now (sorta). lucene is
basically a way of providing views. we still use SQL all over the place
though for smaller ad-hoc result sets.&lt;/p&gt;
&lt;p&gt;infixum: SQL being obviated by ORMs is not how we all look at it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mike-s-right-and-i-d-say-most-systems-i"&gt;
&lt;h2&gt;Mike's right, and I'd say most systems I&amp;amp;#...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-31 12:19:55.293000-04:00&lt;/p&gt;
&lt;p&gt;Mike's right, and I'd say most systems I've worked on in the past few
years have been of that size.&lt;/p&gt;
&lt;p&gt;There's another way to architect a large system, however. If your system
of record is under heavy load, and you are therefore already caching
most of your child objects, it can be faster to farm your query out to a
replicated repository (like Lucene), fetch a list of ids, and then fetch
objects from the cache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-attended-a-django-tutorial-and-was-blown-away-by"&gt;
&lt;h2&gt;I attended a Django tutorial and was blown away by...&lt;/h2&gt;
&lt;p&gt;Carl Trachte&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-31 13:29:02.016000-04:00&lt;/p&gt;
&lt;p&gt;I attended a Django tutorial and was blown away by the idea that SQL
really isn't a factor, even though you're using data from a database.
For 10 years, my whole world was SQL. Hard to believe it's fading into
the background.&lt;/p&gt;
&lt;p&gt;Progress and Moore's Law make everything esoteric after a while. I
wouldn't group SQL in with Assembly (for a number of reasons), but it
appears ORM's have become common and efficient enough to make SQL
knowledge obsolete, for web programmers, at least.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Django"></category><category term="#python"></category><category term="object-oriented design"></category><category term="SQL"></category><category term="ORM"></category></entry><entry><title>Programming Language Popularity -- Update</title><link href="https://slott56.github.io/2009_07_31-programming_language_popularity_update.html" rel="alternate"></link><published>2009-07-31T06:14:00-04:00</published><updated>2009-07-31T06:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-31:/2009_07_31-programming_language_popularity_update.html</id><summary type="html">&lt;p&gt;I used to rely on the TIOBE Software &lt;a class="reference external" href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"&gt;Programming Community
Index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today, I learned about the &lt;a class="reference external" href="http://www.langpop.com/"&gt;langpop&lt;/a&gt;
site. The context was following an SD Times blog posting on Haskell.
But I got distracted looking at language rankings and what it means
to consulting companies.&lt;/p&gt;
&lt;p&gt;[Until corrected, I was] particularly drawn …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I used to rely on the TIOBE Software &lt;a class="reference external" href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"&gt;Programming Community
Index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today, I learned about the &lt;a class="reference external" href="http://www.langpop.com/"&gt;langpop&lt;/a&gt;
site. The context was following an SD Times blog posting on Haskell.
But I got distracted looking at language rankings and what it means
to consulting companies.&lt;/p&gt;
&lt;p&gt;[Until corrected, I was] particularly drawn to langpop's Amazon
listing. It seems like everyone wants books on C, C++ and C#. All
other languages are also-rans. Why? [I guessed] that it's because
those languages are so (a) hard to work with and (b) are perceived as
&amp;quot;old school&amp;quot; where print resources are more prevalent than on-line
resources. [Turns out the rankings are screwed up. Dang.]&lt;/p&gt;
&lt;div class="section" id="marketplace"&gt;
&lt;h2&gt;Marketplace&lt;/h2&gt;
&lt;p&gt;The langpop aggregate ranking is C, Java, C++, PHP, JavaScript, C#
and Python. The TIOBE Community Index is Java, C, C++, PHP, VB, C#,
Python.&lt;/p&gt;
&lt;p&gt;Similar enough to confirm that a half-dozen languages dominate with
two others fighting for position.&lt;/p&gt;
&lt;p&gt;Years ago, one of our senior consultants made the case that we really
have three fundamental tech-stacks into which our web services had to
fit: VB/.Net, C#/.Net, and Java. Corporate IT doesn't demand a lot of
PHP or Python from us.&lt;/p&gt;
&lt;p&gt;Perhaps those are opportunities for growth. Or perhaps there isn't
enough corporate IT demand for those frameworks.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Hi,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="langpop-com-guy-here-the-amazon-rankings-ar"&gt;
&lt;h2&gt;langpop.com guy here.  The amazon rankings ar...&lt;/h2&gt;
&lt;p&gt;David Welton&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-30 03:58:49.229000-04:00&lt;/p&gt;
&lt;p&gt;Hi,
langpop.com guy here. The amazon rankings are screwed up right now, as
Amazon seems to have some kind of malfunction in their search that they
didn't used to. Sorry to disappoint.&lt;/p&gt;
&lt;p&gt;Check out&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="state-of-the-computer-book-market-2008"&gt;
&lt;h2&gt;State of the Computer Book Market 2008,...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-02 11:38:40.573000-04:00&lt;/p&gt;
&lt;p&gt;Check out
State of the Computer Book Market 2008, part 4 -- The Languages by Mike
Hendrickson
&lt;a class="reference external" href="http://radar.oreilly.com/2009/02/state-of-the-computer-book-mar-22.html"&gt;http://radar.oreilly.com/2009/02/state-of-the-computer-book-mar-22.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="PHP"></category><category term="#python"></category><category term="java"></category><category term="C#"></category><category term="Programming Languages"></category><category term="VB"></category></entry><entry><title>Python and UML</title><link href="https://slott56.github.io/2009_07_27-python_and_uml.html" rel="alternate"></link><published>2009-07-27T18:23:00-04:00</published><updated>2009-07-27T18:23:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-27:/2009_07_27-python_and_uml.html</id><summary type="html">&lt;p&gt;Searched for this the other day. Came up empty. Clearly, didn't search
hard enough.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/1190854/automatically-generated-python-code-from-an-uml-diagram"&gt;Automatically Generated Python Code from an UML
diagram?&lt;/a&gt;
So far, there are three separate answers listing a total of five
separate products.&lt;/p&gt;
&lt;p&gt;I really want to annotate the UML with docstrings. If that was
supported, it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Searched for this the other day. Came up empty. Clearly, didn't search
hard enough.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/1190854/automatically-generated-python-code-from-an-uml-diagram"&gt;Automatically Generated Python Code from an UML
diagram?&lt;/a&gt;
So far, there are three separate answers listing a total of five
separate products.&lt;/p&gt;
&lt;p&gt;I really want to annotate the UML with docstrings. If that was
supported, it would be cool. Then my Sphinx documentation would
include UML images pulled from the code itself.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="UML"></category></entry><entry><title>Privacy and Encryption</title><link href="https://slott56.github.io/2009_07_25-privacy_and_encryption.html" rel="alternate"></link><published>2009-07-25T07:05:00-04:00</published><updated>2009-07-25T07:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-25:/2009_07_25-privacy_and_encryption.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://cio.ulitzer.com/node/1046285"&gt;Massachusetts Says Encrypt It
All!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This gives a hint as to the future of personal information collection
and dissemination.&lt;/p&gt;
&lt;p&gt;This is potentially A Bad Thing.&lt;/p&gt;
&lt;p&gt;I don't see a problem with using SSL to encrypt &amp;quot;over the wire&amp;quot; data
transfers. I don't see a problem with adding layers of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://cio.ulitzer.com/node/1046285"&gt;Massachusetts Says Encrypt It
All!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This gives a hint as to the future of personal information collection
and dissemination.&lt;/p&gt;
&lt;p&gt;This is potentially A Bad Thing.&lt;/p&gt;
&lt;p&gt;I don't see a problem with using SSL to encrypt &amp;quot;over the wire&amp;quot; data
transfers. I don't see a problem with adding layers of encryption to
these transfers.&lt;/p&gt;
&lt;p&gt;Everything else is going to require something like Apple's &lt;a class="reference external" href="http://www.apple.com/downloads/macosx/networking_security/filelock.html"&gt;File
Lock&lt;/a&gt;
to assure that the file -- no matter where it goes -- is encrypted.
This will be a problem.&lt;/p&gt;
&lt;div class="section" id="non-standards"&gt;
&lt;h2&gt;Non-Standards&lt;/h2&gt;
&lt;p&gt;A search for Windows File Encryption shows that there are a lot of
choices. Hopefully, they will all find a way to adhere to some
straightforward standard like
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;AES&lt;/a&gt;.
If we have to buy/download/install a pile of encryption applications,
data sharing will become expensive and complicated. Even if Microsoft
does their usual &amp;quot;standard + enhancements&amp;quot; offering, it will make
things very expensive.&lt;/p&gt;
&lt;p&gt;Imagine buying the &amp;quot;Crypto-Crummo&amp;quot; file system encryption package,
deploying it enterprise-wide, finding a problem, and -- horrors --
being unable to unlock your files ever again. It's a bug, not a
feature, but you still can't open your files.&lt;/p&gt;
&lt;p&gt;How do you prevent that risk? Right. Keep an illegal unencrypted copy
of everything.&lt;/p&gt;
&lt;p&gt;Here's another scenario. Imagine buying the &amp;quot;Crypto-Locko&amp;quot; file
system encryption package. You deploy it enterprise wide. You stop
paying your license fees. It stop decrypting. You're corporate data
is being held hostage by your encryption vendor.&lt;/p&gt;
&lt;p&gt;Here's the third strike. You buy the &amp;quot;Crypto-Uniqueo&amp;quot; file system
encryption package. It has a unique protocol, non-standard,
proprietary. It gets hacked. Your in violation of the law.&lt;/p&gt;
&lt;p&gt;Or, the company making &amp;quot;Crypto-Uniqueo&amp;quot; ceases support. Now how do
you get into your files? Or, the company goes out of business? What
now?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unintended-consequences"&gt;
&lt;h2&gt;Unintended Consequences&lt;/h2&gt;
&lt;p&gt;Without an applicable encryption standard -- and some boundaries on
what's really required -- I think these legal initiatives will do
more harm than good. To prevent the various risks, companies will do
dumb things. Things that are probably dumber than what they've done
that lead to leaks of personal information.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="encryption"></category><category term="security"></category></entry><entry><title>Software Performance Improvement</title><link href="https://slott56.github.io/2009_07_24-software_performance_improvement.html" rel="alternate"></link><published>2009-07-24T09:49:00-04:00</published><updated>2009-07-24T09:49:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-24:/2009_07_24-software_performance_improvement.html</id><summary type="html">&lt;p&gt;Yesterday, I looked at some marketing material on SPI (Software Process
Improvement). It was quite good. The approach was very pragmatic, the
deliverables very sound.&lt;/p&gt;
&lt;p&gt;The hard part is connecting with customers.&lt;/p&gt;
&lt;p&gt;I've only worked with a few customers who were actually interested in
process &lt;em&gt;improvement&lt;/em&gt;. I've worked with close …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Yesterday, I looked at some marketing material on SPI (Software Process
Improvement). It was quite good. The approach was very pragmatic, the
deliverables very sound.&lt;/p&gt;
&lt;p&gt;The hard part is connecting with customers.&lt;/p&gt;
&lt;p&gt;I've only worked with a few customers who were actually interested in
process &lt;em&gt;improvement&lt;/em&gt;. I've worked with close to a hundred customers
who were interested in process &lt;em&gt;enforcement&lt;/em&gt;, usually called
&amp;quot;compliance&amp;quot;.&lt;/p&gt;
&lt;p&gt;Laurent Bossavit's Learning Notes has this entry, filed under &amp;quot;&lt;a class="reference external" href="http://www.bossavit.com/pivot/pivot/entry.php?id=295"&gt;Four
types of process
errors&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
Of course, what actually matters - what is worth discussing -
is what people actually do. A 10-page process document or a
flowchart are nice, but generally irrelevant unless they match
very closely with what people actually do in the pursuit of
shipping software.&lt;/blockquote&gt;
&lt;p&gt;In thinking about SPI, one has to find a way past the Core
Hubris™. Bossavit identifies four types of errors. His are all
focused on projects that &amp;quot;produce a bad outcome&amp;quot;. We'll have to
put this on one bucket, the &amp;quot;problem recognized&amp;quot; bucket. We'll
rename Bossavit's Type I to Type IV as Type R-I to R-IV because a
problem was Recognized.&lt;/p&gt;
&lt;div class="section" id="the-language-of-denial"&gt;
&lt;h2&gt;The Language of Denial&lt;/h2&gt;
&lt;p&gt;What he misses are the process errors that &amp;quot;produce a questionable
outcome&amp;quot;. In this case, the outcome can be declared good by the
manager that produced it (it went into production) or declared bad
by the manager that maintains it (quality is appalling.) These are
far, far more insidious and pernicious errors than the four he
ties to a bad outcome.&lt;/p&gt;
&lt;p&gt;Delivery is all that matters, right? If it goes into production,
how &amp;quot;bad&amp;quot; can the outcome be?&lt;/p&gt;
&lt;p&gt;The answer is -- sadly -- pretty bad. I'm often asked to work with
production code that should have raised red flags, been identified
as a bad outcome, and lead to serious questions about process
improvement. And yet, there's no question raised at all.&lt;/p&gt;
&lt;p&gt;Worse, I'm often asked to follow the process that lead to the
horrifying code and the need for rework. What created the mess
we're reworking? A flawed process? Why, then, must our proposal
swear undying fealty to the broken process? So we can fail yet
again?&lt;/p&gt;
&lt;p&gt;Even worse, we're sometimes asked to follow a process for which
there is no example. &amp;quot;Produce documentation like this,&amp;quot; I'm told.
Followed by, &amp;quot;but that's not a good example of what I mean.&amp;quot; It
turns out, there is no example of anyone ever following the
written process. But, we're expected (no required) to comply with
a process that has a nebulous definition and no examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-questionable-outcome-errors"&gt;
&lt;h2&gt;Some Questionable Outcome Errors&lt;/h2&gt;
&lt;p&gt;I think there are four variations on the theme of process errors.
We call this class &amp;quot;Q&amp;quot; errors because there was a questionable
result. Not a recognized problem but a shadow of a doubt.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Type Q-I error (blame) is when you don't follow the written
process, produce a questionable outcome, and blame
non-conformance. The point here is that we don't ask why the
written process was not followed. Why is the actual process
different? Is it a mistake, or is the written process unusable
as written?&lt;/li&gt;
&lt;li&gt;Type Q-II error (fudge) is when you don't follow the written
process, produce a questionable outcome, and declare the
situation to be exceptional. Either the technology was new or
the business problem was not well understood. (Note. All
interesting projects have one or both features. If the
technology was understood and the business problem was
understood, you could download an open source solution.)&lt;/li&gt;
&lt;li&gt;Type Q-III error (denial) is when you don't follow the written
process, produce a questionable outcome and ignore the gaps
between written and actual. No proposed changes. Nothing. Just
business as usual.&lt;/li&gt;
&lt;li&gt;Type Q-IV error (insight) is when you don't follow the written
process, produce a questionable outcome, and ask &lt;strong&gt;two&lt;/strong&gt;
questions. &amp;quot;What was so wrong with the written process that we
didn't follow it?&amp;quot; and &amp;quot;What was wrong with what we actually
did?&amp;quot; (Note. I've never seen this happen. But that's just me.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="marketing-past-the-hubris"&gt;
&lt;h2&gt;Marketing Past the Hubris&lt;/h2&gt;
&lt;p&gt;There's a Core Hubris in many software development organizations.
It's a presumption that, since they have stuff in production, they
know how to deliver more stuff.&lt;/p&gt;
&lt;p&gt;Indeed, in many organizations, SPI dies an early death because of
the Core Hubris. They already know what they're doing. They don't
need any help with &lt;em&gt;that&lt;/em&gt;. This is why the blame-fudge-denial
errors are so common.&lt;/p&gt;
&lt;p&gt;The Core Hubris is also why shoddy code goes into production.
There are three paths a project can take.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;The High Road&lt;/strong&gt;. The processes mostly work, are mostly
followed, and code is produced that has reasonable quality and
gets delivered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Low Road&lt;/strong&gt;. The processes don't work well or aren't
followed and code is produced that's questionable. It's put
into production anyway, victory is declared and little, if
anything is learned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Blocked Road&lt;/strong&gt;. The processes don't work or aren't
followed and a bad result is produced. Almost without
exception, this means the project is cancelled early. Deeper
questions aren't asked because the reasons for cancellation
aren't well understood by everyone involved. One day you're
working, the next day you're reassigned.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Paths 2 and 3 (the Low Road and the Blocked Road) are both
places that need SPI. There are several marketing problems to
overcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-help"&gt;
&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;p&gt;First, will they acknowledge the problem? Probably not. If
you've delivered anything -- no matter how bad -- you don't
need help. Further, you have two layers of the organization
that need to acknowledge the problem. Management needs to
recognize that they're wasting money on shoddy quality. Staff
needs to recognize that they've got quality problems.&lt;/p&gt;
&lt;p&gt;Second, will they ask for help? Probably not. Most of the
process errors involve deflections or denials. To seek outside
support for something as &amp;quot;simple&amp;quot; as software development is a
defeatist attitude. It doesn't matter that software development
actually is very hard. What matters is that it &lt;em&gt;shouldn't&lt;/em&gt; be
so hard, and asking for help is career suicide.&lt;/p&gt;
&lt;p&gt;Third, will they follow through on the help? Probably not.
Change is disruptive. It means grumpy people complaining about
the 8:30 AM Scrum stand-up meeting. It means grumpy project
managers having only one or two sprints carefully planned down
to the last 6 minutes of activity, and the future sprints are
unplanned. It means grumpy business analysts complaining about
being forced to focus on just a few use cases and get those
right, leaving the &amp;quot;big picture&amp;quot; to fall into a black-hole. It
means grumpy DBA's complaining about an evolving data model. It
means grumpy programmers complaining that unit test code is not
deliverable and is a waste of time.&lt;/p&gt;
&lt;p&gt;Management can -- and often does -- act schizophrenically
around improvements. They both (a) demand improvement and
simultaneously (b) demand that the improvements be subverted in
order to deliver &amp;quot;on time&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-sell"&gt;
&lt;h2&gt;What to Sell&lt;/h2&gt;
&lt;p&gt;I think the marketing message for SPI has to be something along
the following lines.&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Is your software actually perfect? Is maintenance easy? Is
adaption and migration a simple administrative step?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Are you sure? Do you have evidence? If not, perhaps your
processes aren't as perfect as you wish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you scramble to deliver something that works? Is
maintenance always more complex than you thought? Have you
ever had to reverse engineer a system to replace it?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You might want to consider improving your processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have you failed to deliver?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You need to reconsider your processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do you have code that's both an asset and a liability?
Is it so valuable you need to keep it in production,
but it's in such bad shape that maintenance is an
expensive nightmare?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The root cause is process problems. Address the
process issues and you should be able to reduce
maintenance costs, or get better quality results
for your maintenance spend.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This, I think, is the target audience for SPI services. Most IT
people think they're successful. I've seen their worst code,
and I disagree.&lt;/p&gt;
&lt;p&gt;By &lt;em&gt;worst&lt;/em&gt; I mean the following: &lt;strong&gt;So valuable you can't throw
it away and so broken you can't maintain it yourself&lt;/strong&gt;. This
code is a costly, risky burden on the IT organization but still
creates value for the enterprise as a whole. Flawed processes
put it into production, and flawed processes prevents effective
rework.&lt;/p&gt;
&lt;p&gt;The folks that understand that merely delivering may not be
enough are the folks that might consider SPI services.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Check out the article&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rethinking-software-ed-sper"&gt;
&lt;h2&gt;Rethinking Software Ed Sper...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-08-04 20:34:19.671000-04:00&lt;/p&gt;
&lt;p&gt;Check out the article
Rethinking Software
Ed Sperling, 07.27.09, 06:00 AM EDT
&lt;a class="reference external" href="http://www.forbes.com/2009/07/25/parasoft-software-enterprise-technology-cio-network-parasoft.html"&gt;http://www.forbes.com/2009/07/25/parasoft-software-enterprise-technology-cio-network-parasoft.html&lt;/a&gt;
It is interesting when a business magazine like Forbes talks about
needing a use case and test case in order to be successful.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category></entry><entry><title>Java vs. PL/SQL</title><link href="https://slott56.github.io/2009_07_24-java_vs_plsql.html" rel="alternate"></link><published>2009-07-24T06:10:00-04:00</published><updated>2009-07-24T06:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-24:/2009_07_24-java_vs_plsql.html</id><summary type="html">&lt;p&gt;Quite a while ago, I compared &lt;a class="reference external" href="http://homepage.mac.com/s_lott/iblog/architecture/C465799452/E20070527090758/index.html"&gt;Java and
PL/SQL&lt;/a&gt;
to gauge their relative performance.&lt;/p&gt;
&lt;p&gt;Recently (okay, back in mid-June) I got this request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing I would like to compare is Java vs PL/SQL using native
compilation (search Oracle for NCOMP). Would you be willing to
repeat
your …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Quite a while ago, I compared &lt;a class="reference external" href="http://homepage.mac.com/s_lott/iblog/architecture/C465799452/E20070527090758/index.html"&gt;Java and
PL/SQL&lt;/a&gt;
to gauge their relative performance.&lt;/p&gt;
&lt;p&gt;Recently (okay, back in mid-June) I got this request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing I would like to compare is Java vs PL/SQL using native
compilation (search Oracle for NCOMP). Would you be willing to
repeat
your benchmark tests using NCOMP? NCOMP is pretty straightforward
to
set up, I think it is even easier in 11g, if you are using that.&lt;/p&gt;
&lt;p&gt;Also, when you test Java vs. PL/SQL, are you using Java stored
procedures in Oracle, or are you using an external VM and
connecting
to Oracle? (One annoying limitation to Java Stored Procedures is
the
lack of threading ability, among a few other things).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Native Compilation will not make PL/SQL magically faster than Java.
The very best it can do is make PL/SQL as fast as Java. The clunky,
inelegance of PL/SQL isn't fixed by NCOMP, either.&lt;/p&gt;
&lt;p&gt;My test was PL/SQL stored procedures in Oracle. These were compared
against Java programs in a separate JVM. I didn't use Java stored
procedures because the client didn't ask for this.&lt;/p&gt;
&lt;p&gt;The client had legacy C code they wanted reverse engineered and
reimplemented. PL/SQL was unsuitable for this task for a number of
reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;PL/SQL is slower than C or Java. Speed mattered.&lt;/li&gt;
&lt;li&gt;PL/SQL is a clunky and inelegant language. Worse than C and far
worse than Java. The application would have grown to gargantuan
proportions.&lt;/li&gt;
&lt;li&gt;The legacy C code was full of constructs that would have to be
rethought from their very essence to recast them in PL/SQL. Java,
for the most part, is a better fit with legacy C. The
reverse-engineering was -- relatively -- easy in moving from C to
Java.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There were some additional, minor considerations.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There is some unit testing capability in PL/SQL
(&lt;a class="reference external" href="http://utplsql.oracledeveloper.nl/"&gt;UTPLSQL&lt;/a&gt;), but it's not
as feature-rich as JUnit. Unit testing was essential for proving
that the legacy features were ported correctly.&lt;/li&gt;
&lt;li&gt;PL/SQL is hard to develop. A nice IDE (like NetBeans or Eclipse)
makes it very easy to write Java. The customer was using Toad and
wasn't planning to introduce the kind of IDE required to build
large, complex applications.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In short, the simple speed test -- PL/SQL vs. Java -- was
sufficient to show that PL/SQL is simply too slow for
compute-intensive speed-critical applications.&lt;/p&gt;
</content><category term="Technologies"></category><category term="PL/SQL"></category><category term="performance"></category><category term="java"></category></entry><entry><title>XML Parsing</title><link href="https://slott56.github.io/2009_07_23-xml_parsing.html" rel="alternate"></link><published>2009-07-23T20:14:00-04:00</published><updated>2009-07-23T20:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-23:/2009_07_23-xml_parsing.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://thomas.apestaart.org/log/?p=962"&gt;Python XML parsing&lt;/a&gt; and
&lt;a class="reference external" href="http://kaens.blogspot.com/2007/05/parsing-simple-xml-files-in-python.html"&gt;Parsing simple XML files in python using
etree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Originally, I used
&lt;a class="reference external" href="http://docs.python.org/library/xml.sax.html"&gt;SAX&lt;/a&gt; -- but built
DOM objects with it. I moved from application-specific DOM's to
generic DOM's.&lt;/p&gt;
&lt;p&gt;Then I switched to the
&lt;a class="reference external" href="http://docs.python.org/library/xml.dom.minidom.html"&gt;miniDOM&lt;/a&gt;
parser. It gave me structures I could walk with a pleasant
&lt;strong&gt;Visitor&lt;/strong&gt; design …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://thomas.apestaart.org/log/?p=962"&gt;Python XML parsing&lt;/a&gt; and
&lt;a class="reference external" href="http://kaens.blogspot.com/2007/05/parsing-simple-xml-files-in-python.html"&gt;Parsing simple XML files in python using
etree&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Originally, I used
&lt;a class="reference external" href="http://docs.python.org/library/xml.sax.html"&gt;SAX&lt;/a&gt; -- but built
DOM objects with it. I moved from application-specific DOM's to
generic DOM's.&lt;/p&gt;
&lt;p&gt;Then I switched to the
&lt;a class="reference external" href="http://docs.python.org/library/xml.dom.minidom.html"&gt;miniDOM&lt;/a&gt;
parser. It gave me structures I could walk with a pleasant
&lt;strong&gt;Visitor&lt;/strong&gt; design.&lt;/p&gt;
&lt;p&gt;Last year, I switched to &lt;a class="reference external" href="http://docs.python.org/library/xml.etree.elementtree.html"&gt;Element
Tree&lt;/a&gt;.
Now I can use &lt;strong&gt;Visitor&lt;/strong&gt; and the XPATH search.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="i-still-think-of-lxml-as-the-only-xml-parsing-libr"&gt;
&lt;h2&gt;I still think of lxml as the only xml parsing libr...&lt;/h2&gt;
&lt;p&gt;schmichael&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-24 13:12:44.434000-04:00&lt;/p&gt;
&lt;p&gt;I still think of lxml as the only xml parsing library I'll ever need in
Python. :-)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="python"></category><category term="xml"></category><category term="lxml"></category></entry><entry><title>Software Overdesign -- An Update</title><link href="https://slott56.github.io/2009_07_23-software_overdesign_an_update.html" rel="alternate"></link><published>2009-07-23T10:12:00-04:00</published><updated>2009-07-23T10:12:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-23:/2009_07_23-software_overdesign_an_update.html</id><summary type="html">&lt;p&gt;Saw a horrifying design document recently. One that was at the &amp;quot;gouge
out my eyes&amp;quot; level of badness. That's one step below &amp;quot;drink until I
forget what I saw&amp;quot;, but one level above &amp;quot;beat the author with a tire
iron.&amp;quot;&lt;/p&gt;
&lt;p&gt;They were -- I'm guessing here -- trying to develop their own …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Saw a horrifying design document recently. One that was at the &amp;quot;gouge
out my eyes&amp;quot; level of badness. That's one step below &amp;quot;drink until I
forget what I saw&amp;quot;, but one level above &amp;quot;beat the author with a tire
iron.&amp;quot;&lt;/p&gt;
&lt;p&gt;They were -- I'm guessing here -- trying to develop their own
Document Object Model. Distinct from any established DOM. The
Wikipedia entry on
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Document_Object_Model"&gt;DOM&lt;/a&gt; provides
several examples of existing DOM's. Why reinvent?&lt;/p&gt;
&lt;p&gt;The application is -- ultimately -- going to be in Python. There are
two candidate DOM's that could have been used: the &lt;a class="reference external" href="http://docs.python.org/library/xml.dom.html"&gt;XML
DOM&lt;/a&gt; and the RST DOM
as implemented in Docutils
&lt;a class="reference external" href="http://svn.berlios.de/viewcvs/docutils/trunk/docutils/docutils/nodes.py?view=markup"&gt;nodes&lt;/a&gt;
module. Instead, they were reinventing: they appear to have spent a
great deal of time writing use cases for &amp;quot;editor&amp;quot;. I expect there was
a use case for &amp;quot;wheel&amp;quot; and &amp;quot;fire&amp;quot; in there also.&lt;/p&gt;
&lt;p&gt;What scared me was the &amp;quot;flatness&amp;quot; of the model. Every buzzword had
it's own class. There was no inheritance or reuse anywhere in the
diagram. Parts of the model where influenced by the
&lt;a class="reference external" href="http://www.docbook.org/"&gt;DocBook&lt;/a&gt; schemas. The actual
&lt;a class="reference external" href="http://www.docbook.org/xml/4.5"&gt;DTD&lt;/a&gt; could have been turned into
the model, but wasn't.&lt;/p&gt;
&lt;p&gt;Further, undefinable terms like &amp;quot;sentence&amp;quot; showed up as class
definitions. XML's DOM treats all text as -- well -- text. Any
language structure is outside the DOM. RST, similarly, treats text as
a container
&amp;quot;&lt;tt class="docutils literal"&gt;... children are all `Text&lt;/tt&gt; or &lt;cite&gt;Inline&lt;/cite&gt; subclass nodes.`&amp;quot;&lt;/p&gt;
&lt;p&gt;All I could suggest was &amp;quot;locate common superclasses&amp;quot; and &amp;quot;until you
can define 'sentence', omit it&amp;quot;. And then run outside and gouge out
my eyes.&lt;/p&gt;
&lt;p&gt;It's hard to criticize something like that in a truly helpful manner.
Fixing the model is merely putting lipstick on a pig.&lt;/p&gt;
&lt;p&gt;As far as I can tell, the application is -- somehow -- an editor that
imposes a severe set of structural constraints on what the author can
do. It's as if &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt;,
&lt;a class="reference external" href="http://docutils.sourceforge.net/index.html"&gt;docutils&lt;/a&gt; and
&lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; don't exist. The real solution
isn't &amp;quot;fix your object model&amp;quot; it's &amp;quot;fix your problem statement and
learn RST.&amp;quot;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="post-script"&gt;
&lt;h2&gt;Post Script&lt;/h2&gt;
&lt;p&gt;Check out this reply:&lt;/p&gt;
&lt;blockquote&gt;
The advantage of having an &amp;quot;outliner data model&amp;quot; and a
&amp;quot;document data model&amp;quot; like DocBook XML is that your outliner
functionality is not limited by the DocBook XML. The downside
is that have to create and support a second model as well as
provide a mapping between the two.&lt;/blockquote&gt;
&lt;p&gt;In other words, rather than simplify, we'll (1) insist the
eye-gougingly bad model is &amp;quot;better&amp;quot;, (2) justify the complexity
(&amp;quot;not limited by DocBook [DOM]&amp;quot;) by and (3) plan to add some more
complexity to map an overly complex (and atypical) DOM to a
standard DOM.&lt;/p&gt;
&lt;p&gt;Not a very parsimonious approach to design.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="xml"></category><category term="DOM"></category><category term="UML"></category></entry><entry><title>Flying Saucer</title><link href="https://slott56.github.io/2009_07_11-flying_saucer.html" rel="alternate"></link><published>2009-07-11T12:32:00-04:00</published><updated>2009-07-11T12:32:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-11:/2009_07_11-flying_saucer.html</id><summary type="html">&lt;p&gt;The old code was 5700 lines of bad VB.
The new code is &lt;a class="reference external" href="http://velocity.apache.org/"&gt;Velocity&lt;/a&gt;, &lt;a class="reference external" href="https://xhtmlrenderer.dev.java.net/"&gt;Flying
Saucer&lt;/a&gt;,
&lt;a class="reference external" href="http://www.lowagie.com/iText/"&gt;iText&lt;/a&gt; and 120 lines of glue. The old
code will be replaced with perhaps 500 lines of XHTML-producing Velocity
templates.&lt;/p&gt;
&lt;p&gt;[The Flying Saucer site -- with the main menu on the right -- was
confusing at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The old code was 5700 lines of bad VB.
The new code is &lt;a class="reference external" href="http://velocity.apache.org/"&gt;Velocity&lt;/a&gt;, &lt;a class="reference external" href="https://xhtmlrenderer.dev.java.net/"&gt;Flying
Saucer&lt;/a&gt;,
&lt;a class="reference external" href="http://www.lowagie.com/iText/"&gt;iText&lt;/a&gt; and 120 lines of glue. The old
code will be replaced with perhaps 500 lines of XHTML-producing Velocity
templates.&lt;/p&gt;
&lt;p&gt;[The Flying Saucer site -- with the main menu on the right -- was
confusing at first. It made it look like a half-baked semi-functional
idea for an open source project. Boy was I wrong. It totally rocks!]&lt;/p&gt;
&lt;p&gt;I am absolutely delighted at the FS world-view.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Process the entire CSS specification -- every feature --
especially those related to printing.&lt;/li&gt;
&lt;li&gt;Don't tolerate malformed XHTML. Gecko tolerates all kinds of HTML
problems, making it big and sophisticated. Flying Saucer just
doesn't tolerate ill-formed XML, making it simpler, and more able
to handle every CSS nuance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the document is very simple (with no side-bars or floating
elements), simple CSS works. And the Flying Saucer PDF matches the
HTML completely. The match was so good that I did a double-take at
the first PDF I made.&lt;/p&gt;
&lt;p&gt;The best part is being able to chuck 1000's of lines of VB and
replace them with 100's of lines of XHTML. I think that could
stand to reduce long-term maintenance costs.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="he-talks-about-python-a-lot-give-the-dude-a-break"&gt;
&lt;h2&gt;He talks about Python a lot. Give the dude a break!&lt;/h2&gt;
&lt;p&gt;SDC&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-16 22:53:29.400000-04:00&lt;/p&gt;
&lt;p&gt;He talks about Python a lot. Give the dude a break!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-shows-up-on-planet-python-it-doesn-39-t-see"&gt;
&lt;h2&gt;This shows up on Planet Python. It doesn&amp;amp;#39;t see...&lt;/h2&gt;
&lt;p&gt;Lennart Regebro&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-12 01:14:55.810000-04:00&lt;/p&gt;
&lt;p&gt;This shows up on Planet Python. It doesn't seem like it should.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="pdf"></category><category term="css"></category><category term="xhtml"></category><category term="java"></category></entry><entry><title>Architecture? We don't need no stinking architecture! (Update)</title><link href="https://slott56.github.io/2009_07_08-architecture_we_dont_need_no_stinking_architecture_update.html" rel="alternate"></link><published>2009-07-08T15:45:00-04:00</published><updated>2009-07-08T15:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-08:/2009_07_08-architecture_we_dont_need_no_stinking_architecture_update.html</id><summary type="html">&lt;p&gt;Context: We're reverse engineering some bad VB application code.&lt;/p&gt;
&lt;p&gt;What I saw. &amp;quot;This problem report pushed this module over the 64k
limit for modules. Therefore all code used for XYZ has been removed
from this module and placed in the new bas module XYZ.&amp;quot;&lt;/p&gt;
&lt;p&gt;What I learned. Good design -- irrelevant …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Context: We're reverse engineering some bad VB application code.&lt;/p&gt;
&lt;p&gt;What I saw. &amp;quot;This problem report pushed this module over the 64k
limit for modules. Therefore all code used for XYZ has been removed
from this module and placed in the new bas module XYZ.&amp;quot;&lt;/p&gt;
&lt;p&gt;What I learned. Good design -- irrelevant. Abstraction -- irrelevant.
Layered architecture -- irrelevant. Conceptual Integrity of the
design -- irrelevant. What actually mattered was VB's 64k module
limit.&lt;/p&gt;
&lt;p&gt;Consequence. Reverse engineering will be hard because I don't know
what code is scattered around the rest of the code base. The number
of global variables is truly awe-inspiring.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Edit: Two additional gems: &amp;quot;Needed to split out another portion of
this procedure due to &amp;quot;not enough memory&amp;quot; error on compile&amp;quot; and &amp;quot;This
new sub added because of &amp;quot;Procedure too Large&amp;quot; compile error&amp;quot;.&lt;/p&gt;
&lt;p&gt;Some people should find jobs in a different industry. The module is
6000 lines of code, and apparently, it had no structure at all until
it stopped compiling.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="mr-lott-there-is-so-much-bad-vb-code-out-there"&gt;
&lt;h2&gt;Mr. Lott, There is so much bad VB code out there, ...&lt;/h2&gt;
&lt;p&gt;Carl Trachte&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-25 11:01:14.932000-04:00&lt;/p&gt;
&lt;p&gt;Mr. Lott,
There is so much bad VB code out there, you'll be in business forever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-takes-a-vb-coder-to-know-one-this-is-where-i"&gt;
&lt;h2&gt;It takes a VB coder to know one - this is where I ...&lt;/h2&gt;
&lt;p&gt;Carl Trachte&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-07-09 00:24:29.499000-04:00&lt;/p&gt;
&lt;p&gt;It takes a VB coder to know one - this is where I started programm . . .
er . . . munging data as part of my pit geologist duties in a mine.
So many things I've since learned NOT to do are just par for the course
in VB and especially VBA code (inside Excel spreadsheets). Copy and
paste huge blocks of code - no problem. Declare constants instead of
using magic numbers, why bother?&lt;/p&gt;
&lt;p&gt;It's not so much the language as the culture (although there are design
decisions even a mother could not love or defend). I remember the first
VB book I bought at the outset of the dot com boom - the author went on
a feel good rant about how VB programmers like to *GET THINGS DONE* -
man, what a crock.&lt;/p&gt;
&lt;p&gt;Taking a C course online almost killed me, but it broke some of those
awful habits.&lt;/p&gt;
&lt;p&gt;Can we just forget this whole VB thing ever happened? (NO, BECAUSE
THERE'S A BAZILLION LINES OF VB CODE OUT THERE running mission critical
systems). Like I said before, Mr. Lott, if you live long enough you'll
own the yacht in the picture on your homepage yet (maybe 2!).&lt;/p&gt;
&lt;p&gt;My two (actually, about forty five) cents.&lt;/p&gt;
&lt;p&gt;Sorry for the rant. :-(&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="or-you-can-get-a-job-cleaning-up-crude-oil-spills"&gt;
&lt;h2&gt;Or you can get a job cleaning up crude oil spills....&lt;/h2&gt;
&lt;p&gt;Bill Karwin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-25 11:43:59.283000-04:00&lt;/p&gt;
&lt;p&gt;Or you can get a job cleaning up crude oil spills. That might be less
toxic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="all-design-concerns-are-overshadowed-by-the-lack-o"&gt;
&lt;h2&gt;All design concerns are overshadowed by the lack o...&lt;/h2&gt;
&lt;p&gt;Lennart Regebro&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-25 13:02:56.494000-04:00&lt;/p&gt;
&lt;p&gt;All design concerns are overshadowed by the lack of programming skills
of the average VB programmer. I did a project many years ago (10+) where
I after a week of fixing bugs declared that it would be quicker to
rewrite the whole program from scratch than fixing up th VB program. It
took three weeks to rewrite it in Delphi, if I remember correctly.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="VB"></category><category term="architecture"></category></entry><entry><title>Test-Driven Reverse Engineering and Perniciously Bad Code</title><link href="https://slott56.github.io/2009_07_06-test_driven_reverse_engineering_and_perniciously_bad_code.html" rel="alternate"></link><published>2009-07-06T15:05:00-04:00</published><updated>2009-07-06T15:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-07-06:/2009_07_06-test_driven_reverse_engineering_and_perniciously_bad_code.html</id><summary type="html">&lt;p&gt;I've done a fair amount of reverse engineering over the years.&lt;/p&gt;
&lt;p&gt;In the early days, you went from code to specification to new code.
It took forever and the problems you uncovered -- well -- they often
derailed the project.&lt;/p&gt;
&lt;p&gt;Recently, I used a TDD-like approach. Each piece of legacy code was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've done a fair amount of reverse engineering over the years.&lt;/p&gt;
&lt;p&gt;In the early days, you went from code to specification to new code.
It took forever and the problems you uncovered -- well -- they often
derailed the project.&lt;/p&gt;
&lt;p&gt;Recently, I used a TDD-like approach. Each piece of legacy code was
turned into some Java code with some associated unit tests. Further,
the users were able to cough up a canonical set of acceptance tests.
These were turned into unit tests, and it wasn't too difficult to
meet in the middle with plenty of testing for each piece of legacy
conversion.&lt;/p&gt;
&lt;p&gt;Given some subsequent experience, it turns out that user acceptance
tests are essential to success in reverse engineering. Without user
acceptance tests being provided up front, reverse engineering is a
nightmare.&lt;/p&gt;
&lt;div class="section" id="mystery-code"&gt;
&lt;h2&gt;Mystery Code&lt;/h2&gt;
&lt;p&gt;Today's issue is legacy code that is -- frankly -- incompetently
done. As a bonus, the user organization is a little vague on what
it's supposed to do. They trust it, but they can't verify it. There
are no official test cases.&lt;/p&gt;
&lt;p&gt;The only explanation we can get is a demo. And because of the user's
workload, we're only getting one of these. Limited to an hour. AFAIK,
the only way we can test the conversion is to run it head-to-head
with the legacy and take notes as the users complain about the
differences.&lt;/p&gt;
&lt;p&gt;There will be no easy way to get to create up-front acceptance tests
to drive development. We'll have to take careful notes during the
demo and transform the demo script into test results we can use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="worse-still"&gt;
&lt;h2&gt;Worse Still&lt;/h2&gt;
&lt;p&gt;What's worse is the incompetent coding. How bad can code be? Let me
count the ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Globals. Anyone who thinks a global is a legal programming
construct needs to find a new career. A module that declares all
the globals just compounds the horror. Everything is scopeless and
could be used anywhere. There's no &amp;quot;interface&amp;quot; to anything, it's
just a puddle of grey goo.&lt;ul&gt;
&lt;li&gt;Using globals means functions have side-effects. They update
global variables more-or-less spontaneously.&lt;/li&gt;
&lt;li&gt;Using globals also means that all kinds of things may have
hysteresis. You call it once, it does one thing. You call it
again, it does something different.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Random SQL. Anyone who thinks that SQL statements can be dropped
in any random place in the application needs to find a new career.
MVC is &lt;em&gt;essential&lt;/em&gt; for segregating the SQL away from the View.
Views functions can't query stuff that should have been part of
the model, it means the model is incomplete -- and possibly in the
wrong state. It also means that view functions are slow and
possibly not strictly idempotent -- every time you refresh, a
value in the view could diverge from the value in the &amp;quot;official&amp;quot;
model.&lt;/li&gt;
&lt;li&gt;Copy-and-Paste coding. How hard can it be to put common code into
a function? Apparently, it's nearly impossible. If you're copying
and pasting common code, stop now. There's no excuse. It just
raises the cost of maintenance and conversion through the roof.&lt;/li&gt;
&lt;li&gt;No Change Control. Or rather, the change control is to leave all
previous versions of the code in place as comment blocks. For each
line of real code, there are two lines of previous versions
commented out. I don't care what it &lt;strong&gt;was&lt;/strong&gt;; I want to know what
it &lt;strong&gt;is&lt;/strong&gt;. If you can't use SVN, or even VSS, you need to find
another career.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There. I feel better. Back to trying to figure out what this
application really does.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="tdd"></category><category term="reverse engineering"></category></entry><entry><title>It used to work... Now they've fixed it.</title><link href="https://slott56.github.io/2009_06_29-it_used_to_work_now_theyve_fixed_it.html" rel="alternate"></link><published>2009-06-29T20:52:00-04:00</published><updated>2009-06-29T20:52:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-29:/2009_06_29-it_used_to_work_now_theyve_fixed_it.html</id><summary type="html">&lt;p&gt;Apple's Time Capsule rocks.&lt;/p&gt;
&lt;p&gt;For a while the Airport Extreme Base Station (AEBS) -- with a disk
added -- would do the same thing. You got Time Capsule backups
seamlessly and continuously.&lt;/p&gt;
&lt;p&gt;No more. Version 7.4.2. fixed the &amp;quot;bug&amp;quot;. Now the AEBS no longer backs
up to a disk.&lt;/p&gt;
&lt;p&gt;They've …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Apple's Time Capsule rocks.&lt;/p&gt;
&lt;p&gt;For a while the Airport Extreme Base Station (AEBS) -- with a disk
added -- would do the same thing. You got Time Capsule backups
seamlessly and continuously.&lt;/p&gt;
&lt;p&gt;No more. Version 7.4.2. fixed the &amp;quot;bug&amp;quot;. Now the AEBS no longer backs
up to a disk.&lt;/p&gt;
&lt;p&gt;They've been saying that since Nov '08. See article
&lt;a class="reference external" href="http://support.apple.com/kb/HT2038?viewlocale=en_US"&gt;HT2038&lt;/a&gt;. In
spite of that, a lot of folks saw it working. Try this Google
&lt;a class="reference external" href="http://www.google.com/search?q=AirPort+Extreme's+AirPort+Disk+as+a+Time+Machine+backup"&gt;Search&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But it worked for me up until this past weekend. The &amp;quot;upgrade&amp;quot; broke
it. Damn.&lt;/p&gt;
</content><category term="Technologies"></category><category term="macosx"></category><category term="apple"></category><category term="backups"></category></entry><entry><title>Semantic Markup -- RST vs. XML</title><link href="https://slott56.github.io/2009_06_24-semantic_markup_rst_vs_xml.html" rel="alternate"></link><published>2009-06-24T14:08:00-04:00</published><updated>2009-06-24T14:08:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-24:/2009_06_24-semantic_markup_rst_vs_xml.html</id><summary type="html">&lt;p&gt;I have very mixed feelings about XML's usability.&lt;/p&gt;
&lt;p&gt;An avowed goal of the inventors of XML was &amp;quot;XML documents should be
human-legible and reasonably clear.&amp;quot; While I like to think that
&amp;quot;legible&amp;quot; means &lt;em&gt;usable&lt;/em&gt;, I'm feeling that legibility is really a
minimal standard; I think it's a polite way of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have very mixed feelings about XML's usability.&lt;/p&gt;
&lt;p&gt;An avowed goal of the inventors of XML was &amp;quot;XML documents should be
human-legible and reasonably clear.&amp;quot; While I like to think that
&amp;quot;legible&amp;quot; means &lt;em&gt;usable&lt;/em&gt;, I'm feeling that legibility is really a
minimal standard; I think it's a polite way of saying &amp;quot;viewable with
any text editor.&amp;quot;&lt;/p&gt;
&lt;p&gt;I've got some content (my &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/index.html"&gt;Building
Skills&lt;/a&gt; books)
that I've edited with a number of tools. As I've changed tools, I've
come to really understand what semantic markup means.&lt;/p&gt;
&lt;div class="section" id="once-upon-a-time"&gt;
&lt;h2&gt;Once Upon A Time&lt;/h2&gt;
&lt;p&gt;When I started -- back in '00 or '01 -- I was taking notes on Python
using BBEdit and other text-editor tools. That doesn't really count.&lt;/p&gt;
&lt;p&gt;The first drafts of the Python book were written using AppleWorks;
the predecessor to Apple's iWork
&lt;a class="reference external" href="http://www.apple.com/iwork/pages/"&gt;Pages&lt;/a&gt; product. Any Mac text
editor is a joy to use. Except, of course, that AppleWorks semantic
markup wasn't the easiest thing to use. It was little more than the
visual styles with meaningful names.&lt;/p&gt;
&lt;p&gt;Then I converted the whole thing to XML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docbook-semantic-markup"&gt;
&lt;h2&gt;DocBook Semantic Markup&lt;/h2&gt;
&lt;p&gt;The DocBook XML-based markup seemed to be the best choice for what I
was doing. It was reasonably technically focused, and provided a
degree of structure and formality.&lt;/p&gt;
&lt;p&gt;To convert from AppleWorks, I exported the entire thing as text and
then used the &lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;LEO Outlining
Editor&lt;/a&gt; to
painstakingly -- manually -- rework it into XML.&lt;/p&gt;
&lt;p&gt;At this point, the XML tags were a visible part of the document, and
editing the document means touching the tags. Not the easiest thing
to do.&lt;/p&gt;
&lt;p&gt;I switched to XMLmind's &lt;a class="reference external" href="http://www.xmlmind.com/xmleditor/"&gt;XXE&lt;/a&gt;.
This was nice -- in a way. I didn't have to see the XML tags, but I
was heavily constrained by the clunky way they handle the XML
document structure. Double-clicking a word can lead to ambiguity on
which level of tag you wanted to talk about.&lt;/p&gt;
&lt;p&gt;The XML was &amp;quot;invisble&amp;quot; but the many-layered hierarchical structure
was very much in my face.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rst-semantic-markup"&gt;
&lt;h2&gt;RST Semantic Markup&lt;/h2&gt;
&lt;p&gt;After becoming a heavy user of Sphinx, I realized that I might be
able to simplify my life by switching from XML to
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a number of gains when moving to RST.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The document is simpler. It's approximately plain text, with a
number of simple constraints.&lt;/li&gt;
&lt;li&gt;Editing is easier because the markup is both explicit and simple.&lt;/li&gt;
&lt;li&gt;The tooling is simpler. Sphinx pretty much does what I want with
respect to publication.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is just one big loss: semantic markup. DocBook documents are
full of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;acronym&amp;gt;TLA&amp;lt;/acronym&amp;gt;&lt;/span&gt;&lt;/tt&gt; to provide some meaningful
classification behind the various words. It's relatively easy to
replace these with RST's &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/roles.html"&gt;Interpreted Text
Roles&lt;/a&gt;.
The revised markup is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:acronym:`TLA`&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The smaller, less relevant loss, is the inability to nest inline
markup. I used nested markup to provide detailed
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;function&amp;gt;&amp;lt;parameter&amp;gt;a&amp;lt;/parameter&amp;gt;&amp;lt;/function&amp;gt;&lt;/span&gt;&lt;/tt&gt; kind of descriptions. I
think &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:code:`function(x)`&lt;/span&gt;&lt;/tt&gt; is just as meaningful when it comes to
analyzing and manipulating the XML with automated tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-complete-set-of-roles"&gt;
&lt;h2&gt;The Complete Set of Roles&lt;/h2&gt;
&lt;p&gt;I haven't finished the XML -&amp;gt; Sphinx transformation. However, I do
have a list of roles that I'm working with.&lt;/p&gt;
&lt;p&gt;Here's the list of literal conversions. Some of these have obvious
Sphinx/RST replacements. Some don't. I haven't defined CSS markup
styles for all of these -- but I could. Instead, I used the existing
roles for presentation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. role:: parameter(literal)

.. role:: replaceable(literal)

.. role:: function(literal)

.. role:: exceptionname(literal)

.. role:: classname(literal)

.. role:: methodname(literal)

.. role:: varname(literal)

.. role:: envar(literal)

.. role:: filename(literal)

.. role:: code(literal)

.. role:: prompt(literal)

.. role:: userinput(literal)

.. role:: computeroutput(literal)

.. role:: guimenu(strong)

.. role:: guisubmenu(strong)

.. role:: guimenuitem(strong)

.. role:: guibutton(strong)

.. role:: guilabel(strong)

.. role:: keycap(strong)

.. role:: application(strong)

.. role:: command(strong)

.. role:: productname(strong)

.. role:: firstterm(emphasis)

.. role:: foreignphrase(emphasis)

.. role:: attribution

.. role:: abbrev
&lt;/pre&gt;
&lt;p&gt;The next big step is to handle roles that are more than a simple
style difference. My benchmark is the :trademark: role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-a-role"&gt;
&lt;h2&gt;Adding A Role&lt;/h2&gt;
&lt;p&gt;Here's what you do to add semantic markup role to your document
processing tool stack.&lt;/p&gt;
&lt;p&gt;First, write a small module to define the role.&lt;/p&gt;
&lt;p&gt;Second, update Sphinx's conf.py to name your module. It goes in
the extensions list.&lt;/p&gt;
&lt;p&gt;Here's my module to define the trademark role.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import docutils.nodes
from docutils.parsers.rst import roles

def trademark_role(role, rawtext, text, lineno, inliner,
    options={}, content=[]):
    &amp;quot;&amp;quot;&amp;quot;Build text followed by inline substitution '|trade|'    &amp;quot;&amp;quot;&amp;quot;
    roles.set_classes(options)
    word= docutils.nodes.Text( text, rawtext )
    symbol= docutils.nodes.substitution_reference( '|trade|', 'trade', refname='trade' )
    return [word,symbol], []

def setup( app ):
    app.add_role( &amp;quot;trademark&amp;quot;, trademark_role )
&lt;/pre&gt;
&lt;p&gt;Here's the tweak I made to my conf.py&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import sys, os
project=os.path.join( &amp;quot;&amp;quot;)
sys.path.append(&amp;quot;/Users/slott/Documents/Writing/NonProg2.5/source&amp;quot;)extensions = ['sphinx.ext.autodoc', 'sphinx.ext.ifconfig', 'docbook_roles' ]
&lt;/pre&gt;
&lt;p&gt;That's it. Now I have semantic markup that produces additional
text (in this case the TM symbol). I don't think there are too
many more examples like this. I'm still weeks away from finishing
the conversion (and validating all the code samples again.)&lt;/p&gt;
&lt;p&gt;But I think I've preserved the semantic content of my document in
a simpler, easier to use set of tools.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="sphinx"></category><category term="xml"></category></entry><entry><title>Failure To Grasp Polymorphism</title><link href="https://slott56.github.io/2009_06_20-failure_to_grasp_polymorphism.html" rel="alternate"></link><published>2009-06-20T08:10:00-04:00</published><updated>2009-06-20T08:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-20:/2009_06_20-failure_to_grasp_polymorphism.html</id><summary type="html">&lt;p&gt;I've cataloged a third specific case of fundamental failures to
understand polymorphism. The first two I've seen a fair number of times.
The third seems to be more rare.&lt;/p&gt;
&lt;p&gt;1. &amp;quot;How do I determine which subclass an object has?&amp;quot; The
Identification problem.&lt;/p&gt;
&lt;p&gt;2. &amp;quot;How do I morph an object to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've cataloged a third specific case of fundamental failures to
understand polymorphism. The first two I've seen a fair number of times.
The third seems to be more rare.&lt;/p&gt;
&lt;p&gt;1. &amp;quot;How do I determine which subclass an object has?&amp;quot; The
Identification problem.&lt;/p&gt;
&lt;p&gt;2. &amp;quot;How do I morph an object to a different subclass?&amp;quot; The
Transmutation problem.&lt;/p&gt;
&lt;p&gt;3. &amp;quot;I can do that with delegation, I don't need subclasses.&amp;quot; The
Denial problem.&lt;/p&gt;
&lt;div class="section" id="identification"&gt;
&lt;h2&gt;Identification&lt;/h2&gt;
&lt;p&gt;The Identification problem is the most common. There are two
variants: People ask about class comparisons, and people who use some
other value as a surrogate class comparison. Either way, they have if
statements scattered around the code.&lt;/p&gt;
&lt;p&gt;Bad.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if someObject.__class__ == ThisClass:
    someObject.this_foo_method()
elif someObject.__class__ == ThatClass:
    someObject.that_foo_method()
&lt;/pre&gt;
&lt;p&gt;Worse.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if someOtherIndicator == &amp;quot;this&amp;quot;:
    someObject.this_foo_method()
elif someOtherIndicator == &amp;quot;that&amp;quot;:
    someObject.that_foo_method()
&lt;/pre&gt;
&lt;p&gt;Better. Use inheritance. Override one method, don't provide two.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
someObject.foo_method()
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="transmutation"&gt;
&lt;h2&gt;Transmutation&lt;/h2&gt;
&lt;p&gt;This is more subtle because there's no easy &amp;quot;wrong&amp;quot; implementation.
Instead of bad code, you have goofy questions.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/394770/override-a-method-at-instance-level"&gt;http://stackoverflow.com/questions/394770/override-a-method-at-instance-level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/597199/converting-an-object-into-a-subclass-in-python"&gt;http://stackoverflow.com/questions/597199/converting-an-object-into-a-subclass-in-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these are attempts to &amp;quot;dynamically&amp;quot; transmute an object
from one class into another.&lt;/p&gt;
&lt;p&gt;There are two variants: people ask about having the superclass
morph into a subclass, or people want to make a class change so
that the object's behavior changes.&lt;/p&gt;
&lt;p&gt;In the morph case, they've overlooked the essential truth of
inheritance. Every subclass object is an instance of the
superclass, too. If you think you want to transmute from
superclass down to subclass, that's silly because the subclass
object already is an instance of the superclass. By definition. If
you think you want to morph, you really want some kind of
&lt;strong&gt;Factory&lt;/strong&gt; that spits out proper subclass instances.&lt;/p&gt;
&lt;p&gt;In the state-change case, they've overlooked the power of
delegation and the &lt;strong&gt;Strategy&lt;/strong&gt; pattern. If you think you want to
use a class change, you really want to plug in a different
strategy object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="denial"&gt;
&lt;h2&gt;Denial&lt;/h2&gt;
&lt;p&gt;For example,
&lt;a class="reference external" href="http://stackoverflow.com/questions/1020453/whats-the-point-of-inheritance-in-python"&gt;http://stackoverflow.com/questions/1020453/whats-the-point-of-inheritance-in-python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The example is great. It proves that you don't need inheritance.
Sadly, the proof only works if you're overriding every method. If
you don't want to override every method, then inheritance suddenly
becomes useful.&lt;/p&gt;
&lt;p&gt;The denial problem (all delegation, no inheritance) is a kind of
opposite to the transmutation problem (all inheritance, no
delegation).&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="its-pretty-rare-to-see-accurate-defenses-of-oo"&gt;
&lt;h2&gt;+1, its pretty rare to see accurate defenses of OO...&lt;/h2&gt;
&lt;p&gt;mike bayer&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-21 12:30:30.763000-04:00&lt;/p&gt;
&lt;p&gt;+1, its pretty rare to see accurate defenses of OOP and inheritance
these days.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-often-see-programmers-try-to-make-generalized-ru"&gt;
&lt;h2&gt;I often see programmers try to make generalized ru...&lt;/h2&gt;
&lt;p&gt;Bill Karwin&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-20 11:57:12.692000-04:00&lt;/p&gt;
&lt;p&gt;I often see programmers try to make generalized rules to make their job
easier. Everyone is seeking a Golden Hammer. In truth, inheritance and
delegation both have advantages in different circumstances, and we
should use the right tool for the job. Deciding which is the right tool
in a given circumstance is the process of OO design.&lt;/p&gt;
&lt;p&gt;But unless we can articulate the right way to employ inheritance vs.
delegation in a single succinct paragraph written at an 8th grade
reading level, there will always be a large portion of software
developers who want to simplify by saying &amp;quot;always&amp;quot; or &amp;quot;never&amp;quot; use one or
the other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="these-problems-are-best-solved-by-using-functions"&gt;
&lt;h2&gt;These problems are best solved by using functions ...&lt;/h2&gt;
&lt;p&gt;Jon Harrop&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-21 16:30:21.815000-04:00&lt;/p&gt;
&lt;p&gt;These problems are best solved by using functions instead of objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whether-the-first-problems-is-best-solved-with-fun"&gt;
&lt;h2&gt;Whether the first problems is best solved with fun...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-22 03:00:47.734000-04:00&lt;/p&gt;
&lt;p&gt;Whether the first problems is best solved with functions or polymorphism
depends on analysis of the likely changes. New functions/New Classes.
If new functions are constantantly being added to a fairly static set of
classes, functions (perhaps structured as visitor) are indeed better
than polymorphism.&lt;/p&gt;
&lt;p&gt;If new classes are being added with a large set of independent
functions, classes are better.&lt;/p&gt;
&lt;p&gt;At PyCon there was a talk where the use of patterns was identified to
frequently indicate a work around for a missing feature. Perhaps using
strategy is a work around for not being able to transmute an objects
class.&lt;/p&gt;
&lt;p&gt;Since languages provide fairly weak support for delegation, I frequently
use inheritance. When I get more experience with a language with good
support for delegation I will be more aware of where inheritance is
really missed.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="polymorphism"></category><category term="#python"></category><category term="object-oriented design"></category></entry><entry><title>The First Number Sticks Forever</title><link href="https://slott56.github.io/2009_06_19-the_first_number_sticks_forever.html" rel="alternate"></link><published>2009-06-19T21:58:00-04:00</published><updated>2009-06-19T21:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-19:/2009_06_19-the_first_number_sticks_forever.html</id><summary type="html">&lt;p&gt;Two months ago, we looked at some Data Warehouse design information.&lt;/p&gt;
&lt;p&gt;It looked like 8 months of work. It might be finished by year-end.
Fatal mistake: we gave a &amp;quot;number&amp;quot;. Year-end.&lt;/p&gt;
&lt;p&gt;We did due diligence, investigating source applications, data marts,
subject areas, etc. And, the client delayed their decision-making
process …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two months ago, we looked at some Data Warehouse design information.&lt;/p&gt;
&lt;p&gt;It looked like 8 months of work. It might be finished by year-end.
Fatal mistake: we gave a &amp;quot;number&amp;quot;. Year-end.&lt;/p&gt;
&lt;p&gt;We did due diligence, investigating source applications, data marts,
subject areas, etc. And, the client delayed their decision-making
process.&lt;/p&gt;
&lt;p&gt;After the investigation, we created a detailed estimating model. We
didn't create a waterfall schedule. Instead, we defined a typical
release and sprint structure and a backlog.&lt;/p&gt;
&lt;div class="section" id="the-unacceptable-revision"&gt;
&lt;h2&gt;The Unacceptable Revision&lt;/h2&gt;
&lt;p&gt;We wound up with 9 months of work, beginning next month.&lt;/p&gt;
&lt;p&gt;Our sales person was appalled -- shocked! -- that we could no longer
make year-end.&lt;/p&gt;
&lt;p&gt;&amp;quot;Duh,&amp;quot; we said. &amp;quot;It's a month longer, starting three months later.
What do you want?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;We can't tell the customer that,&amp;quot; the sales person said.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="stick-to-your-guns-ask-the-sales-person-what-feat"&gt;
&lt;h2&gt;Stick to your guns! Ask the sales person what feat...&lt;/h2&gt;
&lt;p&gt;Kent Johnson&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-20 10:23:59.545000-04:00&lt;/p&gt;
&lt;p&gt;Stick to your guns! Ask the sales person what features he/she would like
to cut so you can make the year-end deadline.&lt;/p&gt;
&lt;p&gt;Situation: normal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-39-m-not-sure-how-you-39-d"&gt;
&lt;h2&gt;I&amp;amp;#39;m not sure how you&amp;amp;#39;d...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-21 19:12:18.661000-04:00&lt;/p&gt;
&lt;p&gt;Situation: normal.&lt;/p&gt;
&lt;p&gt;I'm not sure how you'd fix this in a commercial environment, but what I
try to do is get in the same room as the 'salesperson' and the 'client'
every now and then, and force everyone to tally their books together.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="agile"></category><category term="estimating"></category></entry><entry><title>How to Derail Use Case Analysis: Focus on the Processes</title><link href="https://slott56.github.io/2009_06_14-how_to_derail_use_case_analysis_focus_on_the_processes.html" rel="alternate"></link><published>2009-06-14T15:14:00-04:00</published><updated>2009-06-14T15:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-14:/2009_06_14-how_to_derail_use_case_analysis_focus_on_the_processes.html</id><summary type="html">&lt;p&gt;It's easy to prevent successful use case analysis: make it into an
exercise of defining lots of &amp;quot;processes&amp;quot; in excruciating detail.&lt;/p&gt;
&lt;p&gt;First, ignore all &amp;quot;objects&amp;quot; definition.  All business domain entities
-- and actors -- must be treating as second class artifacts.&lt;/p&gt;
&lt;p&gt;Second, define everything as a process.  A domain entity is just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's easy to prevent successful use case analysis: make it into an
exercise of defining lots of &amp;quot;processes&amp;quot; in excruciating detail.&lt;/p&gt;
&lt;p&gt;First, ignore all &amp;quot;objects&amp;quot; definition.  All business domain entities
-- and actors -- must be treating as second class artifacts.&lt;/p&gt;
&lt;p&gt;Second, define everything as a process.  A domain entity is just some
stuff that must be mapped between processes.  Act like the entity
doesn't really have independent existence.&lt;/p&gt;
&lt;div class="section" id="symptoms"&gt;
&lt;h2&gt;Symptoms&lt;/h2&gt;
&lt;p&gt;You may be trying to do use case analysis, but if you have these
symptoms, it might be time to step away from the process flows and
ask what you're really doing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There Are No Actors&lt;/strong&gt;.  Well, actually, there's one actor: &amp;quot;user&amp;quot;.
When all of your use cases have one actor, you've forgotten the
users and their goals.  Stop writing the processes and take a step
back.  Who are the users?  What are they trying to accomplish?
Where is their data?  When is it available?  What interactions
with a system would make them happier and more productive?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Every Action Defines A New Class of Actors&lt;/strong&gt;.  You have actors like
content creators, content updater, content quality assurance,
content refinement, content link checking, do this and do that.
Too many actors is easy to spot because the attributes and
behaviors of all those actors are essentially identical.  In this
example, they all edit content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Each Use Case is a Wizard&lt;/strong&gt;.  If each use case is a strictly
sequential input of a data element followed by &amp;quot;click next to
continue&amp;quot;, you've taken away the actor's obligation to make
decisions and take action on those decisions.  If you're lucky,
you've got a use case for each individual goal the actor has.
More typically, you've overlooked a fair number of the actor's
goals in your zeal of automating every step of one goal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You Need an &amp;quot;Overall Flow&amp;quot; or Sequence for the Use Cases&lt;/strong&gt;.   If
your use cases have to be exercised in one -- and only one --
order, you've taken away the actor's goals&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collaboration"&gt;
&lt;h2&gt;Collaboration&lt;/h2&gt;
&lt;p&gt;Use Case analysis describes the collaboration between actors and a
system to create something of value.  If the system is described
by wizards or modal dialogs that completely constrain the
conversation to one where the system asks the actor for
information, something's terribly wrong.&lt;/p&gt;
&lt;p&gt;The point is to describe the system as a series of &amp;quot;interfaces&amp;quot;,
each of which has a use case.  The actors interact with the system
through those interfaces.    The actor is free to gather
information from the system, make decisions, and take action via
the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="war-story"&gt;
&lt;h2&gt;War Story&lt;/h2&gt;
&lt;p&gt;The users had a legacy &amp;quot;application&amp;quot; that was a pile of SAS code
that did some processing on the source data before reporting.&lt;/p&gt;
&lt;p&gt;The use cases were -- essentially -- &amp;quot;1.  Actor runs this program
2. System does all this stuff.&amp;quot;  The &amp;quot;all this stuff&amp;quot; was usually
a lengthy, complex reverse engineering exercise trying to discern
what the SAS code did.&lt;/p&gt;
&lt;p&gt;No mention of the business value.  No reason why.  And no room to
implement a better process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="war-story-1"&gt;
&lt;h2&gt;War Story&lt;/h2&gt;
&lt;p&gt;Analyst is pretty sure the user wants collaborative editing.  The
analyst has a pretty good &amp;quot;epic&amp;quot; (not a proper user story, but a
summary of a number of user stories) that describes creating,
modifying and extracting from a collaboratively edited document.&lt;/p&gt;
&lt;p&gt;The initial discussion lead to every single verb somehow defining
a separate actor.  In the original epic, there were exactly two
actors, one who added or elided certain details for the benefit of
another.&lt;/p&gt;
&lt;p&gt;Later discussions lead to a single &amp;quot;User&amp;quot; actor and the craziest
patchwork of use cases.  Random &amp;quot;might be nice to have&amp;quot;s crept in
to the analysis, and the original &amp;quot;epic&amp;quot; was dropped.  No trace of
it remained, making it very difficult to determine priorities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="war-story-2"&gt;
&lt;h2&gt;War Story&lt;/h2&gt;
&lt;p&gt;Users had developed a complex work-around because they didn't have
all the equipment they needed in their local office.  It involved
mailing CD's from one office to another to prevent network
bandwidth problems.  The business analysts wanted to capture this
process, even though parts of it created no value.&lt;/p&gt;
&lt;p&gt;It took a fair amount of work to get the analysts to stop
documenting implementation details (mailing addresses, Fedex
account numbers) and start documenting interactions and the
business value that was created.&lt;/p&gt;
&lt;p&gt;Many process steps are physical moves and don't involve making
information available for decision-making.  Those no-decision
physical move steps should not be described in a use case.
Perhaps in an appendix, but their incidental because they're just
the current implementation.  A use case should have the essence of
the business value and how the actor uses the system to create
that value.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="analysis"></category><category term="use case"></category></entry><entry><title>Agile Methods, Inversion of Control, Emergent Behavior</title><link href="https://slott56.github.io/2009_06_10-agile_methods_inversion_of_control_emergent_behavior.html" rel="alternate"></link><published>2009-06-10T09:14:00-04:00</published><updated>2009-06-10T09:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-10:/2009_06_10-agile_methods_inversion_of_control_emergent_behavior.html</id><summary type="html">&lt;p&gt;I've run in to some Agility questions recently.  Questions that indicate
that some people just don't like the Inversion of Control aspect of
Agile methods.&lt;/p&gt;
&lt;p&gt;We used to call IoC &amp;quot;Emergent Behavior&amp;quot;.  The system isn't designed
from top-down to fill specific use cases.  Instead, the system is
designed so that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've run in to some Agility questions recently.  Questions that indicate
that some people just don't like the Inversion of Control aspect of
Agile methods.&lt;/p&gt;
&lt;p&gt;We used to call IoC &amp;quot;Emergent Behavior&amp;quot;.  The system isn't designed
from top-down to fill specific use cases.  Instead, the system is
designed so that the interaction of various objects will fill the use
cases.  Overall control does not reside in one place.&lt;/p&gt;
&lt;p&gt;An Agile project is the same phenomenon.  We're not going to plan the
entire effort.  Instead, we're going to do some things that -- in the
long run -- will lead to more useful software.&lt;/p&gt;
&lt;div class="section" id="agile-question-1"&gt;
&lt;h2&gt;Agile Question 1&lt;/h2&gt;
&lt;p&gt;&amp;quot;Why focus on a few use cases up front?  If we do that, then new
requirements will arrive as we develop, leading to endless rework.
Why can't we enumerate all use cases now?&amp;quot;&lt;/p&gt;
&lt;p&gt;Right and Wrong.  Right: we will do endless rework.  Wrong: we will
deliver something that works before starting the rework cycle.&lt;/p&gt;
&lt;p&gt;For some reason, focus on a use case is really hard.  Some people
feel that they can't build &amp;quot;just enough&amp;quot; software, but must
completely understand every nuance before they can do anything.&lt;/p&gt;
&lt;p&gt;I think this is a paralyzing fear of failure, coupled with bad
experiences from management that equated all rework with failure.&lt;/p&gt;
&lt;p&gt;The Agile approach of &amp;quot;build something now&amp;quot; is trumped by their
personal failure/rework issues, leading to bizarre designs that
include lots of things that aren't in the use case under
construction.  It leads to lots of &amp;quot;why are you doing this?&amp;quot;
conversations with lots of &amp;quot;it might be needed in the future.&amp;quot;&lt;/p&gt;
&lt;p&gt;It isn't needed now.  Let it go.  Merely having thought of it, and
leaving a stub in the design, is enough for now.  When faced with
&amp;quot;attribute vs. property vs. method&amp;quot; questions, those future
considerations can help steer you to one or the other.  But don't
give in to designing and building the future.  Just leave space for
it.&lt;/p&gt;
&lt;p&gt;An Agile approach is about an emergent behavior.  It's built from the
edges in.  There's an inversion of control here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="agile-question-2"&gt;
&lt;h2&gt;Agile Question 2&lt;/h2&gt;
&lt;p&gt;&amp;quot;Can't you just add a button that says X?  You're supposed to be
Agile, why can't you just add this button to the page?&amp;quot;&lt;/p&gt;
&lt;p&gt;First, we're not done with what you asked for two weeks ago.  Until
that's done and approved, we're not on speaking terms.&lt;/p&gt;
&lt;p&gt;But, more importantly, &amp;quot;adding a button&amp;quot; isn't part of any existing
use case.  You're not changing priorities with this request, you're
making stuff up.&lt;/p&gt;
&lt;p&gt;Making stuff up isn't bad, per se.  Making up a random piece of
behavior, with no actor, no goal, and no business value is bad.  Who
will click that button?  What will the business purpose be?  What
result will help that person make a decision and take action?&lt;/p&gt;
&lt;p&gt;&amp;quot;It's just to show a customer.&amp;quot;  Good start.  What's the customer's
role?  What do they do?  Are we showing the customer's sales folks
how they use this application?  Are we showing the customer's finance
folks how they use this application?  Are we showing the operational
folks?  Are we showing the underwriting folks?  In short, &amp;quot;who's the
actor?&amp;quot;&lt;/p&gt;
&lt;p&gt;An Agile approach is about building software someone can use.
Without a use case, we're just building software haphazardly.  A use
case isn't an elaborate document, it's just an actor with a goal who
interacts with the system to create something of value.  Four simple
clauses.&lt;/p&gt;
&lt;p&gt;From the use case, we can work out an implementation.  There is no
&amp;quot;inversion of control&amp;quot; when moving from requirements to design.   The
requirements do not emerge from the design.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="wonderful-blog-amp-good-post-its-really-helpful"&gt;
&lt;h2&gt;Wonderful blog &amp;amp;amp; good post.Its really helpful ...&lt;/h2&gt;
&lt;p&gt;poona&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2012-07-06 07:48:47.082000-04:00&lt;/p&gt;
&lt;p&gt;Wonderful blog &amp;amp; good post.Its really helpful for me, awaiting for more
new post. Keep Blogging!
&lt;a class="reference external" href="http://www.cprime.com/agile/agile-coaching-consulting.html"&gt;Agile
Coaching&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="agile"></category></entry><entry><title>A "Don't Break the Build" Tip for Solo Python Developers</title><link href="https://slott56.github.io/2009_06_08-a_dont_break_the_build_tip_for_solo_python_developers.html" rel="alternate"></link><published>2009-06-08T16:41:00-04:00</published><updated>2009-06-08T16:41:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-08:/2009_06_08-a_dont_break_the_build_tip_for_solo_python_developers.html</id><summary type="html">&lt;p&gt;One of the Agile practices is &lt;a class="reference external" href="http://martinfowler.com/articles/continuousIntegration.html"&gt;Continuous
Integration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fowler suggests that everyone commits every day.  In &lt;a class="reference external" href="http://www.elssamadisy.com/books.html"&gt;Elssamadisy's
book&lt;/a&gt; includes specific advice
on why a daily check-in helps.&lt;/p&gt;
&lt;p&gt;Some folks call this the &amp;quot;Don't Break the Build&amp;quot; practice.&lt;/p&gt;
&lt;p&gt;But what does that mean for Python where there is no build?  And …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the Agile practices is &lt;a class="reference external" href="http://martinfowler.com/articles/continuousIntegration.html"&gt;Continuous
Integration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fowler suggests that everyone commits every day.  In &lt;a class="reference external" href="http://www.elssamadisy.com/books.html"&gt;Elssamadisy's
book&lt;/a&gt; includes specific advice
on why a daily check-in helps.&lt;/p&gt;
&lt;p&gt;Some folks call this the &amp;quot;Don't Break the Build&amp;quot; practice.&lt;/p&gt;
&lt;p&gt;But what does that mean for Python where there is no build?  And what
does it mean for a solo developer where there aren't any
consequences?&lt;/p&gt;
&lt;div class="section" id="the-no-build-build"&gt;
&lt;h2&gt;The No-Build Build&lt;/h2&gt;
&lt;p&gt;The C++, Java, C# folks all have a really important, multi-step daily
build.  The code has to compile; it has to be packaged into JAR's (or
DLL's or whatever).  Perhaps higher-level packages like WAR's or
EAR's need to be built.  Then you can run unit tests.&lt;/p&gt;
&lt;p&gt;We Python folks don't have anything between code and unit test --
there's no real packaging.  This makes the daily build practice seem
a little silly.&lt;/p&gt;
&lt;p&gt;However, the daily &amp;quot;commit and run all the tests&amp;quot; is perhaps more
important in Python than it is in Java (or C++ or C#.)  Even without
any actual build activity, the daily build is still an essential
practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-go-wrong"&gt;
&lt;h2&gt;Things Go Wrong&lt;/h2&gt;
&lt;p&gt;In Python, you've got two fundamental things which a daily check-in
will spot.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Bugs.  All of the logic errors that a daily unit test will spot.&lt;/li&gt;
&lt;li&gt;Bad Refactoring.  This is more subtle.  Not all refactoring errors
lead directly to a bug that you can detect.  Indeed, there are a
significant refactoring problem that I fight with weekly.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="no-sense-of-commitment"&gt;
&lt;h2&gt;No Sense of Commitment&lt;/h2&gt;
&lt;p&gt;Refactoring is central to Agile development.  It is inevitable
that you realize that you've misnamed, misplaced or overused some
module or package and need to either rename it or delete it.&lt;/p&gt;
&lt;p&gt;In Python, you've got to use `grep` (or something similar) to
check your application for a clean change in names.  And you've
got to double-check by using SVN to delete or rename the module.&lt;/p&gt;
&lt;p&gt;Adding a new module, however, is more subtle.  Adding a new module
is easy and quick.  You write it, you use it, you unit test and
you're good to go.&lt;/p&gt;
&lt;p&gt;Except, of course, if you forget to check it into SVN.  If it's
not in SVN, it will still pass all your local unit tests.  It's
those &amp;quot;daily build&amp;quot; unit tests that will break on a missing
module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vm-to-the-rescue"&gt;
&lt;h2&gt;VM To The Rescue&lt;/h2&gt;
&lt;p&gt;Solo developers, of course, have trouble with the nightly build.
First, they can skip it.  Second, and more important for folks
saddled with Windows, you don't often have a clean QA user
separate from you, the developer.&lt;/p&gt;
&lt;p&gt;A VM is a very, very nice thing to have.  You fire up
&lt;a class="reference external" href="http://www.vmware.com/"&gt;VMWare&lt;/a&gt; (or similar player) and run
your daily build in a separate machine.  For a solo developer, you
can do the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Make changes, unit test.&lt;/li&gt;
&lt;li&gt;Commit the changes.&lt;/li&gt;
&lt;li&gt;Fire up the VM.  Do an SVN UP.  Run the unit tests again.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When a Python app crashes and burns on the VM, 80% of the time,
it's a missing commit.  The rest of the time it's a failed
configuration change for any differences between development
and QA.&lt;/p&gt;
&lt;p&gt;Now you can -- confidently -- turn code over to a sysadmin,
knowing that it actually will work.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="for-buildbot"&gt;
&lt;h2&gt;+1 for buildbot.&lt;/h2&gt;
&lt;p&gt;Dougal&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-09 06:21:20.484000-04:00&lt;/p&gt;
&lt;p&gt;+1 for buildbot.&lt;/p&gt;
&lt;p&gt;Be careful... Buildbot != Buildout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="buildbot-is-p"&gt;
&lt;h2&gt;Buildbot is p...&lt;/h2&gt;
&lt;p&gt;Adam&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-09 12:16:33.952000-04:00&lt;/p&gt;
&lt;p&gt;Be careful... Buildbot != Buildout.
Buildbot is probably overkill for single developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtualenv-in-some-cases-can-accomplish-the-same-t"&gt;
&lt;h2&gt;virtualenv in some cases can accomplish the same t...&lt;/h2&gt;
&lt;p&gt;John&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-10 10:48:05.747000-04:00&lt;/p&gt;
&lt;p&gt;virtualenv in some cases can accomplish the same thing as a virtual
machine, since it can give you a &amp;quot;clean&amp;quot; environment to
build/install/test from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-commit-hook-that-does-a-fresh-checkout-and-ru"&gt;
&lt;h2&gt;Post-commit hook that does a fresh checkout and ru...&lt;/h2&gt;
&lt;p&gt;Michael Foord&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-09 13:53:34.346000-04:00&lt;/p&gt;
&lt;p&gt;Post-commit hook that does a fresh checkout and runs all your tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="buildout-is-also-a-useful-tool-for-running-39-bu"&gt;
&lt;h2&gt;Buildout is also a useful tool for running &amp;amp;#39;bu...&lt;/h2&gt;
&lt;p&gt;boothead&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-09 04:36:21.252000-04:00&lt;/p&gt;
&lt;p&gt;Buildout is also a useful tool for running 'builds'. When you buildout
your project it's all in it's own sandbox with all of its own
dependencies.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="agile"></category><category term="#python"></category><category term="tdd"></category></entry><entry><title>Devastating Design Changes -- An Agile Methods Story</title><link href="https://slott56.github.io/2009_06_04-devastating_design_changes_an_agile_methods_story.html" rel="alternate"></link><published>2009-06-04T09:10:00-04:00</published><updated>2009-06-04T09:10:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-04:/2009_06_04-devastating_design_changes_an_agile_methods_story.html</id><summary type="html">&lt;p&gt;We have a design, we have code and we have tests that all pass.&lt;/p&gt;
&lt;p&gt;Tuesday, we got some new input data that just wouldn't work.&lt;/p&gt;
&lt;p&gt;What -- if anything -- went wrong?&lt;/p&gt;
&lt;p&gt;Agile is as Agile Does&lt;/p&gt;
&lt;p&gt;We're following an Agile approach for several reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I'm too lazy to draw up an …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;We have a design, we have code and we have tests that all pass.&lt;/p&gt;
&lt;p&gt;Tuesday, we got some new input data that just wouldn't work.&lt;/p&gt;
&lt;p&gt;What -- if anything -- went wrong?&lt;/p&gt;
&lt;p&gt;Agile is as Agile Does&lt;/p&gt;
&lt;p&gt;We're following an Agile approach for several reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I'm too lazy to draw up an elaborate project plan full of lies
(&amp;quot;assumptions&amp;quot;).&lt;/li&gt;
&lt;li&gt;Our requirements were two versions of a powerpoint slide  that
showed one use case at the tail-end of a long information
life-cycle.&lt;/li&gt;
&lt;li&gt;Outside the one slide, we had no concrete actors or use cases.  We
had some clue what we were doing, but it involved inventing new
business models for customers -- a challenging thing to
&amp;quot;automate&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Agile approach is that we pick a use case, build some stuff,
and put it into production.&lt;/p&gt;
&lt;p&gt;One consequence of this is rapid response to requirements changes.
Another consequence is fundamental changes to the design.  A
small change to a use case could lead to devastating design
changes.&lt;/p&gt;
&lt;div class="section" id="learning-is-fundamental"&gt;
&lt;h2&gt;Learning is Fundamental&lt;/h2&gt;
&lt;p&gt;Since we didn't have all the requirements (indeed, we barely  had
any,) we knew we'd be learning as we went.  Tuesday's data drop
was one example.&lt;/p&gt;
&lt;p&gt;We have a nice library to handle many of the vagaries of the
Spreadsheet-As-User-Interface (SAUI™) problem.  We use
&lt;a class="reference external" href="http://www.lexicon.net/sjmachin/xlrd.htm"&gt;xlrd&lt;/a&gt; and
&lt;a class="reference external" href="http://docs.python.org/library/csv.html"&gt;csv&lt;/a&gt; modules to
handle basic spreadsheet file formats.  (We have the ElementTree
parser standing by to handle xml, if  necessary.)  We use the rest
of the Python
&lt;a class="reference external" href="http://docs.python.org/library/archiving.html"&gt;archiving&lt;/a&gt;
packages to handle ZIP files of spreadsheets.&lt;/p&gt;
&lt;p&gt;We've broken spreadsheet processing down into layers.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data Source.  All of our various sources offer methods to step
through the sheets and rows.  This minimizes the various file
format differences.  Note that CSV provides cells that are
text, where xlrd provides cells in a variety of data types.  We
have a Cell class hierarchy to implement all the conversions
required.&lt;/li&gt;
&lt;li&gt;Operation.  Each operation (validate, load, delete, etc.) is a
subclass of a common Operation.  This operation is given a
sheet and processes the rows of that sheet.  It doesn't know
anything about the Data Source.&lt;/li&gt;
&lt;li&gt;Builders.  Each row, generally, builds some model object which
is either validated or validated and persisted in the database.
The builder handles the mapping from spreadsheet column to DB
column, along with data type conversions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sadly, we left something out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-devastating-change"&gt;
&lt;h2&gt;The Devastating Change&lt;/h2&gt;
&lt;p&gt;We had no use cases, so we were making things up as we went
along.  We'd made an implicit assumption in our sheet
operations.  All the data we'd been loading was polluted with
rows we had to ignore.  So we tossed a quick-and-dirty little
if-statement down inside one of the sheet operations.&lt;/p&gt;
&lt;p&gt;The new data had slightly different rules for rows we were
supposed to ignore.  The quick-and-dirty little if-statement
broke the loads.&lt;/p&gt;
&lt;p&gt;We have to refactor our sheet operations to hoist out this
if-statement.  We have to use the Strategy pattern to replace
the statement with a formal appeal to a Filter object that
implements the decision.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-analysis"&gt;
&lt;h2&gt;What If Analysis&lt;/h2&gt;
&lt;p&gt;The Cost Of Learning (COL™) was two days.  Half of one day to
find the problem.  Half of another to reason out the root cause
and determine a solution.  Finally, a full day to code and test
the revisions.&lt;/p&gt;
&lt;p&gt;Yes, it took two full days of effort (spread over three
calendar days) to figure out what was wrong.&lt;/p&gt;
&lt;p&gt;What if we had tried a waterfall design?  Would we have found,
designed and resolved this problem in two days?  No earthly
way.  It would have taken two days of brainstorming to think of
the use case.  It would have taken a week of hand-wringing to
work out a be-all-and-do-all processing pipeline for
spreadsheet data -- one that included dynamic filtering.&lt;/p&gt;
&lt;p&gt;Instead, we built a processing pipeline that worked.  Now we're
expanding that processing pipeline to add a feature.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="csv"></category><category term="xlrd"></category><category term="agile"></category></entry><entry><title>Think Once -- Code Twice</title><link href="https://slott56.github.io/2009_06_02-think_once_code_twice.html" rel="alternate"></link><published>2009-06-02T12:50:00-04:00</published><updated>2009-06-02T12:50:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-06-02:/2009_06_02-think_once_code_twice.html</id><summary type="html">&lt;p&gt;Some thoughts for the day&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Quick And Dirty == Guaranteed Rework&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;He Who Codes First Loses&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Think Once -- Code Twice&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Admin's Law: It's Always Permissions&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Programmer's Law: If it's not permissions, it's the path&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;If it seems hard, you're doing it wrong&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;One-Off == The First of Many&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Requirements Translation: Never == Rarely …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Some thoughts for the day&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Quick And Dirty == Guaranteed Rework&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;He Who Codes First Loses&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Think Once -- Code Twice&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Admin's Law: It's Always Permissions&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Programmer's Law: If it's not permissions, it's the path&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;If it seems hard, you're doing it wrong&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;One-Off == The First of Many&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Requirements Translation: Never == Rarely, Always == Mostly&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Things Change: Generalize and Parameterize&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Technologies"></category><category term="aphorism"></category></entry><entry><title>Updates to Building Skills in Python</title><link href="https://slott56.github.io/2009_05_28-updates_to_building_skills_in_python.html" rel="alternate"></link><published>2009-05-28T10:16:00-04:00</published><updated>2009-05-28T10:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-28:/2009_05_28-updates_to_building_skills_in_python.html</id><summary type="html">&lt;p&gt;I got a bug report (back in April) about an exercise in &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html"&gt;Building Skills
in Python&lt;/a&gt;.  It was
a change from 2.2 that I never validated in 2.5.   Thanks to my readers
for responding with questions and complaints.&lt;/p&gt;
&lt;p&gt;I've finally updated and posted the revisions.&lt;/p&gt;
&lt;p&gt;Further, after some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got a bug report (back in April) about an exercise in &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html"&gt;Building Skills
in Python&lt;/a&gt;.  It was
a change from 2.2 that I never validated in 2.5.   Thanks to my readers
for responding with questions and complaints.&lt;/p&gt;
&lt;p&gt;I've finally updated and posted the revisions.&lt;/p&gt;
&lt;p&gt;Further, after some
&lt;a class="reference external" href="http://stackoverflow.com/search?q=%5Bpython%5D+class+instance"&gt;questions&lt;/a&gt;
on Stack Overflow, I've decided to revisit parts of &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/htmlchunks/ch21.html"&gt;Chapter
21&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Specifically &lt;a class="reference external" href="http://stackoverflow.com/questions/900929/need-help-with-the-class-and-instance-concept-in-python"&gt;this
question&lt;/a&gt;
leads me to conclude that there's an audience that's served by a
little more depth in this area.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="thanks-i-still-haven-t-written-a-link-checker-fo"&gt;
&lt;h2&gt;Thanks!  I still haven't written a link checker fo...&lt;/h2&gt;
&lt;p&gt;S.Lott&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-05-31 08:14:34.101000-04:00&lt;/p&gt;
&lt;p&gt;Thanks! I still haven't written a link checker for Sphinx/RST documents.
I guess that's REALLY important, not just a good idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-building-skills-in-python-page-the-link-to"&gt;
&lt;h2&gt;On the Building Skills in Python page, the link to...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-05-30 04:28:25.825000-04:00&lt;/p&gt;
&lt;p&gt;On the Building Skills in Python page, the link to pdf file is wrong,
should be:
&lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python/pythonbook-2.5.pdf"&gt;http://homepage.mac.com/s_lott/books/python/pythonbook-2.5.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category></entry><entry><title>That's odd -- Python faster than Java</title><link href="https://slott56.github.io/2009_05_27-thats_odd_python_faster_than_java.html" rel="alternate"></link><published>2009-05-27T20:43:00-04:00</published><updated>2009-05-27T20:43:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-27:/2009_05_27-thats_odd_python_faster_than_java.html</id><summary type="html">&lt;p&gt;Here's an amazing Stack Overflow
&lt;a class="reference external" href="http://stackoverflow.com/questions/918359/my-python-program-executes-faster-than-my-java-version-of-the-same-program-what"&gt;question&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The follow-up conversation is great stuff.&lt;/p&gt;
&lt;p&gt;The question shows two versions of approximately the same processing.
Python is faster than Java.  That's unexpected.&lt;/p&gt;
&lt;p&gt;Java has static compilation and the hot-spot translation to machine
code.  Apparently, Python has some optimizations that are just as
valuable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's an amazing Stack Overflow
&lt;a class="reference external" href="http://stackoverflow.com/questions/918359/my-python-program-executes-faster-than-my-java-version-of-the-same-program-what"&gt;question&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The follow-up conversation is great stuff.&lt;/p&gt;
&lt;p&gt;The question shows two versions of approximately the same processing.
Python is faster than Java.  That's unexpected.&lt;/p&gt;
&lt;p&gt;Java has static compilation and the hot-spot translation to machine
code.  Apparently, Python has some optimizations that are just as
valuable.&lt;/p&gt;
</content><category term="Technologies"></category><category term="performance"></category><category term="#python"></category><category term="java"></category></entry><entry><title>Semantic Markup with Docutils Interpreted Text Roles</title><link href="https://slott56.github.io/2009_05_27-semantic_markup_with_docutils_interpreted_text_roles.html" rel="alternate"></link><published>2009-05-27T12:40:00-04:00</published><updated>2009-05-27T12:40:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-27:/2009_05_27-semantic_markup_with_docutils_interpreted_text_roles.html</id><summary type="html">&lt;p&gt;A resume is a slippery thing -- a package of semi-structured data.&lt;/p&gt;
&lt;p&gt;It has a kind of database-like feel to it, but there are so many
exceptions and special cases that the database never works out quite
the way you wanted.&lt;/p&gt;
&lt;p&gt;For example, I've got -- essentially -- one employer over the past …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A resume is a slippery thing -- a package of semi-structured data.&lt;/p&gt;
&lt;p&gt;It has a kind of database-like feel to it, but there are so many
exceptions and special cases that the database never works out quite
the way you wanted.&lt;/p&gt;
&lt;p&gt;For example, I've got -- essentially -- one employer over the past
30+ years.  But I've been on hundreds of projects for almost 100
different clients.  Since projects overlap, there's no tidy timeline.
The database has a token &amp;quot;Employer&amp;quot; table, a &amp;quot;Client&amp;quot; table, a
&amp;quot;Project&amp;quot;, which is an association between &amp;quot;Client&amp;quot; and &amp;quot;Employer&amp;quot;.
For each &amp;quot;Project&amp;quot; I can have a number of roles or positions.  Most
importantly, each project has a large number of hardware, software,
skill, language and other &amp;quot;features&amp;quot; to it.&lt;/p&gt;
&lt;div class="section" id="relax"&gt;
&lt;h2&gt;Relax&lt;/h2&gt;
&lt;p&gt;A more relaxed model is some kind of markup so that keywords can be
identified semantically and culled out to create tag clouds or
indices.&lt;/p&gt;
&lt;p&gt;The usual culprit for mixed-content models like this is XML.  We
would define a DTD or XSD with our tags in a new namespace.  Sadly,
this also means that I have to rewrite my resume into XML.  Not that
bad, but still...&lt;/p&gt;
&lt;p&gt;Can we do similarly detailed semantic markup in
&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/"&gt;RST&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-role-does-these-words-play"&gt;
&lt;h2&gt;What Role Does These Words Play?&lt;/h2&gt;
&lt;p&gt;RST offers a flexible mechanism they called &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/ref/rst/roles.html"&gt;Interpreted Text
Roles&lt;/a&gt;.
There are two parts to getting started with this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Name the role in a &lt;tt class="docutils literal"&gt;.. role:: name&lt;/tt&gt; directive.&lt;/li&gt;
&lt;li&gt;Markup your content with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:name:`words`&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By default, the role name is the class name that will be put into the
HTML &amp;lt;span&amp;gt; tag when the document is written in HTML.  If you want,
you can supply special formatting in addition to marking the words
with a role.&lt;/p&gt;
&lt;p&gt;You can do considerably more with interpreted roles, but we'll look
at creating a tag cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gathering-data"&gt;
&lt;h2&gt;Gathering Data&lt;/h2&gt;
&lt;p&gt;The gathering part is easy.  You can snarf out the interpreted text
roles with a simple visitor-based design.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import sys
from collections import defaultdict
from docutils.core import publish_doctree
from docutils.nodes import SparseNodeVisitor

class RoleVisitor( SparseNodeVisitor ):
    def __init__( self, role=&amp;quot;skill&amp;quot;, *args, **kw ):
        SparseNodeVisitor.__init__( self, *args, **kw )
        self.role= role
        self.cloud = defaultdict(int)
    def visit_inline( self, aNode ):
        if self.role in aNode['classes']:
            self.cloud[ aNode.astext() ] += 1
&lt;/pre&gt;
&lt;p&gt;This visitor will accumulate a map with tag and frequency for a
given role.&lt;/p&gt;
&lt;p&gt;We can parse the RST resume file and accumulate the tag cloud
statistics as follows.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def tagFreq( aFile ):
    source= aFile.read()
    structure= publish_doctree( source )
    skills= RoleVisitor( &amp;quot;skill&amp;quot;, structure)
    structure.walkabout(skills)
    return skills.cloud
&lt;/pre&gt;
&lt;p&gt;Once we have the data we can emit a tag cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frequency-to-font-size"&gt;
&lt;h2&gt;Frequency to Font Size&lt;/h2&gt;
&lt;p&gt;Converting frequencies to font sizes is a little alignment
exercise.   A clever page designer might have clever style names
based on the tag frequency.  I decided to name the styles after
the font-sizes, since that seems simple.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def sizeMap( cloud ):
    &amp;quot;&amp;quot;&amp;quot;Many common tags piled into xx-large.&amp;quot;&amp;quot;&amp;quot;
    size_name = [ 'xx-small', 'x-small', 'small', 'medium', 'large',         'x-large', 'xx-large' ]
    freq=list(set(cloud.values()))
    offset = max( 0, (len(size_name)-len(freq))//2 )
    size_map= {}
    for sz, f in enumerate(sorted(freq)):
        size_map[f]= size_name[sz+offset]
        if sz &amp;lt;&amp;gt; &amp;quot;&amp;quot;:
            #print size
    return size_name, size_map
&lt;/pre&gt;
&lt;p&gt;This assigns all the words that occur just once to the smallest
font.  There are usually a large number of tags that occur just
once.  A few tags will have a large number of occurrences; these
will all wind up with 'xx-large' as their class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="emitting-the-cloud"&gt;
&lt;h2&gt;Emitting The Cloud&lt;/h2&gt;
&lt;p&gt;Writing the tag cloud (in RST) looks this this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def rst( names, sizes, cloud, destination ):
    sys.stdout= destination
    for s in names:
        print &amp;quot;..  role::&amp;quot;, s # The formatting roles that match our CSS.
        print &amp;quot;\n----------\n&amp;quot;
        for k in sorted(cloud):
            print ':%s:`%s`' % ( sizes[cloud[k]], k, )
&lt;/pre&gt;
&lt;p&gt;We can then tack this cloud onto the end of the resume to get a
summary of skills, frameworks, OS's, languages and the like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="style-points"&gt;
&lt;h2&gt;Style Points&lt;/h2&gt;
&lt;p&gt;The docutils section on overriding the style sheet suggests we
include something like the following in the working directory.&lt;/p&gt;
&lt;p&gt;resume.css&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;import url(html4css1.css);
span.xx-small { font-size:0.65em; font-family:sans-serif }
span.x-small { font-size:0.7em; font-family:sans-serif }
span.small { font-size:0.85em; font-family:sans-serif }
span.medium { font-size:1em; font-family:sans-serif }
span.large { font-size:1.3em; font-family:sans-serif }
span.x-large { font-size:1.6em; font-family:sans-serif }
span.xx-large { font-size:1.9em; font-family:sans-serif }
&lt;/pre&gt;
&lt;p&gt;We include this with the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rst2html.py --stylesheet-path=resume.css
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;This makes it much more pleasant to edit my resume.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Make the changes.&lt;/li&gt;
&lt;li&gt;Run the tag-cloud script.&lt;/li&gt;
&lt;li&gt;Run rst2html.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now I just have to remember to do it more often than once every
five years.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="#python"></category><category term="xml"></category></entry><entry><title>ReStructured Text markup and Content Management</title><link href="https://slott56.github.io/2009_05_25-restructured_text_markup_and_content_management.html" rel="alternate"></link><published>2009-05-25T11:40:00-04:00</published><updated>2009-05-25T11:40:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-25:/2009_05_25-restructured_text_markup_and_content_management.html</id><summary type="html">&lt;p&gt;I can't say enough good things about ReStructuredText (RST).  I've
used all of the available markup languages (SGML, HTML and XML).
They have their place, but they all fall short of being truly
usable.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2009_05_20-this_sounds_complicated_because_it_is.html"&gt;This sounds complicated, because it
is&lt;/a&gt; I
reviewed some of my history of cheap content …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I can't say enough good things about ReStructuredText (RST).  I've
used all of the available markup languages (SGML, HTML and XML).
They have their place, but they all fall short of being truly
usable.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2009_05_20-this_sounds_complicated_because_it_is.html"&gt;This sounds complicated, because it
is&lt;/a&gt; I
reviewed some of my history of cheap content management.&lt;/p&gt;
&lt;p&gt;In looking at content of all kinds, I'm finding that RST is much,
much easier to work with than SGML, HTML or XML.  In short, I think
that RST makes the file system into a really good content management
system (CMS).  Unstructured content is a big win.  Structured content
is a &amp;quot;don't care&amp;quot;.  But there's a middle ground of semi-structured
content that requires sophisticated semantic markup.&lt;/p&gt;
&lt;p&gt;SGML At The Dawn Of Time&lt;/p&gt;
&lt;p&gt;When the web started it's ascent (back in the 90's), I was lucky.  I had
already been working with folks that did military contracting, and folks
there had introduced me to
&lt;a class="reference external" href="http://www.webreference.com/dlab/books/html/3-2.html"&gt;SGML&lt;/a&gt;.   When
I moved from SGML to HTML, I saw it as a pleasant simplification because
it had a more-or-less fixed DTD.&lt;/p&gt;
&lt;p&gt;My first personal web pages were lovingly hand-crafted HTML
masterpieces.  (Okay, they were lovingly hand-crafted.)   There was
a lot of work involved in markup, cross-references, and
presentation.&lt;/p&gt;
&lt;p&gt;HTML via a Class Hierarchy&lt;/p&gt;
&lt;p&gt;My first templating was via proper Python classes.  I created class
hierarchies that embodied the page template and filled in required
data.  The heart of each class was an emit method that wrote the
final HTML.&lt;/p&gt;
&lt;p&gt;Variant page layouts and special cases were easily handled by Python
simple inheritance.&lt;/p&gt;
&lt;p&gt;Of course, the big problem is that HTML is just representation.
There's often some bleed-through between the problem domain model
and the HTML representation of that underlying model.  You don't want
your problem domain objects to encode any HTML.  You can have a
generic Tag class, but the Page class is specific to your problem
domain.&lt;/p&gt;
&lt;p&gt;The Python class structure is nice, but it's only suitable for
structured content management.  When you have semi-structured and
unstructured data -- the strong suit of HTML -- you find the class
hierarchy to be too rigid.&lt;/p&gt;
&lt;p&gt;Some time in the early 00's, I discovered
&lt;a class="reference external" href="http://www.cheetahtemplate.org/"&gt;Cheetah&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="html-via-templates"&gt;
&lt;h2&gt;HTML via Templates&lt;/h2&gt;
&lt;p&gt;Cheetah (and template engines like
&lt;a class="reference external" href="http://www.makotemplates.org/docs/"&gt;Mako&lt;/a&gt;,
&lt;a class="reference external" href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt;, and &lt;a class="reference external" href="http://wiki.python.org/moin/Templating"&gt;numerous
others&lt;/a&gt;) did what I
wanted.  A base template was -- effectively -- a superclass.  Each
block in that template could be overridden by a subclass.&lt;/p&gt;
&lt;p&gt;The content, then, becomes a relatively simple template file that
extends a page layout.  You can handle unstructured and
semi-structured content very nicely.  I changed my ways of working
with HTML to leverage this elegant, extensible view of the world.  I
redid my &lt;a class="reference external" href="http://homepage.mac.com/s_lott/steve/"&gt;personal web
site&lt;/a&gt;: the content become a
collection of Cheetah templates that contained all the content.&lt;/p&gt;
&lt;p&gt;Note that I've *added* a markup language.  In addition to HTML, I
also have some Cheetah markup on each page.  While this got me
consistency and flexibility (and a reduction in the volume of stuff
on each page) it did make things slightly more complex.&lt;/p&gt;
&lt;p&gt;Look at &lt;a class="reference external" href="http://cadesignquilts.com/"&gt;http://cadesignquilts.com/&lt;/a&gt; for another example of an
all-Cheetah static site.  I did several sites like this.  The
workflow involved (1) design the overall page, (2) getting the data
into a usable form, (3) generating the page-level template files, and
(4) running Cheetah to emit HTML from the templates.  All static
content.  Runs like lightning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-jsp-distraction"&gt;
&lt;h2&gt;The JSP Distraction&lt;/h2&gt;
&lt;p&gt;Eventually, I started doing development with
&lt;a class="reference external" href="http://struts.apache.org/"&gt;Struts&lt;/a&gt;, which depends heavily on
&lt;a class="reference external" href="http://struts.apache.org/primer.html#jsp"&gt;JSP&lt;/a&gt;.  You have HTML
commingled with Java code.  Plus, you've got custom actions via a
&lt;a class="reference external" href="http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/JSPTags.html"&gt;tag
library&lt;/a&gt;
to extend JSP processing.  You can create page-level templates with a
reasonably smart JSP tag library.&lt;/p&gt;
&lt;p&gt;This template solution doesn't work well for unstructured or
semi-structured data.  It's a pure programming solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docbook-xml-and-semantic-markup"&gt;
&lt;h2&gt;DocBook XML and Semantic Markup&lt;/h2&gt;
&lt;p&gt;I wrote &lt;a class="reference external" href="http://homepage.mac.com/s_lott/books/python.html"&gt;Building Skills in
Python&lt;/a&gt; entirely
in &lt;a class="reference external" href="http://www.apple.com/support/appleworks/"&gt;Appleworks&lt;/a&gt;.  That
was pretty well unmaintainable and unpublishable in that form.&lt;/p&gt;
&lt;p&gt;I converted the text to &lt;a class="reference external" href="http://www.docbook.org/"&gt;DocBook&lt;/a&gt; XML.  I
used the &lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;
outliner to manage the document as a whole.  I wrote my own
publishing workflow to transform the XML to HTML and PDF.   It worked
reasonably well.&lt;/p&gt;
&lt;p&gt;More important, using DocBook reinforced the importance of semantic
markup.  It took me back to my SGML days.  It also showed why and
other HTML presentation things have to be moved out of the document
and into the stylesheet.&lt;/p&gt;
&lt;p&gt;This was a very nice way to handle the semi-structured and
unstructured content in a book.  Direct use of XML is a pain in the
neck.  XML has a lot of syntax.  It's much nicer to do your thinking
with something lighter weight.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="restructured-text-rst-for-unstructured-content"&gt;
&lt;h2&gt;ReStructured Text (RST) for Unstructured Content&lt;/h2&gt;
&lt;p&gt;Somewhere in the late 00's, I found Python's
&lt;a class="reference external" href="http://docutils.sourceforge.net/"&gt;docutils&lt;/a&gt; and
&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt;.  I can't figure
out when I started -- precisely -- but using RST as part of content
management didn't fully click at first.&lt;/p&gt;
&lt;p&gt;After reworking my personal site, which includes a lot of really
unstructured (&amp;quot;random&amp;quot; might be a better word) content, I'm seeing
the value in RST + Filesystem as a CMS.  I think the
&lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt; folks are right.  If you have a
simple markup system and all the filesystem tools that have evolved
over the past few decades, you're covered.&lt;/p&gt;
&lt;p&gt;Further, on larger projects, I've found that I can pop out a nice
template documentation tree with a simple .. toctree:: directive on
the index.rst page and generate a tidy, complete documentation
package without much pain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="structured-content"&gt;
&lt;h2&gt;Structured Content&lt;/h2&gt;
&lt;p&gt;For structured data, you have ordinary classes and programs.  You
have SQL databases, ORM to map to classes; all of that technology.
It's easy to write applications that emit RST which you can then
publish.&lt;/p&gt;
&lt;p&gt;Most structured content can be boiled down to tables and charts.
The .. csv-table:: directive makes it easy to have an application
emit data that you fold into a more elegant-looking report.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-nuance-semi-structured-data"&gt;
&lt;h2&gt;The Nuance -- Semi-Structured Data&lt;/h2&gt;
&lt;p&gt;My worst-case scenarios are my résumés: sailing, programming and
writing.  The data has deep semantic meaning:  it isn't just words.
On the other hand, the data has lots of special-cases and
exceptions: it isn't totally amenable to a database.&lt;/p&gt;
&lt;p&gt;The absolute best part of docutils is that the parser's output is
available for processing.  You can -- easily -- add
&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/howto/rst-directives.html"&gt;directives&lt;/a&gt;
and &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/howto/rst-roles.html"&gt;text
roles&lt;/a&gt;
to create semantic meaning.&lt;/p&gt;
&lt;p&gt;I experimented with XML and YAML for my résumés.  The XML is
cumbersome.  The YAML requires a fairly sophisticated class model to
make use of the information.&lt;/p&gt;
&lt;p&gt;RST with a few text roles, however, rocks.  The .. role:: directive
makes it easy to throw roles into a document for later use by
applications.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="xml"></category><category term="sgml"></category><category term="HTML"></category></entry><entry><title>Open Source Use Rising</title><link href="https://slott56.github.io/2009_05_22-open_source_use_rising.html" rel="alternate"></link><published>2009-05-22T08:01:00-04:00</published><updated>2009-05-22T08:01:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-22:/2009_05_22-open_source_use_rising.html</id><summary type="html">&lt;p&gt;Or so claims SD Times...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sdtimes.com/link/33430"&gt;http://www.sdtimes.com/link/33430&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The decision process includes: &amp;quot;find a low-cost solution&amp;quot;.  More
importantly, it includes &amp;quot;justify the fees to purchase and for
support.&amp;quot;&lt;/p&gt;
&lt;p&gt;This drives down the cost of software and support for commercial
products.   It also rationalizes what your buy when …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Or so claims SD Times...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sdtimes.com/link/33430"&gt;http://www.sdtimes.com/link/33430&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The decision process includes: &amp;quot;find a low-cost solution&amp;quot;.  More
importantly, it includes &amp;quot;justify the fees to purchase and for
support.&amp;quot;&lt;/p&gt;
&lt;p&gt;This drives down the cost of software and support for commercial
products.   It also rationalizes what your buy when you buy a license
and pay for support.&lt;/p&gt;
&lt;p&gt;In the olden days, you just paid.  Now, you debate the merits of
support and determine what you're getting and if the value is
commensurate with the cost.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="check-out-article-in-the-economist-titled-unlocki"&gt;
&lt;h2&gt;Check out article in the Economist titled &amp;quot;Unlocki...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-05-30 12:20:05.684000-04:00&lt;/p&gt;
&lt;p&gt;Check out article in the Economist titled &amp;quot;Unlocking the Cloud&amp;quot;&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="open source"></category></entry><entry><title>Name Matching Alternatives</title><link href="https://slott56.github.io/2009_05_21-name_matching_alternatives.html" rel="alternate"></link><published>2009-05-21T17:05:00-04:00</published><updated>2009-05-21T17:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-21:/2009_05_21-name_matching_alternatives.html</id><summary type="html">&lt;p&gt;The users want to locate people by last name.  They want flexible
matching.  That's not very hard.&lt;/p&gt;
&lt;p&gt;The DBA wants to do some wild-card searches efficiently.  The DBA may
not be responding to the users actual request, making this more
complex than it needs to be.&lt;/p&gt;
&lt;p&gt;I'm not in contact …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The users want to locate people by last name.  They want flexible
matching.  That's not very hard.&lt;/p&gt;
&lt;p&gt;The DBA wants to do some wild-card searches efficiently.  The DBA may
not be responding to the users actual request, making this more
complex than it needs to be.&lt;/p&gt;
&lt;p&gt;I'm not in contact with the users, so I don't know the real
requirements.  I'm hearing this through the DBA-filter (&amp;quot;all singing,
all dancing, all SQL&amp;quot;.)  I may also be hearing this through IT
management filter (&amp;quot;only use technology I recognize from my
programming days&amp;quot;.)&lt;/p&gt;
&lt;p&gt;In my experience, wild-card searches are rarely the user's first
choice.  They want more flexible matching.  While the SQL LIKE-clause
is one solution that might work, it is rarely what the users really
want.&lt;/p&gt;
&lt;p&gt;The DBA knows that the SQL LIKE-clause effectively defeats indexing
and forces row-by-row comparison.  And we all know that row-by-row
processing is evil.&lt;/p&gt;
&lt;div class="section" id="premature-optimization"&gt;
&lt;h2&gt;Premature Optimization&lt;/h2&gt;
&lt;p&gt;Question 1.  Is this premature optimization?&lt;/p&gt;
&lt;p&gt;There's no way to tell.  The database server may be beefy enough and
the query rare enough that a basic LIKE-clause regular expression
will work just fine.&lt;/p&gt;
&lt;p&gt;Step 1.  Benchmark this baseline solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="as-fast-as-possible-in-sql"&gt;
&lt;h2&gt;As Fast as Possible -- in SQL&lt;/h2&gt;
&lt;p&gt;One way to find names quickly is to denormalize the data base.  In
addition to the proper names, also store the soundex of the name.
Since this is stored, and there's no function call in the WHERE
clause, and this is fully indexed, it will find &amp;quot;similar-sounding&amp;quot;
names very quickly.&lt;/p&gt;
&lt;p&gt;Soundex has limitations, so some folks use
&lt;a class="reference external" href="http://forums.oracle.com/forums/thread.jspa?messageID=1304206"&gt;metaphone&lt;/a&gt;.
The principle is the same.  When inserting or updating the name,
also insert (or update) the metaphone of the name.&lt;/p&gt;
&lt;p&gt;This, BTW, does not involve any wild-card.  Except in unusual cases,
it always returns a set of candidates.  And the set of candidates is
a better fit than any wild-card search.   More focused, and the whole
name is considered.&lt;/p&gt;
&lt;p&gt;Step 2.  Prototype the soundex solution.  It's hard to explain, and
impossible to visualize.  Actual result sets make it concrete.
Throw Memory At It&lt;/p&gt;
&lt;p&gt;Here's an alternative that works really well.&lt;/p&gt;
&lt;p&gt;Stop using the database.&lt;/p&gt;
&lt;p&gt;Don't waste brain cells trying to write this kind of super-flexible
search in SQL. It's better done in code.  Write a simple materialized
view with name and PK and nothing else.  Create the smallest possible
table that can be used just for name matching -- nothing else in this
table.  It's little more than an index.&lt;/p&gt;
&lt;p&gt;Write a simple web service that queries this physically small table,
doing a search algorithm.  The web service will locate near-matches
in this small table.  It could return full rows for the top matches,
or simply return the names and PK's for users to pick from.&lt;/p&gt;
&lt;p&gt;You have several candidate algorithms for this server.  A
wisely-written web service can use a combination of algorithms and
return a match score along with the names and PK's.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Soundex/Metaphone match.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="web-service-for-wildcards"&gt;
&lt;h2&gt;Web Service for Wildcards&lt;/h2&gt;
&lt;p&gt;An alternative web service can query the name/PK table using a
nice regular expression library.  Since RE syntax can be complex,
you would translate from a user-friendly syntax to a proper RE
syntax.&lt;/p&gt;
&lt;p&gt;For instance, the LIKE-like syntax can be reformulated to proper
RE syntax.  The %'s become .* and the _'s become .'s.  Or
perhaps you offer your users shell-like syntax.  In this case, the
*'s become .* and the ?'s become .'s.&lt;/p&gt;
&lt;p&gt;Either way, the user's wild-card becomes a proper regular
expression.  The web service queries the table, matching all input
against the RE.  The service could return full rows for the top
matches, or simply return the names and PK's for users to pick
from.&lt;/p&gt;
&lt;p&gt;This little web service can be granted a large amount of memory to
cache large row sets.  Boy will it be fast.&lt;/p&gt;
&lt;p&gt;Also, depending on the pace of change in the underlying table, it
may be possible for this service to query all names into a cache
once every few minutes.   Perhaps it can do this by first making a
SQL request to refresh the materialized view and then a query to
fetch the updated view into memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-the-dba-wants"&gt;
&lt;h2&gt;What the DBA wants&lt;/h2&gt;
&lt;p&gt;The DBA wants some magical pixie dust that somehow makes a query with
a LIKE clause use an index and behave like other properly indexed
columns.&lt;/p&gt;
&lt;p&gt;The actual email enumerated four of the possible ways a LIKE clause
could be used.  I'm guessing the hope was that somehow the
enumeration of a subset of candidate LIKE clauses would help locate
the pixie dust.&lt;/p&gt;
&lt;p&gt;Here's my advice.  If this magical LIKE clause feature already
existed, it would be in the DBA guide.  Since it isn't in the DBA
guide, perhaps it doesn't exist.   Enumerating four use cases (name,
*name, name* and *name*) doesn't help, it's still not going to
work out well.  Remember, SQL's been around in this form for decades;
the LIKE clause continues to be a challenge.&lt;/p&gt;
&lt;p&gt;First, benchmark.  Second, offer the users soundex.  Then, well,
you've got work to do.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="metaphone"></category><category term="soundex"></category><category term="regular expressions"></category><category term="software design"></category><category term="SQL"></category></entry><entry><title>Applet Not Inited; the "Red X" problem</title><link href="https://slott56.github.io/2009_05_21-applet_not_inited_the_red_x_problem.html" rel="alternate"></link><published>2009-05-21T07:21:00-04:00</published><updated>2009-05-21T07:21:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-21:/2009_05_21-applet_not_inited_the_red_x_problem.html</id><summary type="html">&lt;p&gt;I haven't done Applet stuff in years.&lt;/p&gt;
&lt;p&gt;I do -- intensely -- like embedding functionality in web pages.
RIA/Ajax and what-not are something I have trouble with because I'm
not a graphic designer.  Javascript and Applets fall into three clear
categories:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Basic usability.  Javascript offers lots of little enhancements to
HTML …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;I haven't done Applet stuff in years.&lt;/p&gt;
&lt;p&gt;I do -- intensely -- like embedding functionality in web pages.
RIA/Ajax and what-not are something I have trouble with because I'm
not a graphic designer.  Javascript and Applets fall into three clear
categories:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Basic usability.  Javascript offers lots of little enhancements to
HTML presentation that make sense.  Emphasis on &amp;quot;little&amp;quot;.&lt;/li&gt;
&lt;li&gt;Client-side features.  Many things are simple calculators or other
processing that makes sense on the client side -- the relevant
factors can be downloaded and used by an applet or javascript
script.&lt;/li&gt;
&lt;li&gt;Junk.  There are lots of graphical effects that vary from
gratuitous to irritating.  Too many folks in marketing see some
&amp;quot;pop-up&amp;quot; technique and think it's cool.  Worse, they'll take an
application that lacks solid use cases and try to add flashing to
scrolling to emphasize something instead of reducing clutter and
distraction.  Sigh.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="the-common-problems"&gt;
&lt;h2&gt;The Common Problems&lt;/h2&gt;
&lt;p&gt;In all web-based software development, the number one problem is
always permissions.  Always.  In the case of applet development,
this is always hurdle number one.  The file isn't owned by the
right person or doesn't have the right permissions.  You see the
&amp;quot;applet not inited&amp;quot; and &amp;quot;red X icon&amp;quot; as symptoms of the applet not
being downloaded at all.&lt;/p&gt;
&lt;p&gt;The number two problem is access to resources.  Usually this is a
CLASSPATH issue, but it can also be an HTML page with a wrong URI
for the applet's code.  You see the &amp;quot;applet not inited&amp;quot; and &amp;quot;red X
icon&amp;quot; as symptoms of the applet not being referenced correctly, or
not being able to locate all of its parts.&lt;/p&gt;
&lt;blockquote&gt;
[Technically, the basic access comes before permissions, but you
usually don't get access wrong first.  Usually, you get
permissions wrong; later, you discover you have a subtle access
issue.]&lt;/blockquote&gt;
&lt;p&gt;One of the more subtle manifestations are the case-matching
issues.  Your Java class definitions are usually UpperCase.  The
source file and resulting class file will have this same UpperCase
format.  But if you get the case wrong in your HTML, you just get
an applet not inited error.  Arrgh.&lt;/p&gt;
&lt;p&gt;When you don't work with applets all that often, the &amp;quot;applet not
inited&amp;quot; is baffling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="misdirection"&gt;
&lt;h2&gt;Misdirection&lt;/h2&gt;
&lt;p&gt;I wasted hours on Google and Stack Overflow looking up &amp;quot;applet not
inited&amp;quot; and &amp;quot;Red X icon&amp;quot; and similar stuff.&lt;/p&gt;
&lt;p&gt;Then I looked at the HTML I was testing.&lt;/p&gt;
&lt;p&gt;Surprise.  No one had moved the .jar file into the proper
directory.&lt;/p&gt;
&lt;p&gt;There's a lot of stuff on the applet not inited error.  Most of it
misses the usual culprits: permissions and access to the
resources.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hi-friend-congratulations-for-this-nice-looking"&gt;
&lt;h2&gt;Hi Friend,! Congratulations for this nice looking ...&lt;/h2&gt;
&lt;p&gt;Anonymous&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2009-06-08 04:43:59.548000-04:00&lt;/p&gt;
&lt;p&gt;Hi Friend,! Congratulations for this nice looking blog. In this post
everything about Web Development. I am also interested in latest news,
Great idea you know about company background. Increasing your web
traffic and page views
&lt;a class="reference external" href="http://directory.itsolusenz.com/submit-link.php"&gt;Add&lt;/a&gt;, add your
website in www.directory.itsolusenz.com/&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="HTML"></category><category term="applet"></category><category term="java"></category></entry><entry><title>This sounds complicated, because it is</title><link href="https://slott56.github.io/2009_05_20-this_sounds_complicated_because_it_is.html" rel="alternate"></link><published>2009-05-20T07:25:00-04:00</published><updated>2009-05-20T07:25:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-20:/2009_05_20-this_sounds_complicated_because_it_is.html</id><summary type="html">&lt;p&gt;For a while, I generated documentation with
&lt;a class="reference external" href="http://www.cheetahtemplate.org/"&gt;Cheetah&lt;/a&gt;. I wrote bodies as a
fragment of HTML and used Cheetah to wrap those bodies in standard
templates with navigation and branding.
To write my books, I learned &lt;a class="reference external" href="http://www.docbook.org/"&gt;DocBook&lt;/a&gt;
markup and used &lt;a class="reference external" href="http://www.sagehill.net/docbookxsl/"&gt;DocBook XSL&lt;/a&gt;
tools to create HTML and PDF versions of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a while, I generated documentation with
&lt;a class="reference external" href="http://www.cheetahtemplate.org/"&gt;Cheetah&lt;/a&gt;. I wrote bodies as a
fragment of HTML and used Cheetah to wrap those bodies in standard
templates with navigation and branding.
To write my books, I learned &lt;a class="reference external" href="http://www.docbook.org/"&gt;DocBook&lt;/a&gt;
markup and used &lt;a class="reference external" href="http://www.sagehill.net/docbookxsl/"&gt;DocBook XSL&lt;/a&gt;
tools to create HTML and PDF versions of the book's text. Even though
XML is hard to work with, I managed to muddle through. It's painful --
at times -- but doable.&lt;/p&gt;
&lt;blockquote&gt;
[Eventually, I found XMLMind's &lt;a class="reference external" href="http://www.xmlmind.com/xmleditor/"&gt;XML
Editor&lt;/a&gt;.  It rocks.  But that's
off-topic.]&lt;/blockquote&gt;
&lt;p&gt;Then, I fount &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RST&lt;/a&gt; and
&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/tools.html#rst2html-py"&gt;RST2HTML&lt;/a&gt;.
For a while, I wrote my documentation in RST and used a simple
script to create the HTML version of the documentation from RST
source.&lt;/p&gt;
&lt;div class="section" id="why-restructuredtext"&gt;
&lt;h2&gt;Why ReStructuredText?&lt;/h2&gt;
&lt;p&gt;From their site: &amp;quot;reStructuredText is an easy-to-read,
what-you-see-is-what-you-get plaintext markup syntax&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Easy-to-Read.  The markup is very, very simple.  Mostly spacing
and simple quoting.  Yet, for edge cases, there is enough richness
to approach DocBook XML.&lt;/li&gt;
&lt;li&gt;WYSIWYG.  The markup doesn't get in the way; you write the text
with a few conventions for spacing and quoting.&lt;/li&gt;
&lt;li&gt;Plain Text.  A few spacing and quoting rules are used to
distinguish structure from content.  Presentation is a limited
part RST (like HTML where some presentation is present in the
structural markup, but can be avoided.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RST lead me, eventually to &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-secret-of-sphinx"&gt;
&lt;h2&gt;The Secret of Sphinx&lt;/h2&gt;
&lt;p&gt;Sphinx is RST-based markup.  You write in plaintext (plus some
quoting and spacing) and you get an elegant HTML web site with
inter-document references all resolved correctly, contents,
indexes, auto-generated API documentation for your Python
software, syntax coloring, everything.  Wow.&lt;/p&gt;
&lt;p&gt;I can't stop myself from doing everything in Sphinx.  You create a
development structure for your source files.  You use a series of
toctree directives to build the resulting documentation structure
that people will see and use.&lt;/p&gt;
&lt;p&gt;I've decided to convert some ancient Cheetah-based stuff to
Sphinx.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unmarking-up"&gt;
&lt;h2&gt;Unmarking Up&lt;/h2&gt;
&lt;p&gt;Revising HTML-based document bodies to RST is annoying.  It can be
done with &lt;a class="reference external" href="http://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful
Soup&lt;/a&gt;.  The HTML
is pretty regular (and pretty simple) so it wouldn't be too bad.
Except for a bunch of edge cases that have significant
complexity.&lt;/p&gt;
&lt;p&gt;The original Cheetah-based site wasn't purely documentation.  It
doesn't fit the Sphinx use cases perfectly.  A fairly significant
percentage of the Cheetah-based pages are HTML pages with complex,
embedded applets to do calculations.&lt;/p&gt;
&lt;p&gt;These pages are not -- strictly speaking -- documentation.
They're an application.  They contain markup (&amp;lt;embed&amp;gt; mostly)
that RST can't generate.  Further, they have to be unit tested
prior to running Sphinx to build the documentation, since the HTML
is actually part of the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-html"&gt;
&lt;h2&gt;Raw HTML?&lt;/h2&gt;
&lt;p&gt;The applet pages are -- more or less -- raw HTML pages that need
to be folded in with the Sphinx-generated documentation.  Sphinx
has an HTML_STATIC_PATH configuration parameter that can copy
these applications from project folders into destination
directories.&lt;/p&gt;
&lt;p&gt;But this leaves me with dozens of Cheetah-generated pages as part
of this application.  The presence of Cheetah in the midst this
Sphinx operation makes things complicated.&lt;/p&gt;
&lt;p&gt;Or, perhaps it doesn't.&lt;/p&gt;
&lt;p&gt;It turns out that Sphinx is built on
&lt;a class="reference external" href="http://jinja.pocoo.org/2/"&gt;Jinja&lt;/a&gt;.  There's a template engine
under the hood!  That's handy.  That lets me build the application
HTML with a slightly different template engine; one that's
compatible with the rest of the Sphinx-generated site.&lt;/p&gt;
&lt;p&gt;I think I've got a clean, RST-based replacement for my lovingly
hand-crafted HTML.  It's a lot of rework, but the simplification
is of immense value.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="sphinx"></category><category term="#python"></category><category term="jinja"></category><category term="HTML"></category><category term="cheetah"></category></entry><entry><title>Data Structures in Python and SQL</title><link href="https://slott56.github.io/2009_05_17-data_structures_in_python_and_sql.html" rel="alternate"></link><published>2009-05-17T19:54:00-04:00</published><updated>2009-05-17T19:54:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-17:/2009_05_17-data_structures_in_python_and_sql.html</id><summary type="html">&lt;p&gt;This is -- partially -- about the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Object-Relational_impedance_mismatch"&gt;object-relational impedance
mismatch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But it's also about the parallel concepts between objects and
relations.  We'll use Python as our object model.&lt;/p&gt;
&lt;p&gt;First, the obvious.&lt;/p&gt;
&lt;p&gt;A SQL table is a list of rows.  A row is a dictionary that maps a
column name to a column …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is -- partially -- about the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Object-Relational_impedance_mismatch"&gt;object-relational impedance
mismatch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But it's also about the parallel concepts between objects and
relations.  We'll use Python as our object model.&lt;/p&gt;
&lt;p&gt;First, the obvious.&lt;/p&gt;
&lt;p&gt;A SQL table is a list of rows.  A row is a dictionary that maps a
column name to a column value.  A SQL table has a defined type for a
named column; Python doesn't pre-define the type of each column.&lt;/p&gt;
&lt;p&gt;Some folks like to think of a table as a rigidly-defined class, which
is partly true.  It can be rigidly-defined.  However, the extra
meta-data doesn't help much.&lt;/p&gt;
&lt;div class="section" id="indexing"&gt;
&lt;h2&gt;Indexing&lt;/h2&gt;
&lt;p&gt;As a practical matter, most databases go beyond the minimalist
definition of a relationship as a collection of rows.  An index
extends the structure in one of two ways.&lt;/p&gt;
&lt;p&gt;A unique-key index transforms the SQL table into a dictionary that
maps a key to a row.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class UniqueKeyTable( object ):
    def __init__( self ):
        self.rows = {}
    def insert( self, aRow ):
        self.rows[aRow.key()]= [aRow]
&lt;/pre&gt;
&lt;p&gt;The non-unique key index transforms the SQL table into a dictionary
that maps a key to a list of rows.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class KeyedTable( object ):
    def __init__( self ):
        self.rows = collections.defaultdict(list)
    def insert( self, aRow ):
        self.rows[aRow.key()].append( aRow )
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="sql-operations"&gt;
&lt;h2&gt;SQL Operations&lt;/h2&gt;
&lt;p&gt;The single-table SELECT algorithm has a WHERE clause that gets broken
into two parts: key filtering and everything else.&lt;/p&gt;
&lt;p&gt;The basic SELECT looks something like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for k in table.rows[key]:
    for r in table.rows[k]:
        if other_where_clause( r ):
            select_group_by( r )
&lt;/pre&gt;
&lt;p&gt;That's the essential feature of a basic select -- it expresses a
number of design patterns.  There's a key-to-list map, a filter, and
the &amp;quot;select-group-by&amp;quot; map to results.&lt;/p&gt;
&lt;p&gt;In theory, the SELECT operation is the more general &amp;quot;filter&amp;quot;
algorithm, where every row passes through the a general
&lt;tt class="docutils literal"&gt;where_clause_filter&lt;/tt&gt; process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-join-algorithms"&gt;
&lt;h2&gt;The Join Algorithms&lt;/h2&gt;
&lt;p&gt;We have a number of alternative join algorithms.  In some cases, we
have two dictionaries with the same keys.  This leads to a highly
optimized query where one key locates rows on both sides of the join.&lt;/p&gt;
&lt;p&gt;In other cases, we have a kind of nested-loops join.  We find a row
in one table, and use this row's attributes to locate a row in
another table.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Which is Better?&amp;quot; Question&lt;/p&gt;
&lt;p&gt;We always have two alternatives for every algorithm:  the SQL version
and the Python version.  This is an essential issue in resolving the
Object-Relational Impedance mismatch issue.  We can implement our
algorithm on either side: Python objects or SQL relations.&lt;/p&gt;
&lt;p&gt;Note that there's no simple &amp;quot;Use SQL for this&amp;quot; or &amp;quot;Use Python for
that&amp;quot; decision process.  The two structures -- objects and relations
-- are completely isomorphic.  There's no specific set of features
that dominate either representation.&lt;/p&gt;
&lt;p&gt;The literal question that I got was &amp;quot;Should I use a complex data
structure in a programming language or should I use SQL ?&amp;quot;&lt;/p&gt;
&lt;p&gt;Ideally, the answer is &amp;quot;SQL does [X] better&amp;quot;, leading to an easy
decision.  But this kind of answer doesn't exist.&lt;/p&gt;
&lt;p&gt;The two structures are isomorphic; the correct answer is hard to
determine.  You want the RDBMS to filter rows and return the smallest
relevant set of data to the object representation.  While locating
the fewest rows seems simple, a few things make even this hard to
determine.&lt;/p&gt;
&lt;p&gt;While it seems that the RDBMS can be the best way to handle join
algorithms, this doesn't always work.  When we're doing a join
involving small tables, the RDBMS may be less effective than an
in-memory dictionary.  It sometimes occurs that SQL is best for
filtering very large tables only.&lt;/p&gt;
&lt;p&gt;Indeed, the only way to chose among two isomorphic representations
(objects vs. relations) is to benchmark each implementation.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="object-oriented design"></category><category term="SQL"></category></entry><entry><title>Ways to Crush Innovation</title><link href="https://slott56.github.io/2009_05_17-ways_to_crush_innovation.html" rel="alternate"></link><published>2009-05-17T15:42:00-04:00</published><updated>2009-05-17T15:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-17:/2009_05_17-ways_to_crush_innovation.html</id><summary type="html">&lt;p&gt;Check this out:  “&lt;a class="reference external" href="http://sayamindu.randomink.org/ramblings/2009/04/29/why-should-i-bother/"&gt;Why should I
bother&lt;/a&gt;?”.&lt;/p&gt;
&lt;p&gt;All organizations have an “Official Technology List”.  I work
“Enterprise IT”, where the official languages are limited to Java, VB
.Net, C, C++.  After that... well... it may as well be Esperanto or
&lt;a class="reference external" href="http://compsoc.dur.ac.uk/whitespace/"&gt;Whitespace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PHP, for example, is near the top of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check this out:  “&lt;a class="reference external" href="http://sayamindu.randomink.org/ramblings/2009/04/29/why-should-i-bother/"&gt;Why should I
bother&lt;/a&gt;?”.&lt;/p&gt;
&lt;p&gt;All organizations have an “Official Technology List”.  I work
“Enterprise IT”, where the official languages are limited to Java, VB
.Net, C, C++.  After that... well... it may as well be Esperanto or
&lt;a class="reference external" href="http://compsoc.dur.ac.uk/whitespace/"&gt;Whitespace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PHP, for example, is near the top of the
&lt;a class="reference external" href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"&gt;TIOBE&lt;/a&gt;index, but often shunned as “not enterprise ready”.&lt;/p&gt;
&lt;p&gt;I’m using Python and folks have things to say: mostly tongue-clucking
and eye-rolling.  So far, however, it’s working because things are so
easy to develop, test and change.&lt;/p&gt;
</content><category term="Technologies"></category><category term="PHP"></category><category term="#python"></category></entry><entry><title>All Those TODO's</title><link href="https://slott56.github.io/2009_05_17-all_those_todos.html" rel="alternate"></link><published>2009-05-17T15:41:00-04:00</published><updated>2009-05-17T15:41:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-17:/2009_05_17-all_those_todos.html</id><summary type="html">&lt;p&gt;About a year ago, we started out doing Python development with simple
&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/tools.html"&gt;rst2html&lt;/a&gt;documents for requirements, design, etc.  In the code, we had comments
that used &lt;a class="reference external" href="http://epydoc.sourceforge.net/"&gt;epydoc&lt;/a&gt; with the
&lt;a class="reference external" href="http://epydoc.sourceforge.net/manual-epytext.html"&gt;epytext&lt;/a&gt;markup language.&lt;/p&gt;
&lt;p&gt;No, it wasn’t confusing.  Free-text documents (requirements,
architecture, design, test plans, etc.) are easy and fun to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;About a year ago, we started out doing Python development with simple
&lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/tools.html"&gt;rst2html&lt;/a&gt;documents for requirements, design, etc.  In the code, we had comments
that used &lt;a class="reference external" href="http://epydoc.sourceforge.net/"&gt;epydoc&lt;/a&gt; with the
&lt;a class="reference external" href="http://epydoc.sourceforge.net/manual-epytext.html"&gt;epytext&lt;/a&gt;markup language.&lt;/p&gt;
&lt;p&gt;No, it wasn’t confusing.  Free-text documents (requirements,
architecture, design, test plans, etc.) are easy and fun to write in
RST.  Just write.  Leave the formatting to someone else.  A little
semantic markup doesn’t hurt, but you don’t spend hours with MS-Word
trying to  disentangle your bullets and your numbering.&lt;/p&gt;
&lt;p&gt;Adding comments to code in epytext was pretty easy, also.&lt;/p&gt;
&lt;p&gt;Then I discovered &lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;.   Sphinx
can add module documentation to a document tree very elegantly.
Further, Sphinx can pull in RST-formatted module comment strings.  Very
nice.&lt;/p&gt;
&lt;p&gt;Except, of course, we have hundreds of modules in epytext.  Today, I
started tracking down all of the 150+ modules without proper document
strings in RST notation.  Hopefully, this time tomorrow, I’ll have a
much, much better -- and internally consistent -- set of documentation.&lt;/p&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="sphinx"></category><category term="#python"></category><category term="epydoc"></category></entry><entry><title>Multi-threaded apps and module globals</title><link href="https://slott56.github.io/2009_05_17-multi_threaded_apps_and_module_globals.html" rel="alternate"></link><published>2009-05-17T15:40:00-04:00</published><updated>2009-05-17T15:40:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-17:/2009_05_17-multi_threaded_apps_and_module_globals.html</id><summary type="html">&lt;p&gt;Learned about module globals the hard way.&lt;/p&gt;
&lt;p&gt;The mod_wsgi daemon by default spawns 15 threads.  This is important,
but not obvious.&lt;/p&gt;
&lt;p&gt;During load testing, we had intermittent weird errors.  We were seeing
an odd inconsistency in replies.  My experience in creating military
software in the ’80’s leads me to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Learned about module globals the hard way.&lt;/p&gt;
&lt;p&gt;The mod_wsgi daemon by default spawns 15 threads.  This is important,
but not obvious.&lt;/p&gt;
&lt;p&gt;During load testing, we had intermittent weird errors.  We were seeing
an odd inconsistency in replies.  My experience in creating military
software in the ’80’s leads me to put loop-back self-tests everywhere.
One of our loopbacks wasn’t looping back properly.&lt;/p&gt;
&lt;p&gt;The symptom looked like a single value being overwritten.  After a
design review, it appears that one information source -- a module global
-- wasn’t working well.&lt;/p&gt;
&lt;p&gt;Module globals -- like other Singletons -- are a seductive trap.   The
issue is that a multi-threaded application will have one copy of the
module.  The one copy may not be thread safe.&lt;/p&gt;
&lt;p&gt;The problem is that  thread-safety requires some fairly detailed
analysis. Simple unit testing isn’t quite enough.  But the process of
designing for testability is helpful.  Isolation and encapsulation are
important for testability as well as locating thread-safety issues.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="threads"></category></entry><entry><title>Changing Platforms</title><link href="https://slott56.github.io/2009_05_17-changing_platforms.html" rel="alternate"></link><published>2009-05-17T15:35:00-04:00</published><updated>2009-05-17T15:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-17:/2009_05_17-changing_platforms.html</id><summary type="html">&lt;p&gt;iBlog doesn’t work well -- and hasn’t for a while.&lt;/p&gt;
&lt;p&gt;I have iWeb as part of my iLife package -- and I use iLife heavily.&lt;/p&gt;
&lt;p&gt;Perhaps it’s time to move.&lt;/p&gt;
&lt;p&gt;There are some small “howevers” in that.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;344 blog entires that I’d like to migrate to iWeb.  It …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;iBlog doesn’t work well -- and hasn’t for a while.&lt;/p&gt;
&lt;p&gt;I have iWeb as part of my iLife package -- and I use iLife heavily.&lt;/p&gt;
&lt;p&gt;Perhaps it’s time to move.&lt;/p&gt;
&lt;p&gt;There are some small “howevers” in that.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;344 blog entires that I’d like to migrate to iWeb.  It remains to be
seen what I can do about that.  They’re all still on my legacy
“S.Lott - Software Architect” site, so it’s possible to simply refer
to them and otherwise ignore them.  While iBlog has an export, iWeb
doesn’t have an import.&lt;/li&gt;
&lt;li&gt;Google Adsense channel settings.  The iWeb Adsense widget appears to
be a kind of dumb default.  I should probably just insert an HTML
widget (with real Adsense code) instead of using the iWeb Adsense
widget.&lt;/li&gt;
&lt;li&gt;iBlog kindly built automatic links to del.icio.us, digg, furl,
reddit, YahooMyWeb.  I’m not sure how to edit the blog templates here
in iWeb.   The XML files used in the templates are pretty opaque.
I’d like digg, facebook, tweet and track, stumble upon, reddit,
del.icio.us, and yahoo buzz.  But, then I’d need to ferret our the
permalink from iWeb’s internals and generate the HTML.  Sigh.
Perhaps I need
&lt;a class="reference external" href="http://www.zarrastudios.com/ZDS/iWebBuddy.html"&gt;iWebBuddy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some things appear to be a wash.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;iBlog created Haloscan Comment and Trackback links.  iWeb replaces
this with it’s own commenting.&lt;/li&gt;
&lt;li&gt;iBlog created nice Technorati links for related material.  But I
don’t know that this was all that useful, since I never paid close
attention to getting my Technorati tags aligned with everyone else.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="iWeb"></category></entry><entry><title>iWeb -- not so nice</title><link href="https://slott56.github.io/2009_05_14-iweb_not_so_nice.html" rel="alternate"></link><published>2009-05-14T23:11:00-04:00</published><updated>2009-05-14T23:11:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-05-14:/2009_05_14-iweb_not_so_nice.html</id><summary type="html">&lt;p&gt;For techincal blogging (like this) iWeb is weak.&lt;/p&gt;
&lt;p&gt;The total MacOSX integration -- pictures, podcast, etc. -- is nice.
It's very cool for my travelogues. But for code samples and the kind
of customized HTML widgets that are required by Technorati, it's too
hard to deal with.&lt;/p&gt;
&lt;p&gt;The size of the iWeb …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For techincal blogging (like this) iWeb is weak.&lt;/p&gt;
&lt;p&gt;The total MacOSX integration -- pictures, podcast, etc. -- is nice.
It's very cool for my travelogues. But for code samples and the kind
of customized HTML widgets that are required by Technorati, it's too
hard to deal with.&lt;/p&gt;
&lt;p&gt;The size of the iWeb pages is magnificent.  Reading a posting is an
undertaking.  I don't really like that, since this is mostly simple
text; the ultra complex graphics aren't an asset.&lt;/p&gt;
&lt;p&gt;For now, I still have to mess around with the ShareThis link.  I'm
not sure if I like the sophistication of Share This or if I want
button-by-button links to digg, facebook, tweet and track, stumble
upon, reddit, del.icio.us, and yahoo buzz buttons on each post.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="iWeb"></category></entry><entry><title>Mac OS X Sync and iPhone</title><link href="https://slott56.github.io/2009_01_15-mac_os_x_sync_and_iphone.html" rel="alternate"></link><published>2009-01-15T01:21:00-05:00</published><updated>2009-01-15T01:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-01-15:/2009_01_15-mac_os_x_sync_and_iphone.html</id><summary type="html">&lt;p&gt;Last week I noticed that some contacts were repeated in my iPhone contacts.  That's awful.  It makes the phone suddenly very hard to use.&lt;/p&gt;
&lt;p&gt;I did a little reading, found some stuff about various levels of synchronization.  I have a Mac OS X 10.4, plus 10.5, plus the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last week I noticed that some contacts were repeated in my iPhone contacts.  That's awful.  It makes the phone suddenly very hard to use.&lt;/p&gt;
&lt;p&gt;I did a little reading, found some stuff about various levels of synchronization.  I have a Mac OS X 10.4, plus 10.5, plus the iPhone, plus my gmail and yahoo! mail accounts.&lt;/p&gt;
&lt;p&gt;Something's not working.  I cycled through just about everything until I read the MobileMe news, with this article: &lt;a class="reference external" href="http://support.apple.com/kb/HT3248"&gt;MobileMe: Service Updates as of December 15, 2008&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Essentially, sync is broken and fixed in 10.5.6.  One OS upgrade and things are fixed.&lt;/p&gt;
&lt;p&gt;Currently, I have the Yahoo! and gmail sync off.  Now I can try turning these back on.&lt;/p&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="web"></category></entry><entry><title>Personal Spam</title><link href="https://slott56.github.io/2009_01_02-personal_spam.html" rel="alternate"></link><published>2009-01-02T01:25:00-05:00</published><updated>2009-01-02T01:25:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-01-02:/2009_01_02-personal_spam.html</id><summary type="html">&lt;p&gt;In previous years, I had several email lists: my Yahoo! list, my Google list, my desktop.  To figure out what to send, I had to merge the lists, which meant reading vCards, and CSV files.  This is totally the sweet-spot for Python.&lt;/p&gt;
&lt;p&gt;The Mac OS X &lt;a class="reference external" href="http://www.apple.com/mobileme/"&gt;Mobile Me&lt;/a&gt;  has a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In previous years, I had several email lists: my Yahoo! list, my Google list, my desktop.  To figure out what to send, I had to merge the lists, which meant reading vCards, and CSV files.  This is totally the sweet-spot for Python.&lt;/p&gt;
&lt;p&gt;The Mac OS X &lt;a class="reference external" href="http://www.apple.com/mobileme/"&gt;Mobile Me&lt;/a&gt;  has a very nice sync capability that integrates Yahoo!, Google and my desktop (which includes my iPhone).&lt;/p&gt;
&lt;p&gt;Mobile Me eliminated my email merging.  Now, everything is in my desktop Address Book.  My holiday mailing list can be trivially exported to a big old .VCF file.&lt;/p&gt;
&lt;div class="section" id="spamming-via-vcf"&gt;
&lt;h2&gt;Spamming via VCF&lt;/h2&gt;
&lt;p&gt;There's a Python Personal Data Interchange project (&lt;a class="reference external" href="http://savannah.nongnu.org/projects/python-pdi"&gt;http://savannah.nongnu.org/projects/python-pdi&lt;/a&gt;), &lt;a class="reference external" href="http://pdi.sourceforge.net/"&gt;http://pdi.sourceforge.net/&lt;/a&gt;.  I, however, made no use of this.&lt;/p&gt;
&lt;p&gt;Instead, I rebuilt my old spamulator to simply email to a list of folks identified by vCard.  The application has three principle parts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The vCard structure itself.&lt;/li&gt;
&lt;li&gt;The parsing of vCards.&lt;/li&gt;
&lt;li&gt;Sending the spam.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="vcard-class-definitions"&gt;
&lt;h2&gt;vCard Class Definitions&lt;/h2&gt;
&lt;p&gt;First, we have the core definitions of a vCard.  For information see &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2425http://tools.ietf.org/html/rfc2425"&gt;RFC 2425&lt;/a&gt;  and &lt;a class="reference external" href="http://tools.ietf.org/html/rfc2426"&gt;RFC 2426&lt;/a&gt; .&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections import defaultdict

class Parameter( object ):
    &amp;quot;&amp;quot;&amp;quot;A parameter modifies a property.&amp;quot;&amp;quot;&amp;quot;
    def __init__( self, name, value=None ):
        self.name= name
        self.value= value
    def __str__( self ):
        if self.value is None:
            return self.name
        else:
            return &amp;quot;%s=%s&amp;quot; % ( self.name, self.value )

class Property( object ):
    &amp;quot;&amp;quot;&amp;quot;A Property of a VCard has a name, and a list of values.  It may also have a
    sequence of ;-delimited parameters.

    A property name can be simple, or use dot notation to group some properties.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self, name, value, parameters=None,  ):
        self.name= name
        if parameters is None:
            self.parameters= dict()
        elif isinstance( parameters, dict ):
            self.parameters= parameters
        else:
            self.parameters= dict(parameters)
        self.valueList= value
    def addParameter( self, parameter ):
        self.parameters[parameter.name]= parameter
    def getValue( self ):
        &amp;quot;&amp;quot;&amp;quot;Two kinds of values: single and multiple; rarely any ambiguity.&amp;quot;&amp;quot;&amp;quot;
        if len(self.valueList) == 1:
            return self.valueList[0]
        return self.valueList
    value= property( getValue )
    def __str__( self ):
        value= &amp;quot;;&amp;quot;.join( self.valueList )
        if len(self.parameters) == 0:
            return &amp;quot;%s:%s&amp;quot; % ( self.name, value )
        else:
            params= &amp;quot;;&amp;quot;.join(map(str,self.parameters.values()))
            return &amp;quot;%s;%s:%s&amp;quot; % ( self.name, params, value )

class VCard( object ):
    &amp;quot;&amp;quot;&amp;quot;A VCard is a collection of Properties.
    Each named Property can occur any number of times, so the property name is a
    key to a list of instances.
    &amp;quot;&amp;quot;&amp;quot;
    def __init__( self, props=None ):
        if props is None:
            self.props= defaultdict(list)
        elif isinstance( props, defaultdict ):
            self.props= props
        else:
            self.props= defaultdict(list,props)
    def addProperty( self, prop ):
        self.props[prop.name].append( prop )
    def __str__( self ):
        propList= []
        for p in self.props:
            propList.extend( self.props[p] )
        #propList.sort( key=lambda p:p.name )
        return &amp;quot;BEGIN:VCARD\n%s\nEND:VCARD&amp;quot; % ( &amp;quot;\n&amp;quot;.join(map(str,propList)), )
&lt;/pre&gt;
&lt;p&gt;The essential data structure is the VCard, which has any number of named properties.  A named property has parameters and a value.  Values can be a simple string, or a ;-delimited list of strings.  Very simple, really.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parsing-a-vcf-file"&gt;
&lt;h2&gt;Parsing a VCF File&lt;/h2&gt;
&lt;p&gt;The trickiest part about parsing VCF is the escape rules.  The :, ; and , punctuation marks are sacred, but can be escaped to allow ;'s or :'s to appear in the value of a property.  The , is used to punctuate multiple values for a parameter, something that doesn't enter into email very often, so it can be ignored for now.&lt;/p&gt;
&lt;p&gt;Here's the parser, using some cool regex things I found.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import re

class VCFParser( object ):
    def __init__( self ):
        self.colon= re.compile( r&amp;quot;(.*)(?&amp;lt;!\\):(.*)&amp;quot; )
        self.equals= re.compile( r&amp;quot;(?&amp;lt;!\\)=&amp;quot; )
        self.semicolon= re.compile( r&amp;quot;(?&amp;lt;!\\);&amp;quot; )
    def getLines( self, aFile ):
        &amp;quot;&amp;quot;&amp;quot;Unfold any long lines.&amp;quot;&amp;quot;&amp;quot;
        fileIter= iter(aFile)
        unfold= fileIter.next()
        for line in fileIter:
            if line[0] == ' ':
                unfold += line.lstrip()
            else:
                # Start of the next line
                yield unfold
                unfold= line
        if unfold is not None:
            yield unfold
    def getContent( self, aFile ):
        &amp;quot;&amp;quot;&amp;quot;&amp;quot;Decompose lines into group/name, param and value elements.&amp;quot;&amp;quot;&amp;quot;
        for line in self.getLines( aFile ):
            propStr, valueStr = self.colon.match( line ).groups()
            prop_params= self.semicolon.split( propStr )
            value= self.semicolon.split( valueStr )
            yield prop_params[0], prop_params[1:], value
    def parseCard( self, aFile ):
        &amp;quot;&amp;quot;&amp;quot;&amp;quot;Create a Card from a sequence of lines.&amp;quot;&amp;quot;&amp;quot;
        for name, params, value in self.getContent( aFile ):
            if name.upper() == &amp;quot;BEGIN&amp;quot;:
                assert len(params) == 0 and value[0] == &amp;quot;VCARD&amp;quot;, &amp;quot;unexpected value %r&amp;quot; % (value,)
                currentCard= VCard()
            elif name.upper() == &amp;quot;END&amp;quot;:
                assert len(params) == 0 and value[0] == &amp;quot;VCARD&amp;quot;, &amp;quot;unexpected value %r&amp;quot; % (value,)
                yield currentCard
            else:
                prop= Property( name, value )
                for p in params:
                    pfields= self.equals.split( p )
                    prop.addParameter( Parameter( *pfields ) )
                currentCard.addProperty( prop )
    def parse( self, aFile ):
        return ( c for c in self.parseCard(aFile) )
&lt;/pre&gt;
&lt;p&gt;There are three cool regexes that look for unescaped :, = or ;.  I took a while to track these down in the documentation, but once I found them, my life was much simpler.  Here's the doctest string.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import re
&amp;gt;&amp;gt;&amp;gt; colon=  re.compile( r&amp;quot;(.*)(?&amp;lt;!\\):(.*)&amp;quot; )
&amp;gt;&amp;gt;&amp;gt; colon.match( &amp;quot;N:Name;This;That&amp;quot; ).groups()
('N', 'Name;This;That')
&amp;gt;&amp;gt;&amp;gt; colon.match( r&amp;quot;ADDR:Contains\:Colon&amp;quot; ).groups()
('ADDR', 'Contains\\:Colon')

&amp;gt;&amp;gt;&amp;gt; semicolon= re.compile( r&amp;quot;(?&amp;lt;!\\);&amp;quot; )
&amp;gt;&amp;gt;&amp;gt; semicolon.split(&amp;quot;EMAIL&amp;quot;)
['EMAIL']
&amp;gt;&amp;gt;&amp;gt; semicolon.split(&amp;quot;EMAIL;type=pref&amp;quot;)
['EMAIL', 'type=pref']
&amp;gt;&amp;gt;&amp;gt; semicolon.split(&amp;quot;EMAIL;type=pref\;special;type=work&amp;quot;)
['EMAIL', 'type=pref\\;special', 'type=work']
&lt;/pre&gt;
&lt;p&gt;This also uses a series of generators to make it easy to unfold long lines and accumulate a mult-line card.  I'm a big fan of this &amp;quot;generator cascade&amp;quot; design pattern to break a fairly complex parsing job up unto manageable pieces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smtp-interface"&gt;
&lt;h2&gt;SMTP Interface&lt;/h2&gt;
&lt;p&gt;The final step is actually using SMTP to send the email.  Note that we need to put the destination name into the message itself.  While not hard, it does mean that the message isn't a static object: it has to be tweaked for each outgoing message.  I like to define a Message class to handle this business for me.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import smtplib
class Message( object ):
    def __init__( self, from_, subject, body ):
        self.text= body.split('\n')
        self.subject= subject
        self.from_= from_
    def flat( self, to_ ):
        return smtplib.CRLF.join( [&amp;quot;From: %s&amp;quot; % self.from_,
            &amp;quot;To: %s&amp;quot; % to_,
            &amp;quot;Subject: %s&amp;quot; % self.subject,
            &amp;quot;&amp;quot; ] + self.text )

def getVCFIter( fileName ):
    vcf = VCFParser()
    src= open( fileName, &amp;quot;rU&amp;quot; )
    addrList= []
    for card in vcf.parse( src ):
        for p in card.props['EMAIL']:
            yield p.value
    src.close()

def send( msg, toList ):
    s=smtplib.SMTP(&amp;quot;smtp.somewhere.com&amp;quot;)
    s.login('username','password')
    for t in toList:
        response= s.sendmail(&amp;quot;from&amp;#64;somewhere.com&amp;quot;,t,msg.flat(t))
        if response: print response
    print len(toList),&amp;quot;sent&amp;quot;
    s.quit()
&lt;/pre&gt;
&lt;p&gt;This is pleasantly short and to the point.  Once the command-line parameters have been parsed, we're down to  parsing the options and then doing the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
body= file( theMessageFile, &amp;quot;rU&amp;quot; ).read()
msg= Message( &amp;quot;s_lott&amp;#64;mac.com&amp;quot;, options.subject, body )
send( msg, getVCFIter( theListFile ) )
&lt;/pre&gt;
&lt;p&gt;I like Python.  I really like the subtle way in which all of the steps of processing a vCard are based on generators meaning that I don't read in a large pile of data, but actually read in just enough to process one card at a time.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="web"></category></entry><entry><title>Blogging and Technical Writing</title><link href="https://slott56.github.io/2008_12_22-blogging_and_technical_writing.html" rel="alternate"></link><published>2008-12-22T00:21:00-05:00</published><updated>2008-12-22T00:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-12-22:/2008_12_22-blogging_and_technical_writing.html</id><content type="html">&lt;p&gt;Check out Carol Johnson's book &lt;a class="reference external" href="http://www.baywood.com/books/previewbook.asp?id=978-0-89503-384-0"&gt;The Language of Work: Technical Communication at Lukens Steel, 1810 to 1925&lt;/a&gt; .  It puts technical writing in a bigger perspective.&lt;/p&gt;
&lt;p&gt;The cool thing is dragging meaning out of a corpus of documents.&lt;/p&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="docbook"></category><category term="xml"></category></entry><entry><title>Rickrolling Trifecta</title><link href="https://slott56.github.io/2008_11_29-rickrolling_trifecta.html" rel="alternate"></link><published>2008-11-29T20:50:00-05:00</published><updated>2008-11-29T20:50:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-11-29:/2008_11_29-rickrolling_trifecta.html</id><summary type="html">&lt;p&gt;No one wants to be Rickrolled.  I suppose it could have been funny, once, for about 15 minutes.  I didn't think it was all that funny to begin with, but there it is -- a part of the lexicon.  However, it remains obscure, and sometimes hard to explain to non-technical folks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No one wants to be Rickrolled.  I suppose it could have been funny, once, for about 15 minutes.  I didn't think it was all that funny to begin with, but there it is -- a part of the lexicon.  However, it remains obscure, and sometimes hard to explain to non-technical folks.  Why should rickrolling be hard to explain?  Here's my tale.&lt;/p&gt;
&lt;p&gt;My wife says to me &amp;quot;here's a video our son was in,&amp;quot; and I laughed her off.  Yes, our son is a musician in LA, but -- come on -- &amp;quot;here's a video&amp;quot; is just an invitation to a rickrolling.&lt;/p&gt;
&lt;p&gt;But -- it turns out -- he's in the backing band for the video promoting Barry Manilow's Dance Hits of the 80's.&lt;/p&gt;
&lt;p&gt;&amp;quot;Really?&amp;quot; I said.  &amp;quot;Send me the link.&amp;quot;&lt;/p&gt;
&lt;p&gt;So she sends me &lt;a class="reference external" href="http://www.youtube.com/watch?v=TswTenrEwwM"&gt;Never Gonna Give You Up - Barry Manilow&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I about fell out of my chair.  My son is in a video of the Barry Manilow cover of the canonical rickrolling tune.&lt;/p&gt;
&lt;p&gt;I wasn't -- technically -- rickrolled.  But since it's the same tune, I think I was meta-rickrolled.  Now that's kind of funny.&lt;/p&gt;
&lt;div class="section" id="explain-that"&gt;
&lt;h2&gt;Explain That&lt;/h2&gt;
&lt;p&gt;So we forward the link throughout the family.  Including the oh-so-nerdy footnote that this is the rickrolling tune.  But since it isn't Rick Astley, it isn't a proper rickrolling.&lt;/p&gt;
&lt;p&gt;A totally non-technical friend asks for an example of rickrolling.   So I have to reply to everyone with the standard &lt;a class="reference external" href="http://www.youtube.com/watch?v=oHg5SJYRHA0"&gt;The Grand Theft Auto IV trailer&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Which -- apparently -- finally clicked with my father what it meant to be Rickrolled, and why his grandson being in a video version of that tune was -- in a household of high-tech nerds -- rather funny.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="too-much-thinking"&gt;
&lt;h2&gt;Too Much Thinking&lt;/h2&gt;
&lt;p&gt;There was some residual email traffic trying to figure out what -- exactly -- the prank was.   There was speculation that perhaps my son had doctored some Barry Manilow video to punch in his face over some other musician.&lt;/p&gt;
&lt;p&gt;&amp;quot;No,&amp;quot; I had to explain.  &amp;quot;It's not that sophisticated.  It's simply a link which says one thing, but actually links to Rick Astley.&amp;quot;  Don't think deeply about it; it's a simple prank.  It wasn't really that complex, or funny.&lt;/p&gt;
&lt;p&gt;No sooner do I get it sorted out, than the Macy's Thanksgiving Day parade has actual Rick Astley actually doing Never Gonna Give You Up, Rickrolling the world.  That lead to a flurry of text and email among the family members.&lt;/p&gt;
&lt;p&gt;Now, it's starting to get funny.  I'm tangentially related to the rickrolling trifecta: &lt;a class="reference external" href="http://www.youtube.com/watch?v=f2b1D5w82yU"&gt;Rick Astley&lt;/a&gt; , &lt;a class="reference external" href="http://www.youtube.com/watch?v=TswTenrEwwM"&gt;Barry Manilow&lt;/a&gt;  covering it innocently, and &lt;a class="reference external" href="http://www.youtube.com/watch?v=y4hqv6USkoU"&gt;Rick Astley, again&lt;/a&gt;  covering it ironically.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="web"></category></entry><entry><title>SOA New Realities</title><link href="https://slott56.github.io/2008_04_23-soa_new_realities.html" rel="alternate"></link><published>2008-04-23T10:16:00-04:00</published><updated>2008-04-23T10:16:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-23:/2008_04_23-soa_new_realities.html</id><summary type="html">&lt;p&gt;I'm not a fan of XML as the one true language.  I've griped before about the attractive nuisance of XML.&lt;/p&gt;
&lt;p&gt;Recently, I saw Sean McGrath's &lt;a class="reference external" href="http://seanmcgrath.blogspot.com/2008/04/new-realities.html"&gt;New Realities&lt;/a&gt; , which lead me to &lt;a class="reference external" href="http://www.projectzero.org/"&gt;Project Zero&lt;/a&gt; , a RESTful/JSONic SOA architecture.  Their blog includes postings like &lt;a class="reference external" href="http://www.projectzero.org/wiki/bin/view/Community/JerrysBlog/BlogEntry5"&gt;A run-time for &amp;quot;the New Reality&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm not a fan of XML as the one true language.  I've griped before about the attractive nuisance of XML.&lt;/p&gt;
&lt;p&gt;Recently, I saw Sean McGrath's &lt;a class="reference external" href="http://seanmcgrath.blogspot.com/2008/04/new-realities.html"&gt;New Realities&lt;/a&gt; , which lead me to &lt;a class="reference external" href="http://www.projectzero.org/"&gt;Project Zero&lt;/a&gt; , a RESTful/JSONic SOA architecture.  Their blog includes postings like &lt;a class="reference external" href="http://www.projectzero.org/wiki/bin/view/Community/JerrysBlog/BlogEntry5"&gt;A run-time for &amp;quot;the New Reality&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I find that I'm totally in sync with many of the key points.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Scripting&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Compiling, building and deploying Java is just tedious busy-work.  Python is amazingly productive.  When I look at doctest comments, I realize that good programming is programming that looks simple.  The best programming is stuff you can type interactively at the &amp;gt;&amp;gt;&amp;gt; prompt in Python.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;ORM&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The RDBMS is only useful as persistent storage for objects, and ORM is the way to do this.  Triggers, stored procedures and complex SQL have costs that outweigh their value.  SQLAlchemy and the Django ORM simplify things a great deal.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;REST&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The use of HTTP's methods and URI's to accomplish useful work is simple, elegant, extensible, scales well.  SOAP and WSDL is just overhead that helps the statically compiled Java application cope with change.  I'm a big fan of the way REST GETs can be tested with a browser.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;JSON&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;XML and the associated XSD's are wordy and complex.  JSON, especially in Python, is a first-class data structure that requires minimal almost no programming.  It's a little weird making your Python objects all subclasses of dict, but you get over that quickly.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;WSGI&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The WSGI architecture is a tremendous simplification.  Each piece of the application is part of the WSGI pipeline that has the following consistent design pattern:  (1) validate, (2) put something into the environment, (3) pass it on or declare the processing complete.  The &amp;quot;put something into the environment&amp;quot; is such a huge simplification because it allows arbitrary steps to be added, removed or changed without fundamentally breaking anything.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Agile&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Big Design Up Front (BDUF) isn't helpful because you don't know the consequences of each design decision.  With simple REST, ORM and scripting tools, however, you can reverse a design decision in an afternoon.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;TDD&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;An essential part of Agility is being able to refactor and make changes.  You can't do this without a robust set of unit tests.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Here's what I don't have: a really good REST client library.  urllib2, with an extension to the Request class, works, but it seems clunky somehow.  With all the attention REST has, I'd like to think that someone has a cool REST client.&lt;/p&gt;
&lt;p&gt;Here's the code I'm using.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class RESTRequest( urllib2.Request ):
    def __init__(self, method, url, data=None, headers={} ):
        urllib2.Request.__init__( self, url, data, headers )
        self.method= method
    def get_method( self ):
        return self.method

class Client2( object ):
    def __init__( self, host, port, username, password ):
        self.urlBase= &amp;quot;http://%s:%s&amp;quot; % ( host, port )
        # Create an OpenerDirector with support for HTTP Authentication...
        basic_handler = urllib2.HTTPBasicAuthHandler()
        basic_handler.add_password('testrealm&amp;#64;localhost', self.urlBase, username, password)
        digest_handler = urllib2.HTTPDigestAuthHandler()
        digest_handler.add_password('testrealm&amp;#64;localhost', self.urlBase, username, password)
        self.server = urllib2.build_opener(basic_handler,digest_handler)
    def request( self, method, path, argDict ):
        data= urllib.urlencode( argDict )
        theReq= RESTRequest( method, self.urlBase + &amp;quot;/&amp;quot; + path, data )
        try:
            response= self.server.open( theReq )
            # 200 OK goes here, all others are exceptions
            #print response.code, response.msg
            #print response.info()
            return response
        except urllib2.HTTPError, e:
            if e.code &amp;gt;= 500:
                raise
            #print e.code, e.msg
            #print e.info()
            return e
&lt;/pre&gt;
&lt;p&gt;While compact and clear, it still doesn't look quite right.&lt;/p&gt;
&lt;p&gt;One improvement might be to create subclasses of Basic and Digest handler which quietly handle the short list of REST status codes as return values instead of raising exceptions.  It would eliminate the try: block, but would create Yet More Subclasses to maintain.&lt;/p&gt;
&lt;p&gt;Here's what an application does.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
srvr= Client2( &amp;quot;localhost&amp;quot;, 18000, &amp;quot;slott&amp;quot;, &amp;quot;slott&amp;quot; )
    newData= { 'name':&amp;quot;US Test Company  898&amp;quot;, 'state':&amp;quot;PA&amp;quot; }
    response= srvr.request( &amp;quot;POST&amp;quot;, &amp;quot;realm/schema.1.2/instance&amp;quot;, newData )
    print response.code, response.msg
    print response.info() # headers, FWIW
    print eval( response.read() ) # JSON reply will be a dict object
&lt;/pre&gt;
&lt;p&gt;This is a nice-enough API.  The URI's, BTW, have a realm (prod, test, QA, etc.) a schema object (with version number), and the PK for that object as a &amp;quot;typical&amp;quot; REST URI.&lt;/p&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>Airport Extreme + Time Machine. Wow!</title><link href="https://slott56.github.io/2008_04_07-airport_extreme_time_machine_wow.html" rel="alternate"></link><published>2008-04-07T13:55:00-04:00</published><updated>2008-04-07T13:55:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-07:/2008_04_07-airport_extreme_time_machine_wow.html</id><summary type="html">&lt;div class="section" id="attempt-1-plug-in-the-disk-create-users-fail"&gt;
&lt;h2&gt;Attempt 1 - Plug in the disk.  Create users.  Fail.&lt;/h2&gt;
&lt;p&gt;Time Machine won't use a networked disk.  The &lt;a class="reference external" href="http://www.apple.com/macosx/features/timemachine.html"&gt;advertising&lt;/a&gt;  and documentation is pretty clear that Time Machine wants USB or FireWire storage.&lt;/p&gt;
&lt;p&gt;And this is Apple, it either works seamlessly, silently or automatically, or I've got the wrong use case.  So …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="attempt-1-plug-in-the-disk-create-users-fail"&gt;
&lt;h2&gt;Attempt 1 - Plug in the disk.  Create users.  Fail.&lt;/h2&gt;
&lt;p&gt;Time Machine won't use a networked disk.  The &lt;a class="reference external" href="http://www.apple.com/macosx/features/timemachine.html"&gt;advertising&lt;/a&gt;  and documentation is pretty clear that Time Machine wants USB or FireWire storage.&lt;/p&gt;
&lt;p&gt;And this is Apple, it either works seamlessly, silently or automatically, or I've got the wrong use case.  So, I took the path of least resistance and took the USB hard drive off the Airport and put it on my desk.&lt;/p&gt;
&lt;p&gt;Then I got the software update for Airport Admin and decided to do a little more reading.  I found this note on MacNN: &lt;a class="reference external" href="http://www.macnn.com/articles/08/03/22/airport.extreme.backup/"&gt;Airport Extreme supports Time Machine backup&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-plug-in-the-disk-fail"&gt;
&lt;h2&gt;Attempt 2 - Plug in the disk.  Fail.&lt;/h2&gt;
&lt;p&gt;Darn it!&lt;/p&gt;
&lt;p&gt;However, the Airport Extreme utility has some additional file share options.  Did it have these before?  No idea.  But it has them now.&lt;/p&gt;
&lt;p&gt;Disk Password.  That's the secret.&lt;/p&gt;
&lt;p&gt;Rather than individual user access, grant overall disk access.  And choose that password wisely.  This is the case where a pass-phrase is a smart move.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-3-change-to-disk-passwords-victory"&gt;
&lt;h2&gt;Attempt 3 - Change to Disk Passwords.  Victory!&lt;/h2&gt;
&lt;p&gt;Time Capsule is happily backing up through an airport-mounted disk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security"&gt;
&lt;h2&gt;Security&lt;/h2&gt;
&lt;p&gt;You can describe this as a security nightmare.  I'm broadcasting all of my personal files to everyone within 50m of my Airport Extreme base station.&lt;/p&gt;
&lt;p&gt;On the other hand, who has the patience to intercept every byte, separate the various concurrent sockets of activity, and piece together my backup upload.  And when they're done, what kind of evil blackmailing plot will they hatch?&lt;/p&gt;
&lt;p&gt;When I read about &amp;quot;security&amp;quot; breaches at places like the Veteran's Administration or TJX, I see that loss of the storage device and illegal access to software are the problems.  When I look at the &lt;a class="reference external" href="http://www.privacyrights.org/ar/ChrondataBreaches.htm"&gt;Data Breach Chronology&lt;/a&gt; , I see one wireless sniffing, and there are so many security problems that I hesitate to credit sniffing with being the actual exploited vulnerability.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="web"></category></entry><entry><title>iBlog Buggy... Since Leopard's release... No fixes in sight.</title><link href="https://slott56.github.io/2008_03_19-iblog_buggy_since_leopards_release_no_fixes_in_sight.html" rel="alternate"></link><published>2008-03-19T15:59:00-04:00</published><updated>2008-03-19T15:59:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-19:/2008_03_19-iblog_buggy_since_leopards_release_no_fixes_in_sight.html</id><summary type="html">&lt;p&gt;This is a kind of &amp;quot;case study&amp;quot; post.  It happens -- frequently -- that I wind up in a situation similar to this one.  Usually it involves large, complex pieces of software and lots of people with strongly-held opinions.  I'm usually brought in toward the end, and have to discover the parts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a kind of &amp;quot;case study&amp;quot; post.  It happens -- frequently -- that I wind up in a situation similar to this one.  Usually it involves large, complex pieces of software and lots of people with strongly-held opinions.  I'm usually brought in toward the end, and have to discover the parts I missed.&lt;/p&gt;
&lt;p&gt;What I'm sometimes asked is to help plan the product/tool selection.  This is a bad policy, since the previous parts of the conversation either never happened or never got documented.  Either way, they aren't provided as input to the stuff I'm supposed to do.  When things go well, I get to participate from the beginning.&lt;/p&gt;
&lt;p&gt;This is a detailed, specific case study showing how to structure the &amp;quot;what tool do we use?&amp;quot; decision-making process.  It's something everyone does.  Indeed, carefully logging the information, and creating a structured narrative is a good way to apply discipline to the process and make the political considerations visible and explicit.&lt;/p&gt;
&lt;p&gt;[Yes, explicit politics will be painful.  Projects are often cancelled when the management trump cards start coming out.  That's a good thing.  A cancelled project means people learned something and didn't waste money following some manager's whim to it's logical, horrifying conclusion.]&lt;/p&gt;
&lt;div class="section" id="strategy"&gt;
&lt;h2&gt;Strategy&lt;/h2&gt;
&lt;p&gt;iBlog isn't working well, and doesn't look like it will be fixed.  What do I use for Blogging?&lt;/p&gt;
&lt;p&gt;There are several &amp;quot;strategic&amp;quot; considerations.&lt;/p&gt;
&lt;p&gt;On the one hand, I'd like to continue to publish via my homepage.mac.com account, since I'm already paying for this.  And I'll continue to pay for the offsite backup as well as hosting.  [Yes, I'm also using Time Machine, that's on-site.]&lt;/p&gt;
&lt;p&gt;On the other hand ... well ... there doesn't seem to be any good reason to change hosting for my blog.  Specifically, a move to free hosting (i.e., Google's blogger) leads to the possibility of two sets of ads (theirs plus mine).  Blogger &lt;em&gt;may&lt;/em&gt;  be smart enough to handle this properly.&lt;/p&gt;
&lt;p&gt;[Ads may bug some readers.  Two ad channels might bug people even more.  Also -- ha ha -- it would dilute my potential revenue stream.  Currently, AdSense owes me about $3.80.  I am well aware that it will be 4 years before I get my first check at this rate.]&lt;/p&gt;
&lt;p&gt;On the one hand, my existing RSS feed must continue to work.&lt;/p&gt;
&lt;p&gt;On the other hand, moving to a new site should be a matter of migrating existing readers to the new URL's for content and RSS.  I don't anticipate a lot of breakage from this change, since I only knew of a few places where my RSS feed is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="approach"&gt;
&lt;h2&gt;Approach&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open a new Blog?  I can track readership by creating a new AdSense channel.   It may help if I mirror new site RSS information onto my legacy site in order to keep it fresh.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1a.   Leave the old blog as simple legacy?  Just add top-of-blog story to the old blog linking to the new blog.&lt;/p&gt;
&lt;p&gt;1b.  Migrate the old Blog content into the new Blog?  I can then replace the old Blog pages with redirects to the new blog.  Hard to see how many people use the redirects.  I'd still need to consider cloning the RSS file from new to old.&lt;/p&gt;
&lt;p&gt;1c.  Migrate the old Blog content, as well as leave it as legacy.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Migrate the old Blog content into new tools, leaving almost everything in place?  The permalink structure of the old Blog makes this harder to do than it appears.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="use-cases"&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;Blog use cases depend on well-designed, permanent URL's and RSS feeds.  There are at least a dozen use cases that provide a benchmark for tool comparison.&lt;/p&gt;
&lt;p&gt;There are three actors: Authors, Readers and Syndicators (unofficial planet python, technorati being the two I actually use).&lt;/p&gt;
&lt;p&gt;Readers have (1) the bookmark use case, (2) the permalink reference use case and (3) a search use case.  (4) Comments are most easily handled by Haloscan. There is (5) the social networking (&amp;quot;micro blogging&amp;quot;) sites (del.icio.us, digg, furl, reddit, yahoo, twitter, technorati, slash dot, stumble) which rely on an active link from the blog to the networking site to reference content.  Finally, Readers and Syndicators have (6) the RSS notification use case.&lt;/p&gt;
&lt;p&gt;We could, additionally, define a whole flock of HTML use cases for the Readers: browse, search, scroll, follow link, etc.  We don't define those fully, since they're more-or-less implied by the web part of web logging.&lt;/p&gt;
&lt;p&gt;Authors have the (1) write draft, (2) search, (3) publish, (4) maintain sidebar links, (5) a whole flock of AdSense use cases, and (6) a whole flock of comment-management (Haloscan) use cases.&lt;/p&gt;
&lt;p&gt;[Currently, iBlog fails at use case 2, search, completely.  It behaves badly in use case 3, publish, by crashing before it updates it's internal &amp;quot;what's been published&amp;quot; state.]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tools-overview"&gt;
&lt;h2&gt;Tools - Overview&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.weblogmatrix.org/"&gt;http://www.weblogmatrix.org/&lt;/a&gt;  for some alternative tools.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Web-based blogging: &lt;a class="reference external" href="http://www.blogger.com"&gt;http://www.blogger.com&lt;/a&gt; , for example.  To a lesser extent LiveJournal, TypePad and WordPress.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Blogger doesn't directly support my &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/iblog/architecture/"&gt;http://www.itmaybeahack.com/homepage&lt;/a&gt;  account, which requires WebDAV.  Neither does LiveJournal or WordPress.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Desktop Mac OS X blogging.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In all cases, I'd need to rework the site to preserve the legacy permalinks, and create the new blog as a parallel structure.  I could migrate the legacy content, or merely divide the content into old and new.  The problem is the RSS feeds for my old content would go old and dead.  I'd need to post several reminders to assure that all potential readers were properly forwarded.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/27678"&gt;Blog.Mac&lt;/a&gt;  - Updated 3/10/08 - Publishes directly to .Mac (yay!) - 1.2 is early in the life cycle.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/24670"&gt;MarsEdit&lt;/a&gt;  - Updated 2/13/08 - Publishes using a number of standard protocols - 2.1 somewhat more mature.  Requires an account with another web service, separate from my homepage.mac.com web page.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/11374"&gt;MacJournal&lt;/a&gt;  - Updated 2/28/08 - Publishes directly to .Mac - 5.0 means mature.&lt;/li&gt;
&lt;li&gt;Apple's &lt;a class="reference external" href="http://www.apple.com/ilife/iweb/"&gt;iWeb&lt;/a&gt;  - I have this; it's part of iLife.  It is actively evolving in the right direction.  However, it also lacks a number of features.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/33532"&gt;Blogo&lt;/a&gt;  - Updated 1/27/08 - Not clear if it handles .Mac - 1.0 is early in the life cycle.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/31004"&gt;myBlog&lt;/a&gt;  - Updated 12/1/07 - Not clear if it handles .Mac (it might write to iDisk directly) - Version 1.1 is early in the life cycle&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/29098"&gt;BlogThing&lt;/a&gt;  - Updated 4/4/06 - version 1.0 - too simplistic.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/22682"&gt;BlogWaveStudio&lt;/a&gt;  -Updated in 2005, version 1.1, no developer site.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/19116"&gt;XBlog&lt;/a&gt;  - 2003, version 1.1, no developer site.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/14080"&gt;Blosxom&lt;/a&gt;  - 2003, version 2.0 - Open Source - however, no changes since '03&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.versiontracker.com/dyn/moreinfo/macosx/15723"&gt;ecto&lt;/a&gt;  (mis-categorized in version tracker) - Updated 1/10/07 - version 2.4. Looks good, but no on-line doco to speak of.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The version 1 products leave me a little cold.  iBlog was version 1 and never got far into version 2 before support faded away.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-short-list"&gt;
&lt;h2&gt;The Short List&lt;/h2&gt;
&lt;p&gt;The short list is MacJournal, MarsEdit and and iWeb.  Blog.Mac has some appeal, since it is narrowly focused on me, the .Mac blogger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MacJournal&lt;/strong&gt;.  Does a lot of things.  Blogging feels like an add-on.  The HTML Templates aren't described well.  It isn't clear how hard it would be to extract elements of my iBlog pages and turn them into a MacJournal template and have some consistency.  The list of MacJournal template tags are undocumented, making this template conversion a dicy proposition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MarsEdit&lt;/strong&gt;.  Focused.  However, it's not clear what template capabilities it has for putting entries into a blog page context.  Must have something, but the documentation available on-line is just advertising copy.  Not clear how AdSense or Haloscan would work, either.  No on-line doco is the end of my interest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iWeb&lt;/strong&gt;.  Does many things.  Part of iLife.  New release is aware of AdSense ads.  Missing obvious Haloscan integration; an add-on is required (&lt;a class="reference external" href="http://web.mac.com/cbrantly/iWeb/Software/iComment.html"&gt;http://web.mac.com/cbrantly/iWeb/Software/iComment.html&lt;/a&gt;).  Has some ability to reconstruct templates similar to iBlog templates (minus the calendar, specifically).  No obvious social networking support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blog.Mac&lt;/strong&gt;.  Focused.  Has AdSense and Haloscan comments already available.  Template editing and multiple templates available.  New blog would trivially go to a directory parallel to my existing iblog directory tree.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="detailed-comparison"&gt;
&lt;h2&gt;Detailed Comparison&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Product&lt;/td&gt;
&lt;td&gt;Reader/ Syndicator&lt;/td&gt;
&lt;td&gt;Author&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Bookmark, Permalink&lt;/td&gt;
&lt;td&gt;Comments&lt;/td&gt;
&lt;td&gt;Social Networking&lt;/td&gt;
&lt;td&gt;RSS&lt;/td&gt;
&lt;td&gt;Write, Search, Publish&lt;/td&gt;
&lt;td&gt;Sidebar&lt;/td&gt;
&lt;td&gt;AdSense&lt;/td&gt;
&lt;td&gt;Comment&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;MacJournal&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Not Clear&lt;/td&gt;
&lt;td&gt;Not Clear&lt;/td&gt;
&lt;td&gt;Not Clear&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Not Clear&lt;/td&gt;
&lt;td&gt;Not Clear&lt;/td&gt;
&lt;td&gt;Not Clear&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;iWeb&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Haloscan is an Add-on&lt;/td&gt;
&lt;td&gt;Missing&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Good but No Search&lt;/td&gt;
&lt;td&gt;Template&lt;/td&gt;
&lt;td&gt;New Feature&lt;/td&gt;
&lt;td&gt;.Mac&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Blog.Mac&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Missing&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Template&lt;/td&gt;
&lt;td&gt;Good&lt;/td&gt;
&lt;td&gt;Haloscan&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MarsEdit&lt;/strong&gt;  might be good, but it's too hard to penetrate the fog on what it does.&lt;/p&gt;
&lt;p&gt;While &lt;strong&gt;iWeb&lt;/strong&gt;  has some incumbency, it doesn't have idiot-simple social networking capabilities.  It doesn't have an easy-to-use blog search.&lt;/p&gt;
&lt;p&gt;This leads me to look closely at &lt;strong&gt;Blog.Mac&lt;/strong&gt;  for a trial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consequences"&gt;
&lt;h2&gt;Consequences&lt;/h2&gt;
&lt;p&gt;Here's the potential course of events.&lt;/p&gt;
&lt;p&gt;First, I need to pilot &lt;strong&gt;Blog.Mac&lt;/strong&gt;: create a new Blog, parallel to my existing iBlog material.  This involves creating (or finding) a template that matches the legacy blog.  It also involves trying to resolve the Social Networking capabilities of Blog.Mac.&lt;/p&gt;
&lt;p&gt;If the tool looks workable, then option 1c (migrate legacy content into Blog.Mac) needs to be explored.  If this can't be made to work, then 1a (ignore the legacy) is the next best alternative.&lt;/p&gt;
&lt;p&gt;If the tool is not workable, then I might try Mars Edit.&lt;/p&gt;
&lt;p&gt;Notify &lt;a class="reference external" href="http://www.planetpython.org/"&gt;Unofficial Planet Python&lt;/a&gt;  of the new URL.  At this point, I may also look at hooking up with &lt;a class="reference external" href="http://planet.python.org/"&gt;Planet Python&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="web"></category></entry><entry><title>Editing DocBook XML</title><link href="https://slott56.github.io/2007_02_02-editing_docbook_xml.html" rel="alternate"></link><published>2007-02-02T12:03:00-05:00</published><updated>2007-02-02T12:03:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-02-02:/2007_02_02-editing_docbook_xml.html</id><summary type="html">&lt;p&gt;First, I wrote a book on &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Programming with Python&lt;/a&gt;.
It was back in the Python 2.0 days (2001 or thereabouts.)  I used &lt;a class="reference external" href="http://www.apple.com/appleworks/"&gt;AppleWorks&lt;/a&gt;,
and it was fun.  Write all you want,
put in formulae, code samples, everything.  A few style sheets to give it a
reasonable look and I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, I wrote a book on &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Programming with Python&lt;/a&gt;.
It was back in the Python 2.0 days (2001 or thereabouts.)  I used &lt;a class="reference external" href="http://www.apple.com/appleworks/"&gt;AppleWorks&lt;/a&gt;,
and it was fun.  Write all you want,
put in formulae, code samples, everything.  A few style sheets to give it a
reasonable look and I was happy with it.  There's no market for a book on
Python, but it was more a book about programming than about Python.  There's
even less of a market for that.&lt;/p&gt;
&lt;p&gt;There
may be no market for a book on programming, but I teach programming.  I've
taught programming in C, Ada, Java, PL/SQL, COBOL and Python.  So, I have a
pretty standard approach to programming, into which I plug the language.  It
works very well, and capturing the approach in a book was
helpful.&lt;/p&gt;
&lt;p&gt;Then I re-discovered DocBook
markup.  I say rediscovered because in the mid-90's, I learned SGML, and was
aware of DocBook.  I'd ignored it partly because there wasn't any affordable
tooling, but also because SGML is a pain in the ass to write.  SGML isn't as
painful as XML, but the differences are microscopic when compared with WYSIWYG
AppleWorks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter LEO.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Meanwhile, as part of
developing a second book on &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Object-Oriented Design&lt;/a&gt; , I made serious use of
Literate Programming (LP).  I tried a number of tools, discarding many of them
as inappropriate for OO programming.  Many LP tools carry too much of the
original Web/Weave technology forward and provide too-complex macro
pre-processing features.  I found some minimalist tools (like &lt;a class="reference external" href="http://www.literateprogramming.com/tools.html"&gt;nuweb
and noweb&lt;/a&gt; ) and wrote my own pyWeb, which was even
simpler.&lt;/p&gt;
&lt;p&gt;But a pyWeb/HTML document is
still a pain to produce because of the flatness of the source file.  I want an
editor that respects my outline, and I was creating documents that were
essentially flat text.  Yes, they would become HTML, which (because of
&lt;tt class="docutils literal"&gt;&amp;lt;h&lt;/tt&gt;&lt;em&gt;x&lt;/em&gt;&lt;tt class="docutils literal"&gt;&amp;gt;&lt;/tt&gt; tags) reflects an outline.  But I wasn't able to use an outliner successfully to
create them.  Once it got respectably big, editing the pyWeb/HTML wasn't all
that easy and didn't provide any real intellectual
leverage.&lt;/p&gt;
&lt;p&gt;Then I hit on using &lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;LEO&lt;/a&gt;  to create pyWeb documents.  Which, after a
little experimentation, proved to be kind of silly.  LEO's RST module makes
emitting a pyWeb document redundant.  LEO can, with some care, emit a
nice-looking HTML document as well as the needed code files.  There's a bit of
jockeying around required to allow the author to mix and match non-code
documentation with code blocks, but it can be made to work.  LEO replaced the
pyWeb file rather than helping to build
it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DocBook is Code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While using LEO to produce
pyWeb is silly, using LEO to produce a complex DocBook project is much more
sensible.  The exact features of LEO that let it produce complex code projects
helped me produce complex writing projects.  Indeed, the presence of the
outliner made writing something as complex as a programming book
possible.&lt;/p&gt;
&lt;p&gt;Outliners introduce their own
problems, but it was a huge intellectual lever.  I could produce a DocBook 3.1
XML file, run the Xalan-based &lt;a class="reference external" href="http://docbook.sourceforge.net/"&gt;DocBook XSL&lt;/a&gt;  transformations
(version 1.66, later 1.68) to create HTML and FO, and use &lt;a class="reference external" href="http://xmlgraphics.apache.org/fop/"&gt;Apache
FOP&lt;/a&gt;  to produce PDF.  It was
marvelous.&lt;/p&gt;
&lt;p&gt;The problem that an outliner
introduces is the Deep Digression problem.  You can open another level of the
outline, presuming that the nested context is useful and helpful.  It turns out
that it isn't.  You think of it as depth when you start: your reader sees it as
an incomprehensible digression.  Other than legal documents and software, most
things must be relatively flat and rely on a narrative arc and explicit
signposts along the way.  An outline more than a few levels deep is uselessly
baffling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DocBook 5.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DocBook hasn't stood still since
the 3.1 days.   Indeed, 3.1 didn't properly achieve standard status; 4.1 and 4.5
were accepted by &lt;a class="reference external" href="http://www.oasis-open.org"&gt;OASIS&lt;/a&gt;  as standards.  However, I stuck with my
3.1 technology stack because I'd customized my stylesheets to handle Python
correctly, and didn't want to migrate those changes into version 1.72 of the
XSL.&lt;/p&gt;
&lt;p&gt;However, there are now some XML
editing solutions that look far nicer than my LEO-based technology stack.  The
&lt;a class="reference external" href="http://www.docbook.org/docs/howto/"&gt;DocBook 5.0 Transition Guide&lt;/a&gt;  was enlightening.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/emacs/emacs.html"&gt;GNU Emacs&lt;/a&gt;  and
the &lt;a class="reference external" href="http://www.thaiopensource.com/nxml-mode/"&gt;nXML mode&lt;/a&gt;  add-on.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.oxygenxml.com/"&gt;oXygen&lt;/a&gt;  provides an XML editor that recognizes
and exploits the DocBook schema.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.xmlmind.com/xmleditor/"&gt;XMLMind XML Editor&lt;/a&gt;  (XXE) also works
nicely.  The standard edition is free, and
produces files which go through my Xalan technology stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far, the XXE solution is
marvelous.&lt;/p&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="docbook"></category><category term="xml"></category></entry><entry><title>The XML Balancing Act - Part III, JSON (Revised)</title><link href="https://slott56.github.io/2007_01_29-the_xml_balancing_act_part_iii_json_revised.html" rel="alternate"></link><published>2007-01-29T15:03:00-05:00</published><updated>2007-01-29T15:03:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-01-29:/2007_01_29-the_xml_balancing_act_part_iii_json_revised.html</id><summary type="html">&lt;p&gt;We have a spectrum of interesting needs, and a
corresponding spectrum of solutions.  Here's one dimension: the structured-ness
view.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Highly structured data.&lt;/li&gt;
&lt;li&gt;Semi-structured data, or the &amp;quot;mixed content
model&amp;quot;.  We can further subdivide this into content which is &amp;quot;naturally&amp;quot;
hierarchical, and a good fit for XML, and data which is …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;We have a spectrum of interesting needs, and a
corresponding spectrum of solutions.  Here's one dimension: the structured-ness
view.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Highly structured data.&lt;/li&gt;
&lt;li&gt;Semi-structured data, or the &amp;quot;mixed content
model&amp;quot;.  We can further subdivide this into content which is &amp;quot;naturally&amp;quot;
hierarchical, and a good fit for XML, and data which is relational and a poor
fit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another dimension is the
&amp;quot;imperative/declarative&amp;quot; dimension, which is orthogonal to the structured
dimension.  We've got, consequently, four easy-to-see kinds of data
representation needs:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Highly-Structured, Declarative&lt;/td&gt;
&lt;td&gt;Highly-Structured, Imperative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Semi-Structured, Declarative&lt;/td&gt;
&lt;td&gt;Semi-Structured, Imperative&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each of these is exemplified by different
languages in practice.  However, some people will argue that XML is appropriate
to all of them, practical considerations be
d****d.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highly-Structured, Declarative Data.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the
sweet-spot for the relational model of data.  The representation for relational
data is a series of DDL statements (for the schema) and INSERT statements (for
the data).  JSON does this well; in some cases better.
Better?&lt;/p&gt;
&lt;p&gt;Let's look at an example.  Say
we have an application that needs to get the total of the most recent order for
a given customer.  In XML parlance, we have to locate &lt;tt class="docutils literal"&gt;&amp;lt;order&amp;gt;&lt;/tt&gt; elements for
a given &lt;tt class="docutils literal"&gt;&amp;lt;customer&amp;gt;&lt;/tt&gt;, get the values of the &lt;tt class="docutils literal"&gt;&amp;lt;total&amp;gt;&lt;/tt&gt; elements, and sum
them up.  This isn't a simple SELECT
SUM(total) FOR ORDER WHERE customer=?.  It's
complex, and the available XML API's don't support our application very directly
at all.&lt;/p&gt;
&lt;p&gt;McGrath's point appears to be
that the API's support XML parsing, but not structured information processing.
We can't just use something as clear as
get_total_value(),
or even
get_value('total').&lt;/p&gt;
&lt;p&gt;If we have a complete DTD (or XSD),
then each piece of data has a tag, and each tag is reachable by an XPATH query.
However, our application program API's aren't -- typically -- wordy XPATH
queries.  Our API's are simple object methods.  We can, of course, embed the
XPATH query in an object wrapper, but that seems to be a huge burden.  Couldn't
we match our data representation to our processing needs in the first
place?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highly-Structured, Imperative Data.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I thrashed around
in this space in &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2007_01_02-clarifying_xmls_strengths.html"&gt;Clarifying XML's Strengths&lt;/a&gt; .&amp;quot;  When there's
imperative information (i.e., scripts) we're wandering away from XML's sweet
spot and wandering into a place where Python or a Domain-Specific Language (DSL)
might be more helpful.  While some people argue the fine points of Ant vs.
Maven, they seem to miss the point that Ant has imperative elements written in
Java and Maven has imperative elements written in Jelly.  Either way, we can't
do the whole job using highly structured
data.&lt;/p&gt;
&lt;p&gt;If we were to try and use SQL or
some other highly-structured representation, we'd find ourselves deeply
compromised because we need some kind of scripting.  We can add stored
procedures to SQL, or we can use a more flexible data representation that
includes a procedural language.  Or, we can add super-flexible BLOB columns to
our database to contain Python code
fragments.&lt;/p&gt;
&lt;p&gt;This mixture of structure
plus script is where the Python or JSON data representation seems to make a lot
of sense.  We can supplement this with some additional syntax to create a DSL
that includes Python, JavaScript or Jelly.  Fundamentally, we're matching our
processing with our data
representation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Semi-Structured, Declarative.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is the XML
sweet-spot.  The data is a &amp;quot;mixed content&amp;quot; model with untagged text in addition
to tagged values.  Here, the XML API's aren't really in the way, because the
data requires some interpretation.  Some processing rules must be applied by an
application program.&lt;/p&gt;
&lt;p&gt;This is -- to
some people -- anathema, because it implies that the XML document isn't complete
and stand-alone.  They prefer to think XML is inherently complete, and don't
want to consider the situation where XML lacks information required to interpret
the content.&lt;/p&gt;
&lt;p&gt;Some people try to refine
this argument by saying that a DTD is incomplete, but an XSD is complete because
it has extensive rule declarations.  However, I'm saying something stronger than
the XML is incomplete.  I'm saying that essential knowledge is never captured in
the XSD.  I'm saying that processing rules are essential and are only captured
in the application software.&lt;/p&gt;
&lt;p&gt;Because
processing rules are essential, and are outside the XML, an XML document is
always incomplete, and has to be treated with the same respect that a shell
script (which requires a shell) and a SQL document (which requires a database)
are treated.  You must marry data and processing; further, the data
representation ought to be appropriate to the kind of processing which is being
done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hierarchies and Relations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can further fine-tune
our semi-structured considerations.  Some data is naturally hierarchical; we can
create an outline from the information.  If it is perfectly hierarchical, we can
create a directed, acyclic graph, which is precisely what XML offers.&lt;/p&gt;
&lt;p&gt;There is a spectrum of
hierarchical-ness.  Some data has a &amp;quot;preferred&amp;quot; hierarchy, but also has
cross-references.  The DocBook structure, for example, puts your content in the
book's hierarchy, but allows complex cross references among the topics.  Some
data, however, has multiple hierarchies -- because it's multi-dimensional -- and
there the XML world starts to fall
apart.&lt;/p&gt;
&lt;p&gt;In a business example, it's
common to have project plans for multiple cost centers over multiple time
periods.  We have two complementary hierarchies: the organizational hierarchy of
the cost centers as well as the time periods.  Which is &amp;quot;right&amp;quot;?  Clearly, both
are relevant, and we can find people interested in both views of the same data.
XML won't help.  Indeed, it can get in the way of processing this kind of
data.&lt;/p&gt;
&lt;p&gt;Just to compound the problem,
this example has &amp;quot;project plans&amp;quot; which are often semi-structured.  So we don't
have a good XML fit, and we don't have a good relational fit, either.  At this
point, some kind of special-purpose DSL may help.  Or, we have to merely use the
XML to get the data into a proper object model for processing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Semi-Structured, Imperative.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Wait, isn't
sem-structured, imperative content the very features which characterizes a
programming language?  Yes.  We wouldn't want to switch Python's elegant syntax
for a pure XML rendering of the same application
programming.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;name&amp;gt;n&amp;lt;/name&amp;gt;&amp;lt;/arg&amp;gt; &amp;lt;name&amp;gt;m&amp;lt;/name&amp;gt;&amp;lt;default&amp;gt;0&amp;lt;/default&amp;gt;&amp;lt;/arg&amp;gt; &amp;lt;function&amp;gt;&amp;lt;name&amp;gt;round&amp;lt;/name&amp;gt;

&amp;lt;suite&amp;gt;

&amp;lt;docstring&amp;gt;&amp;lt;block&amp;gt;round(n[,m=0])
-&amp;amp;gt; round n to m positions.&amp;lt;/block
&amp;gt;&amp;lt;block&amp;gt;...&amp;lt;/block&amp;gt;...&amp;lt;/docstring&amp;gt;

&amp;lt;statement
name=&amp;quot;if&amp;quot;&amp;gt;&amp;lt;expression&amp;gt;...&amp;lt;/expression&amp;gt;&amp;lt;suite&amp;gt;...&amp;lt;/suite&amp;gt;&amp;lt;/statement&amp;gt;

&amp;lt;statement
name=&amp;quot;return&amp;quot;&amp;gt;&amp;lt;expression&amp;gt;...&amp;lt;/expression&amp;gt;&amp;lt;/statement&amp;gt;

&amp;lt;/suite&amp;gt;

&amp;lt;/function&amp;gt;
&lt;/pre&gt;
&lt;p&gt;No
thanks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom Line.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need to select a data
representation that is appropriate for our data processing needs.  We can't
waste time wringing our hands and saying that there's no way to anticipate all
processing needs.  That's just hard-wringing for the sake of hand-wringing.  If
we're solving a specific problem, we should solve that problem, with an eye
toward related problems.  The question &amp;quot;Are there any unforeseen problems?&amp;quot; is a
tautology; it's always true, so there's no point in
asking.&lt;/p&gt;
&lt;p&gt;The point is to identify the
problem, pick a solution, and choose appropriate data representation as well as
processing.  Over-generalizing (i.e., force-fitting XML to every problem) leads
to inefficient and ineffective solutions.  McGrath lifts up the specific issue
of finding a meaningful piece of data, rather than the value associated with a
tag obscured by an XPATH query.&lt;/p&gt;
&lt;p&gt;I've
got an example of the obscurity created by XML:  &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2007_01_25-spreadsheet_as_syntax.html"&gt;Spreadsheet as Syntax&lt;/a&gt; &amp;quot; shows a multi-step
transformation, which includes transforming XML into a spreadsheet document
object model (SSDOM) before doing anything useful.  The raw XML is rather quite
complex and obscure.  The SSDOM isn't half as bad.  The SSDOM allows us to use a
simple
get_style_name()
notation to examine the content in a meaningful
way.&lt;/p&gt;
&lt;p&gt;Until I read McGrath's piece, I
didn't know why my solution appeared so clunky.  Now I see that it's a
consequence of the XML API's being focused merely on parsing.  What I did isn't
wrong or even clunky, it's essential.&lt;/p&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>Technology Refresh</title><link href="https://slott56.github.io/2007_01_04-technology_refresh.html" rel="alternate"></link><published>2007-01-04T19:03:00-05:00</published><updated>2007-01-04T19:03:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-01-04:/2007_01_04-technology_refresh.html</id><summary type="html">&lt;p&gt;First, I'm a pack-rat; I worry about deleting
something valuable.  Specifically, I worry about orphaned files because the
application software is no longer supported or the media is
obsolete.&lt;/p&gt;
&lt;p&gt;For example, my resume is a
&lt;a class="reference external" href="http://docs.info.apple.com/article.html?artnum=24522"&gt;Hypercard&lt;/a&gt;  stack.  Really.  Hypercard is an OS 9
application, and future OS X's won't support …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, I'm a pack-rat; I worry about deleting
something valuable.  Specifically, I worry about orphaned files because the
application software is no longer supported or the media is
obsolete.&lt;/p&gt;
&lt;p&gt;For example, my resume is a
&lt;a class="reference external" href="http://docs.info.apple.com/article.html?artnum=24522"&gt;Hypercard&lt;/a&gt;  stack.  Really.  Hypercard is an OS 9
application, and future OS X's won't support it anymore.  However, I have an old
disk drive with an OS9 and Hypercard.  Consequently, I can't consider erasing
that disk drive.&lt;/p&gt;
&lt;p&gt;For years, I've had a
TODO list item for designing a resume DTD, unwinding the Hypercard stack into
that DTD, and ditching Hypercard entirely.  I'd have to maintain my resume as a
massive XML database, but that's not all
bad.&lt;/p&gt;
&lt;p&gt;This also means that I have old
computers laying around.  The current home network shows an embarrassing surplus of home computers.&lt;/p&gt;
&lt;p&gt;Here's one plan:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ditch the old &lt;a class="reference external" href="http://lowendmac.com/imacs/blue.shtml"&gt;slot-loading iMac&lt;/a&gt;.
It has a 10Gb drive, is G3 PPC, and S L O W.  It's land-fill
material unless someone offers me $50 for it.&lt;/li&gt;
&lt;li&gt;Move the current &lt;a class="reference external" href="http://lowendmac.com/imacs/fpimac.html"&gt;desk-lamp iMac&lt;/a&gt;
out to pasture as the fall-back machine.  It's G4, so it isn't as
slow.  And it's PPC, so it runs Hypercard until I get my act together to extract
my resume from Hypercard.&lt;/li&gt;
&lt;li&gt;Start making more use of the MacBook that I
had to buy as part of the $1,503.65 replacement for a MacBook one of my kids spilled coffee into.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, I give up the big
keyboard and big display.   Tough choice.&lt;/p&gt;
</content><category term="Technologies"></category><category term="macintosh"></category><category term="macosx"></category></entry><entry><title>Clarifying XML's Strengths.</title><link href="https://slott56.github.io/2007_01_02-clarifying_xmls_strengths.html" rel="alternate"></link><published>2007-01-02T15:55:00-05:00</published><updated>2007-01-02T15:55:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-01-02:/2007_01_02-clarifying_xmls_strengths.html</id><summary type="html">&lt;p&gt;While there are lame reasons for using XML, there
are good reasons also.  The good reasons, however, aren't delightfully clear.
They seem to be clouded by the lame issues.  I'm trying to sort out the best and
most logical reasons for using
XML.&lt;/p&gt;
&lt;p&gt;Here are 8 typically lame reasons
for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While there are lame reasons for using XML, there
are good reasons also.  The good reasons, however, aren't delightfully clear.
They seem to be clouded by the lame issues.  I'm trying to sort out the best and
most logical reasons for using
XML.&lt;/p&gt;
&lt;p&gt;Here are 8 typically lame reasons
for using XML.  The &amp;quot;&lt;a class="reference external" href="http://koti.welho.com/jpakaste/blog/stamp_out_the_ants.html%22%20target=%22NewWindow"&gt;Stamp
on the ants&lt;/a&gt; &amp;quot; posting noted this exchange in The Server Side, &amp;quot;&lt;a class="reference external" href="http://www.theserverside.com/news/thread.tss?thread_id=42923%22%20target=%22NewWindow"&gt;Raven
1.1: Build Java with Ruby&lt;/a&gt; &amp;quot; thread.  Note that this is confined to
build tools, where scripted actions are an integral part of the problem.  A lot
of this discussion doesn't apply to other problem domains.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ant already works.   Complexity be
damned.&lt;/li&gt;
&lt;li&gt;XML is fine for everything that's not
Java.  Except SQL.  And CSS.&lt;/li&gt;
&lt;li&gt;Ant is &amp;quot;already&amp;quot; part of the technology
stack, and it uses XML.  Anything better isn't already there.&lt;/li&gt;
&lt;li&gt;Everyone already knows XML.  They can't
learning anything new.  Learning something simpler is the same as learning
something new: impossible.&lt;/li&gt;
&lt;li&gt;XML is established.  New technology isn't
established.&lt;/li&gt;
&lt;li&gt;Scripting doesn't add value.  If you need
scripts, write them in XML or Java.&lt;/li&gt;
&lt;li&gt;I already know XML.   Something simpler
no longer helps.&lt;/li&gt;
&lt;li&gt;A bad non-XML solution is worse than any
XML solution.  XML will never become an opaque legacy
technology.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I found these to be typical
of many technology decisions:
&lt;strong&gt;Incumbency&lt;/strong&gt; ,
&lt;strong&gt;False Dichotomies&lt;/strong&gt; ,
&lt;strong&gt;Inflated Opportunity Cost&lt;/strong&gt; , a flat-out
&lt;strong&gt;Misrepresentation&lt;/strong&gt;
are the essence of these arguments for
XML.&lt;/p&gt;
&lt;p&gt;There is, however, a good value
proposition for XML, even in the build-tool domain where scripting is an
essential part of the problem and any solution.  In &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_12_28-a_good_reason_for_xml.html"&gt;A Good Reason for XML&lt;/a&gt; &amp;quot;, I tried to state it as
&amp;quot;Semantic Richness&amp;quot;, that is, &amp;quot;how well it describes the problem.&amp;quot;  This isn't
really very good, and another comment challenged this glib
simplification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Declarative vs. Imperative Knowledge Representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The big issue in
software-world is knowledge representation.  Ant or SCons have some
sophistication because they have two levels of knowledge representation: a
collection of algorithms plus a control file that is used by those algorithms.
Generally, we capture knowledge about building a program and represent it in the
control file.  We don't tinker much with the knowledge embodied in the
algorithms.&lt;/p&gt;
&lt;p&gt;We have two strategies for
knowledge representation:
&lt;em&gt;declarative&lt;/em&gt;
and
&lt;em&gt;imperative&lt;/em&gt; .
This is sometimes called the &amp;quot;What vs. How&amp;quot; distinction.  We can declare what we
want -- the desired end-state -- and leave it to our collection of algorithms to
reason out how it gets done; the tool derives the imperative steps to get there.
Or, we can just write down how to do the job; we manually develop the imperative
steps.&lt;/p&gt;
&lt;p&gt;The first build systems were
purely imperative: we recompiled the world.  This was, often, an ineffective use
of precious computing resources, so we invented more sophisticated tools.  I
implemented one back in the early '80's that ran in Univac's Exec-8, using
really ancient and obscure software tools.  The purpose then -- as it is now --
is to recompile just enough and no
more.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.gnu.org/software/make/"&gt;GNU
Make&lt;/a&gt; , &lt;a class="reference external" href="http://ant.apache.org/"&gt;Ant&lt;/a&gt; , &lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt; , &lt;a class="reference external" href="http://raven.rubyforge.org/"&gt;Raven&lt;/a&gt; , &lt;a class="reference external" href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; , etc., have two explicit purposes: to
minimize recompilation, and automate the myriad of packaging steps required by
our deployment architectures.  They have grown, however to embrace an additional
requirement: represent metadata about the software being built.  This additional
requirement is captured in &amp;quot;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2006/12/xml_is_first_cl.html"&gt;XML is first class, scripting languages are second
class&lt;/a&gt; &amp;quot;.  How do we report or analyze the information captured in our
build tools?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Preference for Declarative Knowledge.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Declarative
knowledge representation is, clearly, preferred.  &amp;quot;Imperative tools (whether
based on XML ala Ant or a &amp;quot;real&amp;quot; scripting language ala Raven) are inevitably
going to be less productive than a declarative tool...&amp;quot;  This is also an
implication in the &amp;quot;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2006/12/xml_is_first_cl.html"&gt;XML is first class&lt;/a&gt; &amp;quot; response.&lt;/p&gt;
&lt;p&gt;The declarative style has a number of
advantages.  Primarily, it allows us to analyze the declarations to create
reports about our application software.  Since the job is information capture,
we have every reason to demand full value from that knowledge.  Also, a
declarative style can allow swapping the toolset without breaking the declared
relationships in the build configuration
file.&lt;/p&gt;
&lt;p&gt;This declarative ideal can be met
a number of ways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Ant or Maven (XML).&lt;/strong&gt;   Typically mostly declarative, because
it isn't much of a scripting language.  When we use a tool like &lt;a class="reference external" href="http://jakarta.apache.org/commons/jelly/"&gt;Jelly&lt;/a&gt; , as Maven does, then it isn't
&lt;strong&gt;purely&lt;/strong&gt;
declarative.  The existence of Jelly adds imperative knowledge to a declarative
knowledge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL.&lt;/strong&gt;   Purely declarative.  Most RDBMS vendors
have added imperative components: triggers, stored procedures, etc.  But,
lacking these extensions, &lt;a class="reference external" href="http://www.sqlite.org/"&gt;SQLite&lt;/a&gt;  meets the declarative idea.  It isn't
however, much used for this sort of thing.  Who wants to code their sources,
targets and processing steps as a bunch of SQL
INSERT
statements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GNU Make (DSL).&lt;/strong&gt;   Less declarative than others.  GNU
Make, specifically, allows extensive shell script programming.  For this reason,
a makefile can
become a painful morass of scripts rather than a tidy definition of what should
be done.  With some work, a more-or-less purely declarative
makefile can be
built.  However, this is difficult to analyze and write reports.  GNU Make
control files tend to be dominated by scripts, however, because it's often
simpler than writing a complete declarative control file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SCons (Python).&lt;/strong&gt;   Mostly declarative.  In SCons, the
bulk of the control file is purely declarative.  Scripting, rather than being in
some additional language like Jelly, we simply use Python for any
non-declarative features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Murky Ant vs. Maven Issue.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While
declarative knowledge has all the advantages, here's an interesting quote:
&amp;quot;Imperative tools (whether based on XML ala Ant or a &amp;quot;real&amp;quot; scripting language
ala Raven) are inevitably going to be less productive than a declarative tool,
and this was a large part of the reason I switched from Ant to Maven some years
ago.&amp;quot;  This is a bit confusing.&lt;/p&gt;
&lt;p&gt;This
quote sounds like Ant is more imperative than Maven, and therefore less
desirable.   However, I'm confused because of the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ant and Maven both use XML, which is
largely declarative.&lt;/li&gt;
&lt;li&gt;Maven has Jelly, which adds imperative
features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If anything, I'd think that
Maven would be
&lt;em&gt;less&lt;/em&gt;
declarative.  Clearly, I'm missing something.  Likely, I don't understand enough
of the DTD (or Schema) for Maven to see how it is more declarative in spite of
the inclusion of Jelly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bottom Line.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's clear that purely
declarative knowledge is ideal.  It's also just as clear that imperative
knowledge is essential to success.&lt;/p&gt;
&lt;p&gt;Interestingly, build systems seem to
typify applications that can't be done as purely declarative knowledge.  We're
always adding imperative hooks to control files.  Purely imperative knowledge
(e.g., a shell script) are
undesirable.&lt;/p&gt;
&lt;p&gt;Further, the more we look,
the more we see different mixtures of declarative vs. imperative knowledge
representation techniques.  XML is imperative light (even with jelly),
Python/SCons is declarative with easy addition of imperative scripts, the
GNU/Make DSL is imperative heavy.&lt;/p&gt;
&lt;p&gt;The
Ant vs. Maven distinction still needs some clarification.  However, the
preference for a declarative knowledge representation makes compelling sense.
XML's best for representing declarative knowledge.&lt;/p&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>XML - Scripting - SQL - a DSL: which fits the problem better?</title><link href="https://slott56.github.io/2006_12_31-xml_scripting_sql_a_dsl_which_fits_the_problem_better.html" rel="alternate"></link><published>2006-12-31T04:46:00-05:00</published><updated>2006-12-31T04:46:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-12-31:/2006_12_31-xml_scripting_sql_a_dsl_which_fits_the_problem_better.html</id><summary type="html">&lt;p&gt;I read &amp;quot;&lt;a class="reference external" href="http://koti.welho.com/jpakaste/blog/stamp_out_the_ants.html"&gt;Stamp on
the ants&lt;/a&gt; &amp;quot;, which lead me to write &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_12_23-xml_one_ring_to_rule_them_all.html"&gt;XML - One Ring to Rule them All...&lt;/a&gt; &amp;quot; because I'd
seem some remarkably lame justification for XML.  I saw an interesting response
in &amp;quot;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2006/12/xml_is_first_cl.html"&gt;XML is first class, scripting languages are second
class&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;At this point, we
have an interesting tangential …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I read &amp;quot;&lt;a class="reference external" href="http://koti.welho.com/jpakaste/blog/stamp_out_the_ants.html"&gt;Stamp on
the ants&lt;/a&gt; &amp;quot;, which lead me to write &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_12_23-xml_one_ring_to_rule_them_all.html"&gt;XML - One Ring to Rule them All...&lt;/a&gt; &amp;quot; because I'd
seem some remarkably lame justification for XML.  I saw an interesting response
in &amp;quot;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2006/12/xml_is_first_cl.html"&gt;XML is first class, scripting languages are second
class&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;At this point, we
have an interesting tangential problem with well-framed set of requirements and
candidate solutions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We want a build system, like SCons.  This
is the context for the conversation.  It's important to stick to solving a
specific problem, not vague hand-waving about &amp;quot;better in general&amp;quot;.&lt;/li&gt;
&lt;li&gt;We want some additional features, not
often provided by the build tool.  Examples include &amp;quot;... an HTML page showing
the call sequence that you get for each target in the build&amp;quot;, &amp;quot;...statistics,
documentation, etc.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that we've
wandered a bit from the initial subject -- lame justification for XML -- and
moved into a compare-and-contrast between Ant and SCons.  This is probably not
the best consequence of the initial posting because we're on course for shoal
waters.  I'll press on and return to the potential ramifications, below.&lt;/p&gt;
&lt;p&gt;What is a good approach for defining a build system that allows us to plug in this kind of extension or add-on?&lt;/p&gt;
&lt;div class="section" id="xml"&gt;
&lt;h2&gt;XML&lt;/h2&gt;
&lt;p&gt;If we have an Ant-style XML database of targets, dependencies and actions, then
it's a matter of using XSLT to transform that database into a nice-looking
report.  XHTML is a fine output medium, and this can work well.  XSLT isn't fun
to write, but tools like &lt;a class="reference external" href="http://www.altova.com/products/xmlspy/xml_editor.html"&gt;XML Spy&lt;/a&gt;  or &lt;a class="reference external" href="http://www.philo.de/xmledit/"&gt;Open XML
Editor&lt;/a&gt;  make this at least
feasible.&lt;/p&gt;
&lt;p&gt;In the case of XSLT
solutions, we're reforming the representation from one organization of XML tags
to another organization of  XML tags and content.  As long as the transformation
is largely positional, XSLT does a good enough job.  It isn't a pleasant way to
develop really complex algorithms, but most reporting doesn't involve anything
too complex.&lt;/p&gt;
&lt;p&gt;If we need to do something
more complex, we have to understand the XML tags as something more than tags.
We need to build internal objects that represent the targets, sources,
processing scripts and dependencies before any complex analysis can be done.
We note that this internal representation is exactly the script-language
solution in SCons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sql"&gt;
&lt;h2&gt;SQL&lt;/h2&gt;
&lt;p&gt;First,
there aren't a lot of database-centric build tools.  Traditionally, SQL
processing involved heavy-weight programming with client programs and database
servers.  With &lt;a class="reference external" href="http://www.sqlite.org/"&gt;SQLite&lt;/a&gt; , this heavyweight architecture is no
longer a necessary feature of a solution.  In this case, reporting is a snap: a
&lt;tt class="docutils literal"&gt;SQL SELECT&lt;/tt&gt; statement will -- generally -- produce the desired report.&lt;/p&gt;
&lt;p&gt;Unfortunately, most build rules
involve transitive dependencies, and computing the complete transitive closure
in SQL is a pain in the ass.  Therefore, a more complex report requires a short
piece of programming to extract all of the transitive relationships into a
single &amp;quot;&lt;a class="reference external" href="http://www.google.com/search?q=hierarchy+bridge+table"&gt;hierarchy bridge table&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;An alternative is to
use &lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;  or similar to do a pleasant
object-relational mapping.  This makes the SQL relational information into an
object representation of the targets, sources, processing scripts and
dependencies.   We note that this object representation is exactly the
script-language solution in
SCons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="domain-specific-language-dsl"&gt;
&lt;h2&gt;Domain Specific Language (DSL)&lt;/h2&gt;
&lt;p&gt;The original &lt;a class="reference external" href="http://www.gnu.org/software/make/"&gt;GNU Make&lt;/a&gt;  syntax is the DSL replaced by Ant's XML.
This isn't terribly difficult to parse, but lacks some of the nuanced expressive power of the newer
XML notation.  Writing a report from this isn't easy, either.  You have to read
it, parse it, analyze it to determine the relationships, and then write the
report.  Fairly icky, and more complex than XSLT or SQL.&lt;/p&gt;
&lt;p&gt;Further, this involves creating an &amp;quot;internal&amp;quot; representation of the source information.  The DSL text
representation isn't very usable by itself:  reporting isn't simple XSLT-style
rewriting of the input file.  The DSL must be parsed into objects which
represent targets, sources, processing scripts and dependencies before any
useful analysis or reporting can be done.   We note that this internal
representation is exactly the script-language solution in
SCons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scripting-language-e-g-python"&gt;
&lt;h2&gt;Scripting Language (e.g. Python)&lt;/h2&gt;
&lt;p&gt;At this point, it should be clear where this is headed.&lt;/p&gt;
&lt;p&gt;The point of XML, SQL or a DSL is to put a persistent text representation around
objects which represent targets, sources, processing scripts and dependencies.
SCons allows us to represent these objects in the Python language.  Since the
Python interpreter directly manipulates these objects, we don't have to do very
much additional work for reporting or other
analysis.&lt;/p&gt;
&lt;p&gt;We have two choices for producing reports from SCons information.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Extend the SCons framework (most likely the
Node class) to add reporting methods to the object definitions.  We would then write a new main
program, which (after loading the SCons control file) invoked the reporting
methods.  Some of this may already be present in the &lt;tt class="docutils literal"&gt;Node.explain()&lt;/tt&gt; method.&lt;/li&gt;
&lt;li&gt;Create a subclass of the SCons &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; which
produces the desired report.  We would then write a new main program, which
(after loading the SCons control file) creates our new &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; subclass and executes it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="compare-and-contrast"&gt;
&lt;h2&gt;Compare and Contrast&lt;/h2&gt;
&lt;p&gt;For XML, we have XSLT as a query language and Xalan to interpret the XSLT program.&lt;/p&gt;
&lt;p&gt;For SQL, we have the &lt;tt class="docutils literal"&gt;SELECT&lt;/tt&gt; statement.
We can use our desired database (SQLite, for example) to interpret
the SQL program, producing the output.&lt;/p&gt;
&lt;p&gt;For a DSL, we generally don't
have much in the line of query and reporting tools.  We have to write
everything, and this is generally ineffective.&lt;/p&gt;
&lt;p&gt;For Python and SCons, the
build control file is -- in effect -- an application program.  Reporting is just
another method or another subclass of Visitor.  The build control file and the
reporting feature of the build system are really just one extended
thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consequences"&gt;
&lt;h2&gt;Consequences&lt;/h2&gt;
&lt;p&gt;Here's where the shoal water lies: there aren't any real consequences.  Many (too many)
people assume that the consequence of a compare-and-contrast is that
&lt;strong&gt;One is Best, All Others Are Bad&lt;/strong&gt;™.  This conclusion further implies
that everyone with the Non-Best solution should do an
&lt;strong&gt;Immediate Upgrade&lt;/strong&gt;™ to the One Best Solution.&lt;/p&gt;
&lt;p&gt;You often hear the following:
&amp;quot;If your solution is so much better why doesn't everyone use it?&amp;quot;
Or, even worse, &amp;quot;If you agree that my solution is better than yours, you should immediately convert
to my solution.&amp;quot;&lt;/p&gt;
&lt;p&gt;The idea that &lt;strong&gt;Everyone Must Adopt the Best Solution&lt;/strong&gt;  is wrong because politics trumps
technology.  A good technical solution is often a political non-starter.  VHS
was a lousy format for video tapes, and Beta was superior in every technical
aspect.  Yet, VHS was preferred by consumers.  The preference was non-technical;
&amp;quot;political&amp;quot; for lack of a better word.  Windows is largely a dreadful operating
system; yet there it is.&lt;/p&gt;
&lt;p&gt;There's no reason to abandon Ant.  It's a close second to SCons.  What is important is to
have a &lt;em&gt;good&lt;/em&gt; reason for using Ant, not one of the &lt;em&gt;lame&lt;/em&gt; reasons I cataloged
in &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_12_23-xml_one_ring_to_rule_them_all.html"&gt;XML - One Ring to Rule them All...&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;What then is the value of this kind of compare-and-contrast?  Locating the right reason for using
XML.  If it's political, say so.  Don't make up lame reasons.  Understand the real reasons.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>A Good Reason for XML</title><link href="https://slott56.github.io/2006_12_28-a_good_reason_for_xml.html" rel="alternate"></link><published>2006-12-28T15:39:00-05:00</published><updated>2006-12-28T15:39:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-12-28:/2006_12_28-a_good_reason_for_xml.html</id><summary type="html">&lt;p&gt;I harp on &lt;strong&gt;Design Goal 6&lt;/strong&gt;  in the &lt;a class="reference external" href="http://www.w3.org/TR/2006/REC-xml-20060816/"&gt;XML 1.0
Standard&lt;/a&gt; , &amp;quot;XML documents should be human-legible and reasonably
clear&amp;quot;.  In Kontrawize, the response is XML editors help meet this design goal.
&amp;quot;There are plenty of good XML-aware editors around, some of which are free.&amp;quot;
While true, I think this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I harp on &lt;strong&gt;Design Goal 6&lt;/strong&gt;  in the &lt;a class="reference external" href="http://www.w3.org/TR/2006/REC-xml-20060816/"&gt;XML 1.0
Standard&lt;/a&gt; , &amp;quot;XML documents should be human-legible and reasonably
clear&amp;quot;.  In Kontrawize, the response is XML editors help meet this design goal.
&amp;quot;There are plenty of good XML-aware editors around, some of which are free.&amp;quot;
While true, I think this violates the spirit of the standard, while adhering
only to the letter of the law.&lt;/p&gt;
&lt;p&gt;If we allow tools to mediate &amp;quot;human-legible and reasonably clear&amp;quot;, then too many
things meet this standard.  We could provide a bunch of SQL DDL and DML and
claim that it was a reasonably clear document.  Then, we can also claim that an
MS-Word .DOC file is reasonably clear because we have a copy of
Word.&lt;/p&gt;
&lt;p&gt;While it's true that &amp;quot;anything
written in XML is a first class piece of data,&amp;quot; I'm not clear on the origin of
the distinction.  &amp;quot;Textual scripting languages are at best second class data.&amp;quot;
I can't discern why -- precisely -- a Domain Specific Language (DSL) or
scripting solution isn't first class.  Presumably, the second class status comes
from one of these origins:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dependence on a script tool.&lt;/li&gt;
&lt;li&gt;Parsing ease.&lt;/li&gt;
&lt;li&gt;XML semantic richness (i.e., how well it describes the problem).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is clear
that dependence on a tool isn't the reason for second-class status: we're
allowed to use tools to make XML legible; we're equally allowed to use tools to
process the XML or script.  What's left are the &lt;strong&gt;Parsing ease&lt;/strong&gt;  and &lt;strong&gt;Semantic richness&lt;/strong&gt;  advantages of
XML.&lt;/p&gt;
&lt;div class="section" id="parsing-ease"&gt;
&lt;h2&gt;Parsing Ease&lt;/h2&gt;
&lt;p&gt;This is an interesting point.
Especially in light of this posting: &amp;quot;&lt;a class="reference external" href="http://blogs.tedneward.com/2005/08/22/When+Do+You+Use+XML+Again.aspx"&gt;When do you use XML, again?&lt;/a&gt; &amp;quot; where the use of
XML was principally for the parsing ease.  This is -- in a way -- a little
silly.  A scripting language has it's own parser, the script interpreter.  So,
ease of parsing isn't a great reason for using XML.  Other DSL's, however, may
require additional software for
parsing.&lt;/p&gt;
&lt;p&gt;Python, Ruby (and any other
object-oriented scripting language) has it's own parser, every bit as good as
&lt;a class="reference external" href="http://expat.sourceforge.net/"&gt;Expat&lt;/a&gt;
or &lt;a class="reference external" href="http://xerces.apache.org/"&gt;Xerces&lt;/a&gt; .  And if you choose a free scripting
language, you get the parser and substantial libraries also for free.  For
non-script-based DSL, you don't get a handy
parser.&lt;/p&gt;
&lt;p&gt;Here's the bonus for me: my
definition is part of the application.  The definitions aren't &lt;em&gt;input&lt;/em&gt;
to an application which reads, parses, and then performs some functionality
based on the input.   The definitions &lt;em&gt;are&lt;/em&gt; the application, essentially a specialization of the framework, directly
executable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="semantic-depth"&gt;
&lt;h2&gt;Semantic Depth&lt;/h2&gt;
&lt;p&gt;Indeed, one of the strong
points of script-based tools is the data structure that describes targets,
dependencies and actions is often a simple bunch of object creation statements.
The resulting objects have precisely the same semantics as the XML used by Ant.
These precisely identical semantics, however, are parsed by Python (or Ruby),
not Expat or Xerces.&lt;/p&gt;
&lt;p&gt;I find that a
bunch of Python objects that are are surrogates for other objects makes
compelling sense.  &lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt;  is
appropriate to building things like Java where compiles and jar-ear-war-building
predominates.  Each source is an object, as is each target.  But SCons also
describes static web content where HTML files are built from &lt;a class="reference external" href="http://www.cheetahtemplate.org/"&gt;Cheetah&lt;/a&gt;
templates.  It also describes a Data Warehouse load where logs and exception
reports are built from source application extracts.&lt;/p&gt;
&lt;p&gt;In short, an SCons script-based
control file has the same semantics as an XML non-script-based control file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-learned"&gt;
&lt;h2&gt;What I Learned&lt;/h2&gt;
&lt;p&gt;The &amp;quot;XML is First Class&amp;quot;
seems to mean that XML has an independent, widely-agreed-to existence, separate
from a language community.  From this I learned that there are a number of
dimensions of comparison:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tool-complexity"&gt;
&lt;h2&gt;Tool Complexity&lt;/h2&gt;
&lt;p&gt;The tool complexity for each language can be described as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;XML has moderately high tool complexity.
The parsers are already built, but everything else has to be built and some kind
of relationship with XML worked out.  In short the processing application is a
kind of interpreter for rules written in XML.&lt;/li&gt;
&lt;li&gt;DSL has very high tool complexity.  The
parsers have to be written, and everything else has to be built and some kind of
relationship with the DSL worked out.&lt;/li&gt;
&lt;li&gt;Python (or Ruby) has low tool complexity.
The parser is built, and everything else is just a library, extended by the
&amp;quot;control&amp;quot; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="clarity"&gt;
&lt;h2&gt;Clarity&lt;/h2&gt;
&lt;p&gt;The clarity of each language has the following description:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;XML has moderately low clarity.  Yes, we
can use tools, but I think that's a fussy letter of the law interpretation.
Compared with Python or a DSL, it's relatively opaque.  However, compared with
the cryptic binary mumbo-jumbo of many file formats, it's a model of
readability.&lt;/li&gt;
&lt;li&gt;DSL has outstanding clarity, since it's
purpose-designed for clarity.&lt;/li&gt;
&lt;li&gt;Python (or Ruby) has good clarity.  Our
object definitions match the problem domain precisely and a little bit of
syntactic sugar can lead to a nicely readable control
file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="extensibility"&gt;
&lt;h2&gt;Extensibility&lt;/h2&gt;
&lt;p&gt;Each language's extensibility is distinct:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;XML is -- technically -- extensible.
However, since we're tied to our application, we have two kinds of extensions.
We have to extend our schema or DTD, and extend the processing application.
While not all bad, it creates the exact parallel development structure that
leads to the Subtle Incompatibility Bug: it should work but doesn't
always.&lt;/li&gt;
&lt;li&gt;A DSL is also extensible.  However, the
Tool Complexity consideration slows us down here.  While we'd like to add
extensions, the parsing complexity is often a barrier to novel
applications.&lt;/li&gt;
&lt;li&gt;Python (or Ruby) has the data as
first-class language constructs.  The control file is actually &lt;em&gt;in&lt;/em&gt;
the Python language.  It is -- in a very real sense -- an extension built into
the framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="recommendations"&gt;
&lt;h2&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;For my money, the low complexity, good clarity and immediate extensibility of a
scripting solution is an award-winning technology application.  The XML solution
runs a distant second, and a purpose-built DSL has little to offer.  The reason
a purpose-built DSL is dead last is because &amp;quot;clarity&amp;quot; isn't worth much.  As
Kontrawize points out, we can solve the obscurity problem with more tools.  We
can't create extensibility or reduce complexity the same
way.&lt;/p&gt;
&lt;p&gt;Between the original &amp;quot;&lt;a class="reference external" href="http://koti.welho.com/jpakaste/blog/stamp_out_the_ants.html%22%20target=%22NewWindow"&gt;Stamp
on the ants&lt;/a&gt; &amp;quot; (referencing &amp;quot;&lt;a class="reference external" href="http://www.theserverside.com/news/thread.tss?thread_id=42923%22%20target=%22NewWindow"&gt;Raven
1.1: Build Java with Ruby&lt;/a&gt; &amp;quot; thread), and Kontrawize's &amp;quot;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/2006/12/xml_is_first_cl.html"&gt;XML is first class, scripting languages are second
class&lt;/a&gt; &amp;quot; the lessons are similar.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Don't choose XML uncritically&lt;/strong&gt;.  It has to be an optimal
solution to the problems we actually have.  Otherwise, it's just technology, and
technology can be a barrier between users and their problems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't defend XML uncritically&lt;/strong&gt;.  The eight low-value reasons in
&amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_12_23-xml_one_ring_to_rule_them_all.html"&gt;XML
- One Ring to Rule them All...&lt;/a&gt; &amp;quot; are little more than uncritical
justification for a decision that seems to have been made somewhere else in the
organization.  Kontrawize provides a good reason for using XML, but for this
application domain, I still think I can see some gaps in his logic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't overuse XML&lt;/strong&gt;.  As a Data Warehouse hack, I've spent too
long debating the &amp;quot;XML as our middleware&amp;quot; issue.  XML isn't needed when there is
a lot of data and the relationships among the application programs is reasonably
intimate.  In in-house data warehousing, too much XML is just no-value overhead.
Also, when we need to add extensions -- as we do with any build tool -- XML is
of limited value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In one case, more
than one person suggested that we extract 20 million customer accounts in XML.
The idea was to do the transformation using XSLT to implement a number of
business rules for standardizing data representations.  We could also link
business entities with dimensions, and identify the facts through another series
of XSLT transformations.  Finally, we would load the relational tables from the
XML documents.  Sigh.  All that XML parsing and marshaling will paralyze
processing.  We'll get nothing done -- the heaviest CPU user will be Xalan, and
our disks will be tied up with terabytes of XML source files that create mere
gigabytes of usable database.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>XML - One Ring to Rule them All...</title><link href="https://slott56.github.io/2006_12_23-xml_one_ring_to_rule_them_all.html" rel="alternate"></link><published>2006-12-23T17:43:00-05:00</published><updated>2006-12-23T17:43:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-12-23:/2006_12_23-xml_one_ring_to_rule_them_all.html</id><summary type="html">&lt;p&gt;The XML folks seem to have a number of
points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ant already works.   Complexity be damned.&lt;/li&gt;
&lt;li&gt;XML is fine for everything that's not Java.  Except SQL.  And CSS.&lt;/li&gt;
&lt;li&gt;Ant is &amp;quot;already&amp;quot; part of the technology stack, and it uses XML.  Anything better isn't already there.&lt;/li&gt;
&lt;li&gt;Everyone already knows XML.  They …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The XML folks seem to have a number of
points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ant already works.   Complexity be damned.&lt;/li&gt;
&lt;li&gt;XML is fine for everything that's not Java.  Except SQL.  And CSS.&lt;/li&gt;
&lt;li&gt;Ant is &amp;quot;already&amp;quot; part of the technology stack, and it uses XML.  Anything better isn't already there.&lt;/li&gt;
&lt;li&gt;Everyone already knows XML.  They can't learn anything new.
Learning something simpler is the same as learning something new: impossible.&lt;/li&gt;
&lt;li&gt;XML is established.  New technology isn't established.&lt;/li&gt;
&lt;li&gt;Scripting doesn't add value.  If you need scripts, write them in XML or Java.&lt;/li&gt;
&lt;li&gt;I already know XML.   Something simpler no longer helps.&lt;/li&gt;
&lt;li&gt;A bad non-XML solution is worse than any XML solution.
XML will never become an opaque legacy technology.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think the above summarizes the value proposition for XML-based Ant as a build tool.
The point against Ant and XML was repeated many times and in many slightly different forms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Wouldn't be nice to have an higher level way to describe an application build, instead of just working at
the assembler level ?&lt;/p&gt;
&lt;p&gt;Something like
being able to describe what a module is (for my application), what a deliverable
is, what a release is, etc etc ?&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="the-value-of-a-dsl"&gt;
&lt;h2&gt;The Value of a DSL&lt;/h2&gt;
&lt;p&gt;This seems to be the key point: DSL's work because they force us to do two things.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define the objective.&lt;/li&gt;
&lt;li&gt;Define a language which describes the
objective succinctly and clearly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In many cases, the &amp;quot;objective&amp;quot; is a combination of static definitions and dynamic
actions.  That sounds completely congruent with object-oriented programming.
Since we often need flexibility in our implementation, that sounds like
object-oriented scripting.&lt;/p&gt;
&lt;p&gt;I'm completely enamored of tools like &lt;a class="reference external" href="http://www.scons.org/"&gt;SCons&lt;/a&gt;   where I can use a fairly
natural-like language, not an opaque and artificial language.  &lt;a class="reference external" href="http://home.gna.org/smk/"&gt;SMK&lt;/a&gt;  is cut from
the same cloth.  Your dependencies, actions, repositories, targets, etc., are
first-class objects.  Your configuration file simply populates those objects in
a handy, clear notation like Python.  Your desired actions emerge from the
interactions of the object's methods.&lt;/p&gt;
&lt;p&gt;While XML is a theoretical
equivalent, it's natural opacity makes it a poor choice for anything that will
be touched by people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-goal-6"&gt;
&lt;h2&gt;Design Goal 6&lt;/h2&gt;
&lt;p&gt;The XML standard has the
following goal: &amp;quot;XML documents should be human-legible and reasonably clear.&amp;quot;
There are issues, however.&lt;/p&gt;
&lt;p&gt;Documents
fit on a spectrum from sparsely marked up to entirely symbolic.  A sparsely
marked up document is mostly natural language.  This end of the spectrum has
text-heavy HTML pages and most DocBook documents.  In this case, a little XML
goes a long way, and helps clarify the semantics as well as the structure of a
document.&lt;/p&gt;
&lt;p&gt;The symbolic documents
include music, mathematical notation and most programming-related text.  Music
is backed by a mountain of convention and required training: it isn't
self-explanatory.  However, many nuances of placement on the page, font, etc.,
have deep meanings.  Music notation is essentially all markup and very few
non-markup natural language elements.&lt;/p&gt;
&lt;p&gt;Mathematical formulas,
similarly, are an artificial language.  Notation schemes like &lt;a class="reference external" href="http://www.w3.org/Math/"&gt;mathml&lt;/a&gt;  reveal
that there's tons of deeply meaningful typography to mathematics.  Capturing
this reveals that XML is rather clumsy.  The natural language elements are
single letters and numbers.  When we compare that with a DSL like &lt;a class="reference external" href="http://www.ams.org/tex/amslatex.html"&gt;AMS
LaTeX&lt;/a&gt; , it looks like a DSL captures meaning more succinctly and
clearly.&lt;/p&gt;
&lt;p&gt;Programming is somewhere in
the middle of this spectrum.  A program doesn't have to be as densely packed
with meaning as a mathematical formula, although it can be.  In some cases,
mathematical terseness is a virtue.  Often a program is a tool for knowledge
capture, and the natural language explication in comments and names is essential
to the value being
created.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xml-s-strong-suit"&gt;
&lt;h2&gt;XML's Strong Suit&lt;/h2&gt;
&lt;p&gt;The best place for XML is
it's historical place:  adding semantic and structural content to natural
language documents.  As web transport, it's fine.  Of course, it is usually
nested in &lt;strong&gt;yet another&lt;/strong&gt;  markup language.  Most XML winds up
packaged in &lt;a class="reference external" href="http://www.faqs.org/rfcs/rfc2045.html"&gt;MIME&lt;/a&gt;   markup.  Note that XML markup gets wrapped
in MIME markup: XML isn't a one-size-fits-all markup language.  It's just one of
many tools.&lt;/p&gt;
&lt;p&gt;The worst place for XML is
in places where the meaning is complex and deeply symbolic.  When there is
little or no need for natural language, XML is large overhead for limited
value.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>Siren's Call of DRM</title><link href="https://slott56.github.io/2006_10_28-sirens_call_of_drm.html" rel="alternate"></link><published>2006-10-28T18:13:00-04:00</published><updated>2006-10-28T18:13:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-10-28:/2006_10_28-sirens_call_of_drm.html</id><summary type="html">&lt;p&gt;In the CW article, pseudonymous Mathias Thurman
describes a demonstration of Microsoft's &lt;a class="reference external" href="http://www.microsoft.com/windowsserver2003/technologies/rightsmgmt/default.mspx"&gt;Rights Management Services&lt;/a&gt;  product.  The
audience of executives identify a number of &amp;quot;Suppose...&amp;quot; scenarios, which the
author dismisses as merely research subjects, concluding that &amp;quot;...the goal of
this proof of concept was to introduce a group of executives …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the CW article, pseudonymous Mathias Thurman
describes a demonstration of Microsoft's &lt;a class="reference external" href="http://www.microsoft.com/windowsserver2003/technologies/rightsmgmt/default.mspx"&gt;Rights Management Services&lt;/a&gt;  product.  The
audience of executives identify a number of &amp;quot;Suppose...&amp;quot; scenarios, which the
author dismisses as merely research subjects, concluding that &amp;quot;...the goal of
this proof of concept was to introduce a group of executives to a technology
that, if deployed properly, could prevent the theft of intellectual property and
save the company money. I believe I accomplished that
goal.&amp;quot;&lt;/p&gt;
&lt;p&gt;I suppose, for a number of values of &amp;quot;could&amp;quot;, this is true.&lt;/p&gt;
&lt;p&gt;But
looking at the EFF's material, specifically, &amp;quot;&lt;a class="reference external" href="http://www.eff.org/deeplinks/archives/001632.php"&gt;How DRM Doesn't Work&lt;/a&gt; ?&amp;quot; I'm convinced that
there's a logical fallacy in DRM that makes the entire idea logically
impossible.  Specifically, you're looking to control an end-users computer.
Generally, controlling someone else's computer is a criminal activity when we
consider viruses and DDoS attacks.  Further, there are inevitable &amp;quot;support&amp;quot;
issues because of upgrades, failure to upgrade and incompatibilities with other
DRM schemes that the user is trying to be part
of.&lt;/p&gt;
&lt;p&gt;In short, DRM can't be made to work.&lt;/p&gt;
&lt;p&gt;And the glorious part of the CW
article is that the logical fallacies are framed as &amp;quot;Suppose...&amp;quot; questions.  The
two that are included in the article are marvelous.  I'd love to see the whole
list of 15 or so.  That would like be a list of 15 more reasons why DRM can't be
made to work.&lt;/p&gt;
&lt;div class="section" id="two-specific-scenarios"&gt;
&lt;h2&gt;Two Specific Scenarios&lt;/h2&gt;
&lt;p&gt;Here are two specific
scenarios from the article:  “Suppose that I needed to view a protected
document at a customer site,” or, “Suppose I wanted to send a
protected document to someone who wasn’t an employee.”&lt;/p&gt;
&lt;p&gt;Both of these are the kind of
monumental obstacles that reveal the logical impossibility of
DRM.&lt;/p&gt;
&lt;p&gt;Viewing protected content when you
don't have access to the authorization server is a serious restriction that is
insurmountable.  While you can -- in principle -- create an indefinite number of
customer VPN connections, you will inevitably have issues with a customer.
Either it will be technical (their stuff is too old, too new or too Linux) or it
will be legal (they don't permit that kind of
thing.)&lt;/p&gt;
&lt;p&gt;Giving a protected document to
a non-employee means that you have to admin an indefinite number of unknown
individuals into your protection scheme.  Employees -- at least in principle --
are trustworthy.  Except the ones you have to fire for criminal activity on
company property.  Non-employees must be untrustworthy, requiring them to be
vetted as if they were prospective employees: background checks, interviews,
photo ID checks, immigration paperwork, etc.  All of which &lt;em&gt;inhibits&lt;/em&gt;
potentially valuable use of the intellectual property by increasing the cost of
access -- possibly to an unacceptable level.&lt;/p&gt;
&lt;p&gt;These aren't technical nits, to
be overcome with clever use Live ID or Active Directory.  These are logical
impossibilities.  You can't reach into everyone's computer and everyone's
network to secure your intellectual property.  You can't vet every potential
user and still have a reasonable cost-to-use.  Either you can't let it out of
the server room, or you have to trust
someone.&lt;/p&gt;
&lt;p&gt;The other choice is to make
the IP so compellingly valuable that you'll make money anyway.  The &lt;a class="reference external" href="http://digitalenterprise.org/cases/redhat.html"&gt;Red
Hat business model&lt;/a&gt;  strikes me as a better direction in which to head.
While Copy-Friendly business models are too new, it makes more sense to monetize
what people want to do (spread your IP around).  If spreading your IP around can
find more customers, isn't that better than locking it away in the server
room?&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="web"></category><category term="cms"></category></entry><entry><title>Replacing Powerpoint (part 2)</title><link href="https://slott56.github.io/2006_07_04-replacing_powerpoint_part_2.html" rel="alternate"></link><published>2006-07-04T13:55:00-04:00</published><updated>2006-07-04T13:55:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-07-04:/2006_07_04-replacing_powerpoint_part_2.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/"&gt;Kontrawize&lt;/a&gt;  author Anthony Coates &lt;a class="reference external" href="http://www.haloscan.com/comments/slott/E20060626115128/#137940"&gt;warns&lt;/a&gt;  that this is an attractive time sink.
Thanks for the heads up.&lt;/p&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://slott56.github.io/2006_06_26-powerpoint_alternatives.html"&gt;first round&lt;/a&gt;  of research found &lt;a class="reference external" href="http://www.w3.org/Talks/Tools/Slidy/"&gt;HTML
Slidy&lt;/a&gt; , but didn't find &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/slide-shows.html"&gt;DocUtils + S5&lt;/a&gt; .  S5 is simpler and does less than
Slidy.  RST markup is far easier to cope with than HTML.  This looks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/"&gt;Kontrawize&lt;/a&gt;  author Anthony Coates &lt;a class="reference external" href="http://www.haloscan.com/comments/slott/E20060626115128/#137940"&gt;warns&lt;/a&gt;  that this is an attractive time sink.
Thanks for the heads up.&lt;/p&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://slott56.github.io/2006_06_26-powerpoint_alternatives.html"&gt;first round&lt;/a&gt;  of research found &lt;a class="reference external" href="http://www.w3.org/Talks/Tools/Slidy/"&gt;HTML
Slidy&lt;/a&gt; , but didn't find &lt;a class="reference external" href="http://docutils.sourceforge.net/docs/user/slide-shows.html"&gt;DocUtils + S5&lt;/a&gt; .  S5 is simpler and does less than
Slidy.  RST markup is far easier to cope with than HTML.  This looks like a
powerful and simple solution.&lt;/p&gt;
&lt;p&gt;Indeed, a LEO outline which produces RST directly (via an &lt;tt class="docutils literal"&gt;&amp;#64;file&lt;/tt&gt; directive)
for use by &lt;tt class="docutils literal"&gt;rst2s5.py&lt;/tt&gt; is a piece of cake.
Similarly, a small change to &lt;tt class="docutils literal"&gt;rst2s5.py&lt;/tt&gt; could create an &lt;tt class="docutils literal"&gt;rst2slidy.py&lt;/tt&gt;, also.&lt;/p&gt;
&lt;div class="section" id="better-integration"&gt;
&lt;h2&gt;Better Integration&lt;/h2&gt;
&lt;p&gt;The next step, however,
is more subtle.  We have a number of choices of integration between DocUtils, S5
and Leo.  These choices stem directly from two prominent features of this
technology stack:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;This is all open source.  We can integrate at
a number of levels: the application level, using the defined file interfaces, or
the module level, directly marrying DocUtils into Leo.&lt;/li&gt;
&lt;li&gt;This is all Python.  Integration doesn't
involve too much more than an appropriate
import.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are a mountain of alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Leo's RST3 plug-in can produce HTML.  It
would be nice to make &lt;tt class="docutils literal"&gt;rst2s5.py&lt;/tt&gt;
unnecessary, since the DocUtils parsing is already embedded in Leo.  However,
RST3 would have to produce &lt;tt class="docutils literal"&gt;&amp;lt;div &lt;span class="pre"&gt;class=&amp;quot;slide&amp;quot;&amp;gt;&lt;/span&gt;&lt;/tt&gt; in addition to &lt;tt class="docutils literal"&gt;&amp;lt;h1&amp;gt;&lt;/tt&gt;
tags.&lt;/li&gt;
&lt;li&gt;A variant on the RST3 plug-in that
produces HTML more directly focused on S5's .js and .css.  This could produce
the required &lt;tt class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/tt&gt; tags.&lt;/li&gt;
&lt;li&gt;A simple plug-in that produces a pure RST
text file, transforming headlines into RST section headers.  This could be run
through &lt;tt class="docutils literal"&gt;rst2s5.py&lt;/tt&gt;,
leading to a tidy way to produce slides from an outline.&lt;/li&gt;
&lt;li&gt;Either of the two plug-ins could be
designed to use HTML markup instead of RST.  This would be slightly simpler in
one sense (eliminating RST), but less usable.&lt;/li&gt;
&lt;li&gt;A simple &lt;tt class="docutils literal"&gt;&amp;#64;file&lt;/tt&gt; directive
which produces an RST file that is post-processed by &lt;tt class="docutils literal"&gt;rst2s5.py&lt;/tt&gt;.
This is doubly wasteful.  First, the RST3 plug-in integrates DocUtils; why use
an external application?  Secondly, this requires the bodies be forced to match
the headlines, wasting the headline information.&lt;/li&gt;
&lt;li&gt;A simple  &lt;tt class="docutils literal"&gt;&amp;#64;file&lt;/tt&gt; directive
which produces an HTML file, directly focused on S5.  This requires that the
content be entirely in the bodies, making the headlines unimportant.  This is
wasteful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we haven't -- really --
scratched the surface.  There are indirect integration using XML and XSLT that
add complexity without demonstrable value.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Since the Leo outline is XML, we can
always fabricate some XSLT to transform the Leo outline into an S5-compatible
HTML document.&lt;/li&gt;
&lt;li&gt;Worse, we can have Leo produce an XML/OML
which is independent of S5/Slidy/PowerPoint or other approach, and write XSLT
transformations from generic OML to S5
HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's wrong with XML-XSLT?  It
ignores the deep, open integration we can achieve between Leo, DocUtils,
PythonPoint (and Bruce/pyGame if we went that route).  XSLT puts the focus on
the superficial integration available via XML representation of the underlying
objects.  A needless level of indirection in the open source
world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-the-choice"&gt;
&lt;h2&gt;Making the Choice&lt;/h2&gt;
&lt;p&gt;What makes the most sense?
The choice has to be consistent with the advice to build as little as possible.
More important, the choice has to be consistent with the problem (replacing
powerpoint) and the actual use cases.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Edit the material.  Hence
Leo: it's fun to use an outliner to build
presentations.&lt;/li&gt;
&lt;li&gt;Present the
material.  Adobe Reader, Opera-Firefox-whatever, or Bruce are all alternatives
to make my laptop drive a projector.&lt;/li&gt;
&lt;li&gt;Distribute the material.  This is a poser.  Share the Leo file?  Or share the
resulting PDF?  Or share the resulting HTML + .js + .css files?  S5 handles
distro a little better than Slidy, because S5 expects local
storage.&lt;/li&gt;
&lt;li&gt;Print hand-outs.  Adobe
Reader does a great job of this.  Opera-Firefox can do this job, also.  Bruce
falls down on this count.  I could (I suppose) use PIL to create printable
versions of the pages or something.
:-(&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above analysis makes a strong
case for integrating PythonPoint into Leo, and creating a PDF from that.
A distant second is DocUtils &lt;tt class="docutils literal"&gt;rst2s5.py&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="docbook"></category><category term="xml"></category></entry><entry><title>Powerpoint Alternatives</title><link href="https://slott56.github.io/2006_06_26-powerpoint_alternatives.html" rel="alternate"></link><published>2006-06-26T15:51:00-04:00</published><updated>2006-06-26T15:51:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-06-26:/2006_06_26-powerpoint_alternatives.html</id><summary type="html">&lt;p&gt;PPT has one big advantage: it is written by the
same people who wrote Windows.  So it can seize the Windows display and
keyboard, and take control over the entire UI.  I happen to think that's A Bad
Thing™ but I may be in the minority on
that.&lt;/p&gt;
&lt;p&gt;Of course …&lt;/p&gt;</summary><content type="html">&lt;p&gt;PPT has one big advantage: it is written by the
same people who wrote Windows.  So it can seize the Windows display and
keyboard, and take control over the entire UI.  I happen to think that's A Bad
Thing™ but I may be in the minority on
that.&lt;/p&gt;
&lt;p&gt;Of course, it isn't portable to
Mac OS or Linux.  It depends on the OS.  Who wants to figure out the nuances of
the Mac OS or  Linux display libraries to provide portable functionality
equivalent to Powerpoint?&lt;/p&gt;
&lt;p&gt;It has a
proprietary file format making it difficult to work with.  That's -- perhaps --
a more important problem.&lt;/p&gt;
&lt;p&gt;So, what are
the alternatives?&lt;/p&gt;
&lt;p&gt;OpenOffice/StarOffice
&lt;a class="reference external" href="http://www.openoffice.org/product/impress.html"&gt;Impress&lt;/a&gt; .  &amp;quot;a truly outstanding tool for creating
effective multimedia presentations. Your presentations will stand out with 2D
and 3D clip art, special effects, animation, and high-impact drawing tools.&amp;quot;
Likely to be completely true.  However, I'm not ready to make the leap to Open
Office.  Yet.  Office 12 may be the tipping
point.&lt;/p&gt;
&lt;p&gt;KOffice &lt;a class="reference external" href="http://www.koffice.org/kpresenter/"&gt;KPresenter&lt;/a&gt; .  &amp;quot;With KPresenter, you can prepare a
set of slides for use in an on-screen slideshow or for printing. Your slides can
include text and graphics in a variety of formats, and of course, you can embed
all sorts of objects.&amp;quot;  However, the Windows/Cygwin thing leaves me a little
cold.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://member.wide.ad.jp/wg/mgp/"&gt;MagicPoint&lt;/a&gt; .  &amp;quot;X11 based presentation tool. It is
designed to make simple presentations easy while to make complicated
presentations possible.  Its presentation file (whose suffix is typically .mgp)
is just text so that you can create presentation files quickly with your
favorite editor (e.g. Emacs, vi).&amp;quot;  Cool.  What about Windows?  That's what my
company-supplied laptop runs, and I'd like to stick close to that
platform.&lt;/p&gt;
&lt;p&gt;Latex-based tools (a classic
write-up is &lt;a class="reference external" href="http://freshmeat.net/articles/view/667/"&gt;Making Presentations with LaTeX and Prosper&lt;/a&gt; ).
Not interesting to me because I'm more comfortable with the SGML/HTML/XML syntax
family.    Typically, LaTeX leads to a PDF that can be shown in full-screen
mode.  This is rather cool, since everyone has Adobe Reader nowadays.&lt;/p&gt;
&lt;p&gt;HTML-based tools (see &lt;a class="reference external" href="http://www.shallowsky.com/linux/LinuxPresentations.html"&gt;Using Linux for Presentations Mini-HOWTO&lt;/a&gt; ).  In
this case, we rely on a browser to show the slides.  I've looked at some of the
following, and been unhappy for a variety of very small
reasons.&lt;/p&gt;
&lt;p&gt;Also, there's &lt;a class="reference external" href="http://bruce.python-hosting.com/%22%20target=%22NewWindow"&gt;Bruce&lt;/a&gt; ,
which is new, and I haven't tried it.  It uses &lt;a class="reference external" href="http://www.pygame.org/news.html"&gt;PyGame&lt;/a&gt; ,
which sits on &lt;a class="reference external" href="http://www.libsdl.org/index.php"&gt;SDL&lt;/a&gt; , and looks like it can seize the display and
keyboard in a portable, non-proprietary way, which would be A Good Thing™.
It uses Python as a markup language, an interesting alternative to XML or LaTeX.
More precisely, a Bruce presentation IS a Python application which builds
individual Page objects and displays them using some interactive events for
navigation.&lt;/p&gt;
&lt;p&gt;A Leo document to could
produce the Python app which is a Bruce presentation.   Leo does this in a very
elegant way.  A simple &amp;#64;button could launch Bruce on the resulting Python
file.&lt;/p&gt;
&lt;p&gt;Or, even nicer, a plug-in to Leo
could present an outline directly in Bruce by combining Bruce's PyGame
presentation with a Leo outline reader to build Page objects from Leo outlines.
At the end of the presentation, you'd be back editing
Leo.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.chrisarndt.de/en/software/pylize/%22%20target=%22NewWindow"&gt;Pylize&lt;/a&gt; .
While simple, the HTML markup leaves a little bit to be desired.  The slides
aren't contained, but rather delimited by &amp;lt;h1&amp;gt; tags.  I prefer proper
XML/DocBook containers (like &amp;lt;slide&amp;gt; or &amp;lt;frame&amp;gt; or even
&amp;lt;div&amp;gt;).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.reportlab.org/python_point.html"&gt;PythonPoint&lt;/a&gt; .  I like the idea of going from a
version of a DocBook-like XML to slides.   This is rather elegant, and since I
know (and like) DocBook markup, this has a lot of potential.  However, it isn't
full DocBook XML; in particular, some HTML in-line markup seems to work, but is
otherwise undocumented.  Finally, I'm not adverse to processing markup to see
the results, but in this case, the consequences of a word or two alters the look
of the slide so profoundly that something closer to WYSIWYG really is
appropriate.&lt;/p&gt;
&lt;p&gt;Currently, I'm playing
with &lt;a class="reference external" href="http://www.w3.org/Talks/Tools/Slidy/"&gt;Slidy&lt;/a&gt; .  It uses XHTML, and &lt;tt class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/tt&gt; tags.  It
has a clunky distribution issue, since it is style sheets and a Javascript file
to make the whole thing go.  It does, however, look really good in FireFox, and
isn't too difficult to configure and make work.  Feedback to see the
consequences of a change is almost
instant.&lt;/p&gt;
&lt;p&gt;Sadly, really cool layouts
require that I actually learn how to control CSS.  Until then, I'm stuck with
more-or-less the default CSS's supplied with
Slidy.&lt;/p&gt;
&lt;p&gt;For either PythonPoint or Slidy,
I can prepare my XHTML using &lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt; .  It isn't a XML editor, so it doesn't help
with the markup.  It is, however, a scriptable outliner.  As outliner, it rules.
Being scriptable in Python means that I could write a Python script to emit the
&amp;lt;div&amp;gt; container and &amp;lt;h1&amp;gt; tags automatically.&lt;/p&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="docbook"></category><category term="xml"></category></entry><entry><title>The Twenty-Minute Solution</title><link href="https://slott56.github.io/2006_04_05-the_twenty_minute_solution.html" rel="alternate"></link><published>2006-04-05T15:49:00-04:00</published><updated>2006-04-05T15:49:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-04-05:/2006_04_05-the_twenty_minute_solution.html</id><summary type="html">&lt;p&gt;First, let me get this off my chest: Django
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;http://www.djangoproject.com/&lt;/a&gt; rules.  There are a number of reasons, but
they aren't the point of this
posting.&lt;/p&gt;
&lt;p&gt;When someone creates a
twenty-minute application, they walk a fine line.  The minimalist approach to
software development can be viewed from two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, let me get this off my chest: Django
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;http://www.djangoproject.com/&lt;/a&gt; rules.  There are a number of reasons, but
they aren't the point of this
posting.&lt;/p&gt;
&lt;p&gt;When someone creates a
twenty-minute application, they walk a fine line.  The minimalist approach to
software development can be viewed from two opposing points of
view.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Small is &lt;strong&gt;good&lt;/strong&gt; because there aren't many use cases, and over-engineering each use case doesn't
add enough value.   Build something cheap using the defaults and built-ins.
Value comes from using it as soon as possible.&lt;/li&gt;
&lt;li&gt;Small is &lt;strong&gt;bad&lt;/strong&gt; because there isn't enough control to prevent the users from abusing the
application.  You must tightly constrain their use so it conforms to
expectations irrespective of what they might do wrong.  Value comes from control
over the users.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clearly, there's a
middle ground that balances cheap development with enough control to assure
compliance with the quality objectives.&lt;/p&gt;
&lt;div class="section" id="battleground"&gt;
&lt;h2&gt;Battleground&lt;/h2&gt;
&lt;p&gt;This conflict is played out daily, and is often surfaced when we try to implement
something &amp;quot;big&amp;quot; like a data warehouse.  The daily cheap vs. control conflict is
a kind of political and philosophical battleground, where strange positions
arise.&lt;/p&gt;
&lt;p&gt;IT people, as a class, seem to crave control.
&amp;quot;We can't give the user's ad-hoc access to the data,&amp;quot; I was told.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why not?&amp;quot; I asked.  &amp;quot;It's their data.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;You don't know our users,&amp;quot; they said.
The implication was that their users were particularly malicious and
couldn't be trusted.&lt;/p&gt;
&lt;p&gt;&amp;quot;Do they extract data and put it into spreadsheets?&amp;quot; I asked.&lt;/p&gt;
&lt;p&gt;This lead to a firestorm of complaining.  Of course they put stuff in spreadsheets.
Of course, they massaged it.  It just proves that they can't be trusted with something simple,
flexible and open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="or-does-it-prove-that"&gt;
&lt;h2&gt;Or does it prove that?&lt;/h2&gt;
&lt;p&gt;My position was that
users work around an application because the app imposes
&lt;em&gt;too much&lt;/em&gt;  control.  In the effort to implement
&amp;quot;controls&amp;quot;, we often go way too far into creating &amp;quot;idiot-proof&amp;quot; transactions
based on specifications written by
idiots.&lt;/p&gt;
&lt;p&gt;Generally, it is simple
ignorance of special cases or planned strategic changes.  With a gap in the
detailed knowledge of what is really done on a daily basis, the business analyst
writes a detailed workflow.  Users (or user management) with similar gaps work
to &amp;quot;tighten&amp;quot; the workflow to control things, eliminating any possibility of
non-compliant behavior.&lt;/p&gt;
&lt;p&gt;Then, when the special cases are finally located (or the planned change occurs), the
software has imposed too many of the wrong kinds of controls.  It requires
rework or replacement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-control-bad"&gt;
&lt;h2&gt;Why is control bad?&lt;/h2&gt;
&lt;p&gt;Control, &lt;em&gt;per se&lt;/em&gt; , isn't bad.  What's bad is inflexible,
unrealistic control.  In many cases, it is merely an illusion of control, since
we can download to a spreadsheet and work around the controls anyway.&lt;/p&gt;
&lt;p&gt;What's more valuable than control is
transparency.  We really need to know the who-what-when-where-how-why of each
business event.  The bulk of application software &lt;strong&gt;should&lt;/strong&gt;
be nothing more than structuring the details for easy analysis.&lt;/p&gt;
&lt;p&gt;Generally, the complex piece is the &lt;em&gt;what&lt;/em&gt;
part of the problem.  When we're implementing a small application to prevent the
help desk from being flooded &amp;lt;{filename}/blog/2006/01/2006_01_20-stating_the_problem.rst&amp;gt; with activation requests, we have to avoid
the urge to build bewilderingly complex workflows and data structures.  The
context of the work is an activation request -- it has a few relevant attributes
-- the real &lt;em&gt;what&lt;/em&gt; of the work is a review, an approve, a deny, a question, an answer, that kind of
thing.&lt;/p&gt;
&lt;p&gt;Both things (the activation
request and the various activities that lead to approval or denial) can be made
simple.  Once stripped down to the bare data elements, the 20-minute design
discipline can be applied to build the smallest application that
captures the &lt;strong&gt;Information&lt;/strong&gt;, the &lt;strong&gt;Decision&lt;/strong&gt; and the &lt;strong&gt;Action&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-i-need-control"&gt;
&lt;h2&gt;What if I need control?&lt;/h2&gt;
&lt;p&gt;If you really need control, you have to reward the behavior you want to see.  A generous software
development budget doesn't give you any useful level of control if you don't
have the rewards in place.&lt;/p&gt;
&lt;p&gt;The saddest thing is a reward system (either formal or cultural) that reinforces behavior
that is obviously not compliant with the design of the software.&lt;/p&gt;
&lt;p&gt;I hear this kind of thing: &amp;quot;Those
labor records can't be reconciled correctly, so we do that manually in a spreadsheet.&amp;quot;&lt;/p&gt;
&lt;p&gt;This means that the people are rewarded for &amp;quot;reconciling&amp;quot; those labor records in a way that the
application software doesn't support.  Why are they rewarded for this?  Why
doesn't the software do this correctly?  As you dig into this, the executives
claim it isn't happening, or shouldn't be happening.  The people doing it,
however, are really doing the work every week.  In the middle, some manager is
rewarding the work; or the executive isn't aware of the value produced by the
organization.&lt;/p&gt;
&lt;p&gt;Software won't help solve
the problem.  The process of business analysis, however, will at least identify
the problem and start a useful discussion.  This can lead to beneficial business
changes, or a simplification in the software so it will support the necessary
flexibility.&lt;/p&gt;
&lt;p&gt;I'm advocating removing
control and removing features to improve flexibility.  This is hard to do, but
really serves the users in the best possible way.  I applaud looking for the 20
minute solution.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="web"></category><category term="cms"></category></entry><entry><title>Making PDF's with and without XSL FO (Revised)</title><link href="https://slott56.github.io/2006_03_20-making_pdfs_with_and_without_xsl_fo_revised.html" rel="alternate"></link><published>2006-03-20T15:41:00-05:00</published><updated>2006-03-20T15:41:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-03-20:/2006_03_20-making_pdfs_with_and_without_xsl_fo_revised.html</id><summary type="html">&lt;p&gt;I've been using the Apache FOP &lt;a class="reference external" href="http://xmlgraphics.apache.org/fop/"&gt;http://xmlgraphics.apache.org/fop/&lt;/a&gt;
to transform XSL:FO into PDF's.  FOP works well enough for some DocBook
processing, but it can't handle really complex stuff gracefully.&lt;/p&gt;
&lt;p&gt;Can we also use this XSL:FO technology
for producing PDF form letters as part of a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been using the Apache FOP &lt;a class="reference external" href="http://xmlgraphics.apache.org/fop/"&gt;http://xmlgraphics.apache.org/fop/&lt;/a&gt;
to transform XSL:FO into PDF's.  FOP works well enough for some DocBook
processing, but it can't handle really complex stuff gracefully.&lt;/p&gt;
&lt;p&gt;Can we also use this XSL:FO technology
for producing PDF form letters as part of a Customer Relationship Management
solution?  Is FOP
suitable?&lt;/p&gt;
&lt;div class="section" id="xsl-fo-products"&gt;
&lt;h2&gt;XSL:FO Products&lt;/h2&gt;
&lt;p&gt;A very complete list is
available at XMLSoftware.com &lt;a class="reference external" href="http://www.xmlsoftware.com/xslfo.html"&gt;http://www.xmlsoftware.com/xslfo.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The core list of tools include the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adobe seems to own this space; they offer
XSL:FO processing tools in a wide variety of forms.  Further, they have an
on-line service http://createpdf.adobe.com/
that can convert many things into PDF's.&lt;/li&gt;
&lt;li&gt;ReportLab &lt;a class="reference external" href="http://www.reportlab.com/"&gt;http://www.reportlab.com/&lt;/a&gt; has an
engine that will create PDF's from source files.  They also have an open source
toolkit.&lt;/li&gt;
&lt;li&gt;Antenna House &lt;a class="reference external" href="http://www.antennahouse.com/"&gt;http://www.antennahouse.com/&lt;/a&gt; offers the
&lt;strong&gt;XSL Formatter&lt;/strong&gt;  product that seems to be widely
regarded.&lt;/li&gt;
&lt;li&gt;RenderX &lt;a class="reference external" href="http://www.renderx.com/"&gt;http://www.renderx.com/&lt;/a&gt; offers the &lt;strong&gt;XEP&lt;/strong&gt;
product that does this job well.&lt;/li&gt;
&lt;li&gt;Chive &lt;a class="reference external" href="http://www.chive.com/"&gt;http://www.chive.com/&lt;/a&gt; has their Apoc product, which is a .Net
solution.&lt;/li&gt;
&lt;li&gt;Ecrion &lt;a class="reference external" href="http://www.ecrion.com/"&gt;http://www.ecrion.com/&lt;/a&gt; also has a
.NET product.&lt;/li&gt;
&lt;li&gt;Alt-soft &lt;a class="reference external" href="http://www.alt-soft.com/"&gt;http://www.alt-soft.com/&lt;/a&gt; has a beta
product for xml2pdf conversion.&lt;/li&gt;
&lt;li&gt;Stylus Studio &lt;a class="reference external" href="http://www.stylusstudio.com/xsl_fo_processing.html"&gt;http://www.stylusstudio.com/xsl_fo_processing.html&lt;/a&gt; has a tool that edits XSL:FO and runs
Apache FOP for you.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://www.w3schools.com"&gt;W3Schools&lt;/a&gt;  site lists two more tools &lt;a class="reference external" href="http://www.w3schools.com/xslfo/xslfo_software.asp"&gt;http://www.w3schools.com/xslfo/xslfo_software.asp&lt;/a&gt;:
Xinc &lt;a class="reference external" href="http://www.lunasil.com/"&gt;http://www.lunasil.com/&lt;/a&gt; and
Scriptura &lt;a class="reference external" href="http://www.inventivedesigners.com/scriptura/what.html"&gt;http://www.inventivedesigners.com/scriptura/what.html&lt;/a&gt;.   Lunasil looks like a very small
company; Xinc appears to be their only product.  Scriptura's description sounds
like Adobe's -- it's tough to go head-to-head with the
leader.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A nice comparison between the
market-leaders &lt;strong&gt;XEP&lt;/strong&gt;  and &lt;strong&gt;XSL Formatter&lt;/strong&gt;  is available at XSLT.com &lt;a class="reference external" href="http://www.xslt.com/html/xsl-list/2002-04/msg00227.html"&gt;http://www.xslt.com/html/xsl-list/2002-04/msg00227.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beyond these tools, Altova has a product &lt;a class="reference external" href="http://www.altova.com/dev_portal_xslfo.html%22%20target=%22NewWindow"&gt;http://www.altova.com/dev_portal_xslfo.html%22%20target=%22NewWindow&lt;/a&gt;
to help design the XSL that controls document production.&lt;/p&gt;
&lt;p&gt;Finally, a partial solution is iText
&lt;a class="reference external" href="http://www.lowagie.com/iText"&gt;http://www.lowagie.com/iText&lt;/a&gt;, which is a set of Java libraries that
create PDF's.&lt;/p&gt;
&lt;p&gt;Personally, I would
prefer to use something like ReportLab Toolkit &lt;a class="reference external" href="http://www.reportlab.org/"&gt;http://www.reportlab.org/&lt;/a&gt;, but the
customer will likely balk at anything non-Java.  Indeed, between Python, Cheetah
and ReportLab, I think I'd be done with a solution, rather than still studying
the problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Thoughts&lt;/strong&gt;.  The real question, however, is why
XSL:FO?  There are lots of products that produce PDF files.  We have to look at
the real purpose behind the task.  For converting DocBook files, the stylesheets
and XSL:FO components fit into a very nice processing pipeline that is driven by
Xalan.&lt;/p&gt;
&lt;p&gt;However, in the case of Customer
Relationship Management, we are using an application to do &amp;quot;mail-merge&amp;quot;
processing, combining a template letter with details extracted from the
database.  We can imagine two families of architectures for
this:&lt;/p&gt;
&lt;p&gt;Minimal Markup.  In this case,
either no markup or a home-brewed minimal markup language are used.  This has
the advantage of minimizing knowledge of XSL:FO.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Custom software, using iText or similar, that
has the letter template encoded in the application.  This is simple, but quite
inflexible.&lt;/li&gt;
&lt;li&gt;Custom software, using iText or similar, that
has the letter template in some home-brewed markup language.  It reads the
template and the data, merges the data in and produces PDF output.  In this
case, much of the formatting information is either implied or encoded in the
home-brewed markup language.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Existing Markup.  In this case, existing markup languages are leveraged.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Template processing.  Use an existing template
engine (Velocity, Cheetah or similar) that uses a letter template in a
meta-markup language.  This produces XSL:FO output that can then be processed by
any of the XSL:FO tools.&lt;/li&gt;
&lt;li&gt;XSL processing.  Use Xalan to transform the
source details into individual letters using an XSL template for the letter.
This produces XSL:FO output that can then be processed by any of the XSL:FO
tools.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Adobe has products that handle
all of this, but they can be expensive.  The Minimal Markup solutions involve
some programming, but it is the kind of inflexible programming that makes every
minor change to the template a huge cost and expense.  The Existing Markup
solutions involve considerable learning, but also mean that letter changes are
handled by someone who knows the template language and the XSL:FO markup
language.&lt;/p&gt;
&lt;p&gt;The knowledge of XSL:FO can
be minimized with clever use of the Cheetah or Velocity templates.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="docbook"></category><category term="xml"></category></entry><entry><title>The Power of Static HTML</title><link href="https://slott56.github.io/2005_10_31-the_power_of_static_html.html" rel="alternate"></link><published>2005-10-31T02:00:00-05:00</published><updated>2005-10-31T02:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-31:/2005_10_31-the_power_of_static_html.html</id><summary type="html">&lt;div class="section" id="problem"&gt;
&lt;h2&gt;PROBLEM&lt;/h2&gt;
&lt;p&gt;I need to display my product catalog according to a number of dimensions but the
data changes slowly and isn't very complex.  Is a relational database and a web
application really appropriate?  Or can I get away with something
simpler?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="context"&gt;
&lt;h2&gt;CONTEXT&lt;/h2&gt;
&lt;p&gt;Some small product catalogs evolve slowly.  A detailed …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="problem"&gt;
&lt;h2&gt;PROBLEM&lt;/h2&gt;
&lt;p&gt;I need to display my product catalog according to a number of dimensions but the
data changes slowly and isn't very complex.  Is a relational database and a web
application really appropriate?  Or can I get away with something
simpler?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="context"&gt;
&lt;h2&gt;CONTEXT&lt;/h2&gt;
&lt;p&gt;Some small product catalogs evolve slowly.  A detailed data model exists, including a
relational database implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="forces"&gt;
&lt;h2&gt;FORCES&lt;/h2&gt;
&lt;p&gt;On the one hand, we have a complete relational database.  However, the traditional
RDBMS Query capability isn't very valuable when each result set only has a few
rows.  A pin-point query actually makes product comparisons
difficult.&lt;/p&gt;
&lt;p&gt;On one hand, a sophisticated search can produce a page with a list of related products.  However, for the
relevant dimensions, a relevant set of search results can all be computed and
stored statically with the content.  While a user might go outside these
pre-comuted indexes, it is an unlikely accident.  Further, the catalog is not
too complex; fixed lists will facilitated navigation through simplified of the
dimensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;SOLUTION&lt;/h2&gt;
&lt;p&gt;Static HTML can represent the entire catalog.  You don't really need an active
application to do searches.&lt;/p&gt;
&lt;p&gt;Each dimension of presentation (by product family, by designer, by size, by cost,
whatever) can be a separate index page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consequence"&gt;
&lt;h2&gt;CONSEQUENCE&lt;/h2&gt;
&lt;p&gt;The catalog has to be modeled using a dimensional star schema.  This may require
some minor changes to the database that maintains the master
catalog.&lt;/p&gt;
&lt;p&gt;The catalog has to be
transformed into a number of parallel index structures.  This is an interesting
little programming problem in its own right.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="web"></category><category term="cms"></category></entry><entry><title>No more Mindspring</title><link href="https://slott56.github.io/2004_02_26-no_more_mindspring.html" rel="alternate"></link><published>2004-02-26T01:19:00-05:00</published><updated>2004-02-26T01:19:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2004-02-26:/2004_02_26-no_more_mindspring.html</id><summary type="html">&lt;p&gt;Years and years ago I started using
Delphi internet services.  They had a complicated dialup arrangement through
Sprintnet and Tymenet to a farm of VAX servers in the Boston area, part of
Northeast Education and Research (NEAR) net.  This was Delphi internet,
character-mode, 9600 baud.  I used Mac classic and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Years and years ago I started using
Delphi internet services.  They had a complicated dialup arrangement through
Sprintnet and Tymenet to a farm of VAX servers in the Boston area, part of
Northeast Education and Research (NEAR) net.  This was Delphi internet,
character-mode, 9600 baud.  I used Mac classic and an external modem.  It was
primitive, but effective.&lt;/p&gt;
&lt;p&gt;Back in '96
or thereabouts, Delphi closed down their dial-up service, and switched their
customers to Mindspring.  I continued to use a Delphi.com email address until
they stopped that service also.  When Delphi folded up shop entirely (in 98?), I
switched to using yahoo.com as my mail address, using Mindspring for dialup and
for web page hosting.  Mindspring was bought by Earthlink, but this didn't
change my access.&lt;/p&gt;
&lt;p&gt;Since starting to
use Road Runner back in '00 or '01, I've kept both a dial-up Mindspring account
and a road-runner account.  Basically I could keep my Mindspring web site for
under $60 per year, even though I didn't make much use of their dial-up service.&lt;/p&gt;
&lt;p&gt;Now that I'm paying for a &lt;tt class="docutils literal"&gt;.mac&lt;/tt&gt; site, it's hard to justify keeping the Mindspring site running.  So, I've
restructured my site slightly, moved it to .mac.  The final step is to replace
the old site with a much of meta tags that redirect back to the .mac
site.&lt;/p&gt;
</content><category term="Technologies"></category><category term="macintosh"></category><category term="macosx"></category></entry><entry><title>JB replies: Why Another Programming Language?</title><link href="https://slott56.github.io/2004_02_16-jb_replies_why_another_programming_language.html" rel="alternate"></link><published>2004-02-16T01:37:00-05:00</published><updated>2004-02-16T01:37:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2004-02-16:/2004_02_16-jb_replies_why_another_programming_language.html</id><summary type="html">&lt;p&gt;The most common argument for introducing YAPL
goes like this:&lt;/p&gt;
&lt;p&gt;&amp;quot;There are way too many
programming languages out there. And they are each flawed in some way (small and
odd, or large and incomprehensible). So I, in my wisdom and will create YAPL,
which will displace all these other, inferior …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The most common argument for introducing YAPL
goes like this:&lt;/p&gt;
&lt;p&gt;&amp;quot;There are way too many
programming languages out there. And they are each flawed in some way (small and
odd, or large and incomprehensible). So I, in my wisdom and will create YAPL,
which will displace all these other, inferior
PL.&amp;quot;&lt;/p&gt;
&lt;p&gt;Of course the vast majority of
other PLs were created for very similar reasons. There are two other motivations
common in creating programming
languages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An experiment: &amp;quot;Let's try
this and see what happens.&amp;quot;&lt;/li&gt;
&lt;li&gt;Scratching an
itch: &amp;quot;I have a problem that's too hard to address with the tools at
hand.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter often get over-sold
on the assumption that everyone else &amp;quot;ought&amp;quot; to have the same itch. But
sometimes these work. The former sometimes take off to the astonishment of the
originators. The first kind of new language mentioned, the &amp;quot;new, better
solution&amp;quot;, takes continual pushing up-hill to get it adopted, as it often solves
a problem the originator thinks other people have, in a way that the originator
believes others should find
useful.&lt;/p&gt;
&lt;p&gt;Aside from that, yet another
programming language is a fine idea. Especially one that's verbose,
inconsistent, and probably incomplete without some kind of big
magic.&lt;/p&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>XML/XSLT - A Response</title><link href="https://slott56.github.io/2003_12_24-xmlxslt_a_response.html" rel="alternate"></link><published>2003-12-24T20:37:00-05:00</published><updated>2003-12-24T20:37:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2003-12-24:/2003_12_24-xmlxslt_a_response.html</id><summary type="html">&lt;p&gt;The idea of &amp;quot;universal&amp;quot; processing via
XSLT is moderately appealing.  There's a big issue with poorly defined
semantics, which always breaks a meta-data driven approache.  The holy grail is
perfect metadata from which all application software can be derived in a trivial
way.  I'm not sure this is ever achievable …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The idea of &amp;quot;universal&amp;quot; processing via
XSLT is moderately appealing.  There's a big issue with poorly defined
semantics, which always breaks a meta-data driven approache.  The holy grail is
perfect metadata from which all application software can be derived in a trivial
way.  I'm not sure this is ever achievable - it requires a perfect metadata
description language and perfect metadata for the problem domain.&lt;/p&gt;
&lt;p&gt;However, more pragmatically,
I'm deeply suspicious of introducing
&lt;strong&gt;Yet Another Programming Language&lt;/strong&gt;  into the world.  XSLT as a
simple-minded tool to transform notations is fair, but once you start to usurp
real computation, the value of yet another broadly focused language seems to
diminish.  We already have ecmas/javascript that can be packaged up with the
XSLT, effectively splitting it into two languages; but when javascript is too
simple for some problems, we have step outside javascript into another language.
Why not just start with the other language (Java, C#, Python) and skip the XSLT
step.  Keep XSLT focused on the one thing is does well, and do the other things
in existing general-purpose programming languages.&lt;/p&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>Not the first time...</title><link href="https://slott56.github.io/2003_12_13-not_the_first_time.html" rel="alternate"></link><published>2003-12-13T19:23:00-05:00</published><updated>2003-12-13T19:23:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2003-12-13:/2003_12_13-not_the_first_time.html</id><summary type="html">&lt;p&gt;From an email I got recently, lightly edited.  Responses to follow&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: The data layer of application architecture must be flexible enough to adapt to
virtually any new data-driven functional requirement demanded by today's
client..right...well to support such adaptability in client deployments, the
data model must allow almost …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From an email I got recently, lightly edited.  Responses to follow&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: The data layer of application architecture must be flexible enough to adapt to
virtually any new data-driven functional requirement demanded by today's
client..right...well to support such adaptability in client deployments, the
data model must allow almost arbitrary categorizations and groupings of data
within the system without hindering development speed, system response time,
ease of use and system simplicity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proposed Architecture&lt;/strong&gt;: I am really started to
take a liking to Java/XSLT that is driven by XML...well here is my
thinking:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Client requests can
easily be transformed into client-independent XML
structures&lt;/li&gt;
&lt;li&gt;EAI tools or APIs could
handle both receiving and transmitting events via
XML&lt;/li&gt;
&lt;li&gt;SQL result sets can possibly
be naturally modeled as XML
fragments&lt;/li&gt;
&lt;li&gt;The XML tree fragments
returned from the API and database queries may be used to generate dynamic
queries.&lt;/li&gt;
&lt;li&gt;Client side response
should first be represented as XML to capture the data structure. Of course this
XML could be converted to whatever format required by the
client&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Both data and events are naturally modeled in a similar structure:
XML&lt;/li&gt;
&lt;li&gt;A single tool, XSLT, is able
to transform and generate both data and
events&lt;/li&gt;
&lt;li&gt;Using a standard XML format
for both incoming client requests and outgoing response allow clean client
independence.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Weaknesses&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No interactive debugging tools. However this could be mitigated by extensive
debug logging by the application
server.&lt;/li&gt;
&lt;li&gt;XSLT is a recursive
functional language and requires you to adapt a new methodology other than
object oriented.&lt;/li&gt;
&lt;li&gt;Abstraction
hurdles would not be enforced by the interpreter but possibly with superb coding
discipline.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="xml"></category></entry><entry><title>Good-bye Old Mac</title><link href="https://slott56.github.io/2003_12_01-good_bye_old_mac.html" rel="alternate"></link><published>2003-12-01T02:08:00-05:00</published><updated>2003-12-01T02:08:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2003-12-01:/2003_12_01-good_bye_old_mac.html</id><summary type="html">&lt;p&gt;Mac #1 was a 1986 128K Mac, later
upgraded to 1M Mac Plus, with external everything.  Eventually a 70Mb SCSI hard
drive.  Bundled up with another just like it, it sold on eBay for shipping + a
few bucks.  I kept it running until 2001, when I finally shut it off …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mac #1 was a 1986 128K Mac, later
upgraded to 1M Mac Plus, with external everything.  Eventually a 70Mb SCSI hard
drive.  Bundled up with another just like it, it sold on eBay for shipping + a
few bucks.  I kept it running until 2001, when I finally shut it off and took
out the old LocalTalk part of my
network.&lt;/p&gt;
&lt;p&gt;Mac #2 was a 1994
Performa 6115 CD, with 24M of RAM.  It started with a 300M internal drive, but
was upgraded to 500M.  A number of external drives were added: 340M, plus a
whopping 1Gb drive.  Bundled up with a SCSI Zip drive, a Kodak DSC50 camera,
etc., it will be on eBay before long.  Someone may want it for parts, or
nostalgia.  I've heard that they plug into your stereo rack and make great MP3
players.  I kept it running until 2001, when it was not used much.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.lowendmac.com/ppc/6100.shtml"&gt;Low End Mac&lt;/a&gt;  for more
information.&lt;/p&gt;
&lt;p&gt;Mac #3 was a 1995
PowerBook 5300cs that I talked CTG into buying me.  It lasted until I had
trouble with the Mac version of some of their tools (GroupWise, for example),
and the Windows emulator was too slow to be useful. In 1999 I put it on a shelf,
where the power supply and batteries slowly died.  When my employer packed up
the Albany office, it got packed up with all the other office equipment and
supplies.&lt;/p&gt;
&lt;p&gt;Mac #4 is a 1999 iMac
DV (slot-loading, Blueberry), with 256Mb RAM, and a 6Gb internal drive, an
external CD burner.  This was a Christmas surprise and we played a bunch of
games on this machine.  Works great.  Once I get the Mac OS X version of
Allegro, I'll be able to upgrade that machine to Mac OS
X.&lt;/p&gt;
&lt;p&gt;Mac #5 is a 2000 iBook
(special edition, Graphite) with 128Mb of RAM, and a 6Gb internal drive.  It
needs memory before upgrading to Mac OS X; the battery is shot, however, and it
may be reaching the end of its
life.&lt;/p&gt;
&lt;p&gt;Mac #6 is a 2002 iMac
(version 2.1, the desk lamp) with 256Mb of RAM, a 40Gb internal drive, a 100Gb
external drive and an external DVD burner.&lt;/p&gt;
</content><category term="Technologies"></category><category term="macintosh"></category><category term="macosx"></category></entry><entry><title>Content Management Alternatives</title><link href="https://slott56.github.io/2003_11_24-content_management_alternatives.html" rel="alternate"></link><published>2003-11-24T16:21:00-05:00</published><updated>2003-11-24T16:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2003-11-24:/2003_11_24-content_management_alternatives.html</id><summary type="html">&lt;p&gt;A Comment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt;I'm not sure what the issue is,
&amp;gt;and why &amp;quot;simple content manager&amp;quot; needs definition.&lt;/p&gt;
&lt;p&gt;Neither was I until I read your reply.&lt;/p&gt;
&lt;p&gt;I did  not know enough to formulate the correct question.
What I was struggling was when do you use simple
hyperlinks/html vs a content mgr …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A Comment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt;I'm not sure what the issue is,
&amp;gt;and why &amp;quot;simple content manager&amp;quot; needs definition.&lt;/p&gt;
&lt;p&gt;Neither was I until I read your reply.&lt;/p&gt;
&lt;p&gt;I did  not know enough to formulate the correct question.
What I was struggling was when do you use simple
hyperlinks/html vs a content mgr vs a database.
I finally have some rules of thumb to select
between them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt;Since word searches are fast and almost free,
&amp;gt;it seems odd for you to exclude it&lt;/p&gt;
&lt;p&gt;Ooops. Did not intend to imply this. Sometimes
google is great, at othe times, I get overwhelmed
by the results. That is why I buy books. Books
provide me w/ context and structure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which
seems to lead to the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;If you have very little content or very little structure to your content, you
can manage the links manually.  Little content means that you can't justify the
expense.  little structure means that you can't formalize the structure in a way
that your content manager can be used
effectively.&lt;/li&gt;
&lt;li&gt;If you have enough
content to justify the expense and some structure, get a content manager to
track links properly, and keep the current and consistent.  Some problems are
amenable to a content manager, but not structured enough for an
RDBMS.&lt;/li&gt;
&lt;li&gt;If you have content and
enough structure to justify the effort required to represent it in a database,
then generate HTML (and the like) from a RDBMS source.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="Technologies"></category><category term="web"></category><category term="cms"></category></entry><entry><title>Why Content Manager?</title><link href="https://slott56.github.io/2003_11_23-why_content_manager.html" rel="alternate"></link><published>2003-11-23T19:49:00-05:00</published><updated>2003-11-23T19:49:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2003-11-23:/2003_11_23-why_content_manager.html</id><summary type="html">&lt;p&gt;A Question:&lt;/p&gt;
&lt;blockquote&gt;
&amp;gt;&amp;gt; A while back you mentioned the following book
&amp;gt;&amp;gt;
&amp;gt;&amp;gt; Book Title: Text, ConText, and HyperText Writing with and for the Computer edited by Edward Barrett
&amp;gt;&amp;gt; ISBN 0-262-02275-3
&amp;gt;&amp;gt;
&amp;gt;&amp;gt; I bought and then scanned through the book. I picked the following article to read semi carefully
&amp;gt;&amp;gt; Hypertext: A Way of Incorporating …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A Question:&lt;/p&gt;
&lt;blockquote&gt;
&amp;gt;&amp;gt; A while back you mentioned the following book
&amp;gt;&amp;gt;
&amp;gt;&amp;gt; Book Title: Text, ConText, and HyperText Writing with and for the Computer edited by Edward Barrett
&amp;gt;&amp;gt; ISBN 0-262-02275-3
&amp;gt;&amp;gt;
&amp;gt;&amp;gt; I bought and then scanned through the book. I picked the following article to read semi carefully
&amp;gt;&amp;gt; Hypertext: A Way of Incorporating User Feedback into Online Documentation, Patricia Ann Carison
&amp;gt;&amp;gt;
&amp;gt;&amp;gt; Thanks for the reference. It is a welcome addition to my library.&lt;/blockquote&gt;
&lt;p&gt;Earlier I said the
following:&lt;/p&gt;
&lt;p&gt;&amp;quot;But, you don't need a
database, SQL, or other stuff for simple content
management.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&amp;gt; Can we attempt to define &amp;quot;simple&amp;quot;.
&amp;gt; When I use the term hyperlink, I am using it the way the hyperlink is implemented in most current browsers.
&amp;gt; Hyperlinks are great for uni-directional motion either forward or back.
&amp;gt; Also, they are good if you want to go from your current location to n possible new locations.
&amp;gt; If your &amp;quot;content management&amp;quot; only needs the above requirements, it is simple.
&amp;gt; This is my attempt at defining simple.
&amp;gt;
&amp;gt; I don't like hyperlnks because there is no back propagation. Once I am at a page, there is no way for me to determine all the possible ways that I can get to this page. I can only go back the way that I came.
&amp;gt; This addresses the navigation from one chunk of info to another.
&amp;gt; Also, a simple content management does not involve word searches or pattern matches.
&amp;gt;
&amp;gt; I would be interested in your definition of &amp;quot;simple&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Simple is as
simple does.  I'm not sure what the issue is, and why &amp;quot;simple content manager&amp;quot;
needs definition.&lt;/p&gt;
&lt;p&gt;The
unidirectionality of links are a known limitation of the current structured text
world.  Indeed, the management of links is a huge problems, since links, labels
and targets are not kept under control.  A target moves, no link changes
automatically.  Or, one copy of a link changes, but another copy becomes
invalid.  All very sad; the best that can be done is to track links and generate
them as part of generating HTML from the
content.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Back Propagation&amp;quot;
is partly satisifed by the navigation crumbs left along the way.  Browsers keep
history, some web sites keep a path back to the home
page.&lt;/p&gt;
&lt;p&gt;The question of all
places that reference a particular link is a kind contradiction.  The number of
references to content grows or shrinks over time.  Consider a link as a
bibliographic entry: no author can ever determine references to his work; the
can only determine work he
referenced.&lt;/p&gt;
&lt;p&gt;Since word searches
are fast and almost free, it seems odd for you to exclude it.  Contrary to
Oracle's point of view (e.g. from Google's point of view) full text search is a
technical nothing, and everyone should offer
it.&lt;/p&gt;
&lt;p&gt;The issue is one of the
depth of structure to your data:  highly structured, normalized data belongs in
a database; ill-structured, irregular data belongs in a content manager.&lt;/p&gt;
&lt;p&gt;Some data blurs the
distinction and difficult decisions arise.  For example, insurance contracts are
wonderfully complex, can be represented in a database, but require large
sophisticated programs.  Maybe a simple content manager to keep some information
about the clauses, terms and conditions associated with particular products.  A
database can track customers, products, premiums, payments, etc.  However, the
actual words that comprise the contract is ill-structured data and doesn't
really need to be in a database at all.&lt;/p&gt;
</content><category term="Technologies"></category><category term="web"></category><category term="cms"></category></entry><entry><title>iBlog</title><link href="https://slott56.github.io/2003_11_15-iblog.html" rel="alternate"></link><published>2003-11-15T14:53:00-05:00</published><updated>2003-11-15T14:53:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2003-11-15:/2003_11_15-iblog.html</id><summary type="html">&lt;p&gt;Must reconcile web content among all the
freebie hosting sites:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.mindspring.com/~slott1"&gt;Mindspring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://home.nycap.rr.com/slott"&gt;Roadrunner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://homepage.mac.com/s_lott"&gt;.Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.geocities.com/s_lott/"&gt;Geocities&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mindspring and Roadrunner are
duplicates, as a test of something or other.  .Mac is built by the Apple iLife
tools, and is a place to play with those.  Geocities.  Hmm.  Why do I have that
again …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Must reconcile web content among all the
freebie hosting sites:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.mindspring.com/~slott1"&gt;Mindspring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://home.nycap.rr.com/slott"&gt;Roadrunner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://homepage.mac.com/s_lott"&gt;.Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.geocities.com/s_lott/"&gt;Geocities&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mindspring and Roadrunner are
duplicates, as a test of something or other.  .Mac is built by the Apple iLife
tools, and is a place to play with those.  Geocities.  Hmm.  Why do I have that
again?&lt;/p&gt;
</content><category term="Technologies"></category><category term="technologies"></category><category term="web"></category></entry></feed>