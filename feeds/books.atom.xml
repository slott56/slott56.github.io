<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>S.Lott -- Software Architect - books</title><link href="https://slott56.github.io/" rel="alternate"></link><link href="/feeds/books.atom.xml" rel="self"></link><id>https://slott56.github.io/</id><updated>2024-09-03T14:35:00-04:00</updated><entry><title>Revised Books Available</title><link href="https://slott56.github.io/2024-09-03-revised_books_available.html" rel="alternate"></link><published>2024-09-03T14:35:00-04:00</published><updated>2024-09-03T14:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-09-03:/2024-09-03-revised_books_available.html</id><summary type="html">&lt;p&gt;Big Announcement: the 2024.8 version of &lt;em&gt;Unlearning SQL&lt;/em&gt;, and the 2024.9 version of &lt;em&gt;Pivot to Python&lt;/em&gt; are available from booksellers online. Both are revised and all the code tested with Python 3.12.&lt;/p&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;p&gt;This book shows you how to translate essential SQL concepts into the Python …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Big Announcement: the 2024.8 version of &lt;em&gt;Unlearning SQL&lt;/em&gt;, and the 2024.9 version of &lt;em&gt;Pivot to Python&lt;/em&gt; are available from booksellers online. Both are revised and all the code tested with Python 3.12.&lt;/p&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;p&gt;This book shows you how to translate essential SQL concepts into the Python language so they can be applied outside the database environment. A database includes features for access controls, persistence, and concurrent updates, none of which may be needed for an extract-transform-load pipeline. This helps restate the SQL design concepts into Python applications that are faster and simpler because they don't rely on a database.&lt;/p&gt;
&lt;p&gt;The ideas also apply to data analytic problems where the SQL GROUP-BY is a helpful design pattern. This book provides concrete examples of expressing the concept in Python instead of SQL.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Lulu&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Google Play&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Apple Books&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;p&gt;This short book covers how to install Python and start mastering the language immediately.
It covers some fundamental aspects of the Python programming language and a few important libraries.
It will help you develop some core skills and it creates a foundation for pursuing more in-depth books on Python programming.&lt;/p&gt;
&lt;p&gt;For some professionals, this may be all the help they need to get started. For skilled beginners, this can help open the door making other books easier to read and understand.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/dp/B0DFMT15GY"&gt;https://www.amazon.com/dp/B0DFMT15GY&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Lulu (pending approval)&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Google Play&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=fQ6IEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=fQ6IEAAAQBAJ&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Apple Books&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="books"></category><category term="Python"></category><category term="SQL"></category><category term="database"></category></entry><entry><title>Sphinx EPUB and Print</title><link href="https://slott56.github.io/2024-08-27-sphinx_epub_and_print.html" rel="alternate"></link><published>2024-08-27T16:31:00-04:00</published><updated>2024-08-27T16:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-08-27:/2024-08-27-sphinx_epub_and_print.html</id><summary type="html">&lt;p&gt;Let's say you want to self-publish an ebook and a print-on-demand paperback book.&lt;/p&gt;
&lt;p&gt;This isn't impossible, nor is it particularly easy. Here's what I've learned.&lt;/p&gt;
&lt;div class="section" id="basic-workflow"&gt;
&lt;h2&gt;Basic Workflow&lt;/h2&gt;
&lt;p&gt;You've got two obvious paths to make sure your EPUB book and your print-on-demand book match:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Convert EPUB to Print. This generally means …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Let's say you want to self-publish an ebook and a print-on-demand paperback book.&lt;/p&gt;
&lt;p&gt;This isn't impossible, nor is it particularly easy. Here's what I've learned.&lt;/p&gt;
&lt;div class="section" id="basic-workflow"&gt;
&lt;h2&gt;Basic Workflow&lt;/h2&gt;
&lt;p&gt;You've got two obvious paths to make sure your EPUB book and your print-on-demand book match:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Convert EPUB to Print. This generally means starting with HTML for the EPUB and building LaTeX from this to create the PDF. There are a number of tools that do this. It's relatively easy because HTML is easy to parse, and doesn't have quite to many options and features as LaTeX.&lt;/li&gt;
&lt;li&gt;Convert Print to EPUB. This generally means using a specialized LaTeX tool to extract HTML from LaTeX. There's a pair of tools, &lt;strong&gt;Tex4ht&lt;/strong&gt; and &lt;strong&gt;LaTeX2HTML&lt;/strong&gt;, that can be pressed into service.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these suffer from potential problems with vague markup.
HTML has a limited domain of tags, and important semantic details put into &lt;tt class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;lt;span&amp;gt;&lt;/tt&gt; tags where the CSS class name provides crucial information.
LaTeX is more than just markup; it's a Turning-complete programming language, and your &lt;tt class="docutils literal"&gt;.tex&lt;/tt&gt; input as a piece of code that emits a DVI file that drives the final printing process.
Extracting semantically meaningful details can be difficult.&lt;/p&gt;
&lt;p&gt;There's a third path: use a language like RST (or Markdown) and convert it to HTML &lt;strong&gt;and&lt;/strong&gt; LaTeX.
Now you have one source for the content, and the vagaries of HTML tags vs. CSS classes or LaTeX layers are less burdensome.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Sphinx&lt;/strong&gt; package handles this elegantly. &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/index.html"&gt;https://www.sphinx-doc.org/en/master/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="content-creation"&gt;
&lt;h2&gt;Content Creation&lt;/h2&gt;
&lt;p&gt;First, get all the examples right. Be sure all the code has unit tests.&lt;/p&gt;
&lt;p&gt;Option 1 is to use REPL-based examples and run the text through &lt;strong&gt;doctest&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Option 2 is to use more conventional modules in files with a separate test tool.
This can be &lt;strong&gt;doctest&lt;/strong&gt;, but it may also need to be something more sophisticated, like &lt;strong&gt;pytest&lt;/strong&gt; (&lt;a class="reference external" href="https://docs.pytest.org/en/stable/"&gt;https://docs.pytest.org/en/stable/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It's imperative to use &lt;strong&gt;mypy&lt;/strong&gt; or &lt;strong&gt;pyright&lt;/strong&gt; to check the type hints, and &lt;strong&gt;ruff&lt;/strong&gt; or &lt;strong&gt;black&lt;/strong&gt; to format the code consistently.
This has to be done carefully. Sometimes, the book margins require fiddling with &lt;strong&gt;ruff&lt;/strong&gt; configuration to narrow
the code so it will fit.&lt;/p&gt;
&lt;p&gt;A handy feature of &lt;strong&gt;doctest&lt;/strong&gt; is the &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; object. This is a mapping from test name to test code.&lt;/p&gt;
&lt;p&gt;Let's say you have an example line of code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;355&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you need to be sure it works.&lt;/p&gt;
&lt;p&gt;Consider putting this into your examples file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_ex_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;gt;&amp;gt;&amp;gt; from math import isclose, pi&lt;/span&gt;
&lt;span class="s2"&gt;&amp;gt;&amp;gt;&amp;gt; isclose(p, pi, rel_tol=1e-7)&lt;/span&gt;
&lt;span class="s2"&gt;True&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can add the following at the very bottom of the module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__test__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The doctest target, &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; will be a dictionary, with test cases pulled from
all global variables that start with &lt;tt class="docutils literal"&gt;test_&lt;/tt&gt;.
This means every random, little scrap of code can be thrown into a file with enough tests to make
the examples unassailable.&lt;/p&gt;
&lt;p&gt;Of course, there's more to test design, but that's a start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="general-setup"&gt;
&lt;h2&gt;General Setup&lt;/h2&gt;
&lt;p&gt;Diagrams are often best done using &lt;strong&gt;PlantUML&lt;/strong&gt; (&lt;a class="reference external" href="https://plantuml.com"&gt;https://plantuml.com&lt;/a&gt;).
For really, really complicated stiff, use TIKZ and LaTeX.&lt;/p&gt;
&lt;p&gt;That means installing the &lt;tt class="docutils literal"&gt;sphinxcontrib.plantuml&lt;/tt&gt; plug-in to Sphinx to make PlantUML work cleanly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sphinx-epub"&gt;
&lt;h2&gt;Sphinx EPUB&lt;/h2&gt;
&lt;p&gt;The EPUB pipeline in Sphinx is so similar to the HTML pipeline. It's easy to create the HTML
pages and review them for readability, formatting, spelling mistakes, clarity, spelling mistakes,
grammar errors, and spelling mistakes.&lt;/p&gt;
&lt;p&gt;I use &lt;strong&gt;pycharm&lt;/strong&gt;, and the spell-checking is less than ideal. For free. For a few $$$, I think I might do better.&lt;/p&gt;
&lt;p&gt;I have some CSS features that I really like.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A lettrine at the start of a section. This is a &amp;quot;dropped capital letter&amp;quot;. It ties up two lines.&lt;/li&gt;
&lt;li&gt;From &lt;a class="reference external" href="https://www.lode.de/"&gt;https://www.lode.de/&lt;/a&gt;, I borrowed the idea of big quotation marks around a blockquote paragraph.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These require special CSS in Sphinx. There are two parts.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add this to your &lt;tt class="docutils literal"&gt;conf.py&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;html_static_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;html_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;building_skills.css&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a &lt;tt class="docutils literal"&gt;building_skills.css&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;_static&lt;/tt&gt; directory. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alabaster.css&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;has&lt;/span&gt;&lt;span class="o"&gt;(&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lettrine&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;first-letter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-0.1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lettrine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-variant-caps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;small-caps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;myquotation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;/* Indent */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;myquotation&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;“&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, all you need to do is make sure there's a &lt;tt class="docutils literal"&gt;&amp;lt;span &lt;span class="pre"&gt;class=&amp;quot;lettrine&amp;quot;&amp;gt;&lt;/span&gt;&lt;/tt&gt; to make the dropped-capital lettrine work. That's done with a local extension for Sphinx.
Again, there are two parts.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add this to your &lt;tt class="docutils literal"&gt;conf.py&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this, too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;lettrine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# all the others, like &amp;quot;sphinxcontrib.plantuml&amp;quot;, and &amp;quot;sphinx.ext.imgmath&amp;quot;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create an &lt;tt class="docutils literal"&gt;ext&lt;/tt&gt; directory, and include a module, &lt;tt class="docutils literal"&gt;lettrine.py&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sphinx.application&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sphinx&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sphinx.util.docutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SphinxDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SphinxRole&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sphinx.util.typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ExtensionMetadata&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LettrineRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SphinxRole&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A role to mark a Lettrine (often at the start of a section.)&lt;/span&gt;

&lt;span class="sd"&gt;    The text becomes a new inline ``&amp;lt;span class=&amp;quot;lettrine&amp;quot;&amp;gt;``&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_message&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="c1"&gt;# Break things up for LaTeX output.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;classes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lettrine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Sphinx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ExtensionMetadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lettrine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LettrineRole&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;parallel_read_safe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;parallel_write_safe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The role defines a &lt;tt class="docutils literal"&gt;:lettrine:&lt;/tt&gt; role that merely wedges in the  proper class.
The &lt;tt class="docutils literal"&gt;setup&lt;/tt&gt; adds the role to the sphinx environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;:lettrine:&lt;/span&gt;&lt;span class="nv"&gt;`Now, your opening sentence has a lettrine.`&lt;/span&gt;
Subsequent lines of the paragraph are formatted &lt;span class="gs"&gt;**normally**&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sphinx-latex"&gt;
&lt;h2&gt;Sphinx LaTeX&lt;/h2&gt;
&lt;p&gt;This involves a &lt;strong&gt;lot&lt;/strong&gt; of little details. We'll start with a little background.
Then we'll look at the configuration.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;The LaTeX language involves a mixture of environments and commands.
The environments have clear boundaries, usually a &lt;tt class="docutils literal"&gt;\begin{X}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\end{X}&lt;/tt&gt;.
Sometimes commands &lt;strong&gt;also&lt;/strong&gt; bracket something; the &lt;tt class="docutils literal"&gt;\makeatletter&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\makeatother&lt;/tt&gt; commands,
bracket a macro definition that needs to have &lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt; interpretation turned off.
This mixture of stateful commands and environments can be exasperating.&lt;/p&gt;
&lt;p&gt;Also, the input can include macro definitions and redefinitions.
Macros can be recursive. There are &lt;tt class="docutils literal"&gt;\if&lt;/tt&gt; constructs.
It's a Turing complete programming language, which makes some aspects quite complicated.&lt;/p&gt;
&lt;p&gt;Producing a book is goes beyond built-in &lt;tt class="docutils literal"&gt;manual&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;howto&lt;/tt&gt; document classes Sphinx offers.
The various book classes decompose the content into three kinds:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Front Matter. Some combination of Half-Title, Publisher, Acknowledgments, Contents, Forward, Prefix, Table of Contents, etc. (Once upon a time, books started with a &amp;quot;title page&amp;quot; that had the title, publisher, and copyright information. Now, most software is setup to create a paper title page in front of that, called a half-title, separate from the cover.)&lt;/li&gt;
&lt;li&gt;Main Matter. The parts and chapters.&lt;/li&gt;
&lt;li&gt;Back Matter. Appendices, indices, glossary, about the author, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to this, a preamble is used to define the various commands and environments.
Ideally, the &lt;tt class="docutils literal"&gt;main.tex&lt;/tt&gt; file is a sequence of &lt;tt class="docutils literal"&gt;\input&lt;/tt&gt; commands to build the preamble,
define the document environment, provide the needed commands, and input
the various pieces content from separate files. Ideally.&lt;/p&gt;
&lt;p&gt;Pragmatically, Sphinx doesn't have a perfectly clean separation of the LaTeX organization
from the content.
Some of this is a consequence of the way LaTeX works, and the need for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\if--\fi&lt;/span&gt;&lt;/tt&gt; blocks
to handle special cases.
Other aspects are patches for subtle incompatibilities among LaTeX packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="latex-content"&gt;
&lt;h3&gt;Latex Content&lt;/h3&gt;
&lt;p&gt;First, the top-level &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt; should have &lt;strong&gt;almost&lt;/strong&gt; nothing in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;toctree&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
   &lt;span class="nc"&gt;:maxdepth:&lt;/span&gt; 2

   front/index
   chapters/index
   back/index
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The book will have three folders: &lt;tt class="docutils literal"&gt;front&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;chapters&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;back&lt;/tt&gt;, each of
which has it's own &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;There are a few (very few) places where LaTeX-specific content is needed.
Here's the &lt;tt class="docutils literal"&gt;back/index.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;  &lt;span class="ow"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; latex

    \frontmatter

&lt;span class="p"&gt;..&lt;/span&gt;  &lt;span class="ow"&gt;toctree&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;

    preface
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it. Include the raw LaTeX command, and include the &lt;tt class="docutils literal"&gt;preface.rst&lt;/tt&gt; file.
This generates nice-looking HTML and EPUB. And it injects the helpful &lt;tt class="docutils literal"&gt;\frontmatter&lt;/tt&gt; in front of the preface.
The &lt;tt class="docutils literal"&gt;back/index.rst&lt;/tt&gt; is similar, as is the &lt;tt class="docutils literal"&gt;chapters/index.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;(The front matter setup doesn't seem ideal. I think the &lt;tt class="docutils literal"&gt;\frontmatter&lt;/tt&gt; should include the half-title, publisher's page, and contents, also, but it doesn't seem to work unless it's in front of the preface.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-sphinx-configuration"&gt;
&lt;h3&gt;The Sphinx Configuration&lt;/h3&gt;
&lt;p&gt;There are four configuration variables that need to be set.&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_engine:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;'xelatex'&lt;/tt&gt; works well because it permits UTF encoded files and (some) Unicode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_elements:&lt;/th&gt;&lt;td class="field-body"&gt;This is a large dictionary of individual settings. The value is a dictionary, wrapped in &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;,
with string key values. Most of the values will be LaTeX commands.
Because LaTeX uses &lt;tt class="docutils literal"&gt;\&lt;/tt&gt;, it's helpful to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &amp;quot;&amp;quot;&amp;quot;&lt;/tt&gt; around the LaTeX.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_theme:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;'manual'&lt;/tt&gt; is close to the book format we want to use. We'll provide a subsequent definition to expand on this. The &amp;quot;theme&amp;quot; in Sphinx parlance is the document class in LaTeX world.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name" colspan="2"&gt;latex_toplevel_sectioning:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;'chapter'&lt;/tt&gt; for books without parts. Otherwise &lt;tt class="docutils literal"&gt;'part'&lt;/tt&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_docclass:&lt;/th&gt;&lt;td class="field-body"&gt;This is a mapping from document class to the actual LaTeX class to use.
We provide the value &lt;tt class="docutils literal"&gt;{'manual': 'scrbook'}&lt;/tt&gt; because that seems to work well.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Within the &lt;tt class="docutils literal"&gt;latex_elements&lt;/tt&gt; mapping, we have a number of configuration parameters.
Most of these are small-ish. Two are immensee blocks of LaTeX code.&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;babel:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;I use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\usepackage[american]{babel}'&lt;/span&gt;&lt;/tt&gt; because, well, I'm an American writer.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;fncychap:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Set to &lt;tt class="docutils literal"&gt;''&lt;/tt&gt; to disable any of the fancy chapter styles. They seem busy to me.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name" colspan="2"&gt;passoptionstopackages:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;I use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\PassOptionsToPackage{headings}{fancyhdr}'&lt;/span&gt;&lt;/tt&gt;, even though I'm not sure this is really required.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;extrapackages:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This is a bunch of &lt;tt class="docutils literal"&gt;\usepackage&lt;/tt&gt; commands. I use &lt;tt class="docutils literal"&gt;lettrine&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;xstring&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;afterpage&lt;/tt&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;preamble:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This is huge, we'll return to it.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;fvset:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This can be used to set the font for &amp;quot;fancyverb&amp;quot; verbatime environments.
I use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\fvset{fontsize=\scriptsize}'&lt;/span&gt;&lt;/tt&gt; to make the font smaller so the examples fit
in a &lt;span class="formula"&gt;6&lt;sup&gt;′′&lt;/sup&gt;×9&lt;sup&gt;′′&lt;/sup&gt;&lt;/span&gt; book.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;releasename:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This is really fussy. The word &amp;quot;release&amp;quot; seems too long, so I set this to &lt;tt class="docutils literal"&gt;v.&lt;/tt&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;geometry:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This defines the page layouts. It's quite long.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\usepackage[paperwidth=6in,&lt;/span&gt; paperheight=9in, inner=3.75pc, outer=3pc, top=2pc, bottom=3pc, includehead, includefoot, &lt;span class="pre"&gt;headheight=32pt]{geometry}'&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pc&lt;/tt&gt; unit is pica, &lt;span class="formula"&gt;&lt;span class="textfraction"&gt;&lt;span class="ignored"&gt;(&lt;/span&gt;&lt;span class="numerator"&gt;1&lt;/span&gt;&lt;span class="ignored"&gt;)/(&lt;/span&gt;&lt;span class="denominator"&gt;6&lt;/span&gt;&lt;span class="ignored"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; of an inch. I'm not sure it's helpful to switch units like this.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;maketitle:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first last"&gt;This is also quite large.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="the-preamble"&gt;
&lt;h3&gt;The Preamble&lt;/h3&gt;
&lt;p&gt;The preamble adds style details. It's a large block of LaTeX.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% Lettrine&lt;/span&gt;
&lt;span class="k"&gt;\newcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\DUrolelettrine&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;[1]&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\StrLeft&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;#1&lt;span class="nb"&gt;}{&lt;/span&gt;1&lt;span class="nb"&gt;}&lt;/span&gt;[&lt;span class="k"&gt;\First&lt;/span&gt;]&lt;span class="k"&gt;\StrGobbleLeft&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;#1&lt;span class="nb"&gt;}{&lt;/span&gt;1&lt;span class="nb"&gt;}&lt;/span&gt;[&lt;span class="k"&gt;\Rest&lt;/span&gt;]&lt;span class="k"&gt;\lettrine&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\First&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\Rest&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="c"&gt;% Page Layout Normal&lt;/span&gt;
&lt;span class="k"&gt;\makeatletter&lt;/span&gt;
&lt;span class="k"&gt;\fancypagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;normal&lt;span class="nb"&gt;}{&lt;/span&gt;
&lt;span class="k"&gt;\fancyhf&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[RO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[LO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\nouppercase&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\rightmark&lt;/span&gt;&lt;span class="nb"&gt;}}}&lt;/span&gt;
&lt;span class="k"&gt;\fancyhead&lt;/span&gt;&lt;span class="na"&gt;[RO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily&lt;/span&gt; &lt;span class="k"&gt;\@title\sphinxheadercomma\py@release&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\if@twoside&lt;/span&gt;
 &lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[LE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
 &lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[RE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\nouppercase&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\rightmark&lt;/span&gt;&lt;span class="nb"&gt;}}}&lt;/span&gt;
 &lt;span class="k"&gt;\fancyhead&lt;/span&gt;&lt;span class="na"&gt;[LE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily&lt;/span&gt; &lt;span class="k"&gt;\@title\sphinxheadercomma\py@release&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\fi&lt;/span&gt;
&lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\headrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.4pt&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\footrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.4pt&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% define chaptermark with \@chappos when \@chappos is available for Japanese&lt;/span&gt;
&lt;span class="k"&gt;\ltx@ifundefined&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;@chappos&lt;span class="nb"&gt;}{}&lt;/span&gt;
  &lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\def\chaptermark&lt;/span&gt;##1&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\markboth&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\@chapapp\space\thechapter\space\@chappos\space&lt;/span&gt; ##1&lt;span class="nb"&gt;}{}}}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% Page Layout Plain (1st page of Section or Chapter.)&lt;/span&gt;
&lt;span class="k"&gt;\fancypagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;plain&lt;span class="nb"&gt;}{&lt;/span&gt;
    &lt;span class="k"&gt;\fancyhf&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[RO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;\if@twoside\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[LE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;&lt;span class="k"&gt;\fi&lt;/span&gt;
    &lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\headrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0pt&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\footrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.4pt&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\makeatother&lt;/span&gt;
&lt;span class="c"&gt;% Blank Page&lt;/span&gt;
&lt;span class="k"&gt;\newcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\blankpage&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="c"&gt;%&lt;/span&gt;
    &lt;span class="k"&gt;\afterpage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\null\thispagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;empty&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\newpage&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\pagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;empty&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\cleardoublepage&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% Define &amp;quot;myquotation&amp;quot; to indent a whole paragraph with a big, fancy &amp;quot; character.&lt;/span&gt;
&lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\indent&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="c"&gt;%&lt;/span&gt;
    &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;picture&lt;span class="nb"&gt;}&lt;/span&gt;(0,0)&lt;span class="k"&gt;\put&lt;/span&gt;(10,-5)&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\makebox&lt;/span&gt;(0,0)&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\scalebox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;6&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\textcolor&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;lightgray&lt;span class="nb"&gt;}{&lt;/span&gt;“&lt;span class="nb"&gt;}}}}&lt;/span&gt;&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;picture&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\hspace*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1.0cm&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\hangindent&lt;/span&gt;=1.15cm
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newenvironment&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;sphinxclassmyquotation&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\indent&lt;/span&gt;&lt;span class="nb"&gt;}{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;DUrolelettrine&lt;/tt&gt; command is the Docutils role that is used
to define the &lt;tt class="docutils literal"&gt;lettrine&lt;/tt&gt; role that we added as an extension to Sphinx.
The &lt;tt class="docutils literal"&gt;DUrole&lt;/tt&gt; is prepended to define a unique command.
The implementation of this command is a macro that splits out the first letter to make it big, and the
rest of the text is set in small-caps style.&lt;/p&gt;
&lt;p&gt;Two page layouts are defined: &lt;tt class="docutils literal"&gt;normal&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;plain&lt;/tt&gt;.
These revise the built-in Sphinx layouts to use different fonts for the page header and footer.
The definitions have to be wedged between &lt;tt class="docutils literal"&gt;\makeatnormal&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\makeatother&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;blankpage&lt;/tt&gt; command is added here. It seems helpful for getting the even-odd page business
correct on the half-title and publisher pages.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;sphinxclassmyquotation&lt;/tt&gt; environment is what Sphinx does with otherwise unknown directives.
When the text has a &lt;tt class="docutils literal"&gt;..&amp;nbsp; myquotation::&lt;/tt&gt; directive, this becomes a new environment with a distinctive
name. We can then define an environment that provides the distinctive style attributes
for the content.&lt;/p&gt;
&lt;p&gt;The mapping from RST role or directive to &lt;tt class="docutils literal"&gt;DUrole&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;sphinxclass&lt;/tt&gt; isn't the most obvious,
but, it works delightfully well.
For HTML and EPUB, CSS definitions are required.
For LaTeX, these preamble definitions are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-maketitle-command"&gt;
&lt;h3&gt;The MakeTitle Command&lt;/h3&gt;
&lt;p&gt;While LaTeX has a &lt;tt class="docutils literal"&gt;\maketitle&lt;/tt&gt; command, there's a redefinition of this by Sphinx.
This is the &lt;tt class="docutils literal"&gt;\sphinxmaketitle&lt;/tt&gt; command that emits the title page.&lt;/p&gt;
&lt;p&gt;Ordinarily -- for the default manual or howto themes -- this is followed by the table of contents,
and then the content.
For books, the title page isn't the cover, and is demoted to being called a half-title.
There's often a publisher's page -- with important copyright information -- between the half-title page and the table of contents.&lt;/p&gt;
&lt;p&gt;To build this, we need to provide a &lt;tt class="docutils literal"&gt;maketitle&lt;/tt&gt; setting that &lt;strong&gt;also&lt;/strong&gt; defines
a &lt;tt class="docutils literal"&gt;sphinxbackoftitlepage&lt;/tt&gt; command. This command does everything between the half-page and the table of contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\makeatletter&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\sphinxbackoftitlepage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;% Blank page on the verso after 1/2 title&lt;/span&gt;
    &lt;span class="k"&gt;\blankpage&lt;/span&gt;
    &lt;span class="c"&gt;% Publisher page is recto (odd page)&lt;/span&gt;
    &lt;span class="k"&gt;\thispagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;empty&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\sffamily\textbf&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\textsc&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Building Skills&lt;span class="nb"&gt;}}&lt;/span&gt;

    &lt;span class="k"&gt;\Huge&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\sffamily\textbf&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\@title&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;

    &lt;span class="k"&gt;\large&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&amp;quot;When your only tool is a hammer, every problem looks like a nail.&amp;quot;&lt;span class="nb"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;\normalsize&lt;/span&gt;
    By &lt;span class="k"&gt;\@author&lt;/span&gt;

    &lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1in&lt;span class="nb"&gt;}&lt;/span&gt;
    Python 3.12&lt;span class="k"&gt;\&lt;/span&gt;
    Release &lt;span class="k"&gt;\py@release\&lt;/span&gt;
    Created &lt;span class="k"&gt;\today&lt;/span&gt;

    &lt;span class="k"&gt;\vfill&lt;/span&gt;
    &lt;span class="k"&gt;\rmfamily\normalsize&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;\copyright&lt;/span&gt;~&lt;span class="k"&gt;\the\year\&lt;/span&gt; &lt;span class="k"&gt;\textit&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Steven F. Lott&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;\textsc&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;All Rights Reserved.&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;\vfill&lt;/span&gt;
    &lt;span class="k"&gt;\url&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;https://fosstodon.org/@slott56&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;\url&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;https://itmaybeahack.com&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;\url&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;https://github.com/slott56/unlearning-sql&lt;span class="nb"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;% Blank page on verso of publisher.&lt;/span&gt;
    &lt;span class="k"&gt;\blankpage&lt;/span&gt;
    &lt;span class="c"&gt;% Contents will follow.&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\makeatother&lt;/span&gt;

&lt;span class="k"&gt;\sphinxmaketitle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It seems odd to put this definition here instead of in the preamble.
It also seems necessary to get the page numbering correct.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;On one hand, there is a &lt;strong&gt;lot&lt;/strong&gt; of LaTeX customization required.&lt;/p&gt;
&lt;p&gt;On the other hand, a single change to the RST files leads to two &lt;strong&gt;identical&lt;/strong&gt; results
that can be uploaded for EPUB and print-on-demand.&lt;/p&gt;
&lt;p&gt;There are still some odd, little glitches in the LaTeX.
It's not &lt;strong&gt;perfect&lt;/strong&gt;, but it's really good.&lt;/p&gt;
&lt;/div&gt;
</content><category term="books"></category><category term="sphinx"></category><category term="RST"></category><category term="LaTeX"></category><category term="epub"></category><category term="PDF"></category></entry><entry><title>Unlearning SQL, revised</title><link href="https://slott56.github.io/2024-08-20-unlearning_sql.html" rel="alternate"></link><published>2024-08-20T16:31:00-04:00</published><updated>2024-08-20T16:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-08-20:/2024-08-20-unlearning_sql.html</id><summary type="html">&lt;p&gt;Book (pre) Announcement:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP - See &lt;a class="reference external" href="https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK"&gt;https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK&lt;/a&gt; for my author's page.&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW"&gt;https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW&lt;/a&gt; is the book.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Google Play - See &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;. Be sure to get the 2024.08 edition; there's a previous …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Book (pre) Announcement:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP - See &lt;a class="reference external" href="https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK"&gt;https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK&lt;/a&gt; for my author's page.&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW"&gt;https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW&lt;/a&gt; is the book.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Google Play - See &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;. Be sure to get the 2024.08 edition; there's a previous edition (from 2022) out there, also. Don't buy the 2022 edition.&lt;/li&gt;
&lt;li&gt;Lulu - &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html&lt;/a&gt;. It may be a few weeks before I get the proof copy and can formally approve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is still early in the process, and there are still some technical reviews from the ebook web sites to make sure the book really is what it claims to be.&lt;/p&gt;
&lt;p&gt;The code is tps://github.com/slott56/unlearning-sql and was rewritten and tested.&lt;/p&gt;
&lt;img alt="Unlearning SQL Book Cover" src="https://slott56.github.io/media/unlearning_sql.pdf" /&gt;
</content><category term="books"></category><category term="building skills"></category><category term="python"></category><category term="SQL"></category><category term="database"></category></entry><entry><title>Cleaning up Examples</title><link href="https://slott56.github.io/2023-11-17-example_cleanup.html" rel="alternate"></link><published>2023-11-17T08:01:00-05:00</published><updated>2023-11-17T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-11-17:/2023-11-17-example_cleanup.html</id><summary type="html">&lt;p&gt;Stand-alone document files for tech writing are awful.
They should &lt;em&gt;not&lt;/em&gt; be used as widely as they are.&lt;/p&gt;
&lt;div class="section" id="bluf-don-t-use-ms-word"&gt;
&lt;h2&gt;BLUF: Don't Use MS-Word&lt;/h2&gt;
&lt;p&gt;We used to call editors like MS-Word &lt;em&gt;WYSIWYG&lt;/em&gt; -- What You See Is What You Get.
Once upon a time, an editor that immediately presented the final rendered doc …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Stand-alone document files for tech writing are awful.
They should &lt;em&gt;not&lt;/em&gt; be used as widely as they are.&lt;/p&gt;
&lt;div class="section" id="bluf-don-t-use-ms-word"&gt;
&lt;h2&gt;BLUF: Don't Use MS-Word&lt;/h2&gt;
&lt;p&gt;We used to call editors like MS-Word &lt;em&gt;WYSIWYG&lt;/em&gt; -- What You See Is What You Get.
Once upon a time, an editor that immediately presented the final rendered doc was an amazing, life-changing thing.
Steve Jobs insisted Macintosh offer variable-width fonts. Wonderful!&lt;/p&gt;
&lt;p&gt;The current implementations seems terrible, however.&lt;/p&gt;
&lt;p&gt;When writing about code, a &lt;tt class="docutils literal"&gt;.docx&lt;/tt&gt; file can be filled with examples that -- no matter how careful the writing and editing process --
aren't really subject to any useful level of automated testing.&lt;/p&gt;
&lt;p&gt;The author writes, tests and then -- ugh -- copies and pastes into the document file.
The reviewers review and check. The tech editor checks.
Any mistakes corrected in the source code need to be re-copied and re-pasted -- manually -- into the document file.
Who's got the list of all the copy-and-paste locations? Anyone?&lt;/p&gt;
&lt;p&gt;And how would you get such a thing from MS-Word?&lt;/p&gt;
&lt;p&gt;Some kind of &amp;quot;INCLUDE FROM EXTERNAL FILE HERE&amp;quot; marker seems like it is absolutely essential.&lt;/p&gt;
&lt;p&gt;And missing.&lt;/p&gt;
&lt;p&gt;There's a way with some kind of &amp;quot;merge&amp;quot; capability to maybe jam external text into a document.
But. Yuk. It's not at all clear how this works.
It doesn't seem to be a first-class, easy-to-be-sure-you're-doing-it-right feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-gets-worse"&gt;
&lt;h2&gt;It gets worse&lt;/h2&gt;
&lt;p&gt;Unpacking the official, final source documents for my books from the publisher's &lt;tt class="docutils literal"&gt;.DOCX&lt;/tt&gt; was eye-opening.&lt;/p&gt;
&lt;p&gt;First -- the various boundaries between segments of the text can be wrong.
Which means they were wrong all along.
The errors are small.
Indeed, the errors are so small I don't think anyone can actually &lt;em&gt;see&lt;/em&gt; them. But.
When I go to make changes, I find there's a kind of nightmare of invisible boundaries.&lt;/p&gt;
&lt;p&gt;The key problem is that the WYSIWYG editors seem to have innumerable invisible borders.
These wind up on the wrong side of the markup.
They can be accidentally assigned the wrong style. With &lt;strong&gt;no&lt;/strong&gt; useful feedback.&lt;/p&gt;
&lt;p&gt;(Yes you can make whitespace visible in MS-Word. Try it. Whitspace doesn't have a visible style,
so you still don't know what part of the content it belongs to.)&lt;/p&gt;
&lt;p&gt;The implicit ¶ boundary after a code example -- to be specific -- can wind up as part of
the code.&lt;/p&gt;
&lt;p&gt;Want to add text after the example?&lt;/p&gt;
&lt;p&gt;It's now part of the example. It looks like &lt;tt class="docutils literal"&gt;CODE&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This leads time wasted on pointing and clicking to adjust the boundaries to get the text out of the example.
Or the example out of the text.&lt;/p&gt;
&lt;p&gt;Worse.&lt;/p&gt;
&lt;p&gt;The implicit ¶ boundary that's part of an itemized list item can wind up in -- or out -- of the adjacent code example.
Visually, you can't tell. Sometimes, you might notice the bullet looks a little &amp;quot;off&amp;quot;.
It's not obvious (from a single bullet) that it's in the &lt;tt class="docutils literal"&gt;CODE&lt;/tt&gt; font, not the TEXT font.&lt;/p&gt;
&lt;p&gt;Worse.&lt;/p&gt;
&lt;p&gt;The WYSIWYG editor is designed so mom (my mom, who's in her 90's) can create a shopping list and print it out.
(Which makes you wonder why it has so many features mom will never use.)&lt;/p&gt;
&lt;p&gt;Here's the problem with these &amp;quot;amateur user&amp;quot; features:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;The tools make (and enforce) assumptions about itemized and enumerated lists that are appropriate for mom.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;These assumption are not appropriate for technical writing.&lt;/p&gt;
&lt;p&gt;I need multiple paragraphs per number. How do I do this? I have to change the style of the &amp;quot;additional&amp;quot; paragraphs.&lt;/p&gt;
&lt;p&gt;Then, I have to make sure that the subsequent numbered paragraphs start with the right number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;This is a lot of error-prone pointing and clicking. A small change leads to strange numbers.
Or numbers in the &lt;tt class="docutils literal"&gt;CODE&lt;/tt&gt; font.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could go on. I'm not a fan of WYSIWYG. I call it &amp;quot;What is you is &lt;em&gt;all&lt;/em&gt; you get.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-better"&gt;
&lt;h2&gt;What's Better?&lt;/h2&gt;
&lt;p&gt;I'm not &lt;strong&gt;sure&lt;/strong&gt; what's better. But. I have to say, that I'm really pleased with LaTeX and the ability
to use the &lt;tt class="docutils literal"&gt;listings&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;minted&lt;/tt&gt; packages to include a few lines of code from external files.&lt;/p&gt;
&lt;p&gt;(Some people hate LaTeX with unbridled passion. I can't recommend it because the haters stop reading at &amp;quot;LaTeX.&amp;quot;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="case-in-point"&gt;
&lt;h2&gt;Case In Point&lt;/h2&gt;
&lt;p&gt;The book has snippets like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def some_method(self) -&amp;gt; None:
    # Do some prep.
    super().some_method()  # Use the superclass implementation.
    # Any followup goes here.
&lt;/pre&gt;
&lt;p&gt;Just a little conceptual overview of how a subclass method can extend a superclass method using the &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;No biggie, right?&lt;/p&gt;
&lt;p&gt;Heh.&lt;/p&gt;
&lt;p&gt;Now that I can put this in a separate file -- and unit test it -- and subject it to &lt;strong&gt;mypy&lt;/strong&gt; and &lt;strong&gt;pyright&lt;/strong&gt; and &lt;strong&gt;ruff&lt;/strong&gt;,
the little stand-alone snippet has fatal problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to do?&lt;/h2&gt;
&lt;p&gt;It's not squeaky clean. What do I do?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't pull it out of the text and test it. It's just &amp;quot;conceptual&amp;quot; code-like material.&lt;/li&gt;
&lt;li&gt;Gussy it up with the needed context and make sure it's really, really correct.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm an option 2 kind of writer. I'm not brilliant. I'm not introducing something new to the world. I didn't write
some world-changing FOSS package for which I'm writing the definitive documentation. All I've got -- really --
is exhaustively detailed design alternatives and sparkingly correct code.&lt;/p&gt;
&lt;p&gt;In LaTeX world, wrapping up &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\verb|some_method()|&lt;/span&gt;&lt;/tt&gt; into a separate file is&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;Easy.&lt;/li&gt;
&lt;li&gt;Guarantees that it's correct.&lt;/li&gt;
&lt;li&gt;The absolutely latest and greatest version becomes part of the book automatically.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Boom. Done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-it-s-so-easy"&gt;
&lt;h2&gt;If it's so easy?&lt;/h2&gt;
&lt;p&gt;Why doesn't everyone do this?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some folks hate LaTeX.  I don't blame them.  It's complicated.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  It's also quite slow. It takes multiple seconds to render a chapter.
What that finishes, you're reading a PDF in one window and fiddling with LaTeX in another.
Compilers are like that. Folks who hate on LaTeX put up with compiled code all the time.
I get it. They have different expectations for editing words and editing code.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  As brilliant as Pandoc is, the .DOCX issues mean that you're LaTeX extraction from a .DOCX is -- well -- filled with annoying problems.
Hundreds of non-breaking spaces &lt;tt class="docutils literal"&gt;~&lt;/tt&gt; will be peppered randomly around. Some things like &lt;tt class="docutils literal"&gt;'&lt;/tt&gt; will be transformed to &lt;tt class="docutils literal"&gt;\textsinglequote&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;\textsinglequote{}&lt;/tt&gt;.
And on and on and on. I've got some Python code to cleanup parts of the problematic LaTeX, but not all of it. It's a manual
pass -- 8 to 12 hours of labor -- to get things into an &amp;quot;acceptable&amp;quot; form where a good, clean PDF can be generated from a chapter.
The invisible boundary problems all have to be found and fixed by hand.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  A single missing &lt;tt class="docutils literal"&gt;}&lt;/tt&gt; from a &lt;tt class="docutils literal"&gt;\textbf{command&lt;/tt&gt; can be a challenge to find. Easy to fix.
Same for &lt;tt class="docutils literal"&gt;\verb|code&lt;/tt&gt; where the trailing &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; is missing.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  Yesterday I spent a good 30 minutes -- maybe more -- looking for an unpaired &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; in the text.
I used the words &lt;tt class="docutils literal"&gt;30&amp;quot;&lt;/tt&gt; to mean &lt;tt class="docutils literal"&gt;30 inches&lt;/tt&gt;. Things don't work, but there's no positive &lt;strong&gt;line 3194: unpaird quote&lt;/strong&gt; error.
There's not even an obvious point in the document where formatting went to hell.
Indeed, my preferred editor only sees the chapters without the &lt;tt class="docutils literal"&gt;main.tex&lt;/tt&gt; wrapper, and doesn't know what packages have
been included.  It thinks my LaTeX is just garbage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;My code is clean. And the document &lt;strong&gt;always&lt;/strong&gt; reflects unit-tested, type-checked code.&lt;/p&gt;
&lt;p&gt;(I don't run all code through the &lt;strong&gt;ruff&lt;/strong&gt; formatter because book margins force me to manually undo ideal PEP-8 formats.)&lt;/p&gt;
&lt;p&gt;The cross-references all work perfectly.  Word can do this, but it's clunky and awkward. LaTex &lt;tt class="docutils literal"&gt;\secref{}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\label{}&lt;/tt&gt; do everything I want.
I can search the document for all &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\section{}\label{}&lt;/span&gt;&lt;/tt&gt; constructs to build a my own crib of things-to-cross-reference against.&lt;/p&gt;
&lt;p&gt;The damnable invisible boundaries are visible. Commands like &lt;tt class="docutils literal"&gt;\begin{codeblock}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\end{codeblock}&lt;/tt&gt; are clearly separated from &lt;tt class="docutils literal"&gt;\item&lt;/tt&gt;.
Clearly. I can add whitespace and comments to clarify, if I need to. Things are &lt;strong&gt;visible&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="writing"></category><category term="latex"></category></entry><entry><title>Preorder the Python Real-World Projects Book</title><link href="https://slott56.github.io/2023_09_05-preorder_project_book.html" rel="alternate"></link><published>2023-09-05T09:00:00-04:00</published><updated>2023-09-05T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-09-05:/2023_09_05-preorder_project_book.html</id><summary type="html">&lt;p&gt;Want a book with dozens of project ideas?&lt;/p&gt;
&lt;p&gt;Each has a description, and approach, and deliverables.
It's a lot like ordinary development work, but with some detailed guidance from the author.
(And no deadline imposed by your team lead or manager.)&lt;/p&gt;
&lt;p&gt;These are projects you can do. You can post …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Want a book with dozens of project ideas?&lt;/p&gt;
&lt;p&gt;Each has a description, and approach, and deliverables.
It's a lot like ordinary development work, but with some detailed guidance from the author.
(And no deadline imposed by your team lead or manager.)&lt;/p&gt;
&lt;p&gt;These are projects you can do. You can post them GitHub, and make them part of your personal portfolio.
You can demonstrate your ability to code in Python.&lt;/p&gt;
&lt;p&gt;The focus is on exploratory data analysis.
This is because almost everything devolves into an exercise in data wrangling.&lt;/p&gt;
&lt;p&gt;Pre-order now:&lt;/p&gt;
&lt;p&gt;Via Computer Science Books &amp;#64; Amazon.com&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/Python-Real-World-Projects-Deployable-Applications/dp/1803246766/"&gt;Python Real-World Projects: Crafting your Python Portfolio with Deployable Applications: 9781803246765&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you plan to write a review contact me directly, slott56 at gmail dot com. I can get you
an e-copy or physical copy for your reviewing pleasure.&lt;/p&gt;
</content><category term="Books"></category><category term="community"></category><category term="projects"></category><category term="portfolio"></category></entry><entry><title>How to avoid writing a clickbait headline. (Click for details.)</title><link href="https://slott56.github.io/2020_12_24-how_to_avoid_writing_a_clickbait_headline_click_for_details.html" rel="alternate"></link><published>2020-12-24T08:33:00-05:00</published><updated>2020-12-24T08:33:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-12-24:/2020_12_24-how_to_avoid_writing_a_clickbait_headline_click_for_details.html</id><summary type="html">&lt;p&gt;It's hard to write shameless promotional material.&lt;/p&gt;
&lt;p&gt;I already wrote the books, isn't that bold enough?&lt;/p&gt;
&lt;p&gt;It isn't, though.&lt;/p&gt;
&lt;blockquote&gt;
Packt’s Head of Product, Oli Huggins, said: “We believe in helping
to serve and support the global developer community. By selling
our eBooks and Videos for $5, we hope to …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;It's hard to write shameless promotional material.&lt;/p&gt;
&lt;p&gt;I already wrote the books, isn't that bold enough?&lt;/p&gt;
&lt;p&gt;It isn't, though.&lt;/p&gt;
&lt;blockquote&gt;
Packt’s Head of Product, Oli Huggins, said: “We believe in helping
to serve and support the global developer community. By selling
our eBooks and Videos for $5, we hope to unlock exciting new
opportunities for developers who, in other situations, wouldn’t
have access to our products. A key part of our mission is to
unlock new opportunities for developers, help them discover new
technologies, and help put software to work in new ways.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Packt has curated some of our best titles together for the Python
Programmers community:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.packtpub.com/free-ebook/learn-python-programming-second-edition/9781788996662"&gt;Learn Python Programming - Second
Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.packtpub.com/product/python-3-object-oriented-programming-third-edition/9781789615852"&gt;Python 3 Object-Oriented Programming - Third
Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.packtpub.com/product/modern-python-cookbook-second-edition/9781800207455"&gt;Modern Python Cookbook - Second
Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.packtpub.com/product/40-algorithms-every-programmer-should-know/9781789801217"&gt;40 Algorithms Every Programmer Should
Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.packtpub.com/product/clean-code-in-python/9781788835831"&gt;Clean Code in
Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm delighted to be part of the promotion. It's Christmas Eve. Even if
you don't celebrate this specific holiday, the passing of the winter
solstice is a time of renewal.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Hello Mr. Lott,&lt;/p&gt;
&lt;div class="section" id="what-python-books-do-you-recommen"&gt;
&lt;h2&gt;What Python books do you recommen...&lt;/h2&gt;
&lt;p&gt;Thanh Tung&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-02-20 07:26:06.028000-05:00&lt;/p&gt;
&lt;p&gt;Hello Mr. Lott,
What Python books do you recommend for novices so they can learn from
beginner to advanced?
Thanks.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="#python"></category><category term="modern python cookbook"></category><category term="@PacktAuthors"></category><category term="packtpub"></category></entry><entry><title>The Python Podcast __init__</title><link href="https://slott56.github.io/2020_10_06-the_python_podcast___init__.html" rel="alternate"></link><published>2020-10-06T20:42:00-04:00</published><updated>2020-10-06T20:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-10-06:/2020_10_06-the_python_podcast___init__.html</id><summary type="html">&lt;p&gt;Check out
&lt;a class="reference external" href="https://www.pythonpodcast.com/steven-lott-learn-to-code-episode-283/"&gt;https://www.pythonpodcast.com/steven-lott-learn-to-code-episode-283/&lt;/a&gt;.
This was a fun conversation on Python and learning.&lt;/p&gt;
&lt;p&gt;We didn't talk about my books in detail. Instead, we talked about
learning and what it takes to get closer to mastery.&lt;/p&gt;
&lt;p&gt;It's a thing I worry about. I suspect other writers worry about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out
&lt;a class="reference external" href="https://www.pythonpodcast.com/steven-lott-learn-to-code-episode-283/"&gt;https://www.pythonpodcast.com/steven-lott-learn-to-code-episode-283/&lt;/a&gt;.
This was a fun conversation on Python and learning.&lt;/p&gt;
&lt;p&gt;We didn't talk about my books in detail. Instead, we talked about
learning and what it takes to get closer to mastery.&lt;/p&gt;
&lt;p&gt;It's a thing I worry about. I suspect other writers worry about it,
also. Will the reader take the next steps? Or will they simply think
they've got it because the read about it?&lt;/p&gt;
</content><category term="Books"></category><category term="#python"></category><category term="podcast"></category><category term="packtpub"></category><category term="mastering object-oriented python"></category></entry><entry><title>One of the Modern Python Cookbook Recipes</title><link href="https://slott56.github.io/2020_09_15-one_of_the_modern_python_cookbook_recipes.html" rel="alternate"></link><published>2020-09-15T08:00:00-04:00</published><updated>2020-09-15T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-09-15:/2020_09_15-one_of_the_modern_python_cookbook_recipes.html</id><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://opendatascience.com/removing-items-from-a-set-remove-pop-and-difference/"&gt;https://opendatascience.com/removing-items-from-a-set-remove-pop-and-difference/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This puts the focus on a few important set operations.&lt;/p&gt;
</content><category term="Books"></category><category term="@PacktAuthors"></category><category term="#python"></category><category term="modern python cookbook"></category></entry><entry><title>A Comprehensive Introduction to Python</title><link href="https://slott56.github.io/2020_09_01-a_comprehensive_introduction_to_python.html" rel="alternate"></link><published>2020-09-01T08:00:00-04:00</published><updated>2020-09-01T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-09-01:/2020_09_01-a_comprehensive_introduction_to_python.html</id><summary type="html">&lt;p&gt;Python 101, by Michael Driscoll. 545 pages, available from leanpub.com
in a variety of formats. Available soon in hardcover.&lt;/p&gt;
&lt;p&gt;The modern Python programming language is a large topic. A book on a
programming language has to be seen as a collection of several large
topics.&lt;/p&gt;
&lt;p&gt;At its core, a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python 101, by Michael Driscoll. 545 pages, available from leanpub.com
in a variety of formats. Available soon in hardcover.&lt;/p&gt;
&lt;p&gt;The modern Python programming language is a large topic. A book on a
programming language has to be seen as a collection of several large
topics.&lt;/p&gt;
&lt;p&gt;At its core, a book on a programming language has to cover the syntax of
the language. What’s for more important is covering the underlying
semantics of the various constructs. Software captures knowledge, and
it’s essential for a book on a programming language to make it clear how
the language expresses knowledge.&lt;/p&gt;
&lt;p&gt;For a programming expert, a fifteen page technical report can be enough
to get started with a new language. When I was first learning to
program, that’s all there was. For the vast majority of people who come
in contact with programming, there’s a lot more information required.&lt;/p&gt;
&lt;p&gt;This leads to a number of interesting tradeoffs when writing about a
programming language. How much of a book should be devoted to installing
the language tools? How much should it cover the other tools required to
create software? I think Python 101 makes good choices.&lt;/p&gt;
&lt;p&gt;In the modern era of open-source software, the volume and sophistication
of the available tools can be daunting. An author must consider how many
words to invest in text editors, debuggers, performance measurement,
testing, and documentation. These are all important parts of producing
software, they’re often tied closely with a language, but these
additional tools aren’t really the language itself.&lt;/p&gt;
&lt;p&gt;A language like Python offers a rich collection of built-in data types.
A book’s essential job is to cover the data structures (and algorithms)
that are first-class parts of the Python language. A focus on data puts
the various syntactic elements (like statements) into perspective. The
break statement, for example, can’t really be discussed in isolation.
It’s part of the conversation about for statements and conditional
processing in if statements. Because Python 101 follows this data-first
approach, I think it can help build comprehensive Python skills.&lt;/p&gt;
&lt;p&gt;The coverage of built-in data structures in a modern language needs to
include file objects. While Python reads strings and bytes, the standard
library provides ways to read HTML, CSV, JSON, and XML documents.
Additional packages provide access to Excel spreadsheet files. While,
technically, not part of the language, these are essential parts of the
problem domain a programming language like Python is designed to
address. Because these are part of the book, a reader will be empowered
to solve practical problems.&lt;/p&gt;
&lt;p&gt;There was a time when a programming “paradigm” was part of a book’s
theme. Functional programming, procedural programming, and
object-oriented programming approaches spawned their own libraries. Some
languages have a strong bias. Other languages, like Python, lack a
strong bias. A developer can work with functions, using material from
the first seventeen chapters of Python 101 and be happy and successful.
Moving into class definitions can be helpful for simplifying certain
kinds of programs, but it’s not required, and a good book on Python
should treat classes as a sensible alternative to functions for handling
more complex object state and bundle operations with the state.&lt;/p&gt;
&lt;p&gt;Moving beyond the language itself, a book can only pick a few topics
that can be called “advanced.” This book looks at some of the language
internals, exposed via introspection. It touches on some of the standard
library modules for managing subprocesses and threads. It covers tools
like debuggers and profilers. It expands to cover development
environments like the Jupyter Notebook, also. I’d prefer to reduce
coverage of threading and switch to Jupyter Lab from Jupyter Notebook.
These are small changes at the edges of large pool of important details.&lt;/p&gt;
&lt;p&gt;I’m still waffling over one choice of advanced topics. Does unit testing
count as an advanced topic? For software professionals, a testing
framework is as important as the language itself. For amateur hackers,
however, a testing framework may be a more advanced topic. The location
of a chapter on unit testing is a telling indication of who the book’s
audience is.&lt;/p&gt;
&lt;p&gt;The Python ecosystem includes the standard library and the vast
collection of packages and applications available through the Python
Package Index. These components can all be added to a Python
environment. This means any book on the language must also cover parts
of the standard library, as well as covering how to install  new
packages from the larger ecosystem. Python 101 doesn’t disappoint. There
are solid chapters in PIP and Virtual Environment management. I can
quibble over their  place in Part II. The presence of chapters on tools
is important; Python is more than a language; Python 101 makes it clear
Python is a collection of tools for building on the work of others to
solve problems collaboratively.&lt;/p&gt;
&lt;p&gt;I’m not easily convinced that Part IV has the same focus on helping the
new programmer as the earlier three parts. I think packaging and
distribution considerations take the reader too far outside
problem-solving with a programming language and tools. I’m not sure the
audience who sees testing as an advanced topic is ready to distribute
their code. I think there’s room for a Python 102 book to cover these
more professionally-oriented topics.&lt;/p&gt;
&lt;p&gt;The volume of material covered by this comprehensive book on Python
seems to require something more elaborate than a simple, linear sequence
of chapters. The sequence of chapters have jumps that seem a little
awkward. For example, from an introduction run-time introduction
introspection, we move to the PIP and virtual environment tools, then
move back to ways to make best use of Python’s annotations and type
hints. Calling this flow awkward is — admittedly — a highly nuanced
consideration. I suspect few people will read this book sequentially;
when each chapter is used more-or-less independently, the sequence of
chapters becomes a minor side-bar consideration. Each chapter has
generous examples and there are screen shots where necessary.&lt;/p&gt;
&lt;p&gt;The scope of this book covers the language and the features through
Python 3.8 in a complete and intelligible way. The depth is appropriate
for a beginning audience and the examples are focused on simple,
concrete, easy-to-understand code. The presence of review questions in
each chapter is a delight, making it easy to leverage the book for
instructor-guided training. I can imagine covering a few chapters each
week and quizzing students with the review questions. Some of the
questions are nicely advanced and can lead to further exploration of the
language.&lt;/p&gt;
&lt;p&gt;If you’re new to Python, this should be part of your Python reading
list. If you’ve just started and need more examples and help in using
some of the common tools, this book will be very helpful. If you’re
teaching or helping guide people deeper into Python, this may be a
helpful resource.&lt;/p&gt;
&lt;p&gt;Driscoll’s colorful nature photos are a bonus. My Kindle is limited to
black and white, and the pictures would have been disappointing. I’m
glad I got the PDF version.&lt;/p&gt;
</content><category term="Books"></category><category term="#python"></category></entry><entry><title>Modern Python Cookbook 2e -- Out with the old</title><link href="https://slott56.github.io/2020_08_11-modern_python_cookbook_2e_out_with_the_old.html" rel="alternate"></link><published>2020-08-11T08:00:00-04:00</published><updated>2020-08-11T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-08-11:/2020_08_11-modern_python_cookbook_2e_out_with_the_old.html</id><summary type="html">&lt;p&gt;Most of the things that got cut were (to me) obviously obsolete. For
example, replacing collections.namedtuple with typing.NamedTuple seemed
like a clear example of obsolete. A reviewer really thought I should
skip all NamedTuple and use frozen data classes.&lt;/p&gt;
&lt;p&gt;More important are some things that I learned about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most of the things that got cut were (to me) obviously obsolete. For
example, replacing collections.namedtuple with typing.NamedTuple seemed
like a clear example of obsolete. A reviewer really thought I should
skip all NamedTuple and use frozen data classes.&lt;/p&gt;
&lt;p&gt;More important are some things that I learned about in my formative
years. I think they're important because they'll little nuggets of cool
algorithm. But. Pragmatically? They're too hard to explain and don't
really capture interesting features of Python.&lt;/p&gt;
&lt;p&gt;Back in '01. Yes. The turn of the millennium.&lt;/p&gt;
&lt;p&gt;(Pull up a chair. This is a long yarn.)&lt;/p&gt;
&lt;p&gt;Back in '01, I was starting to look at ways to perfect my Python and
literate programming skills.&lt;/p&gt;
&lt;p&gt;(And yes, I was using Python on '01.)&lt;/p&gt;
&lt;p&gt;I had a project that I'd learned about in the 80's. That's in the
previous millennium. A thousand years ago. Computers were large,
expensive, and rare.&lt;/p&gt;
&lt;p&gt;And. Random Number Generators (RNG's) were a bit of a struggle. In the
80's, more sensitive statistical methods were uncovering biases in the
RNG's of the day. Back in the 70's, Knuth's The &lt;em&gt;Art of Computer
Programming, Volume 2, Seminumerical Algorithms&lt;/em&gt; had covered this topic
pretty well. But. Not quite well enough for language libraries or OS's
to offer really solid RNG's.&lt;/p&gt;
&lt;p&gt;(The popular Mersenne Twister algorithm dates from '97.)&lt;/p&gt;
&lt;p&gt;One of my co-workers at the time showed me a technical report that I
have no real bibliographic information for. I read it, captivated,
because it described -- in detail -- Knuth's statistical tests for
random number generators.&lt;/p&gt;
&lt;p&gt;This lead me to Knuth Volume 2.&lt;/p&gt;
&lt;p&gt;This lead me to implement *all* of this in Pascal (in the '80's.)&lt;/p&gt;
&lt;p&gt;This lead me to implement *all* of this in Python (in the '00's.)&lt;/p&gt;
&lt;p&gt;There were 10 tests. Each is a tidy little algorithm with a tidy little
implementation that can run on a big collection of data to ascertain how
random it is.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Frequency Test - develops frequency distribution of individual
samples.&lt;/li&gt;
&lt;li&gt;Serial Test - develops frequency distribution of pairs of samples.&lt;/li&gt;
&lt;li&gt;Gap Test - develops frequency distribution of the length of gaps
between groups samples in a given range.&lt;/li&gt;
&lt;li&gt;Poker Test - develops frequency distribution for 5-card &amp;quot;hands&amp;quot; of
samples over a small (16-value) domain.&lt;/li&gt;
&lt;li&gt;Coupon Collector's Test - develops frequency distribution for lengths
of subsets that contain a complete set of values from a small
(8-value) domain.&lt;/li&gt;
&lt;li&gt;Permutation Test - develops frequency distribution for the
permutations of ordering of 4-sample selections.&lt;/li&gt;
&lt;li&gt;Runs Up Test - develops frequency distribution for lengths of &amp;quot;runs
up&amp;quot; where each value is larger than the previous value; one variation
covers the case where runs are statistically dependent.&lt;/li&gt;
&lt;li&gt;Runs Up Test with independent runs and a relatively large domain.&lt;/li&gt;
&lt;li&gt;Runs Up Test with a &amp;quot;small domain&amp;quot;, that has a slightly different
expected distribution.&lt;/li&gt;
&lt;li&gt;Maximum of T - develops frequency distribution for the largest value
in a group of T values.&lt;/li&gt;
&lt;li&gt;Serial Correlation - computes the correlation coefficient between
adjacent pairs of values.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What's important here is that we're gaging the degree of randomness
of a collection of samples. All of these are core data science.
Finding a truly random random number generator is the same as looking
at a variable and seeing that it's too random to have any predictive
value. This is the Type I Error problem.&lt;/p&gt;
&lt;p&gt;Doing this with RNG's means starting with a specific seed. Which
means we need to run this for a large number of seed values and
compare the results. Lots of computer cycles can be burned up
examining random number generators.&lt;/p&gt;
&lt;p&gt;Lots.&lt;/p&gt;
&lt;p&gt;The frequency test, for example. We bin the numbers and compare the
frequencies. They aren't the same; they're within a few standard
deviations of each other. That means you don't use 5 bins. You use
128 bins so you can compare the bin sizes to the expected bin size
and compute a deviation. The deviation for expected needs to pass a
chi-squared test.&lt;/p&gt;
&lt;p&gt;Back in the day, chi-squared values were looked up in the back of a
handy statistics book.&lt;/p&gt;
&lt;p&gt;That seems weak. Can we compute the exact chi-squared values?&lt;/p&gt;
&lt;p&gt;(Spoiler alert, Yes.)&lt;/p&gt;
&lt;p&gt;Computing expected chi-squared values means computing Sterling
numbers, Bernoulli numbers, and evaluating the partial gamma
function. Knuth gives details on Sterling numbers. I have no
reference material on Bernoulli numbers.&lt;/p&gt;
&lt;p&gt;The Log Gamma function is ACM collected algorithms (CALGO) number 291
and 309. The incomplete gamma function is CALGO 435 and 654.&lt;/p&gt;
&lt;p&gt;Fascinating stuff.&lt;/p&gt;
&lt;p&gt;To me.&lt;/p&gt;
&lt;p&gt;Of this, only one thing ever saw the light of day.&lt;/p&gt;
&lt;p&gt;The Coupon Collector's test. Given a long sequence composed of
selections from a small pool of distinct values (&amp;quot;coupons&amp;quot;), how many
samples from the overall sequence do you have to examine to collect
one of each distinct coupon value? This yields a kind of Poisson
distribution of the number of samples seen before getting a full set
of coupons.&lt;/p&gt;
&lt;p&gt;If there's eight kinds of coupons, the smallest number of samples we
have to examine is eight. Lucky break. One of each and done. But.
Pragmatically, we'll see a distribution that varies from a low of 8
to a high of -- well -- infinity. We'll see a peak at like 15 to 18
samples before collecting all eight coupons and a long, long tail. We
can cut the tail at 40 samples and have a statistically useful
distribution to discern of the source samples were randomly ordered.&lt;/p&gt;
&lt;p&gt;Why did this -- of all things -- see the light of day?&lt;/p&gt;
&lt;p&gt;It involves set manipulations.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def collect_coupons(samples: Iterable[int]) -&amp;gt; Iterator[int]:
    while True:
        coupons = set()
        count = 0
        for u in samples:
            coupons |= u
            count += 1
            if len(set(coupons)) == 8:
        yield count
&lt;/pre&gt;
&lt;p&gt;I've used a number of variations on the above theme to use set
manipulation to accumulate data.  There are a lot of ways to restate
this using itertools, also. It can be viewed as a clever &amp;quot;reduce&amp;quot;
algorithm.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;It's so hard to explain. And. It's not really used much by data
scientists to reject type I errors because few things fit the coupon
model very well.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;It's a cool set processing example.&lt;/p&gt;
&lt;p&gt;So.&lt;/p&gt;
&lt;p&gt;It's safely out of the book.&lt;/p&gt;
</content><category term="Books"></category><category term="@PacktAuthors"></category><category term="#python"></category><category term="modern python cookbook"></category></entry><entry><title>Modern Python Cookbook Journey</title><link href="https://slott56.github.io/2020_07_30-modern_python_cookbook_journey.html" rel="alternate"></link><published>2020-07-30T08:00:00-04:00</published><updated>2020-07-30T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2020-07-30:/2020_07_30-modern_python_cookbook_journey.html</id><summary type="html">&lt;p&gt;For the author, a book is a journey.&lt;/p&gt;
&lt;p&gt;Writing something new, the author describes a path the reader can
follow to get from -- well -- anywhere the reader might be to the
author's suggested destination. Not everyone makes the whole trip.
And not everyone arrives at the hoped-for destination.&lt;/p&gt;
&lt;p&gt;Second editions …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the author, a book is a journey.&lt;/p&gt;
&lt;p&gt;Writing something new, the author describes a path the reader can
follow to get from -- well -- anywhere the reader might be to the
author's suggested destination. Not everyone makes the whole trip.
And not everyone arrives at the hoped-for destination.&lt;/p&gt;
&lt;p&gt;Second editions? The idea is to update the directions to reflect the
new terrain.&lt;/p&gt;
&lt;p&gt;I'm a sailor. Here's a view of the boat.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/RedRangerSailing.jpg"&gt;
&lt;img alt="Red Ranger sailboat" src="https://slott56.github.io/media/RedRangerSailing.jpg" style="width: 320px;" /&gt;
&lt;/a&gt;
&lt;p&gt;What's important to me is the way the authorities produce revised
nautical charts on a stable, regular cadence. There's no &amp;quot;final&amp;quot;
chart, there's only the &amp;quot;current&amp;quot; chart. Kept up-to-date by the
patient hard work of armies of cartographers.&lt;/p&gt;
&lt;p&gt;Is updating a book like updating the nautical charts? I don't think
so. Charts have a variety of update cadences.  For sailors in the US,
we start
here: &lt;a class="reference external" href="https://nauticalcharts.noaa.gov/charts/chart-updates.html"&gt;https://nauticalcharts.noaa.gov/charts/chart-updates.html&lt;/a&gt;. The
changes can be frequent.
See &lt;a class="reference external" href="https://distribution.charts.noaa.gov/weekly_updates/"&gt;https://distribution.charts.noaa.gov/weekly_updates/&lt;/a&gt; for the
weekly chart updates. This is supplemented by the Notices to
Mariners, here, too: &lt;a class="reference external" href="https://msi.nga.mil/NTM"&gt;https://msi.nga.mil/NTM&lt;/a&gt;. So, I think charts are
much, much more complex than books.&lt;/p&gt;
&lt;p&gt;Sailors have to integrate a lot of data.  This is no different from
software developers having to keep abreast of language, library, and
platform changes.&lt;/p&gt;
&lt;p&gt;The author's journey is different from the reader's journey. A
technical book isn't a memoir.&lt;/p&gt;
&lt;p&gt;The author may have crashed into all kinds of rocks and shoals. The
author's panic, fear, and despair are not things the reader needs to
know about. The reader needs to know the course to set, the
waypoints, and hazards. The estimated distances and the places to
anchor that provide shelter.&lt;/p&gt;
&lt;p&gt;For me, creating a revision is possibly as difficult as the initial
writing. I don't know how other authors approach subsequent editions,
but the addition of type hints meant every example had to be
re-examined.  And this meant discovering problems in code that I
*thought* was exemplary.&lt;/p&gt;
&lt;p&gt;While many code examples can simply have type hints pasted in, some
Python programming practices have type hints that can't be trivially
introduced to the code. Instead some thinking is required.&lt;/p&gt;
&lt;div class="section" id="generics"&gt;
&lt;h2&gt;Generics&lt;/h2&gt;
&lt;p&gt;Python code is always generic with respect to type. Expressions
like &lt;tt class="docutils literal"&gt;a + b&lt;/tt&gt; will work for a surprisingly wide variety of object
classes. Of course, we expect any of the numbers to work. But lists,
tuples, and strings all respond to the &amp;quot;+&amp;quot; operator. This is
implemented by a sophisticated check of a's &lt;tt class="docutils literal"&gt;__add__()&lt;/tt&gt; and b's
&lt;tt class="docutils literal"&gt;__radd__()&lt;/tt&gt; methods.&lt;/p&gt;
&lt;p&gt;When we write hints, it's often intended to &lt;strong&gt;narrow&lt;/strong&gt; the domain of
potential types. Here's some starting code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def fact(a):
   if a == 0:
       return 1
   return a*fact(a-1)
&lt;/pre&gt;
&lt;p&gt;The implied type hint is Any. This means, any class of objects that
defines __eq__(), __mul__() and __sub__() will work. There are a
fair number of these classes.&lt;/p&gt;
&lt;p&gt;When we write type hints, we narrow the domain. In this case, it
should be integers. Like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def fact(a: int) -&amp;gt; int:
    if a == 0:
        return 1
    return a*fact(a-1)
&lt;/pre&gt;
&lt;p&gt;This tells mypy (or other, similar analytic tools) to confirm that
every place the fact() function is used, the arguments will be
integers. Also, the result will be an integer.&lt;/p&gt;
&lt;p&gt;What's important is there's no run-time consequence to this. Python
runs the same whether we evaluate fact(2) or fact(3.0).  The
integer-based computation clearly matches the intent stated in the
code. The floating-point computation is clearly at odds with the
stated intent.&lt;/p&gt;
&lt;p&gt;And this brings us to the author's journey.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shoal-water"&gt;
&lt;h2&gt;Shoal Water&lt;/h2&gt;
&lt;p&gt;Sometimes we have code that works. And will always work. But. The
type hints are hard to express.&lt;/p&gt;
&lt;p&gt;The most common examples?&lt;/p&gt;
&lt;p&gt;Decorators.&lt;/p&gt;
&lt;p&gt;Decorators can be utterly and amazingly generic. And this can make it
very, very difficult to express the domain of types involved.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def make_a_log(some_function: Callable) -&amp;gt; Callable:
    &amp;#64;wraps(some_function)
    def concrete_function(*args, \**kwargs):
        print(some_function, args, kwargs)
        result = some_function((*args, \**kwargs)
        print(result)
    return concrete_function
&lt;/pre&gt;
&lt;p&gt;This is legal, but very shady Python. The use of the Callable type
hint is almost intentionally misleading. It could be anything.
Indeed, because of the way Python works, it can truly be any kind of
function or method. Even a lambda object can be decorated with this.&lt;/p&gt;
&lt;p&gt;The internal concrete_function doesn't have any type hints. This
forces mypy to assume Any, and that will lead to a possibly valid
application of this decorator when -- perhaps -- it wasn't really
appropriate.&lt;/p&gt;
&lt;p&gt;In the long run, this kind of misleading hinting is a bad policy.&lt;/p&gt;
&lt;p&gt;In the short run, this code will pass every unit test you can throw
at it.&lt;/p&gt;
&lt;p&gt;What does the author do?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Avoid the topic? Get something published and move on? It is
simpler and quicker to ignore decorators when talking about type
hints. Dropping the section from the outline would have been easy.&lt;/li&gt;
&lt;li&gt;Dig deeply into how we can create Protocols to express a narrower
domain of candidates for this decorator? This is work. And it's
new work, since the previous edition never touched on the subject.
But. Is it part of this cookbook? Or do these deeper examples
belong in a separate book?&lt;/li&gt;
&lt;li&gt;Find a better example?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Spoiler Alert: It's all three.&lt;/p&gt;
&lt;p&gt;I start by wishing I hadn't broached the topic in the first edition.
Maybe I should pretend it wasn't there and leave it out of the second
edition.&lt;/p&gt;
&lt;p&gt;Then I dig deeply into the topic, overwriting the topic until I'm no
longer sure I can write about it. There's enough, and there's too
much. A journey requires incremental exposition, and the side-trip
into Protocols may not be the appropriate path for any but a very few
readers.&lt;/p&gt;
&lt;p&gt;After this, I may decide to throw the example out and look for
something better.  What's important is having an idea of what is
appropriate for the reader's journey, and what is clutter.&lt;/p&gt;
&lt;p&gt;The final result can be better because it can be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Focused on something useful.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Any edge cases can be corrected to work with the latest language,&lt;/dt&gt;
&lt;dd&gt;library, and mypy release.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Where necessary, replaced by an alternative example that's clearer
and simpler.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately (for me) I examine everything. Every word. Every
example.&lt;/p&gt;
&lt;p&gt;Packt seems to be tolerant of my slow pace of delivery. For me, it
simply takes a long time to rewrite -- essentially -- everything. I
think the result is worth all the work.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="#python"></category><category term="modern python cookbook"></category><category term="@PacktAuthors"></category><category term="marketing promotion"></category></entry><entry><title>Mastering Object-Oriented Python -- 2nd Edition</title><link href="https://slott56.github.io/2018_07_24-mastering_object_oriented_python_2nd_edition.html" rel="alternate"></link><published>2018-07-24T08:00:00-04:00</published><updated>2018-07-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2018-07-24:/2018_07_24-mastering_object_oriented_python_2nd_edition.html</id><summary type="html">&lt;p&gt;It's time to revise &lt;a class="reference external" href="https://www.packtpub.com/application-development/mastering-object-oriented-python"&gt;Mastering Object-Oriented
Python&lt;/a&gt;.
While the previous edition is solidly focused on Python3, it lacks
some important features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;F-Strings&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;types.NamedTuple&lt;/li&gt;
&lt;li&gt;Data Classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So. There's some stuff to add. I don't think there's too much to take
away. I plan to make some things a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's time to revise &lt;a class="reference external" href="https://www.packtpub.com/application-development/mastering-object-oriented-python"&gt;Mastering Object-Oriented
Python&lt;/a&gt;.
While the previous edition is solidly focused on Python3, it lacks
some important features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;F-Strings&lt;/li&gt;
&lt;li&gt;Type Hints&lt;/li&gt;
&lt;li&gt;types.NamedTuple&lt;/li&gt;
&lt;li&gt;Data Classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So. There's some stuff to add. I don't think there's too much to take
away. I plan to make some things a little more tidy. I will remove
all references to Python2 and all references to how things used to be
and why they're better now.&lt;/p&gt;
&lt;p&gt;It will be several months before this is available. Stand by for
updates.&lt;/p&gt;
&lt;p&gt;The earliest drafts of this book date back to 2002. Seriously. I've
been over this material a lot in the past 1.5 decades.&lt;/p&gt;
&lt;p&gt;The nascent form of this book took me years (maybe 10 years) to
accumulate. It covered &lt;strong&gt;everything&lt;/strong&gt;: data structures, statements,
built-in functions, classes, and a bunch of libraries. It was beyond
merely ambitious and off into some void of &amp;quot;cover all the things.&amp;quot;&lt;/p&gt;
&lt;p&gt;I was motivated by my undergrad CS text books on the foundations of
computer science. The idea of putting the language features into a
parallel structure with boolean algebra, set theory, and number
theory was too cool for words. And -- lacking the necessary formal
background -- it was something I'm not able to present very well.&lt;/p&gt;
&lt;p&gt;While I wanted to cover &lt;strong&gt;all&lt;/strong&gt; of Computer Science, acquisition
editors were pointed out how crazy that idea was. A focus on the
object-oriented features of Python was sufficient to sell a
distinctive book. And they were absolutely right.&lt;/p&gt;
&lt;p&gt;As I rework the outline for the 2nd edition, there are some other
topics that crop up. These are not going to wind up in the book, but
they're an implicit feature of the topics being covered.&lt;/p&gt;
&lt;div class="section" id="cs-foundations-and-python"&gt;
&lt;h2&gt;CS Foundations and Python&lt;/h2&gt;
&lt;p&gt;One of the best of the introductory books (which came out after I
graduated) was &lt;a class="reference external" href="https://books.google.com/books/about/Structured_Concurrent_Programming_With_O.html?id=GPsmAAAAMAAJ"&gt;Structured Concurrent Programming With Operating
Systems
Applications&lt;/a&gt;.
They presented a nested collection of sub-languages: SP/k. The
organization of the nested subsets can be helpful for exposing
programming incrementally. There are issues, and we'll look at them
in detail below. Here's the collection of subsets from the original
book (and related articles.)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SP/1 expressions and output. The print() function.&lt;/li&gt;
&lt;li&gt;SP/2 variables, assignment, and the input() function.&lt;/li&gt;
&lt;li&gt;SP/3 selection and repetition. The Python if and while constructs
are the logical minimum, but the for statement makes more sense
because it's so widely used.&lt;/li&gt;
&lt;li&gt;SP/4 character strings.&lt;/li&gt;
&lt;li&gt;SP/5 arrays. Python lists, really.&lt;/li&gt;
&lt;li&gt;SP/6 procedures. Python function definition.&lt;/li&gt;
&lt;li&gt;SP/7 formatted input-output. f-strings for output, and regular expressions for parsing.&lt;/li&gt;
&lt;li&gt;SP/8 records and files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a lot of gaps between this list of subsets and modern
programming languages. SP/k was explicitly based on subset of PL/I,
saving the complexity of implementing special compilers. It also
reflects the mid-70's state of the art.&lt;/p&gt;
&lt;p&gt;What didn't age well is the implicit understanding that numbers are
the &lt;strong&gt;only&lt;/strong&gt; built-in data types. Strings are so magical they're
isolated into two separate subsets: SP/4 and SP/7. Arrays are called
out, but sets and dictionaries didn't exist in PL/I and aren't part
of this nested sequence.&lt;/p&gt;
&lt;p&gt;Also. And even more fundamental.&lt;/p&gt;
&lt;p&gt;There's a bias toward &amp;quot;procedural&amp;quot; programming. The SP/k subsets
expose the &lt;strong&gt;statements&lt;/strong&gt; of the language. There are few data
structures, and it seems the data structures require some statements
before they're useful.&lt;/p&gt;
&lt;p&gt;This leads to my restructuring of this. It doesn't apply to the
Mastering OO Python book. It's something I use for Python bootcamp
training.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;py/1 expressions and output: int, float, numeric built-in
functions, and the print() function.&lt;/li&gt;
&lt;li&gt;py/2 variables, assignment, and the input() function.&lt;/li&gt;
&lt;li&gt;py/3 strings, formatting, and various built-in string parsing
methods.&lt;/li&gt;
&lt;li&gt;py/4 tuples and multiple assignment. (Since tuples are immutable,
they're more like strings than they are like lists.) And yes, this
is kind of short.&lt;/li&gt;
&lt;li&gt;py/5 if statements and try/except statements. These are the two
fundamental &amp;quot;selection&amp;quot; statements. The raise statement is
deferred until the functions section.&lt;/li&gt;
&lt;li&gt;py/6 sets and the for statement.&lt;/li&gt;
&lt;li&gt;py/7 lists.&lt;/li&gt;
&lt;li&gt;py/8 dictionaries.&lt;/li&gt;
&lt;li&gt;py/9 functions (avoiding higher-order functions, decorators, and
generator functions.)&lt;/li&gt;
&lt;li&gt;py/10 contexts, with, and file I/O.&lt;/li&gt;
&lt;li&gt;py/11 classes and objects.&lt;/li&gt;
&lt;li&gt;py/12 modules and packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The point here is to expose the data structures as the central
theme of Python. Statements follow as needed to work with the data
structures.&lt;/p&gt;
&lt;p&gt;Note that some topics -- like break, continue, and while -- are
advanced parts of working with data structures.&lt;/p&gt;
&lt;p&gt;The standard library? Not included. Perhaps should be. But. It's
&lt;strong&gt;technically&lt;/strong&gt; separate from the language and all of this can be
done without any imports. We would then cover a bunch of standard
library modules. The order includes math, random, re, collections,
typing, and pathlib.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="#python"></category><category term="@PacktAuthors"></category><category term="packtpub"></category><category term="mastering object-oriented python"></category></entry><entry><title>Going to PyCon 2015</title><link href="https://slott56.github.io/2015_04_07-going_to_pycon_2015.html" rel="alternate"></link><published>2015-04-07T08:00:00-04:00</published><updated>2015-04-07T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-04-07:/2015_04_07-going_to_pycon_2015.html</id><summary type="html">&lt;p&gt;In Montreal! How cool is that?
I'll be working for my current employer, also a sponsor, to locate
Python talent.
I'll have a few copies of my books that I can give away.
Most importantly, the promotional code &lt;strong&gt;PYCON_LOTT&lt;/strong&gt; gives 50% off
my Packt titles and runs from April 7th …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Montreal! How cool is that?
I'll be working for my current employer, also a sponsor, to locate
Python talent.
I'll have a few copies of my books that I can give away.
Most importantly, the promotional code &lt;strong&gt;PYCON_LOTT&lt;/strong&gt; gives 50% off
my Packt titles and runs from April 7th to April 14th.&lt;/p&gt;
</content><category term="Books"></category><category term="pycon"></category><category term="packtpub"></category><category term="functional python programming"></category><category term="python for secret agents"></category><category term="mastering object-oriented python"></category></entry><entry><title>Webcast Wednesday</title><link href="https://slott56.github.io/2015_01_20-webcast_wednesday.html" rel="alternate"></link><published>2015-01-20T08:00:00-05:00</published><updated>2015-01-20T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2015-01-20:/2015_01_20-webcast_wednesday.html</id><summary type="html">&lt;p&gt;Be there: &lt;a class="reference external" href="http://www.oreilly.com/pub/e/3255"&gt;http://www.oreilly.com/pub/e/3255&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, I've got too many slides. 58 slides for a 60 minute
presentation. That's really about 2 hours of material. Unless people
have questions, then it's a half-day seminar.&lt;/p&gt;
&lt;p&gt;Seriously.&lt;/p&gt;
&lt;p&gt;I think I've gone waaaay too far on this. But …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Be there: &lt;a class="reference external" href="http://www.oreilly.com/pub/e/3255"&gt;http://www.oreilly.com/pub/e/3255&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, I've got too many slides. 58 slides for a 60 minute
presentation. That's really about 2 hours of material. Unless people
have questions, then it's a half-day seminar.&lt;/p&gt;
&lt;p&gt;Seriously.&lt;/p&gt;
&lt;p&gt;I think I've gone waaaay too far on this. But it's my first one, and I'd
hate to burn through all eight slides, take a few questions and be done
too soon.&lt;/p&gt;
&lt;p&gt;If this goes well, perhaps I'll see if I can come up with other 1-hour
topics.&lt;/p&gt;
&lt;p&gt;I worry a great deal about rehashing the obvious.&lt;/p&gt;
&lt;p&gt;On the other hand, I'm working with a room full of newbies, and I think&lt;/p&gt;
&lt;p&gt;I could spend several hours on each of their questions.&lt;/p&gt;
&lt;p&gt;And straightening out their confusions.&lt;/p&gt;
&lt;p&gt;Case in point.&lt;/p&gt;
&lt;p&gt;Not directly related to the webcast.&lt;/p&gt;
&lt;p&gt;One of my colleagues had seen a webcast which described Python's &amp;amp;, |,
and ~ operators, comparing  them with and, or and not.&lt;/p&gt;
&lt;p&gt;I'm not 100% sure, but... I think that this podcast -- I'm getting this
second-hand; it's just hearsay -- showed that there's an important
equivalence between &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This is true, but hopelessly obscure. Since &amp;amp; has a higher priority than
the comparison operators, there will be serious confusion when one fails
to parenthesize properly.
Examples like this abound:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; 3 == 3 &amp;amp; 4 &amp;lt; 5
False
&amp;gt;&amp;gt;&amp;gt; (3 == 3) &amp;amp; (4 &amp;lt; 5)
True
&lt;/pre&gt;
&lt;p&gt;Further, the fact that &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; can't short-circuit had become confusing to the
colleague. I figured out some of what was going on when trying to field
some seemingly irrelevant questions on &amp;quot;Why are some operators more
efficient?&amp;quot; and &amp;quot;How do you know which to use?&amp;quot;&lt;/p&gt;
&lt;p&gt;Um. That's not really the point. There's no confusion if you set the
bit-fiddling operators aside.&lt;/p&gt;
&lt;p&gt;The point is that &lt;tt class="docutils literal"&gt;and&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;or&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;not&lt;/tt&gt;, and the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;if-else&lt;/span&gt;&lt;/tt&gt; conditional expression
live in their own domain of boolean values. The fact that &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;^&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;~&lt;/tt&gt; will also operate on boolean values is a kind of weird duplication,
not a useful feature. The arithmetic operators also work on booleans.
Weirdly.&lt;/p&gt;
&lt;p&gt;The Python rules are the rules; it makes sense for &lt;tt class="docutils literal"&gt;True&amp;amp;True&lt;/tt&gt; to yield
&lt;tt class="docutils literal"&gt;True&lt;/tt&gt;. Results depend on the operands. It would be wrong in that sense
for &lt;tt class="docutils literal"&gt;True&amp;amp;True&lt;/tt&gt; to be &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;. But it would also fit the concept of these
operators a little better if they always coerced bool to int. This
happens for &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;+&lt;/tt&gt;: &lt;tt class="docutils literal"&gt;True+True == 2&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Why can't it be true for &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;? It would reduce potential confusion.
I'm sure the person who implemented &lt;tt class="docutils literal"&gt;__and__()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__or__()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__xor__()&lt;/tt&gt;,
and &lt;tt class="docutils literal"&gt;__invert__()&lt;/tt&gt; was happy to create a parallel universe between and
and &amp;amp;. I'm not sure I agree.&lt;/p&gt;
&lt;p&gt;And perhaps I should have a webcast on Python logic. It seems like a
rehash of fundamentals to me. But I have colleagues confused by
fundamentals. So perhaps I'm way wrong about what's fundamental and
what's useful information.&lt;/p&gt;
</content><category term="Books"></category><category term="#python"></category><category term="python for secret agents"></category><category term="webcast"></category><category term="mastering object-oriented python"></category></entry><entry><title>Packt Deals</title><link href="https://slott56.github.io/2014_12_23-packt_deals.html" rel="alternate"></link><published>2014-12-23T08:00:00-05:00</published><updated>2014-12-23T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-12-23:/2014_12_23-packt_deals.html</id><content type="html">&lt;p&gt;Okay. This seems shameless. But.
Here's the link  &lt;a class="reference external" href="http://bit.ly/1zg0mpA"&gt;http://bit.ly/1zg0mpA&lt;/a&gt;  straight to my book
information page
on &lt;a class="reference external" href="http://www.packtpub.com/"&gt;www.PacktPub.com&lt;/a&gt;.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://bit.ly/1zg0mpA"&gt;
&lt;img alt="Packt $5 Promotional Picture" src="https://slott56.github.io/media/5-dollar-promo.jpg" style="width: 320px; height: 253px;" /&gt;
&lt;/a&gt;
&lt;p&gt;I'm slowly coming to grips with the reality of marketing.&lt;/p&gt;
</content><category term="Books"></category><category term="python for secret agents"></category><category term="packtpub"></category><category term="mastering object-oriented python"></category></entry><entry><title>Hard Copy Books</title><link href="https://slott56.github.io/2014_11_06-hard_copy_books.html" rel="alternate"></link><published>2014-11-06T08:00:00-05:00</published><updated>2014-11-06T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-11-06:/2014_11_06-hard_copy_books.html</id><summary type="html">&lt;p&gt;I've now got my actual souvenir hard-copies of my two Packt books
&lt;a class="reference external" href="https://www.packtpub.com/application-development/mastering-object-oriented-python"&gt;https://www.packtpub.com/application-development/mastering-object-oriented-python&lt;/a&gt;
&lt;a class="reference external" href="https://www.packtpub.com/hardware-and-creative/python-secret-agents"&gt;https://www.packtpub.com/hardware-and-creative/python-secret-agents&lt;/a&gt;
So far, so good. I've got one more title in the works. After that, I
think I'll have to take a small break and do some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've now got my actual souvenir hard-copies of my two Packt books
&lt;a class="reference external" href="https://www.packtpub.com/application-development/mastering-object-oriented-python"&gt;https://www.packtpub.com/application-development/mastering-object-oriented-python&lt;/a&gt;
&lt;a class="reference external" href="https://www.packtpub.com/hardware-and-creative/python-secret-agents"&gt;https://www.packtpub.com/hardware-and-creative/python-secret-agents&lt;/a&gt;
So far, so good. I've got one more title in the works. After that, I
think I'll have to take a small break and do some development work and
learn more new stuff.
I've been advised to square away my Amazon.com author's page.
&lt;a class="reference external" href="http://amazon.com/author/steven_f_lott"&gt;http://amazon.com/author/steven_f_lott&lt;/a&gt;
I think this will work to help folks post questions, comments, and
suggestions.&lt;/p&gt;
</content><category term="Books"></category><category term="python for secret agents"></category><category term="#python"></category><category term="mastering object-oriented python"></category></entry><entry><title>My First Webcast</title><link href="https://slott56.github.io/2014_11_06-my_first_webcast.html" rel="alternate"></link><published>2014-11-06T07:10:00-05:00</published><updated>2014-11-06T07:10:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2014-11-06:/2014_11_06-my_first_webcast.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.oreilly.com/pub/e/3255"&gt;http://www.oreilly.com/pub/e/3255&lt;/a&gt;
I'm a pretty good public speaker. But I've avoided webcasting and
podcasting because it's kind of daunting. In a smaller venue, the
audience members are right there, and you can tell if you're not making
sense. In a webcast, the feedback will be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.oreilly.com/pub/e/3255"&gt;http://www.oreilly.com/pub/e/3255&lt;/a&gt;
I'm a pretty good public speaker. But I've avoided webcasting and
podcasting because it's kind of daunting. In a smaller venue, the
audience members are right there, and you can tell if you're not making
sense. In a webcast, the feedback will be indirect. In a podcast it's
seems like it would be nonexistent.
Also, I find that programming is an intensely literate experience. It's
about reading and writing. A podcast -- listening and watching -- seems
very un-programmerly to me. Perhaps I'm just being an old
&amp;quot;get-off-my-lawn-you-kids&amp;quot; fart.
But I'll see how the webcast thing goes in January, and perhaps I'll try
to do some podcasts.&lt;/p&gt;
</content><category term="Books"></category><category term="webcast"></category><category term="#python"></category><category term="podcast"></category></entry><entry><title>Reader Feedback -- what a helpful thing</title><link href="https://slott56.github.io/2009_01_07-reader_feedback_what_a_helpful_thing.html" rel="alternate"></link><published>2009-01-07T02:21:00-05:00</published><updated>2009-01-07T02:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-01-07:/2009_01_07-reader_feedback_what_a_helpful_thing.html</id><content type="html">&lt;p&gt;I've received a steady flow of email on &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt;  and &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in OO Design&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Readers have located a number of mistakes.  It's been easy to correct and republish these books on-line.&lt;/p&gt;
&lt;p&gt;At some point, I'll have to start the Python 2.6/3.0 revisions.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Programming Languages I've Learned (more-or-less in order) [Update]</title><link href="https://slott56.github.io/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html" rel="alternate"></link><published>2008-09-28T23:21:00-04:00</published><updated>2008-09-28T23:21:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-28:/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://stackoverflow.com/questions/111859/did-you-ever-switch-from-one-programming-language-to-another"&gt;Did you ever switch from one programming language to another?&lt;/a&gt;  A ridiculous question -- the answer is always &amp;quot;yes&amp;quot; unless you're a hobbyist.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://jtauber.com/blog/2008/09/28/programming_languages_i've_learned_in_order/"&gt;Programming Languages I've Learned In Order&lt;/a&gt; .  See &lt;a class="reference external" href="http://www.eflorenzano.com/blog/post/programming-languages-ive-learned-rough-order/"&gt;Programming Languages I've Learned (In Rough Order) Meme&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Here's my list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High Scool - Early 70's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;IBM 1620 Assembler&lt;/li&gt;
&lt;li&gt;IBM …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://stackoverflow.com/questions/111859/did-you-ever-switch-from-one-programming-language-to-another"&gt;Did you ever switch from one programming language to another?&lt;/a&gt;  A ridiculous question -- the answer is always &amp;quot;yes&amp;quot; unless you're a hobbyist.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://jtauber.com/blog/2008/09/28/programming_languages_i've_learned_in_order/"&gt;Programming Languages I've Learned In Order&lt;/a&gt; .  See &lt;a class="reference external" href="http://www.eflorenzano.com/blog/post/programming-languages-ive-learned-rough-order/"&gt;Programming Languages I've Learned (In Rough Order) Meme&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Here's my list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High Scool - Early 70's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;IBM 1620 Assembler&lt;/li&gt;
&lt;li&gt;IBM 1401 Autocoder (Assembler, essentially)&lt;/li&gt;
&lt;li&gt;Fortran&lt;/li&gt;
&lt;li&gt;SNOBOL (really)&lt;/li&gt;
&lt;li&gt;Basic&lt;/li&gt;
&lt;li&gt;Univac 1108 Assembler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;College - Late 70's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;LISP&lt;/li&gt;
&lt;li&gt;PDP-8 Assembler&lt;/li&gt;
&lt;li&gt;PL/I&lt;/li&gt;
&lt;li&gt;SAIL and ALGOL-W (Pascal-like languages)&lt;/li&gt;
&lt;li&gt;APL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Work - Early 80's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;COBOL&lt;/li&gt;
&lt;li&gt;IBM JCL&lt;/li&gt;
&lt;li&gt;DL/1 (an X-path like language to IMS database access)&lt;/li&gt;
&lt;li&gt;JOVIAL (really)&lt;/li&gt;
&lt;li&gt;Applesoft Basic&lt;/li&gt;
&lt;li&gt;Pascal&lt;/li&gt;
&lt;li&gt;Univac 1616 Assembler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Used Fortran, PL/I, and Basic, also&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Late 80's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;Forth&lt;/li&gt;
&lt;li&gt;Ada&lt;/li&gt;
&lt;li&gt;SQL (if that can be counted)&lt;/li&gt;
&lt;li&gt;VAX/VMS DCL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Early 90's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Tcl&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;Unix Shell Languages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Late 90's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Early 00's&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Plus markup languages like SGML, HTML XML, JSON, YAML are scattered throughout.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="history"></category><category term="programming languages"></category></entry><entry><title>How did I start with Python?</title><link href="https://slott56.github.io/2008_09_28-how_did_i_start_with_python.html" rel="alternate"></link><published>2008-09-28T02:00:00-04:00</published><updated>2008-09-28T02:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-28:/2008_09_28-how_did_i_start_with_python.html</id><summary type="html">&lt;p&gt;I can't find the exact question -- it was something along the lines of &amp;quot;Why did you start with Python?&amp;quot; or &amp;quot;How did you choose Python?&amp;quot;   It was probably one tagged with &lt;a class="reference external" href="http://stackoverflow.com/questions/tagged/programming-languages"&gt;programming-languages&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;For several days, I couldn't recall why or how I started looking at Python.&lt;/p&gt;
&lt;p&gt;At first, all I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I can't find the exact question -- it was something along the lines of &amp;quot;Why did you start with Python?&amp;quot; or &amp;quot;How did you choose Python?&amp;quot;   It was probably one tagged with &lt;a class="reference external" href="http://stackoverflow.com/questions/tagged/programming-languages"&gt;programming-languages&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;For several days, I couldn't recall why or how I started looking at Python.&lt;/p&gt;
&lt;p&gt;At first, all I could recall was this.  When I first heard about Java, I collected a list of OO languages (C++, Java, Python, Smalltalk) and made an effort to get a grip on a few of them.  I knew C++.  I learned a little Smalltalk; this was a hard thing to do in the late 80's with just a clunky old Mac Plus at home.&lt;/p&gt;
&lt;div class="section" id="the-script-based-challenge"&gt;
&lt;h2&gt;The Script-Based Challenge&lt;/h2&gt;
&lt;p&gt;I think that sometime in the '99 to '01 neighborhood I looked at a piece of software I'd written back in '92.  It was an application server that ran 24x7, and was written entirely as a massive shell script.  Really.  Several thousand lines of shell script to service requests.  The queue was a database table with inbound requests; the results were left in a directory to be downloaded.  It worked great, but was kind of slow.&lt;/p&gt;
&lt;p&gt;[I did have to make a Y2K change -- I had, foolishly, used last two years of the date as part of a file name, and the files would get out of order if I kept using that naming scheme.  My only Y2K design mistake.]&lt;/p&gt;
&lt;p&gt;After 7 or more years of flawless, crash-free service [Bragging!], I recommended that they retire this and replace it with something a little smarter and smaller, written in C++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c-os-api-s-and-python"&gt;
&lt;h2&gt;C++, OS API's and Python&lt;/h2&gt;
&lt;p&gt;The legacy code -- being a shell script -- was packed full of the OS API calls that are made available to the shell through the various commands.  For a while, I waffled between recommending C++ and Java.  Java had lots of appeal.  C++, however, had ready access to the necessary API's.&lt;/p&gt;
&lt;p&gt;Priorities changed.  The project was tabled because of larger data warehouse implementation changes.&lt;/p&gt;
&lt;p&gt;At some point, it began to dawn on me that what I wanted was&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an object-oriented programming environment,&lt;/li&gt;
&lt;li&gt;garbage collection of Java,&lt;/li&gt;
&lt;li&gt;modern libraries of Java,&lt;/li&gt;
&lt;li&gt;OS API's of C (and C++).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's when I started to look into Python.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="history"></category></entry><entry><title>Too much of the wrong kind of fun.</title><link href="https://slott56.github.io/2008_09_23-too_much_of_the_wrong_kind_of_fun.html" rel="alternate"></link><published>2008-09-23T00:08:00-04:00</published><updated>2008-09-23T00:08:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-09-23:/2008_09_23-too_much_of_the_wrong_kind_of_fun.html</id><summary type="html">&lt;p&gt;The point, from the FAQ is to answer programming questions with people who a trusted by their peers.&lt;/p&gt;
&lt;p&gt;Go to the &lt;a class="reference external" href="http://stackoverflow.com/questions/tagged/python"&gt;Python&lt;/a&gt;  tag to join that conversation.&lt;/p&gt;
&lt;p&gt;Your reputation is your overall score.  Every time your question (or answer) is voted up, you get 10 reputation points.  Each time you're …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The point, from the FAQ is to answer programming questions with people who a trusted by their peers.&lt;/p&gt;
&lt;p&gt;Go to the &lt;a class="reference external" href="http://stackoverflow.com/questions/tagged/python"&gt;Python&lt;/a&gt;  tag to join that conversation.&lt;/p&gt;
&lt;p&gt;Your reputation is your overall score.  Every time your question (or answer) is voted up, you get 10 reputation points.  Each time you're voted down you lose 2.&lt;/p&gt;
&lt;p&gt;There are folks with reputations over 7,000 points.  That's a lot up votes on good answers.  These are people who must be pretty good to be so well respected.&lt;/p&gt;
&lt;p&gt;Plus, for fun, they also hand out badges for odd milestones.  See the &lt;a class="reference external" href="http://stackoverflow.com/badges"&gt;badges&lt;/a&gt;  pages for some cool kinds of paths you can follow.&lt;/p&gt;
&lt;p&gt;Finally, governance-wise, they allocate certain privileges based on your reputation.  For instance, I've finally reached the point where I'm allowed to edit posts that are marked as part of the community wiki and retag other questions to put them in better categories.  Me and about 500 other people who have pretty good reputations.&lt;/p&gt;
&lt;p&gt;It's fun.  I've learned a lot about the Python &lt;a class="reference external" href="http://docs.python.org/lib/module-shlex.html"&gt;shlex&lt;/a&gt;  module, amongst other juicy tidbits.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="stack overflow"></category></entry><entry><title>Voice of the Customer</title><link href="https://slott56.github.io/2008_07_06-voice_of_the_customer.html" rel="alternate"></link><published>2008-07-06T19:06:00-04:00</published><updated>2008-07-06T19:06:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-07-06:/2008_07_06-voice_of_the_customer.html</id><summary type="html">&lt;p&gt;I'm trying to make sense of the &amp;quot;Voice of the Customer&amp;quot; as the 6σ folks term it.&lt;/p&gt;
&lt;p&gt;I get email once in a while on my books (&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/nonprogrammer.html"&gt;Programming&lt;/a&gt; , &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Python&lt;/a&gt;  and &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;OO Design&lt;/a&gt; ).  The volume of mail indicates that I have a few hundred readers.  I'm honored to have readers who …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm trying to make sense of the &amp;quot;Voice of the Customer&amp;quot; as the 6σ folks term it.&lt;/p&gt;
&lt;p&gt;I get email once in a while on my books (&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/nonprogrammer.html"&gt;Programming&lt;/a&gt; , &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Python&lt;/a&gt;  and &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;OO Design&lt;/a&gt; ).  The volume of mail indicates that I have a few hundred readers.  I'm honored to have readers who respond with intelligent comments, suggestions, corrections and questions.&lt;/p&gt;
&lt;p&gt;Recently, I was asked to include a section in the &amp;quot;Programming for non-Programmers&amp;quot; book on some fundamentals of computer science -- things like the essential fetch-execute cycle.  I balked, thinking this is too deep.  My original idea was a &amp;quot;gentle&amp;quot;, or &amp;quot;lay-person's&amp;quot; introduction to programming.  Too much depth can be intimidating.&lt;/p&gt;
&lt;p&gt;This happens in SCUBA diving: if you can see the bottoms and edges, 30 feet doesn't seem deep.  However, when you're in really deep water, 30 feet is paralyzingly fear-inducing.  SCUBA training moves from confined water to open water just to separate essential skills from the scary context.&lt;/p&gt;
&lt;div class="section" id="deep-water"&gt;
&lt;h2&gt;Deep Water&lt;/h2&gt;
&lt;p&gt;My original intent was to have the first book be more like SCUBA pool sessions.  Nothing too serious, just technical facts about the Python language -- enough to get someone up and moving around, making some progress.&lt;/p&gt;
&lt;p&gt;However, what I'm hearing is that some of the theoretical foundation is a helpful thing, perhaps even necessary.  I think we can avoid getting into deep water by putting this stuff in an &amp;quot;advanced topics&amp;quot; side-bar.&lt;/p&gt;
&lt;p&gt;This is one of this topics that I take for granted.  It seems so obvious that one hates to belabor it.  Indeed the multi-layered fetch-execute cycle of an interpreted language like Python can be an elegant bit theory that does help someone who's confused by &amp;quot;how it all works.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="don-t-go-there"&gt;
&lt;h2&gt;Don't Go There&lt;/h2&gt;
&lt;p&gt;On the other hand, I've had folks explicitly reject my attempt to get some deeper information.  Specifically, I was recently told that exploring the use cases for a badly-performing piece of SQL was senseless.  They told me in no uncertain terms that the SQL lived in a shallow, purely technical world, and understanding how the data got into the database, who needed to see it (and when) didn't enter into the question they were asking.&lt;/p&gt;
&lt;p&gt;In this case, the voice of the customer was to avoid depth.&lt;/p&gt;
&lt;p&gt;However, these two cases don't directly compare.  The plea for shallowness was from a reader who has repeatedly asked for &lt;a class="reference external" href="https://slott56.github.io/2006_06_19-faerie_dusttm.html"&gt;Faerie Dust&lt;/a&gt; ™ solutions (also, &lt;a class="reference external" href="https://slott56.github.io/2006_09_06-faerie_dusttm_part_2.html"&gt;Faerie Dust™, Part II&lt;/a&gt; ).  Their most recent query was similar to the original Faerie Dust posting -- they had a piece of SQL that was slow.  Generally slow SQL is a result of a poor data model (if you've written your code even reasonably competently, the data structure and algorithm are complements).    However, every kind of change was off the table except SQL changes.  There could be no data structure changes, no process changes, nothing but some magical SQL thing which would make a bad structure fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="balancing"&gt;
&lt;h2&gt;Balancing&lt;/h2&gt;
&lt;p&gt;There isn't really too much challenge in balancing these.  One customer has sensible questions about fundamentals.  Another has some kind of fear of fundamentals.&lt;/p&gt;
&lt;p&gt;For the book, I had a vision of someone being able to learn in a very controlled environment, and grow into an appreciation of the fundamentals.  My customers, however, are telling me that I should not defer mention of the fundamentals.  I need to stop worrying that depth can be intimidating.  Instead, I should point out that there is some depth, and given an outline of how much depth there really is.&lt;/p&gt;
&lt;p&gt;In some cases, people don't want the depth; they can skip over the presentation.  However, if the depth isn't there, there's nothing for the people who want to build their skills in a different order.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="on-line-updates"&gt;
&lt;h2&gt;On-Line Updates&lt;/h2&gt;
&lt;p&gt;Since my books are online, I don't have a complex &amp;quot;2nd edition&amp;quot; publishing cycle.  I can make the changes as soon as I can get to them.  I think this is -- possibly -- one way in which my books might have some enduring value in the marketplace.  I'm willing to change an adapt to the voice of the customer.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="reader response"></category></entry><entry><title>The "Which Language" Question</title><link href="https://slott56.github.io/2008_06_29-the_which_language_question.html" rel="alternate"></link><published>2008-06-29T15:45:00-04:00</published><updated>2008-06-29T15:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-06-29:/2008_06_29-the_which_language_question.html</id><summary type="html">&lt;p&gt;Here's how it shakes out from my point of view.  You could say that my bias is showing.  I think, however, I have solid evidence for my opinions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;.  Fine if you like memory management.  Don't get me wrong, some people love the nitty-gritty details.  Some people would prefer to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's how it shakes out from my point of view.  You could say that my bias is showing.  I think, however, I have solid evidence for my opinions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;.  Fine if you like memory management.  Don't get me wrong, some people love the nitty-gritty details.  Some people would prefer to write an operating system than an application;  C++ is great for that.  I think this is only manageable if you add in a smart-pointer package and a very sophisticated collections framework.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perl&lt;/strong&gt;.  This language is showing it's age.  The object-orientation features look more like a clumsy afterthought than a first-class part of the language.  I've already ripped up Perl for simple web applications in &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2006_01_27-after_perl_what_revised.html"&gt;After Perl, What?&lt;/a&gt; &amp;quot;.  In that posting, I suggested that PHP was better for the specific problem domain and skill set of the team.  I don't generally recommend PHP, but it fit their situation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;.  This language has a lamentably obscure syntax.  It's probably good, but there is a feeling that Ruby tends to be write-once code.  Further, Ruby's popularity may be entirely based on the Ruby on Rails web framework, not on any inherent language feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;.  Easy-to-read syntax (better than Ruby or Perl).  Automatic memory management (better than C++).  Good object-orientation without a lot of overheads (better than Java or Perl).  I've found it to be very easy to learn and a very productive work environment.&lt;/p&gt;
&lt;p&gt;Python has an explicit &amp;quot;batteries included&amp;quot; philosophy.  You should have almost everything you need right out of the box.  The single most important add-on is the &lt;a class="reference external" href="http://peak.telecommunity.com/DevCenter/EasyInstall"&gt;Easy Install&lt;/a&gt;  package.  Given that, you can download almost anything else you might need with a trivial command-line request.&lt;/p&gt;
&lt;div class="section" id="other-contenders"&gt;
&lt;h2&gt;Other Contenders&lt;/h2&gt;
&lt;p&gt;There are two contenders not mentioned in the email: PHP and Java.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;.  Limited by the &amp;quot;all-in-one&amp;quot; packaging.  PHP has a lot of functions added into the language itself.  Python doesn't add to the language; it has a small core interpreter, surrounded by add-on libraries.  new libraries can be added freely, old libraries can be replaced.   PHP lacks this growth path.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;.  A close runner-up to Python; it has similar advantages.  The one disadvantage is the very fussy static typing model that limits productivity -- you can't simply refactor a class; you have to totally restructure the entire inheritance hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line"&gt;
&lt;h2&gt;Bottom Line&lt;/h2&gt;
&lt;p&gt;Learn Python.&lt;/p&gt;
&lt;p&gt;If, for business or political reasons Python won't fly, Java is the other choice.&lt;/p&gt;
&lt;p&gt;There are numerous good on-line and off-line books on Python.  I like mine, but that's just me.  You might like the price (free for now); you also might like the fact that I can update the text almost immediately.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/nonprogrammer.html"&gt;How to Write Your Own Software Using Python&lt;/a&gt; .  This is for absolute beginners -- folks who are unclear on &amp;quot;programming&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt; .  This is for programmers who know at least one other language, and want to learn Python.  This has four parts to cover the language basics, data structures using the built-in collection classes, object design, and higher-level structures (components, modules and packages).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in Object-Oriented Design&lt;/a&gt; .  This is a more advanced book for Java or Python programmers.  It builds a rather complex real-world application, class by class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are numerous other introductions to Python.  Most of them are really good.  I like mine because I have a gentle progression from simple to complex topics that I based (loosely) on the approach taken by [Holt78] R. C. Holt, G. S. Graham, E. D. Lazowska, and M. A. Scott. Copyright © 1978. 0201029375. Addison-Wesley. &lt;em&gt;Structured Concurrent Programming with Operating Systems Applications&lt;/em&gt; .&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="programming language"></category><category term="strategy"></category></entry><entry><title>Building Skills in OO Design</title><link href="https://slott56.github.io/2008_06_19-building_skills_in_oo_design.html" rel="alternate"></link><published>2008-06-19T00:27:00-04:00</published><updated>2008-06-19T00:27:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-06-19:/2008_06_19-building_skills_in_oo_design.html</id><content type="html">&lt;p&gt;I want to thank folks for their thoughtful comments.&lt;/p&gt;
&lt;p&gt;I clarified a few design points.&lt;/p&gt;
&lt;p&gt;Most importantly, I added four new appendices.  For Python programmers, I provided examples of unittest, doctest and epydoc.  For Java programmers, I provided examples of JUnit and javadoc.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="oo design"></category></entry><entry><title>Building Skills in OO Design -- Updated</title><link href="https://slott56.github.io/2008_05_31-building_skills_in_oo_design_updated.html" rel="alternate"></link><published>2008-05-31T20:20:00-04:00</published><updated>2008-05-31T20:20:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-05-31:/2008_05_31-building_skills_in_oo_design_updated.html</id><summary type="html">&lt;p&gt;The updates to &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in Object-Oriented Design&lt;/a&gt;  cover some notes on testing, Agility and rework, two ongoing themes that can't be emphasized enough.&lt;/p&gt;
&lt;p&gt;There were two small updates regarding testability.&lt;/p&gt;
&lt;p&gt;First, creating Outcome instances — for testing purposes — does involve an ugly hack of repeating the payout odds.  Since we're …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The updates to &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in Object-Oriented Design&lt;/a&gt;  cover some notes on testing, Agility and rework, two ongoing themes that can't be emphasized enough.&lt;/p&gt;
&lt;p&gt;There were two small updates regarding testability.&lt;/p&gt;
&lt;p&gt;First, creating Outcome instances — for testing purposes — does involve an ugly hack of repeating the payout odds.  Since we're developing stand-alone unit tests, this isn't a bad thing.  Later, we'll get Outcomes from the Game, using keys to a mapping of some kind.&lt;/p&gt;
&lt;p&gt;Second, our initial version of the Wheel is intentionally naive and untestable.  When we rework it, we really do delete the old code.  And this is an important thing.  Testability isn't always obvious at first, and rework to improve testability is an essential skill.&lt;/p&gt;
&lt;div class="section" id="agility"&gt;
&lt;h2&gt;Agility&lt;/h2&gt;
&lt;p&gt;There was a small change related to Agility.  This is something that is covered implicitly, and perhaps ought to be brought out more explicitly.&lt;/p&gt;
&lt;p&gt;Most things in this simulation live essentially forever.  However, Bets do have to get deleted when they're resolved.  Initially, deleting bets is ignored.  It certainly is possible to add a delete method to the first version of Table.  More fundamentally, there's no compelling reason to add too many features too early in the development cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frustration"&gt;
&lt;h2&gt;Frustration&lt;/h2&gt;
&lt;p&gt;Some folks noted frustration regarding rework.  This is expected, and I have a few soapboxes and sidebars on the subject of rework.&lt;/p&gt;
&lt;p&gt;The bottom line is that there really is considerable rework in some classes.  For example, the first release of Wheel uses a really poor design, and later rework to make it more testable really does chuck out the initial code.&lt;/p&gt;
&lt;p&gt;Rework is essential to the Agile, incremental development approach.  There isn't an easy way to prevent rework.  If I present a &amp;quot;more finalized&amp;quot; design, you don't get to participate fully in the design decisions and their consequences.&lt;/p&gt;
&lt;p&gt;In most cases, the rework involved implementation changes, not interface changes.  This is an essential object-oriented design exercise.  You should always be ready, willing and able to change the implementation of a method.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="OO Design"></category></entry><entry><title>Brain Dead and Visual Basic: Coincidence?</title><link href="https://slott56.github.io/2008_05_27-brain_dead_and_visual_basic_coincidence.html" rel="alternate"></link><published>2008-05-27T23:04:00-04:00</published><updated>2008-05-27T23:04:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-05-27:/2008_05_27-brain_dead_and_visual_basic_coincidence.html</id><summary type="html">&lt;p&gt;Don't ask why.  I can't explain it without violating a Non-Disclosure Agreement.&lt;/p&gt;
&lt;p&gt;However, check this out.  Search for NMEA Checksum VB.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.experts-exchange.com/Databases/GIS_GPS/Q_21413235.html"&gt;http://www.experts-exchange.com/Databases/GIS_GPS/Q_21413235.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.codepedia.com/1/Calculating+and+Validating+NMEA+Checksums"&gt;http://www.codepedia.com/1/Calculating+and+Validating+NMEA+Checksums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.codepedia.com/1/Taking+Out+the+Garbage:+NMEA+Checksums"&gt;http://www.codepedia.com/1/Taking+Out+the+Garbage:+NMEA+Checksums …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Don't ask why.  I can't explain it without violating a Non-Disclosure Agreement.&lt;/p&gt;
&lt;p&gt;However, check this out.  Search for NMEA Checksum VB.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.experts-exchange.com/Databases/GIS_GPS/Q_21413235.html"&gt;http://www.experts-exchange.com/Databases/GIS_GPS/Q_21413235.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.codepedia.com/1/Calculating+and+Validating+NMEA+Checksums"&gt;http://www.codepedia.com/1/Calculating+and+Validating+NMEA+Checksums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.codepedia.com/1/Taking+Out+the+Garbage:+NMEA+Checksums"&gt;http://www.codepedia.com/1/Taking+Out+the+Garbage:+NMEA+Checksums&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.xtremevbtalk.com/showthread.php?t=145902"&gt;http://www.xtremevbtalk.com/showthread.php?t=145902&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.bluetoque.ca/articles/nmea-checksum-in-csharp.html?Itemid=9"&gt;http://www.bluetoque.ca/articles/nmea-checksum-in-csharp.html?Itemid=9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Almost everyone is copying off everyone else's paper, and propagating the same lame mistake.&lt;/p&gt;
&lt;p&gt;There's no earthly reason for programs of the form:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cs = some initial value
for ....:
    if cs == some initial value:
        do the initialization
    else:
        do everything else
&lt;/pre&gt;
&lt;p&gt;This structure is one of those &amp;quot;you're kidding, right?&amp;quot; kind of structures.&lt;/p&gt;
&lt;p&gt;NMEA sentences have a relatively simple structure.  They're all on one line.  They start with a &amp;quot;$&amp;quot; or &amp;quot;!&amp;quot;.  The may end with &amp;quot;*&amp;quot; and some hex digits for a checksum.  The characters in the middle are used to compute the checksum; they are a sequence of comma-separated values.&lt;/p&gt;
&lt;p&gt;It doesn't seem that complex.  Yet, the VB examples make it look scary.&lt;/p&gt;
&lt;div class="section" id="my-reference-implementation"&gt;
&lt;h2&gt;My Reference Implementation&lt;/h2&gt;
&lt;p&gt;In Python, we have something simple like the following.  Encapsulated messages (like !AIVDM and !AIVDO) are a bit more complex because they have their own unique Base64 algorithm in addition to their unique NMEA checksum.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def validate(aLine):
    sentence, star, checksum = aLine.rpartition('*')
    assert sentence[0] in ( '$', '!' )
    if star == '*':
        cs = 0
        for c in sentence[1:]:
           cs ^= ord(c)
        assert int(checksum,16) == cs
    return sentence[1:].split(',')
&lt;/pre&gt;
&lt;p&gt;The points are the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;There are usually string functions for finding the right-most &amp;quot;*&amp;quot;.  They're always more efficient than your explicit loops.  Use the string library.  In my case, the rpartition method was not easy to find in the library reference manual.  It is, however, &lt;em&gt;precisely&lt;/em&gt;  what is called for.&lt;/li&gt;
&lt;li&gt;Initialization is something you have to do in front of the loop, not buried in an if-statement inside the body of the loop.  Period.  There's a bigger principle here.  The initial value has to be the value you'd compute if the loop was executed zero times.  The initial value isn't some goofy proxy that's a value you use until the real initial value can be computed.&lt;/li&gt;
&lt;li&gt;Skipping the first character of the sentence (the &amp;quot;$&amp;quot; or &amp;quot;!&amp;quot;) isn't an extra if-statement inside the loop; it's part of the range of values for the loop structure itself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There's an even shorter formulation in Python.  See /dev/random: &lt;a class="reference external" href="http://blog.lucanatali.it/2006/12/nmea-checksum-in-python.html"&gt;NMEA checksum in Python&lt;/a&gt;  for a very short version.  This version, however, doesn't help clarify the perfectly awful VB programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="root-causes"&gt;
&lt;h2&gt;Root Causes&lt;/h2&gt;
&lt;p&gt;Why are the VB examples so wrong?  And why are the wrong examples the first things coughed up by Google?&lt;/p&gt;
&lt;p&gt;Are these examples widely referenced?  Do they have some authority?&lt;/p&gt;
&lt;p&gt;It can't be that VB programmers -- themselves -- are brain dead.  I've met smart people who know and use VB.  For some reason, they're on sites that have some weight with Google, even though these specific snippets of code are not very good.&lt;/p&gt;
&lt;p&gt;What's left is that these examples are all unthinking reimplementations of some initially flawed algorithm.&lt;/p&gt;
&lt;p&gt;Which tells me that VB programmers are habituated to copy-and-paste reuse.  Rather than define, share and reference a library, they copy and paste code freely.  I've seen many other examples of copy-and-paste programming in VB.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="visual basic"></category></entry><entry><title>Building Skills Updates</title><link href="https://slott56.github.io/2008_04_08-building_skills_updates.html" rel="alternate"></link><published>2008-04-08T13:45:00-04:00</published><updated>2008-04-08T13:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-08:/2008_04_08-building_skills_updates.html</id><content type="html">&lt;p&gt;Many, many thanks to readers who sent in comments, questions, suggestions and corrections.&lt;/p&gt;
&lt;p&gt;I've updated &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt;  to correct the errors found so far.&lt;/p&gt;
&lt;p&gt;Also, in the process, I've revised chapter 36 a bit.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>More Programming for n00bz</title><link href="https://slott56.github.io/2008_02_23-more_programming_for_n00bz.html" rel="alternate"></link><published>2008-02-23T20:18:00-05:00</published><updated>2008-02-23T20:18:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-02-23:/2008_02_23-more_programming_for_n00bz.html</id><summary type="html">&lt;p&gt;Back in December, I posted &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2007_12_19-i_havent_written_a_program_in_years_how_do_i_rebuild_my_skills.html"&gt;I haven't written a program in years&lt;/a&gt; ...&amp;quot; with a tidy little example, suitable for someone who used to program.  The intent was to help them get a quick program written, leveraging their legacy skills using new tools.&lt;/p&gt;
&lt;p&gt;And (bonus to me) it helps me to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back in December, I posted &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2007_12_19-i_havent_written_a_program_in_years_how_do_i_rebuild_my_skills.html"&gt;I haven't written a program in years&lt;/a&gt; ...&amp;quot; with a tidy little example, suitable for someone who used to program.  The intent was to help them get a quick program written, leveraging their legacy skills using new tools.&lt;/p&gt;
&lt;p&gt;And (bonus to me) it helps me to update &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/nonprog/htmlchunks/ch39.html"&gt;Chapter 39&lt;/a&gt;  of &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/nonprogrammer.html"&gt;Programming for Non-Programmers&lt;/a&gt;  with a real-world example.  Also, it validates the examples in &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt; , &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/ch34s02.html"&gt;chapter 34&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Recently, I was heard of a cool programming exercise from a composer, &lt;a class="reference external" href="http://www.myspace.com/xanderlott"&gt;Xander Lott&lt;/a&gt;  (disclosure: my son; full disclosure: alcohol was involved).  He had a concept for a piece that involved selection of random elements from a small palette of alternatives.  Being a musician, not a programmer, he was using a deck of cards for the random element selection.&lt;/p&gt;
&lt;p&gt;He was talking about a program that looked something like the following.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import random

noteSetChoices= [&amp;quot;C-E-G&amp;quot;, &amp;quot;C-F-A&amp;quot;, &amp;quot;C-E-A&amp;quot;,
    &amp;quot;D-F-A&amp;quot;, &amp;quot;D-F-B&amp;quot;, &amp;quot;D-G-B&amp;quot;, &amp;quot;E-G-B&amp;quot;, &amp;quot;F-A-C&amp;quot;]
beatChoices= [&amp;quot;1 - - -&amp;quot;, &amp;quot;- 2 - -&amp;quot;, &amp;quot;- - - 4&amp;quot;]
octaveChoices= [1, 2, 3]
techniqueChoices= ['Fingered', 'Harmonic']

for n in range(48):
    note= random.choice(noteSetChoices)
    beat= random.choice(beatChoices)
    octave= random.choice(octaveChoices)
    technique= random.choice(techniqueChoices)
    print octave, note, technique, beat
&lt;/pre&gt;
&lt;p&gt;For performance modeling, I wind up writing data generators like the above program.  Here, four specific dimensions are identified, and a sequence of random points are generated in this space.  Xander says that a number of details are unspecified -- the details the composer fills in to transform this from noise to something that has a musical texture even though parts of the musical structure are random.&lt;/p&gt;
&lt;div class="section" id="fit-with-csounds"&gt;
&lt;h2&gt;Fit with cSounds&lt;/h2&gt;
&lt;p&gt;I think that there may be a fit with the Python interface of &lt;a class="reference external" href="http://www.csounds.com/"&gt;cSounds&lt;/a&gt; .  I haven't explored this -- it would be too much of the wrong kind of fun.  But I expect that he may be able to define the cSounds instruments and use this kind of rule-based generator to create the &amp;quot;score&amp;quot;.&lt;/p&gt;
&lt;p&gt;The issue is that real music involves a fairly large number of rather complex rules.  Perhaps more complex rules than a newbie can encode in simple Python programs -- some rules are tough to articulate and amount to vague things like &amp;quot;it sounds better&amp;quot; or &amp;quot;I needed the piece to have some direction&amp;quot;.  Xander was using the random generation for certain elements, but he planned to fold in other elements based on his own artistic tastes.&lt;/p&gt;
&lt;p&gt;But for an n00b example that is (a) real world and (b) can be used to build skills in programming, it has a lot of appeal.  Thanks, Xander.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Building Skills In Python - 2.5 Edition</title><link href="https://slott56.github.io/2008_01_28-building_skills_in_python_25_edition.html" rel="alternate"></link><published>2008-01-28T11:24:00-05:00</published><updated>2008-01-28T11:24:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-01-28:/2008_01_28-building_skills_in_python_25_edition.html</id><summary type="html">&lt;p&gt;I've upgraded my
&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt;
to cover the 2.5 release.  It didn't take as long as I'd anticipated.&lt;/p&gt;
&lt;p&gt;The new features list for Python 2.5 is mercifully short.  I did a fair amount of reorganization to consolidate some things that had grown or split needlessly.&lt;/p&gt;
&lt;p&gt;Changes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've upgraded my
&lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt;
to cover the 2.5 release.  It didn't take as long as I'd anticipated.&lt;/p&gt;
&lt;p&gt;The new features list for Python 2.5 is mercifully short.  I did a fair amount of reorganization to consolidate some things that had grown or split needlessly.&lt;/p&gt;
&lt;p&gt;Changes include&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The if-then-else expression&lt;/li&gt;
&lt;li&gt;The any() and all() functions&lt;/li&gt;
&lt;li&gt;The string partition() method, as well as changes to startswith() and endswith()&lt;/li&gt;
&lt;li&gt;Some changes to the coverage of exceptions&lt;/li&gt;
&lt;li&gt;Changes to the coverage of the  &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;  statement&lt;/li&gt;
&lt;li&gt;A section on the new &lt;tt class="docutils literal"&gt;with&lt;/tt&gt;  statement&lt;/li&gt;
&lt;li&gt;A complete rewrite of part IV to reflect the new Library Reference organization&lt;/li&gt;
&lt;li&gt;Changes to the coverage of datetime and csv modules.&lt;/li&gt;
&lt;li&gt;Additional material on the Python command-line.&lt;/li&gt;
&lt;li&gt;Additional material on Properties and Descriptors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That was fun.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>I haven't written a program in years. How do I rebuild my skills?</title><link href="https://slott56.github.io/2007_12_19-i_havent_written_a_program_in_years_how_do_i_rebuild_my_skills.html" rel="alternate"></link><published>2007-12-19T13:42:00-05:00</published><updated>2007-12-19T13:42:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-12-19:/2007_12_19-i_havent_written_a_program_in_years_how_do_i_rebuild_my_skills.html</id><summary type="html">&lt;p&gt;Here's part of a recent email, subject &amp;quot;Antique Programmer in search of face lift and/or brain transplant as appropriate...&amp;quot;.  It was from a VP/Director kind of person who'd been away from hands-on technology for a few years.&lt;/p&gt;
&lt;p&gt;&amp;quot;I’ve got a new Vista PC with dual drives so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's part of a recent email, subject &amp;quot;Antique Programmer in search of face lift and/or brain transplant as appropriate...&amp;quot;.  It was from a VP/Director kind of person who'd been away from hands-on technology for a few years.&lt;/p&gt;
&lt;p&gt;&amp;quot;I’ve got a new Vista PC with dual drives so I’m going to add Linux to it. If I wanted to “freshen” my skills a bit what stack should I be looking at?&amp;quot;&lt;/p&gt;
&lt;p&gt;Then, I had a conversation similar to the following:&lt;/p&gt;
&lt;p&gt;Jim: &amp;quot;I've got to do some data cleansing.  I haven't written a program in decades.  I think I can do this with Excel and Access.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;I think I've got something simpler than loading a spreadsheet and looking at each row.  Look at Python.&amp;quot;&lt;/p&gt;
&lt;p&gt;Jim: &amp;quot;Maybe.  I was a pretty good Fortran programmer, many years ago.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;This won't be so brain-crampingly hard.  I'll post some stuff on the CSV package.  You'll like it.&amp;quot;&lt;/p&gt;
&lt;p&gt;And, I got the following question from a reader in Belgium &amp;quot;I'm a beginner, but I like python. I heard about it from the people that develop Gramps, a genealogy program. So maybe I should choose your python book? However, your 'programming' book is much more recent. Is it better?&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="getting-started-with-python"&gt;
&lt;h2&gt;Getting Started with Python&lt;/h2&gt;
&lt;p&gt;First, do a little bit of self-reflection.&lt;/p&gt;
&lt;p&gt;How are your computer skills?  Have you programmed before?  If so, look at &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python.html"&gt;Building Skills in Python&lt;/a&gt; .  This book assumes you know how to do some programming.   If you have no background in programming at all, you'll need to look at &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/nonprogrammer.html"&gt;Building Skills in Programming&lt;/a&gt;  -- it's for the non-programmer; the n00b, as they are affectionately known.&lt;/p&gt;
&lt;p&gt;How is your bias?  Are you looking for the perfect language?  The one that is so far superior to others that it is the final word in programming?  If so, stop now.  There is no such thing.  If you are going to do side-by-side comparison between Python and {your language here}, you'll find enough gaps, overlaps, and differences that you can easily label Python as incomplete, fat with features or more of the same.&lt;/p&gt;
&lt;p&gt;What is your environment?  In a corporate, for-profit, &amp;quot;who-do-we-sue?&amp;quot; world, you'll find that Python has the taint of open source.  Sure, you use Apache and Java, but they are different.  I don't see how, but your CIO approves of those open source packages, but won't approve of Python.  Use Java.  It is free from taint.&lt;/p&gt;
&lt;p&gt;What is your tool preference?  I've had people explain that the Visual Studio environment is so productive that it makes up for the problems in Visual Basic.  Since the actual code is what endures (not the tool used to produce the code), I'm confused by using Visual Studio as the justification for VB.  Some people claim that all that &amp;quot;text&amp;quot; in a conventional programming language is confusing and unsuitable for human beings -- glyphs and icons are better.  I've had people lecture me on the evils of using whitespace to properly format a program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-first-steps"&gt;
&lt;h2&gt;Some First Steps&lt;/h2&gt;
&lt;p&gt;Here's the short version of &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/ch02.html"&gt;chapter 2&lt;/a&gt; :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download a Python installer from &lt;a class="reference external" href="http://www.python.org"&gt;Python.org&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;You may want a good editor.  Currently, I'm a fan of &lt;a class="reference external" href="http://www.activestate.com/Products/komodo_edit/"&gt;Komodo Edit&lt;/a&gt; .  Download and install it, too.  (This isn't in the book -- yet.)  It requires some configuring to locate your Python installation and run Python programs neatly; we'll get to that in a moment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You're pretty much ready to roll at this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-first-program"&gt;
&lt;h2&gt;Your First Program&lt;/h2&gt;
&lt;p&gt;Here's your hello world program.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env python
&amp;quot;&amp;quot;&amp;quot; My First Program &amp;quot;&amp;quot;&amp;quot;
import sys
print(sys.version)
print(&amp;quot;Hello, World!&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;To make this run neatly and cleanly, there's some Komodo setup you should do.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create a Project.&lt;/li&gt;
&lt;li&gt;Create a new file in that project; use the basic Python template.&lt;/li&gt;
&lt;li&gt;Create a new Command in that project.  The command text can be &amp;quot;%(python) %f&amp;quot;.  The &amp;quot;Start In&amp;quot; should be  &amp;quot;%D&amp;quot;.  Give it a clever name like &amp;quot;Python&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can simply double-click the Komodo command to run your program.  You can also map this to a key, like F5, by opening the command and looking at the Key Binding tab.&lt;/p&gt;
&lt;p&gt;Here's what I got as output.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2.5.1 (r251:54863, Oct  5 2007, 21:08:09)
[GCC 4.0.1 (Apple Inc. build 5465)]
Hello, World!
&lt;/pre&gt;
&lt;p&gt;While the book is 2.4.1, I'm getting ready for the next round of revisions to get to 2.5.  After that will be a major rewrite for 3.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-csv-read-process-example"&gt;
&lt;h2&gt;A CSV Read/Process Example&lt;/h2&gt;
&lt;p&gt;Here's the skeleton of Jim's program to work with some spreadsheets of raw data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env python
import csv

srcFile = open(&amp;quot;some.csv&amp;quot;, &amp;quot;r&amp;quot;)
srcCSV = csv.reader(srcFile)
for row in srcCSV:
    if row[0] == &amp;quot;Col A Title&amp;quot;:
        # A Title row
        pass
    elif row[1] == &amp;quot;Col B Footer&amp;quot;:
        # A Footer
        pass
    else:
        # All the other rows
        pass # do some validation, some calculation, whatever...
    print(row)
srcFile.close()
&lt;/pre&gt;
&lt;p&gt;This illustrates a few key Pythonic concepts.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Everything interesting is in the library, not the language.  The Python book only has &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/pt01.html"&gt;part 1&lt;/a&gt;  focused on the language.  &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/pt02.html"&gt;Part 2&lt;/a&gt; , &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/pt03.html"&gt;part 3&lt;/a&gt;  and &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/pt04.html"&gt;part 4&lt;/a&gt;  are on data structures, objects and the library.&lt;/li&gt;
&lt;li&gt;File processing is easy.  It's all the related stuff that's hard.  &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/ch18.html"&gt;Chapter 18&lt;/a&gt;  is basic files.&lt;/li&gt;
&lt;li&gt;CSV parsing is layered onto basic file processing as simply as possible.  &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/ch19.html"&gt;Chapter 19&lt;/a&gt;  is a bunch of file-handling modules, including details on CSV.    &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/ch31.html"&gt;Chapter 31&lt;/a&gt;  is other file formats.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;for&lt;/tt&gt;  statement processes anything &amp;quot;iterable&amp;quot;.  This includes files.  Cleverly, the CSV reader is also iterable.  There's no bookkeeping, overhead, logic testing, or anything else required for basic sequential processing of most kinds of data.  While the basic syntax is a &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/python/htmlchunks/ch07.html"&gt;Chapter 7&lt;/a&gt;  item, the profound nature of &amp;quot;iterable&amp;quot; has to be revisited throughout part 2.&lt;/li&gt;
&lt;li&gt;The if/elif/else construct can have as many (or as few) conditions as you need.  Why add a &amp;quot;switch&amp;quot; or &amp;quot;case&amp;quot; statement and clutter up the syntax?  Chapter 7 covers this, too, because it's so elegantly simple.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I can't say enough about the value of having a language that makes simple things so easy to accomplish.  I almost feel guilty writing things in Python -- to get them to work -- and then rewriting them into Java because customers prefer Java.&lt;/p&gt;
&lt;p&gt;That's why I recommend Python to anyone retooling their skills.  It's productive and usable right out of the box.  It's a toy that comes with batteries included.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Building Skills in Python</title><link href="https://slott56.github.io/2007_12_17-building_skills_in_python.html" rel="alternate"></link><published>2007-12-17T15:38:00-05:00</published><updated>2007-12-17T15:38:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-12-17:/2007_12_17-building_skills_in_python.html</id><summary type="html">&lt;p&gt;Since I spend a lot of time on skill upgrades for my clients, my books are oriented around that theme.  It's something that I learned from &lt;a class="reference external" href="http://www.dorsethouse.com/authors/bullock.html"&gt;Jim Bullock&lt;/a&gt; : there's a &lt;strong&gt;Clue Absorption Rate&lt;/strong&gt;, and you can't exceed that rate.  These books are about building skills incrementally.&lt;/p&gt;
&lt;p&gt;I've got three Python-related …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since I spend a lot of time on skill upgrades for my clients, my books are oriented around that theme.  It's something that I learned from &lt;a class="reference external" href="http://www.dorsethouse.com/authors/bullock.html"&gt;Jim Bullock&lt;/a&gt; : there's a &lt;strong&gt;Clue Absorption Rate&lt;/strong&gt;, and you can't exceed that rate.  These books are about building skills incrementally.&lt;/p&gt;
&lt;p&gt;I've got three Python-related titles.  [Links are on the right, under &amp;quot;Publications&amp;quot;.]&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Building Skills in Programming&lt;/strong&gt;.  This is for n00bs, and covers very basic topics.  This is an introduction to computers and programming; it leverages Python to help someone get their hands dirty making computers do stuff.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Building Skills in Python&lt;/strong&gt;.  If you've got a language or two under your belt, this will help you learn Python.  It covers every language feature, most of the built-in classes and some of the library.  It's 385 pages: it covers a lot of ground.  It's packed full of exercises and examples.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Building Skills in OO Design&lt;/strong&gt;.  This has both Python and Java examples, and moves from language skills to more serious design skills.  This is somewhat more ambitious because it directs the reader through construction of a fairly sophisticated application program, and covers debugging, testing and rework issues.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are provided with a &lt;a class="reference external" href="http://creativecommons.org/licenses/by-nc-nd/2.0/"&gt;Creative Commons by-nc-nd&lt;/a&gt;  license.  Feel free to download and use the text.  You must give me credit, you can't create a commercial offering, nor can you create a derivative work.  However, if you want to create courseware, contact me, I have a lot of material, we can work something out.&lt;/p&gt;
&lt;p&gt;If you want to comment or correct this, please do; I'm open to suggestions.&lt;/p&gt;
&lt;div class="section" id="plans"&gt;
&lt;h2&gt;Plans&lt;/h2&gt;
&lt;p&gt;I've got to upgrade both Python books to Python 2.5.&lt;/p&gt;
&lt;p&gt;Start on database design, since that's a skill that I coach fairly often.&lt;/p&gt;
&lt;p&gt;Resolve the FOP embedded font problem.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Java-related skills - response to a question</title><link href="https://slott56.github.io/2007_06_20-java_related_skills_response_to_a_question.html" rel="alternate"></link><published>2007-06-20T18:59:00-04:00</published><updated>2007-06-20T18:59:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-06-20:/2007_06_20-java_related_skills_response_to_a_question.html</id><summary type="html">&lt;p&gt;I think that learning Java is challenging.  You've got to learn the language, object-oriented programming, the libraries and the endless Java Technologies.  The Java landscape is crowded with J*tx*  and &lt;em&gt;tx&lt;/em&gt; J add-ons, where &lt;em&gt;tx&lt;/em&gt;  is some technology abbreviation; for example, JAXWS, JAXB, SAAJ, JMS, JFC, JCE, JAAS, etc …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I think that learning Java is challenging.  You've got to learn the language, object-oriented programming, the libraries and the endless Java Technologies.  The Java landscape is crowded with J*tx*  and &lt;em&gt;tx&lt;/em&gt; J add-ons, where &lt;em&gt;tx&lt;/em&gt;  is some technology abbreviation; for example, JAXWS, JAXB, SAAJ, JMS, JFC, JCE, JAAS, etc.&lt;/p&gt;
&lt;p&gt;The skills generally form layers.  The layers are often tangled, and sometimes there isn't a clear progression from &amp;quot;simple&amp;quot; to &amp;quot;complex&amp;quot;.  That can make it all complex.  However, there's a great approach in an old book on &lt;a class="reference external" href="http://www.amazon.com/Structured-Concurrent-Programming-Applications-Addison-Wesley/dp/0201029375"&gt;Structured Concurrent Programming&lt;/a&gt;  by Holt, Lazowska, Graham and Scott.  They have a sequence of layers that begin with simple expressions and output (the absolute minimum) and then folds in new features in a discrete series of steps.  With Java (and Python) you need this kind of guidance to work through these steps and build up your skills in an orderly progression.&lt;/p&gt;
&lt;p&gt;On the language front, you've got to tackle the following.  I think this is the right order.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The core procedural programming language is the start.  Basic assignment, if, for, while, try-catch, etc. come first.  This will, of necessity, focus on the primitive types and Strings.&lt;/li&gt;
&lt;li&gt;Some essential reference types.  java.io, java.math, java.text and java.util are full of these essential classes.&lt;/li&gt;
&lt;li&gt;OO Design using Classes, Interfaces and Packages.  This has to build on the &lt;a class="reference external" href="http://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional/dp/0201633612"&gt;Design Patterns&lt;/a&gt;  material to help guide your understanding of classes and class design.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The hard part is to work through the following skills and technologies in addition to the language.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;NetBeans Tool Use&lt;/strong&gt;.  This means creating a project, creating files and packages, etc.  Creating JUnit unit tests, and running the unit test tool is perhaps one of the most important of these “close-to-Java-but-not-the-language-itself” skills.  NetBeans is rather complex, nothing is obvious, and there are a million distracting plug-ins and add-ons.  Also, NetBeans provides a “virtual” view of your project, distinct from the physical files and directories on your disk; this can be confusing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unit Testing&lt;/strong&gt;.  Nothing matters more than solid JUnit tests wrapped around your Java components.  Because of the way Java works, the final presentation (as GUI, or as web page) can be separated from the data model or &amp;quot;guts&amp;quot; of the program.  (You can read up on the Model-View-Controller design pattern in many places, include &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Model-view-controller"&gt;Wikipedia's MVC article)&lt;/a&gt; .  This is a really important consideration all through architecture, design, programming and testing.  You’ll design, code and test model components, which can then be assembled with a GUI or a web container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDBC&lt;/strong&gt;.  Java Database Connectivity is the way much of our data persistence is handled.  JDBC involves some hurdles because of the vendor-neutrality, and flexibility.  NetBeans has a skinny little RDBMS that can be used for development.  Oracle 10 Express is an alternative that is free and suitable for development.  Two of the big, ugly issues here is the “hard-coding passwords” and “hard-coding JDBC driver” information.  Hard-Coding is really, really bad.  Java has lots of techniques for putting key properties in property files or command-line parameters.  Part and parcel of JDBC is handling passwords in a graceful and reasonably secure way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web App Skills&lt;/strong&gt;. My experience is that desktop GUI apps aren’t as common as web apps – to our particular class of customers.  There are many desktop GUI apps in this world, many of which are Java-based.  However, our customers are more likely to build J2EE web applications than desktop applications.  This mans that there’s this whole side-light area of HTML, CSS, XML and what-not required to get a web app up and running.  Java has a rich set of components for separating Model, View and Control, using Java objects (sometimes called POJO, Plain Old Java Objects), Java Beans (not Enterprise Java Beans, just Java Beans), and Java Server Pages (JSP)’s.  The STRUTS framework pulls these together, and it’s essential for building good web applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Deployment&lt;/strong&gt;. Building a web app is challenging.  Getting it to behave well in a web server is a different kind of challenge.  It requires a fair amount of poking around in Tomcat to figure out how to start, stop, restart and manage a web server with your web application stuffed inside it.  Java web servers have a large number of configuration files, and it takes some trial and error to work out what they do.  Once you get it, however, the power of providing configuration information in the XML files means that your applications can be more generic and tailored by a specific web deployment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After this, composite application skills are the &lt;strong&gt;Next Big Thing&lt;/strong&gt;.  This means the various XML parsing tools (DOM and SAX).  It also means SOAP and XML-RPC, as well as the rest of the technology stack in Web Services world.  However, composite application tools and standards are a rapidly-evolving area.  By the time you get here, the technology will have moved on.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="java"></category></entry><entry><title>Web Services and Architecture</title><link href="https://slott56.github.io/2007_05_22-web_services_and_architecture.html" rel="alternate"></link><published>2007-05-22T23:11:00-04:00</published><updated>2007-05-22T23:11:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-05-22:/2007_05_22-web_services_and_architecture.html</id><summary type="html">&lt;p&gt;Thanks to everyone who attended.  See &lt;a class="reference external" href="http://java.sun.com/blueprints/guidelines/designing_webservices/"&gt;Designing Web Services with the J2EE(TM) 1.4 Platform : JAX-RPC, SOAP, and XML Technologies&lt;/a&gt;  for more information.
Also, check out Dr. Dobb's &lt;a class="reference external" href="http://www.ddj.com/dept/webservices/"&gt;SOA, Web Services and XML&lt;/a&gt;  department.&lt;/p&gt;
&lt;p&gt;Here's the Micro$oft PPT file:  &lt;a class="reference external" href="https://slott56.github.io/media/Web Services 8.ppt"&gt;Web Services 8.ppt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the Open-Office file:  &lt;a class="reference external" href="https://slott56.github.io/media/Web Services 8.odp"&gt;Web …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to everyone who attended.  See &lt;a class="reference external" href="http://java.sun.com/blueprints/guidelines/designing_webservices/"&gt;Designing Web Services with the J2EE(TM) 1.4 Platform : JAX-RPC, SOAP, and XML Technologies&lt;/a&gt;  for more information.
Also, check out Dr. Dobb's &lt;a class="reference external" href="http://www.ddj.com/dept/webservices/"&gt;SOA, Web Services and XML&lt;/a&gt;  department.&lt;/p&gt;
&lt;p&gt;Here's the Micro$oft PPT file:  &lt;a class="reference external" href="https://slott56.github.io/media/Web Services 8.ppt"&gt;Web Services 8.ppt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the Open-Office file:  &lt;a class="reference external" href="https://slott56.github.io/media/Web Services 8.odp"&gt;Web Services 8.odp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, here's a more useful thing: the actual contents.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="web-services"&gt;
&lt;h2&gt;Web Services&lt;/h2&gt;
&lt;p&gt;8 – Architecture&lt;/p&gt;
&lt;p&gt;Steven F. Lott&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="agenda"&gt;
&lt;h2&gt;Agenda&lt;/h2&gt;
&lt;p&gt;Nuclei around which architecture crystallizes&lt;/p&gt;
&lt;p&gt;Architecture Design Patterns&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="decision-nucleus"&gt;
&lt;h2&gt;Decision Nucleus&lt;/h2&gt;
&lt;p&gt;Interface-Driven Decisions&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;External Interactions are typically web services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several Implementations&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Heavyweight, SOAP document services&lt;/li&gt;
&lt;li&gt;Lightweight, RPC services&lt;/li&gt;
&lt;li&gt;Informal CGI and other HTTP services&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="decision-nucleus-1"&gt;
&lt;h2&gt;Decision Nucleus&lt;/h2&gt;
&lt;p&gt;Data Model- or Processing- Driven Decisions&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Complex or Core data&lt;ul&gt;
&lt;li&gt;Can be accessed directly (through JDBC)&lt;/li&gt;
&lt;li&gt;Or indirectly through a web service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Complex Processing&lt;ul&gt;
&lt;li&gt;Can be accessed through a web service as needed&lt;/li&gt;
&lt;li&gt;Or built as a batch job and run periodically&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Business Focus is essential&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="decision-nucleus-2"&gt;
&lt;h2&gt;Decision Nucleus&lt;/h2&gt;
&lt;p&gt;Mutability-Driven Decisions&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the implementation will change,&lt;ul&gt;
&lt;li&gt;wrap it in an interface that won't change.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Special cases are often mutable&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;So wrap them in a web service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interim Solutions&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Best to wrap them in a service&lt;/li&gt;
&lt;li&gt;Replace the interim implementation with the final&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="poor-choices-for-web-services"&gt;
&lt;h2&gt;Poor Choices for Web Services&lt;/h2&gt;
&lt;p&gt;Individual Data Entity Access&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Entity-Level services are too fine-grained&lt;/li&gt;
&lt;li&gt;Each CRUD operation has to be exposed&lt;/li&gt;
&lt;li&gt;It basically wraps the SQL, adding overhead&lt;ul&gt;
&lt;li&gt;With no measurable value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Technical Processes (ETL, for example)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Moving &amp;quot;Customer&amp;quot; from system to system isn't what a service does&lt;ul&gt;
&lt;li&gt;No Business Focus – just data massaging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service Design Questions&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Where's the system of record?  Who's the keeper of the master data?&lt;/li&gt;
&lt;li&gt;What do other systems need this system to DO for them?&lt;/li&gt;
&lt;li&gt;The system of record may publish useful services&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="data-movement-etl"&gt;
&lt;h2&gt;Data Movement/ETL&lt;/h2&gt;
&lt;p&gt;Single sources for Master Data?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Then a single Service for this data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Duplicate sources – overlapping Master Data?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;System X source copied to System Y where extra attributes were added&lt;/li&gt;
&lt;li&gt;Coalesce into a single source, if possible&lt;/li&gt;
&lt;li&gt;Make multiple applications share a single, central service for the data – where possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Multiple sources – multiple parts to the Master Data?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;System X has some records, System Y has other records&lt;ul&gt;
&lt;li&gt;Union of these two systems is the master data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hard to coalesce, but a Single Service can wrap multiple sources for consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-java-blueprints-reference-application-adventure-builder"&gt;
&lt;h2&gt;The Java Blueprints Reference Application: Adventure Builder&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.oracle.com/java/technologies/java-blueprints-guidelines.html"&gt;https://www.oracle.com/java/technologies/java-blueprints-guidelines.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adventure-builder"&gt;
&lt;h2&gt;Adventure Builder&lt;/h2&gt;
&lt;p&gt;A J2EE application that presents an application to end-users&lt;/p&gt;
&lt;p&gt;Consumes Web Services for a number of Back-end Operations&lt;/p&gt;
&lt;p&gt;Suppliers and Finance are external interfaces&lt;/p&gt;
&lt;p&gt;CRM is a shared data structure&lt;/p&gt;
&lt;p&gt;Workflow is Process-driven&lt;/p&gt;
&lt;p&gt;Order Receiver is a mixed bag&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-granularity-issue"&gt;
&lt;h2&gt;The Granularity Issue&lt;/h2&gt;
&lt;p&gt;Services which are too small (&amp;quot;chatty&amp;quot;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Endless back-and-forth&lt;/li&gt;
&lt;li&gt;Too much SOAP overhead for the real value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Services which are too large&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Giant XML messages&lt;/li&gt;
&lt;li&gt;Long-running web services&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the middle is a balance&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This is more art than science&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Business focus is key&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="business-focus"&gt;
&lt;h2&gt;Business Focus&lt;/h2&gt;
&lt;p&gt;It's all about Agility&lt;/p&gt;
&lt;p&gt;It's all about Master Data&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One source for the data&lt;/li&gt;
&lt;li&gt;One source for the processing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's all about &lt;strong&gt;Assignment of Responsibility&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Important Questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is really happening?&lt;/li&gt;
&lt;li&gt;Is that business-related or is that a dumb technology work-around because of rubbish legacy software?&lt;/li&gt;
&lt;li&gt;MUCH of what passes for &amp;quot;business analysis&amp;quot; is really IT reverse engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="web services"></category></entry><entry><title>Ouch!</title><link href="https://slott56.github.io/2007_05_01-ouch.html" rel="alternate"></link><published>2007-05-01T10:51:00-04:00</published><updated>2007-05-01T10:51:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-05-01:/2007_05_01-ouch.html</id><content type="html">&lt;p&gt;Here's the shocking
result.&lt;/p&gt;
&lt;img alt="You are Visual Basic. You have little respect for common sense.  You are immature, but have recently begun to grow up.  Which Programming Language are You?" src="http://www.bbspot.com/Images/News_Features/2006/08/language/visual_basic.jpg" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.bbspot.com/News/2006/08/language_quiz.php"&gt;http://www.bbspot.com/News/2006/08/language_quiz.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And I thought I was just arrogant.  Now I see
that it's worse than I thought.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Being an Architect</title><link href="https://slott56.github.io/2007_04_16-being_an_architect.html" rel="alternate"></link><published>2007-04-16T15:24:00-04:00</published><updated>2007-04-16T15:24:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-04-16:/2007_04_16-being_an_architect.html</id><summary type="html">&lt;p&gt;There are a number of necessary skills for being
an architect.  Here's a list of four that occurred to me as I tried to piece
together a coherent thought from a flurry of emails.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Summarize.&lt;/li&gt;
&lt;li&gt;State A Goal.&lt;/li&gt;
&lt;li&gt;Know The Technology.&lt;/li&gt;
&lt;li&gt;Manage Your Investment In Learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These aren't sufficient
skills …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are a number of necessary skills for being
an architect.  Here's a list of four that occurred to me as I tried to piece
together a coherent thought from a flurry of emails.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Summarize.&lt;/li&gt;
&lt;li&gt;State A Goal.&lt;/li&gt;
&lt;li&gt;Know The Technology.&lt;/li&gt;
&lt;li&gt;Manage Your Investment In Learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These aren't sufficient
skills.  However, their necessity is what's important to jot down while I still
think I understand it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summarize.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think architecture is all about abstraction.  You elide the useless details and
keep the useful features -- particularly interface-related features.  I find
that some people don't do well with abstraction -- things always seem to involve
a morass of details with no overall organizing principle.&lt;/p&gt;
&lt;p&gt;Some people seem to wallow in the
presence of details, as if knowing the details gives them power over the
situation.  They can use the presence of additional details as a trump card,
derailing all conversations by throwing out yet another detail.  No amount of
begging seems to prevent this.  A &amp;quot;let's just get all the details out on the
table&amp;quot; side-bar conversation is usually fruitless.  It's either impossible (&amp;quot;too
busy&amp;quot;) or unproductive (&amp;quot;I thought you wanted to talk about strategies, not
details&amp;quot;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State A Goal.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'm not saying it's important
to have a goal.  I'm saying it's important to state it.  An unstated goal is not
a measurable goal.  It's elusive and malleable; you can't ever determine where
you stand.  Stating a goal can be hard for some people.  In particular, the
detail heads don't like a crisp goal, because it seems to steal their weapon of
choice.&lt;/p&gt;
&lt;p&gt;Once you have a goal, details
can now be evaluated for relevance.  Throwing out new, previously unknown
details is no longer a power play, since some details aren't relevant to the
stated goal.  Since losing power is bad and stating a goal will reduce someone's
power, it can be impossible to get a goal written
down.&lt;/p&gt;
&lt;p&gt;There are two common complaints.
The first is &amp;quot;Everyone knows it, we don't need to waste time writing it down.&amp;quot;
This is often followed by the accusation: &amp;quot;You're supposed to be an expert, you
should know this.&amp;quot;  This is universally false, but hard to convince people that
I didn't create their organization conundrum, they did.  The second complaint is
that stating a goal too narrowly constrains people's thinking.  Which is absurd,
because with no goal to constrain thinking, solutions are impossible to
find.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Know The Technology.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the most
obvious skill.  It's not first on the list because it isn't first.  Many people
know the technical details, but can't work abstractly or state a goal.
Consequently, they never seem to actually solve any
problems.&lt;/p&gt;
&lt;p&gt;Surprisingly, some people
seem blissfully ignorant of the rest of the world.  Their highly-nuanced and
carefully specified business requirements are rarely unique.  Indeed, they're
often pretty standard.  The really common business problems have open source
solutions.  The slightly less common problems are often covered by several
commercial packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Manage Your Investment In Learning.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is -- to an extent -- a consequence of the previous skills.  If you look at new
technology from an outside-in perspective, you can get an appreciation for (1)
what problem it solves, (2) how it works, (3) how it interfaces, (4) how you
control it and (5) what it controls.  You can then dive in to understand use
cases, the logical structure, and the physical packaging for any of these areas.&lt;/p&gt;
&lt;p&gt;This is also about the various orders
of ignorance.  Implementing new software always involves unknowns.  If
everything was known, we'd download the solution.  Since we can't download a
solution, there must be something unique (and unknown) about our unique
problem.&lt;/p&gt;
&lt;p&gt;Here's what frustrates me
sometimes: you can't know it all.  And yet, some people seem intent on trying to
know it all.  Rather than manage their time and learning relevant things first,
they grab the first detail they can and pursue it down every twisty little &lt;a class="reference external" href="https://slott56.github.io/2006_02_24-rat_holes_of_lost_time.html"&gt;rat-hole&lt;/a&gt;  of irrelevant detail.&lt;/p&gt;
&lt;p&gt;Learning has to be directed toward the
actual problem-solving goal.  If we take the time to state the goal, we can
manage our learning to be sure that we actually achieve the goal.  We can learn
about non-viable solutions and solutions to problems we don't have.   Or, we can
manage our time and learn about things that are relevant to our
problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;End Of Rant.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Okay, that's off my chest
now.  However, I'll revise this posting as I catalog more of the confusing
exchanges I have with people who don't seem able to summarize their problem,
state their goal, discuss technology alternatives or manage their
ignorance.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Advanced Programming</title><link href="https://slott56.github.io/2007_03_02-advanced_programming.html" rel="alternate"></link><published>2007-03-02T15:43:00-05:00</published><updated>2007-03-02T15:43:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-03-02:/2007_03_02-advanced_programming.html</id><summary type="html">&lt;p&gt;First, I'm really pleased to see a focus on
end-user applications of Python.  It seems like most of the Open Source
Community likes to build infrastructure, operating systems, servers, frameworks
and components.  Maybe I'm looking in all the wrong places, but I have a soft
spot in my heart for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, I'm really pleased to see a focus on
end-user applications of Python.  It seems like most of the Open Source
Community likes to build infrastructure, operating systems, servers, frameworks
and components.  Maybe I'm looking in all the wrong places, but I have a soft
spot in my heart for the final applications of a technology stack, separate from
the technology stack itself.&lt;/p&gt;
&lt;p&gt;Second, there's a very pleasing symmetry about the outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Strategies for Tackling Larger Problems&lt;/li&gt;
&lt;li&gt;Language Features&lt;/li&gt;
&lt;li&gt;Library Features&lt;/li&gt;
&lt;li&gt;Tools and Process&lt;/li&gt;
&lt;li&gt;Higher-Order Architectures: web and database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I shouldn't gush too much,
but I like the organizing patterns.  The course is mashed into three days,
however, which leaves two areas that won't be done very well.  Both of these are
skill-related, and they are derived from the central implicit skill of
programming: abstraction.  Not everyone gets abstraction, and I think any
intermediate or advanced programming course has to make abstraction a background
theme that runs through the course.&lt;/p&gt;
&lt;p&gt;One area needs to be expanded and the other needs to be
focused.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strategies for Tackling Larger Problems.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introductory programming
courses are always about language, library and tools.  More advanced programming
courses are really about the design patterns, how to tackle a larger real-world
problem, what works and what doesn't work.  I think one important skill for
advanced programming is being able to apply the principle of abstraction well
and refactor to manage coupling and
cohesion.&lt;/p&gt;
&lt;p&gt;Clearly, two of the topics
(packages and reusability) touch on this larger strategic issue.  However, there
is more that must be covered.  Here's how I think it should be
done.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The Packages and Reusability material is a
foundation of an &amp;quot;agile&amp;quot; in design.&lt;/li&gt;
&lt;li&gt;A good package design is an agile design,
which means some other things:  a well-defined Model, a carefully-specified
interface, and some provision for learning as you go.  These topics (data model
and interface) aren't really called out in the course outline, but they're
central to answering the question &amp;quot;what makes a good package?&amp;quot;&lt;/li&gt;
&lt;li&gt;A good package will get that way after it is
refactored.  This is the more important thing which is missing: how to factor
and refactor a package.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following up on &lt;a class="reference external" href="http://r0ml.net/blog/"&gt;r0ml&lt;/a&gt; 's
presentation at &lt;a class="reference external" href="http://us.pycon.org/TX2007/Keynotes"&gt;PyCon 07&lt;/a&gt;, a package is really a rhetorical
device to make the overall application make sense.  It's also a component which
can (and will) evolve.  Newbies don't often see clear rationale behind package
boundaries and create odd collections of
components.&lt;/p&gt;
&lt;p&gt;The only way to learn good
packaging is to actually do rework.  I think that this section has to include
notes on how to build a package, rebuild a package, expand a package, and then
refactor a package into smarter
sub-packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Larger Architectures are Hard.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The example
curriculum has two large architectures jammed into a one day.  I hadn't really
thought about this before, but I know that larger client-server architectures
are hard for some programmers to grasp.  The issue is how to apply the principle
of abstraction to interface design and the separation of
concerns.&lt;/p&gt;
&lt;p&gt;What I've found is that
programmers who are first coming to grips with a multi-tiered architecture
struggle with several issues.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;They don't &amp;quot;control&amp;quot; the other side of the
relationship.  Writing a web server means you don't control the browser.
Writing a DB client means you don't control the DB server.  The basic &amp;quot;What is
going on here?&amp;quot; takes considerable classroom time to sort through.  I remember
teaching an RDBMS class to folks designing a military application, and the idea
of SQL optimization scared the willies out of them.  They wanted consistent
performance, and -- for some reason -- the idea that most of the time the
database would do better than worst-case was very scary.  They'd be happier with
worst-case all the time instead of generally better with a few spikes of
worst-case.&lt;/li&gt;
&lt;li&gt;There are these &amp;quot;protocols&amp;quot; involved.  Most
net protocols are pleasant, but irrelevant answers to bar-bet trivia questions.
Suddenly ODBC, DB-API, HTTP, WSGI become serious.  Indeed, until you embark on
client-server programming, you never really understand &amp;quot;protocol&amp;quot; and when you
do, it's a shocker.  The pragmatic topics of &amp;quot;why doesn't it do that?&amp;quot; have to
morphed into &amp;quot;here are the design patterns for implementing X with the
established protocols.&amp;quot;  This can be a long, painful conversation, including &amp;quot;I
don't see why it has to be that way&amp;quot; and &amp;quot;That's way too much overhead, why
can't I just call a function on another server?&amp;quot;&lt;/li&gt;
&lt;li&gt;There are the other, foreign languages
involved.  HTML, CSS, SQL, etc. muddy up the waters seriously.  It's hard to
gloss over SQL issues by saying &amp;quot;Here's a 'typical' SELECT statement&amp;quot; and
leaving it at that.  It leaves the unprepared.  I find that an overview of SQL
is an all-day affair.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The class is
three hours of instruction.  An hour on SELECT, and hour on RDBMS and related
protocols and an hour on typical Python applications using DB-API is -- well --
the whole day.&lt;/p&gt;
&lt;p&gt;Similarly, for the web
class.  An hour in HTML, an hour on HTTP, WSGI and the like, and an hour on
typical Python applications is the whole day.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This outline is very helpful for me, as a technology consultant.  Many thanks.&lt;/p&gt;
&lt;p&gt;I find that there are a number
of essential skills which need to be included in this kind of
course.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Abstraction, and how it is applied to
initial design, refactoring, and separation of concerns.  What I find is that
some people are comfortable switching languages and architectures because they
work at a higher level of abstraction and then implement in the tools at hand.
Much of the rest of the world cuts and pastes example code, and can't be
bothered to work through the problem using the hard-to-master technique of
&amp;quot;abstraction&amp;quot;.&lt;/li&gt;
&lt;li&gt;Organization and Management, and how to
do incremental work and rework to tackle a large problem in a rational approach.
The MVC design pattern, for example, should inform the presentation of the
various libraries to show where the library applies in a larger
program.&lt;/li&gt;
&lt;li&gt;Testing.  Writing tests is hard.  It
requires a grip on what's should happen and what shouldn't happen.  It requires
really careful logical thinking to work though the domain of possible states to
prove which state applies to an assertion in a test case.&lt;/li&gt;
&lt;li&gt;Debugging and diagnostic skills are often
the ones in shortest supply.  I often find one or two students who are
&amp;quot;flailers&amp;quot;, they can't seem to be able to reason through a diagnosis; we have to
spend considerable time on &amp;quot;what can you PROVE is true after this statement?&amp;quot;
and &amp;quot;For this function to do [X], what MUST have been true about the variables?&amp;quot;
This sometimes requires considerable prodding, particularly in complex
architectures.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are themes, not
proper topics.  They are &amp;quot;aspects&amp;quot; that must be present in each module of
instruction.&lt;/p&gt;
&lt;p&gt;Large Architectures (Web
or Database) are multi-day affairs in their own right.  I wouldn't attempt both
in a single day.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Tying your automobile to a hitching post.</title><link href="https://slott56.github.io/2006_12_17-tying_your_automobile_to_a_hitching_post.html" rel="alternate"></link><published>2006-12-17T21:04:00-05:00</published><updated>2006-12-17T21:04:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-12-17:/2006_12_17-tying_your_automobile_to_a_hitching_post.html</id><summary type="html">&lt;p&gt;The points are serious issues.  However, the best
summary comes from &lt;a class="reference external" href="http://gr.ayre.st/"&gt;Karl Guertin&lt;/a&gt;:  &amp;quot;My explanation is that Duck Typing is like Ethernet, in
theory it will break, but in practice it works pretty well.&amp;quot;&lt;/p&gt;
&lt;p&gt;There were three questions which
raised four issues.  The questions included the seemingly incomplete OO
implementation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The points are serious issues.  However, the best
summary comes from &lt;a class="reference external" href="http://gr.ayre.st/"&gt;Karl Guertin&lt;/a&gt;:  &amp;quot;My explanation is that Duck Typing is like Ethernet, in
theory it will break, but in practice it works pretty well.&amp;quot;&lt;/p&gt;
&lt;p&gt;There were three questions which
raised four issues.  The questions included the seemingly incomplete OO
implementation in Python, the lack of clarity regarding references and objects,
and the lack of overloaded functions.  The last point was more of a complaint
about the lack of function signatures, so we'll make it four issues.  The bulk
of the responses all served to clarify the following point for
me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python's implementation isn't incomplete or confusing, it's just different.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This takes some getting used to because you
have to relax your previous ideas and accept some new ones.  The &amp;quot;incomplete&amp;quot; OO
implementation had to do with the lack of a C++ or Java-style formal separation
between interface and implementation.  It isn't that the formalized interface is
missing, but that it's moved around a bit.&lt;/p&gt;
&lt;div class="section" id="oo-design-and-privacy"&gt;
&lt;h2&gt;OO Design and Privacy&lt;/h2&gt;
&lt;p&gt;In C++, the interface
lived in the .hpp files, separated from the implementations in .cpp files.  In
Java, the interface could be declared separately, but is usually deduced from
the class definition.  The idea is that any implementation which supports the
interface can be checked by the compiler.  The static analysis of compatibility
somehow provides improved quality.&lt;/p&gt;
&lt;p&gt;As a practical matter, however, the potential quality of static checking doesn't
really work out  very well.  While C++ detects a wide variety of errors, it only
does this if everything is recompiled.  In the event of dynamically linked
components (.DLL's or .SO's), however, problems can't be detected until there's
a run-time problem.  Similarly, Java class problems may not be detected until
class load time -- leading to run-time errors for compatibility issues.&lt;/p&gt;
&lt;p&gt;In Python, the only detection
is run-time.  Therefore, in a very practical sense, Python error detection is
simpler and more regular.  Every design mistake is detected via run-time
exception handling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references-and-objects"&gt;
&lt;h2&gt;References and Objects&lt;/h2&gt;
&lt;p&gt;One new concept that
experienced programmers struggle with is the &amp;quot;everything's a reference&amp;quot; Python
viewpoint.  For C++ programmers, this can be confusing.  For Java programmers,
however, there is less confusion because Java has two very neat buckets:
primitive and reference types.  The primitive types behave enough like reference
types that the distinction can be made largely transparent.&lt;/p&gt;
&lt;p&gt;In Python, I haven't seem
much confusion.  I attribute this to working with people who didn't know C++ in
the first place.  Lacking a confusing concept, they were perfectly comfortable
with this &amp;quot;object&amp;quot; vs. &amp;quot;variable&amp;quot; distinction.  A variable is just a reference
to an object, and objects last precisely as long as they have referencing
variables.  It's very neat and very simple.  The idea of other mechanisms isn't
worth discussing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overloaded-functions"&gt;
&lt;h2&gt;Overloaded Functions&lt;/h2&gt;
&lt;p&gt;The third point had two
related issues; the first is the lack of overloaded functions.  Overloaded
functions can be valuable, but can also be confusing.  When a function has
overloaded definitions with different semantics, the overloading is just bad,
obscure design.  Nothing prevents this misuse of overloaded functions.&lt;/p&gt;
&lt;p&gt;The valuable side of overloaded
functions is to have optional or variant parameters.  Python's has a vast number
of alternate formulations for parameters.  Having optional parameters in Python
gives us the same advantages of overloading function names to provide optional
or alternate parameters.  Having a single function makes it much harder to
create an overloaded function that has the same name but different semantics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="function-signatures"&gt;
&lt;h2&gt;Function Signatures&lt;/h2&gt;
&lt;p&gt;Here's the hidden
fourth point: &amp;quot;I expect to know (in a C++ sense) what is going in and what is
coming out, and if I don't get that right then the program/complier complains.&amp;quot;
This is only partially true.  Indeed, it's only true in a kind of superficial
way.  For example, when I call Java's &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;math.sqrt(-1.0)&lt;/span&gt;&lt;/tt&gt;,
I've provided data that's correct as far as the compiler is concerned, but still
not really correct.&lt;/p&gt;
&lt;p&gt;The compile-time checking of function signatures isn't really terribly effective at preventing errors.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;In SOAP implementation, the function signature
is restated in WSDL.  The Schema or DTD can add or remove constraints, leading
to ambiguity not resolvable by any amount of compile-time checking.&lt;/li&gt;
&lt;li&gt;In .DLL and .SO libraries, the function
signature of the .DLL (or .SO) may not match the .HPP file against which other
components are compiled.  This is not resolvable by any amount of compile-time
checking.&lt;/li&gt;
&lt;li&gt;In many cases, the &amp;quot;type&amp;quot; has to be extended
to include a valid range of values, not just a valid representation.  Java (and
C++) don't represent this well.  Python doesn't represent it well, either.
However, Java and C++ create an unrealistic expectation that simplistic type
matching is sufficient, and run-time error checking is often done badly or not
at all.  In Python, run-time checking is the norm, and can't be
overlooked.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-legacy-bias"&gt;
&lt;h2&gt;The Legacy Bias&lt;/h2&gt;
&lt;p&gt;Our experience colors our perceptions.  How do we get past our bias?&lt;/p&gt;
&lt;p&gt;Here's a good version of a
relevant &lt;a class="reference external" href="http://mornmeet.blogspot.com/2006/11/introduction-to-zen.html"&gt;Koan&lt;/a&gt; .  You can learn more effectively if you
have a &amp;quot;&lt;a class="reference external" href="http://sfzc.org/Pages/Library/zmbm.html"&gt;Beginner's Mind&lt;/a&gt; &amp;quot;.    In this case, the baggage
of problems in C++ became complaints about gaps in Python.&lt;/p&gt;
&lt;p&gt;They aren't gaps or problems in Python.  They are just differences.&lt;/p&gt;
&lt;p&gt;Here's what's most important: &lt;strong&gt;Teaching Programming requires Beginner's Mind&lt;/strong&gt;.
I don't think you can teach programming
without revisiting the newbie programmer's fundamental confusion of what they
say at compile time and what happens at run time.  I don't think
compare-and-contrast between programming languages is appropriate.   I think
that it's more important to treat each programming language as a fresh exercise,
using the language to implement the desired algorithms and data structures.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="python complaints"></category></entry><entry><title>A Productivity Conundrum (Revised)</title><link href="https://slott56.github.io/2006_10_09-a_productivity_conundrum_revised.html" rel="alternate"></link><published>2006-10-09T10:24:00-04:00</published><updated>2006-10-09T10:24:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-10-09:/2006_10_09-a_productivity_conundrum_revised.html</id><summary type="html">&lt;p&gt;In one case, the prospect had 7 interlocked
databases, and wanted to do a technology upgrade.  In other cases, the numbers
was larger (up to 30, I think) but the problem was the same.&lt;/p&gt;
&lt;p&gt;Essentially they said &amp;quot;It's taking us
forever to rework this design.  What should we do that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In one case, the prospect had 7 interlocked
databases, and wanted to do a technology upgrade.  In other cases, the numbers
was larger (up to 30, I think) but the problem was the same.&lt;/p&gt;
&lt;p&gt;Essentially they said &amp;quot;It's taking us
forever to rework this design.  What should we do that will get the job done
quickly?&amp;quot;&lt;/p&gt;
&lt;p&gt;I thought I had a good
answer, but no one liked it.  So, I guess I'm barking up the wrong tree.  Or,
possibly, I'm not reinforcing their idea with an incremental improvement.  It
may be possible that what I'm suggesting is too foreign to make sense to
them.&lt;/p&gt;
&lt;p&gt;The first key point is that they
grew the tangle of databases organically.  Each situation is a series of
short-sighted decisions that didn't reach a tipping point until it was a massive
problem.&lt;/p&gt;
&lt;div class="section" id="failure-of-foresight"&gt;
&lt;h2&gt;Failure of Foresight&lt;/h2&gt;
&lt;p&gt;How did they get so far afoul of a
good, simple, usable database architecture?  This is the important question, and
I think, holds the key to understanding a lot of the cost and complexity that
seems to be associated with IT.  However, I just can't understand how anyone can
fail to foresee the consequences of a decision that creates complexity.&lt;/p&gt;
&lt;p&gt;Somehow managers were able to convince
themselves that adding the seventh database was simpler than reworking the six
existing, complex, hard-to-manage databases.  Clearly, the short-term expedient
(&amp;quot;just add more junk&amp;quot;) trumped the desire to control cost and
complexity.&lt;/p&gt;
&lt;p&gt;Working backwards to root
causes, this decision was made the same way each time it came up.  Every
opportunity to simplify was replaced with an increase in
complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-changed"&gt;
&lt;h2&gt;What Changed?&lt;/h2&gt;
&lt;p&gt;Why do they now ask for help in
simplifying?  it's hard to say and I'm reluctant to ask.  Generally, I get hints
like &amp;quot;it finally got too complex&amp;quot; or &amp;quot;it finally won't scale&amp;quot; or &amp;quot;someone left&amp;quot;
or &amp;quot;someone new came on board.&amp;quot;  But I think these aren't the whole story, I
think they're excuses; or perhaps apologies.&lt;/p&gt;
&lt;p&gt;They ask for help because
re-engineering all those short-term-expedient decisions is really hard to do.
Faced with large and complex data structures, you don't really know where to
begin.  Everyone dives into their area of expertise and wants to rework a small
piece of the problem into something more useful and functional.  No one ever
seems to agree, since each person has a different area of
expertise.&lt;/p&gt;
&lt;p&gt;My suggestions are pretty
consistent:  &amp;quot;Pick a high-value business process and rework just that.&amp;quot;  It will
ripple through the database, but it won't touch everything that's wrong.&lt;/p&gt;
&lt;p&gt;I discourage looking at the
problem too broadly.  If you try to encompass everything in general, you often
wind up doing nothing in particular.  Infinitely broad is the same as infinitely
shallow.&lt;/p&gt;
&lt;p&gt;More pragmatically, my second
key point is that they recognize the futility of redesigning the world in a
single pass.  While they know it can't be done, they still hold out hope that I
can help them do it.&lt;/p&gt;
&lt;p&gt;Interestingly, I
get complaints when I talk about the incremental approach.  &amp;quot;If we do things in
pieces, we end up with more of the same.&amp;quot;  I can only agree.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recognizing-short-term-thinking"&gt;
&lt;h2&gt;Recognizing Short-Term Thinking&lt;/h2&gt;
&lt;p&gt;It seems like people are
looking for a way to manage complexity.  The first technique -- re-engineer the
world -- doesn't work.  They want me to sprinkle Faerie Dust™ on their
approach.  I can't see how to do everything any quicker than they are already
doing.  While I -- personally -- can design pretty quickly, it doesn't do an
organization any good, because an organization works at the median speed,
leaving slower people confused and faster people frustrated.&lt;/p&gt;
&lt;p&gt;When I suggest they tackle
complexity incrementally, they can only complain about one of two things.  The
first is an indictment of incremental thinking and the second is an indictment
of &amp;quot;extra&amp;quot; work.&lt;/p&gt;
&lt;p&gt;Incremental thinking
seems to get conflated with short-term thinking, and both are treated with
contempt.  Short-term thinking created the mess.  Incremental thinking cannot --
in any obvious way -- improve on the situation.&lt;/p&gt;
&lt;p&gt;Any effort to manage a huge
effort appears like &amp;quot;extra&amp;quot; work.  We all know that when we are up to our ass in
alligators, we can't waste time draining the swamp.&lt;/p&gt;
&lt;p&gt;This brings us to the third key
point:  viewed from a distance, these are both the responses of people crippled
by short-term thinking.  An incremental approach is an opportunity for
short-term decisions to ruin the design.  Extra work is a short-term cost that
we can't afford.  Therefore, I think the first issue is to recognize the
difference between short-term thinking and incremental
thinking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-burden"&gt;
&lt;h2&gt;My Burden&lt;/h2&gt;
&lt;p&gt;It looks like I have two
burdens.  First, to find a tidy metaphor for incremental thinking; a metaphor
that clears up the difference between short-term decisions and long-term,
incremental decisions.  Second, to find a way to query prospects on wether
they're still making short-term decisions, or ready to make incremental
decisions.&lt;/p&gt;
&lt;p&gt;Clearly, what they were
doing wasn't working.  Somehow, I need to disturb their thinking so they stop
doing the same thing.  Disturbing their thinking amounts to saying that what
they've been doing hasn't been working.  I've got to pose the question in  way
that makes them say that their current approach can't work.  However, we have to
move beyond the trivial &amp;quot;not working&amp;quot; into the more substantive, &amp;quot;what
constitutes 'working' for you?&amp;quot;&lt;/p&gt;
&lt;p&gt;I suspect that asking them to define qualities or parameters of a better approach
might change the simple refusals into more useful, ongoing conversations.  We're
trying to stop organic growth, we're trying to manage complexity and we're
trying to grow long-term value in stages.  However, not everyone is ready to
give up on things that didn't work.  I think my obligation is to get them ready
to give up on the old ways before offering them something new.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="addendum"&gt;
&lt;h2&gt;Addendum&lt;/h2&gt;
&lt;p&gt;No
sooner do I post this than I see a related note in a post in &lt;a class="reference external" href="http://agiletesting.blogspot.com/"&gt;Agile
Testing&lt;/a&gt; , &amp;quot;&lt;a class="reference external" href="http://agiletesting.blogspot.com/2006/10/90-9-1-rule-and-building-open-source.html"&gt;The 90-9-1 rule and building an open source
community&lt;/a&gt;  &amp;quot;.  This note had a helpful-looking book title:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.amazon.com/Fearless-Change-Patterns-Introducing-Ideas/dp/0201741571"&gt;Fearless Change: Patterns for Introducing New Ideas&lt;/a&gt; .  I found this to be a helpful
coincidence.  Clearly, I need help introducing change.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="productivity"></category><category term="database design"></category></entry><entry><title>Ways in which learning can be A Bad Thing™</title><link href="https://slott56.github.io/2006_08_31-ways_in_which_learning_can_be_a_bad_thingtm.html" rel="alternate"></link><published>2006-08-31T17:54:00-04:00</published><updated>2006-08-31T17:54:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-31:/2006_08_31-ways_in_which_learning_can_be_a_bad_thingtm.html</id><summary type="html">&lt;p&gt;Once I learned C++, all my C programming became
poor-man's OO.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Every &amp;quot;class&amp;quot; became a C structure
type.&lt;/li&gt;
&lt;li&gt;Every class structure was implemented as
a header file that defined the structure and a bunch of method
functions.&lt;/li&gt;
&lt;li&gt;Each method function would have a &amp;quot;self&amp;quot;
argument, which was a pointer to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Once I learned C++, all my C programming became
poor-man's OO.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Every &amp;quot;class&amp;quot; became a C structure
type.&lt;/li&gt;
&lt;li&gt;Every class structure was implemented as
a header file that defined the structure and a bunch of method
functions.&lt;/li&gt;
&lt;li&gt;Each method function would have a &amp;quot;self&amp;quot;
argument, which was a pointer to the object's type
definition.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This code was somewhat
wordy and contrived-looking when compared with more typical C programs.   But
there was no going back to ordinary procedural programming after learning OO
programming.&lt;/p&gt;
&lt;p&gt;Similarly, once I learned
how to do solid OO analysis, that was the end of any other style of requirements
discovery and documentation.  Even if the project was explicitly never going to
have an OO implementation, I still had to do OO analysis, no matter what.  It
leads to documents that are shorter and more to the point (when compared with
other analysis documents), but people would still be confused by the business
focus and lack of techno-mumbo-jumbo.&lt;/p&gt;
&lt;p&gt;I'm forced to do all design work in
the following contrived way:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create the Python class
definitions&lt;/li&gt;
&lt;li&gt;Get the key algorithms to work in
Python&lt;/li&gt;
&lt;li&gt;Write a specification for VB or Java
programmers, based on the Python.  Or, if I'm doing the implementation, I
rewrite the Python into Java.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All are
down sides of learning better ways to work.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>Comments</title><link href="https://slott56.github.io/2006_08_23-comments.html" rel="alternate"></link><published>2006-08-23T16:22:00-04:00</published><updated>2006-08-23T16:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-23:/2006_08_23-comments.html</id><summary type="html">&lt;p&gt;In a recent code review, I saw a bizarre habit.
The author defended it so vehemently, I gave up on trying to explain the
needless confusion it caused.  The author was one of those &amp;quot;I always do it this
way, and I'm always right.&amp;quot; people, so nothing was gained by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a recent code review, I saw a bizarre habit.
The author defended it so vehemently, I gave up on trying to explain the
needless confusion it caused.  The author was one of those &amp;quot;I always do it this
way, and I'm always right.&amp;quot; people, so nothing was gained by pursuing
it.&lt;/p&gt;
&lt;p&gt;Here's the
practice.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def myFunction( someArgs ):
   &amp;quot;&amp;quot;&amp;quot;Synopsis...

   Formal Definition...

   Some Design Decisions...

   Overview of Processing:
   1.  Step 1, a summary
   2.  Step 2, a summary
   3.  Step 3, a summary
   4.  Step 4, a summary
   &amp;quot;&amp;quot;&amp;quot;
   # 1. Step 1, a summary
   the actual code
   # 2. Step 2, a summary
   the actual code
   # 3. Step 3, a summary
   the actual code
   # 3. Step 4, a summary
   the actual code
&lt;/pre&gt;
&lt;p&gt;Besides the silly redundancy in the
numbers, there was the total redundancy of the comment
sequence.&lt;/p&gt;
&lt;p&gt;I asked why the comments were
duplicated, and got a strange non-answer.  The rework eliminated the in-the-code
comments, and kept the in-the-comment-block comments, separated from the
code.&lt;/p&gt;
&lt;p&gt;I was shocked by this, and had to
ask -- rhetorically -- Who is the audience for the
comments?&lt;/p&gt;
&lt;p&gt;The answer was something
like: &amp;quot;Comments help me, the author, know what to expect in the body of the
function.&amp;quot;&lt;/p&gt;
&lt;p&gt;I was dumb-founded.  I
thought my question was rhetorical.  I thought everyone knew that comments were
for the benefit of maintainers.  Further, I thought everyone knew that the
distance between a comment and the code was inversely proportional to the
accuracy of the comment: the further the comment was from the code, the less
likely that the two will agree.  I'm sure this is
&lt;em&gt;Someone's&lt;/em&gt;
law of code-to-comment distance, but I can't find it
anywhere.&lt;/p&gt;
&lt;p&gt;Boy was I wrong.  I was glad
to see Celenko's &lt;a class="reference external" href="http://jroller.com/page/slobodan?entry=comments_fix_bugs"&gt;Comments Fix Bugs&lt;/a&gt;  post, it gives me a good
reference on what comments are all about.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's a good policy to write an overview as
comments.  It seems simplest to then supplement those comments with the actual
code.  In my case, the author must have copied and pasted the comments from the
comment block to begin making the code.  Why the extra step?&lt;/li&gt;
&lt;li&gt;It's a good policy to say things only once.
If you say something twice, one of the two may be wrong.  In the case of a
comment -- a summary or interpretation -- it
&lt;em&gt;isn't&lt;/em&gt;
completely correct.  If you say something three times, now what are you supposed
to believe?  In my case, the author didn't seem to realize that someone else
would do maintenance and -- very likely -- make one or more of the comments
disagree with the code.&lt;/li&gt;
&lt;li&gt;As Celenko points out, if the comment doesn't
match the code, you'd best think about that situation.  When they're cheek by
jowls, that thinking is relatively easy.  When they're separated (or in several
places) that thinking is now impossible.  How, precisely, did the author expect
a maintainer to do a three-way diff between two comments and the
code?&lt;/li&gt;
&lt;li&gt;Comments (indeed all code) is knowledge
capture for the benefit of users and maintainers.  The author
&lt;em&gt;has&lt;/em&gt;
the knowledge; the point is to present the knowledge to others.  First, of
course, it must be correct and complete.  Succinct has tremendous value, also.
Simple redundancy (via cut and paste of all the rotten techniques) is a
make-work procedure that doesn't create any recognizable
value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I guess that proper use of
comments isn't obvious to some programmers.  Why not?&lt;/p&gt;
&lt;p&gt;Weinberg, in
&lt;em&gt;The Psychology of Computer Programming&lt;/em&gt;  noted that programmers don't spend
enough time reading code.
Jeff Raskin, in ACM Queue (&lt;a class="reference external" href="http://www.acmqueue.org/modules.php?name=Content&amp;amp;pa=showpage&amp;amp;pid=22"&gt;&amp;quot;The Woes of IDEs&amp;quot;&lt;/a&gt;), noted that one consequence
of this is that some IDE's make comments a painful exercise.  It's as if the
source doesn't really matter very
much.&lt;/p&gt;
&lt;p&gt;Maybe I'm confused by my own
preference for Literate Programming, but I think code (including comments) can
be correct, complete,  succinct and still meaningful to authors and their
audience.  In this era of open-source software, it's disappointing that every
programmer hasn't read enough source to see what constitutes good practice and
bad practice.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="bad comments"></category></entry><entry><title>Expertise and Expert Performance</title><link href="https://slott56.github.io/2006_07_19-expertise_and_expert_performance.html" rel="alternate"></link><published>2006-07-19T10:48:00-04:00</published><updated>2006-07-19T10:48:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-07-19:/2006_07_19-expertise_and_expert_performance.html</id><summary type="html">&lt;p&gt;It appears that I may have been doing the right
thing in putting together &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in Object-Oriented Design&lt;/a&gt; .
Expertise is grown through &amp;quot;effortful study&amp;quot; of the material.  Experts search
through their long-term memory for applicable patterns, based on their
study.&lt;/p&gt;
&lt;p&gt;The idea of many exercises, each
exposing a piece …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It appears that I may have been doing the right
thing in putting together &lt;a class="reference external" href="http://www.itmaybeahack.com/homepage/books/oodesign.html"&gt;Building Skills in Object-Oriented Design&lt;/a&gt; .
Expertise is grown through &amp;quot;effortful study&amp;quot; of the material.  Experts search
through their long-term memory for applicable patterns, based on their
study.&lt;/p&gt;
&lt;p&gt;The idea of many exercises, each
exposing a piece of OO design seems to fit this &amp;quot;effortful study&amp;quot;
niche.&lt;/p&gt;
&lt;p&gt;The next step is to rewrite
parts of the introduction, and change the sales pitch.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="#python"></category><category term="OO design"></category></entry><entry><title>Control Break Reporting</title><link href="https://slott56.github.io/2006_02_06-control_break_reporting.html" rel="alternate"></link><published>2006-02-06T23:49:00-05:00</published><updated>2006-02-06T23:49:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-02-06:/2006_02_06-control_break_reporting.html</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This referred to the old Active State Programmers Network, ASPN,
Python Cookbook.
The code has been moved to the ActiveState Code site.
Likely, the fact that it's Python 2 means it is no longer online.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Control Break Reporting is a design pattern that
has been around since the earliest …&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This referred to the old Active State Programmers Network, ASPN,
Python Cookbook.
The code has been moved to the ActiveState Code site.
Likely, the fact that it's Python 2 means it is no longer online.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Control Break Reporting is a design pattern that
has been around since the earliest days of business applications.  It solves the
problem of producing a report on nested (or hierarchical) data, the kind often
found in a chart of accounts.&lt;/p&gt;
&lt;p&gt;The result of &amp;quot;control break&amp;quot; reporting is a properly nested set of reports, each of
which has localized subtotals.  The details add up to a deeply nested subtotal.
The subtotals add up to higher and higher level totals, and the top-level totals
add to a grand total.&lt;/p&gt;
&lt;p&gt;When the hierarchical key values change from one record to the next,
this is called a &amp;quot;break&amp;quot; in the controlling keys for a subsection.
At this break in control, emit a sub-total appropriate to the level of the keys showing the change.&lt;/p&gt;
&lt;p&gt;The classical algorithm for &amp;quot;control break&amp;quot; reporting, however, tends to hide the basic
hierarchy under a welter of details about keys and totals and subtotals.  It
can't produce &amp;quot;heading&amp;quot; totals or counts, only footing totals or counts.  As
soon as you want additional features, you may as well ditch the classical
algorithm.&lt;/p&gt;
&lt;div class="section" id="the-problem-is-the-sort"&gt;
&lt;h2&gt;The Problem is the Sort&lt;/h2&gt;
&lt;p&gt;The most important thing I
dislike about the classical &amp;quot;control break&amp;quot; algorithm is the sort that's required.
Sorting is an expensive operation.  Rarely does a &amp;quot;control break&amp;quot; report show all
of the detail with all of the nested totals, so why should I sort all that data
only to produce higher-level
subtotals?&lt;/p&gt;
&lt;p&gt;The sorting seems so logical
and necessary.  Often our data isn't in the desired order, so sorting it makes
superficial sense.  More to the point, however, is that no one wants all the
data in a single report.  Even if I did produce a PDF file with all 21,000
accounts in the general ledger, people only want their little section of
details, or they want a slice down to a depth of 3 from where their ownership of
the finances starts.&lt;/p&gt;
&lt;p&gt;The CFO wants
the top-most totals.  The manager of production wants her costs, and the next
few levels of summary data.  Her shift supervisors want the details for their
specific times and production areas.    No one wants ALL of the data.  If no one
wants all of the data, why sort all of
it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-data-is-dimensional"&gt;
&lt;h2&gt;The Data is Dimensional&lt;/h2&gt;
&lt;p&gt;Most of the interesting
reporting problems have a combination of two features: dimensions and
hierarchies.  The basic numeric measurements (dollars, hours, pounds, pallets,
and the like) are the facts on which we are reporting.  Each fact has a number
of relevant dimensions along which that fact is measured.  We might, for
example, have sales dollars by product, by fiscal period, by sales person; this
is a three-dimensional analysis.  We could group these three dimensions in any
of 6 different orders, and produce a number of hierarchies with different kinds
of totals.&lt;/p&gt;
&lt;p&gt;In additional to the
independent dimensions of a fact, each dimension may be a hierarchical grouping
of data.  Time, for example, has groupings of days, weeks, months, quarters and
years.  Sales people may be organized into territories, regions and countries.
Products may be organized into lines and
families.&lt;/p&gt;
&lt;p&gt;In the Cookbook example from
ASPN, they have one dimension: the sales organization.  This is broken into
branches and sales people.  This forms a tidy hierarchy, good for a simple
example.&lt;/p&gt;
&lt;p&gt;In most kinds of reporting,
however, there are often a large number of dimensions.  Worse, there may be
complex relationships within a dimension.  For example, the calendar has weeks
and months, but months don't fall on nice weekly boundaries.  Similarly, our USA
office may have many regions in a single country, but our European office may
combine several countries in a region.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution-is-a-mapping"&gt;
&lt;h2&gt;The Solution is a Mapping&lt;/h2&gt;
&lt;p&gt;The right way to handle &amp;quot;Control Break&amp;quot; reporting in Python is through a design pattern that is a
variation on the Index or the Inverted Database.  I prefer to call it the
Dimensional Map, because that's a better clue as to how it
works.&lt;/p&gt;
&lt;p&gt;Let's look at the data we have in the ASPN example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
records = [(&amp;quot;branch1&amp;quot;,  &amp;quot;sales1&amp;quot;, 100),
           (&amp;quot;branch1&amp;quot;,  &amp;quot;sales1&amp;quot;, 50),
           (&amp;quot;branch1&amp;quot;,  &amp;quot;sales2&amp;quot;, 10),
           (&amp;quot;branch2&amp;quot;,  &amp;quot;sales1&amp;quot;, 104),
           (&amp;quot;branch2&amp;quot;,  &amp;quot;sales2&amp;quot;, 56),
           (&amp;quot;branch2&amp;quot;,  &amp;quot;sales2&amp;quot;, 156)]
&lt;/pre&gt;
&lt;p&gt;In this case, we have two keys (branch
and sales person), and one fact (the sales dollars).  What we will make is a Map
of the branches.  Each entry in the branch-level Map is a Map of the sales
people.  Each entry in the person-level map is a list of their detailed sales
dollars.  We can then traverse these nested maps to write the report we want to
see, correctly labeled with headers and footers.  We can, without too much extra
work. have totals in the header as well as the footer.  I'll leave that as an
exercise.&lt;/p&gt;
&lt;p&gt;It works like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
branchMap= {}
for branch, person, dollars in records:
    branchMap.setdefault( branch, {} )
    personMap= branchMap[ branch ]
    personMap.setdefault( person, 0 )
    personMap[person].append( dollars )

branchList= branchMap.keys()
branchList.sort()
for branch in branchList:
    print &amp;quot;header Branch&amp;quot;, branch
    personMap= branchMap[branch]
    personList= personMap.keys()
    personList.sort()
    for person in personList:
        print &amp;quot;header Person&amp;quot;, person
        for data in personMap[person]
            print data
        print &amp;quot;footer Person&amp;quot;
    print &amp;quot;footer Branch&amp;quot;
print &amp;quot;grand Total&amp;quot;
&lt;/pre&gt;
&lt;p&gt;This little script is essentially
hard-wired for this simple two-dimensional analysis.  It doesn't take too much
cut-and-paste to expand this to the desired number of levels.  It isn't,
however, the most general solution.  For that, we need a better class
design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expanding-on-the-pattern"&gt;
&lt;h2&gt;Expanding On The Pattern&lt;/h2&gt;
&lt;p&gt;The real problem with Control Break reporting is the recursion.  Any level of the report (except the
numeric facts) is a recursive structure: it contains a Map of the next lower
level of detail.  We can define a class, Dimension, which does two things for
us.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dimension carries the data elements for
that Dimension, the key and the next lower level Dimension object with the
details.  A Dimension's key may contains a Fact object which has a simple
unkeyed list of values.&lt;/li&gt;
&lt;li&gt;Dimension handles the recursive structure
implied by the hierarchy.  We have methods which process data recursively,
treating each subsidiary Dimension (or Fact) in a uniform
way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A simple tail recursion technique
assures that each Dimension contains subsidiary Dimensions, and the most
deeply-nested item is the basic Fact.  This leads to programs that fit the
recursive model of a number of dimensions, terminated by a single
fact.&lt;/p&gt;
&lt;p&gt;To keep the classes polymorphic,
both Dimension and Fact must implement an &lt;tt class="docutils literal"&gt;append()&lt;/tt&gt; method
that loads data and a &lt;tt class="docutils literal"&gt;report()&lt;/tt&gt; method
that produces the final report on the data.&lt;/p&gt;
&lt;p&gt;Further, to keep this example simple,
we'll make each object a combination of data and meta-data.  The data is the
mapping of key to details or the list of facts.  The metadata is the column name
and the relationship with the lower-level dimensions.  The metadata is a
universal truth about the data.&lt;/p&gt;
&lt;p&gt;We have multiple instances of each object: there are multiple branches and multiple
people.  We'll need to create additional collections to hold the data.  We'll do
this by cloning the object definition.  There's a better way to do this by
separating the metadata from the actual detailed numeric data, but that is a
more complex solution, not a simple recipe.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import copy

class Fact( object ):
    &amp;quot;&amp;quot;&amp;quot;A Fact is a measurable quantity.&amp;quot;&amp;quot;&amp;quot;
    def __init__ ( self, name ):
        self.name= name
        self.data= []
        self.total= 0
    def append( self, item ):
        self.data.append( item[0] )
        self.total += item[0]
    def values( self ):
        return self.data
    def report( self, depth=0 ):
        for d in self.data:
            print depth*' ', d

class Dimension( object ):
    &amp;quot;&amp;quot;&amp;quot;A Dimension is a value to group Facts or Dimensions.&amp;quot;&amp;quot;&amp;quot;
    def __init__( self, name, child=None ):
        self.name= name
        self.map= {}
        self.child= child
        self.total= 0
    def append( self, row ):
        &amp;quot;&amp;quot;&amp;quot;The first value is the key for this dimension.
        The remaining values are other dimension keys or the fact value.&amp;quot;&amp;quot;
        key= row[0]
        values= row[1:]
        self.map.setdefault( key, copy.deepcopy(self.child) )
        self.map[key].append( values )
    def keys( self ):
        keyList= self.map.keys()
        keyList.sort()
        return keyList
    def get( self, value ):
        return self.map.get( value )
    def report( self, depth=0 ):
        &amp;quot;&amp;quot;&amp;quot;Report this dimension, relying on other Dimensions or Facts.&amp;quot;&amp;quot;&amp;quot;
        self.total= 0
        for k in self.keys():
            print depth*' ', self.name, k, 'header'
            self.map[k].report( depth+1 )
            self.total += self.map[k].total
            print depth*' ', k, 'total', self.map[k].total
&lt;/pre&gt;
&lt;p&gt;Loading this structure with data is
pleasantly simple.  We define the nested structure of our Dimensions and the
Fact which they contain.  This same recursive structure can then be used to
break up each record into a key and the data associated with that
key.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
analysis= Dimension( &amp;quot;branch&amp;quot;, Dimension( &amp;quot;person&amp;quot;, Fact( &amp;quot;dollars&amp;quot; ) ) )

for row in records:
    analysis.append( row )
&lt;/pre&gt;
&lt;p&gt;Reporting, similarly, relies on the
recursive structure of Dimension objects nested within Dimension objects.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
analysis.report()
print analysis.total
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="more-generalization"&gt;
&lt;h2&gt;More Generalization&lt;/h2&gt;
&lt;p&gt;Since some people
are uncomfortable with the recursion, and would prefer this to use a flat list
of Dimension and Fact objects.  This flat list can be used with explicit
for-loops to parse the input and assign an appropriate structure.  We'll post
this solution in the future,
perhaps.&lt;/p&gt;
&lt;p&gt;Additionally, it would be nice
to allow for multiple Facts and not force the file to be kept with the columns
in order from most general to most specific.  The first improvement (multiple
facts for reporting) is a pretty simple generalization.  The second, however, is
a matter of a simple map to switch the order in which the columns are examined
to create the various levels of
detail.&lt;/p&gt;
&lt;p&gt;Finally, the separation of
meta-data from the real application data would shift the complexity around.  It
would make some of this simpler, but it would introduce more classes into the
solution.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="python"></category><category term="data analysis"></category><category term="summarizing"></category></entry><entry><title>Multi-Lingual Solutions: Explore in Python, Implement in Java</title><link href="https://slott56.github.io/2005_11_02-multi_lingual_solutions_explore_in_python_implement_in_java.html" rel="alternate"></link><published>2005-11-02T00:51:00-05:00</published><updated>2005-11-02T00:51:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-11-02:/2005_11_02-multi_lingual_solutions_explore_in_python_implement_in_java.html</id><summary type="html">&lt;p&gt;I like Python for exploring unknown data [&lt;a class="reference external" href="https://slott56.github.io/2005_10_22-one_more_cool_thing_about_python_is.html"&gt;One More Cool Thing About Python&lt;/a&gt; ].&lt;/p&gt;
&lt;p&gt;Anthony B. Coates [&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/"&gt;Homepage&lt;/a&gt; ] notes &amp;quot;I
tried Python for a while for similar reasons. However, in my case I was a bit
put off by the need to learn a another library API, which is not an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I like Python for exploring unknown data [&lt;a class="reference external" href="https://slott56.github.io/2005_10_22-one_more_cool_thing_about_python_is.html"&gt;One More Cool Thing About Python&lt;/a&gt; ].&lt;/p&gt;
&lt;p&gt;Anthony B. Coates [&lt;a class="reference external" href="http://kontrawize.blogs.com/kontrawize/"&gt;Homepage&lt;/a&gt; ] notes &amp;quot;I
tried Python for a while for similar reasons. However, in my case I was a bit
put off by the need to learn a another library API, which is not an
insignificant investment.&amp;quot;&lt;/p&gt;
&lt;p&gt;An
important point. I know others who aren't comfortable knowing a number of API's.
For some reason, I'm able to work my way around in Java, Python and GTK without
too much trouble or confusion.  I'm not sure why, but I think that the API
authors don't provide useful, high-level overviews.  I think that the design
patterns that summarize the API's are often omitted.  I work them out on my own,
sometimes creating my own overview documents of how the API's are meant to be
used.&lt;/p&gt;
&lt;p&gt;Perhaps it's the experience I've
had teaching database, C, Unix and Java programming.  You can't cover the
material without providing the overall patterns.  I think that this experience
might have given me the mental tools for being able to integrate new API's into
my mental model of how well-written programs should work.&lt;/p&gt;
&lt;p&gt;On the other hand, there are some
things I haven't spent a lot of mental energy mastering.  Perhaps we only have a
finite number of slots for large complex things in our heads.  I don't follow
many professional sports.  I have a limited facility with XSLT.  Maybe it's an
optimization trade-off: I opted for Python, SQL, Java and America's Cup Yacht
Racing.  Perhaps Kontrawize choose the Ukulele instead of Python?&lt;/p&gt;
</content><category term="Books"></category><category term="building skills books"></category><category term="applications"></category><category term="data analysis"></category></entry><entry><title>How does Python stack up?</title><link href="https://slott56.github.io/2005_10_07-how_does_python_stack_up.html" rel="alternate"></link><published>2005-10-07T03:34:00-04:00</published><updated>2005-10-07T03:34:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-10-07:/2005_10_07-how_does_python_stack_up.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://pjhyett.com/articles/2005/10/06/why-hasnt-anything-changed-since-the-50s"&gt;PJHyett&lt;/a&gt; asks&lt;/p&gt;
&lt;p&gt;Why is it that selling points of
newer langauges are features that Lisp had decades ago? Java has garbage
collection, Ruby has closures, Perl is dynamically typed, etc. What the hell
have we been doing this whole time besides reinventing the
wheel?&lt;/p&gt;
&lt;p&gt;Call me lazy, but I want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://pjhyett.com/articles/2005/10/06/why-hasnt-anything-changed-since-the-50s"&gt;PJHyett&lt;/a&gt; asks&lt;/p&gt;
&lt;p&gt;Why is it that selling points of
newer langauges are features that Lisp had decades ago? Java has garbage
collection, Ruby has closures, Perl is dynamically typed, etc. What the hell
have we been doing this whole time besides reinventing the
wheel?&lt;/p&gt;
&lt;p&gt;Call me lazy, but I want my
language to do as much of the work as possible. So I pose this question, not to
start a religious war, but aren't languages that allow the programmer to solve
problems with less, but not cryptic, code
better?&lt;/p&gt;
&lt;p&gt;In  &lt;a class="reference external" href="http://adamconnor.org/?p=38"&gt;Marginalia&lt;/a&gt; there
are some answers.&lt;/p&gt;
&lt;p&gt;Techno-Detail by
Techno-Detail, (garbage collection, closures, dynamic typing, better code,
language does more) Python seems to fit the bill.  It has this ugliness about
the
&lt;em&gt;self&lt;/em&gt;
variable, but I'm willing to put up with
that.&lt;/p&gt;
&lt;p&gt;From PJHyett &amp;quot;I'm a computer
scientist, and I never want to see another pointer
again.&amp;quot;&lt;/p&gt;
&lt;p&gt;I echo that.  I find the C/C++
stuff tedious, and I find some of the conversations deeply
strange.&lt;/p&gt;
&lt;p&gt;&amp;quot;We support VB, C/C++, People
Talk and (I'm drawing a blank)&amp;quot; the client says, with a straight face.  I want
to say &amp;quot;and that's not diluting your talent pool?&amp;quot;  But that's not the right
thing to quibble over.  They have other problems.  Apparently stemming from the
fact that they support a variety of platforms and languages.  Which stems from
them doing extensive customization on every package they
buy.&lt;/p&gt;
&lt;p&gt;Perhaps they
&lt;em&gt;could&lt;/em&gt;
stop looking at pointers if they would stop engaging in their hobby of
programming.  Perhaps much of the debate on good vs. bad vs. usable vs. antique
programming language stems from a certain amount of hobby programming justified
as necessary to making the software fit the
business.&lt;/p&gt;
&lt;p&gt;Perhaps if we had less
programming, but a more serious attempt to maximize the value from that
programming, we'd have fewer languages, fewer bugs, less maintenance and
support.&lt;/p&gt;
</content><category term="Books"></category><category term="building skills books"></category><category term="python features"></category></entry></feed>