<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>S.Lott -- Software Architect - News</title><link href="https://slott56.github.io/" rel="alternate"></link><link href="/feeds/news.atom.xml" rel="self"></link><id>https://slott56.github.io/</id><updated>2017-09-26T08:00:00-04:00</updated><entry><title>Learning About Data Science</title><link href="https://slott56.github.io/2017_09_26-learning_about_data_science.html" rel="alternate"></link><published>2017-09-26T08:00:00-04:00</published><updated>2017-09-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2017-09-26:/2017_09_26-learning_about_data_science.html</id><content type="html">&lt;p&gt;I work with data scientists. I am not a scientist.&lt;/p&gt;
&lt;p&gt;This kind of thing on &lt;a class="reference external" href="https://www.linkedin.com/groups/25827/25827-6311977646569984004"&gt;scikit
learn&lt;/a&gt;
is helpful for understanding what they're trying to do and how I can
help.&lt;/p&gt;
</content><category term="News"></category><category term="Data Science"></category><category term="pydata"></category></entry><entry><title>Python and .NET News</title><link href="https://slott56.github.io/2009_02_19-python_and_net_news.html" rel="alternate"></link><published>2009-02-19T14:22:00-05:00</published><updated>2009-02-19T14:22:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-02-19:/2009_02_19-python_and_net_news.html</id><summary type="html">&lt;p&gt;The Windows and .NET watch column, February 1, was &lt;a class="reference external" href="http://www.sdtimes.com/WINDOWS__NET_WATCH_PYTHON_ARBITRARILY_INTERESTING/By_Larry_O_Brien/About_DOCUMENTATION_and_NET_and_PYTHON_and_WINDOWS_and_RESOLVER/33233"&gt;Python: arbitrarily interesting&lt;/a&gt; .  For certain classes of &amp;quot;interesting&amp;quot; problems, where interesting is defined arbitrarily, Python is an easy way to tackle those interesting problems.&lt;/p&gt;
&lt;p&gt;It picks out a few specific areas of IronPython application, which is good and bad.  Good because …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Windows and .NET watch column, February 1, was &lt;a class="reference external" href="http://www.sdtimes.com/WINDOWS__NET_WATCH_PYTHON_ARBITRARILY_INTERESTING/By_Larry_O_Brien/About_DOCUMENTATION_and_NET_and_PYTHON_and_WINDOWS_and_RESOLVER/33233"&gt;Python: arbitrarily interesting&lt;/a&gt; .  For certain classes of &amp;quot;interesting&amp;quot; problems, where interesting is defined arbitrarily, Python is an easy way to tackle those interesting problems.&lt;/p&gt;
&lt;p&gt;It picks out a few specific areas of IronPython application, which is good and bad.  Good because it shows one direction in which Python is headed.  Bad because there is that class of knuckleheads who will respond &amp;quot;Aha, Python is only good for Resolver One, that's not good enough for me.&amp;quot;&lt;/p&gt;
&lt;p&gt;[&lt;a class="reference external" href="http://www.resolversystems.com/products/"&gt;Resolver One&lt;/a&gt;].&lt;/p&gt;
&lt;div class="section" id="negativity"&gt;
&lt;h2&gt;Negativity&lt;/h2&gt;
&lt;p&gt;There's a lot of nay-saying about Python, dynamic languages in general, and even the LAMP technology stack.  I'm particularly fond of this question on Stack Overflow: &lt;a class="reference external" href="http://stackoverflow.com/questions/349924/is-the-lamp-stack-appropriate-for-enterprise-use"&gt;Is the LAMP stack appropriate for Enterprise use?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The presumptions behind a vague, &amp;quot;is it appropriate?&amp;quot; question are &amp;quot;it's not&amp;quot; and &amp;quot;prove it to be otherwise.&amp;quot;  Specific questions (&amp;quot;how do I configure Linux, Apache, MySQL, Python&amp;quot;) are generally positive in nature.  Vague, general questions -- questions that can only be answered by &amp;quot;it depends' -- are essentially negative questions.&lt;/p&gt;
&lt;p&gt;While a focused article can be taken negatively, I think, on balance, that O'Brien's highlight of a specific solution that includes Python helps sway folks toward understanding that Python may become as big a deal as Java, perhaps bigger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="futures"&gt;
&lt;h2&gt;Futures&lt;/h2&gt;
&lt;p&gt;To an extent, static languages are about optimization more than anything else.   Yes, they can do a lot of static checking.  But C had an advantage over BASIC because it could be optimized down to a few machine instructions.  While there's still a need for that level of optimization, it isn't needed everywhere.  We have a lot of CPU cycles that we can invest in resolve names in dynamic languages.&lt;/p&gt;
&lt;p&gt;I think the separation between static (Java, C, C++) and dynamic languages (Python) will fluctuate as Java embraces more dynamic programming features.  Eventually, Java folks will have to make a hard decision on which way they want to focus the language, and the dynamic features will probably win out.&lt;/p&gt;
&lt;p&gt;Many of the static features will become part of a subset of the language used for writing frameworks.  The rest of us will use the dynamic language features exclusively.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>Python and Perl compare/contrast</title><link href="https://slott56.github.io/2009_02_02-python_and_perl_comparecontrast.html" rel="alternate"></link><published>2009-02-02T10:57:00-05:00</published><updated>2009-02-02T10:57:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-02-02:/2009_02_02-python_and_perl_comparecontrast.html</id><summary type="html">&lt;p&gt;Check out Binstock's January 15th column in Software Development Times, &lt;a class="reference external" href="http://www.sdtimes.com/INTEGRATION_WATCH_THE_END_FOR_PERL_/About_JAVA_and_PERL_and_PYTHON_and_GOOGLE/33186"&gt;Integration Watch: The End of PERL?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very compelling case, generally free of the kind of subjective rants that often characterize analysis of PERL's viability.  I tell people to &lt;a class="reference external" href="https://slott56.github.io/2006_01_27-after_perl_what_revised.html"&gt;drop PERL&lt;/a&gt;  all the time, but I don't often have as clear …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out Binstock's January 15th column in Software Development Times, &lt;a class="reference external" href="http://www.sdtimes.com/INTEGRATION_WATCH_THE_END_FOR_PERL_/About_JAVA_and_PERL_and_PYTHON_and_GOOGLE/33186"&gt;Integration Watch: The End of PERL?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Very compelling case, generally free of the kind of subjective rants that often characterize analysis of PERL's viability.  I tell people to &lt;a class="reference external" href="https://slott56.github.io/2006_01_27-after_perl_what_revised.html"&gt;drop PERL&lt;/a&gt;  all the time, but I don't often have as clear a case as Binstock presents.&lt;/p&gt;
&lt;p&gt;A few years back, I would participate in the &amp;quot;Python vs. PERL&amp;quot; debate.  That' mostly died down.  You'll see questions like &lt;a class="reference external" href="http://stackoverflow.com/questions/491380/should-i-use-perl-or-python-for-network-monitoring"&gt;http://stackoverflow.com/questions/491380/should-i-use-perl-or-python-for-network-monitoring&lt;/a&gt;  and &lt;a class="reference external" href="http://stackoverflow.com/questions/150043/python-v-perl"&gt;http://stackoverflow.com/questions/150043/python-v-perl&lt;/a&gt;  on Stack Overflow, but they're pleasantly rare.&lt;/p&gt;
&lt;p&gt;The more common question is the Python vs. PHP vs. Ruby vs. some other language (PERL, Lua, Lisp).&lt;/p&gt;
&lt;div class="section" id="community-support"&gt;
&lt;h2&gt;Community Support&lt;/h2&gt;
&lt;p&gt;The issue seems to boil down to community support and leadership.  A language must have a conceptual integrity -- it must be the product of one mind.  If it's a camel (a horse built by a committee), then it becomes a complex, difficult to understand beast.&lt;/p&gt;
&lt;p&gt;Reading up on the history of Pascal, it appears that the was a committee that worked on the follow-on language to Algol 60.  Because of the success of Algol 60 a lot of people had a lot of things they wanted in the follow-up language.  Apparently, the effort fractured into three camps.&lt;/p&gt;
&lt;p&gt;Nick Wirth lead one group -- they produced Pascal.  Another group produced PL/I.  And the &amp;quot;official&amp;quot; group produced Algol-68.  Which had a longer life-span, and enjoyed higher success?  I think Pascal was more widely used than PL/I.  PL/I was limited to IBM mainframes and VAXen for the most part. And I don't know if there was ever a working implementation of Algol-68.&lt;/p&gt;
&lt;p&gt;Python has the Benevolent Dictator for Life to guide the language evolution.  I think that's one of the key reasons for it's success.  Strong, visionary, limited-waffling leadership and a community that agrees that one person should lead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="also-see"&gt;
&lt;h2&gt;Also See&lt;/h2&gt;
&lt;p&gt;The ZDNet article, &amp;quot;&lt;a class="reference external" href="http://www.zdnetasia.com/techguide/webdev/0,39044903,62050288,00.htm"&gt;Why 2008 was another great year in Web technology&lt;/a&gt; ,&amp;quot; has the following tidbit.&lt;/p&gt;
&lt;p&gt;For me, one of the more surprising developments of 2008 was the rise of the Python language. This rise was greatly aided by Google and the shift of its focus from Java to Python. Google's infrastructure relies heavily on Python. To drive home the point, the Google App Engine includes a development environment that does not include Java. With the backing of an industry giant, it makes me wonder how far Python will go in 2009.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>News -- Music, Python 3.0 and more music</title><link href="https://slott56.github.io/2009_01_14-news_music_python_30_and_more_music.html" rel="alternate"></link><published>2009-01-14T00:00:00-05:00</published><updated>2009-01-14T00:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-01-14:/2009_01_14-news_music_python_30_and_more_music.html</id><summary type="html">&lt;p&gt;Thing 1 -- My son's album is out today.  You can visit the &lt;a class="reference external" href="http://sivanoir.com/"&gt;Siva Noir&lt;/a&gt;  site.  You can buy from their site or iTunes.  Samples are available on their &lt;a class="reference external" href="http://www.myspace.com/sivanoir"&gt;MySpace&lt;/a&gt;  page.&lt;/p&gt;
&lt;p&gt;Thing 2 -- More updates on Python 3.0.  The story is not on the SD Times web site yet, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thing 1 -- My son's album is out today.  You can visit the &lt;a class="reference external" href="http://sivanoir.com/"&gt;Siva Noir&lt;/a&gt;  site.  You can buy from their site or iTunes.  Samples are available on their &lt;a class="reference external" href="http://www.myspace.com/sivanoir"&gt;MySpace&lt;/a&gt;  page.&lt;/p&gt;
&lt;p&gt;Thing 2 -- More updates on Python 3.0.  The story is not on the SD Times web site yet, but was in the dead-tree edition that arrived today.  The Python 3.0 news feed is helpful information to management; it bolsters that part of our development &lt;a class="reference external" href="https://slott56.github.io/2008_11_08-python_30.html"&gt;plan&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Thing 3 -- In the &amp;quot;&lt;a class="reference external" href="http://www.sdtimes.com/link/33149"&gt;Short Takes&lt;/a&gt; &amp;quot; section of the SD Times, they mentioned the Rick Astley video, which tops off my personal &lt;a class="reference external" href="https://slott56.github.io/2008_11_29-rickrolling_trifecta.html"&gt;Rickrolling&lt;/a&gt;  trifecta.&lt;/p&gt;
&lt;p&gt;My son isn't on the Barry Manilow, record, just in the advertising video -- he's acting like a musician in the video.  He's a real musician in Siva Noir.&lt;/p&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>ROI - Buzzword Bingo</title><link href="https://slott56.github.io/2009_01_13-roi_buzzword_bingo.html" rel="alternate"></link><published>2009-01-13T01:42:00-05:00</published><updated>2009-01-13T01:42:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2009-01-13:/2009_01_13-roi_buzzword_bingo.html</id><summary type="html">&lt;p&gt;Here's the article,
&amp;quot;&lt;a class="reference external" href="http://www.businessweek.com/innovate/content/jan2009/id2009017_198183.htm"&gt;The New Focus Group: The Collective&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;The point is that simplistic Return on Investment misses the point.  The point is that marketing models aren't simple linear relationships between promotional dollars and sales.&lt;/p&gt;
&lt;p&gt;I was all excited about the &lt;a class="reference external" href="https://slott56.github.io/2008_04_09-innovation_includes_failure_some_organizations_call_it_learning_however.html"&gt;value of innovation&lt;/a&gt;
and the &lt;a class="reference external" href="https://slott56.github.io/2008_04_16-innovation_pushed_to_vendors.html"&gt;source of innovation&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's the article,
&amp;quot;&lt;a class="reference external" href="http://www.businessweek.com/innovate/content/jan2009/id2009017_198183.htm"&gt;The New Focus Group: The Collective&lt;/a&gt; &amp;quot;.&lt;/p&gt;
&lt;p&gt;The point is that simplistic Return on Investment misses the point.  The point is that marketing models aren't simple linear relationships between promotional dollars and sales.&lt;/p&gt;
&lt;p&gt;I was all excited about the &lt;a class="reference external" href="https://slott56.github.io/2008_04_09-innovation_includes_failure_some_organizations_call_it_learning_however.html"&gt;value of innovation&lt;/a&gt;
and the &lt;a class="reference external" href="https://slott56.github.io/2008_04_16-innovation_pushed_to_vendors.html"&gt;source of innovation&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The article was about small focus groups and avoiding the paralysis of analysis.  Good advice.  A little too cute with the play on &amp;quot;ROI&amp;quot;, but still of some value.&lt;/p&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>Python 3.0</title><link href="https://slott56.github.io/2008_11_08-python_30.html" rel="alternate"></link><published>2008-11-08T13:17:00-05:00</published><updated>2008-11-08T13:17:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-11-08:/2008_11_08-python_30.html</id><summary type="html">&lt;p&gt;The SD Times article (&lt;a class="reference external" href="http://www.sdtimes.com/link/32947"&gt;Python 3.0 won't be compatible...&lt;/a&gt; ) was very helpful -- crisp, to the point, management-friendly coverage.  [For some additional thoughts, see the &lt;a class="reference external" href="http://stackoverflow.com/questions/273524/python-30-and-language-evolution"&gt;Python 3.0 and Language Evolution&lt;/a&gt;  question on Stackoverflow.]&lt;/p&gt;
&lt;p&gt;This applied to what we're building at work.  Here's the best part.  When I started on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The SD Times article (&lt;a class="reference external" href="http://www.sdtimes.com/link/32947"&gt;Python 3.0 won't be compatible...&lt;/a&gt; ) was very helpful -- crisp, to the point, management-friendly coverage.  [For some additional thoughts, see the &lt;a class="reference external" href="http://stackoverflow.com/questions/273524/python-30-and-language-evolution"&gt;Python 3.0 and Language Evolution&lt;/a&gt;  question on Stackoverflow.]&lt;/p&gt;
&lt;p&gt;This applied to what we're building at work.  Here's the best part.  When I started on my &amp;quot;it's not broke but we still need to fix it&amp;quot; rant, the business owner stopped me and said, &amp;quot;years of delaying maintenance got us into trouble over and over again.  This time we're doing it right.&amp;quot;&lt;/p&gt;
&lt;p&gt;One of the reasons is that the risk of change with Python is so small.&lt;/p&gt;
&lt;p&gt;Here's our plan.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Finish our production deployment under 2.5.2.&lt;/li&gt;
&lt;li&gt;Upgrade development to 2.6.  Fix what breaks.&lt;/li&gt;
&lt;li&gt;Upgrade test to 2.6.  The testing at the level is pro-forma.  We spend more time testing new features.  We have scripts for regression testing.&lt;/li&gt;
&lt;li&gt;Upgrade production to 2.6.  This mostly means doing the Red Hat upgrades instead of delaying them.&lt;/li&gt;
&lt;li&gt;Start running with the '-3' option to determine what -- if anything -- will break.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What are the risks?&lt;/p&gt;
&lt;p&gt;None, to speak of.&lt;/p&gt;
&lt;p&gt;First, it's open source.  We have all the source.  We can lock down our current environment without any difficulty or additional cost.&lt;/p&gt;
&lt;p&gt;Second, it's so open that finding and fixing problems is easy.  There's no &amp;quot;legacy DLL&amp;quot; or &amp;quot;JAR file of unknown provenance&amp;quot; that limits our ability to find and fix problems.&lt;/p&gt;
&lt;p&gt;Third, it's so flexible that fixing bugs in our stuff is as easy as fixing bugs in the components we're using. Since we have extensive patches to the &lt;a class="reference external" href="http://code.google.com/p/django-rest-interface/"&gt;Django-REST Interface&lt;/a&gt; , we're getting good at this &amp;quot;patch the source&amp;quot; world.&lt;/p&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>Classic / Ancient Bit of Marketing</title><link href="https://slott56.github.io/2008_10_25-classic_ancient_bit_of_marketing.html" rel="alternate"></link><published>2008-10-25T14:57:00-04:00</published><updated>2008-10-25T14:57:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-10-25:/2008_10_25-classic_ancient_bit_of_marketing.html</id><summary type="html">&lt;p&gt;Found this on a shelf in my office.  The &lt;em&gt;Apple 32 Developer's Handbook&lt;/em&gt;.  It covers the Lisa 2, Lisa 2/5, Lisa 2/10 and the Macintosh.  Apple described this family of machines as the SuperMicros.&lt;/p&gt;
&lt;img alt="Apple 32.png" src="https://slott56.github.io/media/BF33A83C-72CA-4C4A-8665-BDC37B8BAFC6.png" /&gt;
&lt;p&gt;It might be a collectable -- it's in pristine condition -- never used as a coaster …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Found this on a shelf in my office.  The &lt;em&gt;Apple 32 Developer's Handbook&lt;/em&gt;.  It covers the Lisa 2, Lisa 2/5, Lisa 2/10 and the Macintosh.  Apple described this family of machines as the SuperMicros.&lt;/p&gt;
&lt;img alt="Apple 32.png" src="https://slott56.github.io/media/BF33A83C-72CA-4C4A-8665-BDC37B8BAFC6.png" /&gt;
&lt;p&gt;It might be a collectable -- it's in pristine condition -- never used as a coaster.  But I doubt it.&lt;/p&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>What is Perception? What is Reality? It seems to depend on your sponsors.</title><link href="https://slott56.github.io/2008_08_20-what_is_perception_what_is_reality_it_seems_to_depend_on_your_sponsors.html" rel="alternate"></link><published>2008-08-20T23:26:00-04:00</published><updated>2008-08-20T23:26:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-08-20:/2008_08_20-what_is_perception_what_is_reality_it_seems_to_depend_on_your_sponsors.html</id><summary type="html">&lt;p&gt;The article by Joe Wilcox in eWeek is actually really good -- except for the silly subtitle.  See &lt;a class="reference external" href="http://www.eweek.com/c/a/Enterprise-Applications/No-Enterprise-Thaw-for-Vista/"&gt;&amp;quot;No Enterprise Thaw for Vista&lt;/a&gt; &amp;quot;.  It provides solid evidence that Vista is covered in FAIL.  Not rumor or bias, but solid research on sales, adoption, conversion and the like.&lt;/p&gt;
&lt;p&gt;The only flaw in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The article by Joe Wilcox in eWeek is actually really good -- except for the silly subtitle.  See &lt;a class="reference external" href="http://www.eweek.com/c/a/Enterprise-Applications/No-Enterprise-Thaw-for-Vista/"&gt;&amp;quot;No Enterprise Thaw for Vista&lt;/a&gt; &amp;quot;.  It provides solid evidence that Vista is covered in FAIL.  Not rumor or bias, but solid research on sales, adoption, conversion and the like.&lt;/p&gt;
&lt;p&gt;The only flaw in the article is the subtitle on &amp;quot;negative perception&amp;quot;.  The phrase &amp;quot;negative perception&amp;quot; is usually used to deprecate opinions that are not well-founded on facts.  I don't think the Vista adoption can be shrugged off as merely a &amp;quot;perception&amp;quot; problem.  Wilcox provides the facts.  Vista is failing.&lt;/p&gt;
&lt;p&gt;I think that Microsoft no longer knows what they offer.  I think this is because they're too big to remain in touch with anyone.  After all, they don't sell their OS to individual consumers.  They sell their OS to OEM's like Dell and Lenovo.&lt;/p&gt;
&lt;p&gt;MS offers a desktop suite that's really nice.  Sadly, you have to buy this crap operating system to run it.  Interestingly, people will put up with a crap operating system to get cool software.  But it appears that MS hasn't noticed this, yet.&lt;/p&gt;
&lt;p&gt;People don't buy operating systems.  GNU/Linux is proof of that.  People buy applications; they tolerate operating systems.&lt;/p&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>Tech Visionaries</title><link href="https://slott56.github.io/2008_06_06-tech_visionaries.html" rel="alternate"></link><published>2008-06-06T10:00:00-04:00</published><updated>2008-06-06T10:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-06-06:/2008_06_06-tech_visionaries.html</id><summary type="html">&lt;p&gt;See PC World, &amp;quot;&lt;a class="reference external" href="http://www.pcworld.com/article/id,145290/article.html?tk=nl_wbxnws"&gt;Top 50 Tech Visionaries&lt;/a&gt; .&amp;quot;&lt;/p&gt;
&lt;p&gt;I spent some quality time reading RFC's once upon a time.  It was the mid '90's and a client had a desktop application that depended on embedded FTP client that submitted batch jobs to a mainframe.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Note&lt;/strong&gt;.  It was the 90's.  Desktop computing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See PC World, &amp;quot;&lt;a class="reference external" href="http://www.pcworld.com/article/id,145290/article.html?tk=nl_wbxnws"&gt;Top 50 Tech Visionaries&lt;/a&gt; .&amp;quot;&lt;/p&gt;
&lt;p&gt;I spent some quality time reading RFC's once upon a time.  It was the mid '90's and a client had a desktop application that depended on embedded FTP client that submitted batch jobs to a mainframe.&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Note&lt;/strong&gt;.  It was the 90's.  Desktop computing seemed like a good idea.  In the long run, it is not a good idea.  Corporate information assets do not belong on a desktop.  Period.  People have asked me challenging questions like &amp;quot;Are you saying the PC/Desktop Computing revolution was a mistake?&amp;quot; I reply with &amp;quot;Yes, it was.&amp;quot;]&lt;/p&gt;
&lt;p&gt;The app didn't work reliably.  In order to work out a way to test it, I commandeered a small Unix box and wrote a bunch of perl scripts to act as FTP server, meticulously logging everything.  I made a few small changes to the desktop app, mostly to log things for debugging purposes.&lt;/p&gt;
&lt;p&gt;[This was a kind of &lt;strong&gt;Test-Driven Reverse Engineering&lt;/strong&gt; exercise.  I just didn't know to call it that.]&lt;/p&gt;
&lt;p&gt;In the process I really got to know &lt;a class="reference external" href="http://www.faqs.org/rfcs/rfc959.html"&gt;RFC 959&lt;/a&gt; .  I also spent some time with &lt;a class="reference external" href="http://www.faqs.org/rfcs/rfc793.html"&gt;RFC 793&lt;/a&gt;  and &lt;a class="reference external" href="http://www.faqs.org/rfcs/rfc854.html"&gt;RFC 854&lt;/a&gt; .  What do they all have in common?  Jon Postel.  I think he was one of the pragmatic, hard-working, low-flying geniuses that makes this anarchy we call the Internet work.&lt;/p&gt;
&lt;p&gt;Corporations and their bottom-feeding Intellectual Property lawyers are the antithesis to the kind of sensible, open, pragmatic approach that makes the Internet work.  Imagine if some patent attorney was following Postel around.  What would we have now?&lt;/p&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>XKCD summarizes Python nicely</title><link href="https://slott56.github.io/2008_04_13-xkcd_summarizes_python_nicely.html" rel="alternate"></link><published>2008-04-13T02:30:00-04:00</published><updated>2008-04-13T02:30:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-04-13:/2008_04_13-xkcd_summarizes_python_nicely.html</id><content type="html">&lt;p&gt;See the &lt;a class="reference external" href="http://xkcd.com/409/"&gt;Electric Skateboard&lt;/a&gt;  in XKCD.  &amp;quot;You don't realize how much time you were spending on the boring parts until you don't have to do them anymore.&amp;quot;&lt;/p&gt;
&lt;p&gt;A helpful answer to &amp;quot;Why is Python so cool?&amp;quot;  &lt;strong&gt;Fewer Boring Parts&lt;/strong&gt;.&lt;/p&gt;
</content><category term="News"></category><category term="books"></category><category term="building skills"></category><category term="#python"></category></entry><entry><title>Censorship - who wins?</title><link href="https://slott56.github.io/2008_03_12-censorship_who_wins.html" rel="alternate"></link><published>2008-03-12T10:15:00-04:00</published><updated>2008-03-12T10:15:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-12:/2008_03_12-censorship_who_wins.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="http://blog.wired.com/27bstroke6/2008/03/godaddy-silence.html"&gt;GoDaddy Silences Police Watchdog Site RateMyCop.com&lt;/a&gt; .  As of 3/12/08, GoDaddy won't comment.&lt;/p&gt;
&lt;p&gt;So far, they didn't produce a takedown notice, or even notify the owner.  So I guess this means GoDaddy is not a good choice for hosting or Domain Name registration.  The good news is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="http://blog.wired.com/27bstroke6/2008/03/godaddy-silence.html"&gt;GoDaddy Silences Police Watchdog Site RateMyCop.com&lt;/a&gt; .  As of 3/12/08, GoDaddy won't comment.&lt;/p&gt;
&lt;p&gt;So far, they didn't produce a takedown notice, or even notify the owner.  So I guess this means GoDaddy is not a good choice for hosting or Domain Name registration.  The good news is the list of hosting services is still quite long.&lt;/p&gt;
&lt;p&gt;The content could be viewed as politically challenging, but it sure looked like citizen oversight of government operations.  If the government doesn't like to be watched... as they say, if you can't take the heat, get out of the kitchen.  Oh wait -- since '98, it should be -- if you can't take the heat, slap them with a legal process that makes the heat too expensive to maintain.&lt;/p&gt;
&lt;p&gt;Bullying&lt;/p&gt;
&lt;p&gt;DMCA copyright takedown notices are just a technique for bullying in web space.  While there may be some legitimate copyright issues, many of them are simple power plays.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://blog.wired.com/27bstroke6/2008/03/air-force-cyber.html"&gt;Air Force Cyber Command's New Weapon: DMCA Notice&lt;/a&gt; s for illegal use of DMCA notices by a government agency.  That's doubly bad - the government (especially the military) is already a bully.  Using pseudo-legalistic threats is just more bullying.&lt;/p&gt;
&lt;p&gt;DMCA as a bullying technique is distressing.  See &lt;a class="reference external" href="http://www.eff.org/cases/online-policy-group-v-diebold"&gt;EFF's Online Policy Group v. Diebold&lt;/a&gt; .  While clearly illegal, it takes a lot of expensive lawyering to defend yourself against DMCA notices.  What you can do against GoDaddy -- who simply shut you off, I don't know.  You can only sue for damages, but the dollar value of the damages will barely cover the lawyers.&lt;/p&gt;
&lt;div class="section" id="copyright"&gt;
&lt;h2&gt;Copyright&lt;/h2&gt;
&lt;p&gt;I like to read the various analyses of intellectual property on &lt;a class="reference external" href="http://www.boingboing.net"&gt;Boing Boing&lt;/a&gt; .  Particularly regarding the silliness of current copyright law.  Once the original creator is dead, who benefits from the copyright?  Lawyers.  The Disney Corporation.&lt;/p&gt;
&lt;p&gt;One consequence of Disney's pursuit of insane copyright durations the DMCA and my inability to copy my DVD's to make backups.  Brilliant strategy -- punish the consumer.  Look at the history of the &lt;a class="reference external" href="http://www.boingboing.net/2005/11/14/sony-anticustomer-te.html"&gt;SONY Rootkit&lt;/a&gt;  hacks that damaged people's computers.&lt;/p&gt;
&lt;p&gt;And don't waste my time on the piracy stupidity.  Why buy a $3.00 badly executed cheap copy of a movie when I can spend $19 for the real deal? I want movie &lt;strong&gt;and&lt;/strong&gt;  the bonus content in a case that doesn't have spelling mistakes.   When will the production companies finally recognize that DVD sales don't cannibalize the theatrical sales?  Probably never.&lt;/p&gt;
&lt;p&gt;There will always be people who brag about getting a knock-off at 1/10th the price that's &amp;quot;just as good&amp;quot;. Those annoying people are loud, but they aren't the demographic who &lt;strong&gt;buys&lt;/strong&gt;  a product.  They're the demographic who buys knock-offs of a product, complaining the whole time.  Focus on the demographic that spends money -- ramp up the quality, the bonus features, the frequent buyer points, the advance notices and other love and care that rewards purchasing rather than punishing it.&lt;/p&gt;
&lt;p&gt;Perhaps GoDaddy will join others in citing some goofy copyright thing as the reason for censoring a site.  It didn't work for Diebold.  It shouldn't work for GoDaddy.  Too bad it costs so much in legal fees to assert the right to free speech.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>Al Gore's Internet? Wait -- What?</title><link href="https://slott56.github.io/2008_03_11-al_gores_internet_wait_what.html" rel="alternate"></link><published>2008-03-11T20:02:00-04:00</published><updated>2008-03-11T20:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2008-03-11:/2008_03_11-al_gores_internet_wait_what.html</id><summary type="html">&lt;p&gt;Here's the lead-off quote&lt;/p&gt;
&lt;p&gt;&amp;quot;Check out how insecure Al Gore's internet is ....&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://arstechnica.com/news.ars/post/20080225-insecure-routing-redirects-youtube-to-pakistan.html"&gt;http://arstechnica.com/news.ars/post/20080225-insecure-routing-redirects-youtube-to-pakistan.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While losing YouTube isn't really an issue, shows how fragile the networking infrastructure is worldwide.&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Sigh.  The Pakistan story is only “insecurity” in the broadest, vaguest sense of “secure”.  It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's the lead-off quote&lt;/p&gt;
&lt;p&gt;&amp;quot;Check out how insecure Al Gore's internet is ....&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://arstechnica.com/news.ars/post/20080225-insecure-routing-redirects-youtube-to-pakistan.html"&gt;http://arstechnica.com/news.ars/post/20080225-insecure-routing-redirects-youtube-to-pakistan.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While losing YouTube isn't really an issue, shows how fragile the networking infrastructure is worldwide.&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Sigh.  The Pakistan story is only “insecurity” in the broadest, vaguest sense of “secure”.  It’s really “usability” in that the usability of the routing (like too many things) depends on an arcane, easily-overlooked rule.  It's only security if there's exposure or misuse of information.&lt;/p&gt;
&lt;div class="section" id="politics"&gt;
&lt;h2&gt;Politics&lt;/h2&gt;
&lt;p&gt;Why does everyone keep lauding Al Gore for voting to fund the invention of the internet?  I think he was only one of 60-odd senators who agreed with the appropriations over the years.  Why are the others ignored?   Even Vinton Cerf forgot to give them credit in this little &lt;a class="reference external" href="http://web.archive.org/web/20000125065813/http://www.mids.org/mn/904/vcerf.html"&gt;essay&lt;/a&gt; , and he was the direct beneficiary of their voting.&lt;/p&gt;
&lt;p&gt;After I finished my &amp;quot;Al Gore was Only One Of Many&amp;quot; rants, I got this response&lt;/p&gt;
&lt;p&gt;&amp;quot;Believe the grad student who developed eventually developed the first real search engine for the Internet and the two Michigan State guys who developed the browser were the major contributors of the modern Internet.  The founders of Arpanet (unknown to me) share in this along with tons of router and wiring guys.&lt;/p&gt;
&lt;p&gt;Politicians who say they voted and supported Internet stuff are nice but not &amp;quot;founders&amp;quot;.&lt;/p&gt;
&lt;p&gt;I quote Al Gore since it gets a laugh (just like nuclear with Bush).&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Sigh.  Browser?  You mean Mosaic?  That’s not The Internet.  That’s the World Wide Web.  Sorry, but cart must come before horse.  ... Internet dates from early 70’s.  Funding was critical.  World Wide Web dates from the 90’s.&lt;/p&gt;
&lt;p&gt;The Internet and Arpanet predate the browser by decades.  (2 at the minimum, perhaps 2.5.)&lt;/p&gt;
&lt;p&gt;See&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.congress.gov/cgi-bin/bdquery/z?d102:SN00272:&amp;#64;&amp;#64;&amp;#64;L&amp;amp;amp;summ2=m&amp;amp;amp"&gt;http://www.congress.gov/cgi-bin/bdquery/z?d102:SN00272:&amp;#64;&amp;#64;&amp;#64;L&amp;amp;amp;summ2=m&amp;amp;amp&lt;/a&gt;;#cosponsors&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/High_Performance_Computing_and_Communication_Act_of_1991"&gt;http://en.wikipedia.org/wiki/High_Performance_Computing_and_Communication_Act_of_1991&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.senate.gov/artandhistory/history/common/generic/VP_Albert_Gore.htm"&gt;http://www.senate.gov/artandhistory/history/common/generic/VP_Albert_Gore.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.computerhistory.org/internet_history/internet_history_90s.shtml"&gt;http://www.computerhistory.org/internet_history/internet_history_90s.shtml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="innovation"&gt;
&lt;h2&gt;Innovation&lt;/h2&gt;
&lt;p&gt;You can deprecate the funding, but without visionaries in the Senate — in the early days of Arpanet — we’d be using Token Ring and agreeing to love it because it was supplied by AT&amp;amp;amp;T.  Personally, I wish that folks would actually thank the other senators who agreed with Gore to fund the Arpanet research that gave us an open source internet.  Without that vision, we’d be using AOL on character-mode terminals that provided advertisement-only content.  Without the whole pack of Senators who funded this mess called the &amp;quot;Internet&amp;quot; (Not the World Wide Web; that came much later) we’d have junk instead.&lt;/p&gt;
&lt;p&gt;I think the folks who chuckle at the Al Gore line should be forced to use only proprietary products: AOL over Token Ring, managed by AT&amp;amp;amp;T at dial-up speeds.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="news"></category></entry><entry><title>Dynamic Languages In The News</title><link href="https://slott56.github.io/2007_08_03-dynamic_languages_in_the_news.html" rel="alternate"></link><published>2007-08-03T13:57:00-04:00</published><updated>2007-08-03T13:57:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-08-03:/2007_08_03-dynamic_languages_in_the_news.html</id><summary type="html">&lt;p&gt;The Alex Handy story &lt;a class="reference external" href="http://www.sdtimes.com/article/LatestNews-20070715-12.html"&gt;Study Predicts Upswing in Dynamic Language Use&lt;/a&gt;  is old news, but when it's in a print publication like SD Times, then it starts to gain some traction.  And it's one of those journalistic things: you can't repeat the obvious without some kind of &amp;quot;angle&amp;quot;.  And the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Alex Handy story &lt;a class="reference external" href="http://www.sdtimes.com/article/LatestNews-20070715-12.html"&gt;Study Predicts Upswing in Dynamic Language Use&lt;/a&gt;  is old news, but when it's in a print publication like SD Times, then it starts to gain some traction.  And it's one of those journalistic things: you can't repeat the obvious without some kind of &amp;quot;angle&amp;quot;.  And the arrival of a Forrester Research study gives SD Times a chance to restate the obvious to those who aren't paying attention.&lt;/p&gt;
&lt;p&gt;I found the Forrester conclusions helpful.  JavaScript (while annoying) is part of the browser, get over it.  Ruby is growing quickly.  PHP is slowly gaining acceptance in corporate IT circles.&lt;/p&gt;
&lt;p&gt;I expect that PHP will go the way of Cold Fusion before too long.  Why?  It's effectively a Domain Specific Language (DSL) for web development.  Narrowness of focus can breed a degree of contempt.  Ruby (because of the Rails thing) may follow PHP and CFML into the corner with other IT darlings.&lt;/p&gt;
&lt;div class="section" id="the-cobol-ness-factor"&gt;
&lt;h2&gt;The COBOL-ness Factor&lt;/h2&gt;
&lt;p&gt;COBOL endures because your in-house IT people find that it works for &lt;strong&gt;Big Old Batch&lt;/strong&gt;™, something they revere as the eternal essence data processing.  They can make it work for interactive programming in CICS.  And they can implement CICS-based web services.  What's not to love about COBOL?&lt;/p&gt;
&lt;p&gt;Java is tolerated because your in-house IT people can see that it's marginally valuable for certain kinds of web applications and web services.  At some point, it slowly dawns on them that Java can be used for Big Old Batch.  Then the lights come on the Java isn't all bad.  Java has just enough COBOL-ness that it's tolerable.&lt;/p&gt;
&lt;p&gt;Interestingly, I laid out the Java vs. COBOL decision for some folks recently.  The top IT brass were not pleased with the idea of Java in batch.  I thought I made it clear that Java for Big Old Batch applications totally rules -- it's the easiest way to build data warehouse ETL applications, for example.&lt;/p&gt;
&lt;p&gt;They scratched their heads at batch Java.  They gave me the &amp;quot;Really?&amp;quot; look.  And then the top dog turns to her assistant and says.  &amp;quot;Maybe we'll look into this as something else to learn.&amp;quot;  In essence deprecating Batch Java as &amp;quot;too outlandish&amp;quot; to discuss further with the nut-ball consultant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="futures"&gt;
&lt;h2&gt;Futures&lt;/h2&gt;
&lt;p&gt;SD Times and Forrester have mentioned dynamic languages.  Now if ComputerWorld would just use the buzz-phrase a few more times, it might start to percolate through people's heads.&lt;/p&gt;
&lt;p&gt;Until it gets mentioned a little more, It will be difficult for me to dance around the &lt;strong&gt;Elephant in the Saloon&lt;/strong&gt;™.  When comparing Java and COBOL, I feel compelled to mention that Java -- while light-years ahead of COBOL -- is not the state of the art.  Java has an ecosystem of tools that makes a few marginally competent Java kiddies twice as productive as genius-level old-salt COBOL programmers.  But it's still not Python, which seems to give you another 50% intellectual leverage advantage over Java.&lt;/p&gt;
&lt;p&gt;A little more press coverage of dynamic languages will make my job easier.  I'd rather do Python vs. Java vs. COBOL.  Right now I have to lay low on the state of the art because -- to many of my clients -- Python seems too new and new == scary.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="dynamic languages"></category><category term="JavaScript"></category><category term="Ruby"></category><category term="PHP"></category><category term="Java"></category><category term="COBOL"></category></entry><entry><title>"As the software industry shifts away from selling shrink-wrapped software..."</title><link href="https://slott56.github.io/2007_05_23-as_the_software_industry_shifts_away_from_selling_shrink_wrapped_software.html" rel="alternate"></link><published>2007-05-23T17:31:00-04:00</published><updated>2007-05-23T17:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-05-23:/2007_05_23-as_the_software_industry_shifts_away_from_selling_shrink_wrapped_software.html</id><summary type="html">&lt;p&gt;In PC World, May 1st, there's one article, &amp;quot;&lt;a class="reference external" href="http://msn.pcworld.com/article/id,131421-page,1/article.html"&gt;Shrink-Wrapped Software's Days Numbered&lt;/a&gt; &amp;quot; by Robert Mullins.  This has quotes and numbers.  Very nice, and it specifically identifies open source and SaaS as beating out shrink-wrap.&lt;/p&gt;
&lt;p&gt;In MSDN, however, see &amp;quot;&lt;a class="reference external" href="http://msdn2.microsoft.com/en-us/library/aa479069.aspx"&gt;Building Distributed Applications: Architecture Strategies for Catching the Long Tail&lt;/a&gt; &amp;quot;.  This makes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In PC World, May 1st, there's one article, &amp;quot;&lt;a class="reference external" href="http://msn.pcworld.com/article/id,131421-page,1/article.html"&gt;Shrink-Wrapped Software's Days Numbered&lt;/a&gt; &amp;quot; by Robert Mullins.  This has quotes and numbers.  Very nice, and it specifically identifies open source and SaaS as beating out shrink-wrap.&lt;/p&gt;
&lt;p&gt;In MSDN, however, see &amp;quot;&lt;a class="reference external" href="http://msdn2.microsoft.com/en-us/library/aa479069.aspx"&gt;Building Distributed Applications: Architecture Strategies for Catching the Long Tail&lt;/a&gt; &amp;quot;.  This makes shrink-wrapped software look &amp;quot;simpler&amp;quot; and less expensive than custom-tailored &amp;quot;line-of-business&amp;quot; software.&lt;/p&gt;
&lt;p&gt;Then, Microsoft goes on to say that SaaS is cheaper still.&lt;/p&gt;
&lt;p&gt;I guess this makes it something that can be stated as fact.  However, I can only find references to Microsoft doing this.&lt;/p&gt;
&lt;p&gt;However, I don't see how this is a zero-sum game.  There's no evidence that SaaS displaces shrink-wrapped software.  If SaaS is cheaper, then this will tend to increases the volume of software purchased for constant dollars.&lt;/p&gt;
&lt;div class="section" id="the-fourth-scenario"&gt;
&lt;h2&gt;The Fourth Scenario&lt;/h2&gt;
&lt;p&gt;The premise, &amp;quot;...industry shifts away from selling shrink-wrapped software...&amp;quot; has to be rejected as not completely supportable.  This means that the rest of that specific scenario in the Information Week article is suspicious.&lt;/p&gt;
&lt;p&gt;Specifically, Babcock uses the industry shift to conclude that Microsoft might eventually compete fairly and interoperate with open-source software.  Since the industry shift isn't an exclusive choice, it's possible that Microsoft could see enough revenue growth that they tolerate competition grudgingly, essentially maintaining the &lt;em&gt;status quo&lt;/em&gt;  of legal threats and posturing.&lt;/p&gt;
&lt;p&gt;Can they do this forever?  Absolutely.  Greed and cowardice are powerful forces.  It appears the M$ is too greedy to let the whole patent business slide and too cowardly to risk losing everything on the possibility of having it blow up in their face.  They can hope for the lethal chill, but be willing to settle for endless legal fees.&lt;/p&gt;
&lt;p&gt;Yes, endless.  At least until Congress rejects the patentability of software by directing USPTO and BPAI that software is just a &amp;quot;mathematical expression&amp;quot; and doesn't qualify.  The lines of code that implement that algorithm are covered by copyright, and that's all the protection anyone needs.&lt;/p&gt;
&lt;p&gt;The other two scenarios in the article are remote possibilities.  It could be that enough legal threats will put a lethal chill on open source.  However, the number of companies using open source as part of a for-profit business makes this really unlikely.  It could blow up in M$ face if IBM's vast patent collection (or the courts) reject Microsoft's 235 patents as lacking enough prior art.  This means that M$ and someone with equally deep pockets go toe-to-toe, which is unlikely.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="management"></category></entry><entry><title>The Web Mart Design Pattern.</title><link href="https://slott56.github.io/2007_05_03-the_web_mart_design_pattern.html" rel="alternate"></link><published>2007-05-03T13:28:00-04:00</published><updated>2007-05-03T13:28:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2007-05-03:/2007_05_03-the_web_mart_design_pattern.html</id><summary type="html">&lt;p&gt;The &lt;strong&gt;Web Mart&lt;/strong&gt;  design pattern identifies three aspects
to a piece of web content:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;strong&gt;Core Concept&lt;/strong&gt;  - the &amp;quot;fact&amp;quot; that we will
present.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Access Dimensions&lt;/strong&gt;  - objects that identify a concept
or support navigation to the concept.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Details&lt;/strong&gt; - objects that provide details in support of a concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;strong&gt;Web Mart&lt;/strong&gt;  design pattern identifies three aspects
to a piece of web content:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;strong&gt;Core Concept&lt;/strong&gt;  - the &amp;quot;fact&amp;quot; that we will
present.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Access Dimensions&lt;/strong&gt;  - objects that identify a concept
or support navigation to the concept.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Details&lt;/strong&gt; - objects that provide details in support of a concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a number of things
to like about this.  First, and most important, is the close parallelism between
this design pattern and the &lt;strong&gt;Star Schema&lt;/strong&gt;  (or
&lt;strong&gt;Dimensional Model&lt;/strong&gt;  or
&lt;strong&gt;Data Mart&lt;/strong&gt; ) design pattern.   I'm a big fan of the
dimensional model, and presented an implementation of the dimensional design
pattern at &lt;a class="reference external" href="https://slott56.github.io/2007_02_26-pycon_2007_revised.html"&gt;PyCon 2007&lt;/a&gt; .  The dimensional model surrounds a
fact with independent dimensions of that fact.  The dimensions serve as
navigation and aggregation of the fact; the fact is the most granular detail in
the data structure.&lt;/p&gt;
&lt;p&gt;What's important is
the recognition that navigation involves
&lt;strong&gt;independent dimensions&lt;/strong&gt; . Many people attempt to force-fit
independent dimensions into a single hierarchical taxonomy.  Somewhere there's
this fantasy that a single taxonomy can represent all knowledge.  This fantasy
dates from the early efforts to create encyclopedias, thesauri and dictionaries,
and it permeates our lives through the Dewey Decimal Classification in
libraries.&lt;/p&gt;
&lt;p&gt;No matter how we slice and
dice multiple dimensions, they don't fit into a single taxonomy well.  We can
always reslice and redice the independent variables to create a taxonomy which
has the same information in a different ordering.  Mathematically speaking, if
we have &lt;em&gt;n&lt;/em&gt; independent dimensions, we can use any of the
&lt;em&gt;n&lt;/em&gt; ! orderings of the available dimensions to create a distinct taxonomy.  All
&lt;em&gt;n&lt;/em&gt; ! orders contain the same
information.&lt;/p&gt;
&lt;p&gt;Which is more important,
to organize the files on your hard drive by date?  By subject?  Or by
application software?  All are viable dimensions.  There are six possible
orderings of those three
dimensions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web Mart Data Model.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Web Mart&lt;/strong&gt;
design pattern provides guidance that can constrain our data model in useful and
appropriate ways.  This guidance prevents us from fumbling around and creating a
data model that isn't easy to for people to navigate and maintain.  The
relational model, in many cases, offers us too much power.  Some constraints
help structure the data in familiar, usable
ways.&lt;/p&gt;
&lt;p&gt;First, our &lt;strong&gt;Core Concepts&lt;/strong&gt;  will be objects that have
interesting, often complex attributes, and will require a fairly sophisticated
page template in which they are displayed.  These are the central entities in
the data model, with the most relationships and the most attributes.  Further,
all of the user's navigation use cases have the same essential goal:  to view a
specific &lt;strong&gt;Core Concept&lt;/strong&gt;
page.&lt;/p&gt;
&lt;p&gt;Second, our
&lt;strong&gt;Access Dimensions&lt;/strong&gt;  will be lists or hierarchies that
facilitate navigation and search, define menus of various kinds, but aren't --
themselves -- the user's goal.  Access dimensions are the means to the user's
end.  These will have easy-to-manage 1-to-many relationships with
&lt;strong&gt;Core Concepts&lt;/strong&gt; .  If they form a hierarchy, they will
have simple 1-to-many relationships among the levels of the
hierarchy.&lt;/p&gt;
&lt;p&gt;What's important is that the
&lt;strong&gt;Access Dimensions&lt;/strong&gt;  are independent of each other.
There is no tangling or confusion of the access relationships.  The access
relationships are all ways to find a &lt;strong&gt;Core Concept&lt;/strong&gt; .  Since a
&lt;strong&gt;Core Concept&lt;/strong&gt;  will have a number of access
dimensions, this forms an easy-to-manage star, not a tangled knot of
relationships.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Handling Details.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two kinds of
details that might be related to a &lt;strong&gt;Core Concept&lt;/strong&gt; .  In some cases, the
&lt;strong&gt;Core Concept&lt;/strong&gt;  has supporting details that are simply
collections of objects.   These details have a pleasant 1-to-many relationship
with the &lt;strong&gt;Core Concept&lt;/strong&gt; .  For example, multiple phone numbers
for a person's contact information is just many detail objects collected into a
composite object.&lt;/p&gt;
&lt;p&gt;The other kind of
detail is a relationship with another &lt;strong&gt;Core Concept&lt;/strong&gt; .  For example, an Invoice has a number
of Line Items, each of which relates to a Product.  A Line Item isn't, itself, a
&lt;strong&gt;Core Concept&lt;/strong&gt; .  However an Invoice and a Product are
&lt;strong&gt;Core Concepts&lt;/strong&gt; . Invoices have a many-to-many
relationship with Products, and this relationship is implemented through an
association that we call a Line Item
Detail.&lt;/p&gt;
&lt;p&gt;Our data model, then, is
dominated by &lt;strong&gt;Core Concepts&lt;/strong&gt; , which have
&lt;strong&gt;Access Dimensions&lt;/strong&gt; ,
&lt;strong&gt;Details&lt;/strong&gt; ,
and associations with other &lt;strong&gt;Core Concepts&lt;/strong&gt; .  This helps us structure our models,
and navigation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Django Implication.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each Django server has
access to a number of &amp;quot;applications&amp;quot;, defined by the &amp;quot;INSTALLED_APPS&amp;quot; setting.
Each Django application is a Python package with models, urls, and views; it may
also include templates, tags and media.  Django seems to make use of an
&lt;strong&gt;Application-Model-View&lt;/strong&gt;
design pattern.&lt;/p&gt;
&lt;p&gt;By the way, an
application appears to fit into the overall Django world-view as follows.  We
have a Django server, configured by a settings file and started on a specific IP
address and port number.  This Django server may be one of many servers sharing
a common code base and database, or it may stand-alone.  Django servers are --
for production purposes -- usually front-ended by Apache, which handles static
content (known as &amp;quot;media files&amp;quot;), and which handles the slow-client, fast-server
balancing issue.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Web Mart&lt;/strong&gt;
design pattern seems to fit nicely with the Django's
&lt;strong&gt;Application-Model-View&lt;/strong&gt;
design pattern.  Each &lt;strong&gt;Core Concept&lt;/strong&gt;  is a Django application.  The model
contains the Core Concept, the Access Dimensions and the Details.  We design the
URLs to provide navigation aids through the Access Dimensions.  We have two
kinds of view: core concept detail views and access dimension list views.  Each
kind of view, in turn, relies on either a core concept template or an access
list template.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building The Web Mart.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's say we're building a
web site to describe a church summer camp.  We have a number of Core Concepts in
our camping ministries web site: we have &amp;quot;About&amp;quot; statements, &amp;quot;Volunteer&amp;quot;
information, &amp;quot;Employment&amp;quot; information &amp;quot;Privacy and Safety&amp;quot; information, &amp;quot;Camps&amp;quot;,
&amp;quot;Retreats&amp;quot;, &amp;quot;Profiles&amp;quot; and &amp;quot;Forms and Paperwork&amp;quot;.  Each of these is a separate
core concept, and can be implemented as a separate, small
application.&lt;/p&gt;
&lt;p&gt;Let's look at Camps,
specifically.  The &lt;strong&gt;Core Concept&lt;/strong&gt;  is Camp, which has relatively few
attributes.  It has a name, a description, and a few administrative details like
the number of campers and the number of counsellors.&lt;/p&gt;
&lt;p&gt;The access dimensions for a Camp
include the schedule dates, the appropriate age group, and perhaps some other
classification scheme that the camping program uses, like &amp;quot;outdoor&amp;quot; or
&amp;quot;adventure&amp;quot; or &amp;quot;creativity&amp;quot; or &amp;quot;special needs&amp;quot;.&lt;/p&gt;
&lt;p&gt;The detail dimensions for a Camp might
include additional descriptions, photos from previous years, a list of things to
bring.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Django Managers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In Django, a Manager can
be used to simplify queries against the database.  In this case, each access
dimension may have a manager.  The camp schedule date dimension, for example,
should have a manager which uses the current date to filter only camps which are
scheduled to begin in the future.  This trivially filters past camps from web
queries, making the views and templates much simpler.&lt;/p&gt;
&lt;p&gt;Here's something that looks like it
might be a reasonable model.  This has only a single access dimension,
Schedule.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class CurrentCamp( models.Manager ):
    &amp;quot;&amp;quot;&amp;quot;Manager for currently scheduled camps only.&amp;quot;&amp;quot;&amp;quot;
    def imageScheduleList( self, aDate=None ):
        &amp;quot;&amp;quot;&amp;quot;Creates a nested-list structure of [ ( camp, image, ( sched, ... ) ), ... ]&amp;quot;&amp;quot;&amp;quot;
        now= aDate or datetime.date.today()
        campSchedList= []
        qs= super(CurrentCamp, self).get_query_set()
        qs= qs.filter( site=settings.SITE_ID )
        qs= qs.filter( schedule__startDate__gte=now )
        for c in qs.distinct():
            imgList= c.campimage_set.filter( startDate__lte=now, expireDate__gt=now )
            if imgList:
                img= random.choice( imgList )
            else:
                img= None
            sch= c.schedule_set.filter( startDate__gte=now )
            campSchedList.append( ( c, img, sch ) )
        return campSchedList
    def get_query_set(self):
        now= datetime.date.today()
        qs= super(CurrentCamp, self).get_query_set()
        qs= qs.filter( site=settings.SITE_ID )
        qs= qs.filter(schedule__startDate__gte=now )
        return qs.distinct()

class Camp( models.Model ):
    &amp;quot;&amp;quot;&amp;quot;A camping program.

    This is the generic description.  Only descriptions which have a schedule
    will be shown.  This allows you to have descriptions for programs that aren't
    scheduled in the current year.
    &amp;quot;&amp;quot;&amp;quot;
    site= models.ForeignKey( Site )
    name= models.CharField( maxlength=64 )
    description= models.TextField()
    staff= models.IntegerField( null=True )
    campers= models.IntegerField( null=True )
    duration= models.IntegerField( null=True, default=5, help_text='Days.' )
    objects = models.Manager() # default manager
    current= CurrentCamp() # currently scheduled camps only
    class Admin:
        list_display= ( 'name', 'site', 'duration', )
    def __str__( self ):
        return self.name
    def image( self, aDate ):
        img_set= self.campimage_set.filter( startDate__lte=aDate, expireDate__gt=aDate )
        if img_set:
            return random.choice( img_set )
    def __repr__( self ):
        return &amp;quot;Camp( name=%(name)r, description=%(description)r, \
staff=%(staff)r, campers=%(campers)r, duration=%(duration)r )&amp;quot; % ( self.__dict__ )

class Schedule( models.Model ):
    &amp;quot;&amp;quot;&amp;quot;A schedule for a Camping program.

    This is the actual schedule.  A camp which is scheduled in the future
    is shown to visitors.
    &amp;quot;&amp;quot;&amp;quot;
    camp= models.ForeignKey(Camp)
    startDate= models.DateField( help_text='Starting date for this camp' )
    class Admin:
        list_display= ( 'camp', 'startDate', )
    def __str__( self ):
        return &amp;quot;%s on %s&amp;quot; % ( self.camp, self.startDate.strftime( &amp;quot;%Y-%m-%d&amp;quot; ) )
    def __repr__( self ):
        return &amp;quot;Schedule( startDate=%(startDate)r )&amp;quot; % ( self.__dict__ )

class CampImage( models.Model ):
    &amp;quot;&amp;quot;&amp;quot;An image that decorates a specific camp listing.

    Any number of images can be associated with a given camp.
    However, one is selected arbitrarily to show with a camp entry.
    &amp;quot;&amp;quot;&amp;quot;
    camp= models.ForeignKey( Camp, edit_inline=True, )
    caption= models.CharField( maxlength=128, core=True, )
    startDate= models.DateField( help_text='First date to display this image' )
    expireDate= models.DateField( default=datetime.date(2099,12,31),
        help_text='Date on which this image is removed.', validator_list=[campValidators.checkExpireDate] )
    image= models.ImageField( upload_to=&amp;quot;photos/%Y%m&amp;quot; )
    class Admin:
        list_display= ('caption', 'camp', 'startDate', 'expireDate', )
    def __str__( self ):
        return &amp;quot;%s: %s ( %s to %s )&amp;quot; % ( self.camp.name, self.caption, self.startDate, self.expireDate )
    def __repr__( self ):
        return &amp;quot;CampImage( caption=%(caption)r, startDate=%(startDate)r, \
expireDate=%(expireDate)r, image=%(image)r )&amp;quot; % ( self.__dict__ )
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The URLs and Views.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We have two overall kinds of
templates and views.  We have the Core Concept detail view, which locates a
specific Core Concept and associated details; this uses a template that shows
all of the relevant details.  This detailed view could be located in several
places in the URL scheme because there may be several access dimensions that
lead us to the resulting Core
Concept.&lt;/p&gt;
&lt;p&gt;The other kind of templates
and views are the access dimensions.  Each access dimension defines one or more
list views, or menus.  When there are multiple dimensions, a menu may be used to
select which dimension is used for access.  Each dimension has URL's for
traversing the dimension, views for locating relevant rows in that dimension,
and a template for displaying the access dimension rows, and possibly Core
Concept rows.&lt;/p&gt;
&lt;p&gt;In our Camp example, we
only have one access dimension defined.  However, we have to define our URL's to
permit additional access dimensions.  Many Django examples imply that a single
dimension is somehow &amp;quot;primary&amp;quot; for accessing a Core Concept.  This is rarely
true, and a slightly different URL naming scheme makes it possible to add and
change access dimensions without breaking an application.&lt;/p&gt;
&lt;p&gt;Here's a portion of the URL
definitions.  Note that we use a &lt;tt class="docutils literal"&gt;/camp/byDate/11
URL to use the schedule access dimension.&amp;nbsp; We can then add &lt;span class="pre"&gt;``/camp/byAgeGroup/&lt;/span&gt;&lt;/tt&gt;
to implement another access dimension.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from django.conf.urls.defaults import *

urlpatterns = patterns('campministry.apps.public.views',

    # The stmt_page matches the PAGE_CHOICE in the models.
    # The title should match the menu provided in the template.

    (r'^$', 'index', {'stmt_page':'Home',} ),
    (r'^home.*$', 'index', {'stmt_page':'Home',} ),
    (r'^index.*$', 'index', {'stmt_page':'Home',} ),
    ... other stuff ...
    (r'^camp/byDate/$', 'campByDate', {'stmt_page':'Camps', 'title':'Summer Camps'} ),
    (r'^camp/(?P\d+)/$', 'camp', {'stmt_page':'Camps', 'title':'Summer Camps'} ),
)
&lt;/pre&gt;
&lt;p&gt;Here's a portion of the view
definitions.  We have a generic view function (indexView)
that provides the common information used by all Core Concept views.  The
&lt;tt class="docutils literal"&gt;campByDate&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;camp&lt;/tt&gt; views
expand on this view with either a list of Camps, based on one of the access
dimensions, or a specific Camp.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def indexView( request, stmt_page, title=None ):
    &amp;quot;&amp;quot;&amp;quot; Get Statements, Images and Profiles to fill this page.
    These items are Site-related.  The site qualifies Statements, Images and Profiles.
    &amp;quot;&amp;quot;&amp;quot;
    pageDict= baseView(request)
    pageDict['title'] = title or pageDict['site_name']

    now= today( request, pageDict )
    pageDict['stmt_list']= Statement.current.asof( now ).filter( page=stmt_page ).order_by('startDate')

    img_list = Image.current.asof( now ).filter( page=stmt_page )
    if img_list:
        pageDict['image'] = random.choice( img_list )

    pageDict['staff_list'] = Profile.activeProfile.filter( contact=True )
    return pageDict

def campByDate( request, stmt_page, title ):
    &amp;quot;&amp;quot;&amp;quot;List of Camps, organized by the schedule access dimension.&amp;quot;&amp;quot;&amp;quot;
    pageDict= indexView( request, stmt_page, title )
    now= today( request, pageDict )

    pageDict['camp_list']= Camp.current.imageScheduleList( now )
    return render_to_response('camp.html', pageDict )

def camp( request, object_id, stmt_page, title ):
    &amp;quot;&amp;quot;&amp;quot;A specific Camp.&amp;quot;&amp;quot;&amp;quot;
    pageDict= indexView( request, stmt_page, title )
    now= today( request, pageDict )

    pageDict['camp']= Camp.objects.get(pk=object_id)
    return render_to_response('camp.html', pageDict )
&lt;/pre&gt;
&lt;p&gt;The important value of the &lt;strong&gt;Web Mart&lt;/strong&gt;
design pattern is to prevent thinking of a single taxonomy of camps.  We can
organize the list of Camps by any of the available access dimensions.  In this
case, we've only defined Schedule, but the design pattern helps us recognize
that we are unlikely to have a single access dimension for a
&lt;strong&gt;Core Concept&lt;/strong&gt;.&lt;/p&gt;
</content><category term="News"></category><category term="web mart"></category><category term="Django"></category><category term="data model"></category></entry><entry><title>Dynamic Languages and Corporate IT's Objections</title><link href="https://slott56.github.io/2006_08_29-dynamic_languages_and_corporate_its_objections.html" rel="alternate"></link><published>2006-08-29T17:57:00-04:00</published><updated>2006-08-29T17:57:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-29:/2006_08_29-dynamic_languages_and_corporate_its_objections.html</id><summary type="html">&lt;p&gt;Since most of these new-fangled dynamic languages
are open-source, we have a a strange artificial barrier to considering the right
solution for our problems.  This barrier is &amp;quot;No Open Source&amp;quot; policy, usually
framed as &lt;strong&gt;We'll Use Open Source Over My Dead Body&lt;/strong&gt;™.  It has to be examined
carefully from several …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since most of these new-fangled dynamic languages
are open-source, we have a a strange artificial barrier to considering the right
solution for our problems.  This barrier is &amp;quot;No Open Source&amp;quot; policy, usually
framed as &lt;strong&gt;We'll Use Open Source Over My Dead Body&lt;/strong&gt;™.  It has to be examined
carefully from several points of view:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Most organizations already have considerable
open source software.  The &lt;a class="reference external" href="http://httpd.apache.org/"&gt;Apache server&lt;/a&gt; , for example, is probably the most
popular (and visible) piece of open-source IT software in use anywhere.  If you
mention things like &lt;a class="reference external" href="http://www.sendmail.org/"&gt;sendmail&lt;/a&gt; , you get back-talk that it's just
infrastructure and somehow infrastructure doesn't count.  Perhaps it's not
software, or doesn't support the enterprise.&lt;/li&gt;
&lt;li&gt;I've been asked about open source harboring
viruses or malware.  I responded that the other 9,999 users who downloaded it
would probably have reported a problem.  After all, we all have access to the
source.&lt;/li&gt;
&lt;li&gt;I've been warned about the &amp;quot;liability issue&amp;quot;
with open source software.  In short, the legal department doesn't know who to
sue.  What if our in-house software doesn't work?  Somehow that's different: our
in-house QA doesn't apply to source we got for
free?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we can get past the &amp;quot;dynamic languages are open source&amp;quot;, then we can move on to more interesting issues.&lt;/p&gt;
&lt;p&gt;Taft gets to the issues, eventually, when he lifts up two objections that have a little more substance.
Taft, however, ran out of words before getting to the real crux of these objections.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Imperative Programming is Dead&lt;/strong&gt;.  &amp;quot;Anders Hejlsberg, a Microsoft software
architect in Redmond, Wash., and father of C#, said the days are numbered for
imperative programming&amp;quot;.  As with other such pronouncements, this is premature.
After all, procedural programming persists in spite of object-oriented
programming.  Polemics aside, declarative programming has limited value, since
it depends on automatic optimizers.  Since automated proofs of correctness don't
exist in general, I'm &lt;a class="reference external" href="https://slott56.github.io/2006_03_01-c_microsoft_and_hegemony.html"&gt;suspicious&lt;/a&gt;  that there are pretty severe limits
on optimizations that can be successfully applied to support declarative
programming.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Languages Don't Scale&lt;/strong&gt;.  &amp;quot;Cedric Beust, an engineer at Google,
in Mountain View, Calif., said, &amp;quot;Dynamic languages suffer from some inherent
limitations that make them inadequate for 'large software.'&amp;quot;  There are two
issues here: performance and error prevention.  Both of these issues lead us to
some interesting conclusions, and some appropriate uses for dynamic
languages.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="dynamic-languages-don-t-perform-well"&gt;
&lt;h2&gt;Dynamic Languages Don't Perform Well&lt;/h2&gt;
&lt;p&gt;This is a straw-man argument; it misses the point by attacking something irrelevant.
Yes, dynamic languages are not optimized as well by the compiler as dynamic languages.&lt;/p&gt;
&lt;p&gt;However, the point is to
leverage this, and partition the architecture into the stable bits, and the
flexible bits.  I can see a spectrum of &lt;a class="reference external" href="https://slott56.github.io/2005_09_18-essay_14_mutability_analysis.html"&gt;mutability&lt;/a&gt;  based on the nature of the
requirements.  For relatively immutable requirements, use a static language,
compile the heck out of it, and get it optimized so that it runs really fast.
For the poorly-defined or inherently flexible requirements, use a dynamic
language.  Expect change, and implement it
appropriately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-languages-don-t-prevent-enough-errors"&gt;
&lt;h2&gt;Dynamic Languages Don't Prevent Enough Errors&lt;/h2&gt;
&lt;p&gt;I'm not completely sold on
the value of static type checking in languages like Java, C, C++ (and Ada for
that matter).  Here's what I observe: a programmer who has a vague notion that a
variable has a numeric type, but can't identify the correct numeric subtype; he
spends hours doing an empirical survey of all numeric types to see which one
will compile.&lt;/p&gt;
&lt;p&gt;This isn't &lt;em&gt;design&lt;/em&gt; in the usual sense of the word.  The software will have the first numeric type
which compiled, right, wrong or indifferent.  We don't know if that's the right
type, or merely an acceptable supertype of the right type.  Static type checking
hasn't really prevented the eventual error from occurring.&lt;/p&gt;
&lt;p&gt;Another scenario, less common, but more problematic, is the
&lt;strong&gt;Type-Hierarchy-Meta-Framework Most General Declaration&lt;/strong&gt;™ where we have created a
hierarchy of interfaces, abstract superclasses, and other declarative malarky to
try and unify two relatively dissimilar things into a common structure.  Perhaps
they should have used a &lt;strong&gt;Façade&lt;/strong&gt; design, but instead they aimed for a too-complex static type
declaration.&lt;/p&gt;
&lt;p&gt;This is a case of too much
design, rather than too little.  However, static type checking has introduced
problems rather than solved them.&lt;/p&gt;
&lt;p&gt;Just to beat this topic to death, our SQL data bindings are always dynamic.  After
all, there's no strong relationship between our statically compiled Java
application and our relational database.  The Java type checking, while
internally consistent, doesn't have to match the database.  Indeed, seemingly
innocuous DB changes can lead to type compatibility problems and run-time
crashes in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-dynamic-languages"&gt;
&lt;h2&gt;Introducing Dynamic Languages&lt;/h2&gt;
&lt;p&gt;I think the upshot of Taft's article is the following pieces of advice:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduce a dynamic language in a way
that plays to its strength: flexibility.  Handle scalability by partitioning the
design into static and dynamic elements.&lt;/li&gt;
&lt;li&gt;Introduce a dynamic language where fussy
type-checking isn't helping the programmer.  If they need some kind of number, a
dynamic language will handle this gracefully, without the breakage associated
with picking the wrong type.&lt;/li&gt;
&lt;li&gt;Introduce a dynamic language where
engineering a very general framework would help, but would be expensive and
complex.  A simpler, dynamic-language framework can cover all of the bases, and
glue static programming components together nicely.  After all, we've had the
shell forever, and it is just rubbish dynamic programming with rotten data
abstractions and cruddy syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think the most important thing we can do is to look at a dynamic language as the
shell on steroids.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="dynamic language"></category><category term="scripting systems"></category><category term="Enterprise IT"></category></entry><entry><title>Deprecating Dynamic Languages (or Scripting Systems)</title><link href="https://slott56.github.io/2006_08_23-deprecating_dynamic_languages_or_scripting_systems.html" rel="alternate"></link><published>2006-08-23T11:05:00-04:00</published><updated>2006-08-23T11:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-23:/2006_08_23-deprecating_dynamic_languages_or_scripting_systems.html</id><summary type="html">&lt;p&gt;Holub discards the currently popular dynamic languages with a scathing comment:&lt;/p&gt;
&lt;p&gt;&amp;quot;And not scripting
systems (I’m reluctant to call them languages) like PHP and Ruby, which
are too Wild West to be trustworthy. No language that moves compile-time bugs
into runtime is worth your time if you consider reliability …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Holub discards the currently popular dynamic languages with a scathing comment:&lt;/p&gt;
&lt;p&gt;&amp;quot;And not scripting
systems (I’m reluctant to call them languages) like PHP and Ruby, which
are too Wild West to be trustworthy. No language that moves compile-time bugs
into runtime is worth your time if you consider reliability to be important; I
don’t care how fast its adherents allege you can throw together a program.
You don’t measure productivity improvements solely by looking at a
reduction in the lines-of-code-written-per-day numbers, even if these statistics
are trustworthy.&amp;quot;&lt;/p&gt;
&lt;p&gt;Scathing.&lt;/p&gt;
&lt;p&gt;Besides failing to mention Python, he misses two important points:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Language #3 on the &lt;a class="reference external" href="http://www.tiobe.com/tpci.htm"&gt;TPCI&lt;/a&gt;   is
Visual Basic.  He quotes the description of &lt;a class="reference external" href="http://scala.epfl.ch/docu/"&gt;Scala&lt;/a&gt;  (so
similar to Java that it runs in the JVM), which provides some hint as to Holub's
standards for a good language (e.g., type-safe, object-oriented, algebraic data
types).  VB has almost none of these features, yet, it continues to grow in
popularity.  As a &lt;strong&gt;Next Big Thing&lt;/strong&gt; , that's a horrifying situation.  What
about VB?  I guess, since this is Java Watch, we just ignore it as long as Java
is language #1.&lt;/li&gt;
&lt;li&gt;Languages #5, 6, 7, and 10 are dynamic
languages (PHP, Perl, Python and Javascript).  In aggregate, dynamic languages
add up to a pool of languages as popular as Java.  Perhaps Holub's missed
something interesting about dynamic languages.&lt;/li&gt;
&lt;li&gt;What's the real clincher here?  If dynamic languages are
&amp;quot;too Wild West to be trustworthy&amp;quot; why are they so popular?&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="misconceptions"&gt;
&lt;h2&gt;Misconceptions&lt;/h2&gt;
&lt;p&gt;Dynamic languages aren't about the &amp;quot;lines-of-code-written-per-day numbers&amp;quot;.  They're
about the lines-of-code-written-to-do-something-useful numbers.  I find non-OO
programming tedious because &lt;em&gt;everything&lt;/em&gt; is long-winded.  I find type-safe OO programming to be far better, but some
things can get still get long-winded.  To be properly type-safe, portable,
generic and explicit in Java means -- sometimes -- a lot of code which doesn't
really do very much.  A lot of the Java framework elements lead to programs
which seem more complex than they
are.&lt;/p&gt;
&lt;p&gt;The reliability issue isn't &lt;em&gt;necessarily&lt;/em&gt;
true about dynamic programming.  Yes, a shoddy dynamic program will die at
run-time with a brain-dead error that should have been found via an inspection
or a good unit test.  But, &lt;a class="reference external" href="http://jroller.com/page/cpurdy"&gt;/dev/null&lt;/a&gt; 's post, &lt;a class="reference external" href="http://jroller.com/page/cpurdy?entry=and_the_braindead_award_goes"&gt;And the Braindead Award goes to...&lt;/a&gt;  shows that
even type-safe, compiled languages can harbor hard-to-locate bugs.  Indeed,
having spent the last decade helping people do Java programming, I've seen a lot
of bad design written into both the code and the unit tests.  Bad design that
wouldn't be found until run-time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-value-proposition"&gt;
&lt;h2&gt;A Value Proposition&lt;/h2&gt;
&lt;p&gt;What makes dynamic
languages so popular?  Clearly, they fill a need.  I think that the need is
&lt;a class="reference external" href="https://slott56.github.io/2005_09_18-essay_14_mutability_analysis.html"&gt;mutability&lt;/a&gt; .
I don't think it's effective to package everything into static, compiled, type-safe Java applications.
Some things require more flexibility.  We can use shell scripts, or XML-configuration
files of Ant class definitions, but we need last-minute, fine-tuning, flexibility.&lt;/p&gt;
&lt;p&gt;Flexibility is something
we can try to build into our software.  But sadly, our users are far more clever
(or devious) than we are and will push right past the envelope.  Every executive
that cuts a sweetheart deal with a preferred customer or vendor may be breaking
our application software with her handshake on the 18th green at her
country-club.  Since the software will be broken by business policy changes, we
can either plan for change -- and use a scripting language -- or fight against
the change.  Claiming that it will take months to rewrite the application is --
in effect -- fighting against the change.&lt;/p&gt;
&lt;p&gt;When it comes to application
software changes, the users hold the trump cards: Excel and Access.  If you
can't build it in Java RIGHT NOW, they will build some non-sensical manual
procedure with desktop tools.  When you're ready to build it in Java, they've
implemented a Byzantine process and trained the rest of the department; now they
demand that your application implement their bizarre behavior.&lt;/p&gt;
&lt;p&gt;I prefer to embrace dynamic
languages, give them a place at the table, and control their use very closely.
That way, I don't have to fight change, but can be the agent of change.&lt;/p&gt;
&lt;/div&gt;
</content><category term="News"></category><category term="dynamic language"></category><category term="scripting systems"></category></entry><entry><title>Apple and Flexibility</title><link href="https://slott56.github.io/2006_08_07-apple_and_flexibility.html" rel="alternate"></link><published>2006-08-07T23:21:00-04:00</published><updated>2006-08-07T23:21:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2006-08-07:/2006_08_07-apple_and_flexibility.html</id><summary type="html">&lt;p&gt;&amp;quot;But Apple, stubbornly hanging on to its need to
control the user experience, creates meshed hardware and software systems that
deprive businesses of the flexibility to find the best balance of hardware,
operating system and applications for the job at
hand.&amp;quot;&lt;/p&gt;
&lt;p&gt;Good point, but only half the
story.&lt;/p&gt;
&lt;p&gt;Apple needs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;But Apple, stubbornly hanging on to its need to
control the user experience, creates meshed hardware and software systems that
deprive businesses of the flexibility to find the best balance of hardware,
operating system and applications for the job at
hand.&amp;quot;&lt;/p&gt;
&lt;p&gt;Good point, but only half the
story.&lt;/p&gt;
&lt;p&gt;Apple needs to control the I/O
drivers as much as they need to control the user interface.  One giant headache
in MS world is hardware; specifically, drivers and integration.  Apple doesn't
have this problem because almost everything is
&lt;em&gt;truly&lt;/em&gt;
plug and play.  No drivers that I have to deal with; no funny
business.&lt;/p&gt;
&lt;p&gt;I just configured my
daughter's brand-new MacBook, and hooked it up to the household Epson R340 with
about 3 clicks in the Print &amp;amp;amp; Fax control panel.  No drivers that I needed
to see.  Clearly, there are printer-specific drivers buried somewhere in OSX.
But I never saw them or any trace of
them.&lt;/p&gt;
&lt;p&gt;&amp;quot;After all these years, is there
finally hope for Apple in the enterprise?&amp;quot;  Actually, Apple's version of
&amp;quot;Enterprise&amp;quot; has numerous advantages.  The level of Apple-supported integrations
means less integration and support by end-users and their IT departments.  Yes,
Apple products are more expensive, but this is only an up-front cost.  If the
TCO is going to be lower, so it is ideal for the
enterprise.&lt;/p&gt;
&lt;p&gt;I find the notion that
Apple is depriving &amp;quot;businesses of the flexibility to find the best balance of
hardware, operating system and applications for the job at hand&amp;quot; a little off
the mark.  In many cases, an enterprise has little or no useful concept of
balancing hardware, OS and application.  Many companies have default purchasing
arrangements like Dell-Windows-Oracle, or IBM-IBM-IBM.  Flexibility isn't
helpful in these cases.&lt;/p&gt;
&lt;p&gt;Indeed, the
only time Apple's offerings aren't ideal for the enterprise is when we have the
silly &lt;strong&gt;Tomorrow's Dollars Don't Exist&lt;/strong&gt; ™ conversation.  That's the
conversation where the manager says the up-front cost is the only thing that
matters, and long-term support costs aren't relevant.  After all, long-term
support is paid for in tomorrow's dollars, and we all know that tomorrow may
never come.&lt;/p&gt;
</content><category term="News"></category><category term="apple"></category><category term="flexibility"></category></entry><entry><title>Chat Bots, Poker Rooms, Who's really Human?</title><link href="https://slott56.github.io/2005_09_20-chat_bots_poker_rooms_whos_really_human.html" rel="alternate"></link><published>2005-09-20T10:42:00-04:00</published><updated>2005-09-20T10:42:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2005-09-20:/2005_09_20-chat_bots_poker_rooms_whos_really_human.html</id><summary type="html">&lt;p&gt;This year's Turing award for human-like Chat Bot
announced on the BBC.  [&lt;a class="reference external" href="http://news.bbc.co.uk/2/hi/technology/4263278.stm"&gt;article&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.boingboing.net/2005/09/01/videopoker_bots_coll.html"&gt;Boing Boing&lt;/a&gt; has already noted the Wired article &lt;a class="reference external" href="http://www.wired.com/wired/archive/13.09/pokerbots.html"&gt;pokerbots&lt;/a&gt; on bot's in on-line poker
rooms.&lt;/p&gt;
&lt;p&gt;I tried posing as a bot in an
experiment and failed miserably.  I hesitated too long on dumb postings and
responded right …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This year's Turing award for human-like Chat Bot
announced on the BBC.  [&lt;a class="reference external" href="http://news.bbc.co.uk/2/hi/technology/4263278.stm"&gt;article&lt;/a&gt; ]&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.boingboing.net/2005/09/01/videopoker_bots_coll.html"&gt;Boing Boing&lt;/a&gt; has already noted the Wired article &lt;a class="reference external" href="http://www.wired.com/wired/archive/13.09/pokerbots.html"&gt;pokerbots&lt;/a&gt; on bot's in on-line poker
rooms.&lt;/p&gt;
&lt;p&gt;I tried posing as a bot in an
experiment and failed miserably.  I hesitated too long on dumb postings and
responded right away to relatively complex postings.  The actual AI researcher
tried to throw folks off the scent by asking how the random delay was working,
but I couldn't stay in character very well.  It took us quite a while to out the
real bot because (a) it was pretty good and (b) it's personality was &amp;quot;lurker&amp;quot; so
it responded rarely, and then only to specific kinds of
things.&lt;/p&gt;
</content><category term="News"></category><category term="chatbots"></category><category term="AI"></category></entry></feed>