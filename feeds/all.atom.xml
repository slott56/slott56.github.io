<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>S.Lott -- Software Architect</title><link href="https://slott56.github.io/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>https://slott56.github.io/</id><updated>2025-10-17T13:08:00-04:00</updated><entry><title>A get_object_size() Function -- Again</title><link href="https://slott56.github.io/2025-10-17-get_object_size_function_again.html" rel="alternate"></link><published>2025-10-17T13:08:00-04:00</published><updated>2025-10-17T13:08:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-10-17:/2025-10-17-get_object_size_function_again.html</id><summary type="html">&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;You rarely need this.
Python handles memory management for you.
Except in an edge case where you have a &lt;strong&gt;lot&lt;/strong&gt; of objects to work with.&lt;/p&gt;
&lt;p&gt;How many is a lot?  Enough that your app crashes with &lt;tt class="docutils literal"&gt;MemoryError&lt;/tt&gt; exception.
Or, is consuming so much memory other processes have trouble working …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;You rarely need this.
Python handles memory management for you.
Except in an edge case where you have a &lt;strong&gt;lot&lt;/strong&gt; of objects to work with.&lt;/p&gt;
&lt;p&gt;How many is a lot?  Enough that your app crashes with &lt;tt class="docutils literal"&gt;MemoryError&lt;/tt&gt; exception.
Or, is consuming so much memory other processes have trouble working.
Or, it's slow because of all the garbage collection going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2025-10-16-get_object_size_function.html"&gt;A get_object_size() function&lt;/a&gt;. This shows a totally non-recursive and not-too-smart approach.&lt;/p&gt;
&lt;p&gt;The previous example avoids recursion.
This is not &lt;em&gt;really&lt;/em&gt; helpful.
While structures can be very large, they are rarely deeply nested.
The ordinary Python stack limit would prevent us from walking a structure with over 1,000 layers of nesting.
Even creating a test case is a pain in the neck.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-did"&gt;
&lt;h2&gt;What I Did&lt;/h2&gt;
&lt;p&gt;This function computes the total size of just about anything.
This includes all the built-in collections.
It also includes &amp;quot;custom classes&amp;quot;, both the &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; and the non-&lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; variants.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections.abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textwrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shorten&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    For built-in collections, the size is clear.&lt;/span&gt;
&lt;span class="sd"&gt;    For classes, however, it&amp;#39;s a hair more complicated.&lt;/span&gt;

&lt;span class="sd"&gt;    See https://code.activestate.com/recipes/577504-compute-memory-footprint-of-an-object-and-its-cont/&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;default_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;8x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;shorten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_size&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                    &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mapping&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;obj_dict&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
                    &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;obj_slot&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__slots__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;obj_slot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__slots__&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;skipping &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="n"&gt;sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;component_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This variant walks an entire structure recursively.
It creates iterable generators with size details.&lt;/p&gt;
&lt;p&gt;You won't often need this.
But. I've posted it here so I won't lose it.&lt;/p&gt;
&lt;p&gt;And. Because the first version was based on a few faulty assumptions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="python"></category><category term="oo"></category><category term="oodesign"></category></entry><entry><title>A get_object_size() Function [Updated]</title><link href="https://slott56.github.io/2025-10-16-get_object_size_function.html" rel="alternate"></link><published>2025-10-16T13:08:00-04:00</published><updated>2025-10-16T13:08:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-10-16:/2025-10-16-get_object_size_function.html</id><summary type="html">&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;You rarely need this.
Python handles memory management for you.
Except in an edge case where you have a &lt;strong&gt;lot&lt;/strong&gt; of objects to work with.&lt;/p&gt;
&lt;p&gt;How many is a lot?  Enough that your app crashes with &lt;tt class="docutils literal"&gt;MemoryError&lt;/tt&gt; exception.
Or, is consuming so much memory other processes have trouble working …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;You rarely need this.
Python handles memory management for you.
Except in an edge case where you have a &lt;strong&gt;lot&lt;/strong&gt; of objects to work with.&lt;/p&gt;
&lt;p&gt;How many is a lot?  Enough that your app crashes with &lt;tt class="docutils literal"&gt;MemoryError&lt;/tt&gt; exception.
Or, is consuming so much memory other processes have trouble working.
Or, it's slow because of all the garbage collection going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;One of the significant benefits of using Python is memory management.
Python creates and disposes of objects as needed, without a lot of complicated-looking code.
The reference counting often works flawlessly.&lt;/p&gt;
&lt;p&gt;Often.&lt;/p&gt;
&lt;p&gt;Sometimes there are circular references, and objects can't (trivially) be collected.
Object A refers to object B and (sadly) object B &lt;em&gt;also&lt;/em&gt; refers to object A.
They both have non-zero reference counts.&lt;/p&gt;
&lt;p&gt;Weak references can sort this out, preventing a core leak that leads to unreliable software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case"&gt;
&lt;h2&gt;Use Case&lt;/h2&gt;
&lt;p&gt;Python has a way to reduce the size of objects.
It alters a few minor details of how an object works, but is generally transparent.&lt;/p&gt;
&lt;p&gt;This is an example of a rare case where you are doing memory management in Python.&lt;/p&gt;
&lt;p&gt;You can use the &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; feature of a class to name the attributes that are present,
and prevent the creation of the usual &lt;tt class="docutils literal"&gt;__dict__&lt;/tt&gt; structure to hold the attributes.&lt;/p&gt;
&lt;p&gt;When playing with this, it's often easiest to use the &lt;tt class="docutils literal"&gt;&amp;#64;dataclass(slots=True)&lt;/tt&gt; decorator apply this to a class.&lt;/p&gt;
&lt;p&gt;This will save memory.&lt;/p&gt;
&lt;p&gt;How much memory?&lt;/p&gt;
&lt;p&gt;It's hard to say, because you need to know the &amp;quot;without &lt;tt class="docutils literal"&gt;slots=True&lt;/tt&gt;&amp;quot; and &amp;quot;with &lt;tt class="docutils literal"&gt;slots=True&lt;/tt&gt;&amp;quot; sizes.
Generally, &lt;tt class="docutils literal"&gt;slots=True&lt;/tt&gt; will be smaller.
If you've chosen the right class to shrink, you may find improved performance, also.&lt;/p&gt;
&lt;p&gt;To determine the savings, we need to know the actual size of the collection of objects that are crushing the life out of our application and leading to &lt;tt class="docutils literal"&gt;MemoryError&lt;/tt&gt; exceptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-object-size-problem"&gt;
&lt;h2&gt;The Object Size Problem&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;sys&lt;/tt&gt; module has a function, &lt;tt class="docutils literal"&gt;sys.getsizeof()&lt;/tt&gt;, that will provide the size of an object.&lt;/p&gt;
&lt;p&gt;This is the object &lt;strong&gt;in isolation&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p class="last"&gt;&lt;tt class="docutils literal"&gt;sys.getsizeof()&lt;/tt&gt; doesn't include contained objects&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;What does it matter of it doesn't include contained objects?&lt;/p&gt;
&lt;p&gt;Consider a &lt;tt class="docutils literal"&gt;list[int]&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; small_list = list(range(10))
&amp;gt;&amp;gt;&amp;gt; large_list = list(range(10_000))
&amp;gt;&amp;gt;&amp;gt; sys.getsizeof(small_list)
136
&amp;gt;&amp;gt;&amp;gt; sys.getsizeof(large_list)
80056
&lt;/pre&gt;
&lt;p&gt;Okay. Superficially, it seems like each integer in the small list takes up about 13 bytes.&lt;/p&gt;
&lt;p&gt;Weirdly, each integer in the large list seems to take about 8 bytes.&lt;/p&gt;
&lt;p&gt;This can't be right.&lt;/p&gt;
&lt;p&gt;Consider an &lt;tt class="docutils literal"&gt;int&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sys.getsizeof(42)
28
&lt;/pre&gt;
&lt;p&gt;Okay.
That's really, really weird.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;list[int]&lt;/tt&gt; size is the size of the &lt;tt class="docutils literal"&gt;list&lt;/tt&gt; object.
It doesn't include the 10 (or 10,000) &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; objects that are members of the list.&lt;/p&gt;
&lt;p&gt;Total memory for the short list, then is &lt;span class="math"&gt;\(136 + 10 \times 28 = 416\)&lt;/span&gt;.
Total memory for the large list would be &lt;span class="math"&gt;\(80,\!056 + 10,\!000 \times 28 = 360,\!056\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-documentation-says"&gt;
&lt;h2&gt;The Documentation Says&lt;/h2&gt;
&lt;p&gt;Check the documentation for &lt;tt class="docutils literal"&gt;sys.getsizeof()&lt;/tt&gt;. You'll see this.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;See &lt;a class="reference external" href="https://code.activestate.com/recipes/577504-compute-memory-footprint-of-an-object-and-its-cont/"&gt;recursive sizeof recipe&lt;/a&gt; for an example of using getsizeof() recursively to find the size of containers and all their contents.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;The documentation doesn't say &amp;quot;And read all the comments and integrate all those ideas into one function.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-did"&gt;
&lt;h2&gt;What I Did&lt;/h2&gt;
&lt;p&gt;This function computes the total size of just about anything.
This includes all the built-in collections.
It also includes &amp;quot;custom classes&amp;quot;, both the &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; and the non-&lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; variants.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections.abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textwrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;shorten&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    For built-in collections, the size is clear.&lt;/span&gt;
&lt;span class="sd"&gt;    For classes, however, it&amp;#39;s a hair more complicated.&lt;/span&gt;

&lt;span class="sd"&gt;    See https://code.activestate.com/recipes/577504-compute-memory-footprint-of-an-object-and-its-cont/&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;default_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;8x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;shorten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__slots__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__slots__&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this walks an entire structure without &lt;em&gt;actually&lt;/em&gt; being recursive.
If you've got a complicated application, and a &lt;strong&gt;very&lt;/strong&gt; deeply-nested data structure,
the overhead of a lot of stack frames may be unmanageable.&lt;/p&gt;
&lt;p&gt;(There are other optimization approaches to this problem.)&lt;/p&gt;
&lt;p&gt;This assumes that a collection &lt;strong&gt;always&lt;/strong&gt; contains heterogeneous types.
This means computing the size of each item in the list.&lt;/p&gt;
&lt;p&gt;This uses a big &lt;tt class="docutils literal"&gt;deque&lt;/tt&gt;, which can involve impossible overhead, also.&lt;/p&gt;
&lt;p&gt;In some cases, you may need to create a more complicated special-purpose benchmark app that builds your big data structure using your distinct storage alternatives.
Use your special benchmark test-bed to uncover the implementation that meets all the criteria for storage use and CPU time.&lt;/p&gt;
&lt;p&gt;The data that is used for the benchmark would need to reflect real-world data with respect to string lengths, and collection sizes.
Creating synthetic data for an object size benchmark can be a challenge.
See &lt;a class="reference external" href="https://slott56.github.io/2024-06-29-synthetic_data.html"&gt;Synthetic Data&lt;/a&gt;.
And, also see &lt;a class="reference external" href="https://slott56.github.io/2024-07-25-synthetic_data_tool.html"&gt;Synthetic Data Tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You won't often need this.
But. I've posted it here so I won't lose it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="todo"&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;Handle &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; types, also.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Python"></category><category term="python"></category><category term="oo"></category><category term="oodesign"></category></entry><entry><title>OO Design Principles: GRASP patterns</title><link href="https://slott56.github.io/2025-10-04-oo_design_principles_grasp_patterns.html" rel="alternate"></link><published>2025-10-04T09:46:00-04:00</published><updated>2025-10-04T09:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-10-04:/2025-10-04-oo_design_principles_grasp_patterns.html</id><summary type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Working with Liskov Substitution can make it difficult to navigate through an IDE.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;The GRASP patterns can be helpful reminders.&lt;/p&gt;
&lt;p&gt;Some GRASP patterns sound like design principles, and seem to overlap with the SOLID principles.&lt;/p&gt;
&lt;p&gt;Other GRASP patterns seem like summaries, with a number of fine-grained implementation choices.&lt;/p&gt;
&lt;p&gt;Controller and Pure Fabrication seem most helpful.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Gang of Four&amp;quot; Object-Oriented Design Patterns seem to be more useful and have more supporting details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="grasp-patterns"&gt;
&lt;h2&gt;GRASP Patterns&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.geeksforgeeks.org/system-design/grasp-design-principles-in-ooad/"&gt;https://www.geeksforgeeks.org/system-design/grasp-design-principles-in-ooad/&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="controller"&gt;
&lt;h3&gt;Controller&lt;/h3&gt;
&lt;p&gt;See also the &amp;quot;Model-View-Control&amp;quot; pattern.&lt;/p&gt;
&lt;p&gt;There's an internal model of reality. A description of the real-world stuff.
Maybe this is simply CRUD rules over a database (as if a database is reality -- it's only a model.)
Maybe this is an OO model that gets serialized into something persistent when the application exits (you know, like a word processor or spreadsheet.)
Maybe this is an OO model of a game where there's a state-of-play saved when you specifically ask to save.
Maybe this is a real-time controller of a device like a cruise control on a car where the model has the car's current speed and the target speed (and not much else, TBH.)
Maybe this is an anchoring position indicator with a position where the boat is expected to be and the most recent few minutes of GPS positions indicating if it's within a safe distance of the anchor or not and what direction the boat seems to be going (i.e., it is adrift?)&lt;/p&gt;
&lt;p&gt;There's a view of reality, displaying the state of the model.
You fiddle with the view to update the model.
Maybe look at the number on the dashboard or push buttons on the cruise control.
Maybe type a bunch of stuff into fields on a form.&lt;/p&gt;
&lt;p&gt;And there's the controller.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;The controller is defined as the first object beyond the UI layer that receives and coordinates (&amp;quot;controls&amp;quot;) a system operation. &amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This applies widely.
In some applications -- programs like &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; -- the UI is really tiny and not interactive.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The input is command-line parsing (via &lt;tt class="docutils literal"&gt;argparse&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;click&lt;/tt&gt; or whatever).&lt;/li&gt;
&lt;li&gt;The output is stdout and stderr (via &lt;tt class="docutils literal"&gt;logging&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; or whatever).&lt;/li&gt;
&lt;li&gt;There's a model (the file being processed, the text in that file, the patterns and commands).&lt;/li&gt;
&lt;li&gt;There's a &lt;strong&gt;tiny&lt;/strong&gt; controller that gets the input, then iterates through the model's visible state changes, writing the outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is one essence of &lt;strong&gt;Clean Design&lt;/strong&gt;. Separating the inputs and outputs from the model and control.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creator"&gt;
&lt;h3&gt;Creator&lt;/h3&gt;
&lt;p&gt;There's potential overlap between Creator and &lt;a class="reference internal" href="#information-expert"&gt;Information Expert&lt;/a&gt;.
Creators have the information required to create an instance of a collaborator.
Which sometimes means the creator is also an expert.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="indirection"&gt;
&lt;h3&gt;Indirection&lt;/h3&gt;
&lt;p&gt;Sometimes helpful. The Gang-of-Four design patterns subdivide this many ways.
You might have an Adapter or Facade to wrap one (or more) collaborators.
You might have a State or Strategy class hierarchy that wraps up alternative implementation choices into a tidy structure.&lt;/p&gt;
&lt;p&gt;Note there are two layers of indirection.
Objects can have indirect access to other objects, perhaps mediated by the current state.
Classes &lt;strong&gt;should&lt;/strong&gt; have indirect access to other class definitions, per the SOLID &lt;strong&gt;Dependency Inversion Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="information-expert"&gt;
&lt;h3&gt;Information Expert&lt;/h3&gt;
&lt;p&gt;The SOLID &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;, restated. Nice to see everyone agrees on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="low-coupling"&gt;
&lt;h3&gt;Low Coupling&lt;/h3&gt;
&lt;p&gt;This is a desirable feature of object design.
This is more of a principle that echoes the SOLID &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="high-cohesion"&gt;
&lt;h3&gt;High Cohesion&lt;/h3&gt;
&lt;p&gt;This is also a very desirable feature of object design.
This isn't (explicitly) a SOLID design principle, but lurks in she shadows of the SOLID &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;.
In order to have a single Responsibility, there must be a cohesive design to the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="polymorphism"&gt;
&lt;h3&gt;Polymorphism&lt;/h3&gt;
&lt;p&gt;This is a mechanism as well as a &lt;strong&gt;large&lt;/strong&gt; number of patterns.
The mechanism is a way to reuse code in a class hierarchy.
It saves repeating things when we have related classes.&lt;/p&gt;
&lt;p&gt;The reason why we have a SOLID &lt;strong&gt;Liskov Substitution Principle&lt;/strong&gt; is to manage polymorphism.&lt;/p&gt;
&lt;p&gt;The entire Gang-of-Four design patterns book is an extended set of patterns for applying polymorphism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protected-variations"&gt;
&lt;h3&gt;Protected Variations&lt;/h3&gt;
&lt;p&gt;This is a restatement of the SOLID &lt;strong&gt;Open/Closed Principle&lt;/strong&gt;.
Open to extension (via variations.)
Closed to modification (the &amp;quot;protected&amp;quot; part of this.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pure-fabrication"&gt;
&lt;h3&gt;Pure Fabrication&lt;/h3&gt;
&lt;p&gt;I often call these fabricated classes part of the &amp;quot;Solution Domain&amp;quot; distinct from the &amp;quot;Problem Domain.&amp;quot;&lt;/p&gt;
&lt;p&gt;The model is part of the Problem Domain.
It represents the real-world things in software space.
This should map to the problem domain with a high degree of fidelity.&lt;/p&gt;
&lt;p&gt;The view presents this to users.
It's part of the UI, which is part of the solution.
It can overlap with the problem domain, however, and may happen to match the model.
A CRUD application, for example, may display the data more-or-less directly and the view may match the model.&lt;/p&gt;
&lt;p&gt;In some cases, the view twists and transforms the model into what people think they want to see.
Think of the aggregated data in a data warehouse.
Details are elided. It's a summary -- it's not the reality.
A great deal of twisting and turning happens during ETL and aggregation processing to provide a view the users can understand and act on.&lt;/p&gt;
&lt;p&gt;A controller, however, has nothing to do with the problem domain.
It's &lt;em&gt;purely&lt;/em&gt; part of the solution domain.
It reflects the purpose behind the software -- show status, update things, allow interaction, summarize, whatever.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The GRASP patterns can be helpful reminders of different kinds of solutions.&lt;/p&gt;
&lt;p&gt;They overlap with -- and can provide some amplification for -- the SOLID design patterns.&lt;/p&gt;
&lt;p&gt;The Pure Fabrication and Controller GRASP patterns seem to be more significant than the others.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="python"></category><category term="oo"></category><category term="oodesign"></category><category term="design principles"></category><category term="grasp"></category><category term="patterns"></category></entry><entry><title>OO Design Principles: CUPID</title><link href="https://slott56.github.io/2025-10-03-oo_design_principles_cupid.html" rel="alternate"></link><published>2025-10-03T09:46:00-04:00</published><updated>2025-10-03T09:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-10-03:/2025-10-03-oo_design_principles_cupid.html</id><summary type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Working with Liskov Substitution can make it difficult to navigate through an IDE.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Very important: Composable, Predictable, Domain-based.&lt;/p&gt;
&lt;p&gt;These are consistent with the idea that software is knowledge capture.&lt;/p&gt;
&lt;p&gt;Maybe less important: Unix-Philosophy and Idiomatic.
While nice ideas, they feel a bit redundant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cupid"&gt;
&lt;h2&gt;CUPID&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://cupid.dev/properties/"&gt;https://cupid.dev/properties/&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="composable"&gt;
&lt;h3&gt;Composable&lt;/h3&gt;
&lt;p&gt;Highly desirable to have small pieces that compose into something useful.
This fits with SOLID &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;, and provides an answer to &amp;quot;but, why?&amp;quot;
We segregate the interfaces to create something composable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unix-philosophy"&gt;
&lt;h3&gt;Unix-Philosophy&lt;/h3&gt;
&lt;p&gt;This &lt;strong&gt;also&lt;/strong&gt; implies composability.
It goes a step further to incorporate the idea of the SOLID Single Responsibility Principle.
The Unix design patterns provides concrete examples of how to decompose a large problem into smaller pieces;
each piece does one thing well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="predictable"&gt;
&lt;h3&gt;Predictable&lt;/h3&gt;
&lt;p&gt;This decomposes into three distinct aspects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A component behaves as expected. This is sometimes called the Principle of Least Astonishment.&lt;/li&gt;
&lt;li&gt;A component's behavior is consistent and deterministic.&lt;/li&gt;
&lt;li&gt;A component's behavior needs to be observable, also.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all critical features, especially observability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="idiomatic"&gt;
&lt;h3&gt;Idiomatic&lt;/h3&gt;
&lt;p&gt;Yes, follow language idioms. Please do not boldly go where no programmer has gone before.&lt;/p&gt;
&lt;p&gt;This seems to go without saying. It does help fill up the acronym, though.
And, perhaps, it's necessary advice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="domain-based"&gt;
&lt;h3&gt;Domain-based&lt;/h3&gt;
&lt;p&gt;The solution code should mirror the problem domain. This is really important, and not present in other sets of design principles.&lt;/p&gt;
&lt;p&gt;Indeed, I don't think it can be emphasized enough.&lt;/p&gt;
&lt;p&gt;OO modeling and design isn't about optimization or code reuse.
It's about fidelity to the problem domain.&lt;/p&gt;
&lt;p&gt;Code reuse is nice to have.
Providing common behavior among the problem domain objects that are being modelled is the point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These are nice. They're very useful in conjunction with SOLID design principles.&lt;/p&gt;
&lt;p&gt;It helps to have guideposts to help clarify an underlying &amp;quot;why&amp;quot; we design software.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="python"></category><category term="oo"></category><category term="oodesign"></category><category term="design principles"></category><category term="cupid"></category></entry><entry><title>OO Design Principles: SOLID</title><link href="https://slott56.github.io/2025-10-02-oo_design_principles_solid.html" rel="alternate"></link><published>2025-10-02T09:46:00-04:00</published><updated>2025-10-02T09:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-10-02:/2025-10-02-oo_design_principles_solid.html</id><summary type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Working with Liskov Substitution can make it difficult to navigate through an IDE.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Apply the design principles with a kind of priority mind-set.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Interface Segregation. Always.&lt;/li&gt;
&lt;li&gt;Liskov Substitution where you actually have base classes or protocols.&lt;/li&gt;
&lt;li&gt;Open/Closed. Always.&lt;/li&gt;
&lt;li&gt;Dependency &amp;quot;Inversion&amp;quot; (I prefer &amp;quot;Injection&amp;quot;). Think of this as an optimization.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Single Responsibility. Here is where various GRASP patterns apply at this point here to help implement a &amp;quot;single&amp;quot; responsibility.&lt;/dt&gt;
&lt;dd&gt;Remember, GRASP are implementation patterns not quite the same as design principles.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="solid-principles"&gt;
&lt;h2&gt;SOLID Principles&lt;/h2&gt;
&lt;p&gt;I find the SOLID acronym is confusing. Mostly because the principles are presented in a funny order.
While the &amp;quot;Single Responsibility&amp;quot; principle is first, and seems most important, it's really more of a summary.&lt;/p&gt;
&lt;div class="section" id="isp"&gt;
&lt;h3&gt;ISP&lt;/h3&gt;
&lt;p&gt;The &amp;quot;Interface Segregation&amp;quot; principle is -- perhaps -- the most important.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;Interface Segregation Principle&lt;/p&gt;
&lt;p class="last"&gt;ISP == Cut the fluff seen by collaborators.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In a C++ or Java context, the more that's exposed to a collaborator, the wider the ripples from a change.&lt;/p&gt;
&lt;p&gt;In a Python context, a too-rich interface is just annoying to understand, maintain, extend, and test.&lt;/p&gt;
&lt;p&gt;One metric for paring down an interface is the number of mock objects needed for an isolated unit test.&lt;/p&gt;
&lt;p&gt;(Some Facade and Adapter designs will have a lot of mocks because they're wrapping complicated things in a simple interface.
Don't apply the &amp;quot;minimize mocks&amp;quot; metric blindly.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lsp"&gt;
&lt;h3&gt;LSP&lt;/h3&gt;
&lt;p&gt;Remember, Python has duck typing. LSP is something that applies if -- and only if -- inheritance is being used.
A bunch of classes can all implement a common protocol without being subclasses of each other.&lt;/p&gt;
&lt;p&gt;An Abstract Base Class has the abstract methods marked so that an object cannot be created.
When all of the methods are defined by some subclass, it's now concrete and an object &lt;strong&gt;can&lt;/strong&gt; be created.&lt;/p&gt;
&lt;p&gt;A concrete base class can be extended as needed, and any class in the hierarchy is usable.
There won't be any &amp;quot;Can't instantiate abstract class&amp;quot; exception.&lt;/p&gt;
&lt;p&gt;In order to make LSP work, it's very helpful for subclasses to &lt;strong&gt;add&lt;/strong&gt; features to base classes.
Base classes should be a minimal foundation; think of them as a generalization.
The extensions should add features; they will be specializations.
(It's not mandatory, it's just kind of tedious to write &amp;quot;do nothing&amp;quot; methods for a subclass to take away a base class feature.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ocp"&gt;
&lt;h3&gt;OCP&lt;/h3&gt;
&lt;p&gt;This requires some consideration of the sources of change and the kinds of extensions that might be necessary.&lt;/p&gt;
&lt;p&gt;It's rather difficult to do well when working on a problem domain that's not well understood.
After creating some code -- and living with it -- it's easier to see what's likely to change and what's likely essential.
Once the change vectors are more clear, it becomes easier to see what parts of a class are likely to be extended.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;Open/Closed Principle&lt;/p&gt;
&lt;p&gt;There are no &amp;quot;bug fix&amp;quot; changes where you modify a class.&lt;/p&gt;
&lt;p&gt;Instead, think about extending a broken class with a subclass that has less buggy implementations of methods.
The app then needs to use the subclass that's not as broken.
Change happens through extension, not modification.&lt;/p&gt;
&lt;p class="last"&gt;Doing this means &amp;quot;Dependency Injection Principle&amp;quot; needs to be used &lt;strong&gt;also.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dip"&gt;
&lt;h3&gt;DIP&lt;/h3&gt;
&lt;p&gt;Dependency &amp;quot;Inversion&amp;quot; really means don't have simple names of classes everywhere.&lt;/p&gt;
&lt;p&gt;In Java and C++ collaborators with a class would have a reference to that class compiled into them.
Change some class, and the collaborators all need to be recompiled.
No one likes this.&lt;/p&gt;
&lt;p&gt;In Python, the name resolution happens at run-time, and there's no additional overhead from making a change.
(The name lookups are an overhead that's inherent in Python.)&lt;/p&gt;
&lt;p&gt;In Python, the dependency injection means assigning a target class to a variable instead of simply using it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeThing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Collaborator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;what_to_build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SomeThing&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeThing&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SomeThing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what_to_build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The name of the thing to build is a class variable in the &lt;tt class="docutils literal"&gt;Collaborator&lt;/tt&gt; class.
Making a change to the class used internally by the &lt;tt class="docutils literal"&gt;Collaborator&lt;/tt&gt; class is isolated to this variable.&lt;/p&gt;
&lt;p&gt;We can make a subclass of &lt;tt class="docutils literal"&gt;Collaborator&lt;/tt&gt; with a new value for &lt;tt class="docutils literal"&gt;what_to_build&lt;/tt&gt; and change it's behavior.
We can go further, of course, and have some centralized configuration that names the classes to use.
That can be handy in very complicated applications where a lot of things are likely to change.&lt;/p&gt;
&lt;p&gt;As a practical matter, very few things change.
A small configuration object with a few critical class references is all that's really required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="srp"&gt;
&lt;h3&gt;SRP&lt;/h3&gt;
&lt;p&gt;The most difficult of of the SOLID design principles is identifying a &amp;quot;single&amp;quot; responsibility.
The question of responsibility often requires some qualifiers.
It's important to consider responsibilities from which collaborator's perspective.&lt;/p&gt;
&lt;p&gt;A class may do a bunch of things internally.
But -- viewed from outside -- it's a single, atomic behavior.&lt;/p&gt;
&lt;p&gt;This is where the nine GRASP patterns can come in handy, to implement a class with a single responsibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Apply the SOLID principles carefully.&lt;/p&gt;
&lt;p&gt;Always apply ISP, OCD, and DIP.  Use LSP when there's inheritance involved.
The SRP requires some careful thought, and -- from different perspectives -- can be awkwardly complicated.&lt;/p&gt;
&lt;p&gt;The GRASP patterns can be helpful for implementation. Sometimes they are overly focused on Java and C++.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="python"></category><category term="oo"></category><category term="oodesign"></category><category term="design principles"></category><category term="solid"></category></entry><entry><title>OO Design Principles: ABC's</title><link href="https://slott56.github.io/2025-10-01-oo_design_principles_abcs.html" rel="alternate"></link><published>2025-10-01T09:46:00-04:00</published><updated>2025-10-01T09:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-10-01:/2025-10-01-oo_design_principles_abcs.html</id><summary type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;!-- background:

I’ve been reading quite a lot in the book “Fluent Python”. It's a brilliant resource and is helping me understand details of Python that I hadn't even looked at before. In the last few chapters I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.

If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC. I think as long as we do not have concrete methods in the base class, this could be a protocol instead.

However, I've been thinking about the general meaning of SOLID for Python. I can see these principles in an object-oriented only language like Java. Since this is the first language I learned, my intuition tells me that the language is perfect for following the principles. Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes. Often it's just easier to use a functional approach. An example would be the strategy pattern, where instead of having a construct of different classes that handle a specific strategy, we just have different functions. The intent for a developer is very explicit when using those, and I don't see the need for an ABC and inheritance from it. The only advantage I would see is to put it in a class that uses Protocols to enable type hints.

I've also read about the GRASP principles, but some parts of it don't feel very natural to me in Python either. For example, very obviously, polymorphism, which is also not needed in Python. Of course, low coupling and high cohesion are rather language-agnostic concepts, and they seem to fit very well with Python.

I know that these principles are not a religion, and I don't have to follow any specific one. I know I can take ideas from multiple ones and stack them together. However, I like the basic idea of dependency inversion, interface segregation and Liskov Substitution and used it in one of my products. Working with Liskov Substitution can make it difficult to navigate through an IDE. This plus explanations I’ve read in Fluent Python make me think that I've made my life more difficult with it, but I wonder what would be pythonic here?

Since I couldn't find a helpful discussion online, I was wondering what others experience is and how they approach this? Do you follow any principles like SOLID or GRASP or do you find a mix to be the best option? I've been looking for articles that discuss this but haven't found a great resource. I'd love to hear your thoughts and experiences and if you know of a great resource. --&gt;
&lt;p&gt;Some quotes to provide context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I read several times that ideally I should avoid inheritance with ABCs and if I do, then from a standard class. That is, I should avoid creating a typical base and subclass construct that is used in a strategy pattern, for example.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If I look at a principle like SOLID, where we have the Liskov Substitution Principle, the interface separation principle, and the dependency inversion principle, they all rely on a base class, which of course is created by inheriting from ABC.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Python, on the other hand, does not have the strong need to be object-oriented, but most of the principles assume that we are working with classes.&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;Working with Liskov Substitution can make it difficult to navigate through an IDE.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;ABC's are only &lt;strong&gt;required&lt;/strong&gt; as a way to do earlier validation that a class is complete.&lt;/p&gt;
&lt;p&gt;Otherwise, they're not required.&lt;/p&gt;
&lt;p&gt;They can be helpful when planning dependency injection.
The SOLID Dependency Inversion Principle advises us to depend on abstractions, not concrete, specialized subclasses.&lt;/p&gt;
&lt;p&gt;In Python, we don't &lt;strong&gt;need&lt;/strong&gt; an abstraction at the base of a class hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="purely-oo-design"&gt;
&lt;h2&gt;Purely OO Design?&lt;/h2&gt;
&lt;p&gt;First, I want to talk a little bit about OO design and &amp;quot;purely&amp;quot; OO languages.&lt;/p&gt;
&lt;p&gt;Unlike Java or C++, Python is purely object-oriented. Not that it actually matters.&lt;/p&gt;
&lt;p&gt;A functional style of Python depends on functions which are -- essentially -- callable objects.
They have one method, &lt;tt class="docutils literal"&gt;__call__()&lt;/tt&gt;.
They have attributes.
Because they descend from the &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; class, you can add attributes to a function.
They're instances of a type, &lt;tt class="docutils literal"&gt;function&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Java and C++ have &amp;quot;primitive&amp;quot; types which aren't objects; they're not &amp;quot;purely&amp;quot; OO.
Python doesn't have this quirk.
Python is more purely object-oriented than Java.
Which suggests any OO purity test doesn't really matter.&lt;/p&gt;
&lt;p&gt;OO Design Principles and Functional Design Principles can all be used with Python.
Indeed, some of the old COBOL design patterns can be used, too.
(Not all, of course. COBOL had GOTO's, an ALTER statement, and a very weird PERFORM THRU that make it right weird to map to Python.)&lt;/p&gt;
&lt;p&gt;OO Purity? Doesn't matter.&lt;/p&gt;
&lt;p&gt;Let's move on to look at Python's ABC's.
After that, we'll look at the SOLID principles in general.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-abc-or-not-to-abc"&gt;
&lt;h2&gt;To ABC or not to ABC?&lt;/h2&gt;
&lt;p&gt;C++ and Java (and many other languages) are built around separately-built binaries that are linked together.
Some linkage can be done at compile time, some can be done at run time by the OS loader.
Since they're separately-built binaries, everyone &lt;strong&gt;must&lt;/strong&gt; agree on the binary interface.
Change cannot be tolerated.&lt;/p&gt;
&lt;p&gt;I'll emphasize that.&lt;/p&gt;
&lt;div class="admonition admonition-emphasis"&gt;
&lt;p class="first admonition-title"&gt;Emphasis&lt;/p&gt;
&lt;p class="last"&gt;C++ and Java emphasize a style of design where interface changes cannot be tolerated.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Pragmatically, we now have computers that are so fast that recompiling a very large Java or C++ app is no longer a nightmare of waiting for hours.
When these languages were designed, a development team might do one nightly build of everything.
During the day, you were limited to compiling the classes you were working on.
Nothing more.
Getting the interfaces to be stable was an important risk reduction technique.&lt;/p&gt;
&lt;p&gt;Abstract Base Classes were a way to minimize recompilation.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p&gt;Abstract vs. Concrete&lt;/p&gt;
&lt;p class="last"&gt;There are abstract base classes and concrete base classes.
The &lt;tt class="docutils literal"&gt;abc&lt;/tt&gt; module introduces a whole bunch of stuff to support abstraction.
Ordinary &lt;tt class="docutils literal"&gt;class Special(Die):&lt;/tt&gt; inheritance from a concrete base class
involves no abstraction, and no &lt;tt class="docutils literal"&gt;abc&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Python eschews strict class hierarchies, and replaces this with &amp;quot;Duck Typing&amp;quot;.
All an object requires is to have the method defined.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2025-09-28-the_eval_conundrum.html"&gt;The eval() Conundrum and Python-as-DSL&lt;/a&gt;.
Way at the end is this snippet of code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__rmul__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Die&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Die&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;roll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;D4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;D6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;D8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means an object like &lt;tt class="docutils literal"&gt;D4&lt;/tt&gt; can be used with the &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; operators.
In very limited ways.&lt;/p&gt;
&lt;p&gt;The expression &lt;tt class="docutils literal"&gt;6 * D4&lt;/tt&gt; is legal, where &lt;tt class="docutils literal"&gt;D4 * 6&lt;/tt&gt; is not.
The way Duck Type works, there's a search for a method to implement &lt;tt class="docutils literal"&gt;*&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Consider &lt;tt class="docutils literal"&gt;6 * D4&lt;/tt&gt;.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Does &lt;tt class="docutils literal"&gt;6&lt;/tt&gt; implement &lt;tt class="docutils literal"&gt;__mul__()&lt;/tt&gt;?  It does.
However, when &lt;tt class="docutils literal"&gt;int.__mul__()&lt;/tt&gt; is evaluated with a &lt;tt class="docutils literal"&gt;Die&lt;/tt&gt; object, the result is &lt;tt class="docutils literal"&gt;NotImplemented&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Does &lt;tt class="docutils literal"&gt;Die&lt;/tt&gt; implement &lt;tt class="docutils literal"&gt;__rmul__()&lt;/tt&gt;?  It does.
When &lt;tt class="docutils literal"&gt;Die.__rmul__()&lt;/tt&gt; is evaluated with an &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; object, the result is a new &lt;tt class="docutils literal"&gt;Die&lt;/tt&gt; object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(There's actually a first step, omitted for brevity. See the sidebar.)&lt;/p&gt;
&lt;p&gt;Here's the bottom line.&lt;/p&gt;
&lt;blockquote&gt;
The Duck Typing two-step search for matching method names doesn't respect the class hierarchy.&lt;/blockquote&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;The other step?&lt;/p&gt;
&lt;p&gt;There's an initial check which &lt;strong&gt;does&lt;/strong&gt; in a limited way, reflect the class hierarchy.&lt;/p&gt;
&lt;p&gt;Is &lt;tt class="docutils literal"&gt;Die&lt;/tt&gt; a subclass of &lt;tt class="docutils literal"&gt;int&lt;/tt&gt;?
If &lt;tt class="docutils literal"&gt;Die&lt;/tt&gt; was a subclass of &lt;tt class="docutils literal"&gt;int&lt;/tt&gt;, then &lt;tt class="docutils literal"&gt;Die&lt;/tt&gt; must be considered first to permit a subclass to override a superclass.
This reverses the &lt;strong&gt;order&lt;/strong&gt; of the other two steps.&lt;/p&gt;
&lt;p class="last"&gt;A class hierarchy can shift the order of the Duck-Typing Two-Step.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;Protocol&lt;/tt&gt; formalizes the Duck-Typing Two-Step in a way that tools can be sure the whole&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;When using only Python, most developers don't need to care about separately-compiled binaries.
(When writing Rust or C extensions, of course, separately-compiled binaries are a big deal.)&lt;/li&gt;
&lt;li&gt;Duck typing eliminates a &lt;strong&gt;requirement&lt;/strong&gt; for ABCs.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;div class="section" id="is-an-abstract-base-class-still-helpful"&gt;
&lt;h3&gt;Is an Abstract Base Class &lt;strong&gt;still&lt;/strong&gt; helpful?&lt;/h3&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when"&gt;
&lt;h3&gt;When?&lt;/h3&gt;
&lt;p&gt;When you need it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-is-it-necessary"&gt;
&lt;h3&gt;When is it necessary?&lt;/h3&gt;
&lt;p&gt;The use case for an ABC in Python is to push the Duck-Typing Two-Step so it happens earlier.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ABC's permit type hint checking to be sure the code is likely to work.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;At run time, ABC's prevent instantiating an incomplete object. Code may crash earlier.&lt;/dt&gt;
&lt;dd&gt;Most important: the exception is much more clear when a method is missing.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ABC's promote early detection of design problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-is-it-superfluous"&gt;
&lt;h3&gt;When is it superfluous?&lt;/h3&gt;
&lt;p&gt;When your base class is concrete, don't waste time on an ABC.
Just use a concrete base class and extend it as needed.&lt;/p&gt;
&lt;p&gt;That's enough on ABC's for now. Let's move on to the SOLID principles.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="python"></category><category term="oo"></category><category term="oodesign"></category><category term="design principles"></category><category term="abc"></category></entry><entry><title>The eval() Conundrum and Python-as-DSL</title><link href="https://slott56.github.io/2025-09-28-the_eval_conundrum.html" rel="alternate"></link><published>2025-09-28T09:46:00-04:00</published><updated>2025-09-28T09:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-09-28:/2025-09-28-the_eval_conundrum.html</id><summary type="html">&lt;p&gt;Many people will proclaim that the &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; function is reprentnatly evil.&lt;/p&gt;
&lt;p&gt;Feel free to skip the two rants.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; function is relatively easy to work with.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p class="last"&gt;Limit the globals to the fewest possible names.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="eval-rant"&gt;
&lt;h2&gt;Eval() Rant&lt;/h2&gt;
&lt;p&gt;A too-common claim is that we can't use &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; because an …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Many people will proclaim that the &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; function is reprentnatly evil.&lt;/p&gt;
&lt;p&gt;Feel free to skip the two rants.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; function is relatively easy to work with.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p class="last"&gt;Limit the globals to the fewest possible names.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="eval-rant"&gt;
&lt;h2&gt;Eval() Rant&lt;/h2&gt;
&lt;p&gt;A too-common claim is that we can't use &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; because an Evil Super Genius (ESG™) will surreptitiously inject malicious code into a configuration file or something.
This claim ignores the fact that all Python code is plain text.
Any idiot can change the code.
An ESG would find they are over-qualified to make a mess of a Python app.&lt;/p&gt;
&lt;p&gt;For services (shared by multiple users), &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; can raise havoc for all concerned.
So can a clumsy, marginally compentent admin.
Indeed, bad admin mistakes are a considerably larger problem than some mysterious ESG's cleverness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dsl-rant"&gt;
&lt;h2&gt;DSL Rant&lt;/h2&gt;
&lt;p&gt;I'm not a big fan of inventing whole new Domain-Specific Languages (DSL's).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Them: &amp;quot;I'll solve this problem by inventing a DSL.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Now you have two problems.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also. We're surrounded by DSL's. There's a baffling variety.
Even within a general-purpose programming language like Python,
there are &amp;quot;mini-languages&amp;quot;.
Formatting. Regular Expressions. DSL's should be viewed with suspicion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-python-as-dsl-example"&gt;
&lt;h2&gt;A Python-as-DSL Example&lt;/h2&gt;
&lt;p&gt;(Thanks for your patience with the ranting.)&lt;/p&gt;
&lt;p&gt;In many cases, Python object expressions are a perfectly useful DSL.&lt;/p&gt;
&lt;p&gt;We don't need to invent any syntax or write a parser.
Instead, we write Python class declarations and define objects.
We rely on the prefectly wonderful Python parser.&lt;/p&gt;
&lt;p&gt;For those who play #TTRPG's, there's a mini-language around the description of a handful of polyhedral dice.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;3d6+2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This means &amp;quot;find 3 6-sided dice, roll them, and add 2&amp;quot;.
There are some variants, but none of them are much more complicated than this example.&lt;/p&gt;
&lt;p&gt;Let's say, we're writing some TTRPG design tools, and we want to compute the expected range, mean, and (really important) standard deviation of a handful of dice.&lt;/p&gt;
&lt;p&gt;The goal is this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dice&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;D6&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdev&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.9580398915498076&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This &lt;tt class="docutils literal"&gt;rule&lt;/tt&gt; object can do more, of course.&lt;/p&gt;
&lt;p&gt;The core feature here is replacing the traditional specification string, &lt;tt class="docutils literal"&gt;3d6+2&lt;/tt&gt; with a (very) slightly differerent syntax: &lt;tt class="docutils literal"&gt;3*D6+2&lt;/tt&gt;.
We've made the &lt;tt class="docutils literal"&gt;d&lt;/tt&gt; uppercase for no good reason.
We've added a &lt;tt class="docutils literal"&gt;*&lt;/tt&gt; so the expression is valid Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so"&gt;
&lt;h2&gt;So?&lt;/h2&gt;
&lt;p&gt;Next step is to wrap the D6 object with a CLI.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;dice.py&lt;span class="w"&gt; &lt;/span&gt;--expected&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;3*D6+2&amp;#39;&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;D6&lt;span class="w"&gt; &lt;/span&gt;+2
range:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;
mean:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;.50
standard&lt;span class="w"&gt; &lt;/span&gt;deviation:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.958
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's a catch to this.
Some will say it's a security nightmare.
We're parsing Python code provided as a command lime argument.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This opens the application to exploit by an ESG.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Folks will announce, one should &lt;strong&gt;never&lt;/strong&gt; accept Python code from the command-line.
See &lt;a class="reference internal" href="#eval-rant"&gt;Eval() Rant&lt;/a&gt;, above: an Evil Super Genius (ESG™) will surreptitiously inject malicious code into the command-line parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;dice.py&lt;span class="w"&gt; &lt;/span&gt;--expected&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;import subprocess; subprocess.run(&amp;quot;format c:&amp;quot;)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Everyone knows this &lt;strong&gt;will&lt;/strong&gt; happen.
Maybe it will be out of malice.
Or, more likely, it will be simple incompetence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="safe-eval"&gt;
&lt;h2&gt;Safe eval()&lt;/h2&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;Control the Globals&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here's my little example of how I like to use &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;argument&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eval&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;BaseException&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The dice expression &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="si"&gt;!r}&lt;/span&gt;&lt;span class="s2"&gt; does not compute&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I like to break it into two steps.
In this case, they're in a single &lt;tt class="docutils literal"&gt;try:&lt;/tt&gt; block.
In some cases, it makes sense to use two, distinct &lt;tt class="docutils literal"&gt;try:&lt;/tt&gt; blocks.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;If there are syntax errors from the &lt;tt class="docutils literal"&gt;compile()&lt;/tt&gt; function, these are caught in one block. These errors are often innocent, and some good error displays can be useful.&lt;/li&gt;
&lt;li&gt;If there are evaluation errors from the &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; function, these are caught in a separate block. Other than a &lt;tt class="docutils literal"&gt;NameError&lt;/tt&gt;, exceptions here indicate potential bugs somewhere in the underlying class definitions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;namespace&lt;/tt&gt; parameter is the &lt;strong&gt;short&lt;/strong&gt; list of all the global variables and names available at eval time.
For this application, it's the defined set of polyhedral dice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;D4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;D6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;D8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;D10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;D12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;D20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;D100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;PCT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's all there is.
Any name not in this mapping will raise a &lt;tt class="docutils literal"&gt;NameError&lt;/tt&gt; exception and the end of processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-case-it-matters"&gt;
&lt;h2&gt;In Case It Matters&lt;/h2&gt;
&lt;p&gt;Here's a glimpse at the &lt;tt class="docutils literal"&gt;Die&lt;/tt&gt; class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;faces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__rmul__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Die&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;adj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Die&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;D4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;D6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;D8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The DSL itself is essentially a class and some global objects.
The syntax is pure Python.&lt;/p&gt;
&lt;p&gt;I'm a big fan of avoiding writing parsers.
Using Python as the DSL makes it relatively easy to test the DSL.
After all, simple doctests provide ready confirmation the DSL works as advertised.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Don't fear &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt;. Control the globals.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="python"></category><category term="games"></category><category term="ttrpg"></category><category term="dsl"></category></entry><entry><title>Humble Bundle Offer</title><link href="https://slott56.github.io/2025-09-10-humble_bundle_offer.html" rel="alternate"></link><published>2025-09-10T16:02:00-04:00</published><updated>2025-09-10T16:02:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-09-10:/2025-09-10-humble_bundle_offer.html</id><content type="html">&lt;p&gt;This is delightful: Packt has this &lt;a class="reference external" href="https://www.humblebundle.com/books/ultimate-programming-languages-bundle-packt-books"&gt;Humble Bundle&lt;/a&gt; including
&lt;em&gt;The Modern Python Cookbook&lt;/em&gt;.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;a class="reference external image-reference" href="https://www.humblebundle.com/books/ultimate-programming-languages-bundle-packt-books"&gt;
&lt;img alt="Humble Bundle Graphic" src="https://slott56.github.io/media/2025-humble-bundle.png" /&gt;
&lt;/a&gt;
&lt;p class="caption"&gt;The Humble Bundle with &lt;em&gt;The Modern Python Cookbook&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Since it's right arund my birthday, consider this discount my gift to you.&lt;/p&gt;
&lt;p&gt;Invest in yourself.&lt;/p&gt;
</content><category term="Books"></category><category term="book"></category><category term="python"></category><category term="packt"></category><category term="cookbook"></category></entry><entry><title>Gloom and Despair -- LaTeX Edition</title><link href="https://slott56.github.io/2025-07-29-the_gloom_despair_latex.html" rel="alternate"></link><published>2025-07-29T09:54:00-04:00</published><updated>2025-07-29T09:54:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-07-29:/2025-07-29-the_gloom_despair_latex.html</id><summary type="html">&lt;p&gt;I write all my books using LaTeX.
Parts of LaTeX are (at first) confusing.&lt;/p&gt;
&lt;p&gt;Recently, I had a moment of despair when my LaTeX processing tools no longer worked.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Don't panic. Gather the data.&lt;/p&gt;
&lt;p&gt;If the logs aren't good enough to reveal what's going on, fix the logs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-story"&gt;
&lt;h2&gt;The …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I write all my books using LaTeX.
Parts of LaTeX are (at first) confusing.&lt;/p&gt;
&lt;p&gt;Recently, I had a moment of despair when my LaTeX processing tools no longer worked.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Don't panic. Gather the data.&lt;/p&gt;
&lt;p&gt;If the logs aren't good enough to reveal what's going on, fix the logs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-story"&gt;
&lt;h2&gt;The Story&lt;/h2&gt;
&lt;p&gt;LaTeX has numerous advantages over strugging with .DOCX files in Libre Office (or MS-Word.)
In particular, having to get the styles &lt;strong&gt;right&lt;/strong&gt; in a &amp;quot;What You See Is All You Get&amp;quot; visual editor is brutal.
The boundaries for the styles are utterly occluded and there's no real way to be sure the bullet items aren't also part of the code highlighting.&lt;/p&gt;
&lt;p&gt;LaTeX is text. Any text editor produces perfect LaTeX.
No complicated pointing and clicking.&lt;/p&gt;
&lt;p&gt;But. It's also more than text. Hence the gloom and despair.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-quirk"&gt;
&lt;h2&gt;The Quirk&lt;/h2&gt;
&lt;p&gt;LaTeX has a quirk.
And it's a big one.&lt;/p&gt;
&lt;p&gt;LaTeX is not really &amp;quot;markup&amp;quot; in the sames sense as XML or RST or Markdown.&lt;/p&gt;
&lt;p&gt;LaTeX is code with embedded literal text.
What's important is the text doesn't always have quotes or clear boundaries.
There's a &amp;quot;if it's not in a macro, it's text&amp;quot; kind of rule.&lt;/p&gt;
&lt;p&gt;LaTeX processing isn't really translating Text + Markup ==&amp;gt; PDF.
A LaTeX engine evaluates a program you wrote in the TeX language.
The side-effect of evaluating this program is to write a &amp;quot;DVI&amp;quot; file.
This file can then translated into a PDF.&lt;/p&gt;
&lt;p&gt;This nuanced distinction matters because your LaTeX can (and frequently does) include new macro definitions that change the behavior of the rest of your program.
The parser is -- in effect -- stateful; some constructs change the parser's internal state.
The consequence of this is that it's difficult to trivially parse LaTeX.&lt;/p&gt;
&lt;p&gt;We can't write an app to look for regular expression patterns like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\w+\{\w+\}&lt;/span&gt;&lt;/tt&gt; to parse the LaTeX.
It requires a more sophisticated algorithm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-do-we-do"&gt;
&lt;h2&gt;What Do We Do?&lt;/h2&gt;
&lt;p&gt;I've been using the &lt;tt class="docutils literal"&gt;pylatexenc&lt;/tt&gt; library.  &lt;a class="reference external" href="https://pypi.org/project/pylatexenc/"&gt;https://pypi.org/project/pylatexenc/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is focused on some edge cases of converting Unicode to LaTeX and LaTeX to Unicode.&lt;/p&gt;
&lt;p&gt;However, it does have an elegant LaTeX parser, that -- with a proper context database -- can process a wide variety of LaTeX.&lt;/p&gt;
&lt;p&gt;I've got two use cases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Cleanup Pandoc LaTeX. Legacy .DOCX files can be converted to LaTeX by Pandoc. &lt;a class="reference external" href="https://pandoc.org"&gt;https://pandoc.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However. The LaTeX created from .DOCX is a large pain in the neck and requires a healthy dose of conversion and correction to make it useful. (The &lt;tt class="docutils literal"&gt;\textquotesingle&lt;/tt&gt; is used all over the place.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Analyze Overleaf LaTeX. I need to get summaries of the outlines decorated with page counts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this second use case baffled me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-broke"&gt;
&lt;h2&gt;What Broke&lt;/h2&gt;
&lt;p&gt;A few days ago, I tried to get an outline from a finished project.
My outline parser crashed hard.
It's a simple app that examines all the &lt;tt class="docutils literal"&gt;.TEX&lt;/tt&gt; files gathering structure information.
And it was unable to parse the book's outline.&lt;/p&gt;
&lt;p&gt;Some tools worked.&lt;/p&gt;
&lt;p&gt;Some didn't.&lt;/p&gt;
&lt;p&gt;Ugh.&lt;/p&gt;
&lt;p&gt;I had a number of questions and assumptions.&lt;/p&gt;
&lt;div class="section" id="question-1-what-went-wrong-what-changed"&gt;
&lt;h3&gt;Question 1: What went wrong? What changed?&lt;/h3&gt;
&lt;p&gt;Clearly, the book's content changed. Somewhere in the writing process, I changed something.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="question-2-what-content-change-could-baffle-the-the-pylatexenc-library"&gt;
&lt;h3&gt;Question 2: What content change could baffle the the &lt;tt class="docutils literal"&gt;pylatexenc&lt;/tt&gt; library?&lt;/h3&gt;
&lt;p&gt;Just as clearly, it was the presence of a macro or an environment that had never been used before.
This has to be something I introduced during revisions or code review or something.
Some macro or environment is new.&lt;/p&gt;
&lt;p&gt;But.  There's nothing in the output that helps identify the location of the problem.&lt;/p&gt;
&lt;p&gt;All I had was a chorus of &amp;quot;Gloom, Despair, and Agony on Me.&amp;quot;&lt;/p&gt;
&lt;p&gt;Which wasn't appropriate.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="my-first-mistake"&gt;
&lt;h2&gt;My First Mistake&lt;/h2&gt;
&lt;p&gt;As these tools evolved over the past few books, I'd been pretty fast and loose with my debugging.
I'd been using the following technique:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# some code&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# more code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was handy when I was poking at the code daily.
This isn't something I'm posting to PyPI.
It has a suite of unit tests, but there are odd special cases and edge cases all through it.&lt;/p&gt;
&lt;p&gt;This seemed like a sensible approach.&lt;/p&gt;
&lt;p&gt;Returning to the code after 7 months, this kind of debugging was opaque.
There's no good reason for this kind of thing.&lt;/p&gt;
&lt;p&gt;I had no idea where I'd put these, or what they were going to reveal when I set &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.
Indeed, I hadn't provided any handy way to set &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; from the command line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-i-fixed"&gt;
&lt;h2&gt;What I Fixed&lt;/h2&gt;
&lt;p&gt;Every &lt;tt class="docutils literal"&gt;if DEBUG:&lt;/tt&gt; had to be rewritten as &lt;tt class="docutils literal"&gt;logger.debug()&lt;/tt&gt;.
The &lt;tt class="docutils literal"&gt;print(f&amp;quot;whatever {arg1} &lt;span class="pre"&gt;{arg2}&amp;quot;)&lt;/span&gt;&lt;/tt&gt; had to become &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;logger.debug(&amp;quot;whatever&lt;/span&gt; %s %s&amp;quot;, arg1, arg2)&lt;/tt&gt;.
This is not a substantial rewrite.
It's the work of a few mninutes to fix all 35 locations.&lt;/p&gt;
&lt;p&gt;This revealed a lot. A lot.&lt;/p&gt;
&lt;p&gt;The most important revelation was the &lt;tt class="docutils literal"&gt;pylatexenc&lt;/tt&gt; library was already using the logger.
And I had not been making any use of that.&lt;/p&gt;
&lt;p&gt;Foolishly.&lt;/p&gt;
&lt;p&gt;Between adding proper debugging and enabling logging, I found out what was &lt;strong&gt;actually&lt;/strong&gt; wrong.&lt;/p&gt;
&lt;p&gt;And it had nothing to do with LaTeX parsing.&lt;/p&gt;
&lt;p&gt;My assumptions were mostly wrong.
Well, about &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt; wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-real-mistake"&gt;
&lt;h2&gt;The Real Mistake&lt;/h2&gt;
&lt;p&gt;It took a few exepriments to figure out what debugging was needed and what was too much of the wrong kind of detail.
My corrected logging revealed that LaTeX parsing was &lt;strong&gt;not&lt;/strong&gt; broken.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pylatexenc&lt;/tt&gt; library produces a syntax tree from the LaTeX.
The parsing phase (the LatexWalker) creates this tree.
Then the application can visit the tree with a visitor subclass.&lt;/p&gt;
&lt;p&gt;It became clear that the problem was related to the &lt;strong&gt;Visitor&lt;/strong&gt; traversing the parsed LaTeX.
My application's visitor subclass used a &lt;strong&gt;Builder&lt;/strong&gt; that accumulated the various structure macros into an outline.
The original design was predicated on a structure where each chapter stood more-or-less alone.&lt;/p&gt;
&lt;p&gt;The publisher's style wraps each &lt;tt class="docutils literal"&gt;\chapter{}&lt;/tt&gt; in a &lt;tt class="docutils literal"&gt;\begin{chapterenv}&lt;/tt&gt; environment.
My &lt;strong&gt;Builder&lt;/strong&gt; didn't work well with this extra environment wrapper around the chapter.&lt;/p&gt;
&lt;p&gt;Ah.&lt;/p&gt;
&lt;p&gt;The problemn &lt;strong&gt;was&lt;/strong&gt; something I introduced.&lt;/p&gt;
&lt;p&gt;But it &lt;strong&gt;wasn not&lt;/strong&gt; a novel macro or environment.&lt;/p&gt;
&lt;p&gt;It was an environment that baffled &lt;tt class="docutils literal"&gt;OutlineBuilder&lt;/tt&gt;.
A small change and I'm back in business.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Books"></category><category term="python"></category><category term="learning"></category><category term="latex"></category></entry><entry><title>Some Recommended Reading</title><link href="https://slott56.github.io/2025-07-16-recommended_reading.html" rel="alternate"></link><published>2025-07-16T11:20:00-04:00</published><updated>2025-07-16T11:20:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-07-16:/2025-07-16-recommended_reading.html</id><summary type="html">&lt;p&gt;Q: &amp;quot;Can you recommend  books that are good for a beginner wanting to learn python?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Depends on the person’s background...&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;They has a deep background in the problem domain. Recently they've been doing a lot of reporting and analytics using SQL.&amp;quot;&lt;/p&gt;
&lt;p&gt;Okay. That's excellent.&lt;/p&gt;
&lt;p&gt;One of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Q: &amp;quot;Can you recommend  books that are good for a beginner wanting to learn python?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Depends on the person’s background...&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;They has a deep background in the problem domain. Recently they've been doing a lot of reporting and analytics using SQL.&amp;quot;&lt;/p&gt;
&lt;p&gt;Okay. That's excellent.&lt;/p&gt;
&lt;p&gt;One of the best books is “automate the hard stuff with Python” by Al Sweigart.
See &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;https://automatetheboringstuff.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve got a very small ebook on the exact topic of stepping away from SQL to embrace Python:
See &lt;a class="reference external" href="https://slott56.github.io/2024-08-20-unlearning_sql.html"&gt;https://slott56.github.io/2024-08-20-unlearning_sql.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And see &lt;a class="reference external" href="https://pyvideo.org/pycon-us-2025/unlearning-sql.html"&gt;https://pyvideo.org/pycon-us-2025/unlearning-sql.html&lt;/a&gt; for a video on moving from SQL to Python.&lt;/p&gt;
&lt;p&gt;Finally, the killer toolset for this kind of thing is Jupyter Lab.
See &lt;a class="reference external" href="https://jupyter-tutorial.readthedocs.io/en/24.1.0/jupyterlab/index.html"&gt;https://jupyter-tutorial.readthedocs.io/en/24.1.0/jupyterlab/index.html&lt;/a&gt;&lt;/p&gt;
</content><category term="Books"></category><category term="python"></category><category term="learning"></category></entry><entry><title>The Payout From Learning</title><link href="https://slott56.github.io/2025-06-29-the_payout_from_learning.html" rel="alternate"></link><published>2025-07-02T15:46:00-04:00</published><updated>2025-07-02T15:46:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-07-02:/2025-06-29-the_payout_from_learning.html</id><summary type="html">&lt;p&gt;The back-story.
See &lt;a class="reference external" href="https://slott56.github.io/2025-06-29-an_investment_in_learning.html"&gt;Coping With Complexity&lt;/a&gt;.
See &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt; for the code base.&lt;/p&gt;
&lt;p&gt;Back around May 26, I created this branch.
Today -- July 2 -- I've got the tests to pass.&lt;/p&gt;
&lt;div class="section" id="bluf-tl-dr"&gt;
&lt;h2&gt;BLUF (TL;DR)&lt;/h2&gt;
&lt;p&gt;I made mistakes.
I spent a lot of time making a some significant mistakes …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The back-story.
See &lt;a class="reference external" href="https://slott56.github.io/2025-06-29-an_investment_in_learning.html"&gt;Coping With Complexity&lt;/a&gt;.
See &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt; for the code base.&lt;/p&gt;
&lt;p&gt;Back around May 26, I created this branch.
Today -- July 2 -- I've got the tests to pass.&lt;/p&gt;
&lt;div class="section" id="bluf-tl-dr"&gt;
&lt;h2&gt;BLUF (TL;DR)&lt;/h2&gt;
&lt;p&gt;I made mistakes.
I spent a lot of time making a some significant mistakes.
I spent &lt;span class="math"&gt;\(\frac{3}{37} \approx \frac{1}{12}\)&lt;/span&gt; of the time cleaning it up.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Date&lt;/th&gt;
&lt;th class="head"&gt;Day&lt;/th&gt;
&lt;th class="head"&gt;Event&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;May 26&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Open the branch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;June 21&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;Uncover serious problem with the design&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;June 29&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;Post about a better design&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;July 2&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;All tests pass.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In June I posted a a note about this mess on the June 29, reflecting 34 days of frustrating work.
There are important&lt;/p&gt;
&lt;p&gt;It took 4 days to clean up the mess. About &lt;span class="math"&gt;\(\frac{1}{12}\)&lt;/span&gt; of the overall time.&lt;/p&gt;
&lt;p&gt;YMMV, of course.&lt;/p&gt;
&lt;p&gt;But. I think a &lt;span class="math"&gt;\(12 : 1\)&lt;/span&gt; ratio for getting into trouble and refactoring to fix it is about right.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Celebrate!&lt;/p&gt;
&lt;p&gt;Then update the tracking issue (&lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python/issues/100"&gt;https://github.com/cloud-custodian/cel-python/issues/100&lt;/a&gt;) for the project.&lt;/p&gt;
&lt;p&gt;I think there are two outstanding issues; neither of them are devilishly complicated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sprint-planning"&gt;
&lt;h2&gt;Sprint Planning&lt;/h2&gt;
&lt;p&gt;How many story points was this? (As if story points mean something.)&lt;/p&gt;
&lt;p&gt;More importantly, imagine a team with 4-week sprints.&lt;/p&gt;
&lt;p&gt;This was &lt;strong&gt;not&lt;/strong&gt; done in the first sprint.&lt;/p&gt;
&lt;p&gt;Now what?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A hand-wringing sprint retrospective to ascertain (again) how difficult the future is to predict.&lt;/li&gt;
&lt;li&gt;A heart-felt sermon on team commitment nad the importance of meeting commitments.&lt;ul&gt;
&lt;li&gt;Followed by another round of acknowledgement that the future is remarkably hard to predict.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A rambling rumination from an old developer (like me) on the importance of detailed design to establish the &lt;strong&gt;right&lt;/strong&gt; number of story points.&lt;ul&gt;
&lt;li&gt;Followed by a good laugh.
The didn't work for the waterfall approach.
We rejected that as part of the Agile approach.
It still won't work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Architecture &amp; Design"></category><category term="uml"></category><category term="plantuml"></category><category term="solid"></category><category term="cel-python"></category><category term="cloud custodian"></category><category term="open source"></category></entry><entry><title>An Investment in Learning</title><link href="https://slott56.github.io/2025-06-29-an_investment_in_learning.html" rel="alternate"></link><published>2025-06-29T09:06:00-04:00</published><updated>2025-06-29T09:06:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-06-29:/2025-06-29-an_investment_in_learning.html</id><summary type="html">&lt;p&gt;The back-story.
See &lt;a class="reference external" href="https://slott56.github.io/2025-06-21-coping_with_complexity.html"&gt;Coping With Complexity&lt;/a&gt;.
See &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt; for the code base.&lt;/p&gt;
&lt;p&gt;I've reached the point where progress is clearly impossible.
A bad decision a few weeks ago has reached it's inevitable conclusion.
I've made a terrible mistake.
About 1,000 lines of code -- and tons …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The back-story.
See &lt;a class="reference external" href="https://slott56.github.io/2025-06-21-coping_with_complexity.html"&gt;Coping With Complexity&lt;/a&gt;.
See &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt; for the code base.&lt;/p&gt;
&lt;p&gt;I've reached the point where progress is clearly impossible.
A bad decision a few weeks ago has reached it's inevitable conclusion.
I've made a terrible mistake.
About 1,000 lines of code -- and tons of time debugging -- are all wasted.&lt;/p&gt;
&lt;p&gt;Or, were they?&lt;/p&gt;
&lt;div class="section" id="bluf-tl-dr"&gt;
&lt;h2&gt;BLUF (TL;DR)&lt;/h2&gt;
&lt;p&gt;We make mistakes.&lt;/p&gt;
&lt;p&gt;Generally, &amp;quot;mistake&amp;quot; is a synonym for &amp;quot;learning&amp;quot;.
A mistake is a lesson in what not to do.&lt;/p&gt;
&lt;p&gt;We can't avoid mistakes.
Instead, we have to learn as much as possible from them.&lt;/p&gt;
&lt;p&gt;(What about people who &amp;quot;don't learn from their mistakes&amp;quot;?
They really &lt;strong&gt;do&lt;/strong&gt; learn.
They also refuse to change their behavior in a way that avoids making substantially similar mistakes again.
They often modify their behavior to avoid a few unpleasant aspects of a recent mistake while continuing to make related mistakes.)&lt;/p&gt;
&lt;p&gt;Mistakes don't have a cost.
They are an investment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="context"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;This is part of Cloud Custodian (C7N), to permit writing simpler logical expressions in more conventional notation.
See &lt;a class="reference external" href="https://cloudcustodian.io/docs/filters.html"&gt;https://cloudcustodian.io/docs/filters.html&lt;/a&gt; for information on the YAML-based filter notation.
It's &lt;strong&gt;very&lt;/strong&gt; sophisticated. But, sometimes hard to read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="container"&gt;
&lt;h2&gt;Container&lt;/h2&gt;
&lt;p&gt;This runs in the lambda or other server context as part of Custodian.
It's not a separate process in a separate container.
It's an importable package that extends C7N's filter to include additional syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="component"&gt;
&lt;h2&gt;Component&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt; for the code base.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;were&lt;/strong&gt; looking at implementing the following conceptual model.
Until we found the counter-example.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="CEL evaluation model" src="https://slott56.github.io/media/cel_notional.png" /&gt;
&lt;p class="caption"&gt;A notional design overview of some of the classes for CEL Python.
This has problems, it turns out.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The application will create an &lt;tt class="docutils literal"&gt;Environment&lt;/tt&gt;.
It uses this to compile a CEL expression, and then create a &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt; to evaluate the expression.
(This lets you cache the &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt; to reuse it.)&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt; evaluates the expression in a &lt;tt class="docutils literal"&gt;Context&lt;/tt&gt; where variables, functions, and type definitions are found.
While the &lt;tt class="docutils literal"&gt;Context&lt;/tt&gt; type is shown as a name for a Python &lt;tt class="docutils literal"&gt;dict[str, Value]&lt;/tt&gt;, it &lt;em&gt;could&lt;/em&gt; be a protobuf message with all the stuff in it.&lt;/p&gt;
&lt;p&gt;We're adding the new subclasses of &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;InterpretedRunner&lt;/tt&gt; uses a subclass of &lt;tt class="docutils literal"&gt;lark.Interpreter&lt;/tt&gt; to interpret the AST and compute a final value.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;CompiledRunner&lt;/tt&gt; uses a subclass of &lt;tt class="docutils literal"&gt;lark.Visitor&lt;/tt&gt; to transpile the AST into Python.
The Pythonic transpilation output is compiled, and the built-in &lt;tt class="docutils literal"&gt;exec()&lt;/tt&gt; function computes a final value from this.
This runs at native Python speeds, and avoids the overhead of visiting AST nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;Let's not go there.
This is about design decisions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-wrong"&gt;
&lt;h2&gt;What's Wrong&lt;/h2&gt;
&lt;p&gt;In retrospect, it's clear -- perfectly and abundantly clear -- that the presence of CEL macros is a non-trivial feature.&lt;/p&gt;
&lt;p&gt;CEL has &lt;tt class="docutils literal"&gt;some_object.map(x, some_expression_with_x)&lt;/tt&gt; as a construct.&lt;/p&gt;
&lt;p&gt;Syntactically, it looks like a &lt;tt class="docutils literal"&gt;.map()&lt;/tt&gt; method of &lt;tt class="docutils literal"&gt;some_object&lt;/tt&gt;.
The presence of a bind variable, &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;, and an expression where &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; is a free variable suggests this is &lt;strong&gt;not&lt;/strong&gt; simply a method.
This is nothing like the expression &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;some_string.startsWith('hello')&lt;/span&gt;&lt;/tt&gt;: a method with an argument value that can be immediately evaluated and produce a result.&lt;/p&gt;
&lt;p&gt;CEL calls it a &amp;quot;macro&amp;quot; because it's really a higher-level construct.
It's visually indistinguishable from a function, but it's semantically unrelated.&lt;/p&gt;
&lt;p&gt;In Python, the syntax for this is &lt;tt class="docutils literal"&gt;(some_expression_with_x for x in some_object)&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;map(lambda x: some_expressions_with_x, some_object)&lt;/tt&gt;.
The bind variable and expression have a distinctive syntax that makes them easy to work with.&lt;/p&gt;
&lt;p&gt;CEL lacks a distinctive syntax. Sigh.
For me, the function-like syntax was an attractive nuisance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="okay-there-are-macros"&gt;
&lt;h2&gt;Okay, There are Macros&lt;/h2&gt;
&lt;p&gt;The Lark &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; is &amp;quot;bottom-up&amp;quot;.
It visits leaf nodes and then higher and higher level nodes.&lt;/p&gt;
&lt;p&gt;This means &lt;tt class="docutils literal"&gt;6 * 7&lt;/tt&gt; will visit the following nodes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Leaf node with literal &lt;tt class="docutils literal"&gt;6&lt;/tt&gt;.  Nothing much to transpiling this into Python.&lt;/li&gt;
&lt;li&gt;Leaf node with literal &lt;tt class="docutils literal"&gt;7&lt;/tt&gt;.  Also, really easy to transpile into Python.&lt;/li&gt;
&lt;li&gt;Multiplication node with two leaf nodes and an operator, &lt;tt class="docutils literal"&gt;*&lt;/tt&gt;.  Also.  Easy to transpile.
A template of &lt;tt class="docutils literal"&gt;&amp;quot;{left} * {right}&amp;quot;&lt;/tt&gt; works nicely.
Or, maybe &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;operator.mul({left},&lt;/span&gt; &lt;span class="pre"&gt;{right})&amp;quot;&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This simple design is inadequate for macro processing.&lt;/p&gt;
&lt;p&gt;Consider this: &lt;tt class="docutils literal"&gt;['foal', 'foo', &lt;span class="pre"&gt;'four'].exists_one(n,&lt;/span&gt; &lt;span class="pre"&gt;n.startsWith('fo'))&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;How is this visited?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;The left-hand side:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Leaf node with literal &lt;tt class="docutils literal"&gt;'foal'&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Leaf node with literal &lt;tt class="docutils literal"&gt;'foo'&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Leaf node with literal &lt;tt class="docutils literal"&gt;'four'&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;An &amp;quot;expression list&amp;quot; node to assemble the three literals.&lt;/li&gt;
&lt;li&gt;A &amp;quot;list literal&amp;quot; node built from the expression list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The right-hand side:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; variable.
&lt;span class="text-warning font-weight-bold"&gt;Warning: This is not a sub-expression&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;'fo'&lt;/tt&gt; literal.&lt;/li&gt;
&lt;li&gt;An &amp;quot;expression list&amp;quot; node to build the one literal as a single-element list.&lt;/li&gt;
&lt;li&gt;The &amp;quot;dot ident arg&amp;quot; node with &lt;tt class="docutils literal"&gt;startsWith&lt;/tt&gt; as the identifier, and the expression list node.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; variable.  Again.&lt;/li&gt;
&lt;li&gt;A complete &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;n.startsWith('fo')&lt;/span&gt;&lt;/tt&gt; primary expression.
At this point, it's not clear that &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; is a bind variable that doesn't have a value in the default activation.&lt;/li&gt;
&lt;li&gt;An &amp;quot;expression list&amp;quot; node to build &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;, and the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;n.startsWith('fo')&lt;/span&gt;&lt;/tt&gt; expression as a list.
&lt;span class="text-danger font-weight-bold"&gt;RED ALERT: This is not a list of expressions&lt;/span&gt;.
This a bind variable name and an expression.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The final expression as a whole:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;A &amp;quot;dot ident arg&amp;quot; node with &lt;tt class="docutils literal"&gt;exists_one&lt;/tt&gt; as the identifier, and the expression list node.
This can't work because the &lt;tt class="docutils literal"&gt;exists_one&lt;/tt&gt; is a macro that needs a bind variable and sub-expression.
It needs to bind multiple values to the bind variable and evaluate the sub-expression for each value.&lt;/p&gt;
&lt;p&gt;Note that an expression &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; (See &lt;span class="text-warning font-weight-bold"&gt;Warning&lt;/span&gt;, above) and an expression list &lt;tt class="docutils literal"&gt;n, &lt;span class="pre"&gt;n.startsWith('fo')&lt;/span&gt;&lt;/tt&gt; (see &lt;span class="text-danger font-weight-bold"&gt;RED ALERT&lt;/span&gt;, above) are not really part of this, but, well, they were visited and generated transpiled code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We wind up with some extra, irrelevant, transpiled code floating around in our internal data structures.&lt;/p&gt;
&lt;p&gt;Ugh.&lt;/p&gt;
&lt;p&gt;Bottom up is inappropriate when handling macros. The subsidiary parts -- the bind variable and the sub-expression -- need special handling.&lt;/p&gt;
&lt;p&gt;The Lark &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; is doesn't fit perfectly with the approach required for Transpiling.
Stuff is visited that appears to be a useful sub-expression.
But.
It's not simply a sub-expression that can be evaluated and passed up the parse tree to compute a final answer.&lt;/p&gt;
&lt;p&gt;First, the &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; sub-expression only makes sense in the context of a macro binding a value to it. It's not an expression at all. It's an identifier.&lt;/p&gt;
&lt;p&gt;Second, the sub-expression with the &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; variable buried in it can't be evaluated outside the macro context.&lt;/p&gt;
&lt;p&gt;Every other expression can be trivially evaluated and the result passed up the parse tree.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-duh-factor"&gt;
&lt;h2&gt;The Duh Factor&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;InterpretedRunner&lt;/tt&gt; extended the &lt;tt class="docutils literal"&gt;lark.Interpreter&lt;/tt&gt; class.&lt;/p&gt;
&lt;p&gt;At first blush, it seemed like transpiling might be different.
We might be able to --- trivially --- rewrite the code from CEL to Python using the &lt;tt class="docutils literal"&gt;lark.Visitor&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;After getting to a regression test failure, it is clear that we cannot &lt;strong&gt;trivially&lt;/strong&gt; transpile a macro into Python.
The simplistic &lt;tt class="docutils literal"&gt;lark.Visitor&lt;/tt&gt; design doesn't work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-wait"&gt;
&lt;h2&gt;But Wait...&lt;/h2&gt;
&lt;p&gt;The nuance here is that the transpiled pieces and parts -- in isolation -- actually &lt;strong&gt;are&lt;/strong&gt; useful.
We need to to avoid &lt;strong&gt;trivially&lt;/strong&gt; conflating &lt;tt class="docutils literal"&gt;object.method(arg)&lt;/tt&gt;, which has a simple value, with &lt;tt class="docutils literal"&gt;object.macro(variable, expression)&lt;/tt&gt;, generates more complicated code.&lt;/p&gt;
&lt;p&gt;This seems to be a two-pass operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase I&lt;/strong&gt;. A &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; walks the parse tree and decorates AST nodes with a Python string transpilation of the node.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Literals get the Pythonic version of the CEL literal as a string.&lt;/li&gt;
&lt;li&gt;Identifiers become an &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;activation.{name}:&lt;/span&gt;&lt;/tt&gt; string.&lt;/li&gt;
&lt;li&gt;Operators, functions, and methods all get normalized to a template that pulls in the children strings to create a complete Python expression string.&lt;ul&gt;
&lt;li&gt;If all the children are strings, then the template can be transformed into a string and treated as if it were a simple literal.  For example, the &lt;tt class="docutils literal"&gt;&amp;quot;{left} * {right}&amp;quot;&lt;/tt&gt; template can be filled in right away with two literals.&lt;/li&gt;
&lt;li&gt;If any of the children are templates, short-circuits, or macros, the final creation of code has to wait for Phase II.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The short-circuit logic operators, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_&amp;amp;&amp;amp;_&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_||_&lt;/span&gt;&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_?_:_&lt;/span&gt;&lt;/tt&gt; at this level are complicated templates.
It's slightly easier to defer filling them until Phase II because they build multiple lines of code.&lt;/li&gt;
&lt;li&gt;The macros (distinct from methods) require Phase II processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Phase II&lt;/strong&gt;. A second &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; walks the parse tree, looking for the already completed decorations on AST nodes, and the templates to be completed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Any unfilled templates require visiting the children, substituting them into the template, and updating the decoration from template to string.
These become simple lambdas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;expr_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;operator_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each child will be a single blob of text, built up from numerous children involving ordinary literals and operators.
The resulting expression string used to decorate the parse tree is &lt;tt class="docutils literal"&gt;&amp;quot;expr_{n}&amp;quot;&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; is some unique number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Short-circuit operators are expanded into lambdas that may or may not raise exceptions that may or may not be ignored.
&lt;tt class="docutils literal"&gt;true || 42 / 0&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;true&lt;/tt&gt;. No exception is raised.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ex_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ex_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;expr_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;logical_or_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ex_right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;logical_or_function&lt;/tt&gt; will evaluate sub-expressions and silence exceptions as needed.&lt;/p&gt;
&lt;p&gt;And yes, everything is a lambda, even the literals. It makes life simpler.&lt;/p&gt;
&lt;p&gt;The resulting expression string used to decorate the parse tree is &lt;tt class="docutils literal"&gt;&amp;quot;expr_{n}&amp;quot;&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; is some unique number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Which brings us to macros. Example: &lt;tt class="docutils literal"&gt;['foal', 'foo', &lt;span class="pre"&gt;'four'].exists_one(n,&lt;/span&gt; &lt;span class="pre"&gt;n.startsWith('fo'))&lt;/span&gt;&lt;/tt&gt;.
The left-hand side is an ordinary sub-expression. For Python's purposes, this object will be used by a generator expression to create sub-activations with the bind variable set.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ex_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;four&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;activation_gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nested_activation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ex_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;_left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, we could use &lt;tt class="docutils literal"&gt;map(lambda a: &lt;span class="pre"&gt;a.nested_activation(vars=dict({bind&lt;/span&gt; &lt;span class="pre"&gt;variable}=_value)),&lt;/span&gt; ex_{n}_left)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Now, we can evaluate the macro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ex_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;sub_activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_activation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;expr_&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_is_true&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex_right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation_gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_is_true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This resulting block of code, while bulky, captures the macro processing.
Each of the macros has a unique expression structure, but they're all based on the built-in &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt;.
In this case, CEL &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;exists_one(...)&lt;/span&gt;&lt;/tt&gt; is an assertion that there was one result.&lt;/p&gt;
&lt;p&gt;And, like everything else, the resulting expression string used to decorate the parse tree is &lt;tt class="docutils literal"&gt;&amp;quot;expr_{n}&amp;quot;&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; is some unique number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's important here is that we use a lark &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; for this, not an &lt;tt class="docutils literal"&gt;Interpreter&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-the-distinction"&gt;
&lt;h2&gt;What's The Distinction?&lt;/h2&gt;
&lt;p&gt;The Lark &lt;tt class="docutils literal"&gt;Visitor&lt;/tt&gt; always visits the children first.
The results of the child visit are then available for the parent to use.
The generic &lt;tt class="docutils literal"&gt;lark.Visitor&lt;/tt&gt; class can be decorated with types for parameters and results to clarify how the evaluation works.&lt;/p&gt;
&lt;p&gt;The approach is good for everything but macros.
The literal nodes roll up into the primary nodes that roll up into various priorities of expression nodes.
The final, top-most &lt;tt class="docutils literal"&gt;expr&lt;/tt&gt; node can be an amalgamation of all the visited children.
Operations are properly nested by the AST definitions of relation, addition, and multiplication grammar productions.&lt;/p&gt;
&lt;p&gt;The Lark &lt;tt class="docutils literal"&gt;Interpreter&lt;/tt&gt; doesn't visit the children automatically.
The application methods must explicitly call &lt;tt class="docutils literal"&gt;visit()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;visit_children()&lt;/tt&gt; as needed.
When interpreting the AST to evaluate it, this is an annoying detail until we get to macros.
For macros, it's imperative to not trivially visit the children. See the &lt;span class="text-warning font-weight-bold"&gt;Warning&lt;/span&gt; and &lt;span class="text-danger font-weight-bold"&gt;RED ALERT&lt;/span&gt;, above.&lt;/p&gt;
&lt;p&gt;For evaluation, processing must work like this.
First, evaluate the left-hand side to get an object.
The first child of the macro node has the bind variable.
For each value in the object, create a sub-activation with the bind variable;
then, visit only the second child of the macro node to get a value.
This limited use of visiting children makes it easy to implement interpretation of a macro.&lt;/p&gt;
&lt;p&gt;The same kind of processing can apply to transpiling a macro into Python.
Or.
As shown above, we can do two passes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;the easy non-macro transpilation,&lt;/li&gt;
&lt;li&gt;macro transpilation, which doesn't &lt;strong&gt;trivially&lt;/strong&gt; roll the children up into the parent.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-cost-of-the-mistake"&gt;
&lt;h2&gt;The Cost of the Mistake&lt;/h2&gt;
&lt;p&gt;Mistakes don't have a cost.&lt;/p&gt;
&lt;p&gt;This is a fallacy. A big one. One that cripples technical management.&lt;/p&gt;
&lt;p&gt;Mistakes are an investment in learning.&lt;/p&gt;
&lt;p&gt;In this case, it's about 1,000 lines of code that will be reworked.&lt;/p&gt;
&lt;p&gt;It took hours to create and debug the code I'm about to delete.&lt;/p&gt;
&lt;p&gt;It will take hours to replace them with something that&lt;/p&gt;
&lt;ol class="upperalpha simple"&gt;
&lt;li&gt;Actually works.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Has a simple example that absolutely requires the more sophisticated design.&lt;/dt&gt;
&lt;dd&gt;(Note that I didn't have this until a specific regression test failed.)&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Benefits from the the incorrect version, and working examples of the various kinds of lambda templates.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The final point is really important and under-valued:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Refactoring is Easier than Initial Development&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Folks have an unwarranted fear of refactoring and the &amp;quot;cost&amp;quot; of rework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="could-i-have-prevented-this"&gt;
&lt;h2&gt;Could I Have Prevented This?&lt;/h2&gt;
&lt;p&gt;The dream of methodology designers everywhere is to placate managers with an approach this will avoid this investment.&lt;/p&gt;
&lt;p&gt;The dream is to be able to make this claim:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Follow my method and you won't waste time digging in some rat-hole right up to a dead end.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;What's nonsensical about this is that there needs to be some level of actual &lt;em&gt;thinking&lt;/em&gt; going on.&lt;/p&gt;
&lt;p&gt;It's nonsense because someone has to deeply understand this problem, and leverage that understanding to avoid writing bad code.
Someone has to put in hours understanding the problem to avoid the code.&lt;/p&gt;
&lt;p&gt;What form does this detailed &amp;quot;understanding&amp;quot; take?&lt;/p&gt;
&lt;p&gt;Clearly, the waterfall dream claim was a &amp;quot;detailed design document.&amp;quot;&lt;/p&gt;
&lt;p&gt;And this document was based on what, exactly?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Staring at a whiteboard?&lt;/li&gt;
&lt;li&gt;Expensive multi-person meetings?&lt;/li&gt;
&lt;li&gt;Long, expensive, pointless conversations with an hallucinating AI tool.
(Watch &lt;em&gt;2001: A Space Odyssey&lt;/em&gt; for more on hallucination-prone AI tools.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or, is the detailed design document based on draft code that demonstrates a problem?
The design-level draft is used to create a design document.
Which is then used to create final code.&lt;/p&gt;
&lt;p&gt;In the olden days this was considered a non-starter.
Code was expensive.
Those days are past.
Draft code is part of the process.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="uml"></category><category term="plantuml"></category><category term="solid"></category><category term="cel-python"></category><category term="cloud custodian"></category><category term="open source"></category><category term="learning"></category></entry><entry><title>Coping with Complexity</title><link href="https://slott56.github.io/2025-06-21-coping_with_complexity.html" rel="alternate"></link><published>2025-06-21T08:01:00-04:00</published><updated>2025-06-21T08:01:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-06-21:/2025-06-21-coping_with_complexity.html</id><summary type="html">&lt;p&gt;I'm struggling with brain cramps trying to understand something my past self wrote.
Current me needs to go outside and do something that doesn't involve software or complexity.
Sadly, current me is trying to make one small change and it feels like the software has  passed out of the realm …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm struggling with brain cramps trying to understand something my past self wrote.
Current me needs to go outside and do something that doesn't involve software or complexity.
Sadly, current me is trying to make one small change and it feels like the software has  passed out of the realm of manageable complexity into that space of unknowable chaos.
Considering the heliopause, I feel like there's a simpli-pause out there, and I'm drifting past it.&lt;/p&gt;
&lt;div class="section" id="bluf-tl-dr"&gt;
&lt;h2&gt;BLUF (TL;DR)&lt;/h2&gt;
&lt;p&gt;There is no big, simple lesson up front.
Except, maybe this: &amp;quot;Simplicity requires hard work.&amp;quot;&lt;/p&gt;
&lt;p&gt;Or maybe quote Pascal's apology:&lt;/p&gt;
&lt;blockquote&gt;
I have made this longer than usual because I have not had time to make it shorter.&lt;/blockquote&gt;
&lt;p&gt;I think complexity stems from failure to budget enough time to find the useful patterns and simplify.&lt;/p&gt;
&lt;p&gt;What concrete steps can we take to simplify? Read on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="context"&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python"&gt;https://github.com/cloud-custodian/cel-python&lt;/a&gt; for the code base.&lt;/p&gt;
&lt;p&gt;We have the following conceptual model.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="CEL evaluation model" src="https://slott56.github.io/media/cel_old.png" /&gt;
&lt;p class="caption"&gt;An overview of some of the classes. There's more. Too much more.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The application will create an &lt;tt class="docutils literal"&gt;Environment&lt;/tt&gt;.
It uses this to compile a CEL expression, and then create a &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt; to evaluate the expression.
(This lets you cache the &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt; to reuse it.)&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt; evaluates the expression in a &lt;tt class="docutils literal"&gt;Context&lt;/tt&gt; where variables, functions, and type definitions are found.
While the &lt;tt class="docutils literal"&gt;Context&lt;/tt&gt; type is shown as a name for a Python &lt;tt class="docutils literal"&gt;dict[str, Value]&lt;/tt&gt;, it &lt;em&gt;could&lt;/em&gt; be a protobuf message with all the stuff in it.&lt;/p&gt;
&lt;p&gt;Currently, the runner uses a subclass of &lt;tt class="docutils literal"&gt;lark.Interpreter&lt;/tt&gt; to interpret the AST.
This involves a fair amount of navigating through the AST structure.
This isn't too much overhead, but it can be reduced.&lt;/p&gt;
&lt;p&gt;We want to explore some ways to reduce the overheads.
Two seem clear:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Walk the syntax tree, appending operations to a sequence of function evaluations.
To evaluate the expression, execute the sequence of operations.
This is tidy, and not fraught with too much complexity until we get to conditional and iterative processing.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Conditional processing&lt;/strong&gt; comes from the short-circuiting &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_&amp;amp;&amp;amp;_&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_||_&lt;/span&gt;&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_?_:_&lt;/span&gt;&lt;/tt&gt; operators. (The CEL folks like to write their operators with &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; to show where operands go.) These involves skipping over the parts that don't need to be evaluated.
Sadly, the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_&amp;amp;&amp;amp;_&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_||_&lt;/span&gt;&lt;/tt&gt; are commutative, so &lt;tt class="docutils literal"&gt;true || 42 / 0&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;42 / 0 || true&lt;/tt&gt; are both &lt;tt class="docutils literal"&gt;true&lt;/tt&gt;.  Use of a monad can make this tolerably simple. But that's not how it was implemented.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterative processing&lt;/strong&gt; comes from &amp;quot;macro&amp;quot; evaluation.
CEL expresses this with higher-order functions (map, filter, exists, etc.) that are applied to a sub-expression, and an object, &lt;tt class="docutils literal"&gt;[1, 2, &lt;span class="pre"&gt;3].map(x,&lt;/span&gt; 3*x+1)&lt;/tt&gt; sort of thing.
This is similar to Python's &lt;tt class="docutils literal"&gt;map(lambda x: 3*x+1, [1, 2, 3])&lt;/tt&gt;.
The concept behind the CEL specification calling this a &amp;quot;macro&amp;quot;, is that the sequence of operations involved in the iteration can be viewed as a single &amp;quot;macro&amp;quot; operation in the overall sequence. A &amp;quot;sub-interpreter&amp;quot; can handle the macro operation, returning a result.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transpile the syntax tree into Python.
Use the built-in &lt;tt class="docutils literal"&gt;compile()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;exec()&lt;/tt&gt; functions to evaluate the expression.
The transpile-and-compile creates byte code.
This will be rather fast.
And we can leverage projects like &lt;strong&gt;cython&lt;/strong&gt; (&lt;a class="reference external" href="https://cython.org"&gt;https://cython.org&lt;/a&gt;) if we want even more speed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to proceed, of course, we need some benchmarking data to show where the performance penalties might be hiding.
The profiling data suggests transpiling doesn't hold much promise.
But.
It's also a logical feature to consider.
In principle, the desgin permitted adding a compiled runner.
In principle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="container-component-code"&gt;
&lt;h2&gt;Container, Component, Code&lt;/h2&gt;
&lt;p&gt;In case it's helpful, CEL isn't a stand-alone application.
It's an expression language that can be embedded anywhere you need expressions.
A CEL-enabled version of &lt;tt class="docutils literal"&gt;bash&lt;/tt&gt;, for example, would be far more expressive than the  version that has &lt;tt class="docutils literal"&gt;(( ))&lt;/tt&gt; expressions and &lt;tt class="docutils literal"&gt;[ ]&lt;/tt&gt; expressions using different sub-languages.&lt;/p&gt;
&lt;p&gt;The Pure-Python implementation does have a CLI and can replace &lt;strong&gt;jq&lt;/strong&gt;, but that's above and beyond the core language specification.&lt;/p&gt;
&lt;p&gt;Code-wise, it depends on the &lt;strong&gt;Lark parser&lt;/strong&gt; (&lt;a class="reference external" href="https://lark-parser.readthedocs.io/en/latest/"&gt;https://lark-parser.readthedocs.io/en/latest/&lt;/a&gt;)  for the parser and abstract syntax tree definition.
We add a package of CEL types to provide Go-like semantics instead of Python semantics.
(This means offering &lt;tt class="docutils literal"&gt;int32&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;int64&lt;/tt&gt;, for example.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-what"&gt;
&lt;h2&gt;So, what?&lt;/h2&gt;
&lt;p&gt;Good question. What's the complexity?&lt;/p&gt;
&lt;p&gt;Clearly, only need a subclass of &lt;tt class="docutils literal"&gt;Runner&lt;/tt&gt; that transpiles instead of interprets.&lt;/p&gt;
&lt;p&gt;How hard can that be? Really?&lt;/p&gt;
&lt;p&gt;I'm going to side-bar into the root-causes of complexity.
You might want to skip down to &lt;a class="reference internal" href="#fine-it-was-complicated-what-did-i-do"&gt;Fine. It Was Complicated. What Did I Do?&lt;/a&gt;.
This is how I took a step back from the complexity.&lt;/p&gt;
&lt;p&gt;If you care, here's the complexity. In detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="brain-breaking"&gt;
&lt;h2&gt;Brain-Breaking&lt;/h2&gt;
&lt;p&gt;What broke my brain was the subtle differences between the binding of identifier to a type and (optionally) an object.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;When interpreting the syntax tree, the binding must be discovered when interpreting the value of an identifier.
Clearly, this starts with looking it up in the collection of variables, add-on functions, add-on types,
built-in functions, and built-in types.&lt;/p&gt;
&lt;p&gt;Any given name can have two definitions: a type annotation and an optional value.
In principle, the value needs an associated type.
Pragmatically -- in Python -- a Python type is already bound to the value, and we don't &lt;strong&gt;really&lt;/strong&gt; care very much about this detail.
In other implementations (e.g. Go) the value is a bunch of bytes, and without the type information, nothing can happen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When transpiling. Ah.
This is interesting because the transpilation doesn't care about variable values.
Where evaluation of the transpiled (and compiled) code does care about variable values.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When building Python from the CEL expression, we need to resolve type names and function names to an implementation class or function.
The class and function &lt;strong&gt;must&lt;/strong&gt; exist at transpile time so we can translate a CEL &lt;tt class="docutils literal"&gt;uint32&lt;/tt&gt; into the Python &lt;tt class="docutils literal"&gt;celtypes.Uint32Type&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;When executing the compiled code, we still need a context, but this only needs the variable value bindings.
The other names have already been resolved into local Python class and function references.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far, so good, right? What's brain-breaking about this?&lt;/p&gt;
&lt;p&gt;The complexity was deeply buried in implementation details of the interpreter.
Specifically, it maintained a pointless and unhelpful distinction between types, functions, and variables.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Types are a simple namespace.
The &lt;tt class="docutils literal"&gt;celpy&lt;/tt&gt; module, for example, defines all the CEL-visible types. New types can be added, leading to a union of type names.
Ideally, these have a precedence, so new types can replace the built-in types.
But. It's all very simple.&lt;/li&gt;
&lt;li&gt;Functions are a mapping from name to implementation.
The &lt;tt class="docutils literal"&gt;celpy&lt;/tt&gt; module provides the built-in mapping from non-Pythonic names like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;_&amp;amp;&amp;amp;_&amp;quot;&lt;/span&gt;&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;logical_and()&lt;/tt&gt; function.
You're not supposed to override these names, but, it's a simple dictionary, so you can.&lt;/li&gt;
&lt;li&gt;Variables are a pair of mappings: name to type, and (optionally) name to value.
It's sensible to provide a type annotation for a variable that never gets a value.
For example, in this expression,
&lt;tt class="docutils literal"&gt;choice == &amp;quot;a&amp;quot; ? a / 42 : b / 42&lt;/tt&gt;, there must be a value for &lt;tt class="docutils literal"&gt;choice&lt;/tt&gt;.
Whether or not a value is provided for &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;b&lt;/tt&gt;, however, depends on the value provided for &lt;tt class="docutils literal"&gt;choice&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the long run, the three varieties of identifiers are all the same.
This simple uniformity was &lt;strong&gt;not&lt;/strong&gt; part of the original implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bad-path-followed-badly"&gt;
&lt;h2&gt;The Bad Path Followed Badly&lt;/h2&gt;
&lt;p&gt;The type-function-variable distinction was a bad idea, followed through to it's logical confusion.&lt;/p&gt;
&lt;p&gt;The implementation had two collections (not three!):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Type names and variable names.&lt;/li&gt;
&lt;li&gt;Function names.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three collections would have made more sense, but, there are slightly different use cases.
These only became clear when transpiling:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Function name resolution happened at &amp;quot;compile&amp;quot; time.
Even when doing interpreted evaluation of the parse tree, these names were evaluated on a distinct logic path from type names and variables.&lt;/li&gt;
&lt;li&gt;Type and variable name resolution only happened at evaluation time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Want some extra complexity? When a type name is used like a function name in CEL.
&lt;tt class="docutils literal"&gt;uint32(42)&lt;/tt&gt; is valid code.
When interpreting, it required looking up the name &lt;tt class="docutils literal"&gt;&amp;quot;uint32&amp;quot;&lt;/tt&gt; in both the function and the type mappings.
It wasn't too awkwardly complicated, but it was yet another complication buried in the interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fine-it-was-complicated-what-did-i-do"&gt;
&lt;h2&gt;Fine. It Was Complicated. What Did I Do?&lt;/h2&gt;
&lt;p&gt;See the diagram up above?&lt;/p&gt;
&lt;p&gt;I started by trying to draw pictures to capture the essence of the design.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, I drew some UML class diagrams to capture the legacy design.&lt;/li&gt;
&lt;li&gt;Then, I draw some UML class diagrams to capture the new design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attempting to capture the class models made it clear how complicated the picture where.
To cope with the complicated diagrams, I started writing an explanation for my future self to understand them.&lt;/p&gt;
&lt;blockquote&gt;
Complexity is hard to explain, and that makes it bad.&lt;/blockquote&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;I did not fire up some AI-based sparking autocomplete tool to &amp;quot;summarize&amp;quot; this for me.&lt;/p&gt;
&lt;p class="last"&gt;I didn't want summary-like slop that included my software component names filling in placeholders in the text.
I wanted to actually understand it.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As I started jotting down notes to describe the pictures, I began to see the essential truth here.&lt;/p&gt;
&lt;blockquote&gt;
If it's hard to explain, that reveals a problem: rewrite it.&lt;/blockquote&gt;
&lt;p&gt;I could barely capture notes on how complicated it was.
Here's what would happen.&lt;/p&gt;
&lt;blockquote&gt;
Instead of describing it, my brain kept trying to rewrite it.&lt;/blockquote&gt;
&lt;p&gt;I've come to realize this feeling is profound, and helpful:&lt;/p&gt;
&lt;blockquote&gt;
When a rewrite seems to be less work than creating an explanation, do the rewrite.&lt;/blockquote&gt;
&lt;div class="section" id="enterprise-management"&gt;
&lt;h3&gt;Enterprise Management&lt;/h3&gt;
&lt;p&gt;In a for-profit enterprise software development environment, there's pressure to call something &amp;quot;done&amp;quot; when it isn't really done.&lt;/p&gt;
&lt;p&gt;Complexity is tolerated. Simplicity is sacrificed when it seems to be expensive.&lt;/p&gt;
&lt;p&gt;In actuality, complexity is technical debt, and the liability's drag on the enterprise accumulates quickly.&lt;/p&gt;
&lt;p&gt;I'm aware that a lot of managers are forced to say things like &amp;quot;But in the real world, we have to stop gold-plating and simply call it done.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is nonsense, but it's also very hard to counter.&lt;/p&gt;
&lt;p&gt;My advice for coping with pushy managers?
Try asking them to draw the picture.
Wait patiently, then you can add some missing details.
It's important not to simply add overwhelming piles details, but add selected details to expose a bad complexity.
This may lead them to them telling you to make it simpler so it fits their concepts.
When they tell you to fix the thing you want to fix, that's the ideal outcome; be sure to sulk anyway so they feel like they told you to do something you didn't want to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="better-design"&gt;
&lt;h3&gt;Better Design&lt;/h3&gt;
&lt;p&gt;Eventually, it became clear that an identifier is a mapping from &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;tuple[type, Any] | tuple[type]&lt;/tt&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;A type name like &lt;tt class="docutils literal"&gt;&amp;quot;Whatever&amp;quot;&lt;/tt&gt; maps to &lt;tt class="docutils literal"&gt;(celpy.TypeType, celpy.WhateverType)&lt;/tt&gt;.
There's a type and a value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A function name like &lt;tt class="docutils literal"&gt;size&lt;/tt&gt; maps to &lt;tt class="docutils literal"&gt;(celpy.CELFunction, size_function)&lt;/tt&gt;.
And, yes, a more detailed signature &lt;strong&gt;could&lt;/strong&gt; be part of this, but -- for Python -- it doesn't really matter if it has 0, 1, 2, or 3 parameters.
Any problem surfaces (later) as a &lt;tt class="docutils literal"&gt;TypeError&lt;/tt&gt; when trying to evaluate a function with improper arguments.&lt;/p&gt;
&lt;p&gt;We could leverage the &lt;tt class="docutils literal"&gt;Callable&lt;/tt&gt; generic. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(celpy.CELFunction[[Any,&lt;/span&gt; Any], celpy.BoolType], lambda x, y: x == y)&lt;/tt&gt;, could be the definition for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;_==_&amp;quot;&lt;/span&gt;&lt;/tt&gt;.
It doesn't add too much complexity, but, we'll generally ignore it, because it doesn't create much value to do this extra work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A variable has a type annotation (expected at compile time) supplemented by a value (required at evaluation time.)
Initially a variable is a singleton tuple with a type, &lt;tt class="docutils literal"&gt;(celpy.Int32Type,)&lt;/tt&gt;.
For evaluation, the context will replace this with a two-tuple that contains the actual value, &lt;tt class="docutils literal"&gt;(celpy.Int32Type, celpy.Int32Type(42))&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;What's important is that -- in Python -- the type information isn't &lt;strong&gt;required&lt;/strong&gt; at compile time.
Since other CEL implementations need it, it's expected, and we can raise exceptions when it's not available, even though we don't use it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Identifier name resolution can be simplified: a name needs to map to a tuple.
The first element is always present, and is the type.
The second element may be missing; when present, this is the value.&lt;/p&gt;
&lt;p&gt;The hard part is replacing the previous complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="uml"></category><category term="plantuml"></category><category term="solid"></category><category term="cel-python"></category><category term="cloud custodian"></category><category term="open source"></category></entry><entry><title>Testing Your AI</title><link href="https://slott56.github.io/2025-06-14-tesing_your_ai.html" rel="alternate"></link><published>2025-06-14T18:11:00-04:00</published><updated>2025-06-14T18:11:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-06-14:/2025-06-14-tesing_your_ai.html</id><summary type="html">&lt;p&gt;We test software.
We test people.&lt;/p&gt;
&lt;p&gt;My lawyer, all my various doctors, even the coffee bar on main street is subject to testing.
The coffee shop proudly posts their score from health inspections.
Want to know about food safety? Ask them.&lt;/p&gt;
&lt;p&gt;My professionals all have walls full of diplomas and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We test software.
We test people.&lt;/p&gt;
&lt;p&gt;My lawyer, all my various doctors, even the coffee bar on main street is subject to testing.
The coffee shop proudly posts their score from health inspections.
Want to know about food safety? Ask them.&lt;/p&gt;
&lt;p&gt;My professionals all have walls full of diplomas and certifications.
You know, credentials.&lt;/p&gt;
&lt;p&gt;They can speak with authority on certain topics.
They've been tested by boards and experts in their field.&lt;/p&gt;
&lt;p&gt;My daughter-in-law has a PhD.
This means she's been subject to rigorous testing by other experts in her chosen field.&lt;/p&gt;
&lt;p&gt;The crap AI in my browser?&lt;/p&gt;
&lt;p&gt;Any testing? Any certification? Any credentials? Any diploma? Any endorsements?&lt;/p&gt;
&lt;p&gt;What? nothing?&lt;/p&gt;
&lt;p&gt;An AI without a stack of diplomas is no better than a drunk bloviating in a bar.
I there was a stack of diplomas, I'd consider venturing a question in one of the diploma subject areas.
Otherwise?
Without rigorous testing by other experts?&lt;/p&gt;
</content><category term="Technologies"></category><category term="ai"></category><category term="testing"></category></entry><entry><title>Comma Comma</title><link href="https://slott56.github.io/2025-06-11-comma_comma.html" rel="alternate"></link><published>2025-06-11T07:58:00-04:00</published><updated>2025-06-11T07:58:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-06-11:/2025-06-11-comma_comma.html</id><summary type="html">&lt;p&gt;Ugh.&lt;/p&gt;
&lt;p&gt;A painful stretch of hours looking for a problem.
Working on this: &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python/wiki/Evaluation-Design"&gt;https://github.com/cloud-custodian/cel-python/wiki/Evaluation-Design&lt;/a&gt;.
I need to address a performance problem and upgrade things generally to get them ready for 3.13 and 3.14.&lt;/p&gt;
&lt;p&gt;You know how it goes, right?&lt;/p&gt;
&lt;p&gt;I touched something …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ugh.&lt;/p&gt;
&lt;p&gt;A painful stretch of hours looking for a problem.
Working on this: &lt;a class="reference external" href="https://github.com/cloud-custodian/cel-python/wiki/Evaluation-Design"&gt;https://github.com/cloud-custodian/cel-python/wiki/Evaluation-Design&lt;/a&gt;.
I need to address a performance problem and upgrade things generally to get them ready for 3.13 and 3.14.&lt;/p&gt;
&lt;p&gt;You know how it goes, right?&lt;/p&gt;
&lt;p&gt;I touched something &amp;quot;minor&amp;quot; and all kinds of acceptance tests broke beacuse I also broke something central.&lt;/p&gt;
&lt;p&gt;The horrible realization was this:&lt;/p&gt;
&lt;blockquote&gt;
There Was No Unit Test&lt;/blockquote&gt;
&lt;p&gt;When the problem is not found first by a unit test, it means there's a feature that's only tested by the acceptance test suite.&lt;/p&gt;
&lt;div class="section" id="where-do-we-stand"&gt;
&lt;h2&gt;Where do we stand?&lt;/h2&gt;
&lt;p&gt;Here are the causes for despair.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We've got an acceptance test failure.&lt;/li&gt;
&lt;li&gt;This reveals a gap in the unit tests.&lt;/li&gt;
&lt;li&gt;This also reveals the stuff doesn't work because I touched &lt;em&gt;something&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to do?&lt;/h2&gt;
&lt;p&gt;Ideally?  Fix the unit tests.&lt;/p&gt;
&lt;p&gt;Pragmatically?  Review the git change history to see what I've touched recently.&lt;/p&gt;
&lt;p&gt;Aha. A trailing comma.&lt;/p&gt;
&lt;p&gt;There was a &lt;tt class="docutils literal"&gt;{key: lambda x: some_expression, &lt;span class="pre"&gt;...}&lt;/span&gt;&lt;/tt&gt; data structure.
I took the lambda out and replaced it with a proper &lt;tt class="docutils literal"&gt;def&lt;/tt&gt; function. With a name.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def some_new_function(x: type) -&amp;gt; type:
    some_exression,
&lt;/pre&gt;
&lt;p&gt;You know how this goes.&lt;/p&gt;
&lt;p&gt;Looks good, who can see the &lt;tt class="docutils literal"&gt;,&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;Doesn't work. &lt;tt class="docutils literal"&gt;tuple()&lt;/tt&gt; shows up in unexpected places.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="big-lesson"&gt;
&lt;h2&gt;Big Lesson&lt;/h2&gt;
&lt;p&gt;Fix the unit tests.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="#python"></category><category term="syntax"></category><category term="cel-python"></category><category term="cloud custodian"></category><category term="open source"></category></entry><entry><title>Ransomware Cause and Effect</title><link href="https://slott56.github.io/2025-05-12-ransomware_cause_and_effect.html" rel="alternate"></link><published>2025-05-12T07:45:00-04:00</published><updated>2025-05-12T07:45:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-05-12:/2025-05-12-ransomware_cause_and_effect.html</id><content type="html">&lt;p&gt;This: &lt;a class="reference external" href="https://www.theregister.com/2025/05/12/opinion_column_ransomware/"&gt;https://www.theregister.com/2025/05/12/opinion_column_ransomware/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shabby IT infrastructure built with criminally low budgets.&lt;/p&gt;
&lt;p&gt;What did we expect?&lt;/p&gt;
&lt;p&gt;Of course there will be ruthless exploitation of weakness.&lt;/p&gt;
&lt;p&gt;Clearly, minimal IT budgets -- just enought to &amp;quot;keep the lights on&amp;quot; -- will provide avenues for exploitation.&lt;/p&gt;
</content><category term="Management"></category><category term="ransomeware"></category></entry><entry><title>Domnain-Specific Language</title><link href="https://slott56.github.io/2025-03-11-domain_specific_language.html" rel="alternate"></link><published>2025-03-11T15:52:00-04:00</published><updated>2025-03-11T15:52:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-03-11:/2025-03-11-domain_specific_language.html</id><summary type="html">&lt;p&gt;Generally, I try to frown on Domain-Specific Languages.
Often, a tidy set of related functions, or a group of class definitions with a few decorators can create something that's every bit as expressive as a DSL in native Python syntax.&lt;/p&gt;
&lt;p&gt;There are a few cases where a DSL can be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Generally, I try to frown on Domain-Specific Languages.
Often, a tidy set of related functions, or a group of class definitions with a few decorators can create something that's every bit as expressive as a DSL in native Python syntax.&lt;/p&gt;
&lt;p&gt;There are a few cases where a DSL can be handy.&lt;/p&gt;
&lt;p&gt;One of which is when embedding complicated content in Gherkin test cases.&lt;/p&gt;
&lt;p&gt;(We'll get the context later. I want to focus on the problem at hand.)&lt;/p&gt;
&lt;p&gt;We need to write Gherkin that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;GIVEN some configuration&lt;/span&gt;
&lt;span class="nf"&gt;WHEN we run the Character UI with input of &amp;quot;&lt;/span&gt;&lt;span class="s"&gt;...&lt;/span&gt;&lt;span class="nf"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="nf"&gt;THEN we see the right kind of responses in the log and what-not&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's essential here is the input to the Character UI (CUI).
It's a sequence of characters.&lt;/p&gt;
&lt;p&gt;In Python, it might be &lt;tt class="docutils literal"&gt;&amp;quot;o&amp;quot; + &lt;span class="pre"&gt;2*&amp;quot;mu&amp;quot;&lt;/span&gt; + &amp;quot;i&amp;quot; + &amp;quot;qy&amp;quot;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to provide a meaningful sequence of commands for the given scenario.&lt;/p&gt;
&lt;p&gt;Except, of course, Gherkin isn't Python.&lt;/p&gt;
&lt;p&gt;We have two choices:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; to evaluate a Python expression.&lt;/li&gt;
&lt;li&gt;Use a DSL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since this is a test scenario, the ridiculous arguments about &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; being &amp;quot;unsafe&amp;quot; are clearly worthy of ridicule.
Any Evil Super Genius capable of writing a Gerkin test case that includes &lt;tt class="docutils literal"&gt;import os&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;import subprocess&lt;/tt&gt; has access to the source code and doesn't need to subvert the Gherkin language test scenarios.&lt;/p&gt;
&lt;p&gt;While &lt;tt class="docutils literal"&gt;eval()&lt;/tt&gt; is appealing because it's simple, it's not always ideal.
In particular, some of the scenarios are long, and the sequence of input commands needs some supplemental information to follow through the actions and the responses to work out what the expected intermediate and final states will be.&lt;/p&gt;
&lt;div class="section" id="the-context"&gt;
&lt;h2&gt;The Context&lt;/h2&gt;
&lt;p&gt;I'm working on a Rogue-Like game. The test scenarious involve walking around and collecting treasure,
bashing monsters, and avoiding traps.
The interactions aren't too complicated, but, I'd like these Gherkin-based acceptance tests to involve an absolute minimum of specialized test harness.
A code tweak to seed the random number generator seems to be all that's appropriate.&lt;/p&gt;
&lt;p&gt;In the long run, there's a potential to work through some clear definitions of the various features of the game using RDF.
SPARQL queries might provide ways to locate the features of items or behaviors of monsters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-complication"&gt;
&lt;h2&gt;The Complication&lt;/h2&gt;
&lt;p&gt;What we want to have is something like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
o                          ⍝ acknowledge splash
room 1≔ ⟨m l⟩×4 ⟨m u⟩×2 i  ⍝ to the room exit
hall 1≔ ⟨m u⟩×5 i          ⍝ to the next room entrance
done≔ q y
&lt;/pre&gt;
&lt;p&gt;We've wrapped the essential commands in a bunch of syntax to make the commands a bit more clear.
I can include a label at the left end of the line, and a &amp;quot;comment&amp;quot; on the right end.&lt;/p&gt;
&lt;p&gt;Here's what's tricky.&lt;/p&gt;
&lt;p&gt;The test case string will contain &lt;em&gt;almost&lt;/em&gt; any ASCII character found on the keyboard.
We don't want to have a lot of meta-punctuation that's &lt;strong&gt;also&lt;/strong&gt; on the keyboard.&lt;/p&gt;
&lt;p&gt;This bumps into the same problem the classic Regular Expression language suffers from.
We want to match characters.
And we need the same set of characters to have meta-level meanings.
Sometimes &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; means the damn dot.  Sometimes &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; means &amp;quot;any&amp;quot; character.
So we have to use &lt;tt class="docutils literal"&gt;\.&lt;/tt&gt; vs. &lt;tt class="docutils literal"&gt;.&lt;/tt&gt;  to express the distinction.&lt;/p&gt;
&lt;p&gt;I decided to do this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-unicode"&gt;
&lt;h2&gt;Use Unicode&lt;/h2&gt;
&lt;p&gt;I could wrestle with some &amp;quot;meta&amp;quot; characters for grouping and repetition.
Indeed, I could parse the ordinar Regular Expression language.
These are -- technically -- regular expressions that summarize long strings of characters for the test cases.&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;I could use a few Unicode characters separate from the ASCII keyboard characters that would be input.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;⟨ and ⟩ (MATHEMATICAL LEFT ANGLE BRACKET, and MATHEMATICAL RIGHT ANGLE BRACKET)&lt;/li&gt;
&lt;li&gt;× (MULTIPLICATION SIGN)&lt;/li&gt;
&lt;li&gt;≔ and ⍝ (COLON EQUALS, and APL FUNCTIONAL SYMBOL UP SHOE JOT)&lt;/li&gt;
&lt;li&gt;␛, ␠, ␤ for Escape, Space, and Newline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These eight additional characters are not on the keyboard.
The game will never use these as input.
I don't need to use fancy escape sequences to distinguish these meta-characters from the ASCII characters that are being generated.
These few characters are difficult to type: you have to pluck them off the Unicode character pop-up window that Macos offers you.&lt;/p&gt;
&lt;p&gt;The code to handle the Gherkin doesn't have to fuss around with hyper-complex-looking regular expressions to parse this DSL.
The allowed input characters are &lt;tt class="docutils literal"&gt;.&lt;/tt&gt; and the meta-characters are simply presented as literal values in the regular expression.
(As noted above, this DSL is a regular expression language. It's highly limited.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="#python"></category><category term="domain-specific language"></category><category term="dsl"></category></entry><entry><title>Joomla Conversion</title><link href="https://slott56.github.io/2025-02-08-joomla_conversion.html" rel="alternate"></link><published>2025-02-08T08:52:00-05:00</published><updated>2025-02-08T08:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-02-08:/2025-02-08-joomla_conversion.html</id><summary type="html">&lt;p&gt;Recently, we talked about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.
This is a description of what comes next after the &amp;quot;low-level&amp;quot; conversion.
Warning: it's complicated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BLUF&lt;/strong&gt;: Take the time to get rid of SQL processing.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL …&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Recently, we talked about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.
This is a description of what comes next after the &amp;quot;low-level&amp;quot; conversion.
Warning: it's complicated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BLUF&lt;/strong&gt;: Take the time to get rid of SQL processing.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p class="last"&gt;Apple Books &lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2024-12-31_database_migration_part_i.html"&gt;Part I&lt;/a&gt;, we loaded a database and queried the metadata.
In &lt;a class="reference external" href="https://slott56.github.io/2025-01-07_database_migration_part_ii.html"&gt;Part II&lt;/a&gt;, we extracted the raw tables and loaded up a TAR Archive with NDJSON documents.
In &lt;a class="reference external" href="https://slott56.github.io/2025-01-14_database_migration_part_iii.html"&gt;Part III&lt;/a&gt;, we prepared native Python objects that had a complete representation for the various kinds of tree structures.
These include assets, categories, forum topics, image galleries, amongst other things.
In &lt;a class="reference external" href="https://slott56.github.io/2025-01-21_database_migration_part_iv.html"&gt;Part IV&lt;/a&gt;, we talked about some applications to examine the converted data, looking for useful values, keys, and relationships.&lt;/p&gt;
&lt;p&gt;We're going to skip a lot of the icky Joomla! details and focus on how to create something potentially useful.&lt;/p&gt;
&lt;div class="section" id="the-goal"&gt;
&lt;h2&gt;The Goal&lt;/h2&gt;
&lt;p&gt;Recall from Part IV, we thought we had several steaming heaps of content on the legacy site.
After exploration, we think we have the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A home page with a few articles.&lt;/li&gt;
&lt;li&gt;A right sidebar with two articles.&lt;/li&gt;
&lt;li&gt;A few content pages, each of which has links to a dozen or so narrowly-focused articles in a few categories.&lt;/li&gt;
&lt;li&gt;The master collection of articles, neatly organized by category. There's a hierarchy here, a SQL nightmare we've avoided by restructuring the data.&lt;/li&gt;
&lt;li&gt;The Kunena forums collection categories, topics, and messages. There's a hierarchy here, another SQL nightmare.&lt;/li&gt;
&lt;li&gt;The JoomGallery collection of images. Hierarchy.&lt;/li&gt;
&lt;li&gt;The Phoca collection of download files. You guessed it, another hierarchy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These aren't the only hierarchues.
Menus, modules, and assets have very tangled relationships, also.
These are a SQL-query nightmare that we've turned into simple Python references among objects.&lt;/p&gt;
&lt;p&gt;There's more, of course.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A hoard of Yahoo message-board posts which are not first-class parts of Joomla! but are first-class content.&lt;/li&gt;
&lt;li&gt;Scans of the old paper newsletters. These, too, are not first-class parts of Joomla!, but are clearly very important content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'd like to dump all of this into a form that the &lt;a class="reference external" href="https://gohugo.io"&gt;Hugo&lt;/a&gt; tool can use to approximate the original site's content and structure.
We're not going to spend too much time on the original look and feel; we can fuss with CSS to maybe match the color scheme.&lt;/p&gt;
&lt;p&gt;What we've got are two separate kinds of things in the resulting site:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;pages&amp;quot; which are Hugo Page Bundles with an &lt;tt class="docutils literal"&gt;_index.md&lt;/tt&gt; and maybe some image resources.
Each article becomes a page.
In the case of the Home page -- which has multiple articles plastered onto it -- we will need a special-case template to include the bodies of multiple articles in one place.
The Yahoo! messages are -- essentially -- articles that require some extra effort to convert.&lt;/li&gt;
&lt;li&gt;The &amp;quot;collections&amp;quot; which are Hugo Sections, using an empty &lt;tt class="docutils literal"&gt;_index.md&lt;/tt&gt; and a section-index generated by the template.
The old newsletters are little more than downloads; these &lt;em&gt;should&lt;/em&gt; be handled gracefully as a collection of Page Bundles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've also got some things we're going to set aside.
Specifically, the right side-bar for articles is a waste of screen real-estate.
It's not present for Forum or Photo Gallery.&lt;/p&gt;
&lt;p&gt;Many of the Hugo themes have a 3-column look: the top-level menu is on the left, and the page table-of-contents is on the right.
This seems to be somewhat more useful.
One very spare Hugo theme is the &lt;a class="reference external" href="https://themes.gohugo.io/themes/hugo-book"&gt;Book&lt;/a&gt; theme, which seems like a good place to start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-processes"&gt;
&lt;h2&gt;The Processes&lt;/h2&gt;
&lt;p&gt;There are two separate kinds of migration processes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Bulk migration of the collections.  We have four, separate, unique subclasses.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="The Converter Class Hierarchy" src="https://slott56.github.io/media/joomla_bulk.png" /&gt;
&lt;p class="caption"&gt;The Converter Class Hierarchy&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create the top-level pages that match the various pages of articles on the legacy site.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="The MakePage Class Hierarchy" src="https://slott56.github.io/media/joomla_makepage.png" /&gt;
&lt;p class="caption"&gt;The MakePage Class Hierarchy&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the pages depend on the bulk-conversion results.
The new path structure and new file names, and other details are (more-or-less) encapsulated in the converter classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-that-aren-t-easy"&gt;
&lt;h2&gt;Things That Aren't Easy&lt;/h2&gt;
&lt;p&gt;While Hugo handles a large number of special cases and exceptions gracefully, we have legacy content that's a bit of a mess.
Some of the mess may be my inability to ferret out all of the details of the Joomla! data model.
Other aspects of the mess also seem to be a result of the way Joomla! decides what's &amp;quot;published&amp;quot; and what's not &amp;quot;published.&amp;quot;&lt;/p&gt;
&lt;p&gt;First, and most obvious, we have HTML content.
We can -- if we want -- generate HTML pages and leave the details to Hugo.
In the long run, we'd like to move away from HTML.
We'd really like to emphasize Markdown and make HTML an exception.&lt;/p&gt;
&lt;p&gt;To do this, we state each page uses markdown, and wrap the HTML in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{&amp;lt;html&amp;gt;}}...{{&amp;lt;/html&amp;gt;}}&lt;/span&gt;&lt;/tt&gt; &amp;quot;short tags&amp;quot;.
This is -- well -- ugly.
It sequesters the HTML in those few places where it's used.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;descriptions for galleries and downloads.&lt;/li&gt;
&lt;li&gt;articles.&lt;/li&gt;
&lt;li&gt;forum messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It means a lot of code like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
print()
print(&amp;quot;{{&amp;lt;html&amp;gt;}}&amp;quot;, article.fulltext, &amp;quot;{{&amp;lt;/html&amp;gt;}}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This gets us started with &amp;quot;safe&amp;quot; HTML everywhere.
We can see a great deal of the site with this hack.&lt;/p&gt;
&lt;p&gt;Hugo leaves HTML comments in places where unsafe HTML shows up.
We can look for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;!--&lt;/span&gt; raw HTML omitted &lt;span class="pre"&gt;--&amp;gt;&lt;/span&gt;&lt;/tt&gt; in the generated HTML and include needed wrappers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="embedded-images-and-links"&gt;
&lt;h2&gt;Embedded Images and Links&lt;/h2&gt;
&lt;p&gt;There are two kinds of links that show up in articles, descriptions, and forum messages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;lt;a &lt;span class="pre"&gt;href=&amp;quot;...&amp;quot;&amp;gt;&lt;/span&gt;&lt;/tt&gt; tags&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;lt;img &lt;span class="pre"&gt;src=&amp;quot;...&amp;quot;&amp;gt;&lt;/span&gt;&lt;/tt&gt; tags&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These have a variety of forms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Proper external references with a scheme and/or a &amp;quot;netloc&amp;quot; (host name.)&lt;/li&gt;
&lt;li&gt;Redundant internal references with a scheme and netloc of the server currently hosting the legacy content.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;index.php?...&lt;/span&gt;&lt;/tt&gt; queries.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;#fragment&lt;/tt&gt; fragements of the current page.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;local/path/to/content&lt;/tt&gt; paths into the legacy site content.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;userupload/whatever&lt;/tt&gt; paths into the local directory tree outside what Joomla! manages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These devolve to three functions for link rewriting algorithms.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A filter to distinguish between &amp;quot;don't bother&amp;quot;, &amp;quot;query&amp;quot;, and &amp;quot;path&amp;quot; cases.
A URL with a scheme or netloc (or both) is ignored.
A URL that's only a fragment is also ignored.
(We could try to clean up the fragments, but, there aren't many and they require divining the author's intent, something that's hard to automate.)&lt;/li&gt;
&lt;li&gt;A function to rewrite the Joomla! queries into paths into the new content structure.&lt;/li&gt;
&lt;li&gt;A function to examine the various paths that are used and restate these as part of the new content structure.
Because we have four kinds of collections, plus the local filesystem references, we have a number of &amp;quot;search&amp;quot; functions for this case:&lt;ul&gt;
&lt;li&gt;search galleries&lt;/li&gt;
&lt;li&gt;search articles&lt;/li&gt;
&lt;li&gt;search downloads&lt;/li&gt;
&lt;li&gt;search forums&lt;/li&gt;
&lt;li&gt;search image archive files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes. This is a &lt;strong&gt;large&lt;/strong&gt; pain.
While there is some overlap, each collection is unique with unique names and a distinct resulting tree in the new content.
No, there's no trivial way to impose a single, unifying, &amp;quot;one-ring-to-rule-them-all&amp;quot; content structure.
The whole point is to respect the unique features of each category of content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-else-oh-right-section-index"&gt;
&lt;h2&gt;What Else? Oh, Right, Section Index&lt;/h2&gt;
&lt;p&gt;The Book theme doesn't (by default) include section indexes as a default structure.&lt;/p&gt;
&lt;p&gt;If there's a &lt;tt class="docutils literal"&gt;layout/_defaults/section.html&lt;/tt&gt;, this is used for those &lt;tt class="docutils literal"&gt;_index.md&lt;/tt&gt; pages that are clearly the top of a section tree.&lt;/p&gt;
&lt;p&gt;We don't need to do anything more than define the template for the index.
Here's what we started with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;main&amp;gt;
    {{ .Content }}

    {{ $pages := .Sections }}
    {{ $paginator := .Paginate $pages 25 }}

      &amp;lt;ul&amp;gt;
    {{ range $paginator.Pages }}
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .RelPermalink }}&amp;quot;&amp;gt;{{ .LinkTitle }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {{ end }}
      &amp;lt;/ul&amp;gt;

    {{ template &amp;quot;_internal/pagination.html&amp;quot; . }}
  &amp;lt;/main&amp;gt;
{{ end }}
&lt;/pre&gt;
&lt;p&gt;This doesn't sort things properly, so we need to add metadata with weighting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finally-broken-links"&gt;
&lt;h2&gt;Finally, Broken Links&lt;/h2&gt;
&lt;p&gt;We have two origins for broken links.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Stuff we couldn't find in the database.
Or, more properly, things which appear to be named in the database, but we can't find anywhere.&lt;/li&gt;
&lt;li&gt;Stuff we thought we found, but it still didn't work in Hugo.
These are essentially bugs, and we're still working through the last five.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &amp;quot;stuff we could never find&amp;quot; includes things that were likely removed from the legacy site.
Since we didn't take the time to work out all the &amp;quot;pubish this--don't publish that&amp;quot; rules, we've likely included things which were &amp;quot;unpublished&amp;quot; but not deleted.&lt;/p&gt;
&lt;p&gt;Other things are &lt;tt class="docutils literal"&gt;&amp;lt;a &lt;span class="pre"&gt;href=&amp;quot;href=&amp;quot;&amp;gt;Something&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/tt&gt; kinds of HTML. That's just broken.
There aren't many of these, and they need to be addressed manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Note the complexity of the migration.&lt;/p&gt;
&lt;p&gt;There's not much that can be done to magically simplify all the special cases.&lt;/p&gt;
&lt;p&gt;The time spent getting the database out of SQL and into Python objects gave us pleasantly simple Python objects to work with.&lt;/p&gt;
&lt;p&gt;The class hierarchies evolved slowly.
While it seems clear from the UML diagrams that these are &amp;quot;logical&amp;quot; designs, they didn't happen first.
The initial design was not so clear and simple, leading to lots of redundant and inter-dependent code.&lt;/p&gt;
&lt;p&gt;There's still a fair number of ultra-long methods that need to be decomposed into shorter, easier-to-understand methods.
The remaining bugs involve two lost files and three &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;index.php?...&lt;/span&gt;&lt;/tt&gt; references that the link rewriter didn't handle correctly.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="#python"></category><category term="database"></category><category term="sql"></category><category term="hugo"></category></entry><entry><title>Database Migration, Part IV</title><link href="https://slott56.github.io/2025-01-21_database_migration_part_iv.html" rel="alternate"></link><published>2025-01-21T07:21:00-05:00</published><updated>2025-01-21T07:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-01-21:/2025-01-21_database_migration_part_iv.html</id><summary type="html">&lt;p&gt;We're talking about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;We're talking about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p class="last"&gt;Apple Books &lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2024-12-31_database_migration_part_i.html"&gt;Part I&lt;/a&gt;, we loaded a database and queried the metadata.
In &lt;a class="reference external" href="https://slott56.github.io/2025-01-07_database_migration_part_ii.html"&gt;Part II&lt;/a&gt;, we extracted the raw tables and loaded up a TAR Archive with NDJSON documents.
In &lt;a class="reference external" href="https://slott56.github.io/2025-01-14_database_migration_part_iii.html"&gt;Part III&lt;/a&gt;, we prepared native Python objects that had a complete representation for the various kinds of tree structures.
These include assets, categories, forum topics, image galleries, amongst other things.&lt;/p&gt;
&lt;p&gt;We can now explore the details of the data, looking for the original content.&lt;/p&gt;
&lt;div class="section" id="how-joomla-works"&gt;
&lt;h2&gt;How Joomla! Works&lt;/h2&gt;
&lt;p&gt;We're avoiding looking at the Jooml! elephant, wandering around the parlor.
Yes, we &lt;strong&gt;could&lt;/strong&gt; reverse engineer the PHP to figure out how the database content is used to build the web site.
We, however, don't much care about the details.&lt;/p&gt;
&lt;p&gt;We have a pile of specific kinds of content we can see.
This includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A home page with a few articles.&lt;/li&gt;
&lt;li&gt;A right sidebar with some articles.&lt;/li&gt;
&lt;li&gt;A few pages with dozen or so narrowly-focused articles.&lt;/li&gt;
&lt;li&gt;The master collection of articles, neatly organized by category.&lt;/li&gt;
&lt;li&gt;Several separate pages of different kinds of links. These are actually articles with the links.&lt;/li&gt;
&lt;li&gt;The Kunena Forums.&lt;/li&gt;
&lt;li&gt;A Photo gallery that might be from RSGallery2 or JoomGallery.&lt;/li&gt;
&lt;li&gt;The Phoca Downloads.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While there are a bunch of Joomla! Modules that seem to be used to define the site organization,
there is also a (simpler) tree of Assets.
For the most part, it appears we need a &amp;quot;grep&amp;quot;-like tool to dig through the database looking for
content.
Then we can work out what appears to be the owning asset, bypassing many Joomla! complications.&lt;/p&gt;
&lt;p&gt;Doing a grep on the raw data is actually kind of easy.&lt;/p&gt;
&lt;p&gt;The &amp;quot;raw&amp;quot; database has the following type definition:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
DBTable = list[db_model.DBModel]

type Database = dict[str, DBTable]
&lt;/pre&gt;
&lt;p&gt;We can, then, use &lt;tt class="docutils literal"&gt;database.values()&lt;/tt&gt; to work all of the tables.
And for each table, all of the string columns looking for relevant rows.
It shapes up like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def row_match(pattern: Pattern, row: BaseModel) -&amp;gt; bool:
    for name in row.model_fields_set:
        val = getattr(row, name)
        match val:
            case str() as text if pattern.search(text):
                return True
            case _:
                pass
    return False
&lt;/pre&gt;
&lt;p&gt;Since the rows are based on &lt;tt class="docutils literal"&gt;pydantic.BaseModel&lt;/tt&gt;, we can introspect the columns and search the text-based columns to locate all rows that has a column matching the given pattern.
We search all of them because there are columns with names like &amp;quot;title&amp;quot;, &amp;quot;name&amp;quot;, and &amp;quot;alias&amp;quot;, all of which seem to have potentially relevant values, and we don't know &lt;strong&gt;precisely&lt;/strong&gt; what the semantics of them are.
Here's the containing function that wraps the &lt;tt class="docutils literal"&gt;row_match&lt;/tt&gt; function:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;staticmethod
def execute(options: argparse.Namespace) -&amp;gt; None:
    &amp;quot;&amp;quot;&amp;quot;
    Search all str columns of all tables for the pattern.
    &amp;quot;&amp;quot;&amp;quot;

    # def row_match... (shown earlier)

    database = load_db(options.source)

    Grep.logger.info(&amp;quot;grep pattern %r&amp;quot;, options.pattern)
    pattern = re.compile(options.pattern)
    matcher = partial(row_match, pattern)
    for cls in database:
        # Could reuse :meth:`where` method for this
        for match in filter(matcher, database[cls]):
            print(type(match), shorten(repr(match), 128))
&lt;/pre&gt;
&lt;p&gt;This is a method of a &lt;tt class="docutils literal"&gt;Grep&lt;/tt&gt; command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Grep(Command):
    &amp;quot;&amp;quot;&amp;quot;Make a grep-like search through the content.&amp;quot;&amp;quot;&amp;quot;
    logger = logging.getLogger(&amp;quot;Grep&amp;quot;)

    &amp;#64;staticmethod
    def config_argparse(
        subparsers: argparse._SubParsersAction, defaults: dict[str, Any]
    ) -&amp;gt; None:
        parsers_grep = subparsers.add_parser(&amp;quot;grep&amp;quot;, help=&amp;quot;grep all tables for a Regex&amp;quot;)
        parsers_grep.add_argument(&amp;quot;--pattern&amp;quot;, &amp;quot;-p&amp;quot;, action=&amp;quot;store&amp;quot;, type=str)
        Command.common_args(parsers_grep, defaults)
        parsers_grep.set_defaults(command=Grep.execute)
&lt;/pre&gt;
&lt;p&gt;The abstract base class is defined like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Command(abc.ABC):
    &amp;quot;&amp;quot;&amp;quot;CLI Command abstract base class.&amp;quot;&amp;quot;&amp;quot;

    logger: logging.Logger

    &amp;#64;staticmethod
    &amp;#64;abc.abstractmethod
    def config_argparse(
        subparsers: argparse._SubParsersAction, defaults: dict[str, Any]
    ) -&amp;gt; None: ...

    &amp;#64;staticmethod
    def common_args(parser: argparse.ArgumentParser, defaults: dict[str, Any]) -&amp;gt; None:
        parser.add_argument(
            &amp;quot;source&amp;quot;, action=&amp;quot;store&amp;quot;, type=Path, default=defaults.get(&amp;quot;source&amp;quot;)
        )

    &amp;#64;staticmethod
    &amp;#64;abc.abstractmethod
    def execute(options: argparse.Namespace) -&amp;gt; None: ...
&lt;/pre&gt;
&lt;p&gt;This provides a tidy package to wrap the &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; command so we can create a CLI to poke around in the database looking for the Home Page content, the various pages with narrowly-focused articles, and the specific articles with the links.&lt;/p&gt;
&lt;p&gt;This isn't quite enough to locate all of the various forums and galleries.
But it gets us started examining the content.
There's more -- of course -- but it's all outside the realm of SQL processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-path"&gt;
&lt;h2&gt;The Path&lt;/h2&gt;
&lt;p&gt;There are several steps on this path:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;SQL legacy data.&lt;/li&gt;
&lt;li&gt;Python extract of SQL data.&lt;/li&gt;
&lt;li&gt;Python structures without SQL complications of foreign keys. And -- more important -- with proper hierarchies.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="The database migration path from SQL to an &amp;quot;intermediate&amp;quot; data structure." src="https://slott56.github.io/media/database_migration.png" /&gt;
&lt;p class="caption"&gt;The migration path so far&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;These first few transformations aren't the goal, of course.&lt;/p&gt;
&lt;p&gt;The goal is a directory tree of markdown and images that Hugo can transform into a static web site.
The rest of the exploration and migration isn't SQL-related at all.
It's a fairly complicated matter of finding the content and restating it in a form Hugo can work with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We started with a SQL database, and carefully set it aside.
We wrote two small applications to get the data out of the SQL database.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;scan_db.py&lt;/tt&gt; -- extracts the table definitions and PlantUML descriptions from the database.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;extract_db.py&lt;/tt&gt; -- extracts the data, writing a TAR file of NDJSON documents with all the database rows.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once we had the data in a neutral form -- specifically NDJSON documents -- we could create
alternative models for the data and preparation steps to populate those models.&lt;/p&gt;
&lt;p&gt;This model is an integration part of exploring the data.
This means the exploration application evolves until it becomes the migration application.&lt;/p&gt;
&lt;p&gt;We start with a skeleton of &lt;tt class="docutils literal"&gt;view_content.py&lt;/tt&gt;.
This is based on a number of &lt;tt class="docutils literal"&gt;Builder&lt;/tt&gt; classes and a &lt;tt class="docutils literal"&gt;prepare_content()&lt;/tt&gt; function to get raw data organized into what appears to be a useful model.&lt;/p&gt;
&lt;p&gt;The steps in this &lt;tt class="docutils literal"&gt;view_content.py&lt;/tt&gt; application (and the association &lt;tt class="docutils literal"&gt;model.py&lt;/tt&gt;) are free of SQL complications.&lt;/p&gt;
&lt;p&gt;The conversion process has at least three parts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Locate the relevant objects. Often, an instance of the &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; class does this.
A relevant &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; instance doesn't seem to be universal, though.&lt;/li&gt;
&lt;li&gt;Convert the objects for use by a static site generator like Hugo. This turns out to be pretty complicated.
There are a number of distinct cases for the different kinds of content: articles, images, downloads, and forum topics.
However, since we're done with SQL, these complications don't involve database queries.&lt;/li&gt;
&lt;li&gt;Write needed &lt;tt class="docutils literal"&gt;_index.md&lt;/tt&gt; files so Hugo &lt;em&gt;Sections&lt;/em&gt; and &lt;em&gt;Page Bundles&lt;/em&gt; will mimic the legacy site's Joomla! presentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="#python"></category><category term="database"></category><category term="sql"></category></entry><entry><title>Database Migration, Part III</title><link href="https://slott56.github.io/2025-01-14_database_migration_part_iii.html" rel="alternate"></link><published>2025-01-14T07:21:00-05:00</published><updated>2025-01-14T07:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-01-14:/2025-01-14_database_migration_part_iii.html</id><summary type="html">&lt;p&gt;We're talking about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;We're talking about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p class="last"&gt;Apple Books &lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2024-12-31_database_migration_part_i.html"&gt;Part I&lt;/a&gt;, we loaded a database and queried the metadata.
In &lt;a class="reference external" href="https://slott56.github.io/2025-01-07_database_migration_part_ii.html"&gt;Part II&lt;/a&gt;, we extracted the raw tables and loaded up a TAR Archive with NDJSON documents.&lt;/p&gt;
&lt;p&gt;We can now move beyond the raw relational data into something more useful.&lt;/p&gt;
&lt;div class="section" id="things-sql-does-badly"&gt;
&lt;h2&gt;Things SQL Does Badly&lt;/h2&gt;
&lt;p&gt;One thing SQL does badly is model hierarchies. (This is one aspect of not handling graphs in general.)&lt;/p&gt;
&lt;p&gt;In a hierarchy -- a Directed Acyclic Graph -- there are nodes. A node may have a parent.
A mode may have one or more children.
A node with no parent is the &amp;quot;root&amp;quot; of the tree.
A node with no children is a &amp;quot;leaf&amp;quot; of the tree.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Diagram of a tree." src="https://slott56.github.io/media/tree_model.png" /&gt;
&lt;p class="caption"&gt;A tree&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The point is that the relationships are transitive -- the root has children that have children dot dot dot that have leaves.
No arbitrary &lt;tt class="docutils literal"&gt;&amp;lt;h1&amp;gt;&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&amp;lt;h6&amp;gt;&lt;/tt&gt; limit.
(Pragmatically, you don't &lt;em&gt;need&lt;/em&gt; very many levels.
Common SQL hacks impose limits to so a simple &lt;tt class="docutils literal"&gt;SELECT&lt;/tt&gt; statement and a programming languages like &lt;tt class="docutils literal"&gt;COBOL&lt;/tt&gt; will work.
The &lt;tt class="docutils literal"&gt;WITH&lt;/tt&gt; clause permits indefinite hierarchies, at the cost of consuming time querying the rows from the database.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="not-using-sql"&gt;
&lt;h2&gt;Not Using SQL&lt;/h2&gt;
&lt;p&gt;In ordinary, in-memory data structures, it makes sense to define tree structures like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from pydantic import BaseModel, Field, Json, WrapValidator

class AppModel(BaseModel, from_attributes=True, arbitrary_types_allowed=True):
    &amp;#64;property
    def pk(self) -&amp;gt; int:
        raise NotImplementedError()

    def __str__(self) -&amp;gt; str:
        base = super().__str__()
        return f&amp;quot;{self.__class__.__name__} {base}&amp;quot;

class Assets(AppModel):
    &amp;quot;&amp;quot;&amp;quot;
    1239 rows
    &amp;quot;&amp;quot;&amp;quot;

    &amp;#64;property
    def pk(self) -&amp;gt; int:
        return self.id

    id: int  # &amp;lt;&amp;lt;PK&amp;gt;&amp;gt; range 1..1334, in [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), ... 1234 more]
    parent_id: int  # range 1..941, in [(895, 361), (699, 51), (478, 49), (1, 42), (35, 38), ... 117 more]
    lft: int  # range 1..2475, in [(1, 2), (3, 1), (9, 1), (11, 1), (13, 1), ... 1233 more]
    rgt: int  # &amp;lt;&amp;lt;unique&amp;gt;&amp;gt; range 2..2477, in [(2477, 1), (2, 1), (8, 1), (10, 1), (12, 1), ... 1234 more]
    level: int  # range 1..5, in [(4, 766), (3, 254), (2, 90), (5, 85), (1, 43), ... 1 more]
    name: str  # &amp;lt;&amp;lt;unique&amp;gt;&amp;gt; range 'com_actionlogs'..'root.1', in [('root.1', 1), ('com_admin', 1), ('com_banners', 1), ('com_cache', 1), ('com_checkin', 1), ... 1234 more]
    title: str  # range 'Ar n-Inin (Hull #331)'..'vtest1', in [('Uncategorised', 7), ('Whitby42 #172 [...]', 5), ('General', 3), ('Introduction', 3), ('2008 Rendezvous', 3), ... 1170 more]
    rules: str  # range '{&amp;quot;core.admin&amp;quot;:[],&amp;quot;core.mana...'..'{}', in [('{}', 544), ('None', 348), ('{&amp;quot;core.delete&amp;quot;:{&amp;quot;...', 81), ('{&amp;quot;core.delete&amp;quot;:[]...', 74), ('{&amp;quot;core.delete&amp;quot;:[]...', 65), ... 25 more]

    children: list[&amp;quot;Assets&amp;quot;] = Field(default_factory=list, repr=False)
    parent: ref[&amp;quot;Assets&amp;quot;] | None = Field(default=None, repr=False)
    gallery_catgs: list[&amp;quot;Joomgallery_Catg&amp;quot;] = Field(default_factory=list, repr=False)
    galleries: list[&amp;quot;Joomgallery&amp;quot;] = Field(default_factory=list, repr=False)
    categories: list[&amp;quot;Categories&amp;quot;] = Field(default_factory=list, repr=False)
    content: list[&amp;quot;Content&amp;quot;] = Field(default_factory=list, repr=False)
    modules: list[&amp;quot;Modules&amp;quot;] = Field(default_factory=list, repr=False)
&lt;/pre&gt;
&lt;p&gt;An &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; instance has &lt;tt class="docutils literal"&gt;children: &lt;span class="pre"&gt;list[&amp;quot;Assets&amp;quot;]&lt;/span&gt;&lt;/tt&gt;.
Similarly, an &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; instance may have a weak reference to a parent, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ref[&amp;quot;Assets&amp;quot;]&lt;/span&gt; | None&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It's a weak reference because two mutual references -- parent -&amp;gt; child and child -&amp;gt; parent -- will create a circularity that defeats reference counting.
Using weak references adds a bit of fussiness, but otherwise leads to objects that play well with others.&lt;/p&gt;
&lt;p&gt;Some of these fields are nonsense. The rest describe the asset tree used by Joomla!&lt;/p&gt;
&lt;p&gt;Having an explicit &lt;tt class="docutils literal"&gt;children&lt;/tt&gt; list attached to each &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; saves going back to the database to do additional queries to find the children of a given asset.
Further, it makes it very easy to &amp;quot;walk&amp;quot; the transitive closure of all children under an asset.
And, it makes it very easy to locate the transitive closure of all parents of an asset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-we-get-there"&gt;
&lt;h2&gt;How Do We Get There?&lt;/h2&gt;
&lt;p&gt;Building the the &lt;tt class="docutils literal"&gt;model&lt;/tt&gt; objects is a two-step process.&lt;/p&gt;
&lt;div class="section" id="step-the-first"&gt;
&lt;h3&gt;Step, the first&lt;/h3&gt;
&lt;p&gt;Most of the attributes are seeded from &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; objects using a line like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
obj = Assets.model_validate(row)
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;model_validate()&lt;/tt&gt; moves data into a new instance of the  &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; model.
The &lt;tt class="docutils literal"&gt;from_attributes=True&lt;/tt&gt; means attribute name matching is used; this means our &lt;tt class="docutils literal"&gt;AppModel&lt;/tt&gt; classes must have attribute names that match the &lt;tt class="docutils literal"&gt;DBModel&lt;/tt&gt; classes.
These have have attribute names that match the original SQL.
We have a reasonably transparent mapping because of this constraint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-the-second"&gt;
&lt;h3&gt;Step, the second&lt;/h3&gt;
&lt;p&gt;The relationships don't resolve themselves.&lt;/p&gt;
&lt;p&gt;We need to attach children to parents and parents to children.
For this, we've defined a &lt;tt class="docutils literal"&gt;Builder&lt;/tt&gt; class.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class AssetsBuilder(AppModelBuilder):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;#64;startuml
    hide circle
    skinparam linetype ortho

    entity Assets
    Assets }o-- &amp;quot;parent&amp;quot; Assets
    &amp;#64;enduml
    &amp;quot;&amp;quot;&amp;quot;

    class AppTable(model.AppTable[model.Assets]):
        pass

    def __call__(self, table: DBTable) -&amp;gt; model.AppTable[model.Assets]:
        items = self.AppTable.build(model.Assets, table)
        for item in items.values():
            if item.parent_id in items:
                items[item.parent_id].add_child(item)
        return items
&lt;/pre&gt;
&lt;p&gt;In SQL world, every &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; row has a &lt;tt class="docutils literal"&gt;parent_id&lt;/tt&gt; column with a foreign key reference to another &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt;.
Or a null of some kind, maybe a database &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt;, maybe a zero.&lt;/p&gt;
&lt;p&gt;(There is &lt;strong&gt;not&lt;/strong&gt; one standard answer to null representation.
Don't &lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt; me with it &lt;strong&gt;should&lt;/strong&gt; be &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt;.
In this case, it isn't &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt;, and it doesn't have to be a &lt;tt class="docutils literal"&gt;NULL&lt;/tt&gt;.
It's usually zero. Except in one case that seems to be the result of a bug of some kind.)&lt;/p&gt;
&lt;p&gt;(We'll look at the &lt;tt class="docutils literal"&gt;AppTable.build&lt;/tt&gt; later, for now I want to focus on the hierarchies.)&lt;/p&gt;
&lt;p&gt;For each &lt;tt class="docutils literal"&gt;Assets&lt;/tt&gt; object in &lt;tt class="docutils literal"&gt;items.values()&lt;/tt&gt;, we need to see if it has a parent.
If it does have a parent, we need to as the parent to add this child.
This will do two things: add the child to the parent's &lt;tt class="docutils literal"&gt;children&lt;/tt&gt; list, and &lt;strong&gt;also&lt;/strong&gt; set the parent relationship for each of the children.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def add_child(self, item: &amp;quot;Assets&amp;quot;) -&amp;gt; None:
    self.children.append(item)
    item.parent = ref(self)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-apptable-class"&gt;
&lt;h2&gt;The &lt;tt class="docutils literal"&gt;AppTable&lt;/tt&gt; class&lt;/h2&gt;
&lt;p&gt;The final step in the &lt;tt class="docutils literal"&gt;Builder&lt;/tt&gt; is a the &lt;tt class="docutils literal"&gt;AppTable&lt;/tt&gt;; a handy structure to manage each collection of objects.&lt;/p&gt;
&lt;p&gt;In the long run, this is not required.&lt;/p&gt;
&lt;p&gt;In the short run -- where we can't navigate the database -- it's really handy for exploring.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
T_AppModel = TypeVar(&amp;quot;T_AppModel&amp;quot;)


class AppTable[T_AppModel: AppModel](dict[Any, T_AppModel]):
    &amp;quot;&amp;quot;&amp;quot;
    A mapping from PK id to AppModel instance.
    &amp;quot;&amp;quot;&amp;quot;

    logger: ClassVar[logging.Logger]

    &amp;#64;classmethod
    def build(
        cls, row_cls: type[T_AppModel], db_table: Iterable[BaseModel]
    ) -&amp;gt; &amp;quot;AppTable[T_AppModel]&amp;quot;:
        cls.logger = logging.getLogger(cls.__name__)
        app_table = AppTable[T_AppModel]()
        for row in db_table:
            obj = row_cls.model_validate(row, from_attributes=True)
            if obj.pk in app_table:
                cls.logger.error(
                    &amp;quot;Duplicate key %r, replacing %r&amp;quot;, row, app_table[obj.pk]
                )
            app_table[obj.pk] = obj
        return app_table

    def where(
        self, filter_function: Callable[[T_AppModel], bool]
    ) -&amp;gt; Iterator[T_AppModel]:
        &amp;quot;&amp;quot;&amp;quot;
        A vaguely SQL-like search.
        &amp;quot;&amp;quot;&amp;quot;
        yield from filter(filter_function, self.values())
&lt;/pre&gt;
&lt;p&gt;This is where we build a &lt;tt class="docutils literal"&gt;model.Assets&lt;/tt&gt; object from the database &lt;tt class="docutils literal"&gt;db_model.Assets&lt;/tt&gt; object.
Further, we index them by the stated PK so we don't &lt;strong&gt;need&lt;/strong&gt; to search.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;where()&lt;/tt&gt; method lets us provide a &lt;tt class="docutils literal"&gt;lambda&lt;/tt&gt; that searches the rows for matching instances.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
featured = list(self.content.Content.where(lambda c: c.featured == 1))
&lt;/pre&gt;
&lt;p&gt;This is equivalent to &lt;tt class="docutils literal"&gt;SELECT * FROM content WHERE featured = 1&lt;/tt&gt; in SQL.
Except it's a lot faster.
And a lot more flexible.&lt;/p&gt;
&lt;p&gt;This is not &lt;strong&gt;heavily&lt;/strong&gt; used.
Most of what we need, we can find with ordinary foreign-key-to-primary-key relationships that use the native Python mappings.
A few things, like specific assets that define Joomla! modules and content categories, must be found by name, and will use the &lt;tt class="docutils literal"&gt;where()&lt;/tt&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="all-the-things"&gt;
&lt;h2&gt;All the Things&lt;/h2&gt;
&lt;p&gt;Now that we can unravel the parent-child hierarchies, we can prepare the database for real work.&lt;/p&gt;
&lt;p&gt;We'll transform the original SQL-like structures to a module-like namespace
that has all the things we want, with their proper relationships.
There are 18 tables that seem to have all the content we care about.
For now, we're avoiding some of the installed Joomla! extensions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def prepare_content(database: Database) -&amp;gt; SimpleNamespace:
    content = SimpleNamespace()

    content.Phocadownload_Categories = PhocaCategoryBuilder(content)(
        database[&amp;quot;Phocadownload_Categories&amp;quot;]
    )
    content.Phocadownload = PhocaDownloadBuilder(content)(database[&amp;quot;Phocadownload&amp;quot;])

    content.Kunena_Categories = KCategoryBuilder(content)(database[&amp;quot;Kunena_Categories&amp;quot;])
    content.Kunena_Topics = KTopicBuilder(content)(database[&amp;quot;Kunena_Topics&amp;quot;])
    content.Kunena_Messages = KMessageBuilder(content)(database[&amp;quot;Kunena_Messages&amp;quot;])
    content.Kunena_Messages_Text = KMessageTextBuilder(content)(
        database[&amp;quot;Kunena_Messages_Text&amp;quot;]
    )
    content.Kunena_Attachments = KAttachmentBuilder(content)(
        database[&amp;quot;Kunena_Attachments&amp;quot;]
    )

    content.Assets = AssetsBuilder(content)(database[&amp;quot;Assets&amp;quot;])

    content.Rsgallery2_Galleries = RSGalleryBuilder(content)(
        database[&amp;quot;Rsgallery2_Galleries&amp;quot;]
    )
    content.Rsgallery2_Files = RSFileBuilder(content)(database[&amp;quot;Rsgallery2_Files&amp;quot;])

    content.Joomgallery_Catg = JGCatgBuilder(content)(database[&amp;quot;Joomgallery_Catg&amp;quot;])
    content.Joomgallery = JGalleryBuilder(content)(database[&amp;quot;Joomgallery&amp;quot;])

    content.Categories = CategoriesBuilder(content)(database[&amp;quot;Categories&amp;quot;])
    content.Content = ContentBuilder(content)(database[&amp;quot;Content&amp;quot;])

    content.Modules = ModulesBuilder(content)(database[&amp;quot;Modules&amp;quot;])
    content.Menu = MenuBuilder(content)(database[&amp;quot;Menu&amp;quot;])
    content.Weblinks = WeblinksBuilder(content)(database[&amp;quot;Weblinks&amp;quot;])

    # The following are of dubious value...
    content.Modules_Menu = ModulesMenuAssoc(content)(database[&amp;quot;Modules_Menu&amp;quot;])
    content.Content_Frontpage = ContentFPBuilder(content)(database[&amp;quot;Content_Frontpage&amp;quot;])

    return content
&lt;/pre&gt;
&lt;p&gt;Each &lt;tt class="docutils literal"&gt;Builder&lt;/tt&gt; applies several transformative steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Build &lt;tt class="docutils literal"&gt;model&lt;/tt&gt; objects from &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; objects for the relevant few &lt;tt class="docutils literal"&gt;DBTable&lt;/tt&gt; objects.&lt;/li&gt;
&lt;li&gt;Make &lt;tt class="docutils literal"&gt;AppTable&lt;/tt&gt; dictionaries from &lt;tt class="docutils literal"&gt;object.pk&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;object&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Make trees for objects with parent-child relationships.&lt;/li&gt;
&lt;li&gt;Resolve other inter-object references.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="next"&gt;
&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;Once we've got a proper namespace full of objects, we can start to explore it to find the relevant pieces.&lt;/p&gt;
&lt;p&gt;Are are the lines we've drawn to distinguish the various parts of our processing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;scan_db.py -- extracts the table definitions and PlantUML descriptions from the database.&lt;/li&gt;
&lt;li&gt;extract_db.py -- extracts the data, writing a TAR file of NDJSON documents with all the database rows.&lt;/li&gt;
&lt;li&gt;view_content.py -- &lt;tt class="docutils literal"&gt;Builder&lt;/tt&gt; classes and &lt;tt class="docutils literal"&gt;prepare_content()&lt;/tt&gt; function to get raw data organized.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The steps in &lt;tt class="docutils literal"&gt;view_content&lt;/tt&gt; are free of SQL complications.&lt;/p&gt;
&lt;p&gt;In the next section we'll look at the conversion process.&lt;/p&gt;
&lt;p&gt;There will be three parts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Locate the relevant objects&lt;/li&gt;
&lt;li&gt;Convert the objects for use by a static site generator like Hugo. This turns out to be pretty complicated. However, since we're done with SQL, the complications don't involve database queries.&lt;/li&gt;
&lt;li&gt;Write needed &lt;tt class="docutils literal"&gt;_index.md&lt;/tt&gt; files the mimic the legacy site's Joomla! presentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="#python"></category><category term="database"></category><category term="sql"></category></entry><entry><title>Database Migration, Part II</title><link href="https://slott56.github.io/2025-01-07_database_migration_part_ii.html" rel="alternate"></link><published>2025-01-07T13:21:00-05:00</published><updated>2025-01-07T13:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2025-01-07:/2025-01-07_database_migration_part_ii.html</id><summary type="html">&lt;p&gt;We're talking about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;We're talking about extracting data from complex relational databases.
This is -- in a way -- another case study for my &lt;em&gt;Unlearning SQL&lt;/em&gt; book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p class="last"&gt;Apple Books &lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2024-12-31_database_migration_part_i.html"&gt;Part I&lt;/a&gt;, we loaded a database and queried the metadata.
From this we created Python &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Column&lt;/tt&gt; objects that we used to record what we know about the data.
These class could also emit metadata in other formats.
The other formats include&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://plantuml.com"&gt;PlantUML&lt;/a&gt; ERD diagrams.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.pydantic.dev/latest/"&gt;Pydantic&lt;/a&gt; class definitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far, these have given us a sense of what the data is.&lt;/p&gt;
&lt;p&gt;We've fiddled with the PUML file(s) to create ERD's that seem to capture our initial understandings.&lt;/p&gt;
&lt;p&gt;We've got a &lt;tt class="docutils literal"&gt;db_model.py&lt;/tt&gt; file full of class definitions we can use for further work.&lt;/p&gt;
&lt;div class="section" id="stumble-2-extract"&gt;
&lt;h2&gt;Stumble 2, Extract&lt;/h2&gt;
&lt;p&gt;We can write a database extract (and database reloader) to work with the NDJSON extracts.
Then we can kiss MariaDB goodbye, and stop the service from running on our laptop.&lt;/p&gt;
&lt;p&gt;The database metadata includes a lot of tables. We don't want all of them.
It's hard to be sure &lt;strong&gt;exactly&lt;/strong&gt; which ones we need, so it pays to be flexible.&lt;/p&gt;
&lt;p&gt;What makes sense to me is creating a list of relevant tables in the &lt;tt class="docutils literal"&gt;scan_db.py&lt;/tt&gt; application.
Then we can run it as often as we uncover another table that seems relevant.&lt;/p&gt;
&lt;p&gt;The extract can use a function like this to find the tables in the &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; module.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def class_iter(module: ModuleType) -&amp;gt; Iterator[type]:
    other_imported_names = {
        &amp;quot;Decimal&amp;quot;,
        &amp;quot;ClassVar&amp;quot;,
        &amp;quot;Any&amp;quot;,
        &amp;quot;BaseModel&amp;quot;,
        &amp;quot;Field&amp;quot;,
        &amp;quot;DBModel&amp;quot;,
        &amp;quot;__class__&amp;quot;,  # SimpleNamespace
    }
    for name in dir(module):
        object = getattr(module, name)
        match object:
            case typing._AnyMeta():  # type: ignore
                pass
            case type() if name not in other_imported_names:
                print(&amp;quot;DEBUG&amp;quot;, name)
                yield object
&lt;/pre&gt;
&lt;p&gt;This yields the class definitions.
Here's the entire list of classes in the module.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
classes = list(class_iter(db_model))
&lt;/pre&gt;
&lt;p&gt;Since each of our classes has a query and a &lt;tt class="docutils literal"&gt;from_query()&lt;/tt&gt; method,
getting the data for a given table looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def get_data(
    connection: mariadb.Connection, cls: type[db_model.DBModel]
) -&amp;gt; list[db_model.DBModel]:
    try:
        with connection.cursor() as crsr:
            crsr.execute(cls.query)
            data = [cls.from_query(row) for row in crsr.fetchall()]
            # pprint.pprint(data)
            return data
        print(cls.__name__, len(data))
    except AttributeError:
        print(f&amp;quot;***UNEXPECTED {cls.__name__}&amp;quot;)
        # print(cls.query)
        raise
&lt;/pre&gt;
&lt;p&gt;Execute the table's query. Convert the table's rows to the &lt;strong&gt;pydantic&lt;/strong&gt; model instances.
Return the list of instances.&lt;/p&gt;
&lt;p&gt;Producing an line in an NDJSON file is delightfully simple with Pydantic.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
row.model_dump_json(indent=None)
&lt;/pre&gt;
&lt;p&gt;While we can easily make a bunch of NDJSON files, it offends me to have a whole directory full of files that we're only going to read.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stumble-3-the-working-files"&gt;
&lt;h2&gt;Stumble 3, The Working Files&lt;/h2&gt;
&lt;p&gt;My first preference was to pickle the data.
It's easy to create a dictionary that maps table name to  a list of row instances.&lt;/p&gt;
&lt;p&gt;We have a common base class&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class DBModel(BaseModel):
    query: ClassVar[str]

    &amp;#64;classmethod
    def from_query(cls, row: tuple[Any, ...]) -&amp;gt; &amp;quot;DBModel&amp;quot;:
        raise NotImplementedError()
&lt;/pre&gt;
&lt;p&gt;This means the database is&lt;/p&gt;
&lt;pre class="literal-block"&gt;
type Database = map[str, list[DBModel]]
&lt;/pre&gt;
&lt;p&gt;We can pickle this mapping and recover the entire thing.&lt;/p&gt;
&lt;p&gt;It's really quite elegant. And pretty fast, too.&lt;/p&gt;
&lt;div class="section" id="big-problem"&gt;
&lt;h3&gt;Big Problem&lt;/h3&gt;
&lt;p&gt;There's a big problem.&lt;/p&gt;
&lt;p&gt;The data is essentially wired to specific class definitions.
Change the class too much, and the data no longer loads from the pickle.&lt;/p&gt;
&lt;p&gt;Since this is exploratory, we won't know anything up front.
We need more flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="course-correction"&gt;
&lt;h2&gt;Course Correction&lt;/h2&gt;
&lt;p&gt;Pickle didn't work. What's next?&lt;/p&gt;
&lt;p&gt;Make a TAR Archive (compressed) with all the NDJSON members.
The extra CPU of compression is more than offset by the reduced time to do physical I/O on a smaller file.&lt;/p&gt;
&lt;p&gt;Here's the TAR write:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def save_data(
    content_path: Path,
    archive: tarfile.TarFile,
    cls: type[db_model.DBModel],
    data: list[db_model.DBModel],
) -&amp;gt; None:
    detail = (content_path / cls.__name__).with_suffix(&amp;quot;.ndjson&amp;quot;)
    with open(detail, &amp;quot;w&amp;quot;) as detail_file:
        for row in data:
            print(row.model_dump_json(indent=None), file=detail_file)
    info = archive.gettarinfo(detail, arcname=cls.__name__)
    print(info.name, info.size)
    with open(detail, &amp;quot;rb&amp;quot;) as detail_file:
        archive.addfile(info, detail_file)
    detail.unlink()
&lt;/pre&gt;
&lt;p&gt;The idea is to write a table of data to a file at the &lt;tt class="docutils literal"&gt;detail&lt;/tt&gt; path, add this to the open TAR archive, and then delete the &lt;tt class="docutils literal"&gt;detail&lt;/tt&gt; entry.
This leaves us with a TAR file filled with the extracted database rows.
Further, it's in JSON notation, so we can fiddle with the schema.&lt;/p&gt;
&lt;p&gt;The original SQL backup was 167,885,194 bytes.&lt;/p&gt;
&lt;p&gt;The useful subset of data, compressed, is 28,815,360 bytes. 17% of the original. About 1/5 the size.&lt;/p&gt;
&lt;p&gt;Simply rebuilding the original db_model collections goes quickly.
And I can make small changes without breaking things.&lt;/p&gt;
&lt;p&gt;It turns out, I don't want to make &lt;strong&gt;small&lt;/strong&gt; changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-raw-database-model"&gt;
&lt;h2&gt;The Raw Database Model&lt;/h2&gt;
&lt;p&gt;The real model is derived from the class definitions in the  &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt;  module.
I don't need the SQL query.  Or the &lt;tt class="docutils literal"&gt;from_query()&lt;/tt&gt; method.
The &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; module is full of classes that have these features, but doesn't need them.&lt;/p&gt;
&lt;p&gt;To move on in the data pipeline, I need to reload data using &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; class definitions.
Later, we'll start transforming this data as we undo the mischief of normalization.
Loading the data for exploration is done by this function:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def load_db(source_path: Path) -&amp;gt; Database:
    logger = logging.getLogger(&amp;quot;load_db&amp;quot;)
    database: Database = {}

    with tarfile.open(source_path, &amp;quot;r&amp;quot;) as archive:
        for item in archive.getmembers():
            cls = getattr(db_model, item.name)
            raw_file = archive.extractfile(item)
            if raw_file:
                reader = io.TextIOWrapper(raw_file)
                rows = DBTable(cls.model_validate_json(line) for line in reader)
                database[item.name] = rows
            else:
                logger.error(&amp;quot;archive item %r as no content&amp;quot;, item)
    return database
&lt;/pre&gt;
&lt;p&gt;I can read and validate the NDJSON documents with the following generator expression.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(cls.model_validate_json(line) for line in reader)
&lt;/pre&gt;
&lt;p&gt;We can use the &lt;strong&gt;Pydantic&lt;/strong&gt; &lt;tt class="docutils literal"&gt;model_validate_json()&lt;/tt&gt; method to create my target object.
I can now adjust attribute definitions in a limited way, and add new attributes.&lt;/p&gt;
&lt;p&gt;First, however, we need to take a look at the &lt;tt class="docutils literal"&gt;DBTable&lt;/tt&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-dbtable-collection"&gt;
&lt;h2&gt;The DBTable Collection&lt;/h2&gt;
&lt;p&gt;For the purposes of reading the db tables back in from the TAR archive,
we have these two definitions:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class DBTable(list[db_model.DBModel]):
    pass


type Database = dict[str, DBTable]
&lt;/pre&gt;
&lt;p&gt;Yes, &lt;tt class="docutils literal"&gt;DBTable&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;list&lt;/tt&gt;. It could do more. It turns out, nothing more is needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next"&gt;
&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;Once we've got a dictionary full of lists of data, we need to restructure it into a more useful form.
This means drawing some more lines to distinguish the various parts of our processing.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;scan_db.py -- extracts the table definitions and PlantUML descriptions from the database.&lt;/li&gt;
&lt;li&gt;extract_db.py -- extracts the data, writing a TAR file of NDJSON documents with all the database rows.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reading and &amp;quot;preparing&amp;quot; the data for deeper analysis is a separate application.&lt;/p&gt;
&lt;p&gt;It took a few mistakes to learn that the &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; schema &lt;strong&gt;must&lt;/strong&gt; match the database.
We really can't tweak it.
We need to build a model derived from this model.&lt;/p&gt;
&lt;p&gt;In the next section we'll define the &lt;tt class="docutils literal"&gt;model.AppModel&lt;/tt&gt; class for objects derived from the &lt;tt class="docutils literal"&gt;db_table.DBModel&lt;/tt&gt; objects.
These &lt;tt class="docutils literal"&gt;AppModel&lt;/tt&gt; classes can have a number of additional fields and distinct annotated types and validation rules.
This makes it easy to build them using a line like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
obj = row_cls.model_validate(row, from_attributes=True)
&lt;/pre&gt;
&lt;p&gt;the &lt;tt class="docutils literal"&gt;model_validate()&lt;/tt&gt; moves data into the &lt;tt class="docutils literal"&gt;row_cls&lt;/tt&gt; model. The &lt;tt class="docutils literal"&gt;from_attributes=True&lt;/tt&gt; means attribute name matching is used.
This means our &lt;tt class="docutils literal"&gt;AppModel&lt;/tt&gt; classes must have attribute names that match the &lt;tt class="docutils literal"&gt;DBModel&lt;/tt&gt; classes.
These have have attribute names that match the original SQL.
We have a reasonably transparent mapping because of this constraint.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="#python"></category><category term="database"></category><category term="sql"></category></entry><entry><title>Database Migration, Part I</title><link href="https://slott56.github.io/2024-12-31_database_migration_part_i.html" rel="alternate"></link><published>2024-12-31T13:21:00-05:00</published><updated>2024-12-31T13:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-12-31:/2024-12-31_database_migration_part_i.html</id><summary type="html">&lt;p&gt;Let's talk about extracting data from complex relational databases.
This is -- in a way -- another case study for my Unlearning SQL book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Let's talk about extracting data from complex relational databases.
This is -- in a way -- another case study for my Unlearning SQL book.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;&lt;em&gt;Unlearning SQL&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;KDP &lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lulu &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Google Play &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p class="last"&gt;Apple Books &lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This case study is about legacy database preservation: we want the data.
We don't want the code.&lt;/p&gt;
&lt;p&gt;Let's reach back 20 years, when packages like Joomla! were -- essentially -- the only way to have interactive, peer-maintained content.
Facebook barely existed before 2005.
Yahoo! Groups was what we had been using to share information as a kind of &amp;quot;social media&amp;quot; up until 2008, when the Joomla! site was started.&lt;/p&gt;
&lt;p&gt;We have web content reaching back almost two decades, most of it in a Jooma! database.
Some of the Joomla! articles are extracts stretching from the Yahoo! groups.
Currently, the user base interacts through Facebook, rarely touching this complicated web content.&lt;/p&gt;
&lt;p&gt;We want to preserve what's in Joomla! and migrate it into a simpler publishing system like Hugo (&lt;a class="reference external" href="https://gohugo.io"&gt;https://gohugo.io&lt;/a&gt;)
We intend to sacrifice some of the Kunena features. However. Since no one is interacting via the Kunena forums, this isn't a real sacrifice.&lt;/p&gt;
&lt;p&gt;Let's work through the conversion of data from a relational database to a directory of Markdown files.
One stumbling step at a time.&lt;/p&gt;
&lt;div class="section" id="stumble-1-what-do-we-have"&gt;
&lt;h2&gt;Stumble 1: What do we have?&lt;/h2&gt;
&lt;p&gt;We have a snapshot of the database. It's MariaDB/MySQL, and the snapshot is a big SQL script.
We can install MariaDB on our laptop and run the script.&lt;/p&gt;
&lt;p&gt;We have the data.&lt;/p&gt;
&lt;p&gt;What do we have?&lt;/p&gt;
&lt;p&gt;The Joomla! PHP world has a bunch of admin apps and tools to peek at the database.
We're not interested in these because they run on the server, which we'd like to disconnect from.&lt;/p&gt;
&lt;p&gt;First, we have tables&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SELECT TABLE_NAME, TABLE_ROWS
FROM   information_schema.TABLES
WHERE  TABLE_SCHEMA = &amp;quot;testdb&amp;quot;
AND    TABLE_TYPE = &amp;quot;BASE TABLE&amp;quot;
&lt;/pre&gt;
&lt;p&gt;We can extract some details and helps us discover the Joomla! naming convention.
There's a prefix in front of each table name. &lt;tt class="docutils literal"&gt;j930_&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;jos_&lt;/tt&gt; seem to be prefixes used
by previous admins to preserve some data for a test instance (or something.)
While we don't &lt;strong&gt;know&lt;/strong&gt; this, the overlapping names and smaller (or zero) row counts suggest these don't matter.
It's the &lt;tt class="docutils literal"&gt;j500_&lt;/tt&gt; tables that matter.&lt;/p&gt;
&lt;p&gt;It's best to fuss about with this initial peeking in a notebook, just uncover the metadata, and see what's going on.&lt;/p&gt;
&lt;p&gt;Plan to abandon the notebook.&lt;/p&gt;
&lt;p&gt;Here's how we prefer to deal with the schema&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;dataclass
class Table:
    name: str
    num_rows: int | None = field(default=None)
    columns: dict[str, Column] = field(default_factory=dict)

    query: ClassVar[str] = &amp;quot;&amp;quot;&amp;quot;
        SELECT TABLE_NAME, TABLE_ROWS
        FROM   information_schema.TABLES
        WHERE  TABLE_SCHEMA = &amp;quot;testdb&amp;quot;
        AND    TABLE_TYPE = &amp;quot;BASE TABLE&amp;quot;
    &amp;quot;&amp;quot;&amp;quot;

    &amp;#64;classmethod
    def from_query(cls, row: tuple[Any, ...]) -&amp;gt; &amp;quot;Table&amp;quot;:
        return Table(name=row[0], num_rows=row[1])
&lt;/pre&gt;
&lt;p&gt;A reusable function can execute the query, and then use the &lt;tt class="docutils literal"&gt;from_query()&lt;/tt&gt; method
to build rows of the &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; class.&lt;/p&gt;
&lt;p&gt;The column metadata is a separate dataclass:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;dataclass
class Column:
    name: str
    type_name: str
    size: int
    python_type: str | None
    optionality_type: OptionalityType
    domain_type: DomainType | None = field(default=None)
    not_used: bool = field(default=False)
    val_min: Any = field(default=None)
    val_max: Any = field(default=None)
    val_common: list[tuple[Any, int]] = field(default_factory=list)
    val_cardinality: int = field(default=0)

    query: ClassVar[str] = &amp;quot;&amp;quot;&amp;quot;
        SELECT COLUMN_NAME, IS_NULLABLE, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH
        FROM information_schema.COLUMNS
        WHERE TABLE_SCHEMA = &amp;quot;testdb&amp;quot;
        AND   TABLE_NAME = ?
    &amp;quot;&amp;quot;&amp;quot;

    &amp;#64;classmethod
    def from_query(cls, row: tuple[Any, ...]) -&amp;gt; &amp;quot;Column&amp;quot;:
        assert row[2].upper() in PYTHON_TYPE, f&amp;quot;unknown type {row[2]}&amp;quot;
        return Column(
            name=row[0],
            type_name=row[2],
            size=row[3],
            python_type=PYTHON_TYPE.get(row[2].upper()),
            optionality_type=(
                OptionalityType.REQUIRED if row[1] == &amp;quot;NO&amp;quot; else OptionalityType.OPTIONAL
            ),
        )
&lt;/pre&gt;
&lt;p&gt;The various &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;val_...&lt;/span&gt;&lt;/tt&gt; attributes are populated later.
We need to query the data to get the minimum value, maximum value, the five most common values, and a general sense of the overall cardinality (is each value unique?)&lt;/p&gt;
&lt;p&gt;We can see what the columns mean when we see sample data.&lt;/p&gt;
&lt;p&gt;We'll do this with methods that are part of the &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; dataclass.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def rows(self, connection: mariadb.Connection) -&amp;gt; Iterator[dict[str, Any]]:
    query = f&amp;quot;&amp;quot;&amp;quot;SELECT * FROM {self.name}&amp;quot;&amp;quot;&amp;quot;
    with connection.cursor() as c:
        c.execute(query)
        column_names = [col[0] for col in c.description]
        for rt in c.fetchall():
            row_dict = dict(zip(column_names, rt))
            yield row_dict

def set_domain(self, connection: mariadb.Connection) -&amp;gt; None:
    raw_domains = collections.defaultdict(collections.Counter)
    for row in self.rows(connection):
        for name in self.columns.keys():
            raw_domains[name][row[name]] += 1
    for name, col in self.columns.items():
        col.set_domain(raw_domains[name])
&lt;/pre&gt;
&lt;p&gt;These were not shown above to keep the initial definition of &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; clear.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;set_domain()&lt;/tt&gt; method for a &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; gets all of the data, and then -- column by column -- sets the data domain for the column.
For vast tables, these has to be approached in a different.
For this databsae, with under 10,000 rows in any given table, fetching all the rows works out quite nicely.&lt;/p&gt;
&lt;p&gt;This relies on a &lt;tt class="docutils literal"&gt;set_domain()&lt;/tt&gt; method for the &lt;tt class="docutils literal"&gt;Column&lt;/tt&gt; class. Like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def set_domain(self, frequencies: collections.Counter[Any]) -&amp;gt; None:
    values = list(filter(None, frequencies.keys()))
    if values:
        self.val_min = min(values)
        self.val_max = max(values)
        self.val_common = frequencies.most_common(5)
        self.val_cardinality = len(frequencies)
        if all(f == 1 for val, f in frequencies.items() if val is not None):
            self.domain_type = DomainType.UNIQUE
        else:
            self.domain_type = DomainType.NON_UNIQUE
    else:
        self.not_used = True
&lt;/pre&gt;
&lt;p&gt;There are two enum class definitions that are part of this, also.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class DomainType(StrEnum):
    UNIQUE = &amp;quot;unique&amp;quot;
    NON_UNIQUE = &amp;quot;non-unique&amp;quot;


class OptionalityType(StrEnum):
    OPTIONAL = &amp;quot;nullable&amp;quot;
    REQUIRED = &amp;quot;non-nullable&amp;quot;
&lt;/pre&gt;
&lt;p&gt;With this, we can build a schema -- a collection of &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; definitions -- from the database.
We can then view the beast as a whole.&lt;/p&gt;
&lt;p&gt;Which means what?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-we-explore"&gt;
&lt;h2&gt;How do we Explore?&lt;/h2&gt;
&lt;p&gt;Step 1 is to build some ERD diagrams.&lt;/p&gt;
&lt;p&gt;We can add a method to &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; to expose it as a Plant UML entity:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def as_puml(self) -&amp;gt; str:
    buffer = io.StringIO()
    with contextlib.redirect_stdout(buffer):
        print(f&amp;quot;entity {self.name} {{ /' {self.num_rows} rows '/&amp;quot;)
        for col in (c for c in self.columns.values() if not c.not_used):
            flag = (
                &amp;quot;* &amp;quot;
                if col.domain_type == DomainType.UNIQUE
                and col.optionality_type == OptionalityType.REQUIRED
                else &amp;quot;&amp;quot;
            )
            print(
                f&amp;quot;  {flag}{col.name} {col.type_name}({col.size}) /' {col.optionality_type}, {col.domain_type}, range {col.value_range}, {col.value_common} '/&amp;quot;
            )
        print(&amp;quot;}&amp;quot;)
    return buffer.getvalue()
&lt;/pre&gt;
&lt;p&gt;The output is a block of text like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
entity j500_assets { /' 1239 rows '/
  * id INT(4) /' non-nullable, unique, range 1..1334, [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), ... 1234 more] '/
  parent_id INT(4) &amp;lt;&amp;lt;FK&amp;gt;&amp;gt; /' non-nullable, non-unique, range 1..941, [(895, 361), (699, 51), (478, 49), (1, 42), (35, 38), ... 117 more] '/
  --
  lft INT(4) /' non-nullable, non-unique, range 1..2475, [(1, 2), (3, 1), (9, 1), (11, 1), (13, 1), ... 1233 more] '/
  rgt INT(4) /' non-nullable, unique, range 2..2477, [(2477, 1), (2, 1), (8, 1), (10, 1), (12, 1), ... 1234 more] '/
  level INT(4) /' non-nullable, non-unique, range 1..5, [(4, 766), (3, 254), (2, 90), (5, 85), (1, 43), ... 1 more] '/
  name VARMYSQL(200) /' non-nullable, unique, range 'com_actionlogs'..'root.1', [('root.1', 1), ('com_admin', 1), ('com_banners', 1), ('com_cache', 1), ('com_checkin', 1), ... 1234 more] '/
  title VARMYSQL(400) /' non-nullable, non-unique, range 'Ar n-Inin (Hull #331)'..'vtest1', [('Uncategorised', 7), ('Whitby42 #172 [...]', 5), ('General', 3), ('Introduction', 3), ('2008 Rendezvous', 3), ... 1170 more] '/
  rules VARMYSQL(20480) /' non-nullable, non-unique, range '{&amp;quot;core.admin&amp;quot;:[],&amp;quot;core.mana...'..'{}', [('{}', 544), ('None', 348), ('{&amp;quot;core.delete&amp;quot;:{&amp;quot;...', 81), ('{&amp;quot;core.delete&amp;quot;:[]...', 74), ('{&amp;quot;core.delete&amp;quot;:[]...', 65), ... 25 more] '/
}
note bottom: 1239 rows
&lt;/pre&gt;
&lt;p&gt;This isn't too pretty, but when the PlantUML tool finishes with it, it's a tidy little box in an ERD.
The long &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/'...'/&lt;/span&gt;&lt;/tt&gt; comments are not shown in the diagram.
They're helpful in the file because they show us the domain of values in a column.&lt;/p&gt;
&lt;p&gt;Once we have all of the entities in a &lt;tt class="docutils literal"&gt;.puml&lt;/tt&gt; file, we can insert relationships.
We can also partition the tables into packages to try and discern which ones have interesting content, and
which ones are operational overheads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-we-didn-t-do"&gt;
&lt;h2&gt;What We Didn't Do&lt;/h2&gt;
&lt;p&gt;An important part of this is to &lt;strong&gt;not&lt;/strong&gt; -- emphatically &lt;strong&gt;not&lt;/strong&gt; -- build an ORM layer.
We don't really want to try and get ORM class definitions wrapped around a legacy database.
It's technically possible.
The tables are small, so there may not be profound performance problems.&lt;/p&gt;
&lt;p&gt;It's much, much easier to extract that data from the database, and build native Python objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-we-will-do"&gt;
&lt;h2&gt;What We Will Do&lt;/h2&gt;
&lt;p&gt;The goal is to have a &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; module with &lt;strong&gt;Pydantic&lt;/strong&gt; &lt;tt class="docutils literal"&gt;BaseModel&lt;/tt&gt; definitions for the tables we want to preserve.
As we'll see in the next section, we can query the database and populate the &lt;strong&gt;Pydantic&lt;/strong&gt; class definitions.
We can then dump these Python objects into NDJSON files so we can explore without the overheads of SQL or MariaDB.&lt;/p&gt;
&lt;p&gt;The relational model -- and the requirement to normalize -- has decomposed relatively straight-forward
objects into a table of tables with primary keys, foreign keys, and equijoin operations.
We want to undo the normalization and recreate a more sensible structure in native Python.
We really want to have nested &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; statements without have to create cursors and execute queries.&lt;/p&gt;
&lt;p&gt;We want to be able to create dictionaries without the overhead of defining an index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-database-model"&gt;
&lt;h2&gt;The Database Model&lt;/h2&gt;
&lt;p&gt;The starting position is some &lt;strong&gt;Pydantic&lt;/strong&gt; class definitions for the database tables.
This is another method of the &lt;tt class="docutils literal"&gt;Table&lt;/tt&gt; class.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def as_dataclass(self) -&amp;gt; str:
    &amp;quot;&amp;quot;&amp;quot;Actually, as pydantic DBModel subclass...&amp;quot;&amp;quot;&amp;quot;
    buffer = io.StringIO()
    with contextlib.redirect_stdout(buffer):
        column_subset = [c for c in self.columns.values() if not c.not_used]
        keys = set(
            col.name
            for col in column_subset
            if col.domain_type == DomainType.UNIQUE
            and col.optionality_type == OptionalityType.REQUIRED
        )
        print(f&amp;quot;class {self.class_name}(DBModel):&amp;quot;)
        print('    &amp;quot;&amp;quot;&amp;quot;')
        print(f&amp;quot;    {self.num_rows} rows&amp;quot;)
        print('    &amp;quot;&amp;quot;&amp;quot;')
        for col in column_subset:
            annotation = (
                f&amp;quot;{col.python_type}&amp;quot;
                if col.optionality_type == OptionalityType.REQUIRED
                else f&amp;quot;{col.python_type} | None&amp;quot;
            )
            key = &amp;quot;&amp;lt;&amp;lt;PK&amp;gt;&amp;gt; &amp;quot; if col.name in keys else &amp;quot;&amp;quot;
            print(
                f&amp;quot;    {col.name}: {annotation}  # {key}range {col.value_range}, in {col.value_common}&amp;quot;
            )
        wrapped_names = [f&amp;quot;`{col.name}`&amp;quot; for col in column_subset]
        print()
        print('    query: ClassVar[str] = &amp;quot;&amp;quot;&amp;quot;')
        print(f&amp;quot;        SELECT {', '.join(wrapped_names)}&amp;quot;)
        print(f&amp;quot;          FROM {self.name}&amp;quot;)
        print('    &amp;quot;&amp;quot;&amp;quot;')
        print()
        print(&amp;quot;    &amp;#64;classmethod&amp;quot;)
        print(
            f&amp;quot;    def from_query(cls, row: tuple[Any, ...]) -&amp;gt; '{self.class_name}':&amp;quot;
        )
        print(f&amp;quot;        return {self.class_name}(&amp;quot;)
        for position, col in enumerate(column_subset):
            print(f&amp;quot;            {col.name}=row[{position}],&amp;quot;)
        print(&amp;quot;        )&amp;quot;)
    return buffer.getvalue()
&lt;/pre&gt;
&lt;p&gt;It writes the definition as Python code.
We can assemble a &lt;tt class="docutils literal"&gt;db_model&lt;/tt&gt; class from these.
Once we have that we're in a position to extract the data and build NDJSON files.&lt;/p&gt;
&lt;p&gt;This first part, then, is an application with a name like &lt;tt class="docutils literal"&gt;scan_db.py&lt;/tt&gt; to emit the UML,
and the db_model.&lt;/p&gt;
&lt;p&gt;We draw a line under this module because it deals with the available metadata.
It doesn't do the full extract.
Nor does it explore the data prior to migration.
The database metadata analysis is something we'd like to isolate, and run rarely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing"&gt;
&lt;h2&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;While -- in principle -- this is one-0ff software, test cases are essential.
We don't need 100% code or logical path coverage.
But, we do need enough coverage that we can refactor with confidence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;The PUML files document the source database.&lt;/p&gt;
&lt;p&gt;We should create a &lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; directory and put some notes in there about what this is and how to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next"&gt;
&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;So far, we have a sense of what the data is.&lt;/p&gt;
&lt;p&gt;We've fiddled with the PUML file(s) to create ERD's that seem to capture our initial understandings.&lt;/p&gt;
&lt;p&gt;We've got a &lt;tt class="docutils literal"&gt;db_model.py&lt;/tt&gt; file full of class definitions we can use for further work.&lt;/p&gt;
&lt;p&gt;We can write a database extract (and database reloader) to work with the NDJSON extracts.
Then we can kiss MariaDB goodbye, and stop the service from running on our laptop.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="#python"></category><category term="database"></category><category term="sql"></category></entry><entry><title>Seasons Greetings 2024</title><link href="https://slott56.github.io/2024-12-22_seasons_greetings_2024.html" rel="alternate"></link><published>2024-12-22T07:21:00-05:00</published><updated>2024-12-22T07:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-12-22:/2024-12-22_seasons_greetings_2024.html</id><summary type="html">&lt;p&gt;I'm working on revisions to Python 3 Object-Oriented Programming.
Meanwhile, I have big news on Packt's end-of-year promotions.&lt;/p&gt;
&lt;p&gt;I’m always striving to make the knowledge in &lt;em&gt;Python Real-World Projects&lt;/em&gt;, as useful as possible.
That’s why I’m so excited about Packt’s $9.99 End-of-Year Sale!
This adds …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm working on revisions to Python 3 Object-Oriented Programming.
Meanwhile, I have big news on Packt's end-of-year promotions.&lt;/p&gt;
&lt;p&gt;I’m always striving to make the knowledge in &lt;em&gt;Python Real-World Projects&lt;/em&gt;, as useful as possible.
That’s why I’m so excited about Packt’s $9.99 End-of-Year Sale!
This adds the feature of &amp;quot;readily available&amp;quot; to the &lt;em&gt;useful&lt;/em&gt; dimension.&lt;/p&gt;
&lt;p&gt;This campaign is more than just a discount.
This is a chance for learners from around the world to access top-quality resources they might not have been able to before.
I'm delighted my book is included with hundreds of other incredible titles that cover the latest in tech, coding, and beyond.
Explore the sale and explore your copy here: &lt;a class="reference external" href="https://www.packtpub.com/en-us/product/python-real-world-projects-9781804614969?utm_medium=affiliate&amp;amp;utm_campaign=9425ea08-92b0-ea11-a812-00224807f96d&amp;amp;utm_term=6f27946c-d1ff-397a-6918-65f059104791&amp;amp;utm_content="&gt;Python Real-World Projects&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s make learning accessible for everyone.
Join me in sharing this campaign and empowering more people to upskill in 2024!
The link us usable by anyone, so don't keep it to yourself.&lt;/p&gt;
&lt;p&gt;#PacktSale #TechBooks #EmpowerLearning&lt;/p&gt;
</content><category term="Books"></category><category term="#python"></category><category term="packt"></category><category term="techbooks"></category></entry><entry><title>Stingray Reader Release 5.1</title><link href="https://slott56.github.io/2024-10-24_stingray_reader_release_5_1.html" rel="alternate"></link><published>2024-10-24T08:00:00-04:00</published><updated>2024-10-24T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-10-24:/2024-10-24_stingray_reader_release_5_1.html</id><summary type="html">&lt;p&gt;Starting back in 2011 I was working on a way to manage a variety of spreadsheets in a variety of layouts with a common schema.
Over the last 13 years, I've been updating and maintaining this little project.
It's not widely used, but it interests me.&lt;/p&gt;
&lt;p&gt;Fundamentally, the use of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Starting back in 2011 I was working on a way to manage a variety of spreadsheets in a variety of layouts with a common schema.
Over the last 13 years, I've been updating and maintaining this little project.
It's not widely used, but it interests me.&lt;/p&gt;
&lt;p&gt;Fundamentally, the use of well-defined schema is really important.
And often overlooked.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://pypi.org/project/stingray-reader/"&gt;https://pypi.org/project/stingray-reader/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/Stingray-Reader/build/html/index.html"&gt;https://slott56.github.io/Stingray-Reader/build/html/index.html&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2011_10_13-more_command_line_goodness.html"&gt;More Command-Line Goodness&lt;/a&gt;.
This started as an elaborate exercise in literate programming.
In 2012, I got some feedback.
See &lt;a class="reference external" href="https://slott56.github.io/2012_06_07-stingray_schema_based_file_reader.html"&gt;Stingray Schema-based File Reader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In 2014, I added and refactored it quite a bit.
See &lt;a class="reference external" href="https://slott56.github.io/2014_05_22-python_package_design_refactoring_and_the_stingray_reader_project.html"&gt;Python Package Design, Refactoring and the Stingray Reader Project&lt;/a&gt;
and &lt;a class="reference external" href="https://slott56.github.io/2014_05_29-stingray_44_update_the_posix_split_command_applied_to_cobol_files.html"&gt;Stingray 4.4 Update -- the Posix split command applied to COBOL files&lt;/a&gt;
and &lt;a class="reference external" href="https://slott56.github.io/2014_06_12-tdd_api_design_and_refactoring.html"&gt;TDD, API Design and Refactoring&lt;/a&gt;.
Busy year.
This was the tail end of my hiatus, and I was back to looking for paying jobs.&lt;/p&gt;
&lt;p&gt;In 2015, I considered the Literate Programming nature of the project.
See &lt;a class="reference external" href="https://slott56.github.io/2015_06_23-literate_programming_and_github.html"&gt;Literate Programming and GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then. Work interfered.&lt;/p&gt;
&lt;p&gt;In 2018, I added some things.
See &lt;a class="reference external" href="https://slott56.github.io/2018_07_02-coping_with_a_spreadsheet_database.html"&gt;Coping with a Spreadsheet Database&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, I moved from SourceForge to GitHub.
See &lt;a class="reference external" href="https://slott56.github.io/2018_10_30-the_sourceforge_vs_github_conundrum.html"&gt;The SourceForge vs. GitHub Conundrum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 2020, some more upgrades.
See &lt;a class="reference external" href="https://slott56.github.io/2020_01_26-stingrayreader_upgrade.html"&gt;StingrayReader Upgrade&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2020_01_31-stingray_reader_rewrite.html"&gt;Stingray Reader Rewrite&lt;/a&gt;, and
&lt;a class="reference external" href="https://slott56.github.io/2020_02_25-stingray_reader_pervasively_bad_decision.html"&gt;Stingray Reader Pervasively Bad Decision&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;In 2021, some more revisions, mostly related to annotations.
See &lt;a class="reference external" href="https://slott56.github.io/2021_08_24-spreadsheets_cobol_and_schema_driven_file_processing.html"&gt;Spreadsheets, COBOL, and Schema-Driven File Processing&lt;/a&gt;.
Also &lt;a class="reference external" href="https://slott56.github.io/2021_11_16-reading_spreadsheets_with_stingray_reader_and_type_hinting.html"&gt;Reading Spreadsheets with Stingray Reader and Type Hinting&lt;/a&gt;.
And &lt;a class="reference external" href="https://slott56.github.io/2021_12_01-processing_apple_numbers_files.html"&gt;Processing Apple Numbers Files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 2022, some additional thoughts.
See &lt;a class="reference external" href="https://slott56.github.io/2022_07_12-the_enterprise_cobol_conundrum.html"&gt;The Enterprise COBOL Conundrum&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="stingray reader"></category><category term="#python"></category><category term="CLI"></category></entry><entry><title>Better than grep</title><link href="https://slott56.github.io/2024-09-26-better_than_grep.html" rel="alternate"></link><published>2024-09-26T09:50:00-04:00</published><updated>2024-09-26T09:50:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-09-26:/2024-09-26-better_than_grep.html</id><summary type="html">&lt;p&gt;In the process of writing &lt;em&gt;Unlearning SQL&lt;/em&gt;, I had a need to extract SQL blocks from Python programs.
Of course, I tried &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt;.
It wasn't ideal.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Book is available here:&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In the process of writing &lt;em&gt;Unlearning SQL&lt;/em&gt;, I had a need to extract SQL blocks from Python programs.
Of course, I tried &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt;.
It wasn't ideal.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Book is available here:&lt;/p&gt;
&lt;ul class="last simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;SQL blocks are -- ideally -- triple-quoted strings.
Of course, so are docstrings.
This creates additional problems.&lt;/p&gt;
&lt;p&gt;The first pass is to try to use &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; to track down the triple-quoted blocks.
This is a complex regular expression because it spans multiple lines.&lt;/p&gt;
&lt;p&gt;The output is a file of text with SQL stateements, docstrings, and quote marks all over the place.
It requires much manual cleanup.&lt;/p&gt;
&lt;p&gt;Doing the cleanup of the initial &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; output is right awful.
I need to somehow preserve a multi-line triple-quoted string that starts with a SQL reserved word,
and ignore multi-line triple-quoted strings that don't begin with something obvious SQL.&lt;/p&gt;
&lt;p&gt;I give up.&lt;/p&gt;
&lt;div class="section" id="python-re"&gt;
&lt;h2&gt;Python RE&lt;/h2&gt;
&lt;p&gt;Using Python to extract the initial strings and create a data structure is a good second step.
I can use the same regular expression with the Python &lt;tt class="docutils literal"&gt;re&lt;/tt&gt; module.
I can use &lt;tt class="docutils literal"&gt;Path.glob()&lt;/tt&gt; instead of shell globbing.&lt;/p&gt;
&lt;p&gt;I can now apply a second regular expression to the list-of-strings object to look for SQL words.
(There aren't many: CREATE, DROP, INSERT, UPDATE, SELECT, DELETE.)&lt;/p&gt;
&lt;p&gt;This is much nicer. But. I can do better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-ast"&gt;
&lt;h2&gt;Python AST&lt;/h2&gt;
&lt;p&gt;This process is reading valid, tested Python code.
The standard library's &lt;tt class="docutils literal"&gt;ast&lt;/tt&gt; module defines the abstract syntax tree for Python code.
This module can identify literal strings in code, and docstrings.&lt;/p&gt;
&lt;p&gt;How does this work?&lt;/p&gt;
&lt;p&gt;There are three parts.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define an &lt;tt class="docutils literal"&gt;ast.NodeVisitor&lt;/tt&gt; subclass.&lt;/li&gt;
&lt;li&gt;Parse the module's source to create an AST.&lt;/li&gt;
&lt;li&gt;Use the visitor to collect the strings.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll look at each in some detail.&lt;/p&gt;
&lt;p&gt;First, a note for those unfamiliar with the &lt;strong&gt;Visitor&lt;/strong&gt; design pattern.
A tree structure is recursive.
Examining each node of the tree can be done with a recursive function to visit a node, then visit all descendents of that node.
It's not a complicated function, but, there's  a complication.&lt;/p&gt;
&lt;p&gt;The node in an abstract syntax tree tend to be a union of a wide variety of types.
There will be an &lt;tt class="docutils literal"&gt;ast.Module&lt;/tt&gt;, an &lt;tt class="docutils literal"&gt;ast.ClassDef&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ast.FunctionDev&lt;/tt&gt;, etc., etc.
A &amp;quot;simple&amp;quot; recursive function needs to treat each class distinctly to properly visit all of the children.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Visitor&lt;/strong&gt; pattern delegates part of the work to a visitor object that is presented each node of the tree.
The visitor object can have methods for each unique type of node, avoiding a complex &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;match-case&lt;/span&gt;&lt;/tt&gt; statement,
or a complex &lt;tt class="docutils literal"&gt;if isinstance(node, &lt;span class="pre"&gt;Whatever)-elif&lt;/span&gt;&lt;/tt&gt; chain.&lt;/p&gt;
&lt;div class="section" id="the-visitor"&gt;
&lt;h3&gt;The Visitor&lt;/h3&gt;
&lt;p&gt;We're interested in one feature of the abstract syntax tree of Python: the &lt;tt class="docutils literal"&gt;ast.Constant&lt;/tt&gt; objects where the constant's value is a string.
Ideally, this will focus on those strings that start with a SQL keyword.&lt;/p&gt;
&lt;p&gt;Here's the starting point:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class StringVisitor(ast.NodeVisitor):
    def __init__(self) -&amp;gt; None:
        self.sql_blocks = []
    def visit_Constant(self, node: ast.AST) -&amp;gt; None:
        match node.value:
            case str() if sql_like(node.value):
                self.sql_blocks.append(range(node.lineno+1, node.end_lineno))
            case _:  # Ignore all other types
                pass
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;visit_Constant()&lt;/tt&gt; method is invoked for each &lt;tt class="docutils literal"&gt;ast.Constant&lt;/tt&gt; object in the tree.
This will find nodes that are strings and pass the &lt;tt class="docutils literal"&gt;sql_like()&lt;/tt&gt; filter.&lt;/p&gt;
&lt;p&gt;This net is a little too fine.
It can will capture docstring comments that happen to look SQL-like.
It's essentially the same as the &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; output with two improvements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No baffling regular expression.&lt;/li&gt;
&lt;li&gt;The output can be a more useful data structure, not a file of lines of text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While nicer in some respects, it's incomplete.
The next step is to add the required feature to ignore docstring comments.
There two choices:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write a better &lt;tt class="docutils literal"&gt;sql_like()&lt;/tt&gt; function.&lt;/li&gt;
&lt;li&gt;Exclude any string constant that is the first line of the body of a module, class, or function definition.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option 1 can can involve finding a SQL parser to see if a string really is pure SQL.
Or, it can require writing a better regular expression to locate likely SQL statements.&lt;/p&gt;
&lt;p&gt;Here's the unit test case:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; src_text = &amp;quot;&amp;quot;&amp;quot;
... def f(c):
...     '''
...         Select the right answers.
...     '''
...     r = c.execute('''
...         SELECT * FROM DUMMY
...     ''')
... &amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;The docstring comment starts with a SQL keyword. Ugh.
It seems kind of daunting to locate a suitable SQL parser.
The regular expression to distinguish casual use of SQL-like keywords seems hopeless complicated.
There's something better: exclude docstring constants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="exclusion-rules"&gt;
&lt;h3&gt;Exclusion Rules&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;ast.NodeVisitor&lt;/strong&gt; implementation has a handy feature.
This permits an application to choose to visit or skip the subsidiary nodes of an object.
When a class overrides a &lt;tt class="docutils literal"&gt;visit_XXX()&lt;/tt&gt; method, the override can call the &lt;tt class="docutils literal"&gt;self.generic_visit(node)&lt;/tt&gt; to visit all the children.
If the overriding method does not evaluate &lt;tt class="docutils literal"&gt;self.generic_visit(node)&lt;/tt&gt;, the children are &lt;strong&gt;not&lt;/strong&gt; examined.&lt;/p&gt;
&lt;p&gt;This is a bit too strict.&lt;/p&gt;
&lt;p&gt;Skipping &lt;strong&gt;all&lt;/strong&gt; children of a module, class definition or function definition isn't helpful.
The rest of the children could have SQL code.
It's important to skip only the very first line of code when this is a string constant.
The rest of the code needs to be visited.&lt;/p&gt;
&lt;p&gt;I decided to accumulate an &amp;quot;ignore these&amp;quot; set of nodes.
This set of nodes will be the first line of code that's also a string constant.
The &lt;tt class="docutils literal"&gt;visit_Constant()&lt;/tt&gt; can then politely decline these nodes.&lt;/p&gt;
&lt;p&gt;Here's the visitor class looks:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class StringVisitor(ast.NodeVisitor):
    def __init__(self) -&amp;gt; None:
        self.docstrings = set()  # Docstring nodes at the start of module, class, def
        self.sql_blocks = []
    def exclude_docstring(self, node: ast.AST) -&amp;gt; None:
        if isinstance(node.body[0], ast.Expr) and isinstance(node.body[0].value, ast.Constant):
            self.docstrings.add(node.body[0].value)
        self.generic_visit(node)
    visit_Module = exclude_docstring
    visit_ClassDef = exclude_docstring
    visit_FunctionDef = exclude_docstring
    def visit_Constant(self, node: ast.AST) -&amp;gt; None:
        match node.value:
        case str() if sql_like(node.value):
            if node not in self.docstrings:
                self.sql_blocks.append(range(node.lineno+1, node.end_lineno))
            case _:  # Ignore all other types
                pass
&lt;/pre&gt;
&lt;p&gt;First, I've added a a set of nodes to exclude.
(Nodes are immutable, and have a hash value, that's why a set works well for this.)&lt;/p&gt;
&lt;p&gt;Second, there's a generic visit function, &lt;tt class="docutils literal"&gt;exclude_docstring()&lt;/tt&gt;, that handles &lt;tt class="docutils literal"&gt;ast.Module&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ast.ClassDef&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ast.FunctionDef&lt;/tt&gt; classes.
I can define the needed &lt;tt class="docutils literal"&gt;visti_XXX()&lt;/tt&gt; methods for these classes to all use the generic exclusion method.&lt;/p&gt;
&lt;p&gt;Finally, I need to make sure any &lt;tt class="docutils literal"&gt;ast.Constant&lt;/tt&gt; node wasn't already excluded because it was the first string in a definition.&lt;/p&gt;
&lt;p&gt;With this, I can now parse the source, and apply the visitor.
The &lt;tt class="docutils literal"&gt;sql_blocks&lt;/tt&gt; attribute will have a list of &lt;tt class="docutils literal"&gt;range()&lt;/tt&gt; objects that point to the SQL statements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-parsing-and-visiting"&gt;
&lt;h3&gt;The Parsing and Visiting&lt;/h3&gt;
&lt;p&gt;Here's the final bit.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tree = ast.parse(src_text, &amp;quot;&amp;lt;test&amp;gt;&amp;quot;)
sv = StringVisitor()
sv.visit(tree)
print(sv.sql_blocks)
&lt;/pre&gt;
&lt;p&gt;This will parse the code, then visit the ast.&lt;/p&gt;
&lt;p&gt;When this is done, it has a list of &lt;tt class="docutils literal"&gt;range()&lt;/tt&gt; objects.
These ranges can be used to highlight the proper lines of code from the source file.
Your application may be different, of course, you may want to simply write the literals to a TOML configuration file, for example.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why,&amp;quot; you might ask, &amp;quot;do you have range() objects instead of the code?&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ultimate-goal"&gt;
&lt;h2&gt;The Ultimate Goal&lt;/h2&gt;
&lt;p&gt;In my specific (and unique) use case, I need to be sure the &lt;strong&gt;minted&lt;/strong&gt; code highlighter will properly format SQL code.&lt;/p&gt;
&lt;p&gt;The goal is a book, written using RST markup, with properly colorized SQL examples.
That part is easy, what's hard is making sure all examples are unit-tested and really, really work.
(I'm fussy like that.)&lt;/p&gt;
&lt;p&gt;This means including the source text from a &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; file into the book's content.&lt;/p&gt;
&lt;p&gt;But. (Big Sigh.)&lt;/p&gt;
&lt;p&gt;Minted can't cope with a mixture of Python and SQL, and can't properly color code a few isolated SQL lines plucked from a Python context.
(This shouldn't have been too surprising; after I ranted and raved about it, I realized minted must colorize the whole file before a few lines can be selected from it.
Context matters when highlighting syntax.)&lt;/p&gt;
&lt;p&gt;In my application, I'm creating a parallel file with all &lt;strong&gt;non-SQL&lt;/strong&gt; lines prefixed with the &amp;quot;--&amp;quot; SQL comment marker.
This leaves the SQL behind to be seen by minted and properly colored.
The Python lines are hidden from minted.&lt;/p&gt;
&lt;p&gt;The book can then use an &lt;tt class="docutils literal"&gt;.. literalinclude::&lt;/tt&gt; directive that has properly highlighted SQL.
The Python file is unit tested, which gives me confidence in the SQL file.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="parsing"></category><category term="ast"></category><category term="SQL"></category><category term="grep"></category></entry><entry><title>Modern Python Cookbook and Type Hints</title><link href="https://slott56.github.io/2024-09-18-cookbook_and_mypy.html" rel="alternate"></link><published>2024-09-18T16:03:00-04:00</published><updated>2024-09-18T16:03:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-09-18:/2024-09-18-cookbook_and_mypy.html</id><summary type="html">&lt;p&gt;Modern Python Cookbook — with lots and lots of recipes — is something you might need. Find the results of checking all these recipes here:
&lt;a class="reference external" href="https://www.amazon.com/Modern-Python-Cookbook-updated-techniques/dp/1835466389"&gt;https://www.amazon.com/Modern-Python-Cookbook-updated-techniques/dp/1835466389&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I (reluctantly) switched from using &lt;strong&gt;mypy&lt;/strong&gt; to using &lt;strong&gt;pyright&lt;/strong&gt; to check all of these recipes carefully. The type alias (&lt;a class="reference external" href="https://peps.python.org/pep-0695"&gt;PEP …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Modern Python Cookbook — with lots and lots of recipes — is something you might need. Find the results of checking all these recipes here:
&lt;a class="reference external" href="https://www.amazon.com/Modern-Python-Cookbook-updated-techniques/dp/1835466389"&gt;https://www.amazon.com/Modern-Python-Cookbook-updated-techniques/dp/1835466389&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I (reluctantly) switched from using &lt;strong&gt;mypy&lt;/strong&gt; to using &lt;strong&gt;pyright&lt;/strong&gt; to check all of these recipes carefully. The type alias (&lt;a class="reference external" href="https://peps.python.org/pep-0695"&gt;PEP 695&lt;/a&gt;) syntax wasn’t fully supported.&lt;/p&gt;
&lt;p&gt;I didn’t find any new problems with &lt;strong&gt;pyright&lt;/strong&gt;, but I did tweak my workflow a little bit to use more of &lt;strong&gt;pyright&lt;/strong&gt;’s linting features.&lt;/p&gt;
&lt;p&gt;Follow this for status on mypy &lt;a class="reference external" href="https://github.com/python/mypy/issues/15238"&gt;https://github.com/python/mypy/issues/15238&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="what-gets-checked"&gt;
&lt;h2&gt;What gets checked?&lt;/h2&gt;
&lt;p&gt;Using a vague phrase like &amp;quot;everything&amp;quot; is -- obviously -- not quite as helpful as some details.&lt;/p&gt;
&lt;p&gt;There are three broad categories of examples:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;REPL examples.&lt;/li&gt;
&lt;li&gt;Code examples.&lt;/li&gt;
&lt;li&gt;Jupyter Lab examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clearly, the REPL examples can't be checked. However. Many REPL examples depend on code definitions that can include checkable hints. The idea is to provide code outside the REPL and then use REPL doctest test cases to demonstrate how the code works. Which means many REPL examples have type hints that aren't shown in detail in the recipe.&lt;/p&gt;
&lt;p&gt;All of the ordinary code examples are checked.&lt;/p&gt;
&lt;p&gt;The Jupyter Lab examples in Chapter 12 are a mixed bag. Some examples involve an importable module, which can be checked. The notebook itself, though, is difficult to check. One &lt;strong&gt;could&lt;/strong&gt; convert the notebook to a script and the type check the script. This only works when the notebook is careful about not reusing variables.&lt;/p&gt;
&lt;p&gt;So that means all the example code in almost all of the chapters is put through &lt;strong&gt;pyright&lt;/strong&gt; to be &lt;strong&gt;sure&lt;/strong&gt; there's nothing obviously sketchy.&lt;/p&gt;
&lt;p&gt;I'd like to switch back to &lt;strong&gt;mypy&lt;/strong&gt;. I don't have a great reason, it just seems like it's vaguely &amp;quot;better&amp;quot;, measured on some axis I can't articulate.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="book"></category><category term="packt"></category><category term="cookbook"></category></entry><entry><title>Revised Books Available</title><link href="https://slott56.github.io/2024-09-03-revised_books_available.html" rel="alternate"></link><published>2024-09-03T14:35:00-04:00</published><updated>2024-09-03T14:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-09-03:/2024-09-03-revised_books_available.html</id><summary type="html">&lt;p&gt;Big Announcement: the 2024.8 version of &lt;em&gt;Unlearning SQL&lt;/em&gt;, and the 2024.9 version of &lt;em&gt;Pivot to Python&lt;/em&gt; are available from booksellers online. Both are revised and all the code tested with Python 3.12.&lt;/p&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;p&gt;This book shows you how to translate essential SQL concepts into the Python …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Big Announcement: the 2024.8 version of &lt;em&gt;Unlearning SQL&lt;/em&gt;, and the 2024.9 version of &lt;em&gt;Pivot to Python&lt;/em&gt; are available from booksellers online. Both are revised and all the code tested with Python 3.12.&lt;/p&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;p&gt;This book shows you how to translate essential SQL concepts into the Python language so they can be applied outside the database environment. A database includes features for access controls, persistence, and concurrent updates, none of which may be needed for an extract-transform-load pipeline. This helps restate the SQL design concepts into Python applications that are faster and simpler because they don't rely on a database.&lt;/p&gt;
&lt;p&gt;The ideas also apply to data analytic problems where the SQL GROUP-BY is a helpful design pattern. This book provides concrete examples of expressing the concept in Python instead of SQL.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/dp/B0DDMFMXNW"&gt;https://www.amazon.com/dp/B0DDMFMXNW&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Lulu&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html?page=1&amp;amp;pageSize=4&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Google Play&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Apple Books&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;p&gt;This short book covers how to install Python and start mastering the language immediately.
It covers some fundamental aspects of the Python programming language and a few important libraries.
It will help you develop some core skills and it creates a foundation for pursuing more in-depth books on Python programming.&lt;/p&gt;
&lt;p&gt;For some professionals, this may be all the help they need to get started. For skilled beginners, this can help open the door making other books easier to read and understand.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/dp/B0DFMT15GY"&gt;https://www.amazon.com/dp/B0DFMT15GY&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Lulu (pending approval)&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Google Play&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=fQ6IEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=fQ6IEAAAQBAJ&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Apple Books&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="Python"></category><category term="SQL"></category><category term="database"></category></entry><entry><title>Sphinx EPUB and Print</title><link href="https://slott56.github.io/2024-08-27-sphinx_epub_and_print.html" rel="alternate"></link><published>2024-08-27T16:31:00-04:00</published><updated>2024-08-27T16:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-08-27:/2024-08-27-sphinx_epub_and_print.html</id><summary type="html">&lt;p&gt;Let's say you want to self-publish an ebook and a print-on-demand paperback book.&lt;/p&gt;
&lt;p&gt;This isn't impossible, nor is it particularly easy. Here's what I've learned.&lt;/p&gt;
&lt;div class="section" id="basic-workflow"&gt;
&lt;h2&gt;Basic Workflow&lt;/h2&gt;
&lt;p&gt;You've got two obvious paths to make sure your EPUB book and your print-on-demand book match:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Convert EPUB to Print. This generally means …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Let's say you want to self-publish an ebook and a print-on-demand paperback book.&lt;/p&gt;
&lt;p&gt;This isn't impossible, nor is it particularly easy. Here's what I've learned.&lt;/p&gt;
&lt;div class="section" id="basic-workflow"&gt;
&lt;h2&gt;Basic Workflow&lt;/h2&gt;
&lt;p&gt;You've got two obvious paths to make sure your EPUB book and your print-on-demand book match:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Convert EPUB to Print. This generally means starting with HTML for the EPUB and building LaTeX from this to create the PDF. There are a number of tools that do this. It's relatively easy because HTML is easy to parse, and doesn't have quite to many options and features as LaTeX.&lt;/li&gt;
&lt;li&gt;Convert Print to EPUB. This generally means using a specialized LaTeX tool to extract HTML from LaTeX. There's a pair of tools, &lt;strong&gt;Tex4ht&lt;/strong&gt; and &lt;strong&gt;LaTeX2HTML&lt;/strong&gt;, that can be pressed into service.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these suffer from potential problems with vague markup.
HTML has a limited domain of tags, and important semantic details put into &lt;tt class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;lt;span&amp;gt;&lt;/tt&gt; tags where the CSS class name provides crucial information.
LaTeX is more than just markup; it's a Turning-complete programming language, and your &lt;tt class="docutils literal"&gt;.tex&lt;/tt&gt; input as a piece of code that emits a DVI file that drives the final printing process.
Extracting semantically meaningful details can be difficult.&lt;/p&gt;
&lt;p&gt;There's a third path: use a language like RST (or Markdown) and convert it to HTML &lt;strong&gt;and&lt;/strong&gt; LaTeX.
Now you have one source for the content, and the vagaries of HTML tags vs. CSS classes or LaTeX layers are less burdensome.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Sphinx&lt;/strong&gt; package handles this elegantly. &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/index.html"&gt;https://www.sphinx-doc.org/en/master/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="content-creation"&gt;
&lt;h2&gt;Content Creation&lt;/h2&gt;
&lt;p&gt;First, get all the examples right. Be sure all the code has unit tests.&lt;/p&gt;
&lt;p&gt;Option 1 is to use REPL-based examples and run the text through &lt;strong&gt;doctest&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Option 2 is to use more conventional modules in files with a separate test tool.
This can be &lt;strong&gt;doctest&lt;/strong&gt;, but it may also need to be something more sophisticated, like &lt;strong&gt;pytest&lt;/strong&gt; (&lt;a class="reference external" href="https://docs.pytest.org/en/stable/"&gt;https://docs.pytest.org/en/stable/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It's imperative to use &lt;strong&gt;mypy&lt;/strong&gt; or &lt;strong&gt;pyright&lt;/strong&gt; to check the type hints, and &lt;strong&gt;ruff&lt;/strong&gt; or &lt;strong&gt;black&lt;/strong&gt; to format the code consistently.
This has to be done carefully. Sometimes, the book margins require fiddling with &lt;strong&gt;ruff&lt;/strong&gt; configuration to narrow
the code so it will fit.&lt;/p&gt;
&lt;p&gt;A handy feature of &lt;strong&gt;doctest&lt;/strong&gt; is the &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; object. This is a mapping from test name to test code.&lt;/p&gt;
&lt;p&gt;Let's say you have an example line of code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;355&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;113&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you need to be sure it works.&lt;/p&gt;
&lt;p&gt;Consider putting this into your examples file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_ex_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;gt;&amp;gt;&amp;gt; from math import isclose, pi&lt;/span&gt;
&lt;span class="s2"&gt;&amp;gt;&amp;gt;&amp;gt; isclose(p, pi, rel_tol=1e-7)&lt;/span&gt;
&lt;span class="s2"&gt;True&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can add the following at the very bottom of the module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__test__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The doctest target, &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; will be a dictionary, with test cases pulled from
all global variables that start with &lt;tt class="docutils literal"&gt;test_&lt;/tt&gt;.
This means every random, little scrap of code can be thrown into a file with enough tests to make
the examples unassailable.&lt;/p&gt;
&lt;p&gt;Of course, there's more to test design, but that's a start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="general-setup"&gt;
&lt;h2&gt;General Setup&lt;/h2&gt;
&lt;p&gt;Diagrams are often best done using &lt;strong&gt;PlantUML&lt;/strong&gt; (&lt;a class="reference external" href="https://plantuml.com"&gt;https://plantuml.com&lt;/a&gt;).
For really, really complicated stiff, use TIKZ and LaTeX.&lt;/p&gt;
&lt;p&gt;That means installing the &lt;tt class="docutils literal"&gt;sphinxcontrib.plantuml&lt;/tt&gt; plug-in to Sphinx to make PlantUML work cleanly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sphinx-epub"&gt;
&lt;h2&gt;Sphinx EPUB&lt;/h2&gt;
&lt;p&gt;The EPUB pipeline in Sphinx is so similar to the HTML pipeline. It's easy to create the HTML
pages and review them for readability, formatting, spelling mistakes, clarity, spelling mistakes,
grammar errors, and spelling mistakes.&lt;/p&gt;
&lt;p&gt;I use &lt;strong&gt;pycharm&lt;/strong&gt;, and the spell-checking is less than ideal. For free. For a few $$$, I think I might do better.&lt;/p&gt;
&lt;p&gt;I have some CSS features that I really like.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A lettrine at the start of a section. This is a &amp;quot;dropped capital letter&amp;quot;. It ties up two lines.&lt;/li&gt;
&lt;li&gt;From &lt;a class="reference external" href="https://www.lode.de/"&gt;https://www.lode.de/&lt;/a&gt;, I borrowed the idea of big quotation marks around a blockquote paragraph.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These require special CSS in Sphinx. There are two parts.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add this to your &lt;tt class="docutils literal"&gt;conf.py&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;html_static_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;html_style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;building_skills.css&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a &lt;tt class="docutils literal"&gt;building_skills.css&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;_static&lt;/tt&gt; directory. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alabaster.css&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;has&lt;/span&gt;&lt;span class="o"&gt;(&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lettrine&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;first-letter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-0.1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lettrine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-variant-caps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;small-caps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;myquotation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c"&gt;/* Indent */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;myquotation&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;“&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, all you need to do is make sure there's a &lt;tt class="docutils literal"&gt;&amp;lt;span &lt;span class="pre"&gt;class=&amp;quot;lettrine&amp;quot;&amp;gt;&lt;/span&gt;&lt;/tt&gt; to make the dropped-capital lettrine work. That's done with a local extension for Sphinx.
Again, there are two parts.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add this to your &lt;tt class="docutils literal"&gt;conf.py&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this, too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;lettrine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# all the others, like &amp;quot;sphinxcontrib.plantuml&amp;quot;, and &amp;quot;sphinx.ext.imgmath&amp;quot;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create an &lt;tt class="docutils literal"&gt;ext&lt;/tt&gt; directory, and include a module, &lt;tt class="docutils literal"&gt;lettrine.py&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sphinx.application&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sphinx&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sphinx.util.docutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SphinxDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SphinxRole&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sphinx.util.typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ExtensionMetadata&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LettrineRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SphinxRole&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A role to mark a Lettrine (often at the start of a section.)&lt;/span&gt;

&lt;span class="sd"&gt;    The text becomes a new inline ``&amp;lt;span class=&amp;quot;lettrine&amp;quot;&amp;gt;``&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system_message&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;
        &lt;span class="c1"&gt;# Break things up for LaTeX output.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;classes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lettrine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Sphinx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ExtensionMetadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lettrine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LettrineRole&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;parallel_read_safe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;parallel_write_safe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The role defines a &lt;tt class="docutils literal"&gt;:lettrine:&lt;/tt&gt; role that merely wedges in the  proper class.
The &lt;tt class="docutils literal"&gt;setup&lt;/tt&gt; adds the role to the sphinx environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;:lettrine:&lt;/span&gt;&lt;span class="nv"&gt;`Now, your opening sentence has a lettrine.`&lt;/span&gt;
Subsequent lines of the paragraph are formatted &lt;span class="gs"&gt;**normally**&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sphinx-latex"&gt;
&lt;h2&gt;Sphinx LaTeX&lt;/h2&gt;
&lt;p&gt;This involves a &lt;strong&gt;lot&lt;/strong&gt; of little details. We'll start with a little background.
Then we'll look at the configuration.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;The LaTeX language involves a mixture of environments and commands.
The environments have clear boundaries, usually a &lt;tt class="docutils literal"&gt;\begin{X}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\end{X}&lt;/tt&gt;.
Sometimes commands &lt;strong&gt;also&lt;/strong&gt; bracket something; the &lt;tt class="docutils literal"&gt;\makeatletter&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\makeatother&lt;/tt&gt; commands,
bracket a macro definition that needs to have &lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt; interpretation turned off.
This mixture of stateful commands and environments can be exasperating.&lt;/p&gt;
&lt;p&gt;Also, the input can include macro definitions and redefinitions.
Macros can be recursive. There are &lt;tt class="docutils literal"&gt;\if&lt;/tt&gt; constructs.
It's a Turing complete programming language, which makes some aspects quite complicated.&lt;/p&gt;
&lt;p&gt;Producing a book is goes beyond built-in &lt;tt class="docutils literal"&gt;manual&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;howto&lt;/tt&gt; document classes Sphinx offers.
The various book classes decompose the content into three kinds:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Front Matter. Some combination of Half-Title, Publisher, Acknowledgments, Contents, Forward, Prefix, Table of Contents, etc. (Once upon a time, books started with a &amp;quot;title page&amp;quot; that had the title, publisher, and copyright information. Now, most software is setup to create a paper title page in front of that, called a half-title, separate from the cover.)&lt;/li&gt;
&lt;li&gt;Main Matter. The parts and chapters.&lt;/li&gt;
&lt;li&gt;Back Matter. Appendices, indices, glossary, about the author, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to this, a preamble is used to define the various commands and environments.
Ideally, the &lt;tt class="docutils literal"&gt;main.tex&lt;/tt&gt; file is a sequence of &lt;tt class="docutils literal"&gt;\input&lt;/tt&gt; commands to build the preamble,
define the document environment, provide the needed commands, and input
the various pieces content from separate files. Ideally.&lt;/p&gt;
&lt;p&gt;Pragmatically, Sphinx doesn't have a perfectly clean separation of the LaTeX organization
from the content.
Some of this is a consequence of the way LaTeX works, and the need for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\if--\fi&lt;/span&gt;&lt;/tt&gt; blocks
to handle special cases.
Other aspects are patches for subtle incompatibilities among LaTeX packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="latex-content"&gt;
&lt;h3&gt;Latex Content&lt;/h3&gt;
&lt;p&gt;First, the top-level &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt; should have &lt;strong&gt;almost&lt;/strong&gt; nothing in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;toctree&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
   &lt;span class="nc"&gt;:maxdepth:&lt;/span&gt; 2

   front/index
   chapters/index
   back/index
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The book will have three folders: &lt;tt class="docutils literal"&gt;front&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;chapters&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;back&lt;/tt&gt;, each of
which has it's own &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;There are a few (very few) places where LaTeX-specific content is needed.
Here's the &lt;tt class="docutils literal"&gt;back/index.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;  &lt;span class="ow"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; latex

    \frontmatter

&lt;span class="p"&gt;..&lt;/span&gt;  &lt;span class="ow"&gt;toctree&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;

    preface
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it. Include the raw LaTeX command, and include the &lt;tt class="docutils literal"&gt;preface.rst&lt;/tt&gt; file.
This generates nice-looking HTML and EPUB. And it injects the helpful &lt;tt class="docutils literal"&gt;\frontmatter&lt;/tt&gt; in front of the preface.
The &lt;tt class="docutils literal"&gt;back/index.rst&lt;/tt&gt; is similar, as is the &lt;tt class="docutils literal"&gt;chapters/index.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;(The front matter setup doesn't seem ideal. I think the &lt;tt class="docutils literal"&gt;\frontmatter&lt;/tt&gt; should include the half-title, publisher's page, and contents, also, but it doesn't seem to work unless it's in front of the preface.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-sphinx-configuration"&gt;
&lt;h3&gt;The Sphinx Configuration&lt;/h3&gt;
&lt;p&gt;There are four configuration variables that need to be set.&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_engine:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;'xelatex'&lt;/tt&gt; works well because it permits UTF encoded files and (some) Unicode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_elements:&lt;/th&gt;&lt;td class="field-body"&gt;This is a large dictionary of individual settings. The value is a dictionary, wrapped in &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;,
with string key values. Most of the values will be LaTeX commands.
Because LaTeX uses &lt;tt class="docutils literal"&gt;\&lt;/tt&gt;, it's helpful to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &amp;quot;&amp;quot;&amp;quot;&lt;/tt&gt; around the LaTeX.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_theme:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;'manual'&lt;/tt&gt; is close to the book format we want to use. We'll provide a subsequent definition to expand on this. The &amp;quot;theme&amp;quot; in Sphinx parlance is the document class in LaTeX world.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name" colspan="2"&gt;latex_toplevel_sectioning:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class="field-body"&gt;&lt;tt class="docutils literal"&gt;'chapter'&lt;/tt&gt; for books without parts. Otherwise &lt;tt class="docutils literal"&gt;'part'&lt;/tt&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;latex_docclass:&lt;/th&gt;&lt;td class="field-body"&gt;This is a mapping from document class to the actual LaTeX class to use.
We provide the value &lt;tt class="docutils literal"&gt;{'manual': 'scrbook'}&lt;/tt&gt; because that seems to work well.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Within the &lt;tt class="docutils literal"&gt;latex_elements&lt;/tt&gt; mapping, we have a number of configuration parameters.
Most of these are small-ish. Two are immensee blocks of LaTeX code.&lt;/p&gt;
&lt;table class="docutils field-list" frame="void" rules="none"&gt;
&lt;col class="field-name" /&gt;
&lt;col class="field-body" /&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;babel:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;I use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\usepackage[american]{babel}'&lt;/span&gt;&lt;/tt&gt; because, well, I'm an American writer.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;fncychap:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;Set to &lt;tt class="docutils literal"&gt;''&lt;/tt&gt; to disable any of the fancy chapter styles. They seem busy to me.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name" colspan="2"&gt;passoptionstopackages:&lt;/th&gt;&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;I use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\PassOptionsToPackage{headings}{fancyhdr}'&lt;/span&gt;&lt;/tt&gt;, even though I'm not sure this is really required.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;extrapackages:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This is a bunch of &lt;tt class="docutils literal"&gt;\usepackage&lt;/tt&gt; commands. I use &lt;tt class="docutils literal"&gt;lettrine&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;xstring&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;afterpage&lt;/tt&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;preamble:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This is huge, we'll return to it.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;fvset:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This can be used to set the font for &amp;quot;fancyverb&amp;quot; verbatime environments.
I use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\fvset{fontsize=\scriptsize}'&lt;/span&gt;&lt;/tt&gt; to make the font smaller so the examples fit
in a &lt;span class="math"&gt;\(6^{\prime\prime} \times 9^{\prime\prime}\)&lt;/span&gt; book.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;releasename:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This is really fussy. The word &amp;quot;release&amp;quot; seems too long, so I set this to &lt;tt class="docutils literal"&gt;v.&lt;/tt&gt;.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;geometry:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first"&gt;This defines the page layouts. It's quite long.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;r'\usepackage[paperwidth=6in,&lt;/span&gt; paperheight=9in, inner=3.75pc, outer=3pc, top=2pc, bottom=3pc, includehead, includefoot, &lt;span class="pre"&gt;headheight=32pt]{geometry}'&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pc&lt;/tt&gt; unit is pica, &lt;span class="math"&gt;\(\tfrac{1}{6}\)&lt;/span&gt; of an inch. I'm not sure it's helpful to switch units like this.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;maketitle:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;p class="first last"&gt;This is also quite large.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="the-preamble"&gt;
&lt;h3&gt;The Preamble&lt;/h3&gt;
&lt;p&gt;The preamble adds style details. It's a large block of LaTeX.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% Lettrine&lt;/span&gt;
&lt;span class="k"&gt;\newcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\DUrolelettrine&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;[1]&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\StrLeft&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;#1&lt;span class="nb"&gt;}{&lt;/span&gt;1&lt;span class="nb"&gt;}&lt;/span&gt;[&lt;span class="k"&gt;\First&lt;/span&gt;]&lt;span class="k"&gt;\StrGobbleLeft&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;#1&lt;span class="nb"&gt;}{&lt;/span&gt;1&lt;span class="nb"&gt;}&lt;/span&gt;[&lt;span class="k"&gt;\Rest&lt;/span&gt;]&lt;span class="k"&gt;\lettrine&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\First&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\Rest&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="c"&gt;% Page Layout Normal&lt;/span&gt;
&lt;span class="k"&gt;\makeatletter&lt;/span&gt;
&lt;span class="k"&gt;\fancypagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;normal&lt;span class="nb"&gt;}{&lt;/span&gt;
&lt;span class="k"&gt;\fancyhf&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[RO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[LO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\nouppercase&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\rightmark&lt;/span&gt;&lt;span class="nb"&gt;}}}&lt;/span&gt;
&lt;span class="k"&gt;\fancyhead&lt;/span&gt;&lt;span class="na"&gt;[RO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily&lt;/span&gt; &lt;span class="k"&gt;\@title\sphinxheadercomma\py@release&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\if@twoside&lt;/span&gt;
 &lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[LE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
 &lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[RE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\nouppercase&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\rightmark&lt;/span&gt;&lt;span class="nb"&gt;}}}&lt;/span&gt;
 &lt;span class="k"&gt;\fancyhead&lt;/span&gt;&lt;span class="na"&gt;[LE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily&lt;/span&gt; &lt;span class="k"&gt;\@title\sphinxheadercomma\py@release&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;\fi&lt;/span&gt;
&lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\headrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.4pt&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\footrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.4pt&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% define chaptermark with \@chappos when \@chappos is available for Japanese&lt;/span&gt;
&lt;span class="k"&gt;\ltx@ifundefined&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;@chappos&lt;span class="nb"&gt;}{}&lt;/span&gt;
  &lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\def\chaptermark&lt;/span&gt;##1&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\markboth&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\@chapapp\space\thechapter\space\@chappos\space&lt;/span&gt; ##1&lt;span class="nb"&gt;}{}}}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% Page Layout Plain (1st page of Section or Chapter.)&lt;/span&gt;
&lt;span class="k"&gt;\fancypagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;plain&lt;span class="nb"&gt;}{&lt;/span&gt;
    &lt;span class="k"&gt;\fancyhf&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[RO]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;
    &lt;span class="k"&gt;\if@twoside\fancyfoot&lt;/span&gt;&lt;span class="na"&gt;[LE]&lt;/span&gt;&lt;span class="nb"&gt;{{&lt;/span&gt;&lt;span class="k"&gt;\rmfamily\thepage&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;&lt;span class="k"&gt;\fi&lt;/span&gt;
    &lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\headrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0pt&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\footrulewidth&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;0.4pt&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\makeatother&lt;/span&gt;
&lt;span class="c"&gt;% Blank Page&lt;/span&gt;
&lt;span class="k"&gt;\newcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\blankpage&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="c"&gt;%&lt;/span&gt;
    &lt;span class="k"&gt;\afterpage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\null\thispagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;empty&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\newpage&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\pagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;empty&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\cleardoublepage&lt;/span&gt;&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;% Define &amp;quot;myquotation&amp;quot; to indent a whole paragraph with a big, fancy &amp;quot; character.&lt;/span&gt;
&lt;span class="k"&gt;\renewcommand&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\indent&lt;/span&gt;&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="c"&gt;%&lt;/span&gt;
    &lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;picture&lt;span class="nb"&gt;}&lt;/span&gt;(0,0)&lt;span class="k"&gt;\put&lt;/span&gt;(10,-5)&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\makebox&lt;/span&gt;(0,0)&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\scalebox&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;6&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\textcolor&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;lightgray&lt;span class="nb"&gt;}{&lt;/span&gt;“&lt;span class="nb"&gt;}}}}&lt;/span&gt;&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;picture&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\hspace*&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1.0cm&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\hangindent&lt;/span&gt;=1.15cm
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newenvironment&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;sphinxclassmyquotation&lt;span class="nb"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\indent&lt;/span&gt;&lt;span class="nb"&gt;}{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;DUrolelettrine&lt;/tt&gt; command is the Docutils role that is used
to define the &lt;tt class="docutils literal"&gt;lettrine&lt;/tt&gt; role that we added as an extension to Sphinx.
The &lt;tt class="docutils literal"&gt;DUrole&lt;/tt&gt; is prepended to define a unique command.
The implementation of this command is a macro that splits out the first letter to make it big, and the
rest of the text is set in small-caps style.&lt;/p&gt;
&lt;p&gt;Two page layouts are defined: &lt;tt class="docutils literal"&gt;normal&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;plain&lt;/tt&gt;.
These revise the built-in Sphinx layouts to use different fonts for the page header and footer.
The definitions have to be wedged between &lt;tt class="docutils literal"&gt;\makeatnormal&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\makeatother&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;blankpage&lt;/tt&gt; command is added here. It seems helpful for getting the even-odd page business
correct on the half-title and publisher pages.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;sphinxclassmyquotation&lt;/tt&gt; environment is what Sphinx does with otherwise unknown directives.
When the text has a &lt;tt class="docutils literal"&gt;..&amp;nbsp; myquotation::&lt;/tt&gt; directive, this becomes a new environment with a distinctive
name. We can then define an environment that provides the distinctive style attributes
for the content.&lt;/p&gt;
&lt;p&gt;The mapping from RST role or directive to &lt;tt class="docutils literal"&gt;DUrole&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;sphinxclass&lt;/tt&gt; isn't the most obvious,
but, it works delightfully well.
For HTML and EPUB, CSS definitions are required.
For LaTeX, these preamble definitions are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-maketitle-command"&gt;
&lt;h3&gt;The MakeTitle Command&lt;/h3&gt;
&lt;p&gt;While LaTeX has a &lt;tt class="docutils literal"&gt;\maketitle&lt;/tt&gt; command, there's a redefinition of this by Sphinx.
This is the &lt;tt class="docutils literal"&gt;\sphinxmaketitle&lt;/tt&gt; command that emits the title page.&lt;/p&gt;
&lt;p&gt;Ordinarily -- for the default manual or howto themes -- this is followed by the table of contents,
and then the content.
For books, the title page isn't the cover, and is demoted to being called a half-title.
There's often a publisher's page -- with important copyright information -- between the half-title page and the table of contents.&lt;/p&gt;
&lt;p&gt;To build this, we need to provide a &lt;tt class="docutils literal"&gt;maketitle&lt;/tt&gt; setting that &lt;strong&gt;also&lt;/strong&gt; defines
a &lt;tt class="docutils literal"&gt;sphinxbackoftitlepage&lt;/tt&gt; command. This command does everything between the half-page and the table of contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\makeatletter&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\sphinxbackoftitlepage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;% Blank page on the verso after 1/2 title&lt;/span&gt;
    &lt;span class="k"&gt;\blankpage&lt;/span&gt;
    &lt;span class="c"&gt;% Publisher page is recto (odd page)&lt;/span&gt;
    &lt;span class="k"&gt;\thispagestyle&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;empty&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;\sffamily\textbf&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\textsc&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Building Skills&lt;span class="nb"&gt;}}&lt;/span&gt;

    &lt;span class="k"&gt;\Huge&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\sffamily\textbf&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\@title&lt;/span&gt;&lt;span class="nb"&gt;}}&lt;/span&gt;

    &lt;span class="k"&gt;\large&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&amp;quot;When your only tool is a hammer, every problem looks like a nail.&amp;quot;&lt;span class="nb"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;\normalsize&lt;/span&gt;
    By &lt;span class="k"&gt;\@author&lt;/span&gt;

    &lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;1in&lt;span class="nb"&gt;}&lt;/span&gt;
    Python 3.12&lt;span class="k"&gt;\&lt;/span&gt;
    Release &lt;span class="k"&gt;\py@release\&lt;/span&gt;
    Created &lt;span class="k"&gt;\today&lt;/span&gt;

    &lt;span class="k"&gt;\vfill&lt;/span&gt;
    &lt;span class="k"&gt;\rmfamily\normalsize&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;\copyright&lt;/span&gt;~&lt;span class="k"&gt;\the\year\&lt;/span&gt; &lt;span class="k"&gt;\textit&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;Steven F. Lott&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\&lt;/span&gt;
        &lt;span class="k"&gt;\textsc&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;All Rights Reserved.&lt;span class="nb"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;\vfill&lt;/span&gt;
    &lt;span class="k"&gt;\url&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;https://fosstodon.org/@slott56&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;\url&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;https://itmaybeahack.com&lt;span class="nb"&gt;}&lt;/span&gt;&lt;span class="k"&gt;\&lt;/span&gt;
    &lt;span class="k"&gt;\url&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;https://github.com/slott56/unlearning-sql&lt;span class="nb"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;% Blank page on verso of publisher.&lt;/span&gt;
    &lt;span class="k"&gt;\blankpage&lt;/span&gt;
    &lt;span class="c"&gt;% Contents will follow.&lt;/span&gt;
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\makeatother&lt;/span&gt;

&lt;span class="k"&gt;\sphinxmaketitle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It seems odd to put this definition here instead of in the preamble.
It also seems necessary to get the page numbering correct.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;On one hand, there is a &lt;strong&gt;lot&lt;/strong&gt; of LaTeX customization required.&lt;/p&gt;
&lt;p&gt;On the other hand, a single change to the RST files leads to two &lt;strong&gt;identical&lt;/strong&gt; results
that can be uploaded for EPUB and print-on-demand.&lt;/p&gt;
&lt;p&gt;There are still some odd, little glitches in the LaTeX.
It's not &lt;strong&gt;perfect&lt;/strong&gt;, but it's really good.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Books"></category><category term="sphinx"></category><category term="RST"></category><category term="LaTeX"></category><category term="epub"></category><category term="PDF"></category></entry><entry><title>Unlearning SQL, revised</title><link href="https://slott56.github.io/2024-08-20-unlearning_sql.html" rel="alternate"></link><published>2024-08-20T16:31:00-04:00</published><updated>2024-08-20T16:31:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-08-20:/2024-08-20-unlearning_sql.html</id><summary type="html">&lt;p&gt;Book (pre) Announcement:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP - See &lt;a class="reference external" href="https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK"&gt;https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK&lt;/a&gt; for my author's page.&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW"&gt;https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW&lt;/a&gt; is the book.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Google Play - See &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;. Be sure to get the 2024.08 edition; there's a previous …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Book (pre) Announcement:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;KDP - See &lt;a class="reference external" href="https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK"&gt;https://www.amazon.com/stores/Steven-Lott/author/B00HNRSLEK&lt;/a&gt; for my author's page.&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW"&gt;https://www.amazon.com/Unlearning-SQL-hammer-every-problem-ebook/dp/B0DDMFMXNW&lt;/a&gt; is the book.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Google Play - See &lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;. Be sure to get the 2024.08 edition; there's a previous edition (from 2022) out there, also. Don't buy the 2022 edition.&lt;/li&gt;
&lt;li&gt;Lulu - &lt;a class="reference external" href="https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html"&gt;https://www.lulu.com/shop/steven-lott/unlearning-sql/paperback/product-yvnm8zn.html&lt;/a&gt;. It may be a few weeks before I get the proof copy and can formally approve it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is still early in the process, and there are still some technical reviews from the ebook web sites to make sure the book really is what it claims to be.&lt;/p&gt;
&lt;p&gt;The code is tps://github.com/slott56/unlearning-sql and was rewritten and tested.&lt;/p&gt;
&lt;img alt="Unlearning SQL Book Cover" src="https://slott56.github.io/media/unlearning_sql.pdf" /&gt;
</content><category term="Books"></category><category term="building skills"></category><category term="python"></category><category term="SQL"></category><category term="database"></category></entry><entry><title>Modern Python Cookbook, 3e</title><link href="https://slott56.github.io/2024-08-01-modern_python_cookbook_3e.html" rel="alternate"></link><published>2024-08-01T13:41:00-04:00</published><updated>2024-08-01T13:41:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-08-01:/2024-08-01-modern_python_cookbook_3e.html</id><summary type="html">&lt;p&gt;Book Announcement:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.packtpub.com/en-us/product/modern-python-cookbook-9781835466384"&gt;https://www.packtpub.com/en-us/product/modern-python-cookbook-9781835466384&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are about 130 recipes in here. Some new. Some revised.
All examined (and tested) for Python 3.12.&lt;/p&gt;
&lt;p&gt;For the Python folks who are just starting as well as those looking to pick up some more skills, this is for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Book Announcement:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.packtpub.com/en-us/product/modern-python-cookbook-9781835466384"&gt;https://www.packtpub.com/en-us/product/modern-python-cookbook-9781835466384&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are about 130 recipes in here. Some new. Some revised.
All examined (and tested) for Python 3.12.&lt;/p&gt;
&lt;p&gt;For the Python folks who are just starting as well as those looking to pick up some more skills, this is for you&lt;/p&gt;
&lt;p&gt;The recipes cover a wide variety of topics. It covers both functional and object-oriented programming.&lt;/p&gt;
&lt;p&gt;Here's a run-down of the chapters (yes, it's a long list):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Numbers, Strings, and Tuples&lt;/li&gt;
&lt;li&gt;Statements and Syntax&lt;/li&gt;
&lt;li&gt;Function Definitions&lt;/li&gt;
&lt;li&gt;Built-In Data Structures Part 1: Lists and Sets&lt;/li&gt;
&lt;li&gt;Built-In Data Structures Part 2: Dictionaries&lt;/li&gt;
&lt;li&gt;User Inputs and Outputs&lt;/li&gt;
&lt;li&gt;Basics of Classes and Objects&lt;/li&gt;
&lt;li&gt;More Advanced Class Design&lt;/li&gt;
&lt;li&gt;Functional Programming Features&lt;/li&gt;
&lt;li&gt;Working with Type Matching and Annotations&lt;/li&gt;
&lt;li&gt;Input/Output, Physical Format, and Logical Layout&lt;/li&gt;
&lt;li&gt;Graphics and Visualization with Jupyter Lab&lt;/li&gt;
&lt;li&gt;Application Integration: Configuration&lt;/li&gt;
&lt;li&gt;Application Integration: Combination&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Dependencies and Virtual Environments&lt;/li&gt;
&lt;li&gt;Documentation and Style&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most chapters have recipes that include beginners as well as  advanced developers.
For example, the first chapter covers the differences between true division and floor division.
Some folks get this deeply, where for others, it can feel cryptic at first.&lt;/p&gt;
&lt;p&gt;Some chapters are based on others, making them less beginner-oriented.
The Functional Programming Features chapter is based on the Function Definitions chapter.
The More Advanced Class Design chapter builds on the Basics of Classes and Objects chapter.&lt;/p&gt;
&lt;p&gt;Since the whole book is tested (both doctests and unit tests), I'm particularly fond of the Testing chapter.
I have read posts from too many folks saying that testing isn't a thing in school, and at work, they're left on their own to work out what and how to test.
I think I can help a little with some recipes on using docstrings, testing functions with exeptions, using unittest, using pytest, and mocking external resources.&lt;/p&gt;
&lt;p&gt;I’m hoping you’ll find this useful for growing a deeper understanding of Python programming.&lt;/p&gt;
</content><category term="Python"></category><category term="book"></category><category term="packt"></category><category term="cookbook"></category></entry><entry><title>Synthetic Data Tool</title><link href="https://slott56.github.io/2024-07-25-synthetic_data_tool.html" rel="alternate"></link><published>2024-07-25T14:22:00-04:00</published><updated>2024-07-25T14:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-07-25:/2024-07-25-synthetic_data_tool.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2024-06-29-synthetic_data.html"&gt;Synthetic Data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've updated the repository with a &amp;quot;Noisy Data&amp;quot; feature.&lt;/p&gt;
&lt;p&gt;This will generate bulk data with invalid field values.&lt;/p&gt;
&lt;p&gt;It helps with testing ETL pipelines to be sure they will scale to the expected volumes.&lt;/p&gt;
&lt;p&gt;Clone &lt;a class="reference external" href="https://github.com/slott56/DataSynthTool"&gt;https://github.com/slott56/DataSynthTool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;a class="reference external" href="https://slott56.github.io/DataSynthTool/_build/html/index.html"&gt;https://slott56.github.io/DataSynthTool/_build …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2024-06-29-synthetic_data.html"&gt;Synthetic Data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've updated the repository with a &amp;quot;Noisy Data&amp;quot; feature.&lt;/p&gt;
&lt;p&gt;This will generate bulk data with invalid field values.&lt;/p&gt;
&lt;p&gt;It helps with testing ETL pipelines to be sure they will scale to the expected volumes.&lt;/p&gt;
&lt;p&gt;Clone &lt;a class="reference external" href="https://github.com/slott56/DataSynthTool"&gt;https://github.com/slott56/DataSynthTool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Read &lt;a class="reference external" href="https://slott56.github.io/DataSynthTool/_build/html/index.html"&gt;https://slott56.github.io/DataSynthTool/_build/html/index.html&lt;/a&gt;&lt;/p&gt;
</content><category term="Python"></category><category term="synthetic data"></category><category term="project"></category></entry><entry><title>Functional SQL in Pure Python</title><link href="https://slott56.github.io/2024-07-16-functional_sql_in_pure_python.html" rel="alternate"></link><published>2024-07-16T08:14:00-04:00</published><updated>2024-07-16T08:14:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-07-16:/2024-07-16-functional_sql_in_pure_python.html</id><summary type="html">&lt;p&gt;I've published a framework for doing SQL-like programming in Pure Python -- no database required.&lt;/p&gt;
&lt;p&gt;Here: &lt;a class="reference external" href="https://github.com/slott56/functional-SQL"&gt;https://github.com/slott56/functional-SQL&lt;/a&gt;.
See the &lt;a class="reference external" href="https://slott56.github.io/functional-SQL/_build/html/index.html"&gt;functional-SQL&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;This allows us to transform SQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;names_table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values_table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To pure Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I've published a framework for doing SQL-like programming in Pure Python -- no database required.&lt;/p&gt;
&lt;p&gt;Here: &lt;a class="reference external" href="https://github.com/slott56/functional-SQL"&gt;https://github.com/slott56/functional-SQL&lt;/a&gt;.
See the &lt;a class="reference external" href="https://slott56.github.io/functional-SQL/_build/html/index.html"&gt;functional-SQL&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;This allows us to transform SQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;names_table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;values_table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To pure Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;names_table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;values_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, the Python is longer and cluttered with lambdas.&lt;/p&gt;
&lt;p&gt;This produces the same results using a similar algorithm.&lt;/p&gt;
&lt;p&gt;Most important, this works with table-like collections of &lt;strong&gt;Any&lt;/strong&gt; class of Python objects.&lt;/p&gt;
&lt;p&gt;This implements the essential SQL query algorithm:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;having &lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;group-by &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;where &lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;select &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;from &lt;tt class="docutils literal"&gt;itertools.product()&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &lt;cite&gt;From-Select-Where-GroupBy-Having(Tables)&lt;/cite&gt; design pattern is very handy.
A lot of people think of processing data following this template.
There's no reason, however, to inject the overhead of schema and database.&lt;/p&gt;
</content><category term="Python"></category><category term="SQL"></category><category term="project"></category><category term="functional programming"></category><category term="functional python programming"></category></entry><entry><title>DataSynthTool Repository</title><link href="https://slott56.github.io/2024-07-01-datasynthtool_repository.html" rel="alternate"></link><published>2024-07-01T19:22:00-04:00</published><updated>2024-07-01T19:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-07-01:/2024-07-01-datasynthtool_repository.html</id><content type="html">&lt;p&gt;I've published
a framework for making tools to leverage formal schema definitions to synthesize bulk data for performance tuning.&lt;/p&gt;
&lt;p&gt;Here: &lt;a class="reference external" href="https://github.com/slott56/DataSynthTool"&gt;https://github.com/slott56/DataSynthTool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="https://slott56.github.io/DataSynthTool/synthetic_data.slides.html#/"&gt;original talk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a class="reference external" href="https://slott56.github.io/DataSynthTool/_build/html/index.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;
</content><category term="Python"></category><category term="synthetic data"></category><category term="project"></category></entry><entry><title>Synthetic Data</title><link href="https://slott56.github.io/2024-06-29-synthetic_data.html" rel="alternate"></link><published>2024-06-29T09:22:00-04:00</published><updated>2024-06-29T09:22:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-06-29:/2024-06-29-synthetic_data.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Book?&lt;/strong&gt; Second draft (with tech review comments addressed) off to editors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boat?&lt;/strong&gt; Still on the hard during Hurricane Season.&lt;/p&gt;
&lt;div class="section" id="synthetic-data-1"&gt;
&lt;h2&gt;Synthetic Data&lt;/h2&gt;
&lt;p&gt;I've had a passing interest in data synthesis for decades.&lt;/p&gt;
&lt;p&gt;Early on in my career, I figured out how the Z/OS IEDBG utility worked.
See &lt;a class="reference external" href="https://www.ibm.com/docs/en/zos/3.1.0?topic=utilities-iebdg-test-data-generator-program"&gt;https://www.ibm …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Book?&lt;/strong&gt; Second draft (with tech review comments addressed) off to editors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boat?&lt;/strong&gt; Still on the hard during Hurricane Season.&lt;/p&gt;
&lt;div class="section" id="synthetic-data-1"&gt;
&lt;h2&gt;Synthetic Data&lt;/h2&gt;
&lt;p&gt;I've had a passing interest in data synthesis for decades.&lt;/p&gt;
&lt;p&gt;Early on in my career, I figured out how the Z/OS IEDBG utility worked.
See &lt;a class="reference external" href="https://www.ibm.com/docs/en/zos/3.1.0?topic=utilities-iebdg-test-data-generator-program"&gt;https://www.ibm.com/docs/en/zos/3.1.0?topic=utilities-iebdg-test-data-generator-program&lt;/a&gt;.
It synthesized test data according to a number of mainframe-centric rules.&lt;/p&gt;
&lt;p&gt;When I started doing DBA work (Ingres, Oracle, DB2, etc.) the need for bulk synthetic data became more profound.
Folks would debate optimization questions without the benefit of &lt;strong&gt;facts&lt;/strong&gt;.
They'd suppose the optimizer might use an index or a 2NF demormalization might save some time.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Without data, it's all second-guessing the DBMS algorithms.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; synthetic data for generative machine learning models.&lt;/p&gt;
&lt;p class="last"&gt;That's a possible application, but the focus is on databases, ETL, and data analytics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="new-development"&gt;
&lt;h3&gt;New Development&lt;/h3&gt;
&lt;p&gt;The real &amp;quot;shoal water without a chart&amp;quot; problem is new development.&lt;/p&gt;
&lt;p&gt;You don't have legacy data with which to benchmark anything.&lt;/p&gt;
&lt;p&gt;You only have hand-waving ideas of what the data might look like once the application sees some adoption.&lt;/p&gt;
&lt;p&gt;And those are often wishful thinking. (Worse, they can be outright lies by folks seeking investment money.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h3&gt;What To Do?&lt;/h3&gt;
&lt;p&gt;All design is driven by data. (Remember, when you switch application code, you preserve the data; it's the real value.)&lt;/p&gt;
&lt;p&gt;All scalability problems are data-related.&lt;/p&gt;
&lt;p&gt;You can use ordinary &amp;quot;Big-O&amp;quot; complexity analysis to design algorithms that are optimal, but you don't know
any actual performance metrics without hardware, software, and -- what's really hard -- data.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;only&lt;/strong&gt; thing you can do is follow this plan:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write your Proof-of-Concept, Spike solution.&lt;/li&gt;
&lt;li&gt;Synthesize realistic volumes of data with realistic relationships among the values and realistic distributions of values.&lt;/li&gt;
&lt;li&gt;Benchmark the performance of the POC/Spike with actual data on actual hardware.&lt;/li&gt;
&lt;li&gt;Continuously monitor performance, establishing new benchmarks with better algorithms or data structures.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without actual performance benchmarks, you're creating two scalability problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The immediate problem of &amp;quot;can't start using it because it's too slow.&amp;quot;&lt;/li&gt;
&lt;li&gt;The subsequent problem of &amp;quot;users are complaining that it's slow.&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="okay-how-do-i-do-it"&gt;
&lt;h3&gt;Okay, How Do I Do It?&lt;/h3&gt;
&lt;p&gt;Which brings us to tools that synthesize data.&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;not&lt;/strong&gt; synthetic data for generative machine learning models.&lt;/p&gt;
&lt;p&gt;This is synthetic data for database, bulk ETL, and ordinary statistical analysis performance testing.&lt;/p&gt;
&lt;p&gt;I've got a bunch of stuff that I'll be posting to Git with an approach that I think might be useful to others.&lt;/p&gt;
&lt;p&gt;It based on stuff I've done before. It includes the results of some lessons learned.&lt;/p&gt;
&lt;p&gt;More to come.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="synthetic data"></category><category term="project"></category></entry><entry><title>Git Nightmare</title><link href="https://slott56.github.io/2024-05-07-github_nightmare.html" rel="alternate"></link><published>2024-05-07T08:01:00-04:00</published><updated>2024-05-07T08:01:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-05-07:/2024-05-07-github_nightmare.html</id><summary type="html">&lt;p&gt;My sailing blog, &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;Team Red Cruising&lt;/a&gt;
is very large: 859 postings over the last few years. 2,334 image files.&lt;/p&gt;
&lt;p&gt;This is a LOT of content.&lt;/p&gt;
&lt;p&gt;A few of the files (were) Movies, which tend to create immense files.&lt;/p&gt;
&lt;p&gt;The whole mess was so big&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Big Was It?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My sailing blog, &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;Team Red Cruising&lt;/a&gt;
is very large: 859 postings over the last few years. 2,334 image files.&lt;/p&gt;
&lt;p&gt;This is a LOT of content.&lt;/p&gt;
&lt;p&gt;A few of the files (were) Movies, which tend to create immense files.&lt;/p&gt;
&lt;p&gt;The whole mess was so big&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Big Was It?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It was so big, the &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt; command crashed. Repeatedly.&lt;/p&gt;
&lt;p&gt;I researched a lot of Stack Overflow answers on dealing with big files.  Maybe they were helpful.
Maybe they were misleading. I tried a &lt;strong&gt;lot&lt;/strong&gt; of things.&lt;/p&gt;
&lt;p&gt;The problem was using the following approach.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;First. Get it all organized.&lt;/li&gt;
&lt;li&gt;Then. Do a single massive commit of everything.&lt;/li&gt;
&lt;li&gt;Now. The &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This -- it turns out -- is not a good idea. There are too many files and too many huge files.&lt;/p&gt;
&lt;div class="section" id="beating-to-weather"&gt;
&lt;h2&gt;Beating to Weather&lt;/h2&gt;
&lt;p&gt;It seemed sensible to try and preseve the &amp;quot;one big commit with everything in it.&amp;quot;&lt;/p&gt;
&lt;p&gt;This was -- of course -- a mistake.&lt;/p&gt;
&lt;p&gt;It's just too big to preserve. And there's no good reason to preserve it.&lt;/p&gt;
&lt;p&gt;It had some HUGE movie and PDF files that are better kept separate from the blog content.
Some of the pictures were exported at &lt;strong&gt;full&lt;/strong&gt; size, leading to about 100 image files of 22Mb or larger.
The resulting pack files are huge. Far too big to process.&lt;/p&gt;
&lt;p&gt;Trying to get the &lt;tt class="docutils literal"&gt;git gc&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;git repack&lt;/tt&gt; commands to create some useful approach to uploading one big commit was (in retrospect) a waste of time and brain calories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="image-resizing"&gt;
&lt;h2&gt;Image Resizing&lt;/h2&gt;
&lt;p&gt;This was fun. A little program using &lt;tt class="docutils literal"&gt;pillow&lt;/tt&gt; to do &lt;tt class="docutils literal"&gt;Image.reduce()&lt;/tt&gt; on the 100 or so egregiously large files.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def png_reduce(counts: Counter, path: Path, new: Path) -&amp;gt; None:
    target_image_size =  4_851_306  # about 2202 x 2202.

    counts[path.suffix] += 1
    if not path.suffix.lower() in {&amp;quot;.png&amp;quot;}:
        return
    try:
        with Image.open(path) as image:
            if image.width * image.height &amp;lt; target_image_size:
                counts['small'] += 1
                return
            counts['reduce'] += 1
            factor = int((image.width * image.height) / target_image_size + 0.5)
            target_width = int(image.width / factor + 0.5)
            target_height = int(image.height / factor + 0.5)
            reduced = image.reduce(factor)
            # Save reduced Image in separate directory. These can then be moved to replace the originals.
            target = new / path.name
            reduced.save(target)
        print(
            f&amp;quot;Reduce {path.name} {path.lstat().st_size // 1024 // 1024}M:&amp;quot;
            f&amp;quot; factor={factor} from {image.width}×{image.height} to {target_width}×{target_height}&amp;quot;
        )
    except UnidentifiedImageError as ex:
        counts['exception'] += 1
        print(path.name, ex)
&lt;/pre&gt;
&lt;p&gt;The target image size was a kind of guess. I divided the range of sizes into 64 bins.
I counted the number of files in each bin to see where the various size lumps occurred.
The bin with 4,851,306 seemed to be on the line between a lot of small files and a few large files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tack-to-a-new-course"&gt;
&lt;h2&gt;Tack to a New Course&lt;/h2&gt;
&lt;p&gt;What's the alternative?&lt;/p&gt;
&lt;p&gt;Here's what worked.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git reset&lt;/tt&gt; back to empty. (There was only one commit, so this was easy.)&lt;/li&gt;
&lt;li&gt;Put in the overhead files: &lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt;, the Pelican configuration files, &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;, etc.&lt;/li&gt;
&lt;li&gt;Commit this. And push.&lt;/li&gt;
&lt;li&gt;Put in the text content files, all 859 of them. Plus the handful of non-blog pages and photo albums.&lt;/li&gt;
&lt;li&gt;Commit this. And push.&lt;/li&gt;
&lt;li&gt;The images can be broken into 5 batches of about 400 files. Commit and push each of these.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At the end of the day, it's all there, but it took 7 commits and 7 separate &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt; operations to get there.&lt;/p&gt;
&lt;p&gt;It went really fast. Error free. No drama.&lt;/p&gt;
&lt;p&gt;Doubly aggravating because this could have been completed two days ago.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-finish-line"&gt;
&lt;h2&gt;The Finish Line&lt;/h2&gt;
&lt;p&gt;Now, I can do ordinary &lt;tt class="docutils literal"&gt;git pull&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt; from &lt;strong&gt;any&lt;/strong&gt; computer.&lt;/p&gt;
&lt;p&gt;I can login to the hosting service from any computer, do a &lt;tt class="docutils literal"&gt;git pull&lt;/tt&gt; and a &lt;tt class="docutils literal"&gt;make publish&lt;/tt&gt;, and the site is updated.&lt;/p&gt;
&lt;p&gt;The point is to be able to use an iPad to edit content and leverage my hosting service to do a little more than serve static HTML.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="git"></category><category term="github"></category><category term="memory"></category></entry><entry><title>DBLock Context Manager</title><link href="https://slott56.github.io/2024-03-10-dblock-context-manager.html" rel="alternate"></link><published>2024-03-10T08:01:00-04:00</published><updated>2024-03-10T08:01:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-03-10:/2024-03-10-dblock-context-manager.html</id><summary type="html">&lt;p&gt;Consider, for a moment, the &lt;tt class="docutils literal"&gt;shelve&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;dbm&lt;/tt&gt; packages for storing things in a “database.”
Built-in. Lightweight. The database is essentially a mapping from identifiers to objects.
It can be quite nice.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;shelve&lt;/tt&gt; module directly puts Python objects in a file.
It’s an ideal database structure for Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Consider, for a moment, the &lt;tt class="docutils literal"&gt;shelve&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;dbm&lt;/tt&gt; packages for storing things in a “database.”
Built-in. Lightweight. The database is essentially a mapping from identifiers to objects.
It can be quite nice.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;shelve&lt;/tt&gt; module directly puts Python objects in a file.
It’s an ideal database structure for Python, with relatively little overhead.&lt;/p&gt;
&lt;p&gt;If you don’t like using &lt;tt class="docutils literal"&gt;pickle&lt;/tt&gt;, you can use the underlying &lt;tt class="docutils literal"&gt;dbm&lt;/tt&gt; with something like Pydantic for class definitions.
This means explicitly serializing a representation of object state as bytes before stuffing them into the &lt;tt class="docutils literal"&gt;dbm&lt;/tt&gt;-managed mapping.
Pydantic class definitions can deserialize the bytes and recover the object's state.&lt;/p&gt;
&lt;p&gt;With a little effort at designing keys, these provide a persistent mapping for arbitrarily complex objects.
(Simple UUID's are nice, but sometimes it helps to provide a key with two parts: collection name and identifier.)&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;It lets you read and write objects without the complexity of an ORM layer and a SQL database.&lt;/p&gt;
&lt;p&gt;This is often really helpful. But. What about concurrent writes in a multiprocessing context? The &lt;tt class="docutils literal"&gt;shelve&lt;/tt&gt; page is clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The shelve module does not support concurrent read/write access to shelved objects. (Multiple simultaneous read accesses are safe.) When a program has a shelf open for writing, no other program should have it open for reading or writing. &lt;strong&gt;Unix file locking can be used to solve this&lt;/strong&gt;, but this differs across Unix versions and requires knowledge about the database implementation used.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Emphasis mine.) Okay. We get it; this is BYOL™  -- Bring Your Own Locking.&lt;/p&gt;
&lt;p&gt;Which — it turns out — isn’t trivial.
See &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Readers–writer_lock"&gt;https://en.wikipedia.org/wiki/Readers–writer_lock&lt;/a&gt; for information on multiple readers and single writers.&lt;/p&gt;
&lt;div class="section" id="the-single-writer-locking-problem"&gt;
&lt;h2&gt;The Single Writer Locking Problem&lt;/h2&gt;
&lt;p&gt;We can use the &lt;tt class="docutils literal"&gt;fcntl&lt;/tt&gt; module to lock files. This module (and the Linux OS) offers exclusive locks and shared locks.&lt;/p&gt;
&lt;p&gt;(For Windows folks, get a package like &lt;tt class="docutils literal"&gt;portalocker&lt;/tt&gt; or use the functions in &lt;tt class="docutils literal"&gt;pywin32&lt;/tt&gt;.)&lt;/p&gt;
&lt;p&gt;The objectives are these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Take out an exclusive lock for transactions that will update the database.&lt;/li&gt;
&lt;li&gt;Take out a shared lock for transactions that read the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This Shared vs. Exclusive locking is elegant, but also habors a small problem.&lt;/p&gt;
&lt;p&gt;Consider a web server. Each GET transaction acquires a shared lock, reads the data, prepares the response, and releases the shared lock. Because the shared lock prevents a writer from getting an exclusive lock, the data is untouched for the duration of the transaction.
There's no possibility of data file corruption mid-transaction because of a concurrent write.&lt;/p&gt;
&lt;p&gt;Each POST/PUT/PATCH/DELETE transaction acquires an exclusive lock, reads and writes the data, prepares a response, and releases the exclusive lock. This forces the writer to wait for readers to finish. It prevents any reader from seeing incomplete
or uncreadable files.&lt;/p&gt;
&lt;p&gt;The underlying &lt;tt class="docutils literal"&gt;dbm&lt;/tt&gt; file is updated in one smooth, atomic event. Everyone sees the data in a consistent state at all times.&lt;/p&gt;
&lt;p&gt;Yes, it's coarse-grained whole-database level locking. The point was to avoid the overheads of a huge SQL
server. A RESTful service can read and write local files. Emphasis on the read. Why have a super-elaborate database server
to provide rows and tables that have to be assembled into JSON documents? Maybe just read the JSON document from the database
and reply with it.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;There's a problem: a parade of readers can prevent the writer from getting in.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;time&lt;/th&gt;
&lt;th class="head"&gt;action&lt;/th&gt;
&lt;th class="head"&gt;lock count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;T0&lt;/td&gt;
&lt;td&gt;reader 1 starts&lt;/td&gt;
&lt;td&gt;1 shared lock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;reader 2 starts&lt;/td&gt;
&lt;td&gt;2 shared locks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;writer 3 waiting for an exclusive lock...&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;reader 2 finishes&lt;/td&gt;
&lt;td&gt;1 shared lock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;reader 4 starts&lt;/td&gt;
&lt;td&gt;2 shared locks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T5&lt;/td&gt;
&lt;td&gt;reader 1 finishes&lt;/td&gt;
&lt;td&gt;1 shared lock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And so it goes: a sequence of overlapping readers will starve the writer.
This is called &lt;strong&gt;Livelock&lt;/strong&gt;, and — while rare — it’s not impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="preventing-livelock"&gt;
&lt;h2&gt;Preventing Livelock&lt;/h2&gt;
&lt;p&gt;One algorithm for preventing livelock is to have a “pending writer queue” that the readers have to acknowledge.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of a velvet rope to get into the most exclusive club in town.&lt;/p&gt;
&lt;p&gt;The writer talks to the bouncer, and the line of readers is stopped. No one gets in. Once the club is empty of readers, the writer is allowed in and has the place to themself. When they’re done writing, then they’re out of there, so the readers can crowd the place again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is sometimes called the “preferred writer” solution. It’s unfair by design because many web requests are read requests; write requests are less common. Overall performance depends on getting any write out of the way as soon as possible.
There are other variants that are more equitable, but also a bit more complicated.&lt;/p&gt;
&lt;p&gt;To prevent livelock, we need some kind of shared queue to broadcast to all concurrent processes that there’s a writer waiting.&lt;/p&gt;
&lt;p&gt;We can do this using two lock files:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A “queue” lock. This is always Exclusive. It's always acquired first. In effect, it's a one-element queue.&lt;/li&gt;
&lt;li&gt;The “working” lock. The working lock is either Shared or Exclusive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The queue lock defines a mutual exclusion zone of code (called a &lt;em&gt;mutex&lt;/em&gt;) where at most one process is able to run.
The idea is readers enter the mutex, get their shared working lock, and leave the mutex.
Once they have their shared lock, they can loiter, doing whatever it is they need to do.&lt;/p&gt;
&lt;p&gt;When a writer enters the mutex, they have to wait for their exclusive working lock before they leave the mutex.
This stops the readers.&lt;/p&gt;
&lt;p&gt;Here are some play-by-play views for a number of scenarios.&lt;/p&gt;
&lt;div class="section" id="reader-following-readers"&gt;
&lt;h3&gt;Reader following Readers&lt;/h3&gt;
&lt;p&gt;Readers can get shared access freely.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;time&lt;/th&gt;
&lt;th class="head"&gt;action&lt;/th&gt;
&lt;th class="head"&gt;queue lock&lt;/th&gt;
&lt;th class="head"&gt;working lock&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;T0&lt;/td&gt;
&lt;td&gt;reader 1 acquire queue&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;reader 2 waiting&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;reader 1 acquire working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;reader 1 release queue&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;reader 2 acquire queue&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T5&lt;/td&gt;
&lt;td&gt;reader 2 acquire working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;2 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T6&lt;/td&gt;
&lt;td&gt;reader 2 release queue&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;2 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T7&lt;/td&gt;
&lt;td&gt;reader 1 release working&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T8&lt;/td&gt;
&lt;td&gt;reader 2 release working&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And so it goes, readers acquiring and releasing working locks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reader-following-writer"&gt;
&lt;h3&gt;Reader following Writer&lt;/h3&gt;
&lt;p&gt;If there's a writer, the reader is forced to wait until
the writer releases their exclusive lock.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;time&lt;/th&gt;
&lt;th class="head"&gt;action&lt;/th&gt;
&lt;th class="head"&gt;queue lock&lt;/th&gt;
&lt;th class="head"&gt;working lock&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;T0&lt;/td&gt;
&lt;td&gt;writer 1 acquire queue&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;reader 2 waiting&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;writer 1 acquire working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;writer 1 release queue&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;reader 2 acquire queue&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T5&lt;/td&gt;
&lt;td&gt;reader 2 waiting&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T7&lt;/td&gt;
&lt;td&gt;writer 1 release working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T8&lt;/td&gt;
&lt;td&gt;reader 2 acquire working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T9&lt;/td&gt;
&lt;td&gt;reader 2 release queue&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T10&lt;/td&gt;
&lt;td&gt;reader 2 release working&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Yes. Traffic will back up waiting for a writer.
If this is a problem, then finer-grained locking is required.
This can lead to the possibility of deadlocks; proceed with caution and consider sharding the data to avoid
contention for locks,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writer-following-reader"&gt;
&lt;h3&gt;Writer following Reader&lt;/h3&gt;
&lt;p&gt;If there's a reader, the writer is forced to wait before they
can get their exclusive lock.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;col width="25%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;time&lt;/th&gt;
&lt;th class="head"&gt;action&lt;/th&gt;
&lt;th class="head"&gt;queue lock&lt;/th&gt;
&lt;th class="head"&gt;working lock&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;T0&lt;/td&gt;
&lt;td&gt;reader 1 acquire queue&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T1&lt;/td&gt;
&lt;td&gt;write 2 waiting&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T2&lt;/td&gt;
&lt;td&gt;reader 1 acquire working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T3&lt;/td&gt;
&lt;td&gt;reader 1 release queue&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T4&lt;/td&gt;
&lt;td&gt;writer 2 acquire queue&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T5&lt;/td&gt;
&lt;td&gt;writer 2 waiting&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 sh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T7&lt;/td&gt;
&lt;td&gt;reader 1 release working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T8&lt;/td&gt;
&lt;td&gt;writer 2 acquire working&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T9&lt;/td&gt;
&lt;td&gt;writer 2 release queue&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;1 ex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;T10&lt;/td&gt;
&lt;td&gt;writer 2 release working&lt;/td&gt;
&lt;td&gt;0 ex&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Clearly, if there are a &lt;strong&gt;lot&lt;/strong&gt; of readers, the writer waits a long time
for them &lt;strong&gt;all&lt;/strong&gt; to finish.
Some more clever lock definitions permit an upper bound on the number of
locks that can be acquired.&lt;/p&gt;
&lt;p&gt;Our goal, however, is simplicity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python-implementation"&gt;
&lt;h2&gt;Python Implementation&lt;/h2&gt;
&lt;p&gt;This is intended to be used with &lt;strong&gt;Flask&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from pathlib import Path
from flask import Flask

class DBLock:

    def __init__(self, app: Flask | None = None) -&amp;gt; None:
        if app:
            self.init_app(app)

    def init_app(self, app: Flask) -&amp;gt; None:
        self.lock_path = Path(cast(str, app.config.get(&amp;quot;DB_LOCK_FILENAME&amp;quot;, &amp;quot;dblock&amp;quot;)))
        self.queue_path = self.lock_path.with_suffix(&amp;quot;.dbqueue&amp;quot;)
        self.thread_local = threading.local()
&lt;/pre&gt;
&lt;p&gt;This could be refactored to work outside a Flask-specific context.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;thread_local&lt;/tt&gt; storage is required to track each thread's unique open file handles.&lt;/p&gt;
&lt;p&gt;The essence is acquiring a lock and releaing a lock.
The &amp;quot;lock mode&amp;quot; is one the &lt;tt class="docutils literal"&gt;fcntl.LOCK_EX&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;fcntl.LOCK_SH&lt;/tt&gt; values.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def acquire(self, lock_mode: int) -&amp;gt; Self:
    if &amp;quot;lock_file&amp;quot; not in self.thread_local.__dict__:
        # Enter Queue Mutex to acquire a database lock.
        queue_file = self.queue_path.open(&amp;quot;w+&amp;quot;)
        fcntl.flock(queue_file, fcntl.LOCK_EX)
        self.thread_local.lock_file = self.lock_path.open(&amp;quot;w+&amp;quot;)
        fcntl.flock(self.thread_local.lock_file, lock_mode)
        # Exit Queue Mutex. Permits another thread (or process) to acquire a lock.
        fcntl.flock(queue_file, fcntl.LOCK_UN)
    return self

def release(self) -&amp;gt; None:
    if &amp;quot;lock_file&amp;quot; in self.thread_local.__dict__:
        fcntl.flock(self.thread_local.lock_file, fcntl.LOCK_UN)
        self.thread_local.lock_file.close()
        delattr(self.thread_local, &amp;quot;lock_file&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;The acquire and release are the algorithm described above.
An exclusive lock defines a system-wide Mutex for &lt;strong&gt;all&lt;/strong&gt; threads and processes.
The working lock is either shared or exclusive.&lt;/p&gt;
&lt;p&gt;The cleanup on release undoes the lock, closes the file to release any OS resources,
and also purges the &lt;tt class="docutils literal"&gt;thread_local&lt;/tt&gt; to make sure there's no confusion about the state.&lt;/p&gt;
&lt;p&gt;Some useful overheads:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
close = release

def is_locked(self) -&amp;gt; bool:
    # print(f&amp;quot;is_locked: {self.thread_local.__dict__=}&amp;quot;)
    return &amp;quot;lock_file&amp;quot; in self.thread_local.__dict__
&lt;/pre&gt;
&lt;p&gt;If we provide a &lt;tt class="docutils literal"&gt;close()&lt;/tt&gt; method, then the &lt;tt class="docutils literal"&gt;contextlib.closing()&lt;/tt&gt; context manager
can be used.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;is_locked()&lt;/tt&gt; method can be helpful to know the state of the lock.
It's far better to use the &lt;tt class="docutils literal"&gt;with&lt;/tt&gt; statement to define a context that eliminates any doubt.&lt;/p&gt;
&lt;p&gt;While this can be used with &lt;tt class="docutils literal"&gt;contextlib&lt;/tt&gt; functions, it seems helpful to provide explicit context management.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def __enter__(self) -&amp;gt; Self:
    return self

def __exit__(
    self,
    exc_type: type[Exception],
    exc_val: Exception,
    exc_tb: TracebackException,
) -&amp;gt; Literal[False]:
    self.release()
    return False
&lt;/pre&gt;
&lt;p&gt;And. Two convenience methods to avoid having to muck around with &lt;tt class="docutils literal"&gt;fcntl.LOCK_SH&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;fcntl.LOCK_EX&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def shared(self) -&amp;gt; Self:
    &amp;quot;&amp;quot;&amp;quot;
    Context manager, equivalent to::

        with dblock.acquire(fcntl.LOCK_SH):
            pass
    &amp;quot;&amp;quot;&amp;quot;
    self.acquire(fcntl.LOCK_SH)
    return self

def exclusive(self) -&amp;gt; Self:
    &amp;quot;&amp;quot;&amp;quot;
    Context manager, equivalent to::

        with dblock.acquire(fcntl.LOCK_EX):
            pass
    &amp;quot;&amp;quot;&amp;quot;
    self.acquire(fcntl.LOCK_EX)
    return self
&lt;/pre&gt;
&lt;p&gt;The goal is to have relatively lightweight code like the following.&lt;/p&gt;
&lt;p&gt;Some Flask app setup:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dblock = DBLock()
dblock.init_app(app)
&lt;/pre&gt;
&lt;p&gt;Within a GET view function:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with dblock.shared():
    with dbm.open(some_file) as db:
        item = SomeClass.model_validate_json(db[your_key_here])
&lt;/pre&gt;
&lt;p&gt;Within a POST/PUT/PATCH/DELETE view function:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with dblock.exclusive():
    with dbm.open(some_file, flag='c') as db:
        db[item.id] = item.model_dump_json().encode('utf-8')
&lt;/pre&gt;
&lt;p&gt;By acquiring an exclusive access lock, all changes will be saved reliably and predictably: an atomic state change.&lt;/p&gt;
&lt;p&gt;And yes, the explicit &lt;tt class="docutils literal"&gt;model_validate_json()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;model_dump_json()&lt;/tt&gt; is wordy.
I use a &lt;tt class="docutils literal"&gt;DB&lt;/tt&gt; class to conceals these details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We can use &lt;tt class="docutils literal"&gt;dbm&lt;/tt&gt; as a dictionary-like repository of objects serialized as JSON.&lt;/p&gt;
&lt;p&gt;We have the benefits of a fancy relational database without the overheads.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="database"></category><category term="dbm"></category><category term="shelve"></category><category term="multiprocessing"></category><category term="context manager"></category></entry><entry><title>Functional Python and Lambdas</title><link href="https://slott56.github.io/2024-02-09-functional_python_and_lambdas.html" rel="alternate"></link><published>2024-02-09T08:01:00-05:00</published><updated>2024-02-09T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-02-09:/2024-02-09-functional_python_and_lambdas.html</id><summary type="html">&lt;p&gt;I saw a confusing post on &lt;a class="reference external" href="https://fosstodon.org"&gt;https://fosstodon.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I won't link to it, but I will quote it because it repeats some common misconceptions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
I have some iterator chain (in reality longer and more complex than this example).
And now in one or more steps, I need to add …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;I saw a confusing post on &lt;a class="reference external" href="https://fosstodon.org"&gt;https://fosstodon.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I won't link to it, but I will quote it because it repeats some common misconceptions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
I have some iterator chain (in reality longer and more complex than this example).
And now in one or more steps, I need to add an extra operator.
Going from `foo.map(thing).filter(condition).reduce(collector)` to

foo.map({
  thing
  if condition {
      other_thing
  }
).reduce({
  setup
  collector
  logger
})

The design of Python's iterators make this very hard.

Because a lambda cannot easily contain multiple lines, conditions or statements.
&lt;/pre&gt;
&lt;p&gt;There are two unrelated misconceptions here. One's an minor error, the other is a nuanced design choice.
We'll look at the minor error first, since it's a common misconception about Python lambdas.&lt;/p&gt;
&lt;p&gt;And. I cover these in &lt;a class="reference external" href="https://www.amazon.com/Functional-Python-Programming-functional-expressive/dp/1803232579"&gt;Functional Python Programming&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="lambda-and-lines-of-code"&gt;
&lt;h2&gt;Lambda and Lines of Code&lt;/h2&gt;
&lt;p&gt;A Python lambda has a single &lt;strong&gt;expression&lt;/strong&gt;. This precludes any statements.&lt;/p&gt;
&lt;p&gt;An expression must be complete on a single &lt;strong&gt;logical line&lt;/strong&gt; of code.
Because of the way &lt;tt class="docutils literal"&gt;(&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;)&lt;/tt&gt; must balance, it can span multiple &lt;strong&gt;physical lines&lt;/strong&gt; of code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
a = list(
    map(
        lambda x: (
            (
                3 * x + 1
            )
            if
            (
                x % 2 == 1
            )
            else
            (
                x // 2
            )
        ),
        range(10)
    )
)
&lt;/pre&gt;
&lt;p&gt;A lambda can be quite long. Use &lt;tt class="docutils literal"&gt;(&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;)&lt;/tt&gt; to enclose it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-choices"&gt;
&lt;h2&gt;Design Choices&lt;/h2&gt;
&lt;p&gt;The Ruby &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;foo.map(m).filter(f).reduce(r)&lt;/span&gt;&lt;/tt&gt; has two renderings in Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nested functions. This is bad, but we'll look at it.&lt;/li&gt;
&lt;li&gt;Chains of generator expressions. I call them stacks. This is good.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's take a concrete example, one that we can unit test.
We'll look at it first as nested functions to see how bad it can be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nested-functions"&gt;
&lt;h2&gt;Nested Functions&lt;/h2&gt;
&lt;p&gt;Here's are two functions to generate some complicated data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
hotpo = (
    lambda x:
        (x * 3 + 1) if (x % 2 == 1)
        else (x // 2)
)
hotpo_run = (
    lambda x, r:
        r + [x] if x == 1
        else hotpo_run(hotpo(x), r + [x])
)
&lt;/pre&gt;
&lt;p&gt;These are two functions that we've defined as lambdas for no particularly good reason.&lt;/p&gt;
&lt;p&gt;Let's use a mapping to compute a range of values.
This is a bit like &lt;tt class="docutils literal"&gt;range(1, &lt;span class="pre"&gt;11).map(lambda...)&lt;/span&gt;&lt;/tt&gt; in Ruby.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
list(
    map(
        lambda n: hotpo_run(n, []),
        range(1, 11)
    )
)
&lt;/pre&gt;
&lt;p&gt;We don't want the lists. We want the lengths of the lists.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
list(
    map(len,
        map(
            lambda n: hotpo_run(n, []),
            range(1, 11)
        )
    )
)
&lt;/pre&gt;
&lt;p&gt;Not that it matters much, but let's add a filter.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
list(
    filter(
        lambda x: x &amp;gt; 0,
        map(len,
            map(
                lambda n: hotpo_run(n, []),
                range(1, 11)
            )
        )
    )
)
&lt;/pre&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;BTW, the answer is &lt;tt class="docutils literal"&gt;[1, 2, 8, 3, 6, 9, 17, 4, 20, 7]&lt;/tt&gt;.&lt;/p&gt;
&lt;p class="last"&gt;Without a cache of some kind. It takes quite a while to compute more than a few results.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Let's reduce this to find the largest value.&lt;/p&gt;
&lt;p&gt;Clearly &lt;tt class="docutils literal"&gt;max()&lt;/tt&gt; will work, but, for the sake of matching the Ruby,
let's build &lt;tt class="docutils literal"&gt;max()&lt;/tt&gt; as a &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from functools import reduce
reduce(
    lambda a, b: a if a &amp;gt; b else b,
    filter(
        lambda x: x &amp;gt; 0,
        map(len,
            map(
                lambda n: hotpo_run(n, []),
                range(1, 11)
            )
        )
    )
)
&lt;/pre&gt;
&lt;p&gt;The answer is 20. What's important is the function-application version of the Ruby.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Folks don't like reading the Python right-to-left.
When you spread it into multiple lines it has to be read from bottom-to-top.
Or maybe from inside to outside.
This nested function version is not widely used.&lt;/p&gt;
&lt;p&gt;We can do better with a stack of generator expressions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stacked-generators"&gt;
&lt;h2&gt;Stacked Generators&lt;/h2&gt;
&lt;p&gt;We'll start with the original two lambdas, &lt;tt class="docutils literal"&gt;hotpo()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;hotpo_run()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
runs = map(
        lambda n: hotpo_run(n, []),
        range(1, 11)
    )
lengths = map(len, runs)
positive = filter(lambda x: x &amp;gt; 0, lengths)
maximum = reduce(
    lambda a, b: a if a &amp;gt; b else b,
    positive
)
&lt;/pre&gt;
&lt;p&gt;This reads from start to finish in an understandable fashion.&lt;/p&gt;
&lt;p&gt;We can easily add steps in the middle of this.&lt;/p&gt;
&lt;p&gt;The downside of adding steps is the intermediate results have names.&lt;/p&gt;
&lt;p&gt;When we want to insert a step, we have to &lt;strong&gt;also&lt;/strong&gt; modify the step after to
use the new intermediate results.&lt;/p&gt;
&lt;p&gt;The upside is the intermediate results have names. These describe
what's going on. I really like this approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hey-wait"&gt;
&lt;h2&gt;Hey, Wait&lt;/h2&gt;
&lt;p&gt;Yes, this is related to the Collatz Conjecture.
See &lt;a class="reference external" href="https://projecteuler.net/problem=14"&gt;https://projecteuler.net/problem=14&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The definition of the &lt;tt class="docutils literal"&gt;hotpo_run()&lt;/tt&gt; function isn't conducive to creating a cache.
We can rewrite it, easily, into a function that builds a list from a single argument value.
This works better with a cache.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from functools import cache
hotpo_run = cache(
    lambda x: [1] if x == 1 else [x] + hotpo_run(hotpo(x))
)
&lt;/pre&gt;
&lt;p&gt;This necessitates a change to the pipeline to deal with the slightly different parameter
signature for the &lt;tt class="docutils literal"&gt;hotpo_run()&lt;/tt&gt; function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
runs = map(
        hotpo_run,
        range(1, 11)
    )
&lt;/pre&gt;
&lt;p&gt;The rest is the same. Second verse same as the first verse.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
lengths = map(len, runs)
positive = filter(lambda x: x &amp;gt; 0, lengths)
maximum = reduce(
    lambda a, b: a if a &amp;gt; b else b,
    positive
)
&lt;/pre&gt;
&lt;p&gt;This computes almost instantly.&lt;/p&gt;
&lt;p&gt;What's important is the sequence of &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt;-&lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt;-&lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; functional operations
is better expressed as a sequence of generator expression statements.
I like to call it the &amp;quot;Stack of Generators&amp;quot; design pattern.
It has much of the expressive power of Ruby, with all of the flexibility we desire.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;And yes, that's still not a solution to Euler 14.&lt;/p&gt;
&lt;p&gt;Euler 14 wants this: &amp;quot;Which starting number, under one million, produces the longest chain?&amp;quot;.&lt;/p&gt;
&lt;p&gt;We need to change the result of the &lt;tt class="docutils literal"&gt;runs&lt;/tt&gt; generator to be a (run, starting value) two-tuple.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
runs = ((hotpo_run(n), n) for n in range(1, 11))
&lt;/pre&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;pre class="literal-block"&gt;
runs = map(lambda n: (hotpo_run(n), n), range(1, 11))
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;lengths&lt;/tt&gt; generator needs to be modified to be &lt;tt class="docutils literal"&gt;lambda r_s: &lt;span class="pre"&gt;(len(r_s[0]),&lt;/span&gt; r_s[1])&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Drop the &lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt;. It's only here to match the original conversation.&lt;/p&gt;
&lt;p class="last"&gt;Replace the &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; with a simpler &lt;tt class="docutils literal"&gt;max()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="functional programming"></category><category term="functional python programming"></category></entry><entry><title>Rewrites are NOT hazardous</title><link href="https://slott56.github.io/2024-02-06-rewrites_are_not_hazardous.html" rel="alternate"></link><published>2024-02-06T08:01:00-05:00</published><updated>2024-02-06T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2024-02-06:/2024-02-06-rewrites_are_not_hazardous.html</id><summary type="html">&lt;p&gt;First, read this: &lt;a class="reference external" href="https://www.industriallogic.com/blog/rewrites-hazardous/"&gt;Hazards And Safeguards for Software Rewrites&lt;/a&gt;.
This is an infuriating article. The first part is nonsense. I wonder if it's intended to be read ironically?
Maybe it's a list of bad ideas?
Skip straight to the &lt;strong&gt;Safeguards for Rewrites&lt;/strong&gt; section. It's really good.&lt;/p&gt;
&lt;p&gt;Also, this &lt;a class="reference external" href="https://www.industriallogic.com/blog/characterization-testing-in-nuclear-power-and-software/"&gt;Characterization Testing …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;First, read this: &lt;a class="reference external" href="https://www.industriallogic.com/blog/rewrites-hazardous/"&gt;Hazards And Safeguards for Software Rewrites&lt;/a&gt;.
This is an infuriating article. The first part is nonsense. I wonder if it's intended to be read ironically?
Maybe it's a list of bad ideas?
Skip straight to the &lt;strong&gt;Safeguards for Rewrites&lt;/strong&gt; section. It's really good.&lt;/p&gt;
&lt;p&gt;Also, this &lt;a class="reference external" href="https://www.industriallogic.com/blog/characterization-testing-in-nuclear-power-and-software/"&gt;Characterization Testing in Nuclear Power and Software&lt;/a&gt;.
This is really good. I used to call it &amp;quot;Test-Driven Reverse Engineering.&amp;quot; It's how you manage a rewrite.
Can endorse as a risk mitigation strategy for everyone who has legacy code.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Rewrites are not hazardous. Ignore the &amp;quot;hazards&amp;quot; part of the article.
This part is infuriatingly full of talking points that make precious little sense.&lt;/p&gt;
&lt;p&gt;It's &lt;strong&gt;managing&lt;/strong&gt; the rewrite that can become hazardous when managers utterly fail to acknowledge the accrued costs and risks of legacy software.&lt;/p&gt;
&lt;p&gt;Ignore the first part of the article. Skip to the &lt;strong&gt;Safeguards for Rewrites&lt;/strong&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hazards-really"&gt;
&lt;h2&gt;Hazards? Really?&lt;/h2&gt;
&lt;p&gt;The article leads with four issues.
It's not clear if this is intended as a list of bad arguments against a rewrite or simply ironically wrong statements.&lt;/p&gt;
&lt;p&gt;It says &amp;quot;Here are typical issues you’ll encounter:&amp;quot; as if these are real hazards.
I think these are nonsense things commonly stated as arguments to avoid or prevent a rewrite.
I think -- maybe -- these are issues people raise to avoid talking rationally about a rewrite.&lt;/p&gt;
&lt;p&gt;This is what's infuriating about the article. The second half is really good. The first half is hard to interpret.&lt;/p&gt;
&lt;p&gt;My working concept is the first half is &amp;quot;farcical hazard statements&amp;quot; not real hazards.&lt;/p&gt;
&lt;p&gt;If I read these are specious, bad rationale for &lt;strong&gt;Business as Usual&lt;/strong&gt; and &lt;strong&gt;Keep The Lights On&lt;/strong&gt;, then,
it makes a little sense.
I've added refutations here, because the original article doesn't directly refute them, it just states them as if they're real hazards.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;100% feature matching is difficult.&amp;quot; It's actually quite easy. Read the companion piece. Skip to the &lt;strong&gt;Safegaurds&lt;/strong&gt; section.
It's also undesirable. As noted later in the article, this should never have been a goal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;You risk building the new system as poorly as the old system.&amp;quot; This is only true if you have the same inept management and insane budgeting as the original.
You'd also need to have the same language, frameworks, and lack of knowledge.&lt;/p&gt;
&lt;p&gt;Let me emphasize this last point: &lt;strong&gt;lack of knowledge.&lt;/strong&gt;  The team writing the legacy code was feeling their way along in the
dark. That's emphatically no longer true. The legacy system lights the path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;It’s easy to underestimate the effort.&amp;quot; This is always true. It's particularly true when management ignores
the dollars poured into maintenance and support. More than once, I've been told that some 10-year-old spaghetti-bowl
of legacy code was written by 4 people in 13 weeks. Somehow, the ensuing 10 years vanished.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;Tension may build between the rewrite team and the support team.&amp;quot;
I don't see much refutation, perhaps another article?
I've encountered this, and seen people resign rather than be involved in replacing code they've spent their entire career maintaining.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's go on. There's more to the hazards section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-hazards"&gt;
&lt;h2&gt;More Hazards&lt;/h2&gt;
&lt;p&gt;Again, the following hazards are mostly bunk. Let's assume they're actually bad arguments against a rewrite.
The article doesn't refute these in detail, instead it skips on to the &lt;strong&gt;Safeguards for Rewrites&lt;/strong&gt; section.
I feel the need to refute them in detail.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;If you miss an oft–used feature, you’ll injure your users.&amp;quot; Right. And? What if the legacy software lacks features?
The decision to invest in risky, buggy legacy code vs. a rewrite is nothing more than accepting high levels of risk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;Ensuring you have duplicated all the features...&amp;quot; was never a goal.  Some legacy features are trash.
One of the reasons for a rewrite is to purge obsolete junk code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;No matter how difficult refactoring may appear, rewriting will be worse.&amp;quot; False. They're the same thing.
A rewrite &lt;strong&gt;is&lt;/strong&gt; refactoring. It's refactoring with fewer constraints. It's still bound by the lessons learned
creating the original software.  Remember. The &lt;strong&gt;knowledge&lt;/strong&gt; gained means a rewrite has a solid footing for designing software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;I’ve seen over and over again, ..., developers copying and pasting code from the existing system...&amp;quot;
That's some poor management. What was the incentive that made this appealing to the developers?
Later, talking about a C++ to Java conversion, the author suggests the &amp;quot;code complete&amp;quot; was somehow a goal.
If so, that's bad management.&lt;/p&gt;
&lt;p&gt;Also. Most rewrites are not between two languages as similar as C++ and Java.
Rewriting COBOL to Python can't invoplve copy-and-paste.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;It is safest to estimate that the rewrite will take similar effort as the original.&amp;quot;
This doesn't make too much sense.
First, the original cost is both some original project &lt;strong&gt;plus&lt;/strong&gt; years and years of maintenance.
Further, the original project often had quite a bit of preliminary analytical work to refine the scope to something
that could be budgeted. This labor is almost &lt;strong&gt;never&lt;/strong&gt; accounted for.
The time users spent helping to understand user stories? Was that part of the development budget also?
The rewrite will be less than the total of development + maintenance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;Any time saved during development will likely be lost to making sure the new system is feature complete.&amp;quot;
This doesn't make any sense at all. Development is development. It's all development until things are feature complete.
There's no &amp;quot;time saved&amp;quot; if it's not feature complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;The usual strategy is a big bang replacement...&amp;quot; Okay. So that's a bad idea.
The &lt;strong&gt;Safeguards for Rewrites&lt;/strong&gt; clearly serves to refute this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This &amp;quot;Hazards&amp;quot; section is infuriating because the tone is opaque.&lt;/p&gt;
&lt;p&gt;Let's assume these are all bad arguments against a rewrite.
Let's call them &amp;quot;Farcical Non-Hazards&amp;quot; or &amp;quot;Things commonly cited as hazards&amp;quot; or something that clarifies
the tone.&lt;/p&gt;
&lt;p&gt;The next section is a &lt;strong&gt;much&lt;/strong&gt; more useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="safeguards-for-rewrites"&gt;
&lt;h2&gt;Safeguards for Rewrites&lt;/h2&gt;
&lt;p&gt;Instrumentation and collect usage statistics.&lt;/p&gt;
&lt;p&gt;A CI/CD pipeline to allow incremental delivery.&lt;/p&gt;
&lt;p&gt;Incremental conversion working down from the highest priority until the users stop demanding legacy features.&lt;/p&gt;
&lt;p&gt;This is good stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Two of the three points in the summary are excellent.&lt;/p&gt;
&lt;p&gt;The first bugs me.&lt;/p&gt;
&lt;p&gt;&amp;quot;A complete rewrite of an existing application or system should be your last choice&amp;quot; is hardly worth repeating.
It's a simple cost-risk decision, and it's &lt;strong&gt;always&lt;/strong&gt; on the table.&lt;/p&gt;
&lt;p&gt;With extremely rich open-source ecosystems around languages like Python, the cost to rewrite
can be surprisingly low.&lt;/p&gt;
&lt;p&gt;A super-fancy &amp;quot;analytical app&amp;quot; in an old Visual Basic program may have been reduced to a tidy
Java Spring Boot application that did some flexible analytical computations.
This may reduce, yet again, to an extract and a Jupyter Notebook handed over to skilled users.
The volume of code went from thousands of lines of VB to hundreds of lines of Java to a data dictionary
and a training class.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Management"></category><category term="test-driven reverse engineering"></category><category term="refactoring"></category><category term="legacy-code"></category><category term="estimating"></category></entry><entry><title>More Reasons to Stop Bash-ing</title><link href="https://slott56.github.io/2023_12_19-more_reasons_to_stop_bashing.html" rel="alternate"></link><published>2023-12-19T08:01:00-05:00</published><updated>2023-12-19T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-12-19:/2023_12_19-more_reasons_to_stop_bashing.html</id><summary type="html">&lt;p&gt;There are many good reasons to use shell scripts.
Mostly, a script can be useful when it's an alias that launches an application.
Beyond that, I have doubts.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Incumbency is a popular argument for bash.&lt;/p&gt;
&lt;p&gt;It's not a good argument, however.&lt;/p&gt;
&lt;p&gt;Use &lt;a class="reference external" href="https://pypi.org/project/invoke/"&gt;invoke&lt;/a&gt; and you'll be much happier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;There are many good reasons to use shell scripts.
Mostly, a script can be useful when it's an alias that launches an application.
Beyond that, I have doubts.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Incumbency is a popular argument for bash.&lt;/p&gt;
&lt;p&gt;It's not a good argument, however.&lt;/p&gt;
&lt;p&gt;Use &lt;a class="reference external" href="https://pypi.org/project/invoke/"&gt;invoke&lt;/a&gt; and you'll be much happier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://dnastacio.medium.com/bash-over-python-39e0eba502f9"&gt;When You Should Use Bash Over Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'll start with the three &amp;quot;expressiveness&amp;quot; points.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Syntax&lt;/strong&gt;: Python code is longer. While true, this isn't a reason to use bash. I have to reject this for two reasons.&lt;ul&gt;
&lt;li&gt;No one wins at code golf. Shorter code isn't better by any metric other than size. Bash syntax hides important details.&lt;/li&gt;
&lt;li&gt;The argument starts from the notion that there's a &amp;quot;better&amp;quot; way to express complicated structures, and the bash reflects better.
Python, by being more explicit, is less good.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Runtime&lt;/strong&gt;: Shell script interpreters are ubiquitous. True. Not a compelling argument, when we consider that bash scripts are untestable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantics&lt;/strong&gt;: There is a cognitive cost in converting bash to Python. Correct. Easy to avoid by avoiding the confusing and opaque bash abstractions.&lt;ul&gt;
&lt;li&gt;The argument (again) starts from the notion that the bash abstraction is a standard against which other languages -- by virtue of being different -- aren't as good.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The argument &lt;strong&gt;for&lt;/strong&gt; bash is incumbency. Bash is installed, and because it's installed, it's better.&lt;/p&gt;
&lt;p&gt;&amp;quot;Bash’s longevity is rooted in core strengths that still resonate in the technology industry&amp;quot;.
I suggest the longevity is due entirely to it's incumbency.
It's not the &lt;strong&gt;best&lt;/strong&gt; choice for anything.
It's a handy default choice because it's already installed.&lt;/p&gt;
&lt;p&gt;And.  There's no easy way to unit test.&lt;/p&gt;
&lt;p&gt;Let's move on to the other six reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-reasons-for-using-bash"&gt;
&lt;h2&gt;Some reasons for using bash&lt;/h2&gt;
&lt;p&gt;Here are the the detailed reasons for rejecting Python. Most of this isn't persuasive.
It's mostly about the incumbency of bash.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Mastery Matters. Parts of this argument are true. Bash scripts seem to be uniformly bad because bad is a permitted style.
They could be better, making use of clever things like functions and their obscure semantics.&lt;/p&gt;
&lt;p&gt;This doesn't make bash better. It only says that a lot of people write bad scripts.
A lot of bash-bashing stems from seeing so many bad scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Bash is Everywhere. True. Incumbency may be helpful under certain situations.
It's like learning how to compute logarithms so you can then add them to avoid multiplication.
Yes. It does work. However. Calculators exist on this timeline; it's no longer 1617.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Sidestepping the discussions about the Python version to pick&amp;quot;? What discussion? Is this a &amp;quot;Python 2 v. Python 3&amp;quot; question? That's been answered.&lt;/li&gt;
&lt;li&gt;&amp;quot;the best way to install Python on a given environment&amp;quot;? Most linux distros have Python ready-to-go. That's best.&lt;/li&gt;
&lt;li&gt;&amp;quot;gymnastics to keep dependencies and environments in check&amp;quot;? This isn't hard, actually. Almost anything bash-related is in the standard library plus a few add-ons line &lt;a class="reference external" href="https://pypi.org/project/psutil/"&gt;psutil&lt;/a&gt;.
For a very complicated application with a tall stack of poorly-chosen dependencies, there's work involved.
That application with a complicated set of installs isn't doing bash-like things, though.&lt;/li&gt;
&lt;li&gt;&amp;quot;fragmentation of Python runtime versions&amp;quot;? What fragmentation? Python is popular, and evolves quickly. Is evolution to new versions some kind of problem?&lt;/li&gt;
&lt;li&gt;&amp;quot;mutually exclusive dependency matrix&amp;quot;? Callback to gymnastics. A tall stack of poorly-chosen dependencies is an edge case. It's not the sweet spot for admin tasks often written as bad, untestable bash scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Secured Production Environments. This is hard. None of these difficulties are Python-related, however. It applies to every single application in the environment.
Java requires installs for develolpers, too. So go Go and Rust. Air-gapped systems are hard to build.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;whatever Python runtime environment you lock into a production environment&amp;quot;? Um. This is true for &lt;em&gt;all&lt;/em&gt; applications.
It has nothing to do with Python. This is configuration management. It's hard.&lt;/li&gt;
&lt;li&gt;&amp;quot;Running package managers safely inside a production environment is possible, but everything’s got a price&amp;quot;. And the price is actually quite low.
Further, this means building secured systems for software development. That's quite hard in all languages.
The only language that wouldn't require extra downloads of new and useful packages would be Pascal, I think.&lt;/li&gt;
&lt;li&gt;&amp;quot;You could do [here documents] with a Python script, too, as long as it does not import any package not already installed in the system.&amp;quot;
Right. Most bash-related Python features are part of the standard library. This isn't daunting or even particularly difficult or complicated.
And. With Python you can unit test.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Container Runtimes. See #3. This is bash incumbency and configuration management from point 3, repeated. It's still challenging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The Universal Language of Platforms. The bash CLI is ubiquitous, it's ideal for bash. But it's not actually &lt;strong&gt;ideal&lt;/strong&gt; in general.
A Python library that offers access an application's API may be much easier to work with and involve far fewer weird
leaps to make the CLI amendable to the relatively weak set of abstractions bash has available.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;It would take a couple of days in syntactical and semantical translations to get a result with more lines of code that were less readable than its Bash counterpart&amp;quot;.
Again, the argument presumes the bash language is the gold standard. Starting with bash and enduring translating into Python involves a cost.
It also had benefits, like the ability to test.
Why not start with Python?
&amp;quot;Less readable&amp;quot; is offered without further evidence. Again, this repeats the bash incumbency argument where smaller and older is inherently better.&lt;/p&gt;
&lt;p&gt;Further, the time spent writing Python is often time &lt;strong&gt;well&lt;/strong&gt; spent getting the abstractions right,
and understading use cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&amp;quot;All original samples in the docs were written using the command-line interface.&amp;quot;  Incumbency. And maybe lazy documentation writers in the vendor organization.
&amp;quot;All Internet forums reference the command-line interface&amp;quot;. Sigh. The &amp;quot;All&amp;quot; is disputable, but the point remains that using Python takes some effort.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The End of the Line Is Not Scripted. (Not sure what this means.)
There are two obstacles here, both of which seem specious at best.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Mega CLI's. Just because a bash CLI is available does not make it &amp;quot;best.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;every bit of function be wrapped with command-line interfaces.&amp;quot;  While true, it ignores the fact
that some packages are actually written in Python, and the bash interface is -- at best -- a hack
for those folks who won't learn Python.&lt;/li&gt;
&lt;li&gt;Bash is everywhere. Incumbency does not make it better. It only makes it incumbent.&lt;/li&gt;
&lt;li&gt;Writing shell scripts is more accessible than writing a new application. A good straw-man.
It throws Python scripting away as if we can't write a short, pithy, testable, reusable Python script.&lt;/li&gt;
&lt;li&gt;&amp;quot;open-source juggernauts...&amp;quot; like &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;openssl&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;jq&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;yq&lt;/tt&gt; involves two issues.
First, some programs like &lt;tt class="docutils literal"&gt;openssl&lt;/tt&gt; are better left as stand-alone binaries used by a Python script.
Second, programs like  &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;jq&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;yq&lt;/tt&gt; are the primary symptom of how unsuitable bash is for working with anything other
than a trivial string of characters. Reliance on these add-on programs is one of the reasons why bash is so confusingly horrible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Operations Frameworks like Ansible, Terraform, and (not mentioned) Puppet. These require some scripting
for integration. Having done it in Python, I can safely say Python works.&lt;/p&gt;
&lt;p&gt;And I could unit test it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unrelated to the two obstacles is this nugget: &amp;quot;tuned for five decades of minimum resource utilization&amp;quot;.
I don't think this is true at all.&lt;/p&gt;
&lt;p&gt;The original Bourne &lt;tt class="docutils literal"&gt;sh&lt;/tt&gt; wasn't very thrifty to begin with. It was constrained by the tiny size of early
machines. And. The Linux technique of sharing the read-only code pages meant the costs could stay low.
State management was environment variables and some OS settings (like the current working directory.)
The bash program is bloatware by comparison to the Bourne shell.
The use of the OS &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; operator forks subprocess after subprocess leading to crazy OS overheads
for a &amp;quot;simple&amp;quot; &lt;tt class="docutils literal"&gt;app | awk | grep | sed &amp;gt; file&lt;/tt&gt; operation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&amp;quot;In objective terms, regarding task automation for Cloud operations, it is hard to argue against Bash&amp;quot;.&lt;/p&gt;
&lt;p&gt;No. Actually. It's really easy.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The bash scripting language is opaque. Objectively, the syntax rules are quite obscure with complicated line-ending and quoting rules.
Objectively, it's really difficult to understand the semantics of the operators like &lt;tt class="docutils literal"&gt;;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;.
Why is &lt;tt class="docutils literal"&gt;;&lt;/tt&gt; optional? Why can a line end with &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;  or &lt;tt class="docutils literal"&gt;;&lt;/tt&gt; but not end with &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;?&lt;/li&gt;
&lt;li&gt;Error-handling in bash is an unholy mess. Objectively, what does &lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-e&lt;/span&gt;&lt;/tt&gt; do?
Objectively, why are there so many return codes?&lt;/li&gt;
&lt;li&gt;Unit testing is almost impossible. Objectively, no one should run a shell script without a test case.&lt;/li&gt;
&lt;li&gt;Bash has almost no useful data structures beyond the string.
Objectively, we can argue that there's a way to break strings on spaces to treat the string as an array.
This is essentially Python &lt;tt class="docutils literal"&gt;.split()&lt;/tt&gt; as the alternative data structure to the string.&lt;/li&gt;
&lt;li&gt;Programs like &lt;tt class="docutils literal"&gt;expr&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;[&lt;/tt&gt; are used widely and very difficult to understand.
Objectively, the man pages for these programs are quite complicated.
What looks like an expression isn't really. It's input to a separate binary that produces a result used by the shell's &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; construct.
Objectively, this is confusing and unpleasant.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Programs like &lt;tt class="docutils literal"&gt;awk&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;jq&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;yq&lt;/tt&gt; are used widely and can be difficult to understand.
They're -- technically -- separate binaries, part of the overall bash ecosystem of internal bash features and external binaries.
They do permit a kind of functional style on bash programming which is nice.
Objectively, this isn't all bad. Python, also, has functional programming features.&lt;/p&gt;
&lt;p&gt;The ubiquity of the bash programming is undeniable. It's also terrible. Bash should be used cautiously.&lt;/p&gt;
&lt;p&gt;When to use bash?&lt;/p&gt;
&lt;p&gt;Use bash you need to launch a Python script. A bash script should be little more than an alias for a program written in a language that offers unit testing.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="shell"></category><category term="bash"></category><category term="unit-testing"></category></entry><entry><title>Understanding the Abstraction -- matplotlib Edition</title><link href="https://slott56.github.io/2023-12-12-understanding_the_abstraction.html" rel="alternate"></link><published>2023-12-12T08:01:00-05:00</published><updated>2023-12-12T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-12-12:/2023-12-12-understanding_the_abstraction.html</id><summary type="html">&lt;p&gt;I wasted three days because I refused to get a grip on how &lt;a class="reference external" href="https://matplotlib.org"&gt;matplotlib&lt;/a&gt; &lt;strong&gt;really&lt;/strong&gt; works.&lt;/p&gt;
&lt;p&gt;Most of the time, folks like me are happy and successful using the &lt;a class="reference external" href="https://matplotlib.org/stable/api/pyplot_summary.html"&gt;pyplot&lt;/a&gt; module.
The &lt;a class="reference external" href="https://matplotlib.org/stable/users/explain/quick_start.html"&gt;Quickstart&lt;/a&gt; provides brilliant, working
examples.&lt;/p&gt;
&lt;p&gt;As my partner's grandfather used to say, &amp;quot;We're off to the races in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wasted three days because I refused to get a grip on how &lt;a class="reference external" href="https://matplotlib.org"&gt;matplotlib&lt;/a&gt; &lt;strong&gt;really&lt;/strong&gt; works.&lt;/p&gt;
&lt;p&gt;Most of the time, folks like me are happy and successful using the &lt;a class="reference external" href="https://matplotlib.org/stable/api/pyplot_summary.html"&gt;pyplot&lt;/a&gt; module.
The &lt;a class="reference external" href="https://matplotlib.org/stable/users/explain/quick_start.html"&gt;Quickstart&lt;/a&gt; provides brilliant, working
examples.&lt;/p&gt;
&lt;p&gt;As my partner's grandfather used to say, &amp;quot;We're off to the races in a cloud of heifer dust.&amp;quot;&lt;/p&gt;
&lt;p&gt;The examples are easily rewritten for the data at hand. They work in Jupyter Lab. Boom. Done.&lt;/p&gt;
&lt;p&gt;There's a little bit of technical detail in &lt;a class="reference external" href="https://matplotlib.org/stable/users/explain/figure/interactive.html#jupyter-notebooks-jupyterlab"&gt;https://matplotlib.org/stable/users/explain/figure/interactive.html#jupyter-notebooks-jupyterlab&lt;/a&gt;.
When I realized things weren't working. I followed each piece of advice, scruplously. They were not the cause of my problems.
The root cause was failure to understand the abstraction.&lt;/p&gt;
&lt;div class="section" id="digging-a-little-deeper"&gt;
&lt;h2&gt;Digging a Little Deeper&lt;/h2&gt;
&lt;p&gt;What is not &lt;strong&gt;painfully&lt;/strong&gt; obvious is how the &lt;strong&gt;matplotlib&lt;/strong&gt; architecture works.
(It's not written in flaming letters 100 feet high.)&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;pyplot&lt;/tt&gt; module is pure genius. It works to shield us from a tech stack that's non-trivial.&lt;/p&gt;
&lt;p&gt;Which means, when someone like me wants to do something that's not copy-and-paste from one of the hundreds of examples,
I have to &lt;strong&gt;actually&lt;/strong&gt; read the documentation. Carefully.&lt;/p&gt;
&lt;p&gt;It took me three days to understand what the documentation said.
Here's my timeline.&lt;/p&gt;
&lt;p&gt;Day 1. Fuss around with my incorrect understanding of how graphics are created.&lt;/p&gt;
&lt;p&gt;Day 2. Write the entire thing as a stand-alone command-line app, where the extemely robust, clever &lt;strong&gt;matplotlib&lt;/strong&gt; architecture works.
It works in spite of me using it utterly incorrectly.&lt;/p&gt;
&lt;p&gt;Day 3. Blinding realization that for the last two days, I've been &lt;strong&gt;doing it wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-big-reveal"&gt;
&lt;h2&gt;The Big Reveal&lt;/h2&gt;
&lt;p&gt;Just about everything that happens in &lt;strong&gt;matplotlib&lt;/strong&gt; depends on an abstraction called an &lt;tt class="docutils literal"&gt;Artist&lt;/tt&gt; being out of date from the canvas.&lt;/p&gt;
&lt;p&gt;This is not obvious, and no one needs to know it except in the rare cases of an animation.&lt;/p&gt;
&lt;p&gt;The rest of the time, we observe that changes to scale or axes or whatever lead to changes to the diagram
that are just what were expected. The &amp;quot;out-of-date&amp;quot; business doesn't enter into our experience
when we're making changes that update the static diagram we want.&lt;/p&gt;
&lt;p&gt;Anyone (even me) can get things to work by simply creating axes, creating a &amp;quot;fill&amp;quot; (a Polygon, actually), and being happy.
The &lt;tt class="docutils literal"&gt;plt.show()&lt;/tt&gt; works.&lt;/p&gt;
&lt;p&gt;But that's actually &lt;strong&gt;not&lt;/strong&gt; right for the kinds of things I was trying to do.&lt;/p&gt;
&lt;p&gt;Here's what I was working on.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/Empire_1337.png"&gt;
&lt;img alt="Hexagonal map showing 5 interlocking regions" src="https://slott56.github.io/media/Empire_1337.png" style="width: 400px; height: 400px;" /&gt;
&lt;/a&gt;
&lt;p&gt;This map is actually &amp;quot;grown&amp;quot; using some simple rules from a few seed points.
The animation of that growth process is what I want.&lt;/p&gt;
&lt;p&gt;This isn't as clever as &lt;a class="reference external" href="https://conwaylife.com"&gt;Conway's Game of Life&lt;/a&gt;, but it is similar in a few respects.
Mine, for example, involves random numbers. Is that desirable? Can the dependency be reduced
and still lead to complicated structures?&lt;/p&gt;
&lt;p&gt;I want to tinker with the rules.&lt;/p&gt;
&lt;p&gt;(I have a version running in the Pythonista environment on my iPad. I want a version
in JupyterLab that I can expand on more easily.)&lt;/p&gt;
&lt;p&gt;Let's compare and contrast the two approaches&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="seductive-and-wrong"&gt;
&lt;h2&gt;Seductive and Wrong&lt;/h2&gt;
&lt;p&gt;This is seductive and simple. It fits (to an extent) with previous examples.
It seems so right. And it sometimes works. But it's so wrong.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create 324 polygon outlines to paint the background grid.&lt;/li&gt;
&lt;li&gt;Create 324 text labels to label the hexes.&lt;/li&gt;
&lt;li&gt;As the generative algorithm runs, create colored polygon fill patches, showing
how the 5 seed positions evolve into the 5 interlocking shapes.
This starts with 5 filled polygons and grows to 200+ polygons through 48 generations.
So that's &lt;span class="math"&gt;\(35 + ... + 235 = 6,650\)&lt;/span&gt; filled polygons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wave after wave of increasing number of polygons.
Sure, it's a lot of objects. I have a big laptop. We're good.&lt;/p&gt;
&lt;p&gt;This has two problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's slow.&lt;/li&gt;
&lt;li&gt;If I save the animation as an HTML or JSHTML object, I get a cycling animation with the right number of images, but  no content in any image.&lt;/li&gt;
&lt;li&gt;In spite of the animation being empty, the final image looks good.&lt;/li&gt;
&lt;li&gt;A few off-by-one errors.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What's wrong?&lt;/p&gt;
&lt;p&gt;I'm patient and thorough. I tried a &lt;strong&gt;lot&lt;/strong&gt; of things.  I added Qt. I added ipympl. I restructured the animation
as functions and callable objects. I used &lt;tt class="docutils literal"&gt;FuncAnimation&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ArtistAnimation&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Nothing Worked.  Nothing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Spoiler Alert&lt;/strong&gt;.  That's how you know you're doing something fundamentally wrong.
The thing works in general. But specific features are missing.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="how-can-that-be-wrong"&gt;
&lt;h2&gt;How Can That Be Wrong?&lt;/h2&gt;
&lt;p&gt;The foundational mis-understanding was trying to animate the appearance of various &lt;strong&gt;matplotlib&lt;/strong&gt; &lt;tt class="docutils literal"&gt;Artist&lt;/tt&gt; objects
on the map.&lt;/p&gt;
&lt;p&gt;I drew the grid. I drew the labels.&lt;/p&gt;
&lt;p&gt;Then the colored hexes are supposed to appear, one at at time. I figured (wrongly) I would just draw the filled polygons.&lt;/p&gt;
&lt;p&gt;See above. &amp;quot;Just about everything that happens in &lt;strong&gt;matplotlib&lt;/strong&gt; depends on an abstraction called an &lt;tt class="docutils literal"&gt;Artist&lt;/tt&gt; being out of date from the canvas.&amp;quot;&lt;/p&gt;
&lt;p&gt;Out-of-date?&lt;/p&gt;
&lt;p&gt;Out-of-date!&lt;/p&gt;
&lt;p&gt;State Change.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Artist&lt;/tt&gt; won't paint unless there's something &lt;strong&gt;new&lt;/strong&gt; to paint.&lt;/p&gt;
&lt;p&gt;On day three, I realized the truth.&lt;/p&gt;
&lt;p&gt;It works like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create 324 polygon outlines to paint the background grid.&lt;/li&gt;
&lt;li&gt;Create 324 text labels to label the hexes.&lt;/li&gt;
&lt;li&gt;Create 324 polygons filled with white.&lt;/li&gt;
&lt;li&gt;As the generative algorithm runs, change the color in the polygon.
&lt;strong&gt;Change&lt;/strong&gt; the color. Change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Change. The &lt;tt class="docutils literal"&gt;Artist&lt;/tt&gt; is waiting for a change.&lt;/p&gt;
&lt;p&gt;Don't create a wave of new polygons. Change the color of the polygons.
It's simpler. It's faster. It works.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def paint(self, col: int, row: int, fill: str) -&amp;gt; None:
    &amp;quot;&amp;quot;&amp;quot;
    Update a hex's fill color.
    &amp;quot;&amp;quot;&amp;quot;
    for a in self.cells[col, row]:
        a.set(
            fill=True,
            color=fill
        )
&lt;/pre&gt;
&lt;p&gt;Don't create a new polygon.  Change the color of the polygon you have.&lt;/p&gt;
&lt;p&gt;I still have no idea how the scale factors work when creating the JSHTML.
I have eight mypy complaints because I'm not using &lt;strong&gt;matplotlib&lt;/strong&gt; correctly.
I have more work to do.&lt;/p&gt;
&lt;p&gt;But. I have pictures that work. For the right reason.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Python"></category><category term="language"></category><category term="semantics"></category></entry><entry><title>It's Not THE Ternary Operator -- there are many</title><link href="https://slott56.github.io/2023_12_05-not_the_ternary_operator.html" rel="alternate"></link><published>2023-12-05T08:01:00-05:00</published><updated>2023-12-05T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-12-05:/2023_12_05-not_the_ternary_operator.html</id><summary type="html">&lt;p&gt;I'm sick of reading about &lt;strong&gt;THE&lt;/strong&gt; Ternary Operator.&lt;/p&gt;
&lt;p&gt;There is not merely &lt;strong&gt;a&lt;/strong&gt; single operator that is ternary.
There are many operators that are ternary.&lt;/p&gt;
&lt;p&gt;Here's one example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; 6+1 &amp;gt;= 6 &amp;gt;= 6-1
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&amp;gt;= &amp;gt;=&lt;/tt&gt; operator is ternary. It has 3 operands.  Count them.&lt;/p&gt;
&lt;p&gt;There are a 36 of these ternary operators …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm sick of reading about &lt;strong&gt;THE&lt;/strong&gt; Ternary Operator.&lt;/p&gt;
&lt;p&gt;There is not merely &lt;strong&gt;a&lt;/strong&gt; single operator that is ternary.
There are many operators that are ternary.&lt;/p&gt;
&lt;p&gt;Here's one example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; 6+1 &amp;gt;= 6 &amp;gt;= 6-1
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&amp;gt;= &amp;gt;=&lt;/tt&gt; operator is ternary. It has 3 operands.  Count them.&lt;/p&gt;
&lt;p&gt;There are a 36 of these ternary operators.&lt;/p&gt;
&lt;p&gt;&amp;quot;Oh, pish-tosh,&amp;quot; you say. &amp;quot;It's an example of two binary operators.&amp;quot;&lt;/p&gt;
&lt;p&gt;Really?&lt;/p&gt;
&lt;p&gt;In a sense, you're almost right, it's equivalent to &lt;tt class="docutils literal"&gt;6+1 &amp;gt;= 6 and 6 &amp;gt;= &lt;span class="pre"&gt;6-1&lt;/span&gt;&lt;/tt&gt;. Which is three binary operators.&lt;/p&gt;
&lt;p&gt;But it's &lt;strong&gt;not&lt;/strong&gt; three binary operators. It's one ternary operator.&lt;/p&gt;
&lt;p&gt;&amp;quot;Whoa. What about &lt;tt class="docutils literal"&gt;5 &amp;lt; 6 &amp;lt; 7 &amp;lt; 8&lt;/tt&gt;?&amp;quot; you reply triumphantly. &amp;quot;That has four operands!&amp;quot;&lt;/p&gt;
&lt;p&gt;Right. It's quaternary. There a lot of ways to create quaternary (and higher) operators in Python.
There are 216 of quaternary operators.  1296 quinary.&lt;/p&gt;
&lt;p&gt;There is not &lt;strong&gt;A Ternary Operator&lt;/strong&gt;.  The phrase is meaningless.  You can stop using it.&lt;/p&gt;
&lt;div class="section" id="there-s-more"&gt;
&lt;h2&gt;There's more&lt;/h2&gt;
&lt;p&gt;We're not done.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; (2*a + 1
...    for a in range(5)
...    if a % 2 == 0
... )
&lt;/pre&gt;
&lt;p&gt;Is ternary.&lt;/p&gt;
&lt;p&gt;I'll clarify:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;2*a + 1&lt;/tt&gt; -- expression #1&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;range(5)&lt;/tt&gt; -- expression #2&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;a % 2 == 0&lt;/tt&gt; -- expression #3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Admittedly, the two pieces of interstitial syntax are complicated.&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;for a in&lt;/tt&gt;  -- kind of big; and it names a bind variable.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;if&lt;/tt&gt; -- more typical for ternary operators.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But. There are three operands separated by punctuation.&lt;/p&gt;
&lt;p&gt;It is, therefore, ternary.&lt;/p&gt;
&lt;p&gt;And yes. When we have multiple &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; clauses or multiple &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; clauses, we clearly have quaternary and quinary operators.
That's part of my point: there are a number of &lt;em&gt;arities&lt;/em&gt; and a number of operators of each arity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-could-go-on"&gt;
&lt;h2&gt;I could go on&lt;/h2&gt;
&lt;p&gt;A Big Pointless Beef (BPB™) is often this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The ternary operator&lt;/strong&gt; (by which I presume they mean the conditional expression) &lt;strong&gt;evaluates the middle first.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which is kind of a &amp;quot;so what?&amp;quot;&lt;/p&gt;
&lt;p&gt;Many things in Python are left-to-right.&lt;/p&gt;
&lt;p&gt;But not everything is trivially left-to-right.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; noisy = lambda x: print(x) or x
&amp;gt;&amp;gt;&amp;gt; list(noisy(2*a + 1)
...   for a in noisy(range(5))
...   if noisy(a % 2 == 0)
... )
range(0, 5)  # expression 2, the range(...)
True  # expression 3, the if.
1  # expression 1, the 2*a+1.
False
True
5
False
True
9
[1, 5, 9]
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;range(5)&lt;/tt&gt; -- in the middle of this particular ternay operator -- is evaluated first.
And only evaluated once, where the outer expressions are evaluated on right-to-left order over and over again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="we-re-not-done"&gt;
&lt;h2&gt;We're not done&lt;/h2&gt;
&lt;p&gt;Consider, if you will,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; a = list(range(5))
&amp;gt;&amp;gt;&amp;gt; a[1:-1]
[1, 2, 3]
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;a[1:-1]&lt;/span&gt;&lt;/tt&gt; is ternary. It has three expressions. Count them yourself.&lt;/p&gt;
&lt;p&gt;Also, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;a[:-1:2]&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;a[-1::-1]&lt;/span&gt;&lt;/tt&gt;.  All ternary subsets of a more general quaternary operator.&lt;/p&gt;
&lt;p&gt;&amp;quot;That'a wrong! You can't call a slice part of an operator,&amp;quot; you claim.&lt;/p&gt;
&lt;p&gt;Perhaps I am pushing it. But it sure looks like &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; is one expressions, &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; is another and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/tt&gt; is the third.
And it sure looks like &lt;tt class="docutils literal"&gt;[&lt;/tt&gt; is one separator, &lt;tt class="docutils literal"&gt;:&lt;/tt&gt; is another, and there's an extra closing
punctuation mark of &lt;tt class="docutils literal"&gt;]&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&amp;quot;You've jumbled up indexing and slicing!&amp;quot; you claim. &amp;quot;They're clearly separate syntactic categories!&amp;quot;&lt;/p&gt;
&lt;p&gt;Clearly? If I can only using slicing in the context of indexing, I'm not completely sold that these two concepts
are separate and foreign.  They seem pretty tightly coupled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Stop writing (and saying) &amp;quot;The Ternary Operator&amp;quot;. Please.&lt;/p&gt;
&lt;p&gt;There are a lot of ternary operators.&lt;/p&gt;
&lt;p&gt;If you don't like the &lt;strong&gt;Conditional Expression&lt;/strong&gt; because it's too much like a list comprehension with that &amp;quot;evaluate something not on the left first&amp;quot; semantics,
please say that you don't like &lt;strong&gt;The Section 6.13 Conditional Expression&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Please.  Please try to be precise.&lt;/p&gt;
&lt;p&gt;Otherwise, the rest of your rant on evaluation order looks like you haven't really taken the time to think things through.
Maybe you have, but the use of &amp;quot;The Ternary Operator&amp;quot; dilutes your message.&lt;/p&gt;
&lt;p&gt;Other languages use phrases like &amp;quot;the ternary operator.&amp;quot; That doesn't really mean much.
We're talking about Python, where there's more than one.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="language"></category><category term="semantics"></category></entry><entry><title>Cleaning up Examples</title><link href="https://slott56.github.io/2023-11-17-example_cleanup.html" rel="alternate"></link><published>2023-11-17T08:01:00-05:00</published><updated>2023-11-17T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-11-17:/2023-11-17-example_cleanup.html</id><summary type="html">&lt;p&gt;Stand-alone document files for tech writing are awful.
They should &lt;em&gt;not&lt;/em&gt; be used as widely as they are.&lt;/p&gt;
&lt;div class="section" id="bluf-don-t-use-ms-word"&gt;
&lt;h2&gt;BLUF: Don't Use MS-Word&lt;/h2&gt;
&lt;p&gt;We used to call editors like MS-Word &lt;em&gt;WYSIWYG&lt;/em&gt; -- What You See Is What You Get.
Once upon a time, an editor that immediately presented the final rendered doc …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Stand-alone document files for tech writing are awful.
They should &lt;em&gt;not&lt;/em&gt; be used as widely as they are.&lt;/p&gt;
&lt;div class="section" id="bluf-don-t-use-ms-word"&gt;
&lt;h2&gt;BLUF: Don't Use MS-Word&lt;/h2&gt;
&lt;p&gt;We used to call editors like MS-Word &lt;em&gt;WYSIWYG&lt;/em&gt; -- What You See Is What You Get.
Once upon a time, an editor that immediately presented the final rendered doc was an amazing, life-changing thing.
Steve Jobs insisted Macintosh offer variable-width fonts. Wonderful!&lt;/p&gt;
&lt;p&gt;The current implementations seems terrible, however.&lt;/p&gt;
&lt;p&gt;When writing about code, a &lt;tt class="docutils literal"&gt;.docx&lt;/tt&gt; file can be filled with examples that -- no matter how careful the writing and editing process --
aren't really subject to any useful level of automated testing.&lt;/p&gt;
&lt;p&gt;The author writes, tests and then -- ugh -- copies and pastes into the document file.
The reviewers review and check. The tech editor checks.
Any mistakes corrected in the source code need to be re-copied and re-pasted -- manually -- into the document file.
Who's got the list of all the copy-and-paste locations? Anyone?&lt;/p&gt;
&lt;p&gt;And how would you get such a thing from MS-Word?&lt;/p&gt;
&lt;p&gt;Some kind of &amp;quot;INCLUDE FROM EXTERNAL FILE HERE&amp;quot; marker seems like it is absolutely essential.&lt;/p&gt;
&lt;p&gt;And missing.&lt;/p&gt;
&lt;p&gt;There's a way with some kind of &amp;quot;merge&amp;quot; capability to maybe jam external text into a document.
But. Yuk. It's not at all clear how this works.
It doesn't seem to be a first-class, easy-to-be-sure-you're-doing-it-right feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-gets-worse"&gt;
&lt;h2&gt;It gets worse&lt;/h2&gt;
&lt;p&gt;Unpacking the official, final source documents for my books from the publisher's &lt;tt class="docutils literal"&gt;.DOCX&lt;/tt&gt; was eye-opening.&lt;/p&gt;
&lt;p&gt;First -- the various boundaries between segments of the text can be wrong.
Which means they were wrong all along.
The errors are small.
Indeed, the errors are so small I don't think anyone can actually &lt;em&gt;see&lt;/em&gt; them. But.
When I go to make changes, I find there's a kind of nightmare of invisible boundaries.&lt;/p&gt;
&lt;p&gt;The key problem is that the WYSIWYG editors seem to have innumerable invisible borders.
These wind up on the wrong side of the markup.
They can be accidentally assigned the wrong style. With &lt;strong&gt;no&lt;/strong&gt; useful feedback.&lt;/p&gt;
&lt;p&gt;(Yes you can make whitespace visible in MS-Word. Try it. Whitspace doesn't have a visible style,
so you still don't know what part of the content it belongs to.)&lt;/p&gt;
&lt;p&gt;The implicit ¶ boundary after a code example -- to be specific -- can wind up as part of
the code.&lt;/p&gt;
&lt;p&gt;Want to add text after the example?&lt;/p&gt;
&lt;p&gt;It's now part of the example. It looks like &lt;tt class="docutils literal"&gt;CODE&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This leads time wasted on pointing and clicking to adjust the boundaries to get the text out of the example.
Or the example out of the text.&lt;/p&gt;
&lt;p&gt;Worse.&lt;/p&gt;
&lt;p&gt;The implicit ¶ boundary that's part of an itemized list item can wind up in -- or out -- of the adjacent code example.
Visually, you can't tell. Sometimes, you might notice the bullet looks a little &amp;quot;off&amp;quot;.
It's not obvious (from a single bullet) that it's in the &lt;tt class="docutils literal"&gt;CODE&lt;/tt&gt; font, not the TEXT font.&lt;/p&gt;
&lt;p&gt;Worse.&lt;/p&gt;
&lt;p&gt;The WYSIWYG editor is designed so mom (my mom, who's in her 90's) can create a shopping list and print it out.
(Which makes you wonder why it has so many features mom will never use.)&lt;/p&gt;
&lt;p&gt;Here's the problem with these &amp;quot;amateur user&amp;quot; features:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;The tools make (and enforce) assumptions about itemized and enumerated lists that are appropriate for mom.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;These assumption are not appropriate for technical writing.&lt;/p&gt;
&lt;p&gt;I need multiple paragraphs per number. How do I do this? I have to change the style of the &amp;quot;additional&amp;quot; paragraphs.&lt;/p&gt;
&lt;p&gt;Then, I have to make sure that the subsequent numbered paragraphs start with the right number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;This is a lot of error-prone pointing and clicking. A small change leads to strange numbers.
Or numbers in the &lt;tt class="docutils literal"&gt;CODE&lt;/tt&gt; font.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I could go on. I'm not a fan of WYSIWYG. I call it &amp;quot;What is you is &lt;em&gt;all&lt;/em&gt; you get.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-better"&gt;
&lt;h2&gt;What's Better?&lt;/h2&gt;
&lt;p&gt;I'm not &lt;strong&gt;sure&lt;/strong&gt; what's better. But. I have to say, that I'm really pleased with LaTeX and the ability
to use the &lt;tt class="docutils literal"&gt;listings&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;minted&lt;/tt&gt; packages to include a few lines of code from external files.&lt;/p&gt;
&lt;p&gt;(Some people hate LaTeX with unbridled passion. I can't recommend it because the haters stop reading at &amp;quot;LaTeX.&amp;quot;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="case-in-point"&gt;
&lt;h2&gt;Case In Point&lt;/h2&gt;
&lt;p&gt;The book has snippets like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def some_method(self) -&amp;gt; None:
    # Do some prep.
    super().some_method()  # Use the superclass implementation.
    # Any followup goes here.
&lt;/pre&gt;
&lt;p&gt;Just a little conceptual overview of how a subclass method can extend a superclass method using the &lt;tt class="docutils literal"&gt;super()&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;No biggie, right?&lt;/p&gt;
&lt;p&gt;Heh.&lt;/p&gt;
&lt;p&gt;Now that I can put this in a separate file -- and unit test it -- and subject it to &lt;strong&gt;mypy&lt;/strong&gt; and &lt;strong&gt;pyright&lt;/strong&gt; and &lt;strong&gt;ruff&lt;/strong&gt;,
the little stand-alone snippet has fatal problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to do?&lt;/h2&gt;
&lt;p&gt;It's not squeaky clean. What do I do?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't pull it out of the text and test it. It's just &amp;quot;conceptual&amp;quot; code-like material.&lt;/li&gt;
&lt;li&gt;Gussy it up with the needed context and make sure it's really, really correct.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm an option 2 kind of writer. I'm not brilliant. I'm not introducing something new to the world. I didn't write
some world-changing FOSS package for which I'm writing the definitive documentation. All I've got -- really --
is exhaustively detailed design alternatives and sparkingly correct code.&lt;/p&gt;
&lt;p&gt;In LaTeX world, wrapping up &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\verb|some_method()|&lt;/span&gt;&lt;/tt&gt; into a separate file is&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;Easy.&lt;/li&gt;
&lt;li&gt;Guarantees that it's correct.&lt;/li&gt;
&lt;li&gt;The absolutely latest and greatest version becomes part of the book automatically.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Boom. Done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-it-s-so-easy"&gt;
&lt;h2&gt;If it's so easy?&lt;/h2&gt;
&lt;p&gt;Why doesn't everyone do this?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some folks hate LaTeX.  I don't blame them.  It's complicated.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  It's also quite slow. It takes multiple seconds to render a chapter.
What that finishes, you're reading a PDF in one window and fiddling with LaTeX in another.
Compilers are like that. Folks who hate on LaTeX put up with compiled code all the time.
I get it. They have different expectations for editing words and editing code.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  As brilliant as Pandoc is, the .DOCX issues mean that you're LaTeX extraction from a .DOCX is -- well -- filled with annoying problems.
Hundreds of non-breaking spaces &lt;tt class="docutils literal"&gt;~&lt;/tt&gt; will be peppered randomly around. Some things like &lt;tt class="docutils literal"&gt;'&lt;/tt&gt; will be transformed to &lt;tt class="docutils literal"&gt;\textsinglequote&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;\textsinglequote{}&lt;/tt&gt;.
And on and on and on. I've got some Python code to cleanup parts of the problematic LaTeX, but not all of it. It's a manual
pass -- 8 to 12 hours of labor -- to get things into an &amp;quot;acceptable&amp;quot; form where a good, clean PDF can be generated from a chapter.
The invisible boundary problems all have to be found and fixed by hand.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  A single missing &lt;tt class="docutils literal"&gt;}&lt;/tt&gt; from a &lt;tt class="docutils literal"&gt;\textbf{command&lt;/tt&gt; can be a challenge to find. Easy to fix.
Same for &lt;tt class="docutils literal"&gt;\verb|code&lt;/tt&gt; where the trailing &lt;tt class="docutils literal"&gt;|&lt;/tt&gt; is missing.&lt;/li&gt;
&lt;li&gt;Some folks hate LaTeX.  Yesterday I spent a good 30 minutes -- maybe more -- looking for an unpaired &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; in the text.
I used the words &lt;tt class="docutils literal"&gt;30&amp;quot;&lt;/tt&gt; to mean &lt;tt class="docutils literal"&gt;30 inches&lt;/tt&gt;. Things don't work, but there's no positive &lt;strong&gt;line 3194: unpaird quote&lt;/strong&gt; error.
There's not even an obvious point in the document where formatting went to hell.
Indeed, my preferred editor only sees the chapters without the &lt;tt class="docutils literal"&gt;main.tex&lt;/tt&gt; wrapper, and doesn't know what packages have
been included.  It thinks my LaTeX is just garbage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;My code is clean. And the document &lt;strong&gt;always&lt;/strong&gt; reflects unit-tested, type-checked code.&lt;/p&gt;
&lt;p&gt;(I don't run all code through the &lt;strong&gt;ruff&lt;/strong&gt; formatter because book margins force me to manually undo ideal PEP-8 formats.)&lt;/p&gt;
&lt;p&gt;The cross-references all work perfectly.  Word can do this, but it's clunky and awkward. LaTex &lt;tt class="docutils literal"&gt;\secref{}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\label{}&lt;/tt&gt; do everything I want.
I can search the document for all &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\section{}\label{}&lt;/span&gt;&lt;/tt&gt; constructs to build a my own crib of things-to-cross-reference against.&lt;/p&gt;
&lt;p&gt;The damnable invisible boundaries are visible. Commands like &lt;tt class="docutils literal"&gt;\begin{codeblock}&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;\end{codeblock}&lt;/tt&gt; are clearly separated from &lt;tt class="docutils literal"&gt;\item&lt;/tt&gt;.
Clearly. I can add whitespace and comments to clarify, if I need to. Things are &lt;strong&gt;visible&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Books"></category><category term="writing"></category><category term="latex"></category></entry><entry><title>This is Awful</title><link href="https://slott56.github.io/2023-11-14-this_is_awful.html" rel="alternate"></link><published>2023-11-14T08:01:00-05:00</published><updated>2023-11-14T08:01:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-11-14:/2023-11-14-this_is_awful.html</id><summary type="html">&lt;p&gt;This is a disheartening thing to read&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As someone who doesn't do a ton of JSON parsing on the command line, I tend to forget &lt;a class="reference external" href="https://jqlang.github.io/jq/manual/"&gt;jq&lt;/a&gt; syntax.&lt;/p&gt;
&lt;p&gt;Two tools I really like are &lt;a class="reference external" href="github.com/tomnomnom/gron"&gt;gron&lt;/a&gt; (make JSON greppable) from &amp;#64;tomnomnom and &lt;a class="reference external" href="github.com/noahgorstein/jqp"&gt;jqp&lt;/a&gt; ..., which provides a &amp;quot;tui playground for exploring jq.&amp;quot;&lt;/p&gt;
&lt;p&gt;98 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This is a disheartening thing to read&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As someone who doesn't do a ton of JSON parsing on the command line, I tend to forget &lt;a class="reference external" href="https://jqlang.github.io/jq/manual/"&gt;jq&lt;/a&gt; syntax.&lt;/p&gt;
&lt;p&gt;Two tools I really like are &lt;a class="reference external" href="github.com/tomnomnom/gron"&gt;gron&lt;/a&gt; (make JSON greppable) from &amp;#64;tomnomnom and &lt;a class="reference external" href="github.com/noahgorstein/jqp"&gt;jqp&lt;/a&gt; ..., which provides a &amp;quot;tui playground for exploring jq.&amp;quot;&lt;/p&gt;
&lt;p&gt;98% of the time I end up being able to get what I need with gron + grep, then jqp is awesome for when I actually need jq :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What's so bad?&lt;/p&gt;
&lt;p&gt;With Python, all of this &amp;quot;syntax&amp;quot; and &amp;quot;greppable&amp;quot; and &amp;quot;interactive&amp;quot; goes away.&lt;/p&gt;
&lt;p&gt;Stop using bash. Start using Python. Life is so much simpler. (And faster. And unit-testable.)&lt;/p&gt;
</content><category term="Python"></category><category term="bash"></category><category term="json"></category></entry><entry><title>The Debugger</title><link href="https://slott56.github.io/2023_10_10-the_debugger.html" rel="alternate"></link><published>2023-10-10T18:21:00-04:00</published><updated>2023-10-10T18:21:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-10-10:/2023_10_10-the_debugger.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.bitecode.dev/p/python-312-what-didnt-make-the-headlines"&gt;Python 3.12: what didn't make the headlines&lt;/a&gt;. This is &lt;strong&gt;very&lt;/strong&gt; helpful.&lt;/p&gt;
&lt;p&gt;It is a great list of 7 key features of Python 3.12.&lt;/p&gt;
&lt;p&gt;With one tiny point I need to object to.&lt;/p&gt;
&lt;div class="section" id="i-don-t-like-debuggers"&gt;
&lt;h2&gt;I don't like debuggers&lt;/h2&gt;
&lt;p&gt;This is a strongly-held position.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debuggers are harmful.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I say this …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://www.bitecode.dev/p/python-312-what-didnt-make-the-headlines"&gt;Python 3.12: what didn't make the headlines&lt;/a&gt;. This is &lt;strong&gt;very&lt;/strong&gt; helpful.&lt;/p&gt;
&lt;p&gt;It is a great list of 7 key features of Python 3.12.&lt;/p&gt;
&lt;p&gt;With one tiny point I need to object to.&lt;/p&gt;
&lt;div class="section" id="i-don-t-like-debuggers"&gt;
&lt;h2&gt;I don't like debuggers&lt;/h2&gt;
&lt;p&gt;This is a strongly-held position.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debuggers are harmful.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I say this because I have had the misfortune to help more than one programmer
who could not actually describe the semantics of the code.&lt;/p&gt;
&lt;p&gt;They couldn't draw a picture. Write a sentence. Nothing.&lt;/p&gt;
&lt;p&gt;They could only point at the interactive debugger session with hapless flailing, and &amp;quot;see, it should work&amp;quot;
kind of noises.&lt;/p&gt;
&lt;p&gt;This is emphatically &lt;strong&gt;bad&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Every time I would ask them to step away from the debugger and describe -- maybe on a whiteboard --
what the heck they thought was going on.&lt;/p&gt;
&lt;p&gt;I could go on with horror stories of bad debugging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-use-debuggers"&gt;
&lt;h2&gt;I use debuggers&lt;/h2&gt;
&lt;p&gt;Back when C++ was my &amp;quot;stock-in-trade&amp;quot;, I used the debugger.&lt;/p&gt;
&lt;p&gt;Rarely.&lt;/p&gt;
&lt;p&gt;And then, mostly, on core dump files to figure out where the program failed.&lt;/p&gt;
&lt;p&gt;And to look at a few key variables to confirm the state of the computation.&lt;/p&gt;
&lt;p&gt;Then.&lt;/p&gt;
&lt;p&gt;I went back to the source, and looked for a logic path that lead to the wrong state.
It wasn't often hard to find.
And it didn't involve using the debugger for much more than finding the
call frame, stack contents, and local variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-set-me-off"&gt;
&lt;h2&gt;What set me off&lt;/h2&gt;
&lt;p&gt;This:&lt;/p&gt;
&lt;blockquote&gt;
...it's also removing a big &amp;quot;WTF&amp;quot; that all beginners will experience using the Python debugger with nobody in sight to explain to them what's going on.&lt;/blockquote&gt;
&lt;p&gt;I think there are no circumstances under which beginners should be using the debugger.&lt;/p&gt;
&lt;p&gt;I think there are no circumstances under which anyone should use a debugger before they already know
what's supposed to be going on.&lt;/p&gt;
&lt;p&gt;The idea of &amp;quot;beginners&amp;quot; being surprised at the structure of stackframes is an oxymoron.&lt;/p&gt;
&lt;blockquote&gt;
Beginners don't know about stack frames.&lt;/blockquote&gt;
&lt;p&gt;More-or-less, this is one definition of &amp;quot;beginner&amp;quot;.&lt;/p&gt;
&lt;p&gt;People who know about stack frames aren't beginners and can be trusted to understand the debugger.&lt;/p&gt;
&lt;p&gt;The points in the blog posts are sound: better debugging, additional support for evaluating expressions.&lt;/p&gt;
&lt;p&gt;The &amp;quot;audience of beginners&amp;quot; is my only quibble.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="games"></category><category term="tutorial"></category></entry><entry><title>Analyzing a Dice Mechanic</title><link href="https://slott56.github.io/2023_09_14-analyzing_a_dice_mechanic.html" rel="alternate"></link><published>2023-09-14T14:57:00-04:00</published><updated>2023-09-14T14:57:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-09-14:/2023_09_14-analyzing_a_dice_mechanic.html</id><summary type="html">&lt;p&gt;A &amp;quot;Dice Mechanic&amp;quot;? Yes. The thing you do with the dice to determine an outcome.
We'll use Python to see how the dice shake out.&lt;/p&gt;
&lt;div class="section" id="a-little-backstory"&gt;
&lt;h2&gt;A little backstory&lt;/h2&gt;
&lt;p&gt;For a casino game of craps, the roll of the dice can be 7 or 11 for an immediate win,
2, 3 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A &amp;quot;Dice Mechanic&amp;quot;? Yes. The thing you do with the dice to determine an outcome.
We'll use Python to see how the dice shake out.&lt;/p&gt;
&lt;div class="section" id="a-little-backstory"&gt;
&lt;h2&gt;A little backstory&lt;/h2&gt;
&lt;p&gt;For a casino game of craps, the roll of the dice can be 7 or 11 for an immediate win,
2, 3, or 12 for an immediate loss, and the other numbers establish a point.
You continue to roll until you get your point or a 7. That's a mechanic.
Kind of complicated -- by design.&lt;/p&gt;
&lt;p&gt;Many Table-Top Role-Playing Games (TTRPG) include game mechanics that involve dice.
The original D&amp;amp;D used the Platonic regular polyhedra. They were summarized as &amp;quot;d6&amp;quot;
for the 6-sided die folks often think of. The term &amp;quot;3d8&amp;quot; was interpreted as &amp;quot;3 eight-sided dice.&amp;quot;&lt;/p&gt;
&lt;p&gt;It, of course, gets more complicated &amp;quot;3d6+1&amp;quot; is add one to three six-sided dice.&lt;/p&gt;
&lt;p&gt;And, there are things like &amp;quot;4d6-low&amp;quot; to discard the lowest of 4 dice.
Or maybe &amp;quot;ll4d6&amp;quot; for &amp;quot;lose lowest&amp;quot;. Clever people have worked out a lot of mechanics,
and a lot of ways to describe them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-mechanics-in-question"&gt;
&lt;h2&gt;The mechanics in question&lt;/h2&gt;
&lt;p&gt;We want to compare two mechanics:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Worst of 2d6. This tends to have a lot of low numbers.&lt;/li&gt;
&lt;li&gt;Middle of 3d6. This -- well -- does it tend to favor low numbers, also?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We could -- if we had a big brain -- work out the odds.  But we don't have a big brain.&lt;/p&gt;
&lt;p&gt;Another really good alternative is to exhaustively enumerate the possible outcomes.
With 3d6 there are only &lt;span class="math"&gt;\(6^3 = 216\)&lt;/span&gt; ways the dice can fall. This doesn't seem
pleasant. We'll set it aside.&lt;/p&gt;
&lt;p&gt;Instead, we'll simulate.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first"&gt;This isn't as dumb as it might sound.&lt;/p&gt;
&lt;p&gt;Some of the foundational statistical tests are designed to discern of outcomes
are random or not. The &amp;quot;Null Hypothesis&amp;quot; is that the data's random.
The various tests for the null hypothesis are often difficult to understand,
and involve tables of magical numbers. The &lt;span class="math"&gt;\(\chi^2\)&lt;/span&gt; test involves a
complicated computation to compare actual and expected and then you have to look
up a number in a table.&lt;/p&gt;
&lt;p class="last"&gt;In some cases, it's easier to create random data and compute the correlation between
actual and random. High correlation? Accept the Null Hypothesis.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We'll start by building a simulation of each mechanic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="worst-of-2d6"&gt;
&lt;h2&gt;Worst of 2d6&lt;/h2&gt;
&lt;p&gt;Here's the code to roll a handful of dice.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from random import randint

def nd6(n: int) -&amp;gt; list[int]:
    return [randint(1, 6) for _ in range(n)]
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;nd6(2)&lt;/tt&gt; expression gives us a pair of dice as a tiny little list.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def worst(dice: list[int]) -&amp;gt; int:
    return min(dice)
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;worst(some_dice)&lt;/tt&gt; expression returns the worst of the two values.
If we were more clever, we might write something like.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def worst(dice: list[int]) -&amp;gt; int:
    d_1, d_2 = dice
    return d_1 if d_1 &amp;lt;= d_2 else d_2
&lt;/pre&gt;
&lt;p&gt;Which would be faster when it runs.
But this is a lot more coding.
Efficiency isn't the goal.
We're comparing two dice mechanics.&lt;/p&gt;
&lt;p&gt;Finally, this will apply the &lt;tt class="docutils literal"&gt;worst()&lt;/tt&gt; decision to &lt;tt class="docutils literal"&gt;nd6(2)&lt;/tt&gt; to
capture the worst numbers.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections.abc import Iterator

def worst_2d6(samples=1000) -&amp;gt; Iterator[int]:
    yield from (
        worst(nd6(2)) for _ in range(samples)
    )
&lt;/pre&gt;
&lt;p&gt;This function is a kind of generator. It doesn't simply compute a value the way
the &lt;tt class="docutils literal"&gt;nd6()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;worst()&lt;/tt&gt; functions did. This will yield a result
each time it's asked for something. It iterates over a sequence of &lt;tt class="docutils literal"&gt;worst(nd6(2))&lt;/tt&gt; values.&lt;/p&gt;
&lt;p&gt;(The &lt;tt class="docutils literal"&gt;range(samples)&lt;/tt&gt; defines how long the sequence will be.)&lt;/p&gt;
&lt;p&gt;The point of the generator is to avoid producing a giant list with a thousand values
when all we're going to do is summarize the list into a small result.&lt;/p&gt;
&lt;p&gt;Here's the summary.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections import Counter

distro_worst_2d6 = Counter(worst_2d6())
&lt;/pre&gt;
&lt;p&gt;We'll create a &lt;tt class="docutils literal"&gt;Counter&lt;/tt&gt; object from the values generated when evaluating the &lt;tt class="docutils literal"&gt;worst(nd6(2))&lt;/tt&gt; expression 1,000 times.&lt;/p&gt;
&lt;p&gt;Here's the result:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;n&lt;/th&gt;
&lt;th class="head"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;304&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;242&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;202&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;132&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That fits our expectation, more-or-less.&lt;/p&gt;
&lt;p&gt;And it wasn't too hard to create.&lt;/p&gt;
&lt;p&gt;Let's look at the other mechanic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="middle-of-3d6"&gt;
&lt;h2&gt;Middle of 3d6&lt;/h2&gt;
&lt;p&gt;We're going to reuse the &lt;tt class="docutils literal"&gt;nd6()&lt;/tt&gt; function. It works delightfully well for 3 dice as well as 2 dice.&lt;/p&gt;
&lt;p&gt;Here's an approach to picking the middle value.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def mid(dice: list[int]) -&amp;gt; int:
    return sorted(dice)[1]
&lt;/pre&gt;
&lt;p&gt;We've sorted the three dice, and taken the one in position 1.
Position 0 has the least, and position 2 has the most.
In the middle is the target value.&lt;/p&gt;
&lt;p&gt;We can optimize this, of course.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
d_0, d_1, d_2 = dice
return (
    d_0 if d_1 &amp;lt;= d_0 &amp;lt;= d_2 else
    d_1 if d_0 &amp;lt;= d_1 &amp;lt;= d_2 else
    d_2
)
&lt;/pre&gt;
&lt;p&gt;Who needs that kind of optimization? Not me.&lt;/p&gt;
&lt;p&gt;Here's a generator to provide the needed 1,000 samples.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def mid_3d6(samples=1000):
    yield from (
        mid(nd6(3)) for _ in range(samples)
    )
&lt;/pre&gt;
&lt;p&gt;It's really similar to the &lt;tt class="docutils literal"&gt;worst_2d6()&lt;/tt&gt; function. And, yes, the two could be refactored to eliminate a tiny blot of redundant code. And, no, I won't spend a lot of time on that optimization.
(I wrote a whole book on Functional Python Programming.)&lt;/p&gt;
&lt;p&gt;Here's the distribution:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
distro_mid_3d6 = Counter(mid_3d6())
&lt;/pre&gt;
&lt;p&gt;What's it look like? This.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;n&lt;/th&gt;
&lt;th class="head"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;192&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;245&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;226&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;185&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Seriously? It's weighted toward 3's and 4's?&lt;/p&gt;
&lt;p&gt;That shouldn't be too surprising. Maybe it is.&lt;/p&gt;
&lt;p&gt;I had no idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-far-so-good"&gt;
&lt;h2&gt;So Far, So Good&lt;/h2&gt;
&lt;p&gt;The point is to compare dice mechanics.&lt;/p&gt;
&lt;p&gt;The strategy is to simulate them.&lt;/p&gt;
&lt;p&gt;We wrote some functions to apply the mechanic.&lt;/p&gt;
&lt;p&gt;We sampled it 1,000 times to create a &lt;tt class="docutils literal"&gt;Counter&lt;/tt&gt; with the distribution of the 1,000 samples.&lt;/p&gt;
&lt;p&gt;And now, you can decide if that's acceptable for the game you're designing.&lt;/p&gt;
&lt;p&gt;Or, you can press on and do a little more math.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-wait-there-s-more"&gt;
&lt;h2&gt;But wait, there's more&lt;/h2&gt;
&lt;p&gt;The worst-of-2d6 isn't too difficult to compute on paper.&lt;/p&gt;
&lt;p&gt;When will the lowest value be 6? This requires a (6, 6) tie, &lt;span class="math"&gt;\(P(6) = \frac{1}{36}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It's a 5 when there's a (5, 5), (5, 6), or (6, 5)) pair. &lt;span class="math"&gt;\(P(5) = \frac{3}{36}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It's a 4 when there's any of (4, 4), (4, 5), (4, 6), (5, 4), or (6, 4). &lt;span class="math"&gt;\(P(4) = \frac{5}{36}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;And so on for 3, 2, and 1.  &lt;span class="math"&gt;\(P(n) = \frac{2(6-n)+1}{36}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We can create prediction from this essential probability theory.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for n in range(6):
    print(n+1, int(1000 * (2*(5-n)+1) / 36))
&lt;/pre&gt;
&lt;p&gt;The predicted distribution is this.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;n&lt;/th&gt;
&lt;th class="head"&gt;count&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;305&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;194&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;138&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;83&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That looks pretty close to the random simulation. It was more work to do the theory
than to simulate. That's why I started with the simulation.&lt;/p&gt;
&lt;p&gt;This part is to convince any doubters that simulation gives useful results.&lt;/p&gt;
&lt;p&gt;We'll continue to flog that point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="middle-of-3d6-theory"&gt;
&lt;h2&gt;Middle of 3d6 Theory&lt;/h2&gt;
&lt;p&gt;This exceeds my skills.&lt;/p&gt;
&lt;p&gt;When will the median value be 6? This requires a (6, 6, 6) tie. Actually, it's a lot more than that. Anything with a pair of 6's means 6 will be the mid value. There are &lt;span class="math"&gt;\(\frac{15}{216}\)&lt;/span&gt; ways to have a pair of sixes and another number. Think of (1, 6, 6) to (5, 6, 6), and (6, 1, 6) to (6, 5, 6), and (6, 6, 1) to (6, 6, 5). So, total, is &lt;span class="math"&gt;\(P(6) = \frac{16}{6^3}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For 5's? Ugh. I can't enumerate them manually. So. I'll use &lt;tt class="docutils literal"&gt;itertools&lt;/tt&gt; to emit all &lt;span class="math"&gt;\(6^3 = 216\)&lt;/span&gt; combinations.&lt;/p&gt;
&lt;p&gt;This isn't quite the same as simulation. The simulation &lt;em&gt;probably&lt;/em&gt; hit all the combinations.
The &lt;tt class="docutils literal"&gt;itertools&lt;/tt&gt; approach will absolutely create all of the combinations.&lt;/p&gt;
&lt;p&gt;Here's the central part of enumerating all combinations:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import itertools

d6 = [n+1 for n in range(6)]
for c in itertools.product(d6, d6, d6):
    # do something with c
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;itertools.product()&lt;/tt&gt; will enumerate all 3-item combinations of the values in the &lt;tt class="docutils literal"&gt;d6&lt;/tt&gt; sequence.&lt;/p&gt;
&lt;p&gt;Here it is in context.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import itertools
from collections import defaultdict

d6 = [n+1 for n in range(6)]
mid_3d6 = defaultdict(list)
for c in itertools.product(d6, d6, d6):
    mid_3d6[mid(c)].append(c)
for k in sorted(mid_3d6):
    print(k, len(mid_3d6[k]), [''.join(map(str, v)) for v in mid_3d6[k]])
&lt;/pre&gt;
&lt;p&gt;We created a &lt;tt class="docutils literal"&gt;defaultdict&lt;/tt&gt; object, a dictionary that will -- if a key is not found -- jam in a an empty &lt;tt class="docutils literal"&gt;list&lt;/tt&gt;. When we evaluate  &lt;tt class="docutils literal"&gt;mid_3d6[mid(c)]&lt;/tt&gt; it will either&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;find a list in the dictionary, because this value of &lt;tt class="docutils literal"&gt;mid(c)&lt;/tt&gt; has been seen before, OR&lt;/li&gt;
&lt;li&gt;jam a new empty list into the dictionary, because the value has not been seen before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either way, &lt;tt class="docutils literal"&gt;mid_3d6[mid(c)]&lt;/tt&gt; is a list, and we can &lt;tt class="docutils literal"&gt;append(c)&lt;/tt&gt; to put another combination into that list. Why save them?&lt;/p&gt;
&lt;p&gt;So we can display the count and all the patterns.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
6 16 ['166', '266', '366', '466', '566', '616', '626', '636', '646', '656', '661', '662', '663', '664', '665', '666']
&lt;/pre&gt;
&lt;p&gt;A 6 is the middle value &lt;span class="math"&gt;\(\tfrac{16}{216}\)&lt;/span&gt; times. And there are the 16 patterns, to make it perfectly clear what's going on.&lt;/p&gt;
&lt;p&gt;The sequence of 16-40-52-52-40-16 looks a lot like it is part of the binomial function.
Looking at the text patterns, I can work out the following.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P(6) = P(1) = \frac{1 + 3 \times 5}{6^3}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P(5) = P(2) = \frac{1 + 3 \times 5 + 6 \times 4}{6^3}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(P(4) = P(3) = \frac{1 + 3 \times 5 + 6 \times 4 + 4 \times 3}{6^3}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beyond this, I'm lost.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Simulation showed me the way forward, and it wasn't much code.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Python"></category><category term="games"></category><category term="tutorial"></category></entry><entry><title>Preorder the Python Real-World Projects Book</title><link href="https://slott56.github.io/2023_09_05-preorder_project_book.html" rel="alternate"></link><published>2023-09-05T09:00:00-04:00</published><updated>2023-09-05T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-09-05:/2023_09_05-preorder_project_book.html</id><summary type="html">&lt;p&gt;Want a book with dozens of project ideas?&lt;/p&gt;
&lt;p&gt;Each has a description, and approach, and deliverables.
It's a lot like ordinary development work, but with some detailed guidance from the author.
(And no deadline imposed by your team lead or manager.)&lt;/p&gt;
&lt;p&gt;These are projects you can do. You can post …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Want a book with dozens of project ideas?&lt;/p&gt;
&lt;p&gt;Each has a description, and approach, and deliverables.
It's a lot like ordinary development work, but with some detailed guidance from the author.
(And no deadline imposed by your team lead or manager.)&lt;/p&gt;
&lt;p&gt;These are projects you can do. You can post them GitHub, and make them part of your personal portfolio.
You can demonstrate your ability to code in Python.&lt;/p&gt;
&lt;p&gt;The focus is on exploratory data analysis.
This is because almost everything devolves into an exercise in data wrangling.&lt;/p&gt;
&lt;p&gt;Pre-order now:&lt;/p&gt;
&lt;p&gt;Via Computer Science Books &amp;#64; Amazon.com&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/Python-Real-World-Projects-Deployable-Applications/dp/1803246766/"&gt;Python Real-World Projects: Crafting your Python Portfolio with Deployable Applications: 9781803246765&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you plan to write a review contact me directly, slott56 at gmail dot com. I can get you
an e-copy or physical copy for your reviewing pleasure.&lt;/p&gt;
</content><category term="Books"></category><category term="community"></category><category term="projects"></category><category term="portfolio"></category></entry><entry><title>The Echo-Pipe Trap [Updated]</title><link href="https://slott56.github.io/2023-08-30-the_echo_pipe_trap.html" rel="alternate"></link><published>2023-08-30T09:00:00-04:00</published><updated>2023-08-30T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-08-30:/2023-08-30-the_echo_pipe_trap.html</id><summary type="html">&lt;p&gt;This is a &lt;strong&gt;great&lt;/strong&gt; question.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fosstodon.org/&amp;#64;JustineSmithies/110979871574705636"&gt;https://fosstodon.org/&amp;#64;JustineSmithies/110979871574705636&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This works, they said.&lt;/p&gt;
&lt;blockquote&gt;
echo -en &amp;quot;Firefox\0icon\x1fweechat&amp;quot; | fuzzel -d -w 100 -l 10&lt;/blockquote&gt;
&lt;p&gt;But. The superficial switch to &lt;tt class="docutils literal"&gt;subprocess.Popen()&lt;/tt&gt; doesn't work.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;The way &lt;tt class="docutils literal"&gt;echo&lt;/tt&gt; works varies from shell to shell. When MacOSX changes to zsh, things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a &lt;strong&gt;great&lt;/strong&gt; question.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fosstodon.org/&amp;#64;JustineSmithies/110979871574705636"&gt;https://fosstodon.org/&amp;#64;JustineSmithies/110979871574705636&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This works, they said.&lt;/p&gt;
&lt;blockquote&gt;
echo -en &amp;quot;Firefox\0icon\x1fweechat&amp;quot; | fuzzel -d -w 100 -l 10&lt;/blockquote&gt;
&lt;p&gt;But. The superficial switch to &lt;tt class="docutils literal"&gt;subprocess.Popen()&lt;/tt&gt; doesn't work.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;The way &lt;tt class="docutils literal"&gt;echo&lt;/tt&gt; works varies from shell to shell. When MacOSX changes to zsh, things can break.
Or when you share it with someone else, who uses YetAnotherShell, things break.&lt;/p&gt;
&lt;p&gt;Two choices:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Specify which shell.&lt;/li&gt;
&lt;li&gt;Stop using the &lt;tt class="docutils literal"&gt;echo ... |&lt;/tt&gt; (echo-pipe) construct.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="what-s-better"&gt;
&lt;h2&gt;What's Better?&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;stdin&lt;/tt&gt; parameter to &lt;tt class="docutils literal"&gt;Popen()&lt;/tt&gt; can be used to provide the required stream of bytes.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from pathlib import Path
import subprocess

temp = Path.cwd() / &amp;quot;temp.tmp&amp;quot;
temp.write_text(&amp;quot;Firefox\0icon\0x1fweechat&amp;quot;)  # I think.

with temp.open() as echo_file:
    subprocess.Popen(['fuzzel', '-d', '-w', '100', '-l', '10'], stdin=echo_file)
&lt;/pre&gt;
&lt;p&gt;Something like the above will avoid the echo-pipe construct.&lt;/p&gt;
&lt;p&gt;But. It leaves a temporary file lying around. What to do?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slightly-better"&gt;
&lt;h2&gt;Slightly Better&lt;/h2&gt;
&lt;p&gt;This will cleanup the file. And. You don't have to pick a name.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import tempfile
import subprocess

temp = tempfile.TemporaryFile(mode='w+')
with temp:
    temp.write(&amp;quot;Firefox\0icon\0x1fweechat&amp;quot;)  # I think.
    temp.seek(0)
    subprocess.Popen(['fuzzel', '-d', '-w', '100', '-l', '10'], stdin=temp)
&lt;/pre&gt;
&lt;p&gt;Seems kind of long. And it involves an additional problem. A file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-there-s-a-file"&gt;
&lt;h2&gt;But. There's a FILE!&lt;/h2&gt;
&lt;p&gt;Yes. We &lt;strong&gt;can&lt;/strong&gt; create a pipe.  I think it's kind of hideous, though.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import os
import subprocess

r, w = os.pipe()
readable = os.fdopen(r, 'r')
writeable = os.fdopen(w, 'w')
writeable.write(&amp;quot;Firefox\0icon\0x1fweechat&amp;quot;)  # I think.
writeable.close()
subprocess.Popen(['fuzzel', '-d', '-w', '100', '-l', '10'], stdin=readable)
readable.close()
&lt;/pre&gt;
&lt;p&gt;However. It's not too long.&lt;/p&gt;
&lt;p&gt;We can create a pleasant wrapper in the form
of a context manager.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-s-this"&gt;
&lt;h2&gt;How's This?&lt;/h2&gt;
&lt;p&gt;This seems pleasant, if you do a lot of this sort of thing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import os
import subprocess

class EchoPipe:
    def __init__(self, content):
        self.content = content

    def __enter__(self):
        r, w = os.pipe()
        self.readable = os.fdopen(r, 'r')
        writeable = os.fdopen(w, 'w')
        writeable.write(self.content)
        writeable.close()
        return self.readable

    def __exit__(self, exc_type, exc_value, traceback):
        self.readable.close()
&lt;/pre&gt;
&lt;p&gt;Once you have the &lt;tt class="docutils literal"&gt;EchoPipe&lt;/tt&gt; context, you can now write this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
with EchoPipe(&amp;quot;Firefox\0icon\0x1fweechat&amp;quot;) as echo_pipe:
    subprocess.Popen(['fuzzel', '-d', '-w', '100', '-l', '10'], stdin=echo_pipe)
&lt;/pre&gt;
&lt;p&gt;Which is pretty close to the original terse shell stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-this-update"&gt;
&lt;h2&gt;And this [Update]&lt;/h2&gt;
&lt;p&gt;Consider this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
subprocess.run(
    ['fuzzel', '-d', '-w', '100', '-l', '10'],
    input=&amp;quot;Firefox\0icon\0x1fweechat&amp;quot;,
    text=True
)
&lt;/pre&gt;
&lt;p&gt;It a very useful variant. This is -- perhaps -- the best of them all.&lt;/p&gt;
&lt;p&gt;I found the documentation is a bit hard to follow around this topic, so I was
completely taken by surprise when I was shown this.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="shell"></category><category term="bash"></category></entry><entry><title>More Python Quirks Debunking</title><link href="https://slott56.github.io/2023-08-15-more_python_quirk_debunking.html" rel="alternate"></link><published>2023-08-15T09:00:00-04:00</published><updated>2023-08-15T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-08-15:/2023-08-15-more_python_quirk_debunking.html</id><summary type="html">&lt;p&gt;Stuff I found on the internet that I have to disagree with.&lt;/p&gt;
&lt;p&gt;(And no, I didn't ask for clarification.
If the author posts things without supporting details it suggests they might lack the supporting
details. I can be charitable and assume they don't really care about providing useful information,
but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Stuff I found on the internet that I have to disagree with.&lt;/p&gt;
&lt;p&gt;(And no, I didn't ask for clarification.
If the author posts things without supporting details it suggests they might lack the supporting
details. I can be charitable and assume they don't really care about providing useful information,
but are merely trolling for engagement. Yes. That's cruel.
I can't see how you take the time to have an opinion and not provide support for it.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A few of #Python 3 #quirks and #kludges&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Global Interpreter Lock&lt;/li&gt;
&lt;li&gt;Strong, dynamic typing&lt;/li&gt;
&lt;li&gt;Massive &lt;tt class="docutils literal"&gt;Any&lt;/tt&gt; hole in the type system&lt;/li&gt;
&lt;li&gt;Verbose class definition&lt;/li&gt;
&lt;li&gt;Declaration of instance attributes is their definitions in &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Repetitious &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; and kludgy &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().__init__()&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Kludgy string-quotes to reference the class from within its definition&lt;/li&gt;
&lt;li&gt;Kludgy &lt;tt class="docutils literal"&gt;TypeVar&lt;/tt&gt; definition&lt;/li&gt;
&lt;li&gt;Absence of structural typing&lt;/li&gt;
&lt;li&gt;Need explicitly to convert iterator to list using &lt;tt class="docutils literal"&gt;list()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Usurping the &lt;tt class="docutils literal"&gt;id()&lt;/tt&gt; name&lt;/li&gt;
&lt;li&gt;Inner method may mutate referenced objects in the closure but may not mutate primitive values therein&lt;/li&gt;
&lt;li&gt;Kludgy &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; invocation&lt;/li&gt;
&lt;li&gt;Disconcerting lack of type information in the holdover documentation from the P2 days&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some of these might be good points. Some of these seem to be nonsense.
A bunch can't be interpreted, which I find madding.&lt;/p&gt;
&lt;div class="section" id="global-interpreter-lock"&gt;
&lt;h2&gt;1. Global Interpreter Lock&lt;/h2&gt;
&lt;p&gt;I'm not sure what this means. It's a solution to a specific problem.
It's -- I suppose -- a candidate &amp;quot;quirk&amp;quot; because it's an unusual solution to
the problem of assuring that data structure updates are atomic.&lt;/p&gt;
&lt;p&gt;It saves us from having to use explicit locks all over the place when updating
objects with complex state.&lt;/p&gt;
&lt;p&gt;The GIL-less Python proposals will require a bit more care in defining structures
useful in multithreaded environments. Is this a gain? It's disputable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strong-dynamic-typing"&gt;
&lt;h2&gt;2. Strong, dynamic typing&lt;/h2&gt;
&lt;p&gt;Yep. There it is. Quirk? Kluge? Dunno. It seems like a brilliant solution to a long-standing problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="massive-any-hole-in-the-type-system"&gt;
&lt;h2&gt;3. Massive &lt;tt class="docutils literal"&gt;Any&lt;/tt&gt; hole in the type system&lt;/h2&gt;
&lt;p&gt;Does this mean it's bad that &lt;strong&gt;mypy&lt;/strong&gt; assumes &lt;tt class="docutils literal"&gt;Any&lt;/tt&gt; for missing types?
If you don't like the &lt;strong&gt;mypy&lt;/strong&gt; assumptions, write type hints.&lt;/p&gt;
&lt;p&gt;Does this mean it's bad that you can use &lt;tt class="docutils literal"&gt;Any&lt;/tt&gt; to provide uninformative type hints?
If you don't like &lt;tt class="docutils literal"&gt;Any&lt;/tt&gt;, consider not using it as a type hint.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="verbose-class-definition"&gt;
&lt;h2&gt;4. Verbose class definition&lt;/h2&gt;
&lt;p&gt;Quirk?  I guess they've never seen Java.&lt;/p&gt;
&lt;p&gt;Kluge?  What would they prefer?&lt;/p&gt;
&lt;p&gt;What would they omit is the real question. From the item 6, below, I'm guessing
they don't like to have &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; listed explicitly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="declaration-of-instance-attributes-is-their-definitions-in-init"&gt;
&lt;h2&gt;5. Declaration of instance attributes is their definitions in &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;First -- and most important -- there aren't any C- or Java- style declarations.
The instances are dynamic in every sense of the word.
The &lt;tt class="docutils literal"&gt;__new__()&lt;/tt&gt; method does almost nothing.&lt;/p&gt;
&lt;p&gt;I'll buy this as a legit quirk. It's a consequence of the way attributes
work, and logic is compelling and consistent.&lt;/p&gt;
&lt;p&gt;It's trivial to include type hints in the class definition, separate
from initialization in the &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; method. I find this helpful.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class X:
    a: int
    b: float

    def __init__(self, a: str, b: str) -&amp;gt; None:
        self.a = int(a)
        self.b = float(b)
&lt;/pre&gt;
&lt;p&gt;It's potentially misleading: the &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;b&lt;/tt&gt; appear to be class variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="repetitious-self-and-kludgy-super-init"&gt;
&lt;h2&gt;6. Repetitious &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; and kludgy &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().__init__()&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;The use of &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; is not repetitious. It's explicit.&lt;/p&gt;
&lt;p&gt;Not sure what's klugy about &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;super().__init__()&lt;/span&gt;&lt;/tt&gt;. I guess they don't like writing &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; and
prefer having this assumed, also.&lt;/p&gt;
&lt;p&gt;This is -- to me -- flat our wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kludgy-string-quotes-to-reference-the-class-from-within-its-definition"&gt;
&lt;h2&gt;7. Kludgy string-quotes to reference the class from within its definition&lt;/h2&gt;
&lt;p&gt;I guess they'd prefer to have an explicitly complicated-looking forward reference
for a name. We could have a lot of &lt;tt class="docutils literal"&gt;class XYZ: defined_later()&lt;/tt&gt; constructs
to sort out circular references among classes.&lt;/p&gt;
&lt;p&gt;I guess they don't like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class X:
    &amp;#64;classmethod
    def makes_X(cls: type[&amp;quot;X&amp;quot;], *args, **kwargs) -&amp;gt; &amp;quot;X&amp;quot;:
        ...
&lt;/pre&gt;
&lt;p&gt;It seems like a tedious &lt;tt class="docutils literal"&gt;X = &lt;span class="pre"&gt;ForwardRef('X')&lt;/span&gt;&lt;/tt&gt; would be required
to define the name &lt;tt class="docutils literal"&gt;X&lt;/tt&gt; before the actual class is defined.
See #8, below, they don't like that syntax. Does this mean they want a new statement for
forward references?&lt;/p&gt;
&lt;p&gt;Or. It would require &lt;strong&gt;mypy&lt;/strong&gt; to gaze more deeply at the parse tree to resolve
circular references. I'm not sure what they think would be better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kludgy-typevar-definition"&gt;
&lt;h2&gt;8. Kludgy &lt;tt class="docutils literal"&gt;TypeVar&lt;/tt&gt; definition&lt;/h2&gt;
&lt;p&gt;I'm guessing they want a new statement in the language instead of a function
in the &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt; module.&lt;/p&gt;
&lt;p&gt;Since types are explicitly optional, new statements to handle types seems wrong to me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="absence-of-structural-typing"&gt;
&lt;h2&gt;9. Absence of structural typing&lt;/h2&gt;
&lt;p&gt;This is confusing. The &lt;tt class="docutils literal"&gt;NamedTuple&lt;/tt&gt; provides structural types.&lt;/p&gt;
&lt;p&gt;I'm guessing they were hoping for some other classes to &lt;strong&gt;also&lt;/strong&gt; behave like
types in a structural system. It seems simplest to use &lt;tt class="docutils literal"&gt;NamedTuple&lt;/tt&gt;
and a functional style of programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="need-explicitly-to-convert-iterator-to-list-using-list"&gt;
&lt;h2&gt;10. Need explicitly to convert iterator to list using &lt;tt class="docutils literal"&gt;list()&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;This is nonsense. What if the iterator is a sequence of pairs that
should be converted to a mapping with &lt;tt class="docutils literal"&gt;dict()&lt;/tt&gt;?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usurping-the-id-name"&gt;
&lt;h2&gt;11. Usurping the &lt;tt class="docutils literal"&gt;id()&lt;/tt&gt; name&lt;/h2&gt;
&lt;p&gt;Don't get this. The &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; name is also usurped by built-ins.
There are a dozen built-in function names that usurp other names one might want to use.
And all those keywords!  The name &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;def&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;return&lt;/tt&gt; are all usurped
by keywords.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inner-method-may-mutate-referenced-objects-in-the-closure-but-may-not-mutate-primitive-values-therein"&gt;
&lt;h2&gt;12. Inner method may mutate referenced objects in the closure but may not mutate primitive values therein&lt;/h2&gt;
&lt;p&gt;Primitives can't be mutated.&lt;/p&gt;
&lt;p&gt;Referenced objects can &lt;strong&gt;always&lt;/strong&gt; be mutated.&lt;/p&gt;
&lt;p&gt;It doesn't require an &amp;quot;inner&amp;quot; method. It's true for every function and method at all levels.&lt;/p&gt;
&lt;p&gt;I'm guessing the idea of mutable vs. immutable objects could be a quirk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kludgy-main-invocation"&gt;
&lt;h2&gt;13. Kludgy &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; invocation&lt;/h2&gt;
&lt;p&gt;Kludge? Really?  I guess they've never seen Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="disconcerting-lack-of-type-information-in-the-holdover-documentation-from-the-p2-days"&gt;
&lt;h2&gt;14. Disconcerting lack of type information in the holdover documentation from the P2 days&lt;/h2&gt;
&lt;p&gt;It's often helpful to provide an example of a documentation gap where
type information is totally missing (or is only present in a stubs file where it's not
automatically included by Sphinx). While I haven't seen any examples of missing type information in
Python or standard library documentation, that doesn't mean much. I only write books
about Python, I don't actually help maintain it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;There's a good point:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Declaration of instance attributes is their definitions in &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reset is a mixture of&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;too vague to comment on,&lt;/li&gt;
&lt;li&gt;it's not clear what would be better, and&lt;/li&gt;
&lt;li&gt;wrong.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mostly the former. Few of the latter. (#10 seems to be the stand-out for wrong.)&lt;/p&gt;
&lt;p&gt;It's important to think about these things when learning a language.
Some discussion of alterantives from other languages would make these points a lot
easier to interpret and understand.&lt;/p&gt;
&lt;p&gt;However, it's also important to understand why soem things are present in a language.
It's important to look a little more deeply at the language rules -- perhaps read the
relevant PEP's -- to see what alternatives have been proposed and discarded.&lt;/p&gt;
&lt;p&gt;In most cases, decisions aren't arbitrary, but reflect deeper considerations on the underlying
semantics of the language and the implementation details of the compiler and/or run-time.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="community"></category><category term="quirks"></category></entry><entry><title>Python Quirks that aren't very quirky</title><link href="https://slott56.github.io/2023-08-01-python_quirks_that_arent_very_quirky.html" rel="alternate"></link><published>2023-08-01T09:00:00-04:00</published><updated>2023-08-01T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-08-01:/2023-08-01-python_quirks_that_arent_very_quirky.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://writing.peercy.net/p/python-quirks"&gt;https://writing.peercy.net/p/python-quirks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Superficially, most of these are true.&lt;/p&gt;
&lt;p&gt;Looking a little more deeply, most of them are also presented in a somewhat misleading way.
A few set up a good punch-line. The &lt;strong&gt;Inheritance&lt;/strong&gt; one, for example, is funny.&lt;/p&gt;
&lt;p&gt;If the point is to force a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://writing.peercy.net/p/python-quirks"&gt;https://writing.peercy.net/p/python-quirks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Superficially, most of these are true.&lt;/p&gt;
&lt;p&gt;Looking a little more deeply, most of them are also presented in a somewhat misleading way.
A few set up a good punch-line. The &lt;strong&gt;Inheritance&lt;/strong&gt; one, for example, is funny.&lt;/p&gt;
&lt;p&gt;If the point is to force a deeper investigation, I think the piece might not be helpful.
I know too many people who would look at this list and say &amp;quot;See, Python is as bad as JavaScript.&amp;quot;
Or &amp;quot;That's why I only use perl.&amp;quot;
These are the sort of folks won't actually refer to the Python language reference manual to see what's going on.&lt;/p&gt;
&lt;p&gt;One of these &lt;strong&gt;is&lt;/strong&gt; a legitimate quirk.
The rest involve a little bit of &amp;quot;don't look at the man behind the curtain&amp;quot; mixed with &amp;quot;don't read the documentation.&amp;quot;&lt;/p&gt;
&lt;p&gt;To ease my own mental anguish, I'll include a slightly deeper dive into these language feaures.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Generators.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sorted()&lt;/tt&gt; creates a new list from the argument value. It's not a generator.
Comparing the resulting list to the argument is unsurprising.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;reversed()&lt;/tt&gt; doesn't create a list. It is a generator. Since it can only
be used once, one use of the generator &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; has a sequence of values.
The other use of the generator &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; has no values.&lt;/p&gt;
&lt;p&gt;I suppose the single-use-of-a-generator featrure could be called a quirk.
Except it's well-documented, so, I'd argue that this simply exposes a language feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;References.&lt;/p&gt;
&lt;p&gt;The example fails to show how &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; was created. It's not obvious
how the reused reference to a sublist was propogated throughout
the list.&lt;/p&gt;
&lt;p&gt;Missing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
a = [[0]] * 5
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Assignment.&lt;/p&gt;
&lt;p&gt;Not sure what the point of this is.
It doesn't even seem quirky.&lt;/p&gt;
&lt;p&gt;I guess they're astonished they can use something other than a trivial
variable in a &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Closures.&lt;/p&gt;
&lt;p&gt;My guess on this is they were hoping the &lt;tt class="docutils literal"&gt;i&lt;/tt&gt; variable would not be a single variable;
instead, a fresh, new variable would be created by the generator expression.
Perhaps other languages do this, and manufacture fresh, new variable bindings.&lt;/p&gt;
&lt;p&gt;Python has a (relatively) simple rule for variables: Local, Enclosing, Global, and Built-in.
There's no closure rule to create new variables. There are many good tutorials on the LEGB rule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Inheritance.  This one is kind of funny.&lt;/p&gt;
&lt;p&gt;It's also, on reflection, unsurprising.
The &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; type -- like all types -- is an &lt;tt class="docutils literal"&gt;object&lt;/tt&gt;. Mostly because almost everything is an object.
The &lt;tt class="docutils literal"&gt;object&lt;/tt&gt; type -- like all types -- is a &lt;tt class="docutils literal"&gt;type&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Operator Chaining.&lt;/p&gt;
&lt;p&gt;This isn't a quirk at all.
This seems to be an exploration of precedence rules among operators.
It seems to be a matter of definition among &lt;tt class="docutils literal"&gt;==&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;and&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;in&lt;/tt&gt; operators.&lt;/p&gt;
&lt;p&gt;Also, it's not clear what &amp;quot;chaining&amp;quot; means here.
If &lt;tt class="docutils literal"&gt;1 + 2 + 3&lt;/tt&gt; is what they mean by &amp;quot;operator chaining&amp;quot;, then I think that may be the root
cause of the confusion. These are all binary operators with intermediate results.
Perhaps it can help to think of implicit ()'s around each binary operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Identity.&lt;/p&gt;
&lt;p&gt;This is an optimization in the CPython interpreter to pre-allocate some integers.
This is a proper quirk. I'm glad it's on this list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;NFKC Normalization.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://unicode.org/reports/tr15/"&gt;https://unicode.org/reports/tr15/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This isn't Python. This is Unicode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Default Arguments.&lt;/p&gt;
&lt;p&gt;This is pretty well-known. Some newbies discover it, and then
re-read the documentation that describes why this happens, and say &amp;quot;makes sense.&amp;quot;
Here's the rule: &lt;strong&gt;The mutable object is only created once; it's shared.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most linters warn that this feature may not be doing what folks think it's doing.&lt;/p&gt;
&lt;p&gt;This appears in many other places. For example, default values for fields of
dataclasses cannot be mutable objects, because they'd be shared.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Whatever This Is.&lt;/p&gt;
&lt;p&gt;This isn't a quirk, it's a bug. It was fixed in Python 3.11, though. So it's much less interesting.
It remains a known bug until Python 3.10 end-of-life, 04 Oct 2026.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Python 2.&lt;/p&gt;
&lt;p&gt;Python 2 has been at end-of-life since 01 Jan 2020.
These kinds of things ceased to be interesting on that date.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, and in conclusion, the identity of small integers is a legitimate quirk.
I like it. The inheritance is funny. I like that, too.&lt;/p&gt;
</content><category term="Python"></category><category term="community"></category><category term="quirks"></category></entry><entry><title>Two Problems with Python</title><link href="https://slott56.github.io/2023-07-25-two_problems_with_python.html" rel="alternate"></link><published>2023-07-25T09:00:00-04:00</published><updated>2023-07-25T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-07-25:/2023-07-25-two_problems_with_python.html</id><summary type="html">&lt;p&gt;I want to call out two huge problems with Python.
I'm not the first to point these out, but they've been bothering me for a while.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#surprising-changes"&gt;Surprising Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dependency-hell"&gt;Dependency Hell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've provided them here to save folks from repeating these.
They're now officially &amp;quot;known&amp;quot; and there's no point in repeating …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I want to call out two huge problems with Python.
I'm not the first to point these out, but they've been bothering me for a while.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#surprising-changes"&gt;Surprising Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dependency-hell"&gt;Dependency Hell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've provided them here to save folks from repeating these.
They're now officially &amp;quot;known&amp;quot; and there's no point in repeating this again.
Write your blog posts about something else, please.&lt;/p&gt;
&lt;div class="section" id="surprising-changes"&gt;
&lt;h2&gt;Surprising Changes&lt;/h2&gt;
&lt;p&gt;Every language and library has changes. That's part of normal innovation and
evolution of the language.&lt;/p&gt;
&lt;p&gt;Some changes, however, were not communicated to me, personnally, and are therefore
suprising, which makes them bad. Really bad.&lt;/p&gt;
&lt;p&gt;Let's focus on linter tools as an example. Here's the scenario.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I have a code base. It's good. 100% compliant.&lt;/li&gt;
&lt;li&gt;I ugprade the linter.&lt;/li&gt;
&lt;li&gt;A new error is flagged. This was not an error before but &lt;strong&gt;somehow&lt;/strong&gt; (big eyeroll) it's an error now.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a surprising change. No one told me.&lt;/p&gt;
&lt;p&gt;The code &lt;em&gt;is&lt;/em&gt; sketchy. It could be seen as ambiguous. &lt;strong&gt;Even though it passes all the unit tests.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Someone else may have learned a lesson about sketchy code, and embodied that lesson in the linter.
But they didn't tell me.&lt;/p&gt;
&lt;p&gt;Python had a surprise change, and the mere presence of a surprise means one thing:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python is useless&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependency-hell"&gt;
&lt;h2&gt;Dependency Hell&lt;/h2&gt;
&lt;p&gt;Every application has dependencies. That's part of building a language
in a rich ecosystem with a lot of useful packages.&lt;/p&gt;
&lt;p&gt;Some changes to these packages, while well-intentioned, can break a dependency with another package.
Packages have inter-dependencies, which I find &lt;strong&gt;impossible&lt;/strong&gt; to manage.&lt;/p&gt;
&lt;p&gt;Here's the scenario.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I have a code base. It's good. 100% tests pass. Installs perfectly on all supported platforms.&lt;/li&gt;
&lt;li&gt;Two packages, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;p==3.14&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;q==2.78&lt;/span&gt;&lt;/tt&gt; both depend on &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; version 1.1&lt;/li&gt;
&lt;li&gt;The authors of &lt;tt class="docutils literal"&gt;p&lt;/tt&gt; updated to &lt;tt class="docutils literal"&gt;4.0&lt;/tt&gt; and switched their dependency to to &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; version 2.0. The authors of &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; did not switch.&lt;/li&gt;
&lt;li&gt;If I include &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;p==4.0&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x==2.0&lt;/span&gt;&lt;/tt&gt; the &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; package breaks. I can't upgrade &lt;tt class="docutils literal"&gt;p&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Dependency Hell.  Unresolvable Conflicts.&lt;/p&gt;
&lt;p&gt;Any combination of packages will have numerous internal dependencies.
The mere presence of these dependencies means one thing:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python is useless&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Python is useless&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I cannot tolerate innovation.&lt;/p&gt;
&lt;p&gt;If someone learns something and changes a linter, that's innovation: it breaks my code; I don't want it.&lt;/p&gt;
&lt;p&gt;If someone creates a new version of an open-source package, that's innovation: it breaks my code; I don't want it.&lt;/p&gt;
&lt;p&gt;This isn't to say that innovation is &lt;strong&gt;bad&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Innovation is &lt;strong&gt;good&lt;/strong&gt;. When it occurs very slowly, and I'm able to personally vet each individual change for impact on my project(s).&lt;/p&gt;
&lt;p&gt;The idea that every single open source package is innovating and learning at their own unique tempo
is insanity. It makes Python &lt;strong&gt;useless&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="community"></category></entry><entry><title>Literate Programming with PyWebLP</title><link href="https://slott56.github.io/2023-07-18-literate_programming_with_pyweblp.html" rel="alternate"></link><published>2023-07-18T09:00:00-04:00</published><updated>2023-07-18T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-07-18:/2023-07-18-literate_programming_with_pyweblp.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And &lt;a class="reference external" href="https://pypi.org/project/py-web-lp/"&gt;https://pypi.org/project/py-web-lp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I finally made the PyWeb LP tool installable from PyPI.&lt;/p&gt;
&lt;p&gt;I need to fix the name of the GitHub repo (some day) to make it also say &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;py-web-lp&lt;/span&gt;&lt;/tt&gt;.
I should also fixup my tag cloud to say pyweblp …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And &lt;a class="reference external" href="https://pypi.org/project/py-web-lp/"&gt;https://pypi.org/project/py-web-lp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I finally made the PyWeb LP tool installable from PyPI.&lt;/p&gt;
&lt;p&gt;I need to fix the name of the GitHub repo (some day) to make it also say &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;py-web-lp&lt;/span&gt;&lt;/tt&gt;.
I should also fixup my tag cloud to say pyweblp instead of &lt;a class="reference external" href="https://slott56.github.io/tag/pyweb.html"&gt;pyweb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I cleaned up a few small things in the project.&lt;/p&gt;
&lt;p&gt;This whole thing started a loooong time ago. See &lt;a class="reference external" href="https://slott56.github.io/2007_02_02-editing_docbook_xml.html"&gt;Editing DocBook XML&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click the &lt;a class="reference external" href="https://slott56.github.io/tag/literate-programming.html"&gt;literate programming tag&lt;/a&gt; for a lot more on this topic.&lt;/p&gt;
&lt;p&gt;Background:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2010_03_14-literate_programming.html"&gt;Literate Programming&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2010_04_07-fancy_literate_programming.html"&gt;Fancy Literate Programming&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, I found &lt;cite&gt;pyLit&lt;/cite&gt;. See &lt;a class="reference external" href="https://slott56.github.io/2013_10_03-literate_programming_and_pylit.html"&gt;Literate Programming and PyLit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, back to the PyWeb LP thread and more recent changes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2017_05_13-literate_programming_life_cycle.html"&gt;Literate Programming Life Cycle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html"&gt;My Shifting Understanding and A Terrible Design Mistake&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_06_28-massive_rework_of_data_structures.html"&gt;Massive Rework of Data Structures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_07_05-revised_understanding_revised_data_structures_revised_type_hints.html"&gt;Revised Understanding --&amp;gt; Revised Data Structures --&amp;gt; Revised Type Hints&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_08_09-tragedy_averted.html"&gt;Tragedy Averted&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, it's installable.&lt;/p&gt;
</content><category term="Python"></category><category term="literate programming"></category><category term="pyweb"></category></entry><entry><title>An Implementation of Annotated Types</title><link href="https://slott56.github.io/2023-07-11-an_implementation_of_annotated_types.html" rel="alternate"></link><published>2023-07-11T09:00:00-04:00</published><updated>2023-07-11T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-07-11:/2023-07-11-an_implementation_of_annotated_types.html</id><summary type="html">&lt;p&gt;The &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt; module includes the mysterious-looking &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; type hint.
See &lt;a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Annotated"&gt;https://docs.python.org/3/library/typing.html#typing.Annotated&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#what-does-this-do"&gt;What does this do?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#why-do-i-need-it"&gt;Why do I need it?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#where-can-i-see-examples"&gt;Where can I see examples?&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="what-does-this-do"&gt;
&lt;h2&gt;What does this do?&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; type hint lets us append &amp;quot;details&amp;quot; to a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The &lt;tt class="docutils literal"&gt;typing&lt;/tt&gt; module includes the mysterious-looking &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; type hint.
See &lt;a class="reference external" href="https://docs.python.org/3/library/typing.html#typing.Annotated"&gt;https://docs.python.org/3/library/typing.html#typing.Annotated&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#what-does-this-do"&gt;What does this do?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#why-do-i-need-it"&gt;Why do I need it?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference internal" href="#where-can-i-see-examples"&gt;Where can I see examples?&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="what-does-this-do"&gt;
&lt;h2&gt;What does this do?&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; type hint lets us append &amp;quot;details&amp;quot; to a type.&lt;/p&gt;
&lt;p&gt;It might look like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x: Annotated[int, MustBePrime()]
&lt;/pre&gt;
&lt;p&gt;The annotated type has one origin type (which must be first) and a sequence of objects. Presumably, they are &amp;quot;annotations&amp;quot; of some kind.
They can be anything. We can do a lot with them; we'll start with using them to narrow the domain of values.&lt;/p&gt;
&lt;p&gt;The core &lt;tt class="docutils literal"&gt;x: int&lt;/tt&gt; provides a large domain of possible values. Python's ints can be immense numbers, easily filling memory with digits.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;MustBePrime&lt;/tt&gt; class is the kind of thing that might be used to narrow the domain of allowed
values to prime numbers.&lt;/p&gt;
&lt;div class="section" id="when-does-this-value-checking-happen"&gt;
&lt;h3&gt;When does this value checking happen?&lt;/h3&gt;
&lt;p&gt;I'm glad you asked.&lt;/p&gt;
&lt;p&gt;Use of annotated types is &lt;strong&gt;not&lt;/strong&gt; part of the Python run-time. Annotated type arguments are essentially ignored.
The origin type is used by tools like &lt;strong&gt;mypy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Any further use of annotations is a thing your application or tool-chain will need to do.&lt;/p&gt;
&lt;p&gt;An application can see the annotations for an object using the &lt;tt class="docutils literal"&gt;__annotations__&lt;/tt&gt; special attribute number,
or use the &lt;tt class="docutils literal"&gt;typing.get_type_hints()&lt;/tt&gt; function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from typing import Annotated, get_type_hints
&amp;gt;&amp;gt;&amp;gt; class MustBePrime:
...     pass
...

&amp;gt;&amp;gt;&amp;gt; class SomeApp:
...     x: Annotated[int, MustBePrime()]
...

&amp;gt;&amp;gt;&amp;gt; get_type_hints(SomeApp)
{'x': &amp;lt;class 'int'&amp;gt;}
&amp;gt;&amp;gt;&amp;gt; get_type_hints(SomeApp, include_extras=True)
{'x': typing.Annotated[int, &amp;lt;__main__.MustBePrime object at 0x7fde259a7be0&amp;gt;]}
&amp;gt;&amp;gt;&amp;gt; get_type_hints(SomeApp, include_extras=True)['x']
typing.Annotated[int, &amp;lt;__main__.MustBePrime object at 0x7fde259a7be0&amp;gt;]
&lt;/pre&gt;
&lt;p&gt;We can see the annotated type hint for &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This means, our application is free to &amp;quot;apply&amp;quot; the annotation in some way.&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;strong&gt;Whoa!  That's vague&lt;/strong&gt;,&amp;quot; you say. &amp;quot;There are no specific rules for annotated types?&amp;quot;&lt;/p&gt;
&lt;p&gt;I agree.&lt;/p&gt;
&lt;p&gt;The details are up to your app.  Seriously.  Define them in a way that makes sense.&lt;/p&gt;
&lt;p&gt;Maybe you want your app looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; class SomeApp:
....    x: Annotated[int, MustBePrime()]
...     def __init__(self, arg_value: int) -&amp;gt; None:
...         self.x = arg_value
...
&lt;/pre&gt;
&lt;p&gt;And you've got a use case in mind...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sa = SomeApp(42)
Traceback (most recent call last):
   ...
ValueError: value 42 is not prime
&lt;/pre&gt;
&lt;p&gt;The idea is that this specific app has an associated collection of annotations that are used
during &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; processing to further validate the supplied values.&lt;/p&gt;
&lt;p&gt;The code to this is &lt;em&gt;clearly&lt;/em&gt; part of &lt;tt class="docutils literal"&gt;SomeApp&lt;/tt&gt; -- maybe a metaclass, maybe a superclass -- but
clearly part of the app.&lt;/p&gt;
&lt;p&gt;And the app will use the annotation as a kind of &amp;quot;plug-in&amp;quot; or &amp;quot;extension&amp;quot; or &lt;strong&gt;Strategy&lt;/strong&gt; design pattern to do some additional processing at some point.&lt;/p&gt;
&lt;p&gt;Our use case was part of &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; processing.  What does this look like?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-example-app"&gt;
&lt;h3&gt;An example app&lt;/h3&gt;
&lt;p&gt;We'll avoid metaclasses, and pretend that Annotated types are checked by an
explict call to a method of the class.
Let's say a superclass, named &lt;tt class="docutils literal"&gt;RuleCheck&lt;/tt&gt; has a method that must be
called at the end of &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; to check compliance with annotations.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class SomeApp(RuleCheck):
    x: Annotated[int, MustBePrime()]

    def __init__(self, arg_value: int) -&amp;gt; None:
        self.x = arg_value
        self.check()
&lt;/pre&gt;
&lt;p&gt;The idea here is that the class-level hints are carefully defined.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;__init__()&lt;/tt&gt; merely slaps any old value in there.&lt;/p&gt;
&lt;p&gt;And the &lt;tt class="docutils literal"&gt;self.check()&lt;/tt&gt; then assures that all hints are actually true for the supplied
values.&lt;/p&gt;
&lt;p&gt;This means it will &amp;quot;apply&amp;quot; the annotation to the given value. In this case,
it will either allow the value silently or raise an exception if there's a problem.&lt;/p&gt;
&lt;p&gt;Here's the &lt;tt class="docutils literal"&gt;RuleCheck&lt;/tt&gt; class.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import Annotated, get_type_hints, get_args

class RuleCheck:
    def check(self) -&amp;gt; None:
        vars = get_type_hints(self.__class__, include_extras=True)
        for name in vars:
            match vars[name]:
                case Annotated:
                   base, *rules = get_args(vars[name])
                   for rule in rules:
                       rule(getattr(self, name))
&lt;/pre&gt;
&lt;p&gt;Each annotated variable has the arguments to the annotation
retrieved with &lt;tt class="docutils literal"&gt;typing.get_args()&lt;/tt&gt;.
Each of these annotations must be a callable object of some kind
that can be applied to the attribute's value.&lt;/p&gt;
&lt;p&gt;We leave the implementation of &lt;tt class="docutils literal"&gt;MustBePrime&lt;/tt&gt; as an exercise for the reader.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-do-i-need-it"&gt;
&lt;h2&gt;Why do I need it?&lt;/h2&gt;
&lt;p&gt;You need it in a bunch of cases. Here are some ideas.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type domain narrowing. We used &amp;quot;prime&amp;quot; as an example. You might want to use positive values, or
values in a range. Or other properties that you'd like to make part of a type.&lt;/li&gt;
&lt;li&gt;Documentation. You can imagine &lt;tt class="docutils literal"&gt;x: Annotated[str, &lt;span class="pre"&gt;title(&amp;quot;Some&lt;/span&gt; Descriptive &lt;span class="pre"&gt;Information&amp;quot;),&lt;/span&gt; &lt;span class="pre"&gt;Positive()]&lt;/span&gt;&lt;/tt&gt;.
Since the documentation is not a comment or other ephermeral source text, you can use this
to create a formal Schema for a class. Thing JSONSchema. (Or XSD if you're old.)
You could use the title to beef up the exception messages, for example.&lt;/li&gt;
&lt;li&gt;Other Processing. Let's not get crazy, but the following is possible.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
x: Annotated[float, Title(&amp;quot;Independent&amp;quot;), Range(0, 10)]
y: Annotated[float, DerivedFrom(&amp;quot;x&amp;quot;), Function(lambda x: 2*x-1)]
&lt;/pre&gt;
&lt;p&gt;The idea is that we might build a class where any change to &lt;tt class="docutils literal"&gt;x&lt;/tt&gt; computes a value
for &lt;tt class="docutils literal"&gt;y&lt;/tt&gt; based on the annotation; and the value is cached as an attribute
value, not a &lt;tt class="docutils literal"&gt;&amp;#64;property&lt;/tt&gt; which is always recompued.&lt;/p&gt;
&lt;p&gt;(Yes, &lt;tt class="docutils literal"&gt;&amp;#64;cache&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;#64;property&lt;/tt&gt; can do this. This isn't necessarily a &lt;strong&gt;great&lt;/strong&gt; idea.
But it's possible.)&lt;/p&gt;
&lt;div class="section" id="building-a-type-definition"&gt;
&lt;h3&gt;Building a type definition&lt;/h3&gt;
&lt;p&gt;Maybe we want this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PosInt: TypeAlias = Annotated[int, MustBePositive()]
PrimePosInt: TypeAlias = Annotated[PosInt, MustBePrime()]
&lt;/pre&gt;
&lt;p&gt;We've built a complicated type on top of another complicated type.&lt;/p&gt;
&lt;p&gt;This permits us to -- for example -- improve the performance of &lt;tt class="docutils literal"&gt;MustBePositive&lt;/tt&gt; with an attendant speedup of other, related objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="file-parsing"&gt;
&lt;h3&gt;File Parsing&lt;/h3&gt;
&lt;p&gt;This is an edge case. But. It applies to the vast number of files processed by COBOL programs.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
x: Annotated[str, Start(0), Length(5)]
y: Annotated[str, Start(5), Length(10)]
z: Annotated[Decimal, Start(15), Length(10), Scale(2)]
&lt;/pre&gt;
&lt;p&gt;We've provided the metadata for positions of the source data in a text document.
A file with a line like &lt;tt class="docutils literal"&gt;&amp;quot;ABCDEZYXWVUTSRQ0000001299&amp;quot;&lt;/tt&gt; could be parsed by a class
that leveraged the annotations to pluck values out of the source string.
It could apply conversion from mainframe encodings (&amp;quot;EBCDIC&amp;quot;) and do &lt;tt class="docutils literal"&gt;decimal&lt;/tt&gt; conversion.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="where-can-i-see-examples"&gt;
&lt;h2&gt;Where can I see examples?&lt;/h2&gt;
&lt;p&gt;I have two examples, right now.&lt;/p&gt;
&lt;p&gt;Pydantic v2 Annotated Validators: &lt;a class="reference external" href="https://docs.pydantic.dev/latest/usage/validators/#annotated-validators"&gt;https://docs.pydantic.dev/latest/usage/validators/#annotated-validators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wow is this cool.&lt;/p&gt;
&lt;p&gt;Also.&lt;/p&gt;
&lt;p&gt;TigerShark. &lt;a class="reference external" href="https://github.com/slott56/TigerShark"&gt;https://github.com/slott56/TigerShark&lt;/a&gt;  This is a pretty narrow problem domain.
But, the Annotated type hints were a &lt;em&gt;perfect&lt;/em&gt; solution to an ages-old problem.
The X12 messages have complex more-or-less hierarchical structure. Messages have Loops (that can repeat), Segments, and individual Data Elements.&lt;/p&gt;
&lt;p&gt;The definitions of the messages have complicated meta-data on size, encoding, data types,
optionality, etc., and etc.&lt;/p&gt;
&lt;p&gt;What we want is a top-level definition of a message that looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MSG270(Message):
    &amp;quot;&amp;quot;&amp;quot;HIPAA Health Care Eligibility Inquiry X092A1-270&amp;quot;&amp;quot;&amp;quot;
    ItemIsa_Loop: TypeAlias = Annotated[ISA_LOOP, Title('Interchange Control Header'), Usage('R'), Position(1), Required(True)]
    isa_loop: Annotated[list[ItemIsa_Loop], MinItems(1)]
&lt;/pre&gt;
&lt;p&gt;The TypeAlias and Annotated type provide all the metadata for this message.&lt;/p&gt;
&lt;p&gt;Looking elsewhere in the message module, we find this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class ISA_LOOP_ISA(Segment):
    &amp;quot;&amp;quot;&amp;quot;Interchange Control Header&amp;quot;&amp;quot;&amp;quot;
    _segment_name = 'ISA'

    isa01: Annotated[I01, Title('Authorization Information Qualifier'), Usage('R'), Position(1), Enumerated(*['00', '03'])]

    isa02: Annotated[I02, Title('Authorization Information'), Usage('R'), Position(2)]

    isa03: Annotated[I03, Title('Security Information Qualifier'), Usage('R'), Position(3), Enumerated(*['00', '01'])]
&lt;/pre&gt;
&lt;p&gt;Again, the elements are defined (entirely) by annotations.&lt;/p&gt;
&lt;p&gt;The base type? &lt;tt class="docutils literal"&gt;I01&lt;/tt&gt;?  A pool of common definitions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
I01: TypeAlias = Annotated[ID, MinLen(2), MaxLen(2)]
&lt;/pre&gt;
&lt;p&gt;But wait! That still depends on a more foundational definition, &lt;tt class="docutils literal"&gt;ID&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ID: TypeAlias = str
&lt;/pre&gt;
&lt;p&gt;The idea of this is to map the type information to type aliases, so anyone
can follow the message definitions completely. The annotations are defined
formally by the X12/EDI standards; the mapping to Python is through these
foundational type aliases for Python types.&lt;/p&gt;
&lt;p&gt;Also see &lt;a class="reference external" href="https://pypi.org/project/TigerShark3/"&gt;https://pypi.org/project/TigerShark3/&lt;/a&gt; if you have the urge to install it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="patterns"></category><category term="type-hints"></category></entry><entry><title>any() and all() and Identity Elements</title><link href="https://slott56.github.io/2023-06-27-any_and_all_and_identity_elements.html" rel="alternate"></link><published>2023-06-27T09:00:00-04:00</published><updated>2023-06-27T09:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-06-27:/2023-06-27-any_and_all_and_identity_elements.html</id><summary type="html">&lt;p&gt;This was a surprising thing (for me) to see.
Surprising because -- after writing a book about functional programming,
I'd forgotten that some of the ideas are actually really new to people.&lt;/p&gt;
&lt;p&gt;(I've omitted the source of the quote because I want to reuse this
without worrying about link rot. Some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was a surprising thing (for me) to see.
Surprising because -- after writing a book about functional programming,
I'd forgotten that some of the ideas are actually really new to people.&lt;/p&gt;
&lt;p&gt;(I've omitted the source of the quote because I want to reuse this
without worrying about link rot. Some web sites have rocky futures.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;
Python tip:&lt;/p&gt;
&lt;p&gt;Be careful when using all()&lt;/p&gt;
&lt;p&gt;all() returns True for an empty sequence
&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This seemed to be a surprise to the author. And a large number of people argued -- a few seemed vehement -- that Python is wrong here.&lt;/p&gt;
&lt;p&gt;When I pointed out this is the mathematical definition they argued that&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Programming isn't math. (This is demonstrably false. You may not have wide-ranging math skills, but programming very much is applied math.)&lt;/li&gt;
&lt;li&gt;The math is wrong. (Also false.)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="what-is-all"&gt;
&lt;h2&gt;What is all()?&lt;/h2&gt;
&lt;p&gt;First. What is &lt;tt class="docutils literal"&gt;all(x)&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;In effect it's &lt;tt class="docutils literal"&gt;reduce(and, x)&lt;/tt&gt;. Except, of course, there's no simple &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; operator. So, it's not &lt;strong&gt;exactly&lt;/strong&gt; that, but it's close enough.
We'll get to &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; in the next setion.&lt;/p&gt;
&lt;p&gt;Let's reason by analogy for a while, using &lt;cite&gt;sum()&lt;/cite&gt; and &lt;cite&gt;math.prod()&lt;/cite&gt;.
These are also &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; operations, but they work with numbers, not boolean values.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([1,2,3])
6
&amp;gt;&amp;gt;&amp;gt; prod([1,2,3])
6
&lt;/pre&gt;
&lt;p&gt;Okay. Using a perfect number like 6 is a bad example, isn't it?&lt;/p&gt;
&lt;p&gt;Here's a better example.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([0, 1, 2])
3
&amp;gt;&amp;gt;&amp;gt; prod([0, 1, 2])
0
&lt;/pre&gt;
&lt;p&gt;No surprise, right?&lt;/p&gt;
&lt;p&gt;Here is a more fundamental definition of the &lt;tt class="docutils literal"&gt;sum()&lt;/tt&gt; function.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from functools import reduce
&amp;gt;&amp;gt;&amp;gt; from operator import add, mul
&amp;gt;&amp;gt;&amp;gt; reduce(add, [0, 1, 2])
3
&lt;/pre&gt;
&lt;p&gt;In effect, &lt;tt class="docutils literal"&gt;sum = functools.partial(reduce, add)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This works for &lt;tt class="docutils literal"&gt;prod = functools.partial(reduce, mul)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It would work for &lt;tt class="docutils literal"&gt;any()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;all()&lt;/tt&gt; &lt;strong&gt;if&lt;/strong&gt; there was a simple operator in the
&lt;tt class="docutils literal"&gt;operator&lt;/tt&gt; module.&lt;/p&gt;
&lt;p&gt;There's an &lt;tt class="docutils literal"&gt;and_&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or_&lt;/tt&gt; definition in operator, but these are names for &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;,
which a bit-tweaking operations, only defined over integer values. They're &lt;strong&gt;not&lt;/strong&gt;
the general-purpose, short-circuiting &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operators.&lt;/p&gt;
&lt;p&gt;You could create a lambda for this. &lt;tt class="docutils literal"&gt;all = functools.partial(reduce, lambda a, b: a and b)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;All of this depends on the definition of &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-reduce"&gt;
&lt;h2&gt;What is reduce()?&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; function is sometimes described as  a &amp;quot;fold&amp;quot;.&lt;/p&gt;
&lt;p&gt;When we do &lt;tt class="docutils literal"&gt;reduce(add, [1, 2, 3])&lt;/tt&gt; it's essentially &lt;tt class="docutils literal"&gt;1 + 2 + 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We've folded the &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; operator into the sequence of values.&lt;/p&gt;
&lt;p&gt;When we do &lt;tt class="docutils literal"&gt;reduce(mul, [1, 2, 3])&lt;/tt&gt; it's a lot like we did &lt;tt class="docutils literal"&gt;1 * 2 * 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This folding idea also applies well to &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;or&lt;/tt&gt;. We can fold logical operators into the sequence of values.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;all(x)&lt;/tt&gt; is (conceptually) &lt;tt class="docutils literal"&gt;reduce(and, x)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;x[0] and x[1] and &lt;span class="pre"&gt;x[2]...&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;any(y)&lt;/tt&gt; is (also, in concept) &lt;tt class="docutils literal"&gt;reduce(or, y)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;y[0] or y[1] or &lt;span class="pre"&gt;y[2]...&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;(We have to throw around conceptually, because there's no trivial &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operator.)&lt;/p&gt;
&lt;p&gt;So far, so good. This &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; hasn't introduced an complications, it's just a way of defining things
around the &amp;quot;fold&amp;quot; idea.&lt;/p&gt;
&lt;p&gt;What about empty sequences or iterables?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-initialization-problem"&gt;
&lt;h2&gt;The Initialization Problem&lt;/h2&gt;
&lt;p&gt;Here's the problem with our overly-simplistic use of Python's &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; reduce(add, [])
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty iterable with no initial value
&amp;gt;&amp;gt;&amp;gt; reduce(mul, [])
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: reduce() of empty iterable with no initial value
&lt;/pre&gt;
&lt;p&gt;Failure.&lt;/p&gt;
&lt;p&gt;Here are the right answers:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; sum([])
0
&amp;gt;&amp;gt;&amp;gt; prod([])
1
&lt;/pre&gt;
&lt;p&gt;The sum of an empty list is zero.&lt;/p&gt;
&lt;p&gt;The product of an empty list is 1.&lt;/p&gt;
&lt;p&gt;Similarly.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; any([])
False
&amp;gt;&amp;gt;&amp;gt; all([])
True
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;any()&lt;/tt&gt; function is a little bit like a sum. The &lt;tt class="docutils literal"&gt;all()&lt;/tt&gt; function is a little bit like
a product.&lt;/p&gt;
&lt;p&gt;I think that's why the &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; operator has precedence over the &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wait-what"&gt;
&lt;h2&gt;Wait, what?&lt;/h2&gt;
&lt;p&gt;Yes, the value of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all([])&lt;/span&gt;&lt;/tt&gt; is True and the value of the expression &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; is 1.&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;must&lt;/strong&gt; be true. It's not an implementation choice. It's a matter of definition.&lt;/p&gt;
&lt;p&gt;Roll back to the definition of &amp;quot;reduce&amp;quot; as &amp;quot;folding in an operator&amp;quot;.
(See &lt;a class="reference internal" href="#what-is-reduce"&gt;What is reduce()?&lt;/a&gt;, above.)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([1,&lt;/span&gt; 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;reduce(mul, [1, 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * 2 * 3&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; works and &lt;tt class="docutils literal"&gt;reduce(mul, [])&lt;/tt&gt; doesn't work. Something's wrong with &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This is a problem with the &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; function (as we used it above) not quite providing &lt;strong&gt;all&lt;/strong&gt; the features required by the &lt;tt class="docutils literal"&gt;sum()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;prod()&lt;/tt&gt; functions.&lt;/p&gt;
&lt;p&gt;Enter the initial value parameter for &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; reduce(mul, [], 1)
1
&lt;/pre&gt;
&lt;p&gt;Aha. This fixes the &lt;tt class="docutils literal"&gt;reduce()&lt;/tt&gt; problem. It's a little more complicated, but it's now correct.&lt;/p&gt;
&lt;p&gt;This means &lt;tt class="docutils literal"&gt;reduce(mul, [x, y, z], 1)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * x * y * z&lt;/tt&gt;.  The 1 is the multiplicative identity element and does nothing.&lt;/p&gt;
&lt;p&gt;This means &lt;tt class="docutils literal"&gt;reduce(mul, [x, y, z])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;x * y * z&lt;/tt&gt;. The 1 isn't needed because there's a value in the sequence.&lt;/p&gt;
&lt;p&gt;And &lt;tt class="docutils literal"&gt;reduce(mul, [], 1)&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.  The multiplicative identity element is &lt;strong&gt;required&lt;/strong&gt; when the sequence is empty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="consider-the-fold"&gt;
&lt;h2&gt;Consider the Fold&lt;/h2&gt;
&lt;p&gt;Where are we?&lt;/p&gt;
&lt;p&gt;Right.  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([1,&lt;/span&gt; 2, 3])&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1 * 1 * 2 * 3&lt;/tt&gt;. A multiplicateive identity element is provided.&lt;/p&gt;
&lt;p&gt;Therefore, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt;&lt;/tt&gt; is &lt;tt class="docutils literal"&gt;1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Note the delightful algebraic elegance of the fold definition.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2,&lt;/span&gt; 3, 4])&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2,&lt;/span&gt; 3]) * 4&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([2])&lt;/span&gt; * 3 * 4&lt;/tt&gt; == &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;prod([])&lt;/span&gt; * 2 * 3 * 4&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This is the reason why &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;all([])&lt;/span&gt;&lt;/tt&gt; &lt;strong&gt;must&lt;/strong&gt; return &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="patterns"></category><category term="python"></category><category term="functional-programming"></category></entry><entry><title>Python and Encapsulation -- How do I private?</title><link href="https://slott56.github.io/2023_06_20-python_and_encapsulation.html" rel="alternate"></link><published>2023-06-20T08:00:00-04:00</published><updated>2023-06-20T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-06-20:/2023_06_20-python_and_encapsulation.html</id><summary type="html">&lt;p&gt;Central to OO design is &amp;quot;encapsulation.&amp;quot; It's so central it is part of several separate principles.&lt;/p&gt;
&lt;p&gt;In the S. O. L. I. D. design principles it's the &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;.
And a significant part of the &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, Python n00bz -- folks who already know some OO …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Central to OO design is &amp;quot;encapsulation.&amp;quot; It's so central it is part of several separate principles.&lt;/p&gt;
&lt;p&gt;In the S. O. L. I. D. design principles it's the &lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;.
And a significant part of the &lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In some cases, Python n00bz -- folks who already know some OO programming in other languages -- complain
that the usual artifacts of encapsulation are missing from the Python language.&lt;/p&gt;
&lt;p&gt;There's no &lt;strong&gt;private&lt;/strong&gt; or &lt;strong&gt;static&lt;/strong&gt; or &lt;strong&gt;protected&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;p&gt;How can we implement super-important encapsulation without this super-important text marker in the source?&lt;/p&gt;
&lt;p&gt;I'll address this from two points of view: what to do, and what not to do.&lt;/p&gt;
&lt;div class="section" id="what-to-do"&gt;
&lt;h2&gt;What to do&lt;/h2&gt;
&lt;p&gt;Design with encapsulation in mind. Follow the S.O.L.I.D. design principles.&lt;/p&gt;
&lt;p&gt;I suggest starting with Interface Separation.&lt;/p&gt;
&lt;p&gt;For things that aren't part of the public API (perhaps &amp;quot;private&amp;quot; in some sense) use a leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; in their name.
One &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; only, please.&lt;/p&gt;
&lt;p&gt;For things that are &amp;quot;protected&amp;quot;, or &amp;quot;final&amp;quot;, you probably don't need to do anything.
If you're really &lt;strong&gt;really&lt;/strong&gt; worried about someone misapprehending your design intent,
include many comments.&lt;/p&gt;
&lt;p&gt;If you're &lt;strong&gt;sure&lt;/strong&gt; someone will utterly disregard your comments,
misuse a private item outside the class,
or misuse a protected item outside the package or subclass,
or extend a final item,
or some other nefarious thing, well, there it is.
You'll have to ask yourself why this feature is both private/protected and so appealingly attractive.
If you can't discourage people from abusing it, perhaps there are other design problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-not-to-do"&gt;
&lt;h2&gt;What not to do&lt;/h2&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;__name&lt;/tt&gt; is mangled to make it an implementation detail of a &lt;em&gt;specific&lt;/em&gt; class.
These names tend to defeat ordinary inheritance.&lt;/p&gt;
&lt;p&gt;Don't use double-underscore before-and-after &lt;tt class="docutils literal"&gt;__names__&lt;/tt&gt; at all.
Never.
These are not conventionally &amp;quot;private&amp;quot; -- these are implementation details.
The name space is reserved to be part of Python's run-time.&lt;/p&gt;
&lt;p&gt;Other double-underscore before &lt;tt class="docutils literal"&gt;__names&lt;/tt&gt; are private, but are private to the class.
They cannot easily be overridden by a subclass. This is by design, and these are
specific solutions to the problem of implementing something where an override
is constrained to a single class in a hierarchy.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers"&gt;https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the quote:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Names in this category, when used within the context of a class definition, are re-written to use a mangled form to help avoid name clashes between “private” attributes of base and derived classes.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;This is not conventional encapsulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-additional-thoughts"&gt;
&lt;h2&gt;Some additional thoughts&lt;/h2&gt;
&lt;p&gt;Some questions I ask when people have &lt;strong&gt;Serious Problems&lt;/strong&gt;
with Python's approach to privacy.&lt;/p&gt;
&lt;div class="section" id="question-1-is-private-really-important"&gt;
&lt;h3&gt;Question 1 -- Is private really important?&lt;/h3&gt;
&lt;p&gt;Let me state as a going-on assumption that encapsulation is an important part of an OO design.
Failure to encapsulate can create incomprehensible state changes, which is isomorphic to
a lot of functions sharing global variables. That's precisely the thing OO design
lets us avoid.&lt;/p&gt;
&lt;p&gt;So, yes, private -- as a design concept -- is very important.
Perhaps it's the single most important of OO design.&lt;/p&gt;
&lt;p&gt;Inheritance follows behind encapsulation. It's riddled with disputes
because we can often use delegation instead of inheritance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="question-2-given-encapsulation-what-more-does-the-language-need"&gt;
&lt;h3&gt;Question 2 -- Given encapsulation, what more does the language need?&lt;/h3&gt;
&lt;p&gt;In other words, Python lacks a &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword: is this a problem?&lt;/p&gt;
&lt;p&gt;Python's notion of &amp;quot;hidden-ish&amp;quot; attributes and methods
seems to be perfectly adequate.
The leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; on the name seems to be &lt;strong&gt;more&lt;/strong&gt; visible
than having to look back at a class definition to
see if a name is public, protected, or private.&lt;/p&gt;
&lt;p&gt;It looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyExampleClass:
    def visble_method(self, anArgValue: int) -&amp;gt; None:
        self._less_visible_method(anArgValue * 2)

    def _less_visible_method(self, anArgValue: int) -&amp;gt; None:
        self.anAttribute = anArgValue
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;visible_method()&lt;/tt&gt; method is considered &amp;quot;public&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;_less_visible_method()&lt;/tt&gt; method is considered by most to be &amp;quot;private&amp;quot;.
Yes, we can all see the method when we read the source.&lt;/p&gt;
&lt;p&gt;Many tools will make some effort to hide this behind a thin screen.&lt;/p&gt;
&lt;p&gt;Many developers understand this distinction. Sometimes n00bz don't -- at first -- recognize this convention.
They might complain that the &lt;tt class="docutils literal"&gt;_less_visible_method()&lt;/tt&gt; method is missing from the API documentation.
Then they're told this is because it's an implementation detail they can't depend on.
Then they complain that it's still visible in the source -- they can see the implementation!
It's not &lt;strong&gt;really&lt;/strong&gt; private!&lt;/p&gt;
&lt;p&gt;The language makes no distinction between these methods.&lt;/p&gt;
&lt;p&gt;The leading &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; is a convention. Widely-followed. Pretty universally adopted.
But not formally part of the language semantics.&lt;/p&gt;
&lt;p&gt;Some linters will remind you that you've broken the rules by using a &amp;quot;private&amp;quot; method
from outside the confines of the class hierarchy.&lt;/p&gt;
&lt;p&gt;Do we need more? Let's dig into what more we might ask for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2a1-the-language-needs-formal-semantic-support-for-private"&gt;
&lt;h3&gt;Q2A1. The language needs formal semantic support for private&lt;/h3&gt;
&lt;p&gt;Q: Why?&lt;/p&gt;
&lt;p&gt;A: Because I need all the tools to absolutely guarantee that I don't abuse this.&lt;/p&gt;
&lt;p&gt;Recall the use for privacy is to help us &lt;strong&gt;design&lt;/strong&gt; API's cleanly.
Keywords like &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;final&lt;/tt&gt; are part of a design effort.
They're (sometimes) helpful information for designers.&lt;/p&gt;
&lt;p&gt;They're easily overlooked when using the class.&lt;/p&gt;
&lt;p&gt;And, at run-time, they cease to be useful.&lt;/p&gt;
&lt;p&gt;Do we really want the byte-code interpreter to be checking some kind of &amp;quot;ownership&amp;quot; before each
write to memory?&lt;/p&gt;
&lt;p&gt;The usual answer is &amp;quot;No.&amp;quot;&lt;/p&gt;
&lt;p&gt;For a compiled language, privacy is honored as part of code generation.
But. That's essentially the same as having a convention and using a linter to
confirm the convention is followed properly.&lt;/p&gt;
&lt;p&gt;(And yes, &amp;quot;language + linter&amp;quot; is not the same as &amp;quot;language&amp;quot;.
Those folks who can't tolerate the &amp;quot;two-ness&amp;quot; of it
can write a shell script to bundle a linter with the Python run-time.
After all, that's how gcc used to work. It was a bundle of precompiler, C++ to C translator,
and the C compiler, which -- itself -- was a multi-step operation to build code.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q2a2-the-languge-tools-must-support-private"&gt;
&lt;h3&gt;Q2A2. The languge tools must support private&lt;/h3&gt;
&lt;p&gt;Q: Why? Do you have trouble seeing the &lt;tt class="docutils literal"&gt;_&lt;/tt&gt;? Do you have trouble remembering the semantics? Do you like referring back to the class definition all the time to see if a name is private or not?&lt;/p&gt;
&lt;p&gt;A: Don't be an ass with questions like that. Of course &lt;strong&gt;I&lt;/strong&gt; see it. Of course &lt;strong&gt;I&lt;/strong&gt; know what it means. I worry about others, who aren't as gifted in the programming. Everyone knows there's always &lt;em&gt;someone&lt;/em&gt; who can't follow the simple rules.&lt;/p&gt;
&lt;p&gt;This is about projecting nefarious intent on others?&lt;/p&gt;
&lt;p&gt;Some folks insist a Very Clever IDE (VCI™) would recognize context and provide
private or protected attributes in a drop-down list of alternatives based on
context. That seems nice, I suppose.&lt;/p&gt;
&lt;p&gt;We've wandered far from the design intent behind encapsulation and into
areas of IDE UX. A UX can identify leading-&lt;tt class="docutils literal"&gt;_&lt;/tt&gt; variables pretty well,
and mark them as not public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="some-backstory"&gt;
&lt;h2&gt;Some Backstory&lt;/h2&gt;
&lt;p&gt;The quote that drives this is &amp;quot;We're all consenting adults here.&amp;quot;&lt;/p&gt;
&lt;p&gt;This summarizes the idea that Python is distributed as source.
We can all see the implementation.
The notion of &amp;quot;private&amp;quot; is -- at best -- a suggestion.&lt;/p&gt;
&lt;p&gt;(Tangentially related: &lt;a class="reference external" href="https://slott56.github.io/2015_12_08-python_big_picture_whats_the_roadmap_revised.html"&gt;Python Big Picture -- What's the &amp;quot;roadmap&amp;quot;?&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="design patterns"></category><category term="python"></category></entry><entry><title>Software Rewrites to Add Hints</title><link href="https://slott56.github.io/2023_05_04-software_rewrites_to_add_hints.html" rel="alternate"></link><published>2023-05-04T08:00:00-04:00</published><updated>2023-05-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-05-04:/2023_05_04-software_rewrites_to_add_hints.html</id><summary type="html">&lt;p&gt;Let's reach way, way back. 1989 - 1990.
This will let me talk about OO programming and Python Type Hints. (really)
And doing OO design for things that are as pervasive (and transparent) as air.
Things that &lt;strong&gt;need&lt;/strong&gt; to be part of a design, but don't appear in
any documentation.&lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's reach way, way back. 1989 - 1990.
This will let me talk about OO programming and Python Type Hints. (really)
And doing OO design for things that are as pervasive (and transparent) as air.
Things that &lt;strong&gt;need&lt;/strong&gt; to be part of a design, but don't appear in
any documentation.&lt;/p&gt;
&lt;p&gt;In the early 90's the Hero Game System, 4ed had just come out.
PC's were an expensive luxury item. But the Macintosh was there to help us think different.&lt;/p&gt;
&lt;p&gt;My TTRPG group is loving the Hero Game System. Complicated stories. Super heroes. Sophisticated game mechanics.
The Fantasy Hero rules were a delight, and lead to many long, involved campaigns.&lt;/p&gt;
&lt;p&gt;There's no overt OO programming to it (yet.) And, of course, Python has barely been invented.&lt;/p&gt;
&lt;p&gt;But there's a down-side to the Hero Game System:&lt;/p&gt;
&lt;div class="section" id="accounting"&gt;
&lt;h2&gt;Accounting&lt;/h2&gt;
&lt;p&gt;The game requires a fairly scrupulous accounting of &amp;quot;Character Points&amp;quot;.
Some are assigned at the outset. A hero, for example, may have a base budget of 75 points.
Some are purchased by taking on disadvantages. For example Paranoia, or Hunted and Watched by Authorities,
or a Dependence, or a Weakness you'd like to keep secret, can all add to the budget of character points.&lt;/p&gt;
&lt;p&gt;All of the powers, skills, talents, perks, and what-not are purchased
with character points.&lt;/p&gt;
&lt;p&gt;And it all has to balance.&lt;/p&gt;
&lt;p&gt;Too high a skill in Guns means ripping away some strength or intelligence.
Or reducing other skills.&lt;/p&gt;
&lt;p&gt;So what can we do to make sure our character's, gadgets, vehicles, and bases
are all designed properly?&lt;/p&gt;
&lt;p&gt;Clearly, the answer is tools. Eventually, there will be OO design in here, I promise.
We'll work through the history, though.&lt;/p&gt;
&lt;div class="section" id="paper-and-pencil"&gt;
&lt;h3&gt;Paper and Pencil&lt;/h3&gt;
&lt;p&gt;In the 90's, I played the game using actual paper spreadsheets. 3-column accounting pads to tally up base
points, advantages, and limitations to compute the net points after adjustments.&lt;/p&gt;
&lt;p&gt;After all, we're talking about table-top role-playing.
Paper and pencil gaming. Of course we have 3-column ledger pads.
Along with hex mapping paper. And Dice. Lots of dice.&lt;/p&gt;
&lt;p&gt;It's the 90's. I've got Macintosh LC (?) I think.
I remember the Mac+. I remember the iMac. In between the two was a slim pizza box with a front-loading CD.&lt;/p&gt;
&lt;p&gt;Software tools are ramping up quickly to the point where they can be used casually
for gaming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h3&gt;Software&lt;/h3&gt;
&lt;p&gt;It didn't take too long to start using spreadsheet software. Appleworks. Then Clarisworks.&lt;/p&gt;
&lt;p&gt;It's clunky, but the computations aren't complicated. It's just a lot of typing.&lt;/p&gt;
&lt;p&gt;First, you have to be super-careful to type all the stuff from the rule books into the spreadsheet properly.&lt;/p&gt;
&lt;p&gt;Second -- it's the early 90's -- laptops are still very expensive. This means I'm going to
design offline, print, and use paper on game night to play.&lt;/p&gt;
&lt;p&gt;Remember, it's a spreadsheet: it introduces as many problems as it solves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v2-hypercard"&gt;
&lt;h3&gt;Software V2: Hypercard&lt;/h3&gt;
&lt;p&gt;HyperCard -- if you've never seen it -- isn't easy to understand.&lt;/p&gt;
&lt;p&gt;With some work, I created cards for each power/skill/perk/talent/whatever.&lt;/p&gt;
&lt;p&gt;I can use those cards to create new cards for a character with abilities, and references to powers, skills, talents, perks, whatever.&lt;/p&gt;
&lt;p&gt;I can then sum up the points to be sure the Character Points balance. I can tweak the card and try
again until I make the budget add up properly.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;With a little care, I can serialize the output as a CSV file that can be pumped into a spreadsheet and formatted.&lt;/p&gt;
&lt;p&gt;This was heavenly.&lt;/p&gt;
&lt;p&gt;I built elaborate campaigns, worlds, scenarios, adventures. All the things designed with HyperCard.
The pubishing involved spreadsheet formatting and some word-processing to tie it together.&lt;/p&gt;
&lt;p&gt;But. All good things come to an end. 2004 was the end of Hypercard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v3-python-and-oop"&gt;
&lt;h3&gt;Software V3: Python and OOP&lt;/h3&gt;
&lt;p&gt;(See, I told you we'd get to OOP, eventually.)&lt;/p&gt;
&lt;p&gt;When you consider the problem domain
it's a classic Object-Oriented Programming problem.
(I'd been thinking about it for well over decade at this point in the historial narrative.)&lt;/p&gt;
&lt;p&gt;Classic. OOP.&lt;/p&gt;
&lt;p&gt;There's tons of Inheritance. Tons of Delegation. Lots of Composition.  Lots of Instances of Classes.&lt;/p&gt;
&lt;p&gt;It's all there. And it's pretty simple. There are relatively few exceptions.
And the exceptions are trivially handled by footnotes to the &amp;quot;Game Master&amp;quot; (me).&lt;/p&gt;
&lt;p&gt;This means I have to drag all of the work I already did out of Hypercard and rewrite it into Python.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Once that's done, I can now use a block of code like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
normal1 = hero.Character(
    &amp;quot;Normal&amp;quot;,
    hero.NORMAL,
    # Characteristics
    hero.STR(13),
    hero.DEX(12),
    hero.CON(10),
    hero.BODY(12),
    hero.INT(10),
    hero.EGO(8),
    hero.PRE(13),
    hero.COM(9),
    # Skills, Talents, Perks, Powers
    hero.skills.WeaponFamiliarity_Category(&amp;quot;Common Melee&amp;quot;, 1),
    hero.skills.TransportFamiliarity_Single(&amp;quot;Horses&amp;quot;),
    hero.skills.Familiarity(&amp;quot;Jungle&amp;quot;, 1),
    hero.skills.Familiarity(&amp;quot;Town&amp;quot;, 1),
    hero.skills.AnimalHandling(1),
    # Disadvantages
    hero.disadvantages.Coward(),
)
&lt;/pre&gt;
&lt;p&gt;If the points don't balance, the class initializer will print a message.&lt;/p&gt;
&lt;p&gt;There's a serializer to produce CSV files for incorporation into spreadsheets.
This means the characters can format nicely for game night.&lt;/p&gt;
&lt;p&gt;We're back in business. I introduced my kids to TTRPG. Some of my nephews.
But I could balance the books on my laptop to make sure their characters were legit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v4-python-3-and-type-hints"&gt;
&lt;h3&gt;Software V4: Python 3 and Type Hints&lt;/h3&gt;
&lt;p&gt;So now it's 2023.&lt;/p&gt;
&lt;p&gt;I don't play Hero games much anymore.
In spite of not playing regularly,
the TTRPG topic surfaces from time to time. Maybe once every few years, now.&lt;/p&gt;
&lt;p&gt;And the OO Design topic is -- in the back of my mind -- evergreen.&lt;/p&gt;
&lt;p&gt;As a kind of mental palate cleansing &lt;em&gt;Amuse Bouche&lt;/em&gt; I decided to clean up the type hints
and unit tests and make sure my hobby stuff still ran in Python 3.11 or 3.12.
I did this in the unlikely event I ever wind up playing this TTRPG again.&lt;/p&gt;
&lt;p&gt;The cleanup inovolved a fair amount of work spread over almost a week.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Getting the type hints right revealed problems.
There are two parts to why this took so much work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="type-hint-fundamentals"&gt;
&lt;h2&gt;Type Hint Fundamentals&lt;/h2&gt;
&lt;p&gt;One issue is in the way the various columns of a standard
&amp;quot;Full Character Sheet&amp;quot; are formatted.
The publication guidelines are for paper-and-pencil, hard-copy kind of adventure guides and campaing books.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;Cost&amp;quot; column isn't -- universally -- numeric. Sometimes there's text.&lt;/li&gt;
&lt;li&gt;Same for the &amp;quot;Endurance&amp;quot; column. It may have text explanations comingled with numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is not a big deal when serializing the data for a spreadsheet.
Mixtures of numbers and words and what-not are tolerated politely.&lt;/p&gt;
&lt;p&gt;Using &lt;strong&gt;mypy&lt;/strong&gt; to check the type hints revealed a number of bad mistakes.&lt;/p&gt;
&lt;p&gt;Eventually, I could distinguish between the internal cost computations,
and the external presentation. This cleanly isolated the essentially numeric
accounting. (Which, if you roll back to the top of this post, was why we started this
in the first place: accounting.)&lt;/p&gt;
&lt;p&gt;Thst's not all, though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-issues"&gt;
&lt;h2&gt;Use Case Issues&lt;/h2&gt;
&lt;p&gt;The more fundamental issue was the conflation of &lt;tt class="docutils literal"&gt;Character | Gadget | Base | Vehicle&lt;/tt&gt;.
This requires some care in writing type hints and doing OO design to make
sure that any differences are essential differences in these classes of objects.&lt;/p&gt;
&lt;p&gt;For the most part, everything's a &amp;quot;Framework&amp;quot; that has a collection of features,
advantages, and limitations. A Power is a Feature, so Frameworks can nest.&lt;/p&gt;
&lt;p&gt;From a usability perspective there are two distinct kinds of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Raw Materials. Powers, Skills, Talents, etc., with a cost.
Ideally, these are all class definitions. They change very slowly, if at all.
An instance of one these classes has a CP cost and a list of effects.&lt;/p&gt;
&lt;p&gt;The Raw Materials are all &lt;tt class="docutils literal"&gt;class SomePower(Power): effects: list[Effect] = &lt;span class="pre"&gt;[STRBonus(+10)]&lt;/span&gt;&lt;/tt&gt; kind of definitions.
More-or-less right out of the rules, rewritten into Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished Goods. Things like Characters have a budget, which must balance the sum of the costs of the Raw Materials that make up the Character.
The characters in a game will be instances of some generic class, popuulated by instances raw material classes.
The &lt;tt class="docutils literal"&gt;Character&lt;/tt&gt; class definition has a few features that are distinct from the raw materials classes.&lt;/p&gt;
&lt;p&gt;The Finished goods are built with &lt;tt class="docutils literal"&gt;character = hero.Character(THIS(10), THAT(10), &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This distinction makes for some gnarly OO design decisions to reflect the variety of use cases.&lt;/p&gt;
&lt;p&gt;A raw material has a fairly fixed definition, and there's a direct mapping
from the desired effects to the required cost. (The mapping isn't always &lt;strong&gt;simple&lt;/strong&gt;
because there are advantages and disadvantages that are figured in.)&lt;/p&gt;
&lt;p&gt;A finished good is built &amp;quot;on the fly&amp;quot; as a collection of instances of raw materials.&lt;/p&gt;
&lt;p&gt;Right now, the distinction is kind of buried: the classes &lt;tt class="docutils literal"&gt;Character&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Gadget&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Base&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Vehicle&lt;/tt&gt;
lack a unifying abstraction or protocol. This needs to be fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oo-design-advice"&gt;
&lt;h2&gt;OO Design Advice&lt;/h2&gt;
&lt;p&gt;It's not at all clear this distinction between raw material and finished good &lt;strong&gt;needs&lt;/strong&gt; to be present.
Superficially, it seems like everything's a &lt;tt class="docutils literal"&gt;Feature&lt;/tt&gt; and that's all we need to know.&lt;/p&gt;
&lt;p&gt;The use cases for design based on raw materials are an unstated element of the rules.
Technicall, we can argue that it's stated because design the essential purpose of
most of the rulebook. But. It's not stated as a simple &amp;quot;Here are things you'll design
based on raw materials we've already designed.&amp;quot; And &amp;quot;When you design a Campaign, you'll often
be extending the pool of raw materials.&amp;quot; Instead, it's assumed that you -- the reader --
understand the two kinds of design.&lt;/p&gt;
&lt;p&gt;This is a chronic problem in software architecture.&lt;/p&gt;
&lt;p&gt;There are things that are essential, but are -- like the atmosphere -- so pervasive
and invisble no one things to mention them.&lt;/p&gt;
&lt;p&gt;There's more (of course.)&lt;/p&gt;
&lt;div class="section" id="software-v5-python-3"&gt;
&lt;h3&gt;Software V5: Python 3&lt;/h3&gt;
&lt;p&gt;Interactivity was part of HyperCard (and the spreadsheets that preceeded it.)&lt;/p&gt;
&lt;p&gt;The Python 2 and Python 3 definitions of a Character was something
I implemented as a simple script.
This isn't &lt;strong&gt;too&lt;/strong&gt; interactive. You have an edit-run-crash cycle.&lt;/p&gt;
&lt;p&gt;The scripts aren't complicated, and a simple &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; rule can be used to rebuild
all the CSV's after a software bug fix or after a change to some Power definition.&lt;/p&gt;
&lt;p&gt;The work flow is tweak something. execute the script, look for error messages. Not too bad
when compared with paper-and-pencil of thirty years ago.&lt;/p&gt;
&lt;p&gt;Yesterday... (Seriously. Yesterday...)&lt;/p&gt;
&lt;p&gt;It occurred to me that Jupyter Lab is a way to restore the original HyperCard interactivity.
The Character/Gadget/Vehicle/Base can be a cell.
I can run the notebook to validate the budgets for all the various bad guys in the scenario.&lt;/p&gt;
&lt;p&gt;Over-budget? Tweak a definition until the cell stops printing the &amp;quot;over/under budget&amp;quot; error.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;I can write the supplemental stuff as Markdown. Right there. In the notebook.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-v6-adventure-books"&gt;
&lt;h3&gt;Software V6: Adventure Books&lt;/h3&gt;
&lt;p&gt;There's a very small, dedicated markeplace for Hero content.&lt;/p&gt;
&lt;p&gt;(See &lt;a class="reference external" href="https://www.herogames.com"&gt;https://www.herogames.com&lt;/a&gt;, &lt;a class="reference external" href="https://www.patreon.com/hero_games"&gt;https://www.patreon.com/hero_games&lt;/a&gt;, and &lt;a class="reference external" href="https://roll20.net/compendium/HERO/BookIndex#content"&gt;https://roll20.net/compendium/HERO/BookIndex#content&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;While I'll never be a proper game author,
I can still write up a scenario in a tidy format as if it's still 1995 and I might
get a few bucks for an Adventurer's Club submission.&lt;/p&gt;
&lt;p&gt;And this means using Sphinx, ReStructured Text (or maybe Markdown) to create a Scenario book.&lt;/p&gt;
&lt;p&gt;I will slowly unearth my old campaign books (written in Pages) and convert them
to Python/Sphinx projects.
While it might be fun to imagine publishing them to HeroGames or Roll20, they're based 4th ed out-of-date rules.
So. It's a hobby project that pleases only me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="object-oriented design"></category><category term="patterns"></category><category term="python"></category><category term="games"></category></entry><entry><title>Some Design Pattern Thoughts</title><link href="https://slott56.github.io/2023_04_25-some_design_pattern_thoughts.html" rel="alternate"></link><published>2023-04-25T08:00:00-04:00</published><updated>2023-04-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-04-25:/2023_04_25-some_design_pattern_thoughts.html</id><summary type="html">&lt;p&gt;The question was &amp;quot;Favorite Design Patterns.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is tricky because -- well -- so many patterns appear and re-appear in software.
Picking a few from the vast world of patterns is fraught with difficulties.&lt;/p&gt;
&lt;p&gt;Here are some thoughts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_01_03-code_quality_which_implementation_is_better.html"&gt;Code Quality - Which Implementation is &amp;quot;Better&amp;quot;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html"&gt;State-Based Object Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html"&gt;Functional Programming and Finite State …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The question was &amp;quot;Favorite Design Patterns.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is tricky because -- well -- so many patterns appear and re-appear in software.
Picking a few from the vast world of patterns is fraught with difficulties.&lt;/p&gt;
&lt;p&gt;Here are some thoughts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_01_03-code_quality_which_implementation_is_better.html"&gt;Code Quality - Which Implementation is &amp;quot;Better&amp;quot;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_06_25-state_based_object_modeling.html"&gt;State-Based Object Modeling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html"&gt;Functional Programming and Finite State Automata (FSA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2007_09_21-deconstructing_programs_from_c_or_finding_the_objects.html"&gt;Deconstructing Programs from C; or Finding The Objects™&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2009_02_20-python_business_rules_engine.html"&gt;Python Business Rules Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2010_12_27-the_anti_if_campaign.html"&gt;The Anti-IF Campaign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes. That's a lot of writing on design patterns.&lt;/p&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="design patterns"></category><category term="python"></category></entry><entry><title>Side Quest</title><link href="https://slott56.github.io/2023_04_04-side_quest.html" rel="alternate"></link><published>2023-04-04T08:00:00-04:00</published><updated>2023-04-04T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-04-04:/2023_04_04-side_quest.html</id><summary type="html">&lt;p&gt;Few things are as distracting as those god-awful side quests.&lt;/p&gt;
&lt;p&gt;In this case, I had to search out all of the examples in my new book drafts.&lt;/p&gt;
&lt;div class="section" id="previously"&gt;
&lt;h2&gt;Previously&lt;/h2&gt;
&lt;p&gt;Once upon a time, it was a manual check of code in the book to be sure it made sense.&lt;/p&gt;
&lt;p&gt;Ugh. Not …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Few things are as distracting as those god-awful side quests.&lt;/p&gt;
&lt;p&gt;In this case, I had to search out all of the examples in my new book drafts.&lt;/p&gt;
&lt;div class="section" id="previously"&gt;
&lt;h2&gt;Previously&lt;/h2&gt;
&lt;p&gt;Once upon a time, it was a manual check of code in the book to be sure it made sense.&lt;/p&gt;
&lt;p&gt;Ugh. Not living like that again.&lt;/p&gt;
&lt;p&gt;Tons of mistakes found by readers.&lt;/p&gt;
&lt;p&gt;The root cause? Editors who liked MS Word forcing me to copy-and-paste examples.&lt;/p&gt;
&lt;p&gt;Never again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-i"&gt;
&lt;h2&gt;Automation I&lt;/h2&gt;
&lt;p&gt;I would draft in RST and then use Pandoc to convert to MS Word.&lt;/p&gt;
&lt;p&gt;Then tweak the MS Word to use the publisher's preferred MS Word Template.
Point and click at every single thing to make sure it has the right
paragraph or character style name.&lt;/p&gt;
&lt;p&gt;Nope. Never doing that again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-ii"&gt;
&lt;h2&gt;Automation II&lt;/h2&gt;
&lt;p&gt;Let's use LaTeX. My project is an update to a book to the 3rd edition.&lt;/p&gt;
&lt;p&gt;(It's this: &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The 2nd ed. files came to me in MS Word format. I converted them to LaTeX with Pandoc.
Easy. Peasy.&lt;/p&gt;
&lt;p&gt;I can now edit the LaTeX Like a real person with a text editor.
Global search and replace now works reliably.
No need to endlessly point and click at pieces of text to set the style.&lt;/p&gt;
&lt;p&gt;I do need to remove some pandoc-isms and replace them with the publisher's preferred LaTeX.
This works out very nicely.&lt;/p&gt;
&lt;p&gt;But... The examples...&lt;/p&gt;
&lt;p&gt;Here's the side quest. (Foreshadowing: it's not the only one.)&lt;/p&gt;
&lt;div class="section" id="side-quest-ii-a"&gt;
&lt;h3&gt;Side Quest II-A&lt;/h3&gt;
&lt;p&gt;Parse the LaTeX (ugh) and locate all the examples.&lt;/p&gt;
&lt;p&gt;Pandoc made them &lt;tt class="docutils literal"&gt;{verbatim}&lt;/tt&gt; (I think) or maybe &lt;tt class="docutils literal"&gt;{lstlisting}&lt;/tt&gt;. Not sure. Doesn't matter.&lt;/p&gt;
&lt;p&gt;Change them all to &lt;tt class="docutils literal"&gt;{minted}&lt;/tt&gt;. (The publisher then changed them all to a customized &lt;tt class="docutils literal"&gt;{codeblock}&lt;/tt&gt; that looked GREAT!)&lt;/p&gt;
&lt;p&gt;The code to do this &lt;strong&gt;also&lt;/strong&gt; added a unique label to each example so the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;example~\\ref{ex-some-tag}&lt;/span&gt;&lt;/tt&gt; worked.&lt;/p&gt;
&lt;p&gt;(Yes, LaTeX is ugly.)&lt;/p&gt;
&lt;p&gt;This was really only preparation for the second side quest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="side-quest-ii-b"&gt;
&lt;h3&gt;Side Quest II-B&lt;/h3&gt;
&lt;p&gt;That's really only the start.
Once every example has a unique label, I can then do the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Extract all of the code snippets from the book, and load them up into a big-old dictionary. LaTeX parsing is a potential ugh, but it works for this book's LaTeX.&lt;/li&gt;
&lt;li&gt;Put each snippet into a test context using Jinja and a directory of templates.&lt;ul&gt;
&lt;li&gt;Some snippets are doctest code, and require little-to-no context.&lt;/li&gt;
&lt;li&gt;Some snippets are full functions, easy to plug into a file that includes test case(s).&lt;/li&gt;
&lt;li&gt;Some snippets are code fragments that require a much more elaborate context. And test cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run Black on the filled-in templates to undo any formatting mischief from the book (or from the template.)&lt;/li&gt;
&lt;li&gt;Run pytest on the whole show and make sure &lt;strong&gt;everything&lt;/strong&gt; works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The book's examples are a lot of code.
It works out better with a combination of &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; to go chapter-by-chapter
to be sure everything works.&lt;/p&gt;
&lt;p&gt;This is only to be sure the examples withstand scrutiny. I still have to write the text.
And rewrite the text when the reviewers find problems.
Which means rewriting the examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code"&gt;
&lt;h3&gt;Code&lt;/h3&gt;
&lt;p&gt;Here's a LaTeX parser. I can't make any guarantees, because your LaTeX may involve
constructs that I've never seen before.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class BlockKind(Enum):
    BLANK = 0         # An empty line.
    COMMENT = 1       # A &amp;quot;%...&amp;quot; line. Comments at the end of a line are treated as part of the text.
    ENV = 2           # \\begin{name}[opts] ... \\end{name}. Nesting is **not** examined.
    MATH = 3          # $$ ... $$
    TEXTWITHMATH = 4  # A block with &amp;quot;$&amp;quot; in it
    TEXT = 5          # A block, frequently containing \\command[opts]{stuff}
&lt;/pre&gt;
&lt;p&gt;I don't think this is all of the block types. But it is representative of all the block types I actually used.&lt;/p&gt;
&lt;p&gt;Here's the definition of a block.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;dataclass
class Block:
    kind: BlockKind
    lines: list[str]

    &amp;#64;property
    def text(self) -&amp;gt; str:
        return '\n'.join(self.lines)
&lt;/pre&gt;
&lt;p&gt;The first goal being that we can iterate through the blocks, and perform special-case
processing based on the enumerated &lt;tt class="docutils literal"&gt;BlockKind&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The second goal is to be lossless. This means that some block text contains trailing or
leading stuff. Specifically, LaTeX in-line comments.&lt;/p&gt;
&lt;p&gt;Next up, the various regex patterns that recognize most instances of the above
blocks.&lt;/p&gt;
&lt;div class="admonition important"&gt;
&lt;p class="first admonition-title"&gt;Important&lt;/p&gt;
&lt;p class="last"&gt;This is not a general solution.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;LaTeX has lots and lots of ways to extend the language. Lots.&lt;/p&gt;
&lt;p&gt;One opinion I've seen is that the whole thing is better understood
as a Turing machine that's executed and produces an output stream.&lt;/p&gt;
&lt;p&gt;And it has constructs that extend the Turing machine with new syntax.
Dynamically.  On-the-fly.&lt;/p&gt;
&lt;p&gt;But I don't use any of those. Or if I do use them, the implementation details
are opaque to me and I don't need to care.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
COMMENT_PAT = re.compile(r&amp;quot;^\s*%&amp;quot;)
MATH_ENV_PAT = re.compile(r&amp;quot;^\s*\$\$\s*$&amp;quot;)
ENV_BEGIN_PAT = re.compile(r&amp;quot;^\s*\\begin\{(\w+)\}(\[.*\])?&amp;quot;)
ENV_END_PAT = re.compile(r&amp;quot;^\s*\\end\{(\w+)\}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;A few more patterns that are used later to distinguish different kinds of block content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CONSOLE_PAT = re.compile(r&amp;quot;^\\textbf\{(.*)\}&amp;quot;)
GREATER_PAT = re.compile(r&amp;quot;\\textgreater\{\}|\\textgreater&amp;quot;)
CURLY_PAT = re.compile(r&amp;quot;\{(.)\}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Here's the parser that breaks LaTeX into &lt;tt class="docutils literal"&gt;Block&lt;/tt&gt; instances:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BlockKind.BLANK  Blank lines between paragraphs.&lt;/li&gt;
&lt;li&gt;BlockKind.COMMENT: Line starting with &amp;quot;%&amp;quot;. Note that comments at the end of a line are treated as part of the text.
This is semantically wrong but syntactically lossless; it preserves the comment in an odd context.&lt;/li&gt;
&lt;li&gt;BlockKind.ENV: \begin{env}[options] -- \end{env}
This is not &lt;strong&gt;all&lt;/strong&gt; environments. It's only a short list of code sample environments.
These are {&amp;quot;quote&amp;quot;, &amp;quot;lstlisting&amp;quot;, &amp;quot;minted&amp;quot;, &amp;quot;codeblock&amp;quot;, &amp;quot;consoleblock&amp;quot;}.
The potential complication is an admonition environment (&lt;tt class="docutils literal"&gt;\\begin{tipbox}&lt;/tt&gt;) MAY contain
embedded code sample environments, but would not be found because we don't parse the full LaTeX tree.&lt;/li&gt;
&lt;li&gt;BlockKind.MATH: $$ to $$ block&lt;/li&gt;
&lt;li&gt;BlockKind.TEXTWITHMATH: Block of text with &amp;quot;$&amp;quot; in it somewhere.&lt;/li&gt;
&lt;li&gt;BlockKind.TEXT: blocks of text, possibly including commands of the form &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\\command[options]{stuff}&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://pylatexenc.readthedocs.io/en/latest/latexwalker/"&gt;https://pylatexenc.readthedocs.io/en/latest/latexwalker/&lt;/a&gt; for a possibly better approach.&lt;/p&gt;
&lt;p&gt;This flat expansion works here because we &lt;strong&gt;ONLY&lt;/strong&gt; want to distinguish code environments from non-code environments.
We don't really need the full parse tree.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def block_iter(text: str) -&amp;gt; Iterator[Block]:
    &amp;quot;&amp;quot;&amp;quot;
    Dirty hack lossless LaTeX parser. Treats LaTeX as if it were a flat tree of environments (and commands.)
    Ignores nested environments. Will not dig into lists, for example.
    Doesn't find all comments.
    Will be confused by verbatim in general, but not in most examples that aren't books about LaTeX
    &amp;quot;&amp;quot;&amp;quot;

    target_environs =  {&amp;quot;quote&amp;quot;, &amp;quot;lstlisting&amp;quot;, &amp;quot;minted&amp;quot;, &amp;quot;codeblock&amp;quot;, &amp;quot;consoleblock&amp;quot;}
    text_lines = []
    line_iter = iter(text.splitlines())
    for line in line_iter:
        if len(line) == 0:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.BLANK, [&amp;quot;&amp;quot;])
        elif (comment := COMMENT_PAT.match(line)) and comment:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.COMMENT, [line])
        elif (start := ENV_BEGIN_PAT.match(line)) and start and start.group(1) in target_environs:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            body_lines = [line]
            for body in line_iter:
                body_lines.append(body)
                if (end := ENV_END_PAT.match(body)) and end and end.group(1) == start.group(1):
                    break
            yield Block(BlockKind.ENV, body_lines)
        elif (math := MATH_ENV_PAT.match(line)) and math:
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            body_lines = [line]
            for body in line_iter:
                body_lines.append(body)
                if body.strip() == &amp;quot;$$&amp;quot;:
                    break
            yield Block(BlockKind.MATH, body_lines)
        elif &amp;quot;$&amp;quot; in line:  # TODO: must be unescaped and outside \verb
            if text_lines:
                # End previous block
                yield Block(BlockKind.TEXT, text_lines)
                text_lines = []
            yield Block(BlockKind.TEXTWITHMATH, [line])
        else:
            # Accumulate a block
            text_lines.append(line)
    if text_lines:
        # End any final block
        yield Block(BlockKind.TEXT, text_lines)
&lt;/pre&gt;
&lt;p&gt;Once we have the sequence of blocks, we can tweak the various code sample blocks.&lt;/p&gt;
&lt;p&gt;Because the parsing is lossless, we can reconstruct a modified LaTeX document,
as long we nothing too weird is going on inside &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;\\verbatim|...|&lt;/span&gt;&lt;/tt&gt; blocks.&lt;/p&gt;
&lt;p&gt;This worked well-enough to -- reliably -- pull all the code samples out of the text.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automation-iii"&gt;
&lt;h2&gt;Automation III&lt;/h2&gt;
&lt;p&gt;New book in the works.&lt;/p&gt;
&lt;p&gt;Two key alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Write all the examples and use minted to pull lines of code from the example files.&lt;/li&gt;
&lt;li&gt;Recapitulate the previous book's unique approach to example labels, and injection into specific contexts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This book has a distinct focus, however. There isn't as much code.
it doesn't seem to be essential for the code to be copy-and-paste complete.&lt;/p&gt;
&lt;p&gt;Further, it doesn't seem helpful to provide doctest-like examples.
The book is for a more advanced audience.&lt;/p&gt;
&lt;p&gt;What I'm could try to do is locate all of the code examples in a corpus of code files.
Then I can gingerly switch out actual code for a reference to lines in a code file.&lt;/p&gt;
&lt;p&gt;That seems easier to live with.&lt;/p&gt;
&lt;p&gt;If I need to change the code, I fix the corpus of code files, and rerun the test suite.
If the example's line numbers changed, fiddle with the LaTeX a little to get the right lines into the book.&lt;/p&gt;
&lt;p&gt;The downside of doing this is the corpus of code files become a first-class part of the book's
source. It lives side-by-side with images and LaTeX files.&lt;/p&gt;
&lt;p&gt;Some more thinking required before I finally make a commitment.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="writing"></category><category term="workflow"></category></entry><entry><title>EDI Message Parsing</title><link href="https://slott56.github.io/2023_03_17-edi_message_parsing.html" rel="alternate"></link><published>2023-03-17T08:00:00-04:00</published><updated>2023-03-17T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-03-17:/2023_03_17-edi_message_parsing.html</id><summary type="html">&lt;p&gt;Reaching back to 2008. Yes. Decade(s) ago. Python 2.5.&lt;/p&gt;
&lt;p&gt;I was reminded of this when a former colleague
pinged me about this: &lt;a class="reference external" href="https://github.com/slott56/TigerShark"&gt;https://github.com/slott56/TigerShark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's an X12/EDI message parsing library from -- well -- decades ago.&lt;/p&gt;
&lt;div class="section" id="what-is-all-this-about"&gt;
&lt;h2&gt;What is all this about?&lt;/h2&gt;
&lt;p&gt;Short answer: Parsing X12 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Reaching back to 2008. Yes. Decade(s) ago. Python 2.5.&lt;/p&gt;
&lt;p&gt;I was reminded of this when a former colleague
pinged me about this: &lt;a class="reference external" href="https://github.com/slott56/TigerShark"&gt;https://github.com/slott56/TigerShark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's an X12/EDI message parsing library from -- well -- decades ago.&lt;/p&gt;
&lt;div class="section" id="what-is-all-this-about"&gt;
&lt;h2&gt;What is all this about?&lt;/h2&gt;
&lt;p&gt;Short answer: Parsing X12 EDI messages, which have an obscure-as-hell structure.&lt;/p&gt;
&lt;p&gt;Long Answer: EDI (Electronic Data Interchange) is a way
for business enterprises and government agencies to exchange
data in well-defined formats. See &lt;a class="reference external" href="https://www.edibasics.com/what-is-edi/"&gt;https://www.edibasics.com/what-is-edi/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It sounds so simple and generic. It's so old, it predates
HTML, XML, JSON, etc. Therefore, the formats are -- well -- weird.&lt;/p&gt;
&lt;p&gt;There's a &amp;quot;standard&amp;quot;, X12, that defines these messages.
See &lt;a class="reference external" href="https://x12.org"&gt;https://x12.org&lt;/a&gt;. See &lt;a class="reference external" href="https://www.stedi.com/edi/x12"&gt;https://www.stedi.com/edi/x12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But. The exchange of message used to be done through proprietary networks
and software. Therefore the compliance with the standard
is sometimes incomplete. (Remember, this is &lt;strong&gt;old&lt;/strong&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-in-the-day"&gt;
&lt;h2&gt;Back In The Day&lt;/h2&gt;
&lt;p&gt;Some history&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_12-python_as_config_language_forget_xml_and_ini_files.html"&gt;Python as Config Language -- Forget XML and INI files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_19-two_python_config_file_design_patterns.html"&gt;Two Python Config-File Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_01_26-configuration_file_scalability_who_knew_revised.html"&gt;Configuration File Scalability -- Who Knew? (Revised)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_03_08-technical_debt_the_cost_of_cheap_and_get_this_done_acap.html"&gt;Technical Debt, the Cost of Cheap and &amp;quot;Get This Done ACAP&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_03_31-synchronicity_and_document_object_models.html"&gt;Synchronicity and Document Object Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://slott56.github.io/2008_04_01-popo_and_gops_plain_old_python_objects_and_good_old_python_syntax.html"&gt;POPO and GOPS - Plain Old Python Objects and Good Old Python Syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wrote an X12 parser in Python.&lt;/p&gt;
&lt;p&gt;It transforms X12 text into Plain Old Python Objects (POPO.)&lt;/p&gt;
&lt;p&gt;Back in the day (2008) this was targeted for Python 2.5.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-time"&gt;
&lt;h2&gt;It's Time&lt;/h2&gt;
&lt;p&gt;Nowadays, this is does &lt;strong&gt;not&lt;/strong&gt; need to be quite so complicated.&lt;/p&gt;
&lt;p&gt;Modern Python has a few changes since release 2.5.
Two are central to this project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;type annotations&lt;/li&gt;
&lt;li&gt;classes maintain the order of the definitions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the backbone of &lt;a class="reference external" href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclasses&lt;/a&gt; (and &lt;a class="reference external" href="https://docs.pydantic.dev"&gt;pydantic&lt;/a&gt; and &lt;a class="reference external" href="https://www.attrs.org/en/stable/"&gt;attrs&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;I believe there are two parts to the rewrite.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Create dataclass-like class definition for segments and loops. These generally come from the non-Python configuration files used elsewhere. The Python is built from this. Once.&lt;/li&gt;
&lt;li&gt;Create a generic parser protocol that can extract the segments, loops, and atomic fields from the X12 messages. This becomes a superclass feature of all X12 components.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This should be much simpler than the old version. Which was &lt;strong&gt;very&lt;/strong&gt; complicated.
The old release had two levels of interpretation of the X12 content:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generic segments and loops&lt;/li&gt;
&lt;li&gt;A Pythonic &lt;strong&gt;Façade&lt;/strong&gt; over the generic structure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think this was (and continues to be) a bad idea.&lt;/p&gt;
&lt;p&gt;(Progress will be flaky. I have a book to write, also.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-things-first"&gt;
&lt;h2&gt;First Things First&lt;/h2&gt;
&lt;p&gt;Some updates to reflect Python 3.11 and better GitHub practices.
I'll make the documentation more visible as a first step.
I may rewrite the diagrams to PlantUML, also.&lt;/p&gt;
&lt;p&gt;Just a few small cleanups before throwing the entire
thing away and beginning again.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="architecture"></category><category term="software design"></category><category term="data structure"></category><category term="algorithm"></category><category term="edi"></category><category term="x12"></category></entry><entry><title>Programming Languages -- In Time Order</title><link href="https://slott56.github.io/2023_02_21-programming_languages.html" rel="alternate"></link><published>2023-02-21T08:00:00-05:00</published><updated>2023-02-21T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-21:/2023_02_21-programming_languages.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html"&gt;Programming Languages I've Learned (more-or-less in order) [Update]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This came up on Twitter and Fosstodon.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943"&gt;https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943&lt;/a&gt;
and &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56/109908527412493172"&gt;https://fosstodon.org/&amp;#64;slott56/109908527412493172&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I omitted a few things from the list because -- well -- there are a LOT of languages.&lt;/p&gt;
&lt;p&gt;For example, in the 90's I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2008_09_28-programming_languages_ive_learned_more_or_less_in_order_update.html"&gt;Programming Languages I've Learned (more-or-less in order) [Update]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This came up on Twitter and Fosstodon.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943"&gt;https://fosstodon.org/&amp;#64;vpavlyshyn/109908255464181943&lt;/a&gt;
and &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56/109908527412493172"&gt;https://fosstodon.org/&amp;#64;slott56/109908527412493172&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I omitted a few things from the list because -- well -- there are a LOT of languages.&lt;/p&gt;
&lt;p&gt;For example, in the 90's I got really good at using Awk.
Just before I learned Perl, which (at the time) was almost -- but not quite -- better.&lt;/p&gt;
&lt;p&gt;Recently, I've grown to like Gherkin at lot.
See &lt;a class="reference external" href="https://cucumber.io/docs/gherkin/reference/"&gt;https://cucumber.io/docs/gherkin/reference/&lt;/a&gt;.
The language is sometimes called cucumber, but that's incorrect.
Cucumber is one (of many) tools that process Gherkin.&lt;/p&gt;
&lt;p&gt;I also need to add Markdown, ReStructuredText, and LaTeX to the long
list of markup languages I know.&lt;/p&gt;
&lt;p&gt;I should probably extract JSON, YAML, and TOML into a separate category.
They don't properly qualify as markup languages.&lt;/p&gt;
&lt;p&gt;What's central here is the idea of choosing a single language.&lt;/p&gt;
&lt;p&gt;The question shows up: &amp;quot;What's the most important programming language that will land me a job?&amp;quot;
Or &amp;quot;... land me a better job?&amp;quot;&lt;/p&gt;
&lt;p&gt;I remember -- back in the 70's -- being told that programming languages come and go.
That's why the undergrad CS degree program only requires a few 1-credit courses in a language.
They were considered far, far less important that data structures and algorithms, which really
are timeless and eternal features of computing.&lt;/p&gt;
&lt;p&gt;It's still true.&lt;/p&gt;
&lt;p&gt;Some hiring managers look for folks with specific technical skills,
as if that matters.&lt;/p&gt;
&lt;p&gt;Smarter hiring managers look for folks who learn skills quickly,
are quick to adapt, and share their knowledge widely.&lt;/p&gt;
</content><category term="Technologies"></category><category term="books"></category><category term="building skills"></category><category term="learning"></category><category term="programming languages"></category></entry><entry><title>New Monitor</title><link href="https://slott56.github.io/2023_02_18-new_monitor.html" rel="alternate"></link><published>2023-02-18T08:00:00-05:00</published><updated>2023-02-18T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-18:/2023_02_18-new_monitor.html</id><summary type="html">&lt;p&gt;The (almost) 10-year old 27&amp;quot; Thunderbolt display finally died.&lt;/p&gt;
&lt;p&gt;Well, it didn't really &lt;strong&gt;die&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Thunderbolt connector had gotten impossibly flaky.
If I looked at it wrong, the monitor glitched or disonnected.&lt;/p&gt;
&lt;p&gt;It was dead enough that I wasn't going to deal with it.&lt;/p&gt;
&lt;p&gt;It involved this morass of adapters …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The (almost) 10-year old 27&amp;quot; Thunderbolt display finally died.&lt;/p&gt;
&lt;p&gt;Well, it didn't really &lt;strong&gt;die&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Thunderbolt connector had gotten impossibly flaky.
If I looked at it wrong, the monitor glitched or disonnected.&lt;/p&gt;
&lt;p&gt;It was dead enough that I wasn't going to deal with it.&lt;/p&gt;
&lt;p&gt;It involved this morass of adapters:&lt;/p&gt;
&lt;img alt="Two Connectors" src="https://slott56.github.io/media/IMG_0765.png" /&gt;
&lt;p&gt;(Try to ignore the dust. That's been fixed, too.)&lt;/p&gt;
&lt;p&gt;The top one is a USB-C to Thunderbolt adapter.
You can't quite make out the wrap of tape where the wiring
insulation started falling apart.&lt;/p&gt;
&lt;p&gt;The bottom one (with the blue tape) adapts the monitor's ancient MagSafe charging to
a modern USB-C port.&lt;/p&gt;
&lt;p&gt;These two merge into a single, heavy cable.&lt;/p&gt;
&lt;p&gt;I bought a repair kit with a whole new wiring harness.&lt;/p&gt;
&lt;p&gt;It's not &lt;strong&gt;impossible&lt;/strong&gt; to do. Indeed, it looks like it might be fun.&lt;/p&gt;
&lt;blockquote&gt;
I took an old iMac (same physical case) apart to retrieve the internal hard drive.
It wasn't impossible to get at the various pieces.&lt;/blockquote&gt;
&lt;p&gt;The problem is that I'd still be looking at a stack of adapters.
And the resulting reliability issue of bumping the MagSafe connection.&lt;/p&gt;
&lt;div class="section" id="a-better-choice"&gt;
&lt;h2&gt;A Better Choice&lt;/h2&gt;
&lt;p&gt;Instead of limping along, I replaced it with the 24&amp;quot; LG TV. (Check Apple's on-line store for &lt;a class="reference external" href="https://www.apple.com/shop/product/HMUA2VC/A/lg-ultrafine-4k-display"&gt;specifics&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Brighter. Better sound. Adjustable height.&lt;/p&gt;
&lt;p&gt;One connector from TV to Mac (instead of two.) No Adapters.&lt;/p&gt;
&lt;p&gt;There are three USB-C ports on the back of the moitor. Places to plug chargers for keyboards or trackpads or whatever.&lt;/p&gt;
&lt;p&gt;This means I can leave a backup drive hanging off the back of the monitor. Backs up whenever I'm using this desk.&lt;/p&gt;
&lt;p&gt;No camera, though. Experimenting with iPhone as Zoom camera. May need
a bracket to position the camera up at face level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-disposition"&gt;
&lt;h2&gt;Final Disposition&lt;/h2&gt;
&lt;p&gt;The next step is to put some notices out on local services
web sites (i.e. &lt;a class="reference external" href="https://www.craigslist.org"&gt;https://www.craigslist.org&lt;/a&gt;) to see
who might want this &amp;quot;works, but...&amp;quot; monitor.&lt;/p&gt;
&lt;p&gt;I'm not happy taking to the landfill, because it works.
It will include with the unused repair kit and the adapters.
It just needs a hair more attention to detail than I can
manage.&lt;/p&gt;
&lt;p&gt;Much happier meeting someone by the library to hand it off.&lt;/p&gt;
&lt;p&gt;Back to writing. Making good progress on the new book.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="hardware"></category><category term="macosx"></category><category term="macintosh"></category><category term="work-life"></category><category term="writing"></category></entry><entry><title>Jupyter Notebook for Tide Table Analysis</title><link href="https://slott56.github.io/2023_02_14-tide_table_analysis.html" rel="alternate"></link><published>2023-02-14T08:00:00-05:00</published><updated>2023-02-14T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-14:/2023_02_14-tide_table_analysis.html</id><summary type="html">&lt;p&gt;I'm undecided if this goes into the next book.
Maybe this is a teaser...
And yes, this is a &lt;strong&gt;Python to the Rescue&lt;/strong&gt; story.&lt;/p&gt;
&lt;p&gt;I live on a boat. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;Red Ranger Blog&lt;/a&gt; for details.
What's essential is this little complication.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.charlottecountyfl.gov/departments/public-works/maintenance-operations/south-gulf-cove-boat-lock.stml"&gt;South Gulf Cove Boat Lock&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The lock keeps …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm undecided if this goes into the next book.
Maybe this is a teaser...
And yes, this is a &lt;strong&gt;Python to the Rescue&lt;/strong&gt; story.&lt;/p&gt;
&lt;p&gt;I live on a boat. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;Red Ranger Blog&lt;/a&gt; for details.
What's essential is this little complication.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://www.charlottecountyfl.gov/departments/public-works/maintenance-operations/south-gulf-cove-boat-lock.stml"&gt;South Gulf Cove Boat Lock&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The lock keeps saltwater from Charlotte Harbor out of the canal system
in South Gulf Cove.
The creek beyond the lock is subject to silting.
We'd like to be &lt;strong&gt;sure&lt;/strong&gt; we don't run aground.&lt;/p&gt;
&lt;div class="section" id="filter-rules"&gt;
&lt;h2&gt;Filter Rules&lt;/h2&gt;
&lt;p&gt;There are two critical criteria for passing through the lock:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;High tide.&lt;/li&gt;
&lt;li&gt;In the afternoon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The lock and the associated creeks and canals tend to silt
up over time. Water moves slowly through the water system.
High tide helps get us over the sandbars.&lt;/p&gt;
&lt;p&gt;It's a bit over a three-hour trip from &lt;a class="reference external" href="https://www.safecoveinc.com"&gt;Safe Cove Boat Storage and Marina&lt;/a&gt;
to the lock.
If we start at 06:00, we're not getting out before 10:00.
And.
Who wants to get up at 05:00 to prep for departure at first light?&lt;/p&gt;
&lt;p&gt;(Okay. I've done that. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/Schooner_Creek__Not_our_best_idea.html"&gt;Schooner Creek — Not our best idea&lt;/a&gt;.
It's not ideal, but we can make it work.)&lt;/p&gt;
&lt;p&gt;How do we know when high tide is? NOAA provides that information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-data"&gt;
&lt;h2&gt;Raw Data&lt;/h2&gt;
&lt;p&gt;The tides have a well-understood model.
This is a triumph of big-data analysis.&lt;/p&gt;
&lt;p&gt;It leads to files like this:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tidesandcurrents.noaa.gov/noaatideannual.html?id=8725769"&gt;https://tidesandcurrents.noaa.gov/noaatideannual.html?id=8725769&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Okay. That's a right mess of data.&lt;/p&gt;
&lt;p&gt;There's a big multi-line header.
It's followed by columns of details.
The details have slightly irregular tab characters, making parsing annoying.&lt;/p&gt;
&lt;p&gt;Choices.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Load it into Numbers and fool with it more-or-less manually looking the afternoon high-tides we can make use of.&lt;/li&gt;
&lt;li&gt;Load it into a Jupyter Lab Notebook.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's a one-time thing, right?&lt;/p&gt;
&lt;p&gt;Not exactly.&lt;/p&gt;
&lt;p&gt;Every year, we're going to redo this little computation.&lt;/p&gt;
&lt;blockquote&gt;
I hear you. Once a year isn't very often.
The principle is this: the manual steps are hard to record
and reproduce.
It's much, much more reliable to build a notebook for
repeatable results.&lt;/blockquote&gt;
&lt;p&gt;I'll repeat that&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Build a Notebook For Repeatable Results.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Here's the essential features of that notebook.
It's a three-step process&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Acquire&lt;/li&gt;
&lt;li&gt;Clean&lt;/li&gt;
&lt;li&gt;Analyze&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll begin at the beginning: acquiring the raw data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-acquire"&gt;
&lt;h2&gt;Step 1. Acquire&lt;/h2&gt;
&lt;p&gt;Okay. The data was already downloaded. Done. Check.
We need to extract a meaningful structure from it.&lt;/p&gt;
&lt;p&gt;First, strip that god-awful header.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def header(source: TextIO) -&amp;gt; dict[str, str]:
    content = {}
    for row in source:
        if (clean := row.rstrip()) == '':
            break
        label, _, value = clean.partition(&amp;quot;:&amp;quot;)
        content[label] = value
    return content
&lt;/pre&gt;
&lt;p&gt;This function extracts the header lines
to make a little dictionary with the metadata.
The value of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;metadata['StationName']&lt;/span&gt;&lt;/tt&gt; is particularly
useful.&lt;/p&gt;
&lt;p&gt;This changes the state of the &lt;tt class="docutils literal"&gt;source&lt;/tt&gt; object.
It advances it to the first line after the header.
This line has the column titles.&lt;/p&gt;
&lt;p&gt;(For some, this state change is a kind of functional programming no-no.
A proper functional approach might involve defining some kind
of monad that can be used to represent the file split,
preserving the order.)&lt;/p&gt;
&lt;p&gt;The column titles are in wrong positions with regard
to the data. This offset makes them essentially useless except
as a visual cue.&lt;/p&gt;
&lt;p&gt;Here's what we observe.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
tide_csv[0:2]

[['Date ', '', 'Day', 'Time', '', 'Pred(Ft)', 'Pred(cm)', 'High/Low'],
 ['2023/01/01', 'Sun', '06:35 AM', '-0.13', '', '-4', '', '', 'L']]
&lt;/pre&gt;
&lt;p&gt;We want columns 0, 1, 2, 3, 5, and 8.&lt;/p&gt;
&lt;p&gt;Here's the first pass at a kind of named-tuple or dataclass
to structure the source text.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from dataclasses import dataclass, field

&amp;#64;dataclass
class Tide:
    date: str
    day: str
    time: str
    pred_ft: str
    pred_cm: str
    high_low: str

    &amp;#64;classmethod
    def from_csvrow(cls, row):
        return cls(
            date=row[0],
            day=row[1],
            time=row[2],
            pred_ft=row[3],
            pred_cm=row[5],
            high_low=row[8]
        )
&lt;/pre&gt;
&lt;p&gt;I'm a fan of including builders within the class
definition. With a tiny prevarication.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;from_csvrow()&lt;/tt&gt; function is dependent
on something &lt;strong&gt;outside&lt;/strong&gt; this class.
Therefore we can argue this breaks the &lt;strong&gt;SOLID&lt;/strong&gt; design
principles -- this class has than one reason to change:
an internal representation change and an external parsing change.&lt;/p&gt;
&lt;p&gt;(The Open-Closed principle still applies. Subclasses have have different parsers.)&lt;/p&gt;
&lt;p&gt;If there are multiple sources, or the source is some hack
built as a temporary stop-gap as part of Enterprise software development,]
then separate parsers are helpful.&lt;/p&gt;
&lt;p&gt;(Enterprise in-house programmers are sometimes told to build junk.)&lt;/p&gt;
&lt;p&gt;This is from a government agency. Change will arise at a stately pace.
Including a parser/builder method in the class is fair because I &lt;em&gt;never&lt;/em&gt; expect to see this source format change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-clean-and-transform"&gt;
&lt;h2&gt;Step 2. Clean and Transform&lt;/h2&gt;
&lt;p&gt;There's only a little bit of this data we need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The predicted height in feet &amp;quot;Pred(Ft)&amp;quot;.&lt;/li&gt;
&lt;li&gt;The timestamp built from &amp;quot;Date&amp;quot; and &amp;quot;Time&amp;quot;.&lt;/li&gt;
&lt;li&gt;The High/Low flag telling us the tide's state. We like to make trick transits &lt;strong&gt;before&lt;/strong&gt; high-tide so the rising tide can help float us free of trouble.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The day, for example, is redundant and computed from the date.
The predicted height in cm is a multiplication.&lt;/p&gt;
&lt;p&gt;We have two general approaches for this.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For complex, fluid situations with multiple sources and formats, it helps to separate clean data from raw data. This means creating a secondary class, built from the raw (&amp;quot;all strings&amp;quot;) source class. This class can have a more useful structure.&lt;/li&gt;
&lt;li&gt;For this kind of stable data, we can enrich the dataclass with &lt;tt class="docutils literal"&gt;init=False&lt;/tt&gt; fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It looks like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from dataclasses import dataclass, field
from enum import Enum
import datetime

class HighLow(str, Enum):
    High = &amp;quot;H&amp;quot;
    Low = &amp;quot;L&amp;quot;

&amp;#64;dataclass
class Tide:
    date: str
    day: str
    time: str
    pred_ft: str
    pred_cm: str
    high_low: str
    timestamp: datetime.datetime = field(init=False)
    height: float = field(init=False)
    state: HighLow = field(init=False)

    &amp;#64;classmethod
    def from_csvrow(cls, row):
        return cls(
            date=row[0],
            day=row[1],
            time=row[2],
            pred_ft=row[3],
            pred_cm=row[5],
            high_low=row[8]
        )

    def __post_init__(self):
        date = datetime.datetime.strptime(self.date, '%Y/%m/%d').date()
        time = datetime.datetime.strptime(self.time, '%I:%M %p').time()
        self.timestamp = datetime.datetime.combine(date, time)
        self.height = float(self.pred_ft)
        self.state = HighLow(self.high_low)
&lt;/pre&gt;
&lt;p&gt;The three &lt;tt class="docutils literal"&gt;field(init=False)&lt;/tt&gt; attributes are &lt;strong&gt;not&lt;/strong&gt; provided from the source.
These are derived.
The &lt;tt class="docutils literal"&gt;__post_init__()&lt;/tt&gt; method computes the useful derived values.&lt;/p&gt;
&lt;p&gt;These values can also be &lt;tt class="docutils literal"&gt;&amp;#64;property&lt;/tt&gt; methods.
Indeed, they started out as properties.
There are only about 1200 rows of data, so the performance advantage of one-time computation is miniscule.&lt;/p&gt;
&lt;p&gt;For completeness, here's the overall parser for this data.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def tides(source_csv):
    for line in source_csv:
        if len(line) != 9:
            continue
        yield Tide.from_csvrow(line)
&lt;/pre&gt;
&lt;p&gt;Given the list of CSV rows (or a generator for the CSV rows)
this will iterate over the rows, building &lt;tt class="docutils literal"&gt;Tide&lt;/tt&gt; instances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-when-do-we-go"&gt;
&lt;h2&gt;Step 3. When Do We Go?&lt;/h2&gt;
&lt;p&gt;Now, we can start analysis.
The fundamental question is this &amp;quot;When to we leave?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer is &amp;quot;When the lock is passable.&amp;quot;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def passable(t):
    return all([
        t.state == HighLow.High,     # High tide
        11 &amp;lt;= t.timestamp.hour &amp;lt; 18  # Late morning and afternoon
    ])
&lt;/pre&gt;
&lt;p&gt;We need to to know the high-tide time so we can back off three hours.
We need to arrive at the lock in daylight, and we don't want to get up at 05:00 (pre-dawn).&lt;/p&gt;
&lt;p&gt;The final cell in this notebook?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for t in tides(tide_csv):
    if passable(t) and t.timestamp.month in {3, 4, 5}:
        print(f&amp;quot;{t.timestamp} {t.height:6.2f} {t.state.name}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This tells us what we need to know about making the lock
in daylight with a good probability of enough water out in the harbor.&lt;/p&gt;
&lt;p&gt;We still have to fix Hurricane Ian damage.
We're not 100% the engine will start.
The solar panels are a wreck.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;We don't know where we might go.
A lot the South Florida Gulf Coast is still a right-awful mess.&lt;/p&gt;
&lt;p&gt;Maybe all we'll be able to do is
drop the anchor at &lt;a class="reference external" href="https://activecaptain.garmin.com/en-US/pois/46419"&gt;Punta Gorda&lt;/a&gt; for a month.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Architecture &amp; Design"></category><category term="#python"></category><category term="jupyter lab"></category><category term="functional programming"></category><category term="navigation"></category><category term="books"></category><category term="python"></category></entry><entry><title>Python Confusion</title><link href="https://slott56.github.io/2023_02_07-python_confusion.html" rel="alternate"></link><published>2023-02-07T08:00:00-05:00</published><updated>2023-02-07T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-07:/2023_02_07-python_confusion.html</id><summary type="html">&lt;p&gt;For social contact, I'm generally following people on &lt;a class="reference external" href="https://fosstodon.org/home"&gt;https://fosstodon.org/home&lt;/a&gt;.
I'm &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56"&gt;https://fosstodon.org/&amp;#64;slott56&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or &lt;cite&gt;&amp;#64;slott56&amp;#64;fosstodon.org &amp;lt;https://fosstodon.org/&amp;#64;slott56&amp;gt;&lt;/cite&gt; as they say in the Fediverse.&lt;/p&gt;
&lt;p&gt;But I saw some stuff on Twitter that was disheartening.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought Python🐍wasn't strongly typed.🤔
But this code …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;For social contact, I'm generally following people on &lt;a class="reference external" href="https://fosstodon.org/home"&gt;https://fosstodon.org/home&lt;/a&gt;.
I'm &lt;a class="reference external" href="https://fosstodon.org/&amp;#64;slott56"&gt;https://fosstodon.org/&amp;#64;slott56&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or &lt;cite&gt;&amp;#64;slott56&amp;#64;fosstodon.org &amp;lt;https://fosstodon.org/&amp;#64;slott56&amp;gt;&lt;/cite&gt; as they say in the Fediverse.&lt;/p&gt;
&lt;p&gt;But I saw some stuff on Twitter that was disheartening.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought Python🐍wasn't strongly typed.🤔
But this code seems to be casting input into an int?&lt;/p&gt;
&lt;p&gt;✅guess = int(input(&amp;quot;Pick a number: &amp;quot;))&lt;/p&gt;
&lt;p&gt;The ugliness of all the round brackets aside, why
does this need to be cast into an int?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh dear.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python &lt;em&gt;is&lt;/em&gt; strongly typed.  Variables don't have a type associated with them, so we say that variable types are dynamic. Object types are essentially immutable.&lt;/li&gt;
&lt;li&gt;It's not a &amp;quot;cast&amp;quot;. It's a conversion. You can't cast objects to another type in Python. Types are essentially immutable.&lt;/li&gt;
&lt;li&gt;The &amp;quot;cast to an int&amp;quot; is really &amp;quot;converted to an int&amp;quot; and that's required because the string value from the &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; is likely useless later.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Without more code, it's hard to know why the conversion is required.
I'm willing to guess there's comparisons against integers elsewhere,
and therefore, this conversion from string to int will make those
later comparisons work.&lt;/p&gt;
&lt;p&gt;Some of the responses to the tweet were a bit off. I have
the urge to enumerate the problems, but that's likely to be unhelpful.&lt;/p&gt;
&lt;p&gt;(I say types are &lt;em&gt;essentially&lt;/em&gt; immutable because I have a vague
feeling that it's possible to around some of the dunder attributes
for some kinds of classes and change the association between
object and creating class. I have not investigated this
because the horror of casting in C, C++, Java, etc., is so emotionally
scarring that I can't even.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="learning"></category></entry><entry><title>Book Offers</title><link href="https://slott56.github.io/2023_02_03-book_offers.html" rel="alternate"></link><published>2023-02-03T08:48:00-05:00</published><updated>2023-02-03T08:48:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-02-03:/2023_02_03-book_offers.html</id><summary type="html">&lt;div class="section" id="packt-publishing"&gt;
&lt;h2&gt;Packt Publishing&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much newness here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="packt-publishing"&gt;
&lt;h2&gt;Packt Publishing&lt;/h2&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Much newness here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h3&gt;Unlearning SQL&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h2&gt;Google Play&lt;/h2&gt;
&lt;p&gt;Also available on Google Play. Here's &lt;strong&gt;Unlearning SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Behave Tests and Fixtures</title><link href="https://slott56.github.io/2023_01_27-behave_tests_and_fixtures.html" rel="alternate"></link><published>2023-01-27T08:00:00-05:00</published><updated>2023-01-27T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-27:/2023_01_27-behave_tests_and_fixtures.html</id><summary type="html">&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Behave&lt;/strong&gt; fixtures totally rock for testing
complex applications.&lt;/p&gt;
&lt;p&gt;I had been doing them wrong. Doing them right is simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;I'm a fan of the Gherkin language for specifying
the behavior of software.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Scenario: Works for Me

Given a configuration
When a request is made
Then the response can …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Behave&lt;/strong&gt; fixtures totally rock for testing
complex applications.&lt;/p&gt;
&lt;p&gt;I had been doing them wrong. Doing them right is simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;I'm a fan of the Gherkin language for specifying
the behavior of software.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Scenario: Works for Me

Given a configuration
When a request is made
Then the response can be evaluated.
&lt;/pre&gt;
&lt;p&gt;I love this.&lt;/p&gt;
&lt;p&gt;What I particularly love is the way &lt;strong&gt;Behave's&lt;/strong&gt; &lt;tt class="docutils literal"&gt;steps&lt;/tt&gt; package
provide implementations for the individual steps of the scenario.&lt;/p&gt;
&lt;p&gt;The steps can be organized around technical needs,
where the features are organized around the user's experience
when operating the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-non-fixture-approach"&gt;
&lt;h2&gt;The Non-Fixture Approach&lt;/h2&gt;
&lt;p&gt;For a long time, I used the &lt;tt class="docutils literal"&gt;Given&lt;/tt&gt; step and an &lt;tt class="docutils literal"&gt;after_scenario()&lt;/tt&gt;
function in &lt;strong&gt;Behave's&lt;/strong&gt; environment module to create and destroy fixtures.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Scenario: Test with Mock API

Given a server running on http://127.0.0.1:8000
And the server has the resource requested
When a client makes some random request or other
Then the response is a tidy bit of data the user just loves
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Given&lt;/tt&gt; step would seed the context with details used
to configure a tiny, specialized service built with
Python's &lt;tt class="docutils literal"&gt;http.server&lt;/tt&gt; module. This separate subprocess would provide
an appropriate response for this scenario.&lt;/p&gt;
&lt;p&gt;The mock server srequired creating a request handling class hierarchy
with reusable and extensible choices for the
various scenarios and features.
Often only one or two paths would be handled, since that's all
a scenario needed.&lt;/p&gt;
&lt;p&gt;The context parameters were turned into command-line options.
The mini server was started by the &lt;tt class="docutils literal"&gt;When&lt;/tt&gt; step and stopped
(eventually) after the scenario.&lt;/p&gt;
&lt;p&gt;This was workable. But. Ultimately. Dumb.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fixtures"&gt;
&lt;h2&gt;Fixtures&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Behave&lt;/strong&gt; has a much, much better way to configure
and manage fixtures. This is great for tests that
databases or RESTful API servers or other, separate processes
to collaborate with.&lt;/p&gt;
&lt;p&gt;Fixtures.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;fixture.the_mock_server
Scenario: Test with Mock API

Given a server running on http://127.0.0.1:8000
And the server has the resource requested
When a client makes some random request or other
Then the response is a tidy bit of data the user just loves
&lt;/pre&gt;
&lt;p&gt;There's one change to the scenario -- a tag with &lt;tt class="docutils literal"&gt;&amp;#64;fixture.&lt;/tt&gt; to positively identify
a fixture required for this scenario to make sense.&lt;/p&gt;
&lt;p&gt;When reviewing the Gherkin with users, the &lt;tt class="docutils literal"&gt;&amp;#64;fixture&lt;/tt&gt; tag
is easy to explain. There are often other tags throughout
the scenarios. A &lt;tt class="docutils literal"&gt;&amp;#64;slow&lt;/tt&gt; tag, for example, might be used for those
scenarios that involve throttling or timeouts. A &lt;tt class="docutils literal"&gt;&amp;#64;future&lt;/tt&gt; tag
for those options that aren't required but can be tested
to observe development progress. For one project I had a &lt;tt class="docutils literal"&gt;&amp;#64;core&lt;/tt&gt; tag
that recapitulated the examples in the documentation --- these &lt;strong&gt;had&lt;/strong&gt; to work
exactly as shown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="infrastructure"&gt;
&lt;h2&gt;Infrastructure&lt;/h2&gt;
&lt;p&gt;The fixture infrastructure has three parts.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Our specific fixture-managing generator function. This will create the fixture, yield something, and then destroy the fixture. This precisely parallels the way &lt;strong&gt;pytest&lt;/strong&gt; fixtures work.&lt;/li&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;before_tag()&lt;/tt&gt; function in the environment to look for the tags and do any setup or logging required.&lt;/li&gt;
&lt;li&gt;The fixture itself. This is our specialized test-case server based on &lt;tt class="docutils literal"&gt;http.server&lt;/tt&gt;. It still uses a configuration file or command-line options -- or both -- to define some behavior required for the scenario.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What happens, then, is this.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;before_tag()&lt;/tt&gt; function is evaluated for every tag on every step.
If a tag starts with &lt;tt class="docutils literal"&gt;&amp;quot;fixture.&amp;quot;&lt;/tt&gt; then, something special needs to be done.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;before_tag()&lt;/tt&gt; function will evaluate the &lt;tt class="docutils literal"&gt;behave.use_fixture()&lt;/tt&gt; function to inject
our specific fixture-managing generator function into the step processing.&lt;/li&gt;
&lt;li&gt;The fixture will be created (and destroyed) as part of the scenario's execution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(If you need details, see &lt;a class="reference external" href="https://behave.readthedocs.io/en/stable/fixtures.html#fixture-cleanup-points"&gt;https://behave.readthedocs.io/en/stable/fixtures.html#fixture-cleanup-points&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The mapping from &lt;tt class="docutils literal"&gt;&amp;quot;fixture.this_special_api&amp;quot;&lt;/tt&gt; to
a generator function named &lt;tt class="docutils literal"&gt;this_special_api()&lt;/tt&gt; is kind
of trivial. So trivial that the examples in the &lt;strong&gt;Behave&lt;/strong&gt;
documentation suggest you look these up in a map in
the simplest possible way.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
TAG_IMPLEMENTATIONS = {
    &amp;quot;the_mock_server&amp;quot;: server_fixture_generator,
    &amp;quot;the_other_server&amp;quot;: another_fixture_generator,
    &amp;quot;the_timeout_server&amp;quot;: the_timeout_server
}

def before_tag(context, tag):
    if tag.startswith(&amp;quot;fixture.&amp;quot;):
        _, name = tag.split('.')
        use_fixture(TAG_IMPLEMENTATIONS[name], context)
&lt;/pre&gt;
&lt;p&gt;There's a &lt;tt class="docutils literal"&gt;use_fixture_by_tag()&lt;/tt&gt; function that may be considered to be simpler
than my example.&lt;/p&gt;
&lt;p&gt;Now, we can add fixtures by writing a generator
function to create (and destroy) the fixture
and adding the new function to the &lt;tt class="docutils literal"&gt;TAG_IMPLEMENTATIONS&lt;/tt&gt; mapping.&lt;/p&gt;
&lt;p&gt;The fixture names are for users who might want to review
the scenarios. They're subject to the same kind of negotiation
the rest of the Gherkin terminology is. Sometimes, you'll
tweak the wording as the user's understanding (and needs)
evolve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanup"&gt;
&lt;h2&gt;Cleanup&lt;/h2&gt;
&lt;p&gt;When you have serious problems in your test implementation,
you'll have tiny cleanup issues.&lt;/p&gt;
&lt;p&gt;For example, if your step implementation code is broken,
the test can crash without having executed all
the steps you anticipated.&lt;/p&gt;
&lt;p&gt;This can mean a fixture isn't properly torn down.
It's a rare, but annoying thing to happen.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://behave.readthedocs.io/en/stable/fixtures.html#ensure-fixture-cleanups-with-fixture-setup-errors"&gt;https://behave.readthedocs.io/en/stable/fixtures.html#ensure-fixture-cleanups-with-fixture-setup-errors&lt;/a&gt; for
some solutions.&lt;/p&gt;
&lt;p&gt;I'm a fan of leaving information about the fixture in the context,
and using &lt;tt class="docutils literal"&gt;after_scenario()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;after_feature()&lt;/tt&gt; functions
to kill long-running process in the rare case that a step failed.&lt;/p&gt;
&lt;p&gt;The alternative, using &lt;tt class="docutils literal"&gt;add_cleanup()&lt;/tt&gt;, is -- perhaps -- nicer,
because it relies on a closure that doesn't clutter the
context with these little, technical overheads. (I find closures
a little awkward to debug, but, debugging is rarely needed
for this.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="books"&gt;
&lt;h2&gt;Books&lt;/h2&gt;
&lt;p&gt;Yes, this is for a book.
Stay tuned. Later this year.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Python"></category><category term="books"></category><category term="software design"></category><category term="test driven development"></category></entry><entry><title>Link Rot and Editing</title><link href="https://slott56.github.io/2023_01_17-link_rot_and_editing.html" rel="alternate"></link><published>2023-01-17T08:00:00-05:00</published><updated>2023-01-17T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-17:/2023_01_17-link_rot_and_editing.html</id><summary type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html"&gt;Finished Moving: Lessons Learned&lt;/a&gt;
link rot is real.&lt;/p&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I've got 23 ancient (2004 to 2006, ancient) posts
with clearly broken links. These are easy to identify
because the service vanished years ago.&lt;/p&gt;
&lt;p&gt;The tricky part is figuring out of there's any
content worth preserving. In …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html"&gt;Finished Moving: Lessons Learned&lt;/a&gt;
link rot is real.&lt;/p&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I've got 23 ancient (2004 to 2006, ancient) posts
with clearly broken links. These are easy to identify
because the service vanished years ago.&lt;/p&gt;
&lt;p&gt;The tricky part is figuring out of there's any
content worth preserving. In many cases, the blog
post was really an extended response to someone's forum
question.&lt;/p&gt;
&lt;p&gt;If I can recall the back-story, the blog post may be
of some interest. If I can't recall the context, then,
I'll need to delete it.&lt;/p&gt;
&lt;p&gt;First, however, I've got a book outline and schedule to
finish.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="markup"></category><category term="rst"></category></entry><entry><title>Finished Moving: Lessons Learned</title><link href="https://slott56.github.io/2023_01_10-finished_moving_lessons_learned.html" rel="alternate"></link><published>2023-01-10T08:00:00-05:00</published><updated>2023-01-10T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-10:/2023_01_10-finished_moving_lessons_learned.html</id><summary type="html">&lt;p&gt;Moved everything from blogger.com to &amp;quot;here&amp;quot; (&lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What did I learn?&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use WYSIWYG editors. Always use plain text markup.&lt;/li&gt;
&lt;li&gt;Think about your categories and tags.&lt;/li&gt;
&lt;li&gt;Links rot.&lt;/li&gt;
&lt;li&gt;Have a data model and tooling to process entries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;Back in the early '00's (up to …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Moved everything from blogger.com to &amp;quot;here&amp;quot; (&lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;What did I learn?&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use WYSIWYG editors. Always use plain text markup.&lt;/li&gt;
&lt;li&gt;Think about your categories and tags.&lt;/li&gt;
&lt;li&gt;Links rot.&lt;/li&gt;
&lt;li&gt;Have a data model and tooling to process entries.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;Back in the early '00's (up to 2003 or so) blogging
was &lt;strong&gt;Rocket Science&lt;/strong&gt;. Consider that &lt;a class="reference external" href="https://boingboing.net"&gt;https://boingboing.net&lt;/a&gt; started
to be an online blog in January 2000.&lt;/p&gt;
&lt;p&gt;Back then, you needed hosting. And blogging software.&lt;/p&gt;
&lt;p&gt;Hosting wasn't as easy as signing up with &lt;a class="reference external" href="https://www.a2hosting.com"&gt;https://www.a2hosting.com&lt;/a&gt;.
A2 hosting didn't exist until 2001. Back then it was complicated and expensive.
Not for the faint of heart.&lt;/p&gt;
&lt;p&gt;Apple offered iBlog which they would host for you on one of their domains like &lt;a class="reference external" href="http://homepage.mac.com"&gt;http://homepage.mac.com&lt;/a&gt; or some such.
See &lt;a class="reference external" href="https://slott56.github.io/2003_11_15-iblog.html"&gt;iBlog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Big. Mistake. (See &lt;a class="reference internal" href="#big-mistakes"&gt;Big Mistakes&lt;/a&gt;, below.)&lt;/p&gt;
&lt;p&gt;From about 2004 to 2006 (maybe)
there was  service called &amp;quot;Bloki&amp;quot;, which offered blogging and forum capabilities.
That was super-helpful because you could edit on-line.&lt;/p&gt;
&lt;p&gt;Big.  Mistake. (See &lt;a class="reference internal" href="#big-mistakes"&gt;Big Mistakes&lt;/a&gt;, below.)&lt;/p&gt;
&lt;p&gt;By 2008, iBlog had run its course.
See &lt;a class="reference external" href="https://slott56.github.io/2008_03_19-iblog_buggy_since_leopards_release_no_fixes_in_sight.html"&gt;iBlog Buggy... Since Leopard's release... No fixes in sight.&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By 2009, it appears that I must have consolidated my content onto &lt;a class="reference external" href="https://blogspot.com"&gt;https://blogspot.com&lt;/a&gt;.
Which got merged with &lt;a class="reference external" href="https://blogger.com"&gt;https://blogger.com&lt;/a&gt; at some point later in life.
(It's hard to tell, but there were blogspot references scattered through
the internal links.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-move"&gt;
&lt;h2&gt;Why Move?&lt;/h2&gt;
&lt;p&gt;If &lt;a class="reference external" href="https://blogger.com"&gt;https://blogger.com&lt;/a&gt; isn't &lt;strong&gt;broken&lt;/strong&gt;, why change?&lt;/p&gt;
&lt;p&gt;There aren't any &lt;strong&gt;good&lt;/strong&gt; reasons. Only a few weak reasons.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;I have a personal blog, which is &lt;strong&gt;not&lt;/strong&gt; on blogger.
It, too, had a long, complex history that went from
Apple's iWeb to Sandvox until Sandvox stopped working,
forcing me to consolidate into &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;. See &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/index.html"&gt;https://itmaybeahack.com/TeamRedCruising2/index.html&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I had been following some folks who were starting blogs,
and they didn't like &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;.
They seemed to really like did like &lt;a class="reference external" href="https://gohugo.io"&gt;Hugo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In researching Hugo, I found out about how &lt;a class="reference external" href="https://github.io"&gt;https://github.io&lt;/a&gt; can
host content, like a blog, with relatively little real work.
Mostly &lt;tt class="docutils literal"&gt;git commit&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;git push&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;I'm over on-line editing. I'm retired, living on a boat,
and I travel a lot. I need to edit off-line.
Creating and staging blog posts for the future
is fun, but requires me to save notes, and then create posts
when I have connectivity, staging them for future release.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These add up to &amp;quot;move to &lt;a class="reference external" href="https://slott56.github.io"&gt;https://slott56.github.io&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="big-mistakes"&gt;
&lt;h2&gt;Big Mistakes&lt;/h2&gt;
&lt;p&gt;There was one big mistake that manifested itself two ways.&lt;/p&gt;
&lt;p&gt;WYSIWYG -- What You See Is What You Get.&lt;/p&gt;
&lt;p&gt;Some secondary mistakes involve the way that blogger lacked
categories. It was &amp;quot;simply&amp;quot; a list of posts.&lt;/p&gt;
&lt;p&gt;Finally, I needed to address &amp;quot;link rot&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wysiwyg-is-evil"&gt;
&lt;h2&gt;WYSIWYG Is Evil&lt;/h2&gt;
&lt;p&gt;Any purely visual editor is a burning dumpster fire
of weirdly inconsistent content that happens to look
right, but is actually wrong.&lt;/p&gt;
&lt;p&gt;Writing involves three separate issues:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The words chosen.&lt;/li&gt;
&lt;li&gt;The semantics of the words.&lt;/li&gt;
&lt;li&gt;The presentation to highlight the semantics.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, we write &lt;tt class="docutils literal"&gt;code&lt;/tt&gt; in a distinct font.
The word &lt;tt class="docutils literal"&gt;code&lt;/tt&gt; has distinct semantics, it's in a programming
language, and gets a distinct font to reveal that.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;emphasize&lt;/strong&gt; things with a style change. We might write foreign &lt;em&gt;words&lt;/em&gt; or &lt;em&gt;phrases&lt;/em&gt; in a separate style.&lt;/p&gt;
&lt;p&gt;In some cases, we're forced to overload styles.
We might use &lt;strong&gt;bold&lt;/strong&gt; for an &lt;strong&gt;AOA&lt;/strong&gt; (Abbreviation or Acronym).
And we also use it for &lt;strong&gt;emphasis&lt;/strong&gt; and for &lt;strong&gt;Chapter Titles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;HTML has many semantic categories available as markup.
We can use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;abbr&amp;gt;ABBR&amp;lt;/abbr&amp;gt;&lt;/span&gt;&lt;/tt&gt; to denote an abbreviation.
The style sheet may render this in bold (or not, maybe in &lt;span class="text-danger"&gt;red&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;Here's the problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;WYSIWYG editors conceal the semantics, and only reveal the markup.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;While it's not impossible to check semantics, it's hard.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;bold&lt;/strong&gt; something and it looks fine.&lt;/p&gt;
&lt;p&gt;But it should have been a Section Heading, not simply bold.&lt;/p&gt;
&lt;p&gt;You can't tell.&lt;/p&gt;
&lt;p&gt;Offline editors and proprietary file formats exacerbate
the problem. The content is very difficult to recover.&lt;/p&gt;
&lt;p&gt;In Apple's case, the files were all XML and could
be read.&lt;/p&gt;
&lt;p&gt;Newer products use Snappy compression and Protobuf,
which is relentlessly evil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="categories-are-hard"&gt;
&lt;h2&gt;Categories Are Hard&lt;/h2&gt;
&lt;p&gt;The iBlog posts had categories.&lt;/p&gt;
&lt;p&gt;The Blogspot/Blogger posts didn't have categories.&lt;/p&gt;
&lt;p&gt;I think categories are useful.&lt;/p&gt;
&lt;p&gt;Now what?&lt;/p&gt;
&lt;p&gt;I have to categorize about 1,000 blog posts.&lt;/p&gt;
&lt;p&gt;This becomes a kind of K-nn problem. Locate the
tags and find the most popular category.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="link-rot"&gt;
&lt;h2&gt;Link Rot&lt;/h2&gt;
&lt;p&gt;Links vanish.&lt;/p&gt;
&lt;p&gt;I'm not going to use the Wayback Machine (&lt;a class="reference external" href="https://web.archive.org"&gt;https://web.archive.org&lt;/a&gt;)
to locate the old content.&lt;/p&gt;
&lt;p&gt;Instead I'm going to (eventually) flag broken links.&lt;/p&gt;
&lt;p&gt;In some cases, I'll probably delete the whole blog entry
because it's aged to the point of irrelevance.&lt;/p&gt;
&lt;p&gt;After a ton of work, I found 19 old blogspot
URL's that I didn't know about. I have a link
converted app that I can update to handle these the
way I handled hundreds of more visible problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tooling"&gt;
&lt;h2&gt;Tooling&lt;/h2&gt;
&lt;p&gt;Some old iBlog entries were in XML.
I converted these to RST without exposing
an intermediate data model. Not good.&lt;/p&gt;
&lt;p&gt;The blogger posts were exported in ATOM notation,
a distinct XML format.&lt;/p&gt;
&lt;p&gt;What's common?&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Feed:
    ...

class Entry:
    ...

class Post(Entry):
    ...

class Page(Entry):
    ...
&lt;/pre&gt;
&lt;p&gt;A model like this lets a feed contain entries.&lt;/p&gt;
&lt;p&gt;This unified model can be parsed from RST or XML,
and then small scripts (and Jupyter notebooks)
can tweak the content to make it consistent.&lt;/p&gt;
&lt;p&gt;And, no, I doubt I'll publish any of the tools
I used. It was all one-time hackery.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="markup"></category><category term="rst"></category></entry><entry><title>DZone's lack of a Python Zone</title><link href="https://slott56.github.io/2023_01_03-dzones_lack_of_a_python_zone.html" rel="alternate"></link><published>2023-01-03T10:00:00-05:00</published><updated>2023-01-03T10:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2023-01-03:/2023_01_03-dzones_lack_of_a_python_zone.html</id><summary type="html">&lt;p&gt;Check out DZone's Coding zone: &lt;a class="reference external" href="https://dzone.com/coding"&gt;https://dzone.com/coding&lt;/a&gt;. Hover over the
&amp;quot;Coding&amp;quot; drop-down menu.&lt;/p&gt;
&lt;p&gt;Notice anything lacking?&lt;/p&gt;
&lt;p&gt;I'll give you a hint: Python.&lt;/p&gt;
&lt;p&gt;They have &amp;quot;Frameworks&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;Javascript&amp;quot;, &amp;quot;Languages&amp;quot; and &amp;quot;Tools&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Languages&amp;quot; seems to be general programming, and the posts include
Java, JavaScript and numerous other languages.&lt;/p&gt;
&lt;p&gt;Let's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out DZone's Coding zone: &lt;a class="reference external" href="https://dzone.com/coding"&gt;https://dzone.com/coding&lt;/a&gt;. Hover over the
&amp;quot;Coding&amp;quot; drop-down menu.&lt;/p&gt;
&lt;p&gt;Notice anything lacking?&lt;/p&gt;
&lt;p&gt;I'll give you a hint: Python.&lt;/p&gt;
&lt;p&gt;They have &amp;quot;Frameworks&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;Javascript&amp;quot;, &amp;quot;Languages&amp;quot; and &amp;quot;Tools&amp;quot;.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Languages&amp;quot; seems to be general programming, and the posts include
Java, JavaScript and numerous other languages.&lt;/p&gt;
&lt;p&gt;Let's look at the evidence, shall we?&lt;/p&gt;
&lt;p&gt;## Python Trending&lt;/p&gt;
&lt;p&gt;Here's some evidence.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://statisticstimes.com/tech/top-computer-languages.php"&gt;https://statisticstimes.com/tech/top-computer-languages.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.infoworld.com/article/3669232/python-popularity-still-soaring.html"&gt;https://www.infoworld.com/article/3669232/python-popularity-still-soaring.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.tiobe.com/tiobe-index/"&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypl.github.io/PYPL.html"&gt;https://pypl.github.io/PYPL.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And yes, the last two are summarized by the first one.&lt;/p&gt;
&lt;p&gt;The Bottom Line?&lt;/p&gt;
&lt;p&gt;Python has grown to be the most popular programming language.
It has edge ahead of Java, C, and C++.&lt;/p&gt;
&lt;p&gt;This isn't a new thing. See this from StackOverflow back in 2017.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/"&gt;https://stackoverflow.blog/2017/09/06/incredible-growth-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks looked at the growth curve back in 2017 and concluded the increase in interest
on StackOverflow was due to the language being so hard to
learn and use that lots of people had questions.&lt;/p&gt;
&lt;p&gt;A simpler conclusion is lots of people are using it.&lt;/p&gt;
&lt;p&gt;And the trend continued for five more years.&lt;/p&gt;
&lt;p&gt;## Why?&lt;/p&gt;
&lt;p&gt;Why is Python so popular?&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It's hard to say.&lt;/li&gt;
&lt;li&gt;It doesn't really matter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have some suspicions on why it's so popular.
In his Keynote at PyCon 2017, (&lt;a class="reference external" href="https://youtu.be/ZyjCqQEUa8o"&gt;https://youtu.be/ZyjCqQEUa8o&lt;/a&gt;)
Jake Vanderplas pointed out that scientists can
install Python, install Jupyter Lab, open a notebook,
download data, and start analyzing results immediately.&lt;/p&gt;
&lt;p&gt;The whole &amp;quot;getting started&amp;quot; process takes minutes,
and you're doing real science.&lt;/p&gt;
&lt;p&gt;As your skills mature, you can write cooler and better-engineered
software.&lt;/p&gt;
&lt;p&gt;All in Python.&lt;/p&gt;
&lt;p&gt;That's a compelling story.&lt;/p&gt;
&lt;p&gt;The other part of it is the response to the growth from publishers and web content providers.&lt;/p&gt;
&lt;p&gt;Years ago DZone reliably reposted my blog posts.
It was fun (for me) to get 1,000's of views.
They spent time curating Most Valuable Bloggers.
(&lt;a class="reference external" href="https://dzone.com/pages/mvb"&gt;https://dzone.com/pages/mvb&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I didn't actively participate because I had a day job
and was writing books, and couldn't do the kinds of
things DZone wanted from content creators.
(It was like taking on &lt;em&gt;another&lt;/em&gt; book.)&lt;/p&gt;
&lt;p&gt;I'm lightly invested in DZone's success in following this
trend. (If I was in the MVB program, I might be more heavily
invested. But I have books to write.)&lt;/p&gt;
&lt;p&gt;## DZone Response&lt;/p&gt;
&lt;p&gt;The structure of DZone's content leaves me with questions about the basis for the &amp;quot;Zones&amp;quot;. It can't be
popularity, since Java has slipped behind Python. Maybe there's some
other criteria; I wonder what they could be? Sponsorships? Or the
historical &amp;quot;Javalobby&amp;quot; web site?&lt;/p&gt;
&lt;p&gt;It also leaves me with the urge to suggest they radically rethink their
approach to content management. The &amp;quot;Zones&amp;quot; don't seem to have crisp
definitions. If they do have definitions, it might help to share them.
If they don't have a formal editorial policy on the zones,
perhaps they should be assigned more dynamically as content is reviewed
and included on the site. Perhaps there should be a zoning board?&lt;/p&gt;
&lt;p&gt;What's essential here is shfting DZone away from their historically
Java-centric view to embrace Python.&lt;/p&gt;
&lt;p&gt;Java can still be a prominent feature, but it needs to be put into
perspective. Python is large, and growing. Java is not quite as large,
and not growing as quickly.&lt;/p&gt;
&lt;p&gt;It's time for change.&lt;/p&gt;
</content><category term="Technologies"></category><category term="blogging"></category><category term="dzone"></category></entry><entry><title>Christmas Book Offers</title><link href="https://slott56.github.io/2022_12_20-christmas_book_offers.html" rel="alternate"></link><published>2022-12-20T11:00:00-05:00</published><updated>2022-12-20T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-20:/2022_12_20-christmas_book_offers.html</id><summary type="html">&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="apple-books"&gt;
&lt;h2&gt;Apple Books&lt;/h2&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h3&gt;Pivot to Python&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h3&gt;Unlearning SQL&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h2&gt;Google Play&lt;/h2&gt;
&lt;p&gt;Also available on Google Play. Here's &lt;strong&gt;Unlearning SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="ebook"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>On Algorithm Design</title><link href="https://slott56.github.io/2022_12_13-on_algorithm_design.html" rel="alternate"></link><published>2022-12-13T11:00:00-05:00</published><updated>2022-12-13T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-13:/2022_12_13-on_algorithm_design.html</id><summary type="html">&lt;p&gt;Some background: &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-faerie_dusttm.html"&gt;FAERIE DUST™&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html"&gt;Obstinate Idiocy, Expanded&lt;/a&gt;,
and even &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html"&gt;Permutations, Combinations and Frustrations&lt;/a&gt;.
I want to set up algorithm design as the diametric opposite of Obstinate
Stupidity. To do that, let's look at Obstinate Stupidity.&lt;/p&gt;
&lt;p&gt;The theme?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We did something wrong, and we don't want to fix it …&lt;/strong&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Some background: &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-faerie_dusttm.html"&gt;FAERIE DUST™&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;,
&lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html"&gt;Obstinate Idiocy, Expanded&lt;/a&gt;,
and even &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html"&gt;Permutations, Combinations and Frustrations&lt;/a&gt;.
I want to set up algorithm design as the diametric opposite of Obstinate
Stupidity. To do that, let's look at Obstinate Stupidity.&lt;/p&gt;
&lt;p&gt;The theme?&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;We did something wrong, and we don't want to fix it.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;I emphasize this because it takes many forms. Another common variant is
&amp;quot;We can't afford to continue the way we are, but we can't afford the
time to fix it, either.&amp;quot; Sometimes, &amp;quot;Management wants this fixed, but we
don't have any budget.&amp;quot; You know how it is.&lt;/p&gt;
&lt;p&gt;The current go-round is someone who has an algorithm of intensely stupid
(and largely irrelevant) complexity. See &lt;a class="reference external" href="https://slott56.github.io/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html"&gt;My algorithm performs badly,
do I need
asyncio?&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The situation is touchy. They have pre-reasoned an answer -- &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt;
-- and they're looking for (a) confirmation that they're obviously right
and (b) help rewriting something needlessly complex to somehow be faster
even when it's compute-bound. Specifically, they want Faerie Dust.&lt;/p&gt;
&lt;div class="section" id="frivolous-complexity"&gt;
&lt;h2&gt;Frivolous Complexity&lt;/h2&gt;
&lt;p&gt;How do I know it has needless, frivolous complexity?&lt;/p&gt;
&lt;p&gt;Here are two symptoms.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The problem has a lot of context. In thise case, there's a hierarchy.
The hierarchy may seem irrelevant, but it has this mind-numbingly
complex back-story, that they can't seem to ignore or abstract out of
the essential problem. There's a (large) number of details that don't
really explain what the hierarchy means or why it has to be
preserved. but somehow make it essential.&lt;/li&gt;
&lt;li&gt;The problem can only be described by repeating the legacy algorithm.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's dwell on this second symptom for a moment. We have two competing
issues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The legacy algorithm is too slow. AND,&lt;/li&gt;
&lt;li&gt;There's no other way to describe the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should make it clear they are looking at &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; as a kind of
Faerie Dust that will magically make the bad algorithm good. Without
fixing the bad algorithm.&lt;/p&gt;
&lt;p&gt;I want to emphasize the existence of details which can neither be
explained nor removed. The hierarchy must be there simply because it
must be there. Bizarre complications to walk the hierarchy are,
therefore, essential even if no one can explain them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="algorithm-design"&gt;
&lt;h2&gt;Algorithm Design&lt;/h2&gt;
&lt;p&gt;To actually improve the processing they need a new algorithm.&lt;/p&gt;
&lt;p&gt;I can't emphasize this enough: &lt;strong&gt;they need a new algorithm&lt;/strong&gt;. (This
often means a new data structure.)&lt;/p&gt;
&lt;p&gt;&amp;quot;Tuning&amp;quot; in any form is nothing more than nibbling around the edges to
make a bad algorithm run 15% faster.&lt;/p&gt;
&lt;p&gt;Rewriting may replace
&lt;span class="math"&gt;\(\textbf{O}(2^n)\)&lt;/span&gt; with &lt;span class="math"&gt;\(\textbf{O}(n \log n)\)&lt;/span&gt;.
This would be dramatically better. From seconds to milliseconds. You know, 1,000% faster.&lt;/p&gt;
&lt;p&gt;There's a disciplined approach to this. Here are the steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write the post-condition for the processing as a whole.&lt;/li&gt;
&lt;li&gt;Write code that achieves the post-condition. (This may involve
decomposing the big problem into sub-problems, each of which is
approached by the same two-step process.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The intensely painful part of this is creating the post-condition.&lt;/p&gt;
&lt;p&gt;I suggested they &amp;quot;write an assert statement that must be true when the
algorithm has completed, and computed the right answer.&amp;quot;&lt;/p&gt;
&lt;p&gt;Hahahah.&lt;/p&gt;
&lt;p&gt;What an idiot I was.&lt;/p&gt;
&lt;p&gt;They didn't know how to write an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement. And at this
point, they stopped. Brick Wall. Dead in the water. Cannot proceed.
Done. Failed.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement has become the end-of-the-line. They can't (or
won't) do that. And they won't ask about it.&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Do you have a question?&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: &amp;quot;I have to think before I can even begin to ask a question.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;How about think less and ask more. Do you have trouble writing the
word assert? What's stopping you?&amp;quot;&lt;/p&gt;
&lt;p&gt;Them: [silence]&lt;/p&gt;
&lt;p&gt;Okay.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-conditions"&gt;
&lt;h2&gt;Post-Conditions&lt;/h2&gt;
&lt;p&gt;The post-condition is true when you're done. Let's look at my favorite,
M must be the maximum of A and B.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
M \geq A \textbf{ and } M \geq B
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This becomes an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement through (what seems to me, but boy
was I wrong) the following kind of translation.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
assert M &amp;gt;= A and M &amp;gt;= B, f&amp;quot;Algorithm Failed {M=} {A=} {B=}&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Again, I acknowledge I was wrong to think
creating an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement from a post condition was in any way
clear. It's absolutely bewilderingly impossible.&lt;/p&gt;
&lt;p&gt;It's also important to note that the above condition is incomplete. The
value &lt;span class="math"&gt;\(M = A+B\)&lt;/span&gt; will also satisfy the condition. We need to test our
test cases to be sure they really do what we want.&lt;/p&gt;
&lt;p&gt;We really need to be more complete on what the domain of values for
&lt;span class="math"&gt;\(M\)&lt;/span&gt; is.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
M = A \textbf{ or } M = B \textbf{ and } M \geq A \textbf{ and } M \geq B
\end{equation*}
&lt;/div&gt;
&lt;p&gt;We could rewrite this slightly to be&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
M \in \{A, B\} \textbf{ and } M \geq A \textbf{ and } M \geq B
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This version directly suggests a potential set comprehension to compute
the result:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
M = {m for m in {A, B} if m &amp;gt;= A and m &amp;gt;= B}.pop()
&lt;/pre&gt;
&lt;p&gt;This is the advantage of writing post-conditions. They often map to
code.&lt;/p&gt;
&lt;p&gt;You can even try it as pseudo-SQL if that helps you get past the
&lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
SELECT M FROM (TABLE INT(X); A; B) WHERE M &amp;gt;= A AND M &amp;gt;= B
&lt;/pre&gt;
&lt;p&gt;I made up a &lt;tt class="docutils literal"&gt;TABLE INT(X); A; B&lt;/tt&gt; to describe a two-row table with
candidate solutions. I'm sure SQL folks have other sort of &amp;quot;interim
table&amp;quot; constructs they like.&lt;/p&gt;
&lt;p&gt;The point is to write down the final condition.&lt;/p&gt;
&lt;p&gt;I'll repeat that because the folks I was trying to work with refused to
understand the assert statement.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Write down the final condition&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-current-problem-s-post-condition"&gt;
&lt;h2&gt;The Current Problem's Post-Condition&lt;/h2&gt;
&lt;p&gt;The problem at hand seems to involve a result set, &lt;span class="math"&gt;\(R\)&lt;/span&gt;, pulled from
nodes of some hierarchy, &lt;span class="math"&gt;\(H\)&lt;/span&gt;, &lt;span class="math"&gt;\(R \subseteq H\)&lt;/span&gt;. Each element of
the hierarchy, &lt;span class="math"&gt;\(h \in H\)&lt;/span&gt; has a set of strings, &lt;span class="math"&gt;\(s(h)\)&lt;/span&gt;. It
appears that a target string, &lt;span class="math"&gt;\(t\)&lt;/span&gt;, must be a member
of &lt;span class="math"&gt;\(t \in s(r), r \in R\)&lt;/span&gt;. I think.&lt;/p&gt;
&lt;p&gt;Note that the hierarchy is nothing more than a collection of identified
collections of strings. The parent-childness doesn't seem to matter for
the search algorithm. Within the result set, there's some importance to
the tier of the hierarchy, &lt;span class="math"&gt;\(t(h)\)&lt;/span&gt;, and a node from tier 1 means all
others are ignored or something. Can't be sure. (The endless backstory
on the hierarchy was little more than a review of the algorithm to query
it.)&lt;/p&gt;
&lt;p&gt;If any of this is true, it would be a fairly straightforward &lt;tt class="docutils literal"&gt;map()&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;filter()&lt;/tt&gt; what could be parallelized with &lt;tt class="docutils literal"&gt;dask&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;concurrent.futures&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But we can't know if this really is the post-condition until someone in
a position to know writes the post-condition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="things-to-do"&gt;
&lt;h2&gt;Things To Do&lt;/h2&gt;
&lt;p&gt;The post-condition defines the results of test cases. The
&lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement becomes part of the pytest test cases. In a kind of
direct copy-and-paste process to shift from design aid to test result
condition.&lt;/p&gt;
&lt;p&gt;Currently, the algorithm they have seems to have no test cases. They
can't write a condition to describe correct answers, which suggests they
actually don't know what'a correct.&lt;/p&gt;
&lt;p&gt;If they wrote test cases, they might be able to
visualize an &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement that confirms the test worked. Might.
It appears to be asking a lot to write test cases for the legacy
algorithm.&lt;/p&gt;
&lt;p&gt;Indeed, if they wrote a conditional expression that described the
results of any working example, they'd have taken giant steps toward the
necessary &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement. But that's asking a lot, it appears.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-then-what"&gt;
&lt;h2&gt;And Then What?&lt;/h2&gt;
&lt;p&gt;Once you have a target condition, you can then design code to satisfy
some (or all) of the target condition. &lt;a class="reference external" href="https://www.google.com/books/edition/A_Discipline_of_Programming/MsUmAAAAMAAJ?hl=en"&gt;Dijkstra's A Discipline of
Programming&lt;/a&gt;
has a thorough description of the &amp;quot;weakest precondition&amp;quot; operator. It
works like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Imagine a statement that might satisfy some or all of your
post-condition.&lt;/li&gt;
&lt;li&gt;Substitute the effect of the statement into the post-condition.&lt;/li&gt;
&lt;li&gt;What's left is the weakest pre-condition for that statement to work.
It's often the post-condition for a statement must precede the
statement you wrote.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You write the program from the desired post-condition moving forward
until you get a weakest pre-condition of True. Back to front. From goal
to initialization.&lt;/p&gt;
&lt;p&gt;Post-condition gives you statements. Statements have pre-conditions. You
iterate, writing conditions, statements, and more conditions.&lt;/p&gt;
&lt;p&gt;(You can also spot useless code because the pre-condition matches the
post-condition.)&lt;/p&gt;
&lt;p&gt;For the silly &amp;quot;maximum&amp;quot; problem?&lt;/p&gt;
&lt;p&gt;Try M := A as a statement. This only works if A &amp;gt;= B. That's the
pre-condition that is derived from substituting M = A into the
post-condition.&lt;/p&gt;
&lt;p&gt;Try M := B as a statement. This only works if B &amp;gt;= A. That's the
pre-condition that is derived from substituting M = B into the
post-condition.&lt;/p&gt;
&lt;p&gt;These two pre-conditions describe an if-elif statement.&lt;/p&gt;
&lt;p&gt;Note that this feels weirdly arbitrary and exploratory. It's a kind of
empiricism where we try statements and see if they're helpful. There
don't need to be any constraints. The post-condition is all that's
required to explore the space of statements that might work, or at least
might help.&lt;/p&gt;
&lt;p&gt;Of course, we're not stupid. And we're lazy. We don't search the
infinite space of statements. We can often imagine the statements
without a &lt;strong&gt;lot&lt;/strong&gt; of complex work. The formal weakest pre-condition
process is necessary to confirm our intuition. Or to assert that
something is free of astonishing side-effects.&lt;/p&gt;
&lt;p&gt;It all depends on one thing: a clear, formal statement of the
post-condition.&lt;/p&gt;
&lt;p&gt;Since I made the mistake of describing the post-condition as a line of
code, we've hit some kind of brick wall related to &amp;quot;I won't write code.&amp;quot;
Or &amp;quot;I don't want to be seen writing code.&amp;quot; or &amp;quot;I don't want you to
critique my code.&amp;quot;&lt;/p&gt;
&lt;p&gt;Dunno.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category><category term="Design Principles"></category><category term="asycnio"></category><category term="faerie dust"></category></entry><entry><title>My algorithm performs badly, do I need asyncio?</title><link href="https://slott56.github.io/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html" rel="alternate"></link><published>2022-12-06T11:00:00-05:00</published><updated>2022-12-06T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-12-06:/2022_12_06-my_algorithm_performs_badly_do_i_need_asyncio.html</id><summary type="html">&lt;p&gt;Real Question (somewhat abbreviated): &amp;quot;My algorithm performs badly, do I
need asyncio?&amp;quot;&lt;/p&gt;
&lt;p&gt;Short answer: No.&lt;/p&gt;
&lt;p&gt;Long answer: Sigh. No. Do you need a slap upside the head?&lt;/p&gt;
&lt;p&gt;Here's how it plays out:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We figured that if we 'parallelize' it, then we can apply multiple
cores, and it will run …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Real Question (somewhat abbreviated): &amp;quot;My algorithm performs badly, do I
need asyncio?&amp;quot;&lt;/p&gt;
&lt;p&gt;Short answer: No.&lt;/p&gt;
&lt;p&gt;Long answer: Sigh. No. Do you need a slap upside the head?&lt;/p&gt;
&lt;p&gt;Here's how it plays out:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We figured that if we 'parallelize' it, then we can apply multiple
cores, and it will run 4x as fast.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;What kind of I/O are you doing?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;None, really. It's compute-intensive.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Async is for I/O. A function can be computing while other functions
are waiting for I/O to complete.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Right. We can have lots of them, so they each get a core.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Listen, please. A function can be computing. That's &amp;quot;A&amp;quot;. Singular.
One. Take a step back from the asyncio package. What are you trying to
do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Make things faster.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Take a breath. Make &lt;em&gt;what&lt;/em&gt; faster?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;A slow algorithm.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Do you want to know what we're trying do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;First, we query the database to get categories. Then we query the
database to get details for the categories. Then we query the database
to organize the categories into a hierarchy. Except for certain
categories which are special. So we have if-statements to handle the
special cases.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's I/O intensive.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;That's not the part that's slow.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Context is important. I feel the need to describe all of the
background.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's trivia. It's as important as your mother's maiden name.
What's the problem?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;The problem is we don't know how to use asyncio to use multiple
cores.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Do you know how to divide by zero?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;No. It's absurd.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;We already talked about asyncio for compute-intensive processing.
Same level of absurd as dividing by zero. What are you trying to do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;We have some for loops that compute a result slowly. We want to
parallelize them.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Every for statement that computes a collection is a generator
expression. Every generator expression can be made into a list, set, or
dictionary comprehension. Start there.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;But what if the for statement has a super-complex body with lots of
conditions?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Then you might have to take a step back and redesign the algorithm.
What does it do?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;lt;code&amp;gt; &amp;quot;See all these for statements and if-statements?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;What does it do? What's the final condition?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;A set of valid answers.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Define valid.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;What do you mean? 'Define valid?' It's a set that's valid!&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;Write a condition that defines whether or not a result set is
valid. Don't hand-wave, write the condition.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;That's impossible. The algorithm is too complex.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;How do you test this process? How do you create test data? How do
you know an answer it produces is correct?&amp;quot;&lt;/p&gt;
&lt;p&gt;Q:&lt;/p&gt;
&lt;p&gt;Me: &amp;quot;That's the fundamental problem. You need to have a well-defined
post-condition. Logic. An &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; statement that defines all correct
answers. From that you can work backwards into an algorithm. You may not
need parallelism; you may simply have a wrong data structure somewhere
in &amp;lt;code&amp;gt;.&amp;quot;&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Can you point out the wrong data structure?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;What? Why won't you? You read the code, you can point out the
problems.&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;p&gt;Q: &amp;quot;Do I have to do all the work?&amp;quot;&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category><category term="analysis"></category><category term="asyncio"></category><category term="concurrency"></category></entry><entry><title>Functional Programming and Finite State Automata (FSA)</title><link href="https://slott56.github.io/2022_11_29-functional_programming_and_finite_state_automata_fsa.html" rel="alternate"></link><published>2022-11-29T11:00:00-05:00</published><updated>2022-11-29T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-29:/2022_11_29-functional_programming_and_finite_state_automata_fsa.html</id><summary type="html">&lt;p&gt;When I talk about functional programming in Python, folks like to look
for place where functional programming isn't appropriate. They latch
onto finite-state automata (FSA) because &amp;quot;state&amp;quot; of an automata doesn't
seem to fit with stateless objects used in functional programming.&lt;/p&gt;
&lt;p&gt;This is a false dichotomy.&lt;/p&gt;
&lt;p&gt;It's emphatically false in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I talk about functional programming in Python, folks like to look
for place where functional programming isn't appropriate. They latch
onto finite-state automata (FSA) because &amp;quot;state&amp;quot; of an automata doesn't
seem to fit with stateless objects used in functional programming.&lt;/p&gt;
&lt;p&gt;This is a false dichotomy.&lt;/p&gt;
&lt;p&gt;It's emphatically false in Python, where we don't have a purely
functional language.&lt;/p&gt;
&lt;p&gt;(In a purely functional language, monads can help make FSA's behave
properly and avoid optimization. The use of a recursion to consume an
iterable and make state transitions is sometimes hard to visualize. We
don't have these constraints.)&lt;/p&gt;
&lt;p&gt;Let's look at a trivial kind of FSA: the parity computation. We want to
know how many 1-bits are in a given value. Step 1 is to expand an
integer into bits.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def bits(n: int) -&amp;gt; Iterable[int]:
    if n &amp;lt; 0:
        raise ValueError(f&amp;quot;{n} must be &amp;gt;= 0&amp;quot;)
    while n &amp;gt; 0:
        n, bit = divmod(n, 2)
        yield bit
&lt;/pre&gt;
&lt;p&gt;This will transform a number into a sequence of bits. (They're in order
from LSB to MSB, which is the reverse order of the &lt;tt class="docutils literal"&gt;bin()&lt;/tt&gt; function.)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; list(bits(42))
[0, 1, 0, 1, 0, 1]
&lt;/pre&gt;
&lt;p&gt;Given a sequence of bits, is there an odd number or an even number? This
is the parity question. The parity FSA is often depicted like this:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://slott56.github.io/media/FSA_image.png"&gt;
&lt;img alt="two-state finite-state automaton" src="https://slott56.github.io/media/FSA_image.png" style="width: 320px; height: 188px;" /&gt;
&lt;/a&gt;
&lt;p&gt;When the parity is in the &lt;strong&gt;even&lt;/strong&gt; state, a 1-bit transitions to the
&lt;strong&gt;odd&lt;/strong&gt; state. When the parity is in the &lt;strong&gt;odd&lt;/strong&gt;, a 1-bit transitions to
the &lt;strong&gt;even&lt;/strong&gt; state.&lt;/p&gt;
&lt;p&gt;Clearly, this demands the &lt;strong&gt;State&lt;/strong&gt; design pattern, right?&lt;/p&gt;
&lt;div class="section" id="an-oo-implementation"&gt;
&lt;h2&gt;An OO Implementation&lt;/h2&gt;
&lt;p&gt;Here's a detailed OO implementation using the &lt;strong&gt;State&lt;/strong&gt; design pattern.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Parity:
    def signal(self, bit: int) -&amp;gt; &amp;quot;Parity&amp;quot;:
        ...


class EvenParity(Parity):
    def signal(self, bit: int) -&amp;gt; Parity:
        if bit % 2 == 1:
            return OddParity()
        else:
            return self


class OddParity(Parity):
    def signal(self, bit: int) -&amp;gt; Parity:
        if bit % 2 == 1:
            return EvenParity()
        else:
            return self


class ParityCheck:
    def __init__(self):
        self.parity = EvenParity()

    def check(self, message: Iterable[int]) -&amp;gt; None:
        for bit in message:
            self.parity = self.parity.signal(bit)

    &amp;#64;property
    def even_parity(self) -&amp;gt; bool:
        return isinstance(self.parity, EvenParity)
&lt;/pre&gt;
&lt;p&gt;Each of the &lt;tt class="docutils literal"&gt;Parity&lt;/tt&gt; subclasses implements one of the states of the
FSA. The lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method implements state-specific behavior.
In this case, it's a transition to another state. In more complex
examples it may involve side-effects like updating a mutable data
structure to log progress.&lt;/p&gt;
&lt;p&gt;This mapping from state to diagram to class is pretty pleasant. Folks
really like to implement each state as a distinct class. It somehow
feels really solid.&lt;/p&gt;
&lt;p&gt;It's import to note the loneliness of the lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method.
It's all by itself in that big, empty class.&lt;/p&gt;
&lt;p&gt;Hint. This could be a function.&lt;/p&gt;
&lt;p&gt;It's also important to note that this kind of design is subject to odd,
unpleasant design tweaks. Ideally, the transition is *only* done by
the lonely &lt;tt class="docutils literal"&gt;signal()&lt;/tt&gt; method. Nothing stops the unscrupulous
programmer from putting state transitions in other methods. Sigh.&lt;/p&gt;
&lt;p&gt;We'll look at more complex kinds of state transitions later. In the UML
state chart diagrams sates may also have entry actions and exit actions,
a bit more complex behavior than we we're showing in this example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-functional-implementation"&gt;
&lt;h2&gt;A Functional Implementation&lt;/h2&gt;
&lt;p&gt;What's the alternative? Instead of modeling state as an object with
methods for behavior, we can model state as a function. The state is a
function that transitions to the next state.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def even(bit: int) -&amp;gt; ParityF:
    if bit % 2 == 1:
        return odd
    else:
        return even


def odd(bit: int) -&amp;gt; ParityF:
    if bit % 2 == 1:
        return even
    else:
        return odd


def parity_check(message: Iterable[int], init: ParityF = None) -&amp;gt; ParityF:
    parity = init or even
    for bit in message:
        parity = parity(bit)
    return parity


def even_parity(p: ParityF) -&amp;gt; bool:
    return p is even
&lt;/pre&gt;
&lt;p&gt;Each state is modeled by a function.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;parity_check()&lt;/tt&gt; function examines each bit, and applies the
current state function (either &lt;tt class="docutils literal"&gt;even()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;odd()&lt;/tt&gt;) to compute the
next state, and save this as the vakue of the &lt;tt class="docutils literal"&gt;parity&lt;/tt&gt; variable.&lt;/p&gt;
&lt;p&gt;What's the ParityF type? This:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from typing import Protocol


class ParityF(Protocol):
    def __call__(self, bit: int) -&amp;gt; &amp;quot;ParityF&amp;quot;:
        ...
&lt;/pre&gt;
&lt;p&gt;This uses a Protocol to define a type with a recursive cycle in it. It
would be more fun to use something like
&lt;tt class="docutils literal"&gt;ParityF = &lt;span class="pre"&gt;Callable[[int],&lt;/span&gt; &amp;quot;ParityF&amp;quot;]&lt;/tt&gt;, but that's not (yet)
supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-extensions"&gt;
&lt;h2&gt;Some Extensions&lt;/h2&gt;
&lt;p&gt;What if we need each state to have more attributes?&lt;/p&gt;
&lt;p&gt;Python functions have attributes. Like this: &lt;tt class="docutils literal"&gt;even.some_value = 2&lt;/tt&gt;;
&lt;tt class="docutils literal"&gt;odd.some_value = 1&lt;/tt&gt;. We can add all the attributes we require.&lt;/p&gt;
&lt;p&gt;What about other functions that happen on entry to a state or exit from
a state? This is trickier. My preference is to use a class as a
namespace that contains a number of related functions.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class Even:
    &amp;#64;staticmethod
    def __call__(bit: int) -&amp;gt; ParityF:
        if bit % 2 == 1:
            odd.enter()
            return odd
        else:
            return even
    &amp;#64;staticmethod
    def enter() -&amp;gt; None:
        print(&amp;quot;even&amp;quot;)

even = Even()
&lt;/pre&gt;
&lt;p&gt;This seems to work out well, and keeps each state-specific material in a
single namespace. It uses static methods to follow the same design
principle as the previous example -- these are pure functions, collected
into the class only to provide a namespace so we can use &lt;tt class="docutils literal"&gt;odd.enter()&lt;/tt&gt;
or &lt;tt class="docutils literal"&gt;even.enter()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;State&lt;/strong&gt; design pattern isn't &lt;em&gt;required&lt;/em&gt; to implement a FSA.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="functional python programming"></category><category term="software design"></category><category term="#python"></category></entry><entry><title>Permutations, Combinations and Frustrations</title><link href="https://slott56.github.io/2022_11_22-permutations_combinations_and_frustrations.html" rel="alternate"></link><published>2022-11-22T17:21:00-05:00</published><updated>2022-11-22T17:21:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-permutations_combinations_and_frustrations.html</id><summary type="html">&lt;p&gt;The issue of permutations and combinations is sometimes funny.&lt;/p&gt;
&lt;p&gt;Not funny weird. But, funny &amp;quot;haha.&amp;quot;&lt;/p&gt;
&lt;p&gt;I received an email with 100's of words and 10 attachments. (10.
Really.) The subject was how best to enumerate 6! permutations of
something or other. With a goal of comparing some optimization algorithm
with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The issue of permutations and combinations is sometimes funny.&lt;/p&gt;
&lt;p&gt;Not funny weird. But, funny &amp;quot;haha.&amp;quot;&lt;/p&gt;
&lt;p&gt;I received an email with 100's of words and 10 attachments. (10.
Really.) The subject was how best to enumerate 6! permutations of
something or other. With a goal of comparing some optimization algorithm
with a brute force solution. (I don't know why. I didn't ask.)&lt;/p&gt;
&lt;p&gt;Apparently, the programmer was not aware that permutation creation is a
pretty standard algorithm with a standard solution. Most &amp;quot;real&amp;quot;
programming languages have libraries which already solve this in a tidy,
efficient, and well-documented way.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html#itertools.permutations"&gt;https://docs.python.org/3/library/itertools.html#itertools.permutations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I suspect that this is true for every language in common use.&lt;/p&gt;
&lt;p&gt;In Python, this doesn't even really involve programming. It's a
first-class expression you enter at the Python &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/tt&gt; prompt.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import itertools
&amp;gt;&amp;gt;&amp;gt; list(itertools.permutations(&amp;quot;ABC&amp;quot;))
[('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]
&lt;/pre&gt;
&lt;p&gt;What's really important about this question was the obstinate inability
of the programmer to realize that their problem had a tidy, well
understood solution. And has had a good solution for decades. Instead
they did a lot of programming and sent 100's of words and 10 attachments
(10. Really.)&lt;/p&gt;
&lt;p&gt;The best I could do was provide this link:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.algorist.com"&gt;Steven Skiena, The Algorithm Design
Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It appears that too few programmers are aware of how much already
exists. They plunge ahead creating a godawful mess when a few minutes of
reading would have provided a very nice answer.&lt;/p&gt;
&lt;p&gt;Eventually, they sent me this:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Heap's_algorithm"&gt;http://en.wikipedia.org/wiki/Heap's_algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a grudging acknowledgement that they had wasted hours failing to
reinvent the wheel.&lt;/p&gt;
</content><category term="Technologies"></category><category term="algorithm"></category><category term="software design"></category></entry><entry><title>Obstinate Idiocy, Expanded</title><link href="https://slott56.github.io/2022_11_22-obstinate_idiocy_expanded.html" rel="alternate"></link><published>2022-11-22T17:15:00-05:00</published><updated>2022-11-22T17:15:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-obstinate_idiocy_expanded.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;Here are three warning signs I was able to deduce.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No Rational Justification&lt;/li&gt;
&lt;li&gt;Ineffective Tool Choice&lt;/li&gt;
&lt;li&gt;Random Whining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To which I can now add two more.&lt;/p&gt;
&lt;p&gt;Symptom 4 of Obstinate Idiocy is that &lt;strong&gt;all questions are rhetorical&lt;/strong&gt;
and they often come with pre-argued answers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2022_11_22-obstinate_idiocy_updated.html"&gt;Obstinate Idiocy&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;Here are three warning signs I was able to deduce.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No Rational Justification&lt;/li&gt;
&lt;li&gt;Ineffective Tool Choice&lt;/li&gt;
&lt;li&gt;Random Whining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To which I can now add two more.&lt;/p&gt;
&lt;p&gt;Symptom 4 of Obstinate Idiocy is that &lt;strong&gt;all questions are rhetorical&lt;/strong&gt;
and they often come with pre-argued answers.&lt;/p&gt;
&lt;p&gt;Actual email quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: &amp;quot;&amp;gt;Excel is almost the stupidest choice possible&lt;/p&gt;
&lt;p&gt;OI: &amp;quot;What criteria are you using to make that statement?&lt;/p&gt;
&lt;p&gt;My criteria was that I needed a way for non-tech people and
non-programmers...&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And on the email spins, pre-arguing points about &amp;quot;non-programmers&amp;quot; and pre-justifying a bad
answer. Since their argument is already presented (in mind-numbing
detail), there's no effective way to answer the question they asked.
Indeed, there's little point in trying to answer, since the pre-argued
response is likely to be the final response.&lt;/p&gt;
&lt;p&gt;In order to answer, we have to get past the pre-argued response. And
this can be difficult because this devolves to &amp;quot;it's political, you
don't need the details.&amp;quot; So, if it's not technical, why am I involved?&lt;/p&gt;
&lt;p&gt;Symptom 5 of Obstinate Idiocy is &lt;strong&gt;Learning is Impossible&lt;/strong&gt;. This may
actually be the root cause for Symptom 3, &lt;strong&gt;Ineffective Tool Choice&lt;/strong&gt;.
It now seems to me that the tool was chosen to minimize learning. I had
suggested using Mathematica. I got this response: &amp;quot; I don't know Python
or R or SAS.&amp;quot; The answer seems like a non-sequitur because it is. It's
justification for a bad decision.&lt;/p&gt;
&lt;p&gt;The problem they're trying to solve is gnarly, perhaps it's time to
consider learning a better toolset.&lt;/p&gt;
&lt;p&gt;Excel has already failed the OI. They asked for an opinion (&amp;quot;Q2: What do
you believe are the pros/cons of ... using Excel with &amp;quot;Excel Solver&amp;quot;
...?&amp;quot;) that seems to ignore the fact that they already failed trying to
use Excel. They already failed, and they followed up by asking for the
pros and cons of a tool they already failed with.&lt;/p&gt;
&lt;p&gt;From this limited exchange it appears that they're so unwilling to learn
that they can't gather data from their own experience and learn from it.&lt;/p&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="software design"></category><category term="analysis"></category><category term="spreadsheet"></category></entry><entry><title>FAERIE DUST™</title><link href="https://slott56.github.io/2022_11_22-faerie_dusttm.html" rel="alternate"></link><published>2022-11-22T16:39:00-05:00</published><updated>2022-11-22T16:39:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-faerie_dusttm.html</id><summary type="html">&lt;p&gt;Here's how to recognize a &lt;strong&gt;Faerie Dust&lt;/strong&gt; request:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have identified a problem. It can be with almost anything:
scalability, reliability, auditability, any Quality Measure.&lt;/li&gt;
&lt;li&gt;We're pursuing a specific technology. Typically, something that has
the lowest impact on our architecture.&lt;/li&gt;
&lt;li&gt;We can't address anything other than this specific technology
variation …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's how to recognize a &lt;strong&gt;Faerie Dust&lt;/strong&gt; request:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have identified a problem. It can be with almost anything:
scalability, reliability, auditability, any Quality Measure.&lt;/li&gt;
&lt;li&gt;We're pursuing a specific technology. Typically, something that has
the lowest impact on our architecture.&lt;/li&gt;
&lt;li&gt;We can't address anything other than this specific technology
variation -- we can't change the application software or buy
hardware.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once we're in the &lt;strong&gt;Faerie Dust&lt;/strong&gt; realm, what can we do?&lt;/p&gt;
&lt;p&gt;Laughing doesn't help. They have a serious problem, they need a
solution. The fact that they won't address the cause isn't completely
relevant -- we have to work on the denial, anger, negotiation,
depression cycle first. Hopefully skipping past the anger, or assuring
the anger is directed elsewhere.&lt;/p&gt;
&lt;p&gt;Helping doesn't help. If we join the quest for their Faerie Dust, what
will we accomplish? We'll burn billable hours to -- eventually -- reach
an equivocal non-solution with a complex write-up and recommendations
that won't be implemented.&lt;/p&gt;
&lt;p&gt;Not helping doesn't help. If we obstinately refuse to join the quest for
the Faerie Dust... well... then we've done nothing. We haven't advanced
their understanding of their problem.&lt;/p&gt;
&lt;p&gt;What's left? Is there a middle road that allows us to join the Faerie
Dust quest, but still point out the side roads, other monsters and other
treasures along the way?&lt;/p&gt;
&lt;p&gt;Perhaps there is, but it would require a kind of saintly patient
persistence. We would have to start with an enumeration of problem
causes, prioritize them, and then focus on their selected bit of Faerie
Dust. My idea is that enumerating the possible causes allows us to
identify the missed opportunities, and the possible magnitude of fixing
something essential (algorithm or data structure) instead of throwing up
window-dressing to cover problems in something inessential (reducing the
time required for a table scan).&lt;/p&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Here's a concrete example of Faerie Dust.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Pick a data model that doesn't fit the use cases. i.e., lumped many
discrete details into a single text field that has &amp;quot;rich semantic
content&amp;quot;. Work around this mistake by using wild-card matches.&lt;/li&gt;
&lt;li&gt;Complained about performance and dug into nuanced details of LIKE
clause and full-text search. Lots of study time spent on LIKE clause
processing and how to improvement performance.&lt;/li&gt;
&lt;li&gt;Refused to discuss the actual use case or the mismatch between data
structures and requirements.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The design didn't match the use cases. &lt;strong&gt;Faerie Dust&lt;/strong&gt; won't help.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="quot-helping-doesn-39-t-help-if-we-join-the-que"&gt;
&lt;h2&gt;&amp;amp;quot;Helping doesn&amp;amp;#39;t help. If we join the que...&lt;/h2&gt;
&lt;p&gt;TechNeilogy&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-27 09:27:52.554000-05:00&lt;/p&gt;
&lt;p&gt;&amp;quot;Helping doesn't help. If we join the quest for their Faerie Dust, what
will we accomplish? ...Not helping doesn't help.&amp;quot;
This really hits home. I once had to make this agonizing decision
regarding a project to which I had pledged commitment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-clients-who-request-quot-faerie-dust-quot-ar"&gt;
&lt;h2&gt;The clients who request &amp;amp;quot;Faerie Dust&amp;amp;quot; ar...&lt;/h2&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2011-01-30 20:11:13.261000-05:00&lt;/p&gt;
&lt;p&gt;The clients who request &amp;quot;Faerie Dust&amp;quot; are also the ones that will
probably also claim that they are &amp;quot;special&amp;quot; and nobody has ever had a
problem like they currently have. Pointing out a web page or a book
which describes a similar problem to theirs will at best get you dirty
looks and sometimes even a boot out the door.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category></entry><entry><title>Testing with PySpark</title><link href="https://slott56.github.io/2022_11_22-testing_with_pyspark.html" rel="alternate"></link><published>2022-11-22T11:00:00-05:00</published><updated>2022-11-22T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-testing_with_pyspark.html</id><summary type="html">&lt;p&gt;This isn't about details of pySpark. This is about the philosophy of
testing when working with a large, complex framework, like pySpark,
pandas, numpy, or whatever.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Use data subsets.&lt;/p&gt;
&lt;p&gt;Write unit tests for the functions that process the data.&lt;/p&gt;
&lt;p&gt;Don't test pyspark itself. Test the code you write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This isn't about details of pySpark. This is about the philosophy of
testing when working with a large, complex framework, like pySpark,
pandas, numpy, or whatever.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;Use data subsets.&lt;/p&gt;
&lt;p&gt;Write unit tests for the functions that process the data.&lt;/p&gt;
&lt;p&gt;Don't test pyspark itself. Test the code you write.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-history"&gt;
&lt;h2&gt;Some History&lt;/h2&gt;
&lt;p&gt;I've worked with folks -- data scientists specifically -- without a deep
background in software engineering.&lt;/p&gt;
&lt;p&gt;When we said their model-building applications needed a &lt;strong&gt;test case&lt;/strong&gt;,
they supplied the test case they used to validate the model.&lt;/p&gt;
&lt;p&gt;Essentially, their test script ran the entire training set. Built the
model. Did extensive statistical testing on the resulting decisions made
by the model. The test case asserted that the stats were &amp;quot;good.&amp;quot; In
fact, they recapitulated the entire model review process that had gone
on in the data science community to get the model from &amp;quot;someone's idea&amp;quot;
to a &amp;quot;central piece of the business.&amp;quot;&lt;/p&gt;
&lt;p&gt;The test case ran for hours and required a huge server loaded up with
GPUs. It cost a fortune to run. And. It tended to timeout the deployment
pipeline.&lt;/p&gt;
&lt;p&gt;This isn't what we mean by &amp;quot;test.&amp;quot; Our mistake.&lt;/p&gt;
&lt;p&gt;We had to explain that &lt;strong&gt;a unit test demonstrates the code works&lt;/strong&gt;. That
was all. It shouldn't involve the full training set of data and the full
training process with all the hyperparameter tuning and hours of compute
time. We don't need to revalidate your model. We want to know the code
won't crash. We'd like 100% code coverage. But the objective is little
more than show it won't crash when we deploy it.&lt;/p&gt;
&lt;p&gt;It was difficult to talk them down from full training sets. They
couldn't see the value in testing code in isolation. A phrase like &amp;quot;just
enough data to prove the thing could plausibly work with real data&amp;quot;
seemed to resonate.&lt;/p&gt;
&lt;p&gt;A few folks complained that a numpy array with a few rows didn't really
show very much. We had to explain (more than once) that we didn't really
want to know all the algorithmic and performance nuances. We mostly
wanted to know it wouldn't crash when we applied it to production data.
We agreed with them the test case didn't show much. We weren't qualified
to revalidate the model; we were only qualified to run their training
process for them. If they had done enough work to be sure we *could*
run it.&lt;/p&gt;
&lt;p&gt;(It was a bank. Software deployments have rules. An AI model-building
app is still an app. It still goes through the same CI/CD pipeline as
demand deposit account software changes. It's a batch job, really, just
a bit more internally sophisticated than the thing that clears checks.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-structure"&gt;
&lt;h2&gt;Some Structure&lt;/h2&gt;
&lt;p&gt;I lean toward the following tiers of testing:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Unit tests of every class and function. 100% code coverage here. I
suggest using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-cov&lt;/span&gt;&lt;/tt&gt; packages to tracking
testing and make sure every line of code has some test case. For a
few particularly tricky things, every logic path is better than
simply testing lines of code. In some cases, every line of code will
tend to touch every logic path, but seems less burdensome.&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;hypothesis&lt;/tt&gt; for the more sensitive numeric functions. In “data
wrangling” applications there may not be too many of these. In the
machine learning and model application software, there may be more
sophisticated math that benefits from hypothesis testing.&lt;/li&gt;
&lt;li&gt;Write larger integration tests that mimic &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt; processing,
using multiple functions or classes to be sure they work together
correctly, but without the added complication of actually using
pySpark. This means creating mocks for some of the libraries using
&lt;tt class="docutils literal"&gt;unittest.mock&lt;/tt&gt; objects. This is a fair bit of work, but it pays
handsome dividends when debugging. For well-understood &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt;
APIs, it should be easy to provide mocked results for the app
components under test to use. For the less well-understood parts, the
time spent building a mock will often provide useful insight into how
(and why) it works the way it does. In rare cases, building the mock
suggests a better design that's easier to test.&lt;/li&gt;
&lt;li&gt;Finally. Write a few overall acceptance tests that use your modules
and also start and run a small &lt;tt class="docutils literal"&gt;pyspark&lt;/tt&gt; instance from the command
line. For this, I really like using &lt;tt class="docutils literal"&gt;behave&lt;/tt&gt;, and writing the
acceptance testing cases using the Gherkin language. This enforces a
very formal “Given-When-Then” structure on the test scenarios, and
allows you to write in English. You can share the Gherkin with users
and other stakeholders to be sure they agree on what the application
should do.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Each tier of testing builds up a larger, and more complete picture of
the overall application.&lt;/p&gt;
&lt;p&gt;More important, we don't emphasize running pySpark and testing it. It
already works. It has it's own tests. We need to test the stuff we
wrote, not the framework.&lt;/p&gt;
&lt;p&gt;We need to test our code in isolation.&lt;/p&gt;
&lt;p&gt;We need to test integrated code with mocked pySpark.&lt;/p&gt;
&lt;p&gt;Once we're sure our code is likely to work, the next step is
confirmation that the important parts do work with pySpark. For
life-critical applications, the integration tests will need to touch
100% of the logic paths. For data analytics, extensive integration
testing is a lot of cost for relatively little benefit.&lt;/p&gt;
&lt;p&gt;Even for data analytics, testing is a lot of work. The alternative is
hope and prayer. I suggest starting with small unit tests, and expanding
from there.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="unit testing"></category><category term="pySpark"></category><category term="gherkin"></category><category term="#python"></category></entry><entry><title>Buzz in the general public regarding software bugs</title><link href="https://slott56.github.io/2022_11_22-buzz_in_the_general_public_regarding_software_bugs.html" rel="alternate"></link><published>2022-11-22T10:17:00-05:00</published><updated>2022-11-22T10:17:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-22:/2022_11_22-buzz_in_the_general_public_regarding_software_bugs.html</id><summary type="html">&lt;p&gt;I got this the other day: &amp;quot;there seems to be a lot of buzz out in the
general public regarding software bugs&amp;quot;.&lt;/p&gt;
&lt;p&gt;Attached to this was an article from The Economist in 2003 plus one
from 2010. To me, this doesn't seem to be a &amp;quot;lot&amp;quot; of buzz. But what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I got this the other day: &amp;quot;there seems to be a lot of buzz out in the
general public regarding software bugs&amp;quot;.&lt;/p&gt;
&lt;p&gt;Attached to this was an article from The Economist in 2003 plus one
from 2010. To me, this doesn't seem to be a &amp;quot;lot&amp;quot; of buzz. But what
do I know?&lt;/p&gt;
&lt;p&gt;Further, it did &lt;em&gt;not&lt;/em&gt; come from someone outside the software/IT
industry. It came from a DBA. I guess the presence of this email in
my inbox must mean some DBA's are surprised that there are bugs. I
guess they were surprised to see &amp;quot;bug&amp;quot; in a general-interest
magazine.&lt;/p&gt;
&lt;p&gt;They also forwarded a link to &lt;a class="reference external" href="http://www.glitchthebook.com/"&gt;http://www.glitchthebook.com/&lt;/a&gt;. This
looks more interesting than a writer for The Economist
(&lt;a class="reference external" href="http://www.economist.com/"&gt;http://www.economist.com/&lt;/a&gt;) providing information to a general
audience that every professional should already know.&lt;/p&gt;
&lt;p&gt;I guess it could be interesting when someone notices &amp;quot;bug&amp;quot; in a
general-interest magazine.&lt;/p&gt;
&lt;div class="section" id="hidden-cost-hogwash"&gt;
&lt;h2&gt;Hidden Cost Hogwash&lt;/h2&gt;
&lt;p&gt;I object, however to this &amp;quot;hidden cost&amp;quot; hogwash. Bugs have an
explicit, obvious, direct cost. There may be &amp;quot;hidden costs&amp;quot; but they
are largely irrelevant and pale in comparison to direct costs.&lt;/p&gt;
&lt;p&gt;What we need are articles not on the &amp;quot;hidden cost&amp;quot;, but on actual
bugs. In particular, there are two kinds of actual costs that we need
to look at: &amp;quot;hidden bugs&amp;quot; and &amp;quot;compound bugs&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Hidden Bugs.&lt;/strong&gt;
These are things simply below the user interface
level. They're present and they're often worked-around by UI
hacks. Hidden Bugs are more costly than visible bugs. Complex
multi-layered and multi-component architectures are packed with
hidden bugs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compound Bugs.&lt;/strong&gt;
These are hidden bugs where the workaround also
has a bug. The interface file has an intermittent glitch, so the
web services are cluttered with &lt;strong&gt;try:&lt;/strong&gt; statements. The &lt;strong&gt;try:&lt;/strong&gt;
statements, themselves, harbor bugs, so we have to then add
&lt;strong&gt;assert&lt;/strong&gt; statements and declare it &amp;quot;defensive programming&amp;quot;. The
net effect is to simply log something that was provided to the
interface incorrectly. Sigh.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We shouldn't waste time talking about &amp;quot;hidden costs&amp;quot; of glitches
when we aren't even sure what the actual up-front costs are. If we
knew the costs, we'd spend a bit more on the software to prevent
the bugs in the first place.&lt;/p&gt;
&lt;p&gt;We also shouldn't be surprised to see &amp;quot;bug&amp;quot; in a general-interest
magazine.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="software process improvement"></category><category term="API Design"></category><category term="defensive programming"></category></entry><entry><title>Generators as Stacks of Operations</title><link href="https://slott56.github.io/2022_11_15-generators_as_stacks_of_operations.html" rel="alternate"></link><published>2022-11-15T11:00:00-05:00</published><updated>2022-11-15T11:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-15:/2022_11_15-generators_as_stacks_of_operations.html</id><summary type="html">&lt;p&gt;See
&lt;a class="reference external" href="https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff"&gt;https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm delighted by this article.&lt;/p&gt;
&lt;p&gt;I was shown only the first, horrible, example. I think the idea was to
push back on the idea of complex generators. I fumed.&lt;/p&gt;
&lt;p&gt;Then I read the entire article.&lt;/p&gt;
&lt;p&gt;Now I'm fuming at someone who posted the first example …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See
&lt;a class="reference external" href="https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff"&gt;https://towardsdatascience.com/building-generator-pipelines-in-python-8931535792ff&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm delighted by this article.&lt;/p&gt;
&lt;p&gt;I was shown only the first, horrible, example. I think the idea was to
push back on the idea of complex generators. I fumed.&lt;/p&gt;
&lt;p&gt;Then I read the entire article.&lt;/p&gt;
&lt;p&gt;Now I'm fuming at someone who posted the first example -- apparently
having failed to read the rest of the post.&lt;/p&gt;
&lt;p&gt;This idea of building a stack of iterators is very, very good.&lt;/p&gt;
&lt;p&gt;The example (using simple operations) can be misleading. A follow-on
example doing something like file parsing might be helpful. But, if you
go too far, you wind up writing an entire book about Functional
Programming in Python.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="generator functions"></category></entry><entry><title>Fighting Against Over-Engineering</title><link href="https://slott56.github.io/2022_11_08-fighting_against_over_engineering.html" rel="alternate"></link><published>2022-11-08T16:18:00-05:00</published><updated>2022-11-08T16:18:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-11-08:/2022_11_08-fighting_against_over_engineering.html</id><summary type="html">&lt;p&gt;I've been trying to help some folks who have a &amp;quot;search&amp;quot; algorithm that's
slow.&lt;/p&gt;
&lt;p&gt;They know it's slow -- that's pretty obvious.&lt;/p&gt;
&lt;p&gt;They're -- unfortunately -- &lt;strong&gt;sure&lt;/strong&gt; that asyncio will help. That's not
an obvious conclusion. It involves no useful research. Indeed, that's a
kind of magical thinking. Which leads me to consider …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been trying to help some folks who have a &amp;quot;search&amp;quot; algorithm that's
slow.&lt;/p&gt;
&lt;p&gt;They know it's slow -- that's pretty obvious.&lt;/p&gt;
&lt;p&gt;They're -- unfortunately -- &lt;strong&gt;sure&lt;/strong&gt; that asyncio will help. That's not
an obvious conclusion. It involves no useful research. Indeed, that's a
kind of magical thinking. Which leads me to consider the process of
over-engineering.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Over-engineering is essentially a technique for burning brain-calories
on planning to build something instead of building something.&lt;/p&gt;
&lt;p&gt;The distinction is &amp;quot;planning&amp;quot; vs. &amp;quot;doing.&amp;quot;&lt;/p&gt;
&lt;p&gt;Lots of folks subscribe to Methodology Magic Thinking (MMT™). The core
tenet of MMT is that some  methodology is good, and more methodology is
better.&lt;/p&gt;
&lt;p&gt;The classic waterfall methodology expects requirements, design, code,
test, and what-not, all flowing downhill. A series of waterfalls.&lt;/p&gt;
&lt;p&gt;The more modern agile-fall methodology expects requirements, design,
code, test, and what-not all being done in tiny MVP slices.&lt;/p&gt;
&lt;p&gt;Why is this bad?&lt;/p&gt;
&lt;p&gt;Its bad because it falls apart when confronted with really difficult
algorithm and data structure problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-breaks"&gt;
&lt;h2&gt;What Breaks?&lt;/h2&gt;
&lt;p&gt;The thing that breaks is the &amp;quot;learn about the technology&amp;quot; or &amp;quot;learn
about the problem domain&amp;quot; things that we need to do. We like to pretend
with understand the technology -- in spite of the obvious information
that we're rarely &lt;strong&gt;experts&lt;/strong&gt;. We're smart. We're capable. But. We're
not &lt;strong&gt;experts&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This applies to both the solution technology (i.e., language,
persistence, framework, etc.) and the problem domain.&lt;/p&gt;
&lt;p&gt;When we have a process that takes *forever* to run, we've got a bad
algorithm/data structure, and we don't know what to do.&lt;/p&gt;
&lt;p&gt;We need to explore.&lt;/p&gt;
&lt;p&gt;And.&lt;/p&gt;
&lt;p&gt;Managers rarely permit exploration.&lt;/p&gt;
&lt;p&gt;They have a schedule. The waterfall comes with a schedule. The agilefall
sprints have timelines. And these are rarely negotiable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-some-wrong-things-to-do"&gt;
&lt;h2&gt;What Are Some Wrong Things to Do?&lt;/h2&gt;
&lt;p&gt;One wrong thing to do is to pick some technology and dig in hard. The
asyncio module is not magical pixie dust. It doesn't make arbitrary bad
code run faster. This is true in general. Picking a solution technology
isn't right. Exploring alternatives -- emphasis on the plural -- is
essential.&lt;/p&gt;
&lt;p&gt;Another wrong thing to do is demand yet more process. More design docs.
More preliminary analysis docs. More preliminary study. More
over-engineering.&lt;/p&gt;
&lt;p&gt;This is unhelpful. There are too many intellectual vacuums. And nature
abhors a vacuum. So random ideas get sucked in. Some expertise in the
language/tool/framework is required. Some expertise in the problem
domain is required. Avoid assumptions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-we-do"&gt;
&lt;h2&gt;What Should We Do?&lt;/h2&gt;
&lt;p&gt;We have to step back from the technology trap. We're not &lt;strong&gt;experts&lt;/strong&gt;: we
need to learn more. Which means exploring more. Which means putting time
in the schedule for this.&lt;/p&gt;
&lt;p&gt;We have to understand the problem domain better. We're not &lt;strong&gt;experts&lt;/strong&gt;:
we need to learn more. Which means putting time in the schedule for
this.&lt;/p&gt;
&lt;p&gt;We have to step back from the &amp;quot;deliverable code&amp;quot; trap. Each line of code
is not a precious gift from some eternal god of code. It's an idea. And
since the thing doesn't run well, it's provably a &lt;strong&gt;bad&lt;/strong&gt; idea.&lt;/p&gt;
&lt;p&gt;Code needs to be deleted. And rewritten. And rewritten again. And
benchmarked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frustration"&gt;
&lt;h2&gt;Frustration&lt;/h2&gt;
&lt;p&gt;I like fixing bad code. I like helping people fix bad code.&lt;/p&gt;
&lt;p&gt;I can't -- however -- work with folks who can't delete the old bad code.&lt;/p&gt;
&lt;p&gt;It's unfortunate when they reach out and then block progress with a
number of constraints that amount to &amp;quot;We can't focus on this; we can't
make changes rapidly. Indeed, we're unlikely to make any changes.&amp;quot;&lt;/p&gt;
&lt;p&gt;The only way to learn is to become an expert is something. This takes
time. To minimize the time means work with focus and work rapidly.&lt;/p&gt;
&lt;p&gt;Instead of working rapidly, they want magical pixie dust that makes
things faster. They want me to tell them were the &amp;quot;Turbo Boost&amp;quot; button
is hidden.&lt;/p&gt;
&lt;p&gt;Sigh.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="design"></category><category term="architecture"></category><category term="methodology"></category></entry><entry><title>Some Functional Programming in Python material</title><link href="https://slott56.github.io/2022_10_25-some_functional_programming_in_python_material.html" rel="alternate"></link><published>2022-10-25T08:00:00-04:00</published><updated>2022-10-25T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-10-25:/2022_10_25-some_functional_programming_in_python_material.html</id><summary type="html">&lt;p&gt;This is bonus content for the forthcoming &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;Functional Python Programming
3rd
edition&lt;/a&gt;
book. It didn't make it into the book because -- well -- it was just too
much of the wrong kind of detail.&lt;/p&gt;
&lt;p&gt;See this &amp;quot;&lt;a class="reference external" href="https://itmaybeahack.com/buildingskills/Tough_TCO.pdf"&gt;Tough
TCO&lt;/a&gt;&amp;quot; document
for some thoughts on Tail-Call Optimization that can be particularly
difficult. This …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is bonus content for the forthcoming &lt;a class="reference external" href="https://www.packtpub.com/product/functional-python-programming-third-edition/9781803232577"&gt;Functional Python Programming
3rd
edition&lt;/a&gt;
book. It didn't make it into the book because -- well -- it was just too
much of the wrong kind of detail.&lt;/p&gt;
&lt;p&gt;See this &amp;quot;&lt;a class="reference external" href="https://itmaybeahack.com/buildingskills/Tough_TCO.pdf"&gt;Tough
TCO&lt;/a&gt;&amp;quot; document
for some thoughts on Tail-Call Optimization that can be particularly
difficult. This isn't terribly original, but I think it's helpful for
folks working through more complex problems from a functional
perspective.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Why a PDF?&amp;quot; I've been working with with LaTeX, and the switching to
other ways of editing and presenting code seemed like too much work.&lt;/blockquote&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="functional python programming"></category><category term="tail call optimization"></category></entry><entry><title>Books! Books! More Channels!</title><link href="https://slott56.github.io/2022_09_21-books_books_more_channels.html" rel="alternate"></link><published>2022-09-21T15:05:00-04:00</published><updated>2022-09-21T15:05:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-09-21:/2022_09_21-books_books_more_channels.html</id><summary type="html">&lt;p&gt;I started with the Apple Books platform because it's an easy default for
me.&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I started with the Apple Books platform because it's an easy default for
me.&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many folks know some Python, but struggle with the architectural balance
between writing bulk processing in SQL or writing it in Python. For too
many developers, SQL is effectively the only tool they can use. With a
variety of tools, it becomes easier to solve a wider variety of problems
effectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="google-play"&gt;
&lt;h3&gt;Google Play&lt;/h3&gt;
&lt;p&gt;Now, I'm duplicating the books on Google Play. Here's &lt;strong&gt;Unlearning
SQL&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details?id=23WAEAAAQBAJ"&gt;https://play.google.com/store/books/details?id=23WAEAAAQBAJ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've made a clone of &lt;strong&gt;Pivot to Python&lt;/strong&gt;, also.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US"&gt;https://play.google.com/store/books/details/Steven_F_Lott_Unlearning_SQL?id=23WAEAAAQBAJ&amp;amp;hl=en_US&amp;amp;gl=US&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Both books are (intentionally) short to help experts make rapid
progress.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="just-bought-unlearning-sql-thanks-for-helping-me"&gt;
&lt;h3&gt;Just bought Unlearning SQL - Thanks for helping me...&lt;/h3&gt;
&lt;p&gt;Robert Lucente&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2022-08-26 17:02:51.255000-04:00&lt;/p&gt;
&lt;p&gt;Just bought Unlearning SQL - Thanks for helping me break out of not just
thinking about sql&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Enterprise Python -- Some initial thoughts</title><link href="https://slott56.github.io/2022_08_16-enterprise_python_some_initial_thoughts.html" rel="alternate"></link><published>2022-08-16T08:00:00-04:00</published><updated>2022-08-16T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-16:/2022_08_16-enterprise_python_some_initial_thoughts.html</id><summary type="html">&lt;p&gt;In the long run, I think there's a small book here. See &lt;a class="reference external" href="https://www.infoworld.com/article/3604473/8-reasons-python-will-rule-the-enterprise-and-8-reasons-it-wont.html%20"&gt;8 reasons
Python will rule the enterprise — and 8 reasons it won’t |
InfoWorld&lt;/a&gt;.
The conclusion, &amp;quot;Teams need to migrate slowly into the future, and
adopting more Python is a way to do that,&amp;quot; seems to be sensible …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the long run, I think there's a small book here. See &lt;a class="reference external" href="https://www.infoworld.com/article/3604473/8-reasons-python-will-rule-the-enterprise-and-8-reasons-it-wont.html%20"&gt;8 reasons
Python will rule the enterprise — and 8 reasons it won’t |
InfoWorld&lt;/a&gt;.
The conclusion, &amp;quot;Teams need to migrate slowly into the future, and
adopting more Python is a way to do that,&amp;quot; seems to be sensible. Some of
the cautionary tales along the way, however, don't make as much sense.&lt;/p&gt;
&lt;p&gt;TL;DR. There are no reasons to avoid Python. Indeed, the 8 points
suggest that Python is perhaps a smart decision.&lt;/p&gt;
&lt;p&gt;I want to focus on the negatives part of this because some of them are
wrong. I think there's a &amp;quot;technology hegemony&amp;quot; viewpoint where
everything in an enterprise must be exactly the same. This tends to
prevent creative solutions to problems and mires an enterprise into
fighting problems that are inherent in bad technology choices. Also, I
think there's an enterprises are run by idiots subtext.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Popularity&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Really this is about having polyglot software
portfolio. The reasoning appears to be that a polyglot software
portfolio is impossible to maintain because (1) no one can learn an old
language, and (2) software will never be rewritten from an obsolete
language to a modern language. If these are both true, it appears the
organization is full of idiots. The notion that a polyglot tech stack
&lt;strong&gt;must&lt;/strong&gt; devolve into chaos seems to ignore the endless chain of
management decisions that are required to create chaos. Leaving obsolete
tech in place isn't a consequence of the tech, or the tech's lack of
compatibility, it's a management decision to enshrine bad ideas, frozen
in amber, forever.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Scripting Languages&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Specifically, the spreadsheet is already the
&lt;em&gt;de facto&lt;/em&gt; scripting language of choice, and nothing can be done about
it. Nothing. No one can learn to use Jupyter Lab to do business
analytics. If this is true, it appears that the organization is full of
idiots. Python will not replace all spreadsheets. A pandas data frame
will replace an opaque macro-filled nightmare with code that can be unit
tested. Imagine unit testing a spreadsheet. Consider the possibilities
of expanding business analysis work to include a few test cases; not
100% code coverage, but a few test cases to confirm the analytical
process was implemented consistently.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Dynamic Languages&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Specifically, dynamic languages are useless
for reliable software because there's no comprehensive type checking
across some interfaces. Which begs the question of why there are
software failures in statically typed languages. More importantly,
complaining about dynamic languages raises important questions about
integration and acceptance testing procedures in an organization in
general. All languages require extensive test suites for all developed
code. All languages benefit from static analysis. Sometimes the compiler
does this, sometimes external tools do the linting. Sometimes folks use
both the compiler and linters to check types. If we are sure dynamic
languages will break, are we equally sure statically typed languages
cannot break? Or, do we take steps to prevent problems? I think we tend
to take a lot of steps to make sure software works.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Tooling&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;I can't figure this point out. But somehow C++ or Java
have better tools for managing large source code bases. There are no
details behind this claim, so I'm left to guess. I would suggest that
the &amp;quot;incremental recompilation&amp;quot; problem of large C++ (and Java) code
bases is its own nightmare. Folks go to great lengths to architect C++
so that an implementation change does not require recompilation of
everything. While this could be seen as &amp;quot;evolved to handle the jobs that
enterprise coders need done&amp;quot;, I submit that there's a deeper problem
here, and stepping away from the compiler is a better solution than
complex architectures. See Lakos &lt;a class="reference external" href="https://www.oreilly.com/library/view/large-scale-c-volume/9780133927573/"&gt;Large-Scale C++ Software
Design&lt;/a&gt; for
some architectural features that don't solve any enterprise problem, but
solve the scaling problem of big C++ applications. This bumps into the
micro-services/monolith discussion, and the question of carefully
testing each interface. None of which has anything to do with Python
specifically.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Machine Learning and Data Science&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;These are fads, apparently.
I'm not sure I can respond to this, since it has little to do with
Python. Of course, Python has one of the most complete data science
toolsets, so perhaps avoiding data science makes it easier to avoid
Python.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Rapid Growth&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;The growth of Python is rapid, and there's no
promise of endless backwards compatibility. This is a consequence of
active development and learning. I think it's better than the endless
backwards compatibility that leads to JavaScript's list of WATs. Or the
endless confusion between java.util.date and Joda-Time. The idea that no
one will ever look at the Enterprise code base for Common
Vulnerabilities and Exposures seems to indicate a lack of concern for
reliability or security. Since the entire compiled code base has to be
checked for vulnerabilities, why not also check the Python code base for
ongoing upgrades and changes and enhancements? Is code really written
once and never looked at again? If so, it sounds like an organization
run by idiots.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Python Shipped With Some OS's&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;There's a long story of woe that
stems from relying on the OS-supplied Python. The lesson learned here is
&lt;strong&gt;Never Rely on the OS Python; Always Install Your Own&lt;/strong&gt;. This doesn't
seem like a reason to avoid Python in the enterprise. It seems like an
important lesson learned for all software that's not part of the OS:
always install your own. I've been using
&lt;a class="reference external" href="https://docs.conda.io/en/latest/miniconda.html"&gt;Miniconda&lt;/a&gt; to spin
up Python environments and absolutely love it.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Open Source Software&lt;/strong&gt;.&lt;/dt&gt;
&lt;dd&gt;Agreed. Nothing to do with Python
specifically. Everything to do with tech stack and architecture. The
question of using Open Source in the first place doesn't seem difficult.
It's a well-established way to reduce start-up costs for software
development.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of the eight points, two seem to be completely generic issues. Yes,
Machine Learning is new, and yes, choices must be made. The two
questions around scripting and dynamic languages seem specious; all
programming requires careful design and testing. The Python shipped with
the OS is a non-concern; the lesson learned is clear.&lt;/p&gt;
&lt;p&gt;We have have three remaining points:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Polyglot Portfolio&lt;/strong&gt; (From pursuing popularity.) This is already
the case in most Enterprises, and needs to be managed through
aggressive retiring of old software. I may have taken decades to
build that old app, but it often takes months to rewrite it in a new
language. The legacy app provides acceptance test cases; it's often
filled with cruft and detritus of old decisions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tooling&lt;/strong&gt;. Agreed. Tooling is important. Not sure that Java or C++
have a real edge here, but, tooling is important.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Growth and Change&lt;/strong&gt;. Python's rapid evolution requires active
management. An enterprise must adopt a YBYO (You Build it You Own it)
attitude so that every level of management is aware of the components
they're responsible for. CVE's are checked, Python PEP's are checked.
Tools like &lt;a class="reference external" href="https://tox.wiki/en/latest/"&gt;tox&lt;/a&gt; or
&lt;a class="reference external" href="https://nox.thea.codes/en/stable/"&gt;nox&lt;/a&gt; are used to build (and
rebuild) virtual environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If these seem like a high bar, perhaps there are deeper issues in the
enterprise. If adding Yet Another Language is a problem, then it's
time to start retiring some languages. If Adding Another Tool is a
problem, it's worth examining the existing tool chain to see why it's
such a burden. If the idea of change is terrifying, perhaps the
ongoing change is not being watched carefully enough.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="enterprise"></category></entry><entry><title>Tragedy Averted</title><link href="https://slott56.github.io/2022_08_09-tragedy_averted.html" rel="alternate"></link><published>2022-08-09T08:00:00-04:00</published><updated>2022-08-09T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-09:/2022_08_09-tragedy_averted.html</id><summary type="html">&lt;p&gt;I almost made a terrible blunder.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for some background. This is
a &amp;quot;Literate Programming&amp;quot; tool. I started fooling around with this kind
of thing back in '05 (maybe even earlier.) This is not the blunder. The
whole idea of literate programming is not very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I almost made a terrible blunder.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for some background. This is
a &amp;quot;Literate Programming&amp;quot; tool. I started fooling around with this kind
of thing back in '05 (maybe even earlier.) This is not the blunder. The
whole idea of literate programming is not very popular. I'm a fan of
&lt;a class="reference external" href="https://jupyterbook.org/en/stable/intro.html"&gt;Jupyter{Book}&lt;/a&gt; as the
state of the art in sophisticated literate programming, if you're
interested in it.&lt;/p&gt;
&lt;p&gt;In my case, I started this project so long ago, I
used &lt;a class="reference external" href="https://docutils.sourceforge.io"&gt;docutils&lt;/a&gt;. This was
long before &lt;a class="reference external" href="https://github.com/sphinx-doc/sphinx"&gt;Sphinx&lt;/a&gt; arrived on
the scene. I never updated my little project to use Sphinx. The point
was to have a kind of pure literate programming tool that could work
with a variety of markup languages, including (but not limited to) RST.&lt;/p&gt;
&lt;p&gt;Recently, I learned about &lt;a class="reference external" href="https://plantuml.com"&gt;PlantUML&lt;/a&gt;. The idea
of a text description of a diagram is appealing. I don't really need to
draw it; I just need to specify what's in it and let
&lt;a class="reference external" href="https://graphviz.org"&gt;graphviz&lt;/a&gt; do the rest. This tool is very, very
cool. You can capture ideas quickly. You can refine and expand on ideas
until you reach a point where code makes more sense than a picture of
code.&lt;/p&gt;
&lt;p&gt;For some things, you can gather data and draw a picture of things *as
they are*. This is particularly valuable for cloud-based infrastructure
where a few queries leads to PlantUML source that is depicted very
nicely.&lt;/p&gt;
&lt;p&gt;Which leads to the idea of Literate Programming including UML diagrams.&lt;/p&gt;
&lt;p&gt;Doesn't sound too difficult. I can create an extension to &lt;strong&gt;docutils&lt;/strong&gt;
to introduce a UML directive. The resulting RST would look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
..  uml::

    left to right direction
    skinparam actorStyle awesome

    actor &amp;quot;Developer&amp;quot; as Dev
    rectangle PyWeb {
        usecase &amp;quot;Tangle Source&amp;quot; as UC_Tangle
        usecase &amp;quot;Weave Document&amp;quot; as UC_Weave
    }
    rectangle IDE {
        usecase &amp;quot;Create WEB&amp;quot; as UC_Create
        usecase &amp;quot;Run Tests&amp;quot; as UC_Test
    }
    Dev --&amp;gt; UC_Tangle
    Dev --&amp;gt; UC_Weave
    Dev --&amp;gt; UC_Create
    Dev --&amp;gt; UC_Test

    UC_Test --&amp;gt; UC_Tangle
&lt;/pre&gt;
&lt;p&gt;This could be handy to have the diagrams as part of the documentation
that tangles the working the code. One source for all of it.&lt;/p&gt;
&lt;p&gt;I started down the path of researching &lt;strong&gt;docutils&lt;/strong&gt; extensions. Got
pretty far. Far enough that I had an empty repository and everything. I
was about ready to start creating spike solutions.&lt;/p&gt;
&lt;p&gt;Then.&lt;/p&gt;
&lt;p&gt;[&lt;em&gt;music cue&lt;/em&gt;] *&lt;a class="reference external" href="https://www.youtube.com/watch?v=9mSVzGnKsXw"&gt;duh duh
duuuuuuh&lt;/a&gt;*&lt;/p&gt;
&lt;p&gt;I found that Sphinx already has an extension for PlantUML. I almost
started reading the code to see how it worked.&lt;/p&gt;
&lt;p&gt;Then I realized how dumb that was. It already works. Why read the code?
Why not install it?&lt;/p&gt;
&lt;p&gt;I had a choice to make.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Continue building my own &lt;strong&gt;docutils&lt;/strong&gt; plug-in.&lt;/li&gt;
&lt;li&gt;Switch to Sphinx.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some complications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My Literate Programming tool produces RST that *may* not be
compatible with Sphinx.&lt;/li&gt;
&lt;li&gt;It's yet another dependency in a tool that started out with zero
dependencies. I've added pytest and tox. What next?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What to do?&lt;/p&gt;
&lt;p&gt;I have to say that Git is amazing. I can make a branch for the spike. If
it works, pull request. If it doesn't work, delete the branch. This
continues to be game-changing to me. I'm old. I remember when we had to
back up the whole project directory tree before making this kind of
change.&lt;/p&gt;
&lt;p&gt;It worked. My tool's RST (with one exception) worked perfectly with
Sphinx. The one exception was an obscure directive, &lt;tt class="docutils literal"&gt;.. class:: name&lt;/tt&gt;,
used to provide an HTML class name for the following block. This always
should have been the &lt;strong&gt;docutils&lt;/strong&gt; &lt;tt class="docutils literal"&gt;.. container:: name&lt;/tt&gt; directive.
With this fix, we're good to go.&lt;/p&gt;
&lt;p&gt;I'm happy I avoided the trap of reimplementing something. Instead of
that, I upgraded from &amp;quot;bare&amp;quot; &lt;strong&gt;docutils&lt;/strong&gt; with my own CSS to Sphinx with
it's sophisticated templates and HTML Themes.&lt;/p&gt;
</content><category term="Technologies"></category><category term="sphinx"></category><category term="#python"></category><category term="literate programming"></category><category term="docutils"></category><category term="plantuml"></category><category term="pyWeb"></category></entry><entry><title>Books! Books! Books!</title><link href="https://slott56.github.io/2022_08_02-books_books_books.html" rel="alternate"></link><published>2022-08-02T08:00:00-04:00</published><updated>2022-08-02T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-08-02:/2022_08_02-books_books_books.html</id><summary type="html">&lt;p&gt;First, there's&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;First, there's&lt;/p&gt;
&lt;div class="section" id="pivot-to-python"&gt;
&lt;h2&gt;Pivot to Python&lt;/h2&gt;
&lt;div class="section" id="a-guide-for-professionals-and-skilled-beginners"&gt;
&lt;h3&gt;A Guide for professionals and skilled beginners&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/pivot-to-python/id1586977675"&gt;https://books.apple.com/us/book/pivot-to-python/id1586977675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've recently updated this to fix some cosmetic problems with title
pages, the table of contents and stuff like that. The content hasn't
changed. Yet. It's still an introduction to Python for folks who already
know how to program, they want to pivot to programming in Python.
Quickly.&lt;/p&gt;
&lt;p&gt;But wait, there's more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlearning-sql"&gt;
&lt;h2&gt;Unlearning SQL&lt;/h2&gt;
&lt;div class="section" id="when-your-only-tool-is-a-hammer-every-problem-looks-like-a-nail"&gt;
&lt;h3&gt;When your only tool is a hammer, every problem looks like a nail&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://books.apple.com/us/book/unlearning-sql/id6443164060"&gt;https://books.apple.com/us/book/unlearning-sql/id6443164060&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is all new. It's written for folks who know Python, and are
struggling with the architectural balance between writing bulk
processing in SQL or writing it in Python. For too many developers, SQL
is effectively the only tool they can use. With a variety of tools, it
becomes easier to solve a wider variety of problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="building skills books"></category><category term="#python"></category><category term="SQL"></category></entry><entry><title>Bashing the Bash -- The shell is awful and what you can do about it</title><link href="https://slott56.github.io/2022_07_26-bashing_the_bash_the_shell_is_awful_and_what_you_can_do_about_it.html" rel="alternate"></link><published>2022-07-26T08:00:00-04:00</published><updated>2022-07-26T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-26:/2022_07_26-bashing_the_bash_the_shell_is_awful_and_what_you_can_do_about_it.html</id><summary type="html">&lt;p&gt;A presentation I did recently.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/slott56/bashing-the-bash"&gt;https://github.com/slott56/bashing-the-bash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks were polite and didn't have too many questions. I guess they
fundamentally agreed: the shell is awful, we can use it for a few
things.&lt;/p&gt;
&lt;p&gt;Safe Shell Scripts Stay Simple: Set the environment, Start the
application.
---------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;The Seven S's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A presentation I did recently.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/slott56/bashing-the-bash"&gt;https://github.com/slott56/bashing-the-bash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Folks were polite and didn't have too many questions. I guess they
fundamentally agreed: the shell is awful, we can use it for a few
things.&lt;/p&gt;
&lt;p&gt;Safe Shell Scripts Stay Simple: Set the environment, Start the
application.
---------------------------------------------------------------------------&lt;/p&gt;
&lt;p&gt;The Seven S's of shell scripting.&lt;/p&gt;
&lt;p&gt;Many many thanks to &lt;a class="reference external" href="https://codeandsupply.co"&gt;Code &amp;amp; Supply&lt;/a&gt; for
hosting me.&lt;/p&gt;
</content><category term="Technologies"></category><category term="bash"></category><category term="#python"></category><category term="shell"></category></entry><entry><title>I've got a great Proof-of-Concept. How do I go forward with it?</title><link href="https://slott56.github.io/2022_07_19-ive_got_a_great_proof_of_concept_how_do_i_go_forward_with_it.html" rel="alternate"></link><published>2022-07-19T08:00:00-04:00</published><updated>2022-07-19T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-19:/2022_07_19-ive_got_a_great_proof_of_concept_how_do_i_go_forward_with_it.html</id><summary type="html">&lt;p&gt;This is the best part about Python -- you can build something quickly.
And it really works.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;What are the next steps?&lt;/p&gt;
&lt;p&gt;While there are a *lot* of possibilities, I'm focused on an
&amp;quot;enterprise work group&amp;quot; application that involves a clever web
service/RESTful API built in Flask. Maybe with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the best part about Python -- you can build something quickly.
And it really works.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;What are the next steps?&lt;/p&gt;
&lt;p&gt;While there are a *lot* of possibilities, I'm focused on an
&amp;quot;enterprise work group&amp;quot; application that involves a clever web
service/RESTful API built in Flask. Maybe with NLP.&lt;/p&gt;
&lt;p&gt;Let me catalog a bunch of things you might want to think about to
&amp;quot;productionize&amp;quot; your great idea. Here's a short list to get started.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;File System Organization&lt;/li&gt;
&lt;li&gt;Virtual Environments&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;Integration Testing&lt;/li&gt;
&lt;li&gt;Acceptance Testing&lt;/li&gt;
&lt;li&gt;Static Analysis&lt;/li&gt;
&lt;li&gt;Tool Chain&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Let's dive into each one of these. Then we'll look at Flask
deployments.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="file-system-organization"&gt;
&lt;h2&gt;File System Organization&lt;/h2&gt;
&lt;p&gt;When you're gotten something to work, the directory in which it works
is sometimes not organized ideally. There are a lot of ways to do
this, but what seems to work well is a structure like the following.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some parent directory. Often in Git&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; -- your code is here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests&lt;/tt&gt; -- your tests are here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; -- your documentation will be here&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; -- the list of packages to install. Exact,&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;requirements-dev.txt&lt;/span&gt;&lt;/tt&gt; -- the list of packages used for maintenance and development&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;environment.yml&lt;/tt&gt; -- another list of packages in conda format&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pyproject.toml&lt;/tt&gt; -- this has your tox setup in it&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; -- sometimes helpful&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that a lot of packages you see have a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;.  This is
&lt;strong&gt;only&lt;/strong&gt; needed if you're going open source your code. For
enterprise projects, this is not the first thing you will focus on.
Ignore it, for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h2&gt;Virtual Environments&lt;/h2&gt;
&lt;p&gt;When you're developing in Python you may not even worry about virtual
environments. You have Python. It works. You downloaded NLP and Flask.
You put things together and they work.&lt;/p&gt;
&lt;p&gt;The trick here is the Python ecosystem is vast, and you have (without
really observing it closely) likely downloaded a lot of projects.
Projects that depend on projects.&lt;/p&gt;
&lt;p&gt;You can't trust your current environment to be reliable or repeatable.
You'll need to use a virtual environment manager of some kind.&lt;/p&gt;
&lt;p&gt;Python's built-in virtual environment manager &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; is readily
available and works nicely.
See &lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;https://docs.python.org/3/library/venv.html&lt;/a&gt;  It's my second choice.&lt;/p&gt;
&lt;p&gt;My first choice is &lt;strong&gt;conda&lt;/strong&gt;. Start with
&lt;strong&gt;miniconda&lt;/strong&gt;. &lt;a class="reference external" href="https://docs.conda.io/en/latest/miniconda.html"&gt;https://docs.conda.io/en/latest/miniconda.html&lt;/a&gt;. Use this
to assemble your environment and retest your application to be sure
you've got everything.&lt;/p&gt;
&lt;p&gt;You'll be creating (and destroying) virtual environments until you get
it right. They're cheap. They don't impact your code in any way. Feel
free to make mistakes.&lt;/p&gt;
&lt;p&gt;When it works, build conda's environment.yml file and the
requirements.txt files. This will rebuild the environment.  You'll use
them with &lt;strong&gt;tox&lt;/strong&gt; for testing.&lt;/p&gt;
&lt;p&gt;If you don't use conda, you'll omit the environment.yml.  Nothing else
will change.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unit-testing"&gt;
&lt;h2&gt;Unit Testing&lt;/h2&gt;
&lt;p&gt;Of course, you'll need automated unit tests. You'll want 100% code
coverage. You *really* want 100% logic path coverage, but that's
aspirational. 100% code coverage is a lot of work and uncovers enough
problems that the extra testing for all logic paths seems unhelpful.&lt;/p&gt;
&lt;p&gt;You have two built-in unit testing toolsets: doctest and unittest. I
like doctest. &lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;https://docs.python.org/3/library/doctest.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You'll want to get &lt;strong&gt;pytest&lt;/strong&gt; and the &lt;strong&gt;pytest-cov&lt;/strong&gt; add-on
package. &lt;a class="reference external" href="https://docs.pytest.org/en/6.2.x/contents.html"&gt;https://docs.pytest.org/en/6.2.x/contents.html&lt;/a&gt;  &lt;a class="reference external" href="https://pytest-cov.readthedocs.io/en/latest/"&gt;https://pytest-cov.readthedocs.io/en/latest/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your test modules go in the tests directory. You know you've done it
right when you can use the &lt;strong&gt;pytest&lt;/strong&gt; command at the command line and it
finds (and runs) all your tests.&lt;/p&gt;
&lt;p&gt;This is part of your requirements-dev.txt file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-testing"&gt;
&lt;h2&gt;Integration Testing&lt;/h2&gt;
&lt;p&gt;This is unit testing without so many mocks. I recommend using pytest for
this, also. The difference is that your &amp;quot;fixtures&amp;quot; will be much more
complex. Files. Databases. Flask Clients. Certificates. Maybe starting
multiple services. All kinds of things that have a complex setup and
perhaps a complex teardown, also.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://docs.pytest.org/en/6.2.x/fixture.html#yield-fixtures-recommended"&gt;https://docs.pytest.org/en/6.2.x/fixture.html#yield-fixtures-recommended&lt;/a&gt;
for good ways to handle this more complex setup and teardown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acceptance-testing"&gt;
&lt;h2&gt;Acceptance Testing&lt;/h2&gt;
&lt;p&gt;Depending on the community of users, it may be necessary to provide
automated acceptance tests. For this, I recommend &lt;strong&gt;behave&lt;/strong&gt;.
&lt;a class="reference external" href="https://behave.readthedocs.io/en/stable/"&gt;https://behave.readthedocs.io/en/stable/&lt;/a&gt; You're can write the test cases
in the Gherkin language. This language is open-ended, and many
stakeholders can contribute to the test cases. It's not easy to get
consensus sometimes, and a more formal Gherkin test case lets people
debate, come to an agreement, and prioritize the features and scenarios
they need to see.&lt;/p&gt;
&lt;p&gt;This is part of your requirements-dev.txt file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-analysis"&gt;
&lt;h2&gt;Static Analysis&lt;/h2&gt;
&lt;p&gt;This is an extra layer of checking to be sure best practices are being
followed. There are a variety of tools for this. You *always* want to
process your code through
&lt;strong&gt;black&lt;/strong&gt;. &lt;a class="reference external" href="https://black.readthedocs.io/en/stable/"&gt;https://black.readthedocs.io/en/stable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some folks love &lt;strong&gt;isort&lt;/strong&gt; for putting the imports into a canonical
order.  &lt;a class="reference external" href="https://pycqa.github.io/isort/"&gt;https://pycqa.github.io/isort/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flake8&lt;/strong&gt; should be used to be sure there's no obviously bad
programming practices. &lt;a class="reference external" href="https://flake8.pycqa.org/en/latest/"&gt;https://flake8.pycqa.org/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm a huge fan of type hints. I consider &lt;strong&gt;mypy&lt;/strong&gt; to be
essential. &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/"&gt;https://mypy.readthedocs.io/en/stable/&lt;/a&gt;  I prefer &amp;quot;--strict&amp;quot;
mode, but that can be a high bar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tool-chain"&gt;
&lt;h2&gt;Tool Chain&lt;/h2&gt;
&lt;p&gt;You can try to manage this with &lt;strong&gt;make&lt;/strong&gt;. But don't.&lt;/p&gt;
&lt;p&gt;Download &lt;strong&gt;tox&lt;/strong&gt;, instead.  &lt;a class="reference external" href="https://tox.wiki/en/latest/index.html"&gt;https://tox.wiki/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The point of tox is to combine virtual environment setup with testing in
that virtual environment. You can -- without too much pain -- define
multiple virtual environments. You can then test the various releases of
the various packages your project depends on in various combinations.
This is how to manage a clean upgrade.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Figure out the new versions.&lt;/li&gt;
&lt;li&gt;Setup tox to test existing and new.&lt;/li&gt;
&lt;li&gt;Run tox.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I often set the tox commands to run black first, then unit testing, then
static analysis, ending with mypy --strict.&lt;/p&gt;
&lt;p&gt;When the code is reformatted by black, it's technically a build failure.
(You should have run &lt;strong&gt;black&lt;/strong&gt; manually before running &lt;strong&gt;tox&lt;/strong&gt;.)
When &lt;strong&gt;tox&lt;/strong&gt; works cleanly, you're ready to commit and push and pull
request and merge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Not an after-thought.&lt;/p&gt;
&lt;p&gt;For human documents, use Sphinx. &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;https://www.sphinx-doc.org/en/master/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Put docstrings in every package, every module, every class, every
method, and every function. Summarize *what* and *why*. (Don't
explain *how*: people can read your code.)&lt;/p&gt;
&lt;p&gt;Use the autodoc feature to create the API reference documentation from
the code. Start with this.&lt;/p&gt;
&lt;p&gt;Later, you can write a README, and some explanations, and installation
instructions, and all the things other people expect to see.&lt;/p&gt;
&lt;p&gt;For a RESTful API, be sure to write an OpenAPI specification and be sure
to test against that spec. &lt;a class="reference external" href="https://www.openapis.org"&gt;https://www.openapis.org&lt;/a&gt;. While a lot of the
examples are complicated, you can easily use a small subset to describe
your documents, the validation rules, and the transactions. You can add
the security details later. They're part of your web server, but they
don't need an extensive OpenAPI documentation at the beginning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flask-deployments"&gt;
&lt;h2&gt;Flask Deployments&lt;/h2&gt;
&lt;p&gt;Some folks like to define a flask application that can be installed in
the Python virtual environment. This means the components are on the
default &lt;tt class="docutils literal"&gt;sys.path&lt;/tt&gt; without any &amp;quot;extra&amp;quot; effort. (It's a fair amount of
effort to begin with. I'm not sure it's worth it.)&lt;/p&gt;
&lt;p&gt;When you run a flask app, you'll be using some kind of engine. NGINX,
uWSGI, GUnicorn, etc. (GUnicorn is very nice. &lt;a class="reference external" href="https://gunicorn.org"&gt;https://gunicorn.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://flask.palletsprojects.com/en/2.0.x/deploying/wsgi-standalone/"&gt;https://flask.palletsprojects.com/en/2.0.x/deploying/wsgi-standalone/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In all cases, these engines will &amp;quot;wrap&amp;quot; your Flask application. You'll
want to make your application visible by setting the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;
environment variable, naming your &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; directory. Do not run from
your project's directory.&lt;/p&gt;
&lt;p&gt;You will have the engine running in some distinct &lt;tt class="docutils literal"&gt;/opt/the_app&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;/Users/the_app&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;/usr/home/the_app&lt;/tt&gt; or some such directory,
unrelated to where the code lives. You'll use GUnicorns command-line
options to locate your app, wherever it lives on the filesystem.
GUnicorn will use &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; to find your app. Since web servers
often run as nobody, you'll need to make sure your code base is
readable. But. Not. Writable.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="enterprise"></category><category term="#python"></category></entry><entry><title>The Enterprise COBOL Conundrum</title><link href="https://slott56.github.io/2022_07_12-the_enterprise_cobol_conundrum.html" rel="alternate"></link><published>2022-07-12T08:00:00-04:00</published><updated>2022-07-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-12:/2022_07_12-the_enterprise_cobol_conundrum.html</id><summary type="html">&lt;p&gt;Enterprise COBOL is both a liability and an asset. There's tangible
value hidden in the code.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/looking-at-cobol"&gt;https://github.com/slott56/looking-at-cobol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've tweaked the presentation a little.&lt;/p&gt;
&lt;p&gt;The essential ingredients in coping with COBOL are these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use something like &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt; to parse COBOL
DDE's and process the data …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Enterprise COBOL is both a liability and an asset. There's tangible
value hidden in the code.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/looking-at-cobol"&gt;https://github.com/slott56/looking-at-cobol&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've tweaked the presentation a little.&lt;/p&gt;
&lt;p&gt;The essential ingredients in coping with COBOL are these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use something like &lt;a class="reference external" href="https://github.com/slott56/Stingray-Reader"&gt;Stingray
Reader&lt;/a&gt; to parse COBOL
DDE's and process the data in the native format.&lt;/li&gt;
&lt;li&gt;Analyze the Job Control Language (JCL) to work out the directed
acyclic graph (DAG) that leads to file and database updates. These
&amp;quot;master&amp;quot; files and databases are the data artifacts that matter most.
This is the value-creating processing. There aren't many of these
files.&lt;/li&gt;
&lt;li&gt;Create a process to clone those files, and write Python data access
modules to process the data. This is a two-way process. You'll be
shipping files from your Z/OS world to another server running Python.
In some cases, files will need to come back to Z/OS to permit legacy
processing to continue.&lt;/li&gt;
&lt;li&gt;Work backwards through the DAG to understand the COBOL apps that
update the master files. These can be rewritten as Python apps that
consume transactions and update master files/databases. Transfer
transaction files out of Z/OS to a server doing the Python
processing. Either update a shared database or send updated master
files back to Z/OS if there's further processing that needs an
updated master.&lt;/li&gt;
&lt;li&gt;Continue working backwards through the DAG, replacing COBOL with
Python until you've found source files for the transactions. Expect
to find transaction validation programs as well as transaction
analytics or reporting. The validations are useful; the analytics and
reporting can be replaced with simpler, more modern tools.&lt;/li&gt;
&lt;li&gt;When there's no more legacy processing that depends on a given master
file or database, then the Z/OS can be formally decommissioned. Have
a party.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is relatively low risk work. It's high value. The COBOL code
encodes enterprise knowledge. Preserving this knowledge in a more modern
language is a value-maintaining exercise. Indeed, the improved clarity
may be a value-creating exercise.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="COBOL"></category><category term="stingray reader"></category></entry><entry><title>Revised Understanding --&gt; Revised Data Structures --&gt; Revised Type Hints</title><link href="https://slott56.github.io/2022_07_05-revised_understanding_revised_data_structures_revised_type_hints.html" rel="alternate"></link><published>2022-07-05T08:00:00-04:00</published><updated>2022-07-05T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-07-05:/2022_07_05-revised_understanding_revised_data_structures_revised_type_hints.html</id><summary type="html">&lt;p&gt;My literate programming tool, pyWeb, has moved to version 3.1 --
supporting modern Python.&lt;/p&gt;
&lt;p&gt;Next up, version 3.2. This is a massive reworking of the data structures
involved. The rework lets me use Jinja2 for templates. There's a lot of
fiddliness to getting the end-of-line spacing right. Jinja has …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My literate programming tool, pyWeb, has moved to version 3.1 --
supporting modern Python.&lt;/p&gt;
&lt;p&gt;Next up, version 3.2. This is a massive reworking of the data structures
involved. The rework lets me use Jinja2 for templates. There's a lot of
fiddliness to getting the end-of-line spacing right. Jinja has the
following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for construct in container -%}
{{construct}}
{%- endfor %}
&lt;/pre&gt;
&lt;p&gt;The easy-to-overlook hyphens suppress spacing, allowing the construct to
be spread onto multiple lines without introducing extra newlines into
the output. This makes it a little easier to debug the templates.&lt;/p&gt;
&lt;p&gt;It now works. But. Until I get past strict type checks, there's no
reason for calling it done.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Found 94 errors in 1 file (checked 3 source files)
&lt;/pre&gt;
&lt;p&gt;The bulk of the remaining problems seem to be new methods where I forgot
to include a type hint. The more pernicious problems are places where I
have inconsistent hints and Liskov substitution problems. The worst a
places where I had a last-minute change change and switched from &lt;tt class="docutils literal"&gt;str&lt;/tt&gt;
to &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; and did not actually follow-through and make required
changes.&lt;/p&gt;
&lt;p&gt;The biggest issue?&lt;/p&gt;
&lt;p&gt;When building an AST, it's common to have a union of a wide variety of
types. This union often has a discriminator value to separate
&lt;tt class="docutils literal"&gt;NamedChunk&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;OutputChunk&lt;/tt&gt;. This is &amp;quot;type narrowing&amp;quot; and there
are a variety of approaches. I think my best choice is a &lt;tt class="docutils literal"&gt;TypeGuard&lt;/tt&gt;
declaration. This is new to me, so I've got to do some learning before I
can properly define the required type guard function(s).
(See &lt;a class="reference external" href="https://mypy.readthedocs.io/en/stable/type_narrowing.html#user-defined-type-guards"&gt;https://mypy.readthedocs.io/en/stable/type_narrowing.html#user-defined-type-guards&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I'm looking forward (eagerly) to finishing the cleanup.&lt;/p&gt;
&lt;p&gt;The problem is that I'm -- also -- working on the updates to &lt;a class="reference external" href="https://www.google.com/search?client=safari&amp;amp;rls=en&amp;amp;q=packt+functional+python+programming+2e&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8"&gt;Functional
Python
Programming&lt;/a&gt;.
The PyWeb project is a way to relax my brain from editing the book.&lt;/p&gt;
&lt;p&gt;Which means the pyWeb updates have to wait for Chapter 4 and 5 edits.
(Sigh.)&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>Massive Rework of Data Structures</title><link href="https://slott56.github.io/2022_06_28-massive_rework_of_data_structures.html" rel="alternate"></link><published>2022-06-28T08:00:00-04:00</published><updated>2022-06-28T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-28:/2022_06_28-massive_rework_of_data_structures.html</id><summary type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html"&gt;My Shifting Understanding and A Terrible Design
Mistake&lt;/a&gt;,
I had a design that focused on serialization instead of proper modeling
of the objects in question.&lt;/p&gt;
&lt;p&gt;Specifically, I didn't start with a suitable abstract syntax tree (AST)
structure. I started with an algorithmic view of &amp;quot;weaving&amp;quot; and
&amp;quot;tangling …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As noted in &lt;a class="reference external" href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html"&gt;My Shifting Understanding and A Terrible Design
Mistake&lt;/a&gt;,
I had a design that focused on serialization instead of proper modeling
of the objects in question.&lt;/p&gt;
&lt;p&gt;Specifically, I didn't start with a suitable abstract syntax tree (AST)
structure. I started with an algorithmic view of &amp;quot;weaving&amp;quot; and
&amp;quot;tangling&amp;quot; to transform a WEB of definitions into documentation and
code. The weaving and tangling are two of the three distinct
serializations of a common AST.&lt;/p&gt;
&lt;p&gt;The third serialization is the common source format that underpins the
WEB of definitions. Here's an example that contains a number of
definitions and a tangled output file.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Fast Exponentiation
===================

A classic divide-and-conquer algorithm.

&amp;#64;d fast exp &amp;#64;{
def fast_exp(n: int, p: int) -&amp;gt; int:
    match p:
        case 0:
            return 1
        case _ if p % 2 == 0:
            t = fast_exp(n, p // 2)
            return t * t
        case _ if p % 1 == 0:
            return n * fast_exp(n, p - 1)
&amp;#64;| fast_exp
&amp;#64;}

With a test case.

&amp;#64;d test case &amp;#64;{
&amp;gt;&amp;gt;&amp;gt; fast_exp(2, 30)
1073741824
&amp;#64;}

&amp;#64;o example.py &amp;#64;{
&amp;#64;&amp;lt; fast exp &amp;#64;&amp;gt;

__test__ = {
    &amp;quot;test 1&amp;quot;: '''
&amp;#64;&amp;lt; test case &amp;#64;&amp;gt;
    '''
}
&amp;#64;| __test__
&amp;#64;}

Use ``python -m doctest`` to test.

Macros
------

&amp;#64;m

Names
-----

&amp;#64;u
&lt;/pre&gt;
&lt;p&gt;This example uses RST as the markup language for the woven document. A
tool can turn this simplified document into complete RST with
appropriate wrappers around the code blocks. The tool can also weave the
&lt;tt class="docutils literal"&gt;example.py&lt;/tt&gt; file from the source document.&lt;/p&gt;
&lt;p&gt;The author can focus on exposition, explaining the algorithm. The reader
gets the key points without the clutter of programming language
overheads and complications.&lt;/p&gt;
&lt;p&gt;The compiler gets a tangled source.&lt;/p&gt;
&lt;p&gt;The key point is to have a tool that's (mostly) agnostic with respect to
programming language and markup language. Being fully agnostic isn't
possible, of course. The &lt;tt class="docutils literal"&gt;&amp;#64;d name &amp;#64;{code&amp;#64;}&lt;/tt&gt; constructs are transformed
into markup blocks of some sophistication. The &lt;tt class="docutils literal"&gt;&amp;#64;&amp;lt;name&amp;#64;&amp;gt;&lt;/tt&gt; becomes a
hyperlink, with suitable markup. Similarly, the cross
reference-generating commands, &lt;tt class="docutils literal"&gt;&amp;#64;m&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&amp;#64;u&lt;/tt&gt;, generate a fair amount
of markup content.&lt;/p&gt;
&lt;p&gt;I now have Jinja templates to do this in RST. I'll also have to provide
LaTeX and HTML. Further, I need to provide generic LaTeX along with
LaTeX I can use with PacktPub's LaTeX publishing pipeline. But let's not
look too far down the road. First things first.&lt;/p&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Here's today's progress measurement.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
==================== 67 failed, 13 passed, 1 error in 1.53s ====================
&lt;/pre&gt;
&lt;p&gt;This comforts me a great deal. Some elements of the original structure
still work. There are two kinds of failures: new test fixtures that
require &lt;tt class="docutils literal"&gt;TestCase.setUp()&lt;/tt&gt; methods, and tests for features that are no
longer part of the design.&lt;/p&gt;
&lt;p&gt;In order to get the refactoring to a place where it would even run, I
had to incorporate some legacy methods that -- it appears -- will
&lt;em&gt;eventually&lt;/em&gt; become dead code. It's not totally dead, yet, because I'm
still mid-way through the refactoring.&lt;/p&gt;
&lt;p&gt;But. I'm no longer beating back and forth trying to see if I've got a
better design. I'm now on the downwind broad reach of finding and fixing
the 67 test cases that are broken.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="Test-Driven Development"></category><category term="#python"></category><category term="pyWeb"></category><category term="literate programming"></category></entry><entry><title>My Shifting Understanding and A Terrible Design Mistake</title><link href="https://slott56.github.io/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html" rel="alternate"></link><published>2022-06-21T08:00:00-04:00</published><updated>2022-06-21T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-21:/2022_06_21-my_shifting_understanding_and_a_terrible_design_mistake.html</id><summary type="html">&lt;p&gt;I've been fascinated by Literate Programming forever.&lt;/p&gt;
&lt;p&gt;I have two utterly divergent takes on this.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt; for one.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for another.&lt;/p&gt;
&lt;p&gt;And yet, I've still done a really bad design job. Before we get to the
design, a little bit …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been fascinated by Literate Programming forever.&lt;/p&gt;
&lt;p&gt;I have two utterly divergent takes on this.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/PyLit-3"&gt;https://github.com/slott56/PyLit-3&lt;/a&gt; for one.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;https://github.com/slott56/py-web-tool&lt;/a&gt; for another.&lt;/p&gt;
&lt;p&gt;And yet, I've still done a really bad design job. Before we get to the
design, a little bit of back story.&lt;/p&gt;
&lt;div class="section" id="back-story"&gt;
&lt;h2&gt;Back Story&lt;/h2&gt;
&lt;p&gt;Why two separate literate programming projects? Because it's not
&lt;strong&gt;clear&lt;/strong&gt; what's best. It's a field without too many boundaries and a
lot of questions about the value produced.&lt;/p&gt;
&lt;p&gt;PyLit I found, forked, and upgraded to Python 3. I didn't design it.
It's far more clever than something I'd design.&lt;/p&gt;
&lt;p&gt;Py-Web-Tool is something I wrote based on using a whole bunch of tools
that follow along behind the original WEB tools. Nothing to do with web
servers or web.py.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem-domain"&gt;
&lt;h2&gt;The Problem Domain&lt;/h2&gt;
&lt;p&gt;The design problem is, in retrospect, pretty obvious. I set it out here
as a cautionary tale.&lt;/p&gt;
&lt;p&gt;I'm looking at the markup languages for doing literate programming. The
idea is to have named blocks of code in your document, presented in an
order that makes sense to your reader. A tool will &amp;quot;weave&amp;quot; a document
from your source. It will also &amp;quot;tangle&amp;quot; source code by rearranging the
code snippets from presentation order into compiler-friendly order.&lt;/p&gt;
&lt;p&gt;This means you can present your core algorithm first, even though it's
buried in the middle of some module in the middle of your package.&lt;/p&gt;
&lt;p&gt;The presentation order is *not* tied to the order needed by your
language's toolchain.&lt;/p&gt;
&lt;p&gt;For languages like C this is huge freedom. For Python, it's not such a
gigantic win.&lt;/p&gt;
&lt;p&gt;The source material is a &amp;quot;web&amp;quot; of code and information about the code. A
web file may look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Important insight.

&amp;#64;d core feature you need to know about first &amp;#64;{
    def somecode() -&amp;gt; None:
        pass
&amp;#64;}

And see how this fits into a larger context?

&amp;#64;d something more expansive &amp;#64;{
def this() -&amp;gt; None:
    pass

def that() -&amp;gt; None:
    pass

&amp;#64;&amp;lt;core feature you need to know about first&amp;#64;&amp;gt;
&amp;#64;}

See how that works?
&lt;/pre&gt;
&lt;p&gt;This is easy to write and (relatively) easy to read. The
&lt;tt class="docutils literal"&gt;&amp;#64;&amp;lt;core feature you need to know about first&amp;#64;&amp;gt;&lt;/tt&gt; becomes a hyperlink in
the published documentation. So you can flip between the sections. It's
physically expanded inline to tangle the code, but you don't often need
to look at the tangled code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-design-question"&gt;
&lt;h2&gt;The Design Question&lt;/h2&gt;
&lt;p&gt;The essential Literate Programming tool is a compiler with two outputs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;woven&amp;quot; document with markup and such&lt;/li&gt;
&lt;li&gt;The &amp;quot;tangled&amp;quot; code files which are code, largely untouched, but
reordered.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've got four related problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Parsing the input&lt;/li&gt;
&lt;li&gt;An AST we can process&lt;/li&gt;
&lt;li&gt;Emitting tangled output from the AST&lt;/li&gt;
&lt;li&gt;Emitting woven output form the AST&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or, we can look at it as three classic problems: deserialization, AST
representation, and serialization. Additionally, we have two distinct
serialization alternatives.&lt;/p&gt;
&lt;p&gt;What did I do?&lt;/p&gt;
&lt;p&gt;I tackled serialization first. Came up with a cool bunch of classes and
methods to serialize the two kinds of documents.&lt;/p&gt;
&lt;p&gt;Then I wrote the deserialization (or parsing) of the source WEB file.
This is pretty easy, since the markup is designed to be as trivial as
possible.&lt;/p&gt;
&lt;p&gt;The representation is little more than glue between the two.&lt;/p&gt;
&lt;p&gt;What a mistake.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-wrong-answer"&gt;
&lt;h2&gt;A Wrong Answer&lt;/h2&gt;
&lt;p&gt;Focusing on serialization was an epic mistake.&lt;/p&gt;
&lt;p&gt;I want to try using
&lt;a class="reference external" href="https://jinja.palletsprojects.com/en/3.1.x/"&gt;Jinja2&lt;/a&gt; for the markup
templates instead of
&lt;a class="reference external" href="https://docs.python.org/3/library/string.html#template-strings"&gt;string.Template&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However.&lt;/p&gt;
&lt;p&gt;My AST was such a bad hack job it was essentially impossible to use it.
It was a quagmire of inconsistent ad-hoc methods to solve a specific
serialization issue.&lt;/p&gt;
&lt;p&gt;As I start down the Jinja road, I found a need to be able to build an
AST without the overhead of parsing.&lt;/p&gt;
&lt;p&gt;Which caused me to realize that the AST was -- while structurally
sensible -- far from the simple ideal.&lt;/p&gt;
&lt;p&gt;What's the ideal?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-right-answer"&gt;
&lt;h2&gt;The Right Answer&lt;/h2&gt;
&lt;p&gt;This ideal AST is something that lets me build test fixtures like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
example = Web(
   chunks=[
       TextChunk(&amp;quot;\n&amp;quot;),
       NamedCodeChunk(name=&amp;quot;core feature you need to know about first&amp;quot;, lines=[&amp;quot;def someconme() -&amp;gt; None: ...&amp;quot;, &amp;quot;pass&amp;quot;])),
       TextChunk(&amp;quot;\nAnd see how this fits into a larger context?\n&amp;quot;),
       NamedCodeChunk(name=&amp;quot;something more expansive&amp;quot;, lines=[etc. etc.])
   ]
)
&lt;/pre&gt;
&lt;p&gt;Here's my test for usability: I can build the AST &amp;quot;manually&amp;quot; without a
parser.&lt;/p&gt;
&lt;p&gt;The parser can build one, also, but I can build it as a sensible,
readable, first-class Python object.&lt;/p&gt;
&lt;p&gt;This has pointed me to a better design for the overall constructs of the
WEB source document. Bonus. It's helping me define Jinja templates that
can render this as a sensible woven document.&lt;/p&gt;
&lt;p&gt;Tangling does not need Jinja. It's simpler. And -- by convention -- the
tangled code does not have anything injected into it. The woven code is
in a markup language (Markdown, RST, HTML, LaTeX, ASCII DOC, whatever)
and some markup is required to create hyperlinks and code sections.
Jinja is super helpful here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The essence of the problem is rarely serialization or deserialization.&lt;/dt&gt;
&lt;dd&gt;It's the internal representation.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="when-learning-how-to-use-a-word-processor-it-turn"&gt;
&lt;h2&gt;When learning how to use a word processor, it turn...&lt;/h2&gt;
&lt;p&gt;Unknown&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2022-07-16 13:24:35.832000-04:00&lt;/p&gt;
&lt;p&gt;When learning how to use a word processor, it turns out the second word
processor you learn takes longer than the first. As you explore the
second one, the core ideas get contemplated and refined. The third one
on is just &amp;quot;where's the quick reference&amp;quot;. We do the same with rewriting
code, as you are discovering. One point of literate programming is to
explain the insights we gain.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="literate programming"></category><category term="jinja"></category><category term="pyWeb"></category><category term="PyLit3"></category></entry><entry><title>A LaTeX Thing I Did -- And A ToDo:</title><link href="https://slott56.github.io/2022_06_14-a_latex_thing_i_did_and_a_todo.html" rel="alternate"></link><published>2022-06-14T08:00:00-04:00</published><updated>2022-06-14T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-06-14:/2022_06_14-a_latex_thing_i_did_and_a_todo.html</id><summary type="html">&lt;p&gt;When writing about code in LaTeX, the essential strategy is to use an
environment to format the code so it stands out from surrounding text.
There are a few of these environments available as LaTeX add-on
packages. The three popular ones are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;verbatim&lt;/strong&gt;. I think this is built-in to LaTeX …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;When writing about code in LaTeX, the essential strategy is to use an
environment to format the code so it stands out from surrounding text.
There are a few of these environments available as LaTeX add-on
packages. The three popular ones are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;verbatim&lt;/strong&gt;. I think this is built-in to LaTeX. It's not very
clever, but it is simple to use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;listings&lt;/strong&gt;. See &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Code_listing"&gt;https://www.overleaf.com/learn/latex/Code_listing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minted&lt;/strong&gt;.
See &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted"&gt;https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are nice for making code readable and distinct from the
surrounding text.&lt;/p&gt;
&lt;p&gt;A common way to talk about the code is to use inline verbatim
&lt;tt class="docutils literal"&gt;\verb|code|&lt;/tt&gt; sections. I prefer inline &lt;tt class="docutils literal"&gt;\lstinline|code|&lt;/tt&gt;, but, my
editor prefers &lt;tt class="docutils literal"&gt;\verb&lt;/tt&gt;. (I have trouble getting all the moving parts
of minted installed properly, so I use &lt;strong&gt;listings&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;Also. And more important.&lt;/p&gt;
&lt;p&gt;There's the
&lt;tt class="docutils literal"&gt;\lstinputlisting[language=Python, firstline=2, &lt;span class="pre"&gt;lastline=12]{some_module.py}&lt;/span&gt;&lt;/tt&gt;
command. This lets an author incorporate examples from working, tested
modules. Minted doesn't seem to have this, but it might work with an
&lt;tt class="docutils literal"&gt;\input&lt;/tt&gt; command. Don't know. Haven't tried.&lt;/p&gt;
&lt;p&gt;Let's talk about workflow.&lt;/p&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;The idea behind these tools is you have code and after that, you write
about the code. I call this &lt;strong&gt;code first&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Doing this means you can include code snippets from a file.&lt;/p&gt;
&lt;p&gt;Which is okay, but, there's another point of view: you have a document
that contains the code. This is closer to the Literate Programming POV.
I call this &lt;strong&gt;document first&lt;/strong&gt;. I've got all the code in the document
you're reading, I've just broken it up and spread it around in an order
to serve my purpose as a writer, not serve the limitations of a parser
or compiler.&lt;/p&gt;
&lt;p&gt;There is a development environment --
&lt;a class="reference external" href="https://texfaq.org/FAQ-webpkgs"&gt;WEB&lt;/a&gt; -- to create code that can be
run through the Weave and Tangle tools to create working code and usable
documentation. This is appealing in many ways.&lt;/p&gt;
&lt;p&gt;For now, I'm settling for the following workflow:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Write the document with code samples. Use &lt;tt class="docutils literal"&gt;\lstlisting&lt;/tt&gt; environment
with explicit unique labels for each snippet. The idea is to focus on
the documentation with explanations.&lt;/li&gt;
&lt;li&gt;Write a Jinja template that references the code samples. This is a
lot of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;{{extract['lst:listing_1']}}&lt;/span&gt;&lt;/tt&gt; kind of references. There's a
bit more that can go in here, we'll return to the templates in a
moment.&lt;/li&gt;
&lt;li&gt;Run a tool to extract all the &lt;tt class="docutils literal"&gt;\lstlisting&lt;/tt&gt; environments to a
dictionary with the label as the key and the block of text as the
value. This serializes nicely as a JSON (or TOML or YAML) file. It
can even be pickled, but I prefer to be able to look at the file to
see what's in it.&lt;/li&gt;
&lt;li&gt;The tool to populate the template is a kind of trivial thing to build
a Jinja environment, load up the template, fill in the code samples,
and write the result.&lt;/li&gt;
&lt;li&gt;I can then use &lt;strong&gt;tox&lt;/strong&gt; (and &lt;strong&gt;doctest&lt;/strong&gt; and &lt;strong&gt;pytest&lt;/strong&gt; and &lt;strong&gt;mypy&lt;/strong&gt;)
to test the resulting module to be sure it works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This tangles code from a source document. There's no weave step, since
the source is already designed for publication. This does require me to
make changes to the LaTeX document I'm writing and run a &lt;tt class="docutils literal"&gt;make test&lt;/tt&gt;
command to extract, tangle, and test. This is not a huge burden. Indeed,
it's easy to implement in PyCharm, because the latest release of PyCharm
understands Makefiles and tox. Since each chapter is a distinct
environment, I can use &lt;tt class="docutils literal"&gt;tox &lt;span class="pre"&gt;-e&lt;/span&gt; ch01&lt;/tt&gt; to limit the testing to only the
chapter I'm working on.&lt;/p&gt;
&lt;p&gt;I like this because it lets me focus on explanation, not implementation
details. It helps me make sure that all the code in the book is fully
tested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-templates"&gt;
&lt;h2&gt;The Templates&lt;/h2&gt;
&lt;p&gt;The template files for an example module have these three kinds of code
blocks:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ordinary Listings. These fall into two subclasses.&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;Complete function or class definitions.&lt;/li&gt;
&lt;li&gt;Lines of code taken out of context.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;REPL Examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These have three different testing requirements. We'll start with the
&amp;quot;complete function or class definitions.&amp;quot;  For these, the template might
look like the following&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{{extract['lst:listing_1']}}

def test_listing_1() -&amp;gt; None:
    assert listing_1(42)
    assert not listing_1(None)
&lt;/pre&gt;
&lt;p&gt;This has both the reference to the code in the text of the book and a
test case for the code.&lt;/p&gt;
&lt;p&gt;For lines of code out of context, we have to be more careful. We might
have this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def some_example(arg: int) -&amp;gt; bool:
    {{extract['lst:listing_2']}}

def test_listing_2() -&amp;gt; None:
    assert listing_2(42)
    assert not listing_2(None)
&lt;/pre&gt;
&lt;p&gt;This is similar to a complete definition, but it has a fiddly
indentation that needs to be properly managed, also. Jinja's generally
good about not inserting spaces. The template, however, is full of what
&lt;em&gt;could&lt;/em&gt; appear to be syntax errors, so the code editor &lt;strong&gt;could&lt;/strong&gt; have a
conniption with all those &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt; blocks of code. They happen to be valid
Python set literals, so, they're tolerated. PyCharm's type checking
hates them.&lt;/p&gt;
&lt;p&gt;The REPL examples, look like this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
REPL_listing_3 = &amp;quot;&amp;quot;&amp;quot;
{{extract['lst:listing_3']}}
&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;I collect these into a &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; variable to make them easy for
doctest to find. The extra fussiness of  a &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; variable isn't
needed, but it provides a handy audit for me to make sure everything has
a home.&lt;/p&gt;
&lt;p&gt;The following line of code is in most (not all) templates.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
__test__ = {
    name: value
    for name, value in globals().items()
    if name.startswith(&amp;quot;REPL&amp;quot;)
}
&lt;/pre&gt;
&lt;p&gt;This will locate all of the global variables with names starting with
REPL and put them in the &lt;tt class="docutils literal"&gt;__test__&lt;/tt&gt; mapping. The REPL names then
become the test case names, making any test failures easier to spot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-goal"&gt;
&lt;h2&gt;My Goal&lt;/h2&gt;
&lt;p&gt;I do have some Literate Programming tools that I might be able to
leverage to make myself a Weaver that produces useful LaTeX my publisher
can work with. I should do this because it would be slightly simpler.
The problem is my Web/Weave/Tangle tooling has a bunch of dumb
assumptions about the weave and tangle outputs; a problem I really need
to fix.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://github.com/slott56/py-web-tool"&gt;py-web-tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea here is to mimic other WEB-based tooling. These are the two
primary applications:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Weave&lt;/strong&gt;. This makes documentation in a fairly transparent way from
the source. There are a bunch of substitutions required to fill in
HTML or LaTeX or Markdown or RST around the generic source. Right
now, this is pretty inept and almost impossible to configure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tangle&lt;/strong&gt;. This makes code from the source. The point here is the
final source file is not necessarily built in any &lt;em&gt;obvious&lt;/em&gt; order.
It's a tangle of things from the documentation, put into the order
required by parser or compiler or build system or whatever.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The weaving requires a better way to provide the various templates that
fill in missing bits. Markdown, for example, works well with fenced
blocks. RST uses a code directive that leads to an extra level of
indentation that needs to be carefully excised. Futher, most markup
languages have a mountain of cruft that goes around the content. This is
unpleasantly complex, and very much subject to odd little changes that
don't track against the content, but are part of the evolution of the
markup language.&lt;/p&gt;
&lt;p&gt;My going-in assumption on tangling was the document contained &lt;strong&gt;all&lt;/strong&gt;
the code. All of it. Without question or exception. For C/C++ this means
all the fiddly little pre-processor directives that add no semantic
clarity yet must be in the code file. This means the preprocessor
nonsense had to be relegated to an appendix of &amp;quot;yet more code that just
has to be there.&amp;quot;&lt;/p&gt;
&lt;p&gt;After writing a tangler to pull code from a book into a variety of
contexts, I'm thinking I need to have a tangler that works with a
template engine. I think there would be the following two use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;No-Template Case&lt;/strong&gt;. The WEB source is complete. This works well for
a lot of languages that don't have the kind of cruft that C/C++ has.
It generally means a WEB source document will contain definition(s)
for the final code file(s) as a bunch of references to the
previously-explained bits. For C/C++, this final presentation can
include the fiddly bits of preprocessor cruft.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template Case&lt;/strong&gt;. A template is used to with the source to create
the tangled output. This is what I have now for pulling book content
into a context where it is testable. For the most part, the template
files are quite small because the book includes test cases in the
form of REPL blocks. This presents a bit of a problem because it
breaks the &amp;quot;all in one place&amp;quot; principle of a WEB project. I have a
WEB source file with the visible content plus one or more templates
with invisible content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I like about this is an attempt to reduce some of the cruftiness of
the various tools.&lt;/p&gt;
&lt;p&gt;I think my py-web-tool might be expanded to handle my expanded
understanding of literate programming.&lt;/p&gt;
&lt;p&gt;I have a book to finish, first, though. Then I can look at improving my
workflow. (And yes, this is backwards from a properly Agile approach.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="literate programming"></category><category term="packtpub"></category><category term="#python"></category></entry><entry><title>Code so bad it causes me physical pain</title><link href="https://slott56.github.io/2022_05_23-code_so_bad_it_causes_me_physical_pain.html" rel="alternate"></link><published>2022-05-23T20:38:00-04:00</published><updated>2022-05-23T20:38:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-05-23:/2022_05_23-code_so_bad_it_causes_me_physical_pain.html</id><summary type="html">&lt;p&gt;Here's the code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def get_categories(file):
    &amp;quot;&amp;quot;&amp;quot;
    Get categories.
    &amp;quot;&amp;quot;&amp;quot;
    verify_file(file)

    categories = set()

    with open(file, &amp;quot;r&amp;quot;) as cat_file:
        while line := cat_file.readline().rstrip():
            categories.add(line)

    return categories
&lt;/pre&gt;
&lt;p&gt;To me this was terrible. truly and deeply horrifying. Let me count the
ways.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The docstring repeats the name of the function …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Here's the code.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def get_categories(file):
    &amp;quot;&amp;quot;&amp;quot;
    Get categories.
    &amp;quot;&amp;quot;&amp;quot;
    verify_file(file)

    categories = set()

    with open(file, &amp;quot;r&amp;quot;) as cat_file:
        while line := cat_file.readline().rstrip():
            categories.add(line)

    return categories
&lt;/pre&gt;
&lt;p&gt;To me this was terrible. truly and deeply horrifying. Let me count the
ways.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The docstring repeats the name of the function providing no
additional information.&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;verify_file()&lt;/tt&gt; function checks are pure, useless LBYL code. It
seemed designed to map a lot of detailed exceptions to a
&lt;tt class="docutils literal"&gt;RuntimeError&lt;/tt&gt;. Which is misleading.&lt;/li&gt;
&lt;li&gt;The use &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;readline()&lt;/tt&gt; to iterate through the lines of
a file is -- I guess -- reasonable if we're working Pascal or
Modula-2. But we're not. Use of the walrus operator isn't really
getting any bonus points because -- well -- this is terrible.&lt;/li&gt;
&lt;li&gt;While pathlib is used elsewhere in this module, it's not used here.
This function works with a filename string, assigned to the &lt;tt class="docutils literal"&gt;file&lt;/tt&gt;
parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Actually, taking a step back, it's not that the author is being
malicious. They just missed all the features of files and sets. And --
somehow -- were able to learn about the walrus operator while never
figuring out how files work.&lt;/p&gt;
&lt;p&gt;This is something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source = Path(&amp;quot;some_file.txt&amp;quot;)
with source.open() as source_file:
    categories = set(source_file)
&lt;/pre&gt;
&lt;p&gt;And that's it.&lt;/p&gt;
&lt;div class="section" id="it-gets-worse"&gt;
&lt;h2&gt;It Gets Worse&lt;/h2&gt;
&lt;p&gt;This was part of some category mapping application.&lt;/p&gt;
&lt;p&gt;They've got a CSV file with some string values. And they want to map
those string values to summary category values.&lt;/p&gt;
&lt;p&gt;Most folks think of a dictionary for a mapping from one string to
another string.&lt;/p&gt;
&lt;p&gt;The code I was sent -- I kid you not -- used a list of two-tuples. I'll
repeat that for those who are skimming. It use &lt;strong&gt;A LIST OF TWO-TUPLES
INSTEAD OF A DICTIONARY&lt;/strong&gt;.  It used a colossally bad search through an
unsorted list of tuples to find matches. (The only search that would
have been worse was random probes instead of iteration.)&lt;/p&gt;
&lt;p&gt;It really did.&lt;/p&gt;
&lt;p&gt;It can't even show you that code, it's such a horrifyingly bad design.&lt;/p&gt;
&lt;p&gt;They had a question. Was the looping over a list of two-tuples
ineffective? That's why they asked for help.&lt;/p&gt;
&lt;p&gt;It was like they had never heard of a dictionary. Nor seen a tutorial
with a dictionary. Nor read a book that mentioned dictionaries. They had
managed to learn enough Python to see the walrus operator without
hearing of dictionaries.&lt;/p&gt;
&lt;p&gt;A list of two-tuples, when provided to the &lt;tt class="docutils literal"&gt;dict()&lt;/tt&gt; function, will
make a dictionary. They were ignorant of this.&lt;/p&gt;
&lt;p&gt;A dictionary that does &lt;strong&gt;O&lt;/strong&gt;(1) lookups and avoids looping over a list
of two-tuples. This was a mystery to them..&lt;/p&gt;
&lt;p&gt;When someone doesn't know the Python dictionary exists, what is the
appropriate response?&lt;/p&gt;
&lt;p&gt;How can you politely say &amp;quot;Find another tutorial and do the ENTIRE thing
all of it!&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="that-s-not-all"&gt;
&lt;h2&gt;That's Not All&lt;/h2&gt;
&lt;p&gt;There's this nugget of &amp;quot;You can't be serious.&amp;quot;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
category_counts = {element: 0 for element in categories}
&lt;/pre&gt;
&lt;p&gt;And&lt;/p&gt;
&lt;pre class="literal-block"&gt;
category_counts[category] += 1
&lt;/pre&gt;
&lt;p&gt;Yes. They used a dictionary to count instances of the categories. They
did not understand &lt;tt class="docutils literal"&gt;collections.defaultdict&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;collections.Counter&lt;/tt&gt;. But they understood a dictionary well enough to
use it here. But not use it elsewhere for the central functionality of
the app.&lt;/p&gt;
&lt;p&gt;So. They couldn't use a dictionary, but could use a dictionary.&lt;/p&gt;
&lt;p&gt;They couldn't use the csv module, so they wrote their own (bad) CSV
parser.&lt;/p&gt;
&lt;p&gt;It's almost impossible to write a polite code review.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="hopefully-you-have-tests-on-it-and-can-refactor-or"&gt;
&lt;h2&gt;Hopefully you have tests on it and can refactor or...&lt;/h2&gt;
&lt;p&gt;McSee&amp;lt;&lt;a class="reference external" href="mailto:noreply&amp;#64;blogger.com"&gt;noreply&amp;#64;blogger.com&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;2021-10-19 13:03:56.467000-04:00&lt;/p&gt;
&lt;p&gt;Hopefully you have tests on it and can refactor or write it again from
scratch&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="data structure"></category><category term="#python"></category></entry><entry><title>Python is a Bad Programming Language. Wait, wut?</title><link href="https://slott56.github.io/2022_05_23-python_is_a_bad_programming_language_wait_wut.html" rel="alternate"></link><published>2022-05-23T20:35:00-04:00</published><updated>2022-05-23T20:35:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-05-23:/2022_05_23-python_is_a_bad_programming_language_wait_wut.html</id><summary type="html">&lt;p&gt;It may help to read &lt;a class="reference external" href="https://medium.com/nerd-for-tech/python-is-a-bad-programming-language-2ab73b0bda5"&gt;Python is a Bad Programming
Language&lt;/a&gt;,
but it's not very useful.&lt;/p&gt;
&lt;p&gt;I shouldn't be tempted by click-bait headlines. But.  I am drawn in by
bad articles on Python.&lt;/p&gt;
&lt;p&gt;In particular, any post claiming Python is deficient causes me to look
for the concrete PEP's that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It may help to read &lt;a class="reference external" href="https://medium.com/nerd-for-tech/python-is-a-bad-programming-language-2ab73b0bda5"&gt;Python is a Bad Programming
Language&lt;/a&gt;,
but it's not very useful.&lt;/p&gt;
&lt;p&gt;I shouldn't be tempted by click-bait headlines. But.  I am drawn in by
bad articles on Python.&lt;/p&gt;
&lt;p&gt;In particular, any post claiming Python is deficient causes me to look
for the concrete PEP's that fix the problems.&lt;/p&gt;
&lt;p&gt;Interestingly, there never seem to be any PEP's in any article that
bashes Python. This post is yet another example of complaining without
offering any practical solutions.&lt;/p&gt;
&lt;div class="section" id="bluf"&gt;
&lt;h2&gt;BLUF&lt;/h2&gt;
&lt;p&gt;The article has a complaining tone, but, I can't figure out some of the
complaints. It lifts up a confusing collection of features from other
languages as if these features are somehow universally desirable. No
justification is provided. The author seems to rely exclusively on Stack
Overflow answers for information about Python. There are no PEP's
proposed to fix Python. There aren't even any examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="point-by-point"&gt;
&lt;h2&gt;Point-by-Point&lt;/h2&gt;
&lt;p&gt;I will try to address each point. It's difficult, because some of the
points are hard to discern. There's a lot of &amp;quot;Who thought that was a
good idea?&amp;quot; which isn't really a specific point that can be refuted.
It's a kind of rhetorical flourish that seems to work best with folks
that already agree.&lt;/p&gt;
&lt;p&gt;Let's start.&lt;/p&gt;
&lt;div class="section" id="a-fragmented-language"&gt;
&lt;h3&gt;A Fragmented Language&lt;/h3&gt;
&lt;p&gt;This is the result of profound confusion. It's hard to find anyone
recommending Python 2 anywhere. The supplied link is 9 years old, making
this comment extremely misleading.  (I'm being charitable. A nine-year
old link on Stack Overflow requires some curation. This is not a Python
problem.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ugly-object-orientation"&gt;
&lt;h3&gt;Ugly Object-Orientation&lt;/h3&gt;
&lt;p&gt;The inconsistent use of &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; in C++ and Java is lifted up as somehow
good. The consistent use of the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; instance variable in Python is
somehow less good; perhaps because it's consistent.&lt;/p&gt;
&lt;p&gt;&amp;quot;See how I have to both declare and initialize them in the constructor?
Another example of Python stupidity.&amp;quot; Um. No, I don't actually see you
&lt;em&gt;declare&lt;/em&gt; them anywhere. I guess you're unaware of what &lt;em&gt;declare&lt;/em&gt; means
in languages like C++ and why &lt;em&gt;declare&lt;/em&gt; isn't a thing in Python.&lt;/p&gt;
&lt;p&gt;Somehow using the &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword is better than &lt;tt class="docutils literal"&gt;__&lt;/tt&gt; name
mangling. I'm unclear on why it's better, it's simply stated in a way
that makes it sound like a long keyword used once is better because it's
better. No additional reason or justification is offered. The idea of
using __ to emphasize the privacy is somehow inconceivable.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;private&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt; keywords are in C++, C#, and Java to
optimize recompilation. To an extent, this also permits distribution of
libraries in the form of &amp;quot;headers&amp;quot; and obfuscated binaries. None of this
makes sense in a Python context.  A single example of how the
&lt;tt class="docutils literal"&gt;private&lt;/tt&gt; keyword would be helpful in Python is missing from the
original post. There are huge complications of the &lt;tt class="docutils literal"&gt;protected&lt;/tt&gt;
keyword, also; these make the keywords more trouble than they are worth,
and any example needs to cover these issues, also.&lt;/p&gt;
&lt;p&gt;&amp;quot;In general, when you point out any flaws in their language, Python
developers will act hostile and condescending.&amp;quot; Sorry, this complaint in
the original post sounds hostile and condescending. I'll try to ignore
the tone and stick to what content I can find.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whitespace"&gt;
&lt;h3&gt;Whitespace&lt;/h3&gt;
&lt;p&gt;&amp;quot;...how is using whitespace any better than curly braces?&amp;quot; has an
answer. But. Somehow it can't be chased down and included in the
original post. Whitespace (like name mangling) is described as wrong
because it's wrong, with no further justification provided.&lt;/p&gt;
&lt;p&gt;An example where braces seem to be essential for sorting out syntax
would be nice. The entire Python community is waiting for any example
where braces were &lt;strong&gt;necessary&lt;/strong&gt; and the indentation wasn't already
clear.&lt;/p&gt;
&lt;p&gt;&amp;quot;And only in Python will the difference between tabs and spaces cause
the interpreter to have a heart attack.&amp;quot; Um. A syntax error is a heart
attack? I wish I was able to type code without syntax errors. I am
humbled thinking about the idea of seeing syntax errors so rarely. I
have my editor set up to use spaces instead of tabs, and haven't had a
problem in 20 years of using Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-typing"&gt;
&lt;h3&gt;Dynamic Typing&lt;/h3&gt;
&lt;p&gt;The opening quote, &amp;quot;Dynamic typing is bad,&amp;quot; is stated as if it's
axiomatic. The rest of the paragraph seems like vitriol rather than
justification. &amp;quot;Some Python programmers have realized that dynamic
typing is bad&amp;quot; requires some justification; a link to some documentation
to support the claim would be helpful. An example would be good.&lt;/p&gt;
&lt;p&gt;I can only assume that code like this is important and needs to be
flagged by the compiler or something.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
for data in some_list:
    if data == 42:
        print(&amp;quot;data is int&amp;quot;)
for data in some_other_list:
    if data == &amp;quot;wait&amp;quot;:
        print(&amp;quot;see the type of data changed.&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This seems like poor programming to begin with. Expecting the compiler
to reject this seems weak. It seems better to not reuse variable names
in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="constants"&gt;
&lt;h3&gt;Constants&lt;/h3&gt;
&lt;p&gt;Not sure what the point is here. There's no justification for demanding
the inconsistent behavior of a one-time-only assignment statement.
There's no reference how how folks can use enums to define constant-like
names and values.&lt;/p&gt;
&lt;p&gt;The concluding paragraph &amp;quot;The Emperor Has Not Clothes&amp;quot; is some kind of
summary. It says &amp;quot;Python will only grow in popularity as more and more
software is written in it,&amp;quot; which does seem to be true. I think that
might be the single most useful sentence.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-have-we-learned"&gt;
&lt;h2&gt;What Have We Learned?&lt;/h2&gt;
&lt;p&gt;First, reading a few Stack Overflow posts can be misleading. Python now
is not Python from nine years ago.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Everyone says to use Python3. Really. If you have found a Python2
tutorial, stop now. Don't follow it.&lt;/li&gt;
&lt;li&gt;The consistent use of the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; variable seems simpler than trying
to understand the rules for the &lt;tt class="docutils literal"&gt;this&lt;/tt&gt; variable.&lt;/li&gt;
&lt;li&gt;Variables aren't &lt;em&gt;declared&lt;/em&gt;, they're assigned values. It's as simple
as it can be and avoids the clutter of variable declarations.&lt;/li&gt;
&lt;li&gt;We can read the source; the complexities of private (or protected)
instance variables doesn't really help.&lt;/li&gt;
&lt;li&gt;Python's use of whitespace is very simple; most people can indent
their code correctly. Anyone who's tried to debug C++ code that's
correctly indented but missing a (nearly invisible) } will agree that
the indentation is easier to get right.&lt;/li&gt;
&lt;li&gt;AFAICT, the reason dynamic typing might be bad is when a function or
class reuses the same variable name for multiple different types of
data. This seems wrong to reuse a variable name for multiple types. A
small effort at inspecting the code can prevent this.&lt;/li&gt;
&lt;li&gt;Constants are easily implemented via enum. But. They appear to be
useless in a dynamic language where the source is trivially available
to be changed. I'm not sure why they seem important to people. And
this article provides no help there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Bottom line: Without concrete PEPs to fix things, or examples of what
better might look like, this is click-bait whining.&lt;/p&gt;
&lt;p&gt;Starting from C# or Java to locate deficiencies is just as wrong as
starting from Dartmouth Basic or FORTH as the standard against which
Python is measured.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="click-bait"></category></entry><entry><title>Pelican and Static Web Content</title><link href="https://slott56.github.io/2022_04_12-pelican_and_static_web_content.html" rel="alternate"></link><published>2022-04-12T08:00:00-04:00</published><updated>2022-04-12T08:00:00-04:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-04-12:/2022_04_12-pelican_and_static_web_content.html</id><summary type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2022_03_01-static_site_blues.html"&gt;Static Site
Blues&lt;/a&gt;
I was wringing my hands over ways to convert a &lt;strong&gt;ton&lt;/strong&gt; of content from a
two different proprietary tools (the very old iWeb, and the merely old
Sandvox) into something I could work with.&lt;/p&gt;
&lt;p&gt;After a bit of fiddling around, I'm delighted with
&lt;a class="reference external" href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a class="reference external" href="https://slott56.github.io/2022_03_01-static_site_blues.html"&gt;Static Site
Blues&lt;/a&gt;
I was wringing my hands over ways to convert a &lt;strong&gt;ton&lt;/strong&gt; of content from a
two different proprietary tools (the very old iWeb, and the merely old
Sandvox) into something I could work with.&lt;/p&gt;
&lt;p&gt;After a bit of fiddling around, I'm delighted with
&lt;a class="reference external" href="https://blog.getpelican.com"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, of course, I had to extract all the iWeb and Sandvox content.
This was emphatically not fun. While both used XML, they used it in
subtly different ways. Apple's frameworks serialize internal state as
XML in a way that preserves a lot of semantic details. It also preserves
endless irrelevant details.&lt;/p&gt;
&lt;p&gt;I wound up with a Markdown data structure definition, plus a
higher-level &amp;quot;content model&amp;quot; with sites, pages, blogs, blog entries and
images. Plus the iWeb extractor and the Sandvox extractor. It's a lot of
code, much of which lacks solid unit test cases. It worked -- once --
and I was tolerant of the results.&lt;/p&gt;
&lt;p&gt;I also wound up writing tools to walk the resulting tree of Markdown
files doing some post-extraction cleanup. There's a lot of cleanup that
should be done.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;I can now add to the blog with the state of my voyaging. I've been able
to keep &lt;a class="reference external" href="https://itmaybeahack.com/TeamRedCruising2/"&gt;Team Red
Cruising&lt;/a&gt; up to date.&lt;/p&gt;
&lt;p&gt;Eventually (i.e., when the boat is laid up for Hurricane Season) I may
make an effort to clean up the older content and make it more
consistent. In particular, I need to add some annotations around
anchorages to make it possible to locate all of the legs of all of the
journeys. Since the HTML is what most people can see, that means a class
identifier for lat-lon pairs.&lt;/p&gt;
&lt;p&gt;As it is, the blog entries are *mostly* markdown. Getting images and
blockquotes even close to readable requires dropping to HTML to make
direct use of the bootstrap CSS. This also requires some comprehensive
cleanup to properly use the Bootstrap classes. (I think I've may have
introduced some misspelled CSS classes into the HTML that aren't doing
anything.)&lt;/p&gt;
&lt;p&gt;For now, however, it works. I'm still tweaking small things that require
republishing *all* the HTML.&lt;/p&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="blogging"></category><category term="markdown"></category><category term="static site generator"></category></entry><entry><title>Static Site Blues</title><link href="https://slott56.github.io/2022_03_01-static_site_blues.html" rel="alternate"></link><published>2022-03-01T08:00:00-05:00</published><updated>2022-03-01T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-03-01:/2022_03_01-static_site_blues.html</id><summary type="html">&lt;p&gt;I have a very large, static site with 10+ years of stuff about my boat.
Most of it is pretty
boring. &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;http://www.itmaybeahack.com/TeamRedCruising/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started with iWeb. It was very -- well -- 2000-ish look and feel. Too
many pastels and lines and borders.&lt;/p&gt;
&lt;p&gt;In 2012, I switched to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a very large, static site with 10+ years of stuff about my boat.
Most of it is pretty
boring. &lt;a class="reference external" href="http://www.itmaybeahack.com/TeamRedCruising/"&gt;http://www.itmaybeahack.com/TeamRedCruising/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I started with iWeb. It was very -- well -- 2000-ish look and feel. Too
many pastels and lines and borders.&lt;/p&gt;
&lt;p&gt;In 2012, I switched to Sandvox. I lived on a boat back then. I don't
have reliable internet. Using blogger.com, for example, required a
sincere commitment to bandwidth. I moved ashore in 2014 and returned to
the boat in 2020.&lt;/p&gt;
&lt;p&gt;Sandvox's creator seems to be out-of-business.&lt;/p&gt;
&lt;p&gt;What's next?&lt;/p&gt;
&lt;p&gt;Give up on these fancy editors and switch to a static site generator.
Write markdown. Run the tool. Upload when in a coffee shop with Wi-Fi.&lt;/p&gt;
&lt;p&gt;What site generator?&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.fullstackpython.com/static-site-generator.html"&gt;https://www.fullstackpython.com/static-site-generator.html&lt;/a&gt; for some
suggestions.&lt;/p&gt;
&lt;p&gt;There are three parts to this effort.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Extract the goodness from iWeb and Sandvox. I knew this would be real
work. iWeb's site has too much javascript to be easy-to-parse. I have
to navigate the underlying XML database. Sandvox is much easier to
deal with: their published site is clean, static HTML with useful
classes and ids in their tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reformat the source material into Markdown. I've grudgingly grown to
accept Markdown, even through RST is clearly superior. Some tools
work with RST and I may pandoc the entire thing over to RST from
Markdown. For now, though, the content seems to be captured.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fixup internal links and cross references. This is a godawful
problem. Media links -- in particular -- seem to be a nightmare.
Since iWeb resolves things via Javascript, the HTML is opaque.&lt;/p&gt;
&lt;p&gt;Fortunately, the database's internal cross-references aren't
horrible. Maybe this was exacerbated a poor choice of generators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Convert to HTML for a local server. Validate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Convert to HTML for the target server. Upload to a staging server and
validate again. This requires a coffee shop. Not doing this with my
phone's data plan.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Steps 1 and 2 aren't too bad. I've extracted serviceable markdown from
the iWeb database and the published Sandvox site. The material parallels
the Site/Blog/Page structure of the originals. The markdown seems to be
mostly error-free. (Some images have the caption in the wrong place,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;![caption](link)&lt;/span&gt;&lt;/tt&gt; isn't as memorable as I'd like.)&lt;/p&gt;
&lt;p&gt;Step 3, the internal links and cross-references, has been a difficult
problem, it turns out. I can, mostly, associate media with postings. I
can also find all the cross-references among postings and fix those up.
The question that arises is how to reference media from a blog post?&lt;/p&gt;
&lt;div class="section" id="mynt"&gt;
&lt;h2&gt;Mynt&lt;/h2&gt;
&lt;p&gt;I started with &lt;a class="reference external" href="https://mynt.uhnomoli.com"&gt;mynt&lt;/a&gt;. And had to bail.
It's clever and very simple. Too simple for blog posts that have a lot
of associated media assets.&lt;/p&gt;
&lt;p&gt;The issue is what to write in the markdown to refer to the images that
go with a specific blog post. I resorted to a master &lt;tt class="docutils literal"&gt;_Media&lt;/tt&gt;
directory. Which means each posting has
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;![caption][../../../../_Media/image.png)&lt;/span&gt;&lt;/tt&gt; in it.  This is
semi-manageable. But exasperating in bulk.&lt;/p&gt;
&lt;p&gt;What scrambled my brain is the way a mynt posting becomes a directory,
with an index.html. Clearly, the media could be adjacent to the
index.html. But. I can't figure out how to get mynt's generator to put
the media into each post's published directory. It seems like each post
should not be a markdown file.&lt;/p&gt;
&lt;p&gt;Also, I can trivially change the base URL when generating, but I can't
change the domain. When I publish, I want to swap domains *only*,
leaving the base URL alone. I tried. It's too much fooling around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican"&gt;
&lt;h2&gt;Pelican&lt;/h2&gt;
&lt;p&gt;Next up. &lt;a class="reference external" href="https://www.fullstackpython.com/pelican.html"&gt;Pelican&lt;/a&gt;.
We'll see if I can get my media and blog posts neatly organized.
This &lt;a class="reference external" href="http://chdoig.github.io/create-pelican-blog.html"&gt;http://chdoig.github.io/create-pelican-blog.html&lt;/a&gt; seems encouraging.
I think I should have started here first. Lektor is another possibility.&lt;/p&gt;
&lt;p&gt;Since my legacy sites have RSS feeds, it may be sensible to turn Pelican
loose on the RSS and (perhaps) skip steps 1, 2, and 3, entirely.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="RST"></category><category term="#python"></category><category term="blogging"></category><category term="markdown"></category><category term="static site generator"></category></entry><entry><title>LaTeX Mysteries and an algorithmicx thing I learned.</title><link href="https://slott56.github.io/2022_02_15-latex_mysteries_and_an_algorithmicx_thing_i_learned.html" rel="alternate"></link><published>2022-02-15T08:00:00-05:00</published><updated>2022-02-15T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-15:/2022_02_15-latex_mysteries_and_an_algorithmicx_thing_i_learned.html</id><summary type="html">&lt;p&gt;I've been an on-and-off user of LaTeX since the very, very beginning.
Back in the dark days when the one laser printer that could render the
images was in a closely-guarded secret location to prevent everyone from
using it and exhausting the (expensive) toner cartridges.&lt;/p&gt;
&lt;p&gt;A consequence of this is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been an on-and-off user of LaTeX since the very, very beginning.
Back in the dark days when the one laser printer that could render the
images was in a closely-guarded secret location to prevent everyone from
using it and exhausting the (expensive) toner cartridges.&lt;/p&gt;
&lt;p&gt;A consequence of this is I think the various algorithm environments are
a ton of fun. Pseudo-code with math embedded in it. It's marvelous. It's
a pain in the neck with this clunky blogging package, so I can't easily
show off the coolness. But. You can go
to &lt;a class="reference external" href="https://www.overleaf.com/learn/latex/Algorithms"&gt;https://www.overleaf.com/learn/latex/Algorithms&lt;/a&gt; to see some examples.&lt;/p&gt;
&lt;p&gt;None of which have try/except blocks. Not a thing.&lt;/p&gt;
&lt;p&gt;Why not? I suspect it's because &amp;quot;algorithmic&amp;quot; meant &amp;quot;Algol-60&amp;quot; for
years. The language didn't have exceptions and so, the presentation of
algorithms continues to this day without exceptions.&lt;/p&gt;
&lt;p&gt;What can one do?&lt;/p&gt;
&lt;p&gt;This.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
\algblock{Try}{EndTry}
\algcblock[Try]{Try}{Except}{EndTry}
\algcblockdefx{Try}{Except}{EndTry}
   [1][Exception]{\textbf{except} \texttt{#1}}

\algrenewtext{Try}{\textbf{try}}
&lt;/pre&gt;
&lt;p&gt;This will extend the notation to add &lt;tt class="docutils literal"&gt;\Try&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;\Except&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;\EndTry&lt;/tt&gt; commands. I think I've done it all more-or-less correctly.
I'm vague on where the &lt;tt class="docutils literal"&gt;\algnotext{EndTry}&lt;/tt&gt; goes, but it seems to be
needed in each &lt;tt class="docutils literal"&gt;\Try&lt;/tt&gt; block to silence the &lt;tt class="docutils literal"&gt;\EndTry&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;As far as I know, I'm the only person who seems to care. There seems to
be little about this anywhere online. I'm guessing it's because the
basics work perfectly, and no one wants this kind of weird add-on.&lt;/p&gt;
</content><category term="Technologies"></category><category term="writing"></category><category term="latex"></category><category term="markup"></category></entry><entry><title>Desktop Notifications and EPIC DESIGN FAIL</title><link href="https://slott56.github.io/2022_02_08-desktop_notifications_and_epic_design_fail.html" rel="alternate"></link><published>2022-02-08T08:00:00-05:00</published><updated>2022-02-08T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-08:/2022_02_08-desktop_notifications_and_epic_design_fail.html</id><summary type="html">&lt;p&gt;I was asked to review code that -- well -- was evil.&lt;/p&gt;
&lt;p&gt;Not like &amp;quot;shabby&amp;quot; or &amp;quot;non-pythonic&amp;quot;. Nothing so simple as that.&lt;/p&gt;
&lt;p&gt;We'll get to the evil in a moment. First, we have to suffer two horrible
indignities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Busy Waiting&lt;/li&gt;
&lt;li&gt;Undefined Post-Conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll beat all three issues to death separately, starting with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was asked to review code that -- well -- was evil.&lt;/p&gt;
&lt;p&gt;Not like &amp;quot;shabby&amp;quot; or &amp;quot;non-pythonic&amp;quot;. Nothing so simple as that.&lt;/p&gt;
&lt;p&gt;We'll get to the evil in a moment. First, we have to suffer two horrible
indignities.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Busy Waiting&lt;/li&gt;
&lt;li&gt;Undefined Post-Conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll beat all three issues to death separately, starting with busy
waiting.&lt;/p&gt;
&lt;div class="section" id="busy-waiting"&gt;
&lt;h2&gt;Busy Waiting&lt;/h2&gt;
&lt;p&gt;The Busy Waiting is a sleep-loop. If you're not familiar, it's this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
while something has not happened yet AND we haven't timed out:
    time.sleep(2)
&lt;/pre&gt;
&lt;p&gt;Which is often a dumb design. Busy waiting is polling. It's a lot of
pointless doing something while waiting for something else.&lt;/p&gt;
&lt;p&gt;There are dozens of message-passing and event-passing frameworks. Any of
those is better than this.&lt;/p&gt;
&lt;p&gt;Folks complain &amp;quot;Why install ZMQ when I could instead write a
busy-waiting loop?&amp;quot;&lt;/p&gt;
&lt;p&gt;Why indeed?&lt;/p&gt;
&lt;p&gt;For me, the primary reason is to avoid polling at fixed intervals, and
instead wait for the notification.&lt;/p&gt;
&lt;p&gt;The asyncio module, confusing as it is, is better than polling. Because
it dispatches events properly.&lt;/p&gt;
&lt;p&gt;This is minor compared with the undefined post-conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="undefined-post-conditions"&gt;
&lt;h2&gt;Undefined Post-Conditions&lt;/h2&gt;
&lt;p&gt;With this crap design, there are two events. There's a race between
them. One will win. The other will be silently lost forever.&lt;/p&gt;
&lt;p&gt;If &amp;quot;something has not happened&amp;quot; is false, the thing has happened. Yay.
The while statement ends.&lt;/p&gt;
&lt;p&gt;If &amp;quot;something has not happened&amp;quot; is true and the timeout occurs, then
Boo. The while statement ends.&lt;/p&gt;
&lt;p&gt;Note the there are two, unrelated post-conditions: the thing has
happened OR the timeout occurred. Is it possible for both to happen?
(hint: yes.)&lt;/p&gt;
&lt;p&gt;Ideally, the timeout and the thing happening are well-separated in time.&lt;/p&gt;
&lt;p&gt;Heh.&lt;/p&gt;
&lt;p&gt;Otherwise, they're coincident, and it's a coin-toss as to which one will
lead to completion of the while statement.&lt;/p&gt;
&lt;p&gt;The code I was asked to review made no provision for this unhappy
coincidence.&lt;/p&gt;
&lt;p&gt;Which leads us to the pure evil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pure-evil"&gt;
&lt;h2&gt;Pure Evil&lt;/h2&gt;
&lt;p&gt;What's pure evil about this is the very clear statement that there are
not enough desktop notification apps, and there's a need for another.&lt;/p&gt;
&lt;p&gt;I asked for justification. Got a stony silence.&lt;/p&gt;
&lt;p&gt;They might claim &amp;quot;It's only a little script that runs in the Terminal
Window,&amp;quot; which is garbage. There are already lots and lots of desktop
apps looking for asynchronous notification of events.&lt;/p&gt;
&lt;p&gt;Email is one of them.&lt;/p&gt;
&lt;p&gt;Do we really need another email-like message queue?&lt;/p&gt;
&lt;p&gt;(Hint: &amp;quot;My email is a lot of junk I ignore&amp;quot; is a personal problem, not a
software product description. Consider learning how to create filters
before writing yet another desktop app.)&lt;/p&gt;
&lt;p&gt;Some enterprises use Slack for notifications.&lt;/p&gt;
&lt;p&gt;What makes it even worse (I said it was pure evil) was a hint about the
context. They were doing batch data prep for some kind of
analytics/Machine Learning thing.&lt;/p&gt;
&lt;p&gt;They were writing this as if Luigi and related Workflow managers didn't
exist.&lt;/p&gt;
&lt;p&gt;Did they not know? If they were going to invent their own, they were off
to a really bad start. Really bad.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="notification"></category><category term="workflow"></category><category term="#python"></category></entry><entry><title>No one wins at Code Golf vs. This is more noise than signal</title><link href="https://slott56.github.io/2022_02_03-no_one_wins_at_code_golf_vs_this_is_more_noise_than_signal.html" rel="alternate"></link><published>2022-02-03T20:14:00-05:00</published><updated>2022-02-03T20:14:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-02-03:/2022_02_03-no_one_wins_at_code_golf_vs_this_is_more_noise_than_signal.html</id><summary type="html">&lt;p&gt;Looking at code. Came to a 20-line block of code that did exactly this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sorted(Path.cwd().glob(&amp;quot;some_pattern[1-9]*.*&amp;quot;), reverse=True)
&lt;/pre&gt;
&lt;p&gt;Twenty lines. Seriously.&lt;/p&gt;
&lt;p&gt;To be fair, 8 of the 20 lines were comments. 3 were blank. Which leaves
9 lines of code to perform the task of a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Looking at code. Came to a 20-line block of code that did exactly this.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sorted(Path.cwd().glob(&amp;quot;some_pattern[1-9]*.*&amp;quot;), reverse=True)
&lt;/pre&gt;
&lt;p&gt;Twenty lines. Seriously.&lt;/p&gt;
&lt;p&gt;To be fair, 8 of the 20 lines were comments. 3 were blank. Which leaves
9 lines of code to perform the task of a one-liner.&lt;/p&gt;
&lt;p&gt;I often say &amp;quot;no one wins at code golf&amp;quot; as a way to talk people out of
trying to minimize Python code into vanishingly small black holes where
no information about the code's design escapes.&lt;/p&gt;
&lt;p&gt;However. Blowing a line of code into 9 lines seems to be just as bad.&lt;/p&gt;
&lt;p&gt;I'll spare you the 9 lines. I will say this, though, the author was
blissfully ignorant that &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects are comparable. So. There were
needless conversions. And. Even after commenting on this, they seemed to
somehow feel (without evidence of any kind) that &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects were
incomparable.&lt;/p&gt;
&lt;p&gt;This is not the first time I've seen folks who like assembler-style
code. There is at most one state-change or attribute reference on each
line of code. The code has a very voluble verticality (VVV™).&lt;/p&gt;
&lt;p&gt;This seems as wrong as code golf.  Neither style provides meaningful
code.&lt;/p&gt;
&lt;p&gt;How can we measure &amp;quot;meaningful&amp;quot;?&lt;/p&gt;
&lt;p&gt;Of the 8 lines of comments, the English summary, the &amp;quot;reverse alphabetic
order&amp;quot; phrase is only a few words. Therefore, the matching code can be
an equally terse few symbols. I think code can parallel natural
language.&lt;/p&gt;
</content><category term="Technologies"></category><category term="code golf"></category><category term="#python"></category></entry><entry><title>How to Test a Random Number Generator</title><link href="https://slott56.github.io/2022_01_18-how_to_test_a_random_number_generator.html" rel="alternate"></link><published>2022-01-18T08:00:00-05:00</published><updated>2022-01-18T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-18:/2022_01_18-how_to_test_a_random_number_generator.html</id><summary type="html">&lt;p&gt;Nowadays, we don't have the same compelling reasons to test a random
number generator. The intervening decades have seen a lot of fruitful
research. Good algorithms.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, however, I still feel a need to work out
the solution to an old problem. See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nowadays, we don't have the same compelling reasons to test a random
number generator. The intervening decades have seen a lot of fruitful
research. Good algorithms.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, however, I still feel a need to work out
the solution to an old problem. See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca.
1968&lt;/a&gt;
for some background on this.&lt;/p&gt;
&lt;p&gt;What could I have done on that ancient NCE Fortran -- with four digit
integers -- to create random numbers? Step 1 was to stop using the
middle-squared generator. It doesn't work.&lt;/p&gt;
&lt;p&gt;Step 2 is to find a Linear Congruential Generator that works. LCG's have
a (relatively) simple form:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
X_{n+1} = (X_n \times a + c) \bmod m
\end{equation*}
&lt;/div&gt;
&lt;p&gt;In this case, the modulo value, &lt;em&gt;m&lt;/em&gt;, is 10,000. What's left is step 3:
find &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; parameters.&lt;/p&gt;
&lt;p&gt;To find suitable parameters, we need battery of empirical tests. Most of
them are extensions to the following class:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from collections import Counter
from typing import Hashable
from functools import cache

class Chi2Test:
    &amp;quot;&amp;quot;&amp;quot;The base class for empirical PRNG tests based on the Chi-2 testing.&amp;quot;&amp;quot;&amp;quot;

    #: The actual distribution, created by ``test()``.
    actual_fq : dict[Hashable, int]

    #: The expected distribution, created by ``__init__()``.
    expected_fq: dict[Hashable, int]

    #: The lower and upper bound on acceptable chi-squared values.
    expected_chi_2_range: tuple[float, float]

    def __init__(self):
        &amp;quot;&amp;quot;&amp;quot;
        A subclass will override this to call ``super().__init__()`` and then
        create the expected distribution.
        &amp;quot;&amp;quot;&amp;quot;
        self._chi2 = None

    def test(self):
        &amp;quot;&amp;quot;&amp;quot;
        A subclass will override this to call ``super().test()`` and then
        create an actual distribution, usually with a distinct seed value.
        &amp;quot;&amp;quot;&amp;quot;
        self._chi2 = None

    &amp;#64;property
    def chi2(self) -&amp;gt; float:
        &amp;quot;&amp;quot;&amp;quot;Return chi-squared metric between actual and expected observations.&amp;quot;&amp;quot;&amp;quot;
        if self._chi2 is None:
            a_e = (
                (self.actual_fq[k], self.expected_fq[k])
                for k in self.expected_fq
                if self.expected_fq[k] &amp;gt; 0
            )
            v = sum((a-e)**2/e for a, e in a_e)
            self._chi2 = v
        return self._chi2

    &amp;#64;property
    def pass_test(self) -&amp;gt; bool:
        return self.expected_chi_2_range[0] &amp;lt;= self.chi2 &amp;lt;= self.expected_chi_2_range[1]
&lt;/pre&gt;
&lt;p&gt;This defines the essence of a chi-squared test. There's another test
that isn't based on chi-squared. The serial correlation where a
correlation coefficient is computed between adjacent pairs of samples.
We'll ignore this special case for now. Instead, we'll focus on the
battery of chi-squared tests.&lt;/p&gt;
&lt;div class="section" id="linear-congruential-pseudo-random-number-generator"&gt;
&lt;h2&gt;Linear Congruential Pseudo-Random Number Generator&lt;/h2&gt;
&lt;p&gt;We'll also need an LC PRNG that's constrained to 4 decimal digits.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class LCM4:
    &amp;quot;&amp;quot;&amp;quot;Constrained by the NCE Fortran 4-digit integer type.&amp;quot;&amp;quot;&amp;quot;
    def __init__(self, a: int, c: int) -&amp;gt; None:
        self.a = a
        self.c = c
    def seed(self, v: int) -&amp;gt; None:
        self.v = v
    def random(self) -&amp;gt; int:
        self.v = (self.a*self.v % 10_000 + self.c) % 10_000
        return self.v
&lt;/pre&gt;
&lt;p&gt;This mirrors the old NCE Fortran on the IBM 1620 computer. 4 decimal
digits. No more.&lt;/p&gt;
&lt;p&gt;We can use this to generate a pile of samples that can be evaluated. I'm
a fan of using generators because they're so efficient. The use of a set
to create a list seems weird, but it's very fast.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def lcg_samples(rng: LCM4, seed: int, n_samples: int = N_SAMPLES) -&amp;gt; list[int]:
    &amp;quot;&amp;quot;&amp;quot;
    Generate a bunch of sample values. A repeat implies a cycle, and we'll stop early.

    &amp;gt;&amp;gt;&amp;gt; lcg_samples(LCM4(1621, 3), 1234)[:12]
    [317, 3860, 7063, 9126, 3249, 6632, 475, 9978, 4341, 6764, 4447, 8590]

    &amp;quot;&amp;quot;&amp;quot;
    rng.seed(seed)
    def until_dup(f: Callable[..., Hashable], n_samples: int) -&amp;gt; Iterator[Hashable]:
        seen: set[Hashable] = set()
        while (v := f()) not in seen and len(seen) &amp;lt; n_samples:
            seen.add(v)
            yield v
    return list(until_dup(rng.random, n_samples))
&lt;/pre&gt;
&lt;p&gt;This function builds a list of values for us. We can then subject the
set of samples to a battery of tests. We'll look at one test as an
example for the others. They're each devilishy clever, and require a
little bit of coding smarts to get them to work correctly and quickly.&lt;/p&gt;
&lt;div class="section" id="frequency-test"&gt;
&lt;h3&gt;Frequency Test&lt;/h3&gt;
&lt;p&gt;Here's one of the tests in the battery of chi-squared tests. This is the
frequency test that examines values to see if they have the right number
of occurrences. We pick a domain, &lt;em&gt;d&lt;/em&gt;, and parcel numbers out into this
domain. We use &lt;span class="math"&gt;\(\\frac{d \\times X_{n}}{10,000}\)&lt;/span&gt; because this tends
to leverage the left-most digits which are somewhat more random than the
right-most digits.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class FQTest(Chi2Test):
    expected_chi_2_range = (7.261, 25.00)

    def __init__(self, d: int = 16, size_samples: int = 6_400) -&amp;gt; None:
        super().__init__()
        #: Size of the domain
        self.d = d
        #: Number of samples expected
        self.size_samples = size_samples
        #: Frequency for Chi-squared comparison
        self.expected_fq = {e: int(self.size_samples/self.d) for e in range(self.d)}

    def test(self, sequence: list[int]) -&amp;gt; None:
        super().test()
        self.actual_fq = Counter(int(self.d*s/10_000) for s in sequence)
&lt;/pre&gt;
&lt;p&gt;We can apply this test to some samples, compare with the expectation,
and save the chi-squared value. This lets us look at LCM parameters to
see if the generator creates suitably random values.&lt;/p&gt;
&lt;p&gt;The essential test protocol is this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
samples = lcg_samples(LCM4(1621, 3), seed=1234)
fqt = FQTest()
fqt.test(samples)
fqt.chi2
&lt;/pre&gt;
&lt;p&gt;The test creates some samples, applies the frequency test. The next step
is to examine the chi-squared value to see if it's in the allowable
range, &lt;span class="math"&gt;\(7.261 \\leq \\chi^2 &amp;lt; 25\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-search-space"&gt;
&lt;h3&gt;The search space&lt;/h3&gt;
&lt;p&gt;Superficially, it seems like there could be 10,000 choices of &lt;em&gt;a&lt;/em&gt; and
10,000 choices of &lt;em&gt;c&lt;/em&gt; parameter values for this PRNG. That's 100 million
combinations. It takes a bit of processing to look at all of those.&lt;/p&gt;
&lt;p&gt;Looking more deeply, the values of &lt;em&gt;c&lt;/em&gt; are often small prime numbers. 1
or 11 or some such. That really cuts down on the search. The values of
&lt;em&gt;a&lt;/em&gt; have a number of other constraints with respect to the modulo value.
Because 10,000 has factors of 4 and 5, this suggests values like &lt;span class="math"&gt;\(20k + 1\)&lt;/span&gt; will work. Sensible combinations are defined by the following
domain:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
combinations = [
    (a, c)
    for c in (1, 3, 7, 11,)
    for a in range(21, 10_000, 20)
]
&lt;/pre&gt;
&lt;p&gt;This is 2,000 distinct combinations, something we can compute on our
laptop.&lt;/p&gt;
&lt;p&gt;The problem we have trying to evaluate these is each combination's
testing is compute-intensive. This means we want to use as many cores of
our machine as we have available. We don't want this to process each
combination serially on a single core. A thread pool isn't going to help
much because the OS doesn't scatter threads among all the cores.&lt;/p&gt;
&lt;p&gt;Because the OS likes to scatter processes among all the cores, we need a
process pool.&lt;/p&gt;
&lt;p&gt;Here's how to spread the work among the cores:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from concurrent.futures import ProcessPoolExecutor, as_completed

combinations = [
    (a, c)
    for c in (1, 3, 7, 11)
    for a in range(21, 10_000, 20)
]

with Progress() as progress:
    setup_task = progress.add_task(&amp;quot;setup ...&amp;quot;, total=len(combinations))
    finish_task = progress.add_task(&amp;quot;finish...&amp;quot;, total=len(combinations))

    with ProcessPoolExecutor(max_workers=8) as pool:
        futures = [
            pool.submit(evaluate, (a, c))
            for a, c in progress.track(combinations, task_id=setup_task, total=len(combinations))
        ]
        results = [
            f.result()
            for f in progress.track(as_completed(futures), task_id=finish_task, total=len(combinations))
        ]
&lt;/pre&gt;
&lt;p&gt;This will occupy *all* the cores of the computer executing the
`evaluate()` function. This function applies the battery of tests to
each combination of a and c. We can then check the results for
combinations where the chi-squared results for each test are in the
acceptable ranges for the test.&lt;/p&gt;
&lt;p&gt;It's fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Use &lt;strong&gt;a=1621&lt;/strong&gt; and &lt;strong&gt;c=3&lt;/strong&gt; can generate acceptable random numbers using
4 decimal digits.&lt;/p&gt;
&lt;p&gt;Here's some output using only a subset of the tests.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(rngtest2) % python lcmfinder.py
setup ... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
finish... ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:00
2361  1  11.46  14.22  46.64  63.76   2.30  11.33   2.16   2.16
 981  3  10.28  15.24  52.56  66.32   2.28  11.08  10.47  10.47
1221  3  10.19  14.12  48.72  62.08   3.03  10.08   2.59   2.59
1621  3  11.70  14.91  47.12  69.52   2.23   9.69   0.86   0.86
&lt;/pre&gt;
&lt;p&gt;The output shows the &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;c&lt;/em&gt; values followed by the minimum and
maximum chi-squared values for each test. The chi-squared values are in
pairs for the frequency test, serial pairs test, gap test, and poker
test.&lt;/p&gt;
&lt;p&gt;Each test uses about two dozen seed values to generate piles of 3,200
samples and subject each pile of samples to a battery of tests. The seed
values, BTW, are &lt;tt class="docutils literal"&gt;range(1, 256, 11)&lt;/tt&gt;; kind of arbitrary. Once I find
the short list of candidates, I can test with more seeds. There are only
10,000 seed values, so, this can be done in finite time.&lt;/p&gt;
&lt;p&gt;For example, a=1621, c=3, had chi-squared values between 11.70 and 14.91
for the frequency test. Well within the 7.261 to 25.0 range required.
The remaining numbers show that it passed the other tests, also.&lt;/p&gt;
&lt;p&gt;For completeness, I intend to implement the remaining half-dozen or so
tests. Then I need to make sure the sphinx-produced documentation looks
good. I've done this
before. &lt;a class="reference external" href="http://slott.itmaybeahack.com/_static/rngtest/rngdoc.html"&gt;http://slott.itmaybeahack.com/_static/rngtest/rngdoc.html&lt;/a&gt; It's
kind of an obsession, I think.&lt;/p&gt;
&lt;p&gt;Looking back to my 1968 self, this would have been better than the
middle-squared nonsense that caused me to struggle with bad games that
behaved badly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Technologies"></category><category term="#python"></category><category term="random numbers"></category><category term="multiprocessing"></category></entry><entry><title>The Old Days -- ca. 2000 -- Empirical Tests of Random Numbers (Python and Chi-Square Testing)</title><link href="https://slott56.github.io/2022_01_11-the_old_days_ca_2000_empirical_tests_of_random_numbers_python_and_chi_square_testing.html" rel="alternate"></link><published>2022-01-11T08:00:00-05:00</published><updated>2022-01-11T08:00:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-11:/2022_01_11-the_old_days_ca_2000_empirical_tests_of_random_numbers_python_and_chi_square_testing.html</id><summary type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca. 1974 Random Numbers Before
Python&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;We'll get to Python after reminiscing about the olden days. I want to
provide some back story on why
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; has had a huge
impact on ordinary hacks like myself.&lt;/p&gt;
&lt;p&gt;What we're talking about is how we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Days -- ca. 1974 Random Numbers Before
Python&lt;/a&gt;
for some background.&lt;/p&gt;
&lt;p&gt;We'll get to Python after reminiscing about the olden days. I want to
provide some back story on why
&lt;a class="reference external" href="https://docs.sympy.org/latest/index.html"&gt;sympy&lt;/a&gt; has had a huge
impact on ordinary hacks like myself.&lt;/p&gt;
&lt;p&gt;What we're talking about is how we struggled with randomness before&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/dev/random&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;The Mersenne Twister Pseudo-Random Number Generator (PRNG)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pre-1997, we performed empirical tests of PRNG's to find one that was
random enough for our application. Maybe we were doing random samples of
data to compare statistical measures. Maybe we were writing a game. What
was important was a way to create a sequence of values that passed a
battery of statistical tests.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://link.springer.com/chapter/10.1007%2F978-1-4612-1690-2_7"&gt;https://link.springer.com/chapter/10.1007%2F978-1-4612-1690-2_7&lt;/a&gt; for
the kind of material we salivated over.&lt;/p&gt;
&lt;p&gt;While there are an infinite number of bad algorithms, some math reveals
that the Linear Congruential Generator (LCG) is simple and effective.
Each new number is based on the previous number:
&lt;span class="math"&gt;\(X_{n+1} = (X_n \times a + c) \bmod m\)&lt;/span&gt;. There's a multiply and an add, modulo some
big number. The actual samples are often a subset of the bits in
&lt;span class="math"&gt;\(X_{n}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;After the Mersenne Twister became widely used, we essentially stopped
looking at alternative random number algorithms. Before then -- well --
things weren't so good.&lt;/p&gt;
&lt;p&gt;Here are some classics that I tested.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ACM Collected Algorithms (CALGO) number 294 is a random-number
generator. This is so obsolete, I have trouble finding links to it.
It was a 28-bit generator.&lt;/li&gt;
&lt;li&gt;The ACM Collected Algorithms (CALGO) number 266 has code still
available. See &lt;a class="reference external" href="http://www.netlib.no/netlib/toms/266"&gt;toms/266&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The Cheney-Kincaid generator is available. See &lt;a class="reference external" href="https://www.netlib.org/cgi-bin/netlibfiles.pl?filename=/cheney-kincaid/random.f"&gt;random.f plus
dependencies&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These formed a kind of benchmark I used when looking at Python's
built-in Mersenne Twister.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Nowadays, you can find a great list of LCM PRNG's at&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linear_congruential_generator"&gt;https://en.wikipedia.org/wiki/Linear_congruential_generator&lt;/a&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;div class="section" id="python-empirical-testing"&gt;
&lt;h2&gt;Python Empirical Testing&lt;/h2&gt;
&lt;p&gt;One of the early questions I had was whether or not the &lt;tt class="docutils literal"&gt;random&lt;/tt&gt;
module in Python stacked up against these older RNG's that I was a
little more familiar with.&lt;/p&gt;
&lt;p&gt;So, I wrote a big, fancy random number testing tool in Python.&lt;/p&gt;
&lt;p&gt;When? Around 2000. I started this in the Python 1.6 and 2.1 era. I have
files showing results from Python 2.3 (#2, Jul 30 2003). This is about
when I stopped fooling around with this and moved on to trusting that
Python really did work and was -- perhaps -- the best approach to
working with randomly-sampled data for statistical work.&lt;/p&gt;
&lt;p&gt;The OO design for the test classes was Lavish Over The Top (LOTT™) OO:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Too Many Methods&lt;/li&gt;
&lt;li&gt;Too Many Superclasses&lt;/li&gt;
&lt;li&gt;No Duck Typing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We won't look at that code. It's regrettable and stems from trying to
make Python into C++.&lt;/p&gt;
&lt;p&gt;What I do want to look at is the essential Chi-Squared test methodology.
This is some cool stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comparing-expected-and-actual"&gt;
&lt;h2&gt;Comparing Expected and Actual&lt;/h2&gt;
&lt;p&gt;The chi-squared metric is a way to compare actual and expected
distributions. You can read about it on your own time. It's a way to
establish if data is random or there's something else going on that's
not random. i.e., a trend or a bias.&lt;/p&gt;
&lt;p&gt;The empirical tests for PRNG's that Knuth defines all come with
chi-squared values that bracket acceptable levels of randomness. For the
purposes of writing a working set of tests the magic chi-squared values
supplied by Knuth are fine. Magical. But fine. Really. Trust them.&lt;/p&gt;
&lt;p&gt;If you make modifications, you'd use your statistics text-book. You'd
open to the back where it had a Chi-Squared table. That table gave you
chi-squared values for a given degree of freedom and a given probability
of being random.&lt;/p&gt;
&lt;p&gt;Or, You could look for the NIST handbook online. It has a section on
chi-squared testing.
See &lt;a class="reference external" href="https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm"&gt;https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm&lt;/a&gt;.
Same drill. Degrees of freedom and probability map to a chi-squared
threshold.&lt;/p&gt;
&lt;p&gt;But.&lt;/p&gt;
&lt;p&gt;Were do these magical Chi-Squared values come from? This gets
interesting in a useless-sidebar kind of way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chi-squared-values"&gt;
&lt;h2&gt;Chi-Squared Values&lt;/h2&gt;
&lt;p&gt;There's a really, really terse summary of chi-squared numbers
here: &lt;a class="reference external" href="https://www.danielsoper.com/statcalc/formulas.aspx?id=11"&gt;https://www.danielsoper.com/statcalc/formulas.aspx?id=11&lt;/a&gt;. This is
all you need to know. It may be too terse to help you learn about it,
but it's a handy reference.&lt;/p&gt;
&lt;p&gt;We need to evaluate two functions: partial gamma and gamma. These are
defined as integrals. And they're nasty levels of complexity. Nasty.&lt;/p&gt;
&lt;p&gt;This kind of nasty:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\gamma (s,z)=\int_{0}^{z}t^{s-1} e^{-t} dt
\end{equation*}
&lt;/div&gt;
&lt;div class="math"&gt;
\begin{equation*}
\Gamma (z)=\int_{0}^{\infty} t^{z-1} e^{-t} dt
\end{equation*}
&lt;/div&gt;
&lt;p&gt;These are not easy things to evaluate. Back to the ACM Collected
Algorithms (CALGO) to find ways to evaluate these integrals. There are
algorithms in CALGO 435 and 654 that are expressed as Fortran for
evaluating these. This ain't all, of course, we need Stirling Numbers
and Bernoulli Numbers. So there's a lot going on here.&lt;/p&gt;
&lt;p&gt;A lot of this can be transliterated from Fortran. The resulting code is
frankly quite ugly, and requires extensive test cases. Fortran with
GOTO's requires some cleverness to unwind the conceptual for/while/if
constructs.&lt;/p&gt;
&lt;p&gt;OR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enter-sympy"&gt;
&lt;h2&gt;Enter Sympy&lt;/h2&gt;
&lt;p&gt;In the 20+ years since I implemented my empirical PRNG tests &amp;quot;the hard
way,&amp;quot; &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; has come of age.&lt;/p&gt;
&lt;p&gt;Check this out&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from sympy import Sum, rf
from sympy.abc import k, s, z
from sympy.functions import exp
from sympy import oo
Sum(z**s * exp(-z) * z**k / rf(s, k+1), (k, 0, oo)).simplify()
&lt;/pre&gt;
&lt;p&gt;I could use this in Jupyter Lab to display a computation for the partial
gamma function.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
z^{s}e^{-z}\sum_{k=0}^{\infty }{\dfrac {z^{k}}{s^{\overline {k+1}}}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;This requires a fancy Rising Factorial computation,
the &lt;span class="math"&gt;\(s^{\overline {k+1}}\)&lt;/span&gt; term. This is available in &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; as the &lt;tt class="docutils literal"&gt;rf(s, k+1)&lt;/tt&gt;
expression.&lt;/p&gt;
&lt;p&gt;It turns out that sympy offers lowergamma() and gamm() as first-class
functions. I don't even need to work through the closed-form
simplifications.&lt;/p&gt;
&lt;p&gt;I could do this...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def gammap(s: float, z: float) -&amp;gt; float:
    return (z**s * exp(-z) * Sum(z**k / rf(s, k+1), (k, 0, oo))).evalf()

def gamma(z: float) -&amp;gt; float:
    return integrate(t**(z-1) * exp(-t), (t, 0, oo)).doit()
&lt;/pre&gt;
&lt;p&gt;It works well. And it provides elegant documentation. But I don't need
to. I can write this, instead,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def chi2P(chi2: float, degF: int) -&amp;gt; float:
   return lowergamma(degF/2, chi2/2) / gamma(degF/2)
&lt;/pre&gt;
&lt;p&gt;This is used to compute the probability of seeing a chi-squared value.&lt;/p&gt;
&lt;p&gt;For the frequency test, as an example. We partition the random numbers
into 16 bins. These gives us 15 degrees of freedom. We want chi-squared
values between 7.2578125 and 25.0.&lt;/p&gt;
&lt;p&gt;Or.&lt;/p&gt;
&lt;p&gt;Given a chi-squared value of 6.0, we can say the probability of 0.02 is
suspiciously low, less than 0.05 level that we've decided signifies
mostly random. The data is &amp;quot;too random&amp;quot;; that is to say it's too close
to the ideal distribution to be trusted.&lt;/p&gt;
&lt;p&gt;The established practice was to lookup a chi-squared value because you
couldn't easily compute the probability of that value. With sympy, we
can compute the probability. It's slow, so we have to optimize this
carefully and not compute probabilities more frequently than necessary.&lt;/p&gt;
&lt;p&gt;We can, for example, compute chi-squared values for a number of seeds,
take the max and min of these and compute the probability of those two
boundary values. This will bracket the probability that the pseudo
random number generator is producing suitably random numbers.&lt;/p&gt;
&lt;p&gt;This also applies to any process we're measuring with results that might
vary randomly or might indicate a consistent problem that requires
evaluation.&lt;/p&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; eliminates the complexity of understanding these
beautifully hand-crafted antique algorithms. It acts as a kind of
super-compiler. From Math to an intermediate AST to a concrete
implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Technologies"></category><category term="#python"></category><category term="fortran"></category><category term="random numbers"></category></entry><entry><title>The Old Days -- ca. 1974 -- Random Numbers before Python</title><link href="https://slott56.github.io/2022_01_04-the_old_days_ca_1974_random_numbers_before_python.html" rel="alternate"></link><published>2022-01-04T20:52:00-05:00</published><updated>2022-01-04T20:52:00-05:00</updated><author><name>S.Lott</name></author><id>tag:slott56.github.io,2022-01-04:/2022_01_04-the_old_days_ca_1974_random_numbers_before_python.html</id><summary type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Old Days -- ca.
1968&lt;/a&gt;&amp;quot;
for my first exposure to an actual computer. Nothing about Python there.
But. It's what motivated me to get started learning to code -- I was
fascinated by games that involved randomization. Games with cards or
dice.&lt;/p&gt;
&lt;p&gt;After filling in a little background, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;See &amp;quot;&lt;a class="reference external" href="https://slott56.github.io/2021_12_28-the_old_old_days_ca_1968.html"&gt;The Old Old Days -- ca.
1968&lt;/a&gt;&amp;quot;
for my first exposure to an actual computer. Nothing about Python there.
But. It's what motivated me to get started learning to code -- I was
fascinated by games that involved randomization. Games with cards or
dice.&lt;/p&gt;
&lt;p&gt;After filling in a little background, I will get to the Python part of
this. First, however, I want to compare the olden days with what we have
now.&lt;/p&gt;
&lt;p&gt;From 1969 to 1974 I had access to the high school's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/IBM_1620"&gt;IBM
1620&lt;/a&gt;. This means programming
in &lt;a class="reference external" href="https://www.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP1620.html"&gt;IBM's SPS
assembler&lt;/a&gt;,
or using the NCE Load-and-Go Fortran compiler.
See &lt;a class="reference external" href="https://www.cs.utexas.edu/users/EWD/transcriptions/EWD00xx/EWD37.html"&gt;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD00xx/EWD37.html&lt;/a&gt;
for a scathing review of the problems with this machine.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.bitsavers.org/pdf/ibm/1620/GC20-1603-10_1620_Catalog_of_Programs_Jan71.pdf"&gt;http://www.bitsavers.org/pdf/ibm/1620/GC20-1603-10_1620_Catalog_of_Programs_Jan71.pdf&lt;/a&gt;
Page 36 has this:&lt;/p&gt;
&lt;img alt="Load-and-Go Fortran Manual Cover Page" src="https://slott56.github.io/media/39D362EE-AF0A-4E0E-B4A2-056A99E94BE8.jpeg" style="width: 238px; height: 320px;" /&gt;
&lt;p&gt;That's a quick overview of my earliest programming language. What's
essential here is the NCE Fortran used 4-digit integers.&lt;/p&gt;
&lt;p&gt;I'll repeat that for those skimming, and wondering what the Python
connection is.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Four. Digit. Integers.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;That's four decimal digits. Decimal digits required at least 4
hardware bits. IBM 1620 digits also had flags and signs, so, there
were maybe 6 bits per digit. 24 bits of hardware used to represent
just under 14 bits of useful information.&lt;/p&gt;
&lt;p&gt;My interest is in simulation and randomness. So. I have this question
of how to create random sequences of numbers limited to 4-digit
integers.&lt;/p&gt;
&lt;div class="section" id="prng-algorithms"&gt;
&lt;h2&gt;PRNG Algorithms&lt;/h2&gt;
&lt;p&gt;There are a number of classic Pseudo-Random Number Generator (PRNG)
algorithms from the early days before Mersenne Twister took over in
1997.&lt;/p&gt;
&lt;p&gt;We used to be super-careful to emphasize the letter &lt;strong&gt;P&lt;/strong&gt; in
&lt;strong&gt;P&lt;/strong&gt;RNG because the numbers we're really random. They just behaved
randomish. This is contrasted with real randomness, also known as
&lt;em&gt;entropy&lt;/em&gt;. For example, &lt;tt class="docutils literal"&gt;/dev/random&lt;/tt&gt; device driver has a fair
amount of entropy. I think it's comparable to a person throwing dice
across a table. I think it's as random as a noise-generating diode
with a sample-and-hold circuit to pluck out random values from the
noise.&lt;/p&gt;
&lt;p&gt;Pre-Mersenne-Twister -- pre-1997 -- we worried a lot about random
number generation. See Knuth, Donald E. &lt;em&gt;The Art of Computer
Programming, Volume 2, Seminumerical Algorithms&lt;/em&gt;, Addison-Wesley,
1969. Section 3.3.2. covers empirical testing of random number
generators. Section 3.3.1. covers the Chi-squared test for fit
between actual and expected frequency distributions.&lt;/p&gt;
&lt;p&gt;Back in the olden days, it was stylish to perform an empirical test
(or ten) to confirm we really had &amp;quot;good&amp;quot; random numbers. The built-in
libraries that came with your compiler or OS could not be trusted
without evidence.&lt;/p&gt;
&lt;p&gt;One of the classic (bad) PRNG's is the &amp;quot;Middle-Squared&amp;quot; method.
See &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Middle-square_method"&gt;https://en.wikipedia.org/wiki/Middle-square_method&lt;/a&gt;. I learned
about this in the 70's. And used it in the old NCE Fortran.&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;Four. Digit. Integers&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Did I mention that the Fortran compiler used &lt;strong&gt;four&lt;/strong&gt; decimal digits
for integers? That means plucking the middle two digits out of a
four-digit number. How random can that be?&lt;/p&gt;
&lt;p&gt;Not very. The longest possible sequence is 100 numbers. If, by some
miracle, you found a seed number with the right properties and only
two digits.&lt;/p&gt;
&lt;p&gt;Nowadays I can, in Python, do a quick middle-squared analysis for all
100 seed values.&lt;/p&gt;
&lt;p&gt;This kind of thing.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def csqr4(value: int) -&amp;gt; list[int]:
    &amp;quot;&amp;quot;&amp;quot;The 4 decimal digit center-squared PRNG.&amp;quot;&amp;quot;&amp;quot;
    sequence = []
    while value not in sequence:
        sequence.append(value)
        value = (((value**2) // 10) % 100)
    return sequence
&lt;/pre&gt;
&lt;p&gt;Which you can run and see that &lt;strong&gt;all&lt;/strong&gt; of my early attempts at games
and simulations were doomed. The seed values of 76, 42, and 69
provided kind of long sequences of almost random-seeming numbers.
Otherwise, pfft, this was junk computer science. 50% of the seeds
provide 5 or fewer numbers before repeating.&lt;/p&gt;
&lt;p&gt;For blackjack, a few random numbers for shuffling &lt;em&gt;might&lt;/em&gt; be enough.
For other games, the lack of randomness made the outcomes trivially
predictable.&lt;/p&gt;
&lt;p&gt;What's funny is how far the state of the art has moved since then.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Hardware now has more than 20,000 decimal digits (about 10K bytes) of storage.&lt;/li&gt;
&lt;li&gt;Software with algorithms that are really, really clever.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's hard to understate these two advances, particularly, the second
one. I'll return to the algorithm thing a lot in the next few posts.&lt;/p&gt;
&lt;p&gt;My focus was on games and randomization. Ideally, simple stuff.
But... under the hood, it's not simple. I've spent some time (not
much, and not in much depth) looking at the tip of this iceberg.&lt;/p&gt;
&lt;p&gt;It served me as an incentive to dive just a little more deeply into a
topic, like math or a programming language or a statistical tool.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technologies"></category><category term="#python"></category><category term="fortran"></category><category term="random numbers"></category></entry></feed>